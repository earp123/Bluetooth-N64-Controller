
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 84 00 20 c9 44 01 00 1f 2d 02 00 9d 44 01 00     ... .D...-...D..
  10:	9d 44 01 00 9d 44 01 00 9d 44 01 00 00 00 00 00     .D...D...D......
	...
  2c:	d1 3d 01 00 9d 44 01 00 00 00 00 00 7d 3d 01 00     .=...D......}=..
  3c:	9d 44 01 00                                         .D..

00000040 <_irq_vector_table>:
  40:	81 3e 01 00 05 4f 02 00 81 3e 01 00 81 3e 01 00     .>...O...>...>..
  50:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  60:	b3 4e 02 00 81 3e 01 00 81 3e 01 00 eb 4e 02 00     .N...>...>...N..
  70:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  80:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  90:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  a0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  b0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  c0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  d0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  e0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..
  f0:	81 3e 01 00 81 3e 01 00 81 3e 01 00 81 3e 01 00     .>...>...>...>..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18d>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x179>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc3>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xab>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x10d>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x109>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x123>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x171>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x159>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd7>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x18>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc8>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_LONG_WQ_STACK_SIZE+0x98>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <__z_interrupt_stack_SIZEOF+0x28>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__aeabi_d2f>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     8a4:	bf24      	itt	cs
     8a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     8aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     8ae:	d90d      	bls.n	8cc <__aeabi_d2f+0x30>
     8b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     8b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     8b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     8bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     8c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     8c4:	bf08      	it	eq
     8c6:	f020 0001 	biceq.w	r0, r0, #1
     8ca:	4770      	bx	lr
     8cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     8d0:	d121      	bne.n	916 <__aeabi_d2f+0x7a>
     8d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     8d6:	bfbc      	itt	lt
     8d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     8dc:	4770      	bxlt	lr
     8de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     8e6:	f1c2 0218 	rsb	r2, r2, #24
     8ea:	f1c2 0c20 	rsb	ip, r2, #32
     8ee:	fa10 f30c 	lsls.w	r3, r0, ip
     8f2:	fa20 f002 	lsr.w	r0, r0, r2
     8f6:	bf18      	it	ne
     8f8:	f040 0001 	orrne.w	r0, r0, #1
     8fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     900:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     904:	fa03 fc0c 	lsl.w	ip, r3, ip
     908:	ea40 000c 	orr.w	r0, r0, ip
     90c:	fa23 f302 	lsr.w	r3, r3, r2
     910:	ea4f 0343 	mov.w	r3, r3, lsl #1
     914:	e7cc      	b.n	8b0 <__aeabi_d2f+0x14>
     916:	ea7f 5362 	mvns.w	r3, r2, asr #21
     91a:	d107      	bne.n	92c <__aeabi_d2f+0x90>
     91c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     920:	bf1e      	ittt	ne
     922:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     926:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     92a:	4770      	bxne	lr
     92c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     930:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     934:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     938:	4770      	bx	lr
     93a:	bf00      	nop

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295
     94c:	f04f 30ff 	movne.w	r0, #4294967295
     950:	f000 b80c 	b.w	96c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f00b fea2 	bl	c6a4 <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__aeabi_idiv0>:
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <ocrypto_bigint_add256>:
     970:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     974:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     978:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     97c:	185b      	adds	r3, r3, r1
     97e:	eb54 040c 	adcs.w	r4, r4, ip
     982:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     986:	414d      	adcs	r5, r1
     988:	eb56 060c 	adcs.w	r6, r6, ip
     98c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     990:	414f      	adcs	r7, r1
     992:	eb58 080c 	adcs.w	r8, r8, ip
     996:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     99a:	eb59 0901 	adcs.w	r9, r9, r1
     99e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     9a2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     9a6:	4180      	sbcs	r0, r0
     9a8:	3001      	adds	r0, #1
     9aa:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9ae:	4770      	bx	lr

000009b0 <ocrypto_bigint_sub256>:
     9b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9b4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     9b8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     9bc:	1a5b      	subs	r3, r3, r1
     9be:	eb74 040c 	sbcs.w	r4, r4, ip
     9c2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     9c6:	418d      	sbcs	r5, r1
     9c8:	eb76 060c 	sbcs.w	r6, r6, ip
     9cc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     9d0:	418f      	sbcs	r7, r1
     9d2:	eb78 080c 	sbcs.w	r8, r8, ip
     9d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     9da:	eb79 0901 	sbcs.w	r9, r9, r1
     9de:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     9e2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     9e6:	4180      	sbcs	r0, r0
     9e8:	4240      	negs	r0, r0
     9ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9ee:	4770      	bx	lr

000009f0 <ocrypto_bigint_cadd256>:
     9f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9f4:	4252      	negs	r2, r2
     9f6:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     9fa:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     9fe:	4017      	ands	r7, r2
     a00:	19db      	adds	r3, r3, r7
     a02:	ea18 0802 	ands.w	r8, r8, r2
     a06:	eb54 0408 	adcs.w	r4, r4, r8
     a0a:	ea19 0902 	ands.w	r9, r9, r2
     a0e:	eb55 0509 	adcs.w	r5, r5, r9
     a12:	ea1a 0a02 	ands.w	sl, sl, r2
     a16:	eb56 060a 	adcs.w	r6, r6, sl
     a1a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     a1c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     a20:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     a24:	4017      	ands	r7, r2
     a26:	417b      	adcs	r3, r7
     a28:	ea18 0802 	ands.w	r8, r8, r2
     a2c:	eb54 0408 	adcs.w	r4, r4, r8
     a30:	ea19 0902 	ands.w	r9, r9, r2
     a34:	eb55 0509 	adcs.w	r5, r5, r9
     a38:	ea1a 0a02 	ands.w	sl, sl, r2
     a3c:	eb56 060a 	adcs.w	r6, r6, sl
     a40:	c078      	stmia	r0!, {r3, r4, r5, r6}
     a42:	4180      	sbcs	r0, r0
     a44:	3001      	adds	r0, #1
     a46:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     a4a:	4770      	bx	lr

00000a4c <ocrypto_bigint_csub256>:
     a4c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     a50:	4252      	negs	r2, r2
     a52:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     a56:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     a5a:	4017      	ands	r7, r2
     a5c:	1bdb      	subs	r3, r3, r7
     a5e:	ea18 0802 	ands.w	r8, r8, r2
     a62:	eb74 0408 	sbcs.w	r4, r4, r8
     a66:	ea19 0902 	ands.w	r9, r9, r2
     a6a:	eb75 0509 	sbcs.w	r5, r5, r9
     a6e:	ea1a 0a02 	ands.w	sl, sl, r2
     a72:	eb76 060a 	sbcs.w	r6, r6, sl
     a76:	c078      	stmia	r0!, {r3, r4, r5, r6}
     a78:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     a7c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     a80:	4017      	ands	r7, r2
     a82:	41bb      	sbcs	r3, r7
     a84:	ea18 0802 	ands.w	r8, r8, r2
     a88:	eb74 0408 	sbcs.w	r4, r4, r8
     a8c:	ea19 0902 	ands.w	r9, r9, r2
     a90:	eb75 0509 	sbcs.w	r5, r5, r9
     a94:	ea1a 0a02 	ands.w	sl, sl, r2
     a98:	eb76 060a 	sbcs.w	r6, r6, sl
     a9c:	c078      	stmia	r0!, {r3, r4, r5, r6}
     a9e:	4180      	sbcs	r0, r0
     aa0:	4240      	negs	r0, r0
     aa2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     aa6:	4770      	bx	lr

00000aa8 <ocrypto_bigint_cswap256>:
     aa8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     aac:	4252      	negs	r2, r2
     aae:	f04f 0804 	mov.w	r8, #4

00000ab2 <cswap256_loop>:
     ab2:	e890 0030 	ldmia.w	r0, {r4, r5}
     ab6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     aba:	1ba3      	subs	r3, r4, r6
     abc:	4013      	ands	r3, r2
     abe:	1ae4      	subs	r4, r4, r3
     ac0:	18f6      	adds	r6, r6, r3
     ac2:	1beb      	subs	r3, r5, r7
     ac4:	4013      	ands	r3, r2
     ac6:	1aed      	subs	r5, r5, r3
     ac8:	18ff      	adds	r7, r7, r3
     aca:	c030      	stmia	r0!, {r4, r5}
     acc:	c1c0      	stmia	r1!, {r6, r7}
     ace:	f1b8 0801 	subs.w	r8, r8, #1
     ad2:	d1ee      	bne.n	ab2 <cswap256_loop>
     ad4:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <ocrypto_mul256_noframe>:
     adc:	b500      	push	{lr}
     ade:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     ae2:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     ae6:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     aea:	b402      	push	{r1}
     aec:	fba7 5102 	umull	r5, r1, r7, r2
     af0:	950a      	str	r5, [sp, #40]	; 0x28
     af2:	fba8 0b02 	umull	r0, fp, r8, r2
     af6:	fbe7 1063 	umaal	r1, r0, r7, r3
     afa:	fbe9 b062 	umaal	fp, r0, r9, r2
     afe:	910b      	str	r1, [sp, #44]	; 0x2c
     b00:	fba8 5103 	umull	r5, r1, r8, r3
     b04:	fbea 0162 	umaal	r0, r1, sl, r2
     b08:	fbe7 b564 	umaal	fp, r5, r7, r4
     b0c:	fbe7 0566 	umaal	r0, r5, r7, r6
     b10:	fbe8 1566 	umaal	r1, r5, r8, r6
     b14:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     b18:	fba9 b603 	umull	fp, r6, r9, r3
     b1c:	fbea 1663 	umaal	r1, r6, sl, r3
     b20:	fbec 5663 	umaal	r5, r6, ip, r3
     b24:	fbe8 0b64 	umaal	r0, fp, r8, r4
     b28:	fbe9 1b64 	umaal	r1, fp, r9, r4
     b2c:	fbea 5b64 	umaal	r5, fp, sl, r4
     b30:	fbec 6b64 	umaal	r6, fp, ip, r4
     b34:	900d      	str	r0, [sp, #52]	; 0x34
     b36:	fbac 3002 	umull	r3, r0, ip, r2
     b3a:	9c05      	ldr	r4, [sp, #20]
     b3c:	fbee 5062 	umaal	r5, r0, lr, r2
     b40:	fbe9 6064 	umaal	r6, r0, r9, r4
     b44:	fbea b064 	umaal	fp, r0, sl, r4
     b48:	fbe7 3164 	umaal	r3, r1, r7, r4
     b4c:	fbe8 5164 	umaal	r5, r1, r8, r4
     b50:	9c06      	ldr	r4, [sp, #24]
     b52:	fbe8 6164 	umaal	r6, r1, r8, r4
     b56:	fbe9 b164 	umaal	fp, r1, r9, r4
     b5a:	fbea 0164 	umaal	r0, r1, sl, r4
     b5e:	930e      	str	r3, [sp, #56]	; 0x38
     b60:	fba7 3204 	umull	r3, r2, r7, r4
     b64:	9c07      	ldr	r4, [sp, #28]
     b66:	fbe7 6264 	umaal	r6, r2, r7, r4
     b6a:	fbe8 b264 	umaal	fp, r2, r8, r4
     b6e:	fbe9 0264 	umaal	r0, r2, r9, r4
     b72:	fbea 1264 	umaal	r1, r2, sl, r4
     b76:	9c04      	ldr	r4, [sp, #16]
     b78:	fbe9 5364 	umaal	r5, r3, r9, r4
     b7c:	fbea 6364 	umaal	r6, r3, sl, r4
     b80:	9c08      	ldr	r4, [sp, #32]
     b82:	fbe7 b364 	umaal	fp, r3, r7, r4
     b86:	fbe8 0364 	umaal	r0, r3, r8, r4
     b8a:	fbe9 1364 	umaal	r1, r3, r9, r4
     b8e:	fbea 2364 	umaal	r2, r3, sl, r4
     b92:	950f      	str	r5, [sp, #60]	; 0x3c
     b94:	f85d 9b04 	ldr.w	r9, [sp], #4
     b98:	e899 0600 	ldmia.w	r9, {r9, sl}
     b9c:	f8dd 8000 	ldr.w	r8, [sp]
     ba0:	fba9 5408 	umull	r5, r4, r9, r8
     ba4:	fbea b468 	umaal	fp, r4, sl, r8
     ba8:	f8dd 8010 	ldr.w	r8, [sp, #16]
     bac:	fbec 0468 	umaal	r0, r4, ip, r8
     bb0:	fbee 1468 	umaal	r1, r4, lr, r8
     bb4:	fbe9 2468 	umaal	r2, r4, r9, r8
     bb8:	fbea 3468 	umaal	r3, r4, sl, r8
     bbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
     bc0:	fbee 6568 	umaal	r6, r5, lr, r8
     bc4:	fbe9 b568 	umaal	fp, r5, r9, r8
     bc8:	fbea 0568 	umaal	r0, r5, sl, r8
     bcc:	f8dd 8014 	ldr.w	r8, [sp, #20]
     bd0:	fbec 1568 	umaal	r1, r5, ip, r8
     bd4:	fbee 2568 	umaal	r2, r5, lr, r8
     bd8:	fbe9 3568 	umaal	r3, r5, r9, r8
     bdc:	fbea 4568 	umaal	r4, r5, sl, r8
     be0:	960f      	str	r6, [sp, #60]	; 0x3c
     be2:	f8dd 8008 	ldr.w	r8, [sp, #8]
     be6:	fbae 7608 	umull	r7, r6, lr, r8
     bea:	fbe9 0668 	umaal	r0, r6, r9, r8
     bee:	fbea 1668 	umaal	r1, r6, sl, r8
     bf2:	f8dd 8018 	ldr.w	r8, [sp, #24]
     bf6:	fbec 2668 	umaal	r2, r6, ip, r8
     bfa:	fbee 3668 	umaal	r3, r6, lr, r8
     bfe:	fbe9 4668 	umaal	r4, r6, r9, r8
     c02:	fbea 5668 	umaal	r5, r6, sl, r8
     c06:	f8dd 800c 	ldr.w	r8, [sp, #12]
     c0a:	fbec b768 	umaal	fp, r7, ip, r8
     c0e:	fbee 0768 	umaal	r0, r7, lr, r8
     c12:	fbe9 1768 	umaal	r1, r7, r9, r8
     c16:	fbea 2768 	umaal	r2, r7, sl, r8
     c1a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     c1e:	fbec 3768 	umaal	r3, r7, ip, r8
     c22:	fbee 4768 	umaal	r4, r7, lr, r8
     c26:	fbe9 5768 	umaal	r5, r7, r9, r8
     c2a:	fbea 6768 	umaal	r6, r7, sl, r8
     c2e:	b008      	add	sp, #32
     c30:	bd00      	pop	{pc}
     c32:	bf00      	nop

00000c34 <ocrypto_bigint_mul256>:
     c34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c38:	b087      	sub	sp, #28
     c3a:	f7ff ff4f 	bl	adc <ocrypto_mul256_noframe>
     c3e:	f8dd 801c 	ldr.w	r8, [sp, #28]
     c42:	f108 0820 	add.w	r8, r8, #32
     c46:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     c4a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     c4c:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000c54 <ocrypto_sqr256_noframe>:
     c54:	b500      	push	{lr}
     c56:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     c5a:	fba3 5203 	umull	r5, r2, r3, r3
     c5e:	9501      	str	r5, [sp, #4]
     c60:	fba3 0104 	umull	r0, r1, r3, r4
     c64:	fbe3 2064 	umaal	r2, r0, r3, r4
     c68:	fbe3 1067 	umaal	r1, r0, r3, r7
     c6c:	9202      	str	r2, [sp, #8]
     c6e:	fba3 5207 	umull	r5, r2, r3, r7
     c72:	fbe3 0268 	umaal	r0, r2, r3, r8
     c76:	fbe4 1564 	umaal	r1, r5, r4, r4
     c7a:	fbe3 0568 	umaal	r0, r5, r3, r8
     c7e:	fbe3 2569 	umaal	r2, r5, r3, r9
     c82:	9103      	str	r1, [sp, #12]
     c84:	fba4 b607 	umull	fp, r6, r4, r7
     c88:	fbe3 2669 	umaal	r2, r6, r3, r9
     c8c:	fbe3 566a 	umaal	r5, r6, r3, sl
     c90:	fbe4 0b67 	umaal	r0, fp, r4, r7
     c94:	fbe4 2b68 	umaal	r2, fp, r4, r8
     c98:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     c9c:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     ca0:	9004      	str	r0, [sp, #16]
     ca2:	fba4 1008 	umull	r1, r0, r4, r8
     ca6:	fbe4 5069 	umaal	r5, r0, r4, r9
     caa:	fbe3 606c 	umaal	r6, r0, r3, ip
     cae:	fbe3 b06e 	umaal	fp, r0, r3, lr
     cb2:	fbe7 2167 	umaal	r2, r1, r7, r7
     cb6:	fbe4 5169 	umaal	r5, r1, r4, r9
     cba:	fbe4 616a 	umaal	r6, r1, r4, sl
     cbe:	fbe3 b16e 	umaal	fp, r1, r3, lr
     cc2:	fbe4 016e 	umaal	r0, r1, r4, lr
     cc6:	9205      	str	r2, [sp, #20]
     cc8:	fba7 3208 	umull	r3, r2, r7, r8
     ccc:	fbe4 626a 	umaal	r6, r2, r4, sl
     cd0:	fbe4 b26c 	umaal	fp, r2, r4, ip
     cd4:	fbe4 026e 	umaal	r0, r2, r4, lr
     cd8:	fbe7 126e 	umaal	r1, r2, r7, lr
     cdc:	fbe7 5368 	umaal	r5, r3, r7, r8
     ce0:	fbe7 6369 	umaal	r6, r3, r7, r9
     ce4:	fbe4 b36c 	umaal	fp, r3, r4, ip
     ce8:	fbe7 036c 	umaal	r0, r3, r7, ip
     cec:	fbe7 136e 	umaal	r1, r3, r7, lr
     cf0:	fbe8 236e 	umaal	r2, r3, r8, lr
     cf4:	9506      	str	r5, [sp, #24]
     cf6:	fba7 5409 	umull	r5, r4, r7, r9
     cfa:	fbe7 b46a 	umaal	fp, r4, r7, sl
     cfe:	fbe7 046c 	umaal	r0, r4, r7, ip
     d02:	fbe8 146c 	umaal	r1, r4, r8, ip
     d06:	fbe8 246e 	umaal	r2, r4, r8, lr
     d0a:	fbe9 346e 	umaal	r3, r4, r9, lr
     d0e:	fbe8 6568 	umaal	r6, r5, r8, r8
     d12:	fbe7 b56a 	umaal	fp, r5, r7, sl
     d16:	fbe8 056a 	umaal	r0, r5, r8, sl
     d1a:	fbe8 156c 	umaal	r1, r5, r8, ip
     d1e:	fbe9 256c 	umaal	r2, r5, r9, ip
     d22:	fbe9 356e 	umaal	r3, r5, r9, lr
     d26:	fbea 456e 	umaal	r4, r5, sl, lr
     d2a:	9607      	str	r6, [sp, #28]
     d2c:	fba8 7609 	umull	r7, r6, r8, r9
     d30:	fbe8 066a 	umaal	r0, r6, r8, sl
     d34:	fbe9 166a 	umaal	r1, r6, r9, sl
     d38:	fbe9 266c 	umaal	r2, r6, r9, ip
     d3c:	fbea 366c 	umaal	r3, r6, sl, ip
     d40:	fbea 466e 	umaal	r4, r6, sl, lr
     d44:	fbec 566e 	umaal	r5, r6, ip, lr
     d48:	fbe8 b769 	umaal	fp, r7, r8, r9
     d4c:	fbe9 0769 	umaal	r0, r7, r9, r9
     d50:	fbe9 176a 	umaal	r1, r7, r9, sl
     d54:	fbea 276a 	umaal	r2, r7, sl, sl
     d58:	fbea 376c 	umaal	r3, r7, sl, ip
     d5c:	fbec 476c 	umaal	r4, r7, ip, ip
     d60:	fbec 576e 	umaal	r5, r7, ip, lr
     d64:	fbee 676e 	umaal	r6, r7, lr, lr
     d68:	bd00      	pop	{pc}
     d6a:	bf00      	nop

00000d6c <ocrypto_bigint_sqr256>:
     d6c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d70:	b087      	sub	sp, #28
     d72:	f7ff ff6f 	bl	c54 <ocrypto_sqr256_noframe>
     d76:	f8dd 801c 	ldr.w	r8, [sp, #28]
     d7a:	f108 0820 	add.w	r8, r8, #32
     d7e:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     d82:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     d84:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d8c <ocrypto_constant_time_equal>:
     d8c:	b430      	push	{r4, r5}
     d8e:	f04f 0300 	mov.w	r3, #0

00000d92 <constant_time_equal_loop>:
     d92:	f810 4b01 	ldrb.w	r4, [r0], #1
     d96:	f811 5b01 	ldrb.w	r5, [r1], #1
     d9a:	3a01      	subs	r2, #1
     d9c:	ea84 0405 	eor.w	r4, r4, r5
     da0:	ea43 0304 	orr.w	r3, r3, r4
     da4:	d1f5      	bne.n	d92 <constant_time_equal_loop>
     da6:	f1a3 0301 	sub.w	r3, r3, #1
     daa:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     dae:	bc30      	pop	{r4, r5}
     db0:	4770      	bx	lr
     db2:	bf00      	nop

00000db4 <ocrypto_constant_time_is_zero>:
     db4:	f04f 0300 	mov.w	r3, #0

00000db8 <constant_time_is_zero_loop>:
     db8:	f810 2b01 	ldrb.w	r2, [r0], #1
     dbc:	3901      	subs	r1, #1
     dbe:	ea43 0302 	orr.w	r3, r3, r2
     dc2:	d1f9      	bne.n	db8 <constant_time_is_zero_loop>
     dc4:	f1a3 0301 	sub.w	r3, r3, #1
     dc8:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     dcc:	4770      	bx	lr
     dce:	bf00      	nop

00000dd0 <ocrypto_constant_time_xor>:
     dd0:	b430      	push	{r4, r5}

00000dd2 <constant_time_xor_loop>:
     dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
     dd6:	f812 5b01 	ldrb.w	r5, [r2], #1
     dda:	406c      	eors	r4, r5
     ddc:	f800 4b01 	strb.w	r4, [r0], #1
     de0:	3b01      	subs	r3, #1
     de2:	d1f6      	bne.n	dd2 <constant_time_xor_loop>
     de4:	bc30      	pop	{r4, r5}
     de6:	4770      	bx	lr

00000de8 <ocrypto_mod_p256_add>:
     de8:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dec:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     df0:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     df4:	185b      	adds	r3, r3, r1
     df6:	eb54 040c 	adcs.w	r4, r4, ip
     dfa:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dfe:	414d      	adcs	r5, r1
     e00:	eb56 060c 	adcs.w	r6, r6, ip
     e04:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e08:	414f      	adcs	r7, r1
     e0a:	eb58 080c 	adcs.w	r8, r8, ip
     e0e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e12:	eb59 0901 	adcs.w	r9, r9, r1
     e16:	eb5a 0a0c 	adcs.w	sl, sl, ip
     e1a:	4189      	sbcs	r1, r1
     e1c:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     e20:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     e24:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     e28:	f176 0600 	sbcs.w	r6, r6, #0
     e2c:	f177 0700 	sbcs.w	r7, r7, #0
     e30:	f178 0800 	sbcs.w	r8, r8, #0
     e34:	f179 0901 	sbcs.w	r9, r9, #1
     e38:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     e3c:	f151 0100 	adcs.w	r1, r1, #0
     e40:	185b      	adds	r3, r3, r1
     e42:	414c      	adcs	r4, r1
     e44:	414d      	adcs	r5, r1
     e46:	f156 0600 	adcs.w	r6, r6, #0
     e4a:	f157 0700 	adcs.w	r7, r7, #0
     e4e:	f158 0800 	adcs.w	r8, r8, #0
     e52:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     e56:	eb5a 0a01 	adcs.w	sl, sl, r1
     e5a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     e5e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e62:	4770      	bx	lr

00000e64 <ocrypto_mod_p256_sub>:
     e64:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e68:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     e6c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e70:	1a5b      	subs	r3, r3, r1
     e72:	eb74 040c 	sbcs.w	r4, r4, ip
     e76:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e7a:	418d      	sbcs	r5, r1
     e7c:	eb76 060c 	sbcs.w	r6, r6, ip
     e80:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e84:	418f      	sbcs	r7, r1
     e86:	eb78 080c 	sbcs.w	r8, r8, ip
     e8a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e8e:	eb79 0901 	sbcs.w	r9, r9, r1
     e92:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     e96:	4189      	sbcs	r1, r1
     e98:	185b      	adds	r3, r3, r1
     e9a:	414c      	adcs	r4, r1
     e9c:	414d      	adcs	r5, r1
     e9e:	f156 0600 	adcs.w	r6, r6, #0
     ea2:	f157 0700 	adcs.w	r7, r7, #0
     ea6:	f158 0800 	adcs.w	r8, r8, #0
     eaa:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     eae:	eb5a 0a01 	adcs.w	sl, sl, r1
     eb2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     eb6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     eba:	4770      	bx	lr

00000ebc <mul_reduce>:
     ebc:	eb18 0804 	adds.w	r8, r8, r4
     ec0:	eb59 0905 	adcs.w	r9, r9, r5
     ec4:	eb5a 0a06 	adcs.w	sl, sl, r6
     ec8:	eb5b 0b07 	adcs.w	fp, fp, r7
     ecc:	f05f 0c00 	movs.w	ip, #0
     ed0:	f14c 0c00 	adc.w	ip, ip, #0
     ed4:	eb18 0805 	adds.w	r8, r8, r5
     ed8:	eb59 0906 	adcs.w	r9, r9, r6
     edc:	eb5a 0a07 	adcs.w	sl, sl, r7
     ee0:	eb5b 0b07 	adcs.w	fp, fp, r7
     ee4:	eb50 000c 	adcs.w	r0, r0, ip
     ee8:	f05f 0c00 	movs.w	ip, #0
     eec:	eb51 010c 	adcs.w	r1, r1, ip
     ef0:	eb52 020c 	adcs.w	r2, r2, ip
     ef4:	4163      	adcs	r3, r4
     ef6:	f14c 0c00 	adc.w	ip, ip, #0
     efa:	ebb8 0807 	subs.w	r8, r8, r7
     efe:	f179 0900 	sbcs.w	r9, r9, #0
     f02:	f17a 0a00 	sbcs.w	sl, sl, #0
     f06:	eb7b 0b04 	sbcs.w	fp, fp, r4
     f0a:	41a8      	sbcs	r0, r5
     f0c:	41b1      	sbcs	r1, r6
     f0e:	41a2      	sbcs	r2, r4
     f10:	41b3      	sbcs	r3, r6
     f12:	f16c 0c00 	sbc.w	ip, ip, #0
     f16:	ebbb 0b05 	subs.w	fp, fp, r5
     f1a:	41b0      	sbcs	r0, r6
     f1c:	41b9      	sbcs	r1, r7
     f1e:	41aa      	sbcs	r2, r5
     f20:	41bb      	sbcs	r3, r7
     f22:	f16c 0c00 	sbc.w	ip, ip, #0
     f26:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     f2a:	ebb8 0804 	subs.w	r8, r8, r4
     f2e:	eb79 0904 	sbcs.w	r9, r9, r4
     f32:	eb7a 0a04 	sbcs.w	sl, sl, r4
     f36:	f17b 0b00 	sbcs.w	fp, fp, #0
     f3a:	f170 0000 	sbcs.w	r0, r0, #0
     f3e:	f171 0100 	sbcs.w	r1, r1, #0
     f42:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     f46:	41a3      	sbcs	r3, r4
     f48:	f16c 0c00 	sbc.w	ip, ip, #0
     f4c:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     f50:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     f54:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     f58:	f15b 0b00 	adcs.w	fp, fp, #0
     f5c:	f150 0400 	adcs.w	r4, r0, #0
     f60:	f151 0500 	adcs.w	r5, r1, #0
     f64:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     f68:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     f6c:	f14c 0c00 	adc.w	ip, ip, #0
     f70:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     f74:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     f78:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     f7c:	f15b 0300 	adcs.w	r3, fp, #0
     f80:	f154 0400 	adcs.w	r4, r4, #0
     f84:	f155 0500 	adcs.w	r5, r5, #0
     f88:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     f8c:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     f90:	4770      	bx	lr
     f92:	bf00      	nop

00000f94 <ocrypto_mod_p256_mul>:
     f94:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f98:	b087      	sub	sp, #28
     f9a:	f7ff fd9f 	bl	adc <ocrypto_mul256_noframe>
     f9e:	f8dd 8010 	ldr.w	r8, [sp, #16]
     fa2:	f8dd 9014 	ldr.w	r9, [sp, #20]
     fa6:	f8dd a018 	ldr.w	sl, [sp, #24]
     faa:	f7ff ff87 	bl	ebc <mul_reduce>
     fae:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     fb2:	f7ff ff83 	bl	ebc <mul_reduce>
     fb6:	b003      	add	sp, #12
     fb8:	f85d 8b04 	ldr.w	r8, [sp], #4
     fbc:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000fc4 <ocrypto_mod_p256_sqr>:
     fc4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fc8:	b087      	sub	sp, #28
     fca:	f7ff fe43 	bl	c54 <ocrypto_sqr256_noframe>
     fce:	f8dd 8010 	ldr.w	r8, [sp, #16]
     fd2:	f8dd 9014 	ldr.w	r9, [sp, #20]
     fd6:	f8dd a018 	ldr.w	sl, [sp, #24]
     fda:	f7ff ff6f 	bl	ebc <mul_reduce>
     fde:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     fe2:	f7ff ff6b 	bl	ebc <mul_reduce>
     fe6:	b003      	add	sp, #12
     fe8:	f85d 8b04 	ldr.w	r8, [sp], #4
     fec:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     ff6:	4c14      	ldr	r4, [pc, #80]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
     ff8:	7a20      	ldrb	r0, [r4, #8]
     ffa:	f88d 0001 	strb.w	r0, [sp, #1]
     ffe:	79e0      	ldrb	r0, [r4, #7]
    1000:	f88d 0000 	strb.w	r0, [sp]
    1004:	79a0      	ldrb	r0, [r4, #6]
    1006:	f8ad 0004 	strh.w	r0, [sp, #4]
    100a:	7960      	ldrb	r0, [r4, #5]
    100c:	f8ad 0002 	strh.w	r0, [sp, #2]
    1010:	4668      	mov	r0, sp
    1012:	f006 f84d 	bl	70b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    1016:	b108      	cbz	r0, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    1018:	21a7      	movs	r1, #167	; 0xa7
    101a:	e010      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    101c:	68e0      	ldr	r0, [r4, #12]
    101e:	9002      	str	r0, [sp, #8]
    1020:	a802      	add	r0, sp, #8
    1022:	f006 f85b 	bl	70dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    1026:	b108      	cbz	r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1028:	21ab      	movs	r1, #171	; 0xab
    102a:	e008      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    102c:	4807      	ldr	r0, [pc, #28]	; (104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>)
    102e:	6800      	ldr	r0, [r0, #0]
    1030:	9003      	str	r0, [sp, #12]
    1032:	a803      	add	r0, sp, #12
    1034:	f00e ffa7 	bl	ff86 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    1038:	2800      	cmp	r0, #0
    103a:	d003      	beq.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
    103c:	21af      	movs	r1, #175	; 0xaf
    103e:	2003      	movs	r0, #3
    1040:	f000 f8dc 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1044:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    1046:	0000      	.short	0x0000
    1048:	20000d68 	.word	0x20000d68
    104c:	00001304 	.word	0x00001304

00001050 <sdc_build_revision_get>:
    1050:	b510      	push	{r4, lr}
    1052:	b128      	cbz	r0, 1060 <sdc_build_revision_get+0x10>
    1054:	2214      	movs	r2, #20
    1056:	4904      	ldr	r1, [pc, #16]	; (1068 <sdc_build_revision_get+0x18>)
    1058:	f00f fdd6 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    105c:	2000      	movs	r0, #0
    105e:	bd10      	pop	{r4, pc}
    1060:	f06f 0015 	mvn.w	r0, #21
    1064:	bd10      	pop	{r4, pc}
    1066:	0000      	.short	0x0000
    1068:	00001328 	.word	0x00001328

0000106c <sdc_cfg_set>:
    106c:	b570      	push	{r4, r5, r6, lr}
    106e:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1072:	bbb8      	cbnz	r0, 10e4 <sdc_cfg_set+0x78>
    1074:	4c1e      	ldr	r4, [pc, #120]	; (10f0 <sdc_cfg_set+0x84>)
    1076:	7860      	ldrb	r0, [r4, #1]
    1078:	b108      	cbz	r0, 107e <sdc_cfg_set+0x12>
    107a:	1198      	asrs	r0, r3, #6
    107c:	bd70      	pop	{r4, r5, r6, pc}
    107e:	b301      	cbz	r1, 10c2 <sdc_cfg_set+0x56>
    1080:	f06f 0515 	mvn.w	r5, #21
    1084:	b1aa      	cbz	r2, 10b2 <sdc_cfg_set+0x46>
    1086:	481b      	ldr	r0, [pc, #108]	; (10f4 <sdc_cfg_set+0x88>)
    1088:	1e89      	subs	r1, r1, #2
    108a:	2906      	cmp	r1, #6
    108c:	d22b      	bcs.n	10e6 <sdc_cfg_set+0x7a>
    108e:	e8df f001 	tbb	[pc, r1]
    1092:	0603      	.short	0x0603
    1094:	1c2a1916 	.word	0x1c2a1916
    1098:	7811      	ldrb	r1, [r2, #0]
    109a:	7041      	strb	r1, [r0, #1]
    109c:	e017      	b.n	10ce <sdc_cfg_set+0x62>
    109e:	7891      	ldrb	r1, [r2, #2]
    10a0:	b139      	cbz	r1, 10b2 <sdc_cfg_set+0x46>
    10a2:	78d1      	ldrb	r1, [r2, #3]
    10a4:	b129      	cbz	r1, 10b2 <sdc_cfg_set+0x46>
    10a6:	7811      	ldrb	r1, [r2, #0]
    10a8:	291b      	cmp	r1, #27
    10aa:	d302      	bcc.n	10b2 <sdc_cfg_set+0x46>
    10ac:	7851      	ldrb	r1, [r2, #1]
    10ae:	291b      	cmp	r1, #27
    10b0:	d201      	bcs.n	10b6 <sdc_cfg_set+0x4a>
    10b2:	4628      	mov	r0, r5
    10b4:	bd70      	pop	{r4, r5, r6, pc}
    10b6:	6811      	ldr	r1, [r2, #0]
    10b8:	f8c0 1005 	str.w	r1, [r0, #5]
    10bc:	e007      	b.n	10ce <sdc_cfg_set+0x62>
    10be:	6811      	ldr	r1, [r2, #0]
    10c0:	60c1      	str	r1, [r0, #12]
    10c2:	e004      	b.n	10ce <sdc_cfg_set+0x62>
    10c4:	7811      	ldrb	r1, [r2, #0]
    10c6:	7081      	strb	r1, [r0, #2]
    10c8:	e001      	b.n	10ce <sdc_cfg_set+0x62>
    10ca:	8811      	ldrh	r1, [r2, #0]
    10cc:	8241      	strh	r1, [r0, #18]
    10ce:	2201      	movs	r2, #1
    10d0:	4908      	ldr	r1, [pc, #32]	; (10f4 <sdc_cfg_set+0x88>)
    10d2:	2000      	movs	r0, #0
    10d4:	f00b fc36 	bl	c944 <__udivmoddi4+0x2a0>
    10d8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    10dc:	db05      	blt.n	10ea <sdc_cfg_set+0x7e>
    10de:	f06f 000b 	mvn.w	r0, #11
    10e2:	bd70      	pop	{r4, r5, r6, pc}
    10e4:	e7ff      	b.n	10e6 <sdc_cfg_set+0x7a>
    10e6:	4618      	mov	r0, r3
    10e8:	e7fb      	b.n	10e2 <sdc_cfg_set+0x76>
    10ea:	2101      	movs	r1, #1
    10ec:	70a1      	strb	r1, [r4, #2]
    10ee:	e7f8      	b.n	10e2 <sdc_cfg_set+0x76>
    10f0:	20000028 	.word	0x20000028
    10f4:	20000d68 	.word	0x20000d68

000010f8 <sdc_disable>:
    10f8:	b510      	push	{r4, lr}
    10fa:	4c07      	ldr	r4, [pc, #28]	; (1118 <sdc_disable+0x20>)
    10fc:	7860      	ldrb	r0, [r4, #1]
    10fe:	b120      	cbz	r0, 110a <sdc_disable+0x12>
    1100:	f006 faca 	bl	7698 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    1104:	7820      	ldrb	r0, [r4, #0]
    1106:	f00b f9ed 	bl	c4e4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    110a:	f000 fd87 	bl	1c1c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    110e:	f000 fe5f 	bl	1dd0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    1112:	2000      	movs	r0, #0
    1114:	7060      	strb	r0, [r4, #1]
    1116:	bd10      	pop	{r4, pc}
    1118:	20000028 	.word	0x20000028

0000111c <sdc_enable>:
    111c:	b570      	push	{r4, r5, r6, lr}
    111e:	460c      	mov	r4, r1
    1120:	0005      	movs	r5, r0
    1122:	d002      	beq.n	112a <sdc_enable+0xe>
    1124:	b10c      	cbz	r4, 112a <sdc_enable+0xe>
    1126:	0760      	lsls	r0, r4, #29
    1128:	d002      	beq.n	1130 <sdc_enable+0x14>
    112a:	f06f 0015 	mvn.w	r0, #21
    112e:	bd70      	pop	{r4, r5, r6, pc}
    1130:	f000 f920 	bl	1374 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    1134:	b1a8      	cbz	r0, 1162 <sdc_enable+0x46>
    1136:	4628      	mov	r0, r5
    1138:	f00b f99a 	bl	c470 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    113c:	4d0a      	ldr	r5, [pc, #40]	; (1168 <sdc_enable+0x4c>)
    113e:	2200      	movs	r2, #0
    1140:	490a      	ldr	r1, [pc, #40]	; (116c <sdc_enable+0x50>)
    1142:	7028      	strb	r0, [r5, #0]
    1144:	4620      	mov	r0, r4
    1146:	f00b fbfd 	bl	c944 <__udivmoddi4+0x2a0>
    114a:	f00f fb36 	bl	107ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    114e:	2100      	movs	r1, #0
    1150:	7828      	ldrb	r0, [r5, #0]
    1152:	f006 fa8b 	bl	766c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    1156:	f7ff ff4d 	bl	ff4 <ocrypto_mod_p256_sqr+0x30>
    115a:	2001      	movs	r0, #1
    115c:	7068      	strb	r0, [r5, #1]
    115e:	2000      	movs	r0, #0
    1160:	bd70      	pop	{r4, r5, r6, pc}
    1162:	f04f 30ff 	mov.w	r0, #4294967295
    1166:	bd70      	pop	{r4, r5, r6, pc}
    1168:	20000028 	.word	0x20000028
    116c:	20000d68 	.word	0x20000d68

00001170 <sdc_init>:
    1170:	b530      	push	{r4, r5, lr}
    1172:	b089      	sub	sp, #36	; 0x24
    1174:	0004      	movs	r4, r0
    1176:	d00c      	beq.n	1192 <sdc_init+0x22>
    1178:	f00b f920 	bl	c3bc <mpsl_is_initialized>
    117c:	f04f 35ff 	mov.w	r5, #4294967295
    1180:	b120      	cbz	r0, 118c <sdc_init+0x1c>
    1182:	f00a ffb3 	bl	c0ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    1186:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    118a:	d905      	bls.n	1198 <sdc_init+0x28>
    118c:	4628      	mov	r0, r5
    118e:	b009      	add	sp, #36	; 0x24
    1190:	bd30      	pop	{r4, r5, pc}
    1192:	f06f 0015 	mvn.w	r0, #21
    1196:	e7fa      	b.n	118e <sdc_init+0x1e>
    1198:	4d13      	ldr	r5, [pc, #76]	; (11e8 <sdc_init+0x78>)
    119a:	4814      	ldr	r0, [pc, #80]	; (11ec <sdc_init+0x7c>)
    119c:	606c      	str	r4, [r5, #4]
    119e:	f000 fa0b 	bl	15b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    11a2:	2000      	movs	r0, #0
    11a4:	7068      	strb	r0, [r5, #1]
    11a6:	70a8      	strb	r0, [r5, #2]
    11a8:	4601      	mov	r1, r0
    11aa:	2220      	movs	r2, #32
    11ac:	4668      	mov	r0, sp
    11ae:	f00f fda5 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11b2:	2220      	movs	r2, #32
    11b4:	490e      	ldr	r1, [pc, #56]	; (11f0 <sdc_init+0x80>)
    11b6:	4668      	mov	r0, sp
    11b8:	f00f fd26 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    11bc:	2220      	movs	r2, #32
    11be:	4669      	mov	r1, sp
    11c0:	480c      	ldr	r0, [pc, #48]	; (11f4 <sdc_init+0x84>)
    11c2:	f00f fd21 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    11c6:	f3ef 8410 	mrs	r4, PRIMASK
    11ca:	b672      	cpsid	i
    11cc:	f000 fd34 	bl	1c38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    11d0:	4809      	ldr	r0, [pc, #36]	; (11f8 <sdc_init+0x88>)
    11d2:	f000 fe09 	bl	1de8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    11d6:	b118      	cbz	r0, 11e0 <sdc_init+0x70>
    11d8:	21c5      	movs	r1, #197	; 0xc5
    11da:	2003      	movs	r0, #3
    11dc:	f000 f80e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    11e0:	b904      	cbnz	r4, 11e4 <sdc_init+0x74>
    11e2:	b662      	cpsie	i
    11e4:	2000      	movs	r0, #0
    11e6:	e7d2      	b.n	118e <sdc_init+0x1e>
    11e8:	20000028 	.word	0x20000028
    11ec:	00000ff5 	.word	0x00000ff5
    11f0:	00001308 	.word	0x00001308
    11f4:	20000d68 	.word	0x20000d68
    11f8:	000013a1 	.word	0x000013a1

000011fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    11fc:	b50e      	push	{r1, r2, r3, lr}
    11fe:	b672      	cpsid	i
    1200:	4a15      	ldr	r2, [pc, #84]	; (1258 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    1202:	6855      	ldr	r5, [r2, #4]
    1204:	b1dd      	cbz	r5, 123e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    1206:	2200      	movs	r2, #0
    1208:	4603      	mov	r3, r0
    120a:	466e      	mov	r6, sp
    120c:	240a      	movs	r4, #10
    120e:	e003      	b.n	1218 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    1210:	fbb0 f0f4 	udiv	r0, r0, r4
    1214:	1c52      	adds	r2, r2, #1
    1216:	b2d2      	uxtb	r2, r2
    1218:	2800      	cmp	r0, #0
    121a:	d1f9      	bne.n	1210 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    121c:	54b0      	strb	r0, [r6, r2]
    121e:	e00a      	b.n	1236 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    1220:	b2d8      	uxtb	r0, r3
    1222:	fbb0 f7f4 	udiv	r7, r0, r4
    1226:	fbb3 f3f4 	udiv	r3, r3, r4
    122a:	fb04 0017 	mls	r0, r4, r7, r0
    122e:	1e52      	subs	r2, r2, #1
    1230:	b2d2      	uxtb	r2, r2
    1232:	3030      	adds	r0, #48	; 0x30
    1234:	54b0      	strb	r0, [r6, r2]
    1236:	2a00      	cmp	r2, #0
    1238:	d1f2      	bne.n	1220 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    123a:	4630      	mov	r0, r6
    123c:	47a8      	blx	r5
    123e:	f3bf 8f4f 	dsb	sy
    1242:	4806      	ldr	r0, [pc, #24]	; (125c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    1244:	6801      	ldr	r1, [r0, #0]
    1246:	4a06      	ldr	r2, [pc, #24]	; (1260 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    1248:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    124c:	4311      	orrs	r1, r2
    124e:	6001      	str	r1, [r0, #0]
    1250:	f3bf 8f4f 	dsb	sy
    1254:	bf00      	nop
    1256:	e7fd      	b.n	1254 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    1258:	20000028 	.word	0x20000028
    125c:	e000ed0c 	.word	0xe000ed0c
    1260:	05fa0004 	.word	0x05fa0004

00001264 <sdc_support_adv>:
    1264:	4806      	ldr	r0, [pc, #24]	; (1280 <sdc_support_adv+0x1c>)
    1266:	b510      	push	{r4, lr}
    1268:	7881      	ldrb	r1, [r0, #2]
    126a:	7840      	ldrb	r0, [r0, #1]
    126c:	4301      	orrs	r1, r0
    126e:	d002      	beq.n	1276 <sdc_support_adv+0x12>
    1270:	f04f 30ff 	mov.w	r0, #4294967295
    1274:	bd10      	pop	{r4, pc}
    1276:	f006 fa1f 	bl	76b8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    127a:	2000      	movs	r0, #0
    127c:	bd10      	pop	{r4, pc}
    127e:	0000      	.short	0x0000
    1280:	20000028 	.word	0x20000028

00001284 <sdc_support_dle_peripheral>:
    1284:	4806      	ldr	r0, [pc, #24]	; (12a0 <sdc_support_dle_peripheral+0x1c>)
    1286:	b510      	push	{r4, lr}
    1288:	7881      	ldrb	r1, [r0, #2]
    128a:	7840      	ldrb	r0, [r0, #1]
    128c:	4301      	orrs	r1, r0
    128e:	d002      	beq.n	1296 <sdc_support_dle_peripheral+0x12>
    1290:	f04f 30ff 	mov.w	r0, #4294967295
    1294:	bd10      	pop	{r4, pc}
    1296:	f005 ff6d 	bl	7174 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    129a:	2000      	movs	r0, #0
    129c:	bd10      	pop	{r4, pc}
    129e:	0000      	.short	0x0000
    12a0:	20000028 	.word	0x20000028

000012a4 <sdc_support_le_2m_phy>:
    12a4:	4806      	ldr	r0, [pc, #24]	; (12c0 <sdc_support_le_2m_phy+0x1c>)
    12a6:	b510      	push	{r4, lr}
    12a8:	7881      	ldrb	r1, [r0, #2]
    12aa:	7840      	ldrb	r0, [r0, #1]
    12ac:	4301      	orrs	r1, r0
    12ae:	d002      	beq.n	12b6 <sdc_support_le_2m_phy+0x12>
    12b0:	f04f 30ff 	mov.w	r0, #4294967295
    12b4:	bd10      	pop	{r4, pc}
    12b6:	f00f f805 	bl	102c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    12ba:	2000      	movs	r0, #0
    12bc:	bd10      	pop	{r4, pc}
    12be:	0000      	.short	0x0000
    12c0:	20000028 	.word	0x20000028

000012c4 <sdc_support_peripheral>:
    12c4:	4806      	ldr	r0, [pc, #24]	; (12e0 <sdc_support_peripheral+0x1c>)
    12c6:	b510      	push	{r4, lr}
    12c8:	7881      	ldrb	r1, [r0, #2]
    12ca:	7840      	ldrb	r0, [r0, #1]
    12cc:	4301      	orrs	r1, r0
    12ce:	d002      	beq.n	12d6 <sdc_support_peripheral+0x12>
    12d0:	f04f 30ff 	mov.w	r0, #4294967295
    12d4:	bd10      	pop	{r4, pc}
    12d6:	f006 fa01 	bl	76dc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    12da:	2000      	movs	r0, #0
    12dc:	bd10      	pop	{r4, pc}
    12de:	0000      	.short	0x0000
    12e0:	20000028 	.word	0x20000028

000012e4 <sdc_support_phy_update_peripheral>:
    12e4:	4806      	ldr	r0, [pc, #24]	; (1300 <sdc_support_phy_update_peripheral+0x1c>)
    12e6:	b510      	push	{r4, lr}
    12e8:	7881      	ldrb	r1, [r0, #2]
    12ea:	7840      	ldrb	r0, [r0, #1]
    12ec:	4301      	orrs	r1, r0
    12ee:	d002      	beq.n	12f6 <sdc_support_phy_update_peripheral+0x12>
    12f0:	f04f 30ff 	mov.w	r0, #4294967295
    12f4:	bd10      	pop	{r4, pc}
    12f6:	f00e fff5 	bl	102e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    12fa:	2000      	movs	r0, #0
    12fc:	bd10      	pop	{r4, pc}
    12fe:	0000      	.short	0x0000
    1300:	20000028 	.word	0x20000028
    1304:	00000001 	.word	0x00000001
    1308:	00010100 	.word	0x00010100
    130c:	031b1b00 	.word	0x031b1b00
    1310:	00000002 	.word	0x00000002
    1314:	00001d4c 	.word	0x00001d4c
    1318:	001f0000 	.word	0x001f0000
	...
    1328:	2f2d0cd8 	.word	0x2f2d0cd8
    132c:	5ce2ae36 	.word	0x5ce2ae36
    1330:	4c802680 	.word	0x4c802680
    1334:	53164d3f 	.word	0x53164d3f
    1338:	73c79650 	.word	0x73c79650

0000133c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    133c:	4a05      	ldr	r2, [pc, #20]	; (1354 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    133e:	b510      	push	{r4, lr}
    1340:	6852      	ldr	r2, [r2, #4]
    1342:	b112      	cbz	r2, 134a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    1344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1348:	4710      	bx	r2
    134a:	2192      	movs	r1, #146	; 0x92
    134c:	2004      	movs	r0, #4
    134e:	f7ff ff55 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1352:	0000      	.short	0x0000
    1354:	20000d88 	.word	0x20000d88

00001358 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    1358:	4a05      	ldr	r2, [pc, #20]	; (1370 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    135a:	b510      	push	{r4, lr}
    135c:	6892      	ldr	r2, [r2, #8]
    135e:	b112      	cbz	r2, 1366 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    1360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1364:	4710      	bx	r2
    1366:	2198      	movs	r1, #152	; 0x98
    1368:	2004      	movs	r0, #4
    136a:	f7ff ff47 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    136e:	0000      	.short	0x0000
    1370:	20000d88 	.word	0x20000d88

00001374 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1374:	4805      	ldr	r0, [pc, #20]	; (138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>)
    1376:	6801      	ldr	r1, [r0, #0]
    1378:	b129      	cbz	r1, 1386 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    137a:	6841      	ldr	r1, [r0, #4]
    137c:	b119      	cbz	r1, 1386 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    137e:	6880      	ldr	r0, [r0, #8]
    1380:	b108      	cbz	r0, 1386 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1382:	2001      	movs	r0, #1
    1384:	4770      	bx	lr
    1386:	2000      	movs	r0, #0
    1388:	4770      	bx	lr
    138a:	0000      	.short	0x0000
    138c:	20000d88 	.word	0x20000d88

00001390 <sdc_rand_source_register>:
    1390:	4902      	ldr	r1, [pc, #8]	; (139c <sdc_rand_source_register+0xc>)
    1392:	c80d      	ldmia	r0, {r0, r2, r3}
    1394:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    1398:	2000      	movs	r0, #0
    139a:	4770      	bx	lr
    139c:	20000d88 	.word	0x20000d88

000013a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    13a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13a2:	4c12      	ldr	r4, [pc, #72]	; (13ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    13a4:	2600      	movs	r6, #0
    13a6:	6825      	ldr	r5, [r4, #0]
    13a8:	e011      	b.n	13ce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    13aa:	9800      	ldr	r0, [sp, #0]
    13ac:	2802      	cmp	r0, #2
    13ae:	d002      	beq.n	13b6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    13b0:	2803      	cmp	r0, #3
    13b2:	d10c      	bne.n	13ce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    13b4:	e006      	b.n	13c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    13b6:	6820      	ldr	r0, [r4, #0]
    13b8:	b110      	cbz	r0, 13c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    13ba:	2000      	movs	r0, #0
    13bc:	6026      	str	r6, [r4, #0]
    13be:	e005      	b.n	13cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    13c0:	2128      	movs	r1, #40	; 0x28
    13c2:	e00c      	b.n	13de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    13c4:	6820      	ldr	r0, [r4, #0]
    13c6:	b168      	cbz	r0, 13e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    13c8:	2001      	movs	r0, #1
    13ca:	6026      	str	r6, [r4, #0]
    13cc:	47a8      	blx	r5
    13ce:	4668      	mov	r0, sp
    13d0:	f000 fcd0 	bl	1d74 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    13d4:	2800      	cmp	r0, #0
    13d6:	d0e8      	beq.n	13aa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    13d8:	2805      	cmp	r0, #5
    13da:	d005      	beq.n	13e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    13dc:	2135      	movs	r1, #53	; 0x35
    13de:	2004      	movs	r0, #4
    13e0:	f7ff ff0c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    13e4:	212d      	movs	r1, #45	; 0x2d
    13e6:	e7fa      	b.n	13de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    13e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13ea:	0000      	.short	0x0000
    13ec:	20000030 	.word	0x20000030

000013f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    13f0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    13f4:	4e25      	ldr	r6, [pc, #148]	; (148c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    13f6:	4605      	mov	r5, r0
    13f8:	1d00      	adds	r0, r0, #4
    13fa:	f106 0744 	add.w	r7, r6, #68	; 0x44
    13fe:	6030      	str	r0, [r6, #0]
    1400:	7838      	ldrb	r0, [r7, #0]
    1402:	b158      	cbz	r0, 141c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    1404:	78ba      	ldrb	r2, [r7, #2]
    1406:	463c      	mov	r4, r7
    1408:	1c79      	adds	r1, r7, #1
    140a:	4628      	mov	r0, r5
    140c:	1c92      	adds	r2, r2, #2
    140e:	f00f fbfb 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1412:	2000      	movs	r0, #0
    1414:	7020      	strb	r0, [r4, #0]
    1416:	2004      	movs	r0, #4
    1418:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    141c:	481b      	ldr	r0, [pc, #108]	; (148c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    141e:	f001 fe7f 	bl	3120 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    1422:	4604      	mov	r4, r0
    1424:	2802      	cmp	r0, #2
    1426:	d004      	beq.n	1432 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    1428:	2c04      	cmp	r4, #4
    142a:	d007      	beq.n	143c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    142c:	2c08      	cmp	r4, #8
    142e:	d027      	beq.n	1480 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    1430:	e02a      	b.n	1488 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    1432:	4916      	ldr	r1, [pc, #88]	; (148c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1434:	4628      	mov	r0, r5
    1436:	f00b fb08 	bl	ca4a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    143a:	e025      	b.n	1488 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    143c:	7830      	ldrb	r0, [r6, #0]
    143e:	2808      	cmp	r0, #8
    1440:	d104      	bne.n	144c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    1442:	2105      	movs	r1, #5
    1444:	203e      	movs	r0, #62	; 0x3e
    1446:	f00b fad2 	bl	c9ee <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    144a:	b160      	cbz	r0, 1466 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
    144c:	490f      	ldr	r1, [pc, #60]	; (148c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    144e:	4628      	mov	r0, r5
    1450:	f00b fb60 	bl	cb14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    1454:	2800      	cmp	r0, #0
    1456:	d0d3      	beq.n	1400 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1458:	78a9      	ldrb	r1, [r5, #2]
    145a:	7828      	ldrb	r0, [r5, #0]
    145c:	f00b fac7 	bl	c9ee <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1460:	2800      	cmp	r0, #0
    1462:	d0cd      	beq.n	1400 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1464:	e010      	b.n	1488 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    1466:	88b0      	ldrh	r0, [r6, #4]
    1468:	f8ad 0000 	strh.w	r0, [sp]
    146c:	a901      	add	r1, sp, #4
    146e:	4668      	mov	r0, sp
    1470:	f00b fe3b 	bl	d0ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    1474:	2800      	cmp	r0, #0
    1476:	d0c3      	beq.n	1400 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1478:	21a7      	movs	r1, #167	; 0xa7
    147a:	2008      	movs	r0, #8
    147c:	f7ff febe 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1480:	4902      	ldr	r1, [pc, #8]	; (148c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1482:	4628      	mov	r0, r5
    1484:	f00b fb0f 	bl	caa6 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    1488:	4620      	mov	r0, r4
    148a:	e7c5      	b.n	1418 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    148c:	20000d94 	.word	0x20000d94
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	780a      	ldrb	r2, [r1, #0]
    1494:	7082      	strb	r2, [r0, #2]
    1496:	b33a      	cbz	r2, 14e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    1498:	2a01      	cmp	r2, #1
    149a:	d825      	bhi.n	14e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    149c:	2313      	movs	r3, #19
    149e:	7003      	strb	r3, [r0, #0]
    14a0:	2300      	movs	r3, #0
    14a2:	e00a      	b.n	14ba <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
    14a4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    14a8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    14ac:	78a6      	ldrb	r6, [r4, #2]
    14ae:	70ee      	strb	r6, [r5, #3]
    14b0:	8864      	ldrh	r4, [r4, #2]
    14b2:	0a24      	lsrs	r4, r4, #8
    14b4:	1c5b      	adds	r3, r3, #1
    14b6:	712c      	strb	r4, [r5, #4]
    14b8:	b2db      	uxtb	r3, r3
    14ba:	4293      	cmp	r3, r2
    14bc:	d3f2      	bcc.n	14a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    14be:	2300      	movs	r3, #0
    14c0:	e00b      	b.n	14da <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
    14c2:	bf00      	nop
    14c4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    14c8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    14cc:	792e      	ldrb	r6, [r5, #4]
    14ce:	7166      	strb	r6, [r4, #5]
    14d0:	88ad      	ldrh	r5, [r5, #4]
    14d2:	0a2d      	lsrs	r5, r5, #8
    14d4:	1c5b      	adds	r3, r3, #1
    14d6:	71a5      	strb	r5, [r4, #6]
    14d8:	b2db      	uxtb	r3, r3
    14da:	4293      	cmp	r3, r2
    14dc:	d3f2      	bcc.n	14c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
    14de:	2101      	movs	r1, #1
    14e0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    14e4:	b2c0      	uxtb	r0, r0
    14e6:	bd70      	pop	{r4, r5, r6, pc}
    14e8:	2000      	movs	r0, #0
    14ea:	bd70      	pop	{r4, r5, r6, pc}

000014ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    14ec:	2840      	cmp	r0, #64	; 0x40
    14ee:	d203      	bcs.n	14f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    14f0:	1e40      	subs	r0, r0, #1
    14f2:	b2c1      	uxtb	r1, r0
    14f4:	4805      	ldr	r0, [pc, #20]	; (150c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    14f6:	e005      	b.n	1504 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    14f8:	28ff      	cmp	r0, #255	; 0xff
    14fa:	d005      	beq.n	1508 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    14fc:	3840      	subs	r0, #64	; 0x40
    14fe:	b2c1      	uxtb	r1, r0
    1500:	4802      	ldr	r0, [pc, #8]	; (150c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    1502:	3008      	adds	r0, #8
    1504:	f00b bce8 	b.w	ced8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1508:	2001      	movs	r0, #1
    150a:	4770      	bx	lr
    150c:	2000003c 	.word	0x2000003c

00001510 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1510:	1e40      	subs	r0, r0, #1
    1512:	b2c1      	uxtb	r1, r0
    1514:	4801      	ldr	r0, [pc, #4]	; (151c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    1516:	f00b bcdf 	b.w	ced8 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    151a:	0000      	.short	0x0000
    151c:	2000004c 	.word	0x2000004c

00001520 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1520:	b510      	push	{r4, lr}
    1522:	4a07      	ldr	r2, [pc, #28]	; (1540 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    1524:	6801      	ldr	r1, [r0, #0]
    1526:	4b06      	ldr	r3, [pc, #24]	; (1540 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    1528:	6191      	str	r1, [r2, #24]
    152a:	6840      	ldr	r0, [r0, #4]
    152c:	61d0      	str	r0, [r2, #28]
    152e:	681c      	ldr	r4, [r3, #0]
    1530:	3218      	adds	r2, #24
    1532:	43a1      	bics	r1, r4
    1534:	6011      	str	r1, [r2, #0]
    1536:	6859      	ldr	r1, [r3, #4]
    1538:	4388      	bics	r0, r1
    153a:	6050      	str	r0, [r2, #4]
    153c:	bd10      	pop	{r4, pc}
    153e:	0000      	.short	0x0000
    1540:	20000034 	.word	0x20000034

00001544 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    1544:	4a06      	ldr	r2, [pc, #24]	; (1560 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    1546:	6801      	ldr	r1, [r0, #0]
    1548:	6091      	str	r1, [r2, #8]
    154a:	6840      	ldr	r0, [r0, #4]
    154c:	60d0      	str	r0, [r2, #12]
    154e:	3208      	adds	r2, #8
    1550:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
    1554:	6011      	str	r1, [r2, #0]
    1556:	4903      	ldr	r1, [pc, #12]	; (1564 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
    1558:	4308      	orrs	r0, r1
    155a:	6050      	str	r0, [r2, #4]
    155c:	4770      	bx	lr
    155e:	0000      	.short	0x0000
    1560:	20000034 	.word	0x20000034
    1564:	024007f8 	.word	0x024007f8

00001568 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    1568:	4902      	ldr	r1, [pc, #8]	; (1574 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    156a:	6802      	ldr	r2, [r0, #0]
    156c:	610a      	str	r2, [r1, #16]
    156e:	6840      	ldr	r0, [r0, #4]
    1570:	6148      	str	r0, [r1, #20]
    1572:	4770      	bx	lr
    1574:	20000034 	.word	0x20000034

00001578 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    1578:	4807      	ldr	r0, [pc, #28]	; (1598 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    157a:	f04f 31ff 	mov.w	r1, #4294967295
    157e:	2200      	movs	r2, #0
    1580:	6001      	str	r1, [r0, #0]
    1582:	0cc9      	lsrs	r1, r1, #19
    1584:	6041      	str	r1, [r0, #4]
    1586:	f100 0108 	add.w	r1, r0, #8
    158a:	201f      	movs	r0, #31
    158c:	600a      	str	r2, [r1, #0]
    158e:	604a      	str	r2, [r1, #4]
    1590:	3108      	adds	r1, #8
    1592:	e9c1 0200 	strd	r0, r2, [r1]
    1596:	4770      	bx	lr
    1598:	2000003c 	.word	0x2000003c

0000159c <sdc_hci_cmd_cb_reset>:
    159c:	b510      	push	{r4, lr}
    159e:	f7ff ffeb 	bl	1578 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    15a2:	f00e fe08 	bl	101b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    15a6:	4604      	mov	r4, r0
    15a8:	4802      	ldr	r0, [pc, #8]	; (15b4 <sdc_hci_cmd_cb_reset+0x18>)
    15aa:	6800      	ldr	r0, [r0, #0]
    15ac:	b100      	cbz	r0, 15b0 <sdc_hci_cmd_cb_reset+0x14>
    15ae:	4780      	blx	r0
    15b0:	4620      	mov	r0, r4
    15b2:	bd10      	pop	{r4, pc}
    15b4:	20000054 	.word	0x20000054

000015b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    15b8:	4901      	ldr	r1, [pc, #4]	; (15c0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    15ba:	6008      	str	r0, [r1, #0]
    15bc:	4770      	bx	lr
    15be:	0000      	.short	0x0000
    15c0:	20000054 	.word	0x20000054

000015c4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    15c4:	2102      	movs	r1, #2
    15c6:	8001      	strh	r1, [r0, #0]
    15c8:	8041      	strh	r1, [r0, #2]
    15ca:	2100      	movs	r1, #0
    15cc:	7101      	strb	r1, [r0, #4]
    15ce:	21d8      	movs	r1, #216	; 0xd8
    15d0:	7141      	strb	r1, [r0, #5]
    15d2:	f642 510c 	movw	r1, #11532	; 0x2d0c
    15d6:	80c1      	strh	r1, [r0, #6]
    15d8:	4901      	ldr	r1, [pc, #4]	; (15e0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    15da:	6081      	str	r1, [r0, #8]
    15dc:	2000      	movs	r0, #0
    15de:	4770      	bx	lr
    15e0:	e2ae362f 	.word	0xe2ae362f

000015e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    15e4:	b510      	push	{r4, lr}
    15e6:	2802      	cmp	r0, #2
    15e8:	d304      	bcc.n	15f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    15ea:	f240 2103 	movw	r1, #515	; 0x203
    15ee:	2017      	movs	r0, #23
    15f0:	f7ff fe04 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    15f4:	4901      	ldr	r1, [pc, #4]	; (15fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    15f6:	5c08      	ldrb	r0, [r1, r0]
    15f8:	bd10      	pop	{r4, pc}
    15fa:	0000      	.short	0x0000
    15fc:	20000edc 	.word	0x20000edc

00001600 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1602:	0005      	movs	r5, r0
    1604:	9500      	str	r5, [sp, #0]
    1606:	d00d      	beq.n	1624 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    1608:	2600      	movs	r6, #0
    160a:	7808      	ldrb	r0, [r1, #0]
    160c:	7849      	ldrb	r1, [r1, #1]
    160e:	4604      	mov	r4, r0
    1610:	42a1      	cmp	r1, r4
    1612:	d900      	bls.n	1616 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    1614:	460c      	mov	r4, r1
    1616:	07aa      	lsls	r2, r5, #30
    1618:	d006      	beq.n	1628 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    161a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    161e:	2017      	movs	r0, #23
    1620:	f7ff fdec 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1624:	2601      	movs	r6, #1
    1626:	e7f0      	b.n	160a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    1628:	4f12      	ldr	r7, [pc, #72]	; (1674 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    162a:	7038      	strb	r0, [r7, #0]
    162c:	7079      	strb	r1, [r7, #1]
    162e:	4631      	mov	r1, r6
    1630:	4668      	mov	r0, sp
    1632:	f000 f8d3 	bl	17dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    1636:	2100      	movs	r1, #0
    1638:	460b      	mov	r3, r1
    163a:	9800      	ldr	r0, [sp, #0]
    163c:	1cc0      	adds	r0, r0, #3
    163e:	f020 0003 	bic.w	r0, r0, #3
    1642:	9000      	str	r0, [sp, #0]
    1644:	b966      	cbnz	r6, 1660 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    1646:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    164a:	60d0      	str	r0, [r2, #12]
    164c:	2000      	movs	r0, #0
    164e:	e005      	b.n	165c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    1650:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    1654:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    1658:	1c40      	adds	r0, r0, #1
    165a:	b2c0      	uxtb	r0, r0
    165c:	42a0      	cmp	r0, r4
    165e:	d3f7      	bcc.n	1650 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    1660:	9800      	ldr	r0, [sp, #0]
    1662:	1c49      	adds	r1, r1, #1
    1664:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1668:	b2c9      	uxtb	r1, r1
    166a:	9000      	str	r0, [sp, #0]
    166c:	2902      	cmp	r1, #2
    166e:	d3e4      	bcc.n	163a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    1670:	1b40      	subs	r0, r0, r5
    1672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1674:	20000edc 	.word	0x20000edc

00001678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1678:	b570      	push	{r4, r5, r6, lr}
    167a:	4604      	mov	r4, r0
    167c:	7985      	ldrb	r5, [r0, #6]
    167e:	f000 f8e9 	bl	1854 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    1682:	4a0c      	ldr	r2, [pc, #48]	; (16b4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    1684:	79e1      	ldrb	r1, [r4, #7]
    1686:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    168a:	e00e      	b.n	16aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    168c:	68d3      	ldr	r3, [r2, #12]
    168e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1692:	b143      	cbz	r3, 16a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    1694:	1c48      	adds	r0, r1, #1
    1696:	71e0      	strb	r0, [r4, #7]
    1698:	80a1      	strh	r1, [r4, #4]
    169a:	68d0      	ldr	r0, [r2, #12]
    169c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    16a0:	6020      	str	r0, [r4, #0]
    16a2:	2000      	movs	r0, #0
    16a4:	bd70      	pop	{r4, r5, r6, pc}
    16a6:	1c49      	adds	r1, r1, #1
    16a8:	b2c9      	uxtb	r1, r1
    16aa:	4281      	cmp	r1, r0
    16ac:	d3ee      	bcc.n	168c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    16ae:	71e1      	strb	r1, [r4, #7]
    16b0:	2005      	movs	r0, #5
    16b2:	bd70      	pop	{r4, r5, r6, pc}
    16b4:	20000edc 	.word	0x20000edc

000016b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    16b8:	b4f0      	push	{r4, r5, r6, r7}
    16ba:	b121      	cbz	r1, 16c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    16bc:	2901      	cmp	r1, #1
    16be:	d002      	beq.n	16c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    16c0:	bcf0      	pop	{r4, r5, r6, r7}
    16c2:	2000      	movs	r0, #0
    16c4:	4770      	bx	lr
    16c6:	4a0f      	ldr	r2, [pc, #60]	; (1704 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    16c8:	2500      	movs	r5, #0
    16ca:	462b      	mov	r3, r5
    16cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    16d0:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    16d4:	5c57      	ldrb	r7, [r2, r1]
    16d6:	e00a      	b.n	16ee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    16d8:	195a      	adds	r2, r3, r5
    16da:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    16de:	b292      	uxth	r2, r2
    16e0:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    16e4:	f1bc 0f00 	cmp.w	ip, #0
    16e8:	d004      	beq.n	16f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    16ea:	1c5b      	adds	r3, r3, #1
    16ec:	b29b      	uxth	r3, r3
    16ee:	429f      	cmp	r7, r3
    16f0:	d8f2      	bhi.n	16d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    16f2:	4622      	mov	r2, r4
    16f4:	8002      	strh	r2, [r0, #0]
    16f6:	4610      	mov	r0, r2
    16f8:	42a2      	cmp	r2, r4
    16fa:	d0e1      	beq.n	16c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    16fc:	bcf0      	pop	{r4, r5, r6, r7}
    16fe:	f000 b835 	b.w	176c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    1702:	0000      	.short	0x0000
    1704:	20000edc 	.word	0x20000edc

00001708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    170c:	4606      	mov	r6, r0
    170e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    1712:	460c      	mov	r4, r1
    1714:	f243 0702 	movw	r7, #12290	; 0x3002
    1718:	38ff      	subs	r0, #255	; 0xff
    171a:	d020      	beq.n	175e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    171c:	2c02      	cmp	r4, #2
    171e:	d302      	bcc.n	1726 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    1720:	2007      	movs	r0, #7
    1722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1726:	4630      	mov	r0, r6
    1728:	f000 f848 	bl	17bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    172c:	0005      	movs	r5, r0
    172e:	d016      	beq.n	175e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    1730:	480c      	ldr	r0, [pc, #48]	; (1764 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    1732:	4629      	mov	r1, r5
    1734:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    1738:	4630      	mov	r0, r6
    173a:	4790      	blx	r2
    173c:	480a      	ldr	r0, [pc, #40]	; (1768 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    173e:	2100      	movs	r1, #0
    1740:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    1744:	68f8      	ldr	r0, [r7, #12]
    1746:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    174a:	4620      	mov	r0, r4
    174c:	f000 f878 	bl	1840 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    1750:	4602      	mov	r2, r0
    1752:	4629      	mov	r1, r5
    1754:	6878      	ldr	r0, [r7, #4]
    1756:	f00b ff56 	bl	d606 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    175a:	2000      	movs	r0, #0
    175c:	e7e1      	b.n	1722 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    175e:	4638      	mov	r0, r7
    1760:	e7df      	b.n	1722 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1762:	0000      	.short	0x0000
    1764:	0000186c 	.word	0x0000186c
    1768:	20000edc 	.word	0x20000edc
    176c:	b570      	push	{r4, r5, r6, lr}
    176e:	460e      	mov	r6, r1
    1770:	4605      	mov	r5, r0
    1772:	f00b ff82 	bl	d67a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    1776:	b158      	cbz	r0, 1790 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    1778:	480f      	ldr	r0, [pc, #60]	; (17b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    177a:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    177e:	68e0      	ldr	r0, [r4, #12]
    1780:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    1784:	b138      	cbz	r0, 1796 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    1786:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    178a:	2017      	movs	r0, #23
    178c:	f7ff fd36 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1790:	f240 1189 	movw	r1, #393	; 0x189
    1794:	e7f9      	b.n	178a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    1796:	6860      	ldr	r0, [r4, #4]
    1798:	2800      	cmp	r0, #0
    179a:	d00b      	beq.n	17b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    179c:	4630      	mov	r0, r6
    179e:	f000 f84f 	bl	1840 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    17a2:	4601      	mov	r1, r0
    17a4:	6860      	ldr	r0, [r4, #4]
    17a6:	f00b fed6 	bl	d556 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    17aa:	2800      	cmp	r0, #0
    17ac:	d002      	beq.n	17b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    17ae:	68e1      	ldr	r1, [r4, #12]
    17b0:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    17b4:	bd70      	pop	{r4, r5, r6, pc}
    17b6:	0000      	.short	0x0000
    17b8:	20000edc 	.word	0x20000edc
    17bc:	b570      	push	{r4, r5, r6, lr}
    17be:	460c      	mov	r4, r1
    17c0:	4605      	mov	r5, r0
    17c2:	f00b ff5a 	bl	d67a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    17c6:	2800      	cmp	r0, #0
    17c8:	d005      	beq.n	17d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    17ca:	4803      	ldr	r0, [pc, #12]	; (17d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    17cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    17d0:	68c0      	ldr	r0, [r0, #12]
    17d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    17d6:	bd70      	pop	{r4, r5, r6, pc}
    17d8:	20000edc 	.word	0x20000edc
    17dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    17e0:	4e16      	ldr	r6, [pc, #88]	; (183c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    17e2:	4688      	mov	r8, r1
    17e4:	4605      	mov	r5, r0
    17e6:	2400      	movs	r4, #0
    17e8:	6828      	ldr	r0, [r5, #0]
    17ea:	1cc0      	adds	r0, r0, #3
    17ec:	f020 0003 	bic.w	r0, r0, #3
    17f0:	6028      	str	r0, [r5, #0]
    17f2:	4620      	mov	r0, r4
    17f4:	f000 f824 	bl	1840 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    17f8:	5d31      	ldrb	r1, [r6, r4]
    17fa:	4348      	muls	r0, r1
    17fc:	f1b8 0f00 	cmp.w	r8, #0
    1800:	d001      	beq.n	1806 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    1802:	2200      	movs	r2, #0
    1804:	e000      	b.n	1808 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    1806:	682a      	ldr	r2, [r5, #0]
    1808:	4601      	mov	r1, r0
    180a:	9200      	str	r2, [sp, #0]
    180c:	b132      	cbz	r2, 181c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    180e:	2700      	movs	r7, #0
    1810:	ea4f 000d 	mov.w	r0, sp
    1814:	f00b fed0 	bl	d5b8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1818:	b11f      	cbz	r7, 1822 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    181a:	e006      	b.n	182a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    181c:	2701      	movs	r7, #1
    181e:	2000      	movs	r0, #0
    1820:	e7f8      	b.n	1814 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    1822:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1826:	9a00      	ldr	r2, [sp, #0]
    1828:	604a      	str	r2, [r1, #4]
    182a:	6829      	ldr	r1, [r5, #0]
    182c:	1c64      	adds	r4, r4, #1
    182e:	4408      	add	r0, r1
    1830:	b2e4      	uxtb	r4, r4
    1832:	6028      	str	r0, [r5, #0]
    1834:	2c02      	cmp	r4, #2
    1836:	d3d7      	bcc.n	17e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    1838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    183c:	20000edc 	.word	0x20000edc
    1840:	4903      	ldr	r1, [pc, #12]	; (1850 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    1842:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    1846:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    184a:	1cc0      	adds	r0, r0, #3
    184c:	4008      	ands	r0, r1
    184e:	4770      	bx	lr
    1850:	00001868 	.word	0x00001868
    1854:	4903      	ldr	r1, [pc, #12]	; (1864 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    1856:	7808      	ldrb	r0, [r1, #0]
    1858:	7849      	ldrb	r1, [r1, #1]
    185a:	4288      	cmp	r0, r1
    185c:	d200      	bcs.n	1860 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    185e:	4608      	mov	r0, r1
    1860:	4770      	bx	lr
    1862:	0000      	.short	0x0000
    1864:	20000edc 	.word	0x20000edc
    1868:	011802f8 	.word	0x011802f8
    186c:	0000f359 	.word	0x0000f359
    1870:	0000e903 	.word	0x0000e903

00001874 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1874:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1878:	4c24      	ldr	r4, [pc, #144]	; (190c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    187a:	4606      	mov	r6, r0
    187c:	b081      	sub	sp, #4
    187e:	6820      	ldr	r0, [r4, #0]
    1880:	469a      	mov	sl, r3
    1882:	4693      	mov	fp, r2
    1884:	b158      	cbz	r0, 189e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1886:	7a01      	ldrb	r1, [r0, #8]
    1888:	42b1      	cmp	r1, r6
    188a:	d903      	bls.n	1894 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    188c:	6840      	ldr	r0, [r0, #4]
    188e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1892:	b140      	cbz	r0, 18a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1894:	f243 0002 	movw	r0, #12290	; 0x3002
    1898:	b005      	add	sp, #20
    189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    189e:	21a5      	movs	r1, #165	; 0xa5
    18a0:	2018      	movs	r0, #24
    18a2:	f7ff fcab 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    18a6:	4619      	mov	r1, r3
    18a8:	9802      	ldr	r0, [sp, #8]
    18aa:	f00b ff09 	bl	d6c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    18ae:	4680      	mov	r8, r0
    18b0:	4658      	mov	r0, fp
    18b2:	990e      	ldr	r1, [sp, #56]	; 0x38
    18b4:	f00b fefa 	bl	d6ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    18b8:	4605      	mov	r5, r0
    18ba:	eb08 0005 	add.w	r0, r8, r5
    18be:	1d00      	adds	r0, r0, #4
    18c0:	b287      	uxth	r7, r0
    18c2:	6820      	ldr	r0, [r4, #0]
    18c4:	46a1      	mov	r9, r4
    18c6:	4639      	mov	r1, r7
    18c8:	6800      	ldr	r0, [r0, #0]
    18ca:	f00b fe44 	bl	d556 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    18ce:	0004      	movs	r4, r0
    18d0:	d01a      	beq.n	1908 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    18d2:	8067      	strh	r7, [r4, #2]
    18d4:	8025      	strh	r5, [r4, #0]
    18d6:	4629      	mov	r1, r5
    18d8:	1d20      	adds	r0, r4, #4
    18da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    18dc:	4607      	mov	r7, r0
    18de:	465a      	mov	r2, fp
    18e0:	2309      	movs	r3, #9
    18e2:	9500      	str	r5, [sp, #0]
    18e4:	f00b fdb1 	bl	d44a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    18e8:	8820      	ldrh	r0, [r4, #0]
    18ea:	4641      	mov	r1, r8
    18ec:	4438      	add	r0, r7
    18ee:	230a      	movs	r3, #10
    18f0:	9a02      	ldr	r2, [sp, #8]
    18f2:	f8cd a000 	str.w	sl, [sp]
    18f6:	f00b fda8 	bl	d44a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    18fa:	f8d9 0000 	ldr.w	r0, [r9]
    18fe:	6840      	ldr	r0, [r0, #4]
    1900:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1904:	2000      	movs	r0, #0
    1906:	e7c7      	b.n	1898 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1908:	2004      	movs	r0, #4
    190a:	e7c5      	b.n	1898 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    190c:	20000058 	.word	0x20000058

00001910 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	4c14      	ldr	r4, [pc, #80]	; (1964 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1914:	6823      	ldr	r3, [r4, #0]
    1916:	b18b      	cbz	r3, 193c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1918:	7a19      	ldrb	r1, [r3, #8]
    191a:	4281      	cmp	r1, r0
    191c:	d912      	bls.n	1944 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    191e:	685a      	ldr	r2, [r3, #4]
    1920:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1924:	b171      	cbz	r1, 1944 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1926:	2500      	movs	r5, #0
    1928:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    192c:	884a      	ldrh	r2, [r1, #2]
    192e:	6818      	ldr	r0, [r3, #0]
    1930:	f00b fe69 	bl	d606 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1934:	6821      	ldr	r1, [r4, #0]
    1936:	2000      	movs	r0, #0
    1938:	7a0a      	ldrb	r2, [r1, #8]
    193a:	e00c      	b.n	1956 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    193c:	21c6      	movs	r1, #198	; 0xc6
    193e:	2018      	movs	r0, #24
    1940:	f7ff fc5c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1944:	f243 0002 	movw	r0, #12290	; 0x3002
    1948:	bd70      	pop	{r4, r5, r6, pc}
    194a:	684b      	ldr	r3, [r1, #4]
    194c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1950:	b933      	cbnz	r3, 1960 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1952:	1c40      	adds	r0, r0, #1
    1954:	b2c0      	uxtb	r0, r0
    1956:	4282      	cmp	r2, r0
    1958:	d8f7      	bhi.n	194a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    195a:	6808      	ldr	r0, [r1, #0]
    195c:	f00b fe48 	bl	d5f0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1960:	2000      	movs	r0, #0
    1962:	bd70      	pop	{r4, r5, r6, pc}
    1964:	20000058 	.word	0x20000058

00001968 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    196c:	460d      	mov	r5, r1
    196e:	0004      	movs	r4, r0
    1970:	4690      	mov	r8, r2
    1972:	f04f 0600 	mov.w	r6, #0
    1976:	d006      	beq.n	1986 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1978:	2700      	movs	r7, #0
    197a:	07a0      	lsls	r0, r4, #30
    197c:	d005      	beq.n	198a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    197e:	2186      	movs	r1, #134	; 0x86
    1980:	2018      	movs	r0, #24
    1982:	f7ff fc3b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1986:	2701      	movs	r7, #1
    1988:	e7f7      	b.n	197a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    198a:	b1cd      	cbz	r5, 19c0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    198c:	4611      	mov	r1, r2
    198e:	2000      	movs	r0, #0
    1990:	f00b fe12 	bl	d5b8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1994:	300c      	adds	r0, #12
    1996:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    199a:	b98f      	cbnz	r7, 19c0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    199c:	4f0a      	ldr	r7, [pc, #40]	; (19c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    199e:	f104 000c 	add.w	r0, r4, #12
    19a2:	00aa      	lsls	r2, r5, #2
    19a4:	603c      	str	r4, [r7, #0]
    19a6:	7225      	strb	r5, [r4, #8]
    19a8:	6060      	str	r0, [r4, #4]
    19aa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    19ae:	6020      	str	r0, [r4, #0]
    19b0:	2100      	movs	r1, #0
    19b2:	6860      	ldr	r0, [r4, #4]
    19b4:	f00f f9a2 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    19b8:	4641      	mov	r1, r8
    19ba:	6838      	ldr	r0, [r7, #0]
    19bc:	f00b fdfc 	bl	d5b8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    19c0:	4630      	mov	r0, r6
    19c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19c6:	0000      	.short	0x0000
    19c8:	20000058 	.word	0x20000058

000019cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    19cc:	b570      	push	{r4, r5, r6, lr}
    19ce:	4d08      	ldr	r5, [pc, #32]	; (19f0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    19d0:	6828      	ldr	r0, [r5, #0]
    19d2:	2800      	cmp	r0, #0
    19d4:	d00a      	beq.n	19ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    19d6:	2400      	movs	r4, #0
    19d8:	e004      	b.n	19e4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    19da:	4620      	mov	r0, r4
    19dc:	f7ff ff98 	bl	1910 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    19e0:	1c64      	adds	r4, r4, #1
    19e2:	b2e4      	uxtb	r4, r4
    19e4:	6828      	ldr	r0, [r5, #0]
    19e6:	7a00      	ldrb	r0, [r0, #8]
    19e8:	42a0      	cmp	r0, r4
    19ea:	d8f6      	bhi.n	19da <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    19ec:	bd70      	pop	{r4, r5, r6, pc}
    19ee:	0000      	.short	0x0000
    19f0:	20000058 	.word	0x20000058

000019f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    19f4:	4909      	ldr	r1, [pc, #36]	; (1a1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    19f6:	b510      	push	{r4, lr}
    19f8:	4602      	mov	r2, r0
    19fa:	6809      	ldr	r1, [r1, #0]
    19fc:	2000      	movs	r0, #0
    19fe:	b149      	cbz	r1, 1a14 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1a00:	7a0b      	ldrb	r3, [r1, #8]
    1a02:	4293      	cmp	r3, r2
    1a04:	d905      	bls.n	1a12 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1a06:	6849      	ldr	r1, [r1, #4]
    1a08:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1a0c:	2900      	cmp	r1, #0
    1a0e:	d000      	beq.n	1a12 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1a10:	1d08      	adds	r0, r1, #4
    1a12:	bd10      	pop	{r4, pc}
    1a14:	21ec      	movs	r1, #236	; 0xec
    1a16:	2018      	movs	r0, #24
    1a18:	f7ff fbf0 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a1c:	20000058 	.word	0x20000058

00001a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1a20:	490a      	ldr	r1, [pc, #40]	; (1a4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1a22:	b510      	push	{r4, lr}
    1a24:	4602      	mov	r2, r0
    1a26:	6809      	ldr	r1, [r1, #0]
    1a28:	2000      	movs	r0, #0
    1a2a:	b159      	cbz	r1, 1a44 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1a2c:	7a0b      	ldrb	r3, [r1, #8]
    1a2e:	4293      	cmp	r3, r2
    1a30:	d907      	bls.n	1a42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1a32:	6849      	ldr	r1, [r1, #4]
    1a34:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1a38:	2900      	cmp	r1, #0
    1a3a:	d002      	beq.n	1a42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1a3c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1a40:	4408      	add	r0, r1
    1a42:	bd10      	pop	{r4, pc}
    1a44:	21fa      	movs	r1, #250	; 0xfa
    1a46:	2018      	movs	r0, #24
    1a48:	f7ff fbd8 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a4c:	20000058 	.word	0x20000058
    1a50:	b570      	push	{r4, r5, r6, lr}
    1a52:	4b1e      	ldr	r3, [pc, #120]	; (1acc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1a54:	6845      	ldr	r5, [r0, #4]
    1a56:	4604      	mov	r4, r0
    1a58:	2200      	movs	r2, #0
    1a5a:	b1a1      	cbz	r1, 1a86 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1a5c:	2001      	movs	r0, #1
    1a5e:	7060      	strb	r0, [r4, #1]
    1a60:	8858      	ldrh	r0, [r3, #2]
    1a62:	0881      	lsrs	r1, r0, #2
    1a64:	f05f 0000 	movs.w	r0, #0
    1a68:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1a6c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1a70:	831a      	strh	r2, [r3, #24]
    1a72:	8419      	strh	r1, [r3, #32]
    1a74:	fb00 5301 	mla	r3, r0, r1, r5
    1a78:	6073      	str	r3, [r6, #4]
    1a7a:	1823      	adds	r3, r4, r0
    1a7c:	1c40      	adds	r0, r0, #1
    1a7e:	751a      	strb	r2, [r3, #20]
    1a80:	2804      	cmp	r0, #4
    1a82:	d3f1      	bcc.n	1a68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1a84:	bd70      	pop	{r4, r5, r6, pc}
    1a86:	7062      	strb	r2, [r4, #1]
    1a88:	f05f 0000 	movs.w	r0, #0
    1a8c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1a90:	830a      	strh	r2, [r1, #24]
    1a92:	840a      	strh	r2, [r1, #32]
    1a94:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1a98:	604a      	str	r2, [r1, #4]
    1a9a:	1821      	adds	r1, r4, r0
    1a9c:	1c40      	adds	r0, r0, #1
    1a9e:	750a      	strb	r2, [r1, #20]
    1aa0:	2804      	cmp	r0, #4
    1aa2:	d3f3      	bcc.n	1a8c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1aa4:	8858      	ldrh	r0, [r3, #2]
    1aa6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1aaa:	d201      	bcs.n	1ab0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1aac:	0846      	lsrs	r6, r0, #1
    1aae:	e000      	b.n	1ab2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1ab0:	26ff      	movs	r6, #255	; 0xff
    1ab2:	f00b fe79 	bl	d7a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1ab6:	6065      	str	r5, [r4, #4]
    1ab8:	8420      	strh	r0, [r4, #32]
    1aba:	1829      	adds	r1, r5, r0
    1abc:	60a1      	str	r1, [r4, #8]
    1abe:	8466      	strh	r6, [r4, #34]	; 0x22
    1ac0:	60e5      	str	r5, [r4, #12]
    1ac2:	84a0      	strh	r0, [r4, #36]	; 0x24
    1ac4:	6121      	str	r1, [r4, #16]
    1ac6:	84e6      	strh	r6, [r4, #38]	; 0x26
    1ac8:	bd70      	pop	{r4, r5, r6, pc}
    1aca:	0000      	.short	0x0000
    1acc:	2000005c 	.word	0x2000005c

00001ad0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ad4:	b158      	cbz	r0, 1aee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1ad6:	2500      	movs	r5, #0
    1ad8:	4411      	add	r1, r2
    1ada:	4e24      	ldr	r6, [pc, #144]	; (1b6c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1adc:	b2cc      	uxtb	r4, r1
    1ade:	2700      	movs	r7, #0
    1ae0:	7034      	strb	r4, [r6, #0]
    1ae2:	0781      	lsls	r1, r0, #30
    1ae4:	d005      	beq.n	1af2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1ae6:	214e      	movs	r1, #78	; 0x4e
    1ae8:	2009      	movs	r0, #9
    1aea:	f7ff fb87 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1aee:	2501      	movs	r5, #1
    1af0:	e7f2      	b.n	1ad8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1af2:	2b1f      	cmp	r3, #31
    1af4:	d804      	bhi.n	1b00 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1af6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1afa:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1afe:	e009      	b.n	1b14 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1b00:	0059      	lsls	r1, r3, #1
    1b02:	2bff      	cmp	r3, #255	; 0xff
    1b04:	d90c      	bls.n	1b20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1b06:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1b0a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1b0e:	d200      	bcs.n	1b12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b10:	4611      	mov	r1, r2
    1b12:	b289      	uxth	r1, r1
    1b14:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1b18:	1cc9      	adds	r1, r1, #3
    1b1a:	4011      	ands	r1, r2
    1b1c:	b135      	cbz	r5, 1b2c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1b1e:	e007      	b.n	1b30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1b20:	227c      	movs	r2, #124	; 0x7c
    1b22:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1b26:	d3f4      	bcc.n	1b12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b28:	217c      	movs	r1, #124	; 0x7c
    1b2a:	e7f2      	b.n	1b12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b2c:	6070      	str	r0, [r6, #4]
    1b2e:	8071      	strh	r1, [r6, #2]
    1b30:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1b34:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1b38:	2200      	movs	r2, #0
    1b3a:	6876      	ldr	r6, [r6, #4]
    1b3c:	f04f 0c01 	mov.w	ip, #1
    1b40:	e00d      	b.n	1b5e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1b42:	b94d      	cbnz	r5, 1b58 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1b44:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1b48:	eb00 0e03 	add.w	lr, r0, r3
    1b4c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1b50:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1b54:	f8c7 e004 	str.w	lr, [r7, #4]
    1b58:	1c52      	adds	r2, r2, #1
    1b5a:	440b      	add	r3, r1
    1b5c:	b2d2      	uxtb	r2, r2
    1b5e:	42a2      	cmp	r2, r4
    1b60:	d3ef      	bcc.n	1b42 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1b62:	1ddb      	adds	r3, r3, #7
    1b64:	f023 0007 	bic.w	r0, r3, #7
    1b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b6c:	2000005c 	.word	0x2000005c

00001b70 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1b70:	b570      	push	{r4, r5, r6, lr}
    1b72:	4a10      	ldr	r2, [pc, #64]	; (1bb4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1b74:	2000      	movs	r0, #0
    1b76:	6851      	ldr	r1, [r2, #4]
    1b78:	7812      	ldrb	r2, [r2, #0]
    1b7a:	e014      	b.n	1ba6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1b7c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1b80:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1b84:	b16b      	cbz	r3, 1ba2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1b8a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1b8e:	d00c      	beq.n	1baa <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1b90:	2500      	movs	r5, #0
    1b92:	70a5      	strb	r5, [r4, #2]
    1b94:	2101      	movs	r1, #1
    1b96:	4620      	mov	r0, r4
    1b98:	f7ff ff5a 	bl	1a50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1b9c:	7025      	strb	r5, [r4, #0]
    1b9e:	4620      	mov	r0, r4
    1ba0:	bd70      	pop	{r4, r5, r6, pc}
    1ba2:	1c40      	adds	r0, r0, #1
    1ba4:	b2c0      	uxtb	r0, r0
    1ba6:	4290      	cmp	r0, r2
    1ba8:	d3e8      	bcc.n	1b7c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1baa:	21a9      	movs	r1, #169	; 0xa9
    1bac:	2009      	movs	r0, #9
    1bae:	f7ff fb25 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1bb2:	0000      	.short	0x0000
    1bb4:	2000005c 	.word	0x2000005c

00001bb8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1bb8:	4804      	ldr	r0, [pc, #16]	; (1bcc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1bba:	b510      	push	{r4, lr}
    1bbc:	8840      	ldrh	r0, [r0, #2]
    1bbe:	0884      	lsrs	r4, r0, #2
    1bc0:	f00b fdf2 	bl	d7a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1bc4:	4284      	cmp	r4, r0
    1bc6:	d300      	bcc.n	1bca <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1bc8:	4620      	mov	r0, r4
    1bca:	bd10      	pop	{r4, pc}
    1bcc:	2000005c 	.word	0x2000005c
    1bd0:	b530      	push	{r4, r5, lr}
    1bd2:	490d      	ldr	r1, [pc, #52]	; (1c08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1bd4:	2001      	movs	r0, #1
    1bd6:	6048      	str	r0, [r1, #4]
    1bd8:	1e82      	subs	r2, r0, #2
    1bda:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1bde:	490b      	ldr	r1, [pc, #44]	; (1c0c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1be0:	6088      	str	r0, [r1, #8]
    1be2:	2300      	movs	r3, #0
    1be4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1be8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1bec:	4c08      	ldr	r4, [pc, #32]	; (1c10 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1bee:	6023      	str	r3, [r4, #0]
    1bf0:	1d25      	adds	r5, r4, #4
    1bf2:	6028      	str	r0, [r5, #0]
    1bf4:	6088      	str	r0, [r1, #8]
    1bf6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1bfa:	6023      	str	r3, [r4, #0]
    1bfc:	6028      	str	r0, [r5, #0]
    1bfe:	4906      	ldr	r1, [pc, #24]	; (1c18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1c00:	4804      	ldr	r0, [pc, #16]	; (1c14 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1c02:	6008      	str	r0, [r1, #0]
    1c04:	bd30      	pop	{r4, r5, pc}
    1c06:	0000      	.short	0x0000
    1c08:	4000e000 	.word	0x4000e000
    1c0c:	4000f000 	.word	0x4000f000
    1c10:	4000f500 	.word	0x4000f500
    1c14:	3ff60000 	.word	0x3ff60000
    1c18:	4001f508 	.word	0x4001f508

00001c1c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1c1c:	b510      	push	{r4, lr}
    1c1e:	f7ff ffd7 	bl	1bd0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1c22:	f00b fe98 	bl	d956 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1c26:	4903      	ldr	r1, [pc, #12]	; (1c34 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1c28:	4801      	ldr	r0, [pc, #4]	; (1c30 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1c2a:	6008      	str	r0, [r1, #0]
    1c2c:	bd10      	pop	{r4, pc}
    1c2e:	0000      	.short	0x0000
    1c30:	3ff60000 	.word	0x3ff60000
    1c34:	4001f508 	.word	0x4001f508

00001c38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1c38:	b510      	push	{r4, lr}
    1c3a:	f7ff ffc9 	bl	1bd0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1c3e:	f00b fe8a 	bl	d956 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1c42:	f000 f887 	bl	1d54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1c46:	4905      	ldr	r1, [pc, #20]	; (1c5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1c48:	4803      	ldr	r0, [pc, #12]	; (1c58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1c4a:	6008      	str	r0, [r1, #0]
    1c4c:	f000 f8b8 	bl	1dc0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1c54:	f000 b8dc 	b.w	1e10 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1c58:	3ff60000 	.word	0x3ff60000
    1c5c:	4001f508 	.word	0x4001f508
    1c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c64:	4682      	mov	sl, r0
    1c66:	4838      	ldr	r0, [pc, #224]	; (1d48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1c68:	f00e feec 	bl	10a44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1c6c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1d48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1c70:	b128      	cbz	r0, 1c7e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1c72:	2601      	movs	r6, #1
    1c74:	f10b 0001 	add.w	r0, fp, #1
    1c78:	21ff      	movs	r1, #255	; 0xff
    1c7a:	7001      	strb	r1, [r0, #0]
    1c7c:	e000      	b.n	1c80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1c7e:	2600      	movs	r6, #0
    1c80:	f44f 7580 	mov.w	r5, #256	; 0x100
    1c84:	4c31      	ldr	r4, [pc, #196]	; (1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>)
    1c86:	f04f 0800 	mov.w	r8, #0
    1c8a:	1d2f      	adds	r7, r5, #4
    1c8c:	2101      	movs	r1, #1
    1c8e:	6061      	str	r1, [r4, #4]
    1c90:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1c94:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1c98:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1c9c:	6021      	str	r1, [r4, #0]
    1c9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>
    1ca2:	e01c      	b.n	1cde <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1ca4:	f8d9 0000 	ldr.w	r0, [r9]
    1ca8:	06c0      	lsls	r0, r0, #27
    1caa:	d518      	bpl.n	1cde <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1cac:	200e      	movs	r0, #14
    1cae:	f00b fe61 	bl	d974 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1cb2:	f3ef 8010 	mrs	r0, PRIMASK
    1cb6:	9000      	str	r0, [sp, #0]
    1cb8:	b672      	cpsid	i
    1cba:	2103      	movs	r1, #3
    1cbc:	4620      	mov	r0, r4
    1cbe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1cc2:	4629      	mov	r1, r5
    1cc4:	f00b fe63 	bl	d98e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1cc8:	b930      	cbnz	r0, 1cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1cca:	4639      	mov	r1, r7
    1ccc:	4620      	mov	r0, r4
    1cce:	f00b fe5e 	bl	d98e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1cd2:	b908      	cbnz	r0, 1cd8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1cd4:	f00e ff4d 	bl	10b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1cd8:	9800      	ldr	r0, [sp, #0]
    1cda:	b900      	cbnz	r0, 1cde <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1cdc:	b662      	cpsie	i
    1cde:	4629      	mov	r1, r5
    1ce0:	4620      	mov	r0, r4
    1ce2:	f00b fe54 	bl	d98e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ce6:	b928      	cbnz	r0, 1cf4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1ce8:	4639      	mov	r1, r7
    1cea:	4620      	mov	r0, r4
    1cec:	f00b fe4f 	bl	d98e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1cf0:	2800      	cmp	r0, #0
    1cf2:	d0d7      	beq.n	1ca4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1cf4:	4639      	mov	r1, r7
    1cf6:	4620      	mov	r0, r4
    1cf8:	f00b fe49 	bl	d98e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1cfc:	2800      	cmp	r0, #0
    1cfe:	d1c5      	bne.n	1c8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1d00:	bb06      	cbnz	r6, 1d44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1d02:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1d06:	f88d 1000 	strb.w	r1, [sp]
    1d0a:	9900      	ldr	r1, [sp, #0]
    1d0c:	9100      	str	r1, [sp, #0]
    1d0e:	f89d 1000 	ldrb.w	r1, [sp]
    1d12:	b109      	cbz	r1, 1d18 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1d14:	2501      	movs	r5, #1
    1d16:	e000      	b.n	1d1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1d18:	2500      	movs	r5, #0
    1d1a:	f10b 0001 	add.w	r0, fp, #1
    1d1e:	f880 8000 	strb.w	r8, [r0]
    1d22:	2003      	movs	r0, #3
    1d24:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1d28:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1d2c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1d30:	200e      	movs	r0, #14
    1d32:	f00b fe1f 	bl	d974 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1d36:	4804      	ldr	r0, [pc, #16]	; (1d48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1d38:	f00e fe9b 	bl	10a72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1d3c:	b115      	cbz	r5, 1d44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1d3e:	2011      	movs	r0, #17
    1d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d44:	2000      	movs	r0, #0
    1d46:	e7fb      	b.n	1d40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1d48:	2000035c 	.word	0x2000035c
    1d4c:	4000e000 	.word	0x4000e000
    1d50:	e000ed10 	.word	0xe000ed10

00001d54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1d54:	b510      	push	{r4, lr}
    1d56:	4806      	ldr	r0, [pc, #24]	; (1d70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1d58:	f00e fe87 	bl	10a6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1d5c:	b118      	cbz	r0, 1d66 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1d5e:	2127      	movs	r1, #39	; 0x27
    1d60:	201d      	movs	r0, #29
    1d62:	f7ff fa4b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d66:	4802      	ldr	r0, [pc, #8]	; (1d70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1d68:	2100      	movs	r1, #0
    1d6a:	7041      	strb	r1, [r0, #1]
    1d6c:	bd10      	pop	{r4, pc}
    1d6e:	0000      	.short	0x0000
    1d70:	2000035c 	.word	0x2000035c

00001d74 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1d74:	b570      	push	{r4, r5, r6, lr}
    1d76:	4911      	ldr	r1, [pc, #68]	; (1dbc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1d78:	680a      	ldr	r2, [r1, #0]
    1d7a:	b1ea      	cbz	r2, 1db8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1d7c:	2300      	movs	r3, #0
    1d7e:	461d      	mov	r5, r3
    1d80:	2401      	movs	r4, #1
    1d82:	684a      	ldr	r2, [r1, #4]
    1d84:	1c52      	adds	r2, r2, #1
    1d86:	604a      	str	r2, [r1, #4]
    1d88:	2a09      	cmp	r2, #9
    1d8a:	d300      	bcc.n	1d8e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1d8c:	604d      	str	r5, [r1, #4]
    1d8e:	790e      	ldrb	r6, [r1, #4]
    1d90:	fa04 f206 	lsl.w	r2, r4, r6
    1d94:	680e      	ldr	r6, [r1, #0]
    1d96:	4216      	tst	r6, r2
    1d98:	d00b      	beq.n	1db2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1d9a:	f3ef 8310 	mrs	r3, PRIMASK
    1d9e:	b672      	cpsid	i
    1da0:	680c      	ldr	r4, [r1, #0]
    1da2:	4394      	bics	r4, r2
    1da4:	600c      	str	r4, [r1, #0]
    1da6:	b903      	cbnz	r3, 1daa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1da8:	b662      	cpsie	i
    1daa:	6849      	ldr	r1, [r1, #4]
    1dac:	6001      	str	r1, [r0, #0]
    1dae:	2000      	movs	r0, #0
    1db0:	bd70      	pop	{r4, r5, r6, pc}
    1db2:	1c5b      	adds	r3, r3, #1
    1db4:	2b09      	cmp	r3, #9
    1db6:	d3e4      	bcc.n	1d82 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1db8:	2005      	movs	r0, #5
    1dba:	bd70      	pop	{r4, r5, r6, pc}
    1dbc:	20000064 	.word	0x20000064

00001dc0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1dc0:	4802      	ldr	r0, [pc, #8]	; (1dcc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1dc2:	2100      	movs	r1, #0
    1dc4:	6001      	str	r1, [r0, #0]
    1dc6:	6041      	str	r1, [r0, #4]
    1dc8:	4770      	bx	lr
    1dca:	0000      	.short	0x0000
    1dcc:	20000064 	.word	0x20000064

00001dd0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1dd0:	b510      	push	{r4, lr}
    1dd2:	4c04      	ldr	r4, [pc, #16]	; (1de4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1dd4:	7820      	ldrb	r0, [r4, #0]
    1dd6:	28ff      	cmp	r0, #255	; 0xff
    1dd8:	d003      	beq.n	1de2 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1dda:	f00a fb83 	bl	c4e4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1dde:	20ff      	movs	r0, #255	; 0xff
    1de0:	7020      	strb	r0, [r4, #0]
    1de2:	bd10      	pop	{r4, pc}
    1de4:	20000000 	.word	0x20000000

00001de8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1de8:	b510      	push	{r4, lr}
    1dea:	4c08      	ldr	r4, [pc, #32]	; (1e0c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1dec:	7861      	ldrb	r1, [r4, #1]
    1dee:	b109      	cbz	r1, 1df4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1df0:	200f      	movs	r0, #15
    1df2:	bd10      	pop	{r4, pc}
    1df4:	f00a fb3c 	bl	c470 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1df8:	7020      	strb	r0, [r4, #0]
    1dfa:	28ff      	cmp	r0, #255	; 0xff
    1dfc:	d001      	beq.n	1e02 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1dfe:	2000      	movs	r0, #0
    1e00:	bd10      	pop	{r4, pc}
    1e02:	2173      	movs	r1, #115	; 0x73
    1e04:	201f      	movs	r0, #31
    1e06:	f7ff f9f9 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e0a:	0000      	.short	0x0000
    1e0c:	20000000 	.word	0x20000000

00001e10 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1e10:	4901      	ldr	r1, [pc, #4]	; (1e18 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1e12:	2000      	movs	r0, #0
    1e14:	7048      	strb	r0, [r1, #1]
    1e16:	4770      	bx	lr
    1e18:	20000000 	.word	0x20000000

00001e1c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1e1c:	4806      	ldr	r0, [pc, #24]	; (1e38 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1e1e:	4a07      	ldr	r2, [pc, #28]	; (1e3c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1e20:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1e22:	8852      	ldrh	r2, [r2, #2]
    1e24:	4291      	cmp	r1, r2
    1e26:	d104      	bne.n	1e32 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1e28:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1e2c:	b108      	cbz	r0, 1e32 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1e2e:	2000      	movs	r0, #0
    1e30:	4770      	bx	lr
    1e32:	2001      	movs	r0, #1
    1e34:	4770      	bx	lr
    1e36:	0000      	.short	0x0000
    1e38:	20001400 	.word	0x20001400
    1e3c:	20000348 	.word	0x20000348

00001e40 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1e40:	4901      	ldr	r1, [pc, #4]	; (1e48 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1e42:	8048      	strh	r0, [r1, #2]
    1e44:	4770      	bx	lr
    1e46:	0000      	.short	0x0000
    1e48:	20000348 	.word	0x20000348

00001e4c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1e4c:	4808      	ldr	r0, [pc, #32]	; (1e70 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1e4e:	4a09      	ldr	r2, [pc, #36]	; (1e74 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1e50:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1e52:	8852      	ldrh	r2, [r2, #2]
    1e54:	4291      	cmp	r1, r2
    1e56:	d109      	bne.n	1e6c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1e5c:	8481      	strh	r1, [r0, #36]	; 0x24
    1e5e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1e62:	b119      	cbz	r1, 1e6c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1e64:	2100      	movs	r1, #0
    1e66:	7001      	strb	r1, [r0, #0]
    1e68:	2001      	movs	r0, #1
    1e6a:	4770      	bx	lr
    1e6c:	2000      	movs	r0, #0
    1e6e:	4770      	bx	lr
    1e70:	20001400 	.word	0x20001400
    1e74:	20000348 	.word	0x20000348

00001e78 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1e78:	4807      	ldr	r0, [pc, #28]	; (1e98 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1e7a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1e7e:	2901      	cmp	r1, #1
    1e80:	d007      	beq.n	1e92 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1e82:	2101      	movs	r1, #1
    1e84:	7001      	strb	r1, [r0, #0]
    1e86:	4805      	ldr	r0, [pc, #20]	; (1e9c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1e88:	4903      	ldr	r1, [pc, #12]	; (1e98 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1e8a:	8800      	ldrh	r0, [r0, #0]
    1e8c:	8488      	strh	r0, [r1, #36]	; 0x24
    1e8e:	2001      	movs	r0, #1
    1e90:	4770      	bx	lr
    1e92:	2000      	movs	r0, #0
    1e94:	4770      	bx	lr
    1e96:	0000      	.short	0x0000
    1e98:	20001400 	.word	0x20001400
    1e9c:	20000348 	.word	0x20000348

00001ea0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1ea0:	4906      	ldr	r1, [pc, #24]	; (1ebc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1ea2:	4b07      	ldr	r3, [pc, #28]	; (1ec0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1ea4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1ea6:	885b      	ldrh	r3, [r3, #2]
    1ea8:	429a      	cmp	r2, r3
    1eaa:	d105      	bne.n	1eb8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1eac:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1eb0:	b112      	cbz	r2, 1eb8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1eb2:	6001      	str	r1, [r0, #0]
    1eb4:	2001      	movs	r0, #1
    1eb6:	4770      	bx	lr
    1eb8:	2000      	movs	r0, #0
    1eba:	4770      	bx	lr
    1ebc:	20001400 	.word	0x20001400
    1ec0:	20000348 	.word	0x20000348

00001ec4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1ec4:	4909      	ldr	r1, [pc, #36]	; (1eec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1ec6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1ec8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    1ecc:	3bff      	subs	r3, #255	; 0xff
    1ece:	d002      	beq.n	1ed6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1ed0:	2100      	movs	r1, #0
    1ed2:	6001      	str	r1, [r0, #0]
    1ed4:	e007      	b.n	1ee6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1ed6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1eda:	4904      	ldr	r1, [pc, #16]	; (1eec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1edc:	2a01      	cmp	r2, #1
    1ede:	d002      	beq.n	1ee6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1ee0:	6001      	str	r1, [r0, #0]
    1ee2:	2001      	movs	r0, #1
    1ee4:	4770      	bx	lr
    1ee6:	2000      	movs	r0, #0
    1ee8:	4770      	bx	lr
    1eea:	0000      	.short	0x0000
    1eec:	20001400 	.word	0x20001400

00001ef0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1ef0:	4901      	ldr	r1, [pc, #4]	; (1ef8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1ef2:	8008      	strh	r0, [r1, #0]
    1ef4:	4770      	bx	lr
    1ef6:	0000      	.short	0x0000
    1ef8:	20000348 	.word	0x20000348

00001efc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1efc:	4905      	ldr	r1, [pc, #20]	; (1f14 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    1efe:	2000      	movs	r0, #0
    1f00:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1f04:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1f08:	8488      	strh	r0, [r1, #36]	; 0x24
    1f0a:	4903      	ldr	r1, [pc, #12]	; (1f18 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    1f0c:	8008      	strh	r0, [r1, #0]
    1f0e:	8048      	strh	r0, [r1, #2]
    1f10:	4770      	bx	lr
    1f12:	0000      	.short	0x0000
    1f14:	20001400 	.word	0x20001400
    1f18:	20000348 	.word	0x20000348
    1f1c:	4905      	ldr	r1, [pc, #20]	; (1f34 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    1f1e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f20:	4282      	cmp	r2, r0
    1f22:	d105      	bne.n	1f30 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1f24:	2000      	movs	r0, #0
    1f26:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1f2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1f2e:	8488      	strh	r0, [r1, #36]	; 0x24
    1f30:	4770      	bx	lr
    1f32:	0000      	.short	0x0000
    1f34:	20001400 	.word	0x20001400

00001f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1f38:	4a0a      	ldr	r2, [pc, #40]	; (1f64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1f3a:	b110      	cbz	r0, 1f42 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1f3c:	2801      	cmp	r0, #1
    1f3e:	d007      	beq.n	1f50 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1f40:	e00e      	b.n	1f60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1f42:	7850      	ldrb	r0, [r2, #1]
    1f44:	b160      	cbz	r0, 1f60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1f46:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1f4a:	6008      	str	r0, [r1, #0]
    1f4c:	88d0      	ldrh	r0, [r2, #6]
    1f4e:	e004      	b.n	1f5a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1f50:	7810      	ldrb	r0, [r2, #0]
    1f52:	b128      	cbz	r0, 1f60 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1f54:	6890      	ldr	r0, [r2, #8]
    1f56:	6008      	str	r0, [r1, #0]
    1f58:	8990      	ldrh	r0, [r2, #12]
    1f5a:	8088      	strh	r0, [r1, #4]
    1f5c:	2001      	movs	r0, #1
    1f5e:	4770      	bx	lr
    1f60:	2000      	movs	r0, #0
    1f62:	4770      	bx	lr
    1f64:	2000035e 	.word	0x2000035e

00001f68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1f68:	4a08      	ldr	r2, [pc, #32]	; (1f8c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1f6a:	2301      	movs	r3, #1
    1f6c:	b138      	cbz	r0, 1f7e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1f6e:	2801      	cmp	r0, #1
    1f70:	d104      	bne.n	1f7c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1f72:	7013      	strb	r3, [r2, #0]
    1f74:	6808      	ldr	r0, [r1, #0]
    1f76:	6090      	str	r0, [r2, #8]
    1f78:	8888      	ldrh	r0, [r1, #4]
    1f7a:	8190      	strh	r0, [r2, #12]
    1f7c:	4770      	bx	lr
    1f7e:	7053      	strb	r3, [r2, #1]
    1f80:	6808      	ldr	r0, [r1, #0]
    1f82:	f8c2 0002 	str.w	r0, [r2, #2]
    1f86:	8888      	ldrh	r0, [r1, #4]
    1f88:	80d0      	strh	r0, [r2, #6]
    1f8a:	4770      	bx	lr
    1f8c:	2000035e 	.word	0x2000035e

00001f90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    1f90:	4906      	ldr	r1, [pc, #24]	; (1fac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    1f92:	b110      	cbz	r0, 1f9a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1f94:	2801      	cmp	r0, #1
    1f96:	d002      	beq.n	1f9e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1f98:	e005      	b.n	1fa6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1f9a:	7848      	ldrb	r0, [r1, #1]
    1f9c:	e000      	b.n	1fa0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    1f9e:	7808      	ldrb	r0, [r1, #0]
    1fa0:	b108      	cbz	r0, 1fa6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1fa2:	2001      	movs	r0, #1
    1fa4:	4770      	bx	lr
    1fa6:	2000      	movs	r0, #0
    1fa8:	4770      	bx	lr
    1faa:	0000      	.short	0x0000
    1fac:	2000035e 	.word	0x2000035e

00001fb0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    1fb0:	4901      	ldr	r1, [pc, #4]	; (1fb8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    1fb2:	7708      	strb	r0, [r1, #28]
    1fb4:	4770      	bx	lr
    1fb6:	0000      	.short	0x0000
    1fb8:	20000d42 	.word	0x20000d42

00001fbc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    1fbc:	4801      	ldr	r0, [pc, #4]	; (1fc4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    1fbe:	7880      	ldrb	r0, [r0, #2]
    1fc0:	4770      	bx	lr
    1fc2:	0000      	.short	0x0000
    1fc4:	2000006c 	.word	0x2000006c

00001fc8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    1fc8:	4801      	ldr	r0, [pc, #4]	; (1fd0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    1fca:	78c0      	ldrb	r0, [r0, #3]
    1fcc:	4770      	bx	lr
    1fce:	0000      	.short	0x0000
    1fd0:	2000006c 	.word	0x2000006c

00001fd4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	460c      	mov	r4, r1
    1fd8:	4605      	mov	r5, r0
    1fda:	f000 f91f 	bl	221c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    1fde:	b118      	cbz	r0, 1fe8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    1fe0:	21d0      	movs	r1, #208	; 0xd0
    1fe2:	2027      	movs	r0, #39	; 0x27
    1fe4:	f7ff f90a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1fe8:	4803      	ldr	r0, [pc, #12]	; (1ff8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    1fea:	2101      	movs	r1, #1
    1fec:	f00c f8f9 	bl	e1e2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1ff0:	4802      	ldr	r0, [pc, #8]	; (1ffc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    1ff2:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    1ff6:	bd70      	pop	{r4, r5, r6, pc}
    1ff8:	20000d20 	.word	0x20000d20
    1ffc:	2000006c 	.word	0x2000006c

00002000 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    2000:	4901      	ldr	r1, [pc, #4]	; (2008 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    2002:	2001      	movs	r0, #1
    2004:	7148      	strb	r0, [r1, #5]
    2006:	4770      	bx	lr
    2008:	2000006c 	.word	0x2000006c

0000200c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    200c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2010:	4d5b      	ldr	r5, [pc, #364]	; (2180 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>)
    2012:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2014:	782e      	ldrb	r6, [r5, #0]
    2016:	2e00      	cmp	r6, #0
    2018:	d16b      	bne.n	20f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    201a:	2a00      	cmp	r2, #0
    201c:	d069      	beq.n	20f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    201e:	2b00      	cmp	r3, #0
    2020:	d067      	beq.n	20f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    2022:	2c00      	cmp	r4, #0
    2024:	d065      	beq.n	20f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    2026:	f105 0614 	add.w	r6, r5, #20
    202a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    202e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    2032:	2700      	movs	r7, #0
    2034:	716f      	strb	r7, [r5, #5]
    2036:	712f      	strb	r7, [r5, #4]
    2038:	70af      	strb	r7, [r5, #2]
    203a:	706f      	strb	r7, [r5, #1]
    203c:	70ef      	strb	r7, [r5, #3]
    203e:	81af      	strh	r7, [r5, #12]
    2040:	81ef      	strh	r7, [r5, #14]
    2042:	f000 f93d 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2046:	4606      	mov	r6, r0
    2048:	f000 f934 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    204c:	4604      	mov	r4, r0
    204e:	f005 ffa7 	bl	7fa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2052:	f005 fcff 	bl	7a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2056:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    205a:	f006 f825 	bl	80a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    205e:	69e0      	ldr	r0, [r4, #28]
    2060:	f006 f908 	bl	8274 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2064:	6960      	ldr	r0, [r4, #20]
    2066:	f006 f8fb 	bl	8260 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    206a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    206e:	f006 f931 	bl	82d4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2072:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    2076:	6840      	ldr	r0, [r0, #4]
    2078:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    207c:	b108      	cbz	r0, 2082 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    207e:	f005 ff0f 	bl	7ea0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2082:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2086:	2001      	movs	r0, #1
    2088:	f005 fe4e 	bl	7d28 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    208c:	2800      	cmp	r0, #0
    208e:	d070      	beq.n	2172 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x166>
    2090:	483c      	ldr	r0, [pc, #240]	; (2184 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>)
    2092:	f005 feb5 	bl	7e00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    2096:	8820      	ldrh	r0, [r4, #0]
    2098:	f7ff fcc2 	bl	1a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    209c:	6368      	str	r0, [r5, #52]	; 0x34
    209e:	8820      	ldrh	r0, [r4, #0]
    20a0:	f7ff fca8 	bl	19f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    20a4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    20a8:	63a8      	str	r0, [r5, #56]	; 0x38
    20aa:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    20ae:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2188 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    20b2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    20b6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    20ba:	f8c9 2019 	str.w	r2, [r9, #25]
    20be:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    20c2:	f8c9 101d 	str.w	r1, [r9, #29]
    20c6:	f000 f933 	bl	2330 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf8>
    20ca:	4601      	mov	r1, r0
    20cc:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    20ce:	46ba      	mov	sl, r7
    20d0:	f00b fde4 	bl	dc9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    20d4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    20d6:	4281      	cmp	r1, r0
    20d8:	d200      	bcs.n	20dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    20da:	4608      	mov	r0, r1
    20dc:	71a8      	strb	r0, [r5, #6]
    20de:	46a8      	mov	r8, r5
    20e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    20e4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    20e6:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    20ea:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    20ec:	2908      	cmp	r1, #8
    20ee:	d104      	bne.n	20fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    20f0:	e002      	b.n	20f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    20f2:	f240 1145 	movw	r1, #325	; 0x145
    20f6:	e040      	b.n	217a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    20f8:	2104      	movs	r1, #4
    20fa:	f00b fdcf 	bl	dc9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    20fe:	b90f      	cbnz	r7, 2104 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    2100:	1d00      	adds	r0, r0, #4
    2102:	b280      	uxth	r0, r0
    2104:	4285      	cmp	r5, r0
    2106:	d200      	bcs.n	210a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    2108:	4628      	mov	r0, r5
    210a:	b2c5      	uxtb	r5, r0
    210c:	f888 5007 	strb.w	r5, [r8, #7]
    2110:	f888 5008 	strb.w	r5, [r8, #8]
    2114:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    2118:	46d0      	mov	r8, sl
    211a:	b190      	cbz	r0, 2142 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    211c:	2701      	movs	r7, #1
    211e:	f889 7018 	strb.w	r7, [r9, #24]
    2122:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    2126:	e9c9 1204 	strd	r1, r2, [r9, #16]
    212a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    212e:	f00b fcba 	bl	daa6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    2132:	4603      	mov	r3, r0
    2134:	462a      	mov	r2, r5
    2136:	4914      	ldr	r1, [pc, #80]	; (2188 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2138:	4638      	mov	r0, r7
    213a:	f8cd 8000 	str.w	r8, [sp]
    213e:	f005 fbf5 	bl	792c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2142:	2001      	movs	r0, #1
    2144:	f000 fb54 	bl	27f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    2148:	4810      	ldr	r0, [pc, #64]	; (218c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    214a:	6800      	ldr	r0, [r0, #0]
    214c:	2803      	cmp	r0, #3
    214e:	d012      	beq.n	2176 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    2150:	280b      	cmp	r0, #11
    2152:	d010      	beq.n	2176 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2156:	220e      	movs	r2, #14
    2158:	2100      	movs	r1, #0
    215a:	304a      	adds	r0, #74	; 0x4a
    215c:	f00e fdce 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2160:	4809      	ldr	r0, [pc, #36]	; (2188 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2162:	8ab1      	ldrh	r1, [r6, #20]
    2164:	304a      	adds	r0, #74	; 0x4a
    2166:	8041      	strh	r1, [r0, #2]
    2168:	8821      	ldrh	r1, [r4, #0]
    216a:	8001      	strh	r1, [r0, #0]
    216c:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2170:	7101      	strb	r1, [r0, #4]
    2172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2176:	f240 2102 	movw	r1, #514	; 0x202
    217a:	2027      	movs	r0, #39	; 0x27
    217c:	f7ff f83e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2180:	2000006c 	.word	0x2000006c
    2184:	000029f4 	.word	0x000029f4
    2188:	20000cf8 	.word	0x20000cf8
    218c:	40001550 	.word	0x40001550

00002190 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    2190:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2194:	4688      	mov	r8, r1
    2196:	4607      	mov	r7, r0
    2198:	f000 f892 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    219c:	4c1a      	ldr	r4, [pc, #104]	; (2208 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    219e:	4605      	mov	r5, r0
    21a0:	07b8      	lsls	r0, r7, #30
    21a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    21a4:	784e      	ldrb	r6, [r1, #1]
    21a6:	d516      	bpl.n	21d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    21a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    21aa:	b330      	cbz	r0, 21fa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    21ac:	8962      	ldrh	r2, [r4, #10]
    21ae:	1cd2      	adds	r2, r2, #3
    21b0:	f00e fd2a 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    21b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    21b6:	6260      	str	r0, [r4, #36]	; 0x24
    21b8:	4669      	mov	r1, sp
    21ba:	aa01      	add	r2, sp, #4
    21bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    21be:	f00b f8c1 	bl	d344 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    21c2:	9800      	ldr	r0, [sp, #0]
    21c4:	f00b f874 	bl	d2b0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    21c8:	f8c8 0000 	str.w	r0, [r8]
    21cc:	4631      	mov	r1, r6
    21ce:	2201      	movs	r2, #1
    21d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    21d2:	f00b f824 	bl	d21e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    21d6:	07f8      	lsls	r0, r7, #31
    21d8:	d00d      	beq.n	21f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    21da:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    21de:	3518      	adds	r5, #24
    21e0:	1c40      	adds	r0, r0, #1
    21e2:	f141 0100 	adc.w	r1, r1, #0
    21e6:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    21ea:	f815 0918 	ldrb.w	r0, [r5], #-24
    21ee:	2801      	cmp	r0, #1
    21f0:	d008      	beq.n	2204 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    21f2:	2001      	movs	r0, #1
    21f4:	7628      	strb	r0, [r5, #24]
    21f6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    21fa:	f240 4166 	movw	r1, #1126	; 0x466
    21fe:	2027      	movs	r0, #39	; 0x27
    2200:	f7fe fffc 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2204:	2000      	movs	r0, #0
    2206:	e7f5      	b.n	21f4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    2208:	2000006c 	.word	0x2000006c

0000220c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    220c:	4802      	ldr	r0, [pc, #8]	; (2218 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    220e:	89c0      	ldrh	r0, [r0, #14]
    2210:	f3c0 2080 	ubfx	r0, r0, #10, #1
    2214:	4770      	bx	lr
    2216:	0000      	.short	0x0000
    2218:	2000006c 	.word	0x2000006c

0000221c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    221c:	4804      	ldr	r0, [pc, #16]	; (2230 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    221e:	7800      	ldrb	r0, [r0, #0]
    2220:	b108      	cbz	r0, 2226 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    2222:	200c      	movs	r0, #12
    2224:	4770      	bx	lr
    2226:	4903      	ldr	r1, [pc, #12]	; (2234 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    2228:	2000      	movs	r0, #0
    222a:	7708      	strb	r0, [r1, #28]
    222c:	4770      	bx	lr
    222e:	0000      	.short	0x0000
    2230:	2000006c 	.word	0x2000006c
    2234:	20000d42 	.word	0x20000d42

00002238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    2238:	480c      	ldr	r0, [pc, #48]	; (226c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    223a:	b510      	push	{r4, lr}
    223c:	7801      	ldrb	r1, [r0, #0]
    223e:	b149      	cbz	r1, 2254 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    2240:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    2244:	7800      	ldrb	r0, [r0, #0]
    2246:	2802      	cmp	r0, #2
    2248:	d008      	beq.n	225c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    224a:	f240 211e 	movw	r1, #542	; 0x21e
    224e:	2027      	movs	r0, #39	; 0x27
    2250:	f7fe ffd4 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2258:	f000 b9d8 	b.w	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    225c:	6848      	ldr	r0, [r1, #4]
    225e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2266:	f005 bdd3 	b.w	7e10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    226a:	0000      	.short	0x0000
    226c:	2000006c 	.word	0x2000006c
    2270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2272:	2600      	movs	r6, #0
    2274:	4605      	mov	r5, r0
    2276:	704e      	strb	r6, [r1, #1]
    2278:	201d      	movs	r0, #29
    227a:	4f09      	ldr	r7, [pc, #36]	; (22a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    227c:	460c      	mov	r4, r1
    227e:	7008      	strb	r0, [r1, #0]
    2280:	722e      	strb	r6, [r5, #8]
    2282:	220e      	movs	r2, #14
    2284:	4639      	mov	r1, r7
    2286:	1d20      	adds	r0, r4, #4
    2288:	f00e fcbe 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    228c:	7a28      	ldrb	r0, [r5, #8]
    228e:	f88d 0000 	strb.w	r0, [sp]
    2292:	9800      	ldr	r0, [sp, #0]
    2294:	9000      	str	r0, [sp, #0]
    2296:	f89d 0000 	ldrb.w	r0, [sp]
    229a:	2800      	cmp	r0, #0
    229c:	d1f0      	bne.n	2280 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22a0:	20000d50 	.word	0x20000d50
    22a4:	4a02      	ldr	r2, [pc, #8]	; (22b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>)
    22a6:	8993      	ldrh	r3, [r2, #12]
    22a8:	4303      	orrs	r3, r0
    22aa:	8193      	strh	r3, [r2, #12]
    22ac:	6952      	ldr	r2, [r2, #20]
    22ae:	4710      	bx	r2
    22b0:	2000006c 	.word	0x2000006c
    22b4:	4801      	ldr	r0, [pc, #4]	; (22bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>)
    22b6:	6840      	ldr	r0, [r0, #4]
    22b8:	4770      	bx	lr
    22ba:	0000      	.short	0x0000
    22bc:	200000a8 	.word	0x200000a8
    22c0:	4801      	ldr	r0, [pc, #4]	; (22c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    22c2:	6840      	ldr	r0, [r0, #4]
    22c4:	3080      	adds	r0, #128	; 0x80
    22c6:	4770      	bx	lr
    22c8:	200000a8 	.word	0x200000a8
    22cc:	4a01      	ldr	r2, [pc, #4]	; (22d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    22ce:	2100      	movs	r1, #0
    22d0:	6952      	ldr	r2, [r2, #20]
    22d2:	4710      	bx	r2
    22d4:	2000006c 	.word	0x2000006c
    22d8:	b570      	push	{r4, r5, r6, lr}
    22da:	4605      	mov	r5, r0
    22dc:	2901      	cmp	r1, #1
    22de:	d818      	bhi.n	2312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    22e0:	4c12      	ldr	r4, [pc, #72]	; (232c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>)
    22e2:	69a1      	ldr	r1, [r4, #24]
    22e4:	4788      	blx	r1
    22e6:	b1a0      	cbz	r0, 2312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    22e8:	7920      	ldrb	r0, [r4, #4]
    22ea:	b990      	cbnz	r0, 2312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    22ec:	b9e5      	cbnz	r5, 2328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    22ee:	f104 0010 	add.w	r0, r4, #16
    22f2:	7801      	ldrb	r1, [r0, #0]
    22f4:	06c8      	lsls	r0, r1, #27
    22f6:	d405      	bmi.n	2304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    22f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    22fa:	7800      	ldrb	r0, [r0, #0]
    22fc:	06c0      	lsls	r0, r0, #27
    22fe:	d401      	bmi.n	2304 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    2300:	2001      	movs	r0, #1
    2302:	e000      	b.n	2306 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xce>
    2304:	2000      	movs	r0, #0
    2306:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2308:	b92a      	cbnz	r2, 2316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    230a:	8962      	ldrh	r2, [r4, #10]
    230c:	b11a      	cbz	r2, 2316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    230e:	06c9      	lsls	r1, r1, #27
    2310:	d401      	bmi.n	2316 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    2312:	2001      	movs	r0, #1
    2314:	bd70      	pop	{r4, r5, r6, pc}
    2316:	89a1      	ldrh	r1, [r4, #12]
    2318:	078a      	lsls	r2, r1, #30
    231a:	d503      	bpl.n	2324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    231c:	6a22      	ldr	r2, [r4, #32]
    231e:	78d2      	ldrb	r2, [r2, #3]
    2320:	2a02      	cmp	r2, #2
    2322:	d001      	beq.n	2328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    2324:	4308      	orrs	r0, r1
    2326:	d1f4      	bne.n	2312 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2328:	2000      	movs	r0, #0
    232a:	bd70      	pop	{r4, r5, r6, pc}
    232c:	2000006c 	.word	0x2000006c
    2330:	b510      	push	{r4, lr}
    2332:	f7ff ffbf 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2336:	4604      	mov	r4, r0
    2338:	f7ff ffc2 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    233c:	4602      	mov	r2, r0
    233e:	7f41      	ldrb	r1, [r0, #29]
    2340:	4816      	ldr	r0, [pc, #88]	; (239c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>)
    2342:	2925      	cmp	r1, #37	; 0x25
    2344:	d010      	beq.n	2368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    2346:	2926      	cmp	r1, #38	; 0x26
    2348:	d00e      	beq.n	2368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    234a:	7f92      	ldrb	r2, [r2, #30]
    234c:	2a25      	cmp	r2, #37	; 0x25
    234e:	d00b      	beq.n	2368 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    2350:	2920      	cmp	r1, #32
    2352:	d00d      	beq.n	2370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    2354:	2921      	cmp	r1, #33	; 0x21
    2356:	d00b      	beq.n	2370 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    2358:	2a23      	cmp	r2, #35	; 0x23
    235a:	d00f      	beq.n	237c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    235c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2360:	2804      	cmp	r0, #4
    2362:	d100      	bne.n	2366 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    2364:	2008      	movs	r0, #8
    2366:	bd10      	pop	{r4, pc}
    2368:	6840      	ldr	r0, [r0, #4]
    236a:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    236e:	e00e      	b.n	238e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x156>
    2370:	2a23      	cmp	r2, #35	; 0x23
    2372:	d003      	beq.n	237c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2374:	6840      	ldr	r0, [r0, #4]
    2376:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    237a:	e005      	b.n	2388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    237c:	6841      	ldr	r1, [r0, #4]
    237e:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    2382:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    2386:	4008      	ands	r0, r1
    2388:	f00b fb83 	bl	da92 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    238c:	4601      	mov	r1, r0
    238e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2396:	f00b bb94 	b.w	dac2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    239a:	0000      	.short	0x0000
    239c:	200000a8 	.word	0x200000a8
    23a0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    23a4:	468b      	mov	fp, r1
    23a6:	4681      	mov	r9, r0
    23a8:	f7ff ff8a 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    23ac:	2600      	movs	r6, #0
    23ae:	4c66      	ldr	r4, [pc, #408]	; (2548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    23b0:	4607      	mov	r7, r0
    23b2:	f88d 6008 	strb.w	r6, [sp, #8]
    23b6:	9603      	str	r6, [sp, #12]
    23b8:	9601      	str	r6, [sp, #4]
    23ba:	7820      	ldrb	r0, [r4, #0]
    23bc:	4635      	mov	r5, r6
    23be:	2802      	cmp	r0, #2
    23c0:	d004      	beq.n	23cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    23c2:	f240 41ea 	movw	r1, #1258	; 0x4ea
    23c6:	2027      	movs	r0, #39	; 0x27
    23c8:	f7fe ff18 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    23cc:	7ba0      	ldrb	r0, [r4, #14]
    23ce:	0640      	lsls	r0, r0, #25
    23d0:	d406      	bmi.n	23e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    23d2:	2040      	movs	r0, #64	; 0x40
    23d4:	f7ff ff7a 	bl	22cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    23d8:	89e0      	ldrh	r0, [r4, #14]
    23da:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    23de:	81e0      	strh	r0, [r4, #14]
    23e0:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    23e4:	f1b9 0f00 	cmp.w	r9, #0
    23e8:	d03a      	beq.n	2460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    23ea:	b180      	cbz	r0, 240e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    23ec:	f005 fb6c 	bl	7ac8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    23f0:	f005 fb46 	bl	7a80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    23f4:	b958      	cbnz	r0, 240e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    23f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    23f8:	7841      	ldrb	r1, [r0, #1]
    23fa:	b141      	cbz	r1, 240e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    23fc:	7800      	ldrb	r0, [r0, #0]
    23fe:	7e39      	ldrb	r1, [r7, #24]
    2400:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2404:	4288      	cmp	r0, r1
    2406:	d102      	bne.n	240e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    2408:	2001      	movs	r0, #1
    240a:	7060      	strb	r0, [r4, #1]
    240c:	e097      	b.n	253e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    240e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2410:	7841      	ldrb	r1, [r0, #1]
    2412:	8161      	strh	r1, [r4, #10]
    2414:	b121      	cbz	r1, 2420 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e8>
    2416:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2418:	f00b f86a 	bl	d4f0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    241c:	62a0      	str	r0, [r4, #40]	; 0x28
    241e:	e000      	b.n	2422 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    2420:	62a5      	str	r5, [r4, #40]	; 0x28
    2422:	89e0      	ldrh	r0, [r4, #14]
    2424:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2428:	81e0      	strh	r0, [r4, #14]
    242a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    242c:	7df9      	ldrb	r1, [r7, #23]
    242e:	7800      	ldrb	r0, [r0, #0]
    2430:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2434:	4288      	cmp	r0, r1
    2436:	d007      	beq.n	2448 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    2438:	a803      	add	r0, sp, #12
    243a:	f000 f98b 	bl	2754 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    243e:	89e0      	ldrh	r0, [r4, #14]
    2440:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    2444:	81e0      	strh	r0, [r4, #14]
    2446:	e000      	b.n	244a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x212>
    2448:	2601      	movs	r6, #1
    244a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    244c:	7e39      	ldrb	r1, [r7, #24]
    244e:	7800      	ldrb	r0, [r0, #0]
    2450:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2454:	4288      	cmp	r0, r1
    2456:	d10d      	bne.n	2474 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2458:	a802      	add	r0, sp, #8
    245a:	f000 f931 	bl	26c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>
    245e:	e009      	b.n	2474 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2460:	b108      	cbz	r0, 2466 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22e>
    2462:	f005 fb2b 	bl	7abc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    2466:	78a0      	ldrb	r0, [r4, #2]
    2468:	1c40      	adds	r0, r0, #1
    246a:	70a0      	strb	r0, [r4, #2]
    246c:	89e0      	ldrh	r0, [r4, #14]
    246e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    2472:	81e0      	strh	r0, [r4, #14]
    2474:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    2478:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    247c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2480:	b190      	cbz	r0, 24a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    2482:	f7ff ff17 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2486:	4931      	ldr	r1, [pc, #196]	; (254c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2488:	760d      	strb	r5, [r1, #24]
    248a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    248e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2492:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    2496:	f00b fb06 	bl	daa6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    249a:	4603      	mov	r3, r0
    249c:	22fb      	movs	r2, #251	; 0xfb
    249e:	492b      	ldr	r1, [pc, #172]	; (254c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    24a0:	4628      	mov	r0, r5
    24a2:	9500      	str	r5, [sp, #0]
    24a4:	f005 fa42 	bl	792c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    24a8:	f04f 0800 	mov.w	r8, #0
    24ac:	f1bb 0f00 	cmp.w	fp, #0
    24b0:	d104      	bne.n	24bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    24b2:	78a1      	ldrb	r1, [r4, #2]
    24b4:	2001      	movs	r0, #1
    24b6:	f7ff ff0f 	bl	22d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    24ba:	b120      	cbz	r0, 24c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    24bc:	f005 febc 	bl	8238 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    24c0:	f04f 0801 	mov.w	r8, #1
    24c4:	e002      	b.n	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x294>
    24c6:	2000      	movs	r0, #0
    24c8:	f000 f9d0 	bl	286c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    24cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    24d0:	b118      	cbz	r0, 24da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    24d2:	a901      	add	r1, sp, #4
    24d4:	2002      	movs	r0, #2
    24d6:	f7ff fe5b 	bl	2190 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    24da:	481c      	ldr	r0, [pc, #112]	; (254c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    24dc:	8aba      	ldrh	r2, [r7, #20]
    24de:	304a      	adds	r0, #74	; 0x4a
    24e0:	b13e      	cbz	r6, 24f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    24e2:	b91a      	cbnz	r2, 24ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    24e4:	88c2      	ldrh	r2, [r0, #6]
    24e6:	b90a      	cbnz	r2, 24ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    24e8:	8902      	ldrh	r2, [r0, #8]
    24ea:	b112      	cbz	r2, 24f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    24ec:	8942      	ldrh	r2, [r0, #10]
    24ee:	1c52      	adds	r2, r2, #1
    24f0:	8142      	strh	r2, [r0, #10]
    24f2:	f1b9 0f00 	cmp.w	r9, #0
    24f6:	d008      	beq.n	250a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    24f8:	88c1      	ldrh	r1, [r0, #6]
    24fa:	1c49      	adds	r1, r1, #1
    24fc:	80c1      	strh	r1, [r0, #6]
    24fe:	4812      	ldr	r0, [pc, #72]	; (2548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    2500:	70a5      	strb	r5, [r4, #2]
    2502:	303c      	adds	r0, #60	; 0x3c
    2504:	f001 f960 	bl	37c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    2508:	e002      	b.n	2510 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    250a:	8901      	ldrh	r1, [r0, #8]
    250c:	1c49      	adds	r1, r1, #1
    250e:	8101      	strh	r1, [r0, #8]
    2510:	9803      	ldr	r0, [sp, #12]
    2512:	b140      	cbz	r0, 2526 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ee>
    2514:	f00a fecc 	bl	d2b0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    2518:	f8da 1004 	ldr.w	r1, [sl, #4]
    251c:	1c40      	adds	r0, r0, #1
    251e:	7205      	strb	r5, [r0, #8]
    2520:	220e      	movs	r2, #14
    2522:	f00b fedc 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2526:	9801      	ldr	r0, [sp, #4]
    2528:	b130      	cbz	r0, 2538 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x300>
    252a:	f8da 1004 	ldr.w	r1, [sl, #4]
    252e:	7205      	strb	r5, [r0, #8]
    2530:	222a      	movs	r2, #42	; 0x2a
    2532:	9801      	ldr	r0, [sp, #4]
    2534:	f00b fed3 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2538:	f1b8 0f00 	cmp.w	r8, #0
    253c:	d001      	beq.n	2542 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x30a>
    253e:	f000 f865 	bl	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    2542:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2546:	0000      	.short	0x0000
    2548:	2000006c 	.word	0x2000006c
    254c:	20000cf8 	.word	0x20000cf8
    2550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2554:	4688      	mov	r8, r1
    2556:	4681      	mov	r9, r0
    2558:	f7ff feb2 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    255c:	4d29      	ldr	r5, [pc, #164]	; (2604 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    255e:	4604      	mov	r4, r0
    2560:	7828      	ldrb	r0, [r5, #0]
    2562:	2801      	cmp	r0, #1
    2564:	d004      	beq.n	2570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    2566:	f240 4175 	movw	r1, #1141	; 0x475
    256a:	2027      	movs	r0, #39	; 0x27
    256c:	f7fe fe46 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2570:	7c20      	ldrb	r0, [r4, #16]
    2572:	2700      	movs	r7, #0
    2574:	2601      	movs	r6, #1
    2576:	b128      	cbz	r0, 2584 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    2578:	7427      	strb	r7, [r4, #16]
    257a:	2100      	movs	r1, #0
    257c:	2004      	movs	r0, #4
    257e:	f7ff fe91 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2582:	74a6      	strb	r6, [r4, #18]
    2584:	6a29      	ldr	r1, [r5, #32]
    2586:	7808      	ldrb	r0, [r1, #0]
    2588:	43c0      	mvns	r0, r0
    258a:	0780      	lsls	r0, r0, #30
    258c:	d109      	bne.n	25a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    258e:	7da0      	ldrb	r0, [r4, #22]
    2590:	bb88      	cbnz	r0, 25f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2592:	2002      	movs	r0, #2
    2594:	f7ff fe86 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2598:	6a28      	ldr	r0, [r5, #32]
    259a:	7800      	ldrb	r0, [r0, #0]
    259c:	43c0      	mvns	r0, r0
    259e:	0780      	lsls	r0, r0, #30
    25a0:	d029      	beq.n	25f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    25a2:	6a28      	ldr	r0, [r5, #32]
    25a4:	7840      	ldrb	r0, [r0, #1]
    25a6:	b110      	cbz	r0, 25ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    25a8:	2002      	movs	r0, #2
    25aa:	75a0      	strb	r0, [r4, #22]
    25ac:	e000      	b.n	25b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    25ae:	75a6      	strb	r6, [r4, #22]
    25b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    25b4:	b198      	cbz	r0, 25de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    25b6:	f7ff fe7d 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    25ba:	4913      	ldr	r1, [pc, #76]	; (2608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    25bc:	7a2d      	ldrb	r5, [r5, #8]
    25be:	760e      	strb	r6, [r1, #24]
    25c0:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    25c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    25c8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    25cc:	f00b fa6b 	bl	daa6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    25d0:	4603      	mov	r3, r0
    25d2:	462a      	mov	r2, r5
    25d4:	490c      	ldr	r1, [pc, #48]	; (2608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    25d6:	4630      	mov	r0, r6
    25d8:	9700      	str	r7, [sp, #0]
    25da:	f005 f9a7 	bl	792c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    25de:	ea38 0009 	bics.w	r0, r8, r9
    25e2:	d004      	beq.n	25ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    25e4:	2100      	movs	r1, #0
    25e6:	4608      	mov	r0, r1
    25e8:	f7ff fe76 	bl	22d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    25ec:	b128      	cbz	r0, 25fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    25ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25f2:	f000 b80b 	b.w	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    25f6:	2003      	movs	r0, #3
    25f8:	e7d7      	b.n	25aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    25fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25fe:	2000      	movs	r0, #0
    2600:	f000 b8f6 	b.w	27f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    2604:	2000006c 	.word	0x2000006c
    2608:	20000cf8 	.word	0x20000cf8
    260c:	b510      	push	{r4, lr}
    260e:	f005 fb01 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2612:	f005 fa1f 	bl	7a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2616:	4c0d      	ldr	r4, [pc, #52]	; (264c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    2618:	89e0      	ldrh	r0, [r4, #14]
    261a:	f7ff fe57 	bl	22cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    261e:	480c      	ldr	r0, [pc, #48]	; (2650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2620:	7f00      	ldrb	r0, [r0, #28]
    2622:	b158      	cbz	r0, 263c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    2624:	490a      	ldr	r1, [pc, #40]	; (2650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2626:	220e      	movs	r2, #14
    2628:	f101 000e 	add.w	r0, r1, #14
    262c:	f00e faec 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2630:	4807      	ldr	r0, [pc, #28]	; (2650 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2632:	2224      	movs	r2, #36	; 0x24
    2634:	4907      	ldr	r1, [pc, #28]	; (2654 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    2636:	301d      	adds	r0, #29
    2638:	f00b fe65 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    263c:	69e2      	ldr	r2, [r4, #28]
    263e:	7921      	ldrb	r1, [r4, #4]
    2640:	7860      	ldrb	r0, [r4, #1]
    2642:	4790      	blx	r2
    2644:	2000      	movs	r0, #0
    2646:	7020      	strb	r0, [r4, #0]
    2648:	bd10      	pop	{r4, pc}
    264a:	0000      	.short	0x0000
    264c:	2000006c 	.word	0x2000006c
    2650:	20000d42 	.word	0x20000d42
    2654:	00002271 	.word	0x00002271
    2658:	4808      	ldr	r0, [pc, #32]	; (267c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    265a:	b510      	push	{r4, lr}
    265c:	7800      	ldrb	r0, [r0, #0]
    265e:	2802      	cmp	r0, #2
    2660:	d004      	beq.n	266c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x434>
    2662:	f240 214d 	movw	r1, #589	; 0x24d
    2666:	2027      	movs	r0, #39	; 0x27
    2668:	f7fe fdc8 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    266c:	4904      	ldr	r1, [pc, #16]	; (2680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    266e:	2001      	movs	r0, #1
    2670:	7308      	strb	r0, [r1, #12]
    2672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2676:	f7ff bfc9 	b.w	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    267a:	0000      	.short	0x0000
    267c:	2000006c 	.word	0x2000006c
    2680:	20000d42 	.word	0x20000d42
    2684:	b430      	push	{r4, r5}
    2686:	4604      	mov	r4, r0
    2688:	480c      	ldr	r0, [pc, #48]	; (26bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    268a:	7a00      	ldrb	r0, [r0, #8]
    268c:	b10b      	cbz	r3, 2692 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    268e:	1d00      	adds	r0, r0, #4
    2690:	b2c0      	uxtb	r0, r0
    2692:	b93a      	cbnz	r2, 26a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2694:	28ff      	cmp	r0, #255	; 0xff
    2696:	d105      	bne.n	26a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2698:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    269c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    26a0:	429a      	cmp	r2, r3
    26a2:	d009      	beq.n	26b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    26a4:	b121      	cbz	r1, 26b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    26a6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    26aa:	bc30      	pop	{r4, r5}
    26ac:	f005 bde8 	b.w	8280 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    26b0:	20ff      	movs	r0, #255	; 0xff
    26b2:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    26b6:	e7f8      	b.n	26aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    26b8:	bc30      	pop	{r4, r5}
    26ba:	4770      	bx	lr
    26bc:	2000006c 	.word	0x2000006c
    26c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    26c4:	4607      	mov	r7, r0
    26c6:	f7ff fdfb 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    26ca:	4c21      	ldr	r4, [pc, #132]	; (2750 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>)
    26cc:	4605      	mov	r5, r0
    26ce:	2601      	movs	r6, #1
    26d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    26d2:	7808      	ldrb	r0, [r1, #0]
    26d4:	f000 0003 	and.w	r0, r0, #3
    26d8:	2801      	cmp	r0, #1
    26da:	d00c      	beq.n	26f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    26dc:	2802      	cmp	r0, #2
    26de:	d00a      	beq.n	26f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    26e0:	2803      	cmp	r0, #3
    26e2:	d11b      	bne.n	271c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    26e4:	742e      	strb	r6, [r5, #16]
    26e6:	89e0      	ldrh	r0, [r4, #14]
    26e8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    26ec:	81e0      	strh	r0, [r4, #14]
    26ee:	2001      	movs	r0, #1
    26f0:	f7ff fdd8 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    26f4:	e012      	b.n	271c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    26f6:	7848      	ldrb	r0, [r1, #1]
    26f8:	b180      	cbz	r0, 271c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    26fa:	89e1      	ldrh	r1, [r4, #14]
    26fc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2700:	81e1      	strh	r1, [r4, #14]
    2702:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2704:	2900      	cmp	r1, #0
    2706:	d018      	beq.n	273a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    2708:	28fb      	cmp	r0, #251	; 0xfb
    270a:	d818      	bhi.n	273e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    270c:	7960      	ldrb	r0, [r4, #5]
    270e:	b120      	cbz	r0, 271a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e2>
    2710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2714:	2020      	movs	r0, #32
    2716:	f7ff bdd9 	b.w	22cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    271a:	703e      	strb	r6, [r7, #0]
    271c:	7e28      	ldrb	r0, [r5, #24]
    271e:	2801      	cmp	r0, #1
    2720:	d012      	beq.n	2748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    2722:	762e      	strb	r6, [r5, #24]
    2724:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2726:	7840      	ldrb	r0, [r0, #1]
    2728:	2800      	cmp	r0, #0
    272a:	d006      	beq.n	273a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    272c:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2730:	1c40      	adds	r0, r0, #1
    2732:	f141 0100 	adc.w	r1, r1, #0
    2736:	e9c5 0100 	strd	r0, r1, [r5]
    273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    273e:	7920      	ldrb	r0, [r4, #4]
    2740:	f040 0010 	orr.w	r0, r0, #16
    2744:	7120      	strb	r0, [r4, #4]
    2746:	e7f8      	b.n	273a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    2748:	2000      	movs	r0, #0
    274a:	7628      	strb	r0, [r5, #24]
    274c:	e7ea      	b.n	2724 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>
    274e:	0000      	.short	0x0000
    2750:	2000006c 	.word	0x2000006c
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	4605      	mov	r5, r0
    2758:	f7ff fdb2 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    275c:	4604      	mov	r4, r0
    275e:	7d80      	ldrb	r0, [r0, #22]
    2760:	2800      	cmp	r0, #0
    2762:	d02d      	beq.n	27c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x588>
    2764:	2802      	cmp	r0, #2
    2766:	d10c      	bne.n	2782 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    2768:	481b      	ldr	r0, [pc, #108]	; (27d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a0>)
    276a:	4629      	mov	r1, r5
    276c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    276e:	f00a fd2e 	bl	d1ce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2772:	b330      	cbz	r0, 27c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    2774:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2778:	1c40      	adds	r0, r0, #1
    277a:	f141 0100 	adc.w	r1, r1, #0
    277e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2782:	2500      	movs	r5, #0
    2784:	75a5      	strb	r5, [r4, #22]
    2786:	7ca0      	ldrb	r0, [r4, #18]
    2788:	b120      	cbz	r0, 2794 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>
    278a:	74a5      	strb	r5, [r4, #18]
    278c:	2100      	movs	r1, #0
    278e:	2010      	movs	r0, #16
    2790:	f7ff fd88 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2794:	7c60      	ldrb	r0, [r4, #17]
    2796:	b170      	cbz	r0, 27b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57e>
    2798:	7465      	strb	r5, [r4, #17]
    279a:	f7ff fb57 	bl	1e4c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    279e:	b198      	cbz	r0, 27c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    27a0:	2100      	movs	r1, #0
    27a2:	2008      	movs	r0, #8
    27a4:	f7ff fd7e 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    27a8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    27ac:	1c40      	adds	r0, r0, #1
    27ae:	f141 0100 	adc.w	r1, r1, #0
    27b2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    27b6:	7de0      	ldrb	r0, [r4, #23]
    27b8:	2801      	cmp	r0, #1
    27ba:	d00a      	beq.n	27d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59a>
    27bc:	2001      	movs	r0, #1
    27be:	75e0      	strb	r0, [r4, #23]
    27c0:	bd70      	pop	{r4, r5, r6, pc}
    27c2:	f240 31e3 	movw	r1, #995	; 0x3e3
    27c6:	e001      	b.n	27cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    27c8:	f240 31fa 	movw	r1, #1018	; 0x3fa
    27cc:	2027      	movs	r0, #39	; 0x27
    27ce:	f7fe fd15 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    27d2:	75e5      	strb	r5, [r4, #23]
    27d4:	bd70      	pop	{r4, r5, r6, pc}
    27d6:	0000      	.short	0x0000
    27d8:	2000006c 	.word	0x2000006c
    27dc:	4803      	ldr	r0, [pc, #12]	; (27ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    27de:	7800      	ldrb	r0, [r0, #0]
    27e0:	2800      	cmp	r0, #0
    27e2:	d001      	beq.n	27e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    27e4:	f7ff bf12 	b.w	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    27e8:	4770      	bx	lr
    27ea:	0000      	.short	0x0000
    27ec:	2000006c 	.word	0x2000006c
    27f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27f4:	4606      	mov	r6, r0
    27f6:	f7ff fd5d 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    27fa:	4680      	mov	r8, r0
    27fc:	f7ff fd60 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2800:	4c18      	ldr	r4, [pc, #96]	; (2864 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>)
    2802:	4605      	mov	r5, r0
    2804:	4632      	mov	r2, r6
    2806:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2808:	6260      	str	r0, [r4, #36]	; 0x24
    280a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    280e:	2101      	movs	r1, #1
    2810:	4640      	mov	r0, r8
    2812:	f7ff ff37 	bl	2684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2816:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    281a:	2700      	movs	r7, #0
    281c:	b170      	cbz	r0, 283c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x604>
    281e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2820:	f005 fc64 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2824:	4810      	ldr	r0, [pc, #64]	; (2868 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>)
    2826:	2101      	movs	r1, #1
    2828:	7601      	strb	r1, [r0, #24]
    282a:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    282e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2832:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2834:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2836:	f005 f8cb 	bl	79d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    283a:	e004      	b.n	2846 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60e>
    283c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    283e:	f005 fc55 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2842:	f005 f907 	bl	7a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2846:	b916      	cbnz	r6, 284e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x616>
    2848:	4638      	mov	r0, r7
    284a:	f005 fb05 	bl	7e58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    284e:	2100      	movs	r1, #0
    2850:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2854:	4608      	mov	r0, r1
    2856:	f005 fcd1 	bl	81fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    285a:	2002      	movs	r0, #2
    285c:	7020      	strb	r0, [r4, #0]
    285e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2862:	0000      	.short	0x0000
    2864:	2000006c 	.word	0x2000006c
    2868:	20000cf8 	.word	0x20000cf8
    286c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2870:	4604      	mov	r4, r0
    2872:	f7ff fd25 	bl	22c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2876:	4605      	mov	r5, r0
    2878:	f7ff fd1c 	bl	22b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    287c:	2700      	movs	r7, #0
    287e:	f88d 7000 	strb.w	r7, [sp]
    2882:	4606      	mov	r6, r0
    2884:	f8df 9164 	ldr.w	r9, [pc, #356]	; 29ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b4>
    2888:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    288c:	4622      	mov	r2, r4
    288e:	4639      	mov	r1, r7
    2890:	f7ff fef8 	bl	2684 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2894:	7da8      	ldrb	r0, [r5, #22]
    2896:	f04f 0801 	mov.w	r8, #1
    289a:	f1a9 0420 	sub.w	r4, r9, #32
    289e:	b140      	cbz	r0, 28b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67a>
    28a0:	2801      	cmp	r0, #1
    28a2:	d020      	beq.n	28e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    28a4:	2802      	cmp	r0, #2
    28a6:	d02f      	beq.n	2908 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    28a8:	2803      	cmp	r0, #3
    28aa:	d03b      	beq.n	2924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    28ac:	f240 21ff 	movw	r1, #767	; 0x2ff
    28b0:	e057      	b.n	2962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    28b2:	79a0      	ldrb	r0, [r4, #6]
    28b4:	2150      	movs	r1, #80	; 0x50
    28b6:	f8ad 0004 	strh.w	r0, [sp, #4]
    28ba:	5388      	strh	r0, [r1, r6]
    28bc:	4648      	mov	r0, r9
    28be:	f7ff faef 	bl	1ea0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    28c2:	b130      	cbz	r0, 28d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    28c4:	2080      	movs	r0, #128	; 0x80
    28c6:	6a21      	ldr	r1, [r4, #32]
    28c8:	f7ff fcec 	bl	22a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    28cc:	f885 8011 	strb.w	r8, [r5, #17]
    28d0:	e02c      	b.n	292c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    28d2:	466a      	mov	r2, sp
    28d4:	a901      	add	r1, sp, #4
    28d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    28d8:	f00b f8fd 	bl	dad6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    28dc:	6220      	str	r0, [r4, #32]
    28de:	b110      	cbz	r0, 28e6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    28e0:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    28e4:	b111      	cbz	r1, 28ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    28e6:	4842      	ldr	r0, [pc, #264]	; (29f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    28e8:	6220      	str	r0, [r4, #32]
    28ea:	e01f      	b.n	292c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    28ec:	f89d 1000 	ldrb.w	r1, [sp]
    28f0:	b921      	cbnz	r1, 28fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    28f2:	8007      	strh	r7, [r0, #0]
    28f4:	7087      	strb	r7, [r0, #2]
    28f6:	2101      	movs	r1, #1
    28f8:	f00b fc73 	bl	e1e2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28fc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2900:	6a20      	ldr	r0, [r4, #32]
    2902:	f00b fbf6 	bl	e0f2 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2906:	e011      	b.n	292c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2908:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    290c:	f8ad 0004 	strh.w	r0, [sp, #4]
    2910:	466a      	mov	r2, sp
    2912:	a901      	add	r1, sp, #4
    2914:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2916:	f00b f8de 	bl	dad6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    291a:	6220      	str	r0, [r4, #32]
    291c:	b930      	cbnz	r0, 292c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    291e:	f240 21e9 	movw	r1, #745	; 0x2e9
    2922:	e01e      	b.n	2962 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2924:	4648      	mov	r0, r9
    2926:	f7ff fabb 	bl	1ea0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    292a:	b1c0      	cbz	r0, 295e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    292c:	6a20      	ldr	r0, [r4, #32]
    292e:	2308      	movs	r3, #8
    2930:	7801      	ldrb	r1, [r0, #0]
    2932:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2936:	7001      	strb	r1, [r0, #0]
    2938:	7dea      	ldrb	r2, [r5, #23]
    293a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    293e:	4311      	orrs	r1, r2
    2940:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2944:	7001      	strb	r1, [r0, #0]
    2946:	7e2a      	ldrb	r2, [r5, #24]
    2948:	2304      	movs	r3, #4
    294a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    294e:	4311      	orrs	r1, r2
    2950:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2954:	7001      	strb	r1, [r0, #0]
    2956:	43c9      	mvns	r1, r1
    2958:	0789      	lsls	r1, r1, #30
    295a:	d005      	beq.n	2968 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    295c:	e007      	b.n	296e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    295e:	f240 21f2 	movw	r1, #754	; 0x2f2
    2962:	2027      	movs	r0, #39	; 0x27
    2964:	f7fe fc4a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2968:	78c0      	ldrb	r0, [r0, #3]
    296a:	2802      	cmp	r0, #2
    296c:	d00f      	beq.n	298e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    296e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2970:	f00a fd2b 	bl	d3ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2974:	b108      	cbz	r0, 297a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    2976:	2101      	movs	r1, #1
    2978:	e00a      	b.n	2990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    297a:	6a20      	ldr	r0, [r4, #32]
    297c:	7800      	ldrb	r0, [r0, #0]
    297e:	43c0      	mvns	r0, r0
    2980:	0780      	lsls	r0, r0, #30
    2982:	d004      	beq.n	298e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2984:	f7ff fa4a 	bl	1e1c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2988:	f080 0101 	eor.w	r1, r0, #1
    298c:	e000      	b.n	2990 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    298e:	2100      	movs	r1, #0
    2990:	6a20      	ldr	r0, [r4, #32]
    2992:	7802      	ldrb	r2, [r0, #0]
    2994:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2998:	7001      	strb	r1, [r0, #0]
    299a:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    299e:	b181      	cbz	r1, 29c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    29a0:	7841      	ldrb	r1, [r0, #1]
    29a2:	b171      	cbz	r1, 29c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    29a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    29a6:	f005 fba1 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29aa:	4811      	ldr	r0, [pc, #68]	; (29f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    29ac:	3828      	subs	r0, #40	; 0x28
    29ae:	7607      	strb	r7, [r0, #24]
    29b0:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    29b4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    29b8:	6a21      	ldr	r1, [r4, #32]
    29ba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    29bc:	f005 f808 	bl	79d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    29c0:	e003      	b.n	29ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x792>
    29c2:	f005 fb93 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    29c6:	f005 f845 	bl	7a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    29ca:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    29ce:	2101      	movs	r1, #1
    29d0:	2000      	movs	r0, #0
    29d2:	f005 fc13 	bl	81fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    29d6:	f884 8003 	strb.w	r8, [r4, #3]
    29da:	6a21      	ldr	r1, [r4, #32]
    29dc:	880a      	ldrh	r2, [r1, #0]
    29de:	8222      	strh	r2, [r4, #16]
    29e0:	7889      	ldrb	r1, [r1, #2]
    29e2:	74a1      	strb	r1, [r4, #18]
    29e4:	f884 8000 	strb.w	r8, [r4]
    29e8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    29ec:	2000008c 	.word	0x2000008c
    29f0:	20000d20 	.word	0x20000d20
    29f4:	00002659 	.word	0x00002659
    29f8:	000023a1 	.word	0x000023a1
    29fc:	00002551 	.word	0x00002551
    2a00:	000027dd 	.word	0x000027dd

00002a04 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2a04:	4800      	ldr	r0, [pc, #0]	; (2a08 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2a06:	4770      	bx	lr
    2a08:	200015f9 	.word	0x200015f9

00002a0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2a0c:	4904      	ldr	r1, [pc, #16]	; (2a20 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2a0e:	788a      	ldrb	r2, [r1, #2]
    2a10:	4282      	cmp	r2, r0
    2a12:	d903      	bls.n	2a1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2a14:	4408      	add	r0, r1
    2a16:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2a1a:	4770      	bx	lr
    2a1c:	2000      	movs	r0, #0
    2a1e:	4770      	bx	lr
    2a20:	20001426 	.word	0x20001426

00002a24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2a24:	4904      	ldr	r1, [pc, #16]	; (2a38 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2a26:	788a      	ldrb	r2, [r1, #2]
    2a28:	4282      	cmp	r2, r0
    2a2a:	d903      	bls.n	2a34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2a2c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2a30:	3083      	adds	r0, #131	; 0x83
    2a32:	4770      	bx	lr
    2a34:	2000      	movs	r0, #0
    2a36:	4770      	bx	lr
    2a38:	20001426 	.word	0x20001426

00002a3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2a3c:	4a05      	ldr	r2, [pc, #20]	; (2a54 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2a3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2a42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2a46:	6802      	ldr	r2, [r0, #0]
    2a48:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2a4c:	8880      	ldrh	r0, [r0, #4]
    2a4e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2a52:	4770      	bx	lr
    2a54:	20001426 	.word	0x20001426

00002a58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2a58:	4904      	ldr	r1, [pc, #16]	; (2a6c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2a5a:	788a      	ldrb	r2, [r1, #2]
    2a5c:	4282      	cmp	r2, r0
    2a5e:	d903      	bls.n	2a68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2a60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2a64:	1cc0      	adds	r0, r0, #3
    2a66:	4770      	bx	lr
    2a68:	2000      	movs	r0, #0
    2a6a:	4770      	bx	lr
    2a6c:	20001426 	.word	0x20001426

00002a70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2a70:	b510      	push	{r4, lr}
    2a72:	f240 12d3 	movw	r2, #467	; 0x1d3
    2a76:	2100      	movs	r1, #0
    2a78:	4808      	ldr	r0, [pc, #32]	; (2a9c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    2a7a:	f00e f93f 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2a7e:	2208      	movs	r2, #8
    2a80:	21ff      	movs	r1, #255	; 0xff
    2a82:	4807      	ldr	r0, [pc, #28]	; (2aa0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2a84:	f00e f93a 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2a88:	4805      	ldr	r0, [pc, #20]	; (2aa0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2a8a:	2100      	movs	r1, #0
    2a8c:	1f00      	subs	r0, r0, #4
    2a8e:	7001      	strb	r1, [r0, #0]
    2a90:	7041      	strb	r1, [r0, #1]
    2a92:	f44f 7161 	mov.w	r1, #900	; 0x384
    2a96:	8041      	strh	r1, [r0, #2]
    2a98:	bd10      	pop	{r4, pc}
    2a9a:	0000      	.short	0x0000
    2a9c:	20001426 	.word	0x20001426
    2aa0:	20000350 	.word	0x20000350

00002aa4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2aa4:	4b0b      	ldr	r3, [pc, #44]	; (2ad4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2aa6:	b510      	push	{r4, lr}
    2aa8:	789c      	ldrb	r4, [r3, #2]
    2aaa:	4284      	cmp	r4, r0
    2aac:	d90f      	bls.n	2ace <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2aae:	4418      	add	r0, r3
    2ab0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2ab4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2ab8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2abc:	700b      	strb	r3, [r1, #0]
    2abe:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    2ac2:	6011      	str	r1, [r2, #0]
    2ac4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2ac8:	8090      	strh	r0, [r2, #4]
    2aca:	2001      	movs	r0, #1
    2acc:	bd10      	pop	{r4, pc}
    2ace:	2000      	movs	r0, #0
    2ad0:	bd10      	pop	{r4, pc}
    2ad2:	0000      	.short	0x0000
    2ad4:	20001426 	.word	0x20001426

00002ad8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2ad8:	4907      	ldr	r1, [pc, #28]	; (2af8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2ada:	788a      	ldrb	r2, [r1, #2]
    2adc:	4282      	cmp	r2, r0
    2ade:	d909      	bls.n	2af4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2ae0:	4408      	add	r0, r1
    2ae2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2ae6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2aea:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2aee:	f000 0001 	and.w	r0, r0, #1
    2af2:	4770      	bx	lr
    2af4:	2000      	movs	r0, #0
    2af6:	4770      	bx	lr
    2af8:	20001426 	.word	0x20001426

00002afc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2afc:	4801      	ldr	r0, [pc, #4]	; (2b04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2afe:	8840      	ldrh	r0, [r0, #2]
    2b00:	4770      	bx	lr
    2b02:	0000      	.short	0x0000
    2b04:	2000034c 	.word	0x2000034c

00002b08 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2b08:	4905      	ldr	r1, [pc, #20]	; (2b20 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2b0a:	788a      	ldrb	r2, [r1, #2]
    2b0c:	4282      	cmp	r2, r0
    2b0e:	d903      	bls.n	2b18 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2b10:	4408      	add	r0, r1
    2b12:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2b16:	b108      	cbz	r0, 2b1c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2b18:	2000      	movs	r0, #0
    2b1a:	4770      	bx	lr
    2b1c:	2001      	movs	r0, #1
    2b1e:	4770      	bx	lr
    2b20:	20001426 	.word	0x20001426

00002b24 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2b24:	b570      	push	{r4, r5, r6, lr}
    2b26:	460d      	mov	r5, r1
    2b28:	4606      	mov	r6, r0
    2b2a:	f000 f8c1 	bl	2cb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2b2e:	4c10      	ldr	r4, [pc, #64]	; (2b70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2b30:	2810      	cmp	r0, #16
    2b32:	d007      	beq.n	2b44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2b34:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2b38:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2b3c:	07c9      	lsls	r1, r1, #31
    2b3e:	d001      	beq.n	2b44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2b40:	2001      	movs	r0, #1
    2b42:	bd70      	pop	{r4, r5, r6, pc}
    2b44:	7861      	ldrb	r1, [r4, #1]
    2b46:	2908      	cmp	r1, #8
    2b48:	d210      	bcs.n	2b6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2b4a:	2810      	cmp	r0, #16
    2b4c:	d008      	beq.n	2b60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    2b4e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2b52:	2101      	movs	r1, #1
    2b54:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2b58:	7860      	ldrb	r0, [r4, #1]
    2b5a:	1c40      	adds	r0, r0, #1
    2b5c:	7060      	strb	r0, [r4, #1]
    2b5e:	e7ef      	b.n	2b40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2b60:	2201      	movs	r2, #1
    2b62:	4629      	mov	r1, r5
    2b64:	4630      	mov	r0, r6
    2b66:	f000 f887 	bl	2c78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2b6a:	e7f5      	b.n	2b58 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2b6c:	2000      	movs	r0, #0
    2b6e:	bd70      	pop	{r4, r5, r6, pc}
    2b70:	20001426 	.word	0x20001426

00002b74 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2b74:	b570      	push	{r4, r5, r6, lr}
    2b76:	4d0b      	ldr	r5, [pc, #44]	; (2ba4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2b78:	7828      	ldrb	r0, [r5, #0]
    2b7a:	1e40      	subs	r0, r0, #1
    2b7c:	b244      	sxtb	r4, r0
    2b7e:	e00a      	b.n	2b96 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2b80:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2b84:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2b88:	07c0      	lsls	r0, r0, #31
    2b8a:	d002      	beq.n	2b92 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2b8c:	b2e0      	uxtb	r0, r4
    2b8e:	f000 f8ed 	bl	2d6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2b92:	1e64      	subs	r4, r4, #1
    2b94:	b264      	sxtb	r4, r4
    2b96:	2c00      	cmp	r4, #0
    2b98:	daf2      	bge.n	2b80 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2b9a:	4903      	ldr	r1, [pc, #12]	; (2ba8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2b9c:	2000      	movs	r0, #0
    2b9e:	7048      	strb	r0, [r1, #1]
    2ba0:	bd70      	pop	{r4, r5, r6, pc}
    2ba2:	0000      	.short	0x0000
    2ba4:	20001426 	.word	0x20001426
    2ba8:	2000034c 	.word	0x2000034c

00002bac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bb0:	2400      	movs	r4, #0
    2bb2:	4625      	mov	r5, r4
    2bb4:	4e18      	ldr	r6, [pc, #96]	; (2c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2bb6:	e029      	b.n	2c0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2bb8:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    2bbc:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2bc0:	07c0      	lsls	r0, r0, #31
    2bc2:	d021      	beq.n	2c08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2bc4:	4628      	mov	r0, r5
    2bc6:	f000 f843 	bl	2c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2bca:	4603      	mov	r3, r0
    2bcc:	f7ff ff44 	bl	2a58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2bd0:	4601      	mov	r1, r0
    2bd2:	2000      	movs	r0, #0
    2bd4:	2b10      	cmp	r3, #16
    2bd6:	d009      	beq.n	2bec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2bd8:	18f2      	adds	r2, r6, r3
    2bda:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    2bde:	f1bc 0f01 	cmp.w	ip, #1
    2be2:	d002      	beq.n	2bea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    2be4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    2be8:	b102      	cbz	r2, 2bec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2bea:	2001      	movs	r0, #1
    2bec:	1e40      	subs	r0, r0, #1
    2bee:	4201      	tst	r1, r0
    2bf0:	d10a      	bne.n	2c08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2bf2:	480a      	ldr	r0, [pc, #40]	; (2c1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    2bf4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    2bf8:	5503      	strb	r3, [r0, r4]
    2bfa:	4620      	mov	r0, r4
    2bfc:	1c64      	adds	r4, r4, #1
    2bfe:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    2c02:	b2e4      	uxtb	r4, r4
    2c04:	f005 fc20 	bl	8448 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2c08:	1c6d      	adds	r5, r5, #1
    2c0a:	b2ed      	uxtb	r5, r5
    2c0c:	7830      	ldrb	r0, [r6, #0]
    2c0e:	42a8      	cmp	r0, r5
    2c10:	d8d2      	bhi.n	2bb8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    2c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c16:	0000      	.short	0x0000
    2c18:	20001426 	.word	0x20001426
    2c1c:	20000350 	.word	0x20000350
    2c20:	4602      	mov	r2, r0
    2c22:	4809      	ldr	r0, [pc, #36]	; (2c48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2c24:	b510      	push	{r4, lr}
    2c26:	7800      	ldrb	r0, [r0, #0]
    2c28:	460b      	mov	r3, r1
    2c2a:	b158      	cbz	r0, 2c44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2c2c:	4807      	ldr	r0, [pc, #28]	; (2c4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2c2e:	7881      	ldrb	r1, [r0, #2]
    2c30:	b141      	cbz	r1, 2c44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2c32:	b10b      	cbz	r3, 2c38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2c34:	1cc0      	adds	r0, r0, #3
    2c36:	e001      	b.n	2c3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2c38:	4804      	ldr	r0, [pc, #16]	; (2c4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2c3a:	3083      	adds	r0, #131	; 0x83
    2c3c:	f004 fdd0 	bl	77e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2c40:	2001      	movs	r0, #1
    2c42:	bd10      	pop	{r4, pc}
    2c44:	2000      	movs	r0, #0
    2c46:	bd10      	pop	{r4, pc}
    2c48:	2000034c 	.word	0x2000034c
    2c4c:	20001426 	.word	0x20001426
    2c50:	4908      	ldr	r1, [pc, #32]	; (2c74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2c52:	b510      	push	{r4, lr}
    2c54:	4603      	mov	r3, r0
    2c56:	2000      	movs	r0, #0
    2c58:	788a      	ldrb	r2, [r1, #2]
    2c5a:	e006      	b.n	2c6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2c5c:	180c      	adds	r4, r1, r0
    2c5e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2c62:	429c      	cmp	r4, r3
    2c64:	d004      	beq.n	2c70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2c66:	1c40      	adds	r0, r0, #1
    2c68:	b2c0      	uxtb	r0, r0
    2c6a:	4282      	cmp	r2, r0
    2c6c:	d8f6      	bhi.n	2c5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    2c6e:	2010      	movs	r0, #16
    2c70:	bd10      	pop	{r4, pc}
    2c72:	0000      	.short	0x0000
    2c74:	20001426 	.word	0x20001426
    2c78:	b570      	push	{r4, r5, r6, lr}
    2c7a:	4b0c      	ldr	r3, [pc, #48]	; (2cac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2c7c:	4604      	mov	r4, r0
    2c7e:	7818      	ldrb	r0, [r3, #0]
    2c80:	1c45      	adds	r5, r0, #1
    2c82:	701d      	strb	r5, [r3, #0]
    2c84:	2810      	cmp	r0, #16
    2c86:	d303      	bcc.n	2c90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2c88:	2146      	movs	r1, #70	; 0x46
    2c8a:	2028      	movs	r0, #40	; 0x28
    2c8c:	f7fe fab6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c90:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2c94:	680d      	ldr	r5, [r1, #0]
    2c96:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2c9a:	8889      	ldrh	r1, [r1, #4]
    2c9c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2ca0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2ca4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	0000      	.short	0x0000
    2cac:	20001426 	.word	0x20001426
    2cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cb2:	4c1a      	ldr	r4, [pc, #104]	; (2d1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2cb4:	4603      	mov	r3, r0
    2cb6:	2000      	movs	r0, #0
    2cb8:	7825      	ldrb	r5, [r4, #0]
    2cba:	e02a      	b.n	2d12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    2cbc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2cc0:	780f      	ldrb	r7, [r1, #0]
    2cc2:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2cc6:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    2cca:	ea87 070c 	eor.w	r7, r7, ip
    2cce:	405e      	eors	r6, r3
    2cd0:	443e      	add	r6, r7
    2cd2:	784f      	ldrb	r7, [r1, #1]
    2cd4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2cd8:	ea87 070c 	eor.w	r7, r7, ip
    2cdc:	443e      	add	r6, r7
    2cde:	788f      	ldrb	r7, [r1, #2]
    2ce0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2ce4:	ea87 070c 	eor.w	r7, r7, ip
    2ce8:	443e      	add	r6, r7
    2cea:	78cf      	ldrb	r7, [r1, #3]
    2cec:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2cf0:	ea87 070c 	eor.w	r7, r7, ip
    2cf4:	443e      	add	r6, r7
    2cf6:	790f      	ldrb	r7, [r1, #4]
    2cf8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    2cfc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    2d00:	ea87 070c 	eor.w	r7, r7, ip
    2d04:	443e      	add	r6, r7
    2d06:	794f      	ldrb	r7, [r1, #5]
    2d08:	4057      	eors	r7, r2
    2d0a:	42f7      	cmn	r7, r6
    2d0c:	d004      	beq.n	2d18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    2d0e:	1c40      	adds	r0, r0, #1
    2d10:	b2c0      	uxtb	r0, r0
    2d12:	4285      	cmp	r5, r0
    2d14:	d8d2      	bhi.n	2cbc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    2d16:	2010      	movs	r0, #16
    2d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d1a:	0000      	.short	0x0000
    2d1c:	20001426 	.word	0x20001426
    2d20:	b570      	push	{r4, r5, r6, lr}
    2d22:	4605      	mov	r5, r0
    2d24:	f7ff ff94 	bl	2c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2d28:	2810      	cmp	r0, #16
    2d2a:	d11c      	bne.n	2d66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2d2c:	4c0e      	ldr	r4, [pc, #56]	; (2d68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    2d2e:	7820      	ldrb	r0, [r4, #0]
    2d30:	1e40      	subs	r0, r0, #1
    2d32:	b2c0      	uxtb	r0, r0
    2d34:	7020      	strb	r0, [r4, #0]
    2d36:	42a8      	cmp	r0, r5
    2d38:	d015      	beq.n	2d66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2d3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2d3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2d42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2d46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2d4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    2d4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2d52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2d56:	7820      	ldrb	r0, [r4, #0]
    2d58:	f7ff ff7a 	bl	2c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2d5c:	2810      	cmp	r0, #16
    2d5e:	d002      	beq.n	2d66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2d60:	4420      	add	r0, r4
    2d62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2d66:	bd70      	pop	{r4, r5, r6, pc}
    2d68:	20001426 	.word	0x20001426
    2d6c:	4905      	ldr	r1, [pc, #20]	; (2d84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    2d6e:	784a      	ldrb	r2, [r1, #1]
    2d70:	1e52      	subs	r2, r2, #1
    2d72:	704a      	strb	r2, [r1, #1]
    2d74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2d78:	2200      	movs	r2, #0
    2d7a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    2d7e:	f7ff bfcf 	b.w	2d20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2d82:	0000      	.short	0x0000
    2d84:	20001426 	.word	0x20001426

00002d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d8c:	4604      	mov	r4, r0
    2d8e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2d92:	f04f 0901 	mov.w	r9, #1
    2d96:	b171      	cbz	r1, 2db6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2d98:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2d9c:	1e7e      	subs	r6, r7, #1
    2d9e:	2901      	cmp	r1, #1
    2da0:	d025      	beq.n	2dee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x66>
    2da2:	2902      	cmp	r1, #2
    2da4:	d04a      	beq.n	2e3c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb4>
    2da6:	2903      	cmp	r1, #3
    2da8:	d11f      	bne.n	2dea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2daa:	4639      	mov	r1, r7
    2dac:	4630      	mov	r0, r6
    2dae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2db2:	f00b b8c3 	b.w	df3c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2db6:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2dba:	2100      	movs	r1, #0
    2dbc:	f00d ff9e 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2dc0:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2dc4:	4822      	ldr	r0, [pc, #136]	; (2e50 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>)
    2dc6:	66e8      	str	r0, [r5, #108]	; 0x6c
    2dc8:	2007      	movs	r0, #7
    2dca:	6728      	str	r0, [r5, #112]	; 0x70
    2dcc:	f814 0fec 	ldrb.w	r0, [r4, #236]!
    2dd0:	f020 0004 	bic.w	r0, r0, #4
    2dd4:	7020      	strb	r0, [r4, #0]
    2dd6:	20fe      	movs	r0, #254	; 0xfe
    2dd8:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2ddc:	207f      	movs	r0, #127	; 0x7f
    2dde:	7668      	strb	r0, [r5, #25]
    2de0:	481c      	ldr	r0, [pc, #112]	; (2e54 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>)
    2de2:	60a8      	str	r0, [r5, #8]
    2de4:	2000      	movs	r0, #0
    2de6:	e9c5 0000 	strd	r0, r0, [r5]
    2dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dee:	f04f 0800 	mov.w	r8, #0
    2df2:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2df6:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2dfa:	6921      	ldr	r1, [r4, #16]
    2dfc:	4816      	ldr	r0, [pc, #88]	; (2e58 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2dfe:	460a      	mov	r2, r1
    2e00:	4408      	add	r0, r1
    2e02:	fbb0 f0f1 	udiv	r0, r0, r1
    2e06:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2e0a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2e0e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2e12:	8b63      	ldrh	r3, [r4, #26]
    2e14:	4628      	mov	r0, r5
    2e16:	f000 f821 	bl	2e5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2e1a:	4639      	mov	r1, r7
    2e1c:	4630      	mov	r0, r6
    2e1e:	f00b f88d 	bl	df3c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2e22:	f00d fe82 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2e26:	b118      	cbz	r0, 2e30 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    2e28:	6960      	ldr	r0, [r4, #20]
    2e2a:	f000 fb53 	bl	34d4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2e2e:	b110      	cbz	r0, 2e36 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xae>
    2e30:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2e34:	e7d9      	b.n	2dea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2e36:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2e3a:	e7d6      	b.n	2dea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2e3c:	6901      	ldr	r1, [r0, #16]
    2e3e:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2e42:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2e46:	4628      	mov	r0, r5
    2e48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e4c:	f000 b806 	b.w	2e5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    2e50:	3404492f 	.word	0x3404492f
    2e54:	fffce000 	.word	0xfffce000
    2e58:	01c9c37f 	.word	0x01c9c37f
    2e5c:	b510      	push	{r4, lr}
    2e5e:	2400      	movs	r4, #0
    2e60:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    2e64:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    2e68:	434c      	muls	r4, r1
    2e6a:	fbb4 f4f2 	udiv	r4, r4, r2
    2e6e:	f820 4910 	strh.w	r4, [r0], #-16
    2e72:	f240 2471 	movw	r4, #625	; 0x271
    2e76:	4363      	muls	r3, r4
    2e78:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2e7c:	1e5b      	subs	r3, r3, #1
    2e7e:	fbb3 f3f2 	udiv	r3, r3, r2
    2e82:	81c3      	strh	r3, [r0, #14]
    2e84:	4b09      	ldr	r3, [pc, #36]	; (2eac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    2e86:	fbb3 f3f2 	udiv	r3, r3, r2
    2e8a:	1c5b      	adds	r3, r3, #1
    2e8c:	8283      	strh	r3, [r0, #20]
    2e8e:	8903      	ldrh	r3, [r0, #8]
    2e90:	4363      	muls	r3, r4
    2e92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2e96:	1e5b      	subs	r3, r3, #1
    2e98:	fbb3 f3f2 	udiv	r3, r3, r2
    2e9c:	6043      	str	r3, [r0, #4]
    2e9e:	6803      	ldr	r3, [r0, #0]
    2ea0:	434b      	muls	r3, r1
    2ea2:	fbb3 f1f2 	udiv	r1, r3, r2
    2ea6:	6001      	str	r1, [r0, #0]
    2ea8:	bd10      	pop	{r4, pc}
    2eaa:	0000      	.short	0x0000
    2eac:	02625a00 	.word	0x02625a00

00002eb0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2eb0:	4902      	ldr	r1, [pc, #8]	; (2ebc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2eb2:	f991 1000 	ldrsb.w	r1, [r1]
    2eb6:	f00a bff2 	b.w	de9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    2eba:	0000      	.short	0x0000
    2ebc:	2000036c 	.word	0x2000036c

00002ec0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2ec0:	b508      	push	{r3, lr}
    2ec2:	207f      	movs	r0, #127	; 0x7f
    2ec4:	f88d 0000 	strb.w	r0, [sp]
    2ec8:	4668      	mov	r0, sp
    2eca:	f005 f9bd 	bl	8248 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2ece:	b140      	cbz	r0, 2ee2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2ed0:	4805      	ldr	r0, [pc, #20]	; (2ee8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2ed2:	7840      	ldrb	r0, [r0, #1]
    2ed4:	4240      	negs	r0, r0
    2ed6:	b241      	sxtb	r1, r0
    2ed8:	f99d 0000 	ldrsb.w	r0, [sp]
    2edc:	f00a ffdf 	bl	de9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    2ee0:	bd08      	pop	{r3, pc}
    2ee2:	f99d 0000 	ldrsb.w	r0, [sp]
    2ee6:	bd08      	pop	{r3, pc}
    2ee8:	2000036c 	.word	0x2000036c
    2eec:	b570      	push	{r4, r5, r6, lr}
    2eee:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2ef2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2ef6:	2401      	movs	r4, #1
    2ef8:	fb03 2101 	mla	r1, r3, r1, r2
    2efc:	2225      	movs	r2, #37	; 0x25
    2efe:	fbb1 f3f2 	udiv	r3, r1, r2
    2f02:	fb02 1113 	mls	r1, r2, r3, r1
    2f06:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2f0a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2f0e:	f001 0307 	and.w	r3, r1, #7
    2f12:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2f16:	fa04 f303 	lsl.w	r3, r4, r3
    2f1a:	421a      	tst	r2, r3
    2f1c:	d004      	beq.n	2f28 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x68>
    2f1e:	bf00      	nop
    2f20:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2f24:	2000      	movs	r0, #0
    2f26:	bd70      	pop	{r4, r5, r6, pc}
    2f28:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2f2c:	fbb1 f3f2 	udiv	r3, r1, r2
    2f30:	fb02 1113 	mls	r1, r2, r3, r1
    2f34:	1c49      	adds	r1, r1, #1
    2f36:	b2c9      	uxtb	r1, r1
    2f38:	2300      	movs	r3, #0
    2f3a:	18c5      	adds	r5, r0, r3
    2f3c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2f40:	428a      	cmp	r2, r1
    2f42:	d312      	bcc.n	2f6a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xaa>
    2f44:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2f48:	2200      	movs	r2, #0
    2f4a:	bf00      	nop
    2f4c:	fa04 f602 	lsl.w	r6, r4, r2
    2f50:	4235      	tst	r5, r6
    2f52:	d001      	beq.n	2f58 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x98>
    2f54:	1e49      	subs	r1, r1, #1
    2f56:	b2c9      	uxtb	r1, r1
    2f58:	b121      	cbz	r1, 2f64 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xa4>
    2f5a:	1c52      	adds	r2, r2, #1
    2f5c:	b2d2      	uxtb	r2, r2
    2f5e:	2a08      	cmp	r2, #8
    2f60:	d3f4      	bcc.n	2f4c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x8c>
    2f62:	e004      	b.n	2f6e <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xae>
    2f64:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2f68:	e7da      	b.n	2f20 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x60>
    2f6a:	1a89      	subs	r1, r1, r2
    2f6c:	b2c9      	uxtb	r1, r1
    2f6e:	1c5b      	adds	r3, r3, #1
    2f70:	b2db      	uxtb	r3, r3
    2f72:	2b05      	cmp	r3, #5
    2f74:	d3e1      	bcc.n	2f3a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x7a>
    2f76:	201f      	movs	r0, #31
    2f78:	bd70      	pop	{r4, r5, r6, pc}
    2f7a:	0000      	movs	r0, r0
    2f7c:	b570      	push	{r4, r5, r6, lr}
    2f7e:	1c49      	adds	r1, r1, #1
    2f80:	2300      	movs	r3, #0
    2f82:	b2c9      	uxtb	r1, r1
    2f84:	2401      	movs	r4, #1
    2f86:	18c5      	adds	r5, r0, r3
    2f88:	79aa      	ldrb	r2, [r5, #6]
    2f8a:	428a      	cmp	r2, r1
    2f8c:	d312      	bcc.n	2fb4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf4>
    2f8e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2f92:	2200      	movs	r2, #0
    2f94:	fa04 f602 	lsl.w	r6, r4, r2
    2f98:	4235      	tst	r5, r6
    2f9a:	d001      	beq.n	2fa0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xe0>
    2f9c:	1e49      	subs	r1, r1, #1
    2f9e:	b2c9      	uxtb	r1, r1
    2fa0:	b121      	cbz	r1, 2fac <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xec>
    2fa2:	1c52      	adds	r2, r2, #1
    2fa4:	b2d2      	uxtb	r2, r2
    2fa6:	2a08      	cmp	r2, #8
    2fa8:	d3f4      	bcc.n	2f94 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xd4>
    2faa:	e005      	b.n	2fb8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf8>
    2fac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2fb0:	b2c0      	uxtb	r0, r0
    2fb2:	bd70      	pop	{r4, r5, r6, pc}
    2fb4:	1a89      	subs	r1, r1, r2
    2fb6:	b2c9      	uxtb	r1, r1
    2fb8:	1c5b      	adds	r3, r3, #1
    2fba:	b2db      	uxtb	r3, r3
    2fbc:	2b05      	cmp	r3, #5
    2fbe:	d3e2      	bcc.n	2f86 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xc6>
    2fc0:	219d      	movs	r1, #157	; 0x9d
    2fc2:	2046      	movs	r0, #70	; 0x46
    2fc4:	f7fe f91a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002fc8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2fc8:	7841      	ldrb	r1, [r0, #1]
    2fca:	b141      	cbz	r1, 2fde <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2fcc:	78c0      	ldrb	r0, [r0, #3]
    2fce:	282b      	cmp	r0, #43	; 0x2b
    2fd0:	d203      	bcs.n	2fda <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2fd2:	4a04      	ldr	r2, [pc, #16]	; (2fe4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2fd4:	5c10      	ldrb	r0, [r2, r0]
    2fd6:	4288      	cmp	r0, r1
    2fd8:	d101      	bne.n	2fde <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2fda:	2001      	movs	r0, #1
    2fdc:	4770      	bx	lr
    2fde:	2000      	movs	r0, #0
    2fe0:	4770      	bx	lr
    2fe2:	0000      	.short	0x0000
    2fe4:	00010e46 	.word	0x00010e46

00002fe8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2fe8:	b510      	push	{r4, lr}
    2fea:	2201      	movs	r2, #1
    2fec:	70c1      	strb	r1, [r0, #3]
    2fee:	292b      	cmp	r1, #43	; 0x2b
    2ff0:	d202      	bcs.n	2ff8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2ff2:	4a06      	ldr	r2, [pc, #24]	; (300c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2ff4:	5c52      	ldrb	r2, [r2, r1]
    2ff6:	e006      	b.n	3006 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2ff8:	29ff      	cmp	r1, #255	; 0xff
    2ffa:	d004      	beq.n	3006 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2ffc:	f240 4175 	movw	r1, #1141	; 0x475
    3000:	202a      	movs	r0, #42	; 0x2a
    3002:	f7fe f8fb 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3006:	7042      	strb	r2, [r0, #1]
    3008:	bd10      	pop	{r4, pc}
    300a:	0000      	.short	0x0000
    300c:	00010e46 	.word	0x00010e46

00003010 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    3010:	4904      	ldr	r1, [pc, #16]	; (3024 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    3012:	7c89      	ldrb	r1, [r1, #18]
    3014:	0749      	lsls	r1, r1, #29
    3016:	d400      	bmi.n	301a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    3018:	b108      	cbz	r0, 301e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    301a:	2000      	movs	r0, #0
    301c:	4770      	bx	lr
    301e:	2001      	movs	r0, #1
    3020:	4770      	bx	lr
    3022:	0000      	.short	0x0000
    3024:	20000ef0 	.word	0x20000ef0

00003028 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    3028:	4803      	ldr	r0, [pc, #12]	; (3038 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    302a:	7c80      	ldrb	r0, [r0, #18]
    302c:	0780      	lsls	r0, r0, #30
    302e:	d401      	bmi.n	3034 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    3030:	2001      	movs	r0, #1
    3032:	4770      	bx	lr
    3034:	2000      	movs	r0, #0
    3036:	4770      	bx	lr
    3038:	20000ef0 	.word	0x20000ef0

0000303c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    303c:	4803      	ldr	r0, [pc, #12]	; (304c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    303e:	7c80      	ldrb	r0, [r0, #18]
    3040:	07c0      	lsls	r0, r0, #31
    3042:	d001      	beq.n	3048 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    3044:	2000      	movs	r0, #0
    3046:	4770      	bx	lr
    3048:	2001      	movs	r0, #1
    304a:	4770      	bx	lr
    304c:	20000ef0 	.word	0x20000ef0
    3050:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3054:	4688      	mov	r8, r1
    3056:	4699      	mov	r9, r3
    3058:	4615      	mov	r5, r2
    305a:	4604      	mov	r4, r0
    305c:	4669      	mov	r1, sp
    305e:	f00a fd7d 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3062:	bbe0      	cbnz	r0, 30de <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3064:	9e01      	ldr	r6, [sp, #4]
    3066:	2700      	movs	r7, #0
    3068:	3680      	adds	r6, #128	; 0x80
    306a:	b17d      	cbz	r5, 308c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    306c:	4620      	mov	r0, r4
    306e:	f7fe fcd7 	bl	1a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3072:	0004      	movs	r4, r0
    3074:	d00e      	beq.n	3094 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    3076:	4629      	mov	r1, r5
    3078:	f00a f979 	bl	d36e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    307c:	b118      	cbz	r0, 3086 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    307e:	491b      	ldr	r1, [pc, #108]	; (30ec <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    3080:	8849      	ldrh	r1, [r1, #2]
    3082:	42a9      	cmp	r1, r5
    3084:	d208      	bcs.n	3098 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    3086:	2000      	movs	r0, #0
    3088:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    308c:	2001      	movs	r0, #1
    308e:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    3092:	e024      	b.n	30de <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3094:	2167      	movs	r1, #103	; 0x67
    3096:	e025      	b.n	30e4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    3098:	4601      	mov	r1, r0
    309a:	aa02      	add	r2, sp, #8
    309c:	4620      	mov	r0, r4
    309e:	f00a f95f 	bl	d360 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    30a2:	9802      	ldr	r0, [sp, #8]
    30a4:	8007      	strh	r7, [r0, #0]
    30a6:	7087      	strb	r7, [r0, #2]
    30a8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    30ac:	b109      	cbz	r1, 30b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    30ae:	f04f 0802 	mov.w	r8, #2
    30b2:	4641      	mov	r1, r8
    30b4:	f00b f895 	bl	e1e2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    30b8:	9802      	ldr	r0, [sp, #8]
    30ba:	462a      	mov	r2, r5
    30bc:	4649      	mov	r1, r9
    30be:	1cc0      	adds	r0, r0, #3
    30c0:	f00d fda2 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    30c4:	4620      	mov	r0, r4
    30c6:	4629      	mov	r1, r5
    30c8:	f00a f908 	bl	d2dc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    30cc:	b148      	cbz	r0, 30e2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    30ce:	4668      	mov	r0, sp
    30d0:	f00b f8e2 	bl	e298 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    30d4:	9801      	ldr	r0, [sp, #4]
    30d6:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    30da:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    30de:	2001      	movs	r0, #1
    30e0:	e7d2      	b.n	3088 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    30e2:	217c      	movs	r1, #124	; 0x7c
    30e4:	202b      	movs	r0, #43	; 0x2b
    30e6:	f7fe f889 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30ea:	0000      	.short	0x0000
    30ec:	20000ef0 	.word	0x20000ef0

000030f0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    30f0:	4809      	ldr	r0, [pc, #36]	; (3118 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    30f2:	b082      	sub	sp, #8
    30f4:	7a00      	ldrb	r0, [r0, #8]
    30f6:	f88d 0000 	strb.w	r0, [sp]
    30fa:	9800      	ldr	r0, [sp, #0]
    30fc:	9000      	str	r0, [sp, #0]
    30fe:	f89d 0000 	ldrb.w	r0, [sp]
    3102:	2800      	cmp	r0, #0
    3104:	d105      	bne.n	3112 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    3106:	2202      	movs	r2, #2
    3108:	4904      	ldr	r1, [pc, #16]	; (311c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    310a:	4803      	ldr	r0, [pc, #12]	; (3118 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    310c:	b002      	add	sp, #8
    310e:	f00b b8e6 	b.w	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3112:	b002      	add	sp, #8
    3114:	4770      	bx	lr
    3116:	0000      	.short	0x0000
    3118:	20000f08 	.word	0x20000f08
    311c:	0000e325 	.word	0x0000e325

00003120 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    3120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3124:	f8df 8198 	ldr.w	r8, [pc, #408]	; 32c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a0>
    3128:	f8df a198 	ldr.w	sl, [pc, #408]	; 32c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    312c:	4683      	mov	fp, r0
    312e:	f04f 0901 	mov.w	r9, #1
    3132:	2600      	movs	r6, #0
    3134:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3138:	7a00      	ldrb	r0, [r0, #8]
    313a:	f88d 0000 	strb.w	r0, [sp]
    313e:	9800      	ldr	r0, [sp, #0]
    3140:	9000      	str	r0, [sp, #0]
    3142:	f89d 1000 	ldrb.w	r1, [sp]
    3146:	292a      	cmp	r1, #42	; 0x2a
    3148:	d106      	bne.n	3158 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    314a:	f89a 1013 	ldrb.w	r1, [sl, #19]
    314e:	b119      	cbz	r1, 3158 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    3150:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    3154:	2800      	cmp	r0, #0
    3156:	d07d      	beq.n	3254 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3158:	2700      	movs	r7, #0
    315a:	f88d 6000 	strb.w	r6, [sp]
    315e:	4668      	mov	r0, sp
    3160:	f000 f912 	bl	3388 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>
    3164:	f89d 1000 	ldrb.w	r1, [sp]
    3168:	2900      	cmp	r1, #0
    316a:	d1f8      	bne.n	315e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    316c:	2800      	cmp	r0, #0
    316e:	d071      	beq.n	3254 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3170:	4604      	mov	r4, r0
    3172:	7a00      	ldrb	r0, [r0, #8]
    3174:	f88d 0000 	strb.w	r0, [sp]
    3178:	9800      	ldr	r0, [sp, #0]
    317a:	9000      	str	r0, [sp, #0]
    317c:	f89d 5000 	ldrb.w	r5, [sp]
    3180:	1ea8      	subs	r0, r5, #2
    3182:	2830      	cmp	r0, #48	; 0x30
    3184:	d267      	bcs.n	3256 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    3186:	e8df f000 	tbb	[pc, r0]
    318a:	2718      	.short	0x2718
    318c:	85852185 	.word	0x85852185
    3190:	6f696f27 	.word	0x6f696f27
    3194:	6f2d6f6f 	.word	0x6f2d6f6f
    3198:	85852185 	.word	0x85852185
    319c:	85216f6f 	.word	0x85216f6f
    31a0:	6f858585 	.word	0x6f858585
    31a4:	6f858545 	.word	0x6f858545
    31a8:	856f6f21 	.word	0x856f6f21
    31ac:	8585216f 	.word	0x8585216f
    31b0:	8575554f 	.word	0x8575554f
    31b4:	85858585 	.word	0x85858585
    31b8:	4f85      	.short	0x4f85
    31ba:	6862      	ldr	r2, [r4, #4]
    31bc:	b912      	cbnz	r2, 31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    31be:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    31c2:	e064      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    31c4:	4659      	mov	r1, fp
    31c6:	4620      	mov	r0, r4
    31c8:	4790      	blx	r2
    31ca:	e03c      	b.n	3246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    31cc:	6862      	ldr	r2, [r4, #4]
    31ce:	2a00      	cmp	r2, #0
    31d0:	d1f8      	bne.n	31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    31d2:	f240 11bb 	movw	r1, #443	; 0x1bb
    31d6:	e05a      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    31d8:	6862      	ldr	r2, [r4, #4]
    31da:	2a00      	cmp	r2, #0
    31dc:	d1f2      	bne.n	31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    31de:	f240 214b 	movw	r1, #587	; 0x24b
    31e2:	e054      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    31e4:	6860      	ldr	r0, [r4, #4]
    31e6:	465d      	mov	r5, fp
    31e8:	b180      	cbz	r0, 320c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xec>
    31ea:	8804      	ldrh	r4, [r0, #0]
    31ec:	4620      	mov	r0, r4
    31ee:	f7fe fc17 	bl	1a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    31f2:	b168      	cbz	r0, 3210 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    31f4:	706e      	strb	r6, [r5, #1]
    31f6:	220d      	movs	r2, #13
    31f8:	702a      	strb	r2, [r5, #0]
    31fa:	80ec      	strh	r4, [r5, #6]
    31fc:	f8a5 9008 	strh.w	r9, [r5, #8]
    3200:	4631      	mov	r1, r6
    3202:	f885 9004 	strb.w	r9, [r5, #4]
    3206:	f00a f949 	bl	d49c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    320a:	e057      	b.n	32bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    320c:	21ce      	movs	r1, #206	; 0xce
    320e:	e03e      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3210:	21ae      	movs	r1, #174	; 0xae
    3212:	e03c      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3214:	6862      	ldr	r2, [r4, #4]
    3216:	b122      	cbz	r2, 3222 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    3218:	4659      	mov	r1, fp
    321a:	4620      	mov	r0, r4
    321c:	4790      	blx	r2
    321e:	2701      	movs	r7, #1
    3220:	e011      	b.n	3246 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3222:	f240 2163 	movw	r1, #611	; 0x263
    3226:	e032      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3228:	6862      	ldr	r2, [r4, #4]
    322a:	2a00      	cmp	r2, #0
    322c:	d1ca      	bne.n	31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    322e:	f240 216f 	movw	r1, #623	; 0x26f
    3232:	e02c      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3234:	f88b 6001 	strb.w	r6, [fp, #1]
    3238:	2116      	movs	r1, #22
    323a:	f88b 1000 	strb.w	r1, [fp]
    323e:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3242:	f8cb 1004 	str.w	r1, [fp, #4]
    3246:	7226      	strb	r6, [r4, #8]
    3248:	2d21      	cmp	r5, #33	; 0x21
    324a:	d026      	beq.n	329a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    324c:	2d14      	cmp	r5, #20
    324e:	d027      	beq.n	32a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3250:	2d22      	cmp	r5, #34	; 0x22
    3252:	e001      	b.n	3258 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    3254:	e017      	b.n	3286 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    3256:	e01d      	b.n	3294 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    3258:	d029      	beq.n	32ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    325a:	e02d      	b.n	32b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    325c:	6862      	ldr	r2, [r4, #4]
    325e:	2a00      	cmp	r2, #0
    3260:	d1b0      	bne.n	31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3262:	f240 2181 	movw	r1, #641	; 0x281
    3266:	e012      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3268:	6862      	ldr	r2, [r4, #4]
    326a:	2a00      	cmp	r2, #0
    326c:	d1aa      	bne.n	31c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    326e:	f240 2196 	movw	r1, #662	; 0x296
    3272:	e00c      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3274:	4814      	ldr	r0, [pc, #80]	; (32c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a8>)
    3276:	6802      	ldr	r2, [r0, #0]
    3278:	b122      	cbz	r2, 3284 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    327a:	6860      	ldr	r0, [r4, #4]
    327c:	b128      	cbz	r0, 328a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    327e:	8800      	ldrh	r0, [r0, #0]
    3280:	4659      	mov	r1, fp
    3282:	4790      	blx	r2
    3284:	2002      	movs	r0, #2
    3286:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    328a:	f240 219f 	movw	r1, #671	; 0x29f
    328e:	2010      	movs	r0, #16
    3290:	f7fd ffb4 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3294:	f240 21bd 	movw	r1, #701	; 0x2bd
    3298:	e7f9      	b.n	328e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    329a:	f7ff fec5 	bl	3028 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    329e:	e008      	b.n	32b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    32a0:	f89b 000e 	ldrb.w	r0, [fp, #14]
    32a4:	f000 0001 	and.w	r0, r0, #1
    32a8:	f7ff feb2 	bl	3010 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    32ac:	e001      	b.n	32b2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    32ae:	f7ff fec5 	bl	303c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    32b2:	2800      	cmp	r0, #0
    32b4:	f47f af3e 	bne.w	3134 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    32b8:	2f00      	cmp	r7, #0
    32ba:	d1fb      	bne.n	32b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x194>
    32bc:	2004      	movs	r0, #4
    32be:	e7e2      	b.n	3286 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    32c0:	20000f1c 	.word	0x20000f1c
    32c4:	20000ef0 	.word	0x20000ef0
    32c8:	200000b0 	.word	0x200000b0

000032cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    32cc:	4901      	ldr	r1, [pc, #4]	; (32d4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    32ce:	7008      	strb	r0, [r1, #0]
    32d0:	f000 b8b0 	b.w	3434 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    32d4:	2000036e 	.word	0x2000036e

000032d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    32d8:	4902      	ldr	r1, [pc, #8]	; (32e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    32da:	4801      	ldr	r0, [pc, #4]	; (32e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    32dc:	6008      	str	r0, [r1, #0]
    32de:	4770      	bx	lr
    32e0:	000032e9 	.word	0x000032e9
    32e4:	200000b0 	.word	0x200000b0
    32e8:	b538      	push	{r3, r4, r5, lr}
    32ea:	000d      	movs	r5, r1
    32ec:	d014      	beq.n	3318 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    32ee:	80a8      	strh	r0, [r5, #4]
    32f0:	2100      	movs	r1, #0
    32f2:	7269      	strb	r1, [r5, #9]
    32f4:	f7fe fb7e 	bl	19f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    32f8:	4604      	mov	r4, r0
    32fa:	f00a f813 	bl	d324 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    32fe:	b168      	cbz	r0, 331c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x44>
    3300:	4601      	mov	r1, r0
    3302:	466a      	mov	r2, sp
    3304:	4620      	mov	r0, r4
    3306:	f00a f82b 	bl	d360 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    330a:	80e8      	strh	r0, [r5, #6]
    330c:	b148      	cbz	r0, 3322 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4a>
    330e:	28fb      	cmp	r0, #251	; 0xfb
    3310:	d90a      	bls.n	3328 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x50>
    3312:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3316:	e032      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3318:	21fc      	movs	r1, #252	; 0xfc
    331a:	e030      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    331c:	f240 1105 	movw	r1, #261	; 0x105
    3320:	e02d      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3322:	f44f 7185 	mov.w	r1, #266	; 0x10a
    3326:	e02a      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3328:	9800      	ldr	r0, [sp, #0]
    332a:	f00a ff06 	bl	e13a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    332e:	2801      	cmp	r0, #1
    3330:	d004      	beq.n	333c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    3332:	2802      	cmp	r0, #2
    3334:	d002      	beq.n	333c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    3336:	f44f 718e 	mov.w	r1, #284	; 0x11c
    333a:	e020      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    333c:	7228      	strb	r0, [r5, #8]
    333e:	6828      	ldr	r0, [r5, #0]
    3340:	b1a8      	cbz	r0, 336e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3342:	9900      	ldr	r1, [sp, #0]
    3344:	88ea      	ldrh	r2, [r5, #6]
    3346:	1cc9      	adds	r1, r1, #3
    3348:	f00d fc5e 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    334c:	4620      	mov	r0, r4
    334e:	f009 ffb1 	bl	d2b4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3352:	b178      	cbz	r0, 3374 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>
    3354:	4620      	mov	r0, r4
    3356:	2100      	movs	r1, #0
    3358:	f00a f8a0 	bl	d49c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    335c:	b168      	cbz	r0, 337a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa2>
    335e:	4809      	ldr	r0, [pc, #36]	; (3384 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xac>)
    3360:	7cc1      	ldrb	r1, [r0, #19]
    3362:	2900      	cmp	r1, #0
    3364:	d002      	beq.n	336c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x94>
    3366:	8a81      	ldrh	r1, [r0, #20]
    3368:	1e49      	subs	r1, r1, #1
    336a:	8281      	strh	r1, [r0, #20]
    336c:	bd38      	pop	{r3, r4, r5, pc}
    336e:	f240 1123 	movw	r1, #291	; 0x123
    3372:	e004      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3374:	f44f 7194 	mov.w	r1, #296	; 0x128
    3378:	e001      	b.n	337e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    337a:	f240 112d 	movw	r1, #301	; 0x12d
    337e:	2010      	movs	r0, #16
    3380:	f7fd ff3c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3384:	20000ef0 	.word	0x20000ef0
    3388:	b538      	push	{r3, r4, r5, lr}
    338a:	4602      	mov	r2, r0
    338c:	4b11      	ldr	r3, [pc, #68]	; (33d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>)
    338e:	2000      	movs	r0, #0
    3390:	7010      	strb	r0, [r2, #0]
    3392:	6858      	ldr	r0, [r3, #4]
    3394:	7a01      	ldrb	r1, [r0, #8]
    3396:	f88d 1000 	strb.w	r1, [sp]
    339a:	9900      	ldr	r1, [sp, #0]
    339c:	9100      	str	r1, [sp, #0]
    339e:	f89d 5000 	ldrb.w	r5, [sp]
    33a2:	2401      	movs	r4, #1
    33a4:	2d01      	cmp	r5, #1
    33a6:	d006      	beq.n	33b6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xde>
    33a8:	f3ef 8110 	mrs	r1, PRIMASK
    33ac:	b672      	cpsid	i
    33ae:	6805      	ldr	r5, [r0, #0]
    33b0:	605d      	str	r5, [r3, #4]
    33b2:	b111      	cbz	r1, 33ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe2>
    33b4:	e002      	b.n	33bc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe4>
    33b6:	2000      	movs	r0, #0
    33b8:	bd38      	pop	{r3, r4, r5, pc}
    33ba:	b662      	cpsie	i
    33bc:	7a01      	ldrb	r1, [r0, #8]
    33be:	f88d 1000 	strb.w	r1, [sp]
    33c2:	9900      	ldr	r1, [sp, #0]
    33c4:	9100      	str	r1, [sp, #0]
    33c6:	f89d 3000 	ldrb.w	r3, [sp]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d1f4      	bne.n	33b8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
    33ce:	7014      	strb	r4, [r2, #0]
    33d0:	bd38      	pop	{r3, r4, r5, pc}
    33d2:	0000      	.short	0x0000
    33d4:	20000f1c 	.word	0x20000f1c
    33d8:	b538      	push	{r3, r4, r5, lr}
    33da:	b1d0      	cbz	r0, 3412 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13a>
    33dc:	6041      	str	r1, [r0, #4]
    33de:	f100 0108 	add.w	r1, r0, #8
    33e2:	700a      	strb	r2, [r1, #0]
    33e4:	f3ef 8310 	mrs	r3, PRIMASK
    33e8:	b672      	cpsid	i
    33ea:	4c10      	ldr	r4, [pc, #64]	; (342c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x154>)
    33ec:	6004      	str	r4, [r0, #0]
    33ee:	1f21      	subs	r1, r4, #4
    33f0:	684a      	ldr	r2, [r1, #4]
    33f2:	b14a      	cbz	r2, 3408 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    33f4:	7a12      	ldrb	r2, [r2, #8]
    33f6:	f88d 2000 	strb.w	r2, [sp]
    33fa:	9a00      	ldr	r2, [sp, #0]
    33fc:	9200      	str	r2, [sp, #0]
    33fe:	f89d 5000 	ldrb.w	r5, [sp]
    3402:	2d01      	cmp	r5, #1
    3404:	d100      	bne.n	3408 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    3406:	600c      	str	r4, [r1, #0]
    3408:	680a      	ldr	r2, [r1, #0]
    340a:	6010      	str	r0, [r2, #0]
    340c:	6008      	str	r0, [r1, #0]
    340e:	b12b      	cbz	r3, 341c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    3410:	e005      	b.n	341e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x146>
    3412:	f240 21e2 	movw	r1, #738	; 0x2e2
    3416:	2010      	movs	r0, #16
    3418:	f7fd fef0 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    341c:	b662      	cpsie	i
    341e:	4804      	ldr	r0, [pc, #16]	; (3430 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    3420:	7800      	ldrb	r0, [r0, #0]
    3422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3426:	f009 b841 	b.w	c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    342a:	0000      	.short	0x0000
    342c:	20000f20 	.word	0x20000f20
    3430:	2000036e 	.word	0x2000036e
    3434:	4808      	ldr	r0, [pc, #32]	; (3458 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    3436:	b510      	push	{r4, lr}
    3438:	2100      	movs	r1, #0
    343a:	6141      	str	r1, [r0, #20]
    343c:	6181      	str	r1, [r0, #24]
    343e:	61c1      	str	r1, [r0, #28]
    3440:	6201      	str	r1, [r0, #32]
    3442:	2212      	movs	r2, #18
    3444:	f00d fc5a 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3448:	4803      	ldr	r0, [pc, #12]	; (3458 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    344a:	3014      	adds	r0, #20
    344c:	2101      	movs	r1, #1
    344e:	7301      	strb	r1, [r0, #12]
    3450:	1d01      	adds	r1, r0, #4
    3452:	6041      	str	r1, [r0, #4]
    3454:	6001      	str	r1, [r0, #0]
    3456:	bd10      	pop	{r4, pc}
    3458:	20000f08 	.word	0x20000f08

0000345c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    345c:	b4f0      	push	{r4, r5, r6, r7}
    345e:	8150      	strh	r0, [r2, #10]
    3460:	890c      	ldrh	r4, [r1, #8]
    3462:	4613      	mov	r3, r2
    3464:	8194      	strh	r4, [r2, #12]
    3466:	898a      	ldrh	r2, [r1, #12]
    3468:	81da      	strh	r2, [r3, #14]
    346a:	8948      	ldrh	r0, [r1, #10]
    346c:	8218      	strh	r0, [r3, #16]
    346e:	89cd      	ldrh	r5, [r1, #14]
    3470:	825d      	strh	r5, [r3, #18]
    3472:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3474:	42ae      	cmp	r6, r5
    3476:	d108      	bne.n	348a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3478:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    347a:	4285      	cmp	r5, r0
    347c:	d105      	bne.n	348a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    347e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    3480:	4295      	cmp	r5, r2
    3482:	d102      	bne.n	348a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3484:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    3486:	42a2      	cmp	r2, r4
    3488:	d001      	beq.n	348e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    348a:	2201      	movs	r2, #1
    348c:	e000      	b.n	3490 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    348e:	2200      	movs	r2, #0
    3490:	751a      	strb	r2, [r3, #20]
    3492:	8548      	strh	r0, [r1, #42]	; 0x2a
    3494:	8a58      	ldrh	r0, [r3, #18]
    3496:	85c8      	strh	r0, [r1, #46]	; 0x2e
    3498:	8998      	ldrh	r0, [r3, #12]
    349a:	8588      	strh	r0, [r1, #44]	; 0x2c
    349c:	89d8      	ldrh	r0, [r3, #14]
    349e:	8608      	strh	r0, [r1, #48]	; 0x30
    34a0:	bcf0      	pop	{r4, r5, r6, r7}
    34a2:	2214      	movs	r2, #20
    34a4:	4901      	ldr	r1, [pc, #4]	; (34ac <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    34a6:	4618      	mov	r0, r3
    34a8:	f00a bf2d 	b.w	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    34ac:	0000e4e3 	.word	0x0000e4e3

000034b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    34b0:	8150      	strh	r0, [r2, #10]
    34b2:	8a88      	ldrh	r0, [r1, #20]
    34b4:	8190      	strh	r0, [r2, #12]
    34b6:	8ac8      	ldrh	r0, [r1, #22]
    34b8:	81d0      	strh	r0, [r2, #14]
    34ba:	8b08      	ldrh	r0, [r1, #24]
    34bc:	8210      	strh	r0, [r2, #16]
    34be:	8b48      	ldrh	r0, [r1, #26]
    34c0:	4613      	mov	r3, r2
    34c2:	8250      	strh	r0, [r2, #18]
    34c4:	2221      	movs	r2, #33	; 0x21
    34c6:	4902      	ldr	r1, [pc, #8]	; (34d0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    34c8:	4618      	mov	r0, r3
    34ca:	f00a bf08 	b.w	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    34ce:	0000      	.short	0x0000
    34d0:	0000e519 	.word	0x0000e519

000034d4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    34d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d6:	f06f 021f 	mvn.w	r2, #31
    34da:	0c01      	lsrs	r1, r0, #16
    34dc:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    34e0:	251f      	movs	r5, #31
    34e2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34e6:	3854      	subs	r0, #84	; 0x54
    34e8:	d00d      	beq.n	3506 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34ea:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34ee:	3855      	subs	r0, #85	; 0x55
    34f0:	d009      	beq.n	3506 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34f2:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    34f6:	38aa      	subs	r0, #170	; 0xaa
    34f8:	d005      	beq.n	3506 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34fa:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    34fe:	38aa      	subs	r0, #170	; 0xaa
    3500:	d001      	beq.n	3506 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3502:	2001      	movs	r0, #1
    3504:	e000      	b.n	3508 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    3506:	2000      	movs	r0, #0
    3508:	2200      	movs	r2, #0
    350a:	4613      	mov	r3, r2
    350c:	ea4f 0402 	mov.w	r4, r2
    3510:	ea82 0701 	eor.w	r7, r2, r1
    3514:	43ff      	mvns	r7, r7
    3516:	431f      	orrs	r7, r3
    3518:	1c7f      	adds	r7, r7, #1
    351a:	d00f      	beq.n	353c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    351c:	f006 0701 	and.w	r7, r6, #1
    3520:	0852      	lsrs	r2, r2, #1
    3522:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    3526:	f005 0701 	and.w	r7, r5, #1
    352a:	085b      	lsrs	r3, r3, #1
    352c:	0876      	lsrs	r6, r6, #1
    352e:	086d      	lsrs	r5, r5, #1
    3530:	1c64      	adds	r4, r4, #1
    3532:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    3536:	2c16      	cmp	r4, #22
    3538:	d3ea      	bcc.n	3510 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    353c:	2000      	movs	r0, #0
    353e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003540 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3540:	b510      	push	{r4, lr}
    3542:	4804      	ldr	r0, [pc, #16]	; (3554 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3544:	f00b f84c 	bl	e5e0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    3548:	4802      	ldr	r0, [pc, #8]	; (3554 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    354a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    354e:	3008      	adds	r0, #8
    3550:	f00b b846 	b.w	e5e0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    3554:	200000b4 	.word	0x200000b4

00003558 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    355a:	f000 b809 	b.w	3570 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    355e:	0000      	.short	0x0000
    3560:	200000b4 	.word	0x200000b4

00003564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3564:	4801      	ldr	r0, [pc, #4]	; (356c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    3566:	f000 b803 	b.w	3570 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    356a:	0000      	.short	0x0000
    356c:	200000bc 	.word	0x200000bc
    3570:	b510      	push	{r4, lr}
    3572:	e9d0 2100 	ldrd	r2, r1, [r0]
    3576:	4b09      	ldr	r3, [pc, #36]	; (359c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    3578:	4c09      	ldr	r4, [pc, #36]	; (35a0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    357a:	4353      	muls	r3, r2
    357c:	4354      	muls	r4, r2
    357e:	4051      	eors	r1, r2
    3580:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3584:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    3588:	ea4f 41f1 	mov.w	r1, r1, ror #19
    358c:	e9c0 2100 	strd	r2, r1, [r0]
    3590:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3594:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3598:	4618      	mov	r0, r3
    359a:	bd10      	pop	{r4, pc}
    359c:	c6ef3760 	.word	0xc6ef3760
    35a0:	9e3779bb 	.word	0x9e3779bb

000035a4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    35a4:	b510      	push	{r4, lr}
    35a6:	6840      	ldr	r0, [r0, #4]
    35a8:	2200      	movs	r2, #0
    35aa:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    35ae:	3080      	adds	r0, #128	; 0x80
    35b0:	1d09      	adds	r1, r1, #4
    35b2:	07db      	lsls	r3, r3, #31
    35b4:	d001      	beq.n	35ba <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    35b6:	2001      	movs	r0, #1
    35b8:	bd10      	pop	{r4, pc}
    35ba:	790c      	ldrb	r4, [r1, #4]
    35bc:	680b      	ldr	r3, [r1, #0]
    35be:	4909      	ldr	r1, [pc, #36]	; (35e4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    35c0:	400b      	ands	r3, r1
    35c2:	f004 0107 	and.w	r1, r4, #7
    35c6:	66c3      	str	r3, [r0, #108]	; 0x6c
    35c8:	6701      	str	r1, [r0, #112]	; 0x70
    35ca:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    35ce:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
    35d2:	1c49      	adds	r1, r1, #1
    35d4:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    35d8:	68c1      	ldr	r1, [r0, #12]
    35da:	f041 0101 	orr.w	r1, r1, #1
    35de:	60c1      	str	r1, [r0, #12]
    35e0:	2000      	movs	r0, #0
    35e2:	bd10      	pop	{r4, pc}
    35e4:	3704492f 	.word	0x3704492f

000035e8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    35e8:	b510      	push	{r4, lr}
    35ea:	1d04      	adds	r4, r0, #4
    35ec:	f004 f8c8 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    35f0:	4a03      	ldr	r2, [pc, #12]	; (3600 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    35f2:	f001 0107 	and.w	r1, r1, #7
    35f6:	4010      	ands	r0, r2
    35f8:	6020      	str	r0, [r4, #0]
    35fa:	6061      	str	r1, [r4, #4]
    35fc:	bd10      	pop	{r4, pc}
    35fe:	0000      	.short	0x0000
    3600:	3704492f 	.word	0x3704492f

00003604 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3608:	7803      	ldrb	r3, [r0, #0]
    360a:	6840      	ldr	r0, [r0, #4]
    360c:	1d0f      	adds	r7, r1, #4
    360e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    3612:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    3616:	4606      	mov	r6, r0
    3618:	f04f 0800 	mov.w	r8, #0
    361c:	7f6a      	ldrb	r2, [r5, #29]
    361e:	2107      	movs	r1, #7
    3620:	4628      	mov	r0, r5
    3622:	f00a fac5 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3626:	b1b0      	cbz	r0, 3656 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x52>
    3628:	6838      	ldr	r0, [r7, #0]
    362a:	4a15      	ldr	r2, [pc, #84]	; (3680 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7c>)
    362c:	7939      	ldrb	r1, [r7, #4]
    362e:	4010      	ands	r0, r2
    3630:	f001 0107 	and.w	r1, r1, #7
    3634:	66e8      	str	r0, [r5, #108]	; 0x6c
    3636:	6729      	str	r1, [r5, #112]	; 0x70
    3638:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    363c:	f885 801d 	strb.w	r8, [r5, #29]
    3640:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3644:	4640      	mov	r0, r8
    3646:	f88d 1000 	strb.w	r1, [sp]
    364a:	9900      	ldr	r1, [sp, #0]
    364c:	9100      	str	r1, [sp, #0]
    364e:	f89d 1000 	ldrb.w	r1, [sp]
    3652:	b991      	cbnz	r1, 367a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x76>
    3654:	e002      	b.n	365c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    3656:	2001      	movs	r0, #1
    3658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    365c:	8831      	ldrh	r1, [r6, #0]
    365e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3662:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3666:	6839      	ldr	r1, [r7, #0]
    3668:	66e1      	str	r1, [r4, #108]	; 0x6c
    366a:	6879      	ldr	r1, [r7, #4]
    366c:	6721      	str	r1, [r4, #112]	; 0x70
    366e:	2208      	movs	r2, #8
    3670:	4904      	ldr	r1, [pc, #16]	; (3684 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x80>)
    3672:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3676:	f00a fe32 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    367a:	2000      	movs	r0, #0
    367c:	e7ec      	b.n	3658 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x54>
    367e:	0000      	.short	0x0000
    3680:	3704492f 	.word	0x3704492f
    3684:	0000e74d 	.word	0x0000e74d

00003688 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	1d0d      	adds	r5, r1, #4
    368c:	6844      	ldr	r4, [r0, #4]
    368e:	f004 f877 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3692:	4a06      	ldr	r2, [pc, #24]	; (36ac <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    3694:	4010      	ands	r0, r2
    3696:	f001 0207 	and.w	r2, r1, #7
    369a:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    369e:	4001      	ands	r1, r0
    36a0:	f361 0007 	bfi	r0, r1, #0, #8
    36a4:	6028      	str	r0, [r5, #0]
    36a6:	606a      	str	r2, [r5, #4]
    36a8:	bd70      	pop	{r4, r5, r6, pc}
    36aa:	0000      	.short	0x0000
    36ac:	3704492f 	.word	0x3704492f

000036b0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    36b0:	6841      	ldr	r1, [r0, #4]
    36b2:	b082      	sub	sp, #8
    36b4:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    36b8:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    36bc:	f88d 2000 	strb.w	r2, [sp]
    36c0:	9a00      	ldr	r2, [sp, #0]
    36c2:	9200      	str	r2, [sp, #0]
    36c4:	f89d 2000 	ldrb.w	r2, [sp]
    36c8:	2a00      	cmp	r2, #0
    36ca:	d10b      	bne.n	36e4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    36cc:	8809      	ldrh	r1, [r1, #0]
    36ce:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    36d2:	211a      	movs	r1, #26
    36d4:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    36d8:	2208      	movs	r2, #8
    36da:	4903      	ldr	r1, [pc, #12]	; (36e8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    36dc:	3060      	adds	r0, #96	; 0x60
    36de:	b002      	add	sp, #8
    36e0:	f00a bdfd 	b.w	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    36e4:	b002      	add	sp, #8
    36e6:	4770      	bx	lr
    36e8:	0000e74d 	.word	0x0000e74d

000036ec <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    36ec:	b570      	push	{r4, r5, r6, lr}
    36ee:	6844      	ldr	r4, [r0, #4]
    36f0:	460d      	mov	r5, r1
    36f2:	7803      	ldrb	r3, [r0, #0]
    36f4:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    36f8:	3480      	adds	r4, #128	; 0x80
    36fa:	2600      	movs	r6, #0
    36fc:	2108      	movs	r1, #8
    36fe:	4620      	mov	r0, r4
    3700:	f00a fa56 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3704:	b920      	cbnz	r0, 3710 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3706:	7b20      	ldrb	r0, [r4, #12]
    3708:	0780      	lsls	r0, r0, #30
    370a:	d501      	bpl.n	3710 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    370c:	2001      	movs	r0, #1
    370e:	bd70      	pop	{r4, r5, r6, pc}
    3710:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3714:	0780      	lsls	r0, r0, #30
    3716:	d419      	bmi.n	374c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    3718:	4628      	mov	r0, r5
    371a:	f00a fd7c 	bl	e216 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    371e:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3722:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3726:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    372a:	8868      	ldrh	r0, [r5, #2]
    372c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3730:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3734:	f040 0002 	orr.w	r0, r0, #2
    3738:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    373c:	07c0      	lsls	r0, r0, #31
    373e:	d009      	beq.n	3754 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    3740:	2203      	movs	r2, #3
    3742:	4911      	ldr	r1, [pc, #68]	; (3788 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3744:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    3748:	f00a fddd 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    374c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3750:	07c0      	lsls	r0, r0, #31
    3752:	d110      	bne.n	3776 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    3754:	68e0      	ldr	r0, [r4, #12]
    3756:	0781      	lsls	r1, r0, #30
    3758:	d503      	bpl.n	3762 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    375a:	214f      	movs	r1, #79	; 0x4f
    375c:	2040      	movs	r0, #64	; 0x40
    375e:	f7fd fd4d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3762:	f040 0002 	orr.w	r0, r0, #2
    3766:	60e0      	str	r0, [r4, #12]
    3768:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    376c:	1c40      	adds	r0, r0, #1
    376e:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3772:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    3776:	7f60      	ldrb	r0, [r4, #29]
    3778:	2801      	cmp	r0, #1
    377a:	d102      	bne.n	3782 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    377c:	7766      	strb	r6, [r4, #29]
    377e:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    3782:	2000      	movs	r0, #0
    3784:	bd70      	pop	{r4, r5, r6, pc}
    3786:	0000      	.short	0x0000
    3788:	0000e77b 	.word	0x0000e77b

0000378c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    378c:	4907      	ldr	r1, [pc, #28]	; (37ac <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    378e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3792:	1300      	asrs	r0, r0, #12
    3794:	7809      	ldrb	r1, [r1, #0]
    3796:	b240      	sxtb	r0, r0
    3798:	4249      	negs	r1, r1
    379a:	b249      	sxtb	r1, r1
    379c:	4408      	add	r0, r1
    379e:	f300 0007 	ssat	r0, #8, r0
    37a2:	2800      	cmp	r0, #0
    37a4:	dc00      	bgt.n	37a8 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    37a6:	2000      	movs	r0, #0
    37a8:	b2c0      	uxtb	r0, r0
    37aa:	4770      	bx	lr
    37ac:	200000c4 	.word	0x200000c4

000037b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    37b0:	4a04      	ldr	r2, [pc, #16]	; (37c4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    37b2:	6892      	ldr	r2, [r2, #8]
    37b4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    37b8:	434b      	muls	r3, r1
    37ba:	4342      	muls	r2, r0
    37bc:	eb03 3022 	add.w	r0, r3, r2, asr #12
    37c0:	4770      	bx	lr
    37c2:	0000      	.short	0x0000
    37c4:	200000c4 	.word	0x200000c4

000037c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    37c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ca:	6844      	ldr	r4, [r0, #4]
    37cc:	4606      	mov	r6, r0
    37ce:	f104 0580 	add.w	r5, r4, #128	; 0x80
    37d2:	f000 f87f 	bl	38d4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    37d6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    37da:	2901      	cmp	r1, #1
    37dc:	d11a      	bne.n	3814 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37de:	2800      	cmp	r0, #0
    37e0:	d018      	beq.n	3814 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37e2:	6870      	ldr	r0, [r6, #4]
    37e4:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    37e8:	f88d 1000 	strb.w	r1, [sp]
    37ec:	9900      	ldr	r1, [sp, #0]
    37ee:	9100      	str	r1, [sp, #0]
    37f0:	f89d 1000 	ldrb.w	r1, [sp]
    37f4:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    37f8:	2900      	cmp	r1, #0
    37fa:	d10b      	bne.n	3814 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37fc:	8821      	ldrh	r1, [r4, #0]
    37fe:	8141      	strh	r1, [r0, #10]
    3800:	7e69      	ldrb	r1, [r5, #25]
    3802:	7301      	strb	r1, [r0, #12]
    3804:	7ea9      	ldrb	r1, [r5, #26]
    3806:	7341      	strb	r1, [r0, #13]
    3808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    380c:	221f      	movs	r2, #31
    380e:	4902      	ldr	r1, [pc, #8]	; (3818 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3810:	f00a bd65 	b.w	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3816:	0000      	.short	0x0000
    3818:	0000e81d 	.word	0x0000e81d
    381c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3820:	4a0d      	ldr	r2, [pc, #52]	; (3858 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3822:	b510      	push	{r4, lr}
    3824:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3828:	1309      	asrs	r1, r1, #12
    382a:	1300      	asrs	r0, r0, #12
    382c:	b24b      	sxtb	r3, r1
    382e:	f992 4000 	ldrsb.w	r4, [r2]
    3832:	4240      	negs	r0, r0
    3834:	2100      	movs	r1, #0
    3836:	b240      	sxtb	r0, r0
    3838:	42a3      	cmp	r3, r4
    383a:	da02      	bge.n	3842 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    383c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3840:	e005      	b.n	384e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3842:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3846:	42a3      	cmp	r3, r4
    3848:	dd04      	ble.n	3854 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    384a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    384e:	4408      	add	r0, r1
    3850:	f300 0107 	ssat	r1, #8, r0
    3854:	4608      	mov	r0, r1
    3856:	bd10      	pop	{r4, pc}
    3858:	200000c4 	.word	0x200000c4
    385c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3860:	2200      	movs	r2, #0
    3862:	704a      	strb	r2, [r1, #1]
    3864:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3868:	700a      	strb	r2, [r1, #0]
    386a:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    386e:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3872:	f00b ffee 	bl	f852 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3876:	4606      	mov	r6, r0
    3878:	68a0      	ldr	r0, [r4, #8]
    387a:	f7ff ffcf 	bl	381c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    387e:	0007      	movs	r7, r0
    3880:	d021      	beq.n	38c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3882:	4620      	mov	r0, r4
    3884:	f00a ffd2 	bl	e82c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3888:	2800      	cmp	r0, #0
    388a:	d01c      	beq.n	38c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    388c:	8828      	ldrh	r0, [r5, #0]
    388e:	4669      	mov	r1, sp
    3890:	f00a f964 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3894:	b118      	cbz	r0, 389e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3896:	2189      	movs	r1, #137	; 0x89
    3898:	207a      	movs	r0, #122	; 0x7a
    389a:	f7fd fcaf 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    389e:	1c76      	adds	r6, r6, #1
    38a0:	b2f1      	uxtb	r1, r6
    38a2:	2302      	movs	r3, #2
    38a4:	463a      	mov	r2, r7
    38a6:	4668      	mov	r0, sp
    38a8:	f00b fff2 	bl	f890 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    38ac:	2800      	cmp	r0, #0
    38ae:	d10a      	bne.n	38c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    38b0:	4806      	ldr	r0, [pc, #24]	; (38cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    38b2:	4907      	ldr	r1, [pc, #28]	; (38d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    38b4:	7900      	ldrb	r0, [r0, #4]
    38b6:	fba0 6501 	umull	r6, r5, r0, r1
    38ba:	f007 fbe9 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    38be:	1980      	adds	r0, r0, r6
    38c0:	4169      	adcs	r1, r5
    38c2:	e9c4 0100 	strd	r0, r1, [r4]
    38c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    38ca:	0000      	.short	0x0000
    38cc:	200000c4 	.word	0x200000c4
    38d0:	000f4240 	.word	0x000f4240
    38d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d8:	4607      	mov	r7, r0
    38da:	f7ff faf1 	bl	2ec0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    38de:	687c      	ldr	r4, [r7, #4]
    38e0:	4605      	mov	r5, r0
    38e2:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    38e6:	3480      	adds	r4, #128	; 0x80
    38e8:	287f      	cmp	r0, #127	; 0x7f
    38ea:	d03c      	beq.n	3966 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    38ec:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    38f0:	687e      	ldr	r6, [r7, #4]
    38f2:	76a0      	strb	r0, [r4, #26]
    38f4:	4629      	mov	r1, r5
    38f6:	68a0      	ldr	r0, [r4, #8]
    38f8:	f7ff ff5a 	bl	37b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    38fc:	60a0      	str	r0, [r4, #8]
    38fe:	481b      	ldr	r0, [pc, #108]	; (396c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3900:	7940      	ldrb	r0, [r0, #5]
    3902:	b190      	cbz	r0, 392a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3904:	6878      	ldr	r0, [r7, #4]
    3906:	f100 0880 	add.w	r8, r0, #128	; 0x80
    390a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    390e:	f7ff ff85 	bl	381c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3912:	b150      	cbz	r0, 392a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3914:	4640      	mov	r0, r8
    3916:	f00a ff89 	bl	e82c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    391a:	b130      	cbz	r0, 392a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    391c:	6878      	ldr	r0, [r7, #4]
    391e:	2231      	movs	r2, #49	; 0x31
    3920:	4913      	ldr	r1, [pc, #76]	; (3970 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3922:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3926:	f00a fcee 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    392a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    392e:	2100      	movs	r1, #0
    3930:	1a28      	subs	r0, r5, r0
    3932:	d500      	bpl.n	3936 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3934:	4240      	negs	r0, r0
    3936:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    393a:	4282      	cmp	r2, r0
    393c:	dc10      	bgt.n	3960 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    393e:	2aff      	cmp	r2, #255	; 0xff
    3940:	d00e      	beq.n	3960 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3942:	7f20      	ldrb	r0, [r4, #28]
    3944:	1c40      	adds	r0, r0, #1
    3946:	b2c0      	uxtb	r0, r0
    3948:	7720      	strb	r0, [r4, #28]
    394a:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    394e:	4290      	cmp	r0, r2
    3950:	d802      	bhi.n	3958 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3952:	7ee0      	ldrb	r0, [r4, #27]
    3954:	287f      	cmp	r0, #127	; 0x7f
    3956:	d103      	bne.n	3960 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3958:	2000      	movs	r0, #0
    395a:	76e5      	strb	r5, [r4, #27]
    395c:	7720      	strb	r0, [r4, #28]
    395e:	2101      	movs	r1, #1
    3960:	4608      	mov	r0, r1
    3962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3966:	2000      	movs	r0, #0
    3968:	e7fb      	b.n	3962 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    396a:	0000      	.short	0x0000
    396c:	200000c4 	.word	0x200000c4
    3970:	0000385d 	.word	0x0000385d

00003974 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3974:	b570      	push	{r4, r5, r6, lr}
    3976:	4604      	mov	r4, r0
    3978:	7c00      	ldrb	r0, [r0, #16]
    397a:	b300      	cbz	r0, 39be <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    397c:	2802      	cmp	r0, #2
    397e:	d01e      	beq.n	39be <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3980:	f05f 0001 	movs.w	r0, #1
    3984:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3988:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    398c:	460d      	mov	r5, r1
    398e:	b1c0      	cbz	r0, 39c2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3990:	7de0      	ldrb	r0, [r4, #23]
    3992:	b1f0      	cbz	r0, 39d2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3994:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3998:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    399c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    39a0:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    39a4:	7c20      	ldrb	r0, [r4, #16]
    39a6:	f00a ff6a 	bl	e87e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    39aa:	7620      	strb	r0, [r4, #24]
    39ac:	2008      	movs	r0, #8
    39ae:	7660      	strb	r0, [r4, #25]
    39b0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    39b4:	4629      	mov	r1, r5
    39b6:	f00a ff4e 	bl	e856 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    39ba:	b9a8      	cbnz	r0, 39e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    39bc:	e00e      	b.n	39dc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    39be:	2000      	movs	r0, #0
    39c0:	e7e0      	b.n	3984 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    39c2:	2000      	movs	r0, #0
    39c4:	f7fe fab8 	bl	1f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    39c8:	2800      	cmp	r0, #0
    39ca:	d1eb      	bne.n	39a4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    39cc:	f240 41b9 	movw	r1, #1209	; 0x4b9
    39d0:	e001      	b.n	39d6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    39d2:	f240 41bd 	movw	r1, #1213	; 0x4bd
    39d6:	202d      	movs	r0, #45	; 0x2d
    39d8:	f7fd fc10 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39dc:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    39e0:	4629      	mov	r1, r5
    39e2:	f00a ff41 	bl	e868 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    39e6:	b100      	cbz	r0, 39ea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    39e8:	2001      	movs	r0, #1
    39ea:	76a0      	strb	r0, [r4, #26]
    39ec:	7e20      	ldrb	r0, [r4, #24]
    39ee:	b130      	cbz	r0, 39fe <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    39f0:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    39f4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    39f8:	f00a f87c 	bl	daf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    39fc:	7660      	strb	r0, [r4, #25]
    39fe:	f7ff f87d 	bl	2afc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3a02:	490c      	ldr	r1, [pc, #48]	; (3a34 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3a04:	fba0 2301 	umull	r2, r3, r0, r1
    3a08:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3a0c:	f00b f8bc 	bl	eb88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    3a10:	2100      	movs	r1, #0
    3a12:	4620      	mov	r0, r4
    3a14:	f00b f871 	bl	eafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    3a18:	2000      	movs	r0, #0
    3a1a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3a1e:	78a0      	ldrb	r0, [r4, #2]
    3a20:	0740      	lsls	r0, r0, #29
    3a22:	d505      	bpl.n	3a30 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3a24:	4620      	mov	r0, r4
    3a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a2a:	2100      	movs	r1, #0
    3a2c:	f000 bdd0 	b.w	45d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d0>
    3a30:	bd70      	pop	{r4, r5, r6, pc}
    3a32:	0000      	.short	0x0000
    3a34:	000f4240 	.word	0x000f4240

00003a38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3a38:	b530      	push	{r4, r5, lr}
    3a3a:	460c      	mov	r4, r1
    3a3c:	b08d      	sub	sp, #52	; 0x34
    3a3e:	4605      	mov	r5, r0
    3a40:	4601      	mov	r1, r0
    3a42:	2224      	movs	r2, #36	; 0x24
    3a44:	a802      	add	r0, sp, #8
    3a46:	f00d f8df 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3a4a:	a80b      	add	r0, sp, #44	; 0x2c
    3a4c:	f00b f8f9 	bl	ec42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3a50:	7aa0      	ldrb	r0, [r4, #10]
    3a52:	f88d 0018 	strb.w	r0, [sp, #24]
    3a56:	7820      	ldrb	r0, [r4, #0]
    3a58:	f88d 0008 	strb.w	r0, [sp, #8]
    3a5c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3a60:	f8ad 0000 	strh.w	r0, [sp]
    3a64:	f89d 0000 	ldrb.w	r0, [sp]
    3a68:	f000 0101 	and.w	r1, r0, #1
    3a6c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3a70:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3a74:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3a78:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3a7c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3a80:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3a84:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3a88:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3a8c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3a90:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3a94:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3a98:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3a9c:	f8ad 000a 	strh.w	r0, [sp, #10]
    3aa0:	7d20      	ldrb	r0, [r4, #20]
    3aa2:	2801      	cmp	r0, #1
    3aa4:	d006      	beq.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3aa6:	2802      	cmp	r0, #2
    3aa8:	d004      	beq.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3aaa:	f240 21ea 	movw	r1, #746	; 0x2ea
    3aae:	2006      	movs	r0, #6
    3ab0:	f7fd fba4 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ab4:	f88d 000c 	strb.w	r0, [sp, #12]
    3ab8:	7a61      	ldrb	r1, [r4, #9]
    3aba:	a80b      	add	r0, sp, #44	; 0x2c
    3abc:	f00b f8a8 	bl	ec10 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3ac0:	7d20      	ldrb	r0, [r4, #20]
    3ac2:	2101      	movs	r1, #1
    3ac4:	2802      	cmp	r0, #2
    3ac6:	d102      	bne.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3ac8:	7d60      	ldrb	r0, [r4, #21]
    3aca:	1c40      	adds	r0, r0, #1
    3acc:	b2c1      	uxtb	r1, r0
    3ace:	7ea0      	ldrb	r0, [r4, #26]
    3ad0:	1c40      	adds	r0, r0, #1
    3ad2:	b2c2      	uxtb	r2, r0
    3ad4:	a80b      	add	r0, sp, #44	; 0x2c
    3ad6:	f00b f862 	bl	eb9e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3ada:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3ade:	0700      	lsls	r0, r0, #28
    3ae0:	d501      	bpl.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3ae2:	2000      	movs	r0, #0
    3ae4:	e020      	b.n	3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>
    3ae6:	a80b      	add	r0, sp, #44	; 0x2c
    3ae8:	f00b f86b 	bl	ebc2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3aec:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3af0:	2228      	movs	r2, #40	; 0x28
    3af2:	f000 fe11 	bl	4718 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3af6:	f240 2171 	movw	r1, #625	; 0x271
    3afa:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    3afe:	fbb0 f0f1 	udiv	r0, r0, r1
    3b02:	4348      	muls	r0, r1
    3b04:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3b08:	f240 2371 	movw	r3, #625	; 0x271
    3b0c:	0a0a      	lsrs	r2, r1, #8
    3b0e:	f240 2171 	movw	r1, #625	; 0x271
    3b12:	434a      	muls	r2, r1
    3b14:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3b18:	0a09      	lsrs	r1, r1, #8
    3b1a:	4359      	muls	r1, r3
    3b1c:	4290      	cmp	r0, r2
    3b1e:	d801      	bhi.n	3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>
    3b20:	9204      	str	r2, [sp, #16]
    3b22:	e004      	b.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
    3b24:	4288      	cmp	r0, r1
    3b26:	d801      	bhi.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
    3b28:	9004      	str	r0, [sp, #16]
    3b2a:	e000      	b.n	3b2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x96>
    3b2c:	9104      	str	r1, [sp, #16]
    3b2e:	7ca0      	ldrb	r0, [r4, #18]
    3b30:	f88d 0017 	strb.w	r0, [sp, #23]
    3b34:	7e20      	ldrb	r0, [r4, #24]
    3b36:	2801      	cmp	r0, #1
    3b38:	d000      	beq.n	3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>
    3b3a:	2000      	movs	r0, #0
    3b3c:	f88d 0014 	strb.w	r0, [sp, #20]
    3b40:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3b42:	f009 fe3f 	bl	d7c4 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3b46:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3b48:	f009 fee4 	bl	d914 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3b4c:	2224      	movs	r2, #36	; 0x24
    3b4e:	a902      	add	r1, sp, #8
    3b50:	4628      	mov	r0, r5
    3b52:	f00d f859 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b56:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3b58:	62a8      	str	r0, [r5, #40]	; 0x28
    3b5a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3b5e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3b60:	7ae0      	ldrb	r0, [r4, #11]
    3b62:	b168      	cbz	r0, 3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
    3b64:	2802      	cmp	r0, #2
    3b66:	d00b      	beq.n	3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
    3b68:	f05f 0001 	movs.w	r0, #1
    3b6c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3b70:	68e0      	ldr	r0, [r4, #12]
    3b72:	65a8      	str	r0, [r5, #88]	; 0x58
    3b74:	8a20      	ldrh	r0, [r4, #16]
    3b76:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3b7a:	b00d      	add	sp, #52	; 0x34
    3b7c:	2000      	movs	r0, #0
    3b7e:	bd30      	pop	{r4, r5, pc}
    3b80:	2000      	movs	r0, #0
    3b82:	e7f3      	b.n	3b6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd4>

00003b84 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3b84:	4a0a      	ldr	r2, [pc, #40]	; (3bb0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3b86:	b510      	push	{r4, lr}
    3b88:	2100      	movs	r1, #0
    3b8a:	7011      	strb	r1, [r2, #0]
    3b8c:	4c09      	ldr	r4, [pc, #36]	; (3bb4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3b8e:	6060      	str	r0, [r4, #4]
    3b90:	f000 f822 	bl	3bd8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3b94:	b110      	cbz	r0, 3b9c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3b96:	f240 312d 	movw	r1, #813	; 0x32d
    3b9a:	e004      	b.n	3ba6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3b9c:	68a0      	ldr	r0, [r4, #8]
    3b9e:	2800      	cmp	r0, #0
    3ba0:	d104      	bne.n	3bac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3ba2:	f44f 714c 	mov.w	r1, #816	; 0x330
    3ba6:	202d      	movs	r0, #45	; 0x2d
    3ba8:	f7fd fb28 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bac:	bd10      	pop	{r4, pc}
    3bae:	0000      	.short	0x0000
    3bb0:	20000f2c 	.word	0x20000f2c
    3bb4:	200000d0 	.word	0x200000d0

00003bb8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3bb8:	4902      	ldr	r1, [pc, #8]	; (3bc4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3bba:	4801      	ldr	r0, [pc, #4]	; (3bc0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3bbc:	6088      	str	r0, [r1, #8]
    3bbe:	4770      	bx	lr
    3bc0:	00004700 	.word	0x00004700
    3bc4:	200000d0 	.word	0x200000d0

00003bc8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3bc8:	4902      	ldr	r1, [pc, #8]	; (3bd4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3bca:	6008      	str	r0, [r1, #0]
    3bcc:	6889      	ldr	r1, [r1, #8]
    3bce:	6809      	ldr	r1, [r1, #0]
    3bd0:	4708      	bx	r1
    3bd2:	0000      	.short	0x0000
    3bd4:	200000d0 	.word	0x200000d0

00003bd8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3bd8:	4808      	ldr	r0, [pc, #32]	; (3bfc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3bda:	b510      	push	{r4, lr}
    3bdc:	7800      	ldrb	r0, [r0, #0]
    3bde:	b110      	cbz	r0, 3be6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3be0:	240c      	movs	r4, #12
    3be2:	4620      	mov	r0, r4
    3be4:	bd10      	pop	{r4, pc}
    3be6:	2400      	movs	r4, #0
    3be8:	2218      	movs	r2, #24
    3bea:	4621      	mov	r1, r4
    3bec:	4803      	ldr	r0, [pc, #12]	; (3bfc <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3bee:	f00d f885 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3bf2:	f003 ffe7 	bl	7bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3bf6:	f003 fe0b 	bl	7810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3bfa:	e7f2      	b.n	3be2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3bfc:	20000f2c 	.word	0x20000f2c

00003c00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3c00:	4904      	ldr	r1, [pc, #16]	; (3c14 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3c02:	b510      	push	{r4, lr}
    3c04:	7809      	ldrb	r1, [r1, #0]
    3c06:	2901      	cmp	r1, #1
    3c08:	d101      	bne.n	3c0e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3c0a:	f000 fbb5 	bl	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    3c0e:	2000      	movs	r0, #0
    3c10:	bd10      	pop	{r4, pc}
    3c12:	0000      	.short	0x0000
    3c14:	20000f2c 	.word	0x20000f2c

00003c18 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3c18:	4902      	ldr	r1, [pc, #8]	; (3c24 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3c1a:	4801      	ldr	r0, [pc, #4]	; (3c20 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3c1c:	6008      	str	r0, [r1, #0]
    3c1e:	4770      	bx	lr
    3c20:	000044a5 	.word	0x000044a5
    3c24:	200000dc 	.word	0x200000dc

00003c28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3c28:	b510      	push	{r4, lr}
    3c2a:	4604      	mov	r4, r0
    3c2c:	7880      	ldrb	r0, [r0, #2]
    3c2e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3c32:	b158      	cbz	r0, 3c4c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3c34:	233c      	movs	r3, #60	; 0x3c
    3c36:	22ff      	movs	r2, #255	; 0xff
    3c38:	4620      	mov	r0, r4
    3c3a:	69e1      	ldr	r1, [r4, #28]
    3c3c:	f000 fbc2 	bl	43c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c4>
    3c40:	2211      	movs	r2, #17
    3c42:	4904      	ldr	r1, [pc, #16]	; (3c54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3c44:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3c48:	f00a fb49 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3c4c:	2001      	movs	r0, #1
    3c4e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3c52:	bd10      	pop	{r4, pc}
    3c54:	0000ea93 	.word	0x0000ea93
    3c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c5c:	000f      	movs	r7, r1
    3c5e:	4604      	mov	r4, r0
    3c60:	d023      	beq.n	3caa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3c62:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3c66:	4605      	mov	r5, r0
    3c68:	f00a ffd4 	bl	ec14 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3c6c:	b9b0      	cbnz	r0, 3c9c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3c6e:	78a0      	ldrb	r0, [r4, #2]
    3c70:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3c74:	b350      	cbz	r0, 3ccc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3c76:	4628      	mov	r0, r5
    3c78:	f00a ffa3 	bl	ebc2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c7c:	4606      	mov	r6, r0
    3c7e:	4628      	mov	r0, r5
    3c80:	f00a ffc8 	bl	ec14 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3c84:	1a30      	subs	r0, r6, r0
    3c86:	b2c0      	uxtb	r0, r0
    3c88:	f00b f819 	bl	ecbe <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3c8c:	4601      	mov	r1, r0
    3c8e:	4835      	ldr	r0, [pc, #212]	; (3d64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3c90:	6842      	ldr	r2, [r0, #4]
    3c92:	4411      	add	r1, r2
    3c94:	6041      	str	r1, [r0, #4]
    3c96:	4628      	mov	r0, r5
    3c98:	f00a ffda 	bl	ec50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3c9c:	4628      	mov	r0, r5
    3c9e:	f00a ff9c 	bl	ebda <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3ca2:	4601      	mov	r1, r0
    3ca4:	4620      	mov	r0, r4
    3ca6:	f00a ff64 	bl	eb72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3caa:	4d2f      	ldr	r5, [pc, #188]	; (3d68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3cac:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3cb0:	2100      	movs	r1, #0
    3cb2:	6868      	ldr	r0, [r5, #4]
    3cb4:	8001      	strh	r1, [r0, #0]
    3cb6:	f00a fec2 	bl	ea3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3cba:	8860      	ldrh	r0, [r4, #2]
    3cbc:	2813      	cmp	r0, #19
    3cbe:	d013      	beq.n	3ce8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3cc0:	dc09      	bgt.n	3cd6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3cc2:	2810      	cmp	r0, #16
    3cc4:	d036      	beq.n	3d34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3cc6:	2812      	cmp	r0, #18
    3cc8:	d109      	bne.n	3cde <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3cca:	e031      	b.n	3d30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3ccc:	4620      	mov	r0, r4
    3cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3cd2:	f000 bb51 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    3cd6:	2815      	cmp	r0, #21
    3cd8:	d00f      	beq.n	3cfa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3cda:	281d      	cmp	r0, #29
    3cdc:	d00d      	beq.n	3cfa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3cde:	f240 6172 	movw	r1, #1650	; 0x672
    3ce2:	202d      	movs	r0, #45	; 0x2d
    3ce4:	f7fd fa8a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ce8:	2100      	movs	r1, #0
    3cea:	6868      	ldr	r0, [r5, #4]
    3cec:	f00a f97e 	bl	dfec <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3cf0:	2101      	movs	r1, #1
    3cf2:	6868      	ldr	r0, [r5, #4]
    3cf4:	f00a fea3 	bl	ea3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3cf8:	e020      	b.n	3d3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3cfa:	2101      	movs	r1, #1
    3cfc:	6868      	ldr	r0, [r5, #4]
    3cfe:	f00a f975 	bl	dfec <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3d02:	2101      	movs	r1, #1
    3d04:	6868      	ldr	r0, [r5, #4]
    3d06:	f00a fe9a 	bl	ea3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3d0a:	b136      	cbz	r6, 3d1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3d0c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3d10:	6868      	ldr	r0, [r5, #4]
    3d12:	f00a f986 	bl	e022 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3d16:	2101      	movs	r1, #1
    3d18:	e006      	b.n	3d28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3d1a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3d1e:	6868      	ldr	r0, [r5, #4]
    3d20:	f00a f97f 	bl	e022 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3d24:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3d28:	6868      	ldr	r0, [r5, #4]
    3d2a:	f00a f980 	bl	e02e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3d2e:	e005      	b.n	3d3c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3d30:	2106      	movs	r1, #6
    3d32:	e000      	b.n	3d36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3d34:	2102      	movs	r1, #2
    3d36:	6868      	ldr	r0, [r5, #4]
    3d38:	f00a f958 	bl	dfec <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3d3c:	4620      	mov	r0, r4
    3d3e:	f000 fcbd 	bl	46bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6bc>
    3d42:	8860      	ldrh	r0, [r4, #2]
    3d44:	281d      	cmp	r0, #29
    3d46:	d007      	beq.n	3d58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3d48:	2815      	cmp	r0, #21
    3d4a:	d005      	beq.n	3d58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3d4c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3d50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3d52:	6868      	ldr	r0, [r5, #4]
    3d54:	f00a f93a 	bl	dfcc <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3d58:	4639      	mov	r1, r7
    3d5a:	4620      	mov	r0, r4
    3d5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3d60:	f000 b9f6 	b.w	4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    3d64:	20000f2c 	.word	0x20000f2c
    3d68:	200000d0 	.word	0x200000d0
    3d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d70:	4d2f      	ldr	r5, [pc, #188]	; (3e30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3d72:	4680      	mov	r8, r0
    3d74:	7828      	ldrb	r0, [r5, #0]
    3d76:	2802      	cmp	r0, #2
    3d78:	d005      	beq.n	3d86 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3d7a:	7828      	ldrb	r0, [r5, #0]
    3d7c:	2803      	cmp	r0, #3
    3d7e:	d002      	beq.n	3d86 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3d80:	f640 512d 	movw	r1, #3373	; 0xd2d
    3d84:	e02b      	b.n	3dde <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3d86:	4c2b      	ldr	r4, [pc, #172]	; (3e34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3d88:	6826      	ldr	r6, [r4, #0]
    3d8a:	7b30      	ldrb	r0, [r6, #12]
    3d8c:	b118      	cbz	r0, 3d96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3d8e:	f7ff f897 	bl	2ec0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3d92:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3d96:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3d9a:	2700      	movs	r7, #0
    3d9c:	f1b8 0f00 	cmp.w	r8, #0
    3da0:	f89c 0000 	ldrb.w	r0, [ip]
    3da4:	f000 060f 	and.w	r6, r0, #15
    3da8:	d027      	beq.n	3dfa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3daa:	6821      	ldr	r1, [r4, #0]
    3dac:	09c0      	lsrs	r0, r0, #7
    3dae:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3db2:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3db6:	f10c 0109 	add.w	r1, ip, #9
    3dba:	f009 fe03 	bl	d9c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3dbe:	b1e0      	cbz	r0, 3dfa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3dc0:	4639      	mov	r1, r7
    3dc2:	6860      	ldr	r0, [r4, #4]
    3dc4:	f00a f8f2 	bl	dfac <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3dc8:	b1b8      	cbz	r0, 3dfa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3dca:	782a      	ldrb	r2, [r5, #0]
    3dcc:	6820      	ldr	r0, [r4, #0]
    3dce:	4631      	mov	r1, r6
    3dd0:	2a02      	cmp	r2, #2
    3dd2:	d007      	beq.n	3de4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3dd4:	782a      	ldrb	r2, [r5, #0]
    3dd6:	2a03      	cmp	r2, #3
    3dd8:	d004      	beq.n	3de4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3dda:	f640 5106 	movw	r1, #3334	; 0xd06
    3dde:	202d      	movs	r0, #45	; 0x2d
    3de0:	f7fd fa0c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3de4:	68a2      	ldr	r2, [r4, #8]
    3de6:	782b      	ldrb	r3, [r5, #0]
    3de8:	6952      	ldr	r2, [r2, #20]
    3dea:	f06f 0607 	mvn.w	r6, #7
    3dee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3df2:	58d2      	ldr	r2, [r2, r3]
    3df4:	4790      	blx	r2
    3df6:	4606      	mov	r6, r0
    3df8:	e000      	b.n	3dfc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3dfa:	2601      	movs	r6, #1
    3dfc:	7ba8      	ldrb	r0, [r5, #14]
    3dfe:	b118      	cbz	r0, 3e08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3e00:	f003 fee0 	bl	7bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3e04:	f003 fd04 	bl	7810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3e08:	2e00      	cmp	r6, #0
    3e0a:	d00f      	beq.n	3e2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3e0c:	6820      	ldr	r0, [r4, #0]
    3e0e:	f00a ff6c 	bl	ecea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3e12:	b130      	cbz	r0, 3e22 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3e14:	f003 fefe 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e18:	68a0      	ldr	r0, [r4, #8]
    3e1a:	6880      	ldr	r0, [r0, #8]
    3e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e20:	4700      	bx	r0
    3e22:	6820      	ldr	r0, [r4, #0]
    3e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e28:	f000 baa6 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    3e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e30:	20000f2c 	.word	0x20000f2c
    3e34:	200000d0 	.word	0x200000d0
    3e38:	b510      	push	{r4, lr}
    3e3a:	2903      	cmp	r1, #3
    3e3c:	d002      	beq.n	3e44 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3e3e:	2905      	cmp	r1, #5
    3e40:	d10a      	bne.n	3e58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3e42:	e002      	b.n	3e4a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3e44:	f000 fb92 	bl	456c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56c>
    3e48:	e003      	b.n	3e52 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3e4a:	4904      	ldr	r1, [pc, #16]	; (3e5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3e4c:	6809      	ldr	r1, [r1, #0]
    3e4e:	b109      	cbz	r1, 3e54 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3e50:	4788      	blx	r1
    3e52:	b108      	cbz	r0, 3e58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3e54:	2000      	movs	r0, #0
    3e56:	bd10      	pop	{r4, pc}
    3e58:	2001      	movs	r0, #1
    3e5a:	bd10      	pop	{r4, pc}
    3e5c:	200000dc 	.word	0x200000dc
    3e60:	4a09      	ldr	r2, [pc, #36]	; (3e88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3e62:	0003      	movs	r3, r0
    3e64:	6810      	ldr	r0, [r2, #0]
    3e66:	d001      	beq.n	3e6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3e68:	f000 ba86 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    3e6c:	2900      	cmp	r1, #0
    3e6e:	d009      	beq.n	3e84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3e70:	6891      	ldr	r1, [r2, #8]
    3e72:	4a06      	ldr	r2, [pc, #24]	; (3e8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3e74:	6909      	ldr	r1, [r1, #16]
    3e76:	7812      	ldrb	r2, [r2, #0]
    3e78:	f06f 030f 	mvn.w	r3, #15
    3e7c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3e80:	5889      	ldr	r1, [r1, r2]
    3e82:	4708      	bx	r1
    3e84:	4770      	bx	lr
    3e86:	0000      	.short	0x0000
    3e88:	200000d0 	.word	0x200000d0
    3e8c:	20000f2c 	.word	0x20000f2c
    3e90:	b570      	push	{r4, r5, r6, lr}
    3e92:	4604      	mov	r4, r0
    3e94:	8840      	ldrh	r0, [r0, #2]
    3e96:	2810      	cmp	r0, #16
    3e98:	d019      	beq.n	3ece <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2a6>
    3e9a:	4d10      	ldr	r5, [pc, #64]	; (3edc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b4>)
    3e9c:	7ba8      	ldrb	r0, [r5, #14]
    3e9e:	b120      	cbz	r0, 3eaa <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3ea0:	f003 fcd6 	bl	7850 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3ea4:	2040      	movs	r0, #64	; 0x40
    3ea6:	f003 fe9b 	bl	7be0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3eaa:	480d      	ldr	r0, [pc, #52]	; (3ee0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2b8>)
    3eac:	6840      	ldr	r0, [r0, #4]
    3eae:	f004 f91d 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3eb2:	78a0      	ldrb	r0, [r4, #2]
    3eb4:	0740      	lsls	r0, r0, #29
    3eb6:	d404      	bmi.n	3ec2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3eb8:	2100      	movs	r1, #0
    3eba:	7922      	ldrb	r2, [r4, #4]
    3ebc:	4608      	mov	r0, r1
    3ebe:	f004 f99d 	bl	81fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3ec2:	2000      	movs	r0, #0
    3ec4:	f003 ffc8 	bl	7e58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    3ec8:	2002      	movs	r0, #2
    3eca:	7028      	strb	r0, [r5, #0]
    3ecc:	bd70      	pop	{r4, r5, r6, pc}
    3ece:	4620      	mov	r0, r4
    3ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ed4:	2101      	movs	r1, #1
    3ed6:	f7ff bebf 	b.w	3c58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    3eda:	0000      	.short	0x0000
    3edc:	20000f2c 	.word	0x20000f2c
    3ee0:	200000d0 	.word	0x200000d0
    3ee4:	b510      	push	{r4, lr}
    3ee6:	4c12      	ldr	r4, [pc, #72]	; (3f30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x308>)
    3ee8:	6820      	ldr	r0, [r4, #0]
    3eea:	f000 f825 	bl	3f38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    3eee:	6820      	ldr	r0, [r4, #0]
    3ef0:	f00a fefb 	bl	ecea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3ef4:	2800      	cmp	r0, #0
    3ef6:	6820      	ldr	r0, [r4, #0]
    3ef8:	d00b      	beq.n	3f12 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2ea>
    3efa:	490e      	ldr	r1, [pc, #56]	; (3f34 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30c>)
    3efc:	780a      	ldrb	r2, [r1, #0]
    3efe:	2a02      	cmp	r2, #2
    3f00:	d00b      	beq.n	3f1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3f02:	780a      	ldrb	r2, [r1, #0]
    3f04:	2a03      	cmp	r2, #3
    3f06:	d008      	beq.n	3f1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2f2>
    3f08:	f640 4137 	movw	r1, #3127	; 0xc37
    3f0c:	202d      	movs	r0, #45	; 0x2d
    3f0e:	f7fd f975 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f16:	f000 ba2f 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    3f1a:	68a2      	ldr	r2, [r4, #8]
    3f1c:	7809      	ldrb	r1, [r1, #0]
    3f1e:	68d2      	ldr	r2, [r2, #12]
    3f20:	f06f 0307 	mvn.w	r3, #7
    3f24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    3f28:	5851      	ldr	r1, [r2, r1]
    3f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f2e:	4708      	bx	r1
    3f30:	200000d0 	.word	0x200000d0
    3f34:	20000f2c 	.word	0x20000f2c
    3f38:	b510      	push	{r4, lr}
    3f3a:	7b01      	ldrb	r1, [r0, #12]
    3f3c:	b121      	cbz	r1, 3f48 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x320>
    3f3e:	4604      	mov	r4, r0
    3f40:	f7fe ffbe 	bl	2ec0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f44:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3f48:	4805      	ldr	r0, [pc, #20]	; (3f60 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x338>)
    3f4a:	7b80      	ldrb	r0, [r0, #14]
    3f4c:	2800      	cmp	r0, #0
    3f4e:	d005      	beq.n	3f5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x334>
    3f50:	f003 fe38 	bl	7bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f58:	f003 bc5a 	b.w	7810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f5c:	bd10      	pop	{r4, pc}
    3f5e:	0000      	.short	0x0000
    3f60:	20000f2c 	.word	0x20000f2c

00003f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    3f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f68:	4d5d      	ldr	r5, [pc, #372]	; (40e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe0>)
    3f6a:	4604      	mov	r4, r0
    3f6c:	b086      	sub	sp, #24
    3f6e:	7828      	ldrb	r0, [r5, #0]
    3f70:	2800      	cmp	r0, #0
    3f72:	d14e      	bne.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    3f74:	7820      	ldrb	r0, [r4, #0]
    3f76:	28ff      	cmp	r0, #255	; 0xff
    3f78:	d04b      	beq.n	4012 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12>
    3f7a:	f04f 0800 	mov.w	r8, #0
    3f7e:	f8a5 800c 	strh.w	r8, [r5, #12]
    3f82:	f8c5 8004 	str.w	r8, [r5, #4]
    3f86:	f885 8001 	strb.w	r8, [r5, #1]
    3f8a:	f885 8002 	strb.w	r8, [r5, #2]
    3f8e:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    3f92:	4b54      	ldr	r3, [pc, #336]	; (40e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe4>)
    3f94:	4e54      	ldr	r6, [pc, #336]	; (40e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe8>)
    3f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3f98:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    3f9c:	68b0      	ldr	r0, [r6, #8]
    3f9e:	6840      	ldr	r0, [r0, #4]
    3fa0:	9003      	str	r0, [sp, #12]
    3fa2:	4668      	mov	r0, sp
    3fa4:	f003 ff2c 	bl	7e00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    3fa8:	f003 fffa 	bl	7fa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    3fac:	f004 fa7c 	bl	84a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    3fb0:	f003 fe08 	bl	7bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3fb4:	f003 fc2c 	bl	7810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3fb8:	484c      	ldr	r0, [pc, #304]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    3fba:	f004 f951 	bl	8260 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    3fbe:	484c      	ldr	r0, [pc, #304]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    3fc0:	f004 f958 	bl	8274 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    3fc4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3fc8:	4607      	mov	r7, r0
    3fca:	f00a fe41 	bl	ec50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3fce:	4638      	mov	r0, r7
    3fd0:	f00a fe03 	bl	ebda <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3fd4:	4601      	mov	r1, r0
    3fd6:	4620      	mov	r0, r4
    3fd8:	f00a fdcb 	bl	eb72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3fdc:	f994 000e 	ldrsb.w	r0, [r4, #14]
    3fe0:	f004 f862 	bl	80a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    3fe4:	7921      	ldrb	r1, [r4, #4]
    3fe6:	2000      	movs	r0, #0
    3fe8:	f003 fe9e 	bl	7d28 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    3fec:	2101      	movs	r1, #1
    3fee:	60a8      	str	r0, [r5, #8]
    3ff0:	b198      	cbz	r0, 401a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a>
    3ff2:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3ff6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3ff8:	f009 fc53 	bl	d8a2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    3ffc:	4607      	mov	r7, r0
    3ffe:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4002:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4004:	f009 fc50 	bl	d8a8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    4008:	b14f      	cbz	r7, 401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    400a:	f894 1020 	ldrb.w	r1, [r4, #32]
    400e:	b951      	cbnz	r1, 4026 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x26>
    4010:	e005      	b.n	401e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e>
    4012:	200c      	movs	r0, #12
    4014:	b006      	add	sp, #24
    4016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    401a:	7029      	strb	r1, [r5, #0]
    401c:	e05e      	b.n	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    401e:	b120      	cbz	r0, 402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
    4020:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    4024:	b108      	cbz	r0, 402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
    4026:	2701      	movs	r7, #1
    4028:	e000      	b.n	402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
    402a:	2700      	movs	r7, #0
    402c:	7ea0      	ldrb	r0, [r4, #26]
    402e:	b920      	cbnz	r0, 403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4030:	7e20      	ldrb	r0, [r4, #24]
    4032:	b910      	cbnz	r0, 403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
    4034:	78a0      	ldrb	r0, [r4, #2]
    4036:	0740      	lsls	r0, r0, #29
    4038:	d523      	bpl.n	4082 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x82>
    403a:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    403e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4042:	4050      	eors	r0, r2
    4044:	ea70 0101 	orns	r1, r0, r1
    4048:	d006      	beq.n	4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>
    404a:	f007 f821 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    404e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4052:	1a80      	subs	r0, r0, r2
    4054:	4199      	sbcs	r1, r3
    4056:	d200      	bcs.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
    4058:	b19f      	cbz	r7, 4082 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x82>
    405a:	f7fe fd4f 	bl	2afc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    405e:	4925      	ldr	r1, [pc, #148]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    4060:	fba0 2301 	umull	r2, r3, r0, r1
    4064:	f104 0048 	add.w	r0, r4, #72	; 0x48
    4068:	f00a fd8e 	bl	eb88 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    406c:	2101      	movs	r1, #1
    406e:	4620      	mov	r0, r4
    4070:	f00a fd43 	bl	eafa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    4074:	78a0      	ldrb	r0, [r4, #2]
    4076:	0740      	lsls	r0, r0, #29
    4078:	d503      	bpl.n	4082 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x82>
    407a:	2101      	movs	r1, #1
    407c:	4620      	mov	r0, r4
    407e:	f000 faa7 	bl	45d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d0>
    4082:	f7fe fd93 	bl	2bac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    4086:	6870      	ldr	r0, [r6, #4]
    4088:	1cc0      	adds	r0, r0, #3
    408a:	f009 fd26 	bl	dada <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    408e:	73a8      	strb	r0, [r5, #14]
    4090:	78a0      	ldrb	r0, [r4, #2]
    4092:	07c0      	lsls	r0, r0, #31
    4094:	d022      	beq.n	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    4096:	f8cd 8010 	str.w	r8, [sp, #16]
    409a:	20ff      	movs	r0, #255	; 0xff
    409c:	f8cd 8014 	str.w	r8, [sp, #20]
    40a0:	73e8      	strb	r0, [r5, #15]
    40a2:	69e6      	ldr	r6, [r4, #28]
    40a4:	f106 070a 	add.w	r7, r6, #10
    40a8:	e013      	b.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40aa:	9c04      	ldr	r4, [sp, #16]
    40ac:	42b4      	cmp	r4, r6
    40ae:	d010      	beq.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40b0:	7a72      	ldrb	r2, [r6, #9]
    40b2:	7a60      	ldrb	r0, [r4, #9]
    40b4:	463b      	mov	r3, r7
    40b6:	f104 010a 	add.w	r1, r4, #10
    40ba:	f009 fc83 	bl	d9c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    40be:	b140      	cbz	r0, 40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40c0:	78a0      	ldrb	r0, [r4, #2]
    40c2:	73e8      	strb	r0, [r5, #15]
    40c4:	f8d4 0003 	ldr.w	r0, [r4, #3]
    40c8:	6128      	str	r0, [r5, #16]
    40ca:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    40ce:	82a8      	strh	r0, [r5, #20]
    40d0:	e004      	b.n	40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>
    40d2:	a804      	add	r0, sp, #16
    40d4:	f7fd fad0 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    40d8:	2800      	cmp	r0, #0
    40da:	d0e6      	beq.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    40dc:	2000      	movs	r0, #0
    40de:	e799      	b.n	4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
    40e0:	20000f2c 	.word	0x20000f2c
    40e4:	000046e0 	.word	0x000046e0
    40e8:	200000d0 	.word	0x200000d0
    40ec:	8e89bed6 	.word	0x8e89bed6
    40f0:	00555555 	.word	0x00555555
    40f4:	000f4240 	.word	0x000f4240
    40f8:	b510      	push	{r4, lr}
    40fa:	4604      	mov	r4, r0
    40fc:	f7ff ff32 	bl	3f64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4100:	2800      	cmp	r0, #0
    4102:	d108      	bne.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    4104:	4804      	ldr	r0, [pc, #16]	; (4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>)
    4106:	7800      	ldrb	r0, [r0, #0]
    4108:	2801      	cmp	r0, #1
    410a:	d003      	beq.n	4114 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x114>
    410c:	2100      	movs	r1, #0
    410e:	4620      	mov	r0, r4
    4110:	f7ff fda2 	bl	3c58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4114:	2000      	movs	r0, #0
    4116:	bd10      	pop	{r4, pc}
    4118:	20000f2c 	.word	0x20000f2c
    411c:	480a      	ldr	r0, [pc, #40]	; (4148 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x148>)
    411e:	b510      	push	{r4, lr}
    4120:	490a      	ldr	r1, [pc, #40]	; (414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>)
    4122:	6804      	ldr	r4, [r0, #0]
    4124:	7808      	ldrb	r0, [r1, #0]
    4126:	2800      	cmp	r0, #0
    4128:	d00d      	beq.n	4146 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x146>
    412a:	7808      	ldrb	r0, [r1, #0]
    412c:	2802      	cmp	r0, #2
    412e:	d002      	beq.n	4136 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x136>
    4130:	7808      	ldrb	r0, [r1, #0]
    4132:	2803      	cmp	r0, #3
    4134:	d102      	bne.n	413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>
    4136:	4620      	mov	r0, r4
    4138:	f7ff fefe 	bl	3f38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x310>
    413c:	4620      	mov	r0, r4
    413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4142:	f000 b919 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>
    4146:	bd10      	pop	{r4, pc}
    4148:	200000d0 	.word	0x200000d0
    414c:	20000f2c 	.word	0x20000f2c
    4150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4154:	4604      	mov	r4, r0
    4156:	4829      	ldr	r0, [pc, #164]	; (41fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fc>)
    4158:	460d      	mov	r5, r1
    415a:	6840      	ldr	r0, [r0, #4]
    415c:	f003 ffc6 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4160:	4e27      	ldr	r6, [pc, #156]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    4162:	2004      	movs	r0, #4
    4164:	7030      	strb	r0, [r6, #0]
    4166:	b355      	cbz	r5, 41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    4168:	8860      	ldrh	r0, [r4, #2]
    416a:	2810      	cmp	r0, #16
    416c:	d023      	beq.n	41b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b6>
    416e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4172:	4680      	mov	r8, r0
    4174:	68b5      	ldr	r5, [r6, #8]
    4176:	f00a fd24 	bl	ebc2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    417a:	4607      	mov	r7, r0
    417c:	4640      	mov	r0, r8
    417e:	f00a fd49 	bl	ec14 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4182:	1a38      	subs	r0, r7, r0
    4184:	1e40      	subs	r0, r0, #1
    4186:	b2c0      	uxtb	r0, r0
    4188:	8861      	ldrh	r1, [r4, #2]
    418a:	2228      	movs	r2, #40	; 0x28
    418c:	f000 fae4 	bl	4758 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    4190:	4405      	add	r5, r0
    4192:	78a0      	ldrb	r0, [r4, #2]
    4194:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    4198:	b130      	cbz	r0, 41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
    419a:	6870      	ldr	r0, [r6, #4]
    419c:	4405      	add	r5, r0
    419e:	f00a fd92 	bl	ecc6 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    41a2:	4428      	add	r0, r5
    41a4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    41a8:	7922      	ldrb	r2, [r4, #4]
    41aa:	4629      	mov	r1, r5
    41ac:	2000      	movs	r0, #0
    41ae:	f003 ffb3 	bl	8118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    41b2:	b920      	cbnz	r0, 41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b4:	e00c      	b.n	41d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d0>
    41b6:	7921      	ldrb	r1, [r4, #4]
    41b8:	2000      	movs	r0, #0
    41ba:	f003 fd7b 	bl	7cb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    41be:	8860      	ldrh	r0, [r4, #2]
    41c0:	2813      	cmp	r0, #19
    41c2:	d011      	beq.n	41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>
    41c4:	dc07      	bgt.n	41d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d6>
    41c6:	2810      	cmp	r0, #16
    41c8:	d015      	beq.n	41f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f6>
    41ca:	2812      	cmp	r0, #18
    41cc:	d107      	bne.n	41de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1de>
    41ce:	e00b      	b.n	41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>
    41d0:	f640 51a8 	movw	r1, #3496	; 0xda8
    41d4:	e005      	b.n	41e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e2>
    41d6:	2815      	cmp	r0, #21
    41d8:	d006      	beq.n	41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>
    41da:	281d      	cmp	r0, #29
    41dc:	d004      	beq.n	41e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e8>
    41de:	f640 51bc 	movw	r1, #3516	; 0xdbc
    41e2:	202d      	movs	r0, #45	; 0x2d
    41e4:	f7fd f80a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41e8:	7922      	ldrb	r2, [r4, #4]
    41ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41ee:	2101      	movs	r1, #1
    41f0:	2000      	movs	r0, #0
    41f2:	f004 b803 	b.w	81fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    41f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41fa:	0000      	.short	0x0000
    41fc:	200000d0 	.word	0x200000d0
    4200:	20000f2c 	.word	0x20000f2c
    4204:	b538      	push	{r3, r4, r5, lr}
    4206:	4604      	mov	r4, r0
    4208:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    420c:	460b      	mov	r3, r1
    420e:	f88d 0000 	strb.w	r0, [sp]
    4212:	9800      	ldr	r0, [sp, #0]
    4214:	9000      	str	r0, [sp, #0]
    4216:	f89d 0000 	ldrb.w	r0, [sp]
    421a:	2800      	cmp	r0, #0
    421c:	d13a      	bne.n	4294 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x294>
    421e:	7820      	ldrb	r0, [r4, #0]
    4220:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4224:	2bff      	cmp	r3, #255	; 0xff
    4226:	d010      	beq.n	424a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24a>
    4228:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    422c:	1e51      	subs	r1, r2, #1
    422e:	4618      	mov	r0, r3
    4230:	f7fe fc38 	bl	2aa4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4234:	b130      	cbz	r0, 4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>
    4236:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    423a:	f040 0002 	orr.w	r0, r0, #2
    423e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    4242:	e011      	b.n	4268 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x268>
    4244:	f241 0108 	movw	r1, #4104	; 0x1008
    4248:	e021      	b.n	428e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28e>
    424a:	4813      	ldr	r0, [pc, #76]	; (4298 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x298>)
    424c:	6840      	ldr	r0, [r0, #4]
    424e:	7801      	ldrb	r1, [r0, #0]
    4250:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4254:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    4258:	f8d0 1003 	ldr.w	r1, [r0, #3]
    425c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4260:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4264:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    4268:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    426c:	287f      	cmp	r0, #127	; 0x7f
    426e:	d00c      	beq.n	428a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28a>
    4270:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4274:	207f      	movs	r0, #127	; 0x7f
    4276:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    427a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    427e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4282:	2220      	movs	r2, #32
    4284:	4905      	ldr	r1, [pc, #20]	; (429c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29c>)
    4286:	f00a b82a 	b.w	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    428a:	f640 616c 	movw	r1, #3692	; 0xe6c
    428e:	202d      	movs	r0, #45	; 0x2d
    4290:	f7fc ffb4 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4294:	bd38      	pop	{r3, r4, r5, pc}
    4296:	0000      	.short	0x0000
    4298:	200000d0 	.word	0x200000d0
    429c:	0000eae3 	.word	0x0000eae3
    42a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a4:	4690      	mov	r8, r2
    42a6:	460e      	mov	r6, r1
    42a8:	4604      	mov	r4, r0
    42aa:	2903      	cmp	r1, #3
    42ac:	d004      	beq.n	42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>
    42ae:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    42b2:	b108      	cbz	r0, 42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>
    42b4:	2001      	movs	r0, #1
    42b6:	e000      	b.n	42ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ba>
    42b8:	2000      	movs	r0, #0
    42ba:	4681      	mov	r9, r0
    42bc:	f003 fc9c 	bl	7bf8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    42c0:	4605      	mov	r5, r0
    42c2:	2e03      	cmp	r6, #3
    42c4:	d003      	beq.n	42ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ce>
    42c6:	2701      	movs	r7, #1
    42c8:	2e05      	cmp	r6, #5
    42ca:	d005      	beq.n	42d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d8>
    42cc:	e008      	b.n	42e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e0>
    42ce:	78a0      	ldrb	r0, [r4, #2]
    42d0:	2702      	movs	r7, #2
    42d2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    42d6:	e001      	b.n	42dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2dc>
    42d8:	78a0      	ldrb	r0, [r4, #2]
    42da:	07c0      	lsls	r0, r0, #31
    42dc:	2800      	cmp	r0, #0
    42de:	d042      	beq.n	4366 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x366>
    42e0:	f1b9 0f00 	cmp.w	r9, #0
    42e4:	d13e      	bne.n	4364 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x364>
    42e6:	4822      	ldr	r0, [pc, #136]	; (4370 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x370>)
    42e8:	7b80      	ldrb	r0, [r0, #14]
    42ea:	b140      	cbz	r0, 42fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2fe>
    42ec:	f009 fbf8 	bl	dae0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    42f0:	f888 0000 	strb.w	r0, [r8]
    42f4:	28ff      	cmp	r0, #255	; 0xff
    42f6:	d002      	beq.n	42fe <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2fe>
    42f8:	f7fe fbee 	bl	2ad8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    42fc:	4305      	orrs	r5, r0
    42fe:	4e1d      	ldr	r6, [pc, #116]	; (4374 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x374>)
    4300:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4304:	f104 0358 	add.w	r3, r4, #88	; 0x58
    4308:	6871      	ldr	r1, [r6, #4]
    430a:	f811 0b03 	ldrb.w	r0, [r1], #3
    430e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4312:	f009 fb57 	bl	d9c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4316:	f898 1000 	ldrb.w	r1, [r8]
    431a:	29ff      	cmp	r1, #255	; 0xff
    431c:	d004      	beq.n	4328 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x328>
    431e:	b990      	cbnz	r0, 4346 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x346>
    4320:	7e60      	ldrb	r0, [r4, #25]
    4322:	4288      	cmp	r0, r1
    4324:	d00f      	beq.n	4346 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x346>
    4326:	e008      	b.n	433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    4328:	b138      	cbz	r0, 433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    432a:	6871      	ldr	r1, [r6, #4]
    432c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4330:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4334:	f00a fb8c 	bl	ea50 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4338:	b128      	cbz	r0, 4346 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x346>
    433a:	2000      	movs	r0, #0
    433c:	78a1      	ldrb	r1, [r4, #2]
    433e:	0749      	lsls	r1, r1, #29
    4340:	d503      	bpl.n	434a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34a>
    4342:	b990      	cbnz	r0, 436a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36a>
    4344:	e00e      	b.n	4364 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x364>
    4346:	2001      	movs	r0, #1
    4348:	e7f8      	b.n	433c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33c>
    434a:	b975      	cbnz	r5, 436a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36a>
    434c:	7be0      	ldrb	r0, [r4, #15]
    434e:	b108      	cbz	r0, 4354 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x354>
    4350:	42b8      	cmp	r0, r7
    4352:	d107      	bne.n	4364 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x364>
    4354:	6871      	ldr	r1, [r6, #4]
    4356:	f811 0b03 	ldrb.w	r0, [r1], #3
    435a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    435e:	f00a fb77 	bl	ea50 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4362:	b110      	cbz	r0, 436a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36a>
    4364:	2000      	movs	r0, #0
    4366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    436a:	2001      	movs	r0, #1
    436c:	e7fb      	b.n	4366 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x366>
    436e:	0000      	.short	0x0000
    4370:	20000f2c 	.word	0x20000f2c
    4374:	200000d0 	.word	0x200000d0
    4378:	b570      	push	{r4, r5, r6, lr}
    437a:	4604      	mov	r4, r0
    437c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    437e:	4d10      	ldr	r5, [pc, #64]	; (43c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c0>)
    4380:	1c40      	adds	r0, r0, #1
    4382:	8620      	strh	r0, [r4, #48]	; 0x30
    4384:	7ba8      	ldrb	r0, [r5, #14]
    4386:	2600      	movs	r6, #0
    4388:	b120      	cbz	r0, 4394 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x394>
    438a:	f003 fc1b 	bl	7bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    438e:	f003 fa3f 	bl	7810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4392:	73ae      	strb	r6, [r5, #14]
    4394:	702e      	strb	r6, [r5, #0]
    4396:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    439a:	b108      	cbz	r0, 43a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a0>
    439c:	2101      	movs	r1, #1
    439e:	e00a      	b.n	43b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b6>
    43a0:	7b60      	ldrb	r0, [r4, #13]
    43a2:	b138      	cbz	r0, 43b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b4>
    43a4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    43a6:	4288      	cmp	r0, r1
    43a8:	d804      	bhi.n	43b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b4>
    43aa:	2101      	movs	r1, #1
    43ac:	4620      	mov	r0, r4
    43ae:	f00a fcae 	bl	ed0e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    43b2:	bd70      	pop	{r4, r5, r6, pc}
    43b4:	2100      	movs	r1, #0
    43b6:	4620      	mov	r0, r4
    43b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    43bc:	f00a bca7 	b.w	ed0e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    43c0:	20000f2c 	.word	0x20000f2c
    43c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43c8:	4604      	mov	r4, r0
    43ca:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    43ce:	8808      	ldrh	r0, [r1, #0]
    43d0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    43d4:	20ff      	movs	r0, #255	; 0xff
    43d6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    43da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    43de:	4616      	mov	r6, r2
    43e0:	460d      	mov	r5, r1
    43e2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    43e6:	2b00      	cmp	r3, #0
    43e8:	d14b      	bne.n	4482 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x482>
    43ea:	6928      	ldr	r0, [r5, #16]
    43ec:	f009 fbc7 	bl	db7e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    43f0:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    43f4:	8b28      	ldrh	r0, [r5, #24]
    43f6:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    43fa:	8b68      	ldrh	r0, [r5, #26]
    43fc:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4400:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    4404:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4408:	7e20      	ldrb	r0, [r4, #24]
    440a:	f104 0151 	add.w	r1, r4, #81	; 0x51
    440e:	460f      	mov	r7, r1
    4410:	2500      	movs	r5, #0
    4412:	b120      	cbz	r0, 441e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41e>
    4414:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4418:	f00a fa26 	bl	e868 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    441c:	b940      	cbnz	r0, 4430 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x430>
    441e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4422:	b170      	cbz	r0, 4442 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x442>
    4424:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4428:	4639      	mov	r1, r7
    442a:	f00a fa14 	bl	e856 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    442e:	b140      	cbz	r0, 4442 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x442>
    4430:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4434:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4438:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    443c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    4440:	e003      	b.n	444a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44a>
    4442:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4446:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    444a:	4815      	ldr	r0, [pc, #84]	; (44a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4a0>)
    444c:	2eff      	cmp	r6, #255	; 0xff
    444e:	6840      	ldr	r0, [r0, #4]
    4450:	7801      	ldrb	r1, [r0, #0]
    4452:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4456:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    445a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    445e:	d017      	beq.n	4490 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x490>
    4460:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4464:	8880      	ldrh	r0, [r0, #4]
    4466:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    446a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    446e:	1e51      	subs	r1, r2, #1
    4470:	4630      	mov	r0, r6
    4472:	f7fe fb17 	bl	2aa4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4476:	b130      	cbz	r0, 4486 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x486>
    4478:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    447c:	f040 0002 	orr.w	r0, r0, #2
    4480:	7020      	strb	r0, [r4, #0]
    4482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4486:	f640 418b 	movw	r1, #3211	; 0xc8b
    448a:	202d      	movs	r0, #45	; 0x2d
    448c:	f7fc feb6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4490:	f844 1f7a 	str.w	r1, [r4, #122]!
    4494:	8880      	ldrh	r0, [r0, #4]
    4496:	80a0      	strh	r0, [r4, #4]
    4498:	60e5      	str	r5, [r4, #12]
    449a:	8225      	strh	r5, [r4, #16]
    449c:	e7f1      	b.n	4482 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x482>
    449e:	0000      	.short	0x0000
    44a0:	200000d0 	.word	0x200000d0
    44a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44a6:	4604      	mov	r4, r0
    44a8:	20ff      	movs	r0, #255	; 0xff
    44aa:	f88d 0000 	strb.w	r0, [sp]
    44ae:	2601      	movs	r6, #1
    44b0:	466a      	mov	r2, sp
    44b2:	2105      	movs	r1, #5
    44b4:	4620      	mov	r0, r4
    44b6:	f7ff fef3 	bl	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    44ba:	b160      	cbz	r0, 44d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d6>
    44bc:	4d28      	ldr	r5, [pc, #160]	; (4560 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x560>)
    44be:	4f27      	ldr	r7, [pc, #156]	; (455c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x55c>)
    44c0:	6869      	ldr	r1, [r5, #4]
    44c2:	7bfa      	ldrb	r2, [r7, #15]
    44c4:	f107 0310 	add.w	r3, r7, #16
    44c8:	f811 0b03 	ldrb.w	r0, [r1], #3
    44cc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    44d0:	f009 fa78 	bl	d9c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    44d4:	b110      	cbz	r0, 44dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4dc>
    44d6:	2600      	movs	r6, #0
    44d8:	4630      	mov	r0, r6
    44da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44dc:	686a      	ldr	r2, [r5, #4]
    44de:	69e0      	ldr	r0, [r4, #28]
    44e0:	7812      	ldrb	r2, [r2, #0]
    44e2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    44e6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    44ea:	4011      	ands	r1, r2
    44ec:	7001      	strb	r1, [r0, #0]
    44ee:	2201      	movs	r2, #1
    44f0:	4620      	mov	r0, r4
    44f2:	69e1      	ldr	r1, [r4, #28]
    44f4:	f000 f89a 	bl	462c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62c>
    44f8:	2300      	movs	r3, #0
    44fa:	f89d 2000 	ldrb.w	r2, [sp]
    44fe:	4620      	mov	r0, r4
    4500:	69e1      	ldr	r1, [r4, #28]
    4502:	f7ff ff5f 	bl	43c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c4>
    4506:	2211      	movs	r2, #17
    4508:	4916      	ldr	r1, [pc, #88]	; (4564 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x564>)
    450a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    450e:	f009 fee6 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4512:	69e0      	ldr	r0, [r4, #28]
    4514:	2205      	movs	r2, #5
    4516:	8801      	ldrh	r1, [r0, #0]
    4518:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    451c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4520:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    4524:	4910      	ldr	r1, [pc, #64]	; (4568 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x568>)
    4526:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    452a:	f009 fed8 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    452e:	2100      	movs	r1, #0
    4530:	69e0      	ldr	r0, [r4, #28]
    4532:	7039      	strb	r1, [r7, #0]
    4534:	460a      	mov	r2, r1
    4536:	4621      	mov	r1, r4
    4538:	f000 fa86 	bl	4a48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    453c:	6868      	ldr	r0, [r5, #4]
    453e:	69e1      	ldr	r1, [r4, #28]
    4540:	f8d0 2003 	ldr.w	r2, [r0, #3]
    4544:	f841 2f03 	str.w	r2, [r1, #3]!
    4548:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    454c:	808a      	strh	r2, [r1, #4]
    454e:	7800      	ldrb	r0, [r0, #0]
    4550:	69e1      	ldr	r1, [r4, #28]
    4552:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4556:	7088      	strb	r0, [r1, #2]
    4558:	e7be      	b.n	44d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d8>
    455a:	0000      	.short	0x0000
    455c:	20000f2c 	.word	0x20000f2c
    4560:	200000d0 	.word	0x200000d0
    4564:	0000ea93 	.word	0x0000ea93
    4568:	0000ea83 	.word	0x0000ea83
    456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    456e:	4604      	mov	r4, r0
    4570:	20ff      	movs	r0, #255	; 0xff
    4572:	f88d 0000 	strb.w	r0, [sp]
    4576:	2501      	movs	r5, #1
    4578:	466a      	mov	r2, sp
    457a:	2103      	movs	r1, #3
    457c:	4620      	mov	r0, r4
    457e:	f7ff fe8f 	bl	42a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a0>
    4582:	b1e8      	cbz	r0, 45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    4584:	7b20      	ldrb	r0, [r4, #12]
    4586:	b120      	cbz	r0, 4592 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x592>
    4588:	f89d 1000 	ldrb.w	r1, [sp]
    458c:	4620      	mov	r0, r4
    458e:	f7ff fe39 	bl	4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>
    4592:	4e0d      	ldr	r6, [pc, #52]	; (45c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c8>)
    4594:	2100      	movs	r1, #0
    4596:	6870      	ldr	r0, [r6, #4]
    4598:	8001      	strh	r1, [r0, #0]
    459a:	2104      	movs	r1, #4
    459c:	f009 fd26 	bl	dfec <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    45a0:	4620      	mov	r0, r4
    45a2:	f000 f88b 	bl	46bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6bc>
    45a6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    45aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
    45ac:	6870      	ldr	r0, [r6, #4]
    45ae:	f009 fd54 	bl	e05a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    45b2:	4906      	ldr	r1, [pc, #24]	; (45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>)
    45b4:	2005      	movs	r0, #5
    45b6:	7008      	strb	r0, [r1, #0]
    45b8:	6870      	ldr	r0, [r6, #4]
    45ba:	f003 fd97 	bl	80ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    45be:	e000      	b.n	45c2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c2>
    45c0:	2500      	movs	r5, #0
    45c2:	4628      	mov	r0, r5
    45c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45c6:	0000      	.short	0x0000
    45c8:	200000d0 	.word	0x200000d0
    45cc:	20000f2c 	.word	0x20000f2c
    45d0:	b570      	push	{r4, r5, r6, lr}
    45d2:	4604      	mov	r4, r0
    45d4:	460e      	mov	r6, r1
    45d6:	7e40      	ldrb	r0, [r0, #25]
    45d8:	f7fe fa3e 	bl	2a58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    45dc:	0005      	movs	r5, r0
    45de:	d019      	beq.n	4614 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x614>
    45e0:	2110      	movs	r1, #16
    45e2:	f009 fc4d 	bl	de80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    45e6:	2800      	cmp	r0, #0
    45e8:	d114      	bne.n	4614 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x614>
    45ea:	2001      	movs	r0, #1
    45ec:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    45f0:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    45f4:	4632      	mov	r2, r6
    45f6:	460c      	mov	r4, r1
    45f8:	4628      	mov	r0, r5
    45fa:	f009 fa13 	bl	da24 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    45fe:	4621      	mov	r1, r4
    4600:	4c05      	ldr	r4, [pc, #20]	; (4618 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x618>)
    4602:	6860      	ldr	r0, [r4, #4]
    4604:	f009 fd0d 	bl	e022 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    4608:	6860      	ldr	r0, [r4, #4]
    460a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    460e:	2101      	movs	r1, #1
    4610:	f009 bd0d 	b.w	e02e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    4614:	bd70      	pop	{r4, r5, r6, pc}
    4616:	0000      	.short	0x0000
    4618:	200000d0 	.word	0x200000d0
    461c:	4802      	ldr	r0, [pc, #8]	; (4628 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x628>)
    461e:	2101      	movs	r1, #1
    4620:	6800      	ldr	r0, [r0, #0]
    4622:	f7ff bb19 	b.w	3c58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4626:	0000      	.short	0x0000
    4628:	200000d0 	.word	0x200000d0
    462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4630:	4e21      	ldr	r6, [pc, #132]	; (46b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6b8>)
    4632:	4680      	mov	r8, r0
    4634:	460c      	mov	r4, r1
    4636:	6870      	ldr	r0, [r6, #4]
    4638:	4615      	mov	r5, r2
    463a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    463e:	6161      	str	r1, [r4, #20]
    4640:	6841      	ldr	r1, [r0, #4]
    4642:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4646:	61e1      	str	r1, [r4, #28]
    4648:	8940      	ldrh	r0, [r0, #10]
    464a:	f009 fa94 	bl	db76 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    464e:	4607      	mov	r7, r0
    4650:	6120      	str	r0, [r4, #16]
    4652:	6870      	ldr	r0, [r6, #4]
    4654:	4639      	mov	r1, r7
    4656:	7d80      	ldrb	r0, [r0, #22]
    4658:	f009 fc09 	bl	de6e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    465c:	84a0      	strh	r0, [r4, #36]	; 0x24
    465e:	6870      	ldr	r0, [r6, #4]
    4660:	4639      	mov	r1, r7
    4662:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4666:	f009 fbfe 	bl	de66 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    466a:	6220      	str	r0, [r4, #32]
    466c:	6870      	ldr	r0, [r6, #4]
    466e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4672:	8321      	strh	r1, [r4, #24]
    4674:	8841      	ldrh	r1, [r0, #2]
    4676:	8361      	strh	r1, [r4, #26]
    4678:	6841      	ldr	r1, [r0, #4]
    467a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    467e:	7a01      	ldrb	r1, [r0, #8]
    4680:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4684:	7a41      	ldrb	r1, [r0, #9]
    4686:	f001 011f 	and.w	r1, r1, #31
    468a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    468e:	7a40      	ldrb	r0, [r0, #9]
    4690:	0940      	lsrs	r0, r0, #5
    4692:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4696:	f104 0062 	add.w	r0, r4, #98	; 0x62
    469a:	7205      	strb	r5, [r0, #8]
    469c:	7245      	strb	r5, [r0, #9]
    469e:	21ff      	movs	r1, #255	; 0xff
    46a0:	7281      	strb	r1, [r0, #10]
    46a2:	2100      	movs	r1, #0
    46a4:	3836      	subs	r0, #54	; 0x36
    46a6:	f009 fec9 	bl	e43c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    46aa:	f898 000e 	ldrb.w	r0, [r8, #14]
    46ae:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    46b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46b6:	0000      	.short	0x0000
    46b8:	200000d0 	.word	0x200000d0
    46bc:	b570      	push	{r4, r5, r6, lr}
    46be:	4d07      	ldr	r5, [pc, #28]	; (46dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6dc>)
    46c0:	4604      	mov	r4, r0
    46c2:	f100 0151 	add.w	r1, r0, #81	; 0x51
    46c6:	6868      	ldr	r0, [r5, #4]
    46c8:	f009 fcb8 	bl	e03c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    46cc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    46d0:	6868      	ldr	r0, [r5, #4]
    46d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46d6:	f009 bcb7 	b.w	e048 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    46da:	0000      	.short	0x0000
    46dc:	200000d0 	.word	0x200000d0
    46e0:	00003ee5 	.word	0x00003ee5
    46e4:	00003d6d 	.word	0x00003d6d
    46e8:	00003e61 	.word	0x00003e61
    46ec:	00000000 	.word	0x00000000
    46f0:	00003e39 	.word	0x00003e39
    46f4:	00003e91 	.word	0x00003e91
    46f8:	0000ea77 	.word	0x0000ea77
    46fc:	0000ea7d 	.word	0x0000ea7d
    4700:	000040f9 	.word	0x000040f9
    4704:	0000411d 	.word	0x0000411d
    4708:	0000461d 	.word	0x0000461d
    470c:	000046fc 	.word	0x000046fc
    4710:	000046f4 	.word	0x000046f4
    4714:	000046f0 	.word	0x000046f0

00004718 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4718:	b510      	push	{r4, lr}
    471a:	1e42      	subs	r2, r0, #1
    471c:	2a02      	cmp	r2, #2
    471e:	d901      	bls.n	4724 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4720:	21ca      	movs	r1, #202	; 0xca
    4722:	e009      	b.n	4738 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    4724:	1e40      	subs	r0, r0, #1
    4726:	2910      	cmp	r1, #16
    4728:	d009      	beq.n	473e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    472a:	2912      	cmp	r1, #18
    472c:	d00c      	beq.n	4748 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    472e:	2913      	cmp	r1, #19
    4730:	d00a      	beq.n	4748 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4732:	2915      	cmp	r1, #21
    4734:	d005      	beq.n	4742 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    4736:	21d8      	movs	r1, #216	; 0xd8
    4738:	202f      	movs	r0, #47	; 0x2f
    473a:	f7fc fd5f 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    473e:	4905      	ldr	r1, [pc, #20]	; (4754 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4740:	e004      	b.n	474c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4742:	4904      	ldr	r1, [pc, #16]	; (4754 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4744:	1d89      	adds	r1, r1, #6
    4746:	e001      	b.n	474c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4748:	4902      	ldr	r1, [pc, #8]	; (4754 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    474a:	1f89      	subs	r1, r1, #6
    474c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4750:	bd10      	pop	{r4, pc}
    4752:	0000      	.short	0x0000
    4754:	0000ecde 	.word	0x0000ecde

00004758 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4758:	1e42      	subs	r2, r0, #1
    475a:	b510      	push	{r4, lr}
    475c:	b2d2      	uxtb	r2, r2
    475e:	2a01      	cmp	r2, #1
    4760:	d903      	bls.n	476a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4762:	291d      	cmp	r1, #29
    4764:	d001      	beq.n	476a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4766:	21ee      	movs	r1, #238	; 0xee
    4768:	e00d      	b.n	4786 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    476a:	2913      	cmp	r1, #19
    476c:	d013      	beq.n	4796 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    476e:	dc04      	bgt.n	477a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4770:	2910      	cmp	r1, #16
    4772:	d00b      	beq.n	478c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4774:	2912      	cmp	r1, #18
    4776:	d104      	bne.n	4782 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4778:	e00d      	b.n	4796 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    477a:	2915      	cmp	r1, #21
    477c:	d008      	beq.n	4790 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    477e:	291d      	cmp	r1, #29
    4780:	d00e      	beq.n	47a0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4782:	f44f 7181 	mov.w	r1, #258	; 0x102
    4786:	202f      	movs	r0, #47	; 0x2f
    4788:	f7fc fd38 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    478c:	4807      	ldr	r0, [pc, #28]	; (47ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    478e:	e004      	b.n	479a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4790:	4806      	ldr	r0, [pc, #24]	; (47ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4792:	3008      	adds	r0, #8
    4794:	e001      	b.n	479a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4796:	4805      	ldr	r0, [pc, #20]	; (47ac <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4798:	1d00      	adds	r0, r0, #4
    479a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    479e:	bd10      	pop	{r4, pc}
    47a0:	f240 315a 	movw	r1, #858	; 0x35a
    47a4:	fb10 f001 	smulbb	r0, r0, r1
    47a8:	bd10      	pop	{r4, pc}
    47aa:	0000      	.short	0x0000
    47ac:	0000eccc 	.word	0x0000eccc

000047b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    47b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b4:	4604      	mov	r4, r0
    47b6:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    47ba:	4616      	mov	r6, r2
    47bc:	460f      	mov	r7, r1
    47be:	2800      	cmp	r0, #0
    47c0:	d15e      	bne.n	4880 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    47c2:	4621      	mov	r1, r4
    47c4:	484d      	ldr	r0, [pc, #308]	; (48fc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    47c6:	f006 fa53 	bl	ac70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    47ca:	4605      	mov	r5, r0
    47cc:	2820      	cmp	r0, #32
    47ce:	d057      	beq.n	4880 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    47d0:	2250      	movs	r2, #80	; 0x50
    47d2:	2100      	movs	r1, #0
    47d4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    47d8:	f00c fa90 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    47dc:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    47e0:	2501      	movs	r5, #1
    47e2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    47e6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    47ea:	b137      	cbz	r7, 47fa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    47ec:	f7fe feba 	bl	3564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    47f0:	f000 0007 	and.w	r0, r0, #7
    47f4:	1c40      	adds	r0, r0, #1
    47f6:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    47fa:	4620      	mov	r0, r4
    47fc:	f00a fc24 	bl	f048 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    4800:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    4804:	2002      	movs	r0, #2
    4806:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    480a:	46a8      	mov	r8, r5
    480c:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4810:	2500      	movs	r5, #0
    4812:	f804 5fe8 	strb.w	r5, [r4, #232]!
    4816:	f007 fbb7 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    481a:	4607      	mov	r7, r0
    481c:	f00c f86a 	bl	108f4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4820:	8921      	ldrh	r1, [r4, #8]
    4822:	3ce8      	subs	r4, #232	; 0xe8
    4824:	4288      	cmp	r0, r1
    4826:	d800      	bhi.n	482a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4828:	4608      	mov	r0, r1
    482a:	4438      	add	r0, r7
    482c:	30cc      	adds	r0, #204	; 0xcc
    482e:	b287      	uxth	r7, r0
    4830:	4620      	mov	r0, r4
    4832:	f00a f8cc 	bl	e9ce <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4836:	b330      	cbz	r0, 4886 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4838:	f00b ff62 	bl	10700 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    483c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4840:	b281      	uxth	r1, r0
    4842:	4630      	mov	r0, r6
    4844:	f007 fcc0 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4848:	4430      	add	r0, r6
    484a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    484e:	3490      	adds	r4, #144	; 0x90
    4850:	f006 fc1e 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4854:	19c0      	adds	r0, r0, r7
    4856:	4169      	adcs	r1, r5
    4858:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    485c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4860:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4864:	2001      	movs	r0, #1
    4866:	f00a fa2a 	bl	ecbe <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    486a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    486e:	1a30      	subs	r0, r6, r0
    4870:	6460      	str	r0, [r4, #68]	; 0x44
    4872:	f04f 30ff 	mov.w	r0, #4294967295
    4876:	0841      	lsrs	r1, r0, #1
    4878:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    487c:	3c90      	subs	r4, #144	; 0x90
    487e:	e025      	b.n	48cc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4880:	200c      	movs	r0, #12
    4882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4886:	2100      	movs	r1, #0
    4888:	4620      	mov	r0, r4
    488a:	f00a fb2f 	bl	eeec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    488e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4900 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4892:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4896:	2000      	movs	r0, #0
    4898:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    489c:	b149      	cbz	r1, 48b2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    489e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    48a0:	b139      	cbz	r1, 48b2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    48a2:	f7fe fe5f 	bl	3564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    48a6:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    48aa:	fbb0 f2f1 	udiv	r2, r0, r1
    48ae:	fb01 0012 	mls	r0, r1, r2, r0
    48b2:	4407      	add	r7, r0
    48b4:	f006 fbec 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    48b8:	19c0      	adds	r0, r0, r7
    48ba:	4169      	adcs	r1, r5
    48bc:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    48c0:	b19e      	cbz	r6, 48ea <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    48c2:	1980      	adds	r0, r0, r6
    48c4:	eb51 0105 	adcs.w	r1, r1, r5
    48c8:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    48cc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    48d0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    48d4:	f00a fbb6 	bl	f044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    48d8:	b158      	cbz	r0, 48f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    48da:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    48de:	2100      	movs	r1, #0
    48e0:	4620      	mov	r0, r4
    48e2:	f00a f8a4 	bl	ea2e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    48e6:	2000      	movs	r0, #0
    48e8:	e7cb      	b.n	4882 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    48ea:	f04f 30ff 	mov.w	r0, #4294967295
    48ee:	0841      	lsrs	r1, r0, #1
    48f0:	e7ea      	b.n	48c8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    48f2:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    48f6:	2030      	movs	r0, #48	; 0x30
    48f8:	f7fc fc80 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48fc:	0000f1c1 	.word	0x0000f1c1
    4900:	200000e0 	.word	0x200000e0

00004904 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4904:	4901      	ldr	r1, [pc, #4]	; (490c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4906:	8088      	strh	r0, [r1, #4]
    4908:	4770      	bx	lr
    490a:	0000      	.short	0x0000
    490c:	200000e0 	.word	0x200000e0

00004910 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4910:	4805      	ldr	r0, [pc, #20]	; (4928 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4912:	2100      	movs	r1, #0
    4914:	7001      	strb	r1, [r0, #0]
    4916:	2201      	movs	r2, #1
    4918:	7082      	strb	r2, [r0, #2]
    491a:	7041      	strb	r1, [r0, #1]
    491c:	f242 7110 	movw	r1, #10000	; 0x2710
    4920:	8081      	strh	r1, [r0, #4]
    4922:	f000 b803 	b.w	492c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4926:	0000      	.short	0x0000
    4928:	200000e0 	.word	0x200000e0

0000492c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    492c:	b51c      	push	{r2, r3, r4, lr}
    492e:	4909      	ldr	r1, [pc, #36]	; (4954 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4930:	e9d1 0100 	ldrd	r0, r1, [r1]
    4934:	e9cd 0100 	strd	r0, r1, [sp]
    4938:	e002      	b.n	4940 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    493a:	9800      	ldr	r0, [sp, #0]
    493c:	f00a f9fb 	bl	ed36 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4940:	4668      	mov	r0, sp
    4942:	f7fc fe99 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4946:	2800      	cmp	r0, #0
    4948:	d0f7      	beq.n	493a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    494a:	f000 f8a9 	bl	4aa0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    494e:	2000      	movs	r0, #0
    4950:	bd1c      	pop	{r2, r3, r4, pc}
    4952:	0000      	.short	0x0000
    4954:	00005200 	.word	0x00005200

00004958 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4958:	4901      	ldr	r1, [pc, #4]	; (4960 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    495a:	7008      	strb	r0, [r1, #0]
    495c:	4770      	bx	lr
    495e:	0000      	.short	0x0000
    4960:	200000e0 	.word	0x200000e0

00004964 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4964:	4908      	ldr	r1, [pc, #32]	; (4988 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    496a:	fbb1 f1f2 	udiv	r1, r1, r2
    496e:	b510      	push	{r4, lr}
    4970:	f501 7125 	add.w	r1, r1, #660	; 0x294
    4974:	f009 fd7b 	bl	e46e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4978:	f640 0148 	movw	r1, #2120	; 0x848
    497c:	4288      	cmp	r0, r1
    497e:	d300      	bcc.n	4982 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4980:	4608      	mov	r0, r1
    4982:	b280      	uxth	r0, r0
    4984:	bd10      	pop	{r4, pc}
    4986:	0000      	.short	0x0000
    4988:	0001527d 	.word	0x0001527d

0000498c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    498c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4990:	4c0f      	ldr	r4, [pc, #60]	; (49d0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x44>)
    4992:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4996:	f003 fac3 	bl	7f20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    499a:	4605      	mov	r5, r0
    499c:	4602      	mov	r2, r0
    499e:	4639      	mov	r1, r7
    49a0:	4630      	mov	r0, r6
    49a2:	f009 f8f2 	bl	db8a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    49a6:	4606      	mov	r6, r0
    49a8:	68a0      	ldr	r0, [r4, #8]
    49aa:	4286      	cmp	r6, r0
    49ac:	d005      	beq.n	49ba <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2e>
    49ae:	6921      	ldr	r1, [r4, #16]
    49b0:	1a30      	subs	r0, r6, r0
    49b2:	4408      	add	r0, r1
    49b4:	6120      	str	r0, [r4, #16]
    49b6:	f006 fa9d 	bl	aef4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    49ba:	60a6      	str	r6, [r4, #8]
    49bc:	42b5      	cmp	r5, r6
    49be:	d801      	bhi.n	49c4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x38>
    49c0:	7860      	ldrb	r0, [r4, #1]
    49c2:	b110      	cbz	r0, 49ca <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    49c4:	2000      	movs	r0, #0
    49c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49ca:	2001      	movs	r0, #1
    49cc:	e7fb      	b.n	49c6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    49ce:	0000      	.short	0x0000
    49d0:	200000e0 	.word	0x200000e0

000049d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    49d4:	b510      	push	{r4, lr}
    49d6:	4604      	mov	r4, r0
    49d8:	2906      	cmp	r1, #6
    49da:	d22e      	bcs.n	4a3a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    49dc:	e8df f001 	tbb	[pc, r1]
    49e0:	14031105 	.word	0x14031105
    49e4:	2815      	.short	0x2815
    49e6:	2100      	movs	r1, #0
    49e8:	e006      	b.n	49f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    49ea:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    49ee:	b110      	cbz	r0, 49f6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    49f0:	4620      	mov	r0, r4
    49f2:	f00a faba 	bl	ef6a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    49f6:	2101      	movs	r1, #1
    49f8:	4620      	mov	r0, r4
    49fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    49fe:	f000 b8f7 	b.w	4bf0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4a02:	2003      	movs	r0, #3
    4a04:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4a08:	bd10      	pop	{r4, pc}
    4a0a:	f003 fa8f 	bl	7f2c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4a0e:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4a12:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4a16:	f003 fb4d 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4a1a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4a1e:	1a09      	subs	r1, r1, r0
    4a20:	4808      	ldr	r0, [pc, #32]	; (4a44 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    4a22:	6882      	ldr	r2, [r0, #8]
    4a24:	440a      	add	r2, r1
    4a26:	6082      	str	r2, [r0, #8]
    4a28:	68c2      	ldr	r2, [r0, #12]
    4a2a:	4411      	add	r1, r2
    4a2c:	60c1      	str	r1, [r0, #12]
    4a2e:	bd10      	pop	{r4, pc}
    4a30:	4620      	mov	r0, r4
    4a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4a36:	f00a ba83 	b.w	ef40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4a3a:	f44f 61e8 	mov.w	r1, #1856	; 0x740
    4a3e:	2030      	movs	r0, #48	; 0x30
    4a40:	f7fc fbdc 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a44:	200000e0 	.word	0x200000e0

00004a48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4a48:	b570      	push	{r4, r5, r6, lr}
    4a4a:	460c      	mov	r4, r1
    4a4c:	4605      	mov	r5, r0
    4a4e:	b112      	cbz	r2, 4a56 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    4a50:	f240 716a 	movw	r1, #1898	; 0x76a
    4a54:	e010      	b.n	4a78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    4a56:	f003 fa63 	bl	7f20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4a5a:	4601      	mov	r1, r0
    4a5c:	2200      	movs	r2, #0
    4a5e:	4620      	mov	r0, r4
    4a60:	f00a fb62 	bl	f128 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    4a64:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a68:	462a      	mov	r2, r5
    4a6a:	4905      	ldr	r1, [pc, #20]	; (4a80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    4a6c:	f005 ffb6 	bl	a9dc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4a70:	2800      	cmp	r0, #0
    4a72:	d104      	bne.n	4a7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    4a74:	f240 7153 	movw	r1, #1875	; 0x753
    4a78:	2030      	movs	r0, #48	; 0x30
    4a7a:	f7fc fbbf 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a7e:	bd70      	pop	{r4, r5, r6, pc}
    4a80:	0000f263 	.word	0x0000f263
    4a84:	b510      	push	{r4, lr}
    4a86:	280c      	cmp	r0, #12
    4a88:	d304      	bcc.n	4a94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    4a8a:	f240 318b 	movw	r1, #907	; 0x38b
    4a8e:	2006      	movs	r0, #6
    4a90:	f7fc fbb4 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a94:	4901      	ldr	r1, [pc, #4]	; (4a9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    4a96:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4a9a:	bd10      	pop	{r4, pc}
    4a9c:	0000521c 	.word	0x0000521c
    4aa0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4aa4:	4d15      	ldr	r5, [pc, #84]	; (4afc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    4aa6:	2001      	movs	r0, #1
    4aa8:	7068      	strb	r0, [r5, #1]
    4aaa:	2400      	movs	r4, #0
    4aac:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4ab0:	e00b      	b.n	4aca <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    4ab2:	2100      	movs	r1, #0
    4ab4:	f008 fdd7 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4ab8:	0007      	movs	r7, r0
    4aba:	d009      	beq.n	4ad0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    4abc:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4ac0:	f005 ffbe 	bl	aa40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4ac4:	4638      	mov	r0, r7
    4ac6:	f00a fb22 	bl	f10e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    4aca:	9400      	str	r4, [sp, #0]
    4acc:	9401      	str	r4, [sp, #4]
    4ace:	e00d      	b.n	4aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4ad0:	f44f 7190 	mov.w	r1, #288	; 0x120
    4ad4:	2030      	movs	r0, #48	; 0x30
    4ad6:	f7fc fb91 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ada:	9800      	ldr	r0, [sp, #0]
    4adc:	b130      	cbz	r0, 4aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4ade:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    4ae2:	b119      	cbz	r1, 4aec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4ae4:	8800      	ldrh	r0, [r0, #0]
    4ae6:	42b0      	cmp	r0, r6
    4ae8:	d1e3      	bne.n	4ab2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    4aea:	e004      	b.n	4af6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    4aec:	4668      	mov	r0, sp
    4aee:	f7fc fdc3 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4af2:	2800      	cmp	r0, #0
    4af4:	d0f1      	beq.n	4ada <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    4af6:	706c      	strb	r4, [r5, #1]
    4af8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4afc:	200000e0 	.word	0x200000e0
    4b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b04:	4604      	mov	r4, r0
    4b06:	4839      	ldr	r0, [pc, #228]	; (4bec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    4b08:	461e      	mov	r6, r3
    4b0a:	4690      	mov	r8, r2
    4b0c:	7880      	ldrb	r0, [r0, #2]
    4b0e:	4689      	mov	r9, r1
    4b10:	2500      	movs	r5, #0
    4b12:	2800      	cmp	r0, #0
    4b14:	d063      	beq.n	4bde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4b16:	f007 fb0d 	bl	c134 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4b1a:	b3e0      	cbz	r0, 4b96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4b1c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4b20:	2802      	cmp	r0, #2
    4b22:	d35c      	bcc.n	4bde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4b24:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4b28:	2802      	cmp	r0, #2
    4b2a:	d058      	beq.n	4bde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4b2c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4b30:	bb88      	cbnz	r0, 4b96 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4b32:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4b36:	f7ff ffa5 	bl	4a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4b3a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4b3e:	b281      	uxth	r1, r0
    4b40:	8031      	strh	r1, [r6, #0]
    4b42:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4b46:	2700      	movs	r7, #0
    4b48:	2801      	cmp	r0, #1
    4b4a:	d00d      	beq.n	4b68 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    4b4c:	6920      	ldr	r0, [r4, #16]
    4b4e:	f007 fb3b 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4b52:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4b56:	4442      	add	r2, r8
    4b58:	eba2 0109 	sub.w	r1, r2, r9
    4b5c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4b60:	1a82      	subs	r2, r0, r2
    4b62:	fb01 7502 	mla	r5, r1, r2, r7
    4b66:	e035      	b.n	4bd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    4b68:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4b6c:	2803      	cmp	r0, #3
    4b6e:	d039      	beq.n	4be4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    4b70:	2101      	movs	r1, #1
    4b72:	2000      	movs	r0, #0
    4b74:	f009 f8d4 	bl	dd20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4b78:	6a21      	ldr	r1, [r4, #32]
    4b7a:	1847      	adds	r7, r0, r1
    4b7c:	8831      	ldrh	r1, [r6, #0]
    4b7e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4b82:	f007 fb21 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4b86:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4b8a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4b8e:	1a82      	subs	r2, r0, r2
    4b90:	fb01 5502 	mla	r5, r1, r2, r5
    4b94:	e000      	b.n	4b98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    4b96:	e022      	b.n	4bde <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4b98:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4b9c:	8831      	ldrh	r1, [r6, #0]
    4b9e:	4638      	mov	r0, r7
    4ba0:	f007 fb12 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ba4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4ba8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4bac:	1a41      	subs	r1, r0, r1
    4bae:	440d      	add	r5, r1
    4bb0:	8831      	ldrh	r1, [r6, #0]
    4bb2:	6920      	ldr	r0, [r4, #16]
    4bb4:	f007 fb08 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4bb8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4bbc:	4442      	add	r2, r8
    4bbe:	eba2 0109 	sub.w	r1, r2, r9
    4bc2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4bc6:	1a89      	subs	r1, r1, r2
    4bc8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4bcc:	1a82      	subs	r2, r0, r2
    4bce:	1e49      	subs	r1, r1, #1
    4bd0:	fb01 5502 	mla	r5, r1, r2, r5
    4bd4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4bd8:	2001      	movs	r0, #1
    4bda:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4bde:	4628      	mov	r0, r5
    4be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4be4:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4be8:	e7c6      	b.n	4b78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    4bea:	0000      	.short	0x0000
    4bec:	200000e0 	.word	0x200000e0
    4bf0:	b538      	push	{r3, r4, r5, lr}
    4bf2:	2500      	movs	r5, #0
    4bf4:	4604      	mov	r4, r0
    4bf6:	2901      	cmp	r1, #1
    4bf8:	d102      	bne.n	4c00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    4bfa:	4810      	ldr	r0, [pc, #64]	; (4c3c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    4bfc:	7840      	ldrb	r0, [r0, #1]
    4bfe:	b170      	cbz	r0, 4c1e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    4c00:	2004      	movs	r0, #4
    4c02:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4c06:	bf00      	nop
    4c08:	f00a f9a8 	bl	ef5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    4c0c:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4c10:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4c14:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4c18:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4c1c:	bd38      	pop	{r3, r4, r5, pc}
    4c1e:	9500      	str	r5, [sp, #0]
    4c20:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4c24:	2301      	movs	r3, #1
    4c26:	2200      	movs	r2, #0
    4c28:	4620      	mov	r0, r4
    4c2a:	f000 f809 	bl	4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    4c2e:	2800      	cmp	r0, #0
    4c30:	d0ea      	beq.n	4c08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    4c32:	f240 61b5 	movw	r1, #1717	; 0x6b5
    4c36:	2030      	movs	r0, #48	; 0x30
    4c38:	f7fc fae0 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c3c:	200000e0 	.word	0x200000e0
    4c40:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c44:	b08b      	sub	sp, #44	; 0x2c
    4c46:	4604      	mov	r4, r0
    4c48:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4c4c:	4699      	mov	r9, r3
    4c4e:	460f      	mov	r7, r1
    4c50:	9307      	str	r3, [sp, #28]
    4c52:	9005      	str	r0, [sp, #20]
    4c54:	f00b fd54 	bl	10700 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4c58:	4605      	mov	r5, r0
    4c5a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4c5e:	f7ff ff11 	bl	4a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4c62:	4428      	add	r0, r5
    4c64:	f8ad 0004 	strh.w	r0, [sp, #4]
    4c68:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4c6c:	280d      	cmp	r0, #13
    4c6e:	d004      	beq.n	4c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    4c70:	2000      	movs	r0, #0
    4c72:	9008      	str	r0, [sp, #32]
    4c74:	980d      	ldr	r0, [sp, #52]	; 0x34
    4c76:	b110      	cbz	r0, 4c7e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4c78:	e02e      	b.n	4cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4c7a:	2001      	movs	r0, #1
    4c7c:	e7f9      	b.n	4c72 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    4c7e:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4c82:	2803      	cmp	r0, #3
    4c84:	d128      	bne.n	4cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4c86:	9808      	ldr	r0, [sp, #32]
    4c88:	b330      	cbz	r0, 4cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4c8a:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4c8e:	42b8      	cmp	r0, r7
    4c90:	d122      	bne.n	4cd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4c92:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4c96:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4c9a:	6920      	ldr	r0, [r4, #16]
    4c9c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4ca0:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4ca4:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4ca8:	4408      	add	r0, r1
    4caa:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4cae:	4620      	mov	r0, r4
    4cb0:	f000 fac0 	bl	5234 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4cb4:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4cb8:	6220      	str	r0, [r4, #32]
    4cba:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4cbe:	84a0      	strh	r0, [r4, #36]	; 0x24
    4cc0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4cc4:	6120      	str	r0, [r4, #16]
    4cc6:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4cca:	8320      	strh	r0, [r4, #24]
    4ccc:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4cd0:	8360      	strh	r0, [r4, #26]
    4cd2:	2002      	movs	r0, #2
    4cd4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4cd8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4cdc:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4ce0:	1a38      	subs	r0, r7, r0
    4ce2:	fa0f fa80 	sxth.w	sl, r0
    4ce6:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4cea:	1a38      	subs	r0, r7, r0
    4cec:	fa0f f880 	sxth.w	r8, r0
    4cf0:	f1b8 0f00 	cmp.w	r8, #0
    4cf4:	da08      	bge.n	4d08 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4cf6:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4cfa:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4cfe:	46d0      	mov	r8, sl
    4d00:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4d04:	2001      	movs	r0, #1
    4d06:	9007      	str	r0, [sp, #28]
    4d08:	ab01      	add	r3, sp, #4
    4d0a:	4652      	mov	r2, sl
    4d0c:	4641      	mov	r1, r8
    4d0e:	4620      	mov	r0, r4
    4d10:	f7ff fef6 	bl	4b00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    4d14:	9004      	str	r0, [sp, #16]
    4d16:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4d1a:	f8df b334 	ldr.w	fp, [pc, #820]	; 5050 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    4d1e:	b140      	cbz	r0, 4d32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    4d20:	2801      	cmp	r0, #1
    4d22:	d07d      	beq.n	4e20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4d24:	2802      	cmp	r0, #2
    4d26:	d051      	beq.n	4dcc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    4d28:	2803      	cmp	r0, #3
    4d2a:	d07a      	beq.n	4e22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    4d2c:	f240 5143 	movw	r1, #1347	; 0x543
    4d30:	e18a      	b.n	5048 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4d32:	2101      	movs	r1, #1
    4d34:	2000      	movs	r0, #0
    4d36:	f008 fff3 	bl	dd20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d3a:	4606      	mov	r6, r0
    4d3c:	6a20      	ldr	r0, [r4, #32]
    4d3e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4d42:	4430      	add	r0, r6
    4d44:	f007 fa40 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d48:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d4c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4d50:	6920      	ldr	r0, [r4, #16]
    4d52:	f007 fa39 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d56:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4d5a:	a907      	add	r1, sp, #28
    4d5c:	a806      	add	r0, sp, #24
    4d5e:	f003 f847 	bl	7df0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4d62:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4d6a:	f006 f9a3 	bl	b0b4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4d6e:	4682      	mov	sl, r0
    4d70:	4620      	mov	r0, r4
    4d72:	f00a f8e5 	bl	ef40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4d76:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4d7a:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4d7e:	f003 f9c5 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4d82:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4d86:	4401      	add	r1, r0
    4d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4d8c:	fbb1 f0f0 	udiv	r0, r1, r0
    4d90:	6a21      	ldr	r1, [r4, #32]
    4d92:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4d96:	4431      	add	r1, r6
    4d98:	1a08      	subs	r0, r1, r0
    4d9a:	1a81      	subs	r1, r0, r2
    4d9c:	4441      	add	r1, r8
    4d9e:	3920      	subs	r1, #32
    4da0:	eba1 060a 	sub.w	r6, r1, sl
    4da4:	0050      	lsls	r0, r2, #1
    4da6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4da8:	3060      	adds	r0, #96	; 0x60
    4daa:	4401      	add	r1, r0
    4dac:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4db0:	f00a f936 	bl	f020 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4db4:	3022      	adds	r0, #34	; 0x22
    4db6:	f8cb 0014 	str.w	r0, [fp, #20]
    4dba:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4dbe:	1a30      	subs	r0, r6, r0
    4dc0:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    4dc4:	d258      	bcs.n	4e78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    4dc6:	f240 41dc 	movw	r1, #1244	; 0x4dc
    4dca:	e13d      	b.n	5048 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4dcc:	6a21      	ldr	r1, [r4, #32]
    4dce:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4dd2:	4408      	add	r0, r1
    4dd4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4dd8:	f007 f9f6 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ddc:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4de0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4de4:	6920      	ldr	r0, [r4, #16]
    4de6:	f007 f9ef 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4dea:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4dee:	4620      	mov	r0, r4
    4df0:	f00a f8a6 	bl	ef40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4df4:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4df8:	bb10      	cbnz	r0, 4e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4dfa:	f1b9 0f00 	cmp.w	r9, #0
    4dfe:	d01f      	beq.n	4e40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    4e00:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4e04:	4640      	mov	r0, r8
    4e06:	f003 f981 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4e0a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4e0e:	4401      	add	r1, r0
    4e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4e14:	fbb1 f0f0 	udiv	r0, r1, r0
    4e18:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4e1c:	4408      	add	r0, r1
    4e1e:	e001      	b.n	4e24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    4e20:	e02b      	b.n	4e7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    4e22:	e047      	b.n	4eb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    4e24:	6a22      	ldr	r2, [r4, #32]
    4e26:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4e2a:	4411      	add	r1, r2
    4e2c:	1a0e      	subs	r6, r1, r0
    4e2e:	4640      	mov	r0, r8
    4e30:	f003 f940 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4e34:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4e38:	1a08      	subs	r0, r1, r0
    4e3a:	4406      	add	r6, r0
    4e3c:	3e20      	subs	r6, #32
    4e3e:	e006      	b.n	4e4e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    4e40:	6a21      	ldr	r1, [r4, #32]
    4e42:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4e46:	4408      	add	r0, r1
    4e48:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4e4c:	1a46      	subs	r6, r0, r1
    4e4e:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4e52:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    4e56:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    4e5a:	fb01 0002 	mla	r0, r1, r2, r0
    4e5e:	0040      	lsls	r0, r0, #1
    4e60:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4e62:	3060      	adds	r0, #96	; 0x60
    4e64:	4401      	add	r1, r0
    4e66:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4e6a:	f00a f8d9 	bl	f020 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4e6e:	f8cb 0014 	str.w	r0, [fp, #20]
    4e72:	2001      	movs	r0, #1
    4e74:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e78:	e061      	b.n	4f3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    4e7a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4e7e:	6920      	ldr	r0, [r4, #16]
    4e80:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4e84:	1a86      	subs	r6, r0, r2
    4e86:	eb01 000a 	add.w	r0, r1, sl
    4e8a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4e8e:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    4e92:	1a40      	subs	r0, r0, r1
    4e94:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    4e98:	1e40      	subs	r0, r0, #1
    4e9a:	fb0c 3101 	mla	r1, ip, r1, r3
    4e9e:	fb00 1002 	mla	r0, r0, r2, r1
    4ea2:	0040      	lsls	r0, r0, #1
    4ea4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4ea6:	3060      	adds	r0, #96	; 0x60
    4ea8:	4401      	add	r1, r0
    4eaa:	fb06 f608 	mul.w	r6, r6, r8
    4eae:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4eb2:	e040      	b.n	4f36 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    4eb4:	6920      	ldr	r0, [r4, #16]
    4eb6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4eba:	fb00 f008 	mul.w	r0, r0, r8
    4ebe:	fb08 0611 	mls	r6, r8, r1, r0
    4ec2:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    4ec6:	2825      	cmp	r0, #37	; 0x25
    4ec8:	d003      	beq.n	4ed2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    4eca:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4ece:	2825      	cmp	r0, #37	; 0x25
    4ed0:	d109      	bne.n	4ee6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    4ed2:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4ed6:	1a38      	subs	r0, r7, r0
    4ed8:	b200      	sxth	r0, r0
    4eda:	2800      	cmp	r0, #0
    4edc:	db03      	blt.n	4ee6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    4ede:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    4ee2:	b100      	cbz	r0, 4ee6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    4ee4:	9005      	str	r0, [sp, #20]
    4ee6:	9807      	ldr	r0, [sp, #28]
    4ee8:	b1d8      	cbz	r0, 4f22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4eea:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4eee:	b9c0      	cbnz	r0, 4f22 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4ef0:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d07d      	beq.n	4ff4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    4ef8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4efc:	f003 f906 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f00:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f04:	4401      	add	r1, r0
    4f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f0a:	fbb1 f0f0 	udiv	r0, r1, r0
    4f0e:	1a36      	subs	r6, r6, r0
    4f10:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f14:	f003 f8ce 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4f18:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4f1c:	1a08      	subs	r0, r1, r0
    4f1e:	4406      	add	r6, r0
    4f20:	3e20      	subs	r6, #32
    4f22:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4f26:	eb01 000a 	add.w	r0, r1, sl
    4f2a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    4f2e:	4348      	muls	r0, r1
    4f30:	0041      	lsls	r1, r0, #1
    4f32:	3160      	adds	r1, #96	; 0x60
    4f34:	9805      	ldr	r0, [sp, #20]
    4f36:	f00a f873 	bl	f020 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4f3a:	f8cb 0014 	str.w	r0, [fp, #20]
    4f3e:	9804      	ldr	r0, [sp, #16]
    4f40:	f8db 2014 	ldr.w	r2, [fp, #20]
    4f44:	1a31      	subs	r1, r6, r0
    4f46:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    4f4a:	6920      	ldr	r0, [r4, #16]
    4f4c:	1b80      	subs	r0, r0, r6
    4f4e:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    4f52:	f8cb 0018 	str.w	r0, [fp, #24]
    4f56:	4282      	cmp	r2, r0
    4f58:	d800      	bhi.n	4f5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    4f5a:	4610      	mov	r0, r2
    4f5c:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    4f60:	2600      	movs	r6, #0
    4f62:	702e      	strb	r6, [r5, #0]
    4f64:	2064      	movs	r0, #100	; 0x64
    4f66:	8128      	strh	r0, [r5, #8]
    4f68:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    4f6c:	1851      	adds	r1, r2, r1
    4f6e:	4170      	adcs	r0, r6
    4f70:	e9c5 1004 	strd	r1, r0, [r5, #16]
    4f74:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4f78:	f009 fa4a 	bl	e410 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    4f7c:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    4f80:	4408      	add	r0, r1
    4f82:	6068      	str	r0, [r5, #4]
    4f84:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    4f88:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4f8c:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    4f90:	72ae      	strb	r6, [r5, #10]
    4f92:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    4f96:	1bc0      	subs	r0, r0, r7
    4f98:	b200      	sxth	r0, r0
    4f9a:	2800      	cmp	r0, #0
    4f9c:	dd01      	ble.n	4fa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    4f9e:	2002      	movs	r0, #2
    4fa0:	72a8      	strb	r0, [r5, #10]
    4fa2:	9808      	ldr	r0, [sp, #32]
    4fa4:	b338      	cbz	r0, 4ff6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    4fa6:	f1b9 0f00 	cmp.w	r9, #0
    4faa:	d01c      	beq.n	4fe6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4fac:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    4fb0:	b3f1      	cbz	r1, 5030 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    4fb2:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4fb6:	bf00      	nop
    4fb8:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4fbc:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    4fc0:	1c40      	adds	r0, r0, #1
    4fc2:	4342      	muls	r2, r0
    4fc4:	428a      	cmp	r2, r1
    4fc6:	d20e      	bcs.n	4fe6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4fc8:	7aa8      	ldrb	r0, [r5, #10]
    4fca:	b160      	cbz	r0, 4fe6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    4fcc:	72ae      	strb	r6, [r5, #10]
    4fce:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    4fd2:	1c40      	adds	r0, r0, #1
    4fd4:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    4fd8:	f7fe fabe 	bl	3558 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    4fdc:	f000 0007 	and.w	r0, r0, #7
    4fe0:	1c40      	adds	r0, r0, #1
    4fe2:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    4fe6:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    4fea:	4629      	mov	r1, r5
    4fec:	f00a f82a 	bl	f044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    4ff0:	b340      	cbz	r0, 5044 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    4ff2:	e001      	b.n	4ff8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    4ff4:	e009      	b.n	500a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    4ff6:	e00b      	b.n	5010 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    4ff8:	980d      	ldr	r0, [sp, #52]	; 0x34
    4ffa:	f080 0001 	eor.w	r0, r0, #1
    4ffe:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    5002:	2000      	movs	r0, #0
    5004:	b00f      	add	sp, #60	; 0x3c
    5006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    500a:	f240 512e 	movw	r1, #1326	; 0x52e
    500e:	e01b      	b.n	5048 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    5010:	f1b9 0f00 	cmp.w	r9, #0
    5014:	d1ca      	bne.n	4fac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    5016:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    501a:	2800      	cmp	r0, #0
    501c:	d0e3      	beq.n	4fe6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    501e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5022:	6920      	ldr	r0, [r4, #16]
    5024:	1a41      	subs	r1, r0, r1
    5026:	4628      	mov	r0, r5
    5028:	f008 fe8c 	bl	dd44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    502c:	0400      	lsls	r0, r0, #16
    502e:	e000      	b.n	5032 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    5030:	e006      	b.n	5040 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    5032:	0c00      	lsrs	r0, r0, #16
    5034:	d0d7      	beq.n	4fe6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5036:	9918      	ldr	r1, [sp, #96]	; 0x60
    5038:	b101      	cbz	r1, 503c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    503a:	8008      	strh	r0, [r1, #0]
    503c:	2001      	movs	r0, #1
    503e:	e7e1      	b.n	5004 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    5040:	2000      	movs	r0, #0
    5042:	e7b9      	b.n	4fb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    5044:	f240 518c 	movw	r1, #1420	; 0x58c
    5048:	2030      	movs	r0, #48	; 0x30
    504a:	f7fc f8d7 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    504e:	0000      	.short	0x0000
    5050:	200000e0 	.word	0x200000e0
    5054:	b570      	push	{r4, r5, r6, lr}
    5056:	4604      	mov	r4, r0
    5058:	f00b fc4c 	bl	108f4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    505c:	2864      	cmp	r0, #100	; 0x64
    505e:	d901      	bls.n	5064 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    5060:	4605      	mov	r5, r0
    5062:	e000      	b.n	5066 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    5064:	2564      	movs	r5, #100	; 0x64
    5066:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    506a:	2128      	movs	r1, #40	; 0x28
    506c:	f009 fef6 	bl	ee5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5070:	4428      	add	r0, r5
    5072:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5076:	f500 7010 	add.w	r0, r0, #576	; 0x240
    507a:	180e      	adds	r6, r1, r0
    507c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5080:	2128      	movs	r1, #40	; 0x28
    5082:	f009 feeb 	bl	ee5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5086:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    508a:	4620      	mov	r0, r4
    508c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    508e:	f009 f95e 	bl	e34e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5092:	4605      	mov	r5, r0
    5094:	4632      	mov	r2, r6
    5096:	4620      	mov	r0, r4
    5098:	6921      	ldr	r1, [r4, #16]
    509a:	f009 f958 	bl	e34e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    509e:	4909      	ldr	r1, [pc, #36]	; (50c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    50a0:	4285      	cmp	r5, r0
    50a2:	60c8      	str	r0, [r1, #12]
    50a4:	d200      	bcs.n	50a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    50a6:	4628      	mov	r0, r5
    50a8:	6088      	str	r0, [r1, #8]
    50aa:	780a      	ldrb	r2, [r1, #0]
    50ac:	b902      	cbnz	r2, 50b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    50ae:	60c8      	str	r0, [r1, #12]
    50b0:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    50b4:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    50b8:	6108      	str	r0, [r1, #16]
    50ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50be:	f005 bf19 	b.w	aef4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    50c2:	0000      	.short	0x0000
    50c4:	200000e0 	.word	0x200000e0
    50c8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    50ca:	4604      	mov	r4, r0
    50cc:	f005 ffe0 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    50d0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    50d4:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    50d8:	1ac0      	subs	r0, r0, r3
    50da:	eb61 0102 	sbc.w	r1, r1, r2
    50de:	2200      	movs	r2, #0
    50e0:	4613      	mov	r3, r2
    50e2:	1a12      	subs	r2, r2, r0
    50e4:	418b      	sbcs	r3, r1
    50e6:	db02      	blt.n	50ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    50e8:	f240 6109 	movw	r1, #1545	; 0x609
    50ec:	e04d      	b.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    50ee:	1c42      	adds	r2, r0, #1
    50f0:	f171 0100 	sbcs.w	r1, r1, #0
    50f4:	db02      	blt.n	50fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b4>
    50f6:	f240 610a 	movw	r1, #1546	; 0x60a
    50fa:	e046      	b.n	518a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    50fc:	6922      	ldr	r2, [r4, #16]
    50fe:	2100      	movs	r1, #0
    5100:	b10a      	cbz	r2, 5106 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6be>
    5102:	fbb0 f1f2 	udiv	r1, r0, r2
    5106:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    510a:	280d      	cmp	r0, #13
    510c:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5110:	d01b      	beq.n	514a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x702>
    5112:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    5116:	1853      	adds	r3, r2, r1
    5118:	1ac3      	subs	r3, r0, r3
    511a:	b21b      	sxth	r3, r3
    511c:	2b00      	cmp	r3, #0
    511e:	db01      	blt.n	5124 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6dc>
    5120:	1c40      	adds	r0, r0, #1
    5122:	e001      	b.n	5128 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    5124:	1c49      	adds	r1, r1, #1
    5126:	1850      	adds	r0, r2, r1
    5128:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    512c:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    5130:	f88d 0000 	strb.w	r0, [sp]
    5134:	9800      	ldr	r0, [sp, #0]
    5136:	9000      	str	r0, [sp, #0]
    5138:	f89d 0000 	ldrb.w	r0, [sp]
    513c:	b940      	cbnz	r0, 5150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    513e:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5142:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    5146:	4288      	cmp	r0, r1
    5148:	d102      	bne.n	5150 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    514a:	1c40      	adds	r0, r0, #1
    514c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5150:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    5154:	1c40      	adds	r0, r0, #1
    5156:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    515a:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    515e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    5162:	1a40      	subs	r0, r0, r1
    5164:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5168:	1e40      	subs	r0, r0, #1
    516a:	4408      	add	r0, r1
    516c:	b285      	uxth	r5, r0
    516e:	e026      	b.n	51be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5170:	a801      	add	r0, sp, #4
    5172:	2300      	movs	r3, #0
    5174:	9000      	str	r0, [sp, #0]
    5176:	461a      	mov	r2, r3
    5178:	4620      	mov	r0, r4
    517a:	f7ff fd61 	bl	4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    517e:	2800      	cmp	r0, #0
    5180:	d03a      	beq.n	51f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    5182:	2801      	cmp	r0, #1
    5184:	d004      	beq.n	5190 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x748>
    5186:	f240 6149 	movw	r1, #1609	; 0x649
    518a:	2030      	movs	r0, #48	; 0x30
    518c:	f7fc f836 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5190:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5194:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    5198:	1a42      	subs	r2, r0, r1
    519a:	b212      	sxth	r2, r2
    519c:	2a00      	cmp	r2, #0
    519e:	da09      	bge.n	51b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    51a0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    51a4:	4402      	add	r2, r0
    51a6:	1aaa      	subs	r2, r5, r2
    51a8:	b212      	sxth	r2, r2
    51aa:	2a00      	cmp	r2, #0
    51ac:	da02      	bge.n	51b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    51ae:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    51b2:	e004      	b.n	51be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    51b4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    51b8:	4408      	add	r0, r1
    51ba:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    51be:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    51c2:	1a68      	subs	r0, r5, r1
    51c4:	b200      	sxth	r0, r0
    51c6:	2800      	cmp	r0, #0
    51c8:	dad2      	bge.n	5170 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x728>
    51ca:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    51ce:	b188      	cbz	r0, 51f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ac>
    51d0:	f05f 0008 	movs.w	r0, #8
    51d4:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    51d8:	220b      	movs	r2, #11
    51da:	4908      	ldr	r1, [pc, #32]	; (51fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>)
    51dc:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    51e0:	f009 f87d 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    51e4:	4620      	mov	r0, r4
    51e6:	f00a f8bd 	bl	f364 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    51ea:	4620      	mov	r0, r4
    51ec:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    51f0:	f009 bf8d 	b.w	f10e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    51f4:	203e      	movs	r0, #62	; 0x3e
    51f6:	e7ed      	b.n	51d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78c>
    51f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    51fa:	0000      	.short	0x0000
    51fc:	0000e61d 	.word	0x0000e61d
    5200:	00000000 	.word	0x00000000
    5204:	00010000 	.word	0x00010000
    5208:	00000000 	.word	0x00000000
    520c:	00010000 	.word	0x00010000
    5210:	00000000 	.word	0x00000000
    5214:	00001e14 	.word	0x00001e14
    5218:	00001130 	.word	0x00001130
    521c:	00fa01f4 	.word	0x00fa01f4
    5220:	00640096 	.word	0x00640096
    5224:	0032004b 	.word	0x0032004b
    5228:	0014001e 	.word	0x0014001e
    522c:	0005000a 	.word	0x0005000a
    5230:	00010002 	.word	0x00010002

00005234 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    5234:	b510      	push	{r4, lr}
    5236:	4604      	mov	r4, r0
    5238:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    523c:	6921      	ldr	r1, [r4, #16]
    523e:	4288      	cmp	r0, r1
    5240:	d109      	bne.n	5256 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5242:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    5246:	8b22      	ldrh	r2, [r4, #24]
    5248:	4291      	cmp	r1, r2
    524a:	d104      	bne.n	5256 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    524c:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    5250:	8b62      	ldrh	r2, [r4, #26]
    5252:	4291      	cmp	r1, r2
    5254:	d014      	beq.n	5280 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    5256:	8821      	ldrh	r1, [r4, #0]
    5258:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    525c:	f008 fc8f 	bl	db7e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5260:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5264:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5268:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    526c:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5270:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5274:	2209      	movs	r2, #9
    5276:	4907      	ldr	r1, [pc, #28]	; (5294 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5278:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    527c:	f009 f843 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5280:	2102      	movs	r1, #2
    5282:	4620      	mov	r0, r4
    5284:	f7fd fd80 	bl	2d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5288:	2000      	movs	r0, #0
    528a:	f804 0f9e 	strb.w	r0, [r4, #158]!
    528e:	2003      	movs	r0, #3
    5290:	70e0      	strb	r0, [r4, #3]
    5292:	bd10      	pop	{r4, pc}
    5294:	0000e661 	.word	0x0000e661

00005298 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    5298:	4806      	ldr	r0, [pc, #24]	; (52b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    529a:	4905      	ldr	r1, [pc, #20]	; (52b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    529c:	6501      	str	r1, [r0, #80]	; 0x50
    529e:	4906      	ldr	r1, [pc, #24]	; (52b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    52a0:	6541      	str	r1, [r0, #84]	; 0x54
    52a2:	4807      	ldr	r0, [pc, #28]	; (52c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    52a4:	4905      	ldr	r1, [pc, #20]	; (52bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    52a6:	6501      	str	r1, [r0, #80]	; 0x50
    52a8:	4906      	ldr	r1, [pc, #24]	; (52c4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    52aa:	6541      	str	r1, [r0, #84]	; 0x54
    52ac:	4770      	bx	lr
    52ae:	0000      	.short	0x0000
    52b0:	00006619 	.word	0x00006619
    52b4:	20000114 	.word	0x20000114
    52b8:	000066fd 	.word	0x000066fd
    52bc:	0000f585 	.word	0x0000f585
    52c0:	200001c0 	.word	0x200001c0
    52c4:	0000f5af 	.word	0x0000f5af

000052c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    52c8:	481e      	ldr	r0, [pc, #120]	; (5344 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    52ca:	491d      	ldr	r1, [pc, #116]	; (5340 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    52cc:	6081      	str	r1, [r0, #8]
    52ce:	491e      	ldr	r1, [pc, #120]	; (5348 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    52d0:	6041      	str	r1, [r0, #4]
    52d2:	491e      	ldr	r1, [pc, #120]	; (534c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    52d4:	6001      	str	r1, [r0, #0]
    52d6:	491e      	ldr	r1, [pc, #120]	; (5350 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    52d8:	6281      	str	r1, [r0, #40]	; 0x28
    52da:	491e      	ldr	r1, [pc, #120]	; (5354 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    52dc:	62c1      	str	r1, [r0, #44]	; 0x2c
    52de:	491e      	ldr	r1, [pc, #120]	; (5358 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    52e0:	60c1      	str	r1, [r0, #12]
    52e2:	491e      	ldr	r1, [pc, #120]	; (535c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    52e4:	6181      	str	r1, [r0, #24]
    52e6:	491e      	ldr	r1, [pc, #120]	; (5360 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    52e8:	6301      	str	r1, [r0, #48]	; 0x30
    52ea:	491e      	ldr	r1, [pc, #120]	; (5364 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    52ec:	6201      	str	r1, [r0, #32]
    52ee:	491e      	ldr	r1, [pc, #120]	; (5368 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    52f0:	64c1      	str	r1, [r0, #76]	; 0x4c
    52f2:	491e      	ldr	r1, [pc, #120]	; (536c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    52f4:	6481      	str	r1, [r0, #72]	; 0x48
    52f6:	491e      	ldr	r1, [pc, #120]	; (5370 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    52f8:	6441      	str	r1, [r0, #68]	; 0x44
    52fa:	491e      	ldr	r1, [pc, #120]	; (5374 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    52fc:	6341      	str	r1, [r0, #52]	; 0x34
    52fe:	491e      	ldr	r1, [pc, #120]	; (5378 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    5300:	61c1      	str	r1, [r0, #28]
    5302:	491e      	ldr	r1, [pc, #120]	; (537c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    5304:	6241      	str	r1, [r0, #36]	; 0x24
    5306:	481f      	ldr	r0, [pc, #124]	; (5384 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    5308:	491d      	ldr	r1, [pc, #116]	; (5380 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    530a:	6081      	str	r1, [r0, #8]
    530c:	491e      	ldr	r1, [pc, #120]	; (5388 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    530e:	61c1      	str	r1, [r0, #28]
    5310:	491e      	ldr	r1, [pc, #120]	; (538c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    5312:	6241      	str	r1, [r0, #36]	; 0x24
    5314:	491e      	ldr	r1, [pc, #120]	; (5390 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    5316:	62c1      	str	r1, [r0, #44]	; 0x2c
    5318:	491e      	ldr	r1, [pc, #120]	; (5394 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    531a:	6101      	str	r1, [r0, #16]
    531c:	491e      	ldr	r1, [pc, #120]	; (5398 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    531e:	6141      	str	r1, [r0, #20]
    5320:	491e      	ldr	r1, [pc, #120]	; (539c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    5322:	6441      	str	r1, [r0, #68]	; 0x44
    5324:	491e      	ldr	r1, [pc, #120]	; (53a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    5326:	6341      	str	r1, [r0, #52]	; 0x34
    5328:	491e      	ldr	r1, [pc, #120]	; (53a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    532a:	6181      	str	r1, [r0, #24]
    532c:	491e      	ldr	r1, [pc, #120]	; (53a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    532e:	6301      	str	r1, [r0, #48]	; 0x30
    5330:	491e      	ldr	r1, [pc, #120]	; (53ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    5332:	6481      	str	r1, [r0, #72]	; 0x48
    5334:	491e      	ldr	r1, [pc, #120]	; (53b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    5336:	64c1      	str	r1, [r0, #76]	; 0x4c
    5338:	491e      	ldr	r1, [pc, #120]	; (53b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    533a:	6381      	str	r1, [r0, #56]	; 0x38
    533c:	4770      	bx	lr
    533e:	0000      	.short	0x0000
    5340:	00006a3d 	.word	0x00006a3d
    5344:	20000114 	.word	0x20000114
    5348:	00006409 	.word	0x00006409
    534c:	00006475 	.word	0x00006475
    5350:	0000f447 	.word	0x0000f447
    5354:	0000f491 	.word	0x0000f491
    5358:	00006535 	.word	0x00006535
    535c:	0000f4a9 	.word	0x0000f4a9
    5360:	00006b01 	.word	0x00006b01
    5364:	000065d1 	.word	0x000065d1
    5368:	0000f419 	.word	0x0000f419
    536c:	0000f3f3 	.word	0x0000f3f3
    5370:	000069b5 	.word	0x000069b5
    5374:	000069e9 	.word	0x000069e9
    5378:	00006a75 	.word	0x00006a75
    537c:	000065dd 	.word	0x000065dd
    5380:	0000f6f9 	.word	0x0000f6f9
    5384:	200001c0 	.word	0x200001c0
    5388:	00006bdd 	.word	0x00006bdd
    538c:	0000f581 	.word	0x0000f581
    5390:	0000f619 	.word	0x0000f619
    5394:	0000f55b 	.word	0x0000f55b
    5398:	0000f6db 	.word	0x0000f6db
    539c:	0000f689 	.word	0x0000f689
    53a0:	0000f6b9 	.word	0x0000f6b9
    53a4:	00006b69 	.word	0x00006b69
    53a8:	0000f71b 	.word	0x0000f71b
    53ac:	0000f5df 	.word	0x0000f5df
    53b0:	0000f609 	.word	0x0000f609
    53b4:	0000f6d7 	.word	0x0000f6d7

000053b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    53b8:	4806      	ldr	r0, [pc, #24]	; (53d4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    53ba:	4905      	ldr	r1, [pc, #20]	; (53d0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    53bc:	6581      	str	r1, [r0, #88]	; 0x58
    53be:	4906      	ldr	r1, [pc, #24]	; (53d8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    53c0:	6601      	str	r1, [r0, #96]	; 0x60
    53c2:	4807      	ldr	r0, [pc, #28]	; (53e0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    53c4:	4905      	ldr	r1, [pc, #20]	; (53dc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    53c6:	6581      	str	r1, [r0, #88]	; 0x58
    53c8:	4906      	ldr	r1, [pc, #24]	; (53e4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    53ca:	65c1      	str	r1, [r0, #92]	; 0x5c
    53cc:	4770      	bx	lr
    53ce:	0000      	.short	0x0000
    53d0:	0000677d 	.word	0x0000677d
    53d4:	20000114 	.word	0x20000114
    53d8:	00006861 	.word	0x00006861
    53dc:	0000f63f 	.word	0x0000f63f
    53e0:	200001c0 	.word	0x200001c0
    53e4:	0000f669 	.word	0x0000f669

000053e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    53e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53ea:	4c7c      	ldr	r4, [pc, #496]	; (55dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    53ec:	2101      	movs	r1, #1
    53ee:	f1a4 0610 	sub.w	r6, r4, #16
    53f2:	7021      	strb	r1, [r4, #0]
    53f4:	2500      	movs	r5, #0
    53f6:	6060      	str	r0, [r4, #4]
    53f8:	8075      	strh	r5, [r6, #2]
    53fa:	7075      	strb	r5, [r6, #1]
    53fc:	7035      	strb	r5, [r6, #0]
    53fe:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    5402:	8800      	ldrh	r0, [r0, #0]
    5404:	f7fc fb0c 	bl	1a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5408:	b180      	cbz	r0, 542c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    540a:	6860      	ldr	r0, [r4, #4]
    540c:	8800      	ldrh	r0, [r0, #0]
    540e:	f7fc fd6f 	bl	1ef0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5412:	6860      	ldr	r0, [r4, #4]
    5414:	8800      	ldrh	r0, [r0, #0]
    5416:	f7fc fd13 	bl	1e40 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    541a:	6860      	ldr	r0, [r4, #4]
    541c:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5420:	b1c9      	cbz	r1, 5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5422:	3080      	adds	r0, #128	; 0x80
    5424:	f009 ffad 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5428:	b118      	cbz	r0, 5432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    542a:	e014      	b.n	5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    542c:	f640 5159 	movw	r1, #3417	; 0xd59
    5430:	e06c      	b.n	550c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    5432:	6860      	ldr	r0, [r4, #4]
    5434:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5438:	f88d 1000 	strb.w	r1, [sp]
    543c:	9900      	ldr	r1, [sp, #0]
    543e:	9100      	str	r1, [sp, #0]
    5440:	f89d 1000 	ldrb.w	r1, [sp]
    5444:	b139      	cbz	r1, 5456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5446:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    544a:	2301      	movs	r3, #1
    544c:	4619      	mov	r1, r3
    544e:	3080      	adds	r0, #128	; 0x80
    5450:	f008 fbae 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5454:	b180      	cbz	r0, 5478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    5456:	6860      	ldr	r0, [r4, #4]
    5458:	3080      	adds	r0, #128	; 0x80
    545a:	f009 ff92 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    545e:	b128      	cbz	r0, 546c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    5460:	6860      	ldr	r0, [r4, #4]
    5462:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5466:	bf00      	nop
    5468:	f000 fbb4 	bl	5bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>
    546c:	6860      	ldr	r0, [r4, #4]
    546e:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    5472:	b189      	cbz	r1, 5498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5474:	80b5      	strh	r5, [r6, #4]
    5476:	e01e      	b.n	54b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    5478:	6860      	ldr	r0, [r4, #4]
    547a:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    547e:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5482:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5486:	2100      	movs	r1, #0
    5488:	2002      	movs	r0, #2
    548a:	f000 fe63 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    548e:	6860      	ldr	r0, [r4, #4]
    5490:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    5494:	2002      	movs	r0, #2
    5496:	e7e7      	b.n	5468 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    5498:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    549c:	f88d 1000 	strb.w	r1, [sp]
    54a0:	9900      	ldr	r1, [sp, #0]
    54a2:	9100      	str	r1, [sp, #0]
    54a4:	f89d 1000 	ldrb.w	r1, [sp]
    54a8:	b919      	cbnz	r1, 54b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    54aa:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    54ac:	8b02      	ldrh	r2, [r0, #24]
    54ae:	4291      	cmp	r1, r2
    54b0:	d800      	bhi.n	54b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    54b2:	8b01      	ldrh	r1, [r0, #24]
    54b4:	80b1      	strh	r1, [r6, #4]
    54b6:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    54ba:	1e49      	subs	r1, r1, #1
    54bc:	b28f      	uxth	r7, r1
    54be:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    54c2:	4439      	add	r1, r7
    54c4:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    54c8:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    54cc:	4439      	add	r1, r7
    54ce:	8001      	strh	r1, [r0, #0]
    54d0:	f001 fbb2 	bl	6c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    54d4:	b120      	cbz	r0, 54e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    54d6:	6860      	ldr	r0, [r4, #4]
    54d8:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    54dc:	4439      	add	r1, r7
    54de:	6001      	str	r1, [r0, #0]
    54e0:	6861      	ldr	r1, [r4, #4]
    54e2:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    54e6:	2801      	cmp	r0, #1
    54e8:	d802      	bhi.n	54f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    54ea:	1c40      	adds	r0, r0, #1
    54ec:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    54f0:	b10f      	cbz	r7, 54f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    54f2:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    54f6:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    54fa:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    54fe:	f101 0080 	add.w	r0, r1, #128	; 0x80
    5502:	f008 fcf9 	bl	def8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    5506:	b120      	cbz	r0, 5512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    5508:	f44f 615a 	mov.w	r1, #3488	; 0xda0
    550c:	2031      	movs	r0, #49	; 0x31
    550e:	f7fb fe75 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5512:	6860      	ldr	r0, [r4, #4]
    5514:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5518:	290a      	cmp	r1, #10
    551a:	d001      	beq.n	5520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    551c:	290b      	cmp	r1, #11
    551e:	d119      	bne.n	5554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5520:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5524:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    5528:	1ad2      	subs	r2, r2, r3
    552a:	b212      	sxth	r2, r2
    552c:	2a00      	cmp	r2, #0
    552e:	db11      	blt.n	5554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5530:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5534:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    5538:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    553c:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    5540:	2103      	movs	r1, #3
    5542:	f7fd fc21 	bl	2d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5546:	6860      	ldr	r0, [r4, #4]
    5548:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    554c:	21ff      	movs	r1, #255	; 0xff
    554e:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    5552:	e026      	b.n	55a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5554:	2925      	cmp	r1, #37	; 0x25
    5556:	d111      	bne.n	557c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5558:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    555c:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5560:	1a89      	subs	r1, r1, r2
    5562:	b209      	sxth	r1, r1
    5564:	2900      	cmp	r1, #0
    5566:	db09      	blt.n	557c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5568:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    556c:	f000 feac 	bl	62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5570:	2800      	cmp	r0, #0
    5572:	6860      	ldr	r0, [r4, #4]
    5574:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    5578:	d029      	beq.n	55ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    557a:	e012      	b.n	55a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    557c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5580:	2925      	cmp	r1, #37	; 0x25
    5582:	d001      	beq.n	5588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5584:	2927      	cmp	r1, #39	; 0x27
    5586:	d10c      	bne.n	55a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5588:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    558c:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5590:	1a89      	subs	r1, r1, r2
    5592:	b209      	sxth	r1, r1
    5594:	2900      	cmp	r1, #0
    5596:	db04      	blt.n	55a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5598:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    559c:	f000 fe94 	bl	62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    55a0:	b1a8      	cbz	r0, 55ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    55a2:	480f      	ldr	r0, [pc, #60]	; (55e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    55a4:	9000      	str	r0, [sp, #0]
    55a6:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    55aa:	4b0e      	ldr	r3, [pc, #56]	; (55e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    55ac:	4a0e      	ldr	r2, [pc, #56]	; (55e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    55ae:	f7fc fd2d 	bl	200c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    55b2:	6860      	ldr	r0, [r4, #4]
    55b4:	2301      	movs	r3, #1
    55b6:	2105      	movs	r1, #5
    55b8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    55bc:	3080      	adds	r0, #128	; 0x80
    55be:	f008 faf7 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    55c2:	2800      	cmp	r0, #0
    55c4:	d009      	beq.n	55da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    55c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    55ca:	f7fc bd19 	b.w	2000 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    55ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    55d2:	2100      	movs	r1, #0
    55d4:	4608      	mov	r0, r1
    55d6:	f000 bbc9 	b.w	5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    55da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55dc:	2000010c 	.word	0x2000010c
    55e0:	00005d6d 	.word	0x00005d6d
    55e4:	000058a9 	.word	0x000058a9
    55e8:	00006215 	.word	0x00006215
    55ec:	4804      	ldr	r0, [pc, #16]	; (5600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    55ee:	2100      	movs	r1, #0
    55f0:	6840      	ldr	r0, [r0, #4]
    55f2:	f820 1fd8 	strh.w	r1, [r0, #216]!
    55f6:	7881      	ldrb	r1, [r0, #2]
    55f8:	1c49      	adds	r1, r1, #1
    55fa:	7081      	strb	r1, [r0, #2]
    55fc:	4770      	bx	lr
    55fe:	0000      	.short	0x0000
    5600:	2000010c 	.word	0x2000010c
    5604:	4807      	ldr	r0, [pc, #28]	; (5624 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    5606:	b510      	push	{r4, lr}
    5608:	6841      	ldr	r1, [r0, #4]
    560a:	f811 0fda 	ldrb.w	r0, [r1, #218]!
    560e:	1e40      	subs	r0, r0, #1
    5610:	b240      	sxtb	r0, r0
    5612:	7008      	strb	r0, [r1, #0]
    5614:	2800      	cmp	r0, #0
    5616:	da04      	bge.n	5622 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5618:	f240 2101 	movw	r1, #513	; 0x201
    561c:	2031      	movs	r0, #49	; 0x31
    561e:	f7fb fded 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5622:	bd10      	pop	{r4, pc}
    5624:	2000010c 	.word	0x2000010c
    5628:	491d      	ldr	r1, [pc, #116]	; (56a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    562a:	b508      	push	{r3, lr}
    562c:	6849      	ldr	r1, [r1, #4]
    562e:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    5632:	b1c0      	cbz	r0, 5666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    5634:	2a11      	cmp	r2, #17
    5636:	d006      	beq.n	5646 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    5638:	2a15      	cmp	r2, #21
    563a:	d007      	beq.n	564c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    563c:	2a16      	cmp	r2, #22
    563e:	d009      	beq.n	5654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    5640:	2a1c      	cmp	r2, #28
    5642:	d128      	bne.n	5696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5644:	e009      	b.n	565a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5646:	2101      	movs	r1, #1
    5648:	200b      	movs	r0, #11
    564a:	e008      	b.n	565e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    564c:	4814      	ldr	r0, [pc, #80]	; (56a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    564e:	f009 ff3c 	bl	f4ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x166>
    5652:	e006      	b.n	5662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    5654:	f000 fd9c 	bl	6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda8>
    5658:	e003      	b.n	5662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    565a:	2101      	movs	r1, #1
    565c:	2006      	movs	r0, #6
    565e:	f000 fd79 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5662:	2001      	movs	r0, #1
    5664:	bd08      	pop	{r3, pc}
    5666:	2a22      	cmp	r2, #34	; 0x22
    5668:	d004      	beq.n	5674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    566a:	2a2f      	cmp	r2, #47	; 0x2f
    566c:	d113      	bne.n	5696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    566e:	2101      	movs	r1, #1
    5670:	2011      	movs	r0, #17
    5672:	e7f4      	b.n	565e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5674:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5678:	2802      	cmp	r0, #2
    567a:	d00e      	beq.n	569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    567c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5680:	2801      	cmp	r0, #1
    5682:	d108      	bne.n	5696 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5684:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5688:	f88d 0000 	strb.w	r0, [sp]
    568c:	9800      	ldr	r0, [sp, #0]
    568e:	9000      	str	r0, [sp, #0]
    5690:	f89d 0000 	ldrb.w	r0, [sp]
    5694:	b108      	cbz	r0, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    5696:	2000      	movs	r0, #0
    5698:	bd08      	pop	{r3, pc}
    569a:	2101      	movs	r1, #1
    569c:	2017      	movs	r0, #23
    569e:	e7de      	b.n	565e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    56a0:	2000010c 	.word	0x2000010c
    56a4:	b538      	push	{r3, r4, r5, lr}
    56a6:	2800      	cmp	r0, #0
    56a8:	d176      	bne.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    56aa:	4c3c      	ldr	r4, [pc, #240]	; (579c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>)
    56ac:	6860      	ldr	r0, [r4, #4]
    56ae:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    56b2:	07ca      	lsls	r2, r1, #31
    56b4:	d002      	beq.n	56bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    56b6:	2101      	movs	r1, #1
    56b8:	2009      	movs	r0, #9
    56ba:	e069      	b.n	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    56bc:	078a      	lsls	r2, r1, #30
    56be:	d50a      	bpl.n	56d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    56c0:	2101      	movs	r1, #1
    56c2:	200c      	movs	r0, #12
    56c4:	f000 fd46 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    56c8:	6860      	ldr	r0, [r4, #4]
    56ca:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    56ce:	f041 0101 	orr.w	r1, r1, #1
    56d2:	7001      	strb	r1, [r0, #0]
    56d4:	e05e      	b.n	5794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>
    56d6:	074a      	lsls	r2, r1, #29
    56d8:	d502      	bpl.n	56e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    56da:	2101      	movs	r1, #1
    56dc:	2013      	movs	r0, #19
    56de:	e057      	b.n	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    56e0:	070a      	lsls	r2, r1, #28
    56e2:	d506      	bpl.n	56f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    56e4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    56e8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    56ec:	2101      	movs	r1, #1
    56ee:	2007      	movs	r0, #7
    56f0:	e04e      	b.n	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    56f2:	f011 0f30 	tst.w	r1, #48	; 0x30
    56f6:	d047      	beq.n	5788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    56f8:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    56fc:	f88d 1000 	strb.w	r1, [sp]
    5700:	9900      	ldr	r1, [sp, #0]
    5702:	9100      	str	r1, [sp, #0]
    5704:	f89d 1000 	ldrb.w	r1, [sp]
    5708:	bbd9      	cbnz	r1, 5782 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    570a:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    570e:	2500      	movs	r5, #0
    5710:	f88d 1000 	strb.w	r1, [sp]
    5714:	9900      	ldr	r1, [sp, #0]
    5716:	9100      	str	r1, [sp, #0]
    5718:	f89d 1000 	ldrb.w	r1, [sp]
    571c:	b1c1      	cbz	r1, 5750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    571e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5722:	2925      	cmp	r1, #37	; 0x25
    5724:	d02e      	beq.n	5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    5726:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    572a:	2925      	cmp	r1, #37	; 0x25
    572c:	d02a      	beq.n	5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    572e:	2300      	movs	r3, #0
    5730:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5734:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5738:	f008 fdfb 	bl	e332 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    573c:	6860      	ldr	r0, [r4, #4]
    573e:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    5742:	f021 0120 	bic.w	r1, r1, #32
    5746:	f041 0110 	orr.w	r1, r1, #16
    574a:	6001      	str	r1, [r0, #0]
    574c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5750:	6860      	ldr	r0, [r4, #4]
    5752:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    5756:	06c9      	lsls	r1, r1, #27
    5758:	d51e      	bpl.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    575a:	f008 fe05 	bl	e368 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    575e:	2105      	movs	r1, #5
    5760:	6860      	ldr	r0, [r4, #4]
    5762:	f7ff f937 	bl	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5766:	f000 f925 	bl	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    576a:	6861      	ldr	r1, [r4, #4]
    576c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5770:	8bc2      	ldrh	r2, [r0, #30]
    5772:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5776:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5778:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    577c:	2101      	movs	r1, #1
    577e:	2015      	movs	r0, #21
    5780:	e006      	b.n	5790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5782:	e009      	b.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5784:	2301      	movs	r3, #1
    5786:	e7d3      	b.n	5730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    5788:	0648      	lsls	r0, r1, #25
    578a:	d505      	bpl.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    578c:	2101      	movs	r1, #1
    578e:	2024      	movs	r0, #36	; 0x24
    5790:	f000 fce0 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5794:	2001      	movs	r0, #1
    5796:	bd38      	pop	{r3, r4, r5, pc}
    5798:	2000      	movs	r0, #0
    579a:	bd38      	pop	{r3, r4, r5, pc}
    579c:	2000010c 	.word	0x2000010c
    57a0:	b570      	push	{r4, r5, r6, lr}
    57a2:	460d      	mov	r5, r1
    57a4:	4606      	mov	r6, r0
    57a6:	f008 fd02 	bl	e1ae <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    57aa:	4604      	mov	r4, r0
    57ac:	4630      	mov	r0, r6
    57ae:	f008 fd00 	bl	e1b2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    57b2:	4629      	mov	r1, r5
    57b4:	f000 f81e 	bl	57f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    57b8:	b1b8      	cbz	r0, 57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    57ba:	4620      	mov	r0, r4
    57bc:	f008 faa2 	bl	dd04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    57c0:	0001      	movs	r1, r0
    57c2:	d00d      	beq.n	57e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    57c4:	480a      	ldr	r0, [pc, #40]	; (57f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>)
    57c6:	6840      	ldr	r0, [r0, #4]
    57c8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    57cc:	428a      	cmp	r2, r1
    57ce:	d007      	beq.n	57e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    57d0:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    57d4:	2901      	cmp	r1, #1
    57d6:	d005      	beq.n	57e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    57d8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    57dc:	4220      	tst	r0, r4
    57de:	d004      	beq.n	57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    57e0:	2001      	movs	r0, #1
    57e2:	bd70      	pop	{r4, r5, r6, pc}
    57e4:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    57e8:	e7f8      	b.n	57dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    57ea:	2000      	movs	r0, #0
    57ec:	bd70      	pop	{r4, r5, r6, pc}
    57ee:	0000      	.short	0x0000
    57f0:	2000010c 	.word	0x2000010c
    57f4:	b570      	push	{r4, r5, r6, lr}
    57f6:	460d      	mov	r5, r1
    57f8:	4604      	mov	r4, r0
    57fa:	f008 fa83 	bl	dd04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    57fe:	b350      	cbz	r0, 5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5800:	4916      	ldr	r1, [pc, #88]	; (585c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>)
    5802:	6849      	ldr	r1, [r1, #4]
    5804:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    5808:	4282      	cmp	r2, r0
    580a:	d024      	beq.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    580c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5810:	2b01      	cmp	r3, #1
    5812:	d005      	beq.n	5820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5814:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    5818:	4223      	tst	r3, r4
    581a:	d013      	beq.n	5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    581c:	b11d      	cbz	r5, 5826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    581e:	e01a      	b.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5820:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5824:	e7f8      	b.n	5818 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    5826:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    582a:	4221      	tst	r1, r4
    582c:	d113      	bne.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    582e:	b15a      	cbz	r2, 5848 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    5830:	2a04      	cmp	r2, #4
    5832:	d00e      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5834:	2804      	cmp	r0, #4
    5836:	d00c      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5838:	2a08      	cmp	r2, #8
    583a:	d00a      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    583c:	2808      	cmp	r0, #8
    583e:	d008      	beq.n	5852 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5840:	4282      	cmp	r2, r0
    5842:	d908      	bls.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5844:	2000      	movs	r0, #0
    5846:	bd70      	pop	{r4, r5, r6, pc}
    5848:	f240 11a3 	movw	r1, #419	; 0x1a3
    584c:	2006      	movs	r0, #6
    584e:	f7fb fcd5 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5852:	4282      	cmp	r2, r0
    5854:	d3f6      	bcc.n	5844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    5856:	2001      	movs	r0, #1
    5858:	bd70      	pop	{r4, r5, r6, pc}
    585a:	0000      	.short	0x0000
    585c:	2000010c 	.word	0x2000010c
    5860:	b510      	push	{r4, lr}
    5862:	4c10      	ldr	r4, [pc, #64]	; (58a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>)
    5864:	2301      	movs	r3, #1
    5866:	2100      	movs	r1, #0
    5868:	6860      	ldr	r0, [r4, #4]
    586a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    586e:	3080      	adds	r0, #128	; 0x80
    5870:	f008 f99e 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5874:	b140      	cbz	r0, 5888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a0>
    5876:	6860      	ldr	r0, [r4, #4]
    5878:	2301      	movs	r3, #1
    587a:	2104      	movs	r1, #4
    587c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5880:	3080      	adds	r0, #128	; 0x80
    5882:	f008 f995 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5886:	b108      	cbz	r0, 588c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>
    5888:	2000      	movs	r0, #0
    588a:	bd10      	pop	{r4, pc}
    588c:	6860      	ldr	r0, [r4, #4]
    588e:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5892:	2800      	cmp	r0, #0
    5894:	d0f9      	beq.n	588a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5896:	2100      	movs	r1, #0
    5898:	2012      	movs	r0, #18
    589a:	f000 fc5b 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    589e:	2001      	movs	r0, #1
    58a0:	bd10      	pop	{r4, pc}
    58a2:	0000      	.short	0x0000
    58a4:	2000010c 	.word	0x2000010c
    58a8:	490d      	ldr	r1, [pc, #52]	; (58e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f8>)
    58aa:	4602      	mov	r2, r0
    58ac:	7848      	ldrb	r0, [r1, #1]
    58ae:	b9a0      	cbnz	r0, 58da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    58b0:	f101 0010 	add.w	r0, r1, #16
    58b4:	6840      	ldr	r0, [r0, #4]
    58b6:	b142      	cbz	r2, 58ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    58b8:	7889      	ldrb	r1, [r1, #2]
    58ba:	0709      	lsls	r1, r1, #28
    58bc:	d503      	bpl.n	58c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4de>
    58be:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    58c2:	2807      	cmp	r0, #7
    58c4:	d009      	beq.n	58da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    58c6:	2001      	movs	r0, #1
    58c8:	4770      	bx	lr
    58ca:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    58ce:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    58d0:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    58d2:	428a      	cmp	r2, r1
    58d4:	d801      	bhi.n	58da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    58d6:	f7ff b859 	b.w	498c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    58da:	2000      	movs	r0, #0
    58dc:	4770      	bx	lr
    58de:	0000      	.short	0x0000
    58e0:	200000fc 	.word	0x200000fc
    58e4:	b538      	push	{r3, r4, r5, lr}
    58e6:	4c32      	ldr	r4, [pc, #200]	; (59b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>)
    58e8:	4605      	mov	r5, r0
    58ea:	6860      	ldr	r0, [r4, #4]
    58ec:	3080      	adds	r0, #128	; 0x80
    58ee:	f009 fd48 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    58f2:	2800      	cmp	r0, #0
    58f4:	d15b      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    58f6:	2d00      	cmp	r5, #0
    58f8:	d159      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    58fa:	6860      	ldr	r0, [r4, #4]
    58fc:	2301      	movs	r3, #1
    58fe:	4619      	mov	r1, r3
    5900:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5904:	3080      	adds	r0, #128	; 0x80
    5906:	f008 f953 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    590a:	2800      	cmp	r0, #0
    590c:	d14f      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    590e:	6860      	ldr	r0, [r4, #4]
    5910:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5914:	f88d 1000 	strb.w	r1, [sp]
    5918:	9900      	ldr	r1, [sp, #0]
    591a:	9100      	str	r1, [sp, #0]
    591c:	f89d 2000 	ldrb.w	r2, [sp]
    5920:	2100      	movs	r1, #0
    5922:	b142      	cbz	r2, 5936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54e>
    5924:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5928:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    592c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5930:	2100      	movs	r1, #0
    5932:	2002      	movs	r0, #2
    5934:	e030      	b.n	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5936:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    593a:	2301      	movs	r3, #1
    593c:	2104      	movs	r1, #4
    593e:	3080      	adds	r0, #128	; 0x80
    5940:	f008 f936 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5944:	4605      	mov	r5, r0
    5946:	f7ff fead 	bl	56a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    594a:	2800      	cmp	r0, #0
    594c:	d12f      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    594e:	4628      	mov	r0, r5
    5950:	f7ff fe6a 	bl	5628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    5954:	2800      	cmp	r0, #0
    5956:	d12a      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5958:	f7ff ff82 	bl	5860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    595c:	2800      	cmp	r0, #0
    595e:	d126      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5960:	6860      	ldr	r0, [r4, #4]
    5962:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5966:	2909      	cmp	r1, #9
    5968:	d01a      	beq.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    596a:	2d00      	cmp	r5, #0
    596c:	d11f      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    596e:	f000 fb1d 	bl	5fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    5972:	2800      	cmp	r0, #0
    5974:	d11b      	bne.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5976:	6860      	ldr	r0, [r4, #4]
    5978:	2301      	movs	r3, #1
    597a:	2100      	movs	r1, #0
    597c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5980:	3080      	adds	r0, #128	; 0x80
    5982:	f008 f915 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5986:	2800      	cmp	r0, #0
    5988:	d011      	beq.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    598a:	6860      	ldr	r0, [r4, #4]
    598c:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5990:	2800      	cmp	r0, #0
    5992:	d00c      	beq.n	59ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5994:	2100      	movs	r1, #0
    5996:	20ff      	movs	r0, #255	; 0xff
    5998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    599c:	f000 bbda 	b.w	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    59a0:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    59a4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    59a8:	2100      	movs	r1, #0
    59aa:	2007      	movs	r0, #7
    59ac:	e7f4      	b.n	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    59ae:	bd38      	pop	{r3, r4, r5, pc}
    59b0:	2000010c 	.word	0x2000010c
    59b4:	4808      	ldr	r0, [pc, #32]	; (59d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f0>)
    59b6:	6843      	ldr	r3, [r0, #4]
    59b8:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    59bc:	2801      	cmp	r0, #1
    59be:	d006      	beq.n	59ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e6>
    59c0:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    59c4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    59c8:	8818      	ldrh	r0, [r3, #0]
    59ca:	f7fd bd47 	b.w	345c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    59ce:	2002      	movs	r0, #2
    59d0:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    59d4:	4770      	bx	lr
    59d6:	0000      	.short	0x0000
    59d8:	2000010c 	.word	0x2000010c
    59dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59de:	4d2b      	ldr	r5, [pc, #172]	; (5a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    59e0:	0006      	movs	r6, r0
    59e2:	f105 0410 	add.w	r4, r5, #16
    59e6:	d133      	bne.n	5a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    59e8:	f000 f8aa 	bl	5b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    59ec:	f000 f852 	bl	5a94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    59f0:	0006      	movs	r6, r0
    59f2:	d12d      	bne.n	5a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    59f4:	8869      	ldrh	r1, [r5, #2]
    59f6:	0748      	lsls	r0, r1, #29
    59f8:	d506      	bpl.n	5a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    59fa:	6860      	ldr	r0, [r4, #4]
    59fc:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a00:	2806      	cmp	r0, #6
    5a02:	d101      	bne.n	5a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5a04:	2001      	movs	r0, #1
    5a06:	7028      	strb	r0, [r5, #0]
    5a08:	0788      	lsls	r0, r1, #30
    5a0a:	d516      	bpl.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5a0c:	68a8      	ldr	r0, [r5, #8]
    5a0e:	78c0      	ldrb	r0, [r0, #3]
    5a10:	282b      	cmp	r0, #43	; 0x2b
    5a12:	d207      	bcs.n	5a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5a14:	491e      	ldr	r1, [pc, #120]	; (5a90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    5a16:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5a1a:	b119      	cbz	r1, 5a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5a1c:	481b      	ldr	r0, [pc, #108]	; (5a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5a1e:	3010      	adds	r0, #16
    5a20:	4788      	blx	r1
    5a22:	e00a      	b.n	5a3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5a24:	28ff      	cmp	r0, #255	; 0xff
    5a26:	d004      	beq.n	5a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    5a28:	f640 1102 	movw	r1, #2306	; 0x902
    5a2c:	2031      	movs	r0, #49	; 0x31
    5a2e:	f7fb fbe5 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a32:	4816      	ldr	r0, [pc, #88]	; (5a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5a34:	3010      	adds	r0, #16
    5a36:	f009 fd87 	bl	f548 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    5a3a:	78a8      	ldrb	r0, [r5, #2]
    5a3c:	06c0      	lsls	r0, r0, #27
    5a3e:	d507      	bpl.n	5a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5a40:	6860      	ldr	r0, [r4, #4]
    5a42:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5a46:	290a      	cmp	r1, #10
    5a48:	d102      	bne.n	5a50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5a4a:	210b      	movs	r1, #11
    5a4c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5a50:	7868      	ldrb	r0, [r5, #1]
    5a52:	0700      	lsls	r0, r0, #28
    5a54:	d518      	bpl.n	5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5a56:	6860      	ldr	r0, [r4, #4]
    5a58:	2301      	movs	r3, #1
    5a5a:	2105      	movs	r1, #5
    5a5c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a60:	3080      	adds	r0, #128	; 0x80
    5a62:	f008 f8a5 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a66:	b108      	cbz	r0, 5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    5a68:	2608      	movs	r6, #8
    5a6a:	e00d      	b.n	5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5a6c:	2500      	movs	r5, #0
    5a6e:	4669      	mov	r1, sp
    5a70:	2003      	movs	r0, #3
    5a72:	9500      	str	r5, [sp, #0]
    5a74:	f7fc fb8c 	bl	2190 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5a78:	9800      	ldr	r0, [sp, #0]
    5a7a:	b128      	cbz	r0, 5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5a7c:	7205      	strb	r5, [r0, #8]
    5a7e:	222a      	movs	r2, #42	; 0x2a
    5a80:	6861      	ldr	r1, [r4, #4]
    5a82:	9800      	ldr	r0, [sp, #0]
    5a84:	f008 fc2b 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5a88:	4630      	mov	r0, r6
    5a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a8c:	200000fc 	.word	0x200000fc
    5a90:	200001c0 	.word	0x200001c0
    5a94:	b570      	push	{r4, r5, r6, lr}
    5a96:	4d28      	ldr	r5, [pc, #160]	; (5b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5a98:	2000      	movs	r0, #0
    5a9a:	78a9      	ldrb	r1, [r5, #2]
    5a9c:	07c9      	lsls	r1, r1, #31
    5a9e:	d017      	beq.n	5ad0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>
    5aa0:	68e8      	ldr	r0, [r5, #12]
    5aa2:	f105 0410 	add.w	r4, r5, #16
    5aa6:	2301      	movs	r3, #1
    5aa8:	78c6      	ldrb	r6, [r0, #3]
    5aaa:	6860      	ldr	r0, [r4, #4]
    5aac:	2105      	movs	r1, #5
    5aae:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ab2:	3080      	adds	r0, #128	; 0x80
    5ab4:	f008 f87c 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ab8:	b158      	cbz	r0, 5ad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ea>
    5aba:	1eb6      	subs	r6, r6, #2
    5abc:	2e0a      	cmp	r6, #10
    5abe:	d206      	bcs.n	5ace <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    5ac0:	e8df f006 	tbb	[pc, r6]
    5ac4:	05050707 	.word	0x05050707
    5ac8:	05050707 	.word	0x05050707
    5acc:	0707      	.short	0x0707
    5ace:	2008      	movs	r0, #8
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
    5ad2:	68e8      	ldr	r0, [r5, #12]
    5ad4:	f7fd fa78 	bl	2fc8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5ad8:	b338      	cbz	r0, 5b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5ada:	68e8      	ldr	r0, [r5, #12]
    5adc:	78c5      	ldrb	r5, [r0, #3]
    5ade:	b11d      	cbz	r5, 5ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5ae0:	2d01      	cmp	r5, #1
    5ae2:	d001      	beq.n	5ae8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5ae4:	2d16      	cmp	r5, #22
    5ae6:	d113      	bne.n	5b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5ae8:	6860      	ldr	r0, [r4, #4]
    5aea:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5aee:	f008 f8b7 	bl	dc60 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5af2:	b168      	cbz	r0, 5b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5af4:	6861      	ldr	r1, [r4, #4]
    5af6:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5afa:	2820      	cmp	r0, #32
    5afc:	d008      	beq.n	5b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5afe:	2821      	cmp	r0, #33	; 0x21
    5b00:	d003      	beq.n	5b0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    5b02:	2d16      	cmp	r5, #22
    5b04:	d00f      	beq.n	5b26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    5b06:	2002      	movs	r0, #2
    5b08:	bd70      	pop	{r4, r5, r6, pc}
    5b0a:	202e      	movs	r0, #46	; 0x2e
    5b0c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5b10:	2d2b      	cmp	r5, #43	; 0x2b
    5b12:	d20a      	bcs.n	5b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5b14:	4809      	ldr	r0, [pc, #36]	; (5b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    5b16:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5b1a:	b131      	cbz	r1, 5b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b20:	4805      	ldr	r0, [pc, #20]	; (5b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5b22:	3010      	adds	r0, #16
    5b24:	4708      	bx	r1
    5b26:	2020      	movs	r0, #32
    5b28:	bd70      	pop	{r4, r5, r6, pc}
    5b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b2e:	4802      	ldr	r0, [pc, #8]	; (5b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5b30:	3010      	adds	r0, #16
    5b32:	f000 bd59 	b.w	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5b36:	0000      	.short	0x0000
    5b38:	200000fc 	.word	0x200000fc
    5b3c:	20000114 	.word	0x20000114
    5b40:	b570      	push	{r4, r5, r6, lr}
    5b42:	4e23      	ldr	r6, [pc, #140]	; (5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>)
    5b44:	78b0      	ldrb	r0, [r6, #2]
    5b46:	0700      	lsls	r0, r0, #28
    5b48:	d540      	bpl.n	5bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5b4a:	f106 0410 	add.w	r4, r6, #16
    5b4e:	6860      	ldr	r0, [r4, #4]
    5b50:	3080      	adds	r0, #128	; 0x80
    5b52:	f009 fc16 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b56:	b148      	cbz	r0, 5b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    5b58:	6860      	ldr	r0, [r4, #4]
    5b5a:	21fe      	movs	r1, #254	; 0xfe
    5b5c:	2500      	movs	r5, #0
    5b5e:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5b62:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5b66:	291a      	cmp	r1, #26
    5b68:	d10c      	bne.n	5b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79c>
    5b6a:	e004      	b.n	5b76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78e>
    5b6c:	f640 110e 	movw	r1, #2318	; 0x90e
    5b70:	2031      	movs	r0, #49	; 0x31
    5b72:	f7fb fb43 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b76:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5b7a:	f7ff fd43 	bl	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    5b7e:	6860      	ldr	r0, [r4, #4]
    5b80:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5b84:	6860      	ldr	r0, [r4, #4]
    5b86:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b8a:	2920      	cmp	r1, #32
    5b8c:	d002      	beq.n	5b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    5b8e:	2931      	cmp	r1, #49	; 0x31
    5b90:	d113      	bne.n	5bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5b92:	e00b      	b.n	5bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c4>
    5b94:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5b98:	f008 f862 	bl	dc60 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5b9c:	b108      	cbz	r0, 5ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ba>
    5b9e:	202e      	movs	r0, #46	; 0x2e
    5ba0:	e000      	b.n	5ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    5ba2:	2021      	movs	r0, #33	; 0x21
    5ba4:	6861      	ldr	r1, [r4, #4]
    5ba6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5baa:	e006      	b.n	5bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5bac:	2101      	movs	r1, #1
    5bae:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5bb2:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5bb6:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5bba:	6860      	ldr	r0, [r4, #4]
    5bbc:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5bc0:	2907      	cmp	r1, #7
    5bc2:	d103      	bne.n	5bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5bc4:	2102      	movs	r1, #2
    5bc6:	7031      	strb	r1, [r6, #0]
    5bc8:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5bcc:	bd70      	pop	{r4, r5, r6, pc}
    5bce:	0000      	.short	0x0000
    5bd0:	200000fc 	.word	0x200000fc
    5bd4:	b538      	push	{r3, r4, r5, lr}
    5bd6:	4605      	mov	r5, r0
    5bd8:	4668      	mov	r0, sp
    5bda:	f7fc f973 	bl	1ec4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5bde:	b308      	cbz	r0, 5c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    5be0:	2222      	movs	r2, #34	; 0x22
    5be2:	2100      	movs	r1, #0
    5be4:	9800      	ldr	r0, [sp, #0]
    5be6:	f00b f889 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5bea:	2103      	movs	r1, #3
    5bec:	9800      	ldr	r0, [sp, #0]
    5bee:	f008 faf8 	bl	e1e2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5bf2:	9800      	ldr	r0, [sp, #0]
    5bf4:	7801      	ldrb	r1, [r0, #0]
    5bf6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5bfa:	7001      	strb	r1, [r0, #0]
    5bfc:	4629      	mov	r1, r5
    5bfe:	f7fd f9f3 	bl	2fe8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5c02:	4c59      	ldr	r4, [pc, #356]	; (5d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5c04:	2d11      	cmp	r5, #17
    5c06:	d02d      	beq.n	5c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87c>
    5c08:	dc0f      	bgt.n	5c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    5c0a:	f1a5 0502 	sub.w	r5, r5, #2
    5c0e:	2d0d      	cmp	r5, #13
    5c10:	d21f      	bcs.n	5c52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5c12:	e8df f005 	tbb	[pc, r5]
    5c16:	1e21      	.short	0x1e21
    5c18:	219e9e51 	.word	0x219e9e51
    5c1c:	9e1e5e1e 	.word	0x9e1e5e1e
    5c20:	008c343a 	.word	0x008c343a
    5c24:	f640 31b5 	movw	r1, #2997	; 0xbb5
    5c28:	e099      	b.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5c2a:	2d17      	cmp	r5, #23
    5c2c:	d070      	beq.n	5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5c2e:	dc08      	bgt.n	5c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    5c30:	f1a5 0512 	sub.w	r5, r5, #18
    5c34:	2d05      	cmp	r5, #5
    5c36:	d20c      	bcs.n	5c52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5c38:	e8df f005 	tbb	[pc, r5]
    5c3c:	50508b8b 	.word	0x50508b8b
    5c40:	0033      	.short	0x0033
    5c42:	2d23      	cmp	r5, #35	; 0x23
    5c44:	d077      	beq.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5c46:	2d24      	cmp	r5, #36	; 0x24
    5c48:	d075      	beq.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5c4a:	2d25      	cmp	r5, #37	; 0x25
    5c4c:	d073      	beq.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5c4e:	2dff      	cmp	r5, #255	; 0xff
    5c50:	d077      	beq.n	5d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5c52:	f640 4161 	movw	r1, #3169	; 0xc61
    5c56:	e082      	b.n	5d5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5c58:	6860      	ldr	r0, [r4, #4]
    5c5a:	9900      	ldr	r1, [sp, #0]
    5c5c:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5c60:	7108      	strb	r0, [r1, #4]
    5c62:	e076      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5c64:	6860      	ldr	r0, [r4, #4]
    5c66:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5c6a:	9800      	ldr	r0, [sp, #0]
    5c6c:	f008 faa5 	bl	e1ba <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5c70:	6860      	ldr	r0, [r4, #4]
    5c72:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5c76:	9800      	ldr	r0, [sp, #0]
    5c78:	f008 faa3 	bl	e1c2 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5c7c:	e069      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5c7e:	6861      	ldr	r1, [r4, #4]
    5c80:	9800      	ldr	r0, [sp, #0]
    5c82:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5c86:	7101      	strb	r1, [r0, #4]
    5c88:	e063      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5c8a:	9800      	ldr	r0, [sp, #0]
    5c8c:	210c      	movs	r1, #12
    5c8e:	7101      	strb	r1, [r0, #4]
    5c90:	2159      	movs	r1, #89	; 0x59
    5c92:	7141      	strb	r1, [r0, #5]
    5c94:	2100      	movs	r1, #0
    5c96:	7181      	strb	r1, [r0, #6]
    5c98:	214b      	movs	r1, #75	; 0x4b
    5c9a:	71c1      	strb	r1, [r0, #7]
    5c9c:	2112      	movs	r1, #18
    5c9e:	7201      	strb	r1, [r0, #8]
    5ca0:	e057      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5ca2:	9800      	ldr	r0, [sp, #0]
    5ca4:	f8d4 1004 	ldr.w	r1, [r4, #4]
    5ca8:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5cac:	7101      	strb	r1, [r0, #4]
    5cae:	6861      	ldr	r1, [r4, #4]
    5cb0:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5cb4:	7141      	strb	r1, [r0, #5]
    5cb6:	e04c      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5cb8:	6861      	ldr	r1, [r4, #4]
    5cba:	9800      	ldr	r0, [sp, #0]
    5cbc:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5cc0:	f008 fa36 	bl	e130 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5cc4:	6861      	ldr	r1, [r4, #4]
    5cc6:	9800      	ldr	r0, [sp, #0]
    5cc8:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5ccc:	f008 fa2d 	bl	e12a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5cd0:	e03f      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5cd2:	4825      	ldr	r0, [pc, #148]	; (5d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5cd4:	9900      	ldr	r1, [sp, #0]
    5cd6:	f7fd fcd7 	bl	3688 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5cda:	e03a      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5cdc:	6860      	ldr	r0, [r4, #4]
    5cde:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5ce2:	9800      	ldr	r0, [sp, #0]
    5ce4:	f008 fa85 	bl	e1f2 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5ce8:	6860      	ldr	r0, [r4, #4]
    5cea:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5cee:	9800      	ldr	r0, [sp, #0]
    5cf0:	f008 fa83 	bl	e1fa <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5cf4:	6860      	ldr	r0, [r4, #4]
    5cf6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5cfa:	9800      	ldr	r0, [sp, #0]
    5cfc:	f008 fa81 	bl	e202 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5d00:	6860      	ldr	r0, [r4, #4]
    5d02:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5d06:	9800      	ldr	r0, [sp, #0]
    5d08:	f008 fa7f 	bl	e20a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5d0c:	e021      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5d0e:	e7ff      	b.n	5d10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5d10:	6861      	ldr	r1, [r4, #4]
    5d12:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5d16:	2801      	cmp	r0, #1
    5d18:	9800      	ldr	r0, [sp, #0]
    5d1a:	d0c5      	beq.n	5ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c0>
    5d1c:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5d20:	7101      	strb	r1, [r0, #4]
    5d22:	6861      	ldr	r1, [r4, #4]
    5d24:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5d28:	e7c4      	b.n	5cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8cc>
    5d2a:	e004      	b.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5d2c:	e009      	b.n	5d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5d2e:	9800      	ldr	r0, [sp, #0]
    5d30:	f7fd fc5a 	bl	35e8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5d34:	e00d      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5d36:	4a0c      	ldr	r2, [pc, #48]	; (5d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5d38:	4628      	mov	r0, r5
    5d3a:	9900      	ldr	r1, [sp, #0]
    5d3c:	f009 fd41 	bl	f7c2 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5d40:	e007      	b.n	5d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5d42:	6860      	ldr	r0, [r4, #4]
    5d44:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5d48:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5d4c:	9800      	ldr	r0, [sp, #0]
    5d4e:	f008 fa3a 	bl	e1c6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5d52:	f7fc f891 	bl	1e78 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5d56:	2800      	cmp	r0, #0
    5d58:	d104      	bne.n	5d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97c>
    5d5a:	f640 4165 	movw	r1, #3173	; 0xc65
    5d5e:	2031      	movs	r0, #49	; 0x31
    5d60:	f7fb fa4c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d64:	bd38      	pop	{r3, r4, r5, pc}
    5d66:	0000      	.short	0x0000
    5d68:	2000010c 	.word	0x2000010c
    5d6c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5d70:	4e8c      	ldr	r6, [pc, #560]	; (5fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>)
    5d72:	468a      	mov	sl, r1
    5d74:	6870      	ldr	r0, [r6, #4]
    5d76:	8800      	ldrh	r0, [r0, #0]
    5d78:	f7fb fe52 	bl	1a20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5d7c:	0007      	movs	r7, r0
    5d7e:	d00c      	beq.n	5d9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    5d80:	f1a6 0510 	sub.w	r5, r6, #16
    5d84:	f04f 0400 	mov.w	r4, #0
    5d88:	8868      	ldrh	r0, [r5, #2]
    5d8a:	05c0      	lsls	r0, r0, #23
    5d8c:	d50a      	bpl.n	5da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9bc>
    5d8e:	6870      	ldr	r0, [r6, #4]
    5d90:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5d94:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5d98:	e009      	b.n	5dae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c6>
    5d9a:	f640 7145 	movw	r1, #3909	; 0xf45
    5d9e:	2031      	movs	r0, #49	; 0x31
    5da0:	f7fb fa2c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5da4:	6871      	ldr	r1, [r6, #4]
    5da6:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5daa:	1c40      	adds	r0, r0, #1
    5dac:	8008      	strh	r0, [r1, #0]
    5dae:	f000 ff43 	bl	6c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5db2:	f04f 0901 	mov.w	r9, #1
    5db6:	b340      	cbz	r0, 5e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5db8:	8868      	ldrh	r0, [r5, #2]
    5dba:	0500      	lsls	r0, r0, #20
    5dbc:	d506      	bpl.n	5dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5dbe:	6870      	ldr	r0, [r6, #4]
    5dc0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5dc4:	b111      	cbz	r1, 5dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5dc6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5dca:	e01e      	b.n	5e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5dcc:	6870      	ldr	r0, [r6, #4]
    5dce:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5dd2:	1c49      	adds	r1, r1, #1
    5dd4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5dd8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5ddc:	428a      	cmp	r2, r1
    5dde:	d301      	bcc.n	5de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    5de0:	1a53      	subs	r3, r2, r1
    5de2:	e000      	b.n	5de6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fe>
    5de4:	2300      	movs	r3, #0
    5de6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5dea:	f10c 0c05 	add.w	ip, ip, #5
    5dee:	4563      	cmp	r3, ip
    5df0:	d801      	bhi.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5df2:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5df6:	4291      	cmp	r1, r2
    5df8:	d307      	bcc.n	5e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5dfa:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5dfe:	220f      	movs	r2, #15
    5e00:	4969      	ldr	r1, [pc, #420]	; (5fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    5e02:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5e06:	f008 fa7e 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5e0a:	8868      	ldrh	r0, [r5, #2]
    5e0c:	f04f 0b02 	mov.w	fp, #2
    5e10:	f410 7f40 	tst.w	r0, #768	; 0x300
    5e14:	d00e      	beq.n	5e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5e16:	6870      	ldr	r0, [r6, #4]
    5e18:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5e1c:	b111      	cbz	r1, 5e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa3c>
    5e1e:	2903      	cmp	r1, #3
    5e20:	d108      	bne.n	5e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    5e22:	e002      	b.n	5e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa42>
    5e24:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5e28:	e001      	b.n	5e2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa46>
    5e2a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5e2e:	2101      	movs	r1, #1
    5e30:	f7fe fdd0 	bl	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5e34:	6870      	ldr	r0, [r6, #4]
    5e36:	46b0      	mov	r8, r6
    5e38:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5e3c:	2901      	cmp	r1, #1
    5e3e:	d104      	bne.n	5e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5e40:	8869      	ldrh	r1, [r5, #2]
    5e42:	0549      	lsls	r1, r1, #21
    5e44:	d501      	bpl.n	5e4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    5e46:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5e4a:	9900      	ldr	r1, [sp, #0]
    5e4c:	2900      	cmp	r1, #0
    5e4e:	d179      	bne.n	5f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    5e50:	78a9      	ldrb	r1, [r5, #2]
    5e52:	0649      	lsls	r1, r1, #25
    5e54:	d502      	bpl.n	5e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    5e56:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5e5a:	e004      	b.n	5e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    5e5c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5e60:	1c49      	adds	r1, r1, #1
    5e62:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5e66:	4650      	mov	r0, sl
    5e68:	f7ff fdb8 	bl	59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    5e6c:	ea40 000a 	orr.w	r0, r0, sl
    5e70:	4682      	mov	sl, r0
    5e72:	f7ff fd37 	bl	58e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>
    5e76:	f8d8 6004 	ldr.w	r6, [r8, #4]
    5e7a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    5e7e:	1c40      	adds	r0, r0, #1
    5e80:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    5e84:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    5e88:	b128      	cbz	r0, 5e96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaae>
    5e8a:	f7fc f9bf 	bl	220c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    5e8e:	b1b0      	cbz	r0, 5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5e90:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5e94:	e013      	b.n	5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5e96:	f7fc f897 	bl	1fc8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    5e9a:	b108      	cbz	r0, 5ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    5e9c:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5ea0:	f7fc f88c 	bl	1fbc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    5ea4:	b158      	cbz	r0, 5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5ea6:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    5eaa:	1c40      	adds	r0, r0, #1
    5eac:	b2c0      	uxtb	r0, r0
    5eae:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    5eb2:	2802      	cmp	r0, #2
    5eb4:	d903      	bls.n	5ebe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    5eb6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    5eba:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    5ebe:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5ec2:	4646      	mov	r6, r8
    5ec4:	2301      	movs	r3, #1
    5ec6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5eca:	2100      	movs	r1, #0
    5ecc:	3080      	adds	r0, #128	; 0x80
    5ece:	f007 fe6f 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ed2:	b920      	cbnz	r0, 5ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    5ed4:	6870      	ldr	r0, [r6, #4]
    5ed6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5eda:	280b      	cmp	r0, #11
    5edc:	d15f      	bne.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    5ede:	6870      	ldr	r0, [r6, #4]
    5ee0:	2301      	movs	r3, #1
    5ee2:	2100      	movs	r1, #0
    5ee4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5ee8:	3080      	adds	r0, #128	; 0x80
    5eea:	f007 fe61 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5eee:	b350      	cbz	r0, 5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5ef0:	6870      	ldr	r0, [r6, #4]
    5ef2:	2301      	movs	r3, #1
    5ef4:	2100      	movs	r1, #0
    5ef6:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5efa:	3080      	adds	r0, #128	; 0x80
    5efc:	f007 fe58 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f00:	b308      	cbz	r0, 5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5f02:	6870      	ldr	r0, [r6, #4]
    5f04:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5f08:	2902      	cmp	r1, #2
    5f0a:	d148      	bne.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    5f0c:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    5f10:	b9c8      	cbnz	r0, 5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5f12:	4638      	mov	r0, r7
    5f14:	f007 f953 	bl	d1be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5f18:	b1a8      	cbz	r0, 5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5f1a:	6870      	ldr	r0, [r6, #4]
    5f1c:	3080      	adds	r0, #128	; 0x80
    5f1e:	f009 fa30 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5f22:	b980      	cbnz	r0, 5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    5f24:	6871      	ldr	r1, [r6, #4]
    5f26:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    5f2a:	2801      	cmp	r0, #1
    5f2c:	d937      	bls.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    5f2e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    5f32:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    5f36:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    5f3a:	1e93      	subs	r3, r2, #2
    5f3c:	4298      	cmp	r0, r3
    5f3e:	db03      	blt.n	5f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    5f40:	2001      	movs	r0, #1
    5f42:	e004      	b.n	5f4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    5f44:	e01c      	b.n	5f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    5f46:	e02a      	b.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    5f48:	1a10      	subs	r0, r2, r0
    5f4a:	1e40      	subs	r0, r0, #1
    5f4c:	b280      	uxth	r0, r0
    5f4e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    5f52:	88aa      	ldrh	r2, [r5, #4]
    5f54:	4293      	cmp	r3, r2
    5f56:	d301      	bcc.n	5f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    5f58:	2201      	movs	r2, #1
    5f5a:	e002      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    5f5c:	1ad2      	subs	r2, r2, r3
    5f5e:	1c52      	adds	r2, r2, #1
    5f60:	b292      	uxth	r2, r2
    5f62:	4290      	cmp	r0, r2
    5f64:	d900      	bls.n	5f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    5f66:	4610      	mov	r0, r2
    5f68:	2801      	cmp	r0, #1
    5f6a:	d101      	bne.n	5f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    5f6c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    5f70:	6871      	ldr	r1, [r6, #4]
    5f72:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    5f76:	4410      	add	r0, r2
    5f78:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    5f7c:	f000 ff28 	bl	6dd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e8>
    5f80:	78a8      	ldrb	r0, [r5, #2]
    5f82:	4652      	mov	r2, sl
    5f84:	f3c0 1180 	ubfx	r1, r0, #6, #1
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	f000 fe69 	bl	6c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    5f8e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    5f92:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    5f96:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f9a:	f7fb bf57 	b.w	1e4c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5f9e:	2001      	movs	r0, #1
    5fa0:	6871      	ldr	r1, [r6, #4]
    5fa2:	e7e3      	b.n	5f6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    5fa4:	2000010c 	.word	0x2000010c
    5fa8:	0000e769 	.word	0x0000e769
    5fac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    5fae:	4c68      	ldr	r4, [pc, #416]	; (6150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    5fb0:	2301      	movs	r3, #1
    5fb2:	2100      	movs	r1, #0
    5fb4:	6860      	ldr	r0, [r4, #4]
    5fb6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5fba:	3080      	adds	r0, #128	; 0x80
    5fbc:	f007 fdf8 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5fc0:	2800      	cmp	r0, #0
    5fc2:	d07a      	beq.n	60ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd2>
    5fc4:	6860      	ldr	r0, [r4, #4]
    5fc6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    5fca:	2500      	movs	r5, #0
    5fcc:	b139      	cbz	r1, 5fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    5fce:	2100      	movs	r1, #0
    5fd0:	200e      	movs	r0, #14
    5fd2:	f000 f8bf 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5fd6:	6860      	ldr	r0, [r4, #4]
    5fd8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    5fdc:	e0b5      	b.n	614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    5fde:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    5fe2:	b119      	cbz	r1, 5fec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    5fe4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    5fe8:	0789      	lsls	r1, r1, #30
    5fea:	d016      	beq.n	601a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    5fec:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    5ff0:	f88d 1004 	strb.w	r1, [sp, #4]
    5ff4:	9901      	ldr	r1, [sp, #4]
    5ff6:	9101      	str	r1, [sp, #4]
    5ff8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5ffc:	b141      	cbz	r1, 6010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    5ffe:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6002:	f88d 1000 	strb.w	r1, [sp]
    6006:	9900      	ldr	r1, [sp, #0]
    6008:	9100      	str	r1, [sp, #0]
    600a:	f89d 1000 	ldrb.w	r1, [sp]
    600e:	b189      	cbz	r1, 6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    6010:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6014:	2901      	cmp	r1, #1
    6016:	d030      	beq.n	607a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc92>
    6018:	e040      	b.n	609c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    601a:	2100      	movs	r1, #0
    601c:	200c      	movs	r0, #12
    601e:	f000 f899 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6022:	6860      	ldr	r0, [r4, #4]
    6024:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    6028:	f041 0101 	orr.w	r1, r1, #1
    602c:	7001      	strb	r1, [r0, #0]
    602e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    6032:	e08a      	b.n	614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6034:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6038:	2925      	cmp	r1, #37	; 0x25
    603a:	d01c      	beq.n	6076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    603c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    6040:	2925      	cmp	r1, #37	; 0x25
    6042:	d018      	beq.n	6076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    6044:	f05f 0300 	movs.w	r3, #0
    6048:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    604c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    6050:	f008 f96f 	bl	e332 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6054:	6860      	ldr	r0, [r4, #4]
    6056:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    605a:	2100      	movs	r1, #0
    605c:	2014      	movs	r0, #20
    605e:	f000 f879 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6062:	6861      	ldr	r1, [r4, #4]
    6064:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6068:	8bc2      	ldrh	r2, [r0, #30]
    606a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    606e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6070:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6074:	e069      	b.n	614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6076:	2301      	movs	r3, #1
    6078:	e7e6      	b.n	6048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    607a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    607e:	f88d 1000 	strb.w	r1, [sp]
    6082:	9900      	ldr	r1, [sp, #0]
    6084:	9100      	str	r1, [sp, #0]
    6086:	f89d 1000 	ldrb.w	r1, [sp]
    608a:	b939      	cbnz	r1, 609c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    608c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6090:	2301      	movs	r3, #1
    6092:	210b      	movs	r1, #11
    6094:	3080      	adds	r0, #128	; 0x80
    6096:	f007 fd8b 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    609a:	b178      	cbz	r0, 60bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    609c:	6860      	ldr	r0, [r4, #4]
    609e:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    60a2:	f88d 1000 	strb.w	r1, [sp]
    60a6:	9900      	ldr	r1, [sp, #0]
    60a8:	9100      	str	r1, [sp, #0]
    60aa:	f89d 1000 	ldrb.w	r1, [sp]
    60ae:	b3b9      	cbz	r1, 6120 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    60b0:	2100      	movs	r1, #0
    60b2:	2023      	movs	r0, #35	; 0x23
    60b4:	f000 f84e 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    60b8:	e047      	b.n	614a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    60ba:	e030      	b.n	611e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    60bc:	6860      	ldr	r0, [r4, #4]
    60be:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    60c2:	f009 f966 	bl	f392 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    60c6:	4605      	mov	r5, r0
    60c8:	6860      	ldr	r0, [r4, #4]
    60ca:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    60ce:	f009 f960 	bl	f392 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    60d2:	4606      	mov	r6, r0
    60d4:	6860      	ldr	r0, [r4, #4]
    60d6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    60da:	4628      	mov	r0, r5
    60dc:	f009 f964 	bl	f3a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    60e0:	b150      	cbz	r0, 60f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    60e2:	6860      	ldr	r0, [r4, #4]
    60e4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    60e8:	4630      	mov	r0, r6
    60ea:	f009 f95d 	bl	f3a8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    60ee:	b118      	cbz	r0, 60f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    60f0:	2000      	movs	r0, #0
    60f2:	f000 f941 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    60f6:	e011      	b.n	611c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    60f8:	6860      	ldr	r0, [r4, #4]
    60fa:	2301      	movs	r3, #1
    60fc:	2103      	movs	r1, #3
    60fe:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6102:	3080      	adds	r0, #128	; 0x80
    6104:	f007 fd54 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6108:	b940      	cbnz	r0, 611c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    610a:	6860      	ldr	r0, [r4, #4]
    610c:	2301      	movs	r3, #1
    610e:	2102      	movs	r1, #2
    6110:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6114:	3080      	adds	r0, #128	; 0x80
    6116:	f007 fd4b 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    611a:	b110      	cbz	r0, 6122 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    611c:	2000      	movs	r0, #0
    611e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6120:	e002      	b.n	6128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    6122:	2100      	movs	r1, #0
    6124:	2016      	movs	r0, #22
    6126:	e7c5      	b.n	60b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xccc>
    6128:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    612c:	f88d 0000 	strb.w	r0, [sp]
    6130:	9800      	ldr	r0, [sp, #0]
    6132:	9000      	str	r0, [sp, #0]
    6134:	f89d 0000 	ldrb.w	r0, [sp]
    6138:	2800      	cmp	r0, #0
    613a:	d0f0      	beq.n	611e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    613c:	2100      	movs	r1, #0
    613e:	2025      	movs	r0, #37	; 0x25
    6140:	f000 f808 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6144:	6860      	ldr	r0, [r4, #4]
    6146:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    614a:	2001      	movs	r0, #1
    614c:	e7e7      	b.n	611e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    614e:	0000      	.short	0x0000
    6150:	2000010c 	.word	0x2000010c
    6154:	b570      	push	{r4, r5, r6, lr}
    6156:	4c0d      	ldr	r4, [pc, #52]	; (618c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda4>)
    6158:	4606      	mov	r6, r0
    615a:	460d      	mov	r5, r1
    615c:	6860      	ldr	r0, [r4, #4]
    615e:	3080      	adds	r0, #128	; 0x80
    6160:	f009 f90f 	bl	f382 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6164:	b120      	cbz	r0, 6170 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    6166:	f640 416a 	movw	r1, #3178	; 0xc6a
    616a:	2031      	movs	r0, #49	; 0x31
    616c:	f7fb f846 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6170:	6862      	ldr	r2, [r4, #4]
    6172:	2000      	movs	r0, #0
    6174:	2d01      	cmp	r5, #1
    6176:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    617a:	d004      	beq.n	6186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    617c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6180:	2001      	movs	r0, #1
    6182:	7110      	strb	r0, [r2, #4]
    6184:	bd70      	pop	{r4, r5, r6, pc}
    6186:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    618a:	bd70      	pop	{r4, r5, r6, pc}
    618c:	2000010c 	.word	0x2000010c
    6190:	b538      	push	{r3, r4, r5, lr}
    6192:	4c1f      	ldr	r4, [pc, #124]	; (6210 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>)
    6194:	2500      	movs	r5, #0
    6196:	6860      	ldr	r0, [r4, #4]
    6198:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    619c:	2901      	cmp	r1, #1
    619e:	d00c      	beq.n	61ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd2>
    61a0:	2902      	cmp	r1, #2
    61a2:	d133      	bne.n	620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    61a4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    61a8:	2900      	cmp	r1, #0
    61aa:	f04f 0106 	mov.w	r1, #6
    61ae:	d01a      	beq.n	61e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfe>
    61b0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    61b4:	2101      	movs	r1, #1
    61b6:	2002      	movs	r0, #2
    61b8:	e023      	b.n	6202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    61ba:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    61be:	f88d 1000 	strb.w	r1, [sp]
    61c2:	9900      	ldr	r1, [sp, #0]
    61c4:	9100      	str	r1, [sp, #0]
    61c6:	f89d 1000 	ldrb.w	r1, [sp]
    61ca:	2900      	cmp	r1, #0
    61cc:	d11e      	bne.n	620c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    61ce:	f500 7384 	add.w	r3, r0, #264	; 0x108
    61d2:	f500 710e 	add.w	r1, r0, #568	; 0x238
    61d6:	2200      	movs	r2, #0
    61d8:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    61dc:	f007 fca0 	bl	db20 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    61e0:	2101      	movs	r1, #1
    61e2:	2005      	movs	r0, #5
    61e4:	e00d      	b.n	6202 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    61e6:	2003      	movs	r0, #3
    61e8:	f000 fcb4 	bl	6b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    61ec:	6860      	ldr	r0, [r4, #4]
    61ee:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    61f2:	0880      	lsrs	r0, r0, #2
    61f4:	f010 0f01 	tst.w	r0, #1
    61f8:	d001      	beq.n	61fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    61fa:	2011      	movs	r0, #17
    61fc:	e000      	b.n	6200 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    61fe:	200d      	movs	r0, #13
    6200:	2101      	movs	r1, #1
    6202:	f7ff ffa7 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6206:	6860      	ldr	r0, [r4, #4]
    6208:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    620c:	bd38      	pop	{r3, r4, r5, pc}
    620e:	0000      	.short	0x0000
    6210:	2000010c 	.word	0x2000010c
    6214:	b570      	push	{r4, r5, r6, lr}
    6216:	4b2b      	ldr	r3, [pc, #172]	; (62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xedc>)
    6218:	4602      	mov	r2, r0
    621a:	8858      	ldrh	r0, [r3, #2]
    621c:	4310      	orrs	r0, r2
    621e:	8058      	strh	r0, [r3, #2]
    6220:	f103 0010 	add.w	r0, r3, #16
    6224:	2a40      	cmp	r2, #64	; 0x40
    6226:	6840      	ldr	r0, [r0, #4]
    6228:	d00d      	beq.n	6246 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    622a:	0796      	lsls	r6, r2, #30
    622c:	f04f 0500 	mov.w	r5, #0
    6230:	f04f 0401 	mov.w	r4, #1
    6234:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    6238:	d50c      	bpl.n	6254 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    623a:	b14e      	cbz	r6, 6250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>
    623c:	f640 61b2 	movw	r1, #3762	; 0xeb2
    6240:	2031      	movs	r0, #49	; 0x31
    6242:	f7fa ffdb 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    624a:	2104      	movs	r1, #4
    624c:	f7fe bbc2 	b.w	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6250:	6099      	str	r1, [r3, #8]
    6252:	e01c      	b.n	628e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    6254:	b1c6      	cbz	r6, 6288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6256:	60d9      	str	r1, [r3, #12]
    6258:	78c9      	ldrb	r1, [r1, #3]
    625a:	2906      	cmp	r1, #6
    625c:	d002      	beq.n	6264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    625e:	290b      	cmp	r1, #11
    6260:	d112      	bne.n	6288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6262:	e009      	b.n	6278 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>
    6264:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6268:	2918      	cmp	r1, #24
    626a:	d10d      	bne.n	6288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    626c:	2100      	movs	r1, #0
    626e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6272:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    6276:	e007      	b.n	6288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6278:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    627c:	2912      	cmp	r1, #18
    627e:	d103      	bne.n	6288 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6280:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6284:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    6288:	0791      	lsls	r1, r2, #30
    628a:	d516      	bpl.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    628c:	6899      	ldr	r1, [r3, #8]
    628e:	78c9      	ldrb	r1, [r1, #3]
    6290:	2905      	cmp	r1, #5
    6292:	d002      	beq.n	629a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    6294:	290b      	cmp	r1, #11
    6296:	d110      	bne.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    6298:	e009      	b.n	62ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec6>
    629a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    629e:	2916      	cmp	r1, #22
    62a0:	d10b      	bne.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    62a2:	2100      	movs	r1, #0
    62a4:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    62a8:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    62ac:	e005      	b.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    62ae:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    62b2:	2911      	cmp	r1, #17
    62b4:	d101      	bne.n	62ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    62b6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    62ba:	0690      	lsls	r0, r2, #26
    62bc:	d501      	bpl.n	62c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    62be:	2008      	movs	r0, #8
    62c0:	7058      	strb	r0, [r3, #1]
    62c2:	bd70      	pop	{r4, r5, r6, pc}
    62c4:	200000fc 	.word	0x200000fc
    62c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62cc:	4c29      	ldr	r4, [pc, #164]	; (6374 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    62ce:	2501      	movs	r5, #1
    62d0:	6863      	ldr	r3, [r4, #4]
    62d2:	f893 12ce 	ldrb.w	r1, [r3, #718]	; 0x2ce
    62d6:	b109      	cbz	r1, 62dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    62d8:	2701      	movs	r7, #1
    62da:	e000      	b.n	62de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef6>
    62dc:	2700      	movs	r7, #0
    62de:	f893 02cf 	ldrb.w	r0, [r3, #719]	; 0x2cf
    62e2:	b108      	cbz	r0, 62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    62e4:	2601      	movs	r6, #1
    62e6:	e000      	b.n	62ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    62e8:	2600      	movs	r6, #0
    62ea:	b90f      	cbnz	r7, 62f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    62ec:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    62f0:	b90e      	cbnz	r6, 62f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    62f2:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    62f6:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    62fa:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
    62fe:	f103 0262 	add.w	r2, r3, #98	; 0x62
    6302:	20ff      	movs	r0, #255	; 0xff
    6304:	7290      	strb	r0, [r2, #10]
    6306:	4618      	mov	r0, r3
    6308:	f009 fb1d 	bl	f946 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    630c:	6860      	ldr	r0, [r4, #4]
    630e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6312:	2801      	cmp	r0, #1
    6314:	d001      	beq.n	631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    6316:	b907      	cbnz	r7, 631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    6318:	b116      	cbz	r6, 6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    631a:	2000      	movs	r0, #0
    631c:	f000 f82c 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6320:	6860      	ldr	r0, [r4, #4]
    6322:	302c      	adds	r0, #44	; 0x2c
    6324:	f008 f874 	bl	e410 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6328:	4606      	mov	r6, r0
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f008 f81c 	bl	e368 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6330:	b130      	cbz	r0, 6340 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf58>
    6332:	6861      	ldr	r1, [r4, #4]
    6334:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    6338:	f831 0b2c 	ldrh.w	r0, [r1], #44
    633c:	f7fd f88e 	bl	345c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6340:	2105      	movs	r1, #5
    6342:	6860      	ldr	r0, [r4, #4]
    6344:	f7fe fb46 	bl	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6348:	6860      	ldr	r0, [r4, #4]
    634a:	302c      	adds	r0, #44	; 0x2c
    634c:	f008 f860 	bl	e410 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6350:	4604      	mov	r4, r0
    6352:	42a6      	cmp	r6, r4
    6354:	d20a      	bcs.n	636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6356:	f003 fdf7 	bl	9f48 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    635a:	4601      	mov	r1, r0
    635c:	1ba0      	subs	r0, r4, r6
    635e:	2865      	cmp	r0, #101	; 0x65
    6360:	d200      	bcs.n	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>
    6362:	2065      	movs	r0, #101	; 0x65
    6364:	f003 fd12 	bl	9d8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6368:	b100      	cbz	r0, 636c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    636a:	2500      	movs	r5, #0
    636c:	4628      	mov	r0, r5
    636e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6372:	0000      	.short	0x0000
    6374:	2000010c 	.word	0x2000010c
    6378:	b510      	push	{r4, lr}
    637a:	4c10      	ldr	r4, [pc, #64]	; (63bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>)
    637c:	6861      	ldr	r1, [r4, #4]
    637e:	880a      	ldrh	r2, [r1, #0]
    6380:	f8a1 21a6 	strh.w	r2, [r1, #422]	; 0x1a6
    6384:	f881 01a4 	strb.w	r0, [r1, #420]	; 0x1a4
    6388:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    638c:	f009 f801 	bl	f392 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6390:	6861      	ldr	r1, [r4, #4]
    6392:	f881 01a8 	strb.w	r0, [r1, #424]	; 0x1a8
    6396:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    639a:	f008 fffa 	bl	f392 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    639e:	6863      	ldr	r3, [r4, #4]
    63a0:	2215      	movs	r2, #21
    63a2:	4907      	ldr	r1, [pc, #28]	; (63c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    63a4:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
    63a8:	f503 70cd 	add.w	r0, r3, #410	; 0x19a
    63ac:	f007 ffab 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    63b0:	6861      	ldr	r1, [r4, #4]
    63b2:	2000      	movs	r0, #0
    63b4:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
    63b8:	bd10      	pop	{r4, pc}
    63ba:	0000      	.short	0x0000
    63bc:	2000010c 	.word	0x2000010c
    63c0:	00010735 	.word	0x00010735
    63c4:	b570      	push	{r4, r5, r6, lr}
    63c6:	4d0f      	ldr	r5, [pc, #60]	; (6404 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    63c8:	686c      	ldr	r4, [r5, #4]
    63ca:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    63ce:	2921      	cmp	r1, #33	; 0x21
    63d0:	d002      	beq.n	63d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    63d2:	292e      	cmp	r1, #46	; 0x2e
    63d4:	d003      	beq.n	63de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    63d6:	e011      	b.n	63fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    63d8:	f7ff ffce 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    63dc:	e008      	b.n	63f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    63de:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    63e2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    63e6:	2301      	movs	r3, #1
    63e8:	210b      	movs	r1, #11
    63ea:	f007 fbe1 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    63ee:	b138      	cbz	r0, 6400 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    63f0:	6869      	ldr	r1, [r5, #4]
    63f2:	2000      	movs	r0, #0
    63f4:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    63f8:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    63fc:	2000      	movs	r0, #0
    63fe:	bd70      	pop	{r4, r5, r6, pc}
    6400:	202a      	movs	r0, #42	; 0x2a
    6402:	e7e9      	b.n	63d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    6404:	2000010c 	.word	0x2000010c
    6408:	b570      	push	{r4, r5, r6, lr}
    640a:	4604      	mov	r4, r0
    640c:	6840      	ldr	r0, [r0, #4]
    640e:	2301      	movs	r3, #1
    6410:	2100      	movs	r1, #0
    6412:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6416:	3080      	adds	r0, #128	; 0x80
    6418:	f007 fbca 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    641c:	b1b8      	cbz	r0, 644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    641e:	4d13      	ldr	r5, [pc, #76]	; (646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    6420:	68e8      	ldr	r0, [r5, #12]
    6422:	f007 fe30 	bl	e086 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    6426:	6861      	ldr	r1, [r4, #4]
    6428:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    642c:	6861      	ldr	r1, [r4, #4]
    642e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6432:	f008 ffc7 	bl	f3c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6436:	b160      	cbz	r0, 6452 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    6438:	6861      	ldr	r1, [r4, #4]
    643a:	2028      	movs	r0, #40	; 0x28
    643c:	220b      	movs	r2, #11
    643e:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6442:	6860      	ldr	r0, [r4, #4]
    6444:	490a      	ldr	r1, [pc, #40]	; (6470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1088>)
    6446:	30b4      	adds	r0, #180	; 0xb4
    6448:	f007 ff49 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    644c:	e00b      	b.n	6466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    644e:	2001      	movs	r0, #1
    6450:	bd70      	pop	{r4, r5, r6, pc}
    6452:	6861      	ldr	r1, [r4, #4]
    6454:	68e8      	ldr	r0, [r5, #12]
    6456:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    645a:	f007 fe0f 	bl	e07c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    645e:	6861      	ldr	r1, [r4, #4]
    6460:	200a      	movs	r0, #10
    6462:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6466:	2000      	movs	r0, #0
    6468:	bd70      	pop	{r4, r5, r6, pc}
    646a:	0000      	.short	0x0000
    646c:	200000fc 	.word	0x200000fc
    6470:	0000e61d 	.word	0x0000e61d
    6474:	b570      	push	{r4, r5, r6, lr}
    6476:	4604      	mov	r4, r0
    6478:	6840      	ldr	r0, [r0, #4]
    647a:	2301      	movs	r3, #1
    647c:	2100      	movs	r1, #0
    647e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6482:	3080      	adds	r0, #128	; 0x80
    6484:	f007 fb94 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6488:	b1e0      	cbz	r0, 64c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    648a:	4d28      	ldr	r5, [pc, #160]	; (652c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>)
    648c:	2100      	movs	r1, #0
    648e:	68e8      	ldr	r0, [r5, #12]
    6490:	f007 fdfc 	bl	e08c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6494:	b1c0      	cbz	r0, 64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e0>
    6496:	68e8      	ldr	r0, [r5, #12]
    6498:	6861      	ldr	r1, [r4, #4]
    649a:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    649e:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    64a2:	6861      	ldr	r1, [r4, #4]
    64a4:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    64a8:	f008 ff8c 	bl	f3c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    64ac:	b188      	cbz	r0, 64d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ea>
    64ae:	6861      	ldr	r1, [r4, #4]
    64b0:	2028      	movs	r0, #40	; 0x28
    64b2:	220b      	movs	r2, #11
    64b4:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    64b8:	6860      	ldr	r0, [r4, #4]
    64ba:	491d      	ldr	r1, [pc, #116]	; (6530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>)
    64bc:	30b4      	adds	r0, #180	; 0xb4
    64be:	f007 ff0e 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    64c2:	e030      	b.n	6526 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113e>
    64c4:	2001      	movs	r0, #1
    64c6:	bd70      	pop	{r4, r5, r6, pc}
    64c8:	4620      	mov	r0, r4
    64ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    64ce:	f000 b88b 	b.w	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    64d2:	68e8      	ldr	r0, [r5, #12]
    64d4:	f007 fe04 	bl	e0e0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    64d8:	f007 fb4d 	bl	db76 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    64dc:	4606      	mov	r6, r0
    64de:	6860      	ldr	r0, [r4, #4]
    64e0:	4631      	mov	r1, r6
    64e2:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    64e6:	68e8      	ldr	r0, [r5, #12]
    64e8:	7900      	ldrb	r0, [r0, #4]
    64ea:	f007 fcc0 	bl	de6e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    64ee:	6861      	ldr	r1, [r4, #4]
    64f0:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    64f4:	68e8      	ldr	r0, [r5, #12]
    64f6:	4631      	mov	r1, r6
    64f8:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    64fc:	f007 fcb3 	bl	de66 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6500:	6861      	ldr	r1, [r4, #4]
    6502:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    6506:	68e8      	ldr	r0, [r5, #12]
    6508:	f007 fded 	bl	e0e6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    650c:	6861      	ldr	r1, [r4, #4]
    650e:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    6512:	68e8      	ldr	r0, [r5, #12]
    6514:	f007 fdea 	bl	e0ec <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    6518:	6861      	ldr	r1, [r4, #4]
    651a:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    651e:	6861      	ldr	r1, [r4, #4]
    6520:	200d      	movs	r0, #13
    6522:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6526:	2000      	movs	r0, #0
    6528:	bd70      	pop	{r4, r5, r6, pc}
    652a:	0000      	.short	0x0000
    652c:	200000fc 	.word	0x200000fc
    6530:	0000e61d 	.word	0x0000e61d
    6534:	b570      	push	{r4, r5, r6, lr}
    6536:	4604      	mov	r4, r0
    6538:	6840      	ldr	r0, [r0, #4]
    653a:	2301      	movs	r3, #1
    653c:	2100      	movs	r1, #0
    653e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6542:	3080      	adds	r0, #128	; 0x80
    6544:	f007 fb34 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6548:	b970      	cbnz	r0, 6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    654a:	6860      	ldr	r0, [r4, #4]
    654c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6550:	2a13      	cmp	r2, #19
    6552:	d009      	beq.n	6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    6554:	2301      	movs	r3, #1
    6556:	2105      	movs	r1, #5
    6558:	3080      	adds	r0, #128	; 0x80
    655a:	f007 fb29 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    655e:	b108      	cbz	r0, 6564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>
    6560:	2008      	movs	r0, #8
    6562:	bd70      	pop	{r4, r5, r6, pc}
    6564:	2001      	movs	r0, #1
    6566:	bd70      	pop	{r4, r5, r6, pc}
    6568:	6860      	ldr	r0, [r4, #4]
    656a:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    656e:	b908      	cbnz	r0, 6574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118c>
    6570:	f7ff f83c 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6574:	4d14      	ldr	r5, [pc, #80]	; (65c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e0>)
    6576:	6861      	ldr	r1, [r4, #4]
    6578:	f501 710e 	add.w	r1, r1, #568	; 0x238
    657c:	68e8      	ldr	r0, [r5, #12]
    657e:	f007 fdce 	bl	e11e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    6582:	6861      	ldr	r1, [r4, #4]
    6584:	68e8      	ldr	r0, [r5, #12]
    6586:	f501 718c 	add.w	r1, r1, #280	; 0x118
    658a:	f007 fdbf 	bl	e10c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    658e:	6860      	ldr	r0, [r4, #4]
    6590:	8801      	ldrh	r1, [r0, #0]
    6592:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    6596:	6861      	ldr	r1, [r4, #4]
    6598:	68e8      	ldr	r0, [r5, #12]
    659a:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    659e:	f007 fdb9 	bl	e114 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    65a2:	6861      	ldr	r1, [r4, #4]
    65a4:	68e8      	ldr	r0, [r5, #12]
    65a6:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    65aa:	f007 fdac 	bl	e106 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    65ae:	6860      	ldr	r0, [r4, #4]
    65b0:	220a      	movs	r2, #10
    65b2:	4906      	ldr	r1, [pc, #24]	; (65cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>)
    65b4:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    65b8:	f007 fe91 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65bc:	6861      	ldr	r1, [r4, #4]
    65be:	2015      	movs	r0, #21
    65c0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    65c4:	2000      	movs	r0, #0
    65c6:	bd70      	pop	{r4, r5, r6, pc}
    65c8:	200000fc 	.word	0x200000fc
    65cc:	0000e6d3 	.word	0x0000e6d3
    65d0:	4901      	ldr	r1, [pc, #4]	; (65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f0>)
    65d2:	68c9      	ldr	r1, [r1, #12]
    65d4:	f7fc bfe6 	b.w	35a4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    65d8:	200000fc 	.word	0x200000fc
    65dc:	4901      	ldr	r1, [pc, #4]	; (65e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fc>)
    65de:	68c9      	ldr	r1, [r1, #12]
    65e0:	f7fd b810 	b.w	3604 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    65e4:	200000fc 	.word	0x200000fc
    65e8:	b510      	push	{r4, lr}
    65ea:	6842      	ldr	r2, [r0, #4]
    65ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    65f0:	070b      	lsls	r3, r1, #28
    65f2:	d501      	bpl.n	65f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    65f4:	2001      	movs	r0, #1
    65f6:	bd10      	pop	{r4, pc}
    65f8:	f041 0108 	orr.w	r1, r1, #8
    65fc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    6600:	4904      	ldr	r1, [pc, #16]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    6602:	6840      	ldr	r0, [r0, #4]
    6604:	68c9      	ldr	r1, [r1, #12]
    6606:	78c9      	ldrb	r1, [r1, #3]
    6608:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    660c:	f7fe ffee 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6610:	2000      	movs	r0, #0
    6612:	bd10      	pop	{r4, pc}
    6614:	200000fc 	.word	0x200000fc
    6618:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    661c:	4605      	mov	r5, r0
    661e:	6840      	ldr	r0, [r0, #4]
    6620:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6624:	f010 0f30 	tst.w	r0, #48	; 0x30
    6628:	d002      	beq.n	6630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    662a:	2001      	movs	r0, #1
    662c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6630:	4c31      	ldr	r4, [pc, #196]	; (66f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    6632:	68e0      	ldr	r0, [r4, #12]
    6634:	f007 fd8d 	bl	e152 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6638:	b330      	cbz	r0, 6688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a0>
    663a:	68e0      	ldr	r0, [r4, #12]
    663c:	f007 fd83 	bl	e146 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6640:	4680      	mov	r8, r0
    6642:	68e0      	ldr	r0, [r4, #12]
    6644:	f007 fd83 	bl	e14e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6648:	4607      	mov	r7, r0
    664a:	68e0      	ldr	r0, [r4, #12]
    664c:	f007 fd79 	bl	e142 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6650:	4606      	mov	r6, r0
    6652:	68e0      	ldr	r0, [r4, #12]
    6654:	f007 fd79 	bl	e14a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6658:	4601      	mov	r1, r0
    665a:	f8cd 8000 	str.w	r8, [sp]
    665e:	6868      	ldr	r0, [r5, #4]
    6660:	463b      	mov	r3, r7
    6662:	4632      	mov	r2, r6
    6664:	302c      	adds	r0, #44	; 0x2c
    6666:	f007 ff0d 	bl	e484 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    666a:	78a0      	ldrb	r0, [r4, #2]
    666c:	0781      	lsls	r1, r0, #30
    666e:	f04f 0001 	mov.w	r0, #1
    6672:	d503      	bpl.n	667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    6674:	68a1      	ldr	r1, [r4, #8]
    6676:	78c9      	ldrb	r1, [r1, #3]
    6678:	2914      	cmp	r1, #20
    667a:	d00a      	beq.n	6692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    667c:	6869      	ldr	r1, [r5, #4]
    667e:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    6682:	291d      	cmp	r1, #29
    6684:	d005      	beq.n	6692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    6686:	e007      	b.n	6698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    6688:	4628      	mov	r0, r5
    668a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    668e:	f7ff bfab 	b.w	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6692:	6869      	ldr	r1, [r5, #4]
    6694:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    6698:	6868      	ldr	r0, [r5, #4]
    669a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    669e:	2901      	cmp	r1, #1
    66a0:	d011      	beq.n	66c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    66a2:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    66a6:	f88d 1004 	strb.w	r1, [sp, #4]
    66aa:	9901      	ldr	r1, [sp, #4]
    66ac:	9101      	str	r1, [sp, #4]
    66ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
    66b2:	b941      	cbnz	r1, 66c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    66b4:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    66b8:	f88d 1000 	strb.w	r1, [sp]
    66bc:	9900      	ldr	r1, [sp, #0]
    66be:	9100      	str	r1, [sp, #0]
    66c0:	f89d 1000 	ldrb.w	r1, [sp]
    66c4:	b141      	cbz	r1, 66d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>
    66c6:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    66ca:	f041 0110 	orr.w	r1, r1, #16
    66ce:	6001      	str	r1, [r0, #0]
    66d0:	f7fe ff8c 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    66d4:	2000      	movs	r0, #0
    66d6:	e7a9      	b.n	662c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>
    66d8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    66dc:	f041 0120 	orr.w	r1, r1, #32
    66e0:	6001      	str	r1, [r0, #0]
    66e2:	4805      	ldr	r0, [pc, #20]	; (66f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    66e4:	3010      	adds	r0, #16
    66e6:	6843      	ldr	r3, [r0, #4]
    66e8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66ec:	8818      	ldrh	r0, [r3, #0]
    66ee:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    66f2:	f7fc fedd 	bl	34b0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66f6:	e7eb      	b.n	66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    66f8:	200000fc 	.word	0x200000fc
    66fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6700:	4604      	mov	r4, r0
    6702:	6840      	ldr	r0, [r0, #4]
    6704:	2301      	movs	r3, #1
    6706:	210a      	movs	r1, #10
    6708:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    670c:	3080      	adds	r0, #128	; 0x80
    670e:	f007 fa4f 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6712:	b370      	cbz	r0, 6772 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138a>
    6714:	4d18      	ldr	r5, [pc, #96]	; (6778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>)
    6716:	68e8      	ldr	r0, [r5, #12]
    6718:	f007 fd1b 	bl	e152 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    671c:	b1e8      	cbz	r0, 675a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    671e:	68e8      	ldr	r0, [r5, #12]
    6720:	f007 fd11 	bl	e146 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6724:	4607      	mov	r7, r0
    6726:	68e8      	ldr	r0, [r5, #12]
    6728:	f007 fd11 	bl	e14e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    672c:	4680      	mov	r8, r0
    672e:	68e8      	ldr	r0, [r5, #12]
    6730:	f007 fd07 	bl	e142 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6734:	4606      	mov	r6, r0
    6736:	68e8      	ldr	r0, [r5, #12]
    6738:	f007 fd07 	bl	e14a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    673c:	4601      	mov	r1, r0
    673e:	9700      	str	r7, [sp, #0]
    6740:	6860      	ldr	r0, [r4, #4]
    6742:	4643      	mov	r3, r8
    6744:	4632      	mov	r2, r6
    6746:	302c      	adds	r0, #44	; 0x2c
    6748:	f007 fe9c 	bl	e484 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    674c:	6860      	ldr	r0, [r4, #4]
    674e:	f007 fe0b 	bl	e368 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6752:	2105      	movs	r1, #5
    6754:	6860      	ldr	r0, [r4, #4]
    6756:	f7fe f93d 	bl	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    675a:	6861      	ldr	r1, [r4, #4]
    675c:	2000      	movs	r0, #0
    675e:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6762:	6861      	ldr	r1, [r4, #4]
    6764:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6768:	f7ff f924 	bl	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    676c:	2000      	movs	r0, #0
    676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6772:	e7ff      	b.n	6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    6774:	2001      	movs	r0, #1
    6776:	e7fa      	b.n	676e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1386>
    6778:	200000fc 	.word	0x200000fc
    677c:	b538      	push	{r3, r4, r5, lr}
    677e:	4604      	mov	r4, r0
    6780:	6840      	ldr	r0, [r0, #4]
    6782:	2301      	movs	r3, #1
    6784:	210b      	movs	r1, #11
    6786:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    678a:	3080      	adds	r0, #128	; 0x80
    678c:	f007 fa10 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6790:	bb60      	cbnz	r0, 67ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    6792:	6860      	ldr	r0, [r4, #4]
    6794:	2301      	movs	r3, #1
    6796:	2100      	movs	r1, #0
    6798:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    679c:	3080      	adds	r0, #128	; 0x80
    679e:	f007 fa07 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67a2:	b308      	cbz	r0, 67e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    67a4:	6860      	ldr	r0, [r4, #4]
    67a6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    67aa:	2825      	cmp	r0, #37	; 0x25
    67ac:	d01e      	beq.n	67ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    67ae:	4d2a      	ldr	r5, [pc, #168]	; (6858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    67b0:	68e8      	ldr	r0, [r5, #12]
    67b2:	f007 fce0 	bl	e176 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    67b6:	b1d8      	cbz	r0, 67f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    67b8:	68e8      	ldr	r0, [r5, #12]
    67ba:	6862      	ldr	r2, [r4, #4]
    67bc:	7941      	ldrb	r1, [r0, #5]
    67be:	f001 0107 	and.w	r1, r1, #7
    67c2:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    67c6:	7900      	ldrb	r0, [r0, #4]
    67c8:	f000 0107 	and.w	r1, r0, #7
    67cc:	6860      	ldr	r0, [r4, #4]
    67ce:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    67d2:	6860      	ldr	r0, [r4, #4]
    67d4:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    67d8:	f88d 2000 	strb.w	r2, [sp]
    67dc:	9a00      	ldr	r2, [sp, #0]
    67de:	9200      	str	r2, [sp, #0]
    67e0:	f89d 2000 	ldrb.w	r2, [sp]
    67e4:	bb7a      	cbnz	r2, 6846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    67e6:	e008      	b.n	67fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1412>
    67e8:	2001      	movs	r0, #1
    67ea:	bd38      	pop	{r3, r4, r5, pc}
    67ec:	2020      	movs	r0, #32
    67ee:	bd38      	pop	{r3, r4, r5, pc}
    67f0:	4620      	mov	r0, r4
    67f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    67f6:	f7ff bef7 	b.w	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    67fa:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    67fe:	2a01      	cmp	r2, #1
    6800:	d021      	beq.n	6846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6802:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6806:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    680a:	7855      	ldrb	r5, [r2, #1]
    680c:	428d      	cmp	r5, r1
    680e:	d106      	bne.n	681e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    6810:	7811      	ldrb	r1, [r2, #0]
    6812:	4299      	cmp	r1, r3
    6814:	d103      	bne.n	681e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    6816:	2102      	movs	r1, #2
    6818:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    681c:	e013      	b.n	6846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    681e:	480e      	ldr	r0, [pc, #56]	; (6858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    6820:	3010      	adds	r0, #16
    6822:	6841      	ldr	r1, [r0, #4]
    6824:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    6828:	880a      	ldrh	r2, [r1, #0]
    682a:	f820 2b02 	strh.w	r2, [r0], #2
    682e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6832:	f800 2b01 	strb.w	r2, [r0], #1
    6836:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    683a:	f800 190d 	strb.w	r1, [r0], #-13
    683e:	2222      	movs	r2, #34	; 0x22
    6840:	4906      	ldr	r1, [pc, #24]	; (685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>)
    6842:	f007 fd4c 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6846:	6861      	ldr	r1, [r4, #4]
    6848:	2022      	movs	r0, #34	; 0x22
    684a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    684e:	f7fe fecd 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6852:	2000      	movs	r0, #0
    6854:	bd38      	pop	{r3, r4, r5, pc}
    6856:	0000      	.short	0x0000
    6858:	200000fc 	.word	0x200000fc
    685c:	0001075f 	.word	0x0001075f
    6860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6864:	6845      	ldr	r5, [r0, #4]
    6866:	4604      	mov	r4, r0
    6868:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    686c:	2821      	cmp	r0, #33	; 0x21
    686e:	d008      	beq.n	6882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149a>
    6870:	f05f 0600 	movs.w	r6, #0
    6874:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6878:	2823      	cmp	r0, #35	; 0x23
    687a:	d004      	beq.n	6886 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    687c:	b38e      	cbz	r6, 68e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fa>
    687e:	359d      	adds	r5, #157	; 0x9d
    6880:	e002      	b.n	6888 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    6882:	2601      	movs	r6, #1
    6884:	e7f6      	b.n	6874 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148c>
    6886:	359e      	adds	r5, #158	; 0x9e
    6888:	f8df 8120 	ldr.w	r8, [pc, #288]	; 69ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    688c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6890:	f007 fc7d 	bl	e18e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6894:	2700      	movs	r7, #0
    6896:	b340      	cbz	r0, 68ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6898:	4631      	mov	r1, r6
    689a:	f8d8 000c 	ldr.w	r0, [r8, #12]
    689e:	f7fe ff7f 	bl	57a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    68a2:	b310      	cbz	r0, 68ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    68a4:	466a      	mov	r2, sp
    68a6:	4646      	mov	r6, r8
    68a8:	6860      	ldr	r0, [r4, #4]
    68aa:	f8d8 100c 	ldr.w	r1, [r8, #12]
    68ae:	f007 fa94 	bl	ddda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    68b2:	b3c0      	cbz	r0, 6926 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153e>
    68b4:	68f0      	ldr	r0, [r6, #12]
    68b6:	f007 fc68 	bl	e18a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    68ba:	6861      	ldr	r1, [r4, #4]
    68bc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    68c0:	6861      	ldr	r1, [r4, #4]
    68c2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    68c6:	f008 fd7d 	bl	f3c4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    68ca:	b368      	cbz	r0, 6928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>
    68cc:	6861      	ldr	r1, [r4, #4]
    68ce:	2028      	movs	r0, #40	; 0x28
    68d0:	220b      	movs	r2, #11
    68d2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    68d6:	6860      	ldr	r0, [r4, #4]
    68d8:	4935      	ldr	r1, [pc, #212]	; (69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    68da:	30b4      	adds	r0, #180	; 0xb4
    68dc:	f007 fcff 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    68e0:	e058      	b.n	6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    68e2:	e7ff      	b.n	68e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fc>
    68e4:	2002      	movs	r0, #2
    68e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    68ea:	6860      	ldr	r0, [r4, #4]
    68ec:	f04f 0900 	mov.w	r9, #0
    68f0:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    68f4:	2901      	cmp	r1, #1
    68f6:	d018      	beq.n	692a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    68f8:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    68fc:	b30e      	cbz	r6, 6942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155a>
    68fe:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6902:	6861      	ldr	r1, [r4, #4]
    6904:	2201      	movs	r2, #1
    6906:	78c0      	ldrb	r0, [r0, #3]
    6908:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    690c:	4082      	lsls	r2, r0
    690e:	6861      	ldr	r1, [r4, #4]
    6910:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6914:	b168      	cbz	r0, 6932 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    6916:	2009      	movs	r0, #9
    6918:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    691c:	6860      	ldr	r0, [r4, #4]
    691e:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6922:	b9a8      	cbnz	r0, 6950 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1568>
    6924:	e008      	b.n	6938 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1550>
    6926:	e015      	b.n	6954 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    6928:	e028      	b.n	697c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    692a:	201e      	movs	r0, #30
    692c:	f7ff fd24 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6930:	e7e4      	b.n	68fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1514>
    6932:	f240 4183 	movw	r1, #1155	; 0x483
    6936:	e001      	b.n	693c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    6938:	f240 418b 	movw	r1, #1163	; 0x48b
    693c:	2031      	movs	r0, #49	; 0x31
    693e:	f7fa fc5d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6942:	702f      	strb	r7, [r5, #0]
    6944:	f7fe fe5e 	bl	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6948:	4620      	mov	r0, r4
    694a:	f7ff fe4d 	bl	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    694e:	4681      	mov	r9, r0
    6950:	4648      	mov	r0, r9
    6952:	e7c8      	b.n	68e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6954:	6860      	ldr	r0, [r4, #4]
    6956:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    695a:	2901      	cmp	r1, #1
    695c:	d009      	beq.n	6972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158a>
    695e:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6962:	6860      	ldr	r0, [r4, #4]
    6964:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6968:	42a9      	cmp	r1, r5
    696a:	d113      	bne.n	6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    696c:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6970:	e010      	b.n	6994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6972:	2000      	movs	r0, #0
    6974:	f7ff fd00 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6978:	702f      	strb	r7, [r5, #0]
    697a:	e7f2      	b.n	6962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157a>
    697c:	6861      	ldr	r1, [r4, #4]
    697e:	f89d 0000 	ldrb.w	r0, [sp]
    6982:	f881 02ce 	strb.w	r0, [r1, #718]	; 0x2ce
    6986:	6861      	ldr	r1, [r4, #4]
    6988:	f89d 0001 	ldrb.w	r0, [sp, #1]
    698c:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6990:	2025      	movs	r0, #37	; 0x25
    6992:	7028      	strb	r0, [r5, #0]
    6994:	6860      	ldr	r0, [r4, #4]
    6996:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    699a:	42a9      	cmp	r1, r5
    699c:	d102      	bne.n	69a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    699e:	f7fe fe31 	bl	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    69a2:	e001      	b.n	69a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    69a4:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    69a8:	2000      	movs	r0, #0
    69aa:	e79c      	b.n	68e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    69ac:	200000fc 	.word	0x200000fc
    69b0:	0000e61d 	.word	0x0000e61d
    69b4:	b570      	push	{r4, r5, r6, lr}
    69b6:	4604      	mov	r4, r0
    69b8:	6840      	ldr	r0, [r0, #4]
    69ba:	4d0a      	ldr	r5, [pc, #40]	; (69e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    69bc:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    69c0:	f041 0104 	orr.w	r1, r1, #4
    69c4:	7001      	strb	r1, [r0, #0]
    69c6:	68e8      	ldr	r0, [r5, #12]
    69c8:	f007 fbf5 	bl	e1b6 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    69cc:	4606      	mov	r6, r0
    69ce:	68e8      	ldr	r0, [r5, #12]
    69d0:	f007 fbf5 	bl	e1be <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    69d4:	4601      	mov	r1, r0
    69d6:	4622      	mov	r2, r4
    69d8:	4630      	mov	r0, r6
    69da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    69de:	f000 b895 	b.w	6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    69e2:	0000      	.short	0x0000
    69e4:	200000fc 	.word	0x200000fc
    69e8:	4602      	mov	r2, r0
    69ea:	4813      	ldr	r0, [pc, #76]	; (6a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    69ec:	68c0      	ldr	r0, [r0, #12]
    69ee:	7901      	ldrb	r1, [r0, #4]
    69f0:	4811      	ldr	r0, [pc, #68]	; (6a38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    69f2:	3010      	adds	r0, #16
    69f4:	6843      	ldr	r3, [r0, #4]
    69f6:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    69fa:	2821      	cmp	r0, #33	; 0x21
    69fc:	d010      	beq.n	6a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    69fe:	282e      	cmp	r0, #46	; 0x2e
    6a00:	d00e      	beq.n	6a20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6a02:	2828      	cmp	r0, #40	; 0x28
    6a04:	d00e      	beq.n	6a24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163c>
    6a06:	2804      	cmp	r0, #4
    6a08:	d00e      	beq.n	6a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    6a0a:	280f      	cmp	r0, #15
    6a0c:	d00e      	beq.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    6a0e:	281d      	cmp	r0, #29
    6a10:	d00e      	beq.n	6a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1648>
    6a12:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6a16:	2823      	cmp	r0, #35	; 0x23
    6a18:	d00c      	beq.n	6a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>
    6a1a:	20fe      	movs	r0, #254	; 0xfe
    6a1c:	f000 b876 	b.w	6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6a20:	2016      	movs	r0, #22
    6a22:	e7fb      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a24:	2023      	movs	r0, #35	; 0x23
    6a26:	e7f9      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a28:	200e      	movs	r0, #14
    6a2a:	e7f7      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a2c:	2012      	movs	r0, #18
    6a2e:	e7f5      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a30:	2014      	movs	r0, #20
    6a32:	e7f3      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a34:	2017      	movs	r0, #23
    6a36:	e7f1      	b.n	6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6a38:	200000fc 	.word	0x200000fc
    6a3c:	b510      	push	{r4, lr}
    6a3e:	4604      	mov	r4, r0
    6a40:	6840      	ldr	r0, [r0, #4]
    6a42:	2301      	movs	r3, #1
    6a44:	4619      	mov	r1, r3
    6a46:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6a4a:	3080      	adds	r0, #128	; 0x80
    6a4c:	f007 f8b0 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a50:	b108      	cbz	r0, 6a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    6a52:	2000      	movs	r0, #0
    6a54:	bd10      	pop	{r4, pc}
    6a56:	4806      	ldr	r0, [pc, #24]	; (6a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6a58:	68c0      	ldr	r0, [r0, #12]
    6a5a:	f007 fbda 	bl	e212 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a5e:	6861      	ldr	r1, [r4, #4]
    6a60:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    6a64:	6861      	ldr	r1, [r4, #4]
    6a66:	2006      	movs	r0, #6
    6a68:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    6a6c:	e7f1      	b.n	6a52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    6a6e:	0000      	.short	0x0000
    6a70:	200000fc 	.word	0x200000fc
    6a74:	b570      	push	{r4, r5, r6, lr}
    6a76:	4604      	mov	r4, r0
    6a78:	481f      	ldr	r0, [pc, #124]	; (6af8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>)
    6a7a:	2500      	movs	r5, #0
    6a7c:	68c0      	ldr	r0, [r0, #12]
    6a7e:	7903      	ldrb	r3, [r0, #4]
    6a80:	6860      	ldr	r0, [r4, #4]
    6a82:	2b16      	cmp	r3, #22
    6a84:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6a88:	d013      	beq.n	6ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    6a8a:	dc06      	bgt.n	6a9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    6a8c:	2b0e      	cmp	r3, #14
    6a8e:	d009      	beq.n	6aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6a90:	2b12      	cmp	r3, #18
    6a92:	d007      	beq.n	6aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6a94:	2b14      	cmp	r3, #20
    6a96:	d12c      	bne.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6a98:	e004      	b.n	6aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6a9a:	2b17      	cmp	r3, #23
    6a9c:	d002      	beq.n	6aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6a9e:	2b23      	cmp	r3, #35	; 0x23
    6aa0:	d127      	bne.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6aa2:	e01f      	b.n	6ae4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6aa4:	4622      	mov	r2, r4
    6aa6:	2101      	movs	r1, #1
    6aa8:	4618      	mov	r0, r3
    6aaa:	f008 fe38 	bl	f71e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6aae:	4605      	mov	r5, r0
    6ab0:	e01f      	b.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6ab2:	2821      	cmp	r0, #33	; 0x21
    6ab4:	d001      	beq.n	6aba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    6ab6:	282e      	cmp	r0, #46	; 0x2e
    6ab8:	d11b      	bne.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6aba:	4620      	mov	r0, r4
    6abc:	f008 fc8e 	bl	f3dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    6ac0:	6860      	ldr	r0, [r4, #4]
    6ac2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6ac6:	2922      	cmp	r1, #34	; 0x22
    6ac8:	d013      	beq.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6aca:	2108      	movs	r1, #8
    6acc:	30ec      	adds	r0, #236	; 0xec
    6ace:	f008 fc39 	bl	f344 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6ad2:	6860      	ldr	r0, [r4, #4]
    6ad4:	210b      	movs	r1, #11
    6ad6:	30ec      	adds	r0, #236	; 0xec
    6ad8:	f008 fc34 	bl	f344 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6adc:	201a      	movs	r0, #26
    6ade:	f7ff fc4b 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6ae2:	e006      	b.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6ae4:	2828      	cmp	r0, #40	; 0x28
    6ae6:	d104      	bne.n	6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6ae8:	4804      	ldr	r0, [pc, #16]	; (6afc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>)
    6aea:	6801      	ldr	r1, [r0, #0]
    6aec:	b109      	cbz	r1, 6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6aee:	4620      	mov	r0, r4
    6af0:	4788      	blx	r1
    6af2:	4628      	mov	r0, r5
    6af4:	bd70      	pop	{r4, r5, r6, pc}
    6af6:	0000      	.short	0x0000
    6af8:	200000fc 	.word	0x200000fc
    6afc:	20000270 	.word	0x20000270
    6b00:	4901      	ldr	r1, [pc, #4]	; (6b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>)
    6b02:	68c9      	ldr	r1, [r1, #12]
    6b04:	f7fc bdf2 	b.w	36ec <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6b08:	200000fc 	.word	0x200000fc
    6b0c:	4603      	mov	r3, r0
    6b0e:	2000      	movs	r0, #0
    6b10:	2b17      	cmp	r3, #23
    6b12:	d017      	beq.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6b14:	dc0a      	bgt.n	6b2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    6b16:	2b0e      	cmp	r3, #14
    6b18:	d014      	beq.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6b1a:	2b12      	cmp	r3, #18
    6b1c:	d012      	beq.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6b1e:	2b14      	cmp	r3, #20
    6b20:	d010      	beq.n	6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6b22:	2b16      	cmp	r3, #22
    6b24:	d112      	bne.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6b26:	4608      	mov	r0, r1
    6b28:	f7ff bc4c 	b.w	63c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    6b2c:	2b23      	cmp	r3, #35	; 0x23
    6b2e:	d003      	beq.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6b30:	2b24      	cmp	r3, #36	; 0x24
    6b32:	d001      	beq.n	6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6b34:	2b25      	cmp	r3, #37	; 0x25
    6b36:	d109      	bne.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6b38:	4a05      	ldr	r2, [pc, #20]	; (6b50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>)
    6b3a:	6812      	ldr	r2, [r2, #0]
    6b3c:	2a00      	cmp	r2, #0
    6b3e:	d005      	beq.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6b40:	4618      	mov	r0, r3
    6b42:	4710      	bx	r2
    6b44:	2100      	movs	r1, #0
    6b46:	4618      	mov	r0, r3
    6b48:	f008 bde9 	b.w	f71e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6b4c:	4770      	bx	lr
    6b4e:	0000      	.short	0x0000
    6b50:	2000026c 	.word	0x2000026c
    6b54:	4a03      	ldr	r2, [pc, #12]	; (6b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>)
    6b56:	6852      	ldr	r2, [r2, #4]
    6b58:	f882 0123 	strb.w	r0, [r2, #291]	; 0x123
    6b5c:	f882 1122 	strb.w	r1, [r2, #290]	; 0x122
    6b60:	4770      	bx	lr
    6b62:	0000      	.short	0x0000
    6b64:	2000010c 	.word	0x2000010c
    6b68:	b570      	push	{r4, r5, r6, lr}
    6b6a:	4604      	mov	r4, r0
    6b6c:	6840      	ldr	r0, [r0, #4]
    6b6e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6b72:	291c      	cmp	r1, #28
    6b74:	d004      	beq.n	6b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6b76:	f640 014e 	movw	r1, #2126	; 0x84e
    6b7a:	2031      	movs	r0, #49	; 0x31
    6b7c:	f7fa fb3e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b80:	2500      	movs	r5, #0
    6b82:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6b86:	6860      	ldr	r0, [r4, #4]
    6b88:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6b8c:	b161      	cbz	r1, 6ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    6b8e:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6b92:	6860      	ldr	r0, [r4, #4]
    6b94:	220d      	movs	r2, #13
    6b96:	8801      	ldrh	r1, [r0, #0]
    6b98:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6b9c:	6860      	ldr	r0, [r4, #4]
    6b9e:	490d      	ldr	r1, [pc, #52]	; (6bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ec>)
    6ba0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6ba4:	6860      	ldr	r0, [r4, #4]
    6ba6:	e00c      	b.n	6bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17da>
    6ba8:	8801      	ldrh	r1, [r0, #0]
    6baa:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6bae:	6860      	ldr	r0, [r4, #4]
    6bb0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6bb4:	6861      	ldr	r1, [r4, #4]
    6bb6:	2001      	movs	r0, #1
    6bb8:	220c      	movs	r2, #12
    6bba:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6bbe:	4906      	ldr	r1, [pc, #24]	; (6bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f0>)
    6bc0:	6860      	ldr	r0, [r4, #4]
    6bc2:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6bc6:	f007 fb8a 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6bca:	6860      	ldr	r0, [r4, #4]
    6bcc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6bd0:	bd70      	pop	{r4, r5, r6, pc}
    6bd2:	0000      	.short	0x0000
    6bd4:	0000e6bd 	.word	0x0000e6bd
    6bd8:	0000e69f 	.word	0x0000e69f
    6bdc:	4915      	ldr	r1, [pc, #84]	; (6c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>)
    6bde:	b510      	push	{r4, lr}
    6be0:	6889      	ldr	r1, [r1, #8]
    6be2:	790a      	ldrb	r2, [r1, #4]
    6be4:	6841      	ldr	r1, [r0, #4]
    6be6:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6bea:	2b09      	cmp	r3, #9
    6bec:	d10a      	bne.n	6c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6bee:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6bf2:	4293      	cmp	r3, r2
    6bf4:	d106      	bne.n	6c04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6bf6:	2200      	movs	r2, #0
    6bf8:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6bfc:	6840      	ldr	r0, [r0, #4]
    6bfe:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6c02:	bd10      	pop	{r4, pc}
    6c04:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6c08:	071c      	lsls	r4, r3, #28
    6c0a:	d507      	bpl.n	6c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    6c0c:	f023 0008 	bic.w	r0, r3, #8
    6c10:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c18:	f7fe bcf4 	b.w	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6c1c:	2aff      	cmp	r2, #255	; 0xff
    6c1e:	d004      	beq.n	6c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1842>
    6c20:	f240 71ea 	movw	r1, #2026	; 0x7ea
    6c24:	2031      	movs	r0, #49	; 0x31
    6c26:	f7fa fae9 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c2e:	f008 bc8b 	b.w	f548 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    6c32:	0000      	.short	0x0000
    6c34:	200000fc 	.word	0x200000fc
    6c38:	4808      	ldr	r0, [pc, #32]	; (6c5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1874>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	6840      	ldr	r0, [r0, #4]
    6c3e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6c42:	b941      	cbnz	r1, 6c56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186e>
    6c44:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6c48:	2301      	movs	r3, #1
    6c4a:	2106      	movs	r1, #6
    6c4c:	3080      	adds	r0, #128	; 0x80
    6c4e:	f006 ffaf 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6c52:	2800      	cmp	r0, #0
    6c54:	d000      	beq.n	6c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    6c56:	2001      	movs	r0, #1
    6c58:	bd10      	pop	{r4, pc}
    6c5a:	0000      	.short	0x0000
    6c5c:	2000010c 	.word	0x2000010c
    6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c62:	4c59      	ldr	r4, [pc, #356]	; (6dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6c64:	4606      	mov	r6, r0
    6c66:	4615      	mov	r5, r2
    6c68:	6860      	ldr	r0, [r4, #4]
    6c6a:	2200      	movs	r2, #0
    6c6c:	b111      	cbz	r1, 6c74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    6c6e:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6c72:	e006      	b.n	6c82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189a>
    6c74:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6c78:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6c7c:	4411      	add	r1, r2
    6c7e:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6c82:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6c86:	f88d 1000 	strb.w	r1, [sp]
    6c8a:	9900      	ldr	r1, [sp, #0]
    6c8c:	9100      	str	r1, [sp, #0]
    6c8e:	f89d 1000 	ldrb.w	r1, [sp]
    6c92:	b939      	cbnz	r1, 6ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6c94:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6c98:	2301      	movs	r3, #1
    6c9a:	4619      	mov	r1, r3
    6c9c:	3080      	adds	r0, #128	; 0x80
    6c9e:	f006 ff87 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6ca2:	b130      	cbz	r0, 6cb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    6ca4:	6860      	ldr	r0, [r4, #4]
    6ca6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6caa:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6cae:	4411      	add	r1, r2
    6cb0:	8001      	strh	r1, [r0, #0]
    6cb2:	6860      	ldr	r0, [r4, #4]
    6cb4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6cb8:	b132      	cbz	r2, 6cc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e0>
    6cba:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6cbe:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6cc2:	4419      	add	r1, r3
    6cc4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6cc8:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6ccc:	2b00      	cmp	r3, #0
    6cce:	dd06      	ble.n	6cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f6>
    6cd0:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6cd4:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6cd8:	4439      	add	r1, r7
    6cda:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6cde:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6ce2:	bb09      	cbnz	r1, 6d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6ce4:	b9be      	cbnz	r6, 6d16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192e>
    6ce6:	4938      	ldr	r1, [pc, #224]	; (6dc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6ce8:	3910      	subs	r1, #16
    6cea:	7809      	ldrb	r1, [r1, #0]
    6cec:	2902      	cmp	r1, #2
    6cee:	d006      	beq.n	6cfe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6cf0:	2901      	cmp	r1, #1
    6cf2:	d00a      	beq.n	6d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1922>
    6cf4:	b1f5      	cbz	r5, 6d34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    6cf6:	06e9      	lsls	r1, r5, #27
    6cf8:	d50b      	bpl.n	6d12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192a>
    6cfa:	211e      	movs	r1, #30
    6cfc:	e042      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6cfe:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6d02:	2906      	cmp	r1, #6
    6d04:	d03e      	beq.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d06:	2116      	movs	r1, #22
    6d08:	e03c      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d0a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6d0e:	b959      	cbnz	r1, 6d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6d10:	e054      	b.n	6dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6d12:	0729      	lsls	r1, r5, #28
    6d14:	d501      	bpl.n	6d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1932>
    6d16:	213d      	movs	r1, #61	; 0x3d
    6d18:	e034      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d1a:	06a9      	lsls	r1, r5, #26
    6d1c:	d501      	bpl.n	6d22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193a>
    6d1e:	2123      	movs	r1, #35	; 0x23
    6d20:	e030      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d22:	07a9      	lsls	r1, r5, #30
    6d24:	d001      	beq.n	6d2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    6d26:	212a      	movs	r1, #42	; 0x2a
    6d28:	e02c      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d2a:	f640 615e 	movw	r1, #3678	; 0xe5e
    6d2e:	2031      	movs	r0, #49	; 0x31
    6d30:	f7fa fa64 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d34:	b12a      	cbz	r2, 6d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    6d36:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6d3a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6d3e:	4291      	cmp	r1, r2
    6d40:	d216      	bcs.n	6d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6d42:	2b00      	cmp	r3, #0
    6d44:	dd05      	ble.n	6d52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196a>
    6d46:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6d4a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6d4e:	4291      	cmp	r1, r2
    6d50:	d20e      	bcs.n	6d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6d52:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6d56:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6d5a:	428a      	cmp	r2, r1
    6d5c:	d30a      	bcc.n	6d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6d5e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6d62:	f88d 2000 	strb.w	r2, [sp]
    6d66:	9a00      	ldr	r2, [sp, #0]
    6d68:	9200      	str	r2, [sp, #0]
    6d6a:	f89d 2000 	ldrb.w	r2, [sp]
    6d6e:	b10a      	cbz	r2, 6d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6d70:	2122      	movs	r1, #34	; 0x22
    6d72:	e007      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6d74:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6d78:	b172      	cbz	r2, 6d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6d7a:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6d7e:	428a      	cmp	r2, r1
    6d80:	d31c      	bcc.n	6dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6d82:	2108      	movs	r1, #8
    6d84:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6d88:	f88d 2000 	strb.w	r2, [sp]
    6d8c:	9a00      	ldr	r2, [sp, #0]
    6d8e:	9200      	str	r2, [sp, #0]
    6d90:	f89d 2000 	ldrb.w	r2, [sp]
    6d94:	b96a      	cbnz	r2, 6db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    6d96:	e005      	b.n	6da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>
    6d98:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6d9c:	2906      	cmp	r1, #6
    6d9e:	d30d      	bcc.n	6dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6da0:	213e      	movs	r1, #62	; 0x3e
    6da2:	e7ef      	b.n	6d84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6da4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6da8:	220b      	movs	r2, #11
    6daa:	4908      	ldr	r1, [pc, #32]	; (6dcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>)
    6dac:	30b4      	adds	r0, #180	; 0xb4
    6dae:	f007 fa96 	bl	e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6db2:	6860      	ldr	r0, [r4, #4]
    6db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6db8:	f008 bad4 	b.w	f364 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6dbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6dc0:	2100      	movs	r1, #0
    6dc2:	f7fd be07 	b.w	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6dc6:	0000      	.short	0x0000
    6dc8:	2000010c 	.word	0x2000010c
    6dcc:	0000e61d 	.word	0x0000e61d
    6dd0:	b570      	push	{r4, r5, r6, lr}
    6dd2:	4d2e      	ldr	r5, [pc, #184]	; (6e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aa4>)
    6dd4:	6868      	ldr	r0, [r5, #4]
    6dd6:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6dda:	b151      	cbz	r1, 6df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6ddc:	2901      	cmp	r1, #1
    6dde:	d008      	beq.n	6df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6de0:	2902      	cmp	r1, #2
    6de2:	d009      	beq.n	6df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6de4:	2903      	cmp	r1, #3
    6de6:	d007      	beq.n	6df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a10>
    6de8:	f640 41d7 	movw	r1, #3287	; 0xcd7
    6dec:	2031      	movs	r0, #49	; 0x31
    6dee:	f7fa fa05 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6df2:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6df6:	e037      	b.n	6e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a80>
    6df8:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    6dfc:	2907      	cmp	r1, #7
    6dfe:	d036      	beq.n	6e6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a86>
    6e00:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6e04:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6e08:	2400      	movs	r4, #0
    6e0a:	1c93      	adds	r3, r2, #2
    6e0c:	4299      	cmp	r1, r3
    6e0e:	d306      	bcc.n	6e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6e10:	1a89      	subs	r1, r1, r2
    6e12:	1e89      	subs	r1, r1, #2
    6e14:	040c      	lsls	r4, r1, #16
    6e16:	0c24      	lsrs	r4, r4, #16
    6e18:	d001      	beq.n	6e1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a36>
    6e1a:	1e64      	subs	r4, r4, #1
    6e1c:	b2a4      	uxth	r4, r4
    6e1e:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    6e22:	b139      	cbz	r1, 6e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>
    6e24:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6e28:	2301      	movs	r3, #1
    6e2a:	2109      	movs	r1, #9
    6e2c:	3080      	adds	r0, #128	; 0x80
    6e2e:	f006 febf 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e32:	b340      	cbz	r0, 6e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    6e34:	f7ff ff00 	bl	6c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    6e38:	b178      	cbz	r0, 6e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6e3a:	686a      	ldr	r2, [r5, #4]
    6e3c:	2000      	movs	r0, #0
    6e3e:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    6e42:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    6e46:	1c93      	adds	r3, r2, #2
    6e48:	4299      	cmp	r1, r3
    6e4a:	d303      	bcc.n	6e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6e4c:	1a88      	subs	r0, r1, r2
    6e4e:	1e80      	subs	r0, r0, #2
    6e50:	d000      	beq.n	6e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a6c>
    6e52:	1e40      	subs	r0, r0, #1
    6e54:	42a0      	cmp	r0, r4
    6e56:	d200      	bcs.n	6e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a72>
    6e58:	b284      	uxth	r4, r0
    6e5a:	b10c      	cbz	r4, 6e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    6e5c:	1e64      	subs	r4, r4, #1
    6e5e:	b2a4      	uxth	r4, r4
    6e60:	6868      	ldr	r0, [r5, #4]
    6e62:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    6e66:	4421      	add	r1, r4
    6e68:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    6e6c:	bd70      	pop	{r4, r5, r6, pc}
    6e6e:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6e72:	2903      	cmp	r1, #3
    6e74:	d3bd      	bcc.n	6df2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0a>
    6e76:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    6e7a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    6e7c:	4411      	add	r1, r2
    6e7e:	1c49      	adds	r1, r1, #1
    6e80:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    6e84:	bd70      	pop	{r4, r5, r6, pc}
    6e86:	2400      	movs	r4, #0
    6e88:	e7ea      	b.n	6e60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a78>
    6e8a:	0000      	.short	0x0000
    6e8c:	2000010c 	.word	0x2000010c

00006e90 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6e90:	b570      	push	{r4, r5, r6, lr}
    6e92:	6844      	ldr	r4, [r0, #4]
    6e94:	220d      	movs	r2, #13
    6e96:	f504 7598 	add.w	r5, r4, #304	; 0x130
    6e9a:	2100      	movs	r1, #0
    6e9c:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    6ea0:	f009 ff2c 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ea4:	f44f 70a3 	mov.w	r0, #326	; 0x146
    6ea8:	2100      	movs	r1, #0
    6eaa:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    6eae:	5501      	strb	r1, [r0, r4]
    6eb0:	f8a5 1017 	strh.w	r1, [r5, #23]
    6eb4:	7669      	strb	r1, [r5, #25]
    6eb6:	4608      	mov	r0, r1
    6eb8:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6ebc:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6ec0:	1c40      	adds	r0, r0, #1
    6ec2:	b2c0      	uxtb	r0, r0
    6ec4:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    6ec8:	2802      	cmp	r0, #2
    6eca:	d3f7      	bcc.n	6ebc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6ecc:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6ed0:	4620      	mov	r0, r4
    6ed2:	f008 fd12 	bl	f8fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6ed6:	2000      	movs	r0, #0
    6ed8:	21ff      	movs	r1, #255	; 0xff
    6eda:	1822      	adds	r2, r4, r0
    6edc:	1c40      	adds	r0, r0, #1
    6ede:	b2c0      	uxtb	r0, r0
    6ee0:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    6ee4:	2802      	cmp	r0, #2
    6ee6:	d3f8      	bcc.n	6eda <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6ee8:	bd70      	pop	{r4, r5, r6, pc}
	...

00006eec <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6eec:	4903      	ldr	r1, [pc, #12]	; (6efc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6eee:	884a      	ldrh	r2, [r1, #2]
    6ef0:	8002      	strh	r2, [r0, #0]
    6ef2:	7809      	ldrb	r1, [r1, #0]
    6ef4:	7081      	strb	r1, [r0, #2]
    6ef6:	2000      	movs	r0, #0
    6ef8:	4770      	bx	lr
    6efa:	0000      	.short	0x0000
    6efc:	20000ef0 	.word	0x20000ef0

00006f00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6f00:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6f02:	460c      	mov	r4, r1
    6f04:	4605      	mov	r5, r0
    6f06:	8800      	ldrh	r0, [r0, #0]
    6f08:	4669      	mov	r1, sp
    6f0a:	f006 fe27 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6f0e:	2200      	movs	r2, #0
    6f10:	b128      	cbz	r0, 6f1e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    6f12:	f8c4 2002 	str.w	r2, [r4, #2]
    6f16:	71a2      	strb	r2, [r4, #6]
    6f18:	8022      	strh	r2, [r4, #0]
    6f1a:	2002      	movs	r0, #2
    6f1c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6f1e:	9901      	ldr	r1, [sp, #4]
    6f20:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    6f24:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    6f28:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    6f2c:	f8c4 0002 	str.w	r0, [r4, #2]
    6f30:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    6f34:	71a0      	strb	r0, [r4, #6]
    6f36:	8828      	ldrh	r0, [r5, #0]
    6f38:	8020      	strh	r0, [r4, #0]
    6f3a:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    6f3e:	f88d 0008 	strb.w	r0, [sp, #8]
    6f42:	9802      	ldr	r0, [sp, #8]
    6f44:	9002      	str	r0, [sp, #8]
    6f46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6f4a:	2800      	cmp	r0, #0
    6f4c:	d1ea      	bne.n	6f24 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    6f4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00006f50 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    6f50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6f52:	460d      	mov	r5, r1
    6f54:	4606      	mov	r6, r0
    6f56:	8800      	ldrh	r0, [r0, #0]
    6f58:	4669      	mov	r1, sp
    6f5a:	f006 fdff 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6f5e:	2800      	cmp	r0, #0
    6f60:	d11a      	bne.n	6f98 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    6f62:	f8dd 4004 	ldr.w	r4, [sp, #4]
    6f66:	2700      	movs	r7, #0
    6f68:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    6f6c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    6f70:	f009 f9cf 	bl	10312 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6f74:	70a8      	strb	r0, [r5, #2]
    6f76:	7860      	ldrb	r0, [r4, #1]
    6f78:	f009 f9cb 	bl	10312 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    6f7c:	70e8      	strb	r0, [r5, #3]
    6f7e:	78a0      	ldrb	r0, [r4, #2]
    6f80:	f88d 0008 	strb.w	r0, [sp, #8]
    6f84:	9802      	ldr	r0, [sp, #8]
    6f86:	9002      	str	r0, [sp, #8]
    6f88:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6f8c:	3c6a      	subs	r4, #106	; 0x6a
    6f8e:	2800      	cmp	r0, #0
    6f90:	d1ea      	bne.n	6f68 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    6f92:	8830      	ldrh	r0, [r6, #0]
    6f94:	8028      	strh	r0, [r5, #0]
    6f96:	2000      	movs	r0, #0
    6f98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00006f9c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    6f9c:	4903      	ldr	r1, [pc, #12]	; (6fac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    6f9e:	888a      	ldrh	r2, [r1, #4]
    6fa0:	8002      	strh	r2, [r0, #0]
    6fa2:	88c9      	ldrh	r1, [r1, #6]
    6fa4:	8041      	strh	r1, [r0, #2]
    6fa6:	2000      	movs	r0, #0
    6fa8:	4770      	bx	lr
    6faa:	0000      	.short	0x0000
    6fac:	2000027c 	.word	0x2000027c

00006fb0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    6fb0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6fb2:	2400      	movs	r4, #0
    6fb4:	a902      	add	r1, sp, #8
    6fb6:	f88d 4004 	strb.w	r4, [sp, #4]
    6fba:	f88d 4008 	strb.w	r4, [sp, #8]
    6fbe:	9100      	str	r1, [sp, #0]
    6fc0:	7882      	ldrb	r2, [r0, #2]
    6fc2:	7841      	ldrb	r1, [r0, #1]
    6fc4:	7800      	ldrb	r0, [r0, #0]
    6fc6:	ab01      	add	r3, sp, #4
    6fc8:	f009 fb17 	bl	105fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    6fcc:	2800      	cmp	r0, #0
    6fce:	d112      	bne.n	6ff6 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    6fd0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6fd4:	f009 fa51 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6fd8:	b170      	cbz	r0, 6ff8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6fda:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6fde:	f009 fa4c 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    6fe2:	b148      	cbz	r0, 6ff8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    6fe4:	4805      	ldr	r0, [pc, #20]	; (6ffc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    6fe6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6fea:	7381      	strb	r1, [r0, #14]
    6fec:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6ff0:	73c1      	strb	r1, [r0, #15]
    6ff2:	8204      	strh	r4, [r0, #16]
    6ff4:	2000      	movs	r0, #0
    6ff6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6ff8:	2011      	movs	r0, #17
    6ffa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    6ffc:	20000ef0 	.word	0x20000ef0

00007000 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7000:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7004:	460f      	mov	r7, r1
    7006:	4605      	mov	r5, r0
    7008:	7806      	ldrb	r6, [r0, #0]
    700a:	f009 f9e9 	bl	103e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    700e:	2800      	cmp	r0, #0
    7010:	d10a      	bne.n	7028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7012:	4628      	mov	r0, r5
    7014:	f009 f9be 	bl	10394 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    7018:	2800      	cmp	r0, #0
    701a:	d105      	bne.n	7028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    701c:	2001      	movs	r0, #1
    701e:	f7fa fae1 	bl	15e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7022:	4286      	cmp	r6, r0
    7024:	d302      	bcc.n	702c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    7026:	2007      	movs	r0, #7
    7028:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    702c:	2101      	movs	r1, #1
    702e:	4630      	mov	r0, r6
    7030:	f006 fb19 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7034:	0004      	movs	r4, r0
    7036:	d004      	beq.n	7042 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    7038:	f007 fea6 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    703c:	b168      	cbz	r0, 705a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    703e:	200c      	movs	r0, #12
    7040:	e7f2      	b.n	7028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7042:	2101      	movs	r1, #1
    7044:	4630      	mov	r0, r6
    7046:	f006 fb04 	bl	d652 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    704a:	0004      	movs	r4, r0
    704c:	d013      	beq.n	7076 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    704e:	4817      	ldr	r0, [pc, #92]	; (70ac <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    7050:	f990 1000 	ldrsb.w	r1, [r0]
    7054:	4620      	mov	r0, r4
    7056:	f007 fc59 	bl	e90c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    705a:	4620      	mov	r0, r4
    705c:	f007 fcc1 	bl	e9e2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    7060:	7038      	strb	r0, [r7, #0]
    7062:	74e8      	strb	r0, [r5, #19]
    7064:	4629      	mov	r1, r5
    7066:	4620      	mov	r0, r4
    7068:	f7fc fce6 	bl	3a38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    706c:	4606      	mov	r6, r0
    706e:	7e68      	ldrb	r0, [r5, #25]
    7070:	b1d0      	cbz	r0, 70a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7072:	b12e      	cbz	r6, 7080 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    7074:	e018      	b.n	70a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7076:	f241 31e8 	movw	r1, #5096	; 0x13e8
    707a:	2039      	movs	r0, #57	; 0x39
    707c:	f7fa f8be 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7080:	2200      	movs	r2, #0
    7082:	4668      	mov	r0, sp
    7084:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7086:	f006 fba0 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    708a:	2200      	movs	r2, #0
    708c:	2101      	movs	r1, #1
    708e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7090:	f006 fc15 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7094:	2204      	movs	r2, #4
    7096:	4668      	mov	r0, sp
    7098:	6b61      	ldr	r1, [r4, #52]	; 0x34
    709a:	f006 fb96 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    709e:	2200      	movs	r2, #0
    70a0:	4611      	mov	r1, r2
    70a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    70a4:	f006 fc0b 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    70a8:	4630      	mov	r0, r6
    70aa:	e7bd      	b.n	7028 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    70ac:	20000274 	.word	0x20000274

000070b0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    70b0:	7801      	ldrb	r1, [r0, #0]
    70b2:	b171      	cbz	r1, 70d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    70b4:	7841      	ldrb	r1, [r0, #1]
    70b6:	b161      	cbz	r1, 70d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    70b8:	8841      	ldrh	r1, [r0, #2]
    70ba:	291b      	cmp	r1, #27
    70bc:	d309      	bcc.n	70d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    70be:	8881      	ldrh	r1, [r0, #4]
    70c0:	291b      	cmp	r1, #27
    70c2:	d306      	bcc.n	70d2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    70c4:	4904      	ldr	r1, [pc, #16]	; (70d8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    70c6:	6802      	ldr	r2, [r0, #0]
    70c8:	600a      	str	r2, [r1, #0]
    70ca:	8880      	ldrh	r0, [r0, #4]
    70cc:	8088      	strh	r0, [r1, #4]
    70ce:	2000      	movs	r0, #0
    70d0:	4770      	bx	lr
    70d2:	2012      	movs	r0, #18
    70d4:	4770      	bx	lr
    70d6:	0000      	.short	0x0000
    70d8:	20000ef0 	.word	0x20000ef0

000070dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    70dc:	6800      	ldr	r0, [r0, #0]
    70de:	f240 41e2 	movw	r1, #1250	; 0x4e2
    70e2:	4288      	cmp	r0, r1
    70e4:	d303      	bcc.n	70ee <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    70e6:	4903      	ldr	r1, [pc, #12]	; (70f4 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    70e8:	6088      	str	r0, [r1, #8]
    70ea:	2000      	movs	r0, #0
    70ec:	4770      	bx	lr
    70ee:	2012      	movs	r0, #18
    70f0:	4770      	bx	lr
    70f2:	0000      	.short	0x0000
    70f4:	20000ef0 	.word	0x20000ef0

000070f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    70f8:	4a03      	ldr	r2, [pc, #12]	; (7108 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    70fa:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    70fe:	6001      	str	r1, [r0, #0]
    7100:	6042      	str	r2, [r0, #4]
    7102:	2000      	movs	r0, #0
    7104:	4770      	bx	lr
    7106:	0000      	.short	0x0000
    7108:	00007644 	.word	0x00007644

0000710c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    710c:	b50e      	push	{r1, r2, r3, lr}
    710e:	8800      	ldrh	r0, [r0, #0]
    7110:	4669      	mov	r1, sp
    7112:	f006 fd23 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7116:	b960      	cbnz	r0, 7132 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7118:	9801      	ldr	r0, [sp, #4]
    711a:	f009 fa2a 	bl	10572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    711e:	b140      	cbz	r0, 7132 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7120:	9801      	ldr	r0, [sp, #4]
    7122:	4601      	mov	r1, r0
    7124:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    7128:	3080      	adds	r0, #128	; 0x80
    712a:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    712e:	b962      	cbnz	r2, 714a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7130:	e001      	b.n	7136 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    7132:	2002      	movs	r0, #2
    7134:	bd0e      	pop	{r1, r2, r3, pc}
    7136:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    713a:	f88d 2008 	strb.w	r2, [sp, #8]
    713e:	9a02      	ldr	r2, [sp, #8]
    7140:	9202      	str	r2, [sp, #8]
    7142:	f89d 3008 	ldrb.w	r3, [sp, #8]
    7146:	2201      	movs	r2, #1
    7148:	b10b      	cbz	r3, 714e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    714a:	203a      	movs	r0, #58	; 0x3a
    714c:	bd0e      	pop	{r1, r2, r3, pc}
    714e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    7152:	079b      	lsls	r3, r3, #30
    7154:	d006      	beq.n	7164 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7156:	2203      	movs	r2, #3
    7158:	4905      	ldr	r1, [pc, #20]	; (7170 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    715a:	305e      	adds	r0, #94	; 0x5e
    715c:	f007 f8d3 	bl	e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7160:	2000      	movs	r0, #0
    7162:	bd0e      	pop	{r1, r2, r3, pc}
    7164:	700a      	strb	r2, [r1, #0]
    7166:	4668      	mov	r0, sp
    7168:	f007 f896 	bl	e298 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    716c:	e7f8      	b.n	7160 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    716e:	0000      	.short	0x0000
    7170:	0000e77b 	.word	0x0000e77b

00007174 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7174:	b510      	push	{r4, lr}
    7176:	2005      	movs	r0, #5
    7178:	f000 faf6 	bl	7768 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    717c:	f7fe f88c 	bl	5298 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    7180:	4902      	ldr	r1, [pc, #8]	; (718c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    7182:	4801      	ldr	r0, [pc, #4]	; (7188 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7184:	6048      	str	r0, [r1, #4]
    7186:	bd10      	pop	{r4, pc}
    7188:	000071bd 	.word	0x000071bd
    718c:	20000274 	.word	0x20000274
    7190:	b51c      	push	{r2, r3, r4, lr}
    7192:	4909      	ldr	r1, [pc, #36]	; (71b8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    7194:	e9d1 0100 	ldrd	r0, r1, [r1]
    7198:	e9cd 0100 	strd	r0, r1, [sp]
    719c:	e005      	b.n	71aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    719e:	9800      	ldr	r0, [sp, #0]
    71a0:	f007 fdf2 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    71a4:	b108      	cbz	r0, 71aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    71a6:	2001      	movs	r0, #1
    71a8:	bd1c      	pop	{r2, r3, r4, pc}
    71aa:	4668      	mov	r0, sp
    71ac:	f7fa fa64 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    71b0:	2800      	cmp	r0, #0
    71b2:	d0f4      	beq.n	719e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    71b4:	2000      	movs	r0, #0
    71b6:	bd1c      	pop	{r2, r3, r4, pc}
    71b8:	00007644 	.word	0x00007644
    71bc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    71c0:	4613      	mov	r3, r2
    71c2:	4a33      	ldr	r2, [pc, #204]	; (7290 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    71c4:	460f      	mov	r7, r1
    71c6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    71ca:	8814      	ldrh	r4, [r2, #0]
    71cc:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    71d0:	428c      	cmp	r4, r1
    71d2:	d200      	bcs.n	71d6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    71d4:	4621      	mov	r1, r4
    71d6:	4688      	mov	r8, r1
    71d8:	8891      	ldrh	r1, [r2, #4]
    71da:	42b1      	cmp	r1, r6
    71dc:	d200      	bcs.n	71e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    71de:	460e      	mov	r6, r1
    71e0:	8851      	ldrh	r1, [r2, #2]
    71e2:	f640 0448 	movw	r4, #2120	; 0x848
    71e6:	42a1      	cmp	r1, r4
    71e8:	d300      	bcc.n	71ec <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    71ea:	4621      	mov	r1, r4
    71ec:	88d5      	ldrh	r5, [r2, #6]
    71ee:	42a5      	cmp	r5, r4
    71f0:	d300      	bcc.n	71f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    71f2:	4625      	mov	r5, r4
    71f4:	42a1      	cmp	r1, r4
    71f6:	d200      	bcs.n	71fa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    71f8:	460c      	mov	r4, r1
    71fa:	f44f 72a4 	mov.w	r2, #328	; 0x148
    71fe:	2e1b      	cmp	r6, #27
    7200:	d001      	beq.n	7206 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    7202:	4295      	cmp	r5, r2
    7204:	d104      	bne.n	7210 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    7206:	f1b8 0f1b 	cmp.w	r8, #27
    720a:	d03e      	beq.n	728a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    720c:	4294      	cmp	r4, r2
    720e:	d03c      	beq.n	728a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7210:	466a      	mov	r2, sp
    7212:	4619      	mov	r1, r3
    7214:	f009 f954 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7218:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    721c:	4641      	mov	r1, r8
    721e:	4540      	cmp	r0, r8
    7220:	d900      	bls.n	7224 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7222:	4608      	mov	r0, r1
    7224:	80f8      	strh	r0, [r7, #6]
    7226:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    722a:	42a1      	cmp	r1, r4
    722c:	d800      	bhi.n	7230 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    722e:	460c      	mov	r4, r1
    7230:	813c      	strh	r4, [r7, #8]
    7232:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7236:	42b1      	cmp	r1, r6
    7238:	d800      	bhi.n	723c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    723a:	460e      	mov	r6, r1
    723c:	807e      	strh	r6, [r7, #2]
    723e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7242:	42a9      	cmp	r1, r5
    7244:	d800      	bhi.n	7248 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    7246:	460d      	mov	r5, r1
    7248:	80bd      	strh	r5, [r7, #4]
    724a:	21ff      	movs	r1, #255	; 0xff
    724c:	7039      	strb	r1, [r7, #0]
    724e:	381b      	subs	r0, #27
    7250:	28e0      	cmp	r0, #224	; 0xe0
    7252:	d902      	bls.n	725a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    7254:	f640 516e 	movw	r1, #3438	; 0xd6e
    7258:	e014      	b.n	7284 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    725a:	3e1b      	subs	r6, #27
    725c:	2ee0      	cmp	r6, #224	; 0xe0
    725e:	d902      	bls.n	7266 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    7260:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7264:	e00e      	b.n	7284 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    7266:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    726a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    726e:	4284      	cmp	r4, r0
    7270:	d902      	bls.n	7278 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    7272:	f640 5172 	movw	r1, #3442	; 0xd72
    7276:	e005      	b.n	7284 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    7278:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    727c:	4285      	cmp	r5, r0
    727e:	d904      	bls.n	728a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7280:	f640 5174 	movw	r1, #3444	; 0xd74
    7284:	2039      	movs	r0, #57	; 0x39
    7286:	f7f9 ffb9 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    728a:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    728e:	0000      	.short	0x0000
    7290:	2000027c 	.word	0x2000027c
    7294:	b510      	push	{r4, lr}
    7296:	480d      	ldr	r0, [pc, #52]	; (72cc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    7298:	2100      	movs	r1, #0
    729a:	4b0d      	ldr	r3, [pc, #52]	; (72d0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    729c:	74c1      	strb	r1, [r0, #19]
    729e:	8281      	strh	r1, [r0, #20]
    72a0:	221b      	movs	r2, #27
    72a2:	801a      	strh	r2, [r3, #0]
    72a4:	f44f 74a4 	mov.w	r4, #328	; 0x148
    72a8:	805c      	strh	r4, [r3, #2]
    72aa:	809a      	strh	r2, [r3, #4]
    72ac:	80dc      	strh	r4, [r3, #6]
    72ae:	7381      	strb	r1, [r0, #14]
    72b0:	73c1      	strb	r1, [r0, #15]
    72b2:	2303      	movs	r3, #3
    72b4:	7003      	strb	r3, [r0, #0]
    72b6:	2302      	movs	r3, #2
    72b8:	7043      	strb	r3, [r0, #1]
    72ba:	8042      	strh	r2, [r0, #2]
    72bc:	8082      	strh	r2, [r0, #4]
    72be:	f640 62a6 	movw	r2, #3750	; 0xea6
    72c2:	6082      	str	r2, [r0, #8]
    72c4:	7481      	strb	r1, [r0, #18]
    72c6:	7301      	strb	r1, [r0, #12]
    72c8:	bd10      	pop	{r4, pc}
    72ca:	0000      	.short	0x0000
    72cc:	20000ef0 	.word	0x20000ef0
    72d0:	2000027c 	.word	0x2000027c
    72d4:	b510      	push	{r4, lr}
    72d6:	2101      	movs	r1, #1
    72d8:	2000      	movs	r0, #0
    72da:	f006 f9c4 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    72de:	0004      	movs	r4, r0
    72e0:	d10a      	bne.n	72f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    72e2:	2101      	movs	r1, #1
    72e4:	f006 f9b5 	bl	d652 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    72e8:	0004      	movs	r4, r0
    72ea:	d007      	beq.n	72fc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    72ec:	4806      	ldr	r0, [pc, #24]	; (7308 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    72ee:	f990 1000 	ldrsb.w	r1, [r0]
    72f2:	4620      	mov	r0, r4
    72f4:	f007 fb0a 	bl	e90c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    72f8:	4620      	mov	r0, r4
    72fa:	bd10      	pop	{r4, pc}
    72fc:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    7300:	2039      	movs	r0, #57	; 0x39
    7302:	f7f9 ff7b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7306:	0000      	.short	0x0000
    7308:	20000274 	.word	0x20000274

0000730c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    730c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7310:	b087      	sub	sp, #28
    7312:	460c      	mov	r4, r1
    7314:	4680      	mov	r8, r0
    7316:	4605      	mov	r5, r0
    7318:	f007 fb66 	bl	e9e8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    731c:	b198      	cbz	r0, 7346 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    731e:	4628      	mov	r0, r5
    7320:	f007 fb55 	bl	e9ce <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7324:	b130      	cbz	r0, 7334 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7326:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    732a:	2012      	movs	r0, #18
    732c:	2900      	cmp	r1, #0
    732e:	d00b      	beq.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7330:	2980      	cmp	r1, #128	; 0x80
    7332:	d809      	bhi.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7334:	4628      	mov	r0, r5
    7336:	f007 fb3b 	bl	e9b0 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    733a:	b140      	cbz	r0, 734e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    733c:	4640      	mov	r0, r8
    733e:	f007 faa6 	bl	e88e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    7342:	b130      	cbz	r0, 7352 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    7344:	e009      	b.n	735a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    7346:	2042      	movs	r0, #66	; 0x42
    7348:	b007      	add	sp, #28
    734a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    734e:	200c      	movs	r0, #12
    7350:	e7fa      	b.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7352:	4640      	mov	r0, r8
    7354:	f007 fb35 	bl	e9c2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    7358:	b3c8      	cbz	r0, 73ce <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    735a:	4640      	mov	r0, r8
    735c:	f007 fd14 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7360:	2800      	cmp	r0, #0
    7362:	d1f4      	bne.n	734e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7364:	4640      	mov	r0, r8
    7366:	f007 faad 	bl	e8c4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    736a:	2800      	cmp	r0, #0
    736c:	d1ef      	bne.n	734e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    736e:	4640      	mov	r0, r8
    7370:	f7fc fb00 	bl	3974 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    7374:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7378:	f242 7110 	movw	r1, #10000	; 0x2710
    737c:	fb00 f901 	mul.w	r9, r0, r1
    7380:	78e1      	ldrb	r1, [r4, #3]
    7382:	4640      	mov	r0, r8
    7384:	f007 fb0b 	bl	e99e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7388:	4640      	mov	r0, r8
    738a:	f007 fb1c 	bl	e9c6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    738e:	b308      	cbz	r0, 73d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    7390:	2100      	movs	r1, #0
    7392:	a801      	add	r0, sp, #4
    7394:	f7fa f990 	bl	16b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    7398:	0004      	movs	r4, r0
    739a:	d07b      	beq.n	7494 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    739c:	2100      	movs	r1, #0
    739e:	f7fb fcf3 	bl	2d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    73a2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    73a6:	8020      	strh	r0, [r4, #0]
    73a8:	4621      	mov	r1, r4
    73aa:	4640      	mov	r0, r8
    73ac:	f007 fb33 	bl	ea16 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    73b0:	f000 f9e6 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    73b4:	0940      	lsrs	r0, r0, #5
    73b6:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    73ba:	07c0      	lsls	r0, r0, #31
    73bc:	4d41      	ldr	r5, [pc, #260]	; (74c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    73be:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    73c2:	d011      	beq.n	73e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    73c4:	8869      	ldrh	r1, [r5, #2]
    73c6:	88aa      	ldrh	r2, [r5, #4]
    73c8:	84c1      	strh	r1, [r0, #38]	; 0x26
    73ca:	8502      	strh	r2, [r0, #40]	; 0x28
    73cc:	e00f      	b.n	73ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    73ce:	e7ff      	b.n	73d0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    73d0:	2012      	movs	r0, #18
    73d2:	e7b9      	b.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    73d4:	464a      	mov	r2, r9
    73d6:	2100      	movs	r1, #0
    73d8:	4640      	mov	r0, r8
    73da:	f7fd f9e9 	bl	47b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    73de:	2800      	cmp	r0, #0
    73e0:	d0b2      	beq.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    73e2:	f241 6122 	movw	r1, #5666	; 0x1622
    73e6:	e05f      	b.n	74a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    73e8:	221b      	movs	r2, #27
    73ea:	84c2      	strh	r2, [r0, #38]	; 0x26
    73ec:	8502      	strh	r2, [r0, #40]	; 0x28
    73ee:	f000 f9c7 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    73f2:	0788      	lsls	r0, r1, #30
    73f4:	f04f 0601 	mov.w	r6, #1
    73f8:	d505      	bpl.n	7406 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    73fa:	f88d 6008 	strb.w	r6, [sp, #8]
    73fe:	a802      	add	r0, sp, #8
    7400:	9403      	str	r4, [sp, #12]
    7402:	f7ff fd45 	bl	6e90 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    7406:	68a8      	ldr	r0, [r5, #8]
    7408:	62e0      	str	r0, [r4, #44]	; 0x2c
    740a:	f641 574c 	movw	r7, #7500	; 0x1d4c
    740e:	4640      	mov	r0, r8
    7410:	f007 fae1 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    7414:	b910      	cbnz	r0, 741c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    7416:	4640      	mov	r0, r8
    7418:	f007 fafb 	bl	ea12 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    741c:	6127      	str	r7, [r4, #16]
    741e:	8821      	ldrh	r1, [r4, #0]
    7420:	f8ad 1008 	strh.w	r1, [sp, #8]
    7424:	7ba9      	ldrb	r1, [r5, #14]
    7426:	f88d 100a 	strb.w	r1, [sp, #10]
    742a:	7be9      	ldrb	r1, [r5, #15]
    742c:	f88d 100b 	strb.w	r1, [sp, #11]
    7430:	8a29      	ldrh	r1, [r5, #16]
    7432:	f8ad 100c 	strh.w	r1, [sp, #12]
    7436:	a905      	add	r1, sp, #20
    7438:	9100      	str	r1, [sp, #0]
    743a:	4630      	mov	r0, r6
    743c:	ab04      	add	r3, sp, #16
    743e:	aa02      	add	r2, sp, #8
    7440:	4621      	mov	r1, r4
    7442:	f009 f873 	bl	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    7446:	b140      	cbz	r0, 745a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    7448:	2100      	movs	r1, #0
    744a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    744e:	f7fa f95b 	bl	1708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7452:	b1f0      	cbz	r0, 7492 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    7454:	f241 617c 	movw	r1, #5756	; 0x167c
    7458:	e026      	b.n	74a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    745a:	f89d 0010 	ldrb.w	r0, [sp, #16]
    745e:	f88d 0018 	strb.w	r0, [sp, #24]
    7462:	f89d 0014 	ldrb.w	r0, [sp, #20]
    7466:	f88d 0019 	strb.w	r0, [sp, #25]
    746a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    746e:	f8ad 001a 	strh.w	r0, [sp, #26]
    7472:	a906      	add	r1, sp, #24
    7474:	4620      	mov	r0, r4
    7476:	f006 fc41 	bl	dcfc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    747a:	7868      	ldrb	r0, [r5, #1]
    747c:	9000      	str	r0, [sp, #0]
    747e:	782b      	ldrb	r3, [r5, #0]
    7480:	88aa      	ldrh	r2, [r5, #4]
    7482:	8869      	ldrh	r1, [r5, #2]
    7484:	8820      	ldrh	r0, [r4, #0]
    7486:	f7fa f9f5 	bl	1874 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    748a:	b128      	cbz	r0, 7498 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    748c:	f241 6187 	movw	r1, #5767	; 0x1687
    7490:	e00a      	b.n	74a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    7492:	e7ff      	b.n	7494 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    7494:	2009      	movs	r0, #9
    7496:	e757      	b.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7498:	464a      	mov	r2, r9
    749a:	4621      	mov	r1, r4
    749c:	4640      	mov	r0, r8
    749e:	f7fd f987 	bl	47b0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    74a2:	b120      	cbz	r0, 74ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    74a4:	f241 6189 	movw	r1, #5769	; 0x1689
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 fea7 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	4806      	ldr	r0, [pc, #24]	; (74c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    74b0:	6843      	ldr	r3, [r0, #4]
    74b2:	b123      	cbz	r3, 74be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    74b4:	2200      	movs	r2, #0
    74b6:	f504 7199 	add.w	r1, r4, #306	; 0x132
    74ba:	4620      	mov	r0, r4
    74bc:	4798      	blx	r3
    74be:	2000      	movs	r0, #0
    74c0:	e742      	b.n	7348 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    74c2:	0000      	.short	0x0000
    74c4:	20000ef0 	.word	0x20000ef0
    74c8:	20000274 	.word	0x20000274
    74cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74d0:	b088      	sub	sp, #32
    74d2:	4604      	mov	r4, r0
    74d4:	8800      	ldrh	r0, [r0, #0]
    74d6:	a906      	add	r1, sp, #24
    74d8:	f006 fb40 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    74dc:	2800      	cmp	r0, #0
    74de:	d147      	bne.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    74e0:	9807      	ldr	r0, [sp, #28]
    74e2:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    74e6:	f88d 1008 	strb.w	r1, [sp, #8]
    74ea:	9902      	ldr	r1, [sp, #8]
    74ec:	9102      	str	r1, [sp, #8]
    74ee:	f89d 1008 	ldrb.w	r1, [sp, #8]
    74f2:	3080      	adds	r0, #128	; 0x80
    74f4:	b101      	cbz	r1, 74f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    74f6:	2101      	movs	r1, #1
    74f8:	f88d 100c 	strb.w	r1, [sp, #12]
    74fc:	7b01      	ldrb	r1, [r0, #12]
    74fe:	f04f 0800 	mov.w	r8, #0
    7502:	0689      	lsls	r1, r1, #26
    7504:	d502      	bpl.n	750c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    7506:	f89d 100c 	ldrb.w	r1, [sp, #12]
    750a:	b149      	cbz	r1, 7520 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    750c:	f05f 0100 	movs.w	r1, #0
    7510:	f88d 1004 	strb.w	r1, [sp, #4]
    7514:	2105      	movs	r1, #5
    7516:	306c      	adds	r0, #108	; 0x6c
    7518:	f008 fa5f 	bl	f9da <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    751c:	b110      	cbz	r0, 7524 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    751e:	e004      	b.n	752a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    7520:	2101      	movs	r1, #1
    7522:	e7f5      	b.n	7510 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    7524:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7528:	b308      	cbz	r0, 756e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    752a:	8921      	ldrh	r1, [r4, #8]
    752c:	88e0      	ldrh	r0, [r4, #6]
    752e:	f008 ffb9 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7532:	2800      	cmp	r0, #0
    7534:	d11c      	bne.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7536:	88a1      	ldrh	r1, [r4, #4]
    7538:	8860      	ldrh	r0, [r4, #2]
    753a:	f008 ffb3 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    753e:	2800      	cmp	r0, #0
    7540:	d116      	bne.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7542:	8921      	ldrh	r1, [r4, #8]
    7544:	88e0      	ldrh	r0, [r4, #6]
    7546:	f008 ffa3 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    754a:	2800      	cmp	r0, #0
    754c:	d110      	bne.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    754e:	88a1      	ldrh	r1, [r4, #4]
    7550:	8860      	ldrh	r0, [r4, #2]
    7552:	f008 ff9d 	bl	10490 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    7556:	0006      	movs	r6, r0
    7558:	d10a      	bne.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    755a:	9807      	ldr	r0, [sp, #28]
    755c:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7560:	27ff      	movs	r7, #255	; 0xff
    7562:	706f      	strb	r7, [r5, #1]
    7564:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7568:	b129      	cbz	r1, 7576 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    756a:	263a      	movs	r6, #58	; 0x3a
    756c:	e02e      	b.n	75cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    756e:	201a      	movs	r0, #26
    7570:	b008      	add	sp, #32
    7572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7576:	4641      	mov	r1, r8
    7578:	aa03      	add	r2, sp, #12
    757a:	f008 ffa1 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    757e:	8861      	ldrh	r1, [r4, #2]
    7580:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7584:	4281      	cmp	r1, r0
    7586:	d200      	bcs.n	758a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    7588:	4608      	mov	r0, r1
    758a:	80e8      	strh	r0, [r5, #6]
    758c:	88a1      	ldrh	r1, [r4, #4]
    758e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7592:	4281      	cmp	r1, r0
    7594:	d200      	bcs.n	7598 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    7596:	4608      	mov	r0, r1
    7598:	8128      	strh	r0, [r5, #8]
    759a:	88e2      	ldrh	r2, [r4, #6]
    759c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    75a0:	428a      	cmp	r2, r1
    75a2:	d200      	bcs.n	75a6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    75a4:	4611      	mov	r1, r2
    75a6:	8069      	strh	r1, [r5, #2]
    75a8:	8922      	ldrh	r2, [r4, #8]
    75aa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    75ae:	428a      	cmp	r2, r1
    75b0:	d200      	bcs.n	75b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    75b2:	4611      	mov	r1, r2
    75b4:	f640 0248 	movw	r2, #2120	; 0x848
    75b8:	80a9      	strh	r1, [r5, #4]
    75ba:	4291      	cmp	r1, r2
    75bc:	d300      	bcc.n	75c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    75be:	4611      	mov	r1, r2
    75c0:	80a9      	strh	r1, [r5, #4]
    75c2:	4290      	cmp	r0, r2
    75c4:	d200      	bcs.n	75c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    75c6:	4602      	mov	r2, r0
    75c8:	812a      	strh	r2, [r5, #8]
    75ca:	702f      	strb	r7, [r5, #0]
    75cc:	f885 8001 	strb.w	r8, [r5, #1]
    75d0:	4630      	mov	r0, r6
    75d2:	e7cd      	b.n	7570 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    75d4:	b51c      	push	{r2, r3, r4, lr}
    75d6:	490c      	ldr	r1, [pc, #48]	; (7608 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    75d8:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    75dc:	e9cd 0100 	strd	r0, r1, [sp]
    75e0:	e00a      	b.n	75f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    75e2:	9c00      	ldr	r4, [sp, #0]
    75e4:	4620      	mov	r0, r4
    75e6:	f007 fbcf 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    75ea:	b128      	cbz	r0, 75f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    75ec:	4620      	mov	r0, r4
    75ee:	f007 fa21 	bl	ea34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    75f2:	b108      	cbz	r0, 75f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    75f4:	2001      	movs	r0, #1
    75f6:	bd1c      	pop	{r2, r3, r4, pc}
    75f8:	4668      	mov	r0, sp
    75fa:	f7fa f83d 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    75fe:	2800      	cmp	r0, #0
    7600:	d0ef      	beq.n	75e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    7602:	2000      	movs	r0, #0
    7604:	bd1c      	pop	{r2, r3, r4, pc}
    7606:	0000      	.short	0x0000
    7608:	00007644 	.word	0x00007644
    760c:	b510      	push	{r4, lr}
    760e:	4604      	mov	r4, r0
    7610:	88c1      	ldrh	r1, [r0, #6]
    7612:	8880      	ldrh	r0, [r0, #4]
    7614:	f008 ff46 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7618:	2800      	cmp	r0, #0
    761a:	d10f      	bne.n	763c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    761c:	8861      	ldrh	r1, [r4, #2]
    761e:	8820      	ldrh	r0, [r4, #0]
    7620:	f008 ff40 	bl	104a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7624:	2800      	cmp	r0, #0
    7626:	d109      	bne.n	763c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    7628:	4805      	ldr	r0, [pc, #20]	; (7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    762a:	88a1      	ldrh	r1, [r4, #4]
    762c:	8081      	strh	r1, [r0, #4]
    762e:	8821      	ldrh	r1, [r4, #0]
    7630:	8001      	strh	r1, [r0, #0]
    7632:	88e1      	ldrh	r1, [r4, #6]
    7634:	80c1      	strh	r1, [r0, #6]
    7636:	8861      	ldrh	r1, [r4, #2]
    7638:	8041      	strh	r1, [r0, #2]
    763a:	2000      	movs	r0, #0
    763c:	bd10      	pop	{r4, pc}
    763e:	0000      	.short	0x0000
    7640:	2000027c 	.word	0x2000027c
    7644:	00000000 	.word	0x00000000
    7648:	00010000 	.word	0x00010000
    764c:	00000000 	.word	0x00000000
    7650:	00010000 	.word	0x00010000
    7654:	0c124b0c 	.word	0x0c124b0c
    7658:	124b0059 	.word	0x124b0059
    765c:	00000000 	.word	0x00000000
    7660:	00010000 	.word	0x00010000
    7664:	00000000 	.word	0x00000000
    7668:	00010000 	.word	0x00010000

0000766c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    766c:	b510      	push	{r4, lr}
    766e:	f7fb fe2d 	bl	32cc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7672:	4c05      	ldr	r4, [pc, #20]	; (7688 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7674:	6860      	ldr	r0, [r4, #4]
    7676:	f009 f81c 	bl	106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    767a:	f008 fdc1 	bl	10200 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    767e:	f7fb ff5f 	bl	3540 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7682:	2001      	movs	r0, #1
    7684:	7020      	strb	r0, [r4, #0]
    7686:	bd10      	pop	{r4, pc}
    7688:	20000284 	.word	0x20000284

0000768c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    768c:	4801      	ldr	r0, [pc, #4]	; (7694 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    768e:	7800      	ldrb	r0, [r0, #0]
    7690:	4770      	bx	lr
    7692:	0000      	.short	0x0000
    7694:	20000284 	.word	0x20000284

00007698 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7698:	b510      	push	{r4, lr}
    769a:	4c06      	ldr	r4, [pc, #24]	; (76b4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    769c:	68a0      	ldr	r0, [r4, #8]
    769e:	f009 f808 	bl	106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    76a2:	68e0      	ldr	r0, [r4, #12]
    76a4:	f009 f805 	bl	106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    76a8:	f008 fe0f 	bl	102ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    76ac:	2000      	movs	r0, #0
    76ae:	7020      	strb	r0, [r4, #0]
    76b0:	bd10      	pop	{r4, pc}
    76b2:	0000      	.short	0x0000
    76b4:	20000284 	.word	0x20000284

000076b8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    76b8:	b510      	push	{r4, lr}
    76ba:	4905      	ldr	r1, [pc, #20]	; (76d0 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    76bc:	4805      	ldr	r0, [pc, #20]	; (76d4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    76be:	f008 ffeb 	bl	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    76c2:	4804      	ldr	r0, [pc, #16]	; (76d4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    76c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76c8:	4903      	ldr	r1, [pc, #12]	; (76d8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    76ca:	1d00      	adds	r0, r0, #4
    76cc:	f008 bfe4 	b.w	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    76d0:	20000294 	.word	0x20000294
    76d4:	20000288 	.word	0x20000288
    76d8:	2000029c 	.word	0x2000029c

000076dc <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    76dc:	b510      	push	{r4, lr}
    76de:	4908      	ldr	r1, [pc, #32]	; (7700 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    76e0:	4808      	ldr	r0, [pc, #32]	; (7704 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    76e2:	f008 ffd9 	bl	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    76e6:	4807      	ldr	r0, [pc, #28]	; (7704 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    76e8:	4907      	ldr	r1, [pc, #28]	; (7708 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    76ea:	1d00      	adds	r0, r0, #4
    76ec:	f008 ffd4 	bl	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    76f0:	4804      	ldr	r0, [pc, #16]	; (7704 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    76f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    76f6:	4905      	ldr	r1, [pc, #20]	; (770c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    76f8:	3008      	adds	r0, #8
    76fa:	f008 bfcd 	b.w	10698 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    76fe:	0000      	.short	0x0000
    7700:	200002ac 	.word	0x200002ac
    7704:	20000288 	.word	0x20000288
    7708:	200002b4 	.word	0x200002b4
    770c:	200002a4 	.word	0x200002a4

00007710 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    7710:	4801      	ldr	r0, [pc, #4]	; (7718 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    7712:	7840      	ldrb	r0, [r0, #1]
    7714:	4770      	bx	lr
    7716:	0000      	.short	0x0000
    7718:	20000284 	.word	0x20000284
    771c:	b510      	push	{r4, lr}
    771e:	f7fc fa4b 	bl	3bb8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    7722:	f7fd f8f5 	bl	4910 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    7726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    772a:	4801      	ldr	r0, [pc, #4]	; (7730 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    772c:	f7fc ba2a 	b.w	3b84 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7730:	20001609 	.word	0x20001609
    7734:	490a      	ldr	r1, [pc, #40]	; (7760 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    7736:	b510      	push	{r4, lr}
    7738:	2001      	movs	r0, #1
    773a:	7048      	strb	r0, [r1, #1]
    773c:	f7fc fa6c 	bl	3c18 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7740:	f7fd fdc2 	bl	52c8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7744:	f006 f93c 	bl	d9c0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7748:	4906      	ldr	r1, [pc, #24]	; (7764 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    774a:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    774e:	f7fa fc41 	bl	1fd4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    7752:	2000      	movs	r0, #0
    7754:	f005 ff64 	bl	d620 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    775c:	f7fb bdbc 	b.w	32d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7760:	20000284 	.word	0x20000284
    7764:	2000170b 	.word	0x2000170b

00007768 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7768:	4a04      	ldr	r2, [pc, #16]	; (777c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    776a:	08c1      	lsrs	r1, r0, #3
    776c:	f000 0307 	and.w	r3, r0, #7
    7770:	2001      	movs	r0, #1
    7772:	4098      	lsls	r0, r3
    7774:	5c53      	ldrb	r3, [r2, r1]
    7776:	4303      	orrs	r3, r0
    7778:	5453      	strb	r3, [r2, r1]
    777a:	4770      	bx	lr
    777c:	20000020 	.word	0x20000020

00007780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7780:	4901      	ldr	r1, [pc, #4]	; (7788 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    7782:	e9d1 0100 	ldrd	r0, r1, [r1]
    7786:	4770      	bx	lr
    7788:	20000020 	.word	0x20000020

0000778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    778c:	4806      	ldr	r0, [pc, #24]	; (77a8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    778e:	8801      	ldrh	r1, [r0, #0]
    7790:	7900      	ldrb	r0, [r0, #4]
    7792:	0602      	lsls	r2, r0, #24
    7794:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7798:	f000 0001 	and.w	r0, r0, #1
    779c:	1800      	adds	r0, r0, r0
    779e:	b2c0      	uxtb	r0, r0
    77a0:	f040 0001 	orr.w	r0, r0, #1
    77a4:	4770      	bx	lr
    77a6:	0000      	.short	0x0000
    77a8:	20000020 	.word	0x20000020

000077ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    77ac:	b510      	push	{r4, lr}
    77ae:	f004 fc9d 	bl	c0ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    77b2:	2200      	movs	r2, #0
    77b4:	4b08      	ldr	r3, [pc, #32]	; (77d8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    77b6:	4611      	mov	r1, r2
    77b8:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    77bc:	4284      	cmp	r4, r0
    77be:	d303      	bcc.n	77c8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    77c0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    77c4:	7882      	ldrb	r2, [r0, #2]
    77c6:	e003      	b.n	77d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    77c8:	1c49      	adds	r1, r1, #1
    77ca:	b2c9      	uxtb	r1, r1
    77cc:	290c      	cmp	r1, #12
    77ce:	d3f3      	bcc.n	77b8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    77d0:	4802      	ldr	r0, [pc, #8]	; (77dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    77d2:	7002      	strb	r2, [r0, #0]
    77d4:	bd10      	pop	{r4, pc}
    77d6:	0000      	.short	0x0000
    77d8:	00010704 	.word	0x00010704
    77dc:	2000036f 	.word	0x2000036f

000077e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    77e0:	b570      	push	{r4, r5, r6, lr}
    77e2:	4605      	mov	r5, r0
    77e4:	4616      	mov	r6, r2
    77e6:	460c      	mov	r4, r1
    77e8:	2002      	movs	r0, #2
    77ea:	f000 f9b7 	bl	7b5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    77ee:	4906      	ldr	r1, [pc, #24]	; (7808 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    77f0:	2001      	movs	r0, #1
    77f2:	1ef6      	subs	r6, r6, #3
    77f4:	7008      	strb	r0, [r1, #0]
    77f6:	4805      	ldr	r0, [pc, #20]	; (780c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    77f8:	6006      	str	r6, [r0, #0]
    77fa:	4804      	ldr	r0, [pc, #16]	; (780c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    77fc:	3808      	subs	r0, #8
    77fe:	6005      	str	r5, [r0, #0]
    7800:	1f00      	subs	r0, r0, #4
    7802:	6004      	str	r4, [r0, #0]
    7804:	bd70      	pop	{r4, r5, r6, pc}
    7806:	0000      	.short	0x0000
    7808:	20000370 	.word	0x20000370
    780c:	4000f510 	.word	0x4000f510

00007810 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7810:	b510      	push	{r4, lr}
    7812:	4c0c      	ldr	r4, [pc, #48]	; (7844 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7814:	7820      	ldrb	r0, [r4, #0]
    7816:	b180      	cbz	r0, 783a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7818:	490b      	ldr	r1, [pc, #44]	; (7848 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    781a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    781e:	6008      	str	r0, [r1, #0]
    7820:	f000 f86a 	bl	78f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7824:	2100      	movs	r1, #0
    7826:	b120      	cbz	r0, 7832 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7828:	2001      	movs	r0, #1
    782a:	7060      	strb	r0, [r4, #1]
    782c:	4807      	ldr	r0, [pc, #28]	; (784c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    782e:	6800      	ldr	r0, [r0, #0]
    7830:	e001      	b.n	7836 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7832:	7061      	strb	r1, [r4, #1]
    7834:	2010      	movs	r0, #16
    7836:	70a0      	strb	r0, [r4, #2]
    7838:	7021      	strb	r1, [r4, #0]
    783a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    783e:	2000      	movs	r0, #0
    7840:	f000 b98c 	b.w	7b5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7844:	20000370 	.word	0x20000370
    7848:	4001f508 	.word	0x4001f508
    784c:	4000f400 	.word	0x4000f400

00007850 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7850:	b510      	push	{r4, lr}
    7852:	2002      	movs	r0, #2
    7854:	f000 f982 	bl	7b5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7858:	4904      	ldr	r1, [pc, #16]	; (786c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    785a:	2001      	movs	r0, #1
    785c:	7008      	strb	r0, [r1, #0]
    785e:	f000 f859 	bl	7914 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7862:	4903      	ldr	r1, [pc, #12]	; (7870 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7864:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7868:	6008      	str	r0, [r1, #0]
    786a:	bd10      	pop	{r4, pc}
    786c:	20000370 	.word	0x20000370
    7870:	4001f504 	.word	0x4001f504

00007874 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7874:	4803      	ldr	r0, [pc, #12]	; (7884 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7876:	2100      	movs	r1, #0
    7878:	7001      	strb	r1, [r0, #0]
    787a:	7041      	strb	r1, [r0, #1]
    787c:	2110      	movs	r1, #16
    787e:	7081      	strb	r1, [r0, #2]
    7880:	4770      	bx	lr
    7882:	0000      	.short	0x0000
    7884:	20000370 	.word	0x20000370

00007888 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7888:	4807      	ldr	r0, [pc, #28]	; (78a8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    788a:	b510      	push	{r4, lr}
    788c:	7801      	ldrb	r1, [r0, #0]
    788e:	b141      	cbz	r1, 78a2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7890:	f000 f832 	bl	78f8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7894:	b118      	cbz	r0, 789e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7896:	4805      	ldr	r0, [pc, #20]	; (78ac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7898:	6800      	ldr	r0, [r0, #0]
    789a:	b2c0      	uxtb	r0, r0
    789c:	bd10      	pop	{r4, pc}
    789e:	2010      	movs	r0, #16
    78a0:	bd10      	pop	{r4, pc}
    78a2:	7880      	ldrb	r0, [r0, #2]
    78a4:	bd10      	pop	{r4, pc}
    78a6:	0000      	.short	0x0000
    78a8:	20000370 	.word	0x20000370
    78ac:	4000f400 	.word	0x4000f400

000078b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    78b0:	4808      	ldr	r0, [pc, #32]	; (78d4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    78b2:	b510      	push	{r4, lr}
    78b4:	7801      	ldrb	r1, [r0, #0]
    78b6:	b159      	cbz	r1, 78d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    78b8:	4807      	ldr	r0, [pc, #28]	; (78d8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    78ba:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    78be:	b128      	cbz	r0, 78cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    78c0:	f000 f80c 	bl	78dc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    78c4:	2800      	cmp	r0, #0
    78c6:	d000      	beq.n	78ca <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    78c8:	2001      	movs	r0, #1
    78ca:	bd10      	pop	{r4, pc}
    78cc:	2002      	movs	r0, #2
    78ce:	bd10      	pop	{r4, pc}
    78d0:	7840      	ldrb	r0, [r0, #1]
    78d2:	bd10      	pop	{r4, pc}
    78d4:	20000370 	.word	0x20000370
    78d8:	4000f000 	.word	0x4000f000
    78dc:	4805      	ldr	r0, [pc, #20]	; (78f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    78de:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    78e2:	b111      	cbz	r1, 78ea <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    78e4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    78e8:	b108      	cbz	r0, 78ee <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    78ea:	2000      	movs	r0, #0
    78ec:	4770      	bx	lr
    78ee:	2001      	movs	r0, #1
    78f0:	4770      	bx	lr
    78f2:	0000      	.short	0x0000
    78f4:	4000f000 	.word	0x4000f000
    78f8:	4805      	ldr	r0, [pc, #20]	; (7910 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    78fa:	b510      	push	{r4, lr}
    78fc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7900:	b120      	cbz	r0, 790c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7902:	f7ff ffeb 	bl	78dc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7906:	b108      	cbz	r0, 790c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7908:	2001      	movs	r0, #1
    790a:	bd10      	pop	{r4, pc}
    790c:	2000      	movs	r0, #0
    790e:	bd10      	pop	{r4, pc}
    7910:	4000f000 	.word	0x4000f000
    7914:	4804      	ldr	r0, [pc, #16]	; (7928 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7916:	2100      	movs	r1, #0
    7918:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    791c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7920:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7924:	4770      	bx	lr
    7926:	0000      	.short	0x0000
    7928:	4000f000 	.word	0x4000f000

0000792c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7930:	4604      	mov	r4, r0
    7932:	461e      	mov	r6, r3
    7934:	4690      	mov	r8, r2
    7936:	460f      	mov	r7, r1
    7938:	2001      	movs	r0, #1
    793a:	f000 f90f 	bl	7b5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    793e:	4d1e      	ldr	r5, [pc, #120]	; (79b8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7940:	481e      	ldr	r0, [pc, #120]	; (79bc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7942:	f004 0103 	and.w	r1, r4, #3
    7946:	712e      	strb	r6, [r5, #4]
    7948:	6800      	ldr	r0, [r0, #0]
    794a:	0432      	lsls	r2, r6, #16
    794c:	f361 0007 	bfi	r0, r1, #0, #8
    7950:	f366 200f 	bfi	r0, r6, #8, #8
    7954:	0c00      	lsrs	r0, r0, #16
    7956:	4e1a      	ldr	r6, [pc, #104]	; (79c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7958:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    795c:	4308      	orrs	r0, r1
    795e:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7962:	4818      	ldr	r0, [pc, #96]	; (79c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7964:	6007      	str	r7, [r0, #0]
    7966:	f009 f8c4 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    796a:	b938      	cbnz	r0, 797c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    796c:	4815      	ldr	r0, [pc, #84]	; (79c4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    796e:	3010      	adds	r0, #16
    7970:	6801      	ldr	r1, [r0, #0]
    7972:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7976:	ea41 0108 	orr.w	r1, r1, r8
    797a:	6001      	str	r1, [r0, #0]
    797c:	f000 f8e4 	bl	7b48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7980:	b10c      	cbz	r4, 7986 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7982:	2c04      	cmp	r4, #4
    7984:	d107      	bne.n	7996 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7986:	4811      	ldr	r0, [pc, #68]	; (79cc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7988:	490d      	ldr	r1, [pc, #52]	; (79c0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    798a:	4a0f      	ldr	r2, [pc, #60]	; (79c8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    798c:	1d09      	adds	r1, r1, #4
    798e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7992:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7996:	2001      	movs	r0, #1
    7998:	7068      	strb	r0, [r5, #1]
    799a:	70ec      	strb	r4, [r5, #3]
    799c:	b11c      	cbz	r4, 79a6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    799e:	2c01      	cmp	r4, #1
    79a0:	d001      	beq.n	79a6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    79a2:	2c02      	cmp	r4, #2
    79a4:	d106      	bne.n	79b4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    79a6:	7028      	strb	r0, [r5, #0]
    79a8:	2100      	movs	r1, #0
    79aa:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    79ae:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    79b2:	6030      	str	r0, [r6, #0]
    79b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    79b8:	20000373 	.word	0x20000373
    79bc:	00007b58 	.word	0x00007b58
    79c0:	4000f000 	.word	0x4000f000
    79c4:	4000f508 	.word	0x4000f508
    79c8:	4000f100 	.word	0x4000f100
    79cc:	4001f088 	.word	0x4001f088

000079d0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    79d0:	b570      	push	{r4, r5, r6, lr}
    79d2:	4a1c      	ldr	r2, [pc, #112]	; (7a44 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    79d4:	7853      	ldrb	r3, [r2, #1]
    79d6:	b1a3      	cbz	r3, 7a02 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    79d8:	4b1b      	ldr	r3, [pc, #108]	; (7a48 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    79da:	6019      	str	r1, [r3, #0]
    79dc:	1d19      	adds	r1, r3, #4
    79de:	6008      	str	r0, [r1, #0]
    79e0:	2501      	movs	r5, #1
    79e2:	7095      	strb	r5, [r2, #2]
    79e4:	4610      	mov	r0, r2
    79e6:	78d6      	ldrb	r6, [r2, #3]
    79e8:	4b18      	ldr	r3, [pc, #96]	; (7a4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    79ea:	7800      	ldrb	r0, [r0, #0]
    79ec:	4c18      	ldr	r4, [pc, #96]	; (7a50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    79ee:	2100      	movs	r1, #0
    79f0:	b156      	cbz	r6, 7a08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    79f2:	2e04      	cmp	r6, #4
    79f4:	d01b      	beq.n	7a2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    79f6:	b308      	cbz	r0, 7a3c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    79f8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    79fc:	0668      	lsls	r0, r5, #25
    79fe:	6018      	str	r0, [r3, #0]
    7a00:	bd70      	pop	{r4, r5, r6, pc}
    7a02:	f240 11bd 	movw	r1, #445	; 0x1bd
    7a06:	e01a      	b.n	7a3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7a08:	b178      	cbz	r0, 7a2a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7a0a:	4620      	mov	r0, r4
    7a0c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7a10:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7a14:	601e      	str	r6, [r3, #0]
    7a16:	1271      	asrs	r1, r6, #9
    7a18:	f008 feec 	bl	107f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7a1c:	2800      	cmp	r0, #0
    7a1e:	d0ef      	beq.n	7a00 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7a20:	6065      	str	r5, [r4, #4]
    7a22:	480a      	ldr	r0, [pc, #40]	; (7a4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7a24:	1d00      	adds	r0, r0, #4
    7a26:	6006      	str	r6, [r0, #0]
    7a28:	bd70      	pop	{r4, r5, r6, pc}
    7a2a:	21b3      	movs	r1, #179	; 0xb3
    7a2c:	e007      	b.n	7a3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7a2e:	7015      	strb	r5, [r2, #0]
    7a30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7a34:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7a38:	6025      	str	r5, [r4, #0]
    7a3a:	bd70      	pop	{r4, r5, r6, pc}
    7a3c:	21c6      	movs	r1, #198	; 0xc6
    7a3e:	203c      	movs	r0, #60	; 0x3c
    7a40:	f7f9 fbdc 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7a44:	20000373 	.word	0x20000373
    7a48:	4000f50c 	.word	0x4000f50c
    7a4c:	4001f504 	.word	0x4001f504
    7a50:	4000f000 	.word	0x4000f000

00007a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7a54:	b570      	push	{r4, r5, r6, lr}
    7a56:	4d05      	ldr	r5, [pc, #20]	; (7a6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7a58:	2400      	movs	r4, #0
    7a5a:	7828      	ldrb	r0, [r5, #0]
    7a5c:	b110      	cbz	r0, 7a64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7a5e:	f000 f873 	bl	7b48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a62:	702c      	strb	r4, [r5, #0]
    7a64:	706c      	strb	r4, [r5, #1]
    7a66:	70ac      	strb	r4, [r5, #2]
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	0000      	.short	0x0000
    7a6c:	20000373 	.word	0x20000373

00007a70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7a70:	4802      	ldr	r0, [pc, #8]	; (7a7c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7a72:	2100      	movs	r1, #0
    7a74:	7001      	strb	r1, [r0, #0]
    7a76:	7041      	strb	r1, [r0, #1]
    7a78:	7081      	strb	r1, [r0, #2]
    7a7a:	4770      	bx	lr
    7a7c:	20000373 	.word	0x20000373

00007a80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7a80:	480b      	ldr	r0, [pc, #44]	; (7ab0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7a82:	b510      	push	{r4, lr}
    7a84:	7800      	ldrb	r0, [r0, #0]
    7a86:	b158      	cbz	r0, 7aa0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7a88:	f44f 7182 	mov.w	r1, #260	; 0x104
    7a8c:	4809      	ldr	r0, [pc, #36]	; (7ab4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7a8e:	f008 feb1 	bl	107f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7a92:	b140      	cbz	r0, 7aa6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7a94:	4808      	ldr	r0, [pc, #32]	; (7ab8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7a96:	6800      	ldr	r0, [r0, #0]
    7a98:	2800      	cmp	r0, #0
    7a9a:	d000      	beq.n	7a9e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7a9c:	2001      	movs	r0, #1
    7a9e:	bd10      	pop	{r4, pc}
    7aa0:	f240 2123 	movw	r1, #547	; 0x223
    7aa4:	e001      	b.n	7aaa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7aa6:	f44f 7109 	mov.w	r1, #548	; 0x224
    7aaa:	203c      	movs	r0, #60	; 0x3c
    7aac:	f7f9 fba6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ab0:	20000373 	.word	0x20000373
    7ab4:	4000f000 	.word	0x4000f000
    7ab8:	4000f400 	.word	0x4000f400

00007abc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7abc:	4801      	ldr	r0, [pc, #4]	; (7ac4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7abe:	2101      	movs	r1, #1
    7ac0:	6081      	str	r1, [r0, #8]
    7ac2:	4770      	bx	lr
    7ac4:	4000f000 	.word	0x4000f000

00007ac8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7acc:	481b      	ldr	r0, [pc, #108]	; (7b3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7ace:	7800      	ldrb	r0, [r0, #0]
    7ad0:	b1d8      	cbz	r0, 7b0a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7ad2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7b40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7ad6:	f44f 7682 	mov.w	r6, #260	; 0x104
    7ada:	4631      	mov	r1, r6
    7adc:	4640      	mov	r0, r8
    7ade:	f008 fe89 	bl	107f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7ae2:	2800      	cmp	r0, #0
    7ae4:	d128      	bne.n	7b38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7ae6:	2002      	movs	r0, #2
    7ae8:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7aec:	4c15      	ldr	r4, [pc, #84]	; (7b44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7aee:	6820      	ldr	r0, [r4, #0]
    7af0:	43c0      	mvns	r0, r0
    7af2:	f340 1500 	sbfx	r5, r0, #4, #1
    7af6:	6820      	ldr	r0, [r4, #0]
    7af8:	f040 0010 	orr.w	r0, r0, #16
    7afc:	6020      	str	r0, [r4, #0]
    7afe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7b02:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7b06:	1c6d      	adds	r5, r5, #1
    7b08:	e008      	b.n	7b1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7b0a:	f240 212f 	movw	r1, #559	; 0x22f
    7b0e:	203c      	movs	r0, #60	; 0x3c
    7b10:	f7f9 fb74 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b14:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7b18:	f009 f82b 	bl	10b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7b1c:	4631      	mov	r1, r6
    7b1e:	4640      	mov	r0, r8
    7b20:	f008 fe68 	bl	107f4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b24:	2800      	cmp	r0, #0
    7b26:	d0f5      	beq.n	7b14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7b28:	b91d      	cbnz	r5, 7b32 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7b2a:	6820      	ldr	r0, [r4, #0]
    7b2c:	f020 0010 	bic.w	r0, r0, #16
    7b30:	6020      	str	r0, [r4, #0]
    7b32:	2002      	movs	r0, #2
    7b34:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b3c:	20000373 	.word	0x20000373
    7b40:	4000f000 	.word	0x4000f000
    7b44:	e000ed10 	.word	0xe000ed10
    7b48:	4902      	ldr	r1, [pc, #8]	; (7b54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7b4a:	4801      	ldr	r0, [pc, #4]	; (7b50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7b4c:	6008      	str	r0, [r1, #0]
    7b4e:	4770      	bx	lr
    7b50:	02020000 	.word	0x02020000
    7b54:	4001f508 	.word	0x4001f508
    7b58:	00010000 	.word	0x00010000

00007b5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7b5c:	b510      	push	{r4, lr}
    7b5e:	4604      	mov	r4, r0
    7b60:	f000 f820 	bl	7ba4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7b64:	2c00      	cmp	r4, #0
    7b66:	d00e      	beq.n	7b86 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7b68:	4a0b      	ldr	r2, [pc, #44]	; (7b98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7b6a:	480b      	ldr	r0, [pc, #44]	; (7b98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7b6c:	490b      	ldr	r1, [pc, #44]	; (7b9c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7b6e:	3214      	adds	r2, #20
    7b70:	2c01      	cmp	r4, #1
    7b72:	d005      	beq.n	7b80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7b74:	2c02      	cmp	r4, #2
    7b76:	d007      	beq.n	7b88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7b78:	2182      	movs	r1, #130	; 0x82
    7b7a:	203d      	movs	r0, #61	; 0x3d
    7b7c:	f7f9 fb3e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b80:	2302      	movs	r3, #2
    7b82:	6003      	str	r3, [r0, #0]
    7b84:	6011      	str	r1, [r2, #0]
    7b86:	bd10      	pop	{r4, pc}
    7b88:	2303      	movs	r3, #3
    7b8a:	6003      	str	r3, [r0, #0]
    7b8c:	6011      	str	r1, [r2, #0]
    7b8e:	4904      	ldr	r1, [pc, #16]	; (7ba0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7b90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b94:	6008      	str	r0, [r1, #0]
    7b96:	bd10      	pop	{r4, pc}
    7b98:	4000f500 	.word	0x4000f500
    7b9c:	2000180d 	.word	0x2000180d
    7ba0:	4001f504 	.word	0x4001f504
    7ba4:	4805      	ldr	r0, [pc, #20]	; (7bbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7ba6:	b510      	push	{r4, lr}
    7ba8:	2100      	movs	r1, #0
    7baa:	6001      	str	r1, [r0, #0]
    7bac:	6001      	str	r1, [r0, #0]
    7bae:	f7ff ff51 	bl	7a54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7bb2:	4903      	ldr	r1, [pc, #12]	; (7bc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7bb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7bb8:	6008      	str	r0, [r1, #0]
    7bba:	bd10      	pop	{r4, pc}
    7bbc:	4000f500 	.word	0x4000f500
    7bc0:	4001f508 	.word	0x4001f508

00007bc4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7bc4:	4805      	ldr	r0, [pc, #20]	; (7bdc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7bc6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7bca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7bce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7bd2:	2100      	movs	r1, #0
    7bd4:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7bd8:	4770      	bx	lr
    7bda:	0000      	.short	0x0000
    7bdc:	40001000 	.word	0x40001000

00007be0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7be0:	4904      	ldr	r1, [pc, #16]	; (7bf4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7be2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7be6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7bea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7bee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7bf2:	4770      	bx	lr
    7bf4:	40001000 	.word	0x40001000

00007bf8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    7bf8:	4801      	ldr	r0, [pc, #4]	; (7c00 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    7bfa:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    7bfe:	4770      	bx	lr
    7c00:	20000f54 	.word	0x20000f54

00007c04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7c04:	4902      	ldr	r1, [pc, #8]	; (7c10 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7c06:	5c08      	ldrb	r0, [r1, r0]
    7c08:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7c0c:	4770      	bx	lr
    7c0e:	0000      	.short	0x0000
    7c10:	0000895a 	.word	0x0000895a

00007c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c16:	4c24      	ldr	r4, [pc, #144]	; (7ca8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7c18:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7c1c:	f010 0f10 	tst.w	r0, #16
    7c20:	d001      	beq.n	7c26 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7c22:	2701      	movs	r7, #1
    7c24:	e000      	b.n	7c28 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7c26:	2700      	movs	r7, #0
    7c28:	2010      	movs	r0, #16
    7c2a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7c2e:	2002      	movs	r0, #2
    7c30:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7c34:	481d      	ldr	r0, [pc, #116]	; (7cac <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7c36:	2500      	movs	r5, #0
    7c38:	491d      	ldr	r1, [pc, #116]	; (7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7c3a:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7c3e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7c42:	6008      	str	r0, [r1, #0]
    7c44:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7c48:	f44f 7688 	mov.w	r6, #272	; 0x110
    7c4c:	f010 0fff 	tst.w	r0, #255	; 0xff
    7c50:	d019      	beq.n	7c86 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7c52:	20ff      	movs	r0, #255	; 0xff
    7c54:	f88d 0000 	strb.w	r0, [sp]
    7c58:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7c5c:	2001      	movs	r0, #1
    7c5e:	6120      	str	r0, [r4, #16]
    7c60:	e005      	b.n	7c6e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7c62:	bf00      	nop
    7c64:	f89d 0000 	ldrb.w	r0, [sp]
    7c68:	1e40      	subs	r0, r0, #1
    7c6a:	f88d 0000 	strb.w	r0, [sp]
    7c6e:	f89d 0000 	ldrb.w	r0, [sp]
    7c72:	b128      	cbz	r0, 7c80 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7c74:	4631      	mov	r1, r6
    7c76:	4620      	mov	r0, r4
    7c78:	f008 fdeb 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7c7c:	2800      	cmp	r0, #0
    7c7e:	d0f1      	beq.n	7c64 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7c80:	f89d 0000 	ldrb.w	r0, [sp]
    7c84:	b158      	cbz	r0, 7c9e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7c86:	f000 fc57 	bl	8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7c8a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7c8e:	f000 fde5 	bl	885c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7c92:	2f00      	cmp	r7, #0
    7c94:	d002      	beq.n	7c9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7c96:	2010      	movs	r0, #16
    7c98:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c9e:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7ca2:	203e      	movs	r0, #62	; 0x3e
    7ca4:	f7f9 faaa 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ca8:	40001000 	.word	0x40001000
    7cac:	20000f54 	.word	0x20000f54
    7cb0:	4001f508 	.word	0x4001f508

00007cb4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cb8:	4d18      	ldr	r5, [pc, #96]	; (7d1c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7cba:	4607      	mov	r7, r0
    7cbc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7cc0:	07c2      	lsls	r2, r0, #31
    7cc2:	d00f      	beq.n	7ce4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7cc4:	4c16      	ldr	r4, [pc, #88]	; (7d20 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7cc6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7cca:	f042 0201 	orr.w	r2, r2, #1
    7cce:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7cd2:	f040 0002 	orr.w	r0, r0, #2
    7cd6:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7cda:	2601      	movs	r6, #1
    7cdc:	b13f      	cbz	r7, 7cee <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7cde:	2f01      	cmp	r7, #1
    7ce0:	d00b      	beq.n	7cfa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7ce2:	e010      	b.n	7d06 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7ce4:	f240 7185 	movw	r1, #1925	; 0x785
    7ce8:	203e      	movs	r0, #62	; 0x3e
    7cea:	f7f9 fa87 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cee:	4608      	mov	r0, r1
    7cf0:	f000 fe0e 	bl	8910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7cf4:	726e      	strb	r6, [r5, #9]
    7cf6:	6026      	str	r6, [r4, #0]
    7cf8:	e005      	b.n	7d06 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7cfa:	4608      	mov	r0, r1
    7cfc:	f000 fdee 	bl	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d00:	2002      	movs	r0, #2
    7d02:	7268      	strb	r0, [r5, #9]
    7d04:	6066      	str	r6, [r4, #4]
    7d06:	4807      	ldr	r0, [pc, #28]	; (7d24 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7d08:	64c6      	str	r6, [r0, #76]	; 0x4c
    7d0a:	4806      	ldr	r0, [pc, #24]	; (7d24 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7d0c:	300c      	adds	r0, #12
    7d0e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7d12:	4638      	mov	r0, r7
    7d14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7d18:	f000 bd72 	b.w	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7d1c:	20000f54 	.word	0x20000f54
    7d20:	40001000 	.word	0x40001000
    7d24:	40008000 	.word	0x40008000

00007d28 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d2c:	4c2c      	ldr	r4, [pc, #176]	; (7de0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7d2e:	0006      	movs	r6, r0
    7d30:	4d2c      	ldr	r5, [pc, #176]	; (7de4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7d32:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7d36:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7de8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7d3a:	f040 0002 	orr.w	r0, r0, #2
    7d3e:	4689      	mov	r9, r1
    7d40:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7d44:	f04f 0700 	mov.w	r7, #0
    7d48:	d002      	beq.n	7d50 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7d4a:	2e01      	cmp	r6, #1
    7d4c:	d020      	beq.n	7d90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7d4e:	e036      	b.n	7dbe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7d50:	4608      	mov	r0, r1
    7d52:	f000 fddd 	bl	8910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7d56:	2001      	movs	r0, #1
    7d58:	7260      	strb	r0, [r4, #9]
    7d5a:	79e0      	ldrb	r0, [r4, #7]
    7d5c:	2801      	cmp	r0, #1
    7d5e:	d105      	bne.n	7d6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7d60:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7d64:	f040 0008 	orr.w	r0, r0, #8
    7d68:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7d6e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7d72:	62a0      	str	r0, [r4, #40]	; 0x28
    7d74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7d78:	f8c8 0000 	str.w	r0, [r8]
    7d7c:	491b      	ldr	r1, [pc, #108]	; (7dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7d7e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7d82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7d86:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7d8a:	fbb0 f7f1 	udiv	r7, r0, r1
    7d8e:	e016      	b.n	7dbe <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7d90:	4608      	mov	r0, r1
    7d92:	f000 fda3 	bl	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d96:	2002      	movs	r0, #2
    7d98:	7260      	strb	r0, [r4, #9]
    7d9a:	79e0      	ldrb	r0, [r4, #7]
    7d9c:	2801      	cmp	r0, #1
    7d9e:	d105      	bne.n	7dac <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7da0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7da4:	f040 0004 	orr.w	r0, r0, #4
    7da8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7dac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7dae:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7db2:	62a0      	str	r0, [r4, #40]	; 0x28
    7db4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7db8:	f8c8 0000 	str.w	r0, [r8]
    7dbc:	2729      	movs	r7, #41	; 0x29
    7dbe:	f000 fc27 	bl	8610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7dc2:	f008 fd8e 	bl	108e2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7dc6:	b120      	cbz	r0, 7dd2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7dc8:	f7ff ff24 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dcc:	2000      	movs	r0, #0
    7dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7dd2:	2100      	movs	r1, #0
    7dd4:	4630      	mov	r0, r6
    7dd6:	f000 fd13 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7dda:	4638      	mov	r0, r7
    7ddc:	e7f7      	b.n	7dce <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7dde:	0000      	.short	0x0000
    7de0:	20000f54 	.word	0x20000f54
    7de4:	40001000 	.word	0x40001000
    7de8:	4001f504 	.word	0x4001f504
    7dec:	00008954 	.word	0x00008954

00007df0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    7df0:	4a02      	ldr	r2, [pc, #8]	; (7dfc <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    7df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7df4:	6003      	str	r3, [r0, #0]
    7df6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    7df8:	6008      	str	r0, [r1, #0]
    7dfa:	4770      	bx	lr
    7dfc:	20000f54 	.word	0x20000f54

00007e00 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7e00:	b510      	push	{r4, lr}
    7e02:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7e04:	4901      	ldr	r1, [pc, #4]	; (7e0c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7e06:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7e0a:	bd10      	pop	{r4, pc}
    7e0c:	20000f44 	.word	0x20000f44

00007e10 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    7e10:	490f      	ldr	r1, [pc, #60]	; (7e50 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    7e12:	b510      	push	{r4, lr}
    7e14:	69ca      	ldr	r2, [r1, #28]
    7e16:	4282      	cmp	r2, r0
    7e18:	d302      	bcc.n	7e20 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    7e1a:	f640 113a 	movw	r1, #2362	; 0x93a
    7e1e:	e00b      	b.n	7e38 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    7e20:	2201      	movs	r2, #1
    7e22:	730a      	strb	r2, [r1, #12]
    7e24:	6108      	str	r0, [r1, #16]
    7e26:	490b      	ldr	r1, [pc, #44]	; (7e54 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    7e28:	644a      	str	r2, [r1, #68]	; 0x44
    7e2a:	1d0a      	adds	r2, r1, #4
    7e2c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    7e30:	4283      	cmp	r3, r0
    7e32:	d304      	bcc.n	7e3e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    7e34:	f640 1143 	movw	r1, #2371	; 0x943
    7e38:	203e      	movs	r0, #62	; 0x3e
    7e3a:	f7f9 f9df 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e3e:	2300      	movs	r3, #0
    7e40:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    7e44:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    7e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7e4c:	f000 bcac 	b.w	87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    7e50:	20000f54 	.word	0x20000f54
    7e54:	40008000 	.word	0x40008000

00007e58 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7e58:	b570      	push	{r4, r5, r6, lr}
    7e5a:	4c0f      	ldr	r4, [pc, #60]	; (7e98 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7e5c:	4603      	mov	r3, r0
    7e5e:	2002      	movs	r0, #2
    7e60:	7320      	strb	r0, [r4, #12]
    7e62:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7e66:	2096      	movs	r0, #150	; 0x96
    7e68:	f894 1020 	ldrb.w	r1, [r4, #32]
    7e6c:	7d22      	ldrb	r2, [r4, #20]
    7e6e:	2d01      	cmp	r5, #1
    7e70:	d00e      	beq.n	7e90 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7e72:	f000 fdab 	bl	89cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7e76:	6120      	str	r0, [r4, #16]
    7e78:	4808      	ldr	r0, [pc, #32]	; (7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7e7a:	2100      	movs	r1, #0
    7e7c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7e80:	6921      	ldr	r1, [r4, #16]
    7e82:	69e0      	ldr	r0, [r4, #28]
    7e84:	4408      	add	r0, r1
    7e86:	4905      	ldr	r1, [pc, #20]	; (7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7e88:	1d09      	adds	r1, r1, #4
    7e8a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7e8e:	bd70      	pop	{r4, r5, r6, pc}
    7e90:	f000 fdba 	bl	8a08 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7e94:	e7ef      	b.n	7e76 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7e96:	0000      	.short	0x0000
    7e98:	20000f54 	.word	0x20000f54
    7e9c:	40008000 	.word	0x40008000

00007ea0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    7ea0:	b510      	push	{r4, lr}
    7ea2:	f008 fe42 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ea6:	2800      	cmp	r0, #0
    7ea8:	d006      	beq.n	7eb8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    7eaa:	4804      	ldr	r0, [pc, #16]	; (7ebc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    7eac:	6801      	ldr	r1, [r0, #0]
    7eae:	f021 0101 	bic.w	r1, r1, #1
    7eb2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    7eb6:	6001      	str	r1, [r0, #0]
    7eb8:	bd10      	pop	{r4, pc}
    7eba:	0000      	.short	0x0000
    7ebc:	40001774 	.word	0x40001774

00007ec0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec4:	2238      	movs	r2, #56	; 0x38
    7ec6:	2100      	movs	r1, #0
    7ec8:	4813      	ldr	r0, [pc, #76]	; (7f18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7eca:	f008 ff17 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ece:	f000 fcc5 	bl	885c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7ed2:	f008 fde3 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7ed6:	4d11      	ldr	r5, [pc, #68]	; (7f1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7ed8:	4e10      	ldr	r6, [pc, #64]	; (7f1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7eda:	2400      	movs	r4, #0
    7edc:	4f0f      	ldr	r7, [pc, #60]	; (7f1c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7ede:	3508      	adds	r5, #8
    7ee0:	3610      	adds	r6, #16
    7ee2:	b928      	cbnz	r0, 7ef0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7ee4:	f008 fdf1 	bl	10aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7ee8:	b910      	cbnz	r0, 7ef0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7eea:	f008 fdf8 	bl	10ade <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7eee:	b108      	cbz	r0, 7ef4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7ef0:	2224      	movs	r2, #36	; 0x24
    7ef2:	e006      	b.n	7f02 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7ef4:	f008 fe33 	bl	10b5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7ef8:	b910      	cbnz	r0, 7f00 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7efa:	f008 fe26 	bl	10b4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7efe:	b140      	cbz	r0, 7f12 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f00:	2240      	movs	r2, #64	; 0x40
    7f02:	21ff      	movs	r1, #255	; 0xff
    7f04:	4638      	mov	r0, r7
    7f06:	f008 fef9 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f0a:	602c      	str	r4, [r5, #0]
    7f0c:	6034      	str	r4, [r6, #0]
    7f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f12:	2238      	movs	r2, #56	; 0x38
    7f14:	e7f5      	b.n	7f02 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f16:	0000      	.short	0x0000
    7f18:	20000f54 	.word	0x20000f54
    7f1c:	40000e00 	.word	0x40000e00

00007f20 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f20:	4801      	ldr	r0, [pc, #4]	; (7f28 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f22:	69c0      	ldr	r0, [r0, #28]
    7f24:	4770      	bx	lr
    7f26:	0000      	.short	0x0000
    7f28:	20000f54 	.word	0x20000f54

00007f2c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    7f2c:	4801      	ldr	r0, [pc, #4]	; (7f34 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    7f2e:	6980      	ldr	r0, [r0, #24]
    7f30:	4770      	bx	lr
    7f32:	0000      	.short	0x0000
    7f34:	20000f54 	.word	0x20000f54

00007f38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f38:	b510      	push	{r4, lr}
    7f3a:	f000 fc43 	bl	87c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f3e:	f7ff fe69 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f42:	f004 fb6f 	bl	c624 <mpsl_fem_disable>
    7f46:	b130      	cbz	r0, 7f56 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f48:	1c40      	adds	r0, r0, #1
    7f4a:	d004      	beq.n	7f56 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f4c:	f240 516d 	movw	r1, #1389	; 0x56d
    7f50:	203e      	movs	r0, #62	; 0x3e
    7f52:	f7f9 f953 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f56:	480f      	ldr	r0, [pc, #60]	; (7f94 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7f58:	4a0f      	ldr	r2, [pc, #60]	; (7f98 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7f5a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f5c:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7f60:	6011      	str	r1, [r2, #0]
    7f62:	2400      	movs	r4, #0
    7f64:	6284      	str	r4, [r0, #40]	; 0x28
    7f66:	7304      	strb	r4, [r0, #12]
    7f68:	61c4      	str	r4, [r0, #28]
    7f6a:	6184      	str	r4, [r0, #24]
    7f6c:	f000 fc2a 	bl	87c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f70:	480a      	ldr	r0, [pc, #40]	; (7f9c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7f72:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7f76:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7f7a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7f7e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7f82:	2001      	movs	r0, #1
    7f84:	f008 fc54 	bl	10830 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7f8c:	2001      	movs	r0, #1
    7f8e:	f008 bc42 	b.w	10816 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7f92:	0000      	.short	0x0000
    7f94:	20000f54 	.word	0x20000f54
    7f98:	4001f508 	.word	0x4001f508
    7f9c:	40008000 	.word	0x40008000

00007fa0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7fa0:	b570      	push	{r4, r5, r6, lr}
    7fa2:	2001      	movs	r0, #1
    7fa4:	f008 fc44 	bl	10830 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fa8:	4c37      	ldr	r4, [pc, #220]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7faa:	2000      	movs	r0, #0
    7fac:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fb0:	2001      	movs	r0, #1
    7fb2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fb6:	f008 fda8 	bl	10b0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fba:	4d34      	ldr	r5, [pc, #208]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fbc:	b118      	cbz	r0, 7fc6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7fbe:	6828      	ldr	r0, [r5, #0]
    7fc0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7fc4:	6028      	str	r0, [r5, #0]
    7fc6:	f008 fd94 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fca:	b128      	cbz	r0, 7fd8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7fcc:	6828      	ldr	r0, [r5, #0]
    7fce:	4930      	ldr	r1, [pc, #192]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7fd0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7fd4:	4308      	orrs	r0, r1
    7fd6:	6028      	str	r0, [r5, #0]
    7fd8:	f008 fda7 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7fdc:	b138      	cbz	r0, 7fee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    7fde:	482b      	ldr	r0, [pc, #172]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fe0:	1d00      	adds	r0, r0, #4
    7fe2:	6801      	ldr	r1, [r0, #0]
    7fe4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    7fe8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    7fec:	6001      	str	r1, [r0, #0]
    7fee:	4927      	ldr	r1, [pc, #156]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7ff0:	4828      	ldr	r0, [pc, #160]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    7ff2:	313c      	adds	r1, #60	; 0x3c
    7ff4:	6008      	str	r0, [r1, #0]
    7ff6:	f004 fb4f 	bl	c698 <mpsl_fem_device_config_254_apply_get>
    7ffa:	b140      	cbz	r0, 800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7ffc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8000:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8004:	1c41      	adds	r1, r0, #1
    8006:	d002      	beq.n	800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    8008:	4920      	ldr	r1, [pc, #128]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    800a:	3110      	adds	r1, #16
    800c:	6008      	str	r0, [r1, #0]
    800e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    8012:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8014:	1c41      	adds	r1, r0, #1
    8016:	d004      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8018:	491f      	ldr	r1, [pc, #124]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    801a:	680a      	ldr	r2, [r1, #0]
    801c:	f360 4217 	bfi	r2, r0, #16, #8
    8020:	600a      	str	r2, [r1, #0]
    8022:	f240 1103 	movw	r1, #259	; 0x103
    8026:	f240 605b 	movw	r0, #1627	; 0x65b
    802a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    802e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8032:	2001      	movs	r0, #1
    8034:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8038:	f000 f842 	bl	80c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    803c:	f240 2001 	movw	r0, #513	; 0x201
    8040:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8044:	2002      	movs	r0, #2
    8046:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    804a:	4914      	ldr	r1, [pc, #80]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    804c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8050:	6008      	str	r0, [r1, #0]
    8052:	4913      	ldr	r1, [pc, #76]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    8054:	2000      	movs	r0, #0
    8056:	4d13      	ldr	r5, [pc, #76]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    8058:	8608      	strh	r0, [r1, #48]	; 0x30
    805a:	3110      	adds	r1, #16
    805c:	61c8      	str	r0, [r1, #28]
    805e:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8062:	7028      	strb	r0, [r5, #0]
    8064:	2001      	movs	r0, #1
    8066:	f008 fbd6 	bl	10816 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    806a:	2010      	movs	r0, #16
    806c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8070:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8074:	2002      	movs	r0, #2
    8076:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    807a:	6868      	ldr	r0, [r5, #4]
    807c:	2800      	cmp	r0, #0
    807e:	d002      	beq.n	8086 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x86>
    8080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8084:	4700      	bx	r0
    8086:	bd70      	pop	{r4, r5, r6, pc}
    8088:	40001000 	.word	0x40001000
    808c:	4000173c 	.word	0x4000173c
    8090:	80000096 	.word	0x80000096
    8094:	8900002c 	.word	0x8900002c
    8098:	4000158c 	.word	0x4000158c
    809c:	4001f504 	.word	0x4001f504
    80a0:	20000f44 	.word	0x20000f44
    80a4:	200002bc 	.word	0x200002bc

000080a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    80a8:	4901      	ldr	r1, [pc, #4]	; (80b0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    80aa:	7548      	strb	r0, [r1, #21]
    80ac:	4770      	bx	lr
    80ae:	0000      	.short	0x0000
    80b0:	20000f54 	.word	0x20000f54

000080b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    80b4:	4901      	ldr	r1, [pc, #4]	; (80bc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    80b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    80ba:	4770      	bx	lr
    80bc:	000089a8 	.word	0x000089a8

000080c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    80c0:	4908      	ldr	r1, [pc, #32]	; (80e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    80c2:	b510      	push	{r4, lr}
    80c4:	7508      	strb	r0, [r1, #20]
    80c6:	4908      	ldr	r1, [pc, #32]	; (80e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    80c8:	2801      	cmp	r0, #1
    80ca:	d006      	beq.n	80da <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    80cc:	2802      	cmp	r0, #2
    80ce:	d006      	beq.n	80de <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    80d0:	f640 5186 	movw	r1, #3462	; 0xd86
    80d4:	203e      	movs	r0, #62	; 0x3e
    80d6:	f7f9 f891 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80da:	2003      	movs	r0, #3
    80dc:	e000      	b.n	80e0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    80de:	2004      	movs	r0, #4
    80e0:	6008      	str	r0, [r1, #0]
    80e2:	bd10      	pop	{r4, pc}
    80e4:	20000f54 	.word	0x20000f54
    80e8:	40001510 	.word	0x40001510

000080ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    80ec:	4905      	ldr	r1, [pc, #20]	; (8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    80ee:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    80f2:	4805      	ldr	r0, [pc, #20]	; (8108 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    80f4:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    80f8:	f041 0101 	orr.w	r1, r1, #1
    80fc:	7001      	strb	r1, [r0, #0]
    80fe:	f000 ba4d 	b.w	859c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8102:	0000      	.short	0x0000
    8104:	40001000 	.word	0x40001000
    8108:	20000f54 	.word	0x20000f54

0000810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    810c:	4901      	ldr	r1, [pc, #4]	; (8114 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    810e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8112:	4770      	bx	lr
    8114:	000089b4 	.word	0x000089b4

00008118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    811c:	4e30      	ldr	r6, [pc, #192]	; (81e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    811e:	4c31      	ldr	r4, [pc, #196]	; (81e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8120:	4688      	mov	r8, r1
    8122:	0007      	movs	r7, r0
    8124:	4615      	mov	r5, r2
    8126:	f04f 0901 	mov.w	r9, #1
    812a:	d006      	beq.n	813a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    812c:	2f01      	cmp	r7, #1
    812e:	d012      	beq.n	8156 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8130:	f640 012d 	movw	r1, #2093	; 0x82d
    8134:	203e      	movs	r0, #62	; 0x3e
    8136:	f7f9 f861 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    813a:	4610      	mov	r0, r2
    813c:	f000 fbe8 	bl	8910 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8140:	4829      	ldr	r0, [pc, #164]	; (81e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8142:	f884 9009 	strb.w	r9, [r4, #9]
    8146:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    814a:	4640      	mov	r0, r8
    814c:	f000 fb8e 	bl	886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8150:	4605      	mov	r5, r0
    8152:	4630      	mov	r0, r6
    8154:	e00c      	b.n	8170 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    8156:	4610      	mov	r0, r2
    8158:	f000 fbc0 	bl	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    815c:	2002      	movs	r0, #2
    815e:	7260      	strb	r0, [r4, #9]
    8160:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8164:	4640      	mov	r0, r8
    8166:	f000 fb81 	bl	886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    816a:	4605      	mov	r5, r0
    816c:	481c      	ldr	r0, [pc, #112]	; (81e0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    816e:	1d00      	adds	r0, r0, #4
    8170:	f000 fb3a 	bl	87e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8174:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8178:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    817c:	f8df a074 	ldr.w	sl, [pc, #116]	; 81f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8180:	481b      	ldr	r0, [pc, #108]	; (81f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8182:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    8186:	2010      	movs	r0, #16
    8188:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    818c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    818e:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8192:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    8196:	62a0      	str	r0, [r4, #40]	; 0x28
    8198:	4817      	ldr	r0, [pc, #92]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    819a:	6006      	str	r6, [r0, #0]
    819c:	f000 fa38 	bl	8610 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81a0:	4641      	mov	r1, r8
    81a2:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81a6:	4811      	ldr	r0, [pc, #68]	; (81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    81a8:	300c      	adds	r0, #12
    81aa:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    81ae:	42a8      	cmp	r0, r5
    81b0:	d310      	bcc.n	81d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    81b2:	2000      	movs	r0, #0
    81b4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81b8:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    81bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81be:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    81c2:	62a0      	str	r0, [r4, #40]	; 0x28
    81c4:	480c      	ldr	r0, [pc, #48]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81c6:	1d00      	adds	r0, r0, #4
    81c8:	6006      	str	r6, [r0, #0]
    81ca:	f7ff fd23 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81ce:	2000      	movs	r0, #0
    81d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81d4:	4629      	mov	r1, r5
    81d6:	4638      	mov	r0, r7
    81d8:	f000 fb12 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    81dc:	2001      	movs	r0, #1
    81de:	e7f7      	b.n	81d0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    81e0:	40001000 	.word	0x40001000
    81e4:	20000f54 	.word	0x20000f54
    81e8:	00008954 	.word	0x00008954
    81ec:	40008000 	.word	0x40008000
    81f0:	40008140 	.word	0x40008140
    81f4:	4001f098 	.word	0x4001f098
    81f8:	4001f504 	.word	0x4001f504

000081fc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    81fc:	4b0d      	ldr	r3, [pc, #52]	; (8234 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    81fe:	b510      	push	{r4, lr}
    8200:	71d8      	strb	r0, [r3, #7]
    8202:	729a      	strb	r2, [r3, #10]
    8204:	b151      	cbz	r1, 821c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    8206:	2002      	movs	r0, #2
    8208:	7218      	strb	r0, [r3, #8]
    820a:	2801      	cmp	r0, #1
    820c:	d008      	beq.n	8220 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    820e:	2802      	cmp	r0, #2
    8210:	d00f      	beq.n	8232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8212:	f640 2163 	movw	r1, #2659	; 0xa63
    8216:	203e      	movs	r0, #62	; 0x3e
    8218:	f7f8 fff0 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    821c:	2001      	movs	r0, #1
    821e:	e7f3      	b.n	8208 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8220:	7a58      	ldrb	r0, [r3, #9]
    8222:	2802      	cmp	r0, #2
    8224:	d105      	bne.n	8232 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8226:	f000 f97d 	bl	8524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    822a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    822e:	f000 bab1 	b.w	8794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8232:	bd10      	pop	{r4, pc}
    8234:	20000f54 	.word	0x20000f54

00008238 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8238:	4902      	ldr	r1, [pc, #8]	; (8244 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    823a:	2000      	movs	r0, #0
    823c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8240:	4770      	bx	lr
    8242:	0000      	.short	0x0000
    8244:	40008000 	.word	0x40008000

00008248 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8248:	4904      	ldr	r1, [pc, #16]	; (825c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    824a:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    824e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8252:	4249      	negs	r1, r1
    8254:	7001      	strb	r1, [r0, #0]
    8256:	2001      	movs	r0, #1
    8258:	4770      	bx	lr
    825a:	0000      	.short	0x0000
    825c:	40001000 	.word	0x40001000

00008260 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8260:	4903      	ldr	r1, [pc, #12]	; (8270 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8262:	0e02      	lsrs	r2, r0, #24
    8264:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8268:	0200      	lsls	r0, r0, #8
    826a:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    826e:	4770      	bx	lr
    8270:	40001000 	.word	0x40001000

00008274 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8274:	4901      	ldr	r1, [pc, #4]	; (827c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    8276:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    827a:	4770      	bx	lr
    827c:	40001000 	.word	0x40001000

00008280 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8280:	b510      	push	{r4, lr}
    8282:	2200      	movs	r2, #0
    8284:	2901      	cmp	r1, #1
    8286:	d006      	beq.n	8296 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    8288:	2902      	cmp	r1, #2
    828a:	d002      	beq.n	8292 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    828c:	f240 21d9 	movw	r1, #729	; 0x2d9
    8290:	e014      	b.n	82bc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8292:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8296:	490b      	ldr	r1, [pc, #44]	; (82c4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    8298:	430a      	orrs	r2, r1
    829a:	490b      	ldr	r1, [pc, #44]	; (82c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    829c:	600a      	str	r2, [r1, #0]
    829e:	490b      	ldr	r1, [pc, #44]	; (82cc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82a0:	4308      	orrs	r0, r1
    82a2:	4909      	ldr	r1, [pc, #36]	; (82c8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82a4:	1d09      	adds	r1, r1, #4
    82a6:	6008      	str	r0, [r1, #0]
    82a8:	4809      	ldr	r0, [pc, #36]	; (82d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    82aa:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82ae:	b2c0      	uxtb	r0, r0
    82b0:	2803      	cmp	r0, #3
    82b2:	d001      	beq.n	82b8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    82b4:	280b      	cmp	r0, #11
    82b6:	d104      	bne.n	82c2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    82b8:	f240 21f1 	movw	r1, #753	; 0x2f1
    82bc:	203e      	movs	r0, #62	; 0x3e
    82be:	f7f8 ff9d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82c2:	bd10      	pop	{r4, pc}
    82c4:	00100108 	.word	0x00100108
    82c8:	40001514 	.word	0x40001514
    82cc:	02030000 	.word	0x02030000
    82d0:	40001000 	.word	0x40001000

000082d4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    82d4:	4901      	ldr	r1, [pc, #4]	; (82dc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    82d6:	7588      	strb	r0, [r1, #22]
    82d8:	4770      	bx	lr
    82da:	0000      	.short	0x0000
    82dc:	20000f54 	.word	0x20000f54

000082e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    82e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82e4:	4853      	ldr	r0, [pc, #332]	; (8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82e6:	f04f 0a01 	mov.w	sl, #1
    82ea:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    82ee:	4851      	ldr	r0, [pc, #324]	; (8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82f0:	300c      	adds	r0, #12
    82f2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    82f6:	f008 faf2 	bl	108de <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    82fa:	4c4f      	ldr	r4, [pc, #316]	; (8438 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    82fc:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8300:	f000 f91a 	bl	8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    8304:	494d      	ldr	r1, [pc, #308]	; (843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    8306:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8308:	6008      	str	r0, [r1, #0]
    830a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    830e:	2000      	movs	r0, #0
    8310:	62a0      	str	r0, [r4, #40]	; 0x28
    8312:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    8316:	f240 131d 	movw	r3, #285	; 0x11d
    831a:	439a      	bics	r2, r3
    831c:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8320:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8324:	f000 f988 	bl	8638 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8328:	4605      	mov	r5, r0
    832a:	4842      	ldr	r0, [pc, #264]	; (8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    832c:	3008      	adds	r0, #8
    832e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8332:	4e40      	ldr	r6, [pc, #256]	; (8434 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8334:	61e0      	str	r0, [r4, #28]
    8336:	1d36      	adds	r6, r6, #4
    8338:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    833c:	61a0      	str	r0, [r4, #24]
    833e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    8342:	7d21      	ldrb	r1, [r4, #20]
    8344:	f884 1020 	strb.w	r1, [r4, #32]
    8348:	7a61      	ldrb	r1, [r4, #9]
    834a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    834e:	46a1      	mov	r9, r4
    8350:	2400      	movs	r4, #0
    8352:	4639      	mov	r1, r7
    8354:	4628      	mov	r0, r5
    8356:	f000 f9e3 	bl	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    835a:	b910      	cbnz	r0, 8362 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    835c:	f8c8 a010 	str.w	sl, [r8, #16]
    8360:	2401      	movs	r4, #1
    8362:	4f35      	ldr	r7, [pc, #212]	; (8438 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8364:	07e8      	lsls	r0, r5, #31
    8366:	f1a7 0710 	sub.w	r7, r7, #16
    836a:	d002      	beq.n	8372 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    836c:	6838      	ldr	r0, [r7, #0]
    836e:	4780      	blx	r0
    8370:	e034      	b.n	83dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8372:	07a8      	lsls	r0, r5, #30
    8374:	d529      	bpl.n	83ca <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    8376:	0768      	lsls	r0, r5, #29
    8378:	d421      	bmi.n	83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    837a:	f008 fbd6 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    837e:	b9f0      	cbnz	r0, 83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8380:	f008 fbc3 	bl	10b0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8384:	b9d8      	cbnz	r0, 83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8386:	482f      	ldr	r0, [pc, #188]	; (8444 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    8388:	6800      	ldr	r0, [r0, #0]
    838a:	f3c0 5242 	ubfx	r2, r0, #21, #3
    838e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8392:	f000 0c0f 	and.w	ip, r0, #15
    8396:	f3c0 1303 	ubfx	r3, r0, #4, #4
    839a:	f3c0 2803 	ubfx	r8, r0, #8, #4
    839e:	b171      	cbz	r1, 83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83a0:	f1bc 0f00 	cmp.w	ip, #0
    83a4:	d003      	beq.n	83ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83a6:	b113      	cbz	r3, 83ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83a8:	f1b8 0f00 	cmp.w	r8, #0
    83ac:	d107      	bne.n	83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ae:	f3c0 4004 	ubfx	r0, r0, #16, #5
    83b2:	2801      	cmp	r0, #1
    83b4:	d103      	bne.n	83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83b6:	2a03      	cmp	r2, #3
    83b8:	d201      	bcs.n	83be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ba:	f045 0504 	orr.w	r5, r5, #4
    83be:	f345 0080 	sbfx	r0, r5, #2, #1
    83c2:	4621      	mov	r1, r4
    83c4:	1c40      	adds	r0, r0, #1
    83c6:	687a      	ldr	r2, [r7, #4]
    83c8:	e007      	b.n	83da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    83ca:	f015 0f28 	tst.w	r5, #40	; 0x28
    83ce:	d005      	beq.n	83dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83d0:	f345 1140 	sbfx	r1, r5, #5, #1
    83d4:	68ba      	ldr	r2, [r7, #8]
    83d6:	4620      	mov	r0, r4
    83d8:	1c49      	adds	r1, r1, #1
    83da:	4790      	blx	r2
    83dc:	06e8      	lsls	r0, r5, #27
    83de:	d501      	bpl.n	83e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    83e0:	68f8      	ldr	r0, [r7, #12]
    83e2:	4780      	blx	r0
    83e4:	f899 1009 	ldrb.w	r1, [r9, #9]
    83e8:	4648      	mov	r0, r9
    83ea:	2902      	cmp	r1, #2
    83ec:	d120      	bne.n	8430 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    83ee:	7b01      	ldrb	r1, [r0, #12]
    83f0:	2900      	cmp	r1, #0
    83f2:	d01d      	beq.n	8430 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    83f4:	2902      	cmp	r1, #2
    83f6:	d004      	beq.n	8402 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    83f8:	2901      	cmp	r1, #1
    83fa:	d009      	beq.n	8410 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    83fc:	f640 4166 	movw	r1, #3174	; 0xc66
    8400:	e00d      	b.n	841e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    8402:	69c1      	ldr	r1, [r0, #28]
    8404:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8408:	4408      	add	r0, r1
    840a:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    840e:	e00b      	b.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8410:	6901      	ldr	r1, [r0, #16]
    8412:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8416:	4281      	cmp	r1, r0
    8418:	d804      	bhi.n	8424 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    841a:	f640 4167 	movw	r1, #3175	; 0xc67
    841e:	203e      	movs	r0, #62	; 0x3e
    8420:	f7f8 feec 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8424:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8428:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    842c:	f000 b9bc 	b.w	87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8434:	40008000 	.word	0x40008000
    8438:	20000f54 	.word	0x20000f54
    843c:	4001f508 	.word	0x4001f508
    8440:	40001000 	.word	0x40001000
    8444:	40001450 	.word	0x40001450

00008448 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8448:	b570      	push	{r4, r5, r6, lr}
    844a:	4b16      	ldr	r3, [pc, #88]	; (84a4 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    844c:	888c      	ldrh	r4, [r1, #4]
    844e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    8452:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    8456:	780c      	ldrb	r4, [r1, #0]
    8458:	f8d1 1001 	ldr.w	r1, [r1, #1]
    845c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8460:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8464:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    8468:	2401      	movs	r4, #1
    846a:	4084      	lsls	r4, r0
    846c:	b2c9      	uxtb	r1, r1
    846e:	b2e5      	uxtb	r5, r4
    8470:	4329      	orrs	r1, r5
    8472:	b132      	cbz	r2, 8482 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8474:	2a01      	cmp	r2, #1
    8476:	d00a      	beq.n	848e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    8478:	f240 51d4 	movw	r1, #1492	; 0x5d4
    847c:	203e      	movs	r0, #62	; 0x3e
    847e:	f7f8 febd 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8482:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8486:	f3c0 2007 	ubfx	r0, r0, #8, #8
    848a:	43a0      	bics	r0, r4
    848c:	e004      	b.n	8498 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    848e:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8492:	f3c0 2007 	ubfx	r0, r0, #8, #8
    8496:	4328      	orrs	r0, r5
    8498:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    849c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84a0:	bd70      	pop	{r4, r5, r6, pc}
    84a2:	0000      	.short	0x0000
    84a4:	40001000 	.word	0x40001000

000084a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    84a8:	4901      	ldr	r1, [pc, #4]	; (84b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    84aa:	2001      	movs	r0, #1
    84ac:	7008      	strb	r0, [r1, #0]
    84ae:	4770      	bx	lr
    84b0:	200002bc 	.word	0x200002bc
    84b4:	480b      	ldr	r0, [pc, #44]	; (84e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    84b6:	7d81      	ldrb	r1, [r0, #22]
    84b8:	480b      	ldr	r0, [pc, #44]	; (84e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    84ba:	5c40      	ldrb	r0, [r0, r1]
    84bc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    84c0:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    84c4:	d204      	bcs.n	84d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    84c6:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    84ca:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    84ce:	e001      	b.n	84d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    84d0:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    84d4:	4a05      	ldr	r2, [pc, #20]	; (84ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    84d6:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    84da:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    84de:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    84e2:	4770      	bx	lr
    84e4:	20000f54 	.word	0x20000f54
    84e8:	0000895a 	.word	0x0000895a
    84ec:	40001000 	.word	0x40001000
    84f0:	b508      	push	{r3, lr}
    84f2:	490b      	ldr	r1, [pc, #44]	; (8520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    84f4:	466b      	mov	r3, sp
    84f6:	f991 2015 	ldrsb.w	r2, [r1, #21]
    84fa:	7d89      	ldrb	r1, [r1, #22]
    84fc:	f000 fad0 	bl	8aa0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8500:	f99d 0000 	ldrsb.w	r0, [sp]
    8504:	f000 faa0 	bl	8a48 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8508:	f10d 0001 	add.w	r0, sp, #1
    850c:	f004 f8ae 	bl	c66c <mpsl_fem_pa_gain_set>
    8510:	2800      	cmp	r0, #0
    8512:	d004      	beq.n	851e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    8514:	f240 6115 	movw	r1, #1557	; 0x615
    8518:	203e      	movs	r0, #62	; 0x3e
    851a:	f7f8 fe6f 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    851e:	bd08      	pop	{r3, pc}
    8520:	20000f54 	.word	0x20000f54
    8524:	4803      	ldr	r0, [pc, #12]	; (8534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    8526:	7a01      	ldrb	r1, [r0, #8]
    8528:	2901      	cmp	r1, #1
    852a:	d102      	bne.n	8532 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    852c:	7a80      	ldrb	r0, [r0, #10]
    852e:	f7ff bfdf 	b.w	84f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8532:	4770      	bx	lr
    8534:	20000f54 	.word	0x20000f54
    8538:	480d      	ldr	r0, [pc, #52]	; (8570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    853a:	b510      	push	{r4, lr}
    853c:	7a40      	ldrb	r0, [r0, #9]
    853e:	2801      	cmp	r0, #1
    8540:	d00c      	beq.n	855c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8542:	2802      	cmp	r0, #2
    8544:	d113      	bne.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8546:	f004 f873 	bl	c630 <mpsl_fem_lna_configuration_clear>
    854a:	2800      	cmp	r0, #0
    854c:	d00f      	beq.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    854e:	1c40      	adds	r0, r0, #1
    8550:	d00d      	beq.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8552:	f640 01c1 	movw	r1, #2241	; 0x8c1
    8556:	203e      	movs	r0, #62	; 0x3e
    8558:	f7f8 fe50 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    855c:	f004 f87a 	bl	c654 <mpsl_fem_pa_configuration_clear>
    8560:	2800      	cmp	r0, #0
    8562:	d004      	beq.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8564:	1c40      	adds	r0, r0, #1
    8566:	d002      	beq.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8568:	f640 01bb 	movw	r1, #2235	; 0x8bb
    856c:	e7f3      	b.n	8556 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    856e:	bd10      	pop	{r4, pc}
    8570:	20000f54 	.word	0x20000f54
    8574:	4808      	ldr	r0, [pc, #32]	; (8598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    8576:	2100      	movs	r1, #0
    8578:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    857c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8580:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8584:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8588:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    858c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8590:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8594:	4770      	bx	lr
    8596:	0000      	.short	0x0000
    8598:	40001000 	.word	0x40001000
    859c:	4818      	ldr	r0, [pc, #96]	; (8600 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    859e:	b510      	push	{r4, lr}
    85a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85a4:	07c1      	lsls	r1, r0, #31
    85a6:	d029      	beq.n	85fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85a8:	0781      	lsls	r1, r0, #30
    85aa:	d514      	bpl.n	85d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    85ac:	4815      	ldr	r0, [pc, #84]	; (8604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    85b2:	f041 0101 	orr.w	r1, r1, #1
    85b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85ba:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85be:	b2c0      	uxtb	r0, r0
    85c0:	280b      	cmp	r0, #11
    85c2:	d005      	beq.n	85d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85c4:	280a      	cmp	r0, #10
    85c6:	d003      	beq.n	85d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85c8:	2803      	cmp	r0, #3
    85ca:	d001      	beq.n	85d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85cc:	2802      	cmp	r0, #2
    85ce:	d115      	bne.n	85fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85d0:	f240 613e 	movw	r1, #1598	; 0x63e
    85d4:	e00f      	b.n	85f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    85d6:	0740      	lsls	r0, r0, #29
    85d8:	d510      	bpl.n	85fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85da:	480a      	ldr	r0, [pc, #40]	; (8604 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85dc:	490a      	ldr	r1, [pc, #40]	; (8608 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    85de:	3008      	adds	r0, #8
    85e0:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    85e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    85e8:	4808      	ldr	r0, [pc, #32]	; (860c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    85ea:	f008 f937 	bl	1085c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    85ee:	2800      	cmp	r0, #0
    85f0:	d004      	beq.n	85fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85f2:	f240 6146 	movw	r1, #1606	; 0x646
    85f6:	203e      	movs	r0, #62	; 0x3e
    85f8:	f7f8 fe00 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85fc:	bd10      	pop	{r4, pc}
    85fe:	0000      	.short	0x0000
    8600:	20000f54 	.word	0x20000f54
    8604:	40001000 	.word	0x40001000
    8608:	4001f098 	.word	0x4001f098
    860c:	40008000 	.word	0x40008000
    8610:	4808      	ldr	r0, [pc, #32]	; (8634 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    8612:	4601      	mov	r1, r0
    8614:	79c2      	ldrb	r2, [r0, #7]
    8616:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    861a:	b112      	cbz	r2, 8622 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    861c:	2a01      	cmp	r2, #1
    861e:	d003      	beq.n	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8620:	e006      	b.n	8630 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    8622:	f041 0102 	orr.w	r1, r1, #2
    8626:	e001      	b.n	862c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8628:	f041 0104 	orr.w	r1, r1, #4
    862c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8630:	f7ff bfb4 	b.w	859c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8634:	20000f54 	.word	0x20000f54
    8638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    863c:	4d34      	ldr	r5, [pc, #208]	; (8710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    863e:	2400      	movs	r4, #0
    8640:	7b28      	ldrb	r0, [r5, #12]
    8642:	b138      	cbz	r0, 8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8644:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8648:	4832      	ldr	r0, [pc, #200]	; (8714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    864a:	f008 f907 	bl	1085c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    864e:	b108      	cbz	r0, 8654 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8650:	2601      	movs	r6, #1
    8652:	e000      	b.n	8656 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    8654:	2600      	movs	r6, #0
    8656:	7a68      	ldrb	r0, [r5, #9]
    8658:	4f2f      	ldr	r7, [pc, #188]	; (8718 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    865a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    865e:	2801      	cmp	r0, #1
    8660:	d002      	beq.n	8668 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8662:	2802      	cmp	r0, #2
    8664:	d006      	beq.n	8674 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    8666:	e016      	b.n	8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8668:	4638      	mov	r0, r7
    866a:	f008 f8f2 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    866e:	b190      	cbz	r0, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8670:	2408      	movs	r4, #8
    8672:	e010      	b.n	8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8674:	4638      	mov	r0, r7
    8676:	f008 f8ec 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    867a:	b100      	cbz	r0, 867e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    867c:	2402      	movs	r4, #2
    867e:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    8682:	43c0      	mvns	r0, r0
    8684:	f340 0000 	sbfx	r0, r0, #0, #1
    8688:	1c40      	adds	r0, r0, #1
    868a:	d101      	bne.n	8690 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    868c:	f044 0404 	orr.w	r4, r4, #4
    8690:	b10e      	cbz	r6, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8692:	f044 0401 	orr.w	r4, r4, #1
    8696:	f014 0f0b 	tst.w	r4, #11
    869a:	d107      	bne.n	86ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    869c:	f44f 7188 	mov.w	r1, #272	; 0x110
    86a0:	4638      	mov	r0, r7
    86a2:	f008 f8d6 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86a6:	b108      	cbz	r0, 86ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86a8:	f044 0410 	orr.w	r4, r4, #16
    86ac:	481b      	ldr	r0, [pc, #108]	; (871c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    86ae:	7800      	ldrb	r0, [r0, #0]
    86b0:	b1f8      	cbz	r0, 86f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    86b2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    86b6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    86ba:	d007      	beq.n	86cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86bc:	f44f 718a 	mov.w	r1, #276	; 0x114
    86c0:	4638      	mov	r0, r7
    86c2:	f008 f8c6 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86c6:	b108      	cbz	r0, 86cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86c8:	2001      	movs	r0, #1
    86ca:	e000      	b.n	86ce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    86cc:	2000      	movs	r0, #0
    86ce:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    86d2:	b13e      	cbz	r6, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86d4:	f44f 718c 	mov.w	r1, #280	; 0x118
    86d8:	4638      	mov	r0, r7
    86da:	f008 f8ba 	bl	10852 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86de:	b108      	cbz	r0, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86e0:	2001      	movs	r0, #1
    86e2:	e000      	b.n	86e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    86e4:	2000      	movs	r0, #0
    86e6:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    86ea:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    86ee:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    86f2:	f7ff ff3f 	bl	8574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    86f6:	06e0      	lsls	r0, r4, #27
    86f8:	d506      	bpl.n	8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    86fa:	0720      	lsls	r0, r4, #28
    86fc:	d404      	bmi.n	8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    86fe:	7a68      	ldrb	r0, [r5, #9]
    8700:	2801      	cmp	r0, #1
    8702:	d101      	bne.n	8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8704:	f044 0420 	orr.w	r4, r4, #32
    8708:	4620      	mov	r0, r4
    870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    870e:	0000      	.short	0x0000
    8710:	20000f54 	.word	0x20000f54
    8714:	40008000 	.word	0x40008000
    8718:	40001000 	.word	0x40001000
    871c:	200002bc 	.word	0x200002bc
    8720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8724:	4c1a      	ldr	r4, [pc, #104]	; (8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    8726:	460d      	mov	r5, r1
    8728:	7a21      	ldrb	r1, [r4, #8]
    872a:	b129      	cbz	r1, 8738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    872c:	f010 0f11 	tst.w	r0, #17
    8730:	d007      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    8732:	f7ff fa6f 	bl	7c14 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8736:	e024      	b.n	8782 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8738:	f000 f890 	bl	885c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    873c:	2000      	movs	r0, #0
    873e:	7320      	strb	r0, [r4, #12]
    8740:	e01f      	b.n	8782 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8742:	2901      	cmp	r1, #1
    8744:	d001      	beq.n	874a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    8746:	2601      	movs	r6, #1
    8748:	e000      	b.n	874c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    874a:	2600      	movs	r6, #0
    874c:	79e0      	ldrb	r0, [r4, #7]
    874e:	2801      	cmp	r0, #1
    8750:	d00e      	beq.n	8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    8752:	2700      	movs	r7, #0
    8754:	f000 f882 	bl	885c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8758:	2196      	movs	r1, #150	; 0x96
    875a:	4630      	mov	r0, r6
    875c:	f000 f894 	bl	8888 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8760:	4601      	mov	r1, r0
    8762:	b14f      	cbz	r7, 8778 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8764:	353b      	adds	r5, #59	; 0x3b
    8766:	428d      	cmp	r5, r1
    8768:	d904      	bls.n	8774 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    876a:	2000      	movs	r0, #0
    876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8770:	2701      	movs	r7, #1
    8772:	e7ef      	b.n	8754 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8774:	2001      	movs	r0, #1
    8776:	71e0      	strb	r0, [r4, #7]
    8778:	7aa2      	ldrb	r2, [r4, #10]
    877a:	4630      	mov	r0, r6
    877c:	f7ff fccc 	bl	8118 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8780:	b108      	cbz	r0, 8786 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    8782:	2001      	movs	r0, #1
    8784:	e7f2      	b.n	876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    8786:	f640 21c4 	movw	r1, #2756	; 0xac4
    878a:	203e      	movs	r0, #62	; 0x3e
    878c:	f7f8 fd36 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8790:	20000f54 	.word	0x20000f54
    8794:	4803      	ldr	r0, [pc, #12]	; (87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    8796:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    879a:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    879e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87a2:	4770      	bx	lr
    87a4:	40001000 	.word	0x40001000
    87a8:	4804      	ldr	r0, [pc, #16]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    87aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
    87ac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    87b0:	6281      	str	r1, [r0, #40]	; 0x28
    87b2:	4903      	ldr	r1, [pc, #12]	; (87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    87b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87b8:	6008      	str	r0, [r1, #0]
    87ba:	4770      	bx	lr
    87bc:	20000f54 	.word	0x20000f54
    87c0:	4001f504 	.word	0x4001f504
    87c4:	4a07      	ldr	r2, [pc, #28]	; (87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87c6:	2000      	movs	r0, #0
    87c8:	3208      	adds	r2, #8
    87ca:	4906      	ldr	r1, [pc, #24]	; (87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87cc:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87d0:	1d0a      	adds	r2, r1, #4
    87d2:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87d6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87da:	4902      	ldr	r1, [pc, #8]	; (87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87dc:	310c      	adds	r1, #12
    87de:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87e2:	4770      	bx	lr
    87e4:	40008000 	.word	0x40008000
    87e8:	4903      	ldr	r1, [pc, #12]	; (87f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    87ea:	79c9      	ldrb	r1, [r1, #7]
    87ec:	2900      	cmp	r1, #0
    87ee:	d102      	bne.n	87f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    87f0:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    87f2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    87f6:	4770      	bx	lr
    87f8:	20000f54 	.word	0x20000f54
    87fc:	4001f098 	.word	0x4001f098
    8800:	b510      	push	{r4, lr}
    8802:	4a14      	ldr	r2, [pc, #80]	; (8854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8804:	b120      	cbz	r0, 8810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    8806:	2801      	cmp	r0, #1
    8808:	d011      	beq.n	882e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    880a:	f240 7169 	movw	r1, #1897	; 0x769
    880e:	e01c      	b.n	884a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8810:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8814:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8818:	490f      	ldr	r1, [pc, #60]	; (8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    881a:	480e      	ldr	r0, [pc, #56]	; (8854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    881c:	f003 ff20 	bl	c660 <mpsl_fem_pa_configuration_set>
    8820:	2800      	cmp	r0, #0
    8822:	d015      	beq.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8824:	1c40      	adds	r0, r0, #1
    8826:	d013      	beq.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8828:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    882c:	e00d      	b.n	884a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    882e:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8832:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8836:	4908      	ldr	r1, [pc, #32]	; (8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8838:	4806      	ldr	r0, [pc, #24]	; (8854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    883a:	f003 feff 	bl	c63c <mpsl_fem_lna_configuration_set>
    883e:	2800      	cmp	r0, #0
    8840:	d006      	beq.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8842:	1c40      	adds	r0, r0, #1
    8844:	d004      	beq.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8846:	f240 7165 	movw	r1, #1893	; 0x765
    884a:	203e      	movs	r0, #62	; 0x3e
    884c:	f7f8 fcd6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8850:	bd10      	pop	{r4, pc}
    8852:	0000      	.short	0x0000
    8854:	200002c4 	.word	0x200002c4
    8858:	00008984 	.word	0x00008984
    885c:	4802      	ldr	r0, [pc, #8]	; (8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    885e:	2100      	movs	r1, #0
    8860:	71c1      	strb	r1, [r0, #7]
    8862:	7201      	strb	r1, [r0, #8]
    8864:	7241      	strb	r1, [r0, #9]
    8866:	4770      	bx	lr
    8868:	20000f54 	.word	0x20000f54
    886c:	4a05      	ldr	r2, [pc, #20]	; (8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    886e:	79d2      	ldrb	r2, [r2, #7]
    8870:	2a01      	cmp	r2, #1
    8872:	d006      	beq.n	8882 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8874:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8878:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    887c:	fbb1 f1f2 	udiv	r1, r1, r2
    8880:	1a40      	subs	r0, r0, r1
    8882:	4770      	bx	lr
    8884:	20000f54 	.word	0x20000f54
    8888:	b570      	push	{r4, r5, r6, lr}
    888a:	4c13      	ldr	r4, [pc, #76]	; (88d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    888c:	4603      	mov	r3, r0
    888e:	460d      	mov	r5, r1
    8890:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8894:	2000      	movs	r0, #0
    8896:	b15a      	cbz	r2, 88b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8898:	4621      	mov	r1, r4
    889a:	f891 1020 	ldrb.w	r1, [r1, #32]
    889e:	b163      	cbz	r3, 88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88a0:	2b01      	cmp	r3, #1
    88a2:	d111      	bne.n	88c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88a4:	2a01      	cmp	r2, #1
    88a6:	4628      	mov	r0, r5
    88a8:	d012      	beq.n	88d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    88aa:	f007 ffdc 	bl	10866 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    88ae:	e009      	b.n	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88b0:	f640 016e 	movw	r1, #2158	; 0x86e
    88b4:	203e      	movs	r0, #62	; 0x3e
    88b6:	f7f8 fca1 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ba:	2a01      	cmp	r2, #1
    88bc:	4628      	mov	r0, r5
    88be:	d004      	beq.n	88ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    88c0:	f007 ffdf 	bl	10882 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    88c4:	69e1      	ldr	r1, [r4, #28]
    88c6:	4408      	add	r0, r1
    88c8:	bd70      	pop	{r4, r5, r6, pc}
    88ca:	f000 f8d1 	bl	8a70 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    88ce:	e7f9      	b.n	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88d0:	f000 f8c0 	bl	8a54 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    88d4:	e7f6      	b.n	88c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88d6:	0000      	.short	0x0000
    88d8:	20000f54 	.word	0x20000f54
    88dc:	b510      	push	{r4, lr}
    88de:	f7ff fbef 	bl	80c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    88e2:	f7ff fde7 	bl	84b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    88e6:	f7ff fe1d 	bl	8524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    88ea:	f7ff ff53 	bl	8794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    88ee:	f008 f91c 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    88f2:	2800      	cmp	r0, #0
    88f4:	d108      	bne.n	8908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    88f6:	f008 f908 	bl	10b0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    88fa:	2800      	cmp	r0, #0
    88fc:	d104      	bne.n	8908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    88fe:	4803      	ldr	r0, [pc, #12]	; (890c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8900:	6801      	ldr	r1, [r0, #0]
    8902:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8906:	6001      	str	r1, [r0, #0]
    8908:	bd10      	pop	{r4, pc}
    890a:	0000      	.short	0x0000
    890c:	40001568 	.word	0x40001568
    8910:	b510      	push	{r4, lr}
    8912:	4604      	mov	r4, r0
    8914:	f7ff fbd4 	bl	80c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8918:	f7ff fdcc 	bl	84b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    891c:	4620      	mov	r0, r4
    891e:	f7ff fde7 	bl	84f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8922:	f008 f902 	bl	10b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8926:	2800      	cmp	r0, #0
    8928:	d00d      	beq.n	8946 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    892a:	4a09      	ldr	r2, [pc, #36]	; (8950 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    892c:	6811      	ldr	r1, [r2, #0]
    892e:	0650      	lsls	r0, r2, #25
    8930:	2c02      	cmp	r4, #2
    8932:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8936:	d007      	beq.n	8948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8938:	f3c0 2006 	ubfx	r0, r0, #8, #7
    893c:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8940:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8944:	6010      	str	r0, [r2, #0]
    8946:	bd10      	pop	{r4, pc}
    8948:	f3c0 6006 	ubfx	r0, r0, #24, #7
    894c:	e7f6      	b.n	893c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    894e:	0000      	.short	0x0000
    8950:	40001588 	.word	0x40001588
    8954:	a62c0000 	.word	0xa62c0000
    8958:	0604a1e0 	.word	0x0604a1e0
    895c:	0e0c0a08 	.word	0x0e0c0a08
    8960:	16141210 	.word	0x16141210
    8964:	201e1c18 	.word	0x201e1c18
    8968:	28262422 	.word	0x28262422
    896c:	302e2c2a 	.word	0x302e2c2a
    8970:	38363432 	.word	0x38363432
    8974:	403e3c3a 	.word	0x403e3c3a
    8978:	48464442 	.word	0x48464442
    897c:	024e4c4a 	.word	0x024e4c4a
    8980:	0000501a 	.word	0x0000501a
    8984:	00000001 	.word	0x00000001
    8988:	40001110 	.word	0x40001110
	...
    89a0:	00001e14 	.word	0x00001e14
    89a4:	00001130 	.word	0x00001130
    89a8:	00000000 	.word	0x00000000
    89ac:	00000028 	.word	0x00000028
    89b0:	00000018 	.word	0x00000018
    89b4:	00000000 	.word	0x00000000
    89b8:	00001e14 	.word	0x00001e14
    89bc:	00001130 	.word	0x00001130
    89c0:	00000000 	.word	0x00000000
    89c4:	00001770 	.word	0x00001770
    89c8:	00000fa0 	.word	0x00000fa0

000089cc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    89cc:	b570      	push	{r4, r5, r6, lr}
    89ce:	4605      	mov	r5, r0
    89d0:	4614      	mov	r4, r2
    89d2:	4608      	mov	r0, r1
    89d4:	f7ff fb9a 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89d8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89dc:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    89e0:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    89e4:	4807      	ldr	r0, [pc, #28]	; (8a04 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    89e6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    89ea:	4408      	add	r0, r1
    89ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    89f0:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    89f4:	fbb0 f5f1 	udiv	r5, r0, r1
    89f8:	4620      	mov	r0, r4
    89fa:	f7ff fb5b 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    89fe:	4428      	add	r0, r5
    8a00:	1d40      	adds	r0, r0, #5
    8a02:	bd70      	pop	{r4, r5, r6, pc}
    8a04:	00008a94 	.word	0x00008a94

00008a08 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a08:	b570      	push	{r4, r5, r6, lr}
    8a0a:	4d0e      	ldr	r5, [pc, #56]	; (8a44 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a0c:	461c      	mov	r4, r3
    8a0e:	3d08      	subs	r5, #8
    8a10:	4b0c      	ldr	r3, [pc, #48]	; (8a44 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a12:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a16:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a1e:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a22:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a26:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a2a:	4418      	add	r0, r3
    8a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a30:	fbb0 f5f1 	udiv	r5, r0, r1
    8a34:	4610      	mov	r0, r2
    8a36:	f7ff fb3d 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a3a:	4428      	add	r0, r5
    8a3c:	4420      	add	r0, r4
    8a3e:	1d40      	adds	r0, r0, #5
    8a40:	bd70      	pop	{r4, r5, r6, pc}
    8a42:	0000      	.short	0x0000
    8a44:	00008a94 	.word	0x00008a94

00008a48 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8a48:	4901      	ldr	r1, [pc, #4]	; (8a50 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8a4a:	b2c0      	uxtb	r0, r0
    8a4c:	6008      	str	r0, [r1, #0]
    8a4e:	4770      	bx	lr
    8a50:	4000150c 	.word	0x4000150c

00008a54 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8a54:	4a05      	ldr	r2, [pc, #20]	; (8a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8a56:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a5e:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8a62:	fbb1 f1f2 	udiv	r1, r1, r2
    8a66:	4408      	add	r0, r1
    8a68:	1e80      	subs	r0, r0, #2
    8a6a:	4770      	bx	lr
    8a6c:	00008a8c 	.word	0x00008a8c

00008a70 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8a70:	4a05      	ldr	r2, [pc, #20]	; (8a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8a72:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a7a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8a7e:	fbb1 f1f2 	udiv	r1, r1, r2
    8a82:	4408      	add	r0, r1
    8a84:	4770      	bx	lr
    8a86:	0000      	.short	0x0000
    8a88:	00008a8c 	.word	0x00008a8c
    8a8c:	05dc0000 	.word	0x05dc0000
    8a90:	000003e8 	.word	0x000003e8
    8a94:	00000000 	.word	0x00000000
    8a98:	00001e14 	.word	0x00001e14
    8a9c:	00001130 	.word	0x00001130

00008aa0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8aa4:	461e      	mov	r6, r3
    8aa6:	4617      	mov	r7, r2
    8aa8:	460c      	mov	r4, r1
    8aaa:	4605      	mov	r5, r0
    8aac:	f000 f856 	bl	8b5c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8ab0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b58 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8ab4:	4680      	mov	r8, r0
    8ab6:	f899 0000 	ldrb.w	r0, [r9]
    8aba:	42a8      	cmp	r0, r5
    8abc:	d110      	bne.n	8ae0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8abe:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ac2:	4648      	mov	r0, r9
    8ac4:	42a1      	cmp	r1, r4
    8ac6:	d10b      	bne.n	8ae0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ac8:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8acc:	42b9      	cmp	r1, r7
    8ace:	d107      	bne.n	8ae0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad0:	78c2      	ldrb	r2, [r0, #3]
    8ad2:	4542      	cmp	r2, r8
    8ad4:	d104      	bne.n	8ae0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad6:	8881      	ldrh	r1, [r0, #4]
    8ad8:	8031      	strh	r1, [r6, #0]
    8ada:	7980      	ldrb	r0, [r0, #6]
    8adc:	70b0      	strb	r0, [r6, #2]
    8ade:	e037      	b.n	8b50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8ae0:	463a      	mov	r2, r7
    8ae2:	4621      	mov	r1, r4
    8ae4:	2d01      	cmp	r5, #1
    8ae6:	d009      	beq.n	8afc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8ae8:	2d02      	cmp	r5, #2
    8aea:	d009      	beq.n	8b00 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8aec:	2d04      	cmp	r5, #4
    8aee:	d009      	beq.n	8b04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8af0:	2d08      	cmp	r5, #8
    8af2:	d009      	beq.n	8b08 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8af4:	f240 4162 	movw	r1, #1122	; 0x462
    8af8:	2006      	movs	r0, #6
    8afa:	e00c      	b.n	8b16 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8afc:	2000      	movs	r0, #0
    8afe:	e004      	b.n	8b0a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b00:	2001      	movs	r0, #1
    8b02:	e002      	b.n	8b0a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b04:	2003      	movs	r0, #3
    8b06:	e000      	b.n	8b0a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b08:	2002      	movs	r0, #2
    8b0a:	466b      	mov	r3, sp
    8b0c:	f000 f89e 	bl	8c4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b10:	b118      	cbz	r0, 8b1a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b12:	213d      	movs	r1, #61	; 0x3d
    8b14:	2075      	movs	r0, #117	; 0x75
    8b16:	f7f8 fb71 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b1a:	4620      	mov	r0, r4
    8b1c:	f7ff f872 	bl	7c04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b20:	4602      	mov	r2, r0
    8b22:	2300      	movs	r3, #0
    8b24:	4631      	mov	r1, r6
    8b26:	f99d 0000 	ldrsb.w	r0, [sp]
    8b2a:	f003 fdab 	bl	c684 <mpsl_fem_tx_power_split>
    8b2e:	4601      	mov	r1, r0
    8b30:	f889 1007 	strb.w	r1, [r9, #7]
    8b34:	8831      	ldrh	r1, [r6, #0]
    8b36:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b3a:	78b1      	ldrb	r1, [r6, #2]
    8b3c:	f889 1006 	strb.w	r1, [r9, #6]
    8b40:	f889 5000 	strb.w	r5, [r9]
    8b44:	f889 4001 	strb.w	r4, [r9, #1]
    8b48:	f889 7002 	strb.w	r7, [r9, #2]
    8b4c:	f889 8003 	strb.w	r8, [r9, #3]
    8b50:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b58:	20000378 	.word	0x20000378

00008b5c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8b5c:	4801      	ldr	r0, [pc, #4]	; (8b64 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8b5e:	7800      	ldrb	r0, [r0, #0]
    8b60:	4770      	bx	lr
    8b62:	0000      	.short	0x0000
    8b64:	200002dc 	.word	0x200002dc

00008b68 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8b68:	b570      	push	{r4, r5, r6, lr}
    8b6a:	4c17      	ldr	r4, [pc, #92]	; (8bc8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8b6c:	7860      	ldrb	r0, [r4, #1]
    8b6e:	2800      	cmp	r0, #0
    8b70:	d123      	bne.n	8bba <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8b72:	2001      	movs	r0, #1
    8b74:	7060      	strb	r0, [r4, #1]
    8b76:	f007 ffb2 	bl	10ade <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8b7a:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8b7e:	b928      	cbnz	r0, 8b8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b80:	f007 ffe3 	bl	10b4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8b84:	b910      	cbnz	r0, 8b8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b86:	f007 ffea 	bl	10b5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8b8a:	b120      	cbz	r0, 8b96 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8b8c:	480f      	ldr	r0, [pc, #60]	; (8bcc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8b8e:	6060      	str	r0, [r4, #4]
    8b90:	70a5      	strb	r5, [r4, #2]
    8b92:	2008      	movs	r0, #8
    8b94:	e010      	b.n	8bb8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8b96:	f007 ff77 	bl	10a88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8b9a:	b940      	cbnz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8b9c:	f007 ff7e 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8ba0:	b928      	cbnz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8ba2:	f007 ff92 	bl	10aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8ba6:	b910      	cbnz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8ba8:	f007 ffa3 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8bac:	b130      	cbz	r0, 8bbc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8bae:	4807      	ldr	r0, [pc, #28]	; (8bcc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8bb0:	3031      	adds	r0, #49	; 0x31
    8bb2:	6060      	str	r0, [r4, #4]
    8bb4:	70a5      	strb	r5, [r4, #2]
    8bb6:	2004      	movs	r0, #4
    8bb8:	70e0      	strb	r0, [r4, #3]
    8bba:	bd70      	pop	{r4, r5, r6, pc}
    8bbc:	f240 113f 	movw	r1, #319	; 0x13f
    8bc0:	2074      	movs	r0, #116	; 0x74
    8bc2:	f003 fb9f 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8bc6:	0000      	.short	0x0000
    8bc8:	200002dc 	.word	0x200002dc
    8bcc:	00010e7f 	.word	0x00010e7f

00008bd0 <mpsl_tx_power_radio_supported_power_adjust>:
    8bd0:	4a06      	ldr	r2, [pc, #24]	; (8bec <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8bd2:	b500      	push	{lr}
    8bd4:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8bd8:	4290      	cmp	r0, r2
    8bda:	db01      	blt.n	8be0 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8bdc:	4610      	mov	r0, r2
    8bde:	bd00      	pop	{pc}
    8be0:	f000 f808 	bl	8bf4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8be4:	4902      	ldr	r1, [pc, #8]	; (8bf0 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8be6:	5608      	ldrsb	r0, [r1, r0]
    8be8:	bd00      	pop	{pc}
    8bea:	0000      	.short	0x0000
    8bec:	200002dc 	.word	0x200002dc
    8bf0:	00010e71 	.word	0x00010e71

00008bf4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8bf4:	4602      	mov	r2, r0
    8bf6:	4813      	ldr	r0, [pc, #76]	; (8c44 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8bf8:	b510      	push	{r4, lr}
    8bfa:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8bfe:	429a      	cmp	r2, r3
    8c00:	db01      	blt.n	8c06 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c02:	200d      	movs	r0, #13
    8c04:	bd10      	pop	{r4, pc}
    8c06:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c0a:	429a      	cmp	r2, r3
    8c0c:	dc01      	bgt.n	8c12 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c0e:	2000      	movs	r0, #0
    8c10:	bd10      	pop	{r4, pc}
    8c12:	b101      	cbz	r1, 8c16 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c14:	2101      	movs	r1, #1
    8c16:	1ad4      	subs	r4, r2, r3
    8c18:	6843      	ldr	r3, [r0, #4]
    8c1a:	5d18      	ldrb	r0, [r3, r4]
    8c1c:	4c0a      	ldr	r4, [pc, #40]	; (8c48 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c1e:	5624      	ldrsb	r4, [r4, r0]
    8c20:	4294      	cmp	r4, r2
    8c22:	d0f5      	beq.n	8c10 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c24:	4c08      	ldr	r4, [pc, #32]	; (8c48 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c26:	4408      	add	r0, r1
    8c28:	343f      	adds	r4, #63	; 0x3f
    8c2a:	b2c0      	uxtb	r0, r0
    8c2c:	b2d2      	uxtb	r2, r2
    8c2e:	42a3      	cmp	r3, r4
    8c30:	d1ee      	bne.n	8c10 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c32:	2900      	cmp	r1, #0
    8c34:	d0ec      	beq.n	8c10 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c36:	2a01      	cmp	r2, #1
    8c38:	d001      	beq.n	8c3e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c3a:	2a02      	cmp	r2, #2
    8c3c:	d1e8      	bne.n	8c10 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c3e:	1c40      	adds	r0, r0, #1
    8c40:	b2c0      	uxtb	r0, r0
    8c42:	bd10      	pop	{r4, pc}
    8c44:	200002dc 	.word	0x200002dc
    8c48:	00010e71 	.word	0x00010e71

00008c4c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c50:	461c      	mov	r4, r3
    8c52:	4690      	mov	r8, r2
    8c54:	460d      	mov	r5, r1
    8c56:	4606      	mov	r6, r0
    8c58:	f06f 0715 	mvn.w	r7, #21
    8c5c:	2804      	cmp	r0, #4
    8c5e:	d804      	bhi.n	8c6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c60:	b11c      	cbz	r4, 8c6a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c62:	f007 fe19 	bl	10898 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8c66:	42a8      	cmp	r0, r5
    8c68:	d802      	bhi.n	8c70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8c6a:	4638      	mov	r0, r7
    8c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c70:	4805      	ldr	r0, [pc, #20]	; (8c88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8c72:	4642      	mov	r2, r8
    8c74:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8c78:	b118      	cbz	r0, 8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c7a:	5740      	ldrsb	r0, [r0, r5]
    8c7c:	4282      	cmp	r2, r0
    8c7e:	dd00      	ble.n	8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c80:	4602      	mov	r2, r0
    8c82:	7022      	strb	r2, [r4, #0]
    8c84:	2000      	movs	r0, #0
    8c86:	e7f1      	b.n	8c6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8c88:	20000f8c 	.word	0x20000f8c

00008c8c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8c8c:	4801      	ldr	r0, [pc, #4]	; (8c94 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8c8e:	7800      	ldrb	r0, [r0, #0]
    8c90:	4770      	bx	lr
    8c92:	0000      	.short	0x0000
    8c94:	200002e4 	.word	0x200002e4

00008c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8c98:	4905      	ldr	r1, [pc, #20]	; (8cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8c9a:	780a      	ldrb	r2, [r1, #0]
    8c9c:	4290      	cmp	r0, r2
    8c9e:	d301      	bcc.n	8ca4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8ca0:	2000      	movs	r0, #0
    8ca2:	4770      	bx	lr
    8ca4:	6849      	ldr	r1, [r1, #4]
    8ca6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8caa:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cae:	4770      	bx	lr
    8cb0:	200002e4 	.word	0x200002e4

00008cb4 <MPSL_IRQ_RADIO_Handler>:
    8cb4:	490e      	ldr	r1, [pc, #56]	; (8cf0 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8cb6:	b510      	push	{r4, lr}
    8cb8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cbc:	2820      	cmp	r0, #32
    8cbe:	d012      	beq.n	8ce6 <MPSL_IRQ_RADIO_Handler+0x32>
    8cc0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cc4:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8cc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ccc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8cd0:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8cd4:	6840      	ldr	r0, [r0, #4]
    8cd6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8cda:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ce2:	2104      	movs	r1, #4
    8ce4:	4710      	bx	r2
    8ce6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8cea:	2070      	movs	r0, #112	; 0x70
    8cec:	f003 fb0a 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8cf0:	200013a0 	.word	0x200013a0
    8cf4:	b570      	push	{r4, r5, r6, lr}
    8cf6:	4605      	mov	r5, r0
    8cf8:	2a20      	cmp	r2, #32
    8cfa:	d028      	beq.n	8d4e <MPSL_IRQ_RADIO_Handler+0x9a>
    8cfc:	4819      	ldr	r0, [pc, #100]	; (8d64 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8cfe:	4c1a      	ldr	r4, [pc, #104]	; (8d68 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d00:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d08:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d0c:	4423      	add	r3, r4
    8d0e:	2920      	cmp	r1, #32
    8d10:	d022      	beq.n	8d58 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d12:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d16:	7840      	ldrb	r0, [r0, #1]
    8d18:	784c      	ldrb	r4, [r1, #1]
    8d1a:	7048      	strb	r0, [r1, #1]
    8d1c:	4620      	mov	r0, r4
    8d1e:	4601      	mov	r1, r0
    8d20:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d24:	4291      	cmp	r1, r2
    8d26:	7005      	strb	r5, [r0, #0]
    8d28:	7840      	ldrb	r0, [r0, #1]
    8d2a:	d1f8      	bne.n	8d1e <MPSL_IRQ_RADIO_Handler+0x6a>
    8d2c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d30:	2a20      	cmp	r2, #32
    8d32:	bf1a      	itte	ne
    8d34:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d38:	7054      	strbne	r4, [r2, #1]
    8d3a:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d3e:	2220      	movs	r2, #32
    8d40:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d44:	f88c 2001 	strb.w	r2, [ip, #1]
    8d48:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8d4c:	bd70      	pop	{r4, r5, r6, pc}
    8d4e:	f44f 7126 	mov.w	r1, #664	; 0x298
    8d52:	2070      	movs	r0, #112	; 0x70
    8d54:	f003 fad6 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d58:	f893 4020 	ldrb.w	r4, [r3, #32]
    8d5c:	7840      	ldrb	r0, [r0, #1]
    8d5e:	f883 0020 	strb.w	r0, [r3, #32]
    8d62:	e7db      	b.n	8d1c <MPSL_IRQ_RADIO_Handler+0x68>
    8d64:	20001320 	.word	0x20001320
    8d68:	200013a0 	.word	0x200013a0
    8d6c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d70:	b08d      	sub	sp, #52	; 0x34
    8d72:	4615      	mov	r5, r2
    8d74:	460c      	mov	r4, r1
    8d76:	f002 f9ef 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d7a:	4428      	add	r0, r5
    8d7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d80:	9008      	str	r0, [sp, #32]
    8d82:	6821      	ldr	r1, [r4, #0]
    8d84:	1a08      	subs	r0, r1, r0
    8d86:	0200      	lsls	r0, r0, #8
    8d88:	17c1      	asrs	r1, r0, #31
    8d8a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8d8e:	1200      	asrs	r0, r0, #8
    8d90:	2800      	cmp	r0, #0
    8d92:	f300 80f0 	bgt.w	8f76 <MPSL_IRQ_RADIO_Handler+0x2c2>
    8d96:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8d9a:	48cd      	ldr	r0, [pc, #820]	; (90d0 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8d9c:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8da0:	4408      	add	r0, r1
    8da2:	9009      	str	r0, [sp, #36]	; 0x24
    8da4:	f890 5020 	ldrb.w	r5, [r0, #32]
    8da8:	2020      	movs	r0, #32
    8daa:	4eca      	ldr	r6, [pc, #808]	; (90d4 <MPSL_IRQ_RADIO_Handler+0x420>)
    8dac:	f10d 0a18 	add.w	sl, sp, #24
    8db0:	f10d 091c 	add.w	r9, sp, #28
    8db4:	f88d 0018 	strb.w	r0, [sp, #24]
    8db8:	2d20      	cmp	r5, #32
    8dba:	bf1c      	itt	ne
    8dbc:	48c6      	ldrne	r0, [pc, #792]	; (90d8 <MPSL_IRQ_RADIO_Handler+0x424>)
    8dbe:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8dc2:	d038      	beq.n	8e36 <MPSL_IRQ_RADIO_Handler+0x182>
    8dc4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8dc8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8dcc:	f100 0108 	add.w	r1, r0, #8
    8dd0:	68c0      	ldr	r0, [r0, #12]
    8dd2:	6827      	ldr	r7, [r4, #0]
    8dd4:	1a38      	subs	r0, r7, r0
    8dd6:	0200      	lsls	r0, r0, #8
    8dd8:	17c2      	asrs	r2, r0, #31
    8dda:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8dde:	1200      	asrs	r0, r0, #8
    8de0:	d429      	bmi.n	8e36 <MPSL_IRQ_RADIO_Handler+0x182>
    8de2:	89e0      	ldrh	r0, [r4, #14]
    8de4:	b300      	cbz	r0, 8e28 <MPSL_IRQ_RADIO_Handler+0x174>
    8de6:	89c8      	ldrh	r0, [r1, #14]
    8de8:	b9f0      	cbnz	r0, 8e28 <MPSL_IRQ_RADIO_Handler+0x174>
    8dea:	6808      	ldr	r0, [r1, #0]
    8dec:	9003      	str	r0, [sp, #12]
    8dee:	f003 f8cb 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8df2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8df6:	bf08      	it	eq
    8df8:	200d      	moveq	r0, #13
    8dfa:	d00b      	beq.n	8e14 <MPSL_IRQ_RADIO_Handler+0x160>
    8dfc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e00:	3856      	subs	r0, #86	; 0x56
    8e02:	bf08      	it	eq
    8e04:	201c      	moveq	r0, #28
    8e06:	d005      	beq.n	8e14 <MPSL_IRQ_RADIO_Handler+0x160>
    8e08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e0c:	389f      	subs	r0, #159	; 0x9f
    8e0e:	bf14      	ite	ne
    8e10:	2000      	movne	r0, #0
    8e12:	2032      	moveq	r0, #50	; 0x32
    8e14:	1c41      	adds	r1, r0, #1
    8e16:	9803      	ldr	r0, [sp, #12]
    8e18:	1a38      	subs	r0, r7, r0
    8e1a:	0200      	lsls	r0, r0, #8
    8e1c:	17c2      	asrs	r2, r0, #31
    8e1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e22:	1200      	asrs	r0, r0, #8
    8e24:	4288      	cmp	r0, r1
    8e26:	db06      	blt.n	8e36 <MPSL_IRQ_RADIO_Handler+0x182>
    8e28:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e2c:	f88a 5000 	strb.w	r5, [sl]
    8e30:	7845      	ldrb	r5, [r0, #1]
    8e32:	2d20      	cmp	r5, #32
    8e34:	d1c6      	bne.n	8dc4 <MPSL_IRQ_RADIO_Handler+0x110>
    8e36:	f89a 0000 	ldrb.w	r0, [sl]
    8e3a:	f889 0000 	strb.w	r0, [r9]
    8e3e:	2d20      	cmp	r5, #32
    8e40:	bf1c      	itt	ne
    8e42:	48a5      	ldrne	r0, [pc, #660]	; (90d8 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e44:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e48:	f000 813e 	beq.w	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    8e4c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e50:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8e54:	6861      	ldr	r1, [r4, #4]
    8e56:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8e5a:	f107 0008 	add.w	r0, r7, #8
    8e5e:	eba8 0101 	sub.w	r1, r8, r1
    8e62:	0209      	lsls	r1, r1, #8
    8e64:	17ca      	asrs	r2, r1, #31
    8e66:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8e6a:	1209      	asrs	r1, r1, #8
    8e6c:	d427      	bmi.n	8ebe <MPSL_IRQ_RADIO_Handler+0x20a>
    8e6e:	89c0      	ldrh	r0, [r0, #14]
    8e70:	2800      	cmp	r0, #0
    8e72:	f000 8129 	beq.w	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    8e76:	89e0      	ldrh	r0, [r4, #14]
    8e78:	2800      	cmp	r0, #0
    8e7a:	f040 8125 	bne.w	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    8e7e:	f8d4 a000 	ldr.w	sl, [r4]
    8e82:	f003 f881 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e86:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e8a:	bf08      	it	eq
    8e8c:	200d      	moveq	r0, #13
    8e8e:	d00b      	beq.n	8ea8 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8e90:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e94:	3856      	subs	r0, #86	; 0x56
    8e96:	bf08      	it	eq
    8e98:	201c      	moveq	r0, #28
    8e9a:	d005      	beq.n	8ea8 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8e9c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8ea0:	389f      	subs	r0, #159	; 0x9f
    8ea2:	bf14      	ite	ne
    8ea4:	2000      	movne	r0, #0
    8ea6:	2032      	moveq	r0, #50	; 0x32
    8ea8:	1c41      	adds	r1, r0, #1
    8eaa:	eba8 000a 	sub.w	r0, r8, sl
    8eae:	0200      	lsls	r0, r0, #8
    8eb0:	17c2      	asrs	r2, r0, #31
    8eb2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8eb6:	1200      	asrs	r0, r0, #8
    8eb8:	4288      	cmp	r0, r1
    8eba:	f280 8105 	bge.w	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    8ebe:	f889 5000 	strb.w	r5, [r9]
    8ec2:	7e38      	ldrb	r0, [r7, #24]
    8ec4:	7c21      	ldrb	r1, [r4, #16]
    8ec6:	4288      	cmp	r0, r1
    8ec8:	d906      	bls.n	8ed8 <MPSL_IRQ_RADIO_Handler+0x224>
    8eca:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ece:	7845      	ldrb	r5, [r0, #1]
    8ed0:	2d20      	cmp	r5, #32
    8ed2:	d1bb      	bne.n	8e4c <MPSL_IRQ_RADIO_Handler+0x198>
    8ed4:	f000 b8f8 	b.w	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed8:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8edc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ee0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8ee4:	8ac1      	ldrh	r1, [r0, #22]
    8ee6:	68c5      	ldr	r5, [r0, #12]
    8ee8:	bbe1      	cbnz	r1, 8f64 <MPSL_IRQ_RADIO_Handler+0x2b0>
    8eea:	89e1      	ldrh	r1, [r4, #14]
    8eec:	b3d1      	cbz	r1, 8f64 <MPSL_IRQ_RADIO_Handler+0x2b0>
    8eee:	6887      	ldr	r7, [r0, #8]
    8ef0:	f003 f84a 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8ef4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ef8:	bf08      	it	eq
    8efa:	200d      	moveq	r0, #13
    8efc:	d00b      	beq.n	8f16 <MPSL_IRQ_RADIO_Handler+0x262>
    8efe:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f02:	3856      	subs	r0, #86	; 0x56
    8f04:	bf08      	it	eq
    8f06:	201c      	moveq	r0, #28
    8f08:	d005      	beq.n	8f16 <MPSL_IRQ_RADIO_Handler+0x262>
    8f0a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f0e:	389f      	subs	r0, #159	; 0x9f
    8f10:	bf14      	ite	ne
    8f12:	2000      	movne	r0, #0
    8f14:	2032      	moveq	r0, #50	; 0x32
    8f16:	1c41      	adds	r1, r0, #1
    8f18:	1be8      	subs	r0, r5, r7
    8f1a:	0200      	lsls	r0, r0, #8
    8f1c:	17c2      	asrs	r2, r0, #31
    8f1e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f22:	1200      	asrs	r0, r0, #8
    8f24:	4288      	cmp	r0, r1
    8f26:	da1d      	bge.n	8f64 <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f28:	f003 f82e 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f2c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f30:	bf08      	it	eq
    8f32:	200d      	moveq	r0, #13
    8f34:	d00b      	beq.n	8f4e <MPSL_IRQ_RADIO_Handler+0x29a>
    8f36:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f3a:	3856      	subs	r0, #86	; 0x56
    8f3c:	bf08      	it	eq
    8f3e:	201c      	moveq	r0, #28
    8f40:	d005      	beq.n	8f4e <MPSL_IRQ_RADIO_Handler+0x29a>
    8f42:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f46:	389f      	subs	r0, #159	; 0x9f
    8f48:	bf14      	ite	ne
    8f4a:	2000      	movne	r0, #0
    8f4c:	2032      	moveq	r0, #50	; 0x32
    8f4e:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8f52:	1c40      	adds	r0, r0, #1
    8f54:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f58:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8f5c:	6889      	ldr	r1, [r1, #8]
    8f5e:	4408      	add	r0, r1
    8f60:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8f64:	9808      	ldr	r0, [sp, #32]
    8f66:	1a28      	subs	r0, r5, r0
    8f68:	0200      	lsls	r0, r0, #8
    8f6a:	17c1      	asrs	r1, r0, #31
    8f6c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f70:	1200      	asrs	r0, r0, #8
    8f72:	2800      	cmp	r0, #0
    8f74:	dd03      	ble.n	8f7e <MPSL_IRQ_RADIO_Handler+0x2ca>
    8f76:	b011      	add	sp, #68	; 0x44
    8f78:	2000      	movs	r0, #0
    8f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f7e:	6820      	ldr	r0, [r4, #0]
    8f80:	42a8      	cmp	r0, r5
    8f82:	d902      	bls.n	8f8a <MPSL_IRQ_RADIO_Handler+0x2d6>
    8f84:	68a1      	ldr	r1, [r4, #8]
    8f86:	1c49      	adds	r1, r1, #1
    8f88:	60a1      	str	r1, [r4, #8]
    8f8a:	6861      	ldr	r1, [r4, #4]
    8f8c:	f10d 0a18 	add.w	sl, sp, #24
    8f90:	1a08      	subs	r0, r1, r0
    8f92:	4428      	add	r0, r5
    8f94:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8f98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8f9c:	e9c4 1000 	strd	r1, r0, [r4]
    8fa0:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fa2:	900b      	str	r0, [sp, #44]	; 0x2c
    8fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fa6:	f10d 081c 	add.w	r8, sp, #28
    8faa:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fae:	2020      	movs	r0, #32
    8fb0:	f88d 0018 	strb.w	r0, [sp, #24]
    8fb4:	2d20      	cmp	r5, #32
    8fb6:	d03c      	beq.n	9032 <MPSL_IRQ_RADIO_Handler+0x37e>
    8fb8:	4947      	ldr	r1, [pc, #284]	; (90d8 <MPSL_IRQ_RADIO_Handler+0x424>)
    8fba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fbc:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    8fc0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fc4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8fc8:	f100 0108 	add.w	r1, r0, #8
    8fcc:	68c0      	ldr	r0, [r0, #12]
    8fce:	6827      	ldr	r7, [r4, #0]
    8fd0:	1a38      	subs	r0, r7, r0
    8fd2:	0200      	lsls	r0, r0, #8
    8fd4:	17c2      	asrs	r2, r0, #31
    8fd6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8fda:	1200      	asrs	r0, r0, #8
    8fdc:	d429      	bmi.n	9032 <MPSL_IRQ_RADIO_Handler+0x37e>
    8fde:	89e0      	ldrh	r0, [r4, #14]
    8fe0:	b300      	cbz	r0, 9024 <MPSL_IRQ_RADIO_Handler+0x370>
    8fe2:	89c8      	ldrh	r0, [r1, #14]
    8fe4:	b9f0      	cbnz	r0, 9024 <MPSL_IRQ_RADIO_Handler+0x370>
    8fe6:	f8d1 9000 	ldr.w	r9, [r1]
    8fea:	f002 ffcd 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8fee:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ff2:	bf08      	it	eq
    8ff4:	200d      	moveq	r0, #13
    8ff6:	d00b      	beq.n	9010 <MPSL_IRQ_RADIO_Handler+0x35c>
    8ff8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8ffc:	3856      	subs	r0, #86	; 0x56
    8ffe:	bf08      	it	eq
    9000:	201c      	moveq	r0, #28
    9002:	d005      	beq.n	9010 <MPSL_IRQ_RADIO_Handler+0x35c>
    9004:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9008:	389f      	subs	r0, #159	; 0x9f
    900a:	bf14      	ite	ne
    900c:	2000      	movne	r0, #0
    900e:	2032      	moveq	r0, #50	; 0x32
    9010:	1c41      	adds	r1, r0, #1
    9012:	eba7 0009 	sub.w	r0, r7, r9
    9016:	0200      	lsls	r0, r0, #8
    9018:	17c2      	asrs	r2, r0, #31
    901a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    901e:	1200      	asrs	r0, r0, #8
    9020:	4288      	cmp	r0, r1
    9022:	db06      	blt.n	9032 <MPSL_IRQ_RADIO_Handler+0x37e>
    9024:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9028:	f88a 5000 	strb.w	r5, [sl]
    902c:	7845      	ldrb	r5, [r0, #1]
    902e:	2d20      	cmp	r5, #32
    9030:	d1c6      	bne.n	8fc0 <MPSL_IRQ_RADIO_Handler+0x30c>
    9032:	f89a 0000 	ldrb.w	r0, [sl]
    9036:	f888 0000 	strb.w	r0, [r8]
    903a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    903c:	2d20      	cmp	r5, #32
    903e:	bf1c      	itt	ne
    9040:	4925      	ldrne	r1, [pc, #148]	; (90d8 <MPSL_IRQ_RADIO_Handler+0x424>)
    9042:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9046:	d03f      	beq.n	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    9048:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    904c:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9050:	6860      	ldr	r0, [r4, #4]
    9052:	f8d7 9008 	ldr.w	r9, [r7, #8]
    9056:	f107 0108 	add.w	r1, r7, #8
    905a:	eba9 0000 	sub.w	r0, r9, r0
    905e:	0200      	lsls	r0, r0, #8
    9060:	17c2      	asrs	r2, r0, #31
    9062:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9066:	1200      	asrs	r0, r0, #8
    9068:	d422      	bmi.n	90b0 <MPSL_IRQ_RADIO_Handler+0x3fc>
    906a:	89c8      	ldrh	r0, [r1, #14]
    906c:	b360      	cbz	r0, 90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    906e:	89e0      	ldrh	r0, [r4, #14]
    9070:	bb50      	cbnz	r0, 90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    9072:	f8d4 a000 	ldr.w	sl, [r4]
    9076:	f002 ff87 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    907a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    907e:	bf08      	it	eq
    9080:	200d      	moveq	r0, #13
    9082:	d00b      	beq.n	909c <MPSL_IRQ_RADIO_Handler+0x3e8>
    9084:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9088:	3856      	subs	r0, #86	; 0x56
    908a:	bf08      	it	eq
    908c:	201c      	moveq	r0, #28
    908e:	d005      	beq.n	909c <MPSL_IRQ_RADIO_Handler+0x3e8>
    9090:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9094:	389f      	subs	r0, #159	; 0x9f
    9096:	bf14      	ite	ne
    9098:	2000      	movne	r0, #0
    909a:	2032      	moveq	r0, #50	; 0x32
    909c:	1c41      	adds	r1, r0, #1
    909e:	eba9 000a 	sub.w	r0, r9, sl
    90a2:	0200      	lsls	r0, r0, #8
    90a4:	17c2      	asrs	r2, r0, #31
    90a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90aa:	1200      	asrs	r0, r0, #8
    90ac:	4288      	cmp	r0, r1
    90ae:	da0b      	bge.n	90c8 <MPSL_IRQ_RADIO_Handler+0x414>
    90b0:	f888 5000 	strb.w	r5, [r8]
    90b4:	7e38      	ldrb	r0, [r7, #24]
    90b6:	7c21      	ldrb	r1, [r4, #16]
    90b8:	4288      	cmp	r0, r1
    90ba:	f67f af0d 	bls.w	8ed8 <MPSL_IRQ_RADIO_Handler+0x224>
    90be:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90c2:	7845      	ldrb	r5, [r0, #1]
    90c4:	2d20      	cmp	r5, #32
    90c6:	d1bf      	bne.n	9048 <MPSL_IRQ_RADIO_Handler+0x394>
    90c8:	b011      	add	sp, #68	; 0x44
    90ca:	2001      	movs	r0, #1
    90cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90d0:	200013a0 	.word	0x200013a0
    90d4:	20000fa0 	.word	0x20000fa0
    90d8:	20001320 	.word	0x20001320
    90dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90e0:	460f      	mov	r7, r1
    90e2:	4606      	mov	r6, r0
    90e4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    90e8:	494b      	ldr	r1, [pc, #300]	; (9218 <MPSL_IRQ_RADIO_Handler+0x564>)
    90ea:	4699      	mov	r9, r3
    90ec:	4408      	add	r0, r1
    90ee:	4692      	mov	sl, r2
    90f0:	f890 4020 	ldrb.w	r4, [r0, #32]
    90f4:	2020      	movs	r0, #32
    90f6:	7010      	strb	r0, [r2, #0]
    90f8:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    90fc:	2c20      	cmp	r4, #32
    90fe:	bf1c      	itt	ne
    9100:	4846      	ldrne	r0, [pc, #280]	; (921c <MPSL_IRQ_RADIO_Handler+0x568>)
    9102:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    9106:	d038      	beq.n	917a <MPSL_IRQ_RADIO_Handler+0x4c6>
    9108:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    910c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9110:	f100 0108 	add.w	r1, r0, #8
    9114:	68c0      	ldr	r0, [r0, #12]
    9116:	6835      	ldr	r5, [r6, #0]
    9118:	1a28      	subs	r0, r5, r0
    911a:	0200      	lsls	r0, r0, #8
    911c:	17c2      	asrs	r2, r0, #31
    911e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9122:	1200      	asrs	r0, r0, #8
    9124:	d429      	bmi.n	917a <MPSL_IRQ_RADIO_Handler+0x4c6>
    9126:	89f0      	ldrh	r0, [r6, #14]
    9128:	b300      	cbz	r0, 916c <MPSL_IRQ_RADIO_Handler+0x4b8>
    912a:	89c8      	ldrh	r0, [r1, #14]
    912c:	b9f0      	cbnz	r0, 916c <MPSL_IRQ_RADIO_Handler+0x4b8>
    912e:	6808      	ldr	r0, [r1, #0]
    9130:	9000      	str	r0, [sp, #0]
    9132:	f002 ff29 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9136:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    913a:	bf08      	it	eq
    913c:	200d      	moveq	r0, #13
    913e:	d00b      	beq.n	9158 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9140:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9144:	3856      	subs	r0, #86	; 0x56
    9146:	bf08      	it	eq
    9148:	201c      	moveq	r0, #28
    914a:	d005      	beq.n	9158 <MPSL_IRQ_RADIO_Handler+0x4a4>
    914c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9150:	389f      	subs	r0, #159	; 0x9f
    9152:	bf14      	ite	ne
    9154:	2000      	movne	r0, #0
    9156:	2032      	moveq	r0, #50	; 0x32
    9158:	1c41      	adds	r1, r0, #1
    915a:	9800      	ldr	r0, [sp, #0]
    915c:	1a28      	subs	r0, r5, r0
    915e:	0200      	lsls	r0, r0, #8
    9160:	17c2      	asrs	r2, r0, #31
    9162:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9166:	1200      	asrs	r0, r0, #8
    9168:	4288      	cmp	r0, r1
    916a:	db06      	blt.n	917a <MPSL_IRQ_RADIO_Handler+0x4c6>
    916c:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9170:	f88a 4000 	strb.w	r4, [sl]
    9174:	7844      	ldrb	r4, [r0, #1]
    9176:	2c20      	cmp	r4, #32
    9178:	d1c6      	bne.n	9108 <MPSL_IRQ_RADIO_Handler+0x454>
    917a:	f89a 0000 	ldrb.w	r0, [sl]
    917e:	f889 0000 	strb.w	r0, [r9]
    9182:	2c20      	cmp	r4, #32
    9184:	bf1c      	itt	ne
    9186:	4825      	ldrne	r0, [pc, #148]	; (921c <MPSL_IRQ_RADIO_Handler+0x568>)
    9188:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    918c:	d040      	beq.n	9210 <MPSL_IRQ_RADIO_Handler+0x55c>
    918e:	bf00      	nop
    9190:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9194:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    9198:	6870      	ldr	r0, [r6, #4]
    919a:	68bd      	ldr	r5, [r7, #8]
    919c:	f107 0108 	add.w	r1, r7, #8
    91a0:	1a28      	subs	r0, r5, r0
    91a2:	0200      	lsls	r0, r0, #8
    91a4:	17c2      	asrs	r2, r0, #31
    91a6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91aa:	1200      	asrs	r0, r0, #8
    91ac:	d422      	bmi.n	91f4 <MPSL_IRQ_RADIO_Handler+0x540>
    91ae:	89c8      	ldrh	r0, [r1, #14]
    91b0:	b370      	cbz	r0, 9210 <MPSL_IRQ_RADIO_Handler+0x55c>
    91b2:	89f0      	ldrh	r0, [r6, #14]
    91b4:	bb60      	cbnz	r0, 9210 <MPSL_IRQ_RADIO_Handler+0x55c>
    91b6:	f8d6 b000 	ldr.w	fp, [r6]
    91ba:	f002 fee5 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91be:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91c2:	bf08      	it	eq
    91c4:	200d      	moveq	r0, #13
    91c6:	d00b      	beq.n	91e0 <MPSL_IRQ_RADIO_Handler+0x52c>
    91c8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91cc:	3856      	subs	r0, #86	; 0x56
    91ce:	bf08      	it	eq
    91d0:	201c      	moveq	r0, #28
    91d2:	d005      	beq.n	91e0 <MPSL_IRQ_RADIO_Handler+0x52c>
    91d4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91d8:	389f      	subs	r0, #159	; 0x9f
    91da:	bf14      	ite	ne
    91dc:	2000      	movne	r0, #0
    91de:	2032      	moveq	r0, #50	; 0x32
    91e0:	1c41      	adds	r1, r0, #1
    91e2:	eba5 000b 	sub.w	r0, r5, fp
    91e6:	0200      	lsls	r0, r0, #8
    91e8:	17c2      	asrs	r2, r0, #31
    91ea:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91ee:	1200      	asrs	r0, r0, #8
    91f0:	4288      	cmp	r0, r1
    91f2:	da0d      	bge.n	9210 <MPSL_IRQ_RADIO_Handler+0x55c>
    91f4:	f889 4000 	strb.w	r4, [r9]
    91f8:	7e38      	ldrb	r0, [r7, #24]
    91fa:	7c31      	ldrb	r1, [r6, #16]
    91fc:	4288      	cmp	r0, r1
    91fe:	d802      	bhi.n	9206 <MPSL_IRQ_RADIO_Handler+0x552>
    9200:	2000      	movs	r0, #0
    9202:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9206:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    920a:	7844      	ldrb	r4, [r0, #1]
    920c:	2c20      	cmp	r4, #32
    920e:	d1bf      	bne.n	9190 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9210:	2001      	movs	r0, #1
    9212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9216:	0000      	.short	0x0000
    9218:	200013a0 	.word	0x200013a0
    921c:	20001320 	.word	0x20001320
    9220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9224:	b098      	sub	sp, #96	; 0x60
    9226:	4615      	mov	r5, r2
    9228:	f002 fa58 	bl	b6dc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    922c:	4604      	mov	r4, r0
    922e:	f002 fcd3 	bl	bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9232:	4606      	mov	r6, r0
    9234:	9819      	ldr	r0, [sp, #100]	; 0x64
    9236:	2801      	cmp	r0, #1
    9238:	bf18      	it	ne
    923a:	2802      	cmpne	r0, #2
    923c:	d005      	beq.n	924a <MPSL_IRQ_RADIO_Handler+0x596>
    923e:	f640 1192 	movw	r1, #2450	; 0x992
    9242:	f04f 0070 	mov.w	r0, #112	; 0x70
    9246:	f003 f85d 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    924a:	49fa      	ldr	r1, [pc, #1000]	; (9634 <MPSL_IRQ_RADIO_Handler+0x980>)
    924c:	2001      	movs	r0, #1
    924e:	6008      	str	r0, [r1, #0]
    9250:	49f9      	ldr	r1, [pc, #996]	; (9638 <MPSL_IRQ_RADIO_Handler+0x984>)
    9252:	6889      	ldr	r1, [r1, #8]
    9254:	6008      	str	r0, [r1, #0]
    9256:	2000      	movs	r0, #0
    9258:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    925c:	900a      	str	r0, [sp, #40]	; 0x28
    925e:	1e40      	subs	r0, r0, #1
    9260:	900b      	str	r0, [sp, #44]	; 0x2c
    9262:	49f6      	ldr	r1, [pc, #984]	; (963c <MPSL_IRQ_RADIO_Handler+0x988>)
    9264:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9268:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    926c:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9270:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    9274:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9278:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    927c:	6989      	ldr	r1, [r1, #24]
    927e:	9110      	str	r1, [sp, #64]	; 0x40
    9280:	f007 fb41 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9284:	4602      	mov	r2, r0
    9286:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    928a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    928e:	4bec      	ldr	r3, [pc, #944]	; (9640 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9290:	4440      	add	r0, r8
    9292:	1c41      	adds	r1, r0, #1
    9294:	1850      	adds	r0, r2, r1
    9296:	429a      	cmp	r2, r3
    9298:	d854      	bhi.n	9344 <MPSL_IRQ_RADIO_Handler+0x690>
    929a:	4dea      	ldr	r5, [pc, #936]	; (9644 <MPSL_IRQ_RADIO_Handler+0x990>)
    929c:	42a9      	cmp	r1, r5
    929e:	dc58      	bgt.n	9352 <MPSL_IRQ_RADIO_Handler+0x69e>
    92a0:	426a      	negs	r2, r5
    92a2:	4291      	cmp	r1, r2
    92a4:	db5d      	blt.n	9362 <MPSL_IRQ_RADIO_Handler+0x6ae>
    92a6:	1c59      	adds	r1, r3, #1
    92a8:	4281      	cmp	r1, r0
    92aa:	bfdc      	itt	le
    92ac:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92b0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92b4:	dd05      	ble.n	92c2 <MPSL_IRQ_RADIO_Handler+0x60e>
    92b6:	2800      	cmp	r0, #0
    92b8:	bfbc      	itt	lt
    92ba:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    92be:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    92c2:	9014      	str	r0, [sp, #80]	; 0x50
    92c4:	48e0      	ldr	r0, [pc, #896]	; (9648 <MPSL_IRQ_RADIO_Handler+0x994>)
    92c6:	f1b8 0f00 	cmp.w	r8, #0
    92ca:	8b80      	ldrh	r0, [r0, #28]
    92cc:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    92d0:	bf14      	ite	ne
    92d2:	f04f 0a01 	movne.w	sl, #1
    92d6:	f04f 0a00 	moveq.w	sl, #0
    92da:	f002 ff9b 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    92de:	9016      	str	r0, [sp, #88]	; 0x58
    92e0:	f1ba 0f00 	cmp.w	sl, #0
    92e4:	d008      	beq.n	92f8 <MPSL_IRQ_RADIO_Handler+0x644>
    92e6:	48d8      	ldr	r0, [pc, #864]	; (9648 <MPSL_IRQ_RADIO_Handler+0x994>)
    92e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    92ea:	f1b0 3fff 	cmp.w	r0, #4294967295
    92ee:	bf02      	ittt	eq
    92f0:	9816      	ldreq	r0, [sp, #88]	; 0x58
    92f2:	2800      	cmpeq	r0, #0
    92f4:	2701      	moveq	r7, #1
    92f6:	d001      	beq.n	92fc <MPSL_IRQ_RADIO_Handler+0x648>
    92f8:	f04f 0700 	mov.w	r7, #0
    92fc:	f002 fe44 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9300:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9304:	bf08      	it	eq
    9306:	200d      	moveq	r0, #13
    9308:	d00b      	beq.n	9322 <MPSL_IRQ_RADIO_Handler+0x66e>
    930a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    930e:	3856      	subs	r0, #86	; 0x56
    9310:	bf08      	it	eq
    9312:	201c      	moveq	r0, #28
    9314:	d005      	beq.n	9322 <MPSL_IRQ_RADIO_Handler+0x66e>
    9316:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    931a:	389f      	subs	r0, #159	; 0x9f
    931c:	bf14      	ite	ne
    931e:	2000      	movne	r0, #0
    9320:	2032      	moveq	r0, #50	; 0x32
    9322:	f04f 0900 	mov.w	r9, #0
    9326:	46cb      	mov	fp, r9
    9328:	9013      	str	r0, [sp, #76]	; 0x4c
    932a:	4546      	cmp	r6, r8
    932c:	d936      	bls.n	939c <MPSL_IRQ_RADIO_Handler+0x6e8>
    932e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9330:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9640 <MPSL_IRQ_RADIO_Handler+0x98c>
    9334:	ea6f 0c06 	mvn.w	ip, r6
    9338:	4669      	mov	r1, sp
    933a:	aa17      	add	r2, sp, #92	; 0x5c
    933c:	eb03 000c 	add.w	r0, r3, ip
    9340:	454b      	cmp	r3, r9
    9342:	d904      	bls.n	934e <MPSL_IRQ_RADIO_Handler+0x69a>
    9344:	f240 519e 	movw	r1, #1438	; 0x59e
    9348:	2070      	movs	r0, #112	; 0x70
    934a:	f002 ffdb 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    934e:	45ac      	cmp	ip, r5
    9350:	dd04      	ble.n	935c <MPSL_IRQ_RADIO_Handler+0x6a8>
    9352:	f240 519f 	movw	r1, #1439	; 0x59f
    9356:	2070      	movs	r0, #112	; 0x70
    9358:	f002 ffd4 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    935c:	4bbb      	ldr	r3, [pc, #748]	; (964c <MPSL_IRQ_RADIO_Handler+0x998>)
    935e:	459c      	cmp	ip, r3
    9360:	da04      	bge.n	936c <MPSL_IRQ_RADIO_Handler+0x6b8>
    9362:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9366:	2070      	movs	r0, #112	; 0x70
    9368:	f002 ffcc 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    936c:	4bb8      	ldr	r3, [pc, #736]	; (9650 <MPSL_IRQ_RADIO_Handler+0x99c>)
    936e:	4283      	cmp	r3, r0
    9370:	bfdc      	itt	le
    9372:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9376:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    937a:	dd05      	ble.n	9388 <MPSL_IRQ_RADIO_Handler+0x6d4>
    937c:	2800      	cmp	r0, #0
    937e:	bfbc      	itt	lt
    9380:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9384:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9388:	f001 ff02 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    938c:	9800      	ldr	r0, [sp, #0]
    938e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9390:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9394:	9000      	str	r0, [sp, #0]
    9396:	1a08      	subs	r0, r1, r0
    9398:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    939c:	2f00      	cmp	r7, #0
    939e:	bf18      	it	ne
    93a0:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93a4:	d105      	bne.n	93b2 <MPSL_IRQ_RADIO_Handler+0x6fe>
    93a6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93aa:	2800      	cmp	r0, #0
    93ac:	bf18      	it	ne
    93ae:	f04f 0b02 	movne.w	fp, #2
    93b2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    93b6:	d008      	beq.n	93ca <MPSL_IRQ_RADIO_Handler+0x716>
    93b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    93ba:	1b00      	subs	r0, r0, r4
    93bc:	0200      	lsls	r0, r0, #8
    93be:	17c1      	asrs	r1, r0, #31
    93c0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    93c4:	1200      	asrs	r0, r0, #8
    93c6:	2801      	cmp	r0, #1
    93c8:	da02      	bge.n	93d0 <MPSL_IRQ_RADIO_Handler+0x71c>
    93ca:	2003      	movs	r0, #3
    93cc:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93ce:	e00d      	b.n	93ec <MPSL_IRQ_RADIO_Handler+0x738>
    93d0:	b157      	cbz	r7, 93e8 <MPSL_IRQ_RADIO_Handler+0x734>
    93d2:	489d      	ldr	r0, [pc, #628]	; (9648 <MPSL_IRQ_RADIO_Handler+0x994>)
    93d4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    93d8:	b130      	cbz	r0, 93e8 <MPSL_IRQ_RADIO_Handler+0x734>
    93da:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93de:	f110 0b00 	adds.w	fp, r0, #0
    93e2:	bf18      	it	ne
    93e4:	f04f 0b02 	movne.w	fp, #2
    93e8:	4625      	mov	r5, r4
    93ea:	2000      	movs	r0, #0
    93ec:	4483      	add	fp, r0
    93ee:	980c      	ldr	r0, [sp, #48]	; 0x30
    93f0:	eba0 0009 	sub.w	r0, r0, r9
    93f4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    93f8:	1e48      	subs	r0, r1, #1
    93fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93fe:	1b42      	subs	r2, r0, r5
    9400:	0212      	lsls	r2, r2, #8
    9402:	17d3      	asrs	r3, r2, #31
    9404:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9408:	1212      	asrs	r2, r2, #8
    940a:	455a      	cmp	r2, fp
    940c:	db04      	blt.n	9418 <MPSL_IRQ_RADIO_Handler+0x764>
    940e:	f1b9 0f00 	cmp.w	r9, #0
    9412:	bf18      	it	ne
    9414:	910c      	strne	r1, [sp, #48]	; 0x30
    9416:	e02d      	b.n	9474 <MPSL_IRQ_RADIO_Handler+0x7c0>
    9418:	f1b9 0f00 	cmp.w	r9, #0
    941c:	d005      	beq.n	942a <MPSL_IRQ_RADIO_Handler+0x776>
    941e:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9422:	b920      	cbnz	r0, 942e <MPSL_IRQ_RADIO_Handler+0x77a>
    9424:	f002 fbce 	bl	bbc4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9428:	b108      	cbz	r0, 942e <MPSL_IRQ_RADIO_Handler+0x77a>
    942a:	b9af      	cbnz	r7, 9458 <MPSL_IRQ_RADIO_Handler+0x7a4>
    942c:	e00c      	b.n	9448 <MPSL_IRQ_RADIO_Handler+0x794>
    942e:	b92f      	cbnz	r7, 943c <MPSL_IRQ_RADIO_Handler+0x788>
    9430:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9434:	2800      	cmp	r0, #0
    9436:	bf18      	it	ne
    9438:	f1ab 0b02 	subne.w	fp, fp, #2
    943c:	f04f 0900 	mov.w	r9, #0
    9440:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    9444:	464e      	mov	r6, r9
    9446:	e007      	b.n	9458 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9448:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    944c:	b120      	cbz	r0, 9458 <MPSL_IRQ_RADIO_Handler+0x7a4>
    944e:	2000      	movs	r0, #0
    9450:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9454:	f1ab 0b02 	sub.w	fp, fp, #2
    9458:	980c      	ldr	r0, [sp, #48]	; 0x30
    945a:	eba0 0109 	sub.w	r1, r0, r9
    945e:	1e48      	subs	r0, r1, #1
    9460:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9464:	1b42      	subs	r2, r0, r5
    9466:	0212      	lsls	r2, r2, #8
    9468:	17d3      	asrs	r3, r2, #31
    946a:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    946e:	1212      	asrs	r2, r2, #8
    9470:	455a      	cmp	r2, fp
    9472:	db7d      	blt.n	9570 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9474:	4a74      	ldr	r2, [pc, #464]	; (9648 <MPSL_IRQ_RADIO_Handler+0x994>)
    9476:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9478:	1a89      	subs	r1, r1, r2
    947a:	0209      	lsls	r1, r1, #8
    947c:	17cb      	asrs	r3, r1, #31
    947e:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    9482:	9b16      	ldr	r3, [sp, #88]	; 0x58
    9484:	1209      	asrs	r1, r1, #8
    9486:	b93b      	cbnz	r3, 9498 <MPSL_IRQ_RADIO_Handler+0x7e4>
    9488:	f1b2 3fff 	cmp.w	r2, #4294967295
    948c:	bf1c      	itt	ne
    948e:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9490:	4291      	cmpne	r1, r2
    9492:	bfb8      	it	lt
    9494:	2100      	movlt	r1, #0
    9496:	db00      	blt.n	949a <MPSL_IRQ_RADIO_Handler+0x7e6>
    9498:	2101      	movs	r1, #1
    949a:	ea3a 0101 	bics.w	r1, sl, r1
    949e:	d167      	bne.n	9570 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94a0:	9919      	ldr	r1, [sp, #100]	; 0x64
    94a2:	4605      	mov	r5, r0
    94a4:	f04f 0900 	mov.w	r9, #0
    94a8:	9105      	str	r1, [sp, #20]
    94aa:	f001 ffdb 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94ae:	1a28      	subs	r0, r5, r0
    94b0:	0200      	lsls	r0, r0, #8
    94b2:	17c1      	asrs	r1, r0, #31
    94b4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94b8:	ea4f 2b20 	mov.w	fp, r0, asr #8
    94bc:	f002 fd64 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94c0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94c4:	bf08      	it	eq
    94c6:	200d      	moveq	r0, #13
    94c8:	d00b      	beq.n	94e2 <MPSL_IRQ_RADIO_Handler+0x82e>
    94ca:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94ce:	3856      	subs	r0, #86	; 0x56
    94d0:	bf08      	it	eq
    94d2:	201c      	moveq	r0, #28
    94d4:	d005      	beq.n	94e2 <MPSL_IRQ_RADIO_Handler+0x82e>
    94d6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94da:	389f      	subs	r0, #159	; 0x9f
    94dc:	bf14      	ite	ne
    94de:	2000      	movne	r0, #0
    94e0:	2032      	moveq	r0, #50	; 0x32
    94e2:	300b      	adds	r0, #11
    94e4:	4558      	cmp	r0, fp
    94e6:	dd1f      	ble.n	9528 <MPSL_IRQ_RADIO_Handler+0x874>
    94e8:	9805      	ldr	r0, [sp, #20]
    94ea:	2801      	cmp	r0, #1
    94ec:	d001      	beq.n	94f2 <MPSL_IRQ_RADIO_Handler+0x83e>
    94ee:	b147      	cbz	r7, 9502 <MPSL_IRQ_RADIO_Handler+0x84e>
    94f0:	e012      	b.n	9518 <MPSL_IRQ_RADIO_Handler+0x864>
    94f2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    94f6:	d11c      	bne.n	9532 <MPSL_IRQ_RADIO_Handler+0x87e>
    94f8:	f640 1113 	movw	r1, #2323	; 0x913
    94fc:	2070      	movs	r0, #112	; 0x70
    94fe:	f002 ff01 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9502:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9506:	d007      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x864>
    9508:	1b60      	subs	r0, r4, r5
    950a:	0200      	lsls	r0, r0, #8
    950c:	17c1      	asrs	r1, r0, #31
    950e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9512:	1200      	asrs	r0, r0, #8
    9514:	2804      	cmp	r0, #4
    9516:	dd04      	ble.n	9522 <MPSL_IRQ_RADIO_Handler+0x86e>
    9518:	462c      	mov	r4, r5
    951a:	4620      	mov	r0, r4
    951c:	f001 ffc8 	bl	b4b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9520:	e007      	b.n	9532 <MPSL_IRQ_RADIO_Handler+0x87e>
    9522:	2800      	cmp	r0, #0
    9524:	dc63      	bgt.n	95ee <MPSL_IRQ_RADIO_Handler+0x93a>
    9526:	e004      	b.n	9532 <MPSL_IRQ_RADIO_Handler+0x87e>
    9528:	462c      	mov	r4, r5
    952a:	4620      	mov	r0, r4
    952c:	f001 ffc0 	bl	b4b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9530:	46d1      	mov	r9, sl
    9532:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9536:	d055      	beq.n	95e4 <MPSL_IRQ_RADIO_Handler+0x930>
    9538:	980c      	ldr	r0, [sp, #48]	; 0x30
    953a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    953c:	1b00      	subs	r0, r0, r4
    953e:	1b12      	subs	r2, r2, r4
    9540:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9544:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9548:	2801      	cmp	r0, #1
    954a:	d350      	bcc.n	95ee <MPSL_IRQ_RADIO_Handler+0x93a>
    954c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9550:	bf98      	it	ls
    9552:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9556:	d84a      	bhi.n	95ee <MPSL_IRQ_RADIO_Handler+0x93a>
    9558:	4620      	mov	r0, r4
    955a:	f007 f9d4 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    955e:	9914      	ldr	r1, [sp, #80]	; 0x50
    9560:	4a38      	ldr	r2, [pc, #224]	; (9644 <MPSL_IRQ_RADIO_Handler+0x990>)
    9562:	1a0d      	subs	r5, r1, r0
    9564:	f04f 0b00 	mov.w	fp, #0
    9568:	1aaa      	subs	r2, r5, r2
    956a:	f17b 0200 	sbcs.w	r2, fp, #0
    956e:	e000      	b.n	9572 <MPSL_IRQ_RADIO_Handler+0x8be>
    9570:	e03d      	b.n	95ee <MPSL_IRQ_RADIO_Handler+0x93a>
    9572:	d316      	bcc.n	95a2 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9574:	4a33      	ldr	r2, [pc, #204]	; (9644 <MPSL_IRQ_RADIO_Handler+0x990>)
    9576:	1a43      	subs	r3, r0, r1
    9578:	1a9a      	subs	r2, r3, r2
    957a:	f17b 0200 	sbcs.w	r2, fp, #0
    957e:	d310      	bcc.n	95a2 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9580:	4a2f      	ldr	r2, [pc, #188]	; (9640 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9582:	42aa      	cmp	r2, r5
    9584:	bf3e      	ittt	cc
    9586:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    958a:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    958e:	1845      	addcc	r5, r0, r1
    9590:	d307      	bcc.n	95a2 <MPSL_IRQ_RADIO_Handler+0x8ee>
    9592:	429a      	cmp	r2, r3
    9594:	d22f      	bcs.n	95f6 <MPSL_IRQ_RADIO_Handler+0x942>
    9596:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    959a:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    959e:	4408      	add	r0, r1
    95a0:	4245      	negs	r5, r0
    95a2:	4f29      	ldr	r7, [pc, #164]	; (9648 <MPSL_IRQ_RADIO_Handler+0x994>)
    95a4:	7fb8      	ldrb	r0, [r7, #30]
    95a6:	b358      	cbz	r0, 9600 <MPSL_IRQ_RADIO_Handler+0x94c>
    95a8:	9819      	ldr	r0, [sp, #100]	; 0x64
    95aa:	2801      	cmp	r0, #1
    95ac:	d005      	beq.n	95ba <MPSL_IRQ_RADIO_Handler+0x906>
    95ae:	2002      	movs	r0, #2
    95b0:	f002 f9ce 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95b4:	2001      	movs	r0, #1
    95b6:	f002 f9cb 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95ba:	45b0      	cmp	r8, r6
    95bc:	d22c      	bcs.n	9618 <MPSL_IRQ_RADIO_Handler+0x964>
    95be:	eba5 0106 	sub.w	r1, r5, r6
    95c2:	f04f 0002 	mov.w	r0, #2
    95c6:	f002 f90d 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95ca:	b390      	cbz	r0, 9632 <MPSL_IRQ_RADIO_Handler+0x97e>
    95cc:	f1b8 0f00 	cmp.w	r8, #0
    95d0:	bf1c      	itt	ne
    95d2:	eba5 0108 	subne.w	r1, r5, r8
    95d6:	2001      	movne	r0, #1
    95d8:	d044      	beq.n	9664 <MPSL_IRQ_RADIO_Handler+0x9b0>
    95da:	bf00      	nop
    95dc:	f002 f902 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95e0:	b338      	cbz	r0, 9632 <MPSL_IRQ_RADIO_Handler+0x97e>
    95e2:	e03f      	b.n	9664 <MPSL_IRQ_RADIO_Handler+0x9b0>
    95e4:	f640 2131 	movw	r1, #2609	; 0xa31
    95e8:	2070      	movs	r0, #112	; 0x70
    95ea:	f002 fe8b 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95ee:	b01b      	add	sp, #108	; 0x6c
    95f0:	2000      	movs	r0, #0
    95f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95f6:	f640 3105 	movw	r1, #2821	; 0xb05
    95fa:	2070      	movs	r0, #112	; 0x70
    95fc:	f002 fe82 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9600:	45b0      	cmp	r8, r6
    9602:	bf34      	ite	cc
    9604:	4630      	movcc	r0, r6
    9606:	4640      	movcs	r0, r8
    9608:	301e      	adds	r0, #30
    960a:	42a8      	cmp	r0, r5
    960c:	dbcc      	blt.n	95a8 <MPSL_IRQ_RADIO_Handler+0x8f4>
    960e:	f640 2145 	movw	r1, #2629	; 0xa45
    9612:	2070      	movs	r0, #112	; 0x70
    9614:	f002 fe76 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9618:	d91c      	bls.n	9654 <MPSL_IRQ_RADIO_Handler+0x9a0>
    961a:	eba5 0108 	sub.w	r1, r5, r8
    961e:	2001      	movs	r0, #1
    9620:	f002 f8e0 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9624:	b128      	cbz	r0, 9632 <MPSL_IRQ_RADIO_Handler+0x97e>
    9626:	2e00      	cmp	r6, #0
    9628:	bf1c      	itt	ne
    962a:	1ba9      	subne	r1, r5, r6
    962c:	2002      	movne	r0, #2
    962e:	d019      	beq.n	9664 <MPSL_IRQ_RADIO_Handler+0x9b0>
    9630:	e7d4      	b.n	95dc <MPSL_IRQ_RADIO_Handler+0x928>
    9632:	e042      	b.n	96ba <MPSL_IRQ_RADIO_Handler+0xa06>
    9634:	40000508 	.word	0x40000508
    9638:	200002ec 	.word	0x200002ec
    963c:	20000fa0 	.word	0x20000fa0
    9640:	1e847fff 	.word	0x1e847fff
    9644:	0f424000 	.word	0x0f424000
    9648:	200013a0 	.word	0x200013a0
    964c:	f0bdc000 	.word	0xf0bdc000
    9650:	1e848000 	.word	0x1e848000
    9654:	ea56 0008 	orrs.w	r0, r6, r8
    9658:	d004      	beq.n	9664 <MPSL_IRQ_RADIO_Handler+0x9b0>
    965a:	f640 1176 	movw	r1, #2422	; 0x976
    965e:	2070      	movs	r0, #112	; 0x70
    9660:	f002 fe50 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9664:	4629      	mov	r1, r5
    9666:	2000      	movs	r0, #0
    9668:	f002 f8bc 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    966c:	b328      	cbz	r0, 96ba <MPSL_IRQ_RADIO_Handler+0xa06>
    966e:	2601      	movs	r6, #1
    9670:	f1ba 0f00 	cmp.w	sl, #0
    9674:	bf04      	itt	eq
    9676:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    967a:	2800      	cmpeq	r0, #0
    967c:	d002      	beq.n	9684 <MPSL_IRQ_RADIO_Handler+0x9d0>
    967e:	f1b9 0f00 	cmp.w	r9, #0
    9682:	d024      	beq.n	96ce <MPSL_IRQ_RADIO_Handler+0xa1a>
    9684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9686:	f1b0 3fff 	cmp.w	r0, #4294967295
    968a:	d004      	beq.n	9696 <MPSL_IRQ_RADIO_Handler+0x9e2>
    968c:	f002 fc82 	bl	bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9690:	f04f 30ff 	mov.w	r0, #4294967295
    9694:	62f8      	str	r0, [r7, #44]	; 0x2c
    9696:	f1b9 0f00 	cmp.w	r9, #0
    969a:	d01c      	beq.n	96d6 <MPSL_IRQ_RADIO_Handler+0xa22>
    969c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    969e:	1a20      	subs	r0, r4, r0
    96a0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96a4:	2005      	movs	r0, #5
    96a6:	f002 f89d 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96aa:	b360      	cbz	r0, 9706 <MPSL_IRQ_RADIO_Handler+0xa52>
    96ac:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96b0:	2800      	cmp	r0, #0
    96b2:	bf08      	it	eq
    96b4:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    96b8:	e015      	b.n	96e6 <MPSL_IRQ_RADIO_Handler+0xa32>
    96ba:	2002      	movs	r0, #2
    96bc:	f002 f948 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96c0:	2001      	movs	r0, #1
    96c2:	f002 f945 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96c6:	b01b      	add	sp, #108	; 0x6c
    96c8:	2000      	movs	r0, #0
    96ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96d0:	f1b0 3fff 	cmp.w	r0, #4294967295
    96d4:	d012      	beq.n	96fc <MPSL_IRQ_RADIO_Handler+0xa48>
    96d6:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96da:	b120      	cbz	r0, 96e6 <MPSL_IRQ_RADIO_Handler+0xa32>
    96dc:	2005      	movs	r0, #5
    96de:	f002 f937 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96e2:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    96e6:	eba5 0008 	sub.w	r0, r5, r8
    96ea:	f1a0 0119 	sub.w	r1, r0, #25
    96ee:	2900      	cmp	r1, #0
    96f0:	dc0e      	bgt.n	9710 <MPSL_IRQ_RADIO_Handler+0xa5c>
    96f2:	f640 216e 	movw	r1, #2670	; 0xa6e
    96f6:	2070      	movs	r0, #112	; 0x70
    96f8:	f002 fe04 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96fc:	f002 fc66 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9700:	f001 feb0 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9704:	e7c6      	b.n	9694 <MPSL_IRQ_RADIO_Handler+0x9e0>
    9706:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    970a:	2070      	movs	r0, #112	; 0x70
    970c:	f002 fdfa 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9710:	2003      	movs	r0, #3
    9712:	f002 f867 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9716:	b1c0      	cbz	r0, 974a <MPSL_IRQ_RADIO_Handler+0xa96>
    9718:	480e      	ldr	r0, [pc, #56]	; (9754 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    971a:	6880      	ldr	r0, [r0, #8]
    971c:	f8c0 b000 	str.w	fp, [r0]
    9720:	480d      	ldr	r0, [pc, #52]	; (9758 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    9722:	f8c0 b000 	str.w	fp, [r0]
    9726:	ac0a      	add	r4, sp, #40	; 0x28
    9728:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    972c:	6038      	str	r0, [r7, #0]
    972e:	6079      	str	r1, [r7, #4]
    9730:	60ba      	str	r2, [r7, #8]
    9732:	60fb      	str	r3, [r7, #12]
    9734:	ac0e      	add	r4, sp, #56	; 0x38
    9736:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    973a:	6138      	str	r0, [r7, #16]
    973c:	6179      	str	r1, [r7, #20]
    973e:	61ba      	str	r2, [r7, #24]
    9740:	61fb      	str	r3, [r7, #28]
    9742:	b01b      	add	sp, #108	; 0x6c
    9744:	2001      	movs	r0, #1
    9746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    974a:	f640 2176 	movw	r1, #2678	; 0xa76
    974e:	2070      	movs	r0, #112	; 0x70
    9750:	f002 fdd8 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9754:	200002ec 	.word	0x200002ec
    9758:	40000508 	.word	0x40000508
    975c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9760:	4614      	mov	r4, r2
    9762:	460d      	mov	r5, r1
    9764:	f04f 0a00 	mov.w	sl, #0
    9768:	890a      	ldrh	r2, [r1, #8]
    976a:	4651      	mov	r1, sl
    976c:	f362 411f 	bfi	r1, r2, #16, #16
    9770:	7aaa      	ldrb	r2, [r5, #10]
    9772:	46d1      	mov	r9, sl
    9774:	f362 0907 	bfi	r9, r2, #0, #8
    9778:	7aea      	ldrb	r2, [r5, #11]
    977a:	4606      	mov	r6, r0
    977c:	f362 290f 	bfi	r9, r2, #8, #8
    9780:	782a      	ldrb	r2, [r5, #0]
    9782:	b083      	sub	sp, #12
    9784:	6840      	ldr	r0, [r0, #4]
    9786:	f8c4 a000 	str.w	sl, [r4]
    978a:	f362 4917 	bfi	r9, r2, #16, #8
    978e:	f8c4 a004 	str.w	sl, [r4, #4]
    9792:	f8c4 9010 	str.w	r9, [r4, #16]
    9796:	e9c4 0102 	strd	r0, r1, [r4, #8]
    979a:	4f9d      	ldr	r7, [pc, #628]	; (9a10 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    979c:	6870      	ldr	r0, [r6, #4]
    979e:	fba0 8907 	umull	r8, r9, r0, r7
    97a2:	6830      	ldr	r0, [r6, #0]
    97a4:	f007 f8af 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97a8:	eb10 0108 	adds.w	r1, r0, r8
    97ac:	eb4a 0209 	adc.w	r2, sl, r9
    97b0:	7828      	ldrb	r0, [r5, #0]
    97b2:	ea4f 0967 	mov.w	r9, r7, asr #1
    97b6:	f1c9 0b00 	rsb	fp, r9, #0
    97ba:	b170      	cbz	r0, 97da <MPSL_IRQ_RADIO_Handler+0xb26>
    97bc:	89e0      	ldrh	r0, [r4, #14]
    97be:	f894 8011 	ldrb.w	r8, [r4, #17]
    97c2:	43c0      	mvns	r0, r0
    97c4:	f8d5 a004 	ldr.w	sl, [r5, #4]
    97c8:	f104 020c 	add.w	r2, r4, #12
    97cc:	4548      	cmp	r0, r9
    97ce:	dd7c      	ble.n	98ca <MPSL_IRQ_RADIO_Handler+0xc16>
    97d0:	f240 519f 	movw	r1, #1439	; 0x59f
    97d4:	2070      	movs	r0, #112	; 0x70
    97d6:	f002 fd95 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97da:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a14 <MPSL_IRQ_RADIO_Handler+0xd60>
    97de:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    97e2:	eb11 0a0c 	adds.w	sl, r1, ip
    97e6:	f142 0c00 	adc.w	ip, r2, #0
    97ea:	ebb0 0a0a 	subs.w	sl, r0, sl
    97ee:	eb73 0c0c 	sbcs.w	ip, r3, ip
    97f2:	d272      	bcs.n	98da <MPSL_IRQ_RADIO_Handler+0xc26>
    97f4:	1a41      	subs	r1, r0, r1
    97f6:	eb73 0102 	sbcs.w	r1, r3, r2
    97fa:	d36e      	bcc.n	98da <MPSL_IRQ_RADIO_Handler+0xc26>
    97fc:	ebb0 0608 	subs.w	r6, r0, r8
    9800:	42b7      	cmp	r7, r6
    9802:	d82b      	bhi.n	985c <MPSL_IRQ_RADIO_Handler+0xba8>
    9804:	89e0      	ldrh	r0, [r4, #14]
    9806:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    980a:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    980e:	43c1      	mvns	r1, r0
    9810:	4a81      	ldr	r2, [pc, #516]	; (9a18 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9812:	eb08 0001 	add.w	r0, r8, r1
    9816:	4542      	cmp	r2, r8
    9818:	d32b      	bcc.n	9872 <MPSL_IRQ_RADIO_Handler+0xbbe>
    981a:	4549      	cmp	r1, r9
    981c:	dcd8      	bgt.n	97d0 <MPSL_IRQ_RADIO_Handler+0xb1c>
    981e:	4559      	cmp	r1, fp
    9820:	db66      	blt.n	98f0 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9822:	4287      	cmp	r7, r0
    9824:	bfdc      	itt	le
    9826:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    982a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    982e:	dd05      	ble.n	983c <MPSL_IRQ_RADIO_Handler+0xb88>
    9830:	2800      	cmp	r0, #0
    9832:	bfbc      	itt	lt
    9834:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9838:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    983c:	466a      	mov	r2, sp
    983e:	a901      	add	r1, sp, #4
    9840:	f001 fca6 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9844:	89e0      	ldrh	r0, [r4, #14]
    9846:	f89d 1000 	ldrb.w	r1, [sp]
    984a:	1a30      	subs	r0, r6, r0
    984c:	1a40      	subs	r0, r0, r1
    984e:	1e40      	subs	r0, r0, #1
    9850:	42b8      	cmp	r0, r7
    9852:	d302      	bcc.n	985a <MPSL_IRQ_RADIO_Handler+0xba6>
    9854:	68a0      	ldr	r0, [r4, #8]
    9856:	1c40      	adds	r0, r0, #1
    9858:	60a0      	str	r0, [r4, #8]
    985a:	4646      	mov	r6, r8
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	4b6e      	ldr	r3, [pc, #440]	; (9a18 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9860:	43c1      	mvns	r1, r0
    9862:	686d      	ldr	r5, [r5, #4]
    9864:	f894 8011 	ldrb.w	r8, [r4, #17]
    9868:	1870      	adds	r0, r6, r1
    986a:	f104 020c 	add.w	r2, r4, #12
    986e:	429e      	cmp	r6, r3
    9870:	d904      	bls.n	987c <MPSL_IRQ_RADIO_Handler+0xbc8>
    9872:	f240 519e 	movw	r1, #1438	; 0x59e
    9876:	2070      	movs	r0, #112	; 0x70
    9878:	f002 fd44 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    987c:	4549      	cmp	r1, r9
    987e:	dca7      	bgt.n	97d0 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9880:	4559      	cmp	r1, fp
    9882:	db35      	blt.n	98f0 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9884:	4287      	cmp	r7, r0
    9886:	bfdc      	itt	le
    9888:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    988c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9890:	dd05      	ble.n	989e <MPSL_IRQ_RADIO_Handler+0xbea>
    9892:	2800      	cmp	r0, #0
    9894:	bfbc      	itt	lt
    9896:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    989a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    989e:	4621      	mov	r1, r4
    98a0:	f001 fc76 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98a4:	6820      	ldr	r0, [r4, #0]
    98a6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98aa:	1970      	adds	r0, r6, r5
    98ac:	1c40      	adds	r0, r0, #1
    98ae:	6021      	str	r1, [r4, #0]
    98b0:	f1b8 0f00 	cmp.w	r8, #0
    98b4:	bf08      	it	eq
    98b6:	307a      	addeq	r0, #122	; 0x7a
    98b8:	d004      	beq.n	98c4 <MPSL_IRQ_RADIO_Handler+0xc10>
    98ba:	f1b8 0f01 	cmp.w	r8, #1
    98be:	bf08      	it	eq
    98c0:	3048      	addeq	r0, #72	; 0x48
    98c2:	d13a      	bne.n	993a <MPSL_IRQ_RADIO_Handler+0xc86>
    98c4:	f001 fc48 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    98c8:	e001      	b.n	98ce <MPSL_IRQ_RADIO_Handler+0xc1a>
    98ca:	e00e      	b.n	98ea <MPSL_IRQ_RADIO_Handler+0xc36>
    98cc:	e005      	b.n	98da <MPSL_IRQ_RADIO_Handler+0xc26>
    98ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98d2:	6060      	str	r0, [r4, #4]
    98d4:	b007      	add	sp, #28
    98d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98da:	6830      	ldr	r0, [r6, #0]
    98dc:	1e40      	subs	r0, r0, #1
    98de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98e2:	6020      	str	r0, [r4, #0]
    98e4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    98e8:	e7f3      	b.n	98d2 <MPSL_IRQ_RADIO_Handler+0xc1e>
    98ea:	4601      	mov	r1, r0
    98ec:	4558      	cmp	r0, fp
    98ee:	da04      	bge.n	98fa <MPSL_IRQ_RADIO_Handler+0xc46>
    98f0:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    98f4:	2070      	movs	r0, #112	; 0x70
    98f6:	f002 fd05 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98fa:	4287      	cmp	r7, r0
    98fc:	bfdc      	itt	le
    98fe:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9902:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9906:	dd05      	ble.n	9914 <MPSL_IRQ_RADIO_Handler+0xc60>
    9908:	2800      	cmp	r0, #0
    990a:	bfbc      	itt	lt
    990c:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9910:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9914:	4621      	mov	r1, r4
    9916:	f001 fc3b 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    991a:	6820      	ldr	r0, [r4, #0]
    991c:	f1b8 0f00 	cmp.w	r8, #0
    9920:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9924:	f10a 0001 	add.w	r0, sl, #1
    9928:	6021      	str	r1, [r4, #0]
    992a:	bf08      	it	eq
    992c:	307a      	addeq	r0, #122	; 0x7a
    992e:	d009      	beq.n	9944 <MPSL_IRQ_RADIO_Handler+0xc90>
    9930:	f1b8 0f01 	cmp.w	r8, #1
    9934:	bf08      	it	eq
    9936:	3048      	addeq	r0, #72	; 0x48
    9938:	d004      	beq.n	9944 <MPSL_IRQ_RADIO_Handler+0xc90>
    993a:	f240 6139 	movw	r1, #1593	; 0x639
    993e:	2070      	movs	r0, #112	; 0x70
    9940:	f002 fce0 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9944:	f001 fc08 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9948:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    994c:	6061      	str	r1, [r4, #4]
    994e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9952:	aa01      	add	r2, sp, #4
    9954:	4669      	mov	r1, sp
    9956:	4648      	mov	r0, r9
    9958:	6837      	ldr	r7, [r6, #0]
    995a:	f001 fc19 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    995e:	f002 f93b 	bl	bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9962:	f001 fbf9 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9966:	4680      	mov	r8, r0
    9968:	482c      	ldr	r0, [pc, #176]	; (9a1c <MPSL_IRQ_RADIO_Handler+0xd68>)
    996a:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    996e:	2920      	cmp	r1, #32
    9970:	d02a      	beq.n	99c8 <MPSL_IRQ_RADIO_Handler+0xd14>
    9972:	68c0      	ldr	r0, [r0, #12]
    9974:	1d40      	adds	r0, r0, #5
    9976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    997a:	bf00      	nop
    997c:	e9d4 2100 	ldrd	r2, r1, [r4]
    9980:	1a89      	subs	r1, r1, r2
    9982:	4401      	add	r1, r0
    9984:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9988:	e9c4 0100 	strd	r0, r1, [r4]
    998c:	6831      	ldr	r1, [r6, #0]
    998e:	4281      	cmp	r1, r0
    9990:	d902      	bls.n	9998 <MPSL_IRQ_RADIO_Handler+0xce4>
    9992:	68a0      	ldr	r0, [r4, #8]
    9994:	1c40      	adds	r0, r0, #1
    9996:	60a0      	str	r0, [r4, #8]
    9998:	6832      	ldr	r2, [r6, #0]
    999a:	6928      	ldr	r0, [r5, #16]
    999c:	4621      	mov	r1, r4
    999e:	9b06      	ldr	r3, [sp, #24]
    99a0:	f7ff f9e4 	bl	8d6c <MPSL_IRQ_RADIO_Handler+0xb8>
    99a4:	2800      	cmp	r0, #0
    99a6:	bf1c      	itt	ne
    99a8:	b007      	addne	sp, #28
    99aa:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99ae:	e9d4 1000 	ldrd	r1, r0, [r4]
    99b2:	1a40      	subs	r0, r0, r1
    99b4:	6831      	ldr	r1, [r6, #0]
    99b6:	6021      	str	r1, [r4, #0]
    99b8:	6831      	ldr	r1, [r6, #0]
    99ba:	4408      	add	r0, r1
    99bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99c0:	6060      	str	r0, [r4, #4]
    99c2:	b007      	add	sp, #28
    99c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c8:	3709      	adds	r7, #9
    99ca:	f1b9 0f00 	cmp.w	r9, #0
    99ce:	d016      	beq.n	99fe <MPSL_IRQ_RADIO_Handler+0xd4a>
    99d0:	f002 fc20 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99d4:	b998      	cbnz	r0, 99fe <MPSL_IRQ_RADIO_Handler+0xd4a>
    99d6:	f002 fad7 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99da:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99de:	bf08      	it	eq
    99e0:	200d      	moveq	r0, #13
    99e2:	d00b      	beq.n	99fc <MPSL_IRQ_RADIO_Handler+0xd48>
    99e4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    99e8:	3856      	subs	r0, #86	; 0x56
    99ea:	bf08      	it	eq
    99ec:	201c      	moveq	r0, #28
    99ee:	d005      	beq.n	99fc <MPSL_IRQ_RADIO_Handler+0xd48>
    99f0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    99f4:	389f      	subs	r0, #159	; 0x9f
    99f6:	bf14      	ite	ne
    99f8:	2000      	movne	r0, #0
    99fa:	2032      	moveq	r0, #50	; 0x32
    99fc:	4407      	add	r7, r0
    99fe:	9800      	ldr	r0, [sp, #0]
    9a00:	4580      	cmp	r8, r0
    9a02:	bf84      	itt	hi
    9a04:	eba8 0000 	subhi.w	r0, r8, r0
    9a08:	4407      	addhi	r7, r0
    9a0a:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a0e:	e7b5      	b.n	997c <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a10:	1e848000 	.word	0x1e848000
    9a14:	0f424000 	.word	0x0f424000
    9a18:	1e847fff 	.word	0x1e847fff
    9a1c:	200013a0 	.word	0x200013a0
    9a20:	b570      	push	{r4, r5, r6, lr}
    9a22:	4d1e      	ldr	r5, [pc, #120]	; (9a9c <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a24:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a28:	2820      	cmp	r0, #32
    9a2a:	bf18      	it	ne
    9a2c:	bd70      	popne	{r4, r5, r6, pc}
    9a2e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a32:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a36:	4428      	add	r0, r5
    9a38:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a3c:	2c20      	cmp	r4, #32
    9a3e:	d027      	beq.n	9a90 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a40:	4b17      	ldr	r3, [pc, #92]	; (9aa0 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a42:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a46:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9a4a:	7849      	ldrb	r1, [r1, #1]
    9a4c:	f880 1020 	strb.w	r1, [r0, #32]
    9a50:	20ff      	movs	r0, #255	; 0xff
    9a52:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9a56:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9a5a:	4621      	mov	r1, r4
    9a5c:	2002      	movs	r0, #2
    9a5e:	f000 f891 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    9a62:	2000      	movs	r0, #0
    9a64:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9a68:	77a8      	strb	r0, [r5, #30]
    9a6a:	490e      	ldr	r1, [pc, #56]	; (9aa4 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9a6c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9a70:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9a74:	7e00      	ldrb	r0, [r0, #24]
    9a76:	2800      	cmp	r0, #0
    9a78:	bf08      	it	eq
    9a7a:	f002 fdad 	bleq	c5d8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a7e:	2000      	movs	r0, #0
    9a80:	4909      	ldr	r1, [pc, #36]	; (9aa8 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9a82:	6849      	ldr	r1, [r1, #4]
    9a84:	2900      	cmp	r1, #0
    9a86:	bf08      	it	eq
    9a88:	bd70      	popeq	{r4, r5, r6, pc}
    9a8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9a8e:	4708      	bx	r1
    9a90:	f240 3132 	movw	r1, #818	; 0x332
    9a94:	2070      	movs	r0, #112	; 0x70
    9a96:	f002 fc35 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a9a:	0000      	.short	0x0000
    9a9c:	200013a0 	.word	0x200013a0
    9aa0:	20001320 	.word	0x20001320
    9aa4:	20000fa0 	.word	0x20000fa0
    9aa8:	200002ec 	.word	0x200002ec
    9aac:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ab0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b74 <MPSL_IRQ_RADIO_Handler+0xec0>
    9ab4:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9ab8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9abc:	4440      	add	r0, r8
    9abe:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ac2:	2c20      	cmp	r4, #32
    9ac4:	bf08      	it	eq
    9ac6:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9aca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9b78 <MPSL_IRQ_RADIO_Handler+0xec4>
    9ace:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9b7c <MPSL_IRQ_RADIO_Handler+0xec8>
    9ad2:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9ad6:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9ada:	2607      	movs	r6, #7
    9adc:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9ae0:	2801      	cmp	r0, #1
    9ae2:	d00e      	beq.n	9b02 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9ae4:	2804      	cmp	r0, #4
    9ae6:	bf08      	it	eq
    9ae8:	2602      	moveq	r6, #2
    9aea:	d00a      	beq.n	9b02 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9aec:	2805      	cmp	r0, #5
    9aee:	bf0c      	ite	eq
    9af0:	2603      	moveq	r6, #3
    9af2:	2806      	cmpne	r0, #6
    9af4:	d005      	beq.n	9b02 <MPSL_IRQ_RADIO_Handler+0xe4e>
    9af6:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9afa:	f04f 0070 	mov.w	r0, #112	; 0x70
    9afe:	f002 fc01 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b02:	f1bb 0f00 	cmp.w	fp, #0
    9b06:	bf18      	it	ne
    9b08:	f3af 8000 	nopne.w
    9b0c:	f3ef 8010 	mrs	r0, PRIMASK
    9b10:	b672      	cpsid	i
    9b12:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b16:	784a      	ldrb	r2, [r1, #1]
    9b18:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b1c:	4441      	add	r1, r8
    9b1e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b22:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b26:	42a2      	cmp	r2, r4
    9b28:	bf04      	itt	eq
    9b2a:	2220      	moveq	r2, #32
    9b2c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b30:	b1c0      	cbz	r0, 9b64 <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b32:	462a      	mov	r2, r5
    9b34:	4621      	mov	r1, r4
    9b36:	2001      	movs	r0, #1
    9b38:	f000 f824 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    9b3c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b40:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b44:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9b48:	6840      	ldr	r0, [r0, #4]
    9b4a:	4631      	mov	r1, r6
    9b4c:	4790      	blx	r2
    9b4e:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b52:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b56:	4440      	add	r0, r8
    9b58:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b5c:	2c20      	cmp	r4, #32
    9b5e:	d1ba      	bne.n	9ad6 <MPSL_IRQ_RADIO_Handler+0xe22>
    9b60:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b64:	4806      	ldr	r0, [pc, #24]	; (9b80 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9b66:	2800      	cmp	r0, #0
    9b68:	bf18      	it	ne
    9b6a:	f3af 8000 	nopne.w
    9b6e:	b662      	cpsie	i
    9b70:	e7df      	b.n	9b32 <MPSL_IRQ_RADIO_Handler+0xe7e>
    9b72:	0000      	.short	0x0000
    9b74:	200013a0 	.word	0x200013a0
    9b78:	00000000 	.word	0x00000000
    9b7c:	20001320 	.word	0x20001320
    9b80:	00000000 	.word	0x00000000
    9b84:	f8df c058 	ldr.w	ip, [pc, #88]	; 9be0 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9b88:	b510      	push	{r4, lr}
    9b8a:	2300      	movs	r3, #0
    9b8c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9b90:	2807      	cmp	r0, #7
    9b92:	d21f      	bcs.n	9bd4 <MPSL_IRQ_RADIO_Handler+0xf20>
    9b94:	e8df f000 	tbb	[pc, r0]
    9b98:	05050505 	.word	0x05050505
    9b9c:	00040404 	.word	0x00040404
    9ba0:	2301      	movs	r3, #1
    9ba2:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	bf08      	it	eq
    9baa:	bd10      	popeq	{r4, pc}
    9bac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bb0:	480c      	ldr	r0, [pc, #48]	; (9be4 <MPSL_IRQ_RADIO_Handler+0xf30>)
    9bb2:	4402      	add	r2, r0
    9bb4:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9bb8:	2820      	cmp	r0, #32
    9bba:	bf0e      	itee	eq
    9bbc:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9bc0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9bc4:	7041      	strbne	r1, [r0, #1]
    9bc6:	2020      	movs	r0, #32
    9bc8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9bcc:	7058      	strb	r0, [r3, #1]
    9bce:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9bd2:	bd10      	pop	{r4, pc}
    9bd4:	f240 216e 	movw	r1, #622	; 0x26e
    9bd8:	2070      	movs	r0, #112	; 0x70
    9bda:	f002 fb93 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bde:	0000      	.short	0x0000
    9be0:	20001320 	.word	0x20001320
    9be4:	200013a0 	.word	0x200013a0
    9be8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9bec:	460f      	mov	r7, r1
    9bee:	4680      	mov	r8, r0
    9bf0:	f8df a160 	ldr.w	sl, [pc, #352]	; 9d54 <MPSL_IRQ_RADIO_Handler+0x10a0>
    9bf4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9bf8:	4450      	add	r0, sl
    9bfa:	f1b8 0f01 	cmp.w	r8, #1
    9bfe:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c02:	4625      	mov	r5, r4
    9c04:	bf18      	it	ne
    9c06:	f1b8 0f02 	cmpne.w	r8, #2
    9c0a:	d005      	beq.n	9c18 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c0c:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c10:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c14:	f002 fb76 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c18:	f04f 0b00 	mov.w	fp, #0
    9c1c:	2d20      	cmp	r5, #32
    9c1e:	d042      	beq.n	9ca6 <MPSL_IRQ_RADIO_Handler+0xff2>
    9c20:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c24:	2600      	movs	r6, #0
    9c26:	2800      	cmp	r0, #0
    9c28:	bf08      	it	eq
    9c2a:	2602      	moveq	r6, #2
    9c2c:	f001 fc1a 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c30:	f8df c124 	ldr.w	ip, [pc, #292]	; 9d58 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c34:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c38:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c3c:	688a      	ldr	r2, [r1, #8]
    9c3e:	68c9      	ldr	r1, [r1, #12]
    9c40:	1a12      	subs	r2, r2, r0
    9c42:	1a09      	subs	r1, r1, r0
    9c44:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9c48:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c4c:	4296      	cmp	r6, r2
    9c4e:	bf99      	ittee	ls
    9c50:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9c54:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c58:	4a40      	ldrhi	r2, [pc, #256]	; (9d5c <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9c5a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9c5e:	d920      	bls.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xfee>
    9c60:	4622      	mov	r2, r4
    9c62:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9c66:	784c      	ldrb	r4, [r1, #1]
    9c68:	2c20      	cmp	r4, #32
    9c6a:	d012      	beq.n	9c92 <MPSL_IRQ_RADIO_Handler+0xfde>
    9c6c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c70:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c74:	688b      	ldr	r3, [r1, #8]
    9c76:	68c9      	ldr	r1, [r1, #12]
    9c78:	1a1b      	subs	r3, r3, r0
    9c7a:	1a09      	subs	r1, r1, r0
    9c7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c80:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c84:	429e      	cmp	r6, r3
    9c86:	bf9c      	itt	ls
    9c88:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9c8c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c90:	d8e6      	bhi.n	9c60 <MPSL_IRQ_RADIO_Handler+0xfac>
    9c92:	2a20      	cmp	r2, #32
    9c94:	d005      	beq.n	9ca2 <MPSL_IRQ_RADIO_Handler+0xfee>
    9c96:	463b      	mov	r3, r7
    9c98:	2120      	movs	r1, #32
    9c9a:	2004      	movs	r0, #4
    9c9c:	f7ff f82a 	bl	8cf4 <MPSL_IRQ_RADIO_Handler+0x40>
    9ca0:	4604      	mov	r4, r0
    9ca2:	42ac      	cmp	r4, r5
    9ca4:	d116      	bne.n	9cd4 <MPSL_IRQ_RADIO_Handler+0x1020>
    9ca6:	482e      	ldr	r0, [pc, #184]	; (9d60 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9ca8:	2800      	cmp	r0, #0
    9caa:	bf18      	it	ne
    9cac:	f3af 8000 	nopne.w
    9cb0:	f001 fbd8 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9cb4:	4603      	mov	r3, r0
    9cb6:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9cba:	2820      	cmp	r0, #32
    9cbc:	d00d      	beq.n	9cda <MPSL_IRQ_RADIO_Handler+0x1026>
    9cbe:	f8da 0008 	ldr.w	r0, [sl, #8]
    9cc2:	1c99      	adds	r1, r3, #2
    9cc4:	1a08      	subs	r0, r1, r0
    9cc6:	0200      	lsls	r0, r0, #8
    9cc8:	17c1      	asrs	r1, r0, #31
    9cca:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9cce:	1200      	asrs	r0, r0, #8
    9cd0:	2800      	cmp	r0, #0
    9cd2:	dd02      	ble.n	9cda <MPSL_IRQ_RADIO_Handler+0x1026>
    9cd4:	2000      	movs	r0, #0
    9cd6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cda:	2d20      	cmp	r5, #32
    9cdc:	d014      	beq.n	9d08 <MPSL_IRQ_RADIO_Handler+0x1054>
    9cde:	462a      	mov	r2, r5
    9ce0:	4641      	mov	r1, r8
    9ce2:	4618      	mov	r0, r3
    9ce4:	f7ff fa9c 	bl	9220 <MPSL_IRQ_RADIO_Handler+0x56c>
    9ce8:	2800      	cmp	r0, #0
    9cea:	bf1e      	ittt	ne
    9cec:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9cf0:	2002      	movne	r0, #2
    9cf2:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf6:	463b      	mov	r3, r7
    9cf8:	462a      	mov	r2, r5
    9cfa:	2120      	movs	r1, #32
    9cfc:	2004      	movs	r0, #4
    9cfe:	f7fe fff9 	bl	8cf4 <MPSL_IRQ_RADIO_Handler+0x40>
    9d02:	2000      	movs	r0, #0
    9d04:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d08:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d0c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d10:	d005      	beq.n	9d1e <MPSL_IRQ_RADIO_Handler+0x106a>
    9d12:	f002 f93f 	bl	bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d16:	f04f 30ff 	mov.w	r0, #4294967295
    9d1a:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d1e:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d22:	b120      	cbz	r0, 9d2e <MPSL_IRQ_RADIO_Handler+0x107a>
    9d24:	2005      	movs	r0, #5
    9d26:	f001 fe13 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d2a:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d2e:	2004      	movs	r0, #4
    9d30:	f001 fe0e 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d34:	f001 fe7c 	bl	ba30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d38:	2020      	movs	r0, #32
    9d3a:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d3e:	4809      	ldr	r0, [pc, #36]	; (9d64 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d40:	6880      	ldr	r0, [r0, #8]
    9d42:	f8c0 b000 	str.w	fp, [r0]
    9d46:	4808      	ldr	r0, [pc, #32]	; (9d68 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9d48:	f8c0 b000 	str.w	fp, [r0]
    9d4c:	2001      	movs	r0, #1
    9d4e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d52:	0000      	.short	0x0000
    9d54:	200013a0 	.word	0x200013a0
    9d58:	20000fa0 	.word	0x20000fa0
    9d5c:	20001320 	.word	0x20001320
    9d60:	00000000 	.word	0x00000000
    9d64:	200002ec 	.word	0x200002ec
    9d68:	40000508 	.word	0x40000508

00009d6c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d6c:	4906      	ldr	r1, [pc, #24]	; (9d88 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d6e:	b510      	push	{r4, lr}
    9d70:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9d74:	2a20      	cmp	r2, #32
    9d76:	bf1c      	itt	ne
    9d78:	7788      	strbne	r0, [r1, #30]
    9d7a:	bd10      	popne	{r4, pc}
    9d7c:	f240 319a 	movw	r1, #922	; 0x39a
    9d80:	2070      	movs	r0, #112	; 0x70
    9d82:	f002 fabf 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d86:	0000      	.short	0x0000
    9d88:	200013a0 	.word	0x200013a0

00009d8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d90:	4e69      	ldr	r6, [pc, #420]	; (9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9d92:	4607      	mov	r7, r0
    9d94:	b08d      	sub	sp, #52	; 0x34
    9d96:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9d9a:	4688      	mov	r8, r1
    9d9c:	2820      	cmp	r0, #32
    9d9e:	d055      	beq.n	9e4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9da0:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9da4:	f106 0408 	add.w	r4, r6, #8
    9da8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9dac:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9db0:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9db4:	2020      	movs	r0, #32
    9db6:	f88d 0020 	strb.w	r0, [sp, #32]
    9dba:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9dbe:	aa0a      	add	r2, sp, #40	; 0x28
    9dc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9dc4:	4430      	add	r0, r6
    9dc6:	a909      	add	r1, sp, #36	; 0x24
    9dc8:	f890 5020 	ldrb.w	r5, [r0, #32]
    9dcc:	68f0      	ldr	r0, [r6, #12]
    9dce:	9002      	str	r0, [sp, #8]
    9dd0:	6830      	ldr	r0, [r6, #0]
    9dd2:	4438      	add	r0, r7
    9dd4:	f001 f9dc 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9dd8:	f8da 000c 	ldr.w	r0, [sl, #12]
    9ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
    9dde:	2f65      	cmp	r7, #101	; 0x65
    9de0:	4408      	add	r0, r1
    9de2:	d338      	bcc.n	9e56 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9de4:	4a55      	ldr	r2, [pc, #340]	; (9f3c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9de6:	2100      	movs	r1, #0
    9de8:	1bd2      	subs	r2, r2, r7
    9dea:	eb71 0201 	sbcs.w	r2, r1, r1
    9dee:	d332      	bcc.n	9e56 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9df0:	6822      	ldr	r2, [r4, #0]
    9df2:	1a82      	subs	r2, r0, r2
    9df4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9df8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9dfc:	d82b      	bhi.n	9e56 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9dfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e02:	6060      	str	r0, [r4, #4]
    9e04:	4630      	mov	r0, r6
    9e06:	f884 8010 	strb.w	r8, [r4, #16]
    9e0a:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e0e:	f10d 0a20 	add.w	sl, sp, #32
    9e12:	2d20      	cmp	r5, #32
    9e14:	bf1c      	itt	ne
    9e16:	494a      	ldrne	r1, [pc, #296]	; (9f40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e18:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e1c:	d050      	beq.n	9ec0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e1e:	bf00      	nop
    9e20:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e24:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e28:	6861      	ldr	r1, [r4, #4]
    9e2a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e2e:	f108 0008 	add.w	r0, r8, #8
    9e32:	1a71      	subs	r1, r6, r1
    9e34:	0209      	lsls	r1, r1, #8
    9e36:	17ca      	asrs	r2, r1, #31
    9e38:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e3c:	1209      	asrs	r1, r1, #8
    9e3e:	d42d      	bmi.n	9e9c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e40:	89c0      	ldrh	r0, [r0, #14]
    9e42:	2800      	cmp	r0, #0
    9e44:	d03c      	beq.n	9ec0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e46:	89e0      	ldrh	r0, [r4, #14]
    9e48:	b148      	cbz	r0, 9e5e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9e4a:	e039      	b.n	9ec0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e4c:	f640 3173 	movw	r1, #2931	; 0xb73
    9e50:	2070      	movs	r0, #112	; 0x70
    9e52:	f002 fa57 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e56:	b00d      	add	sp, #52	; 0x34
    9e58:	2001      	movs	r0, #1
    9e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e5e:	6820      	ldr	r0, [r4, #0]
    9e60:	900c      	str	r0, [sp, #48]	; 0x30
    9e62:	f002 f891 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e66:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e6a:	bf08      	it	eq
    9e6c:	200d      	moveq	r0, #13
    9e6e:	d00b      	beq.n	9e88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e70:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e74:	3856      	subs	r0, #86	; 0x56
    9e76:	bf08      	it	eq
    9e78:	201c      	moveq	r0, #28
    9e7a:	d005      	beq.n	9e88 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e7c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e80:	389f      	subs	r0, #159	; 0x9f
    9e82:	bf14      	ite	ne
    9e84:	2000      	movne	r0, #0
    9e86:	2032      	moveq	r0, #50	; 0x32
    9e88:	1c41      	adds	r1, r0, #1
    9e8a:	980c      	ldr	r0, [sp, #48]	; 0x30
    9e8c:	1a30      	subs	r0, r6, r0
    9e8e:	0200      	lsls	r0, r0, #8
    9e90:	17c2      	asrs	r2, r0, #31
    9e92:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9e96:	1200      	asrs	r0, r0, #8
    9e98:	4288      	cmp	r0, r1
    9e9a:	da11      	bge.n	9ec0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e9c:	f88a 5000 	strb.w	r5, [sl]
    9ea0:	f898 1018 	ldrb.w	r1, [r8, #24]
    9ea4:	7c20      	ldrb	r0, [r4, #16]
    9ea6:	4281      	cmp	r1, r0
    9ea8:	d805      	bhi.n	9eb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9eaa:	9802      	ldr	r0, [sp, #8]
    9eac:	6060      	str	r0, [r4, #4]
    9eae:	b00d      	add	sp, #52	; 0x34
    9eb0:	2002      	movs	r0, #2
    9eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eb6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9eba:	7845      	ldrb	r5, [r0, #1]
    9ebc:	2d20      	cmp	r5, #32
    9ebe:	d1af      	bne.n	9e20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9ec0:	2005      	movs	r0, #5
    9ec2:	f001 fd45 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ec6:	4c1c      	ldr	r4, [pc, #112]	; (9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9ec8:	f04f 30ff 	mov.w	r0, #4294967295
    9ecc:	6060      	str	r0, [r4, #4]
    9ece:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9ed2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9ed6:	2120      	movs	r1, #32
    9ed8:	2a20      	cmp	r2, #32
    9eda:	d003      	beq.n	9ee4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9edc:	2005      	movs	r0, #5
    9ede:	f7fe ff09 	bl	8cf4 <MPSL_IRQ_RADIO_Handler+0x40>
    9ee2:	e004      	b.n	9eee <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9ee4:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9ee8:	4420      	add	r0, r4
    9eea:	f890 0020 	ldrb.w	r0, [r0, #32]
    9eee:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9ef2:	4913      	ldr	r1, [pc, #76]	; (9f40 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9ef4:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9ef8:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9efc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f00:	7048      	strb	r0, [r1, #1]
    9f02:	6820      	ldr	r0, [r4, #0]
    9f04:	4438      	add	r0, r7
    9f06:	6020      	str	r0, [r4, #0]
    9f08:	20ff      	movs	r0, #255	; 0xff
    9f0a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f0e:	7e60      	ldrb	r0, [r4, #25]
    9f10:	2801      	cmp	r0, #1
    9f12:	d105      	bne.n	9f20 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f14:	68e0      	ldr	r0, [r4, #12]
    9f16:	1e40      	subs	r0, r0, #1
    9f18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f1c:	f001 fb7c 	bl	b618 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f20:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f24:	2820      	cmp	r0, #32
    9f26:	d003      	beq.n	9f30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f28:	4806      	ldr	r0, [pc, #24]	; (9f44 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f2a:	7840      	ldrb	r0, [r0, #1]
    9f2c:	f002 fabe 	bl	c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f30:	b00d      	add	sp, #52	; 0x34
    9f32:	2000      	movs	r0, #0
    9f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f38:	200013a0 	.word	0x200013a0
    9f3c:	0f424000 	.word	0x0f424000
    9f40:	20001320 	.word	0x20001320
    9f44:	200002ec 	.word	0x200002ec

00009f48 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9f48:	4806      	ldr	r0, [pc, #24]	; (9f64 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9f4a:	b510      	push	{r4, lr}
    9f4c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9f50:	2920      	cmp	r1, #32
    9f52:	bf1c      	itt	ne
    9f54:	7e00      	ldrbne	r0, [r0, #24]
    9f56:	bd10      	popne	{r4, pc}
    9f58:	f640 316d 	movw	r1, #2925	; 0xb6d
    9f5c:	2070      	movs	r0, #112	; 0x70
    9f5e:	f002 f9d1 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f62:	0000      	.short	0x0000
    9f64:	200013a0 	.word	0x200013a0

00009f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    9f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9f6a:	4d6f      	ldr	r5, [pc, #444]	; (a128 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    9f6c:	2601      	movs	r6, #1
    9f6e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    9f72:	4a6e      	ldr	r2, [pc, #440]	; (a12c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    9f74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9f76:	2808      	cmp	r0, #8
    9f78:	d272      	bcs.n	a060 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    9f7a:	e8df f000 	tbb	[pc, r0]
    9f7e:	7704      	.short	0x7704
    9f80:	44cfb19f 	.word	0x44cfb19f
    9f84:	bbb6      	.short	0xbbb6
    9f86:	f1b1 3fff 	cmp.w	r1, #4294967295
    9f8a:	d104      	bne.n	9f96 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    9f8c:	f002 f81e 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9f90:	f001 fa68 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9f94:	62e0      	str	r0, [r4, #44]	; 0x2c
    9f96:	8ae0      	ldrh	r0, [r4, #22]
    9f98:	b110      	cbz	r0, 9fa0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    9f9a:	f002 f93b 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9f9e:	b180      	cbz	r0, 9fc2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    9fa0:	f7ff fd3e 	bl	9a20 <MPSL_IRQ_RADIO_Handler+0xd6c>
    9fa4:	20ff      	movs	r0, #255	; 0xff
    9fa6:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9faa:	6861      	ldr	r1, [r4, #4]
    9fac:	f1b1 3fff 	cmp.w	r1, #4294967295
    9fb0:	d003      	beq.n	9fba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    9fb2:	2005      	movs	r0, #5
    9fb4:	f001 fc16 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9fb8:	b140      	cbz	r0, 9fcc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    9fba:	7e60      	ldrb	r0, [r4, #25]
    9fbc:	2801      	cmp	r0, #1
    9fbe:	d110      	bne.n	9fe2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    9fc0:	e009      	b.n	9fd6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    9fc2:	f640 0169 	movw	r1, #2153	; 0x869
    9fc6:	2070      	movs	r0, #112	; 0x70
    9fc8:	f002 f99c 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fcc:	f640 016e 	movw	r1, #2158	; 0x86e
    9fd0:	2070      	movs	r0, #112	; 0x70
    9fd2:	f002 f997 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fd6:	68e0      	ldr	r0, [r4, #12]
    9fd8:	1e40      	subs	r0, r0, #1
    9fda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9fde:	f001 fb1b 	bl	b618 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9fe2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    9fe6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    9fea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9fee:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    9ff2:	6840      	ldr	r0, [r0, #4]
    9ff4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9ff8:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    9ffc:	b001      	add	sp, #4
    9ffe:	2101      	movs	r1, #1
    a000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a004:	4710      	bx	r2
    a006:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a00a:	b158      	cbz	r0, a024 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a00c:	f1b1 3fff 	cmp.w	r1, #4294967295
    a010:	d104      	bne.n	a01c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a012:	f001 ffdb 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a016:	f001 fa25 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a01a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a01c:	2000      	movs	r0, #0
    a01e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a024:	f7ff fcfc 	bl	9a20 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a028:	f04f 30ff 	mov.w	r0, #4294967295
    a02c:	6060      	str	r0, [r4, #4]
    a02e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a032:	f88d 0000 	strb.w	r0, [sp]
    a036:	f89d 0000 	ldrb.w	r0, [sp]
    a03a:	b190      	cbz	r0, a062 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a03c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a040:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a044:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a048:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a04c:	6840      	ldr	r0, [r0, #4]
    a04e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a052:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a056:	b001      	add	sp, #4
    a058:	2106      	movs	r1, #6
    a05a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a05e:	4710      	bx	r2
    a060:	e05c      	b.n	a11c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a062:	f640 0185 	movw	r1, #2181	; 0x885
    a066:	2070      	movs	r0, #112	; 0x70
    a068:	f002 f94c 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a06c:	f7ff fcd8 	bl	9a20 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a070:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a074:	f002 f8ce 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a078:	b120      	cbz	r0, a084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a07a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a07c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a080:	d005      	beq.n	a08e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a082:	e009      	b.n	a098 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a084:	f640 0193 	movw	r1, #2195	; 0x893
    a088:	2070      	movs	r0, #112	; 0x70
    a08a:	f002 f93b 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a08e:	f001 ff9d 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a092:	f001 f9e7 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a096:	62e0      	str	r0, [r4, #44]	; 0x2c
    a098:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a09c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a0a0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a0a4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a0a8:	6840      	ldr	r0, [r0, #4]
    a0aa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a0ae:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a0b2:	b001      	add	sp, #4
    a0b4:	2100      	movs	r1, #0
    a0b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0ba:	4710      	bx	r2
    a0bc:	f001 fd6e 	bl	bb9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a0c0:	8ae0      	ldrh	r0, [r4, #22]
    a0c2:	b110      	cbz	r0, a0ca <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a0c4:	f002 f8a6 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a0c8:	b128      	cbz	r0, a0d6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a0ca:	f001 fd7b 	bl	bbc4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a0ce:	2800      	cmp	r0, #0
    a0d0:	bf18      	it	ne
    a0d2:	7766      	strbne	r6, [r4, #29]
    a0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0d6:	f640 019d 	movw	r1, #2205	; 0x89d
    a0da:	2070      	movs	r0, #112	; 0x70
    a0dc:	f002 f912 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0e0:	4813      	ldr	r0, [pc, #76]	; (a130 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a0e2:	6006      	str	r6, [r0, #0]
    a0e4:	6890      	ldr	r0, [r2, #8]
    a0e6:	6006      	str	r6, [r0, #0]
    a0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0ea:	7810      	ldrb	r0, [r2, #0]
    a0ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a0f0:	f002 b9dc 	b.w	c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a0f4:	f7ff fc94 	bl	9a20 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a0f8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a0fc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a100:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a104:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a108:	6840      	ldr	r0, [r0, #4]
    a10a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a10e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a112:	b001      	add	sp, #4
    a114:	2105      	movs	r1, #5
    a116:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a11a:	4710      	bx	r2
    a11c:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a120:	2070      	movs	r0, #112	; 0x70
    a122:	f002 f8ef 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a126:	0000      	.short	0x0000
    a128:	20000fa0 	.word	0x20000fa0
    a12c:	200002ec 	.word	0x200002ec
    a130:	40000508 	.word	0x40000508

0000a134 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a134:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a138:	4682      	mov	sl, r0
    a13a:	48ef      	ldr	r0, [pc, #956]	; (a4f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a13c:	b095      	sub	sp, #84	; 0x54
    a13e:	6800      	ldr	r0, [r0, #0]
    a140:	4dee      	ldr	r5, [pc, #952]	; (a4fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a142:	05c0      	lsls	r0, r0, #23
    a144:	0dc0      	lsrs	r0, r0, #23
    a146:	d00e      	beq.n	a166 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a148:	3810      	subs	r0, #16
    a14a:	b240      	sxtb	r0, r0
    a14c:	2800      	cmp	r0, #0
    a14e:	bfb8      	it	lt
    a150:	f000 000f 	andlt.w	r0, r0, #15
    a154:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a158:	bfac      	ite	ge
    a15a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a15e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a162:	0940      	lsrs	r0, r0, #5
    a164:	d00d      	beq.n	a182 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a166:	9816      	ldr	r0, [sp, #88]	; 0x58
    a168:	f04f 0b00 	mov.w	fp, #0
    a16c:	7800      	ldrb	r0, [r0, #0]
    a16e:	2800      	cmp	r0, #0
    a170:	bf18      	it	ne
    a172:	2801      	cmpne	r0, #1
    a174:	d018      	beq.n	a1a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a176:	f240 713b 	movw	r1, #1851	; 0x73b
    a17a:	f04f 0070 	mov.w	r0, #112	; 0x70
    a17e:	f002 f8c1 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a182:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a186:	f04f 0b01 	mov.w	fp, #1
    a18a:	2820      	cmp	r0, #32
    a18c:	d007      	beq.n	a19e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a18e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a190:	7800      	ldrb	r0, [r0, #0]
    a192:	b148      	cbz	r0, a1a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a194:	f240 7137 	movw	r1, #1847	; 0x737
    a198:	2070      	movs	r0, #112	; 0x70
    a19a:	f002 f8b3 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a19e:	f240 7134 	movw	r1, #1844	; 0x734
    a1a2:	2070      	movs	r0, #112	; 0x70
    a1a4:	f002 f8ae 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1a8:	4cd5      	ldr	r4, [pc, #852]	; (a500 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a1aa:	b124      	cbz	r4, a1b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a1ac:	2100      	movs	r1, #0
    a1ae:	f240 703e 	movw	r0, #1854	; 0x73e
    a1b2:	f3af 8000 	nop.w
    a1b6:	2000      	movs	r0, #0
    a1b8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a1bc:	49d1      	ldr	r1, [pc, #836]	; (a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a1be:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a1c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a1c6:	f04f 0901 	mov.w	r9, #1
    a1ca:	9000      	str	r0, [sp, #0]
    a1cc:	b124      	cbz	r4, a1d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a1ce:	2100      	movs	r1, #0
    a1d0:	f240 7049 	movw	r0, #1865	; 0x749
    a1d4:	f3af 8000 	nop.w
    a1d8:	f1b9 0f00 	cmp.w	r9, #0
    a1dc:	d00a      	beq.n	a1f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a1de:	bf00      	nop
    a1e0:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a1e4:	f04f 0800 	mov.w	r8, #0
    a1e8:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a1ec:	f1bb 0f00 	cmp.w	fp, #0
    a1f0:	d007      	beq.n	a202 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a1f2:	e038      	b.n	a266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a1f4:	48c4      	ldr	r0, [pc, #784]	; (a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a1f6:	2800      	cmp	r0, #0
    a1f8:	bf18      	it	ne
    a1fa:	f3af 8000 	nopne.w
    a1fe:	b662      	cpsie	i
    a200:	e7ee      	b.n	a1e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a202:	4637      	mov	r7, r6
    a204:	2001      	movs	r0, #1
    a206:	ea20 0607 	bic.w	r6, r0, r7
    a20a:	48c0      	ldr	r0, [pc, #768]	; (a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a20c:	2240      	movs	r2, #64	; 0x40
    a20e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a212:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a216:	f006 fcf7 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a21a:	b124      	cbz	r4, a226 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a21c:	2100      	movs	r1, #0
    a21e:	f240 505e 	movw	r0, #1374	; 0x55e
    a222:	f3af 8000 	nop.w
    a226:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a22a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a22e:	4429      	add	r1, r5
    a230:	4428      	add	r0, r5
    a232:	8c0a      	ldrh	r2, [r1, #32]
    a234:	8402      	strh	r2, [r0, #32]
    a236:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a23a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a23e:	b124      	cbz	r4, a24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a240:	2100      	movs	r1, #0
    a242:	f240 5062 	movw	r0, #1378	; 0x562
    a246:	f3af 8000 	nop.w
    a24a:	b124      	cbz	r4, a256 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a24c:	2100      	movs	r1, #0
    a24e:	f240 7053 	movw	r0, #1875	; 0x753
    a252:	f3af 8000 	nop.w
    a256:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a25a:	f88d 0008 	strb.w	r0, [sp, #8]
    a25e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a262:	2800      	cmp	r0, #0
    a264:	d1b2      	bne.n	a1cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a266:	b124      	cbz	r4, a272 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a268:	2100      	movs	r1, #0
    a26a:	f240 705d 	movw	r0, #1885	; 0x75d
    a26e:	f3af 8000 	nop.w
    a272:	a802      	add	r0, sp, #8
    a274:	f001 f8fc 	bl	b470 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a27c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a280:	4633      	mov	r3, r6
    a282:	aa09      	add	r2, sp, #36	; 0x24
    a284:	a80e      	add	r0, sp, #56	; 0x38
    a286:	9916      	ldr	r1, [sp, #88]	; 0x58
    a288:	f7ff fa68 	bl	975c <MPSL_IRQ_RADIO_Handler+0xaa8>
    a28c:	b124      	cbz	r4, a298 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a28e:	2100      	movs	r1, #0
    a290:	f240 7064 	movw	r0, #1892	; 0x764
    a294:	f3af 8000 	nop.w
    a298:	4a9c      	ldr	r2, [pc, #624]	; (a50c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a29a:	990e      	ldr	r1, [sp, #56]	; 0x38
    a29c:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a2a0:	a809      	add	r0, sp, #36	; 0x24
    a2a2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a2a6:	2a01      	cmp	r2, #1
    a2a8:	bf18      	it	ne
    a2aa:	2a02      	cmpne	r2, #2
    a2ac:	d138      	bne.n	a320 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a2b2:	eba2 0201 	sub.w	r2, r2, r1
    a2b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a2ba:	eba3 0101 	sub.w	r1, r3, r1
    a2be:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a2c2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a2c6:	2a02      	cmp	r2, #2
    a2c8:	d364      	bcc.n	a394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a2ca:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a2ce:	bf98      	it	ls
    a2d0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a2d4:	d85e      	bhi.n	a394 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a2d6:	f04f 0801 	mov.w	r8, #1
    a2da:	ab14      	add	r3, sp, #80	; 0x50
    a2dc:	aa13      	add	r2, sp, #76	; 0x4c
    a2de:	4631      	mov	r1, r6
    a2e0:	f7fe fefc 	bl	90dc <MPSL_IRQ_RADIO_Handler+0x428>
    a2e4:	2800      	cmp	r0, #0
    a2e6:	d05d      	beq.n	a3a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a2e8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a2ec:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a2f0:	4633      	mov	r3, r6
    a2f2:	428a      	cmp	r2, r1
    a2f4:	d05a      	beq.n	a3ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a2f6:	2005      	movs	r0, #5
    a2f8:	f7fe fcfc 	bl	8cf4 <MPSL_IRQ_RADIO_Handler+0x40>
    a2fc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a300:	7048      	strb	r0, [r1, #1]
    a302:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a306:	2820      	cmp	r0, #32
    a308:	bf1c      	itt	ne
    a30a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a30e:	f880 a001 	strbne.w	sl, [r0, #1]
    a312:	d057      	beq.n	a3c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a314:	4632      	mov	r2, r6
    a316:	4651      	mov	r1, sl
    a318:	f05f 0003 	movs.w	r0, #3
    a31c:	f7ff fc32 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    a320:	b124      	cbz	r4, a32c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a322:	2100      	movs	r1, #0
    a324:	f240 7069 	movw	r0, #1897	; 0x769
    a328:	f3af 8000 	nop.w
    a32c:	4878      	ldr	r0, [pc, #480]	; (a510 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a32e:	2800      	cmp	r0, #0
    a330:	bf18      	it	ne
    a332:	f3af 8000 	nopne.w
    a336:	f3ef 8910 	mrs	r9, PRIMASK
    a33a:	b672      	cpsid	i
    a33c:	b124      	cbz	r4, a348 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a33e:	2100      	movs	r1, #0
    a340:	f240 706f 	movw	r0, #1903	; 0x76f
    a344:	f3af 8000 	nop.w
    a348:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a34c:	f88d 0008 	strb.w	r0, [sp, #8]
    a350:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a354:	2800      	cmp	r0, #0
    a356:	f47f af39 	bne.w	a1cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a35a:	b124      	cbz	r4, a366 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a35c:	2100      	movs	r1, #0
    a35e:	f240 7077 	movw	r0, #1911	; 0x777
    a362:	f3af 8000 	nop.w
    a366:	af09      	add	r7, sp, #36	; 0x24
    a368:	9800      	ldr	r0, [sp, #0]
    a36a:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a36e:	f100 0708 	add.w	r7, r0, #8
    a372:	f1b8 0f00 	cmp.w	r8, #0
    a376:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a37a:	990d      	ldr	r1, [sp, #52]	; 0x34
    a37c:	6181      	str	r1, [r0, #24]
    a37e:	d051      	beq.n	a424 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a380:	b124      	cbz	r4, a38c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a382:	2100      	movs	r1, #0
    a384:	f240 7084 	movw	r0, #1924	; 0x784
    a388:	f3af 8000 	nop.w
    a38c:	f1bb 0f00 	cmp.w	fp, #0
    a390:	d139      	bne.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a392:	e01f      	b.n	a3d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a394:	4632      	mov	r2, r6
    a396:	4651      	mov	r1, sl
    a398:	2004      	movs	r0, #4
    a39a:	f7ff fbf3 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    a39e:	f04f 0801 	mov.w	r8, #1
    a3a2:	e7bd      	b.n	a320 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a3a4:	4632      	mov	r2, r6
    a3a6:	4651      	mov	r1, sl
    a3a8:	2004      	movs	r0, #4
    a3aa:	e7b7      	b.n	a31c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a3ac:	2920      	cmp	r1, #32
    a3ae:	bf19      	ittee	ne
    a3b0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a3b4:	7840      	ldrbne	r0, [r0, #1]
    a3b6:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a3ba:	4428      	addeq	r0, r5
    a3bc:	bf08      	it	eq
    a3be:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a3c2:	e79b      	b.n	a2fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a3c4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a3c8:	4429      	add	r1, r5
    a3ca:	f881 a020 	strb.w	sl, [r1, #32]
    a3ce:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3d2:	e79f      	b.n	a314 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a3d4:	9811      	ldr	r0, [sp, #68]	; 0x44
    a3d6:	f010 0fff 	tst.w	r0, #255	; 0xff
    a3da:	d014      	beq.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a3dc:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a3e0:	2820      	cmp	r0, #32
    a3e2:	d110      	bne.n	a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a3e4:	b124      	cbz	r4, a3f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a3e6:	2100      	movs	r1, #0
    a3e8:	f240 7089 	movw	r0, #1929	; 0x789
    a3ec:	f3af 8000 	nop.w
    a3f0:	4631      	mov	r1, r6
    a3f2:	2002      	movs	r0, #2
    a3f4:	f7ff fbf8 	bl	9be8 <MPSL_IRQ_RADIO_Handler+0xf34>
    a3f8:	9010      	str	r0, [sp, #64]	; 0x40
    a3fa:	b920      	cbnz	r0, a406 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a3fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3fe:	7800      	ldrb	r0, [r0, #0]
    a400:	b1e8      	cbz	r0, a43e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a402:	2801      	cmp	r0, #1
    a404:	d02a      	beq.n	a45c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a406:	b124      	cbz	r4, a412 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a408:	2100      	movs	r1, #0
    a40a:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a40e:	f3af 8000 	nop.w
    a412:	20ff      	movs	r0, #255	; 0xff
    a414:	f1bb 0f00 	cmp.w	fp, #0
    a418:	bf18      	it	ne
    a41a:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a41e:	d026      	beq.n	a46e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a420:	f04f 0801 	mov.w	r8, #1
    a424:	b124      	cbz	r4, a430 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a426:	2100      	movs	r1, #0
    a428:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a42c:	f3af 8000 	nop.w
    a430:	9810      	ldr	r0, [sp, #64]	; 0x40
    a432:	4e38      	ldr	r6, [pc, #224]	; (a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a434:	2802      	cmp	r0, #2
    a436:	d023      	beq.n	a480 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a438:	2801      	cmp	r0, #1
    a43a:	d029      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a43c:	e02d      	b.n	a49a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a43e:	b124      	cbz	r4, a44a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a440:	2100      	movs	r1, #0
    a442:	f240 7091 	movw	r0, #1937	; 0x791
    a446:	f3af 8000 	nop.w
    a44a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a44e:	4651      	mov	r1, sl
    a450:	2004      	movs	r0, #4
    a452:	f7ff fb97 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    a456:	f04f 0801 	mov.w	r8, #1
    a45a:	e7e3      	b.n	a424 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a45c:	2c00      	cmp	r4, #0
    a45e:	f43f aeb5 	beq.w	a1cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a462:	2100      	movs	r1, #0
    a464:	f240 709c 	movw	r0, #1948	; 0x79c
    a468:	f3af 8000 	nop.w
    a46c:	e6ae      	b.n	a1cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a46e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a472:	2101      	movs	r1, #1
    a474:	4391      	bics	r1, r2
    a476:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a47a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a47e:	e7cf      	b.n	a420 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a480:	68a8      	ldr	r0, [r5, #8]
    a482:	990e      	ldr	r1, [sp, #56]	; 0x38
    a484:	1a40      	subs	r0, r0, r1
    a486:	f006 fa3e 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a48a:	6871      	ldr	r1, [r6, #4]
    a48c:	b921      	cbnz	r1, a498 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a48e:	e004      	b.n	a49a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a490:	6871      	ldr	r1, [r6, #4]
    a492:	f04f 30ff 	mov.w	r0, #4294967295
    a496:	b101      	cbz	r1, a49a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a498:	4788      	blx	r1
    a49a:	f1b9 0f00 	cmp.w	r9, #0
    a49e:	d024      	beq.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a4a0:	b124      	cbz	r4, a4ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a4a2:	2100      	movs	r1, #0
    a4a4:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a4a8:	f3af 8000 	nop.w
    a4ac:	f1b8 0f00 	cmp.w	r8, #0
    a4b0:	d011      	beq.n	a4d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a4b2:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a4b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a4ba:	4428      	add	r0, r5
    a4bc:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a4c0:	2820      	cmp	r0, #32
    a4c2:	d008      	beq.n	a4d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a4c4:	b124      	cbz	r4, a4d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a4c6:	2100      	movs	r1, #0
    a4c8:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a4cc:	f3af 8000 	nop.w
    a4d0:	7870      	ldrb	r0, [r6, #1]
    a4d2:	f001 ffeb 	bl	c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a4d6:	b124      	cbz	r4, a4e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a4d8:	2100      	movs	r1, #0
    a4da:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a4de:	f3af 8000 	nop.w
    a4e2:	b017      	add	sp, #92	; 0x5c
    a4e4:	4640      	mov	r0, r8
    a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4ea:	4807      	ldr	r0, [pc, #28]	; (a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a4ec:	2800      	cmp	r0, #0
    a4ee:	bf18      	it	ne
    a4f0:	f3af 8000 	nopne.w
    a4f4:	b662      	cpsie	i
    a4f6:	e7d3      	b.n	a4a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a4f8:	e000ed04 	.word	0xe000ed04
    a4fc:	200013a0 	.word	0x200013a0
    a500:	00000000 	.word	0x00000000
    a504:	20000fa0 	.word	0x20000fa0
    a508:	00000000 	.word	0x00000000
    a50c:	20001320 	.word	0x20001320
    a510:	00000000 	.word	0x00000000
    a514:	200002ec 	.word	0x200002ec

0000a518 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a51c:	4606      	mov	r6, r0
    a51e:	7800      	ldrb	r0, [r0, #0]
    a520:	b08d      	sub	sp, #52	; 0x34
    a522:	b118      	cbz	r0, a52c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a524:	b00d      	add	sp, #52	; 0x34
    a526:	2000      	movs	r0, #0
    a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a52c:	488c      	ldr	r0, [pc, #560]	; (a760 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a52e:	6800      	ldr	r0, [r0, #0]
    a530:	05c0      	lsls	r0, r0, #23
    a532:	0dc0      	lsrs	r0, r0, #23
    a534:	d00e      	beq.n	a554 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a536:	3810      	subs	r0, #16
    a538:	b240      	sxtb	r0, r0
    a53a:	2800      	cmp	r0, #0
    a53c:	bfb8      	it	lt
    a53e:	f000 000f 	andlt.w	r0, r0, #15
    a542:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a546:	bfac      	ite	ge
    a548:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a54c:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a550:	0940      	lsrs	r0, r0, #5
    a552:	d0e7      	beq.n	a524 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a554:	4d83      	ldr	r5, [pc, #524]	; (a764 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a556:	4c84      	ldr	r4, [pc, #528]	; (a768 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a558:	f04f 0b01 	mov.w	fp, #1
    a55c:	2700      	movs	r7, #0
    a55e:	b125      	cbz	r5, a56a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a560:	2100      	movs	r1, #0
    a562:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a566:	f3af 8000 	nop.w
    a56a:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a56e:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a572:	f04f 0900 	mov.w	r9, #0
    a576:	b125      	cbz	r5, a582 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a578:	2100      	movs	r1, #0
    a57a:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a57e:	f3af 8000 	nop.w
    a582:	487a      	ldr	r0, [pc, #488]	; (a76c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a584:	ea2b 080a 	bic.w	r8, fp, sl
    a588:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a58c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a590:	2240      	movs	r2, #64	; 0x40
    a592:	f006 fb39 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a596:	b125      	cbz	r5, a5a2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a598:	2100      	movs	r1, #0
    a59a:	f240 505e 	movw	r0, #1374	; 0x55e
    a59e:	f3af 8000 	nop.w
    a5a2:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a5a6:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a5aa:	4421      	add	r1, r4
    a5ac:	4420      	add	r0, r4
    a5ae:	8c0a      	ldrh	r2, [r1, #32]
    a5b0:	8402      	strh	r2, [r0, #32]
    a5b2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a5b6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a5ba:	b125      	cbz	r5, a5c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a5bc:	2100      	movs	r1, #0
    a5be:	f240 5062 	movw	r0, #1378	; 0x562
    a5c2:	f3af 8000 	nop.w
    a5c6:	b125      	cbz	r5, a5d2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a5c8:	2100      	movs	r1, #0
    a5ca:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a5ce:	f3af 8000 	nop.w
    a5d2:	a808      	add	r0, sp, #32
    a5d4:	f000 ff4c 	bl	b470 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a5d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a5dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a5e0:	4643      	mov	r3, r8
    a5e2:	466a      	mov	r2, sp
    a5e4:	4631      	mov	r1, r6
    a5e6:	a80a      	add	r0, sp, #40	; 0x28
    a5e8:	f7ff f8b8 	bl	975c <MPSL_IRQ_RADIO_Handler+0xaa8>
    a5ec:	b125      	cbz	r5, a5f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a5ee:	2100      	movs	r1, #0
    a5f0:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a5f4:	f3af 8000 	nop.w
    a5f8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a5fc:	2820      	cmp	r0, #32
    a5fe:	d01a      	beq.n	a636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a600:	68e0      	ldr	r0, [r4, #12]
    a602:	9900      	ldr	r1, [sp, #0]
    a604:	1a09      	subs	r1, r1, r0
    a606:	0209      	lsls	r1, r1, #8
    a608:	17ca      	asrs	r2, r1, #31
    a60a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a60e:	1209      	asrs	r1, r1, #8
    a610:	d511      	bpl.n	a636 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a612:	9900      	ldr	r1, [sp, #0]
    a614:	4281      	cmp	r1, r0
    a616:	d902      	bls.n	a61e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a618:	9902      	ldr	r1, [sp, #8]
    a61a:	1c49      	adds	r1, r1, #1
    a61c:	9102      	str	r1, [sp, #8]
    a61e:	e9dd 2100 	ldrd	r2, r1, [sp]
    a622:	1a89      	subs	r1, r1, r2
    a624:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a628:	4408      	add	r0, r1
    a62a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a62e:	e9cd 2000 	strd	r2, r0, [sp]
    a632:	f04f 0901 	mov.w	r9, #1
    a636:	b125      	cbz	r5, a642 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a638:	2100      	movs	r1, #0
    a63a:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a63e:	f3af 8000 	nop.w
    a642:	9900      	ldr	r1, [sp, #0]
    a644:	980a      	ldr	r0, [sp, #40]	; 0x28
    a646:	9a01      	ldr	r2, [sp, #4]
    a648:	1a09      	subs	r1, r1, r0
    a64a:	1a10      	subs	r0, r2, r0
    a64c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a650:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a654:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a658:	bf98      	it	ls
    a65a:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a65e:	d809      	bhi.n	a674 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a660:	4643      	mov	r3, r8
    a662:	4669      	mov	r1, sp
    a664:	4842      	ldr	r0, [pc, #264]	; (a770 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a668:	f7fe fb80 	bl	8d6c <MPSL_IRQ_RADIO_Handler+0xb8>
    a66c:	ea59 0000 	orrs.w	r0, r9, r0
    a670:	d129      	bne.n	a6c6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a672:	e042      	b.n	a6fa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a674:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a676:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a67a:	9002      	str	r0, [sp, #8]
    a67c:	aa09      	add	r2, sp, #36	; 0x24
    a67e:	a907      	add	r1, sp, #28
    a680:	4650      	mov	r0, sl
    a682:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a686:	f000 fd83 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a68a:	f001 faa5 	bl	bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a68e:	f000 fd63 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a692:	4681      	mov	r9, r0
    a694:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a698:	2820      	cmp	r0, #32
    a69a:	d03b      	beq.n	a714 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a69c:	68e0      	ldr	r0, [r4, #12]
    a69e:	1d40      	adds	r0, r0, #5
    a6a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a6a4:	9900      	ldr	r1, [sp, #0]
    a6a6:	4281      	cmp	r1, r0
    a6a8:	d902      	bls.n	a6b0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a6aa:	9902      	ldr	r1, [sp, #8]
    a6ac:	1c49      	adds	r1, r1, #1
    a6ae:	9102      	str	r1, [sp, #8]
    a6b0:	e9dd 2100 	ldrd	r2, r1, [sp]
    a6b4:	1a89      	subs	r1, r1, r2
    a6b6:	9000      	str	r0, [sp, #0]
    a6b8:	4408      	add	r0, r1
    a6ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a6be:	9001      	str	r0, [sp, #4]
    a6c0:	201f      	movs	r0, #31
    a6c2:	f88d 000c 	strb.w	r0, [sp, #12]
    a6c6:	9800      	ldr	r0, [sp, #0]
    a6c8:	f006 f91d 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a6cc:	1c41      	adds	r1, r0, #1
    a6ce:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a6d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a6d6:	4410      	add	r0, r2
    a6d8:	4408      	add	r0, r1
    a6da:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a6de:	b125      	cbz	r5, a6ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a6e0:	2100      	movs	r1, #0
    a6e2:	f240 601a 	movw	r0, #1562	; 0x61a
    a6e6:	f3af 8000 	nop.w
    a6ea:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a6ee:	4a21      	ldr	r2, [pc, #132]	; (a774 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a6f0:	9b02      	ldr	r3, [sp, #8]
    a6f2:	fbe3 1002 	umlal	r1, r0, r3, r2
    a6f6:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a6fa:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a6fe:	f88d 0014 	strb.w	r0, [sp, #20]
    a702:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a706:	2800      	cmp	r0, #0
    a708:	f47f af29 	bne.w	a55e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a70c:	b00d      	add	sp, #52	; 0x34
    a70e:	2001      	movs	r0, #1
    a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a714:	f108 0809 	add.w	r8, r8, #9
    a718:	f1ba 0f00 	cmp.w	sl, #0
    a71c:	d016      	beq.n	a74c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a71e:	f001 fd79 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a722:	b998      	cbnz	r0, a74c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a724:	f001 fc30 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a728:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a72c:	bf08      	it	eq
    a72e:	200d      	moveq	r0, #13
    a730:	d00b      	beq.n	a74a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a732:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a736:	3856      	subs	r0, #86	; 0x56
    a738:	bf08      	it	eq
    a73a:	201c      	moveq	r0, #28
    a73c:	d005      	beq.n	a74a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a73e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a742:	389f      	subs	r0, #159	; 0x9f
    a744:	bf14      	ite	ne
    a746:	4638      	movne	r0, r7
    a748:	2032      	moveq	r0, #50	; 0x32
    a74a:	4480      	add	r8, r0
    a74c:	9807      	ldr	r0, [sp, #28]
    a74e:	4581      	cmp	r9, r0
    a750:	bf84      	itt	hi
    a752:	eba9 0000 	subhi.w	r0, r9, r0
    a756:	4480      	addhi	r8, r0
    a758:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a75c:	e7a2      	b.n	a6a4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a75e:	0000      	.short	0x0000
    a760:	e000ed04 	.word	0xe000ed04
    a764:	00000000 	.word	0x00000000
    a768:	200013a0 	.word	0x200013a0
    a76c:	20001320 	.word	0x20001320
    a770:	0f424000 	.word	0x0f424000
    a774:	1e848000 	.word	0x1e848000

0000a778 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a778:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a77c:	4d92      	ldr	r5, [pc, #584]	; (a9c8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a77e:	b08c      	sub	sp, #48	; 0x30
    a780:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a784:	2000      	movs	r0, #0
    a786:	9008      	str	r0, [sp, #32]
    a788:	9006      	str	r0, [sp, #24]
    a78a:	2001      	movs	r0, #1
    a78c:	4c8f      	ldr	r4, [pc, #572]	; (a9cc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a78e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a792:	f04f 0800 	mov.w	r8, #0
    a796:	4607      	mov	r7, r0
    a798:	9007      	str	r0, [sp, #28]
    a79a:	b124      	cbz	r4, a7a6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a79c:	2100      	movs	r1, #0
    a79e:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a7a2:	f3af 8000 	nop.w
    a7a6:	9807      	ldr	r0, [sp, #28]
    a7a8:	2800      	cmp	r0, #0
    a7aa:	d03c      	beq.n	a826 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a7ac:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a7b0:	b124      	cbz	r4, a7bc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a7b2:	2100      	movs	r1, #0
    a7b4:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a7b8:	f3af 8000 	nop.w
    a7bc:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a7c0:	2240      	movs	r2, #64	; 0x40
    a7c2:	ea27 060a 	bic.w	r6, r7, sl
    a7c6:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a7ca:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a7ce:	4683      	mov	fp, r0
    a7d0:	f006 fa1a 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a7d4:	b124      	cbz	r4, a7e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a7d6:	2100      	movs	r1, #0
    a7d8:	f240 505e 	movw	r0, #1374	; 0x55e
    a7dc:	f3af 8000 	nop.w
    a7e0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a7e4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a7e8:	4428      	add	r0, r5
    a7ea:	4429      	add	r1, r5
    a7ec:	9000      	str	r0, [sp, #0]
    a7ee:	8c0a      	ldrh	r2, [r1, #32]
    a7f0:	8402      	strh	r2, [r0, #32]
    a7f2:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a7f6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a7fa:	b124      	cbz	r4, a806 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a7fc:	2100      	movs	r1, #0
    a7fe:	f240 5062 	movw	r0, #1378	; 0x562
    a802:	f3af 8000 	nop.w
    a806:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a80a:	f88d 0008 	strb.w	r0, [sp, #8]
    a80e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a812:	b178      	cbz	r0, a834 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a814:	2c00      	cmp	r4, #0
    a816:	bf1c      	itt	ne
    a818:	2100      	movne	r1, #0
    a81a:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a81e:	d0bc      	beq.n	a79a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a820:	f3af 8000 	nop.w
    a824:	e7b9      	b.n	a79a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a826:	486a      	ldr	r0, [pc, #424]	; (a9d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a828:	2800      	cmp	r0, #0
    a82a:	bf18      	it	ne
    a82c:	f3af 8000 	nopne.w
    a830:	b662      	cpsie	i
    a832:	e7bb      	b.n	a7ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a834:	b124      	cbz	r4, a840 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a836:	2100      	movs	r1, #0
    a838:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a83c:	f3af 8000 	nop.w
    a840:	980c      	ldr	r0, [sp, #48]	; 0x30
    a842:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a846:	2803      	cmp	r0, #3
    a848:	d17e      	bne.n	a948 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a84a:	9a00      	ldr	r2, [sp, #0]
    a84c:	990c      	ldr	r1, [sp, #48]	; 0x30
    a84e:	f892 0020 	ldrb.w	r0, [r2, #32]
    a852:	4288      	cmp	r0, r1
    a854:	bf14      	ite	ne
    a856:	f04f 0a00 	movne.w	sl, #0
    a85a:	f04f 0a01 	moveq.w	sl, #1
    a85e:	f102 0c20 	add.w	ip, r2, #32
    a862:	4683      	mov	fp, r0
    a864:	2220      	movs	r2, #32
    a866:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a86a:	e003      	b.n	a874 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a86c:	4602      	mov	r2, r0
    a86e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a872:	7840      	ldrb	r0, [r0, #1]
    a874:	4288      	cmp	r0, r1
    a876:	d002      	beq.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a878:	2820      	cmp	r0, #32
    a87a:	d00a      	beq.n	a892 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a87c:	e7f6      	b.n	a86c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a87e:	2820      	cmp	r0, #32
    a880:	d007      	beq.n	a892 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a882:	4583      	cmp	fp, r0
    a884:	d107      	bne.n	a896 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a886:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a88a:	7840      	ldrb	r0, [r0, #1]
    a88c:	f88c 0000 	strb.w	r0, [ip]
    a890:	e007      	b.n	a8a2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a892:	4640      	mov	r0, r8
    a894:	e00c      	b.n	a8b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a896:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a89a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a89e:	7840      	ldrb	r0, [r0, #1]
    a8a0:	7048      	strb	r0, [r1, #1]
    a8a2:	b124      	cbz	r4, a8ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a8a4:	2100      	movs	r1, #0
    a8a6:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a8aa:	f3af 8000 	nop.w
    a8ae:	4638      	mov	r0, r7
    a8b0:	46c3      	mov	fp, r8
    a8b2:	ea10 0f0a 	tst.w	r0, sl
    a8b6:	bf18      	it	ne
    a8b8:	46bb      	movne	fp, r7
    a8ba:	2800      	cmp	r0, #0
    a8bc:	d04e      	beq.n	a95c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a8be:	b124      	cbz	r4, a8ca <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a8c0:	2100      	movs	r1, #0
    a8c2:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a8c6:	f3af 8000 	nop.w
    a8ca:	4632      	mov	r2, r6
    a8cc:	2001      	movs	r0, #1
    a8ce:	990c      	ldr	r1, [sp, #48]	; 0x30
    a8d0:	f7ff f958 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    a8d4:	b124      	cbz	r4, a8e0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a8d6:	2100      	movs	r1, #0
    a8d8:	f640 0001 	movw	r0, #2049	; 0x801
    a8dc:	f3af 8000 	nop.w
    a8e0:	483c      	ldr	r0, [pc, #240]	; (a9d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a8e2:	2800      	cmp	r0, #0
    a8e4:	bf18      	it	ne
    a8e6:	f3af 8000 	nopne.w
    a8ea:	f3ef 8010 	mrs	r0, PRIMASK
    a8ee:	b672      	cpsid	i
    a8f0:	9007      	str	r0, [sp, #28]
    a8f2:	b124      	cbz	r4, a8fe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a8f4:	2100      	movs	r1, #0
    a8f6:	f640 0006 	movw	r0, #2054	; 0x806
    a8fa:	f3af 8000 	nop.w
    a8fe:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a902:	f88d 0008 	strb.w	r0, [sp, #8]
    a906:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a90a:	b138      	cbz	r0, a91c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a90c:	2c00      	cmp	r4, #0
    a90e:	bf1c      	itt	ne
    a910:	2100      	movne	r1, #0
    a912:	f640 000a 	movwne	r0, #2058	; 0x80a
    a916:	f43f af40 	beq.w	a79a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a91a:	e781      	b.n	a820 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    a91c:	f1bb 0f00 	cmp.w	fp, #0
    a920:	d009      	beq.n	a936 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a922:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a926:	2820      	cmp	r0, #32
    a928:	d105      	bne.n	a936 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    a92a:	4631      	mov	r1, r6
    a92c:	2002      	movs	r0, #2
    a92e:	f7ff f95b 	bl	9be8 <MPSL_IRQ_RADIO_Handler+0xf34>
    a932:	9006      	str	r0, [sp, #24]
    a934:	b1f8      	cbz	r0, a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    a936:	b124      	cbz	r4, a942 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    a938:	2100      	movs	r1, #0
    a93a:	f640 001e 	movw	r0, #2078	; 0x81e
    a93e:	f3af 8000 	nop.w
    a942:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a946:	e000      	b.n	a94a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    a948:	e008      	b.n	a95c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a94a:	ea27 0000 	bic.w	r0, r7, r0
    a94e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    a952:	20ff      	movs	r0, #255	; 0xff
    a954:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a958:	2001      	movs	r0, #1
    a95a:	9008      	str	r0, [sp, #32]
    a95c:	b124      	cbz	r4, a968 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    a95e:	2100      	movs	r1, #0
    a960:	f640 0027 	movw	r0, #2087	; 0x827
    a964:	f3af 8000 	nop.w
    a968:	9806      	ldr	r0, [sp, #24]
    a96a:	4e1b      	ldr	r6, [pc, #108]	; (a9d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    a96c:	2802      	cmp	r0, #2
    a96e:	d009      	beq.n	a984 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    a970:	2801      	cmp	r0, #1
    a972:	d010      	beq.n	a996 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    a974:	e014      	b.n	a9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a976:	b19c      	cbz	r4, a9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a978:	2100      	movs	r1, #0
    a97a:	f640 0019 	movw	r0, #2073	; 0x819
    a97e:	f3af 8000 	nop.w
    a982:	e7ec      	b.n	a95e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    a984:	f000 fd6e 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a988:	68a9      	ldr	r1, [r5, #8]
    a98a:	1a08      	subs	r0, r1, r0
    a98c:	f005 ffbb 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a990:	6871      	ldr	r1, [r6, #4]
    a992:	b921      	cbnz	r1, a99e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    a994:	e004      	b.n	a9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a996:	6871      	ldr	r1, [r6, #4]
    a998:	f04f 30ff 	mov.w	r0, #4294967295
    a99c:	b101      	cbz	r1, a9a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    a99e:	4788      	blx	r1
    a9a0:	9807      	ldr	r0, [sp, #28]
    a9a2:	b148      	cbz	r0, a9b8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    a9a4:	b124      	cbz	r4, a9b0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    a9a6:	2100      	movs	r1, #0
    a9a8:	f640 003c 	movw	r0, #2108	; 0x83c
    a9ac:	f3af 8000 	nop.w
    a9b0:	9808      	ldr	r0, [sp, #32]
    a9b2:	b00d      	add	sp, #52	; 0x34
    a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9b8:	4805      	ldr	r0, [pc, #20]	; (a9d0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a9ba:	2800      	cmp	r0, #0
    a9bc:	bf18      	it	ne
    a9be:	f3af 8000 	nopne.w
    a9c2:	b662      	cpsie	i
    a9c4:	e7ee      	b.n	a9a4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    a9c6:	0000      	.short	0x0000
    a9c8:	200013a0 	.word	0x200013a0
	...
    a9d8:	200002ec 	.word	0x200002ec

0000a9dc <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    a9dc:	2820      	cmp	r0, #32
    a9de:	bf24      	itt	cs
    a9e0:	2000      	movcs	r0, #0
    a9e2:	4770      	bxcs	lr
    a9e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a9e8:	4b03      	ldr	r3, [pc, #12]	; (a9f8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    a9ea:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    a9ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    a9f2:	6042      	str	r2, [r0, #4]
    a9f4:	2001      	movs	r0, #1
    a9f6:	4770      	bx	lr
    a9f8:	20000fa0 	.word	0x20000fa0

0000a9fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    a9fc:	b510      	push	{r4, lr}
    a9fe:	2820      	cmp	r0, #32
    aa00:	d211      	bcs.n	aa26 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aa02:	490e      	ldr	r1, [pc, #56]	; (aa3c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aa04:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aa08:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aa0c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aa10:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aa14:	b13b      	cbz	r3, aa26 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aa16:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aa1a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    aa1e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    aa22:	2a01      	cmp	r2, #1
    aa24:	d001      	beq.n	aa2a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    aa26:	2000      	movs	r0, #0
    aa28:	bd10      	pop	{r4, pc}
    aa2a:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    aa2e:	4601      	mov	r1, r0
    aa30:	2000      	movs	r0, #0
    aa32:	f7ff f8a7 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    aa36:	2001      	movs	r0, #1
    aa38:	bd10      	pop	{r4, pc}
    aa3a:	0000      	.short	0x0000
    aa3c:	200013a0 	.word	0x200013a0

0000aa40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    aa40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa44:	4e86      	ldr	r6, [pc, #536]	; (ac60 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    aa46:	4680      	mov	r8, r0
    aa48:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    aa4c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    aa50:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    aa54:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    aa58:	2800      	cmp	r0, #0
    aa5a:	d071      	beq.n	ab40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    aa5c:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    aa60:	4d80      	ldr	r5, [pc, #512]	; (ac64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    aa62:	b125      	cbz	r5, aa6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    aa64:	2100      	movs	r1, #0
    aa66:	f640 30b9 	movw	r0, #3001	; 0xbb9
    aa6a:	f3af 8000 	nop.w
    aa6e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    aa72:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    aa76:	2801      	cmp	r0, #1
    aa78:	d018      	beq.n	aaac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    aa7a:	b2c0      	uxtb	r0, r0
    aa7c:	2804      	cmp	r0, #4
    aa7e:	bf1c      	itt	ne
    aa80:	2805      	cmpne	r0, #5
    aa82:	2806      	cmpne	r0, #6
    aa84:	d061      	beq.n	ab4a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    aa86:	b12d      	cbz	r5, aa94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    aa88:	f04f 0100 	mov.w	r1, #0
    aa8c:	f640 30c5 	movw	r0, #3013	; 0xbc5
    aa90:	f3af 8000 	nop.w
    aa94:	f006 f86d 	bl	10b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    aa98:	b125      	cbz	r5, aaa4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    aa9a:	2100      	movs	r1, #0
    aa9c:	f640 30c9 	movw	r0, #3017	; 0xbc9
    aaa0:	f3af 8000 	nop.w
    aaa4:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    aaa8:	2801      	cmp	r0, #1
    aaaa:	d1e6      	bne.n	aa7a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    aaac:	2401      	movs	r4, #1
    aaae:	b125      	cbz	r5, aaba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    aab0:	2100      	movs	r1, #0
    aab2:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    aab6:	f3af 8000 	nop.w
    aaba:	2c00      	cmp	r4, #0
    aabc:	d04b      	beq.n	ab56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    aabe:	2000      	movs	r0, #0
    aac0:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    aac4:	b125      	cbz	r5, aad0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    aac6:	2100      	movs	r1, #0
    aac8:	f640 30d5 	movw	r0, #3029	; 0xbd5
    aacc:	f3af 8000 	nop.w
    aad0:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    aad4:	2001      	movs	r0, #1
    aad6:	ea20 090b 	bic.w	r9, r0, fp
    aada:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aade:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aae2:	2240      	movs	r2, #64	; 0x40
    aae4:	f006 f890 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aae8:	b125      	cbz	r5, aaf4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    aaea:	2100      	movs	r1, #0
    aaec:	f240 505e 	movw	r0, #1374	; 0x55e
    aaf0:	f3af 8000 	nop.w
    aaf4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    aaf8:	eb00 0a06 	add.w	sl, r0, r6
    aafc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ab00:	4430      	add	r0, r6
    ab02:	8c01      	ldrh	r1, [r0, #32]
    ab04:	f8aa 1020 	strh.w	r1, [sl, #32]
    ab08:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ab0c:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    ab10:	b125      	cbz	r5, ab1c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    ab12:	2100      	movs	r1, #0
    ab14:	f240 5062 	movw	r0, #1378	; 0x562
    ab18:	f3af 8000 	nop.w
    ab1c:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ab20:	f88d 0000 	strb.w	r0, [sp]
    ab24:	f89d 0000 	ldrb.w	r0, [sp]
    ab28:	b1e0      	cbz	r0, ab64 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    ab2a:	2d00      	cmp	r5, #0
    ab2c:	bf1c      	itt	ne
    ab2e:	2100      	movne	r1, #0
    ab30:	f640 30db 	movwne	r0, #3035	; 0xbdb
    ab34:	d0bb      	beq.n	aaae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ab36:	bf00      	nop
    ab38:	f3af 8000 	nop.w
    ab3c:	e7b7      	b.n	aaae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ab3e:	e7ff      	b.n	ab40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab40:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ab44:	2070      	movs	r0, #112	; 0x70
    ab46:	f001 fbdd 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ab4a:	464a      	mov	r2, r9
    ab4c:	4641      	mov	r1, r8
    ab4e:	2001      	movs	r0, #1
    ab50:	f7ff f818 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    ab54:	e7a0      	b.n	aa98 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ab56:	4844      	ldr	r0, [pc, #272]	; (ac68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ab58:	2800      	cmp	r0, #0
    ab5a:	bf18      	it	ne
    ab5c:	f3af 8000 	nopne.w
    ab60:	b662      	cpsie	i
    ab62:	e7ac      	b.n	aabe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ab64:	b125      	cbz	r5, ab70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ab66:	2100      	movs	r1, #0
    ab68:	f640 30df 	movw	r0, #3039	; 0xbdf
    ab6c:	f3af 8000 	nop.w
    ab70:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ab74:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ab78:	4640      	mov	r0, r8
    ab7a:	461c      	mov	r4, r3
    ab7c:	f04f 0b20 	mov.w	fp, #32
    ab80:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ab84:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ab88:	e004      	b.n	ab94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ab8a:	46a3      	mov	fp, r4
    ab8c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ab90:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ab94:	4284      	cmp	r4, r0
    ab96:	d002      	beq.n	ab9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ab98:	2c20      	cmp	r4, #32
    ab9a:	d02b      	beq.n	abf4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ab9c:	e7f5      	b.n	ab8a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ab9e:	2c20      	cmp	r4, #32
    aba0:	d028      	beq.n	abf4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    aba2:	42a3      	cmp	r3, r4
    aba4:	d104      	bne.n	abb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    aba6:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    abaa:	7840      	ldrb	r0, [r0, #1]
    abac:	7008      	strb	r0, [r1, #0]
    abae:	e005      	b.n	abbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    abb0:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    abb4:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    abb8:	7840      	ldrb	r0, [r0, #1]
    abba:	7048      	strb	r0, [r1, #1]
    abbc:	f1ba 0f00 	cmp.w	sl, #0
    abc0:	d011      	beq.n	abe6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    abc2:	b125      	cbz	r5, abce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    abc4:	2100      	movs	r1, #0
    abc6:	f240 40c1 	movw	r0, #1217	; 0x4c1
    abca:	f3af 8000 	nop.w
    abce:	f89a 0000 	ldrb.w	r0, [sl]
    abd2:	42a0      	cmp	r0, r4
    abd4:	d107      	bne.n	abe6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    abd6:	b125      	cbz	r5, abe2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    abd8:	2100      	movs	r1, #0
    abda:	f240 40c4 	movw	r0, #1220	; 0x4c4
    abde:	f3af 8000 	nop.w
    abe2:	f88a b000 	strb.w	fp, [sl]
    abe6:	b15d      	cbz	r5, ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    abe8:	2100      	movs	r1, #0
    abea:	f240 40c9 	movw	r0, #1225	; 0x4c9
    abee:	f3af 8000 	nop.w
    abf2:	e000      	b.n	abf6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    abf4:	b125      	cbz	r5, ac00 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    abf6:	2100      	movs	r1, #0
    abf8:	f640 30e3 	movw	r0, #3043	; 0xbe3
    abfc:	f3af 8000 	nop.w
    ac00:	481a      	ldr	r0, [pc, #104]	; (ac6c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ac02:	2800      	cmp	r0, #0
    ac04:	bf18      	it	ne
    ac06:	f3af 8000 	nopne.w
    ac0a:	f3ef 8410 	mrs	r4, PRIMASK
    ac0e:	b672      	cpsid	i
    ac10:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ac14:	f88d 0000 	strb.w	r0, [sp]
    ac18:	f89d 0000 	ldrb.w	r0, [sp]
    ac1c:	b138      	cbz	r0, ac2e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ac1e:	2d00      	cmp	r5, #0
    ac20:	bf1c      	itt	ne
    ac22:	2100      	movne	r1, #0
    ac24:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    ac28:	f43f af41 	beq.w	aaae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac2c:	e784      	b.n	ab38 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    ac2e:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    ac32:	20ff      	movs	r0, #255	; 0xff
    ac34:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ac38:	b154      	cbz	r4, ac50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    ac3a:	2d00      	cmp	r5, #0
    ac3c:	bf08      	it	eq
    ac3e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac42:	2100      	movs	r1, #0
    ac44:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ac48:	f3af 8000 	nop.w
    ac4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac50:	4805      	ldr	r0, [pc, #20]	; (ac68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac52:	2800      	cmp	r0, #0
    ac54:	bf18      	it	ne
    ac56:	f3af 8000 	nopne.w
    ac5a:	b662      	cpsie	i
    ac5c:	e7ed      	b.n	ac3a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ac5e:	0000      	.short	0x0000
    ac60:	200013a0 	.word	0x200013a0
	...

0000ac70 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	460d      	mov	r5, r1
    ac74:	4606      	mov	r6, r0
    ac76:	f001 fabb 	bl	c1f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ac7a:	480f      	ldr	r0, [pc, #60]	; (acb8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ac7c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ac80:	2400      	movs	r4, #0
    ac82:	3880      	subs	r0, #128	; 0x80
    ac84:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ac88:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ac8c:	b129      	cbz	r1, ac9a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ac8e:	1c61      	adds	r1, r4, #1
    ac90:	b2cc      	uxtb	r4, r1
    ac92:	2c20      	cmp	r4, #32
    ac94:	d3f8      	bcc.n	ac88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ac96:	2020      	movs	r0, #32
    ac98:	bd70      	pop	{r4, r5, r6, pc}
    ac9a:	4808      	ldr	r0, [pc, #32]	; (acbc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ac9c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    aca0:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    aca4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    aca8:	4621      	mov	r1, r4
    acaa:	6045      	str	r5, [r0, #4]
    acac:	2001      	movs	r0, #1
    acae:	f7fe ff69 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    acb2:	4620      	mov	r0, r4
    acb4:	bd70      	pop	{r4, r5, r6, pc}
    acb6:	0000      	.short	0x0000
    acb8:	200013a0 	.word	0x200013a0
    acbc:	20000fa0 	.word	0x20000fa0

0000acc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc4:	b083      	sub	sp, #12
    acc6:	f000 fbcd 	bl	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    acca:	4605      	mov	r5, r0
    accc:	f000 feb0 	bl	ba30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    acd0:	4c84      	ldr	r4, [pc, #528]	; (aee4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    acd2:	6860      	ldr	r0, [r4, #4]
    acd4:	f1b0 3fff 	cmp.w	r0, #4294967295
    acd8:	bf1c      	itt	ne
    acda:	f04f 30ff 	movne.w	r0, #4294967295
    acde:	6060      	strne	r0, [r4, #4]
    ace0:	7fa0      	ldrb	r0, [r4, #30]
    ace2:	f8df 9204 	ldr.w	r9, [pc, #516]	; aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    ace6:	b990      	cbnz	r0, ad0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    ace8:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    acec:	1a40      	subs	r0, r0, r1
    acee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    acf2:	f44f 710c 	mov.w	r1, #560	; 0x230
    acf6:	f001 fa67 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    acfa:	68e1      	ldr	r1, [r4, #12]
    acfc:	4408      	add	r0, r1
    acfe:	1a28      	subs	r0, r5, r0
    ad00:	0200      	lsls	r0, r0, #8
    ad02:	17c1      	asrs	r1, r0, #31
    ad04:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    ad08:	1200      	asrs	r0, r0, #8
    ad0a:	0fc0      	lsrs	r0, r0, #31
    ad0c:	d012      	beq.n	ad34 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    ad0e:	7e60      	ldrb	r0, [r4, #25]
    ad10:	b320      	cbz	r0, ad5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ad12:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    ad16:	f88d 0000 	strb.w	r0, [sp]
    ad1a:	f89d 0000 	ldrb.w	r0, [sp]
    ad1e:	b1e8      	cbz	r0, ad5c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ad20:	f000 fce2 	bl	b6e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ad24:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    ad28:	b1f0      	cbz	r0, ad68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    ad2a:	f240 31f5 	movw	r1, #1013	; 0x3f5
    ad2e:	2070      	movs	r0, #112	; 0x70
    ad30:	f001 fae8 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad34:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ad38:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ad3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ad40:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ad44:	6840      	ldr	r0, [r0, #4]
    ad46:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ad4a:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ad4e:	2108      	movs	r1, #8
    ad50:	4790      	blx	r2
    ad52:	f240 31dd 	movw	r1, #989	; 0x3dd
    ad56:	2070      	movs	r0, #112	; 0x70
    ad58:	f001 fad4 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad5c:	1ce8      	adds	r0, r5, #3
    ad5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ad62:	f000 fba5 	bl	b4b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ad66:	e7dd      	b.n	ad24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ad68:	2001      	movs	r0, #1
    ad6a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ad6e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ad72:	2820      	cmp	r0, #32
    ad74:	d021      	beq.n	adba <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ad76:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ad7a:	2020      	movs	r0, #32
    ad7c:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ad80:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ad84:	2000      	movs	r0, #0
    ad86:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ad8a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ad8e:	6020      	str	r0, [r4, #0]
    ad90:	f000 ff28 	bl	bbe4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ad94:	7720      	strb	r0, [r4, #28]
    ad96:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ad9a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ad9e:	1907      	adds	r7, r0, r4
    ada0:	f897 0020 	ldrb.w	r0, [r7, #32]
    ada4:	2820      	cmp	r0, #32
    ada6:	d058      	beq.n	ae5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ada8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    adac:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    adb0:	f899 001a 	ldrb.w	r0, [r9, #26]
    adb4:	2801      	cmp	r0, #1
    adb6:	d005      	beq.n	adc4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    adb8:	e04f      	b.n	ae5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    adba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    adbe:	2070      	movs	r0, #112	; 0x70
    adc0:	f001 faa0 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    adc4:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    adc8:	aa01      	add	r2, sp, #4
    adca:	4669      	mov	r1, sp
    adcc:	4658      	mov	r0, fp
    adce:	f000 f9df 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    add2:	f000 ff01 	bl	bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    add6:	f000 f9bf 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    adda:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    adde:	2820      	cmp	r0, #32
    ade0:	d004      	beq.n	adec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    ade2:	68e0      	ldr	r0, [r4, #12]
    ade4:	1d40      	adds	r0, r0, #5
    ade6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adea:	e01d      	b.n	ae28 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    adec:	f105 0a09 	add.w	sl, r5, #9
    adf0:	f1bb 0f00 	cmp.w	fp, #0
    adf4:	d016      	beq.n	ae24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    adf6:	f001 fa0d 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    adfa:	b998      	cbnz	r0, ae24 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    adfc:	f001 f8c4 	bl	bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    ae00:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ae04:	bf08      	it	eq
    ae06:	200d      	moveq	r0, #13
    ae08:	d00b      	beq.n	ae22 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    ae0a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    ae0e:	3856      	subs	r0, #86	; 0x56
    ae10:	bf08      	it	eq
    ae12:	201c      	moveq	r0, #28
    ae14:	d005      	beq.n	ae22 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    ae16:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    ae1a:	389f      	subs	r0, #159	; 0x9f
    ae1c:	bf14      	ite	ne
    ae1e:	2000      	movne	r0, #0
    ae20:	2032      	moveq	r0, #50	; 0x32
    ae22:	4482      	add	sl, r0
    ae24:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    ae28:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ae2c:	1a81      	subs	r1, r0, r2
    ae2e:	0209      	lsls	r1, r1, #8
    ae30:	17cb      	asrs	r3, r1, #31
    ae32:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    ae36:	1209      	asrs	r1, r1, #8
    ae38:	2900      	cmp	r1, #0
    ae3a:	dc0e      	bgt.n	ae5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae3c:	f109 0308 	add.w	r3, r9, #8
    ae40:	4282      	cmp	r2, r0
    ae42:	d202      	bcs.n	ae4a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    ae44:	6899      	ldr	r1, [r3, #8]
    ae46:	1e49      	subs	r1, r1, #1
    ae48:	6099      	str	r1, [r3, #8]
    ae4a:	e9d3 2100 	ldrd	r2, r1, [r3]
    ae4e:	1a89      	subs	r1, r1, r2
    ae50:	6018      	str	r0, [r3, #0]
    ae52:	4408      	add	r0, r1
    ae54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae58:	6058      	str	r0, [r3, #4]
    ae5a:	4631      	mov	r1, r6
    ae5c:	2001      	movs	r0, #1
    ae5e:	f7fe fec3 	bl	9be8 <MPSL_IRQ_RADIO_Handler+0xf34>
    ae62:	ea5f 0900 	movs.w	r9, r0
    ae66:	d0f8      	beq.n	ae5a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae68:	4820      	ldr	r0, [pc, #128]	; (aeec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    ae6a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    ae6e:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ae72:	2802      	cmp	r0, #2
    ae74:	d104      	bne.n	ae80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    ae76:	4632      	mov	r2, r6
    ae78:	4641      	mov	r1, r8
    ae7a:	2006      	movs	r0, #6
    ae7c:	f7fe fe82 	bl	9b84 <MPSL_IRQ_RADIO_Handler+0xed0>
    ae80:	20ff      	movs	r0, #255	; 0xff
    ae82:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    ae86:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    ae8a:	4e19      	ldr	r6, [pc, #100]	; (aef0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    ae8c:	2820      	cmp	r0, #32
    ae8e:	bf1c      	itt	ne
    ae90:	7870      	ldrbne	r0, [r6, #1]
    ae92:	f001 fb0b 	blne	c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    ae96:	7f20      	ldrb	r0, [r4, #28]
    ae98:	b120      	cbz	r0, aea4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    ae9a:	f000 fe7f 	bl	bb9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    ae9e:	2000      	movs	r0, #0
    aea0:	7720      	strb	r0, [r4, #28]
    aea2:	7760      	strb	r0, [r4, #29]
    aea4:	f1b9 0f02 	cmp.w	r9, #2
    aea8:	d011      	beq.n	aece <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    aeaa:	f1b9 0f01 	cmp.w	r9, #1
    aeae:	bf1c      	itt	ne
    aeb0:	b003      	addne	sp, #12
    aeb2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeb6:	f04f 30ff 	mov.w	r0, #4294967295
    aeba:	6871      	ldr	r1, [r6, #4]
    aebc:	2900      	cmp	r1, #0
    aebe:	bf04      	itt	eq
    aec0:	b003      	addeq	sp, #12
    aec2:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aec6:	b003      	add	sp, #12
    aec8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aecc:	4708      	bx	r1
    aece:	68a0      	ldr	r0, [r4, #8]
    aed0:	1b40      	subs	r0, r0, r5
    aed2:	f005 fd18 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aed6:	6871      	ldr	r1, [r6, #4]
    aed8:	2900      	cmp	r1, #0
    aeda:	d1f4      	bne.n	aec6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    aedc:	b003      	add	sp, #12
    aede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee2:	0000      	.short	0x0000
    aee4:	200013a0 	.word	0x200013a0
    aee8:	20000fa0 	.word	0x20000fa0
    aeec:	20001320 	.word	0x20001320
    aef0:	200002ec 	.word	0x200002ec

0000aef4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    aef4:	b570      	push	{r4, r5, r6, lr}
    aef6:	4c42      	ldr	r4, [pc, #264]	; (b000 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    aef8:	4605      	mov	r5, r0
    aefa:	b082      	sub	sp, #8
    aefc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af00:	2820      	cmp	r0, #32
    af02:	d008      	beq.n	af16 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    af04:	6860      	ldr	r0, [r4, #4]
    af06:	f1b0 3fff 	cmp.w	r0, #4294967295
    af0a:	d009      	beq.n	af20 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    af0c:	f640 21e4 	movw	r1, #2788	; 0xae4
    af10:	2070      	movs	r0, #112	; 0x70
    af12:	f001 f9f7 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af16:	f640 21e3 	movw	r1, #2787	; 0xae3
    af1a:	2070      	movs	r0, #112	; 0x70
    af1c:	f001 f9f2 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af20:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af24:	4937      	ldr	r1, [pc, #220]	; (b004 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    af26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    af2a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    af2e:	68b0      	ldr	r0, [r6, #8]
    af30:	f005 fce9 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af34:	4602      	mov	r2, r0
    af36:	8af0      	ldrh	r0, [r6, #22]
    af38:	7d31      	ldrb	r1, [r6, #20]
    af3a:	4b33      	ldr	r3, [pc, #204]	; (b008 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    af3c:	4408      	add	r0, r1
    af3e:	1c40      	adds	r0, r0, #1
    af40:	1811      	adds	r1, r2, r0
    af42:	429a      	cmp	r2, r3
    af44:	d817      	bhi.n	af76 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    af46:	4a31      	ldr	r2, [pc, #196]	; (b00c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    af48:	4290      	cmp	r0, r2
    af4a:	dc1b      	bgt.n	af84 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    af4c:	f1c2 0c00 	rsb	ip, r2, #0
    af50:	4560      	cmp	r0, ip
    af52:	db1e      	blt.n	af92 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    af54:	0056      	lsls	r6, r2, #1
    af56:	428e      	cmp	r6, r1
    af58:	bfdc      	itt	le
    af5a:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    af5e:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    af62:	dd05      	ble.n	af70 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    af64:	2900      	cmp	r1, #0
    af66:	bfbc      	itt	lt
    af68:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    af6c:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    af70:	1948      	adds	r0, r1, r5
    af72:	4299      	cmp	r1, r3
    af74:	d904      	bls.n	af80 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    af76:	f240 519e 	movw	r1, #1438	; 0x59e
    af7a:	2070      	movs	r0, #112	; 0x70
    af7c:	f001 f9c2 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af80:	4295      	cmp	r5, r2
    af82:	dd04      	ble.n	af8e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    af84:	f240 519f 	movw	r1, #1439	; 0x59f
    af88:	2070      	movs	r0, #112	; 0x70
    af8a:	f001 f9bb 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af8e:	4565      	cmp	r5, ip
    af90:	da04      	bge.n	af9c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    af92:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    af96:	2070      	movs	r0, #112	; 0x70
    af98:	f001 f9b4 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af9c:	4286      	cmp	r6, r0
    af9e:	bfdc      	itt	le
    afa0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    afa4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    afa8:	dd05      	ble.n	afb6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    afaa:	2800      	cmp	r0, #0
    afac:	bfbc      	itt	lt
    afae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    afb2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    afb6:	aa01      	add	r2, sp, #4
    afb8:	4669      	mov	r1, sp
    afba:	f000 f8e9 	bl	b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    afbe:	f89d 0004 	ldrb.w	r0, [sp, #4]
    afc2:	280f      	cmp	r0, #15
    afc4:	bf8c      	ite	hi
    afc6:	2001      	movhi	r0, #1
    afc8:	2000      	movls	r0, #0
    afca:	9900      	ldr	r1, [sp, #0]
    afcc:	4408      	add	r0, r1
    afce:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    afd2:	6061      	str	r1, [r4, #4]
    afd4:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    afd8:	f88d 0000 	strb.w	r0, [sp]
    afdc:	f89d 0000 	ldrb.w	r0, [sp]
    afe0:	2800      	cmp	r0, #0
    afe2:	bf04      	itt	eq
    afe4:	b002      	addeq	sp, #8
    afe6:	bd70      	popeq	{r4, r5, r6, pc}
    afe8:	2005      	movs	r0, #5
    afea:	f000 fbfb 	bl	b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    afee:	2800      	cmp	r0, #0
    aff0:	bf1c      	itt	ne
    aff2:	b002      	addne	sp, #8
    aff4:	bd70      	popne	{r4, r5, r6, pc}
    aff6:	f640 21eb 	movw	r1, #2795	; 0xaeb
    affa:	2070      	movs	r0, #112	; 0x70
    affc:	f001 f982 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b000:	200013a0 	.word	0x200013a0
    b004:	20000fa0 	.word	0x20000fa0
    b008:	1e847fff 	.word	0x1e847fff
    b00c:	0f424000 	.word	0x0f424000

0000b010 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b010:	b570      	push	{r4, r5, r6, lr}
    b012:	4c1c      	ldr	r4, [pc, #112]	; (b084 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b014:	2120      	movs	r1, #32
    b016:	f884 1020 	strb.w	r1, [r4, #32]
    b01a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b01e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b022:	2000      	movs	r0, #0
    b024:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b028:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b02c:	1e42      	subs	r2, r0, #1
    b02e:	e9c4 0200 	strd	r0, r2, [r4]
    b032:	77a0      	strb	r0, [r4, #30]
    b034:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b038:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b03c:	7720      	strb	r0, [r4, #28]
    b03e:	7760      	strb	r0, [r4, #29]
    b040:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b044:	62e2      	str	r2, [r4, #44]	; 0x2c
    b046:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b04a:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b04e:	2210      	movs	r2, #16
    b050:	7088      	strb	r0, [r1, #2]
    b052:	f801 0f04 	strb.w	r0, [r1, #4]!
    b056:	1e52      	subs	r2, r2, #1
    b058:	d1fa      	bne.n	b050 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b05a:	f000 fdcd 	bl	bbf8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b05e:	4d0a      	ldr	r5, [pc, #40]	; (b088 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b060:	2601      	movs	r6, #1
    b062:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b066:	20ff      	movs	r0, #255	; 0xff
    b068:	7028      	strb	r0, [r5, #0]
    b06a:	4808      	ldr	r0, [pc, #32]	; (b08c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b06c:	f001 fa00 	bl	c470 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b070:	7068      	strb	r0, [r5, #1]
    b072:	f001 fa6b 	bl	c54c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b076:	60a8      	str	r0, [r5, #8]
    b078:	f000 fd48 	bl	bb0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b07c:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b080:	bd70      	pop	{r4, r5, r6, pc}
    b082:	0000      	.short	0x0000
    b084:	200013a0 	.word	0x200013a0
    b088:	200002ec 	.word	0x200002ec
    b08c:	00009aad 	.word	0x00009aad

0000b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b090:	b500      	push	{lr}
    b092:	b083      	sub	sp, #12
    b094:	4668      	mov	r0, sp
    b096:	f000 f9eb 	bl	b470 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b09a:	9800      	ldr	r0, [sp, #0]
    b09c:	f005 fc33 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b0a0:	9a01      	ldr	r2, [sp, #4]
    b0a2:	4b03      	ldr	r3, [pc, #12]	; (b0b0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b0a4:	2100      	movs	r1, #0
    b0a6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b0aa:	b003      	add	sp, #12
    b0ac:	bd00      	pop	{pc}
    b0ae:	0000      	.short	0x0000
    b0b0:	1e848000 	.word	0x1e848000

0000b0b4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b0b4:	b570      	push	{r4, r5, r6, lr}
    b0b6:	4606      	mov	r6, r0
    b0b8:	b082      	sub	sp, #8
    b0ba:	461d      	mov	r5, r3
    b0bc:	4610      	mov	r0, r2
    b0be:	f005 fc22 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b0c2:	4604      	mov	r4, r0
    b0c4:	4668      	mov	r0, sp
    b0c6:	f000 f9d3 	bl	b470 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b0ca:	4920      	ldr	r1, [pc, #128]	; (b14c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    b0cc:	9801      	ldr	r0, [sp, #4]
    b0ce:	fba0 0201 	umull	r0, r2, r0, r1
    b0d2:	1a30      	subs	r0, r6, r0
    b0d4:	bf44      	itt	mi
    b0d6:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    b0da:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    b0de:	d504      	bpl.n	b0ea <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    b0e0:	f640 410b 	movw	r1, #3083	; 0xc0b
    b0e4:	2070      	movs	r0, #112	; 0x70
    b0e6:	f001 f90d 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0ea:	4288      	cmp	r0, r1
    b0ec:	db04      	blt.n	b0f8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    b0ee:	f640 410c 	movw	r1, #3084	; 0xc0c
    b0f2:	2070      	movs	r0, #112	; 0x70
    b0f4:	f001 f906 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0f8:	4a15      	ldr	r2, [pc, #84]	; (b150 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    b0fa:	1a21      	subs	r1, r4, r0
    b0fc:	2300      	movs	r3, #0
    b0fe:	1a8a      	subs	r2, r1, r2
    b100:	f173 0200 	sbcs.w	r2, r3, #0
    b104:	d318      	bcc.n	b138 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b106:	f8df c048 	ldr.w	ip, [pc, #72]	; b150 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    b10a:	1b02      	subs	r2, r0, r4
    b10c:	ebb2 0c0c 	subs.w	ip, r2, ip
    b110:	f173 0300 	sbcs.w	r3, r3, #0
    b114:	d310      	bcc.n	b138 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b116:	4b0f      	ldr	r3, [pc, #60]	; (b154 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    b118:	428b      	cmp	r3, r1
    b11a:	bf3e      	ittt	cc
    b11c:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    b120:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b124:	1901      	addcc	r1, r0, r4
    b126:	d307      	bcc.n	b138 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b128:	4293      	cmp	r3, r2
    b12a:	d20a      	bcs.n	b142 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    b12c:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    b130:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    b134:	4408      	add	r0, r1
    b136:	4241      	negs	r1, r0
    b138:	f101 000f 	add.w	r0, r1, #15
    b13c:	b002      	add	sp, #8
    b13e:	1a28      	subs	r0, r5, r0
    b140:	bd70      	pop	{r4, r5, r6, pc}
    b142:	f640 3105 	movw	r1, #2821	; 0xb05
    b146:	2070      	movs	r0, #112	; 0x70
    b148:	f001 f8dc 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b14c:	1e848000 	.word	0x1e848000
    b150:	0f424000 	.word	0x0f424000
    b154:	1e847fff 	.word	0x1e847fff

0000b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b158:	0b41      	lsrs	r1, r0, #13
    b15a:	f248 6237 	movw	r2, #34359	; 0x8637
    b15e:	4351      	muls	r1, r2
    b160:	0c0a      	lsrs	r2, r1, #16
    b162:	4b09      	ldr	r3, [pc, #36]	; (b188 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b164:	0251      	lsls	r1, r2, #9
    b166:	fb02 0203 	mla	r2, r2, r3, r0
    b16a:	4808      	ldr	r0, [pc, #32]	; (b18c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b16c:	4350      	muls	r0, r2
    b16e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b172:	306e      	adds	r0, #110	; 0x6e
    b174:	0d40      	lsrs	r0, r0, #21
    b176:	425b      	negs	r3, r3
    b178:	fb10 f303 	smulbb	r3, r0, r3
    b17c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b180:	bf88      	it	hi
    b182:	1c49      	addhi	r1, r1, #1
    b184:	4408      	add	r0, r1
    b186:	4770      	bx	lr
    b188:	ffffc2f7 	.word	0xffffc2f7
    b18c:	00010c6f 	.word	0x00010c6f

0000b190 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b190:	0b43      	lsrs	r3, r0, #13
    b192:	f248 6c37 	movw	ip, #34359	; 0x8637
    b196:	fb03 f30c 	mul.w	r3, r3, ip
    b19a:	b430      	push	{r4, r5}
    b19c:	0c1b      	lsrs	r3, r3, #16
    b19e:	f8df c044 	ldr.w	ip, [pc, #68]	; b1e4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b1a2:	025c      	lsls	r4, r3, #9
    b1a4:	fb03 030c 	mla	r3, r3, ip, r0
    b1a8:	480f      	ldr	r0, [pc, #60]	; (b1e8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b1aa:	4358      	muls	r0, r3
    b1ac:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b1b0:	eb04 000c 	add.w	r0, r4, ip
    b1b4:	f643 5409 	movw	r4, #15625	; 0x3d09
    b1b8:	fb1c f404 	smulbb	r4, ip, r4
    b1bc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b1c0:	f643 5508 	movw	r5, #15624	; 0x3d08
    b1c4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b1c8:	442c      	add	r4, r5
    b1ca:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b1ce:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b1d2:	bf84      	itt	hi
    b1d4:	f04f 0c00 	movhi.w	ip, #0
    b1d8:	1c40      	addhi	r0, r0, #1
    b1da:	6008      	str	r0, [r1, #0]
    b1dc:	f882 c000 	strb.w	ip, [r2]
    b1e0:	bc30      	pop	{r4, r5}
    b1e2:	4770      	bx	lr
    b1e4:	ffffc2f7 	.word	0xffffc2f7
    b1e8:	00010c6f 	.word	0x00010c6f

0000b1ec <MPSL_IRQ_RTC0_Handler>:
    b1ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1f0:	4d3b      	ldr	r5, [pc, #236]	; (b2e0 <MPSL_IRQ_RTC0_Handler+0xf4>)
    b1f2:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b1f6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b2e4 <MPSL_IRQ_RTC0_Handler+0xf8>
    b1fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b1fe:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b202:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b206:	f04f 0400 	mov.w	r4, #0
    b20a:	d019      	beq.n	b240 <MPSL_IRQ_RTC0_Handler+0x54>
    b20c:	4836      	ldr	r0, [pc, #216]	; (b2e8 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b20e:	6800      	ldr	r0, [r0, #0]
    b210:	b1b0      	cbz	r0, b240 <MPSL_IRQ_RTC0_Handler+0x54>
    b212:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b216:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b21a:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b21e:	f8d8 1000 	ldr.w	r1, [r8]
    b222:	1a40      	subs	r0, r0, r1
    b224:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b228:	2802      	cmp	r0, #2
    b22a:	d302      	bcc.n	b232 <MPSL_IRQ_RTC0_Handler+0x46>
    b22c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b230:	d906      	bls.n	b240 <MPSL_IRQ_RTC0_Handler+0x54>
    b232:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b236:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b23a:	2004      	movs	r0, #4
    b23c:	f7fe fe94 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b240:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b244:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b248:	d01a      	beq.n	b280 <MPSL_IRQ_RTC0_Handler+0x94>
    b24a:	4828      	ldr	r0, [pc, #160]	; (b2ec <MPSL_IRQ_RTC0_Handler+0x100>)
    b24c:	6800      	ldr	r0, [r0, #0]
    b24e:	b1b8      	cbz	r0, b280 <MPSL_IRQ_RTC0_Handler+0x94>
    b250:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b254:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b258:	4825      	ldr	r0, [pc, #148]	; (b2f0 <MPSL_IRQ_RTC0_Handler+0x104>)
    b25a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b25e:	f8d8 1000 	ldr.w	r1, [r8]
    b262:	1a40      	subs	r0, r0, r1
    b264:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b268:	2802      	cmp	r0, #2
    b26a:	d302      	bcc.n	b272 <MPSL_IRQ_RTC0_Handler+0x86>
    b26c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b270:	d906      	bls.n	b280 <MPSL_IRQ_RTC0_Handler+0x94>
    b272:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b276:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b27a:	2005      	movs	r0, #5
    b27c:	f7fe fe74 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b280:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b284:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b288:	d01a      	beq.n	b2c0 <MPSL_IRQ_RTC0_Handler+0xd4>
    b28a:	481a      	ldr	r0, [pc, #104]	; (b2f4 <MPSL_IRQ_RTC0_Handler+0x108>)
    b28c:	6800      	ldr	r0, [r0, #0]
    b28e:	b1b8      	cbz	r0, b2c0 <MPSL_IRQ_RTC0_Handler+0xd4>
    b290:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b294:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b298:	4817      	ldr	r0, [pc, #92]	; (b2f8 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b29a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b29e:	f8d8 1000 	ldr.w	r1, [r8]
    b2a2:	1a40      	subs	r0, r0, r1
    b2a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2a8:	2802      	cmp	r0, #2
    b2aa:	d302      	bcc.n	b2b2 <MPSL_IRQ_RTC0_Handler+0xc6>
    b2ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2b0:	d906      	bls.n	b2c0 <MPSL_IRQ_RTC0_Handler+0xd4>
    b2b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b2b6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2ba:	2006      	movs	r0, #6
    b2bc:	f7fe fe54 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2c0:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b2c4:	2800      	cmp	r0, #0
    b2c6:	bf08      	it	eq
    b2c8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2cc:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b2d0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2d4:	4809      	ldr	r0, [pc, #36]	; (b2fc <MPSL_IRQ_RTC0_Handler+0x110>)
    b2d6:	68c1      	ldr	r1, [r0, #12]
    b2d8:	1c49      	adds	r1, r1, #1
    b2da:	60c1      	str	r1, [r0, #12]
    b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b2e0:	4000b000 	.word	0x4000b000
    b2e4:	4000b504 	.word	0x4000b504
    b2e8:	4000b140 	.word	0x4000b140
    b2ec:	4000b144 	.word	0x4000b144
    b2f0:	4000b004 	.word	0x4000b004
    b2f4:	4000b148 	.word	0x4000b148
    b2f8:	4000b008 	.word	0x4000b008
    b2fc:	200002f8 	.word	0x200002f8

0000b300 <MPSL_IRQ_TIMER0_Handler>:
    b300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b304:	4d38      	ldr	r5, [pc, #224]	; (b3e8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b306:	7828      	ldrb	r0, [r5, #0]
    b308:	2804      	cmp	r0, #4
    b30a:	d068      	beq.n	b3de <MPSL_IRQ_TIMER0_Handler+0xde>
    b30c:	1ca8      	adds	r0, r5, #2
    b30e:	2201      	movs	r2, #1
    b310:	7801      	ldrb	r1, [r0, #0]
    b312:	b159      	cbz	r1, b32c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b314:	2901      	cmp	r1, #1
    b316:	bf08      	it	eq
    b318:	706a      	strbeq	r2, [r5, #1]
    b31a:	d002      	beq.n	b322 <MPSL_IRQ_TIMER0_Handler+0x22>
    b31c:	7869      	ldrb	r1, [r5, #1]
    b31e:	2900      	cmp	r1, #0
    b320:	d058      	beq.n	b3d4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b322:	2102      	movs	r1, #2
    b324:	7001      	strb	r1, [r0, #0]
    b326:	7840      	ldrb	r0, [r0, #1]
    b328:	f000 fb12 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b32c:	4c2f      	ldr	r4, [pc, #188]	; (b3ec <MPSL_IRQ_TIMER0_Handler+0xec>)
    b32e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b332:	f04f 0800 	mov.w	r8, #0
    b336:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b33a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b33e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b342:	d00a      	beq.n	b35a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b344:	482a      	ldr	r0, [pc, #168]	; (b3f0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b346:	6800      	ldr	r0, [r0, #0]
    b348:	b138      	cbz	r0, b35a <MPSL_IRQ_TIMER0_Handler+0x5a>
    b34a:	2003      	movs	r0, #3
    b34c:	f000 fb00 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b350:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b354:	2003      	movs	r0, #3
    b356:	f7fe fe07 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b35a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b35e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b362:	d00a      	beq.n	b37a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b364:	4823      	ldr	r0, [pc, #140]	; (b3f4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b366:	6800      	ldr	r0, [r0, #0]
    b368:	b138      	cbz	r0, b37a <MPSL_IRQ_TIMER0_Handler+0x7a>
    b36a:	2002      	movs	r0, #2
    b36c:	f000 faf0 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b370:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b374:	2002      	movs	r0, #2
    b376:	f7fe fdf7 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b37a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b37e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b382:	d00a      	beq.n	b39a <MPSL_IRQ_TIMER0_Handler+0x9a>
    b384:	481c      	ldr	r0, [pc, #112]	; (b3f8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b386:	6800      	ldr	r0, [r0, #0]
    b388:	b138      	cbz	r0, b39a <MPSL_IRQ_TIMER0_Handler+0x9a>
    b38a:	2001      	movs	r0, #1
    b38c:	f000 fae0 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b390:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b394:	2001      	movs	r0, #1
    b396:	f7fe fde7 	bl	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b39a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b39e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b3a2:	bf08      	it	eq
    b3a4:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3a8:	4814      	ldr	r0, [pc, #80]	; (b3fc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b3aa:	6800      	ldr	r0, [r0, #0]
    b3ac:	2800      	cmp	r0, #0
    b3ae:	bf08      	it	eq
    b3b0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b3b4:	2000      	movs	r0, #0
    b3b6:	f000 facb 	bl	b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ba:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3be:	2004      	movs	r0, #4
    b3c0:	7028      	strb	r0, [r5, #0]
    b3c2:	f8c5 8004 	str.w	r8, [r5, #4]
    b3c6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b3ce:	2000      	movs	r0, #0
    b3d0:	f7fe bdca 	b.w	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d4:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b3d8:	206c      	movs	r0, #108	; 0x6c
    b3da:	f000 ff93 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b3de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b3e2:	2007      	movs	r0, #7
    b3e4:	f7fe bdc0 	b.w	9f68 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3e8:	200002f8 	.word	0x200002f8
    b3ec:	40008000 	.word	0x40008000
    b3f0:	4000814c 	.word	0x4000814c
    b3f4:	40008148 	.word	0x40008148
    b3f8:	40008144 	.word	0x40008144
    b3fc:	40008140 	.word	0x40008140
    b400:	2201      	movs	r2, #1
    b402:	0211      	lsls	r1, r2, #8
    b404:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b408:	2000      	movs	r0, #0
    b40a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b40e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b412:	f3bf 8f4f 	dsb	sy
    b416:	f3bf 8f6f 	isb	sy
    b41a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b41e:	490e      	ldr	r1, [pc, #56]	; (b458 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b420:	f841 2f04 	str.w	r2, [r1, #4]!
    b424:	1e43      	subs	r3, r0, #1
    b426:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b42a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b42e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b432:	4b0a      	ldr	r3, [pc, #40]	; (b45c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b434:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b438:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b43c:	1d1b      	adds	r3, r3, #4
    b43e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b442:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b446:	1d1b      	adds	r3, r3, #4
    b448:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b44c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b450:	60ca      	str	r2, [r1, #12]
    b452:	4903      	ldr	r1, [pc, #12]	; (b460 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b454:	7048      	strb	r0, [r1, #1]
    b456:	4770      	bx	lr
    b458:	40008000 	.word	0x40008000
    b45c:	40008004 	.word	0x40008004
    b460:	200002f8 	.word	0x200002f8

0000b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b464:	4801      	ldr	r0, [pc, #4]	; (b46c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b466:	6800      	ldr	r0, [r0, #0]
    b468:	4770      	bx	lr
    b46a:	0000      	.short	0x0000
    b46c:	4000b504 	.word	0x4000b504

0000b470 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b470:	b430      	push	{r4, r5}
    b472:	f3ef 8c10 	mrs	ip, PRIMASK
    b476:	b672      	cpsid	i
    b478:	2500      	movs	r5, #0
    b47a:	4b0b      	ldr	r3, [pc, #44]	; (b4a8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b47c:	4a0b      	ldr	r2, [pc, #44]	; (b4ac <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b47e:	bf00      	nop
    b480:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b484:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b488:	b12c      	cbz	r4, b496 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b48a:	68d1      	ldr	r1, [r2, #12]
    b48c:	1c49      	adds	r1, r1, #1
    b48e:	60d1      	str	r1, [r2, #12]
    b490:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b494:	e7f4      	b.n	b480 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b496:	68d2      	ldr	r2, [r2, #12]
    b498:	f1bc 0f00 	cmp.w	ip, #0
    b49c:	d100      	bne.n	b4a0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b49e:	b662      	cpsie	i
    b4a0:	e9c0 1200 	strd	r1, r2, [r0]
    b4a4:	bc30      	pop	{r4, r5}
    b4a6:	4770      	bx	lr
    b4a8:	4000b000 	.word	0x4000b000
    b4ac:	200002f8 	.word	0x200002f8

0000b4b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4b4:	f8df 8134 	ldr.w	r8, [pc, #308]	; b5ec <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b4b8:	4605      	mov	r5, r0
    b4ba:	f1a8 0602 	sub.w	r6, r8, #2
    b4be:	f898 3000 	ldrb.w	r3, [r8]
    b4c2:	68b0      	ldr	r0, [r6, #8]
    b4c4:	2b01      	cmp	r3, #1
    b4c6:	bf04      	itt	eq
    b4c8:	42a8      	cmpeq	r0, r5
    b4ca:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4ce:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b4d2:	4a47      	ldr	r2, [pc, #284]	; (b5f0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b4d4:	6011      	str	r1, [r2, #0]
    b4d6:	4948      	ldr	r1, [pc, #288]	; (b5f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b4d8:	4a46      	ldr	r2, [pc, #280]	; (b5f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b4da:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b4de:	f101 0c04 	add.w	ip, r1, #4
    b4e2:	f04f 0400 	mov.w	r4, #0
    b4e6:	2b00      	cmp	r3, #0
    b4e8:	d055      	beq.n	b596 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b4ea:	4a44      	ldr	r2, [pc, #272]	; (b5fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b4ec:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b4f0:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b4f4:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b4f8:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b4fc:	2701      	movs	r7, #1
    b4fe:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b502:	2a00      	cmp	r2, #0
    b504:	bf01      	itttt	eq
    b506:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b50a:	2a00      	cmpeq	r2, #0
    b50c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b510:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b514:	f04f 0a10 	mov.w	sl, #16
    b518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b51c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b520:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b524:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b528:	4a35      	ldr	r2, [pc, #212]	; (b600 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b52a:	f8d2 c000 	ldr.w	ip, [r2]
    b52e:	eba5 0c0c 	sub.w	ip, r5, ip
    b532:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b536:	f1bc 0f02 	cmp.w	ip, #2
    b53a:	d337      	bcc.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b53c:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b540:	d834      	bhi.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b542:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b546:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b54a:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b54e:	b12b      	cbz	r3, b55c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b550:	6811      	ldr	r1, [r2, #0]
    b552:	1a41      	subs	r1, r0, r1
    b554:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b558:	2902      	cmp	r1, #2
    b55a:	d3f9      	bcc.n	b550 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b55c:	6077      	str	r7, [r6, #4]
    b55e:	7034      	strb	r4, [r6, #0]
    b560:	f7ff ff4e 	bl	b400 <MPSL_IRQ_TIMER0_Handler+0x100>
    b564:	4827      	ldr	r0, [pc, #156]	; (b604 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b566:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b56a:	f364 0101 	bfi	r1, r4, #0, #2
    b56e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b572:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b576:	2102      	movs	r1, #2
    b578:	f361 0201 	bfi	r2, r1, #0, #2
    b57c:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b580:	fa9a f1aa 	rbit	r1, sl
    b584:	fab1 f181 	clz	r1, r1
    b588:	2909      	cmp	r1, #9
    b58a:	d917      	bls.n	b5bc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b58c:	f240 3155 	movw	r1, #853	; 0x355
    b590:	a01d      	add	r0, pc, #116	; (adr r0, b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b592:	f000 fe8b 	bl	c2ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b596:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b59a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b59e:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5a2:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b5a6:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b5aa:	e7a5      	b.n	b4f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b5ac:	2000      	movs	r0, #0
    b5ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b5b2:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b5b6:	206c      	movs	r0, #108	; 0x6c
    b5b8:	f000 fea4 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5bc:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b5c0:	60c7      	str	r7, [r0, #12]
    b5c2:	6871      	ldr	r1, [r6, #4]
    b5c4:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b5c8:	f44f 7080 	mov.w	r0, #256	; 0x100
    b5cc:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b5d0:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b5d4:	490f      	ldr	r1, [pc, #60]	; (b614 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b5d6:	05c0      	lsls	r0, r0, #23
    b5d8:	6008      	str	r0, [r1, #0]
    b5da:	2004      	movs	r0, #4
    b5dc:	60b5      	str	r5, [r6, #8]
    b5de:	f888 0001 	strb.w	r0, [r8, #1]
    b5e2:	f888 7000 	strb.w	r7, [r8]
    b5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b5ea:	0000      	.short	0x0000
    b5ec:	200002fa 	.word	0x200002fa
    b5f0:	4001f508 	.word	0x4001f508
    b5f4:	fffbfffd 	.word	0xfffbfffd
    b5f8:	4000b000 	.word	0x4000b000
    b5fc:	fffafffd 	.word	0xfffafffd
    b600:	4000b504 	.word	0x4000b504
    b604:	40008000 	.word	0x40008000
    b608:	5f66726e 	.word	0x5f66726e
    b60c:	656d6974 	.word	0x656d6974
    b610:	00682e72 	.word	0x00682e72
    b614:	4001f504 	.word	0x4001f504

0000b618 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b618:	b570      	push	{r4, r5, r6, lr}
    b61a:	4c2a      	ldr	r4, [pc, #168]	; (b6c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b61c:	68a1      	ldr	r1, [r4, #8]
    b61e:	4281      	cmp	r1, r0
    b620:	bf14      	ite	ne
    b622:	2201      	movne	r2, #1
    b624:	2200      	moveq	r2, #0
    b626:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b6c8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b62a:	f89c 5000 	ldrb.w	r5, [ip]
    b62e:	2d02      	cmp	r5, #2
    b630:	d002      	beq.n	b638 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b632:	2a00      	cmp	r2, #0
    b634:	d034      	beq.n	b6a0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b636:	e002      	b.n	b63e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b638:	2a00      	cmp	r2, #0
    b63a:	bf08      	it	eq
    b63c:	bd70      	popeq	{r4, r5, r6, pc}
    b63e:	7862      	ldrb	r2, [r4, #1]
    b640:	b39a      	cbz	r2, b6aa <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b642:	4b22      	ldr	r3, [pc, #136]	; (b6cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b648:	601a      	str	r2, [r3, #0]
    b64a:	4b21      	ldr	r3, [pc, #132]	; (b6d0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b64c:	1392      	asrs	r2, r2, #14
    b64e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b652:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b656:	2200      	movs	r2, #0
    b658:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b65c:	4a1d      	ldr	r2, [pc, #116]	; (b6d4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b65e:	6816      	ldr	r6, [r2, #0]
    b660:	1b86      	subs	r6, r0, r6
    b662:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b666:	2e02      	cmp	r6, #2
    b668:	d324      	bcc.n	b6b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b66a:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b66e:	d821      	bhi.n	b6b4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b670:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b674:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b678:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b67c:	b12d      	cbz	r5, b68a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b67e:	6813      	ldr	r3, [r2, #0]
    b680:	1acb      	subs	r3, r1, r3
    b682:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b686:	2b02      	cmp	r3, #2
    b688:	d3f9      	bcc.n	b67e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b68a:	4b13      	ldr	r3, [pc, #76]	; (b6d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b68c:	2102      	movs	r1, #2
    b68e:	074a      	lsls	r2, r1, #29
    b690:	601a      	str	r2, [r3, #0]
    b692:	60a0      	str	r0, [r4, #8]
    b694:	2004      	movs	r0, #4
    b696:	f88c 0001 	strb.w	r0, [ip, #1]
    b69a:	f88c 1000 	strb.w	r1, [ip]
    b69e:	bd70      	pop	{r4, r5, r6, pc}
    b6a0:	f240 21aa 	movw	r1, #682	; 0x2aa
    b6a4:	206c      	movs	r0, #108	; 0x6c
    b6a6:	f000 fe2d 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6aa:	f240 21ae 	movw	r1, #686	; 0x2ae
    b6ae:	206c      	movs	r0, #108	; 0x6c
    b6b0:	f000 fe28 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6b4:	2000      	movs	r0, #0
    b6b6:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6ba:	f240 21ba 	movw	r1, #698	; 0x2ba
    b6be:	206c      	movs	r0, #108	; 0x6c
    b6c0:	f000 fe20 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6c4:	200002f8 	.word	0x200002f8
    b6c8:	200002fa 	.word	0x200002fa
    b6cc:	4001f508 	.word	0x4001f508
    b6d0:	4000b000 	.word	0x4000b000
    b6d4:	4000b504 	.word	0x4000b504
    b6d8:	4001f504 	.word	0x4001f504

0000b6dc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b6dc:	4801      	ldr	r0, [pc, #4]	; (b6e4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b6de:	6880      	ldr	r0, [r0, #8]
    b6e0:	4770      	bx	lr
    b6e2:	0000      	.short	0x0000
    b6e4:	200002f8 	.word	0x200002f8

0000b6e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6ec:	4836      	ldr	r0, [pc, #216]	; (b7c8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b6ee:	4a35      	ldr	r2, [pc, #212]	; (b7c4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b6f0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b6f4:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b7cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b6f8:	1d03      	adds	r3, r0, #4
    b6fa:	2100      	movs	r1, #0
    b6fc:	f89c 4000 	ldrb.w	r4, [ip]
    b700:	b184      	cbz	r4, b724 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b702:	4a33      	ldr	r2, [pc, #204]	; (b7d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b704:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b708:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b70c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b710:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b714:	2301      	movs	r3, #1
    b716:	2a00      	cmp	r2, #0
    b718:	bf04      	itt	eq
    b71a:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b71e:	2800      	cmpeq	r0, #0
    b720:	d111      	bne.n	b746 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b722:	e00a      	b.n	b73a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b724:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b728:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b72c:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b730:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b734:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b738:	e7ea      	b.n	b710 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b73a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b73e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b742:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b746:	2c02      	cmp	r4, #2
    b748:	d004      	beq.n	b754 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b74a:	f240 21c6 	movw	r1, #710	; 0x2c6
    b74e:	206c      	movs	r0, #108	; 0x6c
    b750:	f000 fdd8 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b754:	4e1f      	ldr	r6, [pc, #124]	; (b7d4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b756:	6830      	ldr	r0, [r6, #0]
    b758:	4c1f      	ldr	r4, [pc, #124]	; (b7d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b75a:	1cc0      	adds	r0, r0, #3
    b75c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b760:	68a2      	ldr	r2, [r4, #8]
    b762:	4d1e      	ldr	r5, [pc, #120]	; (b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b764:	4290      	cmp	r0, r2
    b766:	d00b      	beq.n	b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b768:	6837      	ldr	r7, [r6, #0]
    b76a:	1bd7      	subs	r7, r2, r7
    b76c:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b770:	2f04      	cmp	r7, #4
    b772:	d305      	bcc.n	b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b774:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b778:	d802      	bhi.n	b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b77a:	f7ff fe99 	bl	b4b0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b77e:	e01b      	b.n	b7b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b780:	6830      	ldr	r0, [r6, #0]
    b782:	1a10      	subs	r0, r2, r0
    b784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b788:	2802      	cmp	r0, #2
    b78a:	d313      	bcc.n	b7b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b78c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b790:	d810      	bhi.n	b7b4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b792:	4a13      	ldr	r2, [pc, #76]	; (b7e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b794:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b798:	6010      	str	r0, [r2, #0]
    b79a:	6063      	str	r3, [r4, #4]
    b79c:	7021      	strb	r1, [r4, #0]
    b79e:	606b      	str	r3, [r5, #4]
    b7a0:	60eb      	str	r3, [r5, #12]
    b7a2:	0040      	lsls	r0, r0, #1
    b7a4:	1f11      	subs	r1, r2, #4
    b7a6:	6008      	str	r0, [r1, #0]
    b7a8:	2004      	movs	r0, #4
    b7aa:	f88c 0001 	strb.w	r0, [ip, #1]
    b7ae:	f88c 3000 	strb.w	r3, [ip]
    b7b2:	e001      	b.n	b7b8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b7b4:	6063      	str	r3, [r4, #4]
    b7b6:	7021      	strb	r1, [r4, #0]
    b7b8:	6860      	ldr	r0, [r4, #4]
    b7ba:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b7c2:	0000      	.short	0x0000
    b7c4:	fffbfffd 	.word	0xfffbfffd
    b7c8:	4000b000 	.word	0x4000b000
    b7cc:	200002fa 	.word	0x200002fa
    b7d0:	fffafffd 	.word	0xfffafffd
    b7d4:	4000b504 	.word	0x4000b504
    b7d8:	200002f8 	.word	0x200002f8
    b7dc:	40008000 	.word	0x40008000
    b7e0:	4001f508 	.word	0x4001f508

0000b7e4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7e8:	4a54      	ldr	r2, [pc, #336]	; (b93c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b7ea:	2500      	movs	r5, #0
    b7ec:	2401      	movs	r4, #1
    b7ee:	f892 c000 	ldrb.w	ip, [r2]
    b7f2:	7853      	ldrb	r3, [r2, #1]
    b7f4:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b7f8:	2807      	cmp	r0, #7
    b7fa:	d27d      	bcs.n	b8f8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b7fc:	e8df f000 	tbb	[pc, r0]
    b800:	04040404 	.word	0x04040404
    b804:	00585858 	.word	0x00585858
    b808:	4a4d      	ldr	r2, [pc, #308]	; (b940 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b80a:	6897      	ldr	r7, [r2, #8]
    b80c:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b810:	bf04      	itt	eq
    b812:	7852      	ldrbeq	r2, [r2, #1]
    b814:	2a00      	cmpeq	r2, #0
    b816:	d003      	beq.n	b820 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b818:	f1bc 0f02 	cmp.w	ip, #2
    b81c:	d005      	beq.n	b82a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b81e:	e026      	b.n	b86e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b820:	f240 3156 	movw	r1, #854	; 0x356
    b824:	206c      	movs	r0, #108	; 0x6c
    b826:	f000 fd6d 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b82a:	1f1a      	subs	r2, r3, #4
    b82c:	b2d2      	uxtb	r2, r2
    b82e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b832:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b836:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b83a:	2200      	movs	r2, #0
    b83c:	f1bc 0f01 	cmp.w	ip, #1
    b840:	d003      	beq.n	b84a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b842:	f1bc 0f02 	cmp.w	ip, #2
    b846:	d008      	beq.n	b85a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b848:	e00e      	b.n	b868 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b84a:	2b04      	cmp	r3, #4
    b84c:	bf24      	itt	cs
    b84e:	6837      	ldrcs	r7, [r6, #0]
    b850:	2f00      	cmpcs	r7, #0
    b852:	bf08      	it	eq
    b854:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b858:	e006      	b.n	b868 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b85a:	2b04      	cmp	r3, #4
    b85c:	bf24      	itt	cs
    b85e:	6837      	ldrcs	r7, [r6, #0]
    b860:	2f00      	cmpcs	r7, #0
    b862:	bf08      	it	eq
    b864:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b868:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b86c:	d1e5      	bne.n	b83a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b86e:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b944 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b872:	f100 0210 	add.w	r2, r0, #16
    b876:	fa04 f202 	lsl.w	r2, r4, r2
    b87a:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b87e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b882:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b886:	b2db      	uxtb	r3, r3
    b888:	4463      	add	r3, ip
    b88a:	601c      	str	r4, [r3, #0]
    b88c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b890:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b894:	eba1 0303 	sub.w	r3, r1, r3
    b898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b89c:	2b03      	cmp	r3, #3
    b89e:	bf26      	itte	cs
    b8a0:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b8a4:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b8a8:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b8ac:	d237      	bcs.n	b91e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b8ae:	e03c      	b.n	b92a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b8b0:	f1bc 0f00 	cmp.w	ip, #0
    b8b4:	d006      	beq.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b8b6:	4283      	cmp	r3, r0
    b8b8:	d104      	bne.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b8ba:	f240 3176 	movw	r1, #886	; 0x376
    b8be:	206c      	movs	r0, #108	; 0x6c
    b8c0:	f000 fd20 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8c4:	1f02      	subs	r2, r0, #4
    b8c6:	b2d3      	uxtb	r3, r2
    b8c8:	2b03      	cmp	r3, #3
    b8ca:	d304      	bcc.n	b8d6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b8cc:	f240 11d1 	movw	r1, #465	; 0x1d1
    b8d0:	206c      	movs	r0, #108	; 0x6c
    b8d2:	f000 fd17 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8d6:	f8df c070 	ldr.w	ip, [pc, #112]	; b948 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b8da:	f103 0210 	add.w	r2, r3, #16
    b8de:	fa04 f202 	lsl.w	r2, r4, r2
    b8e2:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b8e6:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b8ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b8ee:	f84c 5003 	str.w	r5, [ip, r3]
    b8f2:	4b16      	ldr	r3, [pc, #88]	; (b94c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b8f4:	681b      	ldr	r3, [r3, #0]
    b8f6:	e000      	b.n	b8fa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b8f8:	e01a      	b.n	b930 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b8fa:	1f00      	subs	r0, r0, #4
    b8fc:	1acb      	subs	r3, r1, r3
    b8fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b902:	b2c0      	uxtb	r0, r0
    b904:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b908:	2b02      	cmp	r3, #2
    b90a:	d30b      	bcc.n	b924 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b90c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b910:	d808      	bhi.n	b924 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b912:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b916:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b91a:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b91e:	2001      	movs	r0, #1
    b920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b924:	2100      	movs	r1, #0
    b926:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b92a:	2000      	movs	r0, #0
    b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b930:	f240 317a 	movw	r1, #890	; 0x37a
    b934:	206c      	movs	r0, #108	; 0x6c
    b936:	f000 fce5 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b93a:	0000      	.short	0x0000
    b93c:	200002fa 	.word	0x200002fa
    b940:	200002f8 	.word	0x200002f8
    b944:	40008000 	.word	0x40008000
    b948:	4000b000 	.word	0x4000b000
    b94c:	4000b504 	.word	0x4000b504

0000b950 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b954:	2601      	movs	r6, #1
    b956:	2700      	movs	r7, #0
    b958:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b95c:	2807      	cmp	r0, #7
    b95e:	d251      	bcs.n	ba04 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b960:	e8df f000 	tbb	[pc, r0]
    b964:	04040404 	.word	0x04040404
    b968:	00191919 	.word	0x00191919
    b96c:	f100 0110 	add.w	r1, r0, #16
    b970:	fa06 f201 	lsl.w	r2, r6, r1
    b974:	4926      	ldr	r1, [pc, #152]	; (ba10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b976:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b97a:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b97e:	2200      	movs	r2, #0
    b980:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b984:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b988:	508f      	str	r7, [r1, r2]
    b98a:	4922      	ldr	r1, [pc, #136]	; (ba14 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b98c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b990:	9000      	str	r0, [sp, #0]
    b992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b996:	4d20      	ldr	r5, [pc, #128]	; (ba18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b998:	1f01      	subs	r1, r0, #4
    b99a:	b2cc      	uxtb	r4, r1
    b99c:	7829      	ldrb	r1, [r5, #0]
    b99e:	b179      	cbz	r1, b9c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9a0:	786a      	ldrb	r2, [r5, #1]
    b9a2:	4282      	cmp	r2, r0
    b9a4:	d10c      	bne.n	b9c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9a6:	4a1d      	ldr	r2, [pc, #116]	; (ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    b9a8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b9ac:	6010      	str	r0, [r2, #0]
    b9ae:	2901      	cmp	r1, #1
    b9b0:	bf08      	it	eq
    b9b2:	f7ff fd25 	bleq	b400 <MPSL_IRQ_TIMER0_Handler+0x100>
    b9b6:	702f      	strb	r7, [r5, #0]
    b9b8:	4919      	ldr	r1, [pc, #100]	; (ba20 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    b9ba:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    b9be:	6088      	str	r0, [r1, #8]
    b9c0:	4918      	ldr	r1, [pc, #96]	; (ba24 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    b9c2:	f104 0010 	add.w	r0, r4, #16
    b9c6:	fa06 f000 	lsl.w	r0, r6, r0
    b9ca:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    b9ce:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    b9d2:	00a0      	lsls	r0, r4, #2
    b9d4:	4408      	add	r0, r1
    b9d6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b9da:	4a13      	ldr	r2, [pc, #76]	; (ba28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    b9dc:	6812      	ldr	r2, [r2, #0]
    b9de:	1a80      	subs	r0, r0, r2
    b9e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9e4:	2802      	cmp	r0, #2
    b9e6:	d307      	bcc.n	b9f8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    b9e8:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    b9ec:	2000      	movs	r0, #0
    b9ee:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    b9f2:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    b9f6:	500f      	str	r7, [r1, r0]
    b9f8:	480c      	ldr	r0, [pc, #48]	; (ba2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    b9fa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    b9fe:	9000      	str	r0, [sp, #0]
    ba00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba04:	f240 31fe 	movw	r1, #1022	; 0x3fe
    ba08:	206c      	movs	r0, #108	; 0x6c
    ba0a:	f000 fc7b 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba0e:	0000      	.short	0x0000
    ba10:	40008000 	.word	0x40008000
    ba14:	40008140 	.word	0x40008140
    ba18:	200002fa 	.word	0x200002fa
    ba1c:	4001f508 	.word	0x4001f508
    ba20:	200002f8 	.word	0x200002f8
    ba24:	4000b000 	.word	0x4000b000
    ba28:	4000b504 	.word	0x4000b504
    ba2c:	4000b140 	.word	0x4000b140

0000ba30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    ba30:	4825      	ldr	r0, [pc, #148]	; (bac8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    ba32:	4a24      	ldr	r2, [pc, #144]	; (bac4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    ba34:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba38:	4924      	ldr	r1, [pc, #144]	; (bacc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    ba3a:	1d03      	adds	r3, r0, #4
    ba3c:	f891 c000 	ldrb.w	ip, [r1]
    ba40:	2100      	movs	r1, #0
    ba42:	f1bc 0f00 	cmp.w	ip, #0
    ba46:	d010      	beq.n	ba6a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    ba48:	4a21      	ldr	r2, [pc, #132]	; (bad0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    ba4a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    ba4e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    ba52:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ba56:	bf00      	nop
    ba58:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    ba5c:	2a00      	cmp	r2, #0
    ba5e:	bf04      	itt	eq
    ba60:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    ba64:	2800      	cmpeq	r0, #0
    ba66:	d111      	bne.n	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    ba68:	e00a      	b.n	ba80 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    ba6a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    ba6e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    ba72:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    ba76:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    ba7a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    ba7e:	e7eb      	b.n	ba58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    ba80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ba84:	f44f 6000 	mov.w	r0, #2048	; 0x800
    ba88:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    ba8c:	4811      	ldr	r0, [pc, #68]	; (bad4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    ba8e:	f04f 32ff 	mov.w	r2, #4294967295
    ba92:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba96:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    ba9a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    ba9e:	f100 0204 	add.w	r2, r0, #4
    baa2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    baa6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    baaa:	f102 0204 	add.w	r2, r2, #4
    baae:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bab2:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bab6:	f102 0204 	add.w	r2, r2, #4
    baba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    babe:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bac2:	4770      	bx	lr
    bac4:	fffbfffd 	.word	0xfffbfffd
    bac8:	4000b000 	.word	0x4000b000
    bacc:	200002fa 	.word	0x200002fa
    bad0:	fffafffd 	.word	0xfffafffd
    bad4:	40008000 	.word	0x40008000

0000bad8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bad8:	b510      	push	{r4, lr}
    bada:	2807      	cmp	r0, #7
    badc:	d20d      	bcs.n	bafa <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bade:	e8df f000 	tbb	[pc, r0]
    bae2:	0404      	.short	0x0404
    bae4:	06060404 	.word	0x06060404
    bae8:	0006      	.short	0x0006
    baea:	4906      	ldr	r1, [pc, #24]	; (bb04 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    baec:	e002      	b.n	baf4 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    baee:	1f00      	subs	r0, r0, #4
    baf0:	4905      	ldr	r1, [pc, #20]	; (bb08 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    baf2:	b2c0      	uxtb	r0, r0
    baf4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    baf8:	bd10      	pop	{r4, pc}
    bafa:	f240 319e 	movw	r1, #926	; 0x39e
    bafe:	206c      	movs	r0, #108	; 0x6c
    bb00:	f000 fc00 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb04:	40008140 	.word	0x40008140
    bb08:	4000b140 	.word	0x4000b140

0000bb0c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bb0c:	b570      	push	{r4, r5, r6, lr}
    bb0e:	481f      	ldr	r0, [pc, #124]	; (bb8c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bb10:	2400      	movs	r4, #0
    bb12:	2104      	movs	r1, #4
    bb14:	7004      	strb	r4, [r0, #0]
    bb16:	1e80      	subs	r0, r0, #2
    bb18:	7001      	strb	r1, [r0, #0]
    bb1a:	0589      	lsls	r1, r1, #22
    bb1c:	60c4      	str	r4, [r0, #12]
    bb1e:	6081      	str	r1, [r0, #8]
    bb20:	f7ff fc6e 	bl	b400 <MPSL_IRQ_TIMER0_Handler+0x100>
    bb24:	2501      	movs	r5, #1
    bb26:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bb2a:	02eb      	lsls	r3, r5, #11
    bb2c:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bb30:	f3bf 8f4f 	dsb	sy
    bb34:	f3bf 8f6f 	isb	sy
    bb38:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bb3c:	4814      	ldr	r0, [pc, #80]	; (bb90 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bb3e:	6045      	str	r5, [r0, #4]
    bb40:	6085      	str	r5, [r0, #8]
    bb42:	4914      	ldr	r1, [pc, #80]	; (bb94 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bb44:	680a      	ldr	r2, [r1, #0]
    bb46:	2a00      	cmp	r2, #0
    bb48:	d1fc      	bne.n	bb44 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bb4a:	1e51      	subs	r1, r2, #1
    bb4c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bb50:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bb54:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bb58:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bb5c:	490e      	ldr	r1, [pc, #56]	; (bb98 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bb5e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bb62:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bb66:	1d09      	adds	r1, r1, #4
    bb68:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bb6c:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bb70:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bb74:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bb78:	6005      	str	r5, [r0, #0]
    bb7a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bb7e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bb82:	2102      	movs	r1, #2
    bb84:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bb88:	bd70      	pop	{r4, r5, r6, pc}
    bb8a:	0000      	.short	0x0000
    bb8c:	200002fa 	.word	0x200002fa
    bb90:	4000b000 	.word	0x4000b000
    bb94:	4000b504 	.word	0x4000b504
    bb98:	4000b004 	.word	0x4000b004

0000bb9c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bb9c:	4808      	ldr	r0, [pc, #32]	; (bbc0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bb9e:	f990 0000 	ldrsb.w	r0, [r0]
    bba2:	2800      	cmp	r0, #0
    bba4:	bfb8      	it	lt
    bba6:	4770      	bxlt	lr
    bba8:	f000 011f 	and.w	r1, r0, #31
    bbac:	2201      	movs	r2, #1
    bbae:	fa02 f101 	lsl.w	r1, r2, r1
    bbb2:	0940      	lsrs	r0, r0, #5
    bbb4:	0080      	lsls	r0, r0, #2
    bbb6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bbba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bbbe:	4770      	bx	lr
    bbc0:	20000380 	.word	0x20000380

0000bbc4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bbc4:	4803      	ldr	r0, [pc, #12]	; (bbd4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bbc6:	7800      	ldrb	r0, [r0, #0]
    bbc8:	2803      	cmp	r0, #3
    bbca:	bf0c      	ite	eq
    bbcc:	2001      	moveq	r0, #1
    bbce:	2000      	movne	r0, #0
    bbd0:	4770      	bx	lr
    bbd2:	0000      	.short	0x0000
    bbd4:	20000358 	.word	0x20000358

0000bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bbd8:	4801      	ldr	r0, [pc, #4]	; (bbe0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bbda:	8840      	ldrh	r0, [r0, #2]
    bbdc:	4770      	bx	lr
    bbde:	0000      	.short	0x0000
    bbe0:	20000358 	.word	0x20000358

0000bbe4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bbe4:	4803      	ldr	r0, [pc, #12]	; (bbf4 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bbe6:	7800      	ldrb	r0, [r0, #0]
    bbe8:	2802      	cmp	r0, #2
    bbea:	bf16      	itet	ne
    bbec:	2803      	cmpne	r0, #3
    bbee:	2001      	moveq	r0, #1
    bbf0:	2000      	movne	r0, #0
    bbf2:	4770      	bx	lr
    bbf4:	20000358 	.word	0x20000358

0000bbf8 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bbf8:	4802      	ldr	r0, [pc, #8]	; (bc04 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bbfa:	2100      	movs	r1, #0
    bbfc:	7001      	strb	r1, [r0, #0]
    bbfe:	8041      	strh	r1, [r0, #2]
    bc00:	4770      	bx	lr
    bc02:	0000      	.short	0x0000
    bc04:	20000358 	.word	0x20000358

0000bc08 <MPSL_IRQ_CLOCK_Handler>:
    bc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc0c:	4c16      	ldr	r4, [pc, #88]	; (bc68 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bc0e:	7a60      	ldrb	r0, [r4, #9]
    bc10:	2800      	cmp	r0, #0
    bc12:	d027      	beq.n	bc64 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bc14:	f44f 7180 	mov.w	r1, #256	; 0x100
    bc18:	058d      	lsls	r5, r1, #22
    bc1a:	4628      	mov	r0, r5
    bc1c:	f004 fe9e 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bc20:	4680      	mov	r8, r0
    bc22:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc26:	4628      	mov	r0, r5
    bc28:	f004 fe98 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bc2c:	2600      	movs	r6, #0
    bc2e:	4607      	mov	r7, r0
    bc30:	f1b8 0f00 	cmp.w	r8, #0
    bc34:	d009      	beq.n	bc4a <MPSL_IRQ_CLOCK_Handler+0x42>
    bc36:	2001      	movs	r0, #1
    bc38:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bc3c:	7920      	ldrb	r0, [r4, #4]
    bc3e:	b120      	cbz	r0, bc4a <MPSL_IRQ_CLOCK_Handler+0x42>
    bc40:	7126      	strb	r6, [r4, #4]
    bc42:	69e0      	ldr	r0, [r4, #28]
    bc44:	b108      	cbz	r0, bc4a <MPSL_IRQ_CLOCK_Handler+0x42>
    bc46:	4780      	blx	r0
    bc48:	61e6      	str	r6, [r4, #28]
    bc4a:	b137      	cbz	r7, bc5a <MPSL_IRQ_CLOCK_Handler+0x52>
    bc4c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bc50:	2002      	movs	r0, #2
    bc52:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bc56:	f000 fa75 	bl	c144 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bc5a:	4640      	mov	r0, r8
    bc5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bc60:	f000 b858 	b.w	bd14 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc68:	20000308 	.word	0x20000308
    bc6c:	b510      	push	{r4, lr}
    bc6e:	f004 ff1f 	bl	10ab0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bc72:	b930      	cbnz	r0, bc82 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bc74:	f004 ff3d 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc78:	b918      	cbnz	r0, bc82 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bc7a:	f004 ff70 	bl	10b5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bc7e:	2800      	cmp	r0, #0
    bc80:	d002      	beq.n	bc88 <MPSL_IRQ_CLOCK_Handler+0x80>
    bc82:	4902      	ldr	r1, [pc, #8]	; (bc8c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bc84:	2002      	movs	r0, #2
    bc86:	6008      	str	r0, [r1, #0]
    bc88:	bd10      	pop	{r4, pc}
    bc8a:	0000      	.short	0x0000
    bc8c:	40000c34 	.word	0x40000c34
    bc90:	b570      	push	{r4, r5, r6, lr}
    bc92:	f000 f99b 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bc96:	f000 fabd 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bc9a:	4c09      	ldr	r4, [pc, #36]	; (bcc0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bc9c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bca0:	b130      	cbz	r0, bcb0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bca2:	f7ff ffe3 	bl	bc6c <MPSL_IRQ_CLOCK_Handler+0x64>
    bca6:	2001      	movs	r0, #1
    bca8:	6128      	str	r0, [r5, #16]
    bcaa:	2004      	movs	r0, #4
    bcac:	72a0      	strb	r0, [r4, #10]
    bcae:	e004      	b.n	bcba <MPSL_IRQ_CLOCK_Handler+0xb2>
    bcb0:	2003      	movs	r0, #3
    bcb2:	72a0      	strb	r0, [r4, #10]
    bcb4:	2001      	movs	r0, #1
    bcb6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bcba:	2000      	movs	r0, #0
    bcbc:	71e0      	strb	r0, [r4, #7]
    bcbe:	bd70      	pop	{r4, r5, r6, pc}
    bcc0:	20000308 	.word	0x20000308
    bcc4:	b570      	push	{r4, r5, r6, lr}
    bcc6:	4c12      	ldr	r4, [pc, #72]	; (bd10 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bcc8:	79a0      	ldrb	r0, [r4, #6]
    bcca:	b1e0      	cbz	r0, bd06 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bccc:	79e1      	ldrb	r1, [r4, #7]
    bcce:	1e40      	subs	r0, r0, #1
    bcd0:	4281      	cmp	r1, r0
    bcd2:	da18      	bge.n	bd06 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bcd4:	f000 fa9e 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bcd8:	4605      	mov	r5, r0
    bcda:	f000 fb87 	bl	c3ec <mpsl_temperature_get>
    bcde:	79a1      	ldrb	r1, [r4, #6]
    bce0:	2901      	cmp	r1, #1
    bce2:	d902      	bls.n	bcea <MPSL_IRQ_CLOCK_Handler+0xe2>
    bce4:	79e1      	ldrb	r1, [r4, #7]
    bce6:	1c49      	adds	r1, r1, #1
    bce8:	71e1      	strb	r1, [r4, #7]
    bcea:	b10d      	cbz	r5, bcf0 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bcec:	6961      	ldr	r1, [r4, #20]
    bcee:	e000      	b.n	bcf2 <MPSL_IRQ_CLOCK_Handler+0xea>
    bcf0:	6921      	ldr	r1, [r4, #16]
    bcf2:	1a41      	subs	r1, r0, r1
    bcf4:	2902      	cmp	r1, #2
    bcf6:	da02      	bge.n	bcfe <MPSL_IRQ_CLOCK_Handler+0xf6>
    bcf8:	f111 0f02 	cmn.w	r1, #2
    bcfc:	dc07      	bgt.n	bd0e <MPSL_IRQ_CLOCK_Handler+0x106>
    bcfe:	b10d      	cbz	r5, bd04 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bd00:	6160      	str	r0, [r4, #20]
    bd02:	e000      	b.n	bd06 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd04:	6120      	str	r0, [r4, #16]
    bd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd0a:	f7ff bfc1 	b.w	bc90 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd0e:	bd70      	pop	{r4, r5, r6, pc}
    bd10:	20000308 	.word	0x20000308
    bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd18:	4606      	mov	r6, r0
    bd1a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd1e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bd22:	4628      	mov	r0, r5
    bd24:	f004 fe1a 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd28:	4680      	mov	r8, r0
    bd2a:	f44f 7188 	mov.w	r1, #272	; 0x110
    bd2e:	4628      	mov	r0, r5
    bd30:	f004 fe14 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bd34:	4c27      	ldr	r4, [pc, #156]	; (bdd4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bd36:	4682      	mov	sl, r0
    bd38:	7827      	ldrb	r7, [r4, #0]
    bd3a:	f104 0008 	add.w	r0, r4, #8
    bd3e:	f004 fe81 	bl	10a44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bd42:	b110      	cbz	r0, bd4a <MPSL_IRQ_CLOCK_Handler+0x142>
    bd44:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bd48:	e016      	b.n	bd78 <MPSL_IRQ_CLOCK_Handler+0x170>
    bd4a:	f04f 0901 	mov.w	r9, #1
    bd4e:	b146      	cbz	r6, bd62 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bd50:	7aa0      	ldrb	r0, [r4, #10]
    bd52:	2803      	cmp	r0, #3
    bd54:	d105      	bne.n	bd62 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bd56:	2004      	movs	r0, #4
    bd58:	72a0      	strb	r0, [r4, #10]
    bd5a:	f7ff ff87 	bl	bc6c <MPSL_IRQ_CLOCK_Handler+0x64>
    bd5e:	f8c5 9010 	str.w	r9, [r5, #16]
    bd62:	2600      	movs	r6, #0
    bd64:	f1b8 0f00 	cmp.w	r8, #0
    bd68:	d018      	beq.n	bd9c <MPSL_IRQ_CLOCK_Handler+0x194>
    bd6a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bd6e:	7aa0      	ldrb	r0, [r4, #10]
    bd70:	2804      	cmp	r0, #4
    bd72:	d004      	beq.n	bd7e <MPSL_IRQ_CLOCK_Handler+0x176>
    bd74:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bd78:	206d      	movs	r0, #109	; 0x6d
    bd7a:	f000 fac3 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd7e:	f004 fe97 	bl	10ab0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd82:	b928      	cbnz	r0, bd90 <MPSL_IRQ_CLOCK_Handler+0x188>
    bd84:	f004 feb5 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd88:	b910      	cbnz	r0, bd90 <MPSL_IRQ_CLOCK_Handler+0x188>
    bd8a:	f004 fee8 	bl	10b5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd8e:	b108      	cbz	r0, bd94 <MPSL_IRQ_CLOCK_Handler+0x18c>
    bd90:	4811      	ldr	r0, [pc, #68]	; (bdd8 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bd92:	6006      	str	r6, [r0, #0]
    bd94:	2002      	movs	r0, #2
    bd96:	72a0      	strb	r0, [r4, #10]
    bd98:	f000 f8fc 	bl	bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bd9c:	f1ba 0f00 	cmp.w	sl, #0
    bda0:	d008      	beq.n	bdb4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bda2:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bda6:	7aa0      	ldrb	r0, [r4, #10]
    bda8:	2802      	cmp	r0, #2
    bdaa:	d101      	bne.n	bdb0 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bdac:	f7ff ff8a 	bl	bcc4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    bdb0:	f8c5 9014 	str.w	r9, [r5, #20]
    bdb4:	b13f      	cbz	r7, bdc6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    bdb6:	7026      	strb	r6, [r4, #0]
    bdb8:	7aa0      	ldrb	r0, [r4, #10]
    bdba:	2802      	cmp	r0, #2
    bdbc:	d101      	bne.n	bdc2 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bdbe:	f7ff ff67 	bl	bc90 <MPSL_IRQ_CLOCK_Handler+0x88>
    bdc2:	f000 f8e7 	bl	bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bdc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bdca:	4802      	ldr	r0, [pc, #8]	; (bdd4 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bdcc:	3008      	adds	r0, #8
    bdce:	f004 be50 	b.w	10a72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bdd2:	0000      	.short	0x0000
    bdd4:	20000308 	.word	0x20000308
    bdd8:	40000c34 	.word	0x40000c34
    bddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bde0:	4c49      	ldr	r4, [pc, #292]	; (bf08 <MPSL_IRQ_CLOCK_Handler+0x300>)
    bde2:	2700      	movs	r7, #0
    bde4:	4606      	mov	r6, r0
    bde6:	61a7      	str	r7, [r4, #24]
    bde8:	7842      	ldrb	r2, [r0, #1]
    bdea:	7881      	ldrb	r1, [r0, #2]
    bdec:	7800      	ldrb	r0, [r0, #0]
    bdee:	72e0      	strb	r0, [r4, #11]
    bdf0:	7162      	strb	r2, [r4, #5]
    bdf2:	71a1      	strb	r1, [r4, #6]
    bdf4:	71e7      	strb	r7, [r4, #7]
    bdf6:	f04f 0801 	mov.w	r8, #1
    bdfa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdfe:	2805      	cmp	r0, #5
    be00:	d225      	bcs.n	be4e <MPSL_IRQ_CLOCK_Handler+0x246>
    be02:	e8df f000 	tbb	[pc, r0]
    be06:	0310      	.short	0x0310
    be08:	00222006 	.word	0x00222006
    be0c:	f8c4 8018 	str.w	r8, [r4, #24]
    be10:	e009      	b.n	be26 <MPSL_IRQ_CLOCK_Handler+0x21e>
    be12:	f000 f8db 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    be16:	2101      	movs	r1, #1
    be18:	4628      	mov	r0, r5
    be1a:	f004 fda4 	bl	10966 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    be1e:	2800      	cmp	r0, #0
    be20:	d0f9      	beq.n	be16 <MPSL_IRQ_CLOCK_Handler+0x20e>
    be22:	2002      	movs	r0, #2
    be24:	61a0      	str	r0, [r4, #24]
    be26:	f004 fdca 	bl	109be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    be2a:	b1c0      	cbz	r0, be5e <MPSL_IRQ_CLOCK_Handler+0x256>
    be2c:	f000 fa0c 	bl	c248 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    be30:	7e21      	ldrb	r1, [r4, #24]
    be32:	f001 0103 	and.w	r1, r1, #3
    be36:	4288      	cmp	r0, r1
    be38:	d111      	bne.n	be5e <MPSL_IRQ_CLOCK_Handler+0x256>
    be3a:	79b0      	ldrb	r0, [r6, #6]
    be3c:	b160      	cbz	r0, be58 <MPSL_IRQ_CLOCK_Handler+0x250>
    be3e:	2002      	movs	r0, #2
    be40:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    be44:	e044      	b.n	bed0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    be46:	4831      	ldr	r0, [pc, #196]	; (bf0c <MPSL_IRQ_CLOCK_Handler+0x304>)
    be48:	e7ec      	b.n	be24 <MPSL_IRQ_CLOCK_Handler+0x21c>
    be4a:	4831      	ldr	r0, [pc, #196]	; (bf10 <MPSL_IRQ_CLOCK_Handler+0x308>)
    be4c:	e7ea      	b.n	be24 <MPSL_IRQ_CLOCK_Handler+0x21c>
    be4e:	f240 313d 	movw	r1, #829	; 0x33d
    be52:	206d      	movs	r0, #109	; 0x6d
    be54:	f000 fa56 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be58:	f000 f9ca 	bl	c1f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    be5c:	e038      	b.n	bed0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    be5e:	f8c5 800c 	str.w	r8, [r5, #12]
    be62:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    be66:	69a0      	ldr	r0, [r4, #24]
    be68:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    be6c:	f004 fe0c 	bl	10a88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    be70:	b940      	cbnz	r0, be84 <MPSL_IRQ_CLOCK_Handler+0x27c>
    be72:	f004 fe13 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    be76:	b928      	cbnz	r0, be84 <MPSL_IRQ_CLOCK_Handler+0x27c>
    be78:	f004 fe27 	bl	10aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    be7c:	b910      	cbnz	r0, be84 <MPSL_IRQ_CLOCK_Handler+0x27c>
    be7e:	f004 fe38 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be82:	b138      	cbz	r0, be94 <MPSL_IRQ_CLOCK_Handler+0x28c>
    be84:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    be88:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    be8c:	4921      	ldr	r1, [pc, #132]	; (bf14 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    be8e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    be92:	6008      	str	r0, [r1, #0]
    be94:	f004 fdf8 	bl	10a88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    be98:	b940      	cbnz	r0, beac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    be9a:	f004 fdff 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    be9e:	b928      	cbnz	r0, beac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bea0:	f004 fe13 	bl	10aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bea4:	b910      	cbnz	r0, beac <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bea6:	f004 fe24 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    beaa:	b118      	cbz	r0, beb4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    beac:	4919      	ldr	r1, [pc, #100]	; (bf14 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    beae:	3110      	adds	r1, #16
    beb0:	f8c1 8000 	str.w	r8, [r1]
    beb4:	f8c5 8008 	str.w	r8, [r5, #8]
    beb8:	2002      	movs	r0, #2
    beba:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bebe:	79b0      	ldrb	r0, [r6, #6]
    bec0:	b930      	cbnz	r0, bed0 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bec2:	f000 f829 	bl	bf18 <MPSL_IRQ_CLOCK_Handler+0x310>
    bec6:	2002      	movs	r0, #2
    bec8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    becc:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bed0:	79a0      	ldrb	r0, [r4, #6]
    bed2:	b170      	cbz	r0, bef2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bed4:	7830      	ldrb	r0, [r6, #0]
    bed6:	b960      	cbnz	r0, bef2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bed8:	f000 f99c 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bedc:	4606      	mov	r6, r0
    bede:	f000 fa85 	bl	c3ec <mpsl_temperature_get>
    bee2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bee6:	b116      	cbz	r6, beee <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bee8:	e9c4 1004 	strd	r1, r0, [r4, #16]
    beec:	e001      	b.n	bef2 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    beee:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bef2:	2101      	movs	r1, #1
    bef4:	4628      	mov	r0, r5
    bef6:	f004 fd36 	bl	10966 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    befa:	b108      	cbz	r0, bf00 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    befc:	f000 f984 	bl	c208 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bf00:	72a7      	strb	r7, [r4, #10]
    bf02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf06:	0000      	.short	0x0000
    bf08:	20000308 	.word	0x20000308
    bf0c:	00020001 	.word	0x00020001
    bf10:	00030001 	.word	0x00030001
    bf14:	4000053c 	.word	0x4000053c
    bf18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bf1c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf20:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bf24:	f010 0f02 	tst.w	r0, #2
    bf28:	d011      	beq.n	bf4e <MPSL_IRQ_CLOCK_Handler+0x346>
    bf2a:	4c16      	ldr	r4, [pc, #88]	; (bf84 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bf2c:	6820      	ldr	r0, [r4, #0]
    bf2e:	43c0      	mvns	r0, r0
    bf30:	f340 1600 	sbfx	r6, r0, #4, #1
    bf34:	6820      	ldr	r0, [r4, #0]
    bf36:	f040 0010 	orr.w	r0, r0, #16
    bf3a:	6020      	str	r0, [r4, #0]
    bf3c:	f44f 7782 	mov.w	r7, #260	; 0x104
    bf40:	4639      	mov	r1, r7
    bf42:	4628      	mov	r0, r5
    bf44:	1c76      	adds	r6, r6, #1
    bf46:	f004 fd09 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bf4a:	b128      	cbz	r0, bf58 <MPSL_IRQ_CLOCK_Handler+0x350>
    bf4c:	e00a      	b.n	bf64 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bf4e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bf52:	206d      	movs	r0, #109	; 0x6d
    bf54:	f000 f9d6 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf58:	f004 fe0d 	bl	10b76 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bf5c:	e002      	b.n	bf64 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bf5e:	bf00      	nop
    bf60:	f004 fe07 	bl	10b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bf64:	4639      	mov	r1, r7
    bf66:	4628      	mov	r0, r5
    bf68:	f004 fcf8 	bl	1095c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bf6c:	2800      	cmp	r0, #0
    bf6e:	d0f7      	beq.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x358>
    bf70:	f000 f93e 	bl	c1f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    bf74:	2e00      	cmp	r6, #0
    bf76:	d103      	bne.n	bf80 <MPSL_IRQ_CLOCK_Handler+0x378>
    bf78:	6820      	ldr	r0, [r4, #0]
    bf7a:	f020 0010 	bic.w	r0, r0, #16
    bf7e:	6020      	str	r0, [r4, #0]
    bf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf84:	e000ed10 	.word	0xe000ed10

0000bf88 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    bf88:	4801      	ldr	r0, [pc, #4]	; (bf90 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    bf8a:	89c0      	ldrh	r0, [r0, #14]
    bf8c:	4770      	bx	lr
    bf8e:	0000      	.short	0x0000
    bf90:	20000308 	.word	0x20000308

0000bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    bf94:	b510      	push	{r4, lr}
    bf96:	f3ef 8410 	mrs	r4, PRIMASK
    bf9a:	b672      	cpsid	i
    bf9c:	480a      	ldr	r0, [pc, #40]	; (bfc8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    bf9e:	7841      	ldrb	r1, [r0, #1]
    bfa0:	b129      	cbz	r1, bfae <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    bfa2:	7841      	ldrb	r1, [r0, #1]
    bfa4:	1e49      	subs	r1, r1, #1
    bfa6:	7041      	strb	r1, [r0, #1]
    bfa8:	7841      	ldrb	r1, [r0, #1]
    bfaa:	b129      	cbz	r1, bfb8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    bfac:	e008      	b.n	bfc0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bfae:	f240 1119 	movw	r1, #281	; 0x119
    bfb2:	206d      	movs	r0, #109	; 0x6d
    bfb4:	f000 f9a6 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfb8:	7880      	ldrb	r0, [r0, #2]
    bfba:	b908      	cbnz	r0, bfc0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    bfbc:	f000 f938 	bl	c230 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    bfc0:	2c00      	cmp	r4, #0
    bfc2:	d100      	bne.n	bfc6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    bfc4:	b662      	cpsie	i
    bfc6:	bd10      	pop	{r4, pc}
    bfc8:	20000308 	.word	0x20000308

0000bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    bfcc:	b510      	push	{r4, lr}
    bfce:	f3ef 8410 	mrs	r4, PRIMASK
    bfd2:	b672      	cpsid	i
    bfd4:	4806      	ldr	r0, [pc, #24]	; (bff0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    bfd6:	7841      	ldrb	r1, [r0, #1]
    bfd8:	1c49      	adds	r1, r1, #1
    bfda:	7041      	strb	r1, [r0, #1]
    bfdc:	7840      	ldrb	r0, [r0, #1]
    bfde:	2801      	cmp	r0, #1
    bfe0:	d101      	bne.n	bfe6 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    bfe2:	f004 fcd7 	bl	10994 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    bfe6:	2c00      	cmp	r4, #0
    bfe8:	d100      	bne.n	bfec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    bfea:	b662      	cpsie	i
    bfec:	bd10      	pop	{r4, pc}
    bfee:	0000      	.short	0x0000
    bff0:	20000308 	.word	0x20000308

0000bff4 <mpsl_clock_hfclk_release>:
    bff4:	4805      	ldr	r0, [pc, #20]	; (c00c <mpsl_clock_hfclk_release+0x18>)
    bff6:	b510      	push	{r4, lr}
    bff8:	78c1      	ldrb	r1, [r0, #3]
    bffa:	b121      	cbz	r1, c006 <mpsl_clock_hfclk_release+0x12>
    bffc:	2100      	movs	r1, #0
    bffe:	7101      	strb	r1, [r0, #4]
    c000:	70c1      	strb	r1, [r0, #3]
    c002:	f7ff ffc7 	bl	bf94 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c006:	2000      	movs	r0, #0
    c008:	bd10      	pop	{r4, pc}
    c00a:	0000      	.short	0x0000
    c00c:	20000308 	.word	0x20000308

0000c010 <mpsl_clock_hfclk_request>:
    c010:	b570      	push	{r4, r5, r6, lr}
    c012:	4c0c      	ldr	r4, [pc, #48]	; (c044 <mpsl_clock_hfclk_request+0x34>)
    c014:	78e1      	ldrb	r1, [r4, #3]
    c016:	b961      	cbnz	r1, c032 <mpsl_clock_hfclk_request+0x22>
    c018:	2501      	movs	r5, #1
    c01a:	70e5      	strb	r5, [r4, #3]
    c01c:	61e0      	str	r0, [r4, #28]
    c01e:	f7ff ffd5 	bl	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c022:	f000 f8f7 	bl	c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c026:	b130      	cbz	r0, c036 <mpsl_clock_hfclk_request+0x26>
    c028:	69e0      	ldr	r0, [r4, #28]
    c02a:	b110      	cbz	r0, c032 <mpsl_clock_hfclk_request+0x22>
    c02c:	4780      	blx	r0
    c02e:	2000      	movs	r0, #0
    c030:	61e0      	str	r0, [r4, #28]
    c032:	2000      	movs	r0, #0
    c034:	bd70      	pop	{r4, r5, r6, pc}
    c036:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c03a:	7125      	strb	r5, [r4, #4]
    c03c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c040:	e7f7      	b.n	c032 <mpsl_clock_hfclk_request+0x22>
    c042:	0000      	.short	0x0000
    c044:	20000308 	.word	0x20000308

0000c048 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c04c:	0005      	movs	r5, r0
    c04e:	f06f 0015 	mvn.w	r0, #21
    c052:	d03f      	beq.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c054:	7829      	ldrb	r1, [r5, #0]
    c056:	2904      	cmp	r1, #4
    c058:	d83c      	bhi.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c05a:	2900      	cmp	r1, #0
    c05c:	7869      	ldrb	r1, [r5, #1]
    c05e:	d03b      	beq.n	c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c060:	2900      	cmp	r1, #0
    c062:	d137      	bne.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c064:	78a9      	ldrb	r1, [r5, #2]
    c066:	2900      	cmp	r1, #0
    c068:	d134      	bne.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c06a:	2000      	movs	r0, #0
    c06c:	f004 fc65 	bl	1093a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c070:	2000      	movs	r0, #0
    c072:	f004 fc55 	bl	10920 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c076:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c07a:	f04f 31ff 	mov.w	r1, #4294967295
    c07e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c082:	2600      	movs	r6, #0
    c084:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c088:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c08c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c090:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c094:	4c14      	ldr	r4, [pc, #80]	; (c0e8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c096:	7066      	strb	r6, [r4, #1]
    c098:	88a8      	ldrh	r0, [r5, #4]
    c09a:	81a0      	strh	r0, [r4, #12]
    c09c:	f004 fc71 	bl	10982 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c0a0:	2701      	movs	r7, #1
    c0a2:	b108      	cbz	r0, c0a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c0a4:	70e7      	strb	r7, [r4, #3]
    c0a6:	7067      	strb	r7, [r4, #1]
    c0a8:	2101      	movs	r1, #1
    c0aa:	4640      	mov	r0, r8
    c0ac:	f004 fc5b 	bl	10966 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c0b0:	b108      	cbz	r0, c0b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c0b2:	f000 f8a9 	bl	c208 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c0b6:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c0ba:	81e0      	strh	r0, [r4, #14]
    c0bc:	4628      	mov	r0, r5
    c0be:	f7ff fe8d 	bl	bddc <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c0c2:	7267      	strb	r7, [r4, #9]
    c0c4:	2000      	movs	r0, #0
    c0c6:	f004 fc2b 	bl	10920 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c0ca:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c0ce:	4630      	mov	r0, r6
    c0d0:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0d8:	2900      	cmp	r1, #0
    c0da:	d0fb      	beq.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0dc:	2920      	cmp	r1, #32
    c0de:	d8f9      	bhi.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e0:	78a9      	ldrb	r1, [r5, #2]
    c0e2:	2921      	cmp	r1, #33	; 0x21
    c0e4:	d9c1      	bls.n	c06a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c0e6:	e7f5      	b.n	c0d4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e8:	20000308 	.word	0x20000308

0000c0ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c0ec:	4801      	ldr	r0, [pc, #4]	; (c0f4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c0ee:	8980      	ldrh	r0, [r0, #12]
    c0f0:	4770      	bx	lr
    c0f2:	0000      	.short	0x0000
    c0f4:	20000308 	.word	0x20000308

0000c0f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c0f8:	b510      	push	{r4, lr}
    c0fa:	480d      	ldr	r0, [pc, #52]	; (c130 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c0fc:	f004 fca2 	bl	10a44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c100:	490b      	ldr	r1, [pc, #44]	; (c130 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c102:	3908      	subs	r1, #8
    c104:	b148      	cbz	r0, c11a <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c106:	2001      	movs	r0, #1
    c108:	7008      	strb	r0, [r1, #0]
    c10a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c10e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c116:	f7ff bf59 	b.w	bfcc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c11a:	7a88      	ldrb	r0, [r1, #10]
    c11c:	2802      	cmp	r0, #2
    c11e:	d101      	bne.n	c124 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c120:	f7ff fdb6 	bl	bc90 <MPSL_IRQ_CLOCK_Handler+0x88>
    c124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c128:	4801      	ldr	r0, [pc, #4]	; (c130 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c12a:	f004 bca2 	b.w	10a72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c12e:	0000      	.short	0x0000
    c130:	20000310 	.word	0x20000310

0000c134 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c134:	4802      	ldr	r0, [pc, #8]	; (c140 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c136:	7a80      	ldrb	r0, [r0, #10]
    c138:	2800      	cmp	r0, #0
    c13a:	d000      	beq.n	c13e <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c13c:	2001      	movs	r0, #1
    c13e:	4770      	bx	lr
    c140:	20000308 	.word	0x20000308

0000c144 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c146:	4d1f      	ldr	r5, [pc, #124]	; (c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c148:	7ae8      	ldrb	r0, [r5, #11]
    c14a:	2800      	cmp	r0, #0
    c14c:	d10f      	bne.n	c16e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c14e:	7e28      	ldrb	r0, [r5, #24]
    c150:	f000 0003 	and.w	r0, r0, #3
    c154:	f004 fc23 	bl	1099e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c158:	2800      	cmp	r0, #0
    c15a:	d008      	beq.n	c16e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c15c:	f3ef 8110 	mrs	r1, PRIMASK
    c160:	b672      	cpsid	i
    c162:	f7ff ffe7 	bl	c134 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c166:	b118      	cbz	r0, c170 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c168:	2900      	cmp	r1, #0
    c16a:	d100      	bne.n	c16e <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c16c:	b662      	cpsie	i
    c16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c170:	2601      	movs	r6, #1
    c172:	72ae      	strb	r6, [r5, #10]
    c174:	b901      	cbnz	r1, c178 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c176:	b662      	cpsie	i
    c178:	2018      	movs	r0, #24
    c17a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c17e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c182:	61a6      	str	r6, [r4, #24]
    c184:	f44f 7020 	mov.w	r0, #640	; 0x280
    c188:	f8ad 0000 	strh.w	r0, [sp]
    c18c:	f8bd 0000 	ldrh.w	r0, [sp]
    c190:	1e41      	subs	r1, r0, #1
    c192:	f8ad 1000 	strh.w	r1, [sp]
    c196:	d2f9      	bcs.n	c18c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c198:	2700      	movs	r7, #0
    c19a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c19e:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c1a2:	4808      	ldr	r0, [pc, #32]	; (c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1a4:	3008      	adds	r0, #8
    c1a6:	f004 fc60 	bl	10a6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c1aa:	702f      	strb	r7, [r5, #0]
    c1ac:	f7ff fd70 	bl	bc90 <MPSL_IRQ_CLOCK_Handler+0x88>
    c1b0:	6166      	str	r6, [r4, #20]
    c1b2:	7968      	ldrb	r0, [r5, #5]
    c1b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c1b8:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c1bc:	2018      	movs	r0, #24
    c1be:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	20000308 	.word	0x20000308

0000c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c1c8:	4602      	mov	r2, r0
    c1ca:	b510      	push	{r4, lr}
    c1cc:	2000      	movs	r0, #0
    c1ce:	2900      	cmp	r1, #0
    c1d0:	d00a      	beq.n	c1e8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c1d2:	2a00      	cmp	r2, #0
    c1d4:	d008      	beq.n	c1e8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c1d6:	fba2 0101 	umull	r0, r1, r2, r1
    c1da:	1e40      	subs	r0, r0, #1
    c1dc:	4a03      	ldr	r2, [pc, #12]	; (c1ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c1de:	f141 31ff 	adc.w	r1, r1, #4294967295
    c1e2:	f004 fcca 	bl	10b7a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c1e6:	1c40      	adds	r0, r0, #1
    c1e8:	bd10      	pop	{r4, pc}
    c1ea:	0000      	.short	0x0000
    c1ec:	000f4240 	.word	0x000f4240

0000c1f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c1f0:	b510      	push	{r4, lr}
    c1f2:	4c04      	ldr	r4, [pc, #16]	; (c204 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c1f4:	7e20      	ldrb	r0, [r4, #24]
    c1f6:	f000 0003 	and.w	r0, r0, #3
    c1fa:	f004 fbd0 	bl	1099e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1fe:	2800      	cmp	r0, #0
    c200:	d0f8      	beq.n	c1f4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c202:	bd10      	pop	{r4, pc}
    c204:	20000308 	.word	0x20000308

0000c208 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c208:	4901      	ldr	r1, [pc, #4]	; (c210 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c20a:	2001      	movs	r0, #1
    c20c:	7008      	strb	r0, [r1, #0]
    c20e:	4770      	bx	lr
    c210:	20000381 	.word	0x20000381

0000c214 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c214:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c218:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c21c:	b918      	cbnz	r0, c226 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c21e:	4803      	ldr	r0, [pc, #12]	; (c22c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c220:	7800      	ldrb	r0, [r0, #0]
    c222:	2800      	cmp	r0, #0
    c224:	d000      	beq.n	c228 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c226:	2001      	movs	r0, #1
    c228:	4770      	bx	lr
    c22a:	0000      	.short	0x0000
    c22c:	20000381 	.word	0x20000381

0000c230 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c230:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c234:	2101      	movs	r1, #1
    c236:	6041      	str	r1, [r0, #4]
    c238:	2100      	movs	r1, #0
    c23a:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c23e:	4801      	ldr	r0, [pc, #4]	; (c244 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c240:	7001      	strb	r1, [r0, #0]
    c242:	4770      	bx	lr
    c244:	20000381 	.word	0x20000381

0000c248 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c248:	4802      	ldr	r0, [pc, #8]	; (c254 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c24a:	6800      	ldr	r0, [r0, #0]
    c24c:	f000 0003 	and.w	r0, r0, #3
    c250:	4770      	bx	lr
    c252:	0000      	.short	0x0000
    c254:	4000041c 	.word	0x4000041c
    c258:	b510      	push	{r4, lr}
    c25a:	b131      	cbz	r1, c26a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c25c:	2901      	cmp	r1, #1
    c25e:	d007      	beq.n	c270 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c260:	f240 3102 	movw	r1, #770	; 0x302
    c264:	a005      	add	r0, pc, #20	; (adr r0, c27c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c266:	f000 f821 	bl	c2ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c26a:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c26e:	e001      	b.n	c274 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c270:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c274:	f000 0001 	and.w	r0, r0, #1
    c278:	bd10      	pop	{r4, pc}
    c27a:	0000      	.short	0x0000
    c27c:	5f66726e 	.word	0x5f66726e
    c280:	636f6c63 	.word	0x636f6c63
    c284:	00682e6b 	.word	0x00682e6b
    c288:	f3bf 8f4f 	dsb	sy
    c28c:	4805      	ldr	r0, [pc, #20]	; (c2a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c28e:	6801      	ldr	r1, [r0, #0]
    c290:	4a05      	ldr	r2, [pc, #20]	; (c2a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c292:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c296:	4311      	orrs	r1, r2
    c298:	6001      	str	r1, [r0, #0]
    c29a:	f3bf 8f4f 	dsb	sy
    c29e:	bf00      	nop
    c2a0:	e7fd      	b.n	c29e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c2a2:	0000      	.short	0x0000
    c2a4:	e000ed0c 	.word	0xe000ed0c
    c2a8:	05fa0004 	.word	0x05fa0004

0000c2ac <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c2ac:	b672      	cpsid	i
    c2ae:	4a03      	ldr	r2, [pc, #12]	; (c2bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c2b0:	6852      	ldr	r2, [r2, #4]
    c2b2:	b102      	cbz	r2, c2b6 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c2b4:	4790      	blx	r2
    c2b6:	f7ff ffe7 	bl	c288 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c2ba:	0000      	.short	0x0000
    c2bc:	20000328 	.word	0x20000328
    c2c0:	4806      	ldr	r0, [pc, #24]	; (c2dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c2c2:	b510      	push	{r4, lr}
    c2c4:	2100      	movs	r1, #0
    c2c6:	6001      	str	r1, [r0, #0]
    c2c8:	2101      	movs	r1, #1
    c2ca:	6001      	str	r1, [r0, #0]
    c2cc:	4608      	mov	r0, r1
    c2ce:	f004 fb8d 	bl	109ec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c2d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2d6:	2001      	movs	r0, #1
    c2d8:	f004 bb7b 	b.w	109d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c2dc:	40001ffc 	.word	0x40001ffc
    c2e0:	4807      	ldr	r0, [pc, #28]	; (c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c2e2:	b510      	push	{r4, lr}
    c2e4:	2101      	movs	r1, #1
    c2e6:	6041      	str	r1, [r0, #4]
    c2e8:	1e89      	subs	r1, r1, #2
    c2ea:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c2ee:	200c      	movs	r0, #12
    c2f0:	f004 fb7c 	bl	109ec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c2f8:	200c      	movs	r0, #12
    c2fa:	f004 bb6a 	b.w	109d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c2fe:	0000      	.short	0x0000
    c300:	4000c000 	.word	0x4000c000

0000c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c304:	b50e      	push	{r1, r2, r3, lr}
    c306:	b672      	cpsid	i
    c308:	4a0f      	ldr	r2, [pc, #60]	; (c348 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c30a:	6855      	ldr	r5, [r2, #4]
    c30c:	b1d5      	cbz	r5, c344 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c30e:	2200      	movs	r2, #0
    c310:	4603      	mov	r3, r0
    c312:	466e      	mov	r6, sp
    c314:	240a      	movs	r4, #10
    c316:	e003      	b.n	c320 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c318:	fbb0 f0f4 	udiv	r0, r0, r4
    c31c:	1c52      	adds	r2, r2, #1
    c31e:	b2d2      	uxtb	r2, r2
    c320:	2800      	cmp	r0, #0
    c322:	d1f9      	bne.n	c318 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c324:	54b0      	strb	r0, [r6, r2]
    c326:	e009      	b.n	c33c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c328:	fbb3 f0f4 	udiv	r0, r3, r4
    c32c:	fb04 3010 	mls	r0, r4, r0, r3
    c330:	fbb3 f3f4 	udiv	r3, r3, r4
    c334:	1e52      	subs	r2, r2, #1
    c336:	b2d2      	uxtb	r2, r2
    c338:	3030      	adds	r0, #48	; 0x30
    c33a:	54b0      	strb	r0, [r6, r2]
    c33c:	2a00      	cmp	r2, #0
    c33e:	d1f3      	bne.n	c328 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c340:	4630      	mov	r0, r6
    c342:	47a8      	blx	r5
    c344:	f7ff ffa0 	bl	c288 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c348:	20000328 	.word	0x20000328

0000c34c <mpsl_init>:
    c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c350:	4c18      	ldr	r4, [pc, #96]	; (c3b4 <mpsl_init+0x68>)
    c352:	4606      	mov	r6, r0
    c354:	4617      	mov	r7, r2
    c356:	7860      	ldrb	r0, [r4, #1]
    c358:	460d      	mov	r5, r1
    c35a:	b118      	cbz	r0, c364 <mpsl_init+0x18>
    c35c:	f04f 30ff 	mov.w	r0, #4294967295
    c360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c364:	f7fc fc00 	bl	8b68 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c368:	b906      	cbnz	r6, c36c <mpsl_init+0x20>
    c36a:	4e13      	ldr	r6, [pc, #76]	; (c3b8 <mpsl_init+0x6c>)
    c36c:	6067      	str	r7, [r4, #4]
    c36e:	7025      	strb	r5, [r4, #0]
    c370:	f7ff ffa6 	bl	c2c0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c374:	f7ff ffb4 	bl	c2e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c378:	4630      	mov	r0, r6
    c37a:	f7ff fe65 	bl	c048 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c37e:	0006      	movs	r6, r0
    c380:	d1ee      	bne.n	c360 <mpsl_init+0x14>
    c382:	f7fe fe45 	bl	b010 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c386:	f7ff fedd 	bl	c144 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c38a:	f004 fa98 	bl	108be <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c38e:	4628      	mov	r0, r5
    c390:	f004 fb1f 	bl	109d2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c394:	2001      	movs	r0, #1
    c396:	2d00      	cmp	r5, #0
    c398:	db09      	blt.n	c3ae <mpsl_init+0x62>
    c39a:	f005 011f 	and.w	r1, r5, #31
    c39e:	fa00 f101 	lsl.w	r1, r0, r1
    c3a2:	096a      	lsrs	r2, r5, #5
    c3a4:	0092      	lsls	r2, r2, #2
    c3a6:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c3aa:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c3ae:	7060      	strb	r0, [r4, #1]
    c3b0:	4630      	mov	r0, r6
    c3b2:	e7d5      	b.n	c360 <mpsl_init+0x14>
    c3b4:	20000328 	.word	0x20000328
    c3b8:	00010a0e 	.word	0x00010a0e

0000c3bc <mpsl_is_initialized>:
    c3bc:	4801      	ldr	r0, [pc, #4]	; (c3c4 <mpsl_is_initialized+0x8>)
    c3be:	7840      	ldrb	r0, [r0, #1]
    c3c0:	4770      	bx	lr
    c3c2:	0000      	.short	0x0000
    c3c4:	20000328 	.word	0x20000328

0000c3c8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c3c8:	4807      	ldr	r0, [pc, #28]	; (c3e8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c3ca:	f990 0000 	ldrsb.w	r0, [r0]
    c3ce:	2800      	cmp	r0, #0
    c3d0:	db09      	blt.n	c3e6 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c3d2:	f000 021f 	and.w	r2, r0, #31
    c3d6:	2101      	movs	r1, #1
    c3d8:	4091      	lsls	r1, r2
    c3da:	0940      	lsrs	r0, r0, #5
    c3dc:	0080      	lsls	r0, r0, #2
    c3de:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c3e2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c3e6:	4770      	bx	lr
    c3e8:	20000328 	.word	0x20000328

0000c3ec <mpsl_temperature_get>:
    c3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3f0:	2601      	movs	r6, #1
    c3f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c3f6:	0331      	lsls	r1, r6, #12
    c3f8:	f04f 0800 	mov.w	r8, #0
    c3fc:	4640      	mov	r0, r8
    c3fe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c402:	f3bf 8f4f 	dsb	sy
    c406:	f3bf 8f6f 	isb	sy
    c40a:	4c16      	ldr	r4, [pc, #88]	; (c464 <mpsl_temperature_get+0x78>)
    c40c:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c410:	200c      	movs	r0, #12
    c412:	f004 fb0a 	bl	10a2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c416:	4d14      	ldr	r5, [pc, #80]	; (c468 <mpsl_temperature_get+0x7c>)
    c418:	6828      	ldr	r0, [r5, #0]
    c41a:	43c0      	mvns	r0, r0
    c41c:	f340 1700 	sbfx	r7, r0, #4, #1
    c420:	6828      	ldr	r0, [r5, #0]
    c422:	f040 0010 	orr.w	r0, r0, #16
    c426:	6028      	str	r0, [r5, #0]
    c428:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c42c:	6026      	str	r6, [r4, #0]
    c42e:	1c7f      	adds	r7, r7, #1
    c430:	e002      	b.n	c438 <mpsl_temperature_get+0x4c>
    c432:	bf00      	nop
    c434:	f004 fb9d 	bl	10b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c438:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c43c:	2800      	cmp	r0, #0
    c43e:	d0f9      	beq.n	c434 <mpsl_temperature_get+0x48>
    c440:	b91f      	cbnz	r7, c44a <mpsl_temperature_get+0x5e>
    c442:	6828      	ldr	r0, [r5, #0]
    c444:	f020 0010 	bic.w	r0, r0, #16
    c448:	6028      	str	r0, [r5, #0]
    c44a:	4808      	ldr	r0, [pc, #32]	; (c46c <mpsl_temperature_get+0x80>)
    c44c:	6805      	ldr	r5, [r0, #0]
    c44e:	6066      	str	r6, [r4, #4]
    c450:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c454:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c458:	200c      	movs	r0, #12
    c45a:	f004 fae6 	bl	10a2a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c45e:	4628      	mov	r0, r5
    c460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c464:	4000c000 	.word	0x4000c000
    c468:	e000ed10 	.word	0xe000ed10
    c46c:	4000c508 	.word	0x4000c508

0000c470 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c470:	b510      	push	{r4, lr}
    c472:	4602      	mov	r2, r0
    c474:	2005      	movs	r0, #5
    c476:	490c      	ldr	r1, [pc, #48]	; (c4a8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c478:	e004      	b.n	c484 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c47a:	bf00      	nop
    c47c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c480:	791b      	ldrb	r3, [r3, #4]
    c482:	b133      	cbz	r3, c492 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c484:	1e40      	subs	r0, r0, #1
    c486:	b2c0      	uxtb	r0, r0
    c488:	d2f8      	bcs.n	c47c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c48a:	2148      	movs	r1, #72	; 0x48
    c48c:	2069      	movs	r0, #105	; 0x69
    c48e:	f7ff ff39 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c492:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c496:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c49a:	2200      	movs	r2, #0
    c49c:	714a      	strb	r2, [r1, #5]
    c49e:	718a      	strb	r2, [r1, #6]
    c4a0:	2201      	movs	r2, #1
    c4a2:	710a      	strb	r2, [r1, #4]
    c4a4:	bd10      	pop	{r4, pc}
    c4a6:	0000      	.short	0x0000
    c4a8:	200013d8 	.word	0x200013d8

0000c4ac <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c4ac:	b510      	push	{r4, lr}
    c4ae:	2805      	cmp	r0, #5
    c4b0:	d301      	bcc.n	c4b6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c4b2:	2158      	movs	r1, #88	; 0x58
    c4b4:	e006      	b.n	c4c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c4b6:	490a      	ldr	r1, [pc, #40]	; (c4e0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c4b8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c4bc:	7901      	ldrb	r1, [r0, #4]
    c4be:	2901      	cmp	r1, #1
    c4c0:	d003      	beq.n	c4ca <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c4c2:	2159      	movs	r1, #89	; 0x59
    c4c4:	2069      	movs	r0, #105	; 0x69
    c4c6:	f7ff ff1d 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4ca:	7941      	ldrb	r1, [r0, #5]
    c4cc:	7982      	ldrb	r2, [r0, #6]
    c4ce:	1c49      	adds	r1, r1, #1
    c4d0:	b2c9      	uxtb	r1, r1
    c4d2:	428a      	cmp	r2, r1
    c4d4:	d000      	beq.n	c4d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c4d6:	7141      	strb	r1, [r0, #5]
    c4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4dc:	f7ff bf74 	b.w	c3c8 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c4e0:	200013d8 	.word	0x200013d8

0000c4e4 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c4e4:	b510      	push	{r4, lr}
    c4e6:	2805      	cmp	r0, #5
    c4e8:	d303      	bcc.n	c4f2 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c4ea:	214f      	movs	r1, #79	; 0x4f
    c4ec:	2069      	movs	r0, #105	; 0x69
    c4ee:	f7ff ff09 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4f2:	4a03      	ldr	r2, [pc, #12]	; (c500 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c4f4:	2100      	movs	r1, #0
    c4f6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c4fa:	7101      	strb	r1, [r0, #4]
    c4fc:	bd10      	pop	{r4, pc}
    c4fe:	0000      	.short	0x0000
    c500:	200013d8 	.word	0x200013d8

0000c504 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c504:	b570      	push	{r4, r5, r6, lr}
    c506:	2505      	movs	r5, #5
    c508:	4e0e      	ldr	r6, [pc, #56]	; (c544 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c50a:	4c0f      	ldr	r4, [pc, #60]	; (c548 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c50c:	e016      	b.n	c53c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c50e:	7821      	ldrb	r1, [r4, #0]
    c510:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c514:	7902      	ldrb	r2, [r0, #4]
    c516:	2a01      	cmp	r2, #1
    c518:	d108      	bne.n	c52c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c51a:	7942      	ldrb	r2, [r0, #5]
    c51c:	7983      	ldrb	r3, [r0, #6]
    c51e:	429a      	cmp	r2, r3
    c520:	d004      	beq.n	c52c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c522:	7942      	ldrb	r2, [r0, #5]
    c524:	7182      	strb	r2, [r0, #6]
    c526:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c52a:	4780      	blx	r0
    c52c:	7820      	ldrb	r0, [r4, #0]
    c52e:	1c40      	adds	r0, r0, #1
    c530:	b2c0      	uxtb	r0, r0
    c532:	7020      	strb	r0, [r4, #0]
    c534:	2805      	cmp	r0, #5
    c536:	d301      	bcc.n	c53c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c538:	2000      	movs	r0, #0
    c53a:	7020      	strb	r0, [r4, #0]
    c53c:	1e6d      	subs	r5, r5, #1
    c53e:	b2ed      	uxtb	r5, r5
    c540:	d2e5      	bcs.n	c50e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c542:	bd70      	pop	{r4, r5, r6, pc}
    c544:	200013d8 	.word	0x200013d8
    c548:	20000382 	.word	0x20000382

0000c54c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c54c:	b500      	push	{lr}
    c54e:	f004 fa9b 	bl	10a88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c552:	b940      	cbnz	r0, c566 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c554:	f004 faa2 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c558:	b928      	cbnz	r0, c566 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c55a:	f004 fab6 	bl	10aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c55e:	b910      	cbnz	r0, c566 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c560:	f004 fac7 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c564:	b108      	cbz	r0, c56a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c566:	4802      	ldr	r0, [pc, #8]	; (c570 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c568:	bd00      	pop	{pc}
    c56a:	4802      	ldr	r0, [pc, #8]	; (c574 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c56c:	bd00      	pop	{pc}
    c56e:	0000      	.short	0x0000
    c570:	4000050c 	.word	0x4000050c
    c574:	4001e700 	.word	0x4001e700
    c578:	b510      	push	{r4, lr}
    c57a:	f004 faba 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c57e:	b330      	cbz	r0, c5ce <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c580:	f3ef 8010 	mrs	r0, PRIMASK
    c584:	b1c8      	cbz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c586:	2100      	movs	r1, #0
    c588:	b672      	cpsid	i
    c58a:	4812      	ldr	r0, [pc, #72]	; (c5d4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c58c:	6802      	ldr	r2, [r0, #0]
    c58e:	6803      	ldr	r3, [r0, #0]
    c590:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c594:	f043 0310 	orr.w	r3, r3, #16
    c598:	6003      	str	r3, [r0, #0]
    c59a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c59e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c5a6:	431c      	orrs	r4, r3
    c5a8:	d000      	beq.n	c5ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c5aa:	bf40      	sev
    c5ac:	bf20      	wfe
    c5ae:	bf00      	nop
    c5b0:	bf00      	nop
    c5b2:	bf00      	nop
    c5b4:	bf00      	nop
    c5b6:	b112      	cbz	r2, c5be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c5b8:	e005      	b.n	c5c6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c5ba:	2101      	movs	r1, #1
    c5bc:	e7e4      	b.n	c588 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c5be:	6802      	ldr	r2, [r0, #0]
    c5c0:	f022 0210 	bic.w	r2, r2, #16
    c5c4:	6002      	str	r2, [r0, #0]
    c5c6:	2900      	cmp	r1, #0
    c5c8:	d000      	beq.n	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c5ca:	b662      	cpsie	i
    c5cc:	bd10      	pop	{r4, pc}
    c5ce:	bf20      	wfe
    c5d0:	bd10      	pop	{r4, pc}
    c5d2:	0000      	.short	0x0000
    c5d4:	e000ed10 	.word	0xe000ed10

0000c5d8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c5d8:	4901      	ldr	r1, [pc, #4]	; (c5e0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c5da:	2001      	movs	r0, #1
    c5dc:	7088      	strb	r0, [r1, #2]
    c5de:	4770      	bx	lr
    c5e0:	20000330 	.word	0x20000330

0000c5e4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c5e4:	00010dd5 00010e0d 00010df7 00010de5     ................
    c5f4:	00010df1 00010ddf 00010dd3 00010dd1     ................
    c604:	00010e09 00010dfd 00010deb 00010dd9     ................
    c614:	00010dcb 00010dc3 00010dc7 00010dbd     ................

0000c624 <mpsl_fem_disable>:
    c624:	4801      	ldr	r0, [pc, #4]	; (c62c <mpsl_fem_disable+0x8>)
    c626:	6800      	ldr	r0, [r0, #0]
    c628:	6800      	ldr	r0, [r0, #0]
    c62a:	4700      	bx	r0
    c62c:	20000344 	.word	0x20000344

0000c630 <mpsl_fem_lna_configuration_clear>:
    c630:	4801      	ldr	r0, [pc, #4]	; (c638 <mpsl_fem_lna_configuration_clear+0x8>)
    c632:	6800      	ldr	r0, [r0, #0]
    c634:	6940      	ldr	r0, [r0, #20]
    c636:	4700      	bx	r0
    c638:	20000344 	.word	0x20000344

0000c63c <mpsl_fem_lna_configuration_set>:
    c63c:	4a01      	ldr	r2, [pc, #4]	; (c644 <mpsl_fem_lna_configuration_set+0x8>)
    c63e:	6812      	ldr	r2, [r2, #0]
    c640:	68d2      	ldr	r2, [r2, #12]
    c642:	4710      	bx	r2
    c644:	20000344 	.word	0x20000344

0000c648 <mpsl_fem_lna_is_configured>:
    c648:	4901      	ldr	r1, [pc, #4]	; (c650 <mpsl_fem_lna_is_configured+0x8>)
    c64a:	6809      	ldr	r1, [r1, #0]
    c64c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c64e:	4708      	bx	r1
    c650:	20000344 	.word	0x20000344

0000c654 <mpsl_fem_pa_configuration_clear>:
    c654:	4801      	ldr	r0, [pc, #4]	; (c65c <mpsl_fem_pa_configuration_clear+0x8>)
    c656:	6800      	ldr	r0, [r0, #0]
    c658:	6900      	ldr	r0, [r0, #16]
    c65a:	4700      	bx	r0
    c65c:	20000344 	.word	0x20000344

0000c660 <mpsl_fem_pa_configuration_set>:
    c660:	4a01      	ldr	r2, [pc, #4]	; (c668 <mpsl_fem_pa_configuration_set+0x8>)
    c662:	6812      	ldr	r2, [r2, #0]
    c664:	6892      	ldr	r2, [r2, #8]
    c666:	4710      	bx	r2
    c668:	20000344 	.word	0x20000344

0000c66c <mpsl_fem_pa_gain_set>:
    c66c:	4901      	ldr	r1, [pc, #4]	; (c674 <mpsl_fem_pa_gain_set+0x8>)
    c66e:	6809      	ldr	r1, [r1, #0]
    c670:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c672:	4708      	bx	r1
    c674:	20000344 	.word	0x20000344

0000c678 <mpsl_fem_pa_is_configured>:
    c678:	4901      	ldr	r1, [pc, #4]	; (c680 <mpsl_fem_pa_is_configured+0x8>)
    c67a:	6809      	ldr	r1, [r1, #0]
    c67c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c67e:	4708      	bx	r1
    c680:	20000344 	.word	0x20000344

0000c684 <mpsl_fem_tx_power_split>:
    c684:	b430      	push	{r4, r5}
    c686:	4c03      	ldr	r4, [pc, #12]	; (c694 <mpsl_fem_tx_power_split+0x10>)
    c688:	6824      	ldr	r4, [r4, #0]
    c68a:	6864      	ldr	r4, [r4, #4]
    c68c:	46a4      	mov	ip, r4
    c68e:	bc30      	pop	{r4, r5}
    c690:	4760      	bx	ip
    c692:	0000      	.short	0x0000
    c694:	20000344 	.word	0x20000344

0000c698 <mpsl_fem_device_config_254_apply_get>:
    c698:	4801      	ldr	r0, [pc, #4]	; (c6a0 <mpsl_fem_device_config_254_apply_get+0x8>)
    c69a:	7800      	ldrb	r0, [r0, #0]
    c69c:	4770      	bx	lr
    c69e:	0000      	.short	0x0000
    c6a0:	20000383 	.word	0x20000383

0000c6a4 <__udivmoddi4>:
    c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6a8:	4686      	mov	lr, r0
    c6aa:	468c      	mov	ip, r1
    c6ac:	4608      	mov	r0, r1
    c6ae:	9e08      	ldr	r6, [sp, #32]
    c6b0:	4615      	mov	r5, r2
    c6b2:	4674      	mov	r4, lr
    c6b4:	4619      	mov	r1, r3
    c6b6:	2b00      	cmp	r3, #0
    c6b8:	f040 80c2 	bne.w	c840 <__udivmoddi4+0x19c>
    c6bc:	4285      	cmp	r5, r0
    c6be:	fab2 f282 	clz	r2, r2
    c6c2:	d945      	bls.n	c750 <__udivmoddi4+0xac>
    c6c4:	b14a      	cbz	r2, c6da <__udivmoddi4+0x36>
    c6c6:	f1c2 0320 	rsb	r3, r2, #32
    c6ca:	fa00 fc02 	lsl.w	ip, r0, r2
    c6ce:	fa2e f303 	lsr.w	r3, lr, r3
    c6d2:	4095      	lsls	r5, r2
    c6d4:	ea43 0c0c 	orr.w	ip, r3, ip
    c6d8:	4094      	lsls	r4, r2
    c6da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c6de:	b2a8      	uxth	r0, r5
    c6e0:	fbbc f8fe 	udiv	r8, ip, lr
    c6e4:	0c23      	lsrs	r3, r4, #16
    c6e6:	fb0e cc18 	mls	ip, lr, r8, ip
    c6ea:	fb08 f900 	mul.w	r9, r8, r0
    c6ee:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c6f2:	4599      	cmp	r9, r3
    c6f4:	d928      	bls.n	c748 <__udivmoddi4+0xa4>
    c6f6:	18eb      	adds	r3, r5, r3
    c6f8:	f108 37ff 	add.w	r7, r8, #4294967295
    c6fc:	d204      	bcs.n	c708 <__udivmoddi4+0x64>
    c6fe:	4599      	cmp	r9, r3
    c700:	d902      	bls.n	c708 <__udivmoddi4+0x64>
    c702:	f1a8 0702 	sub.w	r7, r8, #2
    c706:	442b      	add	r3, r5
    c708:	eba3 0309 	sub.w	r3, r3, r9
    c70c:	b2a4      	uxth	r4, r4
    c70e:	fbb3 fcfe 	udiv	ip, r3, lr
    c712:	fb0e 331c 	mls	r3, lr, ip, r3
    c716:	fb0c f000 	mul.w	r0, ip, r0
    c71a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c71e:	42a0      	cmp	r0, r4
    c720:	d914      	bls.n	c74c <__udivmoddi4+0xa8>
    c722:	192c      	adds	r4, r5, r4
    c724:	f10c 33ff 	add.w	r3, ip, #4294967295
    c728:	d204      	bcs.n	c734 <__udivmoddi4+0x90>
    c72a:	42a0      	cmp	r0, r4
    c72c:	d902      	bls.n	c734 <__udivmoddi4+0x90>
    c72e:	f1ac 0302 	sub.w	r3, ip, #2
    c732:	442c      	add	r4, r5
    c734:	1a24      	subs	r4, r4, r0
    c736:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c73a:	b11e      	cbz	r6, c744 <__udivmoddi4+0xa0>
    c73c:	40d4      	lsrs	r4, r2
    c73e:	2300      	movs	r3, #0
    c740:	6034      	str	r4, [r6, #0]
    c742:	6073      	str	r3, [r6, #4]
    c744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c748:	4647      	mov	r7, r8
    c74a:	e7dd      	b.n	c708 <__udivmoddi4+0x64>
    c74c:	4663      	mov	r3, ip
    c74e:	e7f1      	b.n	c734 <__udivmoddi4+0x90>
    c750:	bb92      	cbnz	r2, c7b8 <__udivmoddi4+0x114>
    c752:	1b43      	subs	r3, r0, r5
    c754:	2101      	movs	r1, #1
    c756:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c75a:	b2af      	uxth	r7, r5
    c75c:	fbb3 fcfe 	udiv	ip, r3, lr
    c760:	0c20      	lsrs	r0, r4, #16
    c762:	fb0e 331c 	mls	r3, lr, ip, r3
    c766:	fb0c f807 	mul.w	r8, ip, r7
    c76a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c76e:	4598      	cmp	r8, r3
    c770:	d962      	bls.n	c838 <__udivmoddi4+0x194>
    c772:	18eb      	adds	r3, r5, r3
    c774:	f10c 30ff 	add.w	r0, ip, #4294967295
    c778:	d204      	bcs.n	c784 <__udivmoddi4+0xe0>
    c77a:	4598      	cmp	r8, r3
    c77c:	d902      	bls.n	c784 <__udivmoddi4+0xe0>
    c77e:	f1ac 0002 	sub.w	r0, ip, #2
    c782:	442b      	add	r3, r5
    c784:	eba3 0308 	sub.w	r3, r3, r8
    c788:	b2a4      	uxth	r4, r4
    c78a:	fbb3 fcfe 	udiv	ip, r3, lr
    c78e:	fb0e 331c 	mls	r3, lr, ip, r3
    c792:	fb0c f707 	mul.w	r7, ip, r7
    c796:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c79a:	42a7      	cmp	r7, r4
    c79c:	d94e      	bls.n	c83c <__udivmoddi4+0x198>
    c79e:	192c      	adds	r4, r5, r4
    c7a0:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7a4:	d204      	bcs.n	c7b0 <__udivmoddi4+0x10c>
    c7a6:	42a7      	cmp	r7, r4
    c7a8:	d902      	bls.n	c7b0 <__udivmoddi4+0x10c>
    c7aa:	f1ac 0302 	sub.w	r3, ip, #2
    c7ae:	442c      	add	r4, r5
    c7b0:	1be4      	subs	r4, r4, r7
    c7b2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c7b6:	e7c0      	b.n	c73a <__udivmoddi4+0x96>
    c7b8:	f1c2 0320 	rsb	r3, r2, #32
    c7bc:	fa20 f103 	lsr.w	r1, r0, r3
    c7c0:	4095      	lsls	r5, r2
    c7c2:	4090      	lsls	r0, r2
    c7c4:	fa2e f303 	lsr.w	r3, lr, r3
    c7c8:	4303      	orrs	r3, r0
    c7ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ce:	b2af      	uxth	r7, r5
    c7d0:	fbb1 fcfe 	udiv	ip, r1, lr
    c7d4:	fb0e 101c 	mls	r0, lr, ip, r1
    c7d8:	0c19      	lsrs	r1, r3, #16
    c7da:	fb0c f807 	mul.w	r8, ip, r7
    c7de:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c7e2:	4588      	cmp	r8, r1
    c7e4:	fa04 f402 	lsl.w	r4, r4, r2
    c7e8:	d922      	bls.n	c830 <__udivmoddi4+0x18c>
    c7ea:	1869      	adds	r1, r5, r1
    c7ec:	f10c 30ff 	add.w	r0, ip, #4294967295
    c7f0:	d204      	bcs.n	c7fc <__udivmoddi4+0x158>
    c7f2:	4588      	cmp	r8, r1
    c7f4:	d902      	bls.n	c7fc <__udivmoddi4+0x158>
    c7f6:	f1ac 0002 	sub.w	r0, ip, #2
    c7fa:	4429      	add	r1, r5
    c7fc:	eba1 0108 	sub.w	r1, r1, r8
    c800:	b29b      	uxth	r3, r3
    c802:	fbb1 fcfe 	udiv	ip, r1, lr
    c806:	fb0e 111c 	mls	r1, lr, ip, r1
    c80a:	fb0c f707 	mul.w	r7, ip, r7
    c80e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c812:	429f      	cmp	r7, r3
    c814:	d90e      	bls.n	c834 <__udivmoddi4+0x190>
    c816:	18eb      	adds	r3, r5, r3
    c818:	f10c 31ff 	add.w	r1, ip, #4294967295
    c81c:	d204      	bcs.n	c828 <__udivmoddi4+0x184>
    c81e:	429f      	cmp	r7, r3
    c820:	d902      	bls.n	c828 <__udivmoddi4+0x184>
    c822:	f1ac 0102 	sub.w	r1, ip, #2
    c826:	442b      	add	r3, r5
    c828:	1bdb      	subs	r3, r3, r7
    c82a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c82e:	e792      	b.n	c756 <__udivmoddi4+0xb2>
    c830:	4660      	mov	r0, ip
    c832:	e7e3      	b.n	c7fc <__udivmoddi4+0x158>
    c834:	4661      	mov	r1, ip
    c836:	e7f7      	b.n	c828 <__udivmoddi4+0x184>
    c838:	4660      	mov	r0, ip
    c83a:	e7a3      	b.n	c784 <__udivmoddi4+0xe0>
    c83c:	4663      	mov	r3, ip
    c83e:	e7b7      	b.n	c7b0 <__udivmoddi4+0x10c>
    c840:	4283      	cmp	r3, r0
    c842:	d906      	bls.n	c852 <__udivmoddi4+0x1ae>
    c844:	b916      	cbnz	r6, c84c <__udivmoddi4+0x1a8>
    c846:	2100      	movs	r1, #0
    c848:	4608      	mov	r0, r1
    c84a:	e77b      	b.n	c744 <__udivmoddi4+0xa0>
    c84c:	e9c6 e000 	strd	lr, r0, [r6]
    c850:	e7f9      	b.n	c846 <__udivmoddi4+0x1a2>
    c852:	fab3 f783 	clz	r7, r3
    c856:	b98f      	cbnz	r7, c87c <__udivmoddi4+0x1d8>
    c858:	4283      	cmp	r3, r0
    c85a:	d301      	bcc.n	c860 <__udivmoddi4+0x1bc>
    c85c:	4572      	cmp	r2, lr
    c85e:	d808      	bhi.n	c872 <__udivmoddi4+0x1ce>
    c860:	ebbe 0402 	subs.w	r4, lr, r2
    c864:	eb60 0303 	sbc.w	r3, r0, r3
    c868:	2001      	movs	r0, #1
    c86a:	469c      	mov	ip, r3
    c86c:	b91e      	cbnz	r6, c876 <__udivmoddi4+0x1d2>
    c86e:	2100      	movs	r1, #0
    c870:	e768      	b.n	c744 <__udivmoddi4+0xa0>
    c872:	4638      	mov	r0, r7
    c874:	e7fa      	b.n	c86c <__udivmoddi4+0x1c8>
    c876:	e9c6 4c00 	strd	r4, ip, [r6]
    c87a:	e7f8      	b.n	c86e <__udivmoddi4+0x1ca>
    c87c:	f1c7 0c20 	rsb	ip, r7, #32
    c880:	40bb      	lsls	r3, r7
    c882:	fa22 f40c 	lsr.w	r4, r2, ip
    c886:	431c      	orrs	r4, r3
    c888:	fa2e f10c 	lsr.w	r1, lr, ip
    c88c:	fa20 f30c 	lsr.w	r3, r0, ip
    c890:	40b8      	lsls	r0, r7
    c892:	4301      	orrs	r1, r0
    c894:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c898:	fa0e f507 	lsl.w	r5, lr, r7
    c89c:	fbb3 f8f9 	udiv	r8, r3, r9
    c8a0:	fa1f fe84 	uxth.w	lr, r4
    c8a4:	fb09 3018 	mls	r0, r9, r8, r3
    c8a8:	0c0b      	lsrs	r3, r1, #16
    c8aa:	fb08 fa0e 	mul.w	sl, r8, lr
    c8ae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c8b2:	459a      	cmp	sl, r3
    c8b4:	fa02 f207 	lsl.w	r2, r2, r7
    c8b8:	d940      	bls.n	c93c <__udivmoddi4+0x298>
    c8ba:	18e3      	adds	r3, r4, r3
    c8bc:	f108 30ff 	add.w	r0, r8, #4294967295
    c8c0:	d204      	bcs.n	c8cc <__udivmoddi4+0x228>
    c8c2:	459a      	cmp	sl, r3
    c8c4:	d902      	bls.n	c8cc <__udivmoddi4+0x228>
    c8c6:	f1a8 0002 	sub.w	r0, r8, #2
    c8ca:	4423      	add	r3, r4
    c8cc:	eba3 030a 	sub.w	r3, r3, sl
    c8d0:	b289      	uxth	r1, r1
    c8d2:	fbb3 f8f9 	udiv	r8, r3, r9
    c8d6:	fb09 3318 	mls	r3, r9, r8, r3
    c8da:	fb08 fe0e 	mul.w	lr, r8, lr
    c8de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c8e2:	458e      	cmp	lr, r1
    c8e4:	d92c      	bls.n	c940 <__udivmoddi4+0x29c>
    c8e6:	1861      	adds	r1, r4, r1
    c8e8:	f108 33ff 	add.w	r3, r8, #4294967295
    c8ec:	d204      	bcs.n	c8f8 <__udivmoddi4+0x254>
    c8ee:	458e      	cmp	lr, r1
    c8f0:	d902      	bls.n	c8f8 <__udivmoddi4+0x254>
    c8f2:	f1a8 0302 	sub.w	r3, r8, #2
    c8f6:	4421      	add	r1, r4
    c8f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c8fc:	fba0 9802 	umull	r9, r8, r0, r2
    c900:	eba1 010e 	sub.w	r1, r1, lr
    c904:	4541      	cmp	r1, r8
    c906:	46ce      	mov	lr, r9
    c908:	4643      	mov	r3, r8
    c90a:	d302      	bcc.n	c912 <__udivmoddi4+0x26e>
    c90c:	d106      	bne.n	c91c <__udivmoddi4+0x278>
    c90e:	454d      	cmp	r5, r9
    c910:	d204      	bcs.n	c91c <__udivmoddi4+0x278>
    c912:	ebb9 0e02 	subs.w	lr, r9, r2
    c916:	eb68 0304 	sbc.w	r3, r8, r4
    c91a:	3801      	subs	r0, #1
    c91c:	2e00      	cmp	r6, #0
    c91e:	d0a6      	beq.n	c86e <__udivmoddi4+0x1ca>
    c920:	ebb5 020e 	subs.w	r2, r5, lr
    c924:	eb61 0103 	sbc.w	r1, r1, r3
    c928:	fa01 fc0c 	lsl.w	ip, r1, ip
    c92c:	fa22 f307 	lsr.w	r3, r2, r7
    c930:	ea4c 0303 	orr.w	r3, ip, r3
    c934:	40f9      	lsrs	r1, r7
    c936:	e9c6 3100 	strd	r3, r1, [r6]
    c93a:	e798      	b.n	c86e <__udivmoddi4+0x1ca>
    c93c:	4640      	mov	r0, r8
    c93e:	e7c5      	b.n	c8cc <__udivmoddi4+0x228>
    c940:	4643      	mov	r3, r8
    c942:	e7d9      	b.n	c8f8 <__udivmoddi4+0x254>
    c944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c948:	460c      	mov	r4, r1
    c94a:	4681      	mov	r9, r0
    c94c:	7849      	ldrb	r1, [r1, #1]
    c94e:	f100 0003 	add.w	r0, r0, #3
    c952:	f88d 1000 	strb.w	r1, [sp]
    c956:	f020 0003 	bic.w	r0, r0, #3
    c95a:	78a1      	ldrb	r1, [r4, #2]
    c95c:	0015      	movs	r5, r2
    c95e:	4606      	mov	r6, r0
    c960:	f88d 1001 	strb.w	r1, [sp, #1]
    c964:	d000      	beq.n	c968 <__udivmoddi4+0x2c4>
    c966:	2000      	movs	r0, #0
    c968:	4669      	mov	r1, sp
    c96a:	f7f4 fe49 	bl	1600 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    c96e:	eb06 0a00 	add.w	sl, r6, r0
    c972:	7820      	ldrb	r0, [r4, #0]
    c974:	7861      	ldrb	r1, [r4, #1]
    c976:	2700      	movs	r7, #0
    c978:	4408      	add	r0, r1
    c97a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c97e:	463e      	mov	r6, r7
    c980:	e008      	b.n	c994 <__udivmoddi4+0x2f0>
    c982:	7a23      	ldrb	r3, [r4, #8]
    c984:	79e2      	ldrb	r2, [r4, #7]
    c986:	79a1      	ldrb	r1, [r4, #6]
    c988:	7960      	ldrb	r0, [r4, #5]
    c98a:	f000 fe80 	bl	d68e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c98e:	1c76      	adds	r6, r6, #1
    c990:	4407      	add	r7, r0
    c992:	b2f6      	uxtb	r6, r6
    c994:	4546      	cmp	r6, r8
    c996:	d3f4      	bcc.n	c982 <__udivmoddi4+0x2de>
    c998:	f10a 0003 	add.w	r0, sl, #3
    c99c:	f020 0003 	bic.w	r0, r0, #3
    c9a0:	4606      	mov	r6, r0
    c9a2:	b105      	cbz	r5, c9a6 <__udivmoddi4+0x302>
    c9a4:	2000      	movs	r0, #0
    c9a6:	463a      	mov	r2, r7
    c9a8:	4641      	mov	r1, r8
    c9aa:	f7f4 ffdd 	bl	1968 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c9ae:	4430      	add	r0, r6
    c9b0:	78a1      	ldrb	r1, [r4, #2]
    c9b2:	462e      	mov	r6, r5
    c9b4:	b159      	cbz	r1, c9ce <__udivmoddi4+0x32a>
    c9b6:	1cc0      	adds	r0, r0, #3
    c9b8:	f020 0003 	bic.w	r0, r0, #3
    c9bc:	8a63      	ldrh	r3, [r4, #18]
    c9be:	78e2      	ldrb	r2, [r4, #3]
    c9c0:	4605      	mov	r5, r0
    c9c2:	b2c9      	uxtb	r1, r1
    c9c4:	b106      	cbz	r6, c9c8 <__udivmoddi4+0x324>
    c9c6:	2000      	movs	r0, #0
    c9c8:	f7f5 f882 	bl	1ad0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    c9cc:	4428      	add	r0, r5
    c9ce:	1dc0      	adds	r0, r0, #7
    c9d0:	f020 0007 	bic.w	r0, r0, #7
    c9d4:	eba0 0009 	sub.w	r0, r0, r9
    c9d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000c9dc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c9dc:	b50e      	push	{r1, r2, r3, lr}
    c9de:	4601      	mov	r1, r0
    c9e0:	4668      	mov	r0, sp
    c9e2:	f000 f818 	bl	ca16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9e6:	4668      	mov	r0, sp
    c9e8:	f001 fc62 	bl	e2b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9ec:	bd0e      	pop	{r1, r2, r3, pc}
    c9ee:	b570      	push	{r4, r5, r6, lr}
    c9f0:	460c      	mov	r4, r1
    c9f2:	4605      	mov	r5, r0
    c9f4:	f7f4 fd7a 	bl	14ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d002      	beq.n	ca02 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    c9fc:	2d3e      	cmp	r5, #62	; 0x3e
    c9fe:	d001      	beq.n	ca04 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    ca00:	2001      	movs	r0, #1
    ca02:	bd70      	pop	{r4, r5, r6, pc}
    ca04:	2c12      	cmp	r4, #18
    ca06:	d004      	beq.n	ca12 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    ca08:	4620      	mov	r0, r4
    ca0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ca0e:	f7f4 bd7f 	b.w	1510 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    ca12:	2000      	movs	r0, #0
    ca14:	bd70      	pop	{r4, r5, r6, pc}

0000ca16 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ca16:	880a      	ldrh	r2, [r1, #0]
    ca18:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ca1c:	8082      	strh	r2, [r0, #4]
    ca1e:	884a      	ldrh	r2, [r1, #2]
    ca20:	80c2      	strh	r2, [r0, #6]
    ca22:	784a      	ldrb	r2, [r1, #1]
    ca24:	0993      	lsrs	r3, r2, #6
    ca26:	2200      	movs	r2, #0
    ca28:	7242      	strb	r2, [r0, #9]
    ca2a:	784b      	ldrb	r3, [r1, #1]
    ca2c:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ca30:	b11b      	cbz	r3, ca3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca32:	2b01      	cmp	r3, #1
    ca34:	d005      	beq.n	ca42 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ca36:	2b02      	cmp	r3, #2
    ca38:	d005      	beq.n	ca46 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ca3a:	7202      	strb	r2, [r0, #8]
    ca3c:	1d09      	adds	r1, r1, #4
    ca3e:	6001      	str	r1, [r0, #0]
    ca40:	4770      	bx	lr
    ca42:	2201      	movs	r2, #1
    ca44:	e7f9      	b.n	ca3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ca46:	2202      	movs	r2, #2
    ca48:	e7f7      	b.n	ca3a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ca4a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ca4a:	b510      	push	{r4, lr}
    ca4c:	460c      	mov	r4, r1
    ca4e:	7909      	ldrb	r1, [r1, #4]
    ca50:	7001      	strb	r1, [r0, #0]
    ca52:	7841      	ldrb	r1, [r0, #1]
    ca54:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    ca58:	7041      	strb	r1, [r0, #1]
    ca5a:	88a2      	ldrh	r2, [r4, #4]
    ca5c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ca60:	4311      	orrs	r1, r2
    ca62:	7041      	strb	r1, [r0, #1]
    ca64:	79a2      	ldrb	r2, [r4, #6]
    ca66:	7082      	strb	r2, [r0, #2]
    ca68:	88e2      	ldrh	r2, [r4, #6]
    ca6a:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca6e:	0a12      	lsrs	r2, r2, #8
    ca70:	70c2      	strb	r2, [r0, #3]
    ca72:	7041      	strb	r1, [r0, #1]
    ca74:	7a22      	ldrb	r2, [r4, #8]
    ca76:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca7a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca7e:	7041      	strb	r1, [r0, #1]
    ca80:	7a62      	ldrb	r2, [r4, #9]
    ca82:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca86:	7041      	strb	r1, [r0, #1]
    ca88:	6821      	ldr	r1, [r4, #0]
    ca8a:	1d02      	adds	r2, r0, #4
    ca8c:	4291      	cmp	r1, r2
    ca8e:	d006      	beq.n	ca9e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca90:	88e2      	ldrh	r2, [r4, #6]
    ca92:	2afb      	cmp	r2, #251	; 0xfb
    ca94:	d300      	bcc.n	ca98 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca96:	22fb      	movs	r2, #251	; 0xfb
    ca98:	1d00      	adds	r0, r0, #4
    ca9a:	f004 f8b5 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca9e:	79a0      	ldrb	r0, [r4, #6]
    caa0:	1d00      	adds	r0, r0, #4
    caa2:	b2c0      	uxtb	r0, r0
    caa4:	bd10      	pop	{r4, pc}

0000caa6 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    caa6:	b430      	push	{r4, r5}
    caa8:	790a      	ldrb	r2, [r1, #4]
    caaa:	7002      	strb	r2, [r0, #0]
    caac:	7842      	ldrb	r2, [r0, #1]
    caae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cab2:	7042      	strb	r2, [r0, #1]
    cab4:	888b      	ldrh	r3, [r1, #4]
    cab6:	f3c3 2303 	ubfx	r3, r3, #8, #4
    caba:	431a      	orrs	r2, r3
    cabc:	7042      	strb	r2, [r0, #1]
    cabe:	798b      	ldrb	r3, [r1, #6]
    cac0:	7083      	strb	r3, [r0, #2]
    cac2:	78c3      	ldrb	r3, [r0, #3]
    cac4:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cacc:	70c3      	strb	r3, [r0, #3]
    cace:	88cc      	ldrh	r4, [r1, #6]
    cad0:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cad4:	4323      	orrs	r3, r4
    cad6:	70c3      	strb	r3, [r0, #3]
    cad8:	7042      	strb	r2, [r0, #1]
    cada:	7a0c      	ldrb	r4, [r1, #8]
    cadc:	f004 0403 	and.w	r4, r4, #3
    cae0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cae4:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cae8:	7042      	strb	r2, [r0, #1]
    caea:	7a4c      	ldrb	r4, [r1, #9]
    caec:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    caf0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    caf4:	7042      	strb	r2, [r0, #1]
    caf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cafa:	70c2      	strb	r2, [r0, #3]
    cafc:	680b      	ldr	r3, [r1, #0]
    cafe:	1d02      	adds	r2, r0, #4
    cb00:	4293      	cmp	r3, r2
    cb02:	d005      	beq.n	cb10 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cb04:	88ca      	ldrh	r2, [r1, #6]
    cb06:	bc30      	pop	{r4, r5}
    cb08:	4619      	mov	r1, r3
    cb0a:	1d00      	adds	r0, r0, #4
    cb0c:	f004 b87c 	b.w	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb10:	bc30      	pop	{r4, r5}
    cb12:	4770      	bx	lr

0000cb14 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cb18:	460d      	mov	r5, r1
    cb1a:	4604      	mov	r4, r0
    cb1c:	780f      	ldrb	r7, [r1, #0]
    cb1e:	2000      	movs	r0, #0
    cb20:	220c      	movs	r2, #12
    cb22:	2305      	movs	r3, #5
    cb24:	263e      	movs	r6, #62	; 0x3e
    cb26:	21ff      	movs	r1, #255	; 0xff
    cb28:	2f1e      	cmp	r7, #30
    cb2a:	d27d      	bcs.n	cc28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cb2c:	e8df f007 	tbb	[pc, r7]
    cb30:	28260fce 	.word	0x28260fce
    cb34:	645349ce 	.word	0x645349ce
    cb38:	a0959380 	.word	0xa0959380
    cb3c:	ced0c6ab 	.word	0xced0c6ab
    cb40:	b62ecece 	.word	0xb62ecece
    cb44:	f4f1d9b9 	.word	0xf4f1d9b9
    cb48:	ebecedee 	.word	0xebecedee
    cb4c:	e9ea      	.short	0xe9ea
    cb4e:	7022      	strb	r2, [r4, #0]
    cb50:	7928      	ldrb	r0, [r5, #4]
    cb52:	70a0      	strb	r0, [r4, #2]
    cb54:	7968      	ldrb	r0, [r5, #5]
    cb56:	70e0      	strb	r0, [r4, #3]
    cb58:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb5c:	0a00      	lsrs	r0, r0, #8
    cb5e:	7120      	strb	r0, [r4, #4]
    cb60:	79e8      	ldrb	r0, [r5, #7]
    cb62:	7160      	strb	r0, [r4, #5]
    cb64:	7a28      	ldrb	r0, [r5, #8]
    cb66:	71a0      	strb	r0, [r4, #6]
    cb68:	8928      	ldrh	r0, [r5, #8]
    cb6a:	0a00      	lsrs	r0, r0, #8
    cb6c:	71e0      	strb	r0, [r4, #7]
    cb6e:	7aa8      	ldrb	r0, [r5, #10]
    cb70:	7220      	strb	r0, [r4, #8]
    cb72:	8968      	ldrh	r0, [r5, #10]
    cb74:	0a00      	lsrs	r0, r0, #8
    cb76:	7260      	strb	r0, [r4, #9]
    cb78:	2008      	movs	r0, #8
    cb7a:	e0a5      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cb7c:	2010      	movs	r0, #16
    cb7e:	e000      	b.n	cb82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    cb80:	201a      	movs	r0, #26
    cb82:	7020      	strb	r0, [r4, #0]
    cb84:	7928      	ldrb	r0, [r5, #4]
    cb86:	70a0      	strb	r0, [r4, #2]
    cb88:	2001      	movs	r0, #1
    cb8a:	e09d      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cb8c:	2029      	movs	r0, #41	; 0x29
    cb8e:	f7f4 fcbf 	bl	1510 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cb92:	b148      	cbz	r0, cba8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x94>
    cb94:	7026      	strb	r6, [r4, #0]
    cb96:	2029      	movs	r0, #41	; 0x29
    cb98:	70a0      	strb	r0, [r4, #2]
    cb9a:	2221      	movs	r2, #33	; 0x21
    cb9c:	1d29      	adds	r1, r5, #4
    cb9e:	1ce0      	adds	r0, r4, #3
    cba0:	f004 f832 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cba4:	2022      	movs	r0, #34	; 0x22
    cba6:	e08f      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cba8:	200a      	movs	r0, #10
    cbaa:	f7f4 fcb1 	bl	1510 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbae:	2800      	cmp	r0, #0
    cbb0:	4629      	mov	r1, r5
    cbb2:	4620      	mov	r0, r4
    cbb4:	d002      	beq.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cbb6:	f000 f95b 	bl	ce70 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cbba:	e083      	b.n	ccc4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cbbc:	f000 f92f 	bl	ce1e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cbc0:	e080      	b.n	ccc4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cbc2:	7026      	strb	r6, [r4, #0]
    cbc4:	2014      	movs	r0, #20
    cbc6:	70a0      	strb	r0, [r4, #2]
    cbc8:	7928      	ldrb	r0, [r5, #4]
    cbca:	70e0      	strb	r0, [r4, #3]
    cbcc:	88a8      	ldrh	r0, [r5, #4]
    cbce:	0a00      	lsrs	r0, r0, #8
    cbd0:	7120      	strb	r0, [r4, #4]
    cbd2:	79a8      	ldrb	r0, [r5, #6]
    cbd4:	e0bf      	b.n	cd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cbd6:	223e      	movs	r2, #62	; 0x3e
    cbd8:	7022      	strb	r2, [r4, #0]
    cbda:	2204      	movs	r2, #4
    cbdc:	70a2      	strb	r2, [r4, #2]
    cbde:	6868      	ldr	r0, [r5, #4]
    cbe0:	f8c4 0003 	str.w	r0, [r4, #3]
    cbe4:	68a8      	ldr	r0, [r5, #8]
    cbe6:	f8c4 0007 	str.w	r0, [r4, #7]
    cbea:	89a8      	ldrh	r0, [r5, #12]
    cbec:	f8a4 000b 	strh.w	r0, [r4, #11]
    cbf0:	7ba8      	ldrb	r0, [r5, #14]
    cbf2:	7360      	strb	r0, [r4, #13]
    cbf4:	200c      	movs	r0, #12
    cbf6:	e067      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cbf8:	7026      	strb	r6, [r4, #0]
    cbfa:	2003      	movs	r0, #3
    cbfc:	70a0      	strb	r0, [r4, #2]
    cbfe:	7928      	ldrb	r0, [r5, #4]
    cc00:	70e0      	strb	r0, [r4, #3]
    cc02:	79a8      	ldrb	r0, [r5, #6]
    cc04:	7120      	strb	r0, [r4, #4]
    cc06:	88e8      	ldrh	r0, [r5, #6]
    cc08:	0a00      	lsrs	r0, r0, #8
    cc0a:	7160      	strb	r0, [r4, #5]
    cc0c:	7a28      	ldrb	r0, [r5, #8]
    cc0e:	71a0      	strb	r0, [r4, #6]
    cc10:	8928      	ldrh	r0, [r5, #8]
    cc12:	0a00      	lsrs	r0, r0, #8
    cc14:	71e0      	strb	r0, [r4, #7]
    cc16:	7aa8      	ldrb	r0, [r5, #10]
    cc18:	7220      	strb	r0, [r4, #8]
    cc1a:	8968      	ldrh	r0, [r5, #10]
    cc1c:	0a00      	lsrs	r0, r0, #8
    cc1e:	7260      	strb	r0, [r4, #9]
    cc20:	7b28      	ldrb	r0, [r5, #12]
    cc22:	72a0      	strb	r0, [r4, #10]
    cc24:	89a8      	ldrh	r0, [r5, #12]
    cc26:	e000      	b.n	cc2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x116>
    cc28:	e050      	b.n	cccc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    cc2a:	0a00      	lsrs	r0, r0, #8
    cc2c:	72e0      	strb	r0, [r4, #11]
    cc2e:	e0cf      	b.n	cdd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    cc30:	7026      	strb	r6, [r4, #0]
    cc32:	70a3      	strb	r3, [r4, #2]
    cc34:	7928      	ldrb	r0, [r5, #4]
    cc36:	70e0      	strb	r0, [r4, #3]
    cc38:	88a8      	ldrh	r0, [r5, #4]
    cc3a:	0a00      	lsrs	r0, r0, #8
    cc3c:	7120      	strb	r0, [r4, #4]
    cc3e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc42:	f8c4 0005 	str.w	r0, [r4, #5]
    cc46:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cc4a:	f8c4 0009 	str.w	r0, [r4, #9]
    cc4e:	89e8      	ldrh	r0, [r5, #14]
    cc50:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc54:	e0e1      	b.n	ce1a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    cc56:	2011      	movs	r0, #17
    cc58:	e03b      	b.n	ccd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1be>
    cc5a:	7023      	strb	r3, [r4, #0]
    cc5c:	7928      	ldrb	r0, [r5, #4]
    cc5e:	70a0      	strb	r0, [r4, #2]
    cc60:	7968      	ldrb	r0, [r5, #5]
    cc62:	70e0      	strb	r0, [r4, #3]
    cc64:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cc68:	0a00      	lsrs	r0, r0, #8
    cc6a:	7120      	strb	r0, [r4, #4]
    cc6c:	79e8      	ldrb	r0, [r5, #7]
    cc6e:	e072      	b.n	cd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cc70:	2008      	movs	r0, #8
    cc72:	7020      	strb	r0, [r4, #0]
    cc74:	7928      	ldrb	r0, [r5, #4]
    cc76:	70a0      	strb	r0, [r4, #2]
    cc78:	79a8      	ldrb	r0, [r5, #6]
    cc7a:	70e0      	strb	r0, [r4, #3]
    cc7c:	88e8      	ldrh	r0, [r5, #6]
    cc7e:	0a00      	lsrs	r0, r0, #8
    cc80:	7120      	strb	r0, [r4, #4]
    cc82:	7a28      	ldrb	r0, [r5, #8]
    cc84:	e067      	b.n	cd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cc86:	2030      	movs	r0, #48	; 0x30
    cc88:	7020      	strb	r0, [r4, #0]
    cc8a:	7928      	ldrb	r0, [r5, #4]
    cc8c:	70a0      	strb	r0, [r4, #2]
    cc8e:	79a8      	ldrb	r0, [r5, #6]
    cc90:	70e0      	strb	r0, [r4, #3]
    cc92:	88e8      	ldrh	r0, [r5, #6]
    cc94:	0a00      	lsrs	r0, r0, #8
    cc96:	7120      	strb	r0, [r4, #4]
    cc98:	2003      	movs	r0, #3
    cc9a:	e015      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cc9c:	7026      	strb	r6, [r4, #0]
    cc9e:	2007      	movs	r0, #7
    cca0:	e05e      	b.n	cd60 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cca2:	7026      	strb	r6, [r4, #0]
    cca4:	70a2      	strb	r2, [r4, #2]
    cca6:	7928      	ldrb	r0, [r5, #4]
    cca8:	70e0      	strb	r0, [r4, #3]
    ccaa:	79a8      	ldrb	r0, [r5, #6]
    ccac:	7120      	strb	r0, [r4, #4]
    ccae:	88e8      	ldrh	r0, [r5, #6]
    ccb0:	0a00      	lsrs	r0, r0, #8
    ccb2:	7160      	strb	r0, [r4, #5]
    ccb4:	7a28      	ldrb	r0, [r5, #8]
    ccb6:	71a0      	strb	r0, [r4, #6]
    ccb8:	7a68      	ldrb	r0, [r5, #9]
    ccba:	e01f      	b.n	ccfc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    ccbc:	1d29      	adds	r1, r5, #4
    ccbe:	4620      	mov	r0, r4
    ccc0:	f7f4 fbe6 	bl	1490 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d001      	beq.n	cccc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    ccc8:	7060      	strb	r0, [r4, #1]
    ccca:	1c80      	adds	r0, r0, #2
    cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccd0:	2057      	movs	r0, #87	; 0x57
    ccd2:	7020      	strb	r0, [r4, #0]
    ccd4:	7928      	ldrb	r0, [r5, #4]
    ccd6:	70a0      	strb	r0, [r4, #2]
    ccd8:	88a8      	ldrh	r0, [r5, #4]
    ccda:	0a00      	lsrs	r0, r0, #8
    ccdc:	70e0      	strb	r0, [r4, #3]
    ccde:	2002      	movs	r0, #2
    cce0:	e7f2      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cce2:	7026      	strb	r6, [r4, #0]
    cce4:	2012      	movs	r0, #18
    cce6:	70a0      	strb	r0, [r4, #2]
    cce8:	7928      	ldrb	r0, [r5, #4]
    ccea:	70e0      	strb	r0, [r4, #3]
    ccec:	7968      	ldrb	r0, [r5, #5]
    ccee:	7120      	strb	r0, [r4, #4]
    ccf0:	79a8      	ldrb	r0, [r5, #6]
    ccf2:	7160      	strb	r0, [r4, #5]
    ccf4:	88e8      	ldrh	r0, [r5, #6]
    ccf6:	0a00      	lsrs	r0, r0, #8
    ccf8:	71a0      	strb	r0, [r4, #6]
    ccfa:	7a28      	ldrb	r0, [r5, #8]
    ccfc:	71e0      	strb	r0, [r4, #7]
    ccfe:	2006      	movs	r0, #6
    cd00:	e7e2      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd02:	e075      	b.n	cdf0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cd04:	e048      	b.n	cd98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cd06:	e029      	b.n	cd5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cd08:	e054      	b.n	cdb4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    cd0a:	e063      	b.n	cdd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cd0c:	e01b      	b.n	cd46 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    cd0e:	e003      	b.n	cd18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cd10:	e7ff      	b.n	cd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1fe>
    cd12:	7026      	strb	r6, [r4, #0]
    cd14:	2020      	movs	r0, #32
    cd16:	e041      	b.n	cd9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cd18:	7026      	strb	r6, [r4, #0]
    cd1a:	2021      	movs	r0, #33	; 0x21
    cd1c:	70a0      	strb	r0, [r4, #2]
    cd1e:	7928      	ldrb	r0, [r5, #4]
    cd20:	70e0      	strb	r0, [r4, #3]
    cd22:	7968      	ldrb	r0, [r5, #5]
    cd24:	7120      	strb	r0, [r4, #4]
    cd26:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd2a:	0a00      	lsrs	r0, r0, #8
    cd2c:	7160      	strb	r0, [r4, #5]
    cd2e:	79e8      	ldrb	r0, [r5, #7]
    cd30:	71a0      	strb	r0, [r4, #6]
    cd32:	7a28      	ldrb	r0, [r5, #8]
    cd34:	71e0      	strb	r0, [r4, #7]
    cd36:	7a68      	ldrb	r0, [r5, #9]
    cd38:	7220      	strb	r0, [r4, #8]
    cd3a:	7aa8      	ldrb	r0, [r5, #10]
    cd3c:	7260      	strb	r0, [r4, #9]
    cd3e:	7ae8      	ldrb	r0, [r5, #11]
    cd40:	72a0      	strb	r0, [r4, #10]
    cd42:	2009      	movs	r0, #9
    cd44:	e7c0      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd46:	7021      	strb	r1, [r4, #0]
    cd48:	20a1      	movs	r0, #161	; 0xa1
    cd4a:	70a0      	strb	r0, [r4, #2]
    cd4c:	7928      	ldrb	r0, [r5, #4]
    cd4e:	70e0      	strb	r0, [r4, #3]
    cd50:	7968      	ldrb	r0, [r5, #5]
    cd52:	7120      	strb	r0, [r4, #4]
    cd54:	2000      	movs	r0, #0
    cd56:	7160      	strb	r0, [r4, #5]
    cd58:	2004      	movs	r0, #4
    cd5a:	e7b5      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd5c:	7021      	strb	r1, [r4, #0]
    cd5e:	20a2      	movs	r0, #162	; 0xa2
    cd60:	70a0      	strb	r0, [r4, #2]
    cd62:	7928      	ldrb	r0, [r5, #4]
    cd64:	70e0      	strb	r0, [r4, #3]
    cd66:	88a8      	ldrh	r0, [r5, #4]
    cd68:	0a00      	lsrs	r0, r0, #8
    cd6a:	7120      	strb	r0, [r4, #4]
    cd6c:	79a8      	ldrb	r0, [r5, #6]
    cd6e:	7160      	strb	r0, [r4, #5]
    cd70:	88e8      	ldrh	r0, [r5, #6]
    cd72:	0a00      	lsrs	r0, r0, #8
    cd74:	71a0      	strb	r0, [r4, #6]
    cd76:	7a28      	ldrb	r0, [r5, #8]
    cd78:	71e0      	strb	r0, [r4, #7]
    cd7a:	8928      	ldrh	r0, [r5, #8]
    cd7c:	0a00      	lsrs	r0, r0, #8
    cd7e:	7220      	strb	r0, [r4, #8]
    cd80:	7aa8      	ldrb	r0, [r5, #10]
    cd82:	7260      	strb	r0, [r4, #9]
    cd84:	8968      	ldrh	r0, [r5, #10]
    cd86:	0a00      	lsrs	r0, r0, #8
    cd88:	72a0      	strb	r0, [r4, #10]
    cd8a:	7b28      	ldrb	r0, [r5, #12]
    cd8c:	72e0      	strb	r0, [r4, #11]
    cd8e:	89a8      	ldrh	r0, [r5, #12]
    cd90:	0a00      	lsrs	r0, r0, #8
    cd92:	7320      	strb	r0, [r4, #12]
    cd94:	200b      	movs	r0, #11
    cd96:	e797      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cd98:	7021      	strb	r1, [r4, #0]
    cd9a:	20a3      	movs	r0, #163	; 0xa3
    cd9c:	70a0      	strb	r0, [r4, #2]
    cd9e:	7928      	ldrb	r0, [r5, #4]
    cda0:	70e0      	strb	r0, [r4, #3]
    cda2:	88a8      	ldrh	r0, [r5, #4]
    cda4:	0a00      	lsrs	r0, r0, #8
    cda6:	7120      	strb	r0, [r4, #4]
    cda8:	79a8      	ldrb	r0, [r5, #6]
    cdaa:	7160      	strb	r0, [r4, #5]
    cdac:	79e8      	ldrb	r0, [r5, #7]
    cdae:	71a0      	strb	r0, [r4, #6]
    cdb0:	2005      	movs	r0, #5
    cdb2:	e789      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cdb4:	7026      	strb	r6, [r4, #0]
    cdb6:	2013      	movs	r0, #19
    cdb8:	70a0      	strb	r0, [r4, #2]
    cdba:	7928      	ldrb	r0, [r5, #4]
    cdbc:	70e0      	strb	r0, [r4, #3]
    cdbe:	7968      	ldrb	r0, [r5, #5]
    cdc0:	7120      	strb	r0, [r4, #4]
    cdc2:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cdc6:	f8c4 0005 	str.w	r0, [r4, #5]
    cdca:	8968      	ldrh	r0, [r5, #10]
    cdcc:	f8a4 0009 	strh.w	r0, [r4, #9]
    cdd0:	200a      	movs	r0, #10
    cdd2:	e779      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cdd4:	7021      	strb	r1, [r4, #0]
    cdd6:	20a4      	movs	r0, #164	; 0xa4
    cdd8:	70a0      	strb	r0, [r4, #2]
    cdda:	7928      	ldrb	r0, [r5, #4]
    cddc:	70e0      	strb	r0, [r4, #3]
    cdde:	88a8      	ldrh	r0, [r5, #4]
    cde0:	0a00      	lsrs	r0, r0, #8
    cde2:	7120      	strb	r0, [r4, #4]
    cde4:	79a8      	ldrb	r0, [r5, #6]
    cde6:	7160      	strb	r0, [r4, #5]
    cde8:	79e8      	ldrb	r0, [r5, #7]
    cdea:	71a0      	strb	r0, [r4, #6]
    cdec:	2007      	movs	r0, #7
    cdee:	e76b      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cdf0:	7021      	strb	r1, [r4, #0]
    cdf2:	2080      	movs	r0, #128	; 0x80
    cdf4:	70a0      	strb	r0, [r4, #2]
    cdf6:	88a9      	ldrh	r1, [r5, #4]
    cdf8:	f8a4 1003 	strh.w	r1, [r4, #3]
    cdfc:	88e9      	ldrh	r1, [r5, #6]
    cdfe:	f8a4 1005 	strh.w	r1, [r4, #5]
    ce02:	7a29      	ldrb	r1, [r5, #8]
    ce04:	71e1      	strb	r1, [r4, #7]
    ce06:	8969      	ldrh	r1, [r5, #10]
    ce08:	8121      	strh	r1, [r4, #8]
    ce0a:	89a9      	ldrh	r1, [r5, #12]
    ce0c:	8161      	strh	r1, [r4, #10]
    ce0e:	89e9      	ldrh	r1, [r5, #14]
    ce10:	81a1      	strh	r1, [r4, #12]
    ce12:	7c29      	ldrb	r1, [r5, #16]
    ce14:	f001 0101 	and.w	r1, r1, #1
    ce18:	73a1      	strb	r1, [r4, #14]
    ce1a:	200d      	movs	r0, #13
    ce1c:	e754      	b.n	ccc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>

0000ce1e <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ce1e:	223e      	movs	r2, #62	; 0x3e
    ce20:	7002      	strb	r2, [r0, #0]
    ce22:	2201      	movs	r2, #1
    ce24:	7082      	strb	r2, [r0, #2]
    ce26:	790a      	ldrb	r2, [r1, #4]
    ce28:	70c2      	strb	r2, [r0, #3]
    ce2a:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ce2e:	7102      	strb	r2, [r0, #4]
    ce30:	880a      	ldrh	r2, [r1, #0]
    ce32:	0a12      	lsrs	r2, r2, #8
    ce34:	7142      	strb	r2, [r0, #5]
    ce36:	788a      	ldrb	r2, [r1, #2]
    ce38:	7182      	strb	r2, [r0, #6]
    ce3a:	78ca      	ldrb	r2, [r1, #3]
    ce3c:	71c2      	strb	r2, [r0, #7]
    ce3e:	684a      	ldr	r2, [r1, #4]
    ce40:	6082      	str	r2, [r0, #8]
    ce42:	890a      	ldrh	r2, [r1, #8]
    ce44:	8182      	strh	r2, [r0, #12]
    ce46:	7d8a      	ldrb	r2, [r1, #22]
    ce48:	7382      	strb	r2, [r0, #14]
    ce4a:	8aca      	ldrh	r2, [r1, #22]
    ce4c:	0a12      	lsrs	r2, r2, #8
    ce4e:	73c2      	strb	r2, [r0, #15]
    ce50:	7e0a      	ldrb	r2, [r1, #24]
    ce52:	7402      	strb	r2, [r0, #16]
    ce54:	8b0a      	ldrh	r2, [r1, #24]
    ce56:	0a12      	lsrs	r2, r2, #8
    ce58:	7442      	strb	r2, [r0, #17]
    ce5a:	7e8a      	ldrb	r2, [r1, #26]
    ce5c:	7482      	strb	r2, [r0, #18]
    ce5e:	8b4a      	ldrh	r2, [r1, #26]
    ce60:	0a12      	lsrs	r2, r2, #8
    ce62:	74c2      	strb	r2, [r0, #19]
    ce64:	7f09      	ldrb	r1, [r1, #28]
    ce66:	7501      	strb	r1, [r0, #20]
    ce68:	2113      	movs	r1, #19
    ce6a:	7041      	strb	r1, [r0, #1]
    ce6c:	4608      	mov	r0, r1
    ce6e:	4770      	bx	lr
    ce70:	223e      	movs	r2, #62	; 0x3e
    ce72:	7002      	strb	r2, [r0, #0]
    ce74:	220a      	movs	r2, #10
    ce76:	7082      	strb	r2, [r0, #2]
    ce78:	790a      	ldrb	r2, [r1, #4]
    ce7a:	70c2      	strb	r2, [r0, #3]
    ce7c:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ce80:	7102      	strb	r2, [r0, #4]
    ce82:	880a      	ldrh	r2, [r1, #0]
    ce84:	0a12      	lsrs	r2, r2, #8
    ce86:	7142      	strb	r2, [r0, #5]
    ce88:	788a      	ldrb	r2, [r1, #2]
    ce8a:	7182      	strb	r2, [r0, #6]
    ce8c:	78ca      	ldrb	r2, [r1, #3]
    ce8e:	71c2      	strb	r2, [r0, #7]
    ce90:	684a      	ldr	r2, [r1, #4]
    ce92:	6082      	str	r2, [r0, #8]
    ce94:	890a      	ldrh	r2, [r1, #8]
    ce96:	8182      	strh	r2, [r0, #12]
    ce98:	f8d1 200a 	ldr.w	r2, [r1, #10]
    ce9c:	f8c0 200e 	str.w	r2, [r0, #14]
    cea0:	89ca      	ldrh	r2, [r1, #14]
    cea2:	8242      	strh	r2, [r0, #18]
    cea4:	690a      	ldr	r2, [r1, #16]
    cea6:	6142      	str	r2, [r0, #20]
    cea8:	8a8a      	ldrh	r2, [r1, #20]
    ceaa:	8302      	strh	r2, [r0, #24]
    ceac:	7d8a      	ldrb	r2, [r1, #22]
    ceae:	7682      	strb	r2, [r0, #26]
    ceb0:	8aca      	ldrh	r2, [r1, #22]
    ceb2:	0a12      	lsrs	r2, r2, #8
    ceb4:	76c2      	strb	r2, [r0, #27]
    ceb6:	7e0a      	ldrb	r2, [r1, #24]
    ceb8:	7702      	strb	r2, [r0, #28]
    ceba:	8b0a      	ldrh	r2, [r1, #24]
    cebc:	0a12      	lsrs	r2, r2, #8
    cebe:	7742      	strb	r2, [r0, #29]
    cec0:	7e8a      	ldrb	r2, [r1, #26]
    cec2:	7782      	strb	r2, [r0, #30]
    cec4:	8b4a      	ldrh	r2, [r1, #26]
    cec6:	0a12      	lsrs	r2, r2, #8
    cec8:	77c2      	strb	r2, [r0, #31]
    ceca:	7f09      	ldrb	r1, [r1, #28]
    cecc:	f880 1020 	strb.w	r1, [r0, #32]
    ced0:	211f      	movs	r1, #31
    ced2:	7041      	strb	r1, [r0, #1]
    ced4:	4608      	mov	r0, r1
    ced6:	4770      	bx	lr
    ced8:	094a      	lsrs	r2, r1, #5
    ceda:	f001 011f 	and.w	r1, r1, #31
    cede:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cee2:	40c8      	lsrs	r0, r1
    cee4:	f000 0001 	and.w	r0, r0, #1
    cee8:	4770      	bx	lr

0000ceea <sdc_hci_data_put>:
    ceea:	b510      	push	{r4, lr}
    ceec:	f06f 0415 	mvn.w	r4, #21
    cef0:	b120      	cbz	r0, cefc <sdc_hci_data_put+0x12>
    cef2:	f7ff fd73 	bl	c9dc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cef6:	b108      	cbz	r0, cefc <sdc_hci_data_put+0x12>
    cef8:	2000      	movs	r0, #0
    cefa:	bd10      	pop	{r4, pc}
    cefc:	4620      	mov	r0, r4
    cefe:	bd10      	pop	{r4, pc}

0000cf00 <sdc_hci_get>:
    cf00:	b510      	push	{r4, lr}
    cf02:	460c      	mov	r4, r1
    cf04:	b130      	cbz	r0, cf14 <sdc_hci_get+0x14>
    cf06:	b12c      	cbz	r4, cf14 <sdc_hci_get+0x14>
    cf08:	f7f4 fa72 	bl	13f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cf0c:	b128      	cbz	r0, cf1a <sdc_hci_get+0x1a>
    cf0e:	7020      	strb	r0, [r4, #0]
    cf10:	2000      	movs	r0, #0
    cf12:	bd10      	pop	{r4, pc}
    cf14:	f06f 0015 	mvn.w	r0, #21
    cf18:	bd10      	pop	{r4, pc}
    cf1a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf1e:	bd10      	pop	{r4, pc}

0000cf20 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cf20:	f003 b910 	b.w	10144 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cf24 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cf24:	f003 b92b 	b.w	1017e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cf28 <sdc_hci_cmd_cb_set_event_mask>:
    cf28:	b510      	push	{r4, lr}
    cf2a:	f7f4 fb0b 	bl	1544 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cf2e:	2000      	movs	r0, #0
    cf30:	bd10      	pop	{r4, pc}

0000cf32 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cf32:	b510      	push	{r4, lr}
    cf34:	f7f4 fb18 	bl	1568 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cf38:	2000      	movs	r0, #0
    cf3a:	bd10      	pop	{r4, pc}

0000cf3c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cf3c:	f003 b940 	b.w	101c0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cf40 <sdc_hci_cmd_vs_conn_event_extend>:
    cf40:	b508      	push	{r3, lr}
    cf42:	7800      	ldrb	r0, [r0, #0]
    cf44:	f88d 0000 	strb.w	r0, [sp]
    cf48:	4668      	mov	r0, sp
    cf4a:	f003 f81c 	bl	ff86 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cf4e:	bd08      	pop	{r3, pc}

0000cf50 <sdc_hci_cmd_vs_conn_update>:
    cf50:	2001      	movs	r0, #1
    cf52:	4770      	bx	lr

0000cf54 <sdc_hci_cmd_vs_event_length_set>:
    cf54:	f7fa b8c2 	b.w	70dc <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cf58 <sdc_hci_cmd_vs_llpm_mode_set>:
    cf58:	2001      	movs	r0, #1
    cf5a:	4770      	bx	lr

0000cf5c <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    cf5c:	7881      	ldrb	r1, [r0, #2]
    cf5e:	8800      	ldrh	r0, [r0, #0]
    cf60:	f002 bfc1 	b.w	fee6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000cf64 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cf64:	7800      	ldrb	r0, [r0, #0]
    cf66:	b100      	cbz	r0, cf6a <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cf68:	2001      	movs	r0, #1
    cf6a:	f002 bfb7 	b.w	fedc <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cf6e <sdc_hci_cmd_vs_set_adv_randomness>:
    cf6e:	f002 bfe4 	b.w	ff3a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000cf72 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    cf72:	b510      	push	{r4, lr}
    cf74:	4604      	mov	r4, r0
    cf76:	f7ff fa39 	bl	c3ec <mpsl_temperature_get>
    cf7a:	17c1      	asrs	r1, r0, #31
    cf7c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cf80:	1080      	asrs	r0, r0, #2
    cf82:	287f      	cmp	r0, #127	; 0x7f
    cf84:	dd01      	ble.n	cf8a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    cf86:	207f      	movs	r0, #127	; 0x7f
    cf88:	e004      	b.n	cf94 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cf8a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    cf8e:	4288      	cmp	r0, r1
    cf90:	da00      	bge.n	cf94 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    cf92:	4608      	mov	r0, r1
    cf94:	7020      	strb	r0, [r4, #0]
    cf96:	2000      	movs	r0, #0
    cf98:	bd10      	pop	{r4, pc}

0000cf9a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cf9a:	b570      	push	{r4, r5, r6, lr}
    cf9c:	4605      	mov	r5, r0
    cf9e:	2210      	movs	r2, #16
    cfa0:	2100      	movs	r1, #0
    cfa2:	f003 feab 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfa6:	2210      	movs	r2, #16
    cfa8:	2100      	movs	r1, #0
    cfaa:	f105 0010 	add.w	r0, r5, #16
    cfae:	f003 fea5 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cfb2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    cfb6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    cfba:	1c40      	adds	r0, r0, #1
    cfbc:	d10b      	bne.n	cfd6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cfbe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cfc2:	1c40      	adds	r0, r0, #1
    cfc4:	d107      	bne.n	cfd6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cfc6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    cfca:	1c40      	adds	r0, r0, #1
    cfcc:	d103      	bne.n	cfd6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    cfce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    cfd2:	1c40      	adds	r0, r0, #1
    cfd4:	d00b      	beq.n	cfee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    cfd6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    cfda:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    cfde:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    cfe2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    cfe6:	612a      	str	r2, [r5, #16]
    cfe8:	6168      	str	r0, [r5, #20]
    cfea:	61a9      	str	r1, [r5, #24]
    cfec:	61eb      	str	r3, [r5, #28]
    cfee:	2000      	movs	r0, #0
    cff0:	f7f4 ffce 	bl	1f90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    cff4:	b918      	cbnz	r0, cffe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    cff6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    cffa:	07c0      	lsls	r0, r0, #31
    cffc:	d118      	bne.n	d030 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    cffe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d002:	1c40      	adds	r0, r0, #1
    d004:	d10b      	bne.n	d01e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d006:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d00a:	1c40      	adds	r0, r0, #1
    d00c:	d107      	bne.n	d01e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d00e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d012:	1c40      	adds	r0, r0, #1
    d014:	d103      	bne.n	d01e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d016:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d01a:	1c40      	adds	r0, r0, #1
    d01c:	d008      	beq.n	d030 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d01e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d022:	6861      	ldr	r1, [r4, #4]
    d024:	68a2      	ldr	r2, [r4, #8]
    d026:	68e3      	ldr	r3, [r4, #12]
    d028:	6028      	str	r0, [r5, #0]
    d02a:	6069      	str	r1, [r5, #4]
    d02c:	60aa      	str	r2, [r5, #8]
    d02e:	60eb      	str	r3, [r5, #12]
    d030:	2000      	movs	r0, #0
    d032:	bd70      	pop	{r4, r5, r6, pc}

0000d034 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d034:	b538      	push	{r3, r4, r5, lr}
    d036:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d03a:	4604      	mov	r4, r0
    d03c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d040:	1c40      	adds	r0, r0, #1
    d042:	d105      	bne.n	d050 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d044:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d048:	43c0      	mvns	r0, r0
    d04a:	0400      	lsls	r0, r0, #16
    d04c:	0c00      	lsrs	r0, r0, #16
    d04e:	d03e      	beq.n	d0ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d050:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d054:	07c0      	lsls	r0, r0, #31
    d056:	d03a      	beq.n	d0ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d058:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d05c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d060:	f8ad 1000 	strh.w	r1, [sp]
    d064:	f8c4 0001 	str.w	r0, [r4, #1]
    d068:	f8bd 0000 	ldrh.w	r0, [sp]
    d06c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d070:	79a0      	ldrb	r0, [r4, #6]
    d072:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d076:	71a0      	strb	r0, [r4, #6]
    d078:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d07c:	1c40      	adds	r0, r0, #1
    d07e:	d00f      	beq.n	d0a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d080:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d084:	1c40      	adds	r0, r0, #1
    d086:	d00b      	beq.n	d0a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d088:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d08c:	1c40      	adds	r0, r0, #1
    d08e:	d007      	beq.n	d0a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d090:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d094:	1c40      	adds	r0, r0, #1
    d096:	d003      	beq.n	d0a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d098:	2000      	movs	r0, #0
    d09a:	f7f4 ff79 	bl	1f90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d09e:	b140      	cbz	r0, d0b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d0a0:	2210      	movs	r2, #16
    d0a2:	2100      	movs	r1, #0
    d0a4:	1de0      	adds	r0, r4, #7
    d0a6:	f003 fe29 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0aa:	2001      	movs	r0, #1
    d0ac:	7020      	strb	r0, [r4, #0]
    d0ae:	2000      	movs	r0, #0
    d0b0:	bd38      	pop	{r3, r4, r5, pc}
    d0b2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d0b6:	6869      	ldr	r1, [r5, #4]
    d0b8:	68a8      	ldr	r0, [r5, #8]
    d0ba:	68eb      	ldr	r3, [r5, #12]
    d0bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d0c0:	f8c4 100b 	str.w	r1, [r4, #11]
    d0c4:	f8c4 000f 	str.w	r0, [r4, #15]
    d0c8:	f8c4 3013 	str.w	r3, [r4, #19]
    d0cc:	e7ed      	b.n	d0aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d0ce:	2000      	movs	r0, #0
    d0d0:	e7ec      	b.n	d0ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d0d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d0d2:	f002 bf47 	b.w	ff64 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d0d6 <sdc_hci_cmd_ip_read_bd_addr>:
    d0d6:	f003 b846 	b.w	10166 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d0da <sdc_hci_cmd_ip_read_local_version_information>:
    d0da:	f7fa b80d 	b.w	70f8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d0de <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d0de:	f002 bcda 	b.w	fa96 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d0e2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d0e2:	f002 bcef 	b.w	fac4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d0e6 <sdc_hci_cmd_le_encrypt>:
    d0e6:	f002 bcf7 	b.w	fad8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d0ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d0ea:	8802      	ldrh	r2, [r0, #0]
    d0ec:	800a      	strh	r2, [r1, #0]
    d0ee:	f002 bcfc 	b.w	faea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d0f2 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d0f2:	8802      	ldrh	r2, [r0, #0]
    d0f4:	800a      	strh	r2, [r1, #0]
    d0f6:	f002 bd11 	b.w	fb1c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d0fa <sdc_hci_cmd_le_rand>:
    d0fa:	f002 bd39 	b.w	fb70 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d0fe <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d0fe:	f002 bd3d 	b.w	fb7c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d102 <sdc_hci_cmd_le_read_buffer_size>:
    d102:	f7f9 bef3 	b.w	6eec <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d106 <sdc_hci_cmd_le_read_channel_map>:
    d106:	f7f9 befb 	b.w	6f00 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d10a <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d10a:	f002 bd77 	b.w	fbfc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d10e <sdc_hci_cmd_le_read_max_data_length>:
    d10e:	f002 bd40 	b.w	fb92 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d112 <sdc_hci_cmd_le_read_phy>:
    d112:	f7f9 bf1d 	b.w	6f50 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d116 <sdc_hci_cmd_le_read_remote_features>:
    d116:	f002 bd45 	b.w	fba4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d11a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d11a:	f7f9 bf3f 	b.w	6f9c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d11e <sdc_hci_cmd_le_read_transmit_power>:
    d11e:	f002 bd5d 	b.w	fbdc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d122 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d122:	f002 bd6f 	b.w	fc04 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d126 <sdc_hci_cmd_le_set_adv_data>:
    d126:	f002 bd82 	b.w	fc2e <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d12a <sdc_hci_cmd_le_set_adv_enable>:
    d12a:	f002 bd95 	b.w	fc58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d12e <sdc_hci_cmd_le_set_adv_params>:
    d12e:	f002 bdc6 	b.w	fcbe <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d132 <sdc_hci_cmd_le_set_data_length>:
    d132:	f002 be59 	b.w	fde8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d136 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d136:	f002 be77 	b.w	fe28 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d13a <sdc_hci_cmd_le_set_default_phy>:
    d13a:	f7f9 bf39 	b.w	6fb0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d13e <sdc_hci_cmd_le_set_event_mask>:
    d13e:	b510      	push	{r4, lr}
    d140:	f7f4 f9ee 	bl	1520 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d144:	2000      	movs	r0, #0
    d146:	bd10      	pop	{r4, pc}

0000d148 <sdc_hci_cmd_le_set_phy>:
    d148:	f002 be7b 	b.w	fe42 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d14c <sdc_hci_cmd_le_set_random_address>:
    d14c:	f002 be92 	b.w	fe74 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d150 <sdc_hci_cmd_le_set_scan_response_data>:
    d150:	f002 be9e 	b.w	fe90 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d154 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d154:	f002 beb1 	b.w	feba <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d158 <sdc_hci_cmd_lc_disconnect>:
    d158:	f002 bc4f 	b.w	f9fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d15c <sdc_hci_cmd_lc_read_remote_version_information>:
    d15c:	f7f9 bfd6 	b.w	710c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d160:	b570      	push	{r4, r5, r6, lr}
    d162:	880b      	ldrh	r3, [r1, #0]
    d164:	7cc4      	ldrb	r4, [r0, #19]
    d166:	f100 0518 	add.w	r5, r0, #24
    d16a:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d16e:	8802      	ldrh	r2, [r0, #0]
    d170:	4435      	add	r5, r6
    d172:	1d64      	adds	r4, r4, #5
    d174:	882d      	ldrh	r5, [r5, #0]
    d176:	4422      	add	r2, r4
    d178:	b292      	uxth	r2, r2
    d17a:	4425      	add	r5, r4
    d17c:	1e54      	subs	r4, r2, #1
    d17e:	442c      	add	r4, r5
    d180:	fb94 f4f2 	sdiv	r4, r4, r2
    d184:	fb02 6204 	mla	r2, r2, r4, r6
    d188:	8840      	ldrh	r0, [r0, #2]
    d18a:	b292      	uxth	r2, r2
    d18c:	4290      	cmp	r0, r2
    d18e:	d903      	bls.n	d198 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d190:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d194:	4310      	orrs	r0, r2
    d196:	e002      	b.n	d19e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d198:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d19c:	4398      	bics	r0, r3
    d19e:	8008      	strh	r0, [r1, #0]
    d1a0:	bd70      	pop	{r4, r5, r6, pc}
    d1a2:	0442      	lsls	r2, r0, #17
    d1a4:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d1a8:	d107      	bne.n	d1ba <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d1aa:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d1ae:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d1b2:	4288      	cmp	r0, r1
    d1b4:	d001      	beq.n	d1ba <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d1b6:	2001      	movs	r0, #1
    d1b8:	4770      	bx	lr
    d1ba:	2000      	movs	r0, #0
    d1bc:	4770      	bx	lr

0000d1be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d1be:	8881      	ldrh	r1, [r0, #4]
    d1c0:	88c0      	ldrh	r0, [r0, #6]
    d1c2:	4288      	cmp	r0, r1
    d1c4:	d101      	bne.n	d1ca <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d1c6:	2001      	movs	r0, #1
    d1c8:	4770      	bx	lr
    d1ca:	2000      	movs	r0, #0
    d1cc:	4770      	bx	lr

0000d1ce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d2:	460f      	mov	r7, r1
    d1d4:	4604      	mov	r4, r0
    d1d6:	f100 0118 	add.w	r1, r0, #24
    d1da:	8880      	ldrh	r0, [r0, #4]
    d1dc:	2600      	movs	r6, #0
    d1de:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d1e2:	1845      	adds	r5, r0, r1
    d1e4:	603e      	str	r6, [r7, #0]
    d1e6:	89e0      	ldrh	r0, [r4, #14]
    d1e8:	2800      	cmp	r0, #0
    d1ea:	d016      	beq.n	d21a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d1ec:	8961      	ldrh	r1, [r4, #10]
    d1ee:	4408      	add	r0, r1
    d1f0:	b280      	uxth	r0, r0
    d1f2:	8160      	strh	r0, [r4, #10]
    d1f4:	8829      	ldrh	r1, [r5, #0]
    d1f6:	4288      	cmp	r0, r1
    d1f8:	d905      	bls.n	d206 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d1fa:	f240 1151 	movw	r1, #337	; 0x151
    d1fe:	f04f 0014 	mov.w	r0, #20
    d202:	f7f3 fffb 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d206:	d106      	bne.n	d216 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d208:	f104 0104 	add.w	r1, r4, #4
    d20c:	4620      	mov	r0, r4
    d20e:	f7ff ffa7 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d212:	8166      	strh	r6, [r4, #10]
    d214:	603d      	str	r5, [r7, #0]
    d216:	81e6      	strh	r6, [r4, #14]
    d218:	2001      	movs	r0, #1
    d21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d21e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d222:	4604      	mov	r4, r0
    d224:	f100 0318 	add.w	r3, r0, #24
    d228:	88c0      	ldrh	r0, [r0, #6]
    d22a:	460e      	mov	r6, r1
    d22c:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d230:	8a20      	ldrh	r0, [r4, #16]
    d232:	19d9      	adds	r1, r3, r7
    d234:	b108      	cbz	r0, d23a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d236:	42b0      	cmp	r0, r6
    d238:	d202      	bcs.n	d240 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d23a:	2000      	movs	r0, #0
    d23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d240:	89a0      	ldrh	r0, [r4, #12]
    d242:	2500      	movs	r5, #0
    d244:	b140      	cbz	r0, d258 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d246:	f8b1 c000 	ldrh.w	ip, [r1]
    d24a:	4560      	cmp	r0, ip
    d24c:	d006      	beq.n	d25c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d24e:	f44f 7101 	mov.w	r1, #516	; 0x204
    d252:	2014      	movs	r0, #20
    d254:	f7f3 ffd2 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d258:	800d      	strh	r5, [r1, #0]
    d25a:	e00e      	b.n	d27a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d25c:	f894 c013 	ldrb.w	ip, [r4, #19]
    d260:	4418      	add	r0, r3
    d262:	f10c 0c05 	add.w	ip, ip, #5
    d266:	44bc      	add	ip, r7
    d268:	4460      	add	r0, ip
    d26a:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d26e:	f820 cc03 	strh.w	ip, [r0, #-3]
    d272:	f894 c016 	ldrb.w	ip, [r4, #22]
    d276:	f800 cc01 	strb.w	ip, [r0, #-1]
    d27a:	89a0      	ldrh	r0, [r4, #12]
    d27c:	4430      	add	r0, r6
    d27e:	81a0      	strh	r0, [r4, #12]
    d280:	8808      	ldrh	r0, [r1, #0]
    d282:	4430      	add	r0, r6
    d284:	8008      	strh	r0, [r1, #0]
    d286:	b12a      	cbz	r2, d294 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d288:	1da1      	adds	r1, r4, #6
    d28a:	4620      	mov	r0, r4
    d28c:	f7ff ff68 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d290:	81a5      	strh	r5, [r4, #12]
    d292:	e00a      	b.n	d2aa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d294:	7ce0      	ldrb	r0, [r4, #19]
    d296:	89a1      	ldrh	r1, [r4, #12]
    d298:	1d40      	adds	r0, r0, #5
    d29a:	4438      	add	r0, r7
    d29c:	4419      	add	r1, r3
    d29e:	4408      	add	r0, r1
    d2a0:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d2a4:	82a1      	strh	r1, [r4, #20]
    d2a6:	7880      	ldrb	r0, [r0, #2]
    d2a8:	75a0      	strb	r0, [r4, #22]
    d2aa:	8225      	strh	r5, [r4, #16]
    d2ac:	2001      	movs	r0, #1
    d2ae:	e7c5      	b.n	d23c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d2b0 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d2b0:	1c80      	adds	r0, r0, #2
    d2b2:	4770      	bx	lr

0000d2b4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d2b4:	b510      	push	{r4, lr}
    d2b6:	4604      	mov	r4, r0
    d2b8:	88c0      	ldrh	r0, [r0, #6]
    d2ba:	88a1      	ldrh	r1, [r4, #4]
    d2bc:	4281      	cmp	r1, r0
    d2be:	d003      	beq.n	d2c8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d2c0:	8960      	ldrh	r0, [r4, #10]
    d2c2:	b908      	cbnz	r0, d2c8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d2c4:	89e0      	ldrh	r0, [r4, #14]
    d2c6:	b108      	cbz	r0, d2cc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d2c8:	2000      	movs	r0, #0
    d2ca:	bd10      	pop	{r4, pc}
    d2cc:	1d21      	adds	r1, r4, #4
    d2ce:	4620      	mov	r0, r4
    d2d0:	f7ff ff46 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2d4:	2000      	movs	r0, #0
    d2d6:	81e0      	strh	r0, [r4, #14]
    d2d8:	2001      	movs	r0, #1
    d2da:	bd10      	pop	{r4, pc}

0000d2dc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d2dc:	b510      	push	{r4, lr}
    d2de:	4604      	mov	r4, r0
    d2e0:	f100 0218 	add.w	r2, r0, #24
    d2e4:	88c0      	ldrh	r0, [r0, #6]
    d2e6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2ea:	4402      	add	r2, r0
    d2ec:	8820      	ldrh	r0, [r4, #0]
    d2ee:	2845      	cmp	r0, #69	; 0x45
    d2f0:	d200      	bcs.n	d2f4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d2f2:	2045      	movs	r0, #69	; 0x45
    d2f4:	4288      	cmp	r0, r1
    d2f6:	d204      	bcs.n	d302 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d2f8:	f44f 7182 	mov.w	r1, #260	; 0x104
    d2fc:	2014      	movs	r0, #20
    d2fe:	f7f3 ff7d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d302:	7ca0      	ldrb	r0, [r4, #18]
    d304:	2800      	cmp	r0, #0
    d306:	d003      	beq.n	d310 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d308:	8810      	ldrh	r0, [r2, #0]
    d30a:	4288      	cmp	r0, r1
    d30c:	d201      	bcs.n	d312 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d30e:	2000      	movs	r0, #0
    d310:	bd10      	pop	{r4, pc}
    d312:	8011      	strh	r1, [r2, #0]
    d314:	1da1      	adds	r1, r4, #6
    d316:	4620      	mov	r0, r4
    d318:	f7ff ff22 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d31c:	2000      	movs	r0, #0
    d31e:	74a0      	strb	r0, [r4, #18]
    d320:	2001      	movs	r0, #1
    d322:	bd10      	pop	{r4, pc}

0000d324 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d324:	b510      	push	{r4, lr}
    d326:	88c4      	ldrh	r4, [r0, #6]
    d328:	8883      	ldrh	r3, [r0, #4]
    d32a:	4601      	mov	r1, r0
    d32c:	f100 0218 	add.w	r2, r0, #24
    d330:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d334:	4410      	add	r0, r2
    d336:	42a3      	cmp	r3, r4
    d338:	d002      	beq.n	d340 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d33a:	8949      	ldrh	r1, [r1, #10]
    d33c:	2900      	cmp	r1, #0
    d33e:	d000      	beq.n	d342 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d340:	2000      	movs	r0, #0
    d342:	bd10      	pop	{r4, pc}

0000d344 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d344:	8803      	ldrh	r3, [r0, #0]
    d346:	2b45      	cmp	r3, #69	; 0x45
    d348:	d200      	bcs.n	d34c <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d34a:	2345      	movs	r3, #69	; 0x45
    d34c:	8013      	strh	r3, [r2, #0]
    d34e:	88c2      	ldrh	r2, [r0, #6]
    d350:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d354:	f100 0218 	add.w	r2, r0, #24
    d358:	441a      	add	r2, r3
    d35a:	600a      	str	r2, [r1, #0]
    d35c:	8980      	ldrh	r0, [r0, #12]
    d35e:	4770      	bx	lr

0000d360 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d360:	7cc0      	ldrb	r0, [r0, #19]
    d362:	1d40      	adds	r0, r0, #5
    d364:	4408      	add	r0, r1
    d366:	1ec0      	subs	r0, r0, #3
    d368:	6010      	str	r0, [r2, #0]
    d36a:	8808      	ldrh	r0, [r1, #0]
    d36c:	4770      	bx	lr

0000d36e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d372:	460e      	mov	r6, r1
    d374:	88c1      	ldrh	r1, [r0, #6]
    d376:	8902      	ldrh	r2, [r0, #8]
    d378:	4604      	mov	r4, r0
    d37a:	f100 0818 	add.w	r8, r0, #24
    d37e:	8800      	ldrh	r0, [r0, #0]
    d380:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d384:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d388:	2845      	cmp	r0, #69	; 0x45
    d38a:	d200      	bcs.n	d38e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d38c:	2045      	movs	r0, #69	; 0x45
    d38e:	42b0      	cmp	r0, r6
    d390:	d203      	bcs.n	d39a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d392:	21c6      	movs	r1, #198	; 0xc6
    d394:	2014      	movs	r0, #20
    d396:	f7f3 ff31 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d39a:	4610      	mov	r0, r2
    d39c:	f7ff ff01 	bl	d1a2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d3a0:	b110      	cbz	r0, d3a8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d3a2:	2000      	movs	r0, #0
    d3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d3a8:	42af      	cmp	r7, r5
    d3aa:	d908      	bls.n	d3be <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3ac:	7ce1      	ldrb	r1, [r4, #19]
    d3ae:	1b78      	subs	r0, r7, r5
    d3b0:	1a40      	subs	r0, r0, r1
    d3b2:	1f40      	subs	r0, r0, #5
    d3b4:	4286      	cmp	r6, r0
    d3b6:	dd02      	ble.n	d3be <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d3b8:	2000      	movs	r0, #0
    d3ba:	74a0      	strb	r0, [r4, #18]
    d3bc:	e7f1      	b.n	d3a2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d3be:	eb08 0005 	add.w	r0, r8, r5
    d3c2:	2101      	movs	r1, #1
    d3c4:	8006      	strh	r6, [r0, #0]
    d3c6:	74a1      	strb	r1, [r4, #18]
    d3c8:	e7ec      	b.n	d3a4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d3ca <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d3ca:	b538      	push	{r3, r4, r5, lr}
    d3cc:	88c4      	ldrh	r4, [r0, #6]
    d3ce:	8881      	ldrh	r1, [r0, #4]
    d3d0:	f100 0218 	add.w	r2, r0, #24
    d3d4:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d3d8:	441a      	add	r2, r3
    d3da:	42a1      	cmp	r1, r4
    d3dc:	d010      	beq.n	d400 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d3de:	8943      	ldrh	r3, [r0, #10]
    d3e0:	89c5      	ldrh	r5, [r0, #14]
    d3e2:	8812      	ldrh	r2, [r2, #0]
    d3e4:	442b      	add	r3, r5
    d3e6:	4293      	cmp	r3, r2
    d3e8:	d308      	bcc.n	d3fc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d3ea:	f8ad 1000 	strh.w	r1, [sp]
    d3ee:	4669      	mov	r1, sp
    d3f0:	f7ff feb6 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3f4:	f8bd 0000 	ldrh.w	r0, [sp]
    d3f8:	42a0      	cmp	r0, r4
    d3fa:	d001      	beq.n	d400 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d3fc:	2001      	movs	r0, #1
    d3fe:	bd38      	pop	{r3, r4, r5, pc}
    d400:	2000      	movs	r0, #0
    d402:	bd38      	pop	{r3, r4, r5, pc}

0000d404 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d404:	b570      	push	{r4, r5, r6, lr}
    d406:	88c6      	ldrh	r6, [r0, #6]
    d408:	8885      	ldrh	r5, [r0, #4]
    d40a:	4603      	mov	r3, r0
    d40c:	f100 0418 	add.w	r4, r0, #24
    d410:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d414:	4420      	add	r0, r4
    d416:	42b5      	cmp	r5, r6
    d418:	d102      	bne.n	d420 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d41a:	2000      	movs	r0, #0
    d41c:	81d8      	strh	r0, [r3, #14]
    d41e:	bd70      	pop	{r4, r5, r6, pc}
    d420:	8804      	ldrh	r4, [r0, #0]
    d422:	895d      	ldrh	r5, [r3, #10]
    d424:	7cde      	ldrb	r6, [r3, #19]
    d426:	1b64      	subs	r4, r4, r5
    d428:	4435      	add	r5, r6
    d42a:	4428      	add	r0, r5
    d42c:	880d      	ldrh	r5, [r1, #0]
    d42e:	b2a4      	uxth	r4, r4
    d430:	1c80      	adds	r0, r0, #2
    d432:	42a5      	cmp	r5, r4
    d434:	d900      	bls.n	d438 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d436:	800c      	strh	r4, [r1, #0]
    d438:	895c      	ldrh	r4, [r3, #10]
    d43a:	b124      	cbz	r4, d446 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d43c:	2400      	movs	r4, #0
    d43e:	7014      	strb	r4, [r2, #0]
    d440:	8809      	ldrh	r1, [r1, #0]
    d442:	81d9      	strh	r1, [r3, #14]
    d444:	bd70      	pop	{r4, r5, r6, pc}
    d446:	2401      	movs	r4, #1
    d448:	e7f9      	b.n	d43e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d44a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d44e:	461d      	mov	r5, r3
    d450:	4616      	mov	r6, r2
    d452:	9f06      	ldr	r7, [sp, #24]
    d454:	460b      	mov	r3, r1
    d456:	4604      	mov	r4, r0
    d458:	463a      	mov	r2, r7
    d45a:	4629      	mov	r1, r5
    d45c:	4630      	mov	r0, r6
    d45e:	f000 f839 	bl	d4d4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d462:	4283      	cmp	r3, r0
    d464:	d201      	bcs.n	d46a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d466:	219e      	movs	r1, #158	; 0x9e
    d468:	e012      	b.n	d490 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d46a:	07a0      	lsls	r0, r4, #30
    d46c:	d001      	beq.n	d472 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d46e:	219f      	movs	r1, #159	; 0x9f
    d470:	e00e      	b.n	d490 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d472:	2218      	movs	r2, #24
    d474:	2100      	movs	r1, #0
    d476:	4620      	mov	r0, r4
    d478:	f003 fc40 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d47c:	19a8      	adds	r0, r5, r6
    d47e:	1d40      	adds	r0, r0, #5
    d480:	4378      	muls	r0, r7
    d482:	b280      	uxth	r0, r0
    d484:	74e5      	strb	r5, [r4, #19]
    d486:	8060      	strh	r0, [r4, #2]
    d488:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d48c:	d903      	bls.n	d496 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d48e:	21a4      	movs	r1, #164	; 0xa4
    d490:	2014      	movs	r0, #20
    d492:	f7f3 feb3 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d496:	8026      	strh	r6, [r4, #0]
    d498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d49c <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d49c:	b570      	push	{r4, r5, r6, lr}
    d49e:	460b      	mov	r3, r1
    d4a0:	4604      	mov	r4, r0
    d4a2:	f100 0118 	add.w	r1, r0, #24
    d4a6:	8902      	ldrh	r2, [r0, #8]
    d4a8:	8880      	ldrh	r0, [r0, #4]
    d4aa:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d4ae:	440d      	add	r5, r1
    d4b0:	4282      	cmp	r2, r0
    d4b2:	d101      	bne.n	d4b8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d4b4:	2000      	movs	r0, #0
    d4b6:	bd70      	pop	{r4, r5, r6, pc}
    d4b8:	b123      	cbz	r3, d4c4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d4ba:	7ce2      	ldrb	r2, [r4, #19]
    d4bc:	1ca9      	adds	r1, r5, #2
    d4be:	4618      	mov	r0, r3
    d4c0:	f003 fba2 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d4c4:	882d      	ldrh	r5, [r5, #0]
    d4c6:	f104 0108 	add.w	r1, r4, #8
    d4ca:	4620      	mov	r0, r4
    d4cc:	f7ff fe48 	bl	d160 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4d0:	4628      	mov	r0, r5
    d4d2:	bd70      	pop	{r4, r5, r6, pc}

0000d4d4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d4d4:	4401      	add	r1, r0
    d4d6:	1d49      	adds	r1, r1, #5
    d4d8:	4351      	muls	r1, r2
    d4da:	b28a      	uxth	r2, r1
    d4dc:	2100      	movs	r1, #0
    d4de:	2845      	cmp	r0, #69	; 0x45
    d4e0:	d202      	bcs.n	d4e8 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d4e2:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d4e6:	b281      	uxth	r1, r0
    d4e8:	3218      	adds	r2, #24
    d4ea:	1850      	adds	r0, r2, r1
    d4ec:	b280      	uxth	r0, r0
    d4ee:	4770      	bx	lr

0000d4f0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4f4:	4688      	mov	r8, r1
    d4f6:	88c1      	ldrh	r1, [r0, #6]
    d4f8:	4604      	mov	r4, r0
    d4fa:	8900      	ldrh	r0, [r0, #8]
    d4fc:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d500:	f104 0518 	add.w	r5, r4, #24
    d504:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d508:	eb05 0906 	add.w	r9, r5, r6
    d50c:	f7ff fe49 	bl	d1a2 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d510:	2200      	movs	r2, #0
    d512:	b998      	cbnz	r0, d53c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d514:	8820      	ldrh	r0, [r4, #0]
    d516:	2845      	cmp	r0, #69	; 0x45
    d518:	d200      	bcs.n	d51c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d51a:	2045      	movs	r0, #69	; 0x45
    d51c:	42b7      	cmp	r7, r6
    d51e:	d906      	bls.n	d52e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d520:	7ce3      	ldrb	r3, [r4, #19]
    d522:	1bb9      	subs	r1, r7, r6
    d524:	1ac9      	subs	r1, r1, r3
    d526:	1f49      	subs	r1, r1, #5
    d528:	4281      	cmp	r1, r0
    d52a:	da00      	bge.n	d52e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d52c:	4608      	mov	r0, r1
    d52e:	89a1      	ldrh	r1, [r4, #12]
    d530:	b111      	cbz	r1, d538 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d532:	f8b9 3000 	ldrh.w	r3, [r9]
    d536:	1ac0      	subs	r0, r0, r3
    d538:	4540      	cmp	r0, r8
    d53a:	da03      	bge.n	d544 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d53c:	8222      	strh	r2, [r4, #16]
    d53e:	2000      	movs	r0, #0
    d540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d544:	7ce0      	ldrb	r0, [r4, #19]
    d546:	4429      	add	r1, r5
    d548:	1d40      	adds	r0, r0, #5
    d54a:	4430      	add	r0, r6
    d54c:	4408      	add	r0, r1
    d54e:	f8a4 8010 	strh.w	r8, [r4, #16]
    d552:	1ec0      	subs	r0, r0, #3
    d554:	e7f4      	b.n	d540 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d556 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d556:	b570      	push	{r4, r5, r6, lr}
    d558:	2300      	movs	r3, #0
    d55a:	f1a1 0208 	sub.w	r2, r1, #8
    d55e:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d562:	42a2      	cmp	r2, r4
    d564:	d304      	bcc.n	d570 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d566:	f240 11cd 	movw	r1, #461	; 0x1cd
    d56a:	2015      	movs	r0, #21
    d56c:	f7f3 fe46 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d570:	6802      	ldr	r2, [r0, #0]
    d572:	b90a      	cbnz	r2, d578 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d574:	e01e      	b.n	d5b4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d576:	4610      	mov	r0, r2
    d578:	6802      	ldr	r2, [r0, #0]
    d57a:	8893      	ldrh	r3, [r2, #4]
    d57c:	428b      	cmp	r3, r1
    d57e:	d002      	beq.n	d586 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d580:	6813      	ldr	r3, [r2, #0]
    d582:	2b00      	cmp	r3, #0
    d584:	d1f7      	bne.n	d576 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d586:	8894      	ldrh	r4, [r2, #4]
    d588:	4613      	mov	r3, r2
    d58a:	428c      	cmp	r4, r1
    d58c:	d101      	bne.n	d592 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d58e:	6811      	ldr	r1, [r2, #0]
    d590:	e00d      	b.n	d5ae <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d592:	f101 0508 	add.w	r5, r1, #8
    d596:	b2ae      	uxth	r6, r5
    d598:	2500      	movs	r5, #0
    d59a:	42b4      	cmp	r4, r6
    d59c:	d309      	bcc.n	d5b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d59e:	1a64      	subs	r4, r4, r1
    d5a0:	4411      	add	r1, r2
    d5a2:	600d      	str	r5, [r1, #0]
    d5a4:	808c      	strh	r4, [r1, #4]
    d5a6:	6802      	ldr	r2, [r0, #0]
    d5a8:	6812      	ldr	r2, [r2, #0]
    d5aa:	6002      	str	r2, [r0, #0]
    d5ac:	600a      	str	r2, [r1, #0]
    d5ae:	6001      	str	r1, [r0, #0]
    d5b0:	e000      	b.n	d5b4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d5b2:	2300      	movs	r3, #0
    d5b4:	4618      	mov	r0, r3
    d5b6:	bd70      	pop	{r4, r5, r6, pc}

0000d5b8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d5b8:	b510      	push	{r4, lr}
    d5ba:	000c      	movs	r4, r1
    d5bc:	d004      	beq.n	d5c8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d5be:	2c08      	cmp	r4, #8
    d5c0:	d207      	bcs.n	d5d2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d5c2:	f240 1195 	movw	r1, #405	; 0x195
    d5c6:	e00a      	b.n	d5de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d5c8:	b108      	cbz	r0, d5ce <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d5ca:	2100      	movs	r1, #0
    d5cc:	6001      	str	r1, [r0, #0]
    d5ce:	2000      	movs	r0, #0
    d5d0:	bd10      	pop	{r4, pc}
    d5d2:	b158      	cbz	r0, d5ec <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d5d4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d5d8:	d304      	bcc.n	d5e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d5da:	f240 11a7 	movw	r1, #423	; 0x1a7
    d5de:	2015      	movs	r0, #21
    d5e0:	f7f3 fe0c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5e4:	b2a1      	uxth	r1, r4
    d5e6:	6800      	ldr	r0, [r0, #0]
    d5e8:	f000 f814 	bl	d614 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d5ec:	1d20      	adds	r0, r4, #4
    d5ee:	bd10      	pop	{r4, pc}

0000d5f0 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d5f0:	2100      	movs	r1, #0
    d5f2:	6802      	ldr	r2, [r0, #0]
    d5f4:	e003      	b.n	d5fe <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d5f6:	8893      	ldrh	r3, [r2, #4]
    d5f8:	6812      	ldr	r2, [r2, #0]
    d5fa:	4419      	add	r1, r3
    d5fc:	b289      	uxth	r1, r1
    d5fe:	2a00      	cmp	r2, #0
    d600:	d1f9      	bne.n	d5f6 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d602:	f000 b807 	b.w	d614 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d606 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d606:	2300      	movs	r3, #0
    d608:	600b      	str	r3, [r1, #0]
    d60a:	808a      	strh	r2, [r1, #4]
    d60c:	6802      	ldr	r2, [r0, #0]
    d60e:	600a      	str	r2, [r1, #0]
    d610:	6001      	str	r1, [r0, #0]
    d612:	4770      	bx	lr
    d614:	2300      	movs	r3, #0
    d616:	6043      	str	r3, [r0, #4]
    d618:	1d02      	adds	r2, r0, #4
    d61a:	8101      	strh	r1, [r0, #8]
    d61c:	6002      	str	r2, [r0, #0]
    d61e:	4770      	bx	lr

0000d620 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d620:	b51c      	push	{r2, r3, r4, lr}
    d622:	4604      	mov	r4, r0
    d624:	2000      	movs	r0, #0
    d626:	9001      	str	r0, [sp, #4]
    d628:	9000      	str	r0, [sp, #0]
    d62a:	f88d 4006 	strb.w	r4, [sp, #6]
    d62e:	e00a      	b.n	d646 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d630:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d634:	4621      	mov	r1, r4
    d636:	f7f4 f867 	bl	1708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d63a:	b120      	cbz	r0, d646 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d63c:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d640:	2017      	movs	r0, #23
    d642:	f7f3 fddb 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d646:	4668      	mov	r0, sp
    d648:	f7f4 f816 	bl	1678 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d64c:	2800      	cmp	r0, #0
    d64e:	d0ef      	beq.n	d630 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d650:	bd1c      	pop	{r2, r3, r4, pc}

0000d652 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d652:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d656:	3aff      	subs	r2, #255	; 0xff
    d658:	d001      	beq.n	d65e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d65a:	2902      	cmp	r1, #2
    d65c:	d301      	bcc.n	d662 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d65e:	2000      	movs	r0, #0
    d660:	4770      	bx	lr
    d662:	f7f4 b883 	b.w	176c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d666:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d66a:	3aff      	subs	r2, #255	; 0xff
    d66c:	d001      	beq.n	d672 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d66e:	2902      	cmp	r1, #2
    d670:	d301      	bcc.n	d676 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d672:	2000      	movs	r0, #0
    d674:	4770      	bx	lr
    d676:	f7f4 b8a1 	b.w	17bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d67a:	b510      	push	{r4, lr}
    d67c:	4604      	mov	r4, r0
    d67e:	f7f4 f8e9 	bl	1854 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d682:	42a0      	cmp	r0, r4
    d684:	d901      	bls.n	d68a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d686:	2001      	movs	r0, #1
    d688:	bd10      	pop	{r4, pc}
    d68a:	2000      	movs	r0, #0
    d68c:	bd10      	pop	{r4, pc}

0000d68e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d68e:	b570      	push	{r4, r5, r6, lr}
    d690:	460e      	mov	r6, r1
    d692:	461d      	mov	r5, r3
    d694:	4611      	mov	r1, r2
    d696:	f000 f813 	bl	d6c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d69a:	4604      	mov	r4, r0
    d69c:	4629      	mov	r1, r5
    d69e:	4630      	mov	r0, r6
    d6a0:	f000 f804 	bl	d6ac <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d6a4:	4420      	add	r0, r4
    d6a6:	1d00      	adds	r0, r0, #4
    d6a8:	b280      	uxth	r0, r0
    d6aa:	bd70      	pop	{r4, r5, r6, pc}
    d6ac:	b510      	push	{r4, lr}
    d6ae:	460a      	mov	r2, r1
    d6b0:	2109      	movs	r1, #9
    d6b2:	f7ff ff0f 	bl	d4d4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6b6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d6ba:	1cc0      	adds	r0, r0, #3
    d6bc:	4008      	ands	r0, r1
    d6be:	bd10      	pop	{r4, pc}
    d6c0:	b510      	push	{r4, lr}
    d6c2:	460a      	mov	r2, r1
    d6c4:	210a      	movs	r1, #10
    d6c6:	f7ff ff05 	bl	d4d4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6ca:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d6ce:	1cc0      	adds	r0, r0, #3
    d6d0:	4008      	ands	r0, r1
    d6d2:	bd10      	pop	{r4, pc}
    d6d4:	b109      	cbz	r1, d6da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d6d6:	2100      	movs	r1, #0
    d6d8:	e000      	b.n	d6dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d6da:	2102      	movs	r1, #2
    d6dc:	1843      	adds	r3, r0, r1
    d6de:	7d1a      	ldrb	r2, [r3, #20]
    d6e0:	2a02      	cmp	r2, #2
    d6e2:	d008      	beq.n	d6f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d6e4:	7d5b      	ldrb	r3, [r3, #21]
    d6e6:	2b02      	cmp	r3, #2
    d6e8:	d009      	beq.n	d6fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d6ea:	2a03      	cmp	r2, #3
    d6ec:	d003      	beq.n	d6f6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d6ee:	2b03      	cmp	r3, #3
    d6f0:	d005      	beq.n	d6fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d6f2:	2000      	movs	r0, #0
    d6f4:	4770      	bx	lr
    d6f6:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d6fa:	8b00      	ldrh	r0, [r0, #24]
    d6fc:	4770      	bx	lr
    d6fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d702:	8b40      	ldrh	r0, [r0, #26]
    d704:	4770      	bx	lr
    d706:	b109      	cbz	r1, d70c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d708:	2100      	movs	r1, #0
    d70a:	e000      	b.n	d70e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d70c:	2102      	movs	r1, #2
    d70e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d712:	8b01      	ldrh	r1, [r0, #24]
    d714:	b911      	cbnz	r1, d71c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d716:	8b40      	ldrh	r0, [r0, #26]
    d718:	2800      	cmp	r0, #0
    d71a:	d000      	beq.n	d71e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d71c:	2001      	movs	r0, #1
    d71e:	4770      	bx	lr
    d720:	b538      	push	{r3, r4, r5, lr}
    d722:	7883      	ldrb	r3, [r0, #2]
    d724:	f88d 3000 	strb.w	r3, [sp]
    d728:	9b00      	ldr	r3, [sp, #0]
    d72a:	9300      	str	r3, [sp, #0]
    d72c:	f89d 3000 	ldrb.w	r3, [sp]
    d730:	b95b      	cbnz	r3, d74a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d732:	2400      	movs	r4, #0
    d734:	b10a      	cbz	r2, d73a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d736:	2300      	movs	r3, #0
    d738:	e000      	b.n	d73c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d73a:	2302      	movs	r3, #2
    d73c:	18c2      	adds	r2, r0, r3
    d73e:	7d15      	ldrb	r5, [r2, #20]
    d740:	2d02      	cmp	r5, #2
    d742:	d004      	beq.n	d74e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d744:	7d52      	ldrb	r2, [r2, #21]
    d746:	2a02      	cmp	r2, #2
    d748:	d004      	beq.n	d754 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d74a:	2000      	movs	r0, #0
    d74c:	bd38      	pop	{r3, r4, r5, pc}
    d74e:	461a      	mov	r2, r3
    d750:	1c5b      	adds	r3, r3, #1
    d752:	e000      	b.n	d756 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d754:	1c5a      	adds	r2, r3, #1
    d756:	b179      	cbz	r1, d778 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d758:	18c5      	adds	r5, r0, r3
    d75a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d75e:	752c      	strb	r4, [r5, #20]
    d760:	831c      	strh	r4, [r3, #24]
    d762:	2303      	movs	r3, #3
    d764:	1884      	adds	r4, r0, r2
    d766:	7523      	strb	r3, [r4, #20]
    d768:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d76c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d770:	685b      	ldr	r3, [r3, #4]
    d772:	600b      	str	r3, [r1, #0]
    d774:	8b00      	ldrh	r0, [r0, #24]
    d776:	8088      	strh	r0, [r1, #4]
    d778:	2001      	movs	r0, #1
    d77a:	bd38      	pop	{r3, r4, r5, pc}
    d77c:	b510      	push	{r4, lr}
    d77e:	b109      	cbz	r1, d784 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d780:	2100      	movs	r1, #0
    d782:	e000      	b.n	d786 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d784:	2102      	movs	r1, #2
    d786:	1843      	adds	r3, r0, r1
    d788:	7d1c      	ldrb	r4, [r3, #20]
    d78a:	4294      	cmp	r4, r2
    d78c:	d103      	bne.n	d796 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d78e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d792:	8b00      	ldrh	r0, [r0, #24]
    d794:	bd10      	pop	{r4, pc}
    d796:	7d5b      	ldrb	r3, [r3, #21]
    d798:	4293      	cmp	r3, r2
    d79a:	d103      	bne.n	d7a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d79c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d7a0:	8b40      	ldrh	r0, [r0, #26]
    d7a2:	bd10      	pop	{r4, pc}
    d7a4:	2000      	movs	r0, #0
    d7a6:	bd10      	pop	{r4, pc}
    d7a8:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d7ac:	d201      	bcs.n	d7b2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d7ae:	0841      	lsrs	r1, r0, #1
    d7b0:	e000      	b.n	d7b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d7b2:	21ff      	movs	r1, #255	; 0xff
    d7b4:	1a40      	subs	r0, r0, r1
    d7b6:	f240 6172 	movw	r1, #1650	; 0x672
    d7ba:	4288      	cmp	r0, r1
    d7bc:	db00      	blt.n	d7c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d7be:	4608      	mov	r0, r1
    d7c0:	b280      	uxth	r0, r0
    d7c2:	4770      	bx	lr

0000d7c4 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    d7c4:	2101      	movs	r1, #1
    d7c6:	f7ff bf85 	b.w	d6d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    d7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7ce:	4606      	mov	r6, r0
    d7d0:	f342 0780 	sbfx	r7, r2, #2, #1
    d7d4:	7848      	ldrb	r0, [r1, #1]
    d7d6:	460c      	mov	r4, r1
    d7d8:	f022 0504 	bic.w	r5, r2, #4
    d7dc:	1c7f      	adds	r7, r7, #1
    d7de:	b100      	cbz	r0, d7e2 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    d7e0:	b90d      	cbnz	r5, d7e6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    d7e2:	4328      	orrs	r0, r5
    d7e4:	d104      	bne.n	d7f0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    d7e6:	b145      	cbz	r5, d7fa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    d7e8:	2100      	movs	r1, #0
    d7ea:	4620      	mov	r0, r4
    d7ec:	f7f4 f930 	bl	1a50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    d7f0:	20ff      	movs	r0, #255	; 0xff
    d7f2:	70a0      	strb	r0, [r4, #2]
    d7f4:	b11f      	cbz	r7, d7fe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    d7f6:	2000      	movs	r0, #0
    d7f8:	e002      	b.n	d800 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    d7fa:	2101      	movs	r1, #1
    d7fc:	e7f5      	b.n	d7ea <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    d7fe:	2002      	movs	r0, #2
    d800:	1821      	adds	r1, r4, r0
    d802:	7d09      	ldrb	r1, [r1, #20]
    d804:	2903      	cmp	r1, #3
    d806:	d102      	bne.n	d80e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d808:	2d02      	cmp	r5, #2
    d80a:	d000      	beq.n	d80e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    d80c:	1c40      	adds	r0, r0, #1
    d80e:	1822      	adds	r2, r4, r0
    d810:	2101      	movs	r1, #1
    d812:	7511      	strb	r1, [r2, #20]
    d814:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    d818:	2200      	movs	r2, #0
    d81a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d81e:	830a      	strh	r2, [r1, #24]
    d820:	6840      	ldr	r0, [r0, #4]
    d822:	70a2      	strb	r2, [r4, #2]
    d824:	4631      	mov	r1, r6
    d826:	f362 010f 	bfi	r1, r2, #0, #16
    d82a:	e9c6 0100 	strd	r0, r1, [r6]
    d82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d832 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    d832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d836:	461e      	mov	r6, r3
    d838:	4613      	mov	r3, r2
    d83a:	4604      	mov	r4, r0
    d83c:	b109      	cbz	r1, d842 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    d83e:	2000      	movs	r0, #0
    d840:	e000      	b.n	d844 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    d842:	2002      	movs	r0, #2
    d844:	21ff      	movs	r1, #255	; 0xff
    d846:	70a1      	strb	r1, [r4, #2]
    d848:	1821      	adds	r1, r4, r0
    d84a:	7d0a      	ldrb	r2, [r1, #20]
    d84c:	2a01      	cmp	r2, #1
    d84e:	d003      	beq.n	d858 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    d850:	7d49      	ldrb	r1, [r1, #21]
    d852:	2901      	cmp	r1, #1
    d854:	d10c      	bne.n	d870 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    d856:	1c40      	adds	r0, r0, #1
    d858:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    d85c:	2700      	movs	r7, #0
    d85e:	8b29      	ldrh	r1, [r5, #24]
    d860:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    d864:	198a      	adds	r2, r1, r6
    d866:	4562      	cmp	r2, ip
    d868:	d905      	bls.n	d876 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    d86a:	4420      	add	r0, r4
    d86c:	832f      	strh	r7, [r5, #24]
    d86e:	7507      	strb	r7, [r0, #20]
    d870:	2000      	movs	r0, #0
    d872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d876:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    d87a:	4632      	mov	r2, r6
    d87c:	6840      	ldr	r0, [r0, #4]
    d87e:	4408      	add	r0, r1
    d880:	4619      	mov	r1, r3
    d882:	f003 f9c1 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d886:	8b28      	ldrh	r0, [r5, #24]
    d888:	4430      	add	r0, r6
    d88a:	8328      	strh	r0, [r5, #24]
    d88c:	70a7      	strb	r7, [r4, #2]
    d88e:	2001      	movs	r0, #1
    d890:	e7ef      	b.n	d872 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000d892 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    d892:	b510      	push	{r4, lr}
    d894:	2101      	movs	r1, #1
    d896:	f7ff ff36 	bl	d706 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d89a:	2800      	cmp	r0, #0
    d89c:	d000      	beq.n	d8a0 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    d89e:	2001      	movs	r0, #1
    d8a0:	bd10      	pop	{r4, pc}

0000d8a2 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    d8a2:	2201      	movs	r2, #1
    d8a4:	f7ff bf3c 	b.w	d720 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d8a8 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    d8a8:	2200      	movs	r2, #0
    d8aa:	f7ff bf39 	b.w	d720 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000d8ae <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    d8ae:	b510      	push	{r4, lr}
    d8b0:	2100      	movs	r1, #0
    d8b2:	f7ff ff28 	bl	d706 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    d8b6:	2800      	cmp	r0, #0
    d8b8:	d000      	beq.n	d8bc <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    d8ba:	2001      	movs	r0, #1
    d8bc:	bd10      	pop	{r4, pc}

0000d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    d8be:	b570      	push	{r4, r5, r6, lr}
    d8c0:	b109      	cbz	r1, d8c6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    d8c2:	2300      	movs	r3, #0
    d8c4:	e000      	b.n	d8c8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    d8c6:	2302      	movs	r3, #2
    d8c8:	21ff      	movs	r1, #255	; 0xff
    d8ca:	7081      	strb	r1, [r0, #2]
    d8cc:	18c1      	adds	r1, r0, r3
    d8ce:	2402      	movs	r4, #2
    d8d0:	7d0d      	ldrb	r5, [r1, #20]
    d8d2:	2d01      	cmp	r5, #1
    d8d4:	d007      	beq.n	d8e6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    d8d6:	7d4d      	ldrb	r5, [r1, #21]
    d8d8:	2d01      	cmp	r5, #1
    d8da:	d009      	beq.n	d8f0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    d8dc:	f44f 718b 	mov.w	r1, #278	; 0x116
    d8e0:	2009      	movs	r0, #9
    d8e2:	f7f3 fc8b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8e6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d8ea:	831a      	strh	r2, [r3, #24]
    d8ec:	750c      	strb	r4, [r1, #20]
    d8ee:	e003      	b.n	d8f8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    d8f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d8f4:	835a      	strh	r2, [r3, #26]
    d8f6:	754c      	strb	r4, [r1, #21]
    d8f8:	2100      	movs	r1, #0
    d8fa:	7081      	strb	r1, [r0, #2]
    d8fc:	bd70      	pop	{r4, r5, r6, pc}

0000d8fe <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    d8fe:	2101      	movs	r1, #1
    d900:	7001      	strb	r1, [r0, #0]
    d902:	4770      	bx	lr

0000d904 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    d904:	2201      	movs	r2, #1
    d906:	4611      	mov	r1, r2
    d908:	f7ff bf38 	b.w	d77c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d90c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    d90c:	2201      	movs	r2, #1
    d90e:	2100      	movs	r1, #0
    d910:	f7ff bf34 	b.w	d77c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000d914 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    d914:	2100      	movs	r1, #0
    d916:	f7ff bedd 	b.w	d6d4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d91a:	2800      	cmp	r0, #0
    d91c:	db09      	blt.n	d932 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    d91e:	f000 021f 	and.w	r2, r0, #31
    d922:	2101      	movs	r1, #1
    d924:	4091      	lsls	r1, r2
    d926:	0940      	lsrs	r0, r0, #5
    d928:	0080      	lsls	r0, r0, #2
    d92a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d92e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d932:	4770      	bx	lr
    d934:	2800      	cmp	r0, #0
    d936:	db0d      	blt.n	d954 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    d938:	f000 021f 	and.w	r2, r0, #31
    d93c:	2101      	movs	r1, #1
    d93e:	4091      	lsls	r1, r2
    d940:	0940      	lsrs	r0, r0, #5
    d942:	0080      	lsls	r0, r0, #2
    d944:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d948:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d94c:	f3bf 8f4f 	dsb	sy
    d950:	f3bf 8f6f 	isb	sy
    d954:	4770      	bx	lr
    d956:	b510      	push	{r4, lr}
    d958:	200e      	movs	r0, #14
    d95a:	f7ff ffeb 	bl	d934 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d95e:	200e      	movs	r0, #14
    d960:	f7ff ffdb 	bl	d91a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d964:	200f      	movs	r0, #15
    d966:	f7ff ffe5 	bl	d934 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    d96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d96e:	200f      	movs	r0, #15
    d970:	f7ff bfd3 	b.w	d91a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    d974:	2800      	cmp	r0, #0
    d976:	db09      	blt.n	d98c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    d978:	f000 021f 	and.w	r2, r0, #31
    d97c:	2101      	movs	r1, #1
    d97e:	4091      	lsls	r1, r2
    d980:	0940      	lsrs	r0, r0, #5
    d982:	0080      	lsls	r0, r0, #2
    d984:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d988:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d98c:	4770      	bx	lr
    d98e:	5840      	ldr	r0, [r0, r1]
    d990:	2800      	cmp	r0, #0
    d992:	d000      	beq.n	d996 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    d994:	2001      	movs	r0, #1
    d996:	4770      	bx	lr

0000d998 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d998:	b510      	push	{r4, lr}
    d99a:	4604      	mov	r4, r0
    d99c:	4620      	mov	r0, r4
    d99e:	f7f4 f95f 	bl	1c60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d9a2:	2811      	cmp	r0, #17
    d9a4:	d0fa      	beq.n	d99c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d9a6:	bd10      	pop	{r4, pc}

0000d9a8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d9a8:	b510      	push	{r4, lr}
    d9aa:	f7ff fff5 	bl	d998 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d9ae:	2800      	cmp	r0, #0
    d9b0:	d003      	beq.n	d9ba <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d9b2:	21a0      	movs	r1, #160	; 0xa0
    d9b4:	201d      	movs	r0, #29
    d9b6:	f7f3 fc21 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9ba:	bd10      	pop	{r4, pc}

0000d9bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d9bc:	f7f4 baae 	b.w	1f1c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d9c0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d9c0:	f7f4 ba9c 	b.w	1efc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d9c4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d9c4:	b510      	push	{r4, lr}
    d9c6:	4050      	eors	r0, r2
    d9c8:	780a      	ldrb	r2, [r1, #0]
    d9ca:	781c      	ldrb	r4, [r3, #0]
    d9cc:	4062      	eors	r2, r4
    d9ce:	4410      	add	r0, r2
    d9d0:	784a      	ldrb	r2, [r1, #1]
    d9d2:	785c      	ldrb	r4, [r3, #1]
    d9d4:	4062      	eors	r2, r4
    d9d6:	4410      	add	r0, r2
    d9d8:	788a      	ldrb	r2, [r1, #2]
    d9da:	789c      	ldrb	r4, [r3, #2]
    d9dc:	4062      	eors	r2, r4
    d9de:	4410      	add	r0, r2
    d9e0:	78ca      	ldrb	r2, [r1, #3]
    d9e2:	78dc      	ldrb	r4, [r3, #3]
    d9e4:	4062      	eors	r2, r4
    d9e6:	4410      	add	r0, r2
    d9e8:	790a      	ldrb	r2, [r1, #4]
    d9ea:	791c      	ldrb	r4, [r3, #4]
    d9ec:	7949      	ldrb	r1, [r1, #5]
    d9ee:	4062      	eors	r2, r4
    d9f0:	4410      	add	r0, r2
    d9f2:	795a      	ldrb	r2, [r3, #5]
    d9f4:	4051      	eors	r1, r2
    d9f6:	42c1      	cmn	r1, r0
    d9f8:	d101      	bne.n	d9fe <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d9fa:	2001      	movs	r0, #1
    d9fc:	bd10      	pop	{r4, pc}
    d9fe:	2000      	movs	r0, #0
    da00:	bd10      	pop	{r4, pc}

0000da02 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    da02:	b510      	push	{r4, lr}
    da04:	2900      	cmp	r1, #0
    da06:	4604      	mov	r4, r0
    da08:	f04f 0106 	mov.w	r1, #6
    da0c:	d002      	beq.n	da14 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    da0e:	f7f3 fc95 	bl	133c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da12:	e001      	b.n	da18 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    da14:	f7f3 fca0 	bl	1358 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da18:	7960      	ldrb	r0, [r4, #5]
    da1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    da1e:	7160      	strb	r0, [r4, #5]
    da20:	bd10      	pop	{r4, pc}

0000da22 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    da22:	4770      	bx	lr

0000da24 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    da24:	b530      	push	{r4, r5, lr}
    da26:	460c      	mov	r4, r1
    da28:	4605      	mov	r5, r0
    da2a:	b08d      	sub	sp, #52	; 0x34
    da2c:	f04f 0103 	mov.w	r1, #3
    da30:	f104 0003 	add.w	r0, r4, #3
    da34:	b112      	cbz	r2, da3c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    da36:	f7f3 fc81 	bl	133c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    da3a:	e001      	b.n	da40 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    da3c:	f7f3 fc8c 	bl	1358 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    da40:	7960      	ldrb	r0, [r4, #5]
    da42:	220d      	movs	r2, #13
    da44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    da48:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    da4c:	7160      	strb	r0, [r4, #5]
    da4e:	2100      	movs	r1, #0
    da50:	a804      	add	r0, sp, #16
    da52:	f003 f953 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    da56:	78e0      	ldrb	r0, [r4, #3]
    da58:	f88d 001f 	strb.w	r0, [sp, #31]
    da5c:	7920      	ldrb	r0, [r4, #4]
    da5e:	f88d 001e 	strb.w	r0, [sp, #30]
    da62:	7960      	ldrb	r0, [r4, #5]
    da64:	f88d 001d 	strb.w	r0, [sp, #29]
    da68:	2210      	movs	r2, #16
    da6a:	4629      	mov	r1, r5
    da6c:	4668      	mov	r0, sp
    da6e:	f003 f8cb 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da72:	4668      	mov	r0, sp
    da74:	f7ff ff98 	bl	d9a8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da78:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    da7c:	7020      	strb	r0, [r4, #0]
    da7e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    da82:	7060      	strb	r0, [r4, #1]
    da84:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    da88:	70a0      	strb	r0, [r4, #2]
    da8a:	b00d      	add	sp, #52	; 0x34
    da8c:	bd30      	pop	{r4, r5, pc}

0000da8e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    da8e:	f7f4 bdbd 	b.w	260c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    da92:	07c1      	lsls	r1, r0, #31
    da94:	d001      	beq.n	da9a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    da96:	2001      	movs	r0, #1
    da98:	4770      	bx	lr
    da9a:	0780      	lsls	r0, r0, #30
    da9c:	d501      	bpl.n	daa2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    da9e:	2002      	movs	r0, #2
    daa0:	4770      	bx	lr
    daa2:	2000      	movs	r0, #0
    daa4:	4770      	bx	lr
    daa6:	b510      	push	{r4, lr}
    daa8:	2801      	cmp	r0, #1
    daaa:	d008      	beq.n	dabe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    daac:	2802      	cmp	r0, #2
    daae:	d004      	beq.n	daba <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dab0:	f240 4122 	movw	r1, #1058	; 0x422
    dab4:	2006      	movs	r0, #6
    dab6:	f7f3 fba1 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    daba:	2001      	movs	r0, #1
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2000      	movs	r0, #0
    dac0:	bd10      	pop	{r4, pc}
    dac2:	2900      	cmp	r1, #0
    dac4:	d004      	beq.n	dad0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dac6:	2801      	cmp	r0, #1
    dac8:	d003      	beq.n	dad2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    daca:	2901      	cmp	r1, #1
    dacc:	d001      	beq.n	dad2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dace:	2002      	movs	r0, #2
    dad0:	4770      	bx	lr
    dad2:	2001      	movs	r0, #1
    dad4:	4770      	bx	lr
    dad6:	f7ff bc95 	b.w	d404 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dada <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dada:	2101      	movs	r1, #1
    dadc:	f7f5 b8a0 	b.w	2c20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dae0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dae0:	b510      	push	{r4, lr}
    dae2:	f002 fe75 	bl	107d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dae6:	b118      	cbz	r0, daf0 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    daec:	f7f9 becc 	b.w	7888 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    daf0:	20ff      	movs	r0, #255	; 0xff
    daf2:	bd10      	pop	{r4, pc}

0000daf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    daf4:	b510      	push	{r4, lr}
    daf6:	f7f5 f8db 	bl	2cb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dafa:	2810      	cmp	r0, #16
    dafc:	d003      	beq.n	db06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dafe:	f7f5 f8a7 	bl	2c50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    db02:	2810      	cmp	r0, #16
    db04:	d100      	bne.n	db08 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    db06:	2008      	movs	r0, #8
    db08:	bd10      	pop	{r4, pc}

0000db0a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    db0a:	b510      	push	{r4, lr}
    db0c:	f7f5 f8d0 	bl	2cb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    db10:	2810      	cmp	r0, #16
    db12:	d003      	beq.n	db1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    db14:	f7f5 f92a 	bl	2d6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    db18:	2001      	movs	r0, #1
    db1a:	bd10      	pop	{r4, pc}
    db1c:	2000      	movs	r0, #0
    db1e:	bd10      	pop	{r4, pc}

0000db20 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    db20:	b570      	push	{r4, r5, r6, lr}
    db22:	460e      	mov	r6, r1
    db24:	b08c      	sub	sp, #48	; 0x30
    db26:	4614      	mov	r4, r2
    db28:	4601      	mov	r1, r0
    db2a:	461d      	mov	r5, r3
    db2c:	2210      	movs	r2, #16
    db2e:	4668      	mov	r0, sp
    db30:	f000 f938 	bl	dda4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db34:	2210      	movs	r2, #16
    db36:	4631      	mov	r1, r6
    db38:	a804      	add	r0, sp, #16
    db3a:	f000 f933 	bl	dda4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db3e:	4668      	mov	r0, sp
    db40:	f7ff ff32 	bl	d9a8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    db44:	a908      	add	r1, sp, #32
    db46:	f04f 0210 	mov.w	r2, #16
    db4a:	4628      	mov	r0, r5
    db4c:	b11c      	cbz	r4, db56 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    db4e:	f000 f929 	bl	dda4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    db52:	b00c      	add	sp, #48	; 0x30
    db54:	bd70      	pop	{r4, r5, r6, pc}
    db56:	f003 f857 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db5a:	e7fa      	b.n	db52 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    db5c:	b510      	push	{r4, lr}
    db5e:	460c      	mov	r4, r1
    db60:	2100      	movs	r1, #0
    db62:	f7ff fd80 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    db66:	6060      	str	r0, [r4, #4]
    db68:	b118      	cbz	r0, db72 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    db6a:	2001      	movs	r0, #1
    db6c:	7020      	strb	r0, [r4, #0]
    db6e:	2000      	movs	r0, #0
    db70:	bd10      	pop	{r4, pc}
    db72:	2002      	movs	r0, #2
    db74:	bd10      	pop	{r4, pc}

0000db76 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    db76:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db7a:	4348      	muls	r0, r1
    db7c:	4770      	bx	lr

0000db7e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    db7e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db82:	fbb0 f0f1 	udiv	r0, r0, r1
    db86:	b280      	uxth	r0, r0
    db88:	4770      	bx	lr

0000db8a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    db8a:	b570      	push	{r4, r5, r6, lr}
    db8c:	4604      	mov	r4, r0
    db8e:	4290      	cmp	r0, r2
    db90:	d20b      	bcs.n	dbaa <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    db92:	1b10      	subs	r0, r2, r4
    db94:	2865      	cmp	r0, #101	; 0x65
    db96:	d200      	bcs.n	db9a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    db98:	2065      	movs	r0, #101	; 0x65
    db9a:	1825      	adds	r5, r4, r0
    db9c:	428d      	cmp	r5, r1
    db9e:	d803      	bhi.n	dba8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dba0:	2103      	movs	r1, #3
    dba2:	f7fc f8f3 	bl	9d8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dba6:	b108      	cbz	r0, dbac <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dba8:	4620      	mov	r0, r4
    dbaa:	bd70      	pop	{r4, r5, r6, pc}
    dbac:	4628      	mov	r0, r5
    dbae:	bd70      	pop	{r4, r5, r6, pc}

0000dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dbb0:	b510      	push	{r4, lr}
    dbb2:	f1a2 0310 	sub.w	r3, r2, #16
    dbb6:	290d      	cmp	r1, #13
    dbb8:	d24d      	bcs.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbba:	e8df f001 	tbb	[pc, r1]
    dbbe:	0907      	.short	0x0907
    dbc0:	1d1a150e 	.word	0x1d1a150e
    dbc4:	4e2c2921 	.word	0x4e2c2921
    dbc8:	0048362f 	.word	0x0048362f
    dbcc:	b3f2      	cbz	r2, dc4c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    dbce:	e042      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbd0:	2a06      	cmp	r2, #6
    dbd2:	d03e      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbd4:	2a07      	cmp	r2, #7
    dbd6:	d03c      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbd8:	e03d      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbda:	2a0b      	cmp	r2, #11
    dbdc:	d039      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbde:	2a0c      	cmp	r2, #12
    dbe0:	d037      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbe2:	2a0a      	cmp	r2, #10
    dbe4:	d035      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbe6:	e036      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbe8:	2a0d      	cmp	r2, #13
    dbea:	d032      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbec:	2a0e      	cmp	r2, #14
    dbee:	d030      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbf0:	e031      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbf2:	2b0c      	cmp	r3, #12
    dbf4:	d92d      	bls.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbf6:	e02e      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dbf8:	3a11      	subs	r2, #17
    dbfa:	2a0b      	cmp	r2, #11
    dbfc:	d929      	bls.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dbfe:	e02a      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc00:	2b03      	cmp	r3, #3
    dc02:	d926      	bls.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc04:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    dc08:	b1f8      	cbz	r0, dc4a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    dc0a:	2a1c      	cmp	r2, #28
    dc0c:	d921      	bls.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc0e:	e022      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc10:	2a04      	cmp	r2, #4
    dc12:	d01e      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc14:	e01f      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc16:	2a01      	cmp	r2, #1
    dc18:	d01b      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc1a:	e01c      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc1c:	2a1d      	cmp	r2, #29
    dc1e:	d018      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc20:	2a1e      	cmp	r2, #30
    dc22:	d016      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc24:	2a1f      	cmp	r2, #31
    dc26:	d014      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc28:	e015      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc2a:	2a20      	cmp	r2, #32
    dc2c:	d011      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc2e:	2a21      	cmp	r2, #33	; 0x21
    dc30:	d00f      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc32:	2a22      	cmp	r2, #34	; 0x22
    dc34:	d00d      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc36:	2a23      	cmp	r2, #35	; 0x23
    dc38:	d00b      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc3a:	2a24      	cmp	r2, #36	; 0x24
    dc3c:	d009      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc3e:	2a25      	cmp	r2, #37	; 0x25
    dc40:	d007      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc42:	2a26      	cmp	r2, #38	; 0x26
    dc44:	d005      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc46:	2a2e      	cmp	r2, #46	; 0x2e
    dc48:	d003      	beq.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc4a:	e004      	b.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc4c:	e001      	b.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dc4e:	2a28      	cmp	r2, #40	; 0x28
    dc50:	d101      	bne.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc52:	2001      	movs	r0, #1
    dc54:	bd10      	pop	{r4, pc}
    dc56:	2000      	movs	r0, #0
    dc58:	bd10      	pop	{r4, pc}
    dc5a:	2a0f      	cmp	r2, #15
    dc5c:	d1fb      	bne.n	dc56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dc5e:	e7f8      	b.n	dc52 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000dc60 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dc60:	280b      	cmp	r0, #11
    dc62:	d019      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc64:	280c      	cmp	r0, #12
    dc66:	d017      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc68:	280a      	cmp	r0, #10
    dc6a:	d015      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc6c:	280d      	cmp	r0, #13
    dc6e:	d013      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc70:	280e      	cmp	r0, #14
    dc72:	d011      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc74:	2820      	cmp	r0, #32
    dc76:	d00f      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc78:	2821      	cmp	r0, #33	; 0x21
    dc7a:	d00d      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc7c:	2822      	cmp	r0, #34	; 0x22
    dc7e:	d00b      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc80:	2823      	cmp	r0, #35	; 0x23
    dc82:	d009      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc84:	2824      	cmp	r0, #36	; 0x24
    dc86:	d007      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc88:	2825      	cmp	r0, #37	; 0x25
    dc8a:	d005      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc8c:	2826      	cmp	r0, #38	; 0x26
    dc8e:	d003      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc90:	282e      	cmp	r0, #46	; 0x2e
    dc92:	d001      	beq.n	dc98 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dc94:	2000      	movs	r0, #0
    dc96:	4770      	bx	lr
    dc98:	2001      	movs	r0, #1
    dc9a:	4770      	bx	lr

0000dc9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dc9c:	f011 0f0c 	tst.w	r1, #12
    dca0:	d018      	beq.n	dcd4 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dca2:	074a      	lsls	r2, r1, #29
    dca4:	f44f 7116 	mov.w	r1, #600	; 0x258
    dca8:	2a00      	cmp	r2, #0
    dcaa:	da02      	bge.n	dcb2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dcac:	f04f 0210 	mov.w	r2, #16
    dcb0:	e001      	b.n	dcb6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dcb2:	f04f 0240 	mov.w	r2, #64	; 0x40
    dcb6:	da01      	bge.n	dcbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dcb8:	f04f 0196 	mov.w	r1, #150	; 0x96
    dcbc:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dcc0:	eba0 0301 	sub.w	r3, r0, r1
    dcc4:	4288      	cmp	r0, r1
    dcc6:	d903      	bls.n	dcd0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dcc8:	fb93 f0f2 	sdiv	r0, r3, r2
    dccc:	b280      	uxth	r0, r0
    dcce:	4770      	bx	lr
    dcd0:	2000      	movs	r0, #0
    dcd2:	4770      	bx	lr
    dcd4:	2902      	cmp	r1, #2
    dcd6:	d008      	beq.n	dcea <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcd8:	2870      	cmp	r0, #112	; 0x70
    dcda:	d9f9      	bls.n	dcd0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dcdc:	3870      	subs	r0, #112	; 0x70
    dcde:	17c1      	asrs	r1, r0, #31
    dce0:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dce4:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dce8:	4770      	bx	lr
    dcea:	283c      	cmp	r0, #60	; 0x3c
    dcec:	d9f0      	bls.n	dcd0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dcee:	383c      	subs	r0, #60	; 0x3c
    dcf0:	17c1      	asrs	r1, r0, #31
    dcf2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dcf6:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dcfa:	4770      	bx	lr

0000dcfc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dcfc:	6809      	ldr	r1, [r1, #0]
    dcfe:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dd02:	4770      	bx	lr

0000dd04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dd04:	07c1      	lsls	r1, r0, #31
    dd06:	d001      	beq.n	dd0c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    dd08:	2001      	movs	r0, #1
    dd0a:	4770      	bx	lr
    dd0c:	0781      	lsls	r1, r0, #30
    dd0e:	d501      	bpl.n	dd14 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    dd10:	2002      	movs	r0, #2
    dd12:	4770      	bx	lr
    dd14:	0740      	lsls	r0, r0, #29
    dd16:	d501      	bpl.n	dd1c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dd18:	2008      	movs	r0, #8
    dd1a:	4770      	bx	lr
    dd1c:	2000      	movs	r0, #0
    dd1e:	4770      	bx	lr

0000dd20 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dd20:	b510      	push	{r4, lr}
    dd22:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dd26:	2901      	cmp	r1, #1
    dd28:	d006      	beq.n	dd38 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dd2a:	2902      	cmp	r1, #2
    dd2c:	d005      	beq.n	dd3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dd2e:	f240 31a1 	movw	r1, #929	; 0x3a1
    dd32:	2029      	movs	r0, #41	; 0x29
    dd34:	f7f3 fa62 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd38:	b108      	cbz	r0, dd3e <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dd3a:	4610      	mov	r0, r2
    dd3c:	bd10      	pop	{r4, pc}
    dd3e:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dd42:	bd10      	pop	{r4, pc}

0000dd44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd48:	4607      	mov	r7, r0
    dd4a:	460e      	mov	r6, r1
    dd4c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd50:	f7fc fbe2 	bl	a518 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd54:	b198      	cbz	r0, dd7e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd56:	b31e      	cbz	r6, dda0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd5c:	1b40      	subs	r0, r0, r5
    dd5e:	2300      	movs	r3, #0
    dd60:	eb61 0104 	sbc.w	r1, r1, r4
    dd64:	461a      	mov	r2, r3
    dd66:	1a1b      	subs	r3, r3, r0
    dd68:	418a      	sbcs	r2, r1
    dd6a:	da19      	bge.n	dda0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd6c:	1c42      	adds	r2, r0, #1
    dd6e:	f171 0100 	sbcs.w	r1, r1, #0
    dd72:	db07      	blt.n	dd84 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd74:	f240 211b 	movw	r1, #539	; 0x21b
    dd78:	2029      	movs	r0, #41	; 0x29
    dd7a:	f7f3 fa3f 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd7e:	f240 2111 	movw	r1, #529	; 0x211
    dd82:	e7f9      	b.n	dd78 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd84:	4430      	add	r0, r6
    dd86:	1e40      	subs	r0, r0, #1
    dd88:	fbb0 f1f6 	udiv	r1, r0, r6
    dd8c:	fb01 f006 	mul.w	r0, r1, r6
    dd90:	1828      	adds	r0, r5, r0
    dd92:	f144 0400 	adc.w	r4, r4, #0
    dd96:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dd9a:	4608      	mov	r0, r1
    dd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dda0:	2000      	movs	r0, #0
    dda2:	e7fb      	b.n	dd9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dda4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dda4:	b530      	push	{r4, r5, lr}
    dda6:	4613      	mov	r3, r2
    dda8:	e006      	b.n	ddb8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ddaa:	18cc      	adds	r4, r1, r3
    ddac:	1ad5      	subs	r5, r2, r3
    ddae:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ddb2:	1e5b      	subs	r3, r3, #1
    ddb4:	5544      	strb	r4, [r0, r5]
    ddb6:	b2db      	uxtb	r3, r3
    ddb8:	2b00      	cmp	r3, #0
    ddba:	d1f6      	bne.n	ddaa <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ddbc:	bd30      	pop	{r4, r5, pc}

0000ddbe <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ddbe:	2300      	movs	r3, #0
    ddc0:	6403      	str	r3, [r0, #64]	; 0x40
    ddc2:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    ddc6:	f240 2371 	movw	r3, #625	; 0x271
    ddca:	435a      	muls	r2, r3
    ddcc:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ddd0:	1e52      	subs	r2, r2, #1
    ddd2:	fbb2 f1f1 	udiv	r1, r2, r1
    ddd6:	6441      	str	r1, [r0, #68]	; 0x44
    ddd8:	4770      	bx	lr

0000ddda <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    ddda:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ddde:	4607      	mov	r7, r0
    dde0:	4690      	mov	r8, r2
    dde2:	468b      	mov	fp, r1
    dde4:	2601      	movs	r6, #1
    dde6:	4608      	mov	r0, r1
    dde8:	f000 f9e1 	bl	e1ae <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    ddec:	4682      	mov	sl, r0
    ddee:	4658      	mov	r0, fp
    ddf0:	f000 f9df 	bl	e1b2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    ddf4:	4681      	mov	r9, r0
    ddf6:	f7ff ff85 	bl	dd04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    ddfa:	4604      	mov	r4, r0
    ddfc:	4650      	mov	r0, sl
    ddfe:	f7ff ff81 	bl	dd04 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    de02:	4605      	mov	r5, r0
    de04:	ea54 0005 	orrs.w	r0, r4, r5
    de08:	d100      	bne.n	de0c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    de0a:	2600      	movs	r6, #0
    de0c:	f7f9 fcbe 	bl	778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    de10:	ea10 0f09 	tst.w	r0, r9
    de14:	d100      	bne.n	de18 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    de16:	2400      	movs	r4, #0
    de18:	f7f9 fcb8 	bl	778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    de1c:	ea10 0f0a 	tst.w	r0, sl
    de20:	d100      	bne.n	de24 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    de22:	2500      	movs	r5, #0
    de24:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    de28:	42a0      	cmp	r0, r4
    de2a:	d100      	bne.n	de2e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    de2c:	2400      	movs	r4, #0
    de2e:	f888 4000 	strb.w	r4, [r8]
    de32:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    de36:	42a8      	cmp	r0, r5
    de38:	d100      	bne.n	de3c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    de3a:	2500      	movs	r5, #0
    de3c:	f888 5001 	strb.w	r5, [r8, #1]
    de40:	b974      	cbnz	r4, de60 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    de42:	b96d      	cbnz	r5, de60 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    de44:	4658      	mov	r0, fp
    de46:	f000 f9a0 	bl	e18a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    de4a:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    de4e:	1a40      	subs	r0, r0, r1
    de50:	b200      	sxth	r0, r0
    de52:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    de56:	4288      	cmp	r0, r1
    de58:	dc01      	bgt.n	de5e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    de5a:	2800      	cmp	r0, #0
    de5c:	dc00      	bgt.n	de60 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    de5e:	2600      	movs	r6, #0
    de60:	4630      	mov	r0, r6
    de62:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000de66 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    de66:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de6a:	4348      	muls	r0, r1
    de6c:	4770      	bx	lr

0000de6e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    de6e:	f240 2171 	movw	r1, #625	; 0x271
    de72:	fb10 f001 	smulbb	r0, r0, r1
    de76:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de7a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    de7e:	4770      	bx	lr

0000de80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    de80:	b510      	push	{r4, lr}
    de82:	2300      	movs	r3, #0
    de84:	461a      	mov	r2, r3
    de86:	e003      	b.n	de90 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    de88:	5c84      	ldrb	r4, [r0, r2]
    de8a:	4323      	orrs	r3, r4
    de8c:	1c52      	adds	r2, r2, #1
    de8e:	b2d2      	uxtb	r2, r2
    de90:	428a      	cmp	r2, r1
    de92:	d3f9      	bcc.n	de88 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    de94:	b10b      	cbz	r3, de9a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    de96:	2000      	movs	r0, #0
    de98:	bd10      	pop	{r4, pc}
    de9a:	2001      	movs	r0, #1
    de9c:	bd10      	pop	{r4, pc}
    de9e:	4401      	add	r1, r0
    dea0:	2914      	cmp	r1, #20
    dea2:	dd01      	ble.n	dea8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    dea4:	2014      	movs	r0, #20
    dea6:	4770      	bx	lr
    dea8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    deac:	4281      	cmp	r1, r0
    deae:	dbfa      	blt.n	dea6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x26>
    deb0:	b248      	sxtb	r0, r1
    deb2:	4770      	bx	lr

0000deb4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    deb4:	b570      	push	{r4, r5, r6, lr}
    deb6:	4605      	mov	r5, r0
    deb8:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    debc:	b286      	uxth	r6, r0
    debe:	4610      	mov	r0, r2
    dec0:	7aec      	ldrb	r4, [r5, #11]
    dec2:	4631      	mov	r1, r6
    dec4:	f000 f863 	bl	df8e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    dec8:	4070      	eors	r0, r6
    deca:	2125      	movs	r1, #37	; 0x25
    decc:	fbb0 f2f1 	udiv	r2, r0, r1
    ded0:	fb01 0112 	mls	r1, r1, r2, r0
    ded4:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    ded8:	f001 0307 	and.w	r3, r1, #7
    dedc:	7852      	ldrb	r2, [r2, #1]
    dede:	2601      	movs	r6, #1
    dee0:	409e      	lsls	r6, r3
    dee2:	4232      	tst	r2, r6
    dee4:	d001      	beq.n	deea <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    dee6:	4608      	mov	r0, r1
    dee8:	bd70      	pop	{r4, r5, r6, pc}
    deea:	4344      	muls	r4, r0
    deec:	0c21      	lsrs	r1, r4, #16
    deee:	4628      	mov	r0, r5
    def0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    def4:	f7f5 b842 	b.w	2f7c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xbc>

0000def8 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    def8:	b510      	push	{r4, lr}
    defa:	4604      	mov	r4, r0
    defc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    df00:	b108      	cbz	r0, df06 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    df02:	2825      	cmp	r0, #37	; 0x25
    df04:	d901      	bls.n	df0a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    df06:	2012      	movs	r0, #18
    df08:	bd10      	pop	{r4, pc}
    df0a:	b132      	cbz	r2, df1a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    df0c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    df10:	b128      	cbz	r0, df1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    df12:	2801      	cmp	r0, #1
    df14:	d009      	beq.n	df2a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    df16:	201f      	movs	r0, #31
    df18:	bd10      	pop	{r4, pc}
    df1a:	2000      	movs	r0, #0
    df1c:	bd10      	pop	{r4, pc}
    df1e:	4620      	mov	r0, r4
    df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df24:	4611      	mov	r1, r2
    df26:	f7f4 bfe1 	b.w	2eec <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x2c>
    df2a:	8aa2      	ldrh	r2, [r4, #20]
    df2c:	6949      	ldr	r1, [r1, #20]
    df2e:	f104 0025 	add.w	r0, r4, #37	; 0x25
    df32:	f7ff ffbf 	bl	deb4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    df36:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    df3a:	e7ee      	b.n	df1a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000df3c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    df3c:	b570      	push	{r4, r5, r6, lr}
    df3e:	4604      	mov	r4, r0
    df40:	1c40      	adds	r0, r0, #1
    df42:	4288      	cmp	r0, r1
    df44:	d004      	beq.n	df50 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    df46:	6808      	ldr	r0, [r1, #0]
    df48:	f8c4 0001 	str.w	r0, [r4, #1]
    df4c:	7908      	ldrb	r0, [r1, #4]
    df4e:	7160      	strb	r0, [r4, #5]
    df50:	7960      	ldrb	r0, [r4, #5]
    df52:	f000 001f 	and.w	r0, r0, #31
    df56:	7160      	strb	r0, [r4, #5]
    df58:	2000      	movs	r0, #0
    df5a:	72e0      	strb	r0, [r4, #11]
    df5c:	4605      	mov	r5, r0
    df5e:	1966      	adds	r6, r4, r5
    df60:	7870      	ldrb	r0, [r6, #1]
    df62:	f000 fb4a 	bl	e5fa <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    df66:	71b0      	strb	r0, [r6, #6]
    df68:	7ae1      	ldrb	r1, [r4, #11]
    df6a:	1c6d      	adds	r5, r5, #1
    df6c:	4408      	add	r0, r1
    df6e:	b2ed      	uxtb	r5, r5
    df70:	72e0      	strb	r0, [r4, #11]
    df72:	2d05      	cmp	r5, #5
    df74:	d3f3      	bcc.n	df5e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    df76:	bd70      	pop	{r4, r5, r6, pc}
    df78:	b2c1      	uxtb	r1, r0
    df7a:	fa91 f1a1 	rbit	r1, r1
    df7e:	0a00      	lsrs	r0, r0, #8
    df80:	0e09      	lsrs	r1, r1, #24
    df82:	fa90 f0a0 	rbit	r0, r0
    df86:	0e00      	lsrs	r0, r0, #24
    df88:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    df8c:	4770      	bx	lr
    df8e:	b570      	push	{r4, r5, r6, lr}
    df90:	460d      	mov	r5, r1
    df92:	4048      	eors	r0, r1
    df94:	2400      	movs	r4, #0
    df96:	f7ff ffef 	bl	df78 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    df9a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df9e:	1c64      	adds	r4, r4, #1
    dfa0:	4428      	add	r0, r5
    dfa2:	b2e4      	uxtb	r4, r4
    dfa4:	b280      	uxth	r0, r0
    dfa6:	2c03      	cmp	r4, #3
    dfa8:	d3f5      	bcc.n	df96 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    dfaa:	bd70      	pop	{r4, r5, r6, pc}

0000dfac <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    dfac:	7802      	ldrb	r2, [r0, #0]
    dfae:	f002 020f 	and.w	r2, r2, #15
    dfb2:	2a03      	cmp	r2, #3
    dfb4:	d003      	beq.n	dfbe <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    dfb6:	2a05      	cmp	r2, #5
    dfb8:	d104      	bne.n	dfc4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    dfba:	f000 b92e 	b.w	e21a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    dfbe:	7840      	ldrb	r0, [r0, #1]
    dfc0:	280c      	cmp	r0, #12
    dfc2:	d001      	beq.n	dfc8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    dfc4:	2000      	movs	r0, #0
    dfc6:	4770      	bx	lr
    dfc8:	2001      	movs	r0, #1
    dfca:	4770      	bx	lr

0000dfcc <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    dfcc:	b570      	push	{r4, r5, r6, lr}
    dfce:	4614      	mov	r4, r2
    dfd0:	4605      	mov	r5, r0
    dfd2:	2a1f      	cmp	r2, #31
    dfd4:	d903      	bls.n	dfde <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    dfd6:	21ee      	movs	r1, #238	; 0xee
    dfd8:	202a      	movs	r0, #42	; 0x2a
    dfda:	f7f3 f90f 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfde:	f105 0009 	add.w	r0, r5, #9
    dfe2:	f002 fe11 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfe6:	1da4      	adds	r4, r4, #6
    dfe8:	706c      	strb	r4, [r5, #1]
    dfea:	bd70      	pop	{r4, r5, r6, pc}

0000dfec <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    dfec:	b510      	push	{r4, lr}
    dfee:	7802      	ldrb	r2, [r0, #0]
    dff0:	f001 030f 	and.w	r3, r1, #15
    dff4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    dff8:	431a      	orrs	r2, r3
    dffa:	7002      	strb	r2, [r0, #0]
    dffc:	2907      	cmp	r1, #7
    dffe:	d20c      	bcs.n	e01a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e000:	e8df f001 	tbb	[pc, r1]
    e004:	06040604 	.word	0x06040604
    e008:	00040804 	.word	0x00040804
    e00c:	2106      	movs	r1, #6
    e00e:	e002      	b.n	e016 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e010:	210c      	movs	r1, #12
    e012:	e000      	b.n	e016 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e014:	2122      	movs	r1, #34	; 0x22
    e016:	7041      	strb	r1, [r0, #1]
    e018:	bd10      	pop	{r4, pc}
    e01a:	21a8      	movs	r1, #168	; 0xa8
    e01c:	202a      	movs	r0, #42	; 0x2a
    e01e:	f7f3 f8ed 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e022 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e022:	680a      	ldr	r2, [r1, #0]
    e024:	f840 2f09 	str.w	r2, [r0, #9]!
    e028:	8889      	ldrh	r1, [r1, #4]
    e02a:	8081      	strh	r1, [r0, #4]
    e02c:	4770      	bx	lr

0000e02e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e02e:	7802      	ldrb	r2, [r0, #0]
    e030:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e034:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e038:	7002      	strb	r2, [r0, #0]
    e03a:	4770      	bx	lr

0000e03c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e03c:	680a      	ldr	r2, [r1, #0]
    e03e:	f840 2f03 	str.w	r2, [r0, #3]!
    e042:	8889      	ldrh	r1, [r1, #4]
    e044:	8081      	strh	r1, [r0, #4]
    e046:	4770      	bx	lr

0000e048 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e048:	7802      	ldrb	r2, [r0, #0]
    e04a:	2340      	movs	r3, #64	; 0x40
    e04c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e050:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e054:	430a      	orrs	r2, r1
    e056:	7002      	strb	r2, [r0, #0]
    e058:	4770      	bx	lr

0000e05a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e05a:	b570      	push	{r4, r5, r6, lr}
    e05c:	4614      	mov	r4, r2
    e05e:	4605      	mov	r5, r0
    e060:	2a1f      	cmp	r2, #31
    e062:	d904      	bls.n	e06e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e064:	f44f 7188 	mov.w	r1, #272	; 0x110
    e068:	202a      	movs	r0, #42	; 0x2a
    e06a:	f7f3 f8c7 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e06e:	f105 0009 	add.w	r0, r5, #9
    e072:	f002 fdc9 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e076:	1da4      	adds	r4, r4, #6
    e078:	706c      	strb	r4, [r5, #1]
    e07a:	bd70      	pop	{r4, r5, r6, pc}

0000e07c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e07c:	6842      	ldr	r2, [r0, #4]
    e07e:	600a      	str	r2, [r1, #0]
    e080:	7a00      	ldrb	r0, [r0, #8]
    e082:	7108      	strb	r0, [r1, #4]
    e084:	4770      	bx	lr

0000e086 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e086:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e08a:	4770      	bx	lr

0000e08c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e08c:	b570      	push	{r4, r5, r6, lr}
    e08e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e092:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e096:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e09a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e09e:	88c0      	ldrh	r0, [r0, #6]
    e0a0:	b131      	cbz	r1, e0b0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e0a2:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e0a6:	d903      	bls.n	e0b0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e0a8:	f640 5107 	movw	r1, #3335	; 0xd07
    e0ac:	428a      	cmp	r2, r1
    e0ae:	d90b      	bls.n	e0c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e0b0:	1f91      	subs	r1, r2, #6
    e0b2:	f640 467a 	movw	r6, #3194	; 0xc7a
    e0b6:	42b1      	cmp	r1, r6
    e0b8:	d810      	bhi.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0ba:	b17b      	cbz	r3, e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0bc:	2b08      	cmp	r3, #8
    e0be:	d80d      	bhi.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0c0:	4293      	cmp	r3, r2
    e0c2:	d20b      	bcs.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0c4:	4295      	cmp	r5, r2
    e0c6:	d809      	bhi.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0c8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e0cc:	d206      	bcs.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0ce:	f640 4176 	movw	r1, #3190	; 0xc76
    e0d2:	380a      	subs	r0, #10
    e0d4:	4288      	cmp	r0, r1
    e0d6:	d801      	bhi.n	e0dc <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e0d8:	2001      	movs	r0, #1
    e0da:	bd70      	pop	{r4, r5, r6, pc}
    e0dc:	2000      	movs	r0, #0
    e0de:	bd70      	pop	{r4, r5, r6, pc}

0000e0e0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e0e0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e0e4:	4770      	bx	lr

0000e0e6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e0e6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e0ea:	4770      	bx	lr

0000e0ec <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e0ec:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e0f0:	4770      	bx	lr

0000e0f2 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e0f2:	b510      	push	{r4, lr}
    e0f4:	29fb      	cmp	r1, #251	; 0xfb
    e0f6:	d904      	bls.n	e102 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e0f8:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e0fc:	202a      	movs	r0, #42	; 0x2a
    e0fe:	f7f3 f87d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e102:	7041      	strb	r1, [r0, #1]
    e104:	bd10      	pop	{r4, pc}

0000e106 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e106:	8980      	ldrh	r0, [r0, #12]
    e108:	8008      	strh	r0, [r1, #0]
    e10a:	4770      	bx	lr

0000e10c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e10c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e110:	6008      	str	r0, [r1, #0]
    e112:	4770      	bx	lr

0000e114 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e114:	6842      	ldr	r2, [r0, #4]
    e116:	600a      	str	r2, [r1, #0]
    e118:	6880      	ldr	r0, [r0, #8]
    e11a:	6048      	str	r0, [r1, #4]
    e11c:	4770      	bx	lr

0000e11e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e11e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e122:	600a      	str	r2, [r1, #0]
    e124:	6840      	ldr	r0, [r0, #4]
    e126:	6048      	str	r0, [r1, #4]
    e128:	4770      	bx	lr

0000e12a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e12a:	6809      	ldr	r1, [r1, #0]
    e12c:	60c1      	str	r1, [r0, #12]
    e12e:	4770      	bx	lr

0000e130 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e130:	680a      	ldr	r2, [r1, #0]
    e132:	6042      	str	r2, [r0, #4]
    e134:	6849      	ldr	r1, [r1, #4]
    e136:	6081      	str	r1, [r0, #8]
    e138:	4770      	bx	lr

0000e13a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e13a:	7800      	ldrb	r0, [r0, #0]
    e13c:	f000 0003 	and.w	r0, r0, #3
    e140:	4770      	bx	lr

0000e142 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e142:	8880      	ldrh	r0, [r0, #4]
    e144:	4770      	bx	lr

0000e146 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e146:	88c0      	ldrh	r0, [r0, #6]
    e148:	4770      	bx	lr

0000e14a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e14a:	8900      	ldrh	r0, [r0, #8]
    e14c:	4770      	bx	lr

0000e14e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e14e:	8940      	ldrh	r0, [r0, #10]
    e150:	4770      	bx	lr

0000e152 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e152:	8901      	ldrh	r1, [r0, #8]
    e154:	291b      	cmp	r1, #27
    e156:	d30c      	bcc.n	e172 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e158:	8941      	ldrh	r1, [r0, #10]
    e15a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e15e:	4291      	cmp	r1, r2
    e160:	d307      	bcc.n	e172 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e162:	8881      	ldrh	r1, [r0, #4]
    e164:	291b      	cmp	r1, #27
    e166:	d304      	bcc.n	e172 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e168:	88c0      	ldrh	r0, [r0, #6]
    e16a:	4290      	cmp	r0, r2
    e16c:	d301      	bcc.n	e172 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e16e:	2001      	movs	r0, #1
    e170:	4770      	bx	lr
    e172:	2000      	movs	r0, #0
    e174:	4770      	bx	lr

0000e176 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e176:	7901      	ldrb	r1, [r0, #4]
    e178:	0749      	lsls	r1, r1, #29
    e17a:	d004      	beq.n	e186 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e17c:	7940      	ldrb	r0, [r0, #5]
    e17e:	0740      	lsls	r0, r0, #29
    e180:	d001      	beq.n	e186 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e182:	2001      	movs	r0, #1
    e184:	4770      	bx	lr
    e186:	2000      	movs	r0, #0
    e188:	4770      	bx	lr

0000e18a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e18a:	88c0      	ldrh	r0, [r0, #6]
    e18c:	4770      	bx	lr

0000e18e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e18e:	7901      	ldrb	r1, [r0, #4]
    e190:	7940      	ldrb	r0, [r0, #5]
    e192:	f001 0107 	and.w	r1, r1, #7
    e196:	1e4a      	subs	r2, r1, #1
    e198:	f000 0007 	and.w	r0, r0, #7
    e19c:	4011      	ands	r1, r2
    e19e:	1e42      	subs	r2, r0, #1
    e1a0:	4010      	ands	r0, r2
    e1a2:	4301      	orrs	r1, r0
    e1a4:	d001      	beq.n	e1aa <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e1a6:	2000      	movs	r0, #0
    e1a8:	4770      	bx	lr
    e1aa:	2001      	movs	r0, #1
    e1ac:	4770      	bx	lr

0000e1ae <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e1ae:	7900      	ldrb	r0, [r0, #4]
    e1b0:	4770      	bx	lr

0000e1b2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e1b2:	7940      	ldrb	r0, [r0, #5]
    e1b4:	4770      	bx	lr

0000e1b6 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e1b6:	7900      	ldrb	r0, [r0, #4]
    e1b8:	4770      	bx	lr

0000e1ba <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e1ba:	7101      	strb	r1, [r0, #4]
    e1bc:	4770      	bx	lr

0000e1be <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e1be:	7940      	ldrb	r0, [r0, #5]
    e1c0:	4770      	bx	lr

0000e1c2 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e1c2:	7141      	strb	r1, [r0, #5]
    e1c4:	4770      	bx	lr

0000e1c6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e1c6:	b510      	push	{r4, lr}
    e1c8:	2a1b      	cmp	r2, #27
    e1ca:	d904      	bls.n	e1d6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e1cc:	f240 417f 	movw	r1, #1151	; 0x47f
    e1d0:	202a      	movs	r0, #42	; 0x2a
    e1d2:	f7f3 f813 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e1d6:	7042      	strb	r2, [r0, #1]
    e1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1dc:	1cc0      	adds	r0, r0, #3
    e1de:	f002 bd13 	b.w	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e1e2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e1e2:	7802      	ldrb	r2, [r0, #0]
    e1e4:	f001 0103 	and.w	r1, r1, #3
    e1e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e1ec:	430a      	orrs	r2, r1
    e1ee:	7002      	strb	r2, [r0, #0]
    e1f0:	4770      	bx	lr

0000e1f2 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e1f2:	7101      	strb	r1, [r0, #4]
    e1f4:	0a09      	lsrs	r1, r1, #8
    e1f6:	7141      	strb	r1, [r0, #5]
    e1f8:	4770      	bx	lr

0000e1fa <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e1fa:	7181      	strb	r1, [r0, #6]
    e1fc:	0a09      	lsrs	r1, r1, #8
    e1fe:	71c1      	strb	r1, [r0, #7]
    e200:	4770      	bx	lr

0000e202 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e202:	7201      	strb	r1, [r0, #8]
    e204:	0a09      	lsrs	r1, r1, #8
    e206:	7241      	strb	r1, [r0, #9]
    e208:	4770      	bx	lr

0000e20a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e20a:	7281      	strb	r1, [r0, #10]
    e20c:	0a09      	lsrs	r1, r1, #8
    e20e:	72c1      	strb	r1, [r0, #11]
    e210:	4770      	bx	lr

0000e212 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e212:	7900      	ldrb	r0, [r0, #4]
    e214:	4770      	bx	lr

0000e216 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e216:	7900      	ldrb	r0, [r0, #4]
    e218:	4770      	bx	lr
    e21a:	b570      	push	{r4, r5, r6, lr}
    e21c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e220:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e224:	f012 0fff 	tst.w	r2, #255	; 0xff
    e228:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e22c:	d108      	bne.n	e240 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e22e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e232:	b92c      	cbnz	r4, e240 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e234:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e238:	b914      	cbnz	r4, e240 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e23a:	0e12      	lsrs	r2, r2, #24
    e23c:	d100      	bne.n	e240 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e23e:	b34b      	cbz	r3, e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e240:	7846      	ldrb	r6, [r0, #1]
    e242:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e246:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e24a:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e24e:	7d83      	ldrb	r3, [r0, #22]
    e250:	2e22      	cmp	r6, #34	; 0x22
    e252:	d11f      	bne.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e254:	b131      	cbz	r1, e264 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e256:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e25a:	d903      	bls.n	e264 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e25c:	f640 5107 	movw	r1, #3335	; 0xd07
    e260:	428a      	cmp	r2, r1
    e262:	d90b      	bls.n	e27c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e264:	1f91      	subs	r1, r2, #6
    e266:	f640 467a 	movw	r6, #3194	; 0xc7a
    e26a:	42b1      	cmp	r1, r6
    e26c:	d812      	bhi.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e26e:	b18b      	cbz	r3, e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e270:	2b08      	cmp	r3, #8
    e272:	d80f      	bhi.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e274:	4293      	cmp	r3, r2
    e276:	d20d      	bcs.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e278:	4295      	cmp	r5, r2
    e27a:	d80b      	bhi.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e27c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e280:	d208      	bcs.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e282:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e286:	f640 4176 	movw	r1, #3190	; 0xc76
    e28a:	380a      	subs	r0, #10
    e28c:	4288      	cmp	r0, r1
    e28e:	d801      	bhi.n	e294 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e290:	2001      	movs	r0, #1
    e292:	bd70      	pop	{r4, r5, r6, pc}
    e294:	2000      	movs	r0, #0
    e296:	bd70      	pop	{r4, r5, r6, pc}

0000e298 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e298:	6841      	ldr	r1, [r0, #4]
    e29a:	2200      	movs	r2, #0
    e29c:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e2a0:	2b00      	cmp	r3, #0
    e2a2:	d004      	beq.n	e2ae <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e2a4:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e2a8:	6840      	ldr	r0, [r0, #4]
    e2aa:	f000 bd70 	b.w	ed8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e2ae:	4770      	bx	lr

0000e2b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e2b0:	b510      	push	{r4, lr}
    e2b2:	7a01      	ldrb	r1, [r0, #8]
    e2b4:	b119      	cbz	r1, e2be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e2b6:	2901      	cmp	r1, #1
    e2b8:	d006      	beq.n	e2c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e2ba:	2000      	movs	r0, #0
    e2bc:	bd10      	pop	{r4, pc}
    e2be:	88c2      	ldrh	r2, [r0, #6]
    e2c0:	6803      	ldr	r3, [r0, #0]
    e2c2:	8880      	ldrh	r0, [r0, #4]
    e2c4:	2102      	movs	r1, #2
    e2c6:	e003      	b.n	e2d0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e2c8:	88c2      	ldrh	r2, [r0, #6]
    e2ca:	6803      	ldr	r3, [r0, #0]
    e2cc:	8880      	ldrh	r0, [r0, #4]
    e2ce:	2101      	movs	r1, #1
    e2d0:	f7f4 febe 	bl	3050 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e2d4:	b908      	cbnz	r0, e2da <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e2d6:	f7f4 ff0b 	bl	30f0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e2da:	2001      	movs	r0, #1
    e2dc:	bd10      	pop	{r4, pc}

0000e2de <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e2de:	b508      	push	{r3, lr}
    e2e0:	7a03      	ldrb	r3, [r0, #8]
    e2e2:	f88d 3000 	strb.w	r3, [sp]
    e2e6:	9b00      	ldr	r3, [sp, #0]
    e2e8:	9300      	str	r3, [sp, #0]
    e2ea:	f89d 3000 	ldrb.w	r3, [sp]
    e2ee:	b123      	cbz	r3, e2fa <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e2f0:	f240 3117 	movw	r1, #791	; 0x317
    e2f4:	2010      	movs	r0, #16
    e2f6:	f7f2 ff81 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e2fe:	f7f5 b86b 	b.w	33d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>

0000e302 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e302:	f7f5 b897 	b.w	3434 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>

0000e306 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e306:	7a03      	ldrb	r3, [r0, #8]
    e308:	b082      	sub	sp, #8
    e30a:	f88d 3000 	strb.w	r3, [sp]
    e30e:	9b00      	ldr	r3, [sp, #0]
    e310:	9300      	str	r3, [sp, #0]
    e312:	f89d 3000 	ldrb.w	r3, [sp]
    e316:	2b00      	cmp	r3, #0
    e318:	d102      	bne.n	e320 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e31a:	b002      	add	sp, #8
    e31c:	f7f5 b85c 	b.w	33d8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    e320:	b002      	add	sp, #8
    e322:	4770      	bx	lr
    e324:	2000      	movs	r0, #0
    e326:	7048      	strb	r0, [r1, #1]
    e328:	2003      	movs	r0, #3
    e32a:	7008      	strb	r0, [r1, #0]
    e32c:	2001      	movs	r0, #1
    e32e:	7108      	strb	r0, [r1, #4]
    e330:	4770      	bx	lr

0000e332 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e332:	b510      	push	{r4, lr}
    e334:	888c      	ldrh	r4, [r1, #4]
    e336:	890a      	ldrh	r2, [r1, #8]
    e338:	884b      	ldrh	r3, [r1, #2]
    e33a:	88c9      	ldrh	r1, [r1, #6]
    e33c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e340:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e344:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e348:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e34c:	bd10      	pop	{r4, pc}

0000e34e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e34e:	b570      	push	{r4, r5, r6, lr}
    e350:	4615      	mov	r5, r2
    e352:	460c      	mov	r4, r1
    e354:	f000 f91a 	bl	e58c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e358:	3096      	adds	r0, #150	; 0x96
    e35a:	4428      	add	r0, r5
    e35c:	42a0      	cmp	r0, r4
    e35e:	d801      	bhi.n	e364 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e360:	1a20      	subs	r0, r4, r0
    e362:	bd70      	pop	{r4, r5, r6, pc}
    e364:	2000      	movs	r0, #0
    e366:	bd70      	pop	{r4, r5, r6, pc}

0000e368 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e36c:	4604      	mov	r4, r0
    e36e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e370:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e372:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e376:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e37a:	4285      	cmp	r5, r0
    e37c:	d300      	bcc.n	e380 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e37e:	4605      	mov	r5, r0
    e380:	4620      	mov	r0, r4
    e382:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e386:	f000 f89c 	bl	e4c2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e38a:	4601      	mov	r1, r0
    e38c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e38e:	8761      	strh	r1, [r4, #58]	; 0x3a
    e390:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e392:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e396:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e398:	4680      	mov	r8, r0
    e39a:	42aa      	cmp	r2, r5
    e39c:	d200      	bcs.n	e3a0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e39e:	462a      	mov	r2, r5
    e3a0:	428b      	cmp	r3, r1
    e3a2:	d200      	bcs.n	e3a6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e3a4:	460b      	mov	r3, r1
    e3a6:	8202      	strh	r2, [r0, #16]
    e3a8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e3ac:	42bd      	cmp	r5, r7
    e3ae:	d101      	bne.n	e3b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e3b0:	42b1      	cmp	r1, r6
    e3b2:	d001      	beq.n	e3b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e3b4:	2001      	movs	r0, #1
    e3b6:	e000      	b.n	e3ba <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e3b8:	2000      	movs	r0, #0
    e3ba:	4681      	mov	r9, r0
    e3bc:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e3c0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e3c4:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e3c6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e3c8:	4285      	cmp	r5, r0
    e3ca:	d300      	bcc.n	e3ce <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e3cc:	4605      	mov	r5, r0
    e3ce:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e3d2:	4620      	mov	r0, r4
    e3d4:	f000 f87d 	bl	e4d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e3d8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e3dc:	2902      	cmp	r1, #2
    e3de:	d108      	bne.n	e3f2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e3e0:	42af      	cmp	r7, r5
    e3e2:	d200      	bcs.n	e3e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e3e4:	463d      	mov	r5, r7
    e3e6:	4286      	cmp	r6, r0
    e3e8:	d200      	bcs.n	e3ec <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e3ea:	4630      	mov	r0, r6
    e3ec:	2100      	movs	r1, #0
    e3ee:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e3f2:	f8a8 5008 	strh.w	r5, [r8, #8]
    e3f6:	f8a8 000c 	strh.w	r0, [r8, #12]
    e3fa:	42bd      	cmp	r5, r7
    e3fc:	d101      	bne.n	e402 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e3fe:	42b0      	cmp	r0, r6
    e400:	d001      	beq.n	e406 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e402:	2001      	movs	r0, #1
    e404:	e000      	b.n	e408 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e406:	2000      	movs	r0, #0
    e408:	ea40 0009 	orr.w	r0, r0, r9
    e40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e410 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e410:	6840      	ldr	r0, [r0, #4]
    e412:	4770      	bx	lr

0000e414 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e418:	4616      	mov	r6, r2
    e41a:	460f      	mov	r7, r1
    e41c:	4604      	mov	r4, r0
    e41e:	f000 f8b5 	bl	e58c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e422:	4605      	mov	r5, r0
    e424:	463a      	mov	r2, r7
    e426:	6921      	ldr	r1, [r4, #16]
    e428:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e42a:	f000 f845 	bl	e4b8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e42e:	19a9      	adds	r1, r5, r6
    e430:	4281      	cmp	r1, r0
    e432:	d300      	bcc.n	e436 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e434:	4608      	mov	r0, r1
    e436:	6320      	str	r0, [r4, #48]	; 0x30
    e438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e43c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e43c:	221b      	movs	r2, #27
    e43e:	8402      	strh	r2, [r0, #32]
    e440:	8382      	strh	r2, [r0, #28]
    e442:	82c2      	strh	r2, [r0, #22]
    e444:	8282      	strh	r2, [r0, #20]
    e446:	8142      	strh	r2, [r0, #10]
    e448:	8202      	strh	r2, [r0, #16]
    e44a:	8102      	strh	r2, [r0, #8]
    e44c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e44e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e450:	8482      	strh	r2, [r0, #36]	; 0x24
    e452:	2900      	cmp	r1, #0
    e454:	d10a      	bne.n	e46c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e456:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e45a:	8441      	strh	r1, [r0, #34]	; 0x22
    e45c:	83c1      	strh	r1, [r0, #30]
    e45e:	8341      	strh	r1, [r0, #26]
    e460:	8301      	strh	r1, [r0, #24]
    e462:	81c1      	strh	r1, [r0, #14]
    e464:	8241      	strh	r1, [r0, #18]
    e466:	8181      	strh	r1, [r0, #12]
    e468:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e46a:	8601      	strh	r1, [r0, #48]	; 0x30
    e46c:	4770      	bx	lr

0000e46e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e46e:	6800      	ldr	r0, [r0, #0]
    e470:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e474:	4290      	cmp	r0, r2
    e476:	d903      	bls.n	e480 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e478:	1a40      	subs	r0, r0, r1
    e47a:	389c      	subs	r0, #156	; 0x9c
    e47c:	0840      	lsrs	r0, r0, #1
    e47e:	4770      	bx	lr
    e480:	2000      	movs	r0, #0
    e482:	4770      	bx	lr

0000e484 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e484:	b510      	push	{r4, lr}
    e486:	9c02      	ldr	r4, [sp, #8]
    e488:	8281      	strh	r1, [r0, #20]
    e48a:	82c2      	strh	r2, [r0, #22]
    e48c:	8303      	strh	r3, [r0, #24]
    e48e:	8344      	strh	r4, [r0, #26]
    e490:	bd10      	pop	{r4, pc}
    e492:	1d00      	adds	r0, r0, #4
    e494:	b510      	push	{r4, lr}
    e496:	b280      	uxth	r0, r0
    e498:	2901      	cmp	r1, #1
    e49a:	d006      	beq.n	e4aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e49c:	2902      	cmp	r1, #2
    e49e:	d007      	beq.n	e4b0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e4a0:	f240 2126 	movw	r1, #550	; 0x226
    e4a4:	2006      	movs	r0, #6
    e4a6:	f7f2 fea9 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4aa:	00c0      	lsls	r0, r0, #3
    e4ac:	3050      	adds	r0, #80	; 0x50
    e4ae:	e001      	b.n	e4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e4b0:	0080      	lsls	r0, r0, #2
    e4b2:	302c      	adds	r0, #44	; 0x2c
    e4b4:	b280      	uxth	r0, r0
    e4b6:	bd10      	pop	{r4, pc}
    e4b8:	4288      	cmp	r0, r1
    e4ba:	d300      	bcc.n	e4be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e4bc:	4608      	mov	r0, r1
    e4be:	1a80      	subs	r0, r0, r2
    e4c0:	4770      	bx	lr
    e4c2:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e4c6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e4ca:	4281      	cmp	r1, r0
    e4cc:	d200      	bcs.n	e4d0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e4ce:	4608      	mov	r0, r1
    e4d0:	4770      	bx	lr
    e4d2:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e4d6:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e4da:	4281      	cmp	r1, r0
    e4dc:	d200      	bcs.n	e4e0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e4de:	4608      	mov	r0, r1
    e4e0:	4770      	bx	lr
    e4e2:	b538      	push	{r3, r4, r5, lr}
    e4e4:	2200      	movs	r2, #0
    e4e6:	f1a0 0318 	sub.w	r3, r0, #24
    e4ea:	2413      	movs	r4, #19
    e4ec:	7202      	strb	r2, [r0, #8]
    e4ee:	704a      	strb	r2, [r1, #1]
    e4f0:	700c      	strb	r4, [r1, #0]
    e4f2:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e4f6:	604d      	str	r5, [r1, #4]
    e4f8:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e4fc:	608d      	str	r5, [r1, #8]
    e4fe:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e502:	60cd      	str	r5, [r1, #12]
    e504:	7a05      	ldrb	r5, [r0, #8]
    e506:	f88d 5000 	strb.w	r5, [sp]
    e50a:	9d00      	ldr	r5, [sp, #0]
    e50c:	9500      	str	r5, [sp, #0]
    e50e:	f89d 5000 	ldrb.w	r5, [sp]
    e512:	2d00      	cmp	r5, #0
    e514:	d1ea      	bne.n	e4ec <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e516:	bd38      	pop	{r3, r4, r5, pc}
    e518:	b5f0      	push	{r4, r5, r6, r7, lr}
    e51a:	b087      	sub	sp, #28
    e51c:	460d      	mov	r5, r1
    e51e:	4604      	mov	r4, r0
    e520:	f7f4 fd82 	bl	3028 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e524:	2600      	movs	r6, #0
    e526:	b328      	cbz	r0, e574 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e528:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    e52c:	7226      	strb	r6, [r4, #8]
    e52e:	8807      	ldrh	r7, [r0, #0]
    e530:	a903      	add	r1, sp, #12
    e532:	4638      	mov	r0, r7
    e534:	f001 fcf3 	bl	ff1e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e538:	b108      	cbz	r0, e53e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e53a:	21fd      	movs	r1, #253	; 0xfd
    e53c:	e017      	b.n	e56e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e53e:	f8ad 7000 	strh.w	r7, [sp]
    e542:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e546:	f8ad 0002 	strh.w	r0, [sp, #2]
    e54a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e54e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e552:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e556:	f8ad 0006 	strh.w	r0, [sp, #6]
    e55a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e55e:	f8ad 0008 	strh.w	r0, [sp, #8]
    e562:	4668      	mov	r0, sp
    e564:	f001 fd17 	bl	ff96 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e568:	b120      	cbz	r0, e574 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e56a:	f44f 7183 	mov.w	r1, #262	; 0x106
    e56e:	202c      	movs	r0, #44	; 0x2c
    e570:	f7f2 fe44 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e574:	201b      	movs	r0, #27
    e576:	7028      	strb	r0, [r5, #0]
    e578:	706e      	strb	r6, [r5, #1]
    e57a:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e57e:	6068      	str	r0, [r5, #4]
    e580:	6860      	ldr	r0, [r4, #4]
    e582:	60a8      	str	r0, [r5, #8]
    e584:	8920      	ldrh	r0, [r4, #8]
    e586:	81a8      	strh	r0, [r5, #12]
    e588:	b007      	add	sp, #28
    e58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e58c:	2196      	movs	r1, #150	; 0x96
    e58e:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e592:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e596:	f000 b800 	b.w	e59a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e59a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e59e:	460d      	mov	r5, r1
    e5a0:	4606      	mov	r6, r0
    e5a2:	4698      	mov	r8, r3
    e5a4:	4617      	mov	r7, r2
    e5a6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e5a8:	4611      	mov	r1, r2
    e5aa:	f7ff ff72 	bl	e492 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e5ae:	4604      	mov	r4, r0
    e5b0:	4639      	mov	r1, r7
    e5b2:	4630      	mov	r0, r6
    e5b4:	f7ff ff8d 	bl	e4d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e5b8:	42a0      	cmp	r0, r4
    e5ba:	d200      	bcs.n	e5be <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e5bc:	4604      	mov	r4, r0
    e5be:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e5c0:	4641      	mov	r1, r8
    e5c2:	f7ff ff66 	bl	e492 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e5c6:	4607      	mov	r7, r0
    e5c8:	4641      	mov	r1, r8
    e5ca:	4630      	mov	r0, r6
    e5cc:	f7ff ff79 	bl	e4c2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e5d0:	42b8      	cmp	r0, r7
    e5d2:	d300      	bcc.n	e5d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e5d4:	4638      	mov	r0, r7
    e5d6:	4420      	add	r0, r4
    e5d8:	4428      	add	r0, r5
    e5da:	1d80      	adds	r0, r0, #6
    e5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5e0:	b510      	push	{r4, lr}
    e5e2:	4604      	mov	r4, r0
    e5e4:	2108      	movs	r1, #8
    e5e6:	4620      	mov	r0, r4
    e5e8:	f7f2 feb6 	bl	1358 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e5ec:	6820      	ldr	r0, [r4, #0]
    e5ee:	2800      	cmp	r0, #0
    e5f0:	d102      	bne.n	e5f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x174>
    e5f2:	6860      	ldr	r0, [r4, #4]
    e5f4:	2800      	cmp	r0, #0
    e5f6:	d0f5      	beq.n	e5e4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x160>
    e5f8:	bd10      	pop	{r4, pc}

0000e5fa <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e5fa:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e5fe:	2255      	movs	r2, #85	; 0x55
    e600:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e604:	4408      	add	r0, r1
    e606:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e60a:	2233      	movs	r2, #51	; 0x33
    e60c:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e610:	4408      	add	r0, r1
    e612:	f000 010f 	and.w	r1, r0, #15
    e616:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e61a:	4770      	bx	lr

0000e61c <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e61c:	b510      	push	{r4, lr}
    e61e:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e622:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e626:	2000      	movs	r0, #0
    e628:	7048      	strb	r0, [r1, #1]
    e62a:	230a      	movs	r3, #10
    e62c:	700b      	strb	r3, [r1, #0]
    e62e:	7108      	strb	r0, [r1, #4]
    e630:	f8a1 4005 	strh.w	r4, [r1, #5]
    e634:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e638:	71c8      	strb	r0, [r1, #7]
    e63a:	4620      	mov	r0, r4
    e63c:	f7f3 f9da 	bl	19f4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e640:	f7fe fdbd 	bl	d1be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e644:	b140      	cbz	r0, e658 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e646:	4620      	mov	r0, r4
    e648:	f7ff f9b8 	bl	d9bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e64c:	4620      	mov	r0, r4
    e64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e652:	2100      	movs	r1, #0
    e654:	f7f3 b858 	b.w	1708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e658:	2160      	movs	r1, #96	; 0x60
    e65a:	2063      	movs	r0, #99	; 0x63
    e65c:	f7f2 fdce 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e660 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e660:	b538      	push	{r3, r4, r5, lr}
    e662:	2200      	movs	r2, #0
    e664:	704a      	strb	r2, [r1, #1]
    e666:	2307      	movs	r3, #7
    e668:	700b      	strb	r3, [r1, #0]
    e66a:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e66e:	f5a0 73df 	sub.w	r3, r0, #446	; 0x1be
    e672:	7202      	strb	r2, [r0, #8]
    e674:	84da      	strh	r2, [r3, #38]	; 0x26
    e676:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e67a:	604d      	str	r5, [r1, #4]
    e67c:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e680:	608d      	str	r5, [r1, #8]
    e682:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e686:	818d      	strh	r5, [r1, #12]
    e688:	710a      	strb	r2, [r1, #4]
    e68a:	7a05      	ldrb	r5, [r0, #8]
    e68c:	f88d 5000 	strb.w	r5, [sp]
    e690:	9d00      	ldr	r5, [sp, #0]
    e692:	9500      	str	r5, [sp, #0]
    e694:	f89d 5000 	ldrb.w	r5, [sp]
    e698:	2d00      	cmp	r5, #0
    e69a:	d1ea      	bne.n	e672 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e69c:	bd38      	pop	{r3, r4, r5, pc}

0000e69e <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e69e:	2200      	movs	r2, #0
    e6a0:	704a      	strb	r2, [r1, #1]
    e6a2:	220b      	movs	r2, #11
    e6a4:	700a      	strb	r2, [r1, #0]
    e6a6:	f100 020a 	add.w	r2, r0, #10
    e6aa:	7a83      	ldrb	r3, [r0, #10]
    e6ac:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e6b0:	710b      	strb	r3, [r1, #4]
    e6b2:	8800      	ldrh	r0, [r0, #0]
    e6b4:	80c8      	strh	r0, [r1, #6]
    e6b6:	7910      	ldrb	r0, [r2, #4]
    e6b8:	7208      	strb	r0, [r1, #8]
    e6ba:	4770      	bx	lr

0000e6bc <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e6bc:	2200      	movs	r2, #0
    e6be:	704a      	strb	r2, [r1, #1]
    e6c0:	220c      	movs	r2, #12
    e6c2:	700a      	strb	r2, [r1, #0]
    e6c4:	7a82      	ldrb	r2, [r0, #10]
    e6c6:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e6ca:	710a      	strb	r2, [r1, #4]
    e6cc:	8800      	ldrh	r0, [r0, #0]
    e6ce:	80c8      	strh	r0, [r1, #6]
    e6d0:	4770      	bx	lr

0000e6d2 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e6d2:	2200      	movs	r2, #0
    e6d4:	704a      	strb	r2, [r1, #1]
    e6d6:	2208      	movs	r2, #8
    e6d8:	700a      	strb	r2, [r1, #0]
    e6da:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e6de:	8812      	ldrh	r2, [r2, #0]
    e6e0:	808a      	strh	r2, [r1, #4]
    e6e2:	68c2      	ldr	r2, [r0, #12]
    e6e4:	f8c1 2006 	str.w	r2, [r1, #6]
    e6e8:	6902      	ldr	r2, [r0, #16]
    e6ea:	f8c1 200a 	str.w	r2, [r1, #10]
    e6ee:	8a80      	ldrh	r0, [r0, #20]
    e6f0:	81c8      	strh	r0, [r1, #14]
    e6f2:	4770      	bx	lr

0000e6f4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e6f4:	b510      	push	{r4, lr}
    e6f6:	6844      	ldr	r4, [r0, #4]
    e6f8:	7803      	ldrb	r3, [r0, #0]
    e6fa:	2100      	movs	r1, #0
    e6fc:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e700:	3480      	adds	r4, #128	; 0x80
    e702:	4620      	mov	r0, r4
    e704:	f7ff fa54 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e708:	b110      	cbz	r0, e710 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e70a:	2004      	movs	r0, #4
    e70c:	7760      	strb	r0, [r4, #29]
    e70e:	bd10      	pop	{r4, pc}
    e710:	21aa      	movs	r1, #170	; 0xaa
    e712:	201c      	movs	r0, #28
    e714:	f7f2 fd72 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e718 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e718:	b510      	push	{r4, lr}
    e71a:	6841      	ldr	r1, [r0, #4]
    e71c:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e720:	07d2      	lsls	r2, r2, #31
    e722:	d00b      	beq.n	e73c <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e724:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e728:	1e52      	subs	r2, r2, #1
    e72a:	b252      	sxtb	r2, r2
    e72c:	700a      	strb	r2, [r1, #0]
    e72e:	6840      	ldr	r0, [r0, #4]
    e730:	2a00      	cmp	r2, #0
    e732:	da05      	bge.n	e740 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e734:	21b9      	movs	r1, #185	; 0xb9
    e736:	201c      	movs	r0, #28
    e738:	f7f2 fd60 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e73c:	21b7      	movs	r1, #183	; 0xb7
    e73e:	e7fa      	b.n	e736 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e740:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e744:	f021 0101 	bic.w	r1, r1, #1
    e748:	6001      	str	r1, [r0, #0]
    e74a:	bd10      	pop	{r4, pc}
    e74c:	2200      	movs	r2, #0
    e74e:	704a      	strb	r2, [r1, #1]
    e750:	2206      	movs	r2, #6
    e752:	700a      	strb	r2, [r1, #0]
    e754:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e758:	604a      	str	r2, [r1, #4]
    e75a:	6842      	ldr	r2, [r0, #4]
    e75c:	608a      	str	r2, [r1, #8]
    e75e:	8902      	ldrh	r2, [r0, #8]
    e760:	818a      	strh	r2, [r1, #12]
    e762:	7a80      	ldrb	r0, [r0, #10]
    e764:	7388      	strb	r0, [r1, #14]
    e766:	4770      	bx	lr

0000e768 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e768:	2200      	movs	r2, #0
    e76a:	704a      	strb	r2, [r1, #1]
    e76c:	220e      	movs	r2, #14
    e76e:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e772:	700a      	strb	r2, [r1, #0]
    e774:	8800      	ldrh	r0, [r0, #0]
    e776:	8088      	strh	r0, [r1, #4]
    e778:	4770      	bx	lr

0000e77a <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e77a:	b538      	push	{r3, r4, r5, lr}
    e77c:	2400      	movs	r4, #0
    e77e:	704c      	strb	r4, [r1, #1]
    e780:	2501      	movs	r5, #1
    e782:	700d      	strb	r5, [r1, #0]
    e784:	f1a0 025e 	sub.w	r2, r0, #94	; 0x5e
    e788:	f1a0 03de 	sub.w	r3, r0, #222	; 0xde
    e78c:	710c      	strb	r4, [r1, #4]
    e78e:	7204      	strb	r4, [r0, #8]
    e790:	881d      	ldrh	r5, [r3, #0]
    e792:	f8a1 5005 	strh.w	r5, [r1, #5]
    e796:	f892 5067 	ldrb.w	r5, [r2, #103]	; 0x67
    e79a:	71cd      	strb	r5, [r1, #7]
    e79c:	f8b2 5068 	ldrh.w	r5, [r2, #104]	; 0x68
    e7a0:	810d      	strh	r5, [r1, #8]
    e7a2:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e7a6:	814d      	strh	r5, [r1, #10]
    e7a8:	7a05      	ldrb	r5, [r0, #8]
    e7aa:	f88d 5000 	strb.w	r5, [sp]
    e7ae:	9d00      	ldr	r5, [sp, #0]
    e7b0:	9500      	str	r5, [sp, #0]
    e7b2:	f89d 5000 	ldrb.w	r5, [sp]
    e7b6:	2d00      	cmp	r5, #0
    e7b8:	d1e9      	bne.n	e78e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e7ba:	bd38      	pop	{r3, r4, r5, pc}

0000e7bc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e7bc:	b570      	push	{r4, r5, r6, lr}
    e7be:	7803      	ldrb	r3, [r0, #0]
    e7c0:	6840      	ldr	r0, [r0, #4]
    e7c2:	2500      	movs	r5, #0
    e7c4:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e7c8:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    e7cc:	f500 7098 	add.w	r0, r0, #304	; 0x130
    e7d0:	0789      	lsls	r1, r1, #30
    e7d2:	d40e      	bmi.n	e7f2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    e7d4:	7f62      	ldrb	r2, [r4, #29]
    e7d6:	2100      	movs	r1, #0
    e7d8:	4620      	mov	r0, r4
    e7da:	f7ff f9e9 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e7de:	b130      	cbz	r0, e7ee <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    e7e0:	2001      	movs	r0, #1
    e7e2:	7760      	strb	r0, [r4, #29]
    e7e4:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e7e8:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    e7ec:	bd70      	pop	{r4, r5, r6, pc}
    e7ee:	216e      	movs	r1, #110	; 0x6e
    e7f0:	e00b      	b.n	e80a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    e7f2:	7b21      	ldrb	r1, [r4, #12]
    e7f4:	0789      	lsls	r1, r1, #30
    e7f6:	d50f      	bpl.n	e818 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    e7f8:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    e7fc:	1e49      	subs	r1, r1, #1
    e7fe:	b249      	sxtb	r1, r1
    e800:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    e804:	2900      	cmp	r1, #0
    e806:	da03      	bge.n	e810 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    e808:	2180      	movs	r1, #128	; 0x80
    e80a:	2040      	movs	r0, #64	; 0x40
    e80c:	f7f2 fcf6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e810:	68e1      	ldr	r1, [r4, #12]
    e812:	f021 0102 	bic.w	r1, r1, #2
    e816:	60e1      	str	r1, [r4, #12]
    e818:	7485      	strb	r5, [r0, #18]
    e81a:	bd70      	pop	{r4, r5, r6, pc}
    e81c:	2200      	movs	r2, #0
    e81e:	704a      	strb	r2, [r1, #1]
    e820:	2219      	movs	r2, #25
    e822:	700a      	strb	r2, [r1, #0]
    e824:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e828:	6048      	str	r0, [r1, #4]
    e82a:	4770      	bx	lr
    e82c:	b510      	push	{r4, lr}
    e82e:	4604      	mov	r4, r0
    e830:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e834:	e9d4 1000 	ldrd	r1, r0, [r4]
    e838:	4050      	eors	r0, r2
    e83a:	ea70 0101 	orns	r1, r0, r1
    e83e:	d008      	beq.n	e852 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e840:	f7fc fc26 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e844:	e9d4 2300 	ldrd	r2, r3, [r4]
    e848:	1a80      	subs	r0, r0, r2
    e84a:	4199      	sbcs	r1, r3
    e84c:	d301      	bcc.n	e852 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    e84e:	2001      	movs	r0, #1
    e850:	bd10      	pop	{r4, pc}
    e852:	2000      	movs	r0, #0
    e854:	bd10      	pop	{r4, pc}
    e856:	2801      	cmp	r0, #1
    e858:	d102      	bne.n	e860 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa4>
    e85a:	7948      	ldrb	r0, [r1, #5]
    e85c:	0980      	lsrs	r0, r0, #6
    e85e:	d001      	beq.n	e864 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa8>
    e860:	2000      	movs	r0, #0
    e862:	4770      	bx	lr
    e864:	2001      	movs	r0, #1
    e866:	4770      	bx	lr
    e868:	2801      	cmp	r0, #1
    e86a:	d106      	bne.n	e87a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    e86c:	7948      	ldrb	r0, [r1, #5]
    e86e:	2101      	movs	r1, #1
    e870:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e874:	d101      	bne.n	e87a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    e876:	2001      	movs	r0, #1
    e878:	4770      	bx	lr
    e87a:	2000      	movs	r0, #0
    e87c:	4770      	bx	lr
    e87e:	2802      	cmp	r0, #2
    e880:	d003      	beq.n	e88a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    e882:	2803      	cmp	r0, #3
    e884:	d001      	beq.n	e88a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    e886:	2000      	movs	r0, #0
    e888:	4770      	bx	lr
    e88a:	2001      	movs	r0, #1
    e88c:	4770      	bx	lr

0000e88e <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e88e:	b510      	push	{r4, lr}
    e890:	4604      	mov	r4, r0
    e892:	7c00      	ldrb	r0, [r0, #16]
    e894:	f7ff fff3 	bl	e87e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e898:	b148      	cbz	r0, e8ae <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e89a:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    e89e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    e8a2:	f7ff f927 	bl	daf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e8a6:	2808      	cmp	r0, #8
    e8a8:	d001      	beq.n	e8ae <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e8aa:	2001      	movs	r0, #1
    e8ac:	bd10      	pop	{r4, pc}
    e8ae:	7c20      	ldrb	r0, [r4, #16]
    e8b0:	b118      	cbz	r0, e8ba <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e8b2:	2802      	cmp	r0, #2
    e8b4:	d001      	beq.n	e8ba <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e8b6:	7de0      	ldrb	r0, [r4, #23]
    e8b8:	bd10      	pop	{r4, pc}
    e8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e8be:	2000      	movs	r0, #0
    e8c0:	f7f3 bb66 	b.w	1f90 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e8c4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e8c4:	b508      	push	{r3, lr}
    e8c6:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    e8ca:	f88d 1000 	strb.w	r1, [sp]
    e8ce:	9900      	ldr	r1, [sp, #0]
    e8d0:	9100      	str	r1, [sp, #0]
    e8d2:	f89d 1000 	ldrb.w	r1, [sp]
    e8d6:	b941      	cbnz	r1, e8ea <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    e8d8:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    e8dc:	f88d 1000 	strb.w	r1, [sp]
    e8e0:	9900      	ldr	r1, [sp, #0]
    e8e2:	9100      	str	r1, [sp, #0]
    e8e4:	f89d 1000 	ldrb.w	r1, [sp]
    e8e8:	b109      	cbz	r1, e8ee <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    e8ea:	2001      	movs	r0, #1
    e8ec:	bd08      	pop	{r3, pc}
    e8ee:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    e8f2:	f88d 0000 	strb.w	r0, [sp]
    e8f6:	9800      	ldr	r0, [sp, #0]
    e8f8:	9000      	str	r0, [sp, #0]
    e8fa:	f89d 0000 	ldrb.w	r0, [sp]
    e8fe:	2000      	movs	r0, #0
    e900:	bd08      	pop	{r3, pc}

0000e902 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e902:	20ff      	movs	r0, #255	; 0xff
    e904:	7008      	strb	r0, [r1, #0]
    e906:	6b48      	ldr	r0, [r1, #52]	; 0x34
    e908:	f7fe bff9 	b.w	d8fe <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e90c <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e90c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e90e:	460d      	mov	r5, r1
    e910:	4604      	mov	r4, r0
    e912:	f44f 728c 	mov.w	r2, #280	; 0x118
    e916:	2100      	movs	r1, #0
    e918:	f002 f9f0 	bl	10cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e91c:	20ff      	movs	r0, #255	; 0xff
    e91e:	7020      	strb	r0, [r4, #0]
    e920:	207f      	movs	r0, #127	; 0x7f
    e922:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    e926:	2013      	movs	r0, #19
    e928:	8060      	strh	r0, [r4, #2]
    e92a:	f242 7010 	movw	r0, #10000	; 0x2710
    e92e:	8460      	strh	r0, [r4, #34]	; 0x22
    e930:	f7f3 f91e 	bl	1b70 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e934:	4601      	mov	r1, r0
    e936:	6360      	str	r0, [r4, #52]	; 0x34
    e938:	2200      	movs	r2, #0
    e93a:	4668      	mov	r0, sp
    e93c:	f7fe ff45 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e940:	2200      	movs	r2, #0
    e942:	2101      	movs	r1, #1
    e944:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e946:	f7fe ffba 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e94a:	2204      	movs	r2, #4
    e94c:	4668      	mov	r0, sp
    e94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e950:	f7fe ff3b 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e954:	2200      	movs	r2, #0
    e956:	4611      	mov	r1, r2
    e958:	6b60      	ldr	r0, [r4, #52]	; 0x34
    e95a:	f7fe ffb0 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e95e:	73a5      	strb	r5, [r4, #14]
    e960:	f104 0028 	add.w	r0, r4, #40	; 0x28
    e964:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e968:	f000 b96b 	b.w	ec42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e96c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e96c:	7880      	ldrb	r0, [r0, #2]
    e96e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e972:	b108      	cbz	r0, e978 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e974:	2000      	movs	r0, #0
    e976:	4770      	bx	lr
    e978:	201f      	movs	r0, #31
    e97a:	4770      	bx	lr

0000e97c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e97c:	f7f5 bcfc 	b.w	4378 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x378>

0000e980 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e980:	6880      	ldr	r0, [r0, #8]
    e982:	4770      	bx	lr

0000e984 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e984:	2001      	movs	r0, #1
    e986:	4770      	bx	lr

0000e988 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e988:	b510      	push	{r4, lr}
    e98a:	4604      	mov	r4, r0
    e98c:	3028      	adds	r0, #40	; 0x28
    e98e:	f000 f918 	bl	ebc2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e992:	8861      	ldrh	r1, [r4, #2]
    e994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e998:	2228      	movs	r2, #40	; 0x28
    e99a:	f7f5 bebd 	b.w	4718 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e99e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e99e:	2200      	movs	r2, #0
    e9a0:	8602      	strh	r2, [r0, #48]	; 0x30
    e9a2:	8843      	ldrh	r3, [r0, #2]
    e9a4:	2b1d      	cmp	r3, #29
    e9a6:	d001      	beq.n	e9ac <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e9a8:	7341      	strb	r1, [r0, #13]
    e9aa:	4770      	bx	lr
    e9ac:	7342      	strb	r2, [r0, #13]
    e9ae:	4770      	bx	lr

0000e9b0 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    e9b0:	b510      	push	{r4, lr}
    e9b2:	2400      	movs	r4, #0
    e9b4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    e9b6:	f7fe ff7a 	bl	d8ae <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    e9ba:	4384      	bics	r4, r0
    e9bc:	f084 0001 	eor.w	r0, r4, #1
    e9c0:	bd10      	pop	{r4, pc}

0000e9c2 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e9c2:	2000      	movs	r0, #0
    e9c4:	4770      	bx	lr

0000e9c6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e9c6:	7880      	ldrb	r0, [r0, #2]
    e9c8:	f000 0001 	and.w	r0, r0, #1
    e9cc:	4770      	bx	lr

0000e9ce <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    e9ce:	7880      	ldrb	r0, [r0, #2]
    e9d0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e9d4:	4770      	bx	lr

0000e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    e9d6:	2001      	movs	r0, #1
    e9d8:	4770      	bx	lr

0000e9da <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    e9da:	7880      	ldrb	r0, [r0, #2]
    e9dc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    e9e0:	4770      	bx	lr

0000e9e2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    e9e2:	f990 000e 	ldrsb.w	r0, [r0, #14]
    e9e6:	4770      	bx	lr

0000e9e8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    e9e8:	7800      	ldrb	r0, [r0, #0]
    e9ea:	28ff      	cmp	r0, #255	; 0xff
    e9ec:	d001      	beq.n	e9f2 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    e9ee:	2001      	movs	r0, #1
    e9f0:	4770      	bx	lr
    e9f2:	2000      	movs	r0, #0
    e9f4:	4770      	bx	lr

0000e9f6 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    e9f6:	f800 1f20 	strb.w	r1, [r0, #32]!
    e9fa:	7042      	strb	r2, [r0, #1]
    e9fc:	4770      	bx	lr

0000e9fe <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    e9fe:	680a      	ldr	r2, [r1, #0]
    ea00:	f840 2f11 	str.w	r2, [r0, #17]!
    ea04:	8889      	ldrh	r1, [r1, #4]
    ea06:	8081      	strh	r1, [r0, #4]
    ea08:	2101      	movs	r1, #1
    ea0a:	7181      	strb	r1, [r0, #6]
    ea0c:	4770      	bx	lr

0000ea0e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ea0e:	7b00      	ldrb	r0, [r0, #12]
    ea10:	4770      	bx	lr

0000ea12 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ea12:	2001      	movs	r0, #1
    ea14:	4770      	bx	lr

0000ea16 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ea16:	61c1      	str	r1, [r0, #28]
    ea18:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ea1c:	724a      	strb	r2, [r1, #9]
    ea1e:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ea22:	f8c1 200a 	str.w	r2, [r1, #10]
    ea26:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ea2a:	81c8      	strh	r0, [r1, #14]
    ea2c:	4770      	bx	lr

0000ea2e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ea2e:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ea32:	4770      	bx	lr

0000ea34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ea34:	7bc0      	ldrb	r0, [r0, #15]
    ea36:	2800      	cmp	r0, #0
    ea38:	d000      	beq.n	ea3c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ea3a:	2001      	movs	r0, #1
    ea3c:	4770      	bx	lr
    ea3e:	7802      	ldrb	r2, [r0, #0]
    ea40:	2320      	movs	r3, #32
    ea42:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ea46:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ea4a:	430a      	orrs	r2, r1
    ea4c:	7002      	strb	r2, [r0, #0]
    ea4e:	4770      	bx	lr
    ea50:	b510      	push	{r4, lr}
    ea52:	f7ff f84f 	bl	daf4 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ea56:	4604      	mov	r4, r0
    ea58:	f7f4 f856 	bl	2b08 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ea5c:	b138      	cbz	r0, ea6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ea5e:	4620      	mov	r0, r4
    ea60:	f7f3 fffa 	bl	2a58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ea64:	b118      	cbz	r0, ea6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ea66:	2110      	movs	r1, #16
    ea68:	f7ff fa0a 	bl	de80 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    ea6c:	b108      	cbz	r0, ea72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    ea6e:	2000      	movs	r0, #0
    ea70:	bd10      	pop	{r4, pc}
    ea72:	2001      	movs	r0, #1
    ea74:	bd10      	pop	{r4, pc}
    ea76:	2101      	movs	r1, #1
    ea78:	f7f5 b8ee 	b.w	3c58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ea7c:	2101      	movs	r1, #1
    ea7e:	f7f5 b8eb 	b.w	3c58 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ea82:	2200      	movs	r2, #0
    ea84:	704a      	strb	r2, [r1, #1]
    ea86:	2205      	movs	r2, #5
    ea88:	700a      	strb	r2, [r1, #0]
    ea8a:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ea8e:	6048      	str	r0, [r1, #4]
    ea90:	4770      	bx	lr
    ea92:	b510      	push	{r4, lr}
    ea94:	460c      	mov	r4, r1
    ea96:	2100      	movs	r1, #0
    ea98:	7061      	strb	r1, [r4, #1]
    ea9a:	2112      	movs	r1, #18
    ea9c:	7021      	strb	r1, [r4, #0]
    ea9e:	f100 0109 	add.w	r1, r0, #9
    eaa2:	2221      	movs	r2, #33	; 0x21
    eaa4:	1d20      	adds	r0, r4, #4
    eaa6:	f002 f8af 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eaaa:	2001      	movs	r0, #1
    eaac:	71e0      	strb	r0, [r4, #7]
    eaae:	7920      	ldrb	r0, [r4, #4]
    eab0:	2800      	cmp	r0, #0
    eab2:	d015      	beq.n	eae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    eab4:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    eab8:	2100      	movs	r1, #0
    eaba:	4620      	mov	r0, r4
    eabc:	f7fe fdd3 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eac0:	2800      	cmp	r0, #0
    eac2:	d00d      	beq.n	eae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    eac4:	8800      	ldrh	r0, [r0, #0]
    eac6:	f7fe ff79 	bl	d9bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    eaca:	2100      	movs	r1, #0
    eacc:	4620      	mov	r0, r4
    eace:	f7f2 fe1b 	bl	1708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ead2:	2800      	cmp	r0, #0
    ead4:	d004      	beq.n	eae0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ead6:	f44f 7114 	mov.w	r1, #592	; 0x250
    eada:	202d      	movs	r0, #45	; 0x2d
    eadc:	f7f2 fb8e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eae0:	bd10      	pop	{r4, pc}
    eae2:	2200      	movs	r2, #0
    eae4:	704a      	strb	r2, [r1, #1]
    eae6:	221a      	movs	r2, #26
    eae8:	700a      	strb	r2, [r1, #0]
    eaea:	f850 2f09 	ldr.w	r2, [r0, #9]!
    eaee:	604a      	str	r2, [r1, #4]
    eaf0:	6842      	ldr	r2, [r0, #4]
    eaf2:	608a      	str	r2, [r1, #8]
    eaf4:	7a00      	ldrb	r0, [r0, #8]
    eaf6:	7308      	strb	r0, [r1, #12]
    eaf8:	4770      	bx	lr
    eafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eafe:	4604      	mov	r4, r0
    eb00:	460f      	mov	r7, r1
    eb02:	7e40      	ldrb	r0, [r0, #25]
    eb04:	f7f3 ff8e 	bl	2a24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    eb08:	4606      	mov	r6, r0
    eb0a:	7e20      	ldrb	r0, [r4, #24]
    eb0c:	f104 0551 	add.w	r5, r4, #81	; 0x51
    eb10:	b120      	cbz	r0, eb1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    eb12:	b11e      	cbz	r6, eb1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    eb14:	7e60      	ldrb	r0, [r4, #25]
    eb16:	f7f3 ff79 	bl	2a0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    eb1a:	b1a0      	cbz	r0, eb46 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x112>
    eb1c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    eb20:	2800      	cmp	r0, #0
    eb22:	d024      	beq.n	eb6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    eb24:	7ea0      	ldrb	r0, [r4, #26]
    eb26:	2800      	cmp	r0, #0
    eb28:	d021      	beq.n	eb6e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    eb2a:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    eb2e:	4629      	mov	r1, r5
    eb30:	f7ff fe9a 	bl	e868 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    eb34:	b1a8      	cbz	r0, eb62 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    eb36:	f7f3 ff65 	bl	2a04 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    eb3a:	463a      	mov	r2, r7
    eb3c:	4629      	mov	r1, r5
    eb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb42:	f7fe bf6f 	b.w	da24 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eb46:	2001      	movs	r0, #1
    eb48:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    eb4c:	463a      	mov	r2, r7
    eb4e:	4629      	mov	r1, r5
    eb50:	4630      	mov	r0, r6
    eb52:	f7fe ff67 	bl	da24 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eb56:	7e61      	ldrb	r1, [r4, #25]
    eb58:	4628      	mov	r0, r5
    eb5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb5e:	f7f3 bf6d 	b.w	2a3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    eb62:	4639      	mov	r1, r7
    eb64:	4628      	mov	r0, r5
    eb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb6a:	f7fe bf4a 	b.w	da02 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    eb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb72:	b510      	push	{r4, lr}
    eb74:	4604      	mov	r4, r0
    eb76:	4608      	mov	r0, r1
    eb78:	f7f9 fbac 	bl	82d4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    eb7c:	7921      	ldrb	r1, [r4, #4]
    eb7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb82:	2025      	movs	r0, #37	; 0x25
    eb84:	f7f9 bb7c 	b.w	8280 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    eb88:	b570      	push	{r4, r5, r6, lr}
    eb8a:	4614      	mov	r4, r2
    eb8c:	461d      	mov	r5, r3
    eb8e:	4606      	mov	r6, r0
    eb90:	f7fc fa7e 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eb94:	1900      	adds	r0, r0, r4
    eb96:	4169      	adcs	r1, r5
    eb98:	e9c6 0100 	strd	r0, r1, [r6]
    eb9c:	bd70      	pop	{r4, r5, r6, pc}

0000eb9e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    eb9e:	b570      	push	{r4, r5, r6, lr}
    eba0:	7001      	strb	r1, [r0, #0]
    eba2:	7042      	strb	r2, [r0, #1]
    eba4:	4614      	mov	r4, r2
    eba6:	460d      	mov	r5, r1
    eba8:	7880      	ldrb	r0, [r0, #2]
    ebaa:	f000 f87f 	bl	ecac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebae:	fb10 f005 	smulbb	r0, r0, r5
    ebb2:	4360      	muls	r0, r4
    ebb4:	28ff      	cmp	r0, #255	; 0xff
    ebb6:	d303      	bcc.n	ebc0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ebb8:	215c      	movs	r1, #92	; 0x5c
    ebba:	202e      	movs	r0, #46	; 0x2e
    ebbc:	f7f2 fb1e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebc0:	bd70      	pop	{r4, r5, r6, pc}

0000ebc2 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ebc2:	b510      	push	{r4, lr}
    ebc4:	4604      	mov	r4, r0
    ebc6:	7880      	ldrb	r0, [r0, #2]
    ebc8:	f000 f870 	bl	ecac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebcc:	7861      	ldrb	r1, [r4, #1]
    ebce:	7822      	ldrb	r2, [r4, #0]
    ebd0:	fb11 f102 	smulbb	r1, r1, r2
    ebd4:	4348      	muls	r0, r1
    ebd6:	b2c0      	uxtb	r0, r0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ebda:	b510      	push	{r4, lr}
    ebdc:	4604      	mov	r4, r0
    ebde:	f000 f84d 	bl	ec7c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ebe2:	7961      	ldrb	r1, [r4, #5]
    ebe4:	1c49      	adds	r1, r1, #1
    ebe6:	b2c9      	uxtb	r1, r1
    ebe8:	7161      	strb	r1, [r4, #5]
    ebea:	7862      	ldrb	r2, [r4, #1]
    ebec:	4291      	cmp	r1, r2
    ebee:	d10b      	bne.n	ec08 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ebf0:	2200      	movs	r2, #0
    ebf2:	7162      	strb	r2, [r4, #5]
    ebf4:	78e1      	ldrb	r1, [r4, #3]
    ebf6:	4301      	orrs	r1, r0
    ebf8:	70e1      	strb	r1, [r4, #3]
    ebfa:	78a3      	ldrb	r3, [r4, #2]
    ebfc:	4299      	cmp	r1, r3
    ebfe:	d103      	bne.n	ec08 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ec00:	70e2      	strb	r2, [r4, #3]
    ec02:	7921      	ldrb	r1, [r4, #4]
    ec04:	1c49      	adds	r1, r1, #1
    ec06:	7121      	strb	r1, [r4, #4]
    ec08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec0c:	f000 b825 	b.w	ec5a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ec10 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ec10:	7081      	strb	r1, [r0, #2]
    ec12:	4770      	bx	lr

0000ec14 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ec14:	b570      	push	{r4, r5, r6, lr}
    ec16:	4604      	mov	r4, r0
    ec18:	7880      	ldrb	r0, [r0, #2]
    ec1a:	f000 f847 	bl	ecac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ec1e:	7861      	ldrb	r1, [r4, #1]
    ec20:	fb11 f500 	smulbb	r5, r1, r0
    ec24:	78e0      	ldrb	r0, [r4, #3]
    ec26:	f000 f841 	bl	ecac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ec2a:	7861      	ldrb	r1, [r4, #1]
    ec2c:	7962      	ldrb	r2, [r4, #5]
    ec2e:	fb10 2001 	smlabb	r0, r0, r1, r2
    ec32:	7821      	ldrb	r1, [r4, #0]
    ec34:	7922      	ldrb	r2, [r4, #4]
    ec36:	1a89      	subs	r1, r1, r2
    ec38:	fb11 f105 	smulbb	r1, r1, r5
    ec3c:	1a08      	subs	r0, r1, r0
    ec3e:	b2c0      	uxtb	r0, r0
    ec40:	bd70      	pop	{r4, r5, r6, pc}

0000ec42 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ec42:	2100      	movs	r1, #0
    ec44:	6001      	str	r1, [r0, #0]
    ec46:	8081      	strh	r1, [r0, #4]
    ec48:	2101      	movs	r1, #1
    ec4a:	7041      	strb	r1, [r0, #1]
    ec4c:	7001      	strb	r1, [r0, #0]
    ec4e:	4770      	bx	lr

0000ec50 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ec50:	2100      	movs	r1, #0
    ec52:	70c1      	strb	r1, [r0, #3]
    ec54:	7141      	strb	r1, [r0, #5]
    ec56:	7101      	strb	r1, [r0, #4]
    ec58:	4770      	bx	lr
    ec5a:	b510      	push	{r4, lr}
    ec5c:	2801      	cmp	r0, #1
    ec5e:	d007      	beq.n	ec70 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ec60:	2802      	cmp	r0, #2
    ec62:	d007      	beq.n	ec74 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ec64:	2804      	cmp	r0, #4
    ec66:	d007      	beq.n	ec78 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ec68:	2139      	movs	r1, #57	; 0x39
    ec6a:	202e      	movs	r0, #46	; 0x2e
    ec6c:	f7f2 fac6 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec70:	2025      	movs	r0, #37	; 0x25
    ec72:	bd10      	pop	{r4, pc}
    ec74:	2026      	movs	r0, #38	; 0x26
    ec76:	bd10      	pop	{r4, pc}
    ec78:	2027      	movs	r0, #39	; 0x27
    ec7a:	bd10      	pop	{r4, pc}
    ec7c:	4601      	mov	r1, r0
    ec7e:	2000      	movs	r0, #0
    ec80:	788a      	ldrb	r2, [r1, #2]
    ec82:	07d3      	lsls	r3, r2, #31
    ec84:	d002      	beq.n	ec8c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    ec86:	78cb      	ldrb	r3, [r1, #3]
    ec88:	07db      	lsls	r3, r3, #31
    ec8a:	d006      	beq.n	ec9a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ec8c:	0793      	lsls	r3, r2, #30
    ec8e:	d506      	bpl.n	ec9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ec90:	78cb      	ldrb	r3, [r1, #3]
    ec92:	079b      	lsls	r3, r3, #30
    ec94:	d403      	bmi.n	ec9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ec96:	2002      	movs	r0, #2
    ec98:	4770      	bx	lr
    ec9a:	2001      	movs	r0, #1
    ec9c:	4770      	bx	lr
    ec9e:	0752      	lsls	r2, r2, #29
    eca0:	d5fc      	bpl.n	ec9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eca2:	78c9      	ldrb	r1, [r1, #3]
    eca4:	0749      	lsls	r1, r1, #29
    eca6:	d4f9      	bmi.n	ec9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eca8:	2004      	movs	r0, #4
    ecaa:	4770      	bx	lr
    ecac:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ecb0:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ecb4:	4411      	add	r1, r2
    ecb6:	f000 0001 	and.w	r0, r0, #1
    ecba:	4408      	add	r0, r1
    ecbc:	4770      	bx	lr

0000ecbe <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ecbe:	f240 315a 	movw	r1, #858	; 0x35a
    ecc2:	4348      	muls	r0, r1
    ecc4:	4770      	bx	lr

0000ecc6 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ecc6:	f240 20ef 	movw	r0, #751	; 0x2ef
    ecca:	4770      	bx	lr
    eccc:	041c020e 	.word	0x041c020e
    ecd0:	0c600630 	.word	0x0c600630
    ecd4:	06b4035a 	.word	0x06b4035a
    ecd8:	0bf505c5 	.word	0x0bf505c5
    ecdc:	01a31225 	.word	0x01a31225
    ece0:	05bf03b1 	.word	0x05bf03b1
    ece4:	064902ef 	.word	0x064902ef
    ece8:	09a3      	.short	0x09a3

0000ecea <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ecea:	b510      	push	{r4, lr}
    ecec:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ecf0:	b109      	cbz	r1, ecf6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ecf2:	2000      	movs	r0, #0
    ecf4:	bd10      	pop	{r4, pc}
    ecf6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ecfa:	b131      	cbz	r1, ed0a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ecfc:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ed00:	428a      	cmp	r2, r1
    ed02:	d902      	bls.n	ed0a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ed04:	f7f4 ff90 	bl	3c28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ed08:	e7f3      	b.n	ecf2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ed0a:	2001      	movs	r0, #1
    ed0c:	bd10      	pop	{r4, pc}

0000ed0e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ed0e:	b510      	push	{r4, lr}
    ed10:	b131      	cbz	r1, ed20 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ed12:	2901      	cmp	r1, #1
    ed14:	d008      	beq.n	ed28 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ed16:	f240 717a 	movw	r1, #1914	; 0x77a
    ed1a:	2030      	movs	r0, #48	; 0x30
    ed1c:	f7f2 fa6e 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed24:	f000 b9b7 	b.w	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    ed28:	2100      	movs	r1, #0
    ed2a:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ed2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed32:	f000 b913 	b.w	ef5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000ed36 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ed36:	b510      	push	{r4, lr}
    ed38:	4604      	mov	r4, r0
    ed3a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ed3e:	2800      	cmp	r0, #0
    ed40:	d019      	beq.n	ed76 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ed42:	2001      	movs	r0, #1
    ed44:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ed48:	4601      	mov	r1, r0
    ed4a:	4620      	mov	r0, r4
    ed4c:	f7ff fe6f 	bl	ea2e <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ed50:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ed54:	b170      	cbz	r0, ed74 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ed56:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ed5a:	f7fb fd0d 	bl	a778 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ed5e:	7820      	ldrb	r0, [r4, #0]
    ed60:	f7fb fe6e 	bl	aa40 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ed64:	f814 09c8 	ldrb.w	r0, [r4], #-200
    ed68:	f7fb fe48 	bl	a9fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed6c:	b120      	cbz	r0, ed78 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ed6e:	2000      	movs	r0, #0
    ed70:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    ed74:	2000      	movs	r0, #0
    ed76:	bd10      	pop	{r4, pc}
    ed78:	f240 2105 	movw	r1, #517	; 0x205
    ed7c:	2030      	movs	r0, #48	; 0x30
    ed7e:	f7f2 fa3d 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ed82 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    ed82:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    ed86:	4770      	bx	lr

0000ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    ed88:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ed8c:	4770      	bx	lr

0000ed8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ed8e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed90:	4604      	mov	r4, r0
    ed92:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    ed96:	2800      	cmp	r0, #0
    ed98:	d15f      	bne.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ed9a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ed9e:	2803      	cmp	r0, #3
    eda0:	d15b      	bne.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    eda2:	f7fc f975 	bl	b090 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eda6:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    edaa:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    edae:	1ac0      	subs	r0, r0, r3
    edb0:	eb61 0102 	sbc.w	r1, r1, r2
    edb4:	2300      	movs	r3, #0
    edb6:	461a      	mov	r2, r3
    edb8:	1a1b      	subs	r3, r3, r0
    edba:	418a      	sbcs	r2, r1
    edbc:	da4d      	bge.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    edbe:	1c42      	adds	r2, r0, #1
    edc0:	f171 0100 	sbcs.w	r1, r1, #0
    edc4:	db02      	blt.n	edcc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    edc6:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    edca:	e036      	b.n	ee3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    edcc:	6921      	ldr	r1, [r4, #16]
    edce:	b111      	cbz	r1, edd6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    edd0:	fbb0 f0f1 	udiv	r0, r0, r1
    edd4:	e000      	b.n	edd8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    edd6:	2000      	movs	r0, #0
    edd8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    eddc:	1c40      	adds	r0, r0, #1
    edde:	4408      	add	r0, r1
    ede0:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ede4:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ede8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    edec:	1a08      	subs	r0, r1, r0
    edee:	b200      	sxth	r0, r0
    edf0:	2800      	cmp	r0, #0
    edf2:	dd32      	ble.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    edf4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    edf8:	f7fb fcbe 	bl	a778 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    edfc:	2800      	cmp	r0, #0
    edfe:	d02c      	beq.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ee00:	20ff      	movs	r0, #255	; 0xff
    ee02:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    ee06:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    ee0a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    ee0e:	ae01      	add	r6, sp, #4
    ee10:	1a40      	subs	r0, r0, r1
    ee12:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    ee16:	1e40      	subs	r0, r0, #1
    ee18:	4408      	add	r0, r1
    ee1a:	b285      	uxth	r5, r0
    ee1c:	e017      	b.n	ee4e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    ee1e:	9600      	str	r6, [sp, #0]
    ee20:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    ee24:	2300      	movs	r3, #0
    ee26:	2201      	movs	r2, #1
    ee28:	4620      	mov	r0, r4
    ee2a:	f7f5 ff09 	bl	4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ee2e:	2800      	cmp	r0, #0
    ee30:	d013      	beq.n	ee5a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    ee32:	2801      	cmp	r0, #1
    ee34:	d004      	beq.n	ee40 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    ee36:	f240 51f9 	movw	r1, #1529	; 0x5f9
    ee3a:	2030      	movs	r0, #48	; 0x30
    ee3c:	f7f2 f9de 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee40:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ee44:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ee48:	4408      	add	r0, r1
    ee4a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    ee4e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    ee52:	1a28      	subs	r0, r5, r0
    ee54:	b200      	sxth	r0, r0
    ee56:	2800      	cmp	r0, #0
    ee58:	dae1      	bge.n	ee1e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    ee5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee5c:	2000      	movs	r0, #0
    ee5e:	4770      	bx	lr
    ee60:	b570      	push	{r4, r5, r6, lr}
    ee62:	4604      	mov	r4, r0
    ee64:	f000 f8f0 	bl	f048 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    ee68:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    ee6c:	2000      	movs	r0, #0
    ee6e:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    ee72:	4601      	mov	r1, r0
    ee74:	2501      	movs	r5, #1
    ee76:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    ee7a:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    ee7e:	4606      	mov	r6, r0
    ee80:	f7fe ff60 	bl	dd44 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ee84:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ee88:	1c40      	adds	r0, r0, #1
    ee8a:	280a      	cmp	r0, #10
    ee8c:	d201      	bcs.n	ee92 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    ee8e:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    ee92:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ee96:	b138      	cbz	r0, eea8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    ee98:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    ee9c:	1c40      	adds	r0, r0, #1
    ee9e:	280a      	cmp	r0, #10
    eea0:	d302      	bcc.n	eea8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    eea2:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    eea6:	e002      	b.n	eeae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    eea8:	2002      	movs	r0, #2
    eeaa:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    eeae:	4620      	mov	r0, r4
    eeb0:	f000 f822 	bl	eef8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    eeb4:	b120      	cbz	r0, eec0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    eeb6:	4620      	mov	r0, r4
    eeb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    eebc:	f000 b80d 	b.w	eeda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    eec0:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    eec4:	4631      	mov	r1, r6
    eec6:	f000 f8bd 	bl	f044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    eeca:	2800      	cmp	r0, #0
    eecc:	d104      	bne.n	eed8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    eece:	f240 618e 	movw	r1, #1678	; 0x68e
    eed2:	2030      	movs	r0, #48	; 0x30
    eed4:	f7f2 f992 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eed8:	bd70      	pop	{r4, r5, r6, pc}
    eeda:	b510      	push	{r4, lr}
    eedc:	4604      	mov	r4, r0
    eede:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    eee2:	f7fb fd8b 	bl	a9fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    eee6:	2000      	movs	r0, #0
    eee8:	7620      	strb	r0, [r4, #24]
    eeea:	bd10      	pop	{r4, pc}
    eeec:	b510      	push	{r4, lr}
    eeee:	f7ff fd4b 	bl	e988 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    eef2:	f500 7088 	add.w	r0, r0, #272	; 0x110
    eef6:	bd10      	pop	{r4, pc}
    eef8:	b570      	push	{r4, r5, r6, lr}
    eefa:	4605      	mov	r5, r0
    eefc:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    ef00:	b108      	cbz	r0, ef06 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    ef02:	2001      	movs	r0, #1
    ef04:	bd70      	pop	{r4, r5, r6, pc}
    ef06:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    ef0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ef0e:	4050      	eors	r0, r2
    ef10:	ea70 0101 	orns	r1, r0, r1
    ef14:	d012      	beq.n	ef3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ef16:	2400      	movs	r4, #0
    ef18:	4621      	mov	r1, r4
    ef1a:	4628      	mov	r0, r5
    ef1c:	f7ff ffe6 	bl	eeec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    ef20:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    ef24:	1840      	adds	r0, r0, r1
    ef26:	4154      	adcs	r4, r2
    ef28:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    ef2c:	3df8      	subs	r5, #248	; 0xf8
    ef2e:	1a10      	subs	r0, r2, r0
    ef30:	41a1      	sbcs	r1, r4
    ef32:	d503      	bpl.n	ef3c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    ef34:	4628      	mov	r0, r5
    ef36:	f7f4 fe77 	bl	3c28 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef3a:	e7e2      	b.n	ef02 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    ef3c:	2000      	movs	r0, #0
    ef3e:	bd70      	pop	{r4, r5, r6, pc}
    ef40:	b510      	push	{r4, lr}
    ef42:	4604      	mov	r4, r0
    ef44:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    ef48:	f000 f9ef 	bl	f32a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    ef4c:	4602      	mov	r2, r0
    ef4e:	4620      	mov	r0, r4
    ef50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef54:	f240 111b 	movw	r1, #283	; 0x11b
    ef58:	f7ff ba5c 	b.w	e414 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ef5c:	b510      	push	{r4, lr}
    ef5e:	f7f8 ffeb 	bl	7f38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    ef62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef66:	f7fb beab 	b.w	acc0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    ef6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef6e:	4604      	mov	r4, r0
    ef70:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    ef74:	2800      	cmp	r0, #0
    ef76:	d051      	beq.n	f01c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ef78:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    ef7c:	2803      	cmp	r0, #3
    ef7e:	d14d      	bne.n	f01c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    ef80:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    ef84:	f001 fbbc 	bl	10700 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    ef88:	4605      	mov	r5, r0
    ef8a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ef8e:	f7f5 fd79 	bl	4a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ef92:	4428      	add	r0, r5
    ef94:	b286      	uxth	r6, r0
    ef96:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    ef9a:	f7f5 fd73 	bl	4a84 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    ef9e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    efa2:	fa1f f880 	uxth.w	r8, r0
    efa6:	4648      	mov	r0, r9
    efa8:	f7f9 f884 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    efac:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    efb0:	1a0d      	subs	r5, r1, r0
    efb2:	4648      	mov	r0, r9
    efb4:	f7f9 f8aa 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    efb8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    efbc:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    efc0:	fbb0 f0fa 	udiv	r0, r0, sl
    efc4:	1a2d      	subs	r5, r5, r0
    efc6:	4648      	mov	r0, r9
    efc8:	f7f9 f874 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    efcc:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    efd0:	1a0f      	subs	r7, r1, r0
    efd2:	4648      	mov	r0, r9
    efd4:	f7f9 f89a 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    efd8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    efdc:	4401      	add	r1, r0
    efde:	fbb1 f0fa 	udiv	r0, r1, sl
    efe2:	1a39      	subs	r1, r7, r0
    efe4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    efe8:	4370      	muls	r0, r6
    efea:	fbb0 f2f8 	udiv	r2, r0, r8
    efee:	2029      	movs	r0, #41	; 0x29
    eff0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    eff4:	3260      	adds	r2, #96	; 0x60
    eff6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    effa:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    effe:	42a9      	cmp	r1, r5
    f000:	d801      	bhi.n	f006 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    f002:	4285      	cmp	r5, r0
    f004:	d901      	bls.n	f00a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    f006:	f7fd f877 	bl	c0f8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f00a:	4631      	mov	r1, r6
    f00c:	6920      	ldr	r0, [r4, #16]
    f00e:	f7fd f8db 	bl	c1c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f012:	2100      	movs	r1, #0
    f014:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f018:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f020:	b570      	push	{r4, r5, r6, lr}
    f022:	460c      	mov	r4, r1
    f024:	4605      	mov	r5, r0
    f026:	f7f9 f871 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f02a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f02e:	4408      	add	r0, r1
    f030:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f034:	fbb0 f6f1 	udiv	r6, r0, r1
    f038:	4628      	mov	r0, r5
    f03a:	f7f9 f83b 	bl	80b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f03e:	4430      	add	r0, r6
    f040:	4420      	add	r0, r4
    f042:	bd70      	pop	{r4, r5, r6, pc}
    f044:	f7fb b876 	b.w	a134 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f048:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f04a:	4604      	mov	r4, r0
    f04c:	f7ff fcc3 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f050:	b1f8      	cbz	r0, f092 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    f052:	4620      	mov	r0, r4
    f054:	f7ff fcb7 	bl	e9c6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f058:	b918      	cbnz	r0, f062 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    f05a:	4620      	mov	r0, r4
    f05c:	f7ff fcbd 	bl	e9da <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f060:	b140      	cbz	r0, f074 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    f062:	2455      	movs	r4, #85	; 0x55
    f064:	4668      	mov	r0, sp
    f066:	f7fd fb07 	bl	c678 <mpsl_fem_pa_is_configured>
    f06a:	f89d 0000 	ldrb.w	r0, [sp]
    f06e:	b118      	cbz	r0, f078 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f070:	2501      	movs	r5, #1
    f072:	e002      	b.n	f07a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    f074:	2450      	movs	r4, #80	; 0x50
    f076:	e7f5      	b.n	f064 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f078:	2500      	movs	r5, #0
    f07a:	a801      	add	r0, sp, #4
    f07c:	f7fd fae4 	bl	c648 <mpsl_fem_lna_is_configured>
    f080:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f084:	b100      	cbz	r0, f088 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    f086:	2001      	movs	r0, #1
    f088:	4305      	orrs	r5, r0
    f08a:	d000      	beq.n	f08e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    f08c:	340a      	adds	r4, #10
    f08e:	4620      	mov	r0, r4
    f090:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f092:	2061      	movs	r0, #97	; 0x61
    f094:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f096:	b570      	push	{r4, r5, r6, lr}
    f098:	4604      	mov	r4, r0
    f09a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f09c:	2500      	movs	r5, #0
    f09e:	b130      	cbz	r0, f0ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f0a0:	f7f4 fa5a 	bl	3558 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f0a4:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f0a6:	fbb0 f2f1 	udiv	r2, r0, r1
    f0aa:	fb01 0512 	mls	r5, r1, r2, r0
    f0ae:	4620      	mov	r0, r4
    f0b0:	f7ff fc66 	bl	e980 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f0b4:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f0b8:	4428      	add	r0, r5
    f0ba:	34e8      	adds	r4, #232	; 0xe8
    f0bc:	2500      	movs	r5, #0
    f0be:	1882      	adds	r2, r0, r2
    f0c0:	eb45 0001 	adc.w	r0, r5, r1
    f0c4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f0c8:	f804 5b0b 	strb.w	r5, [r4], #11
    f0cc:	2001      	movs	r0, #1
    f0ce:	f804 0901 	strb.w	r0, [r4], #-1
    f0d2:	2002      	movs	r0, #2
    f0d4:	f804 09f2 	strb.w	r0, [r4], #-242
    f0d8:	4620      	mov	r0, r4
    f0da:	f7ff ffb5 	bl	f048 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f0de:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f0e2:	4620      	mov	r0, r4
    f0e4:	f7ff ff08 	bl	eef8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f0e8:	b930      	cbnz	r0, f0f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    f0ea:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f0ee:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f0f2:	f7ff ffa7 	bl	f044 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f0f6:	b128      	cbz	r0, f104 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    f0f8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f0fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f100:	f7ff bf2c 	b.w	ef5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f104:	f240 61d4 	movw	r1, #1748	; 0x6d4
    f108:	2030      	movs	r0, #48	; 0x30
    f10a:	f7f2 f877 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10e:	b510      	push	{r4, lr}
    f110:	4604      	mov	r4, r0
    f112:	2000      	movs	r0, #0
    f114:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f118:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f11c:	f7fb fc6e 	bl	a9fc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f120:	2020      	movs	r0, #32
    f122:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f126:	bd10      	pop	{r4, pc}
    f128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f12c:	4604      	mov	r4, r0
    f12e:	2500      	movs	r5, #0
    f130:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    f134:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    f138:	4689      	mov	r9, r1
    f13a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f13e:	f04f 0801 	mov.w	r8, #1
    f142:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    f146:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f14a:	4641      	mov	r1, r8
    f14c:	34c8      	adds	r4, #200	; 0xc8
    f14e:	f7f3 fe1b 	bl	2d88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f152:	6860      	ldr	r0, [r4, #4]
    f154:	f8c0 6290 	str.w	r6, [r0, #656]	; 0x290
    f158:	f8c0 7294 	str.w	r7, [r0, #660]	; 0x294
    f15c:	6861      	ldr	r1, [r4, #4]
    f15e:	7820      	ldrb	r0, [r4, #0]
    f160:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    f164:	6861      	ldr	r1, [r4, #4]
    f166:	f8c1 92a8 	str.w	r9, [r1, #680]	; 0x2a8
    f16a:	6860      	ldr	r0, [r4, #4]
    f16c:	e9c0 67a6 	strd	r6, r7, [r0, #664]	; 0x298
    f170:	6864      	ldr	r4, [r4, #4]
    f172:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    f176:	2300      	movs	r3, #0
    f178:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    f17c:	461a      	mov	r2, r3
    f17e:	4619      	mov	r1, r3
    f180:	4620      	mov	r0, r4
    f182:	9500      	str	r5, [sp, #0]
    f184:	f7f5 fd5c 	bl	4c40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f188:	b120      	cbz	r0, f194 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    f18a:	f240 2119 	movw	r1, #537	; 0x219
    f18e:	2030      	movs	r0, #48	; 0x30
    f190:	f7f2 f834 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f194:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f198:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f19c:	f884 825c 	strb.w	r8, [r4, #604]	; 0x25c
    f1a0:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f1a4:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f1a8:	3494      	adds	r4, #148	; 0x94
    f1aa:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f1ae:	8820      	ldrh	r0, [r4, #0]
    f1b0:	1e40      	subs	r0, r0, #1
    f1b2:	8020      	strh	r0, [r4, #0]
    f1b4:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f1b8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f1bc:	f7ff bece 	b.w	ef5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f1c0:	b570      	push	{r4, r5, r6, lr}
    f1c2:	b140      	cbz	r0, f1d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    f1c4:	2909      	cmp	r1, #9
    f1c6:	d249      	bcs.n	f25c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    f1c8:	e8df f001 	tbb	[pc, r1]
    f1cc:	3c3c1507 	.word	0x3c3c1507
    f1d0:	402a4838 	.word	0x402a4838
    f1d4:	0044      	.short	0x0044
    f1d6:	21cb      	movs	r1, #203	; 0xcb
    f1d8:	e03d      	b.n	f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f1da:	4604      	mov	r4, r0
    f1dc:	f7f4 fcf4 	bl	3bc8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f1e0:	b110      	cbz	r0, f1e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f1e2:	f240 2175 	movw	r1, #629	; 0x275
    f1e6:	e036      	b.n	f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f1e8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f1f0:	38ff      	subs	r0, #255	; 0xff
    f1f2:	f7fb be7f 	b.w	aef4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f1f6:	4605      	mov	r5, r0
    f1f8:	f7ff fbe9 	bl	e9ce <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f1fc:	b9b0      	cbnz	r0, f22c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    f1fe:	2100      	movs	r1, #0
    f200:	4628      	mov	r0, r5
    f202:	f7ff fe73 	bl	eeec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f206:	4604      	mov	r4, r0
    f208:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f20c:	42a0      	cmp	r0, r4
    f20e:	d20b      	bcs.n	f228 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f210:	1a20      	subs	r0, r4, r0
    f212:	2103      	movs	r1, #3
    f214:	f7fa fdba 	bl	9d8c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f218:	b130      	cbz	r0, f228 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f21a:	4628      	mov	r0, r5
    f21c:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f224:	f7ff bbaa 	b.w	e97c <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f228:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f22c:	4628      	mov	r0, r5
    f22e:	f7f4 fce7 	bl	3c00 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f232:	2800      	cmp	r0, #0
    f234:	d014      	beq.n	f260 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    f236:	f240 21a9 	movw	r1, #681	; 0x2a9
    f23a:	e00c      	b.n	f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f23c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f240:	f7f9 b84e 	b.w	82e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f244:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f248:	f7ff be0a 	b.w	ee60 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f24c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f250:	f7ff be43 	b.w	eeda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f254:	21eb      	movs	r1, #235	; 0xeb
    f256:	2030      	movs	r0, #48	; 0x30
    f258:	f7f1 ffd0 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f25c:	21ef      	movs	r1, #239	; 0xef
    f25e:	e7fa      	b.n	f256 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f260:	bd70      	pop	{r4, r5, r6, pc}
    f262:	b510      	push	{r4, lr}
    f264:	0004      	movs	r4, r0
    f266:	d008      	beq.n	f27a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    f268:	2909      	cmp	r1, #9
    f26a:	d25c      	bcs.n	f326 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    f26c:	e8df f001 	tbb	[pc, r1]
    f270:	40403807 	.word	0x40403807
    f274:	4c455b3c 	.word	0x4c455b3c
    f278:	0057      	.short	0x0057
    f27a:	2197      	movs	r1, #151	; 0x97
    f27c:	e050      	b.n	f320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f27e:	2100      	movs	r1, #0
    f280:	f8c4 12ac 	str.w	r1, [r4, #684]	; 0x2ac
    f284:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f288:	4620      	mov	r0, r4
    f28a:	b189      	cbz	r1, f2b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    f28c:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f290:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f294:	428a      	cmp	r2, r1
    f296:	d106      	bne.n	f2a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    f298:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f29c:	1a51      	subs	r1, r2, r1
    f29e:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f2a2:	4611      	mov	r1, r2
    f2a4:	e00d      	b.n	f2c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f2a6:	1a51      	subs	r1, r2, r1
    f2a8:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f2ac:	b291      	uxth	r1, r2
    f2ae:	e008      	b.n	f2c2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f2b0:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f2b4:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f2b8:	1a89      	subs	r1, r1, r2
    f2ba:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f2be:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f2c2:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f2c6:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f2ca:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f2ce:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f2d2:	f7f6 f889 	bl	53e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f2d6:	4620      	mov	r0, r4
    f2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2dc:	f7f5 beba 	b.w	5054 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2e4:	f000 b83c 	b.w	f360 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2ec:	f7f8 bff8 	b.w	82e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f2f0:	4620      	mov	r0, r4
    f2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f2f6:	f7f5 bee7 	b.w	50c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x680>
    f2fa:	2001      	movs	r0, #1
    f2fc:	f7fa fd36 	bl	9d6c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f304:	f7fe bbc3 	b.w	da8e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f308:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f30c:	2804      	cmp	r0, #4
    f30e:	d001      	beq.n	f314 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f310:	21b9      	movs	r1, #185	; 0xb9
    f312:	e005      	b.n	f320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f314:	4620      	mov	r0, r4
    f316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f31a:	f7ff bef8 	b.w	f10e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f31e:	21bf      	movs	r1, #191	; 0xbf
    f320:	2030      	movs	r0, #48	; 0x30
    f322:	f7f1 ff6b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f326:	21c3      	movs	r1, #195	; 0xc3
    f328:	e7fa      	b.n	f320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f32a:	b510      	push	{r4, lr}
    f32c:	f7f8 feee 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f330:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f334:	4408      	add	r0, r1
    f336:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f33a:	fbb0 f0f1 	udiv	r0, r0, r1
    f33e:	f200 1079 	addw	r0, r0, #377	; 0x179
    f342:	bd10      	pop	{r4, pc}
    f344:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f348:	f001 0307 	and.w	r3, r1, #7
    f34c:	7802      	ldrb	r2, [r0, #0]
    f34e:	2101      	movs	r1, #1
    f350:	4099      	lsls	r1, r3
    f352:	438a      	bics	r2, r1
    f354:	7002      	strb	r2, [r0, #0]
    f356:	4770      	bx	lr

0000f358 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f358:	f7f2 bada 	b.w	1910 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f35c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f35c:	2000      	movs	r0, #0
    f35e:	4770      	bx	lr

0000f360 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f360:	f7f2 bf6a 	b.w	2238 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f364 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f364:	2100      	movs	r1, #0
    f366:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f36a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f36e:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f372:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f376:	b109      	cbz	r1, f37c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f378:	2102      	movs	r1, #2
    f37a:	e000      	b.n	f37e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f37c:	2103      	movs	r1, #3
    f37e:	f7f5 bb29 	b.w	49d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f382:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f386:	28fe      	cmp	r0, #254	; 0xfe
    f388:	d001      	beq.n	f38e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f38a:	2001      	movs	r0, #1
    f38c:	4770      	bx	lr
    f38e:	2000      	movs	r0, #0
    f390:	4770      	bx	lr
    f392:	b510      	push	{r4, lr}
    f394:	2801      	cmp	r0, #1
    f396:	d006      	beq.n	f3a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f398:	2802      	cmp	r0, #2
    f39a:	d004      	beq.n	f3a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f39c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f3a0:	2006      	movs	r0, #6
    f3a2:	f7f1 ff2b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3a6:	bd10      	pop	{r4, pc}
    f3a8:	2801      	cmp	r0, #1
    f3aa:	d002      	beq.n	f3b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f3ac:	2802      	cmp	r0, #2
    f3ae:	d105      	bne.n	f3bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f3b0:	e002      	b.n	f3b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f3b2:	2901      	cmp	r1, #1
    f3b4:	d004      	beq.n	f3c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f3b6:	e001      	b.n	f3bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f3b8:	2902      	cmp	r1, #2
    f3ba:	d001      	beq.n	f3c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f3bc:	2000      	movs	r0, #0
    f3be:	4770      	bx	lr
    f3c0:	2001      	movs	r0, #1
    f3c2:	4770      	bx	lr
    f3c4:	1a40      	subs	r0, r0, r1
    f3c6:	b200      	sxth	r0, r0
    f3c8:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f3cc:	4288      	cmp	r0, r1
    f3ce:	dc01      	bgt.n	f3d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f3d0:	2800      	cmp	r0, #0
    f3d2:	dc01      	bgt.n	f3d8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f3d4:	2001      	movs	r0, #1
    f3d6:	4770      	bx	lr
    f3d8:	2000      	movs	r0, #0
    f3da:	4770      	bx	lr
    f3dc:	6842      	ldr	r2, [r0, #4]
    f3de:	2100      	movs	r1, #0
    f3e0:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f3e4:	6842      	ldr	r2, [r0, #4]
    f3e6:	f882 10d6 	strb.w	r1, [r2, #214]	; 0xd6
    f3ea:	6840      	ldr	r0, [r0, #4]
    f3ec:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    f3f0:	4770      	bx	lr
    f3f2:	b510      	push	{r4, lr}
    f3f4:	4604      	mov	r4, r0
    f3f6:	6840      	ldr	r0, [r0, #4]
    f3f8:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f3fc:	0740      	lsls	r0, r0, #29
    f3fe:	d501      	bpl.n	f404 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa0>
    f400:	2001      	movs	r0, #1
    f402:	bd10      	pop	{r4, pc}
    f404:	f7f6 f8f2 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f408:	6860      	ldr	r0, [r4, #4]
    f40a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f40e:	f041 0104 	orr.w	r1, r1, #4
    f412:	6001      	str	r1, [r0, #0]
    f414:	2000      	movs	r0, #0
    f416:	bd10      	pop	{r4, pc}
    f418:	b510      	push	{r4, lr}
    f41a:	4604      	mov	r4, r0
    f41c:	6840      	ldr	r0, [r0, #4]
    f41e:	2301      	movs	r3, #1
    f420:	2109      	movs	r1, #9
    f422:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f426:	3080      	adds	r0, #128	; 0x80
    f428:	f7fe fbc2 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f42c:	2800      	cmp	r0, #0
    f42e:	d009      	beq.n	f444 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe0>
    f430:	6861      	ldr	r1, [r4, #4]
    f432:	2000      	movs	r0, #0
    f434:	f881 00ca 	strb.w	r0, [r1, #202]	; 0xca
    f438:	6861      	ldr	r1, [r4, #4]
    f43a:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    f43e:	6861      	ldr	r1, [r4, #4]
    f440:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f444:	bd10      	pop	{r4, pc}
    f446:	b510      	push	{r4, lr}
    f448:	4604      	mov	r4, r0
    f44a:	6840      	ldr	r0, [r0, #4]
    f44c:	2301      	movs	r3, #1
    f44e:	2100      	movs	r1, #0
    f450:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f454:	3080      	adds	r0, #128	; 0x80
    f456:	f7fe fbab 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f45a:	2800      	cmp	r0, #0
    f45c:	6860      	ldr	r0, [r4, #4]
    f45e:	d00b      	beq.n	f478 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x114>
    f460:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    f464:	2800      	cmp	r0, #0
    f466:	d006      	beq.n	f476 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x112>
    f468:	f7f6 f8c0 	bl	55ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f46c:	6861      	ldr	r1, [r4, #4]
    f46e:	2011      	movs	r0, #17
    f470:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f474:	2000      	movs	r0, #0
    f476:	bd10      	pop	{r4, pc}
    f478:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f47c:	2301      	movs	r3, #1
    f47e:	2105      	movs	r1, #5
    f480:	3080      	adds	r0, #128	; 0x80
    f482:	f7fe fb95 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f486:	b108      	cbz	r0, f48c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x128>
    f488:	2008      	movs	r0, #8
    f48a:	bd10      	pop	{r4, pc}
    f48c:	2001      	movs	r0, #1
    f48e:	bd10      	pop	{r4, pc}
    f490:	6840      	ldr	r0, [r0, #4]
    f492:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f496:	2912      	cmp	r1, #18
    f498:	d001      	beq.n	f49e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x13a>
    f49a:	2002      	movs	r0, #2
    f49c:	4770      	bx	lr
    f49e:	2113      	movs	r1, #19
    f4a0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f4a4:	2000      	movs	r0, #0
    f4a6:	4770      	bx	lr
    f4a8:	b510      	push	{r4, lr}
    f4aa:	4604      	mov	r4, r0
    f4ac:	6840      	ldr	r0, [r0, #4]
    f4ae:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    f4b2:	2818      	cmp	r0, #24
    f4b4:	d001      	beq.n	f4ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x156>
    f4b6:	2002      	movs	r0, #2
    f4b8:	bd10      	pop	{r4, pc}
    f4ba:	f7f6 f8a3 	bl	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f4be:	6861      	ldr	r1, [r4, #4]
    f4c0:	201c      	movs	r0, #28
    f4c2:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f4c6:	2000      	movs	r0, #0
    f4c8:	bd10      	pop	{r4, pc}
    f4ca:	b510      	push	{r4, lr}
    f4cc:	6843      	ldr	r3, [r0, #4]
    f4ce:	4604      	mov	r4, r0
    f4d0:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f4d4:	2808      	cmp	r0, #8
    f4d6:	d20d      	bcs.n	f4f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x190>
    f4d8:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f4dc:	f1c0 0008 	rsb	r0, r0, #8
    f4e0:	b2c1      	uxtb	r1, r0
    f4e2:	1898      	adds	r0, r3, r2
    f4e4:	f7f1 ff2a 	bl	133c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f4e8:	6861      	ldr	r1, [r4, #4]
    f4ea:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f4ee:	4410      	add	r0, r2
    f4f0:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f4f4:	6862      	ldr	r2, [r4, #4]
    f4f6:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f4fa:	3908      	subs	r1, #8
    f4fc:	2904      	cmp	r1, #4
    f4fe:	d20d      	bcs.n	f51c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b8>
    f500:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f504:	f1c1 0104 	rsb	r1, r1, #4
    f508:	b2c9      	uxtb	r1, r1
    f50a:	4410      	add	r0, r2
    f50c:	f7f1 ff16 	bl	133c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f510:	6861      	ldr	r1, [r4, #4]
    f512:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f516:	4410      	add	r0, r2
    f518:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f51c:	6860      	ldr	r0, [r4, #4]
    f51e:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f522:	290c      	cmp	r1, #12
    f524:	d30f      	bcc.n	f546 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e2>
    f526:	d005      	beq.n	f534 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d0>
    f528:	f640 1176 	movw	r1, #2422	; 0x976
    f52c:	f04f 0031 	mov.w	r0, #49	; 0x31
    f530:	f7f1 fe64 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f534:	2100      	movs	r1, #0
    f536:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f53a:	2101      	movs	r1, #1
    f53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f540:	2004      	movs	r0, #4
    f542:	f7f6 be07 	b.w	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    f546:	bd10      	pop	{r4, pc}
    f548:	6842      	ldr	r2, [r0, #4]
    f54a:	2131      	movs	r1, #49	; 0x31
    f54c:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f550:	6840      	ldr	r0, [r0, #4]
    f552:	2100      	movs	r1, #0
    f554:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f558:	4770      	bx	lr
    f55a:	b510      	push	{r4, lr}
    f55c:	6841      	ldr	r1, [r0, #4]
    f55e:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f562:	2a15      	cmp	r2, #21
    f564:	d004      	beq.n	f570 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20c>
    f566:	f640 011b 	movw	r1, #2075	; 0x81b
    f56a:	2031      	movs	r0, #49	; 0x31
    f56c:	f7f1 fe46 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f570:	2201      	movs	r2, #1
    f572:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f576:	6840      	ldr	r0, [r0, #4]
    f578:	2116      	movs	r1, #22
    f57a:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f57e:	bd10      	pop	{r4, pc}
    f580:	f7ff b8ca 	b.w	e718 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f584:	b510      	push	{r4, lr}
    f586:	4604      	mov	r4, r0
    f588:	6840      	ldr	r0, [r0, #4]
    f58a:	2301      	movs	r3, #1
    f58c:	2100      	movs	r1, #0
    f58e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f592:	3080      	adds	r0, #128	; 0x80
    f594:	f7fe fb0c 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f598:	b120      	cbz	r0, f5a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x240>
    f59a:	6861      	ldr	r1, [r4, #4]
    f59c:	201d      	movs	r0, #29
    f59e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f5a2:	bd10      	pop	{r4, pc}
    f5a4:	f640 017e 	movw	r1, #2174	; 0x87e
    f5a8:	2031      	movs	r0, #49	; 0x31
    f5aa:	f7f1 fe27 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ae:	b510      	push	{r4, lr}
    f5b0:	6841      	ldr	r1, [r0, #4]
    f5b2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    f5b6:	06c2      	lsls	r2, r0, #27
    f5b8:	d402      	bmi.n	f5c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x25c>
    f5ba:	f640 0185 	movw	r1, #2181	; 0x885
    f5be:	e003      	b.n	f5c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x264>
    f5c0:	0682      	lsls	r2, r0, #26
    f5c2:	d504      	bpl.n	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x26a>
    f5c4:	f640 0186 	movw	r1, #2182	; 0x886
    f5c8:	2031      	movs	r0, #49	; 0x31
    f5ca:	f7f1 fe17 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5ce:	f020 0010 	bic.w	r0, r0, #16
    f5d2:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    f5d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5da:	f7f6 b813 	b.w	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f5de:	b510      	push	{r4, lr}
    f5e0:	4604      	mov	r4, r0
    f5e2:	6840      	ldr	r0, [r0, #4]
    f5e4:	2301      	movs	r3, #1
    f5e6:	2100      	movs	r1, #0
    f5e8:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f5ec:	3080      	adds	r0, #128	; 0x80
    f5ee:	f7fe fadf 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5f2:	b120      	cbz	r0, f5fe <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x29a>
    f5f4:	6861      	ldr	r1, [r4, #4]
    f5f6:	200f      	movs	r0, #15
    f5f8:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f5fc:	bd10      	pop	{r4, pc}
    f5fe:	f640 0171 	movw	r1, #2161	; 0x871
    f602:	2031      	movs	r0, #49	; 0x31
    f604:	f7f1 fdfa 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f608:	6840      	ldr	r0, [r0, #4]
    f60a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f60e:	f021 0104 	bic.w	r1, r1, #4
    f612:	6001      	str	r1, [r0, #0]
    f614:	f7f5 bff6 	b.w	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f618:	b510      	push	{r4, lr}
    f61a:	6841      	ldr	r1, [r0, #4]
    f61c:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f620:	2a11      	cmp	r2, #17
    f622:	d004      	beq.n	f62e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ca>
    f624:	f640 0113 	movw	r1, #2067	; 0x813
    f628:	2031      	movs	r0, #49	; 0x31
    f62a:	f7f1 fde7 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f62e:	2201      	movs	r2, #1
    f630:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f634:	6840      	ldr	r0, [r0, #4]
    f636:	2112      	movs	r1, #18
    f638:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f63c:	bd10      	pop	{r4, pc}
    f63e:	b510      	push	{r4, lr}
    f640:	4604      	mov	r4, r0
    f642:	6840      	ldr	r0, [r0, #4]
    f644:	2301      	movs	r3, #1
    f646:	2100      	movs	r1, #0
    f648:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f64c:	3080      	adds	r0, #128	; 0x80
    f64e:	f7fe faaf 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f652:	b120      	cbz	r0, f65e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2fa>
    f654:	6861      	ldr	r1, [r4, #4]
    f656:	2020      	movs	r0, #32
    f658:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f65c:	bd10      	pop	{r4, pc}
    f65e:	f44f 6109 	mov.w	r1, #2192	; 0x890
    f662:	2031      	movs	r0, #49	; 0x31
    f664:	f7f1 fdca 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f668:	b510      	push	{r4, lr}
    f66a:	6841      	ldr	r1, [r0, #4]
    f66c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f670:	2822      	cmp	r0, #34	; 0x22
    f672:	d005      	beq.n	f680 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f674:	b120      	cbz	r0, f680 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f676:	f640 0197 	movw	r1, #2199	; 0x897
    f67a:	2031      	movs	r0, #49	; 0x31
    f67c:	f7f1 fdbe 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f680:	2023      	movs	r0, #35	; 0x23
    f682:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f686:	bd10      	pop	{r4, pc}
    f688:	b510      	push	{r4, lr}
    f68a:	6840      	ldr	r0, [r0, #4]
    f68c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f690:	292f      	cmp	r1, #47	; 0x2f
    f692:	d006      	beq.n	f6a2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f694:	2916      	cmp	r1, #22
    f696:	d00b      	beq.n	f6b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x34c>
    f698:	f640 013d 	movw	r1, #2109	; 0x83d
    f69c:	2031      	movs	r0, #49	; 0x31
    f69e:	f7f1 fdad 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a2:	2100      	movs	r1, #0
    f6a4:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6ac:	f7f5 bfaa 	b.w	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f6b0:	211a      	movs	r1, #26
    f6b2:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6b6:	bd10      	pop	{r4, pc}
    f6b8:	b510      	push	{r4, lr}
    f6ba:	6840      	ldr	r0, [r0, #4]
    f6bc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f6c0:	2916      	cmp	r1, #22
    f6c2:	d004      	beq.n	f6ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36a>
    f6c4:	f640 0128 	movw	r1, #2088	; 0x828
    f6c8:	2031      	movs	r0, #49	; 0x31
    f6ca:	f7f1 fd97 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6ce:	211a      	movs	r1, #26
    f6d0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6d4:	bd10      	pop	{r4, pc}
    f6d6:	f7ff b80d 	b.w	e6f4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f6da:	b510      	push	{r4, lr}
    f6dc:	6840      	ldr	r0, [r0, #4]
    f6de:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f6e2:	2916      	cmp	r1, #22
    f6e4:	d004      	beq.n	f6f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f6e6:	f640 0122 	movw	r1, #2082	; 0x822
    f6ea:	2031      	movs	r0, #49	; 0x31
    f6ec:	f7f1 fd86 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6f0:	2118      	movs	r1, #24
    f6f2:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6f6:	bd10      	pop	{r4, pc}
    f6f8:	b510      	push	{r4, lr}
    f6fa:	4604      	mov	r4, r0
    f6fc:	6840      	ldr	r0, [r0, #4]
    f6fe:	2301      	movs	r3, #1
    f700:	4619      	mov	r1, r3
    f702:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    f706:	3080      	adds	r0, #128	; 0x80
    f708:	f7fe fa52 	bl	dbb0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f70c:	2800      	cmp	r0, #0
    f70e:	d103      	bne.n	f718 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3b4>
    f710:	6861      	ldr	r1, [r4, #4]
    f712:	2007      	movs	r0, #7
    f714:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    f718:	bd10      	pop	{r4, pc}
    f71a:	f7ff b84f 	b.w	e7bc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f71e:	b570      	push	{r4, r5, r6, lr}
    f720:	4614      	mov	r4, r2
    f722:	460e      	mov	r6, r1
    f724:	6861      	ldr	r1, [r4, #4]
    f726:	4602      	mov	r2, r0
    f728:	2500      	movs	r5, #0
    f72a:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    f72e:	2a0e      	cmp	r2, #14
    f730:	d00a      	beq.n	f748 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3e4>
    f732:	2a12      	cmp	r2, #18
    f734:	d011      	beq.n	f75a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f6>
    f736:	2a14      	cmp	r2, #20
    f738:	d016      	beq.n	f768 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x404>
    f73a:	2a17      	cmp	r2, #23
    f73c:	d022      	beq.n	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x420>
    f73e:	f240 4115 	movw	r1, #1045	; 0x415
    f742:	2031      	movs	r0, #49	; 0x31
    f744:	f7f1 fd5a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f748:	2804      	cmp	r0, #4
    f74a:	d12f      	bne.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f74c:	4620      	mov	r0, r4
    f74e:	f7ff fe45 	bl	f3dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f752:	4620      	mov	r0, r4
    f754:	f7f3 ffac 	bl	36b0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    f758:	e028      	b.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f75a:	280f      	cmp	r0, #15
    f75c:	d126      	bne.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f75e:	4620      	mov	r0, r4
    f760:	f7ff fe5a 	bl	f418 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb4>
    f764:	4605      	mov	r5, r0
    f766:	e021      	b.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f768:	281d      	cmp	r0, #29
    f76a:	d11f      	bne.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f76c:	4620      	mov	r0, r4
    f76e:	f7ff fe35 	bl	f3dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f772:	b126      	cbz	r6, f77e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x41a>
    f774:	6860      	ldr	r0, [r4, #4]
    f776:	2105      	movs	r1, #5
    f778:	30ec      	adds	r0, #236	; 0xec
    f77a:	f7ff fde3 	bl	f344 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f77e:	f7f6 f919 	bl	59b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    f782:	e013      	b.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f784:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f788:	2823      	cmp	r0, #35	; 0x23
    f78a:	d10f      	bne.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f78c:	2600      	movs	r6, #0
    f78e:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    f792:	f7f5 ff37 	bl	5604 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f796:	6860      	ldr	r0, [r4, #4]
    f798:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    f79c:	2801      	cmp	r0, #1
    f79e:	d102      	bne.n	f7a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x442>
    f7a0:	2000      	movs	r0, #0
    f7a2:	f7f6 fde9 	bl	6378 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    f7a6:	6860      	ldr	r0, [r4, #4]
    f7a8:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    f7ac:	4628      	mov	r0, r5
    f7ae:	bd70      	pop	{r4, r5, r6, pc}
    f7b0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f7b4:	f001 0107 	and.w	r1, r1, #7
    f7b8:	7800      	ldrb	r0, [r0, #0]
    f7ba:	40c8      	lsrs	r0, r1
    f7bc:	f000 0001 	and.w	r0, r0, #1
    f7c0:	4770      	bx	lr

0000f7c2 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7c6:	6856      	ldr	r6, [r2, #4]
    f7c8:	460c      	mov	r4, r1
    f7ca:	f506 7598 	add.w	r5, r6, #304	; 0x130
    f7ce:	f106 0780 	add.w	r7, r6, #128	; 0x80
    f7d2:	2823      	cmp	r0, #35	; 0x23
    f7d4:	d008      	beq.n	f7e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f7d6:	2824      	cmp	r0, #36	; 0x24
    f7d8:	d014      	beq.n	f804 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f7da:	2825      	cmp	r0, #37	; 0x25
    f7dc:	d02a      	beq.n	f834 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f7de:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f7e2:	2078      	movs	r0, #120	; 0x78
    f7e4:	f7f1 fd0a 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7e8:	7de8      	ldrb	r0, [r5, #23]
    f7ea:	f000 f8d4 	bl	f996 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f7ee:	7de9      	ldrb	r1, [r5, #23]
    f7f0:	7121      	strb	r1, [r4, #4]
    f7f2:	7e29      	ldrb	r1, [r5, #24]
    f7f4:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f7f8:	7161      	strb	r1, [r4, #5]
    f7fa:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f7fe:	71a0      	strb	r0, [r4, #6]
    f800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f804:	7d28      	ldrb	r0, [r5, #20]
    f806:	f000 f8c6 	bl	f996 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f80a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f80e:	7f78      	ldrb	r0, [r7, #29]
    f810:	366f      	adds	r6, #111	; 0x6f
    f812:	2828      	cmp	r0, #40	; 0x28
    f814:	d00c      	beq.n	f830 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f816:	68b8      	ldr	r0, [r7, #8]
    f818:	f7f3 ffb8 	bl	378c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f81c:	7831      	ldrb	r1, [r6, #0]
    f81e:	7121      	strb	r1, [r4, #4]
    f820:	7d69      	ldrb	r1, [r5, #21]
    f822:	7161      	strb	r1, [r4, #5]
    f824:	7871      	ldrb	r1, [r6, #1]
    f826:	71a1      	strb	r1, [r4, #6]
    f828:	71e0      	strb	r0, [r4, #7]
    f82a:	2000      	movs	r0, #0
    f82c:	75a8      	strb	r0, [r5, #22]
    f82e:	e7e7      	b.n	f800 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f830:	20ff      	movs	r0, #255	; 0xff
    f832:	e7f3      	b.n	f81c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f834:	7d28      	ldrb	r0, [r5, #20]
    f836:	f000 f8ae 	bl	f996 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f83a:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f83e:	7d29      	ldrb	r1, [r5, #20]
    f840:	7121      	strb	r1, [r4, #4]
    f842:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    f846:	7161      	strb	r1, [r4, #5]
    f848:	7d69      	ldrb	r1, [r5, #21]
    f84a:	71a1      	strb	r1, [r4, #6]
    f84c:	7840      	ldrb	r0, [r0, #1]
    f84e:	71e0      	strb	r0, [r4, #7]
    f850:	e7d6      	b.n	f800 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f852 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f852:	b510      	push	{r4, lr}
    f854:	2801      	cmp	r0, #1
    f856:	d006      	beq.n	f866 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f858:	2802      	cmp	r0, #2
    f85a:	d006      	beq.n	f86a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f85c:	f240 2162 	movw	r1, #610	; 0x262
    f860:	2078      	movs	r0, #120	; 0x78
    f862:	f7f1 fccb 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f866:	2000      	movs	r0, #0
    f868:	bd10      	pop	{r4, pc}
    f86a:	2001      	movs	r0, #1
    f86c:	bd10      	pop	{r4, pc}

0000f86e <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f86e:	207f      	movs	r0, #127	; 0x7f
    f870:	f000 b8ab 	b.w	f9ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f874 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f874:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f878:	f000 b8a7 	b.w	f9ca <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f87c <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f87c:	b510      	push	{r4, lr}
    f87e:	4604      	mov	r4, r0
    f880:	f7f7 ff7e 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f884:	1e64      	subs	r4, r4, #1
    f886:	b2e2      	uxtb	r2, r4
    f888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f88c:	f000 b869 	b.w	f962 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f890 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f894:	4607      	mov	r7, r0
    f896:	461e      	mov	r6, r3
    f898:	4690      	mov	r8, r2
    f89a:	460c      	mov	r4, r1
    f89c:	4608      	mov	r0, r1
    f89e:	f7ff ffed 	bl	f87c <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f8a2:	b1e8      	cbz	r0, f8e0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f8a4:	687d      	ldr	r5, [r7, #4]
    f8a6:	2121      	movs	r1, #33	; 0x21
    f8a8:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f8ac:	3580      	adds	r5, #128	; 0x80
    f8ae:	f7ff ff7f 	bl	f7b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44c>
    f8b2:	b1b8      	cbz	r0, f8e4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f8b4:	1e64      	subs	r4, r4, #1
    f8b6:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f8b8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f8ba:	b2e2      	uxtb	r2, r4
    f8bc:	f000 f851 	bl	f962 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f8c0:	b180      	cbz	r0, f8e4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f8c2:	6878      	ldr	r0, [r7, #4]
    f8c4:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f8c8:	f88d 1000 	strb.w	r1, [sp]
    f8cc:	9900      	ldr	r1, [sp, #0]
    f8ce:	9100      	str	r1, [sp, #0]
    f8d0:	f89d 1000 	ldrb.w	r1, [sp]
    f8d4:	f200 1047 	addw	r0, r0, #327	; 0x147
    f8d8:	b131      	cbz	r1, f8e8 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f8da:	203a      	movs	r0, #58	; 0x3a
    f8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f8e0:	2011      	movs	r0, #17
    f8e2:	e7fb      	b.n	f8dc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f8e4:	201a      	movs	r0, #26
    f8e6:	e7f9      	b.n	f8dc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f8e8:	1c81      	adds	r1, r0, #2
    f8ea:	700e      	strb	r6, [r1, #0]
    f8ec:	2101      	movs	r1, #1
    f8ee:	40a1      	lsls	r1, r4
    f8f0:	7001      	strb	r1, [r0, #0]
    f8f2:	f880 8001 	strb.w	r8, [r0, #1]
    f8f6:	2000      	movs	r0, #0
    f8f8:	e7f0      	b.n	f8dc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f8fa <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8fe:	460d      	mov	r5, r1
    f900:	4606      	mov	r6, r0
    f902:	f7ff ffb4 	bl	f86e <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f906:	4607      	mov	r7, r0
    f908:	f7ff ffb4 	bl	f874 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f90c:	2400      	movs	r4, #0
    f90e:	4285      	cmp	r5, r0
    f910:	d100      	bne.n	f914 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f912:	2401      	movs	r4, #1
    f914:	42bd      	cmp	r5, r7
    f916:	d101      	bne.n	f91c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f918:	f044 0402 	orr.w	r4, r4, #2
    f91c:	f000 f834 	bl	f988 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f920:	2200      	movs	r2, #0
    f922:	4601      	mov	r1, r0
    f924:	2301      	movs	r3, #1
    f926:	fa03 f002 	lsl.w	r0, r3, r2
    f92a:	4208      	tst	r0, r1
    f92c:	d005      	beq.n	f93a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f92e:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f932:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f936:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f93a:	1c52      	adds	r2, r2, #1
    f93c:	b2d2      	uxtb	r2, r2
    f93e:	2a02      	cmp	r2, #2
    f940:	d3f1      	bcc.n	f926 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f946 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f946:	b510      	push	{r4, lr}
    f948:	4604      	mov	r4, r0
    f94a:	4608      	mov	r0, r1
    f94c:	f7ff ff81 	bl	f852 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f950:	2802      	cmp	r0, #2
    f952:	d205      	bcs.n	f960 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f954:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f958:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    f95c:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f960:	bd10      	pop	{r4, pc}
    f962:	b510      	push	{r4, lr}
    f964:	4614      	mov	r4, r2
    f966:	4602      	mov	r2, r0
    f968:	2000      	movs	r0, #0
    f96a:	4603      	mov	r3, r0
    f96c:	2c02      	cmp	r4, #2
    f96e:	d205      	bcs.n	f97c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f970:	4610      	mov	r0, r2
    f972:	f000 f821 	bl	f9b8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f976:	2101      	movs	r1, #1
    f978:	40a1      	lsls	r1, r4
    f97a:	b2cb      	uxtb	r3, r1
    f97c:	4203      	tst	r3, r0
    f97e:	d001      	beq.n	f984 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f980:	2001      	movs	r0, #1
    f982:	bd10      	pop	{r4, pc}
    f984:	2000      	movs	r0, #0
    f986:	bd10      	pop	{r4, pc}
    f988:	b510      	push	{r4, lr}
    f98a:	f7f7 fef9 	bl	7780 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f992:	f000 b811 	b.w	f9b8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f996:	4601      	mov	r1, r0
    f998:	b510      	push	{r4, lr}
    f99a:	2000      	movs	r0, #0
    f99c:	2301      	movs	r3, #1
    f99e:	fa03 f200 	lsl.w	r2, r3, r0
    f9a2:	420a      	tst	r2, r1
    f9a4:	d107      	bne.n	f9b6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f9a6:	1c40      	adds	r0, r0, #1
    f9a8:	b2c0      	uxtb	r0, r0
    f9aa:	2802      	cmp	r0, #2
    f9ac:	d3f7      	bcc.n	f99e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f9ae:	213c      	movs	r1, #60	; 0x3c
    f9b0:	2078      	movs	r0, #120	; 0x78
    f9b2:	f7f1 fc23 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9b6:	bd10      	pop	{r4, pc}
    f9b8:	0a00      	lsrs	r0, r0, #8
    f9ba:	2201      	movs	r2, #1
    f9bc:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f9c0:	07c0      	lsls	r0, r0, #31
    f9c2:	d000      	beq.n	f9c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f9c4:	2203      	movs	r2, #3
    f9c6:	4610      	mov	r0, r2
    f9c8:	4770      	bx	lr
    f9ca:	b508      	push	{r3, lr}
    f9cc:	2301      	movs	r3, #1
    f9ce:	f640 1288 	movw	r2, #2440	; 0x988
    f9d2:	4669      	mov	r1, sp
    f9d4:	f7fc fe56 	bl	c684 <mpsl_fem_tx_power_split>
    f9d8:	bd08      	pop	{r3, pc}
    f9da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f9de:	f001 0107 	and.w	r1, r1, #7
    f9e2:	7800      	ldrb	r0, [r0, #0]
    f9e4:	40c8      	lsrs	r0, r1
    f9e6:	f000 0001 	and.w	r0, r0, #1
    f9ea:	4770      	bx	lr
    f9ec:	b118      	cbz	r0, f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f9ee:	2802      	cmp	r0, #2
    f9f0:	d001      	beq.n	f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f9f2:	2001      	movs	r0, #1
    f9f4:	4770      	bx	lr
    f9f6:	2000      	movs	r0, #0
    f9f8:	4770      	bx	lr

0000f9fa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f9fa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f9fc:	7881      	ldrb	r1, [r0, #2]
    f9fe:	2500      	movs	r5, #0
    fa00:	4604      	mov	r4, r0
    fa02:	291a      	cmp	r1, #26
    fa04:	d024      	beq.n	fa50 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fa06:	dc0e      	bgt.n	fa26 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fa08:	2916      	cmp	r1, #22
    fa0a:	d22b      	bcs.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa0c:	e8df f001 	tbb	[pc, r1]
    fa10:	2a2a2a2a 	.word	0x2a2a2a2a
    fa14:	2a2a202a 	.word	0x2a2a202a
    fa18:	2a2a2a2a 	.word	0x2a2a2a2a
    fa1c:	2a2a2a2a 	.word	0x2a2a2a2a
    fa20:	202a2a2a 	.word	0x202a2a2a
    fa24:	2020      	.short	0x2020
    fa26:	292a      	cmp	r1, #42	; 0x2a
    fa28:	d01c      	beq.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa2a:	dc0b      	bgt.n	fa44 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fa2c:	f1a1 011e 	sub.w	r1, r1, #30
    fa30:	290c      	cmp	r1, #12
    fa32:	d217      	bcs.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa34:	e8df f001 	tbb	[pc, r1]
    fa38:	16161616 	.word	0x16161616
    fa3c:	16161616 	.word	0x16161616
    fa40:	0c161616 	.word	0x0c161616
    fa44:	393a      	subs	r1, #58	; 0x3a
    fa46:	2902      	cmp	r1, #2
    fa48:	d20c      	bcs.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa4a:	e8df f001 	tbb	[pc, r1]
    fa4e:	010b      	.short	0x010b
    fa50:	8820      	ldrh	r0, [r4, #0]
    fa52:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fa56:	d205      	bcs.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa58:	4669      	mov	r1, sp
    fa5a:	f7fe f87f 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa5e:	b118      	cbz	r0, fa68 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fa60:	2002      	movs	r0, #2
    fa62:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fa64:	2012      	movs	r0, #18
    fa66:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fa68:	9901      	ldr	r1, [sp, #4]
    fa6a:	4668      	mov	r0, sp
    fa6c:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fa70:	f88d 2008 	strb.w	r2, [sp, #8]
    fa74:	9a02      	ldr	r2, [sp, #8]
    fa76:	9202      	str	r2, [sp, #8]
    fa78:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fa7c:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fa80:	b10a      	cbz	r2, fa86 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fa82:	200c      	movs	r0, #12
    fa84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fa86:	78a2      	ldrb	r2, [r4, #2]
    fa88:	704a      	strb	r2, [r1, #1]
    fa8a:	22ff      	movs	r2, #255	; 0xff
    fa8c:	700a      	strb	r2, [r1, #0]
    fa8e:	f7fe fc03 	bl	e298 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fa92:	4628      	mov	r0, r5
    fa94:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fa96 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa96:	b510      	push	{r4, lr}
    fa98:	4604      	mov	r4, r0
    fa9a:	f7f7 fd9b 	bl	75d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fa9e:	b108      	cbz	r0, faa4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    faa0:	200c      	movs	r0, #12
    faa2:	bd10      	pop	{r4, pc}
    faa4:	7820      	ldrb	r0, [r4, #0]
    faa6:	b118      	cbz	r0, fab0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    faa8:	2801      	cmp	r0, #1
    faaa:	d001      	beq.n	fab0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    faac:	2012      	movs	r0, #18
    faae:	bd10      	pop	{r4, pc}
    fab0:	f7ff ff9c 	bl	f9ec <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fab4:	1c61      	adds	r1, r4, #1
    fab6:	f7f3 f835 	bl	2b24 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    faba:	b108      	cbz	r0, fac0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fabc:	2000      	movs	r0, #0
    fabe:	bd10      	pop	{r4, pc}
    fac0:	2007      	movs	r0, #7
    fac2:	bd10      	pop	{r4, pc}

0000fac4 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fac4:	b510      	push	{r4, lr}
    fac6:	f7f7 fd85 	bl	75d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    faca:	b108      	cbz	r0, fad0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    facc:	200c      	movs	r0, #12
    face:	bd10      	pop	{r4, pc}
    fad0:	f7f3 f850 	bl	2b74 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fad4:	2000      	movs	r0, #0
    fad6:	bd10      	pop	{r4, pc}

0000fad8 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fad8:	b510      	push	{r4, lr}
    fada:	460b      	mov	r3, r1
    fadc:	2201      	movs	r2, #1
    fade:	f100 0110 	add.w	r1, r0, #16
    fae2:	f7fe f81d 	bl	db20 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fae6:	2000      	movs	r0, #0
    fae8:	bd10      	pop	{r4, pc}

0000faea <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    faea:	b510      	push	{r4, lr}
    faec:	8800      	ldrh	r0, [r0, #0]
    faee:	2100      	movs	r1, #0
    faf0:	f7fd fdb9 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    faf4:	b118      	cbz	r0, fafe <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    faf6:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fafa:	b111      	cbz	r1, fb02 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fafc:	e007      	b.n	fb0e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fafe:	2002      	movs	r0, #2
    fb00:	bd10      	pop	{r4, pc}
    fb02:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fb06:	2915      	cmp	r1, #21
    fb08:	d003      	beq.n	fb12 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb0a:	2916      	cmp	r1, #22
    fb0c:	d001      	beq.n	fb12 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fb0e:	200c      	movs	r0, #12
    fb10:	bd10      	pop	{r4, pc}
    fb12:	2102      	movs	r1, #2
    fb14:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fb18:	2000      	movs	r0, #0
    fb1a:	bd10      	pop	{r4, pc}

0000fb1c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb1e:	4605      	mov	r5, r0
    fb20:	8800      	ldrh	r0, [r0, #0]
    fb22:	2100      	movs	r1, #0
    fb24:	f7fd fd9f 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb28:	0004      	movs	r4, r0
    fb2a:	d003      	beq.n	fb34 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fb2c:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fb30:	b110      	cbz	r0, fb38 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fb32:	e011      	b.n	fb58 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fb34:	2002      	movs	r0, #2
    fb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb38:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fb3c:	2815      	cmp	r0, #21
    fb3e:	d001      	beq.n	fb44 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fb40:	2816      	cmp	r0, #22
    fb42:	d109      	bne.n	fb58 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fb44:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fb48:	f88d 0000 	strb.w	r0, [sp]
    fb4c:	9800      	ldr	r0, [sp, #0]
    fb4e:	9000      	str	r0, [sp, #0]
    fb50:	f89d 0000 	ldrb.w	r0, [sp]
    fb54:	2601      	movs	r6, #1
    fb56:	b108      	cbz	r0, fb5c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fb58:	200c      	movs	r0, #12
    fb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fb5c:	2210      	movs	r2, #16
    fb5e:	1ca9      	adds	r1, r5, #2
    fb60:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fb64:	f001 f850 	bl	10c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fb68:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fb6c:	2000      	movs	r0, #0
    fb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fb70 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fb70:	b510      	push	{r4, lr}
    fb72:	2108      	movs	r1, #8
    fb74:	f7f1 fbf0 	bl	1358 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fb78:	2000      	movs	r0, #0
    fb7a:	bd10      	pop	{r4, pc}

0000fb7c <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fb7c:	b510      	push	{r4, lr}
    fb7e:	4604      	mov	r4, r0
    fb80:	f7f7 fba8 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fb84:	f7fe ff2d 	bl	e9e2 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fb88:	f7f3 f992 	bl	2eb0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb8c:	7020      	strb	r0, [r4, #0]
    fb8e:	2000      	movs	r0, #0
    fb90:	bd10      	pop	{r4, pc}

0000fb92 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb92:	21fb      	movs	r1, #251	; 0xfb
    fb94:	8001      	strh	r1, [r0, #0]
    fb96:	f640 0248 	movw	r2, #2120	; 0x848
    fb9a:	8042      	strh	r2, [r0, #2]
    fb9c:	8081      	strh	r1, [r0, #4]
    fb9e:	80c2      	strh	r2, [r0, #6]
    fba0:	2000      	movs	r0, #0
    fba2:	4770      	bx	lr

0000fba4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fba4:	b51c      	push	{r2, r3, r4, lr}
    fba6:	8800      	ldrh	r0, [r0, #0]
    fba8:	4669      	mov	r1, sp
    fbaa:	f7fd ffd7 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fbae:	2800      	cmp	r0, #0
    fbb0:	d10d      	bne.n	fbce <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fbb2:	f89d 0000 	ldrb.w	r0, [sp]
    fbb6:	9c01      	ldr	r4, [sp, #4]
    fbb8:	2801      	cmp	r0, #1
    fbba:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fbbe:	d103      	bne.n	fbc8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fbc0:	9801      	ldr	r0, [sp, #4]
    fbc2:	f000 fcd6 	bl	10572 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fbc6:	b118      	cbz	r0, fbd0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fbc8:	7ce0      	ldrb	r0, [r4, #19]
    fbca:	b118      	cbz	r0, fbd4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fbcc:	203a      	movs	r0, #58	; 0x3a
    fbce:	bd1c      	pop	{r2, r3, r4, pc}
    fbd0:	2002      	movs	r0, #2
    fbd2:	bd1c      	pop	{r2, r3, r4, pc}
    fbd4:	2001      	movs	r0, #1
    fbd6:	74e0      	strb	r0, [r4, #19]
    fbd8:	2000      	movs	r0, #0
    fbda:	bd1c      	pop	{r2, r3, r4, pc}

0000fbdc <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fbdc:	b510      	push	{r4, lr}
    fbde:	4604      	mov	r4, r0
    fbe0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fbe4:	f000 fd01 	bl	105ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fbe8:	f7f3 f962 	bl	2eb0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fbec:	7020      	strb	r0, [r4, #0]
    fbee:	f000 fcbd 	bl	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fbf2:	f7f3 f95d 	bl	2eb0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fbf6:	7060      	strb	r0, [r4, #1]
    fbf8:	2000      	movs	r0, #0
    fbfa:	bd10      	pop	{r4, pc}

0000fbfc <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fbfc:	2108      	movs	r1, #8
    fbfe:	7001      	strb	r1, [r0, #0]
    fc00:	2000      	movs	r0, #0
    fc02:	4770      	bx	lr

0000fc04 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fc04:	b510      	push	{r4, lr}
    fc06:	4604      	mov	r4, r0
    fc08:	f7f7 fce4 	bl	75d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fc0c:	b108      	cbz	r0, fc12 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fc0e:	200c      	movs	r0, #12
    fc10:	bd10      	pop	{r4, pc}
    fc12:	7820      	ldrb	r0, [r4, #0]
    fc14:	b108      	cbz	r0, fc1a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fc16:	2801      	cmp	r0, #1
    fc18:	d107      	bne.n	fc2a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc1a:	f7ff fee7 	bl	f9ec <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fc1e:	1c61      	adds	r1, r4, #1
    fc20:	f7fd ff73 	bl	db0a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fc24:	b108      	cbz	r0, fc2a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc26:	2000      	movs	r0, #0
    fc28:	bd10      	pop	{r4, pc}
    fc2a:	2012      	movs	r0, #18
    fc2c:	bd10      	pop	{r4, pc}

0000fc2e <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fc2e:	b51c      	push	{r2, r3, r4, lr}
    fc30:	4604      	mov	r4, r0
    fc32:	f7f7 fb4f 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fc36:	2000      	movs	r0, #0
    fc38:	f88d 0002 	strb.w	r0, [sp, #2]
    fc3c:	2103      	movs	r1, #3
    fc3e:	f88d 1001 	strb.w	r1, [sp, #1]
    fc42:	f814 1b01 	ldrb.w	r1, [r4], #1
    fc46:	f88d 1003 	strb.w	r1, [sp, #3]
    fc4a:	f88d 0000 	strb.w	r0, [sp]
    fc4e:	4668      	mov	r0, sp
    fc50:	9401      	str	r4, [sp, #4]
    fc52:	f000 f9a2 	bl	ff9a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fc56:	bd1c      	pop	{r2, r3, r4, pc}

0000fc58 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fc58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fc5a:	4605      	mov	r5, r0
    fc5c:	f7f7 fb3a 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fc60:	4606      	mov	r6, r0
    fc62:	7828      	ldrb	r0, [r5, #0]
    fc64:	2400      	movs	r4, #0
    fc66:	b160      	cbz	r0, fc82 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc68:	f88d 4000 	strb.w	r4, [sp]
    fc6c:	2001      	movs	r0, #1
    fc6e:	f10d 0101 	add.w	r1, sp, #1
    fc72:	f7f2 f961 	bl	1f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fc76:	b120      	cbz	r0, fc82 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc78:	4668      	mov	r0, sp
    fc7a:	f000 f897 	bl	fdac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fc7e:	2800      	cmp	r0, #0
    fc80:	d112      	bne.n	fca8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc82:	f88d 400c 	strb.w	r4, [sp, #12]
    fc86:	4630      	mov	r0, r6
    fc88:	f7fe fea1 	bl	e9ce <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fc8c:	b118      	cbz	r0, fc96 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fc8e:	2080      	movs	r0, #128	; 0x80
    fc90:	f8ad 000d 	strh.w	r0, [sp, #13]
    fc94:	e001      	b.n	fc9a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fc96:	f8ad 400d 	strh.w	r4, [sp, #13]
    fc9a:	f88d 400f 	strb.w	r4, [sp, #15]
    fc9e:	7828      	ldrb	r0, [r5, #0]
    fca0:	2801      	cmp	r0, #1
    fca2:	d003      	beq.n	fcac <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fca4:	b138      	cbz	r0, fcb6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fca6:	2012      	movs	r0, #18
    fca8:	b004      	add	sp, #16
    fcaa:	bd70      	pop	{r4, r5, r6, pc}
    fcac:	a903      	add	r1, sp, #12
    fcae:	4630      	mov	r0, r6
    fcb0:	f7f7 fb2c 	bl	730c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fcb4:	e7f8      	b.n	fca8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fcb6:	4630      	mov	r0, r6
    fcb8:	f000 fc71 	bl	1059e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fcbc:	e7f4      	b.n	fca8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fcbe <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fcbe:	b530      	push	{r4, r5, lr}
    fcc0:	b08b      	sub	sp, #44	; 0x2c
    fcc2:	4604      	mov	r4, r0
    fcc4:	f7f7 fb06 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fcc8:	4602      	mov	r2, r0
    fcca:	7920      	ldrb	r0, [r4, #4]
    fccc:	2804      	cmp	r0, #4
    fcce:	d803      	bhi.n	fcd8 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fcd0:	8860      	ldrh	r0, [r4, #2]
    fcd2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fcd6:	d902      	bls.n	fcde <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fcd8:	2012      	movs	r0, #18
    fcda:	b00b      	add	sp, #44	; 0x2c
    fcdc:	bd30      	pop	{r4, r5, pc}
    fcde:	2500      	movs	r5, #0
    fce0:	f88d 5004 	strb.w	r5, [sp, #4]
    fce4:	7921      	ldrb	r1, [r4, #4]
    fce6:	9500      	str	r5, [sp, #0]
    fce8:	f89d 0000 	ldrb.w	r0, [sp]
    fcec:	2905      	cmp	r1, #5
    fcee:	f040 0010 	orr.w	r0, r0, #16
    fcf2:	f88d 0000 	strb.w	r0, [sp]
    fcf6:	d254      	bcs.n	fda2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fcf8:	e8df f001 	tbb	[pc, r1]
    fcfc:	11050803 	.word	0x11050803
    fd00:	000b      	.short	0x000b
    fd02:	f040 0001 	orr.w	r0, r0, #1
    fd06:	f040 0002 	orr.w	r0, r0, #2
    fd0a:	e006      	b.n	fd1a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fd0c:	f040 0009 	orr.w	r0, r0, #9
    fd10:	e001      	b.n	fd16 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fd12:	f040 0001 	orr.w	r0, r0, #1
    fd16:	f040 0004 	orr.w	r0, r0, #4
    fd1a:	f88d 0000 	strb.w	r0, [sp]
    fd1e:	f8bd 0000 	ldrh.w	r0, [sp]
    fd22:	9000      	str	r0, [sp, #0]
    fd24:	f8bd 0000 	ldrh.w	r0, [sp]
    fd28:	f8ad 0005 	strh.w	r0, [sp, #5]
    fd2c:	8821      	ldrh	r1, [r4, #0]
    fd2e:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fd32:	f361 201f 	bfi	r0, r1, #8, #24
    fd36:	f8cd 0006 	str.w	r0, [sp, #6]
    fd3a:	8861      	ldrh	r1, [r4, #2]
    fd3c:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fd40:	f361 201f 	bfi	r0, r1, #8, #24
    fd44:	f8cd 0009 	str.w	r0, [sp, #9]
    fd48:	7b60      	ldrb	r0, [r4, #13]
    fd4a:	f88d 000d 	strb.w	r0, [sp, #13]
    fd4e:	7960      	ldrb	r0, [r4, #5]
    fd50:	f88d 000e 	strb.w	r0, [sp, #14]
    fd54:	79a0      	ldrb	r0, [r4, #6]
    fd56:	f88d 000f 	strb.w	r0, [sp, #15]
    fd5a:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fd5e:	9004      	str	r0, [sp, #16]
    fd60:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fd64:	f8ad 0014 	strh.w	r0, [sp, #20]
    fd68:	7ba0      	ldrb	r0, [r4, #14]
    fd6a:	f88d 0016 	strb.w	r0, [sp, #22]
    fd6e:	207f      	movs	r0, #127	; 0x7f
    fd70:	f88d 0017 	strb.w	r0, [sp, #23]
    fd74:	2001      	movs	r0, #1
    fd76:	f88d 0018 	strb.w	r0, [sp, #24]
    fd7a:	f88d 5019 	strb.w	r5, [sp, #25]
    fd7e:	f88d 001a 	strb.w	r0, [sp, #26]
    fd82:	f88d 501b 	strb.w	r5, [sp, #27]
    fd86:	4610      	mov	r0, r2
    fd88:	f7fe fe41 	bl	ea0e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fd8c:	f88d 001c 	strb.w	r0, [sp, #28]
    fd90:	f88d 501d 	strb.w	r5, [sp, #29]
    fd94:	f88d 501e 	strb.w	r5, [sp, #30]
    fd98:	a909      	add	r1, sp, #36	; 0x24
    fd9a:	a801      	add	r0, sp, #4
    fd9c:	f7f7 f930 	bl	7000 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fda0:	e79b      	b.n	fcda <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fda2:	f241 215b 	movw	r1, #4699	; 0x125b
    fda6:	2039      	movs	r0, #57	; 0x39
    fda8:	f7f1 fa28 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fdac <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fdac:	b570      	push	{r4, r5, r6, lr}
    fdae:	4604      	mov	r4, r0
    fdb0:	7800      	ldrb	r0, [r0, #0]
    fdb2:	2101      	movs	r1, #1
    fdb4:	f7fd fc57 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdb8:	0005      	movs	r5, r0
    fdba:	d007      	beq.n	fdcc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fdbc:	f7fe ffe4 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fdc0:	b160      	cbz	r0, fddc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fdc2:	4628      	mov	r0, r5
    fdc4:	f7fe fe09 	bl	e9da <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fdc8:	b110      	cbz	r0, fdd0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fdca:	e005      	b.n	fdd8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fdcc:	2042      	movs	r0, #66	; 0x42
    fdce:	bd70      	pop	{r4, r5, r6, pc}
    fdd0:	4628      	mov	r0, r5
    fdd2:	f7fe fdf8 	bl	e9c6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fdd6:	b108      	cbz	r0, fddc <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fdd8:	200c      	movs	r0, #12
    fdda:	bd70      	pop	{r4, r5, r6, pc}
    fddc:	1c61      	adds	r1, r4, #1
    fdde:	4628      	mov	r0, r5
    fde0:	f7fe fe0d 	bl	e9fe <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fde4:	2000      	movs	r0, #0
    fde6:	bd70      	pop	{r4, r5, r6, pc}

0000fde8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fde8:	b50e      	push	{r1, r2, r3, lr}
    fdea:	8882      	ldrh	r2, [r0, #4]
    fdec:	f244 2390 	movw	r3, #17040	; 0x4290
    fdf0:	429a      	cmp	r2, r3
    fdf2:	d901      	bls.n	fdf8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fdf4:	2012      	movs	r0, #18
    fdf6:	bd0e      	pop	{r1, r2, r3, pc}
    fdf8:	f640 0348 	movw	r3, #2120	; 0x848
    fdfc:	429a      	cmp	r2, r3
    fdfe:	d300      	bcc.n	fe02 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fe00:	461a      	mov	r2, r3
    fe02:	8803      	ldrh	r3, [r0, #0]
    fe04:	f8ad 3000 	strh.w	r3, [sp]
    fe08:	8843      	ldrh	r3, [r0, #2]
    fe0a:	f8ad 3002 	strh.w	r3, [sp, #2]
    fe0e:	f8ad 2004 	strh.w	r2, [sp, #4]
    fe12:	8843      	ldrh	r3, [r0, #2]
    fe14:	f8ad 3006 	strh.w	r3, [sp, #6]
    fe18:	f8ad 2008 	strh.w	r2, [sp, #8]
    fe1c:	8800      	ldrh	r0, [r0, #0]
    fe1e:	8008      	strh	r0, [r1, #0]
    fe20:	4668      	mov	r0, sp
    fe22:	f7f7 fb53 	bl	74cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
    fe26:	bd0e      	pop	{r1, r2, r3, pc}

0000fe28 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fe28:	b510      	push	{r4, lr}
    fe2a:	4604      	mov	r4, r0
    fe2c:	f7f7 fa52 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe30:	7861      	ldrb	r1, [r4, #1]
    fe32:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fe36:	f001 0101 	and.w	r1, r1, #1
    fe3a:	f7fe fddc 	bl	e9f6 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fe3e:	2000      	movs	r0, #0
    fe40:	bd10      	pop	{r4, pc}

0000fe42 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fe42:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fe44:	4604      	mov	r4, r0
    fe46:	f10d 0007 	add.w	r0, sp, #7
    fe4a:	9000      	str	r0, [sp, #0]
    fe4c:	7922      	ldrb	r2, [r4, #4]
    fe4e:	78e1      	ldrb	r1, [r4, #3]
    fe50:	78a0      	ldrb	r0, [r4, #2]
    fe52:	f10d 0306 	add.w	r3, sp, #6
    fe56:	f000 fbd0 	bl	105fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    fe5a:	2800      	cmp	r0, #0
    fe5c:	d109      	bne.n	fe72 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fe5e:	8820      	ldrh	r0, [r4, #0]
    fe60:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe64:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fe68:	f8ad 0008 	strh.w	r0, [sp, #8]
    fe6c:	a801      	add	r0, sp, #4
    fe6e:	f000 f94f 	bl	10110 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fe72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fe74 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fe74:	b510      	push	{r4, lr}
    fe76:	4604      	mov	r4, r0
    fe78:	2001      	movs	r0, #1
    fe7a:	f000 fa55 	bl	10328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe7e:	b128      	cbz	r0, fe8c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fe80:	4621      	mov	r1, r4
    fe82:	2001      	movs	r0, #1
    fe84:	f7f2 f870 	bl	1f68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe88:	2000      	movs	r0, #0
    fe8a:	bd10      	pop	{r4, pc}
    fe8c:	200c      	movs	r0, #12
    fe8e:	bd10      	pop	{r4, pc}

0000fe90 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fe90:	b51c      	push	{r2, r3, r4, lr}
    fe92:	4604      	mov	r4, r0
    fe94:	f7f7 fa1e 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe98:	2000      	movs	r0, #0
    fe9a:	f88d 0000 	strb.w	r0, [sp]
    fe9e:	f88d 0002 	strb.w	r0, [sp, #2]
    fea2:	2003      	movs	r0, #3
    fea4:	f88d 0001 	strb.w	r0, [sp, #1]
    fea8:	f814 0b01 	ldrb.w	r0, [r4], #1
    feac:	f88d 0003 	strb.w	r0, [sp, #3]
    feb0:	4668      	mov	r0, sp
    feb2:	9401      	str	r4, [sp, #4]
    feb4:	f000 f8da 	bl	1006c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    feb8:	bd1c      	pop	{r2, r3, r4, pc}

0000feba <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    feba:	b51c      	push	{r2, r3, r4, lr}
    febc:	8801      	ldrh	r1, [r0, #0]
    febe:	f8ad 1000 	strh.w	r1, [sp]
    fec2:	8841      	ldrh	r1, [r0, #2]
    fec4:	f8ad 1002 	strh.w	r1, [sp, #2]
    fec8:	8801      	ldrh	r1, [r0, #0]
    feca:	f8ad 1004 	strh.w	r1, [sp, #4]
    fece:	8840      	ldrh	r0, [r0, #2]
    fed0:	f8ad 0006 	strh.w	r0, [sp, #6]
    fed4:	4668      	mov	r0, sp
    fed6:	f7f7 fb99 	bl	760c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
    feda:	bd1c      	pop	{r2, r3, r4, pc}

0000fedc <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fedc:	b510      	push	{r4, lr}
    fede:	f7f2 f867 	bl	1fb0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fee2:	2000      	movs	r0, #0
    fee4:	bd10      	pop	{r4, pc}

0000fee6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fee6:	b510      	push	{r4, lr}
    fee8:	460c      	mov	r4, r1
    feea:	2100      	movs	r1, #0
    feec:	f7fd fbbb 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fef0:	b118      	cbz	r0, fefa <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fef2:	2c02      	cmp	r4, #2
    fef4:	d903      	bls.n	fefe <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fef6:	2012      	movs	r0, #18
    fef8:	bd10      	pop	{r4, pc}
    fefa:	2002      	movs	r0, #2
    fefc:	bd10      	pop	{r4, pc}
    fefe:	f014 0101 	ands.w	r1, r4, #1
    ff02:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    ff06:	f3c4 0240 	ubfx	r2, r4, #1, #1
    ff0a:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    ff0e:	d004      	beq.n	ff1a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ff10:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    ff14:	b109      	cbz	r1, ff1a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ff16:	f7fe ff3a 	bl	ed8e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ff1a:	2000      	movs	r0, #0
    ff1c:	bd10      	pop	{r4, pc}

0000ff1e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ff1e:	b51c      	push	{r2, r3, r4, lr}
    ff20:	460c      	mov	r4, r1
    ff22:	4669      	mov	r1, sp
    ff24:	f7fd fe1a 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff28:	2800      	cmp	r0, #0
    ff2a:	d105      	bne.n	ff38 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    ff2c:	2100      	movs	r1, #0
    ff2e:	4622      	mov	r2, r4
    ff30:	9801      	ldr	r0, [sp, #4]
    ff32:	f000 fac5 	bl	104c0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    ff36:	2000      	movs	r0, #0
    ff38:	bd1c      	pop	{r2, r3, r4, pc}

0000ff3a <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    ff3a:	b510      	push	{r4, lr}
    ff3c:	4604      	mov	r4, r0
    ff3e:	7800      	ldrb	r0, [r0, #0]
    ff40:	28ff      	cmp	r0, #255	; 0xff
    ff42:	d009      	beq.n	ff58 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    ff44:	2101      	movs	r1, #1
    ff46:	f7fd fb8e 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff4a:	b118      	cbz	r0, ff54 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    ff4c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    ff50:	8441      	strh	r1, [r0, #34]	; 0x22
    ff52:	e005      	b.n	ff60 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    ff54:	2042      	movs	r0, #66	; 0x42
    ff56:	bd10      	pop	{r4, pc}
    ff58:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    ff5c:	f7f4 fcd2 	bl	4904 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    ff60:	2000      	movs	r0, #0
    ff62:	bd10      	pop	{r4, pc}

0000ff64 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    ff64:	b510      	push	{r4, lr}
    ff66:	4604      	mov	r4, r0
    ff68:	f7f7 fb90 	bl	768c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    ff6c:	b118      	cbz	r0, ff76 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    ff6e:	2000      	movs	r0, #0
    ff70:	f000 f9da 	bl	10328 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    ff74:	b128      	cbz	r0, ff82 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    ff76:	4621      	mov	r1, r4
    ff78:	2000      	movs	r0, #0
    ff7a:	f7f1 fff5 	bl	1f68 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff7e:	2000      	movs	r0, #0
    ff80:	bd10      	pop	{r4, pc}
    ff82:	200c      	movs	r0, #12
    ff84:	bd10      	pop	{r4, pc}

0000ff86 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    ff86:	b510      	push	{r4, lr}
    ff88:	7800      	ldrb	r0, [r0, #0]
    ff8a:	b100      	cbz	r0, ff8e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    ff8c:	2001      	movs	r0, #1
    ff8e:	f7f4 fce3 	bl	4958 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    ff92:	2000      	movs	r0, #0
    ff94:	bd10      	pop	{r4, pc}

0000ff96 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ff96:	f7f7 ba99 	b.w	74cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

0000ff9a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ff9a:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff9e:	4606      	mov	r6, r0
    ffa0:	7845      	ldrb	r5, [r0, #1]
    ffa2:	7800      	ldrb	r0, [r0, #0]
    ffa4:	2101      	movs	r1, #1
    ffa6:	f7fd fb5e 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffaa:	0004      	movs	r4, r0
    ffac:	d01e      	beq.n	ffec <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ffae:	f7fe fcdd 	bl	e96c <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ffb2:	78f1      	ldrb	r1, [r6, #3]
    ffb4:	4281      	cmp	r1, r0
    ffb6:	d800      	bhi.n	ffba <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ffb8:	4608      	mov	r0, r1
    ffba:	4607      	mov	r7, r0
    ffbc:	2d04      	cmp	r5, #4
    ffbe:	d018      	beq.n	fff2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ffc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffc2:	f7fd fc9f 	bl	d904 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ffc6:	4438      	add	r0, r7
    ffc8:	b281      	uxth	r1, r0
    ffca:	4620      	mov	r0, r4
    ffcc:	2201      	movs	r2, #1
    ffce:	f000 f9bd 	bl	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ffd2:	2800      	cmp	r0, #0
    ffd4:	d10b      	bne.n	ffee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ffd6:	2d03      	cmp	r5, #3
    ffd8:	d000      	beq.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ffda:	b1df      	cbz	r7, 10014 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ffdc:	4620      	mov	r0, r4
    ffde:	f7fe fcfa 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ffe2:	7871      	ldrb	r1, [r6, #1]
    ffe4:	2903      	cmp	r1, #3
    ffe6:	d010      	beq.n	1000a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ffe8:	b9a0      	cbnz	r0, 10014 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ffea:	e004      	b.n	fff6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ffec:	2042      	movs	r0, #66	; 0x42
    ffee:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fff2:	b97f      	cbnz	r7, 10014 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fff4:	e7f2      	b.n	ffdc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fff6:	2904      	cmp	r1, #4
    fff8:	d107      	bne.n	1000a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fffa:	4620      	mov	r0, r4
    fffc:	f7fe fec4 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10000:	b140      	cbz	r0, 10014 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10002:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10004:	f7fd fc45 	bl	d892 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10008:	b120      	cbz	r0, 10014 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1000a:	2d01      	cmp	r5, #1
   1000c:	d004      	beq.n	10018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1000e:	2d03      	cmp	r5, #3
   10010:	d002      	beq.n	10018 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   10012:	e00e      	b.n	10032 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10014:	2012      	movs	r0, #18
   10016:	e7ea      	b.n	ffee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10018:	4620      	mov	r0, r4
   1001a:	f7fe fcdc 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1001e:	b108      	cbz	r0, 10024 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   10020:	2200      	movs	r2, #0
   10022:	e002      	b.n	1002a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10024:	2d01      	cmp	r5, #1
   10026:	d013      	beq.n	10050 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10028:	2201      	movs	r2, #1
   1002a:	4668      	mov	r0, sp
   1002c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1002e:	f7fd fbcc 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   10032:	2d04      	cmp	r5, #4
   10034:	d018      	beq.n	10068 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10036:	6872      	ldr	r2, [r6, #4]
   10038:	463b      	mov	r3, r7
   1003a:	2101      	movs	r1, #1
   1003c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1003e:	f7fd fbf8 	bl	d832 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10042:	b138      	cbz	r0, 10054 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10044:	7870      	ldrb	r0, [r6, #1]
   10046:	2802      	cmp	r0, #2
   10048:	d006      	beq.n	10058 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1004a:	2803      	cmp	r0, #3
   1004c:	d004      	beq.n	10058 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1004e:	e00b      	b.n	10068 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10050:	2202      	movs	r2, #2
   10052:	e7ea      	b.n	1002a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10054:	2007      	movs	r0, #7
   10056:	e7ca      	b.n	ffee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10058:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1005a:	f7fd fc53 	bl	d904 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1005e:	4602      	mov	r2, r0
   10060:	2101      	movs	r1, #1
   10062:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10064:	f7fd fc2b 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10068:	2000      	movs	r0, #0
   1006a:	e7c0      	b.n	ffee <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0001006c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   1006c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10070:	4607      	mov	r7, r0
   10072:	7845      	ldrb	r5, [r0, #1]
   10074:	78c6      	ldrb	r6, [r0, #3]
   10076:	7800      	ldrb	r0, [r0, #0]
   10078:	2101      	movs	r1, #1
   1007a:	f7fd faf4 	bl	d666 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1007e:	0004      	movs	r4, r0
   10080:	d003      	beq.n	1008a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   10082:	f7fe fcaa 	bl	e9da <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10086:	b118      	cbz	r0, 10090 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10088:	e003      	b.n	10092 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   1008a:	2042      	movs	r0, #66	; 0x42
   1008c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10090:	2600      	movs	r6, #0
   10092:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10094:	f7fd fc3a 	bl	d90c <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10098:	4430      	add	r0, r6
   1009a:	b281      	uxth	r1, r0
   1009c:	4688      	mov	r8, r1
   1009e:	4620      	mov	r0, r4
   100a0:	2201      	movs	r2, #1
   100a2:	f000 f953 	bl	1034c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   100a6:	2800      	cmp	r0, #0
   100a8:	d1f0      	bne.n	1008c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100aa:	2d04      	cmp	r5, #4
   100ac:	d008      	beq.n	100c0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   100ae:	2d03      	cmp	r5, #3
   100b0:	d00a      	beq.n	100c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   100b2:	b12e      	cbz	r6, 100c0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   100b4:	4620      	mov	r0, r4
   100b6:	f7fe fe67 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100ba:	b118      	cbz	r0, 100c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   100bc:	200c      	movs	r0, #12
   100be:	e7e5      	b.n	1008c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100c0:	2012      	movs	r0, #18
   100c2:	e7e3      	b.n	1008c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   100c4:	2d01      	cmp	r5, #1
   100c6:	d10c      	bne.n	100e2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   100c8:	4620      	mov	r0, r4
   100ca:	f7fe fc84 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   100ce:	b108      	cbz	r0, 100d4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   100d0:	2204      	movs	r2, #4
   100d2:	e002      	b.n	100da <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   100d4:	2d01      	cmp	r5, #1
   100d6:	d010      	beq.n	100fa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   100d8:	2205      	movs	r2, #5
   100da:	4668      	mov	r0, sp
   100dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100de:	f7fd fb74 	bl	d7ca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100e2:	687a      	ldr	r2, [r7, #4]
   100e4:	4633      	mov	r3, r6
   100e6:	2100      	movs	r1, #0
   100e8:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100ea:	f7fd fba2 	bl	d832 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   100ee:	b130      	cbz	r0, 100fe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   100f0:	2d02      	cmp	r5, #2
   100f2:	d006      	beq.n	10102 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   100f4:	2d03      	cmp	r5, #3
   100f6:	d004      	beq.n	10102 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   100f8:	e008      	b.n	1010c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   100fa:	2206      	movs	r2, #6
   100fc:	e7ed      	b.n	100da <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   100fe:	2007      	movs	r0, #7
   10100:	e7c4      	b.n	1008c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10102:	4642      	mov	r2, r8
   10104:	2100      	movs	r1, #0
   10106:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10108:	f7fd fbd9 	bl	d8be <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   1010c:	2000      	movs	r0, #0
   1010e:	e7bd      	b.n	1008c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010110 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10110:	b510      	push	{r4, lr}
   10112:	4604      	mov	r4, r0
   10114:	8880      	ldrh	r0, [r0, #4]
   10116:	b128      	cbz	r0, 10124 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10118:	2801      	cmp	r0, #1
   1011a:	d003      	beq.n	10124 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1011c:	2802      	cmp	r0, #2
   1011e:	d001      	beq.n	10124 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10120:	2012      	movs	r0, #18
   10122:	bd10      	pop	{r4, pc}
   10124:	78e0      	ldrb	r0, [r4, #3]
   10126:	f000 f9a8 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   1012a:	b148      	cbz	r0, 10140 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1012c:	78a0      	ldrb	r0, [r4, #2]
   1012e:	f000 f9a4 	bl	1047a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10132:	b128      	cbz	r0, 10140 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10134:	4620      	mov	r0, r4
   10136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1013a:	2101      	movs	r1, #1
   1013c:	f000 b862 	b.w	10204 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10140:	2011      	movs	r0, #17
   10142:	bd10      	pop	{r4, pc}

00010144 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10146:	460c      	mov	r4, r1
   10148:	4605      	mov	r5, r0
   1014a:	8800      	ldrh	r0, [r0, #0]
   1014c:	4669      	mov	r1, sp
   1014e:	f7fd fd05 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10152:	2800      	cmp	r0, #0
   10154:	d106      	bne.n	10164 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10156:	9801      	ldr	r0, [sp, #4]
   10158:	8829      	ldrh	r1, [r5, #0]
   1015a:	8021      	strh	r1, [r4, #0]
   1015c:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   10160:	8060      	strh	r0, [r4, #2]
   10162:	2000      	movs	r0, #0
   10164:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010166 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10166:	b510      	push	{r4, lr}
   10168:	4604      	mov	r4, r0
   1016a:	4601      	mov	r1, r0
   1016c:	2000      	movs	r0, #0
   1016e:	f7f1 fee3 	bl	1f38 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10172:	b910      	cbnz	r0, 1017a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10174:	2000      	movs	r0, #0
   10176:	6020      	str	r0, [r4, #0]
   10178:	80a0      	strh	r0, [r4, #4]
   1017a:	2000      	movs	r0, #0
   1017c:	bd10      	pop	{r4, pc}

0001017e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   1017e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10180:	460c      	mov	r4, r1
   10182:	4605      	mov	r5, r0
   10184:	8800      	ldrh	r0, [r0, #0]
   10186:	4669      	mov	r1, sp
   10188:	f7fd fce8 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1018c:	b108      	cbz	r0, 10192 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   1018e:	2002      	movs	r0, #2
   10190:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10192:	78a8      	ldrb	r0, [r5, #2]
   10194:	b158      	cbz	r0, 101ae <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   10196:	f000 f9e9 	bl	1056c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   1019a:	70a0      	strb	r0, [r4, #2]
   1019c:	8828      	ldrh	r0, [r5, #0]
   1019e:	8020      	strh	r0, [r4, #0]
   101a0:	f994 0002 	ldrsb.w	r0, [r4, #2]
   101a4:	f7f2 fe84 	bl	2eb0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   101a8:	70a0      	strb	r0, [r4, #2]
   101aa:	2000      	movs	r0, #0
   101ac:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101ae:	9801      	ldr	r0, [sp, #4]
   101b0:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   101b4:	e7f1      	b.n	1019a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000101b6 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   101b6:	b510      	push	{r4, lr}
   101b8:	f7f7 fa6e 	bl	7698 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   101bc:	2000      	movs	r0, #0
   101be:	bd10      	pop	{r4, pc}

000101c0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   101c0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101c4:	4604      	mov	r4, r0
   101c6:	8840      	ldrh	r0, [r0, #2]
   101c8:	460d      	mov	r5, r1
   101ca:	b1b8      	cbz	r0, 101fc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   101cc:	8820      	ldrh	r0, [r4, #0]
   101ce:	4669      	mov	r1, sp
   101d0:	f7fd fcc4 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d4:	2800      	cmp	r0, #0
   101d6:	d10f      	bne.n	101f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   101d8:	8820      	ldrh	r0, [r4, #0]
   101da:	8028      	strh	r0, [r5, #0]
   101dc:	9e01      	ldr	r6, [sp, #4]
   101de:	f106 0510 	add.w	r5, r6, #16
   101e2:	3680      	adds	r6, #128	; 0x80
   101e4:	682f      	ldr	r7, [r5, #0]
   101e6:	8862      	ldrh	r2, [r4, #2]
   101e8:	4639      	mov	r1, r7
   101ea:	4630      	mov	r0, r6
   101ec:	f7fd fde7 	bl	ddbe <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   101f0:	6828      	ldr	r0, [r5, #0]
   101f2:	42b8      	cmp	r0, r7
   101f4:	d1f6      	bne.n	101e4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   101f6:	2000      	movs	r0, #0
   101f8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   101fc:	2012      	movs	r0, #18
   101fe:	e7fb      	b.n	101f8 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010200 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10200:	f000 b863 	b.w	102ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010204 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10208:	b086      	sub	sp, #24
   1020a:	4689      	mov	r9, r1
   1020c:	4607      	mov	r7, r0
   1020e:	8800      	ldrh	r0, [r0, #0]
   10210:	a901      	add	r1, sp, #4
   10212:	f7fd fca3 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10216:	2800      	cmp	r0, #0
   10218:	d136      	bne.n	10288 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1021a:	9802      	ldr	r0, [sp, #8]
   1021c:	4601      	mov	r1, r0
   1021e:	4688      	mov	r8, r1
   10220:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   10224:	f500 7498 	add.w	r4, r0, #304	; 0x130
   10228:	f88d 1000 	strb.w	r1, [sp]
   1022c:	9900      	ldr	r1, [sp, #0]
   1022e:	9100      	str	r1, [sp, #0]
   10230:	f89d 1000 	ldrb.w	r1, [sp]
   10234:	3080      	adds	r0, #128	; 0x80
   10236:	b109      	cbz	r1, 1023c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10238:	2601      	movs	r6, #1
   1023a:	e000      	b.n	1023e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   1023c:	2600      	movs	r6, #0
   1023e:	7f81      	ldrb	r1, [r0, #30]
   10240:	2922      	cmp	r1, #34	; 0x22
   10242:	d100      	bne.n	10246 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10244:	b13e      	cbz	r6, 10256 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10246:	2500      	movs	r5, #0
   10248:	306c      	adds	r0, #108	; 0x6c
   1024a:	2108      	movs	r1, #8
   1024c:	4682      	mov	sl, r0
   1024e:	f7ff fbc4 	bl	f9da <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   10252:	b110      	cbz	r0, 1025a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10254:	e007      	b.n	10266 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10256:	2501      	movs	r5, #1
   10258:	e7f6      	b.n	10248 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   1025a:	210b      	movs	r1, #11
   1025c:	4650      	mov	r0, sl
   1025e:	f7ff fbbc 	bl	f9da <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   10262:	b900      	cbnz	r0, 10266 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10264:	b17d      	cbz	r5, 10286 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   10266:	a804      	add	r0, sp, #16
   10268:	9000      	str	r0, [sp, #0]
   1026a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1026e:	ab03      	add	r3, sp, #12
   10270:	463a      	mov	r2, r7
   10272:	4641      	mov	r1, r8
   10274:	f000 f95a 	bl	1052c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   10278:	0005      	movs	r5, r0
   1027a:	d105      	bne.n	10288 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1027c:	340c      	adds	r4, #12
   1027e:	20ff      	movs	r0, #255	; 0xff
   10280:	7060      	strb	r0, [r4, #1]
   10282:	b936      	cbnz	r6, 10292 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10284:	e003      	b.n	1028e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10286:	201a      	movs	r0, #26
   10288:	b006      	add	sp, #24
   1028a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1028e:	7820      	ldrb	r0, [r4, #0]
   10290:	b108      	cbz	r0, 10296 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10292:	253a      	movs	r5, #58	; 0x3a
   10294:	e012      	b.n	102bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10296:	f884 9000 	strb.w	r9, [r4]
   1029a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1029e:	70a0      	strb	r0, [r4, #2]
   102a0:	f89d 1010 	ldrb.w	r1, [sp, #16]
   102a4:	70e1      	strb	r1, [r4, #3]
   102a6:	f88d 0000 	strb.w	r0, [sp]
   102aa:	f88d 1001 	strb.w	r1, [sp, #1]
   102ae:	88b8      	ldrh	r0, [r7, #4]
   102b0:	f8ad 0002 	strh.w	r0, [sp, #2]
   102b4:	4669      	mov	r1, sp
   102b6:	4640      	mov	r0, r8
   102b8:	f7fd fd20 	bl	dcfc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   102bc:	2000      	movs	r0, #0
   102be:	7060      	strb	r0, [r4, #1]
   102c0:	4628      	mov	r0, r5
   102c2:	e7e1      	b.n	10288 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

000102c4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   102c4:	2008      	movs	r0, #8
   102c6:	f7f7 ba4f 	b.w	7768 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

000102ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   102ca:	b510      	push	{r4, lr}
   102cc:	f7fd fba9 	bl	da22 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   102d0:	f7f2 fbce 	bl	2a70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   102d4:	f7f7 fa6a 	bl	77ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   102d8:	f7fe f813 	bl	e302 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   102dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102e0:	f7f6 bfd8 	b.w	7294 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

000102e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   102e4:	f7f5 b868 	b.w	53b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   102e8:	f44f 71a4 	mov.w	r1, #328	; 0x148
   102ec:	4288      	cmp	r0, r1
   102ee:	d303      	bcc.n	102f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   102f0:	f640 0148 	movw	r1, #2120	; 0x848
   102f4:	4288      	cmp	r0, r1
   102f6:	d300      	bcc.n	102fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   102f8:	4608      	mov	r0, r1
   102fa:	b280      	uxth	r0, r0
   102fc:	4770      	bx	lr
   102fe:	07c1      	lsls	r1, r0, #31
   10300:	d001      	beq.n	10306 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   10302:	2001      	movs	r0, #1
   10304:	4770      	bx	lr
   10306:	0780      	lsls	r0, r0, #30
   10308:	d501      	bpl.n	1030e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   1030a:	2002      	movs	r0, #2
   1030c:	4770      	bx	lr
   1030e:	2000      	movs	r0, #0
   10310:	4770      	bx	lr
   10312:	b510      	push	{r4, lr}
   10314:	2801      	cmp	r0, #1
   10316:	d006      	beq.n	10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10318:	2802      	cmp	r0, #2
   1031a:	d004      	beq.n	10326 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   1031c:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   10320:	2006      	movs	r0, #6
   10322:	f7f0 ff6b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10326:	bd10      	pop	{r4, pc}
   10328:	b510      	push	{r4, lr}
   1032a:	f7f6 ff31 	bl	7190 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   1032e:	b158      	cbz	r0, 10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10330:	f7f6 ffd0 	bl	72d4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10334:	4604      	mov	r4, r0
   10336:	f7fe fb50 	bl	e9da <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1033a:	b918      	cbnz	r0, 10344 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   1033c:	4620      	mov	r0, r4
   1033e:	f7fe fb42 	bl	e9c6 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10342:	b108      	cbz	r0, 10348 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10344:	2000      	movs	r0, #0
   10346:	bd10      	pop	{r4, pc}
   10348:	2001      	movs	r0, #1
   1034a:	bd10      	pop	{r4, pc}
   1034c:	b570      	push	{r4, r5, r6, lr}
   1034e:	460c      	mov	r4, r1
   10350:	4605      	mov	r5, r0
   10352:	b112      	cbz	r2, 1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10354:	291f      	cmp	r1, #31
   10356:	d80c      	bhi.n	10372 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10358:	e016      	b.n	10388 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   1035a:	f7f1 fc2d 	bl	1bb8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1035e:	42a0      	cmp	r0, r4
   10360:	d201      	bcs.n	10366 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   10362:	2007      	movs	r0, #7
   10364:	bd70      	pop	{r4, r5, r6, pc}
   10366:	4628      	mov	r0, r5
   10368:	f7fe fb35 	bl	e9d6 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1036c:	b118      	cbz	r0, 10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1036e:	2c1f      	cmp	r4, #31
   10370:	d901      	bls.n	10376 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10372:	2012      	movs	r0, #18
   10374:	bd70      	pop	{r4, r5, r6, pc}
   10376:	4628      	mov	r0, r5
   10378:	f7fe fb36 	bl	e9e8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   1037c:	b130      	cbz	r0, 1038c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   1037e:	4621      	mov	r1, r4
   10380:	4628      	mov	r0, r5
   10382:	f7fe faff 	bl	e984 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10386:	b118      	cbz	r0, 10390 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10388:	2000      	movs	r0, #0
   1038a:	bd70      	pop	{r4, r5, r6, pc}
   1038c:	2042      	movs	r0, #66	; 0x42
   1038e:	bd70      	pop	{r4, r5, r6, pc}
   10390:	2045      	movs	r0, #69	; 0x45
   10392:	bd70      	pop	{r4, r5, r6, pc}
   10394:	b510      	push	{r4, lr}
   10396:	4604      	mov	r4, r0
   10398:	7840      	ldrb	r0, [r0, #1]
   1039a:	06c1      	lsls	r1, r0, #27
   1039c:	d51c      	bpl.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1039e:	07c0      	lsls	r0, r0, #31
   103a0:	d00b      	beq.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103a2:	f7f7 f9b5 	bl	7710 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   103a6:	b1b8      	cbz	r0, 103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103a8:	7860      	ldrb	r0, [r4, #1]
   103aa:	06c1      	lsls	r1, r0, #27
   103ac:	d405      	bmi.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103ae:	0700      	lsls	r0, r0, #28
   103b0:	d503      	bpl.n	103ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   103b2:	7d20      	ldrb	r0, [r4, #20]
   103b4:	2802      	cmp	r0, #2
   103b6:	d10f      	bne.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103b8:	e010      	b.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103ba:	7d20      	ldrb	r0, [r4, #20]
   103bc:	2802      	cmp	r0, #2
   103be:	d001      	beq.n	103c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   103c0:	7ea0      	ldrb	r0, [r4, #26]
   103c2:	b948      	cbnz	r0, 103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   103c4:	7860      	ldrb	r0, [r4, #1]
   103c6:	0700      	lsls	r0, r0, #28
   103c8:	d408      	bmi.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103ca:	f8d4 0005 	ldr.w	r0, [r4, #5]
   103ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   103d2:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   103d6:	d201      	bcs.n	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   103d8:	2011      	movs	r0, #17
   103da:	bd10      	pop	{r4, pc}
   103dc:	2000      	movs	r0, #0
   103de:	bd10      	pop	{r4, pc}
   103e0:	b538      	push	{r3, r4, r5, lr}
   103e2:	4604      	mov	r4, r0
   103e4:	7800      	ldrb	r0, [r0, #0]
   103e6:	28ef      	cmp	r0, #239	; 0xef
   103e8:	d843      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103ea:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   103ee:	f8ad 0000 	strh.w	r0, [sp]
   103f2:	9800      	ldr	r0, [sp, #0]
   103f4:	f000 f918 	bl	10628 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   103f8:	b3a0      	cbz	r0, 10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   103fa:	7861      	ldrb	r1, [r4, #1]
   103fc:	0708      	lsls	r0, r1, #28
   103fe:	d40b      	bmi.n	10418 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   10400:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10404:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10408:	0a02      	lsrs	r2, r0, #8
   1040a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1040e:	d830      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10410:	2220      	movs	r2, #32
   10412:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10416:	d82c      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10418:	7a60      	ldrb	r0, [r4, #9]
   1041a:	b318      	cbz	r0, 10464 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   1041c:	2807      	cmp	r0, #7
   1041e:	d828      	bhi.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10420:	7aa0      	ldrb	r0, [r4, #10]
   10422:	b128      	cbz	r0, 10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10424:	2801      	cmp	r0, #1
   10426:	d003      	beq.n	10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10428:	2802      	cmp	r0, #2
   1042a:	d001      	beq.n	10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1042c:	2803      	cmp	r0, #3
   1042e:	d120      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10430:	074a      	lsls	r2, r1, #29
   10432:	d403      	bmi.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10434:	2802      	cmp	r0, #2
   10436:	d001      	beq.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10438:	2803      	cmp	r0, #3
   1043a:	d105      	bne.n	10448 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   1043c:	7ae0      	ldrb	r0, [r4, #11]
   1043e:	b108      	cbz	r0, 10444 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   10440:	2801      	cmp	r0, #1
   10442:	d116      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10444:	0748      	lsls	r0, r1, #29
   10446:	d407      	bmi.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10448:	7ca0      	ldrb	r0, [r4, #18]
   1044a:	b128      	cbz	r0, 10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1044c:	2801      	cmp	r0, #1
   1044e:	d003      	beq.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10450:	2802      	cmp	r0, #2
   10452:	d001      	beq.n	10458 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10454:	2803      	cmp	r0, #3
   10456:	d10c      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10458:	06c8      	lsls	r0, r1, #27
   1045a:	7d20      	ldrb	r0, [r4, #20]
   1045c:	d503      	bpl.n	10466 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1045e:	2801      	cmp	r0, #1
   10460:	d107      	bne.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10462:	e002      	b.n	1046a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   10464:	e005      	b.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10466:	2802      	cmp	r0, #2
   10468:	d003      	beq.n	10472 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1046a:	7e20      	ldrb	r0, [r4, #24]
   1046c:	b118      	cbz	r0, 10476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1046e:	2801      	cmp	r0, #1
   10470:	d001      	beq.n	10476 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10472:	2012      	movs	r0, #18
   10474:	bd38      	pop	{r3, r4, r5, pc}
   10476:	2000      	movs	r0, #0
   10478:	bd38      	pop	{r3, r4, r5, pc}
   1047a:	b510      	push	{r4, lr}
   1047c:	0004      	movs	r4, r0
   1047e:	d005      	beq.n	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10480:	f7f7 f984 	bl	778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10484:	4384      	bics	r4, r0
   10486:	d001      	beq.n	1048c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10488:	2000      	movs	r0, #0
   1048a:	bd10      	pop	{r4, pc}
   1048c:	2001      	movs	r0, #1
   1048e:	bd10      	pop	{r4, pc}
   10490:	28fb      	cmp	r0, #251	; 0xfb
   10492:	d803      	bhi.n	1049c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   10494:	f640 0048 	movw	r0, #2120	; 0x848
   10498:	4281      	cmp	r1, r0
   1049a:	d901      	bls.n	104a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   1049c:	2011      	movs	r0, #17
   1049e:	4770      	bx	lr
   104a0:	2000      	movs	r0, #0
   104a2:	4770      	bx	lr
   104a4:	381b      	subs	r0, #27
   104a6:	28e1      	cmp	r0, #225	; 0xe1
   104a8:	d206      	bcs.n	104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104aa:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   104ae:	d303      	bcc.n	104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   104b0:	f244 2090 	movw	r0, #17040	; 0x4290
   104b4:	4281      	cmp	r1, r0
   104b6:	d901      	bls.n	104bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   104b8:	2012      	movs	r0, #18
   104ba:	4770      	bx	lr
   104bc:	2000      	movs	r0, #0
   104be:	4770      	bx	lr
   104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104c4:	4606      	mov	r6, r0
   104c6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   104ca:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   104ce:	4615      	mov	r5, r2
   104d0:	302c      	adds	r0, #44	; 0x2c
   104d2:	f7f4 fa47 	bl	4964 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   104d6:	4680      	mov	r8, r0
   104d8:	2102      	movs	r1, #2
   104da:	f7fd fbdf 	bl	dc9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104de:	4287      	cmp	r7, r0
   104e0:	d200      	bcs.n	104e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   104e2:	4638      	mov	r0, r7
   104e4:	4607      	mov	r7, r0
   104e6:	2102      	movs	r1, #2
   104e8:	4640      	mov	r0, r8
   104ea:	f7fd fbd7 	bl	dc9c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   104ee:	4284      	cmp	r4, r0
   104f0:	d200      	bcs.n	104f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   104f2:	4620      	mov	r0, r4
   104f4:	8831      	ldrh	r1, [r6, #0]
   104f6:	8029      	strh	r1, [r5, #0]
   104f8:	2f1b      	cmp	r7, #27
   104fa:	d913      	bls.n	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   104fc:	2ffb      	cmp	r7, #251	; 0xfb
   104fe:	d300      	bcc.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10500:	27fb      	movs	r7, #251	; 0xfb
   10502:	806f      	strh	r7, [r5, #2]
   10504:	281b      	cmp	r0, #27
   10506:	d90f      	bls.n	10528 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   10508:	28fb      	cmp	r0, #251	; 0xfb
   1050a:	d300      	bcc.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1050c:	20fb      	movs	r0, #251	; 0xfb
   1050e:	80e8      	strh	r0, [r5, #6]
   10510:	4640      	mov	r0, r8
   10512:	f7ff fee9 	bl	102e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10516:	80a8      	strh	r0, [r5, #4]
   10518:	4640      	mov	r0, r8
   1051a:	f7ff fee5 	bl	102e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1051e:	8128      	strh	r0, [r5, #8]
   10520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10524:	271b      	movs	r7, #27
   10526:	e7ec      	b.n	10502 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10528:	201b      	movs	r0, #27
   1052a:	e7f0      	b.n	1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   1052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10530:	7890      	ldrb	r0, [r2, #2]
   10532:	9e06      	ldr	r6, [sp, #24]
   10534:	461d      	mov	r5, r3
   10536:	4614      	mov	r4, r2
   10538:	b908      	cbnz	r0, 1053e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   1053a:	f7f7 f927 	bl	778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1053e:	78e4      	ldrb	r4, [r4, #3]
   10540:	4607      	mov	r7, r0
   10542:	b914      	cbnz	r4, 1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10544:	f7f7 f922 	bl	778c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10548:	4604      	mov	r4, r0
   1054a:	b16f      	cbz	r7, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1054c:	b164      	cbz	r4, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1054e:	4638      	mov	r0, r7
   10550:	f7ff fed5 	bl	102fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10554:	4620      	mov	r0, r4
   10556:	f7ff fed2 	bl	102fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1055a:	b12f      	cbz	r7, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1055c:	b124      	cbz	r4, 10568 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1055e:	702f      	strb	r7, [r5, #0]
   10560:	7034      	strb	r4, [r6, #0]
   10562:	2000      	movs	r0, #0
   10564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10568:	2009      	movs	r0, #9
   1056a:	e7fb      	b.n	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   1056c:	207f      	movs	r0, #127	; 0x7f
   1056e:	f000 b83c 	b.w	105ea <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   10572:	b508      	push	{r3, lr}
   10574:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10578:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   1057c:	f88d 0000 	strb.w	r0, [sp]
   10580:	9800      	ldr	r0, [sp, #0]
   10582:	9000      	str	r0, [sp, #0]
   10584:	f89d 0000 	ldrb.w	r0, [sp]
   10588:	b100      	cbz	r0, 1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   1058a:	2001      	movs	r0, #1
   1058c:	1e40      	subs	r0, r0, #1
   1058e:	4208      	tst	r0, r1
   10590:	d003      	beq.n	1059a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10592:	2904      	cmp	r1, #4
   10594:	d001      	beq.n	1059a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10596:	2001      	movs	r0, #1
   10598:	bd08      	pop	{r3, pc}
   1059a:	2000      	movs	r0, #0
   1059c:	bd08      	pop	{r3, pc}
   1059e:	b570      	push	{r4, r5, r6, lr}
   105a0:	4605      	mov	r5, r0
   105a2:	f7fe fa21 	bl	e9e8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105a6:	b170      	cbz	r0, 105c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   105a8:	4628      	mov	r0, r5
   105aa:	f7fe fbed 	bl	ed88 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   105ae:	2800      	cmp	r0, #0
   105b0:	d008      	beq.n	105c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   105b2:	4628      	mov	r0, r5
   105b4:	f7fe fbe5 	bl	ed82 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   105b8:	4604      	mov	r4, r0
   105ba:	4628      	mov	r0, r5
   105bc:	f7fe fbbb 	bl	ed36 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   105c0:	b118      	cbz	r0, 105ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   105c2:	200c      	movs	r0, #12
   105c4:	bd70      	pop	{r4, r5, r6, pc}
   105c6:	2042      	movs	r0, #66	; 0x42
   105c8:	bd70      	pop	{r4, r5, r6, pc}
   105ca:	b164      	cbz	r4, 105e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   105cc:	8820      	ldrh	r0, [r4, #0]
   105ce:	f7fd f9f5 	bl	d9bc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   105d2:	8820      	ldrh	r0, [r4, #0]
   105d4:	2100      	movs	r1, #0
   105d6:	f7f1 f897 	bl	1708 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   105da:	b120      	cbz	r0, 105e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   105dc:	f241 61ac 	movw	r1, #5804	; 0x16ac
   105e0:	2039      	movs	r0, #57	; 0x39
   105e2:	f7f0 fe0b 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   105e6:	2000      	movs	r0, #0
   105e8:	bd70      	pop	{r4, r5, r6, pc}
   105ea:	b508      	push	{r3, lr}
   105ec:	f640 1288 	movw	r2, #2440	; 0x988
   105f0:	2300      	movs	r3, #0
   105f2:	4669      	mov	r1, sp
   105f4:	f7fc f846 	bl	c684 <mpsl_fem_tx_power_split>
   105f8:	bd08      	pop	{r3, pc}
   105fa:	b530      	push	{r4, r5, lr}
   105fc:	f340 0400 	sbfx	r4, r0, #0, #1
   10600:	f340 0040 	sbfx	r0, r0, #1, #1
   10604:	1c40      	adds	r0, r0, #1
   10606:	9d03      	ldr	r5, [sp, #12]
   10608:	1c64      	adds	r4, r4, #1
   1060a:	d000      	beq.n	1060e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   1060c:	b119      	cbz	r1, 10616 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   1060e:	b100      	cbz	r0, 10612 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   10610:	b10a      	cbz	r2, 10616 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   10612:	b91c      	cbnz	r4, 1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   10614:	e001      	b.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10616:	2011      	movs	r0, #17
   10618:	bd30      	pop	{r4, r5, pc}
   1061a:	2100      	movs	r1, #0
   1061c:	7019      	strb	r1, [r3, #0]
   1061e:	b900      	cbnz	r0, 10622 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   10620:	2200      	movs	r2, #0
   10622:	702a      	strb	r2, [r5, #0]
   10624:	2000      	movs	r0, #0
   10626:	bd30      	pop	{r4, r5, pc}
   10628:	b2c0      	uxtb	r0, r0
   1062a:	06c1      	lsls	r1, r0, #27
   1062c:	d40c      	bmi.n	10648 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   1062e:	0681      	lsls	r1, r0, #26
   10630:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10634:	d503      	bpl.n	1063e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   10636:	b9d1      	cbnz	r1, 1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10638:	0781      	lsls	r1, r0, #30
   1063a:	d418      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1063c:	e001      	b.n	10642 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   1063e:	2900      	cmp	r1, #0
   10640:	d1fa      	bne.n	10638 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   10642:	0700      	lsls	r0, r0, #28
   10644:	d413      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10646:	e010      	b.n	1066a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10648:	0641      	lsls	r1, r0, #25
   1064a:	d410      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1064c:	0681      	lsls	r1, r0, #26
   1064e:	d40e      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10650:	07c1      	lsls	r1, r0, #31
   10652:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10656:	d004      	beq.n	10662 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10658:	2900      	cmp	r1, #0
   1065a:	db02      	blt.n	10662 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   1065c:	0740      	lsls	r0, r0, #29
   1065e:	d404      	bmi.n	1066a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10660:	e005      	b.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10662:	0701      	lsls	r1, r0, #28
   10664:	d403      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10666:	0740      	lsls	r0, r0, #29
   10668:	d401      	bmi.n	1066e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1066a:	2001      	movs	r0, #1
   1066c:	4770      	bx	lr
   1066e:	2000      	movs	r0, #0
   10670:	4770      	bx	lr
   10672:	b510      	push	{r4, lr}
   10674:	f7f4 f95a 	bl	492c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10678:	b108      	cbz	r0, 1067e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   1067a:	21fd      	movs	r1, #253	; 0xfd
   1067c:	e004      	b.n	10688 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   1067e:	f7f3 faab 	bl	3bd8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10682:	b120      	cbz	r0, 1068e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   10684:	f44f 7181 	mov.w	r1, #258	; 0x102
   10688:	2001      	movs	r0, #1
   1068a:	f7f0 fdb7 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1068e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10692:	2001      	movs	r0, #1
   10694:	f7fc bfc4 	b.w	d620 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10698:	6802      	ldr	r2, [r0, #0]
   1069a:	b912      	cbnz	r2, 106a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   1069c:	6001      	str	r1, [r0, #0]
   1069e:	4770      	bx	lr
   106a0:	4602      	mov	r2, r0
   106a2:	6850      	ldr	r0, [r2, #4]
   106a4:	b108      	cbz	r0, 106aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   106a6:	428a      	cmp	r2, r1
   106a8:	d1fa      	bne.n	106a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   106aa:	428a      	cmp	r2, r1
   106ac:	d0f7      	beq.n	1069e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   106ae:	6051      	str	r1, [r2, #4]
   106b0:	4770      	bx	lr
   106b2:	b510      	push	{r4, lr}
   106b4:	4604      	mov	r4, r0
   106b6:	e002      	b.n	106be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   106b8:	6820      	ldr	r0, [r4, #0]
   106ba:	4780      	blx	r0
   106bc:	6864      	ldr	r4, [r4, #4]
   106be:	2c00      	cmp	r4, #0
   106c0:	d1fa      	bne.n	106b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   106c2:	bd10      	pop	{r4, pc}
   106c4:	b510      	push	{r4, lr}
   106c6:	2000      	movs	r0, #0
   106c8:	f7fc ffaa 	bl	d620 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   106cc:	f7f1 f97e 	bl	19cc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   106d0:	f7f1 fc14 	bl	1efc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   106d4:	f7f1 fda2 	bl	221c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   106d8:	2800      	cmp	r0, #0
   106da:	d003      	beq.n	106e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   106dc:	21df      	movs	r1, #223	; 0xdf
   106de:	2001      	movs	r0, #1
   106e0:	f7f0 fd8c 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106e4:	bd10      	pop	{r4, pc}
   106e6:	b510      	push	{r4, lr}
   106e8:	f7ff ffc3 	bl	10672 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   106ec:	f7fe fe36 	bl	f35c <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   106f0:	2800      	cmp	r0, #0
   106f2:	d004      	beq.n	106fe <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   106f4:	f240 1117 	movw	r1, #279	; 0x117
   106f8:	2001      	movs	r0, #1
   106fa:	f7f0 fd7f 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106fe:	bd10      	pop	{r4, pc}

00010700 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10700:	f7fb bcf4 	b.w	c0ec <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10704:	000b0001 	.word	0x000b0001
   10708:	000a0002 	.word	0x000a0002
   1070c:	00090005 	.word	0x00090005
   10710:	0008000a 	.word	0x0008000a
   10714:	00070014 	.word	0x00070014
   10718:	0006001e 	.word	0x0006001e
   1071c:	00050032 	.word	0x00050032
   10720:	0004004b 	.word	0x0004004b
   10724:	00030064 	.word	0x00030064
   10728:	00020096 	.word	0x00020096
   1072c:	000100fa 	.word	0x000100fa
   10730:	000001f4 	.word	0x000001f4

00010734 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10734:	b518      	push	{r3, r4, lr}
   10736:	2200      	movs	r2, #0
   10738:	704a      	strb	r2, [r1, #1]
   1073a:	2314      	movs	r3, #20
   1073c:	700b      	strb	r3, [r1, #0]
   1073e:	7202      	strb	r2, [r0, #8]
   10740:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10744:	604c      	str	r4, [r1, #4]
   10746:	89c3      	ldrh	r3, [r0, #14]
   10748:	810b      	strh	r3, [r1, #8]
   1074a:	7a03      	ldrb	r3, [r0, #8]
   1074c:	f88d 3000 	strb.w	r3, [sp]
   10750:	9b00      	ldr	r3, [sp, #0]
   10752:	9300      	str	r3, [sp, #0]
   10754:	f89d 3000 	ldrb.w	r3, [sp]
   10758:	2b00      	cmp	r3, #0
   1075a:	d1f0      	bne.n	1073e <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   1075c:	bd18      	pop	{r3, r4, pc}

0001075e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   1075e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10760:	460d      	mov	r5, r1
   10762:	4604      	mov	r4, r0
   10764:	f7f2 fc6a 	bl	303c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   10768:	2600      	movs	r6, #0
   1076a:	b1f8      	cbz	r0, 107ac <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   1076c:	f5a4 70c6 	sub.w	r0, r4, #396	; 0x18c
   10770:	7226      	strb	r6, [r4, #8]
   10772:	8800      	ldrh	r0, [r0, #0]
   10774:	f8ad 0000 	strh.w	r0, [sp]
   10778:	a902      	add	r1, sp, #8
   1077a:	f7fd f9ef 	bl	db5c <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1077e:	b108      	cbz	r0, 10784 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10780:	2124      	movs	r1, #36	; 0x24
   10782:	e010      	b.n	107a6 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   10784:	9803      	ldr	r0, [sp, #12]
   10786:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   1078a:	f88d 1002 	strb.w	r1, [sp, #2]
   1078e:	7841      	ldrb	r1, [r0, #1]
   10790:	f88d 1003 	strb.w	r1, [sp, #3]
   10794:	8840      	ldrh	r0, [r0, #2]
   10796:	f8ad 0004 	strh.w	r0, [sp, #4]
   1079a:	2102      	movs	r1, #2
   1079c:	4668      	mov	r0, sp
   1079e:	f7ff fd31 	bl	10204 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   107a2:	b118      	cbz	r0, 107ac <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   107a4:	213a      	movs	r1, #58	; 0x3a
   107a6:	207e      	movs	r0, #126	; 0x7e
   107a8:	f7f0 fd28 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107ac:	201c      	movs	r0, #28
   107ae:	7028      	strb	r0, [r5, #0]
   107b0:	706e      	strb	r6, [r5, #1]
   107b2:	f8d4 000a 	ldr.w	r0, [r4, #10]
   107b6:	6068      	str	r0, [r5, #4]
   107b8:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

000107ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   107ba:	b510      	push	{r4, lr}
   107bc:	f7f7 fb80 	bl	7ec0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   107c0:	f000 f81d 	bl	107fe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   107c4:	f7f7 f856 	bl	7874 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   107c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107cc:	f7f7 b950 	b.w	7a70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000107d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   107d0:	b510      	push	{r4, lr}
   107d2:	24c8      	movs	r4, #200	; 0xc8
   107d4:	1e64      	subs	r4, r4, #1
   107d6:	b2e4      	uxtb	r4, r4
   107d8:	f7f7 f86a 	bl	78b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   107dc:	2802      	cmp	r0, #2
   107de:	d003      	beq.n	107e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   107e0:	2801      	cmp	r0, #1
   107e2:	d000      	beq.n	107e6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   107e4:	2000      	movs	r0, #0
   107e6:	bd10      	pop	{r4, pc}
   107e8:	2c00      	cmp	r4, #0
   107ea:	d1f3      	bne.n	107d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   107ec:	21ca      	movs	r1, #202	; 0xca
   107ee:	203b      	movs	r0, #59	; 0x3b
   107f0:	f7f0 fd04 	bl	11fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107f4:	5840      	ldr	r0, [r0, r1]
   107f6:	2800      	cmp	r0, #0
   107f8:	d000      	beq.n	107fc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   107fa:	2001      	movs	r0, #1
   107fc:	4770      	bx	lr

000107fe <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   107fe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10802:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10806:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1080a:	f3bf 8f4f 	dsb	sy
   1080e:	f3bf 8f6f 	isb	sy
   10812:	f7f7 b9c7 	b.w	7ba4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10816:	2800      	cmp	r0, #0
   10818:	db09      	blt.n	1082e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1081a:	f000 021f 	and.w	r2, r0, #31
   1081e:	2101      	movs	r1, #1
   10820:	4091      	lsls	r1, r2
   10822:	0940      	lsrs	r0, r0, #5
   10824:	0080      	lsls	r0, r0, #2
   10826:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1082a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1082e:	4770      	bx	lr
   10830:	2800      	cmp	r0, #0
   10832:	db0d      	blt.n	10850 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10834:	f000 021f 	and.w	r2, r0, #31
   10838:	2101      	movs	r1, #1
   1083a:	4091      	lsls	r1, r2
   1083c:	0940      	lsrs	r0, r0, #5
   1083e:	0080      	lsls	r0, r0, #2
   10840:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10844:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10848:	f3bf 8f4f 	dsb	sy
   1084c:	f3bf 8f6f 	isb	sy
   10850:	4770      	bx	lr
   10852:	5840      	ldr	r0, [r0, r1]
   10854:	2800      	cmp	r0, #0
   10856:	d000      	beq.n	1085a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10858:	2001      	movs	r0, #1
   1085a:	4770      	bx	lr
   1085c:	5840      	ldr	r0, [r0, r1]
   1085e:	2800      	cmp	r0, #0
   10860:	d000      	beq.n	10864 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10862:	2001      	movs	r0, #1
   10864:	4770      	bx	lr

00010866 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10866:	b510      	push	{r4, lr}
   10868:	4604      	mov	r4, r0
   1086a:	4608      	mov	r0, r1
   1086c:	f7f7 fc4e 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10870:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10874:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10878:	fbb0 f0f1 	udiv	r0, r0, r1
   1087c:	1a20      	subs	r0, r4, r0
   1087e:	1e80      	subs	r0, r0, #2
   10880:	bd10      	pop	{r4, pc}

00010882 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10882:	b510      	push	{r4, lr}
   10884:	4604      	mov	r4, r0
   10886:	4608      	mov	r0, r1
   10888:	f7f7 fc40 	bl	810c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1088c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10890:	fbb0 f0f1 	udiv	r0, r0, r1
   10894:	1a20      	subs	r0, r4, r0
   10896:	bd10      	pop	{r4, pc}
   10898:	2804      	cmp	r0, #4
   1089a:	d202      	bcs.n	108a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   1089c:	f04f 0028 	mov.w	r0, #40	; 0x28
   108a0:	4770      	bx	lr
   108a2:	d102      	bne.n	108aa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   108a4:	f04f 0010 	mov.w	r0, #16
   108a8:	4770      	bx	lr
   108aa:	f04f 0000 	mov.w	r0, #0
   108ae:	4770      	bx	lr
   108b0:	2100      	movs	r1, #0
   108b2:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   108b6:	f800 1f24 	strb.w	r1, [r0, #36]!
   108ba:	7041      	strb	r1, [r0, #1]
   108bc:	4770      	bx	lr

000108be <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   108be:	b570      	push	{r4, r5, r6, lr}
   108c0:	f7f8 f9e4 	bl	8c8c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   108c4:	4605      	mov	r5, r0
   108c6:	2400      	movs	r4, #0
   108c8:	e006      	b.n	108d8 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   108ca:	4620      	mov	r0, r4
   108cc:	f7f8 f9e4 	bl	8c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   108d0:	f7ff ffee 	bl	108b0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   108d4:	1c64      	adds	r4, r4, #1
   108d6:	b2e4      	uxtb	r4, r4
   108d8:	42ac      	cmp	r4, r5
   108da:	d3f6      	bcc.n	108ca <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   108dc:	bd70      	pop	{r4, r5, r6, pc}

000108de <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   108de:	f7fa bdc1 	b.w	b464 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

000108e2 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   108e2:	b510      	push	{r4, lr}
   108e4:	2000      	movs	r0, #0
   108e6:	f7fb f8f7 	bl	bad8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   108ea:	6800      	ldr	r0, [r0, #0]
   108ec:	2800      	cmp	r0, #0
   108ee:	bf18      	it	ne
   108f0:	2001      	movne	r0, #1
   108f2:	bd10      	pop	{r4, pc}

000108f4 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   108f4:	b510      	push	{r4, lr}
   108f6:	f7fb f96f 	bl	bbd8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   108fa:	f7fa fc2d 	bl	b158 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   108fe:	f000 f802 	bl	10906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10902:	b280      	uxth	r0, r0
   10904:	bd10      	pop	{r4, pc}

00010906 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10906:	0a41      	lsrs	r1, r0, #9
   10908:	f643 5209 	movw	r2, #15625	; 0x3d09
   1090c:	4351      	muls	r1, r2
   1090e:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10912:	fb10 f002 	smulbb	r0, r0, r2
   10916:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1091a:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   1091e:	4770      	bx	lr
   10920:	2800      	cmp	r0, #0
   10922:	db09      	blt.n	10938 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10924:	f000 021f 	and.w	r2, r0, #31
   10928:	2101      	movs	r1, #1
   1092a:	4091      	lsls	r1, r2
   1092c:	0940      	lsrs	r0, r0, #5
   1092e:	0080      	lsls	r0, r0, #2
   10930:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10934:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10938:	4770      	bx	lr
   1093a:	2800      	cmp	r0, #0
   1093c:	db0d      	blt.n	1095a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   1093e:	f000 021f 	and.w	r2, r0, #31
   10942:	2101      	movs	r1, #1
   10944:	4091      	lsls	r1, r2
   10946:	0940      	lsrs	r0, r0, #5
   10948:	0080      	lsls	r0, r0, #2
   1094a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1094e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10952:	f3bf 8f4f 	dsb	sy
   10956:	f3bf 8f6f 	isb	sy
   1095a:	4770      	bx	lr
   1095c:	5840      	ldr	r0, [r0, r1]
   1095e:	2800      	cmp	r0, #0
   10960:	d000      	beq.n	10964 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10962:	2001      	movs	r0, #1
   10964:	4770      	bx	lr
   10966:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   1096a:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   1096e:	f002 0201 	and.w	r2, r2, #1
   10972:	03c0      	lsls	r0, r0, #15
   10974:	d503      	bpl.n	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10976:	428a      	cmp	r2, r1
   10978:	d101      	bne.n	1097e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   1097a:	2001      	movs	r0, #1
   1097c:	4770      	bx	lr
   1097e:	2000      	movs	r0, #0
   10980:	4770      	bx	lr

00010982 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10982:	b510      	push	{r4, lr}
   10984:	2101      	movs	r1, #1
   10986:	0788      	lsls	r0, r1, #30
   10988:	f7fb fc66 	bl	c258 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1098c:	2800      	cmp	r0, #0
   1098e:	d000      	beq.n	10992 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10990:	2001      	movs	r0, #1
   10992:	bd10      	pop	{r4, pc}

00010994 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10994:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10998:	2101      	movs	r1, #1
   1099a:	6001      	str	r1, [r0, #0]
   1099c:	4770      	bx	lr

0001099e <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   1099e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   109a2:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   109a6:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   109aa:	f002 0203 	and.w	r2, r2, #3
   109ae:	03c9      	lsls	r1, r1, #15
   109b0:	d503      	bpl.n	109ba <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   109b2:	4282      	cmp	r2, r0
   109b4:	d101      	bne.n	109ba <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   109b6:	2001      	movs	r0, #1
   109b8:	4770      	bx	lr
   109ba:	2000      	movs	r0, #0
   109bc:	4770      	bx	lr

000109be <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   109be:	b510      	push	{r4, lr}
   109c0:	2100      	movs	r1, #0
   109c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   109c6:	f7fb fc47 	bl	c258 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   109ca:	2800      	cmp	r0, #0
   109cc:	d000      	beq.n	109d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   109ce:	2001      	movs	r0, #1
   109d0:	bd10      	pop	{r4, pc}
   109d2:	2800      	cmp	r0, #0
   109d4:	db09      	blt.n	109ea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   109d6:	f000 021f 	and.w	r2, r0, #31
   109da:	2101      	movs	r1, #1
   109dc:	4091      	lsls	r1, r2
   109de:	0940      	lsrs	r0, r0, #5
   109e0:	0080      	lsls	r0, r0, #2
   109e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109e6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109ea:	4770      	bx	lr
   109ec:	2800      	cmp	r0, #0
   109ee:	db0d      	blt.n	10a0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   109f0:	f000 021f 	and.w	r2, r0, #31
   109f4:	2101      	movs	r1, #1
   109f6:	4091      	lsls	r1, r2
   109f8:	0940      	lsrs	r0, r0, #5
   109fa:	0080      	lsls	r0, r0, #2
   109fc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a00:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10a04:	f3bf 8f4f 	dsb	sy
   10a08:	f3bf 8f6f 	isb	sy
   10a0c:	4770      	bx	lr
   10a0e:	1000      	.short	0x1000
   10a10:	00fa0002 	.word	0x00fa0002
   10a14:	f18c0000 	.word	0xf18c0000
   10a18:	4134cc9e 	.word	0x4134cc9e
   10a1c:	f70ea7d7 	.word	0xf70ea7d7
   10a20:	2bbb1459 	.word	0x2bbb1459
   10a24:	bb7f67d7 	.word	0xbb7f67d7
   10a28:	ebbe      	.short	0xebbe
   10a2a:	2800      	cmp	r0, #0
   10a2c:	db09      	blt.n	10a42 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10a2e:	f000 021f 	and.w	r2, r0, #31
   10a32:	2101      	movs	r1, #1
   10a34:	4091      	lsls	r1, r2
   10a36:	0940      	lsrs	r0, r0, #5
   10a38:	0080      	lsls	r0, r0, #2
   10a3a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a3e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10a42:	4770      	bx	lr

00010a44 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10a44:	f3ef 8110 	mrs	r1, PRIMASK
   10a48:	b672      	cpsid	i
   10a4a:	7802      	ldrb	r2, [r0, #0]
   10a4c:	2a01      	cmp	r2, #1
   10a4e:	d001      	beq.n	10a54 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10a50:	2201      	movs	r2, #1
   10a52:	e000      	b.n	10a56 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10a54:	2200      	movs	r2, #0
   10a56:	2301      	movs	r3, #1
   10a58:	7003      	strb	r3, [r0, #0]
   10a5a:	b901      	cbnz	r1, 10a5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10a5c:	b662      	cpsie	i
   10a5e:	b10a      	cbz	r2, 10a64 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10a60:	2000      	movs	r0, #0
   10a62:	4770      	bx	lr
   10a64:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10a68:	4770      	bx	lr

00010a6a <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10a6a:	2100      	movs	r1, #0
   10a6c:	7001      	strb	r1, [r0, #0]
   10a6e:	4608      	mov	r0, r1
   10a70:	4770      	bx	lr

00010a72 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10a72:	f3ef 8110 	mrs	r1, PRIMASK
   10a76:	b672      	cpsid	i
   10a78:	2200      	movs	r2, #0
   10a7a:	7002      	strb	r2, [r0, #0]
   10a7c:	b901      	cbnz	r1, 10a80 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10a7e:	b662      	cpsie	i
   10a80:	2000      	movs	r0, #0
   10a82:	4770      	bx	lr

00010a84 <mpsl_low_priority_process>:
   10a84:	f7fb bd3e 	b.w	c504 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010a88 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10a88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10a8c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10a90:	280f      	cmp	r0, #15
   10a92:	d001      	beq.n	10a98 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10a94:	2000      	movs	r0, #0
   10a96:	4770      	bx	lr
   10a98:	2001      	movs	r0, #1
   10a9a:	4770      	bx	lr

00010a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10a9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10aa0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10aa4:	280a      	cmp	r0, #10
   10aa6:	d001      	beq.n	10aac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10aa8:	2000      	movs	r0, #0
   10aaa:	4770      	bx	lr
   10aac:	2001      	movs	r0, #1
   10aae:	4770      	bx	lr

00010ab0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10ab0:	b500      	push	{lr}
   10ab2:	f7ff fff3 	bl	10a9c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10ab6:	b120      	cbz	r0, 10ac2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10ab8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10abc:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10ac0:	b108      	cbz	r0, 10ac6 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10ac2:	2000      	movs	r0, #0
   10ac4:	bd00      	pop	{pc}
   10ac6:	2001      	movs	r0, #1
   10ac8:	bd00      	pop	{pc}

00010aca <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10aca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10ace:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ad2:	280e      	cmp	r0, #14
   10ad4:	d001      	beq.n	10ada <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10ad6:	2000      	movs	r0, #0
   10ad8:	4770      	bx	lr
   10ada:	2001      	movs	r0, #1
   10adc:	4770      	bx	lr

00010ade <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10ade:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10ae2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ae6:	2810      	cmp	r0, #16
   10ae8:	d001      	beq.n	10aee <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10aea:	2000      	movs	r0, #0
   10aec:	4770      	bx	lr
   10aee:	2001      	movs	r0, #1
   10af0:	4770      	bx	lr

00010af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10af2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10af6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10afa:	2806      	cmp	r0, #6
   10afc:	d003      	beq.n	10b06 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10afe:	1c40      	adds	r0, r0, #1
   10b00:	d001      	beq.n	10b06 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b02:	2000      	movs	r0, #0
   10b04:	4770      	bx	lr
   10b06:	2001      	movs	r0, #1
   10b08:	4770      	bx	lr

00010b0a <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10b0a:	b500      	push	{lr}
   10b0c:	f7ff fff1 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10b10:	b148      	cbz	r0, 10b26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b12:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b16:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b1a:	2806      	cmp	r0, #6
   10b1c:	d303      	bcc.n	10b26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b1e:	1c40      	adds	r0, r0, #1
   10b20:	d001      	beq.n	10b26 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b22:	2001      	movs	r0, #1
   10b24:	bd00      	pop	{pc}
   10b26:	2000      	movs	r0, #0
   10b28:	bd00      	pop	{pc}

00010b2a <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10b2a:	b500      	push	{lr}
   10b2c:	f7ff ffe1 	bl	10af2 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10b30:	b138      	cbz	r0, 10b42 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10b32:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b36:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b3a:	2806      	cmp	r0, #6
   10b3c:	d303      	bcc.n	10b46 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10b3e:	1c40      	adds	r0, r0, #1
   10b40:	d001      	beq.n	10b46 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10b42:	2000      	movs	r0, #0
   10b44:	bd00      	pop	{pc}
   10b46:	2001      	movs	r0, #1
   10b48:	bd00      	pop	{pc}

00010b4a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10b4a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b4e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b52:	280d      	cmp	r0, #13
   10b54:	d001      	beq.n	10b5a <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10b56:	2000      	movs	r0, #0
   10b58:	4770      	bx	lr
   10b5a:	2001      	movs	r0, #1
   10b5c:	4770      	bx	lr

00010b5e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10b5e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b62:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b66:	2808      	cmp	r0, #8
   10b68:	d001      	beq.n	10b6e <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10b6a:	2000      	movs	r0, #0
   10b6c:	4770      	bx	lr
   10b6e:	2001      	movs	r0, #1
   10b70:	4770      	bx	lr

00010b72 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10b72:	f7fb bd01 	b.w	c578 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010b76 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10b76:	f7fb bcff 	b.w	c578 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010b7a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b7e:	428a      	cmp	r2, r1
   10b80:	d803      	bhi.n	10b8a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10b82:	2179      	movs	r1, #121	; 0x79
   10b84:	2096      	movs	r0, #150	; 0x96
   10b86:	f7fb fbbd 	bl	c304 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10b8a:	fab2 f382 	clz	r3, r2
   10b8e:	b13b      	cbz	r3, 10ba0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10b90:	4099      	lsls	r1, r3
   10b92:	f1c3 0420 	rsb	r4, r3, #32
   10b96:	fa20 f404 	lsr.w	r4, r0, r4
   10b9a:	4321      	orrs	r1, r4
   10b9c:	4098      	lsls	r0, r3
   10b9e:	409a      	lsls	r2, r3
   10ba0:	0c14      	lsrs	r4, r2, #16
   10ba2:	0c07      	lsrs	r7, r0, #16
   10ba4:	b286      	uxth	r6, r0
   10ba6:	fbb1 f0f4 	udiv	r0, r1, r4
   10baa:	fbb1 f3f4 	udiv	r3, r1, r4
   10bae:	fb04 1c10 	mls	ip, r4, r0, r1
   10bb2:	b295      	uxth	r5, r2
   10bb4:	fb03 f005 	mul.w	r0, r3, r5
   10bb8:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10bbc:	4560      	cmp	r0, ip
   10bbe:	d907      	bls.n	10bd0 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10bc0:	eba0 000c 	sub.w	r0, r0, ip
   10bc4:	4290      	cmp	r0, r2
   10bc6:	d901      	bls.n	10bcc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10bc8:	2002      	movs	r0, #2
   10bca:	e000      	b.n	10bce <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10bcc:	2001      	movs	r0, #1
   10bce:	1a1b      	subs	r3, r3, r0
   10bd0:	0409      	lsls	r1, r1, #16
   10bd2:	0418      	lsls	r0, r3, #16
   10bd4:	19c9      	adds	r1, r1, r7
   10bd6:	fba3 3702 	umull	r3, r7, r3, r2
   10bda:	1acf      	subs	r7, r1, r3
   10bdc:	fbb7 f1f4 	udiv	r1, r7, r4
   10be0:	fbb7 f3f4 	udiv	r3, r7, r4
   10be4:	fb04 7413 	mls	r4, r4, r3, r7
   10be8:	fb01 f305 	mul.w	r3, r1, r5
   10bec:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10bf0:	42a3      	cmp	r3, r4
   10bf2:	d906      	bls.n	10c02 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10bf4:	1b1b      	subs	r3, r3, r4
   10bf6:	4293      	cmp	r3, r2
   10bf8:	d901      	bls.n	10bfe <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10bfa:	2202      	movs	r2, #2
   10bfc:	e000      	b.n	10c00 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10bfe:	2201      	movs	r2, #1
   10c00:	1a89      	subs	r1, r1, r2
   10c02:	4308      	orrs	r0, r1
   10c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010c08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10c08:	b4f0      	push	{r4, r5, r6, r7}
   10c0a:	ea80 0c01 	eor.w	ip, r0, r1
   10c0e:	4603      	mov	r3, r0
   10c10:	f01c 0f03 	tst.w	ip, #3
   10c14:	d13c      	bne.n	10c90 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10c16:	f013 0f03 	tst.w	r3, #3
   10c1a:	d00b      	beq.n	10c34 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10c1c:	2a00      	cmp	r2, #0
   10c1e:	bf04      	itt	eq
   10c20:	bcf0      	popeq	{r4, r5, r6, r7}
   10c22:	4770      	bxeq	lr
   10c24:	f811 cb01 	ldrb.w	ip, [r1], #1
   10c28:	f803 cb01 	strb.w	ip, [r3], #1
   10c2c:	1e52      	subs	r2, r2, #1
   10c2e:	f013 0f03 	tst.w	r3, #3
   10c32:	d1f3      	bne.n	10c1c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10c34:	2a03      	cmp	r2, #3
   10c36:	d94f      	bls.n	10cd8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10c3c:	d24c      	bcs.n	10cd8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10c3e:	f1c2 0c00 	rsb	ip, r2, #0
   10c42:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10c46:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10c4a:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10c4e:	f1cc 0c00 	rsb	ip, ip, #0
   10c52:	f1bc 0f00 	cmp.w	ip, #0
   10c56:	dd1b      	ble.n	10c90 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10c58:	1f0d      	subs	r5, r1, #4
   10c5a:	1f1c      	subs	r4, r3, #4
   10c5c:	f01c 0f01 	tst.w	ip, #1
   10c60:	d003      	beq.n	10c6a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10c62:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10c66:	f844 6f04 	str.w	r6, [r4, #4]!
   10c6a:	ea5f 066c 	movs.w	r6, ip, asr #1
   10c6e:	d007      	beq.n	10c80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10c70:	686f      	ldr	r7, [r5, #4]
   10c72:	6067      	str	r7, [r4, #4]
   10c74:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10c78:	f844 7f08 	str.w	r7, [r4, #8]!
   10c7c:	1e76      	subs	r6, r6, #1
   10c7e:	d1f7      	bne.n	10c70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10c80:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10c84:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10c88:	f1cc 0c00 	rsb	ip, ip, #0
   10c8c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10c90:	2a00      	cmp	r2, #0
   10c92:	bf04      	itt	eq
   10c94:	bcf0      	popeq	{r4, r5, r6, r7}
   10c96:	4770      	bxeq	lr
   10c98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10c9c:	d226      	bcs.n	10cec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10c9e:	2a00      	cmp	r2, #0
   10ca0:	bfdc      	itt	le
   10ca2:	bcf0      	pople	{r4, r5, r6, r7}
   10ca4:	4770      	bxle	lr
   10ca6:	1e49      	subs	r1, r1, #1
   10ca8:	1e5b      	subs	r3, r3, #1
   10caa:	f012 0f01 	tst.w	r2, #1
   10cae:	d003      	beq.n	10cb8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10cb0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10cb4:	f803 cf01 	strb.w	ip, [r3, #1]!
   10cb8:	1052      	asrs	r2, r2, #1
   10cba:	bf04      	itt	eq
   10cbc:	bcf0      	popeq	{r4, r5, r6, r7}
   10cbe:	4770      	bxeq	lr
   10cc0:	f891 c001 	ldrb.w	ip, [r1, #1]
   10cc4:	f883 c001 	strb.w	ip, [r3, #1]
   10cc8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10ccc:	f803 cf02 	strb.w	ip, [r3, #2]!
   10cd0:	1e52      	subs	r2, r2, #1
   10cd2:	d1f5      	bne.n	10cc0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10cd4:	bcf0      	pop	{r4, r5, r6, r7}
   10cd6:	4770      	bx	lr
   10cd8:	2a04      	cmp	r2, #4
   10cda:	d3d9      	bcc.n	10c90 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10cdc:	f851 cb04 	ldr.w	ip, [r1], #4
   10ce0:	1f12      	subs	r2, r2, #4
   10ce2:	f843 cb04 	str.w	ip, [r3], #4
   10ce6:	2a04      	cmp	r2, #4
   10ce8:	d2f8      	bcs.n	10cdc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10cea:	e7d1      	b.n	10c90 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10cec:	f811 cb01 	ldrb.w	ip, [r1], #1
   10cf0:	f803 cb01 	strb.w	ip, [r3], #1
   10cf4:	1e52      	subs	r2, r2, #1
   10cf6:	d1f9      	bne.n	10cec <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10cf8:	bcf0      	pop	{r4, r5, r6, r7}
   10cfa:	4770      	bx	lr

00010cfc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10cfc:	b470      	push	{r4, r5, r6}
   10cfe:	4603      	mov	r3, r0
   10d00:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10d04:	f010 0f03 	tst.w	r0, #3
   10d08:	d009      	beq.n	10d1e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10d0a:	2a00      	cmp	r2, #0
   10d0c:	bf04      	itt	eq
   10d0e:	bc70      	popeq	{r4, r5, r6}
   10d10:	4770      	bxeq	lr
   10d12:	f803 cb01 	strb.w	ip, [r3], #1
   10d16:	1e52      	subs	r2, r2, #1
   10d18:	f013 0f03 	tst.w	r3, #3
   10d1c:	d1f5      	bne.n	10d0a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10d1e:	b2c9      	uxtb	r1, r1
   10d20:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10d24:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10d28:	2a03      	cmp	r2, #3
   10d2a:	d939      	bls.n	10da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10d2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d30:	d236      	bcs.n	10da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10d32:	4251      	negs	r1, r2
   10d34:	17cc      	asrs	r4, r1, #31
   10d36:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10d3a:	1089      	asrs	r1, r1, #2
   10d3c:	424e      	negs	r6, r1
   10d3e:	2e00      	cmp	r6, #0
   10d40:	dd11      	ble.n	10d66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10d42:	1f19      	subs	r1, r3, #4
   10d44:	f016 0f01 	tst.w	r6, #1
   10d48:	bf18      	it	ne
   10d4a:	f841 5f04 	strne.w	r5, [r1, #4]!
   10d4e:	1074      	asrs	r4, r6, #1
   10d50:	d004      	beq.n	10d5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10d52:	604d      	str	r5, [r1, #4]
   10d54:	f841 5f08 	str.w	r5, [r1, #8]!
   10d58:	1e64      	subs	r4, r4, #1
   10d5a:	d1fa      	bne.n	10d52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10d5c:	4271      	negs	r1, r6
   10d5e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10d62:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10d66:	2a00      	cmp	r2, #0
   10d68:	bf04      	itt	eq
   10d6a:	bc70      	popeq	{r4, r5, r6}
   10d6c:	4770      	bxeq	lr
   10d6e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d72:	d21d      	bcs.n	10db0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10d74:	2a00      	cmp	r2, #0
   10d76:	bfdc      	itt	le
   10d78:	bc70      	pople	{r4, r5, r6}
   10d7a:	4770      	bxle	lr
   10d7c:	1e59      	subs	r1, r3, #1
   10d7e:	f012 0f01 	tst.w	r2, #1
   10d82:	bf18      	it	ne
   10d84:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10d88:	1052      	asrs	r2, r2, #1
   10d8a:	bf04      	itt	eq
   10d8c:	bc70      	popeq	{r4, r5, r6}
   10d8e:	4770      	bxeq	lr
   10d90:	f881 c001 	strb.w	ip, [r1, #1]
   10d94:	f801 cf02 	strb.w	ip, [r1, #2]!
   10d98:	1e52      	subs	r2, r2, #1
   10d9a:	d1f9      	bne.n	10d90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10d9c:	bc70      	pop	{r4, r5, r6}
   10d9e:	4770      	bx	lr
   10da0:	2a04      	cmp	r2, #4
   10da2:	d3e0      	bcc.n	10d66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10da4:	1f12      	subs	r2, r2, #4
   10da6:	f843 5b04 	str.w	r5, [r3], #4
   10daa:	2a04      	cmp	r2, #4
   10dac:	d2fa      	bcs.n	10da4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10dae:	e7da      	b.n	10d66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10db0:	f803 cb01 	strb.w	ip, [r3], #1
   10db4:	1e52      	subs	r2, r2, #1
   10db6:	d1fb      	bne.n	10db0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10db8:	bc70      	pop	{r4, r5, r6}
   10dba:	4770      	bx	lr
   10dbc:	f04f 30ff 	mov.w	r0, #4294967295
   10dc0:	4770      	bx	lr
   10dc2:	2000      	movs	r0, #0
   10dc4:	4770      	bx	lr
   10dc6:	2000      	movs	r0, #0
   10dc8:	4770      	bx	lr
   10dca:	f04f 30ff 	mov.w	r0, #4294967295
   10dce:	4770      	bx	lr
   10dd0:	4770      	bx	lr
   10dd2:	4770      	bx	lr
   10dd4:	2000      	movs	r0, #0
   10dd6:	4770      	bx	lr
   10dd8:	2100      	movs	r1, #0
   10dda:	7001      	strb	r1, [r0, #0]
   10ddc:	4770      	bx	lr
   10dde:	f04f 30ff 	mov.w	r0, #4294967295
   10de2:	4770      	bx	lr
   10de4:	f04f 30ff 	mov.w	r0, #4294967295
   10de8:	4770      	bx	lr
   10dea:	2100      	movs	r1, #0
   10dec:	7001      	strb	r1, [r0, #0]
   10dee:	4770      	bx	lr
   10df0:	f04f 30ff 	mov.w	r0, #4294967295
   10df4:	4770      	bx	lr
   10df6:	f04f 30ff 	mov.w	r0, #4294967295
   10dfa:	4770      	bx	lr
   10dfc:	7800      	ldrb	r0, [r0, #0]
   10dfe:	2800      	cmp	r0, #0
   10e00:	d001      	beq.n	10e06 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10e02:	f06f 0015 	mvn.w	r0, #21
   10e06:	4770      	bx	lr
   10e08:	2000      	movs	r0, #0
   10e0a:	4770      	bx	lr
   10e0c:	2200      	movs	r2, #0
   10e0e:	f000 b802 	b.w	10e16 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010e12 <mpsl_fem_init>:
   10e12:	f7f7 bea9 	b.w	8b68 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010e16 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10e16:	b570      	push	{r4, r5, r6, lr}
   10e18:	4614      	mov	r4, r2
   10e1a:	460d      	mov	r5, r1
   10e1c:	1b00      	subs	r0, r0, r4
   10e1e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10e22:	4288      	cmp	r0, r1
   10e24:	da01      	bge.n	10e2a <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10e26:	4608      	mov	r0, r1
   10e28:	e002      	b.n	10e30 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10e2a:	287f      	cmp	r0, #127	; 0x7f
   10e2c:	dd00      	ble.n	10e30 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10e2e:	207f      	movs	r0, #127	; 0x7f
   10e30:	4619      	mov	r1, r3
   10e32:	b240      	sxtb	r0, r0
   10e34:	f7f7 fecc 	bl	8bd0 <mpsl_tx_power_radio_supported_power_adjust>
   10e38:	7028      	strb	r0, [r5, #0]
   10e3a:	706c      	strb	r4, [r5, #1]
   10e3c:	2100      	movs	r1, #0
   10e3e:	4420      	add	r0, r4
   10e40:	70a9      	strb	r1, [r5, #2]
   10e42:	b240      	sxtb	r0, r0
   10e44:	bd70      	pop	{r4, r5, r6, pc}
   10e46:	080c      	.short	0x080c
   10e48:	010d1702 	.word	0x010d1702
   10e4c:	09090201 	.word	0x09090201
   10e50:	02060101 	.word	0x02060101
   10e54:	03181809 	.word	0x03181809
   10e58:	09090101 	.word	0x09090101
   10e5c:	03050303 	.word	0x03050303
   10e60:	02230102 	.word	0x02230102
   10e64:	10092402 	.word	0x10092402
   10e68:	05050404 	.word	0x05050404
   10e6c:	0b040b0b 	.word	0x0b040b0b
   10e70:	2b          	.byte	0x2b
   10e71:	d8          	.byte	0xd8
   10e72:	f0ec      	.short	0xf0ec
   10e74:	00fcf8f4 	.word	0x00fcf8f4
   10e78:	05040302 	.word	0x05040302
   10e7c:	00080706 	.word	0x00080706
	...
   10e90:	01000000 	.word	0x01000000
   10e94:	02010101 	.word	0x02010101
   10e98:	03020202 	.word	0x03020202
   10e9c:	04030303 	.word	0x04030303
   10ea0:	05040404 	.word	0x05040404
   10ea4:	06050505 	.word	0x06050505
   10ea8:	09080706 	.word	0x09080706
   10eac:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   10ec4:	01010101 	.word	0x01010101
   10ec8:	02020202 	.word	0x02020202
   10ecc:	03030303 	.word	0x03030303
   10ed0:	04040404 	.word	0x04040404
   10ed4:	05050505 	.word	0x05050505
   10ed8:	08060606 	.word	0x08060606
   10edc:	00000009 	.word	0x00000009

00010ee0 <app_button_cb>:
}

static bool app_button_cb(void)
{
	return app_button_state;
}
   10ee0:	4b01      	ldr	r3, [pc, #4]	; (10ee8 <app_button_cb+0x8>)
   10ee2:	7818      	ldrb	r0, [r3, #0]
   10ee4:	4770      	bx	lr
   10ee6:	bf00      	nop
   10ee8:	20004558 	.word	0x20004558

00010eec <on_disconnected>:
		LOG_INF("PHY updated. New PHY: Long Range");
	}
}

static void on_disconnected(struct bt_conn *conn, uint8_t reason)
{
   10eec:	b508      	push	{r3, lr}
	printk("Disconnected (reason %u)\n", reason);
   10eee:	4805      	ldr	r0, [pc, #20]	; (10f04 <on_disconnected+0x18>)
   10ef0:	f010 feca 	bl	21c88 <printk>

	bt_connected = false;
   10ef4:	4b04      	ldr	r3, [pc, #16]	; (10f08 <on_disconnected+0x1c>)
   10ef6:	2200      	movs	r2, #0
   10ef8:	701a      	strb	r2, [r3, #0]


	dk_set_led_off(CON_STATUS_LED);
}
   10efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	dk_set_led_off(CON_STATUS_LED);
   10efe:	2001      	movs	r0, #1
   10f00:	f013 bf73 	b.w	24dea <dk_set_led_off>
   10f04:	0002699c 	.word	0x0002699c
   10f08:	20004559 	.word	0x20004559

00010f0c <button_changed.part.0>:
static void button_changed(uint32_t button_state, uint32_t has_changed)
   10f0c:	b5b0      	push	{r4, r5, r7, lr}
		err = joybus_send_button_state_indicate(user_button_state);
   10f0e:	f000 0501 	and.w	r5, r0, #1
static void button_changed(uint32_t button_state, uint32_t has_changed)
   10f12:	af00      	add	r7, sp, #0
   10f14:	4604      	mov	r4, r0
		err = joybus_send_button_state_indicate(user_button_state);
   10f16:	4628      	mov	r0, r5
   10f18:	f000 fa1c 	bl	11354 <joybus_send_button_state_indicate>
		if(err){
   10f1c:	b190      	cbz	r0, 10f44 <button_changed.part.0+0x38>
			LOG_ERR("Failed to send button indication (err: %d)", err);
   10f1e:	466c      	mov	r4, sp
   10f20:	b088      	sub	sp, #32
   10f22:	466a      	mov	r2, sp
   10f24:	4b11      	ldr	r3, [pc, #68]	; (10f6c <button_changed.part.0+0x60>)
   10f26:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10f2a:	2303      	movs	r3, #3
   10f2c:	f842 3f10 	str.w	r3, [r2, #16]!
   10f30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		else LOG_INF("Sent Button %s Indication", (button_state ? "Pressed" : "Released"));
   10f34:	480e      	ldr	r0, [pc, #56]	; (10f70 <button_changed.part.0+0x64>)
   10f36:	f010 fe31 	bl	21b9c <z_log_msg_static_create.constprop.0>
		app_button_state = user_button_state ? true : false;
   10f3a:	4b0e      	ldr	r3, [pc, #56]	; (10f74 <button_changed.part.0+0x68>)
   10f3c:	46a5      	mov	sp, r4
   10f3e:	701d      	strb	r5, [r3, #0]
}
   10f40:	46bd      	mov	sp, r7
   10f42:	bdb0      	pop	{r4, r5, r7, pc}
		else LOG_INF("Sent Button %s Indication", (button_state ? "Pressed" : "Released"));
   10f44:	4a0c      	ldr	r2, [pc, #48]	; (10f78 <button_changed.part.0+0x6c>)
   10f46:	4b0d      	ldr	r3, [pc, #52]	; (10f7c <button_changed.part.0+0x70>)
   10f48:	2c00      	cmp	r4, #0
   10f4a:	bf18      	it	ne
   10f4c:	4613      	movne	r3, r2
   10f4e:	466c      	mov	r4, sp
   10f50:	b088      	sub	sp, #32
   10f52:	466a      	mov	r2, sp
   10f54:	490a      	ldr	r1, [pc, #40]	; (10f80 <button_changed.part.0+0x74>)
   10f56:	e9c2 1305 	strd	r1, r3, [r2, #20]
   10f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
   10f5e:	8393      	strh	r3, [r2, #28]
   10f60:	4b08      	ldr	r3, [pc, #32]	; (10f84 <button_changed.part.0+0x78>)
   10f62:	f842 3f10 	str.w	r3, [r2, #16]!
   10f66:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   10f6a:	e7e3      	b.n	10f34 <button_changed.part.0+0x28>
   10f6c:	000269c7 	.word	0x000269c7
   10f70:	00025f30 	.word	0x00025f30
   10f74:	20004558 	.word	0x20004558
   10f78:	000269b6 	.word	0x000269b6
   10f7c:	000269be 	.word	0x000269be
   10f80:	000269f2 	.word	0x000269f2
   10f84:	01000003 	.word	0x01000003

00010f88 <on_connected>:
{
   10f88:	b590      	push	{r4, r7, lr}
   10f8a:	b08d      	sub	sp, #52	; 0x34
   10f8c:	4604      	mov	r4, r0
   10f8e:	af02      	add	r7, sp, #8
	if (conn_err) {
   10f90:	b129      	cbz	r1, 10f9e <on_connected+0x16>
		printk("Connection failed (err %u)\n", conn_err);
   10f92:	4827      	ldr	r0, [pc, #156]	; (11030 <on_connected+0xa8>)
   10f94:	f010 fe78 	bl	21c88 <printk>
}
   10f98:	372c      	adds	r7, #44	; 0x2c
   10f9a:	46bd      	mov	sp, r7
   10f9c:	bd90      	pop	{r4, r7, pc}
	err = bt_conn_get_info(conn, &info);
   10f9e:	1d39      	adds	r1, r7, #4
   10fa0:	f006 fb2a 	bl	175f8 <bt_conn_get_info>
	if (err) {
   10fa4:	b178      	cbz	r0, 10fc6 <on_connected+0x3e>
		LOG_ERR("bt_conn_get_info() returned %d", err);
   10fa6:	466c      	mov	r4, sp
   10fa8:	b088      	sub	sp, #32
   10faa:	aa02      	add	r2, sp, #8
   10fac:	4b21      	ldr	r3, [pc, #132]	; (11034 <on_connected+0xac>)
   10fae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   10fb2:	2303      	movs	r3, #3
   10fb4:	f842 3f10 	str.w	r3, [r2, #16]!
   10fb8:	481f      	ldr	r0, [pc, #124]	; (11038 <on_connected+0xb0>)
   10fba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   10fbe:	f010 fded 	bl	21b9c <z_log_msg_static_create.constprop.0>
   10fc2:	46a5      	mov	sp, r4
		return;
   10fc4:	e7e8      	b.n	10f98 <on_connected+0x10>
	float connection_interval = info.le.interval * 1.25; // in ms
   10fc6:	8b38      	ldrh	r0, [r7, #24]
   10fc8:	f7ef f9ec 	bl	3a4 <__aeabi_i2d>
   10fcc:	4b1b      	ldr	r3, [pc, #108]	; (1103c <on_connected+0xb4>)
   10fce:	2200      	movs	r2, #0
   10fd0:	f7ef fa52 	bl	478 <__aeabi_dmul>
   10fd4:	f7ef fc62 	bl	89c <__aeabi_d2f>
	printk("Connection parameters: interval %.2f ms, latency %d intervals, timeout %d ms",
   10fd8:	f7ef f9f6 	bl	3c8 <__aeabi_f2d>
	uint16_t supervision_timeout = info.le.timeout * 10; // in ms
   10fdc:	8bbb      	ldrh	r3, [r7, #28]
   10fde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   10fe2:	005b      	lsls	r3, r3, #1
	printk("Connection parameters: interval %.2f ms, latency %d intervals, timeout %d ms",
   10fe4:	b29b      	uxth	r3, r3
   10fe6:	9301      	str	r3, [sp, #4]
   10fe8:	8b7b      	ldrh	r3, [r7, #26]
   10fea:	9300      	str	r3, [sp, #0]
   10fec:	4602      	mov	r2, r0
   10fee:	460b      	mov	r3, r1
   10ff0:	4813      	ldr	r0, [pc, #76]	; (11040 <on_connected+0xb8>)
   10ff2:	f010 fe49 	bl	21c88 <printk>
	const struct bt_conn_le_phy_param preferred_phy = {
   10ff6:	4b13      	ldr	r3, [pc, #76]	; (11044 <on_connected+0xbc>)
   10ff8:	603b      	str	r3, [r7, #0]
	err = bt_conn_le_phy_update(conn, &preferred_phy);
   10ffa:	4639      	mov	r1, r7
   10ffc:	4620      	mov	r0, r4
   10ffe:	f012 fa05 	bl	2340c <bt_conn_le_phy_update>
	if (err) {
   11002:	b170      	cbz	r0, 11022 <on_connected+0x9a>
		LOG_ERR("bt_conn_le_phy_update() returned %d", err);
   11004:	466c      	mov	r4, sp
   11006:	b088      	sub	sp, #32
   11008:	aa02      	add	r2, sp, #8
   1100a:	4b0f      	ldr	r3, [pc, #60]	; (11048 <on_connected+0xc0>)
   1100c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11010:	2303      	movs	r3, #3
   11012:	f842 3f10 	str.w	r3, [r2, #16]!
   11016:	4808      	ldr	r0, [pc, #32]	; (11038 <on_connected+0xb0>)
   11018:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1101c:	f010 fdbe 	bl	21b9c <z_log_msg_static_create.constprop.0>
   11020:	46a5      	mov	sp, r4
	bt_connected = true;
   11022:	4b0a      	ldr	r3, [pc, #40]	; (1104c <on_connected+0xc4>)
   11024:	2001      	movs	r0, #1
   11026:	7018      	strb	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   11028:	f013 fedc 	bl	24de4 <dk_set_led_on>
   1102c:	e7b4      	b.n	10f98 <on_connected+0x10>
   1102e:	bf00      	nop
   11030:	00026a0c 	.word	0x00026a0c
   11034:	00026a28 	.word	0x00026a28
   11038:	00025f30 	.word	0x00025f30
   1103c:	3ff40000 	.word	0x3ff40000
   11040:	00026a47 	.word	0x00026a47
   11044:	02020000 	.word	0x02020000
   11048:	00026a94 	.word	0x00026a94
   1104c:	20004559 	.word	0x20004559

00011050 <on_le_phy_updated>:
{
   11050:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (param->tx_phy == BT_CONN_LE_TX_POWER_PHY_1M) {
   11052:	780b      	ldrb	r3, [r1, #0]
   11054:	2b01      	cmp	r3, #1
   11056:	d103      	bne.n	11060 <on_le_phy_updated+0x10>
		LOG_INF("PHY updated. New PHY: 1M");
   11058:	4b0a      	ldr	r3, [pc, #40]	; (11084 <on_le_phy_updated+0x34>)
		LOG_INF("PHY updated. New PHY: Long Range");
   1105a:	9305      	str	r3, [sp, #20]
   1105c:	2302      	movs	r3, #2
   1105e:	e003      	b.n	11068 <on_le_phy_updated+0x18>
	} else if (param->tx_phy == BT_CONN_LE_TX_POWER_PHY_2M) {
   11060:	2b02      	cmp	r3, #2
   11062:	d10b      	bne.n	1107c <on_le_phy_updated+0x2c>
		LOG_INF("PHY updated. New PHY: 2M");
   11064:	4a08      	ldr	r2, [pc, #32]	; (11088 <on_le_phy_updated+0x38>)
   11066:	9205      	str	r2, [sp, #20]
		LOG_INF("PHY updated. New PHY: Long Range");
   11068:	4808      	ldr	r0, [pc, #32]	; (1108c <on_le_phy_updated+0x3c>)
   1106a:	9304      	str	r3, [sp, #16]
   1106c:	aa04      	add	r2, sp, #16
   1106e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11072:	f010 fd93 	bl	21b9c <z_log_msg_static_create.constprop.0>
}
   11076:	b007      	add	sp, #28
   11078:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (param->tx_phy == BT_CONN_LE_TX_POWER_PHY_CODED_S8) {
   1107c:	2b03      	cmp	r3, #3
   1107e:	d1fa      	bne.n	11076 <on_le_phy_updated+0x26>
		LOG_INF("PHY updated. New PHY: Long Range");
   11080:	4b03      	ldr	r3, [pc, #12]	; (11090 <on_le_phy_updated+0x40>)
   11082:	e7ea      	b.n	1105a <on_le_phy_updated+0xa>
   11084:	00026ab8 	.word	0x00026ab8
   11088:	00026ad1 	.word	0x00026ad1
   1108c:	00025f30 	.word	0x00025f30
   11090:	00026aea 	.word	0x00026aea

00011094 <send_data_thread>:
{
   11094:	b513      	push	{r0, r1, r4, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
   11096:	4c06      	ldr	r4, [pc, #24]	; (110b0 <send_data_thread+0x1c>)
   11098:	f04f 32ff 	mov.w	r2, #4294967295
   1109c:	f04f 33ff 	mov.w	r3, #4294967295
   110a0:	a901      	add	r1, sp, #4
   110a2:	4620      	mov	r0, r4
   110a4:	f00c fbc8 	bl	1d838 <z_impl_k_msgq_get>
		err = joybus_send_input_response_notify(controller_input_rsp);
   110a8:	9801      	ldr	r0, [sp, #4]
   110aa:	f000 f975 	bl	11398 <joybus_send_input_response_notify>
	while (1) {
   110ae:	e7f3      	b.n	11098 <send_data_thread+0x4>
   110b0:	20000b74 	.word	0x20000b74

000110b4 <uart_cb>:
}


/* Define the callback function for UART */
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
   110b4:	b410      	push	{r4}
   110b6:	460b      	mov	r3, r1
	uint32_t* rsp_p = (uint32_t *) evt->data.rx.buf;
   110b8:	6849      	ldr	r1, [r1, #4]
	int err;

	switch (evt->type) {
   110ba:	781b      	ldrb	r3, [r3, #0]
   110bc:	2b02      	cmp	r3, #2
   110be:	d003      	beq.n	110c8 <uart_cb+0x14>
   110c0:	2b05      	cmp	r3, #5
   110c2:	d00b      	beq.n	110dc <uart_cb+0x28>
			
		default:
			break;
		}

}
   110c4:	bc10      	pop	{r4}
   110c6:	4770      	bx	lr
			if(bt_connected){
   110c8:	4b08      	ldr	r3, [pc, #32]	; (110ec <uart_cb+0x38>)
   110ca:	781b      	ldrb	r3, [r3, #0]
   110cc:	2b00      	cmp	r3, #0
   110ce:	d0f9      	beq.n	110c4 <uart_cb+0x10>
	return z_impl_k_msgq_put(msgq, data, timeout);
   110d0:	4807      	ldr	r0, [pc, #28]	; (110f0 <uart_cb+0x3c>)
}
   110d2:	bc10      	pop	{r4}
   110d4:	2200      	movs	r2, #0
   110d6:	2300      	movs	r3, #0
   110d8:	f00c bb58 	b.w	1d78c <z_impl_k_msgq_put>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
   110dc:	6883      	ldr	r3, [r0, #8]
   110de:	4905      	ldr	r1, [pc, #20]	; (110f4 <uart_cb+0x40>)
   110e0:	68dc      	ldr	r4, [r3, #12]
   110e2:	2204      	movs	r2, #4
   110e4:	46a4      	mov	ip, r4
   110e6:	2364      	movs	r3, #100	; 0x64
   110e8:	bc10      	pop	{r4}
   110ea:	4760      	bx	ip
   110ec:	20004559 	.word	0x20004559
   110f0:	20000b74 	.word	0x20000b74
   110f4:	20004554 	.word	0x20004554

000110f8 <main>:

int main(void)
{
   110f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   110fc:	b088      	sub	sp, #32
   110fe:	af02      	add	r7, sp, #8
	
	int err;

	err = dk_leds_init();
   11100:	f00a fa38 	bl	1b574 <dk_leds_init>
	if (err) {
   11104:	b178      	cbz	r0, 11126 <main+0x2e>
		LOG_ERR("LEDs init failed (err %d)\n", err);
   11106:	466c      	mov	r4, sp
   11108:	b088      	sub	sp, #32
   1110a:	aa02      	add	r2, sp, #8
   1110c:	4b4e      	ldr	r3, [pc, #312]	; (11248 <main+0x150>)
		return -1 ;
	}

	err = uart_callback_set(uart, uart_cb, NULL);
	if (err) {
		LOG_ERR("Failed to set UART callbacks (err %d)\n", err);
   1110e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11112:	2303      	movs	r3, #3
   11114:	f842 3f10 	str.w	r3, [r2, #16]!
   11118:	484c      	ldr	r0, [pc, #304]	; (1124c <main+0x154>)
   1111a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1111e:	f010 fd3d 	bl	21b9c <z_log_msg_static_create.constprop.0>
   11122:	46a5      	mov	sp, r4
		return -1;
   11124:	e014      	b.n	11150 <main+0x58>
	err = dk_buttons_init(button_changed);
   11126:	484a      	ldr	r0, [pc, #296]	; (11250 <main+0x158>)
   11128:	f00a fa62 	bl	1b5f0 <dk_buttons_init>
	if (err) {
   1112c:	4604      	mov	r4, r0
   1112e:	b938      	cbnz	r0, 11140 <main+0x48>
	err = bt_enable(NULL);
   11130:	f004 ffa4 	bl	1607c <bt_enable>
	if (err) {
   11134:	b198      	cbz	r0, 1115e <main+0x66>
		LOG_ERR("Bluetooth init failed (err %d)\n", err);
   11136:	466c      	mov	r4, sp
   11138:	b088      	sub	sp, #32
   1113a:	aa02      	add	r2, sp, #8
   1113c:	4b45      	ldr	r3, [pc, #276]	; (11254 <main+0x15c>)
   1113e:	e7e6      	b.n	1110e <main+0x16>
		printk("Cannot init buttons (err: %d)\n", err);
   11140:	4601      	mov	r1, r0
   11142:	4845      	ldr	r0, [pc, #276]	; (11258 <main+0x160>)
   11144:	f010 fda0 	bl	21c88 <printk>
		printk("Button init failed (err %d)\n", err);
   11148:	4844      	ldr	r0, [pc, #272]	; (1125c <main+0x164>)
   1114a:	4621      	mov	r1, r4
   1114c:	f010 fd9c 	bl	21c88 <printk>
		return -1;
   11150:	f04f 34ff 	mov.w	r4, #4294967295

	LOG_INF("UART Sucessfully enabled.\n");

	return 0;

}
   11154:	4620      	mov	r0, r4
   11156:	3718      	adds	r7, #24
   11158:	46bd      	mov	sp, r7
   1115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_conn_cb_register(&connection_callbacks);
   1115e:	4840      	ldr	r0, [pc, #256]	; (11260 <main+0x168>)
   11160:	f006 f9bc 	bl	174dc <bt_conn_cb_register>
	err = joybus_init(&app_callbacks);
   11164:	483f      	ldr	r0, [pc, #252]	; (11264 <main+0x16c>)
   11166:	f000 f8eb 	bl	11340 <joybus_init>
	if (err) {
   1116a:	4601      	mov	r1, r0
   1116c:	b108      	cbz	r0, 11172 <main+0x7a>
		printk("Failed to init LBS (err:%d)\n", err);
   1116e:	483e      	ldr	r0, [pc, #248]	; (11268 <main+0x170>)
   11170:	e7ec      	b.n	1114c <main+0x54>
	LOG_INF("Bluetooth initialized\n");
   11172:	466d      	mov	r5, sp
   11174:	4b3d      	ldr	r3, [pc, #244]	; (1126c <main+0x174>)
   11176:	4835      	ldr	r0, [pc, #212]	; (1124c <main+0x154>)
   11178:	617b      	str	r3, [r7, #20]
   1117a:	2602      	movs	r6, #2
   1117c:	f107 0210 	add.w	r2, r7, #16
   11180:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11184:	613e      	str	r6, [r7, #16]
   11186:	f010 fd09 	bl	21b9c <z_log_msg_static_create.constprop.0>
	err = bt_le_adv_start(adv_param, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   1118a:	2301      	movs	r3, #1
   1118c:	9300      	str	r3, [sp, #0]
   1118e:	4938      	ldr	r1, [pc, #224]	; (11270 <main+0x178>)
   11190:	4b38      	ldr	r3, [pc, #224]	; (11274 <main+0x17c>)
   11192:	4839      	ldr	r0, [pc, #228]	; (11278 <main+0x180>)
   11194:	4632      	mov	r2, r6
   11196:	f005 fc63 	bl	16a60 <bt_le_adv_start>
	if (err) {
   1119a:	4604      	mov	r4, r0
   1119c:	b170      	cbz	r0, 111bc <main+0xc4>
		LOG_ERR("Advertising failed to start (err %d)\n", err);
   1119e:	b088      	sub	sp, #32
   111a0:	aa02      	add	r2, sp, #8
   111a2:	4b36      	ldr	r3, [pc, #216]	; (1127c <main+0x184>)
		LOG_ERR("Failed to enable UART (err %d)\n", err);
   111a4:	4829      	ldr	r0, [pc, #164]	; (1124c <main+0x154>)
   111a6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   111aa:	2303      	movs	r3, #3
   111ac:	f842 3f10 	str.w	r3, [r2, #16]!
   111b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   111b4:	f010 fcf2 	bl	21b9c <z_log_msg_static_create.constprop.0>
   111b8:	46ad      	mov	sp, r5
		return -1;
   111ba:	e7c9      	b.n	11150 <main+0x58>
	LOG_INF("Advertising successfully started\n");
   111bc:	4b30      	ldr	r3, [pc, #192]	; (11280 <main+0x188>)
	if (!device_is_ready(uart)){
   111be:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 11284 <main+0x18c>
	LOG_INF("Advertising successfully started\n");
   111c2:	4822      	ldr	r0, [pc, #136]	; (1124c <main+0x154>)
   111c4:	e9c7 6304 	strd	r6, r3, [r7, #16]
   111c8:	f107 0210 	add.w	r2, r7, #16
   111cc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   111d0:	f010 fce4 	bl	21b9c <z_log_msg_static_create.constprop.0>
	if (!device_is_ready(uart)){
   111d4:	f8d8 0000 	ldr.w	r0, [r8]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   111d8:	f013 ff1e 	bl	25018 <z_device_is_ready>
   111dc:	b950      	cbnz	r0, 111f4 <main+0xfc>
		LOG_ERR("UART device not ready\r\n");
   111de:	4b2a      	ldr	r3, [pc, #168]	; (11288 <main+0x190>)
   111e0:	481a      	ldr	r0, [pc, #104]	; (1124c <main+0x154>)
   111e2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   111e6:	f107 0210 	add.w	r2, r7, #16
   111ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   111ee:	f010 fcd5 	bl	21b9c <z_log_msg_static_create.constprop.0>
		return -1 ;
   111f2:	e7ad      	b.n	11150 <main+0x58>
	err = uart_callback_set(uart, uart_cb, NULL);
   111f4:	f8d8 0000 	ldr.w	r0, [r8]
	if (api->callback_set == NULL) {
   111f8:	6883      	ldr	r3, [r0, #8]
   111fa:	681b      	ldr	r3, [r3, #0]
   111fc:	b143      	cbz	r3, 11210 <main+0x118>
	return api->callback_set(dev, callback, user_data);
   111fe:	4923      	ldr	r1, [pc, #140]	; (1128c <main+0x194>)
   11200:	4622      	mov	r2, r4
   11202:	4798      	blx	r3
	if (err) {
   11204:	b138      	cbz	r0, 11216 <main+0x11e>
		LOG_ERR("Failed to set UART callbacks (err %d)\n", err);
   11206:	466c      	mov	r4, sp
   11208:	b088      	sub	sp, #32
   1120a:	aa02      	add	r2, sp, #8
   1120c:	4b20      	ldr	r3, [pc, #128]	; (11290 <main+0x198>)
   1120e:	e77e      	b.n	1110e <main+0x16>
		return -ENOSYS;
   11210:	f06f 0057 	mvn.w	r0, #87	; 0x57
   11214:	e7f7      	b.n	11206 <main+0x10e>
	err = uart_rx_enable(uart ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
   11216:	f8d8 0000 	ldr.w	r0, [r8]
	return api->rx_enable(dev, buf, len, timeout);
   1121a:	6883      	ldr	r3, [r0, #8]
   1121c:	491d      	ldr	r1, [pc, #116]	; (11294 <main+0x19c>)
   1121e:	68dc      	ldr	r4, [r3, #12]
   11220:	2204      	movs	r2, #4
   11222:	2364      	movs	r3, #100	; 0x64
   11224:	47a0      	blx	r4
	if (err) {
   11226:	4604      	mov	r4, r0
   11228:	b118      	cbz	r0, 11232 <main+0x13a>
		LOG_ERR("Failed to enable UART (err %d)\n", err);
   1122a:	b088      	sub	sp, #32
   1122c:	aa02      	add	r2, sp, #8
   1122e:	4b1a      	ldr	r3, [pc, #104]	; (11298 <main+0x1a0>)
   11230:	e7b8      	b.n	111a4 <main+0xac>
	LOG_INF("UART Sucessfully enabled.\n");
   11232:	4b1a      	ldr	r3, [pc, #104]	; (1129c <main+0x1a4>)
   11234:	4805      	ldr	r0, [pc, #20]	; (1124c <main+0x154>)
   11236:	e9c7 6304 	strd	r6, r3, [r7, #16]
   1123a:	f107 0210 	add.w	r2, r7, #16
   1123e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   11242:	f010 fcab 	bl	21b9c <z_log_msg_static_create.constprop.0>
	return 0;
   11246:	e785      	b.n	11154 <main+0x5c>
   11248:	00026b0b 	.word	0x00026b0b
   1124c:	00025f30 	.word	0x00025f30
   11250:	00021ba3 	.word	0x00021ba3
   11254:	00026b62 	.word	0x00026b62
   11258:	00026b26 	.word	0x00026b26
   1125c:	00026b45 	.word	0x00026b45
   11260:	20000680 	.word	0x20000680
   11264:	20000698 	.word	0x20000698
   11268:	00026b82 	.word	0x00026b82
   1126c:	00026b9f 	.word	0x00026b9f
   11270:	00026080 	.word	0x00026080
   11274:	00026078 	.word	0x00026078
   11278:	200006a4 	.word	0x200006a4
   1127c:	00026bb6 	.word	0x00026bb6
   11280:	00026bdc 	.word	0x00026bdc
   11284:	200006a0 	.word	0x200006a0
   11288:	00026bfe 	.word	0x00026bfe
   1128c:	000110b5 	.word	0x000110b5
   11290:	00026c16 	.word	0x00026c16
   11294:	20004554 	.word	0x20004554
   11298:	00026c3d 	.word	0x00026c3d
   1129c:	00026c5d 	.word	0x00026c5d

000112a0 <joybus_ccc_button_cfg_changed>:
static struct bt_gatt_indicate_params ind_params;

/* Implement the configuration change callback function */
static void joybus_ccc_button_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	indicate_enabled = (value == BT_GATT_CCC_INDICATE);
   112a0:	1e8b      	subs	r3, r1, #2
   112a2:	4259      	negs	r1, r3
   112a4:	4159      	adcs	r1, r3
   112a6:	4b01      	ldr	r3, [pc, #4]	; (112ac <joybus_ccc_button_cfg_changed+0xc>)
   112a8:	7019      	strb	r1, [r3, #0]
}
   112aa:	4770      	bx	lr
   112ac:	2000455b 	.word	0x2000455b

000112b0 <joybus_ccc_input_response_cfg_changed>:

/* Define the configuration change callback function for the MYSENSOR characteristic */
static void joybus_ccc_input_response_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	notify_input_response_enabled = (value == BT_GATT_CCC_NOTIFY);
   112b0:	1e4b      	subs	r3, r1, #1
   112b2:	4259      	negs	r1, r3
   112b4:	4159      	adcs	r1, r3
   112b6:	4b01      	ldr	r3, [pc, #4]	; (112bc <joybus_ccc_input_response_cfg_changed+0xc>)
   112b8:	7019      	strb	r1, [r3, #0]
}
   112ba:	4770      	bx	lr
   112bc:	2000455c 	.word	0x2000455c

000112c0 <write_led>:
{
	LOG_DBG("Indication %s\n", err != 0U ? "fail" : "success");
}
static ssize_t write_led(struct bt_conn *conn, const struct bt_gatt_attr *attr, const void *buf,
			 uint16_t len, uint16_t offset, uint8_t flags)
{
   112c0:	b508      	push	{r3, lr}
	LOG_DBG("Attribute write, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (len != 4) {
   112c2:	2b04      	cmp	r3, #4
{
   112c4:	f8bd 1008 	ldrh.w	r1, [sp, #8]
	if (len != 4) {
   112c8:	d10c      	bne.n	112e4 <write_led+0x24>
		LOG_DBG("Write led: Incorrect data length");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (offset != 0) {
   112ca:	b971      	cbnz	r1, 112ea <write_led+0x2a>
		LOG_DBG("Write led: Incorrect data offset");
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (jbs_cb.led_cb) {
   112cc:	4b0a      	ldr	r3, [pc, #40]	; (112f8 <write_led+0x38>)
   112ce:	681b      	ldr	r3, [r3, #0]
   112d0:	b90b      	cbnz	r3, 112d6 <write_led+0x16>
			LOG_DBG("Write led: Incorrect value");
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
		}
	}

	return len;
   112d2:	2004      	movs	r0, #4
}
   112d4:	bd08      	pop	{r3, pc}
		uint32_t val = *((uint32_t *)buf);
   112d6:	6810      	ldr	r0, [r2, #0]
		if (val == 0x0000 || val == 0x0001) {
   112d8:	2801      	cmp	r0, #1
   112da:	d809      	bhi.n	112f0 <write_led+0x30>
			jbs_cb.led_cb(val ? true : false);
   112dc:	f000 0001 	and.w	r0, r0, #1
   112e0:	4798      	blx	r3
   112e2:	e7f6      	b.n	112d2 <write_led+0x12>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   112e4:	f06f 000c 	mvn.w	r0, #12
   112e8:	e7f4      	b.n	112d4 <write_led+0x14>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   112ea:	f06f 0006 	mvn.w	r0, #6
   112ee:	e7f1      	b.n	112d4 <write_led+0x14>
			return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   112f0:	f06f 0012 	mvn.w	r0, #18
   112f4:	e7ee      	b.n	112d4 <write_led+0x14>
   112f6:	bf00      	nop
   112f8:	200030b0 	.word	0x200030b0

000112fc <read_button>:

static ssize_t read_button(struct bt_conn *conn, const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
   112fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11300:	461f      	mov	r7, r3
	// get a pointer to button_state which is passed in the BT_GATT_CHARACTERISTIC() and stored in attr->user_data
	const char *value = attr->user_data;

	LOG_DBG("Attribute read, handle: %u, conn: %p", attr->handle, (void *)conn);

	if (jbs_cb.button_cb) {
   11302:	4b0d      	ldr	r3, [pc, #52]	; (11338 <read_button+0x3c>)
{
   11304:	4605      	mov	r5, r0
	if (jbs_cb.button_cb) {
   11306:	6858      	ldr	r0, [r3, #4]
{
   11308:	460c      	mov	r4, r1
   1130a:	4616      	mov	r6, r2
	if (jbs_cb.button_cb) {
   1130c:	b180      	cbz	r0, 11330 <read_button+0x34>
	const char *value = attr->user_data;
   1130e:	f8d1 800c 	ldr.w	r8, [r1, #12]
		// Call the application callback function to update the get the current value of the button
		button_state = jbs_cb.button_cb();
   11312:	4780      	blx	r0
   11314:	4b09      	ldr	r3, [pc, #36]	; (1133c <read_button+0x40>)
   11316:	7018      	strb	r0, [r3, #0]
		return bt_gatt_attr_read(conn, attr, buf, len, offset, value, sizeof(*value));
   11318:	2301      	movs	r3, #1
   1131a:	e9cd 8301 	strd	r8, r3, [sp, #4]
   1131e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11322:	9300      	str	r3, [sp, #0]
   11324:	4632      	mov	r2, r6
   11326:	463b      	mov	r3, r7
   11328:	4621      	mov	r1, r4
   1132a:	4628      	mov	r0, r5
   1132c:	f012 ff12 	bl	24154 <bt_gatt_attr_read>
	}

	return 0;
}
   11330:	b004      	add	sp, #16
   11332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11336:	bf00      	nop
   11338:	200030b0 	.word	0x200030b0
   1133c:	2000455a 	.word	0x2000455a

00011340 <joybus_init>:

);
/* A function to register application callbacks for the LED and Button characteristics  */
int joybus_init(struct joybus_cb *callbacks)
{
	if (callbacks) {
   11340:	b120      	cbz	r0, 1134c <joybus_init+0xc>
		jbs_cb.led_cb = callbacks->led_cb;
   11342:	4b03      	ldr	r3, [pc, #12]	; (11350 <joybus_init+0x10>)
   11344:	6802      	ldr	r2, [r0, #0]
   11346:	601a      	str	r2, [r3, #0]
		jbs_cb.button_cb = callbacks->button_cb;
   11348:	6842      	ldr	r2, [r0, #4]
   1134a:	605a      	str	r2, [r3, #4]
	}

	return 0;
}
   1134c:	2000      	movs	r0, #0
   1134e:	4770      	bx	lr
   11350:	200030b0 	.word	0x200030b0

00011354 <joybus_send_button_state_indicate>:

/* Define the function to send indications */
int joybus_send_button_state_indicate(bool button_state)
{
   11354:	b507      	push	{r0, r1, r2, lr}
	if (!indicate_enabled) {
   11356:	4b0c      	ldr	r3, [pc, #48]	; (11388 <joybus_send_button_state_indicate+0x34>)
{
   11358:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!indicate_enabled) {
   1135c:	781b      	ldrb	r3, [r3, #0]
   1135e:	b183      	cbz	r3, 11382 <joybus_send_button_state_indicate+0x2e>
		return -EACCES;
	}
	ind_params.attr = &joybus_svc.attrs[2];
   11360:	490a      	ldr	r1, [pc, #40]	; (1138c <joybus_send_button_state_indicate+0x38>)
   11362:	4b0b      	ldr	r3, [pc, #44]	; (11390 <joybus_send_button_state_indicate+0x3c>)
   11364:	604b      	str	r3, [r1, #4]
	ind_params.func = indicate_cb; // A remote device has ACKed at its host layer (ATT ACK)
   11366:	4b0b      	ldr	r3, [pc, #44]	; (11394 <joybus_send_button_state_indicate+0x40>)
   11368:	608b      	str	r3, [r1, #8]
	ind_params.destroy = NULL;
	ind_params.data = &button_state;
   1136a:	f10d 0307 	add.w	r3, sp, #7
	ind_params.destroy = NULL;
   1136e:	2000      	movs	r0, #0
	ind_params.data = &button_state;
   11370:	610b      	str	r3, [r1, #16]
	ind_params.len = sizeof(button_state);
   11372:	2301      	movs	r3, #1
	ind_params.destroy = NULL;
   11374:	60c8      	str	r0, [r1, #12]
	ind_params.len = sizeof(button_state);
   11376:	828b      	strh	r3, [r1, #20]
	return bt_gatt_indicate(NULL, &ind_params);
   11378:	f008 f8c6 	bl	19508 <bt_gatt_indicate>
}
   1137c:	b003      	add	sp, #12
   1137e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   11382:	f06f 000c 	mvn.w	r0, #12
   11386:	e7f9      	b.n	1137c <joybus_send_button_state_indicate+0x28>
   11388:	2000455b 	.word	0x2000455b
   1138c:	20003098 	.word	0x20003098
   11390:	000260b8 	.word	0x000260b8
   11394:	00021bad 	.word	0x00021bad

00011398 <joybus_send_input_response_notify>:

/* Define the function to send notifications for the INPUT RESPONSE characteristic */
int joybus_send_input_response_notify(uint32_t input_response)
{
   11398:	b500      	push	{lr}
	if (!notify_input_response_enabled) {
   1139a:	4b0d      	ldr	r3, [pc, #52]	; (113d0 <joybus_send_input_response_notify+0x38>)
{
   1139c:	b089      	sub	sp, #36	; 0x24
	if (!notify_input_response_enabled) {
   1139e:	781b      	ldrb	r3, [r3, #0]
{
   113a0:	9001      	str	r0, [sp, #4]
	if (!notify_input_response_enabled) {
   113a2:	b193      	cbz	r3, 113ca <joybus_send_input_response_notify+0x32>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   113a4:	2100      	movs	r1, #0
   113a6:	2218      	movs	r2, #24
   113a8:	a802      	add	r0, sp, #8
   113aa:	f011 fd0e 	bl	22dca <memset>

	params.attr = attr;
   113ae:	4b09      	ldr	r3, [pc, #36]	; (113d4 <joybus_send_input_response_notify+0x3c>)
   113b0:	9303      	str	r3, [sp, #12]
	params.data = data;
   113b2:	ab01      	add	r3, sp, #4
   113b4:	9304      	str	r3, [sp, #16]
	params.len = len;
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   113b6:	a902      	add	r1, sp, #8
	params.len = len;
   113b8:	2304      	movs	r3, #4
	return bt_gatt_notify_cb(conn, &params);
   113ba:	2000      	movs	r0, #0
	params.len = len;
   113bc:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   113c0:	f008 fa30 	bl	19824 <bt_gatt_notify_cb>
		return -EACCES;
	}

	return bt_gatt_notify(NULL, &joybus_svc.attrs[7], &input_response, sizeof(input_response));
}
   113c4:	b009      	add	sp, #36	; 0x24
   113c6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EACCES;
   113ca:	f06f 000c 	mvn.w	r0, #12
   113ce:	e7f9      	b.n	113c4 <joybus_send_input_response_notify+0x2c>
   113d0:	2000455c 	.word	0x2000455c
   113d4:	0002611c 	.word	0x0002611c

000113d8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   113d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113dc:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   113de:	0784      	lsls	r4, r0, #30
{
   113e0:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   113e2:	f002 0304 	and.w	r3, r2, #4
   113e6:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   113e8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   113ec:	f103 0301 	add.w	r3, r3, #1
   113f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   113f4:	9203      	str	r2, [sp, #12]
   113f6:	4605      	mov	r5, r0
   113f8:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   113fa:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   113fc:	f040 81be 	bne.w	1177c <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   11400:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   11402:	b130      	cbz	r0, 11412 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   11404:	2907      	cmp	r1, #7
   11406:	d809      	bhi.n	1141c <cbvprintf_package+0x44>
		return -ENOSPC;
   11408:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1140c:	b011      	add	sp, #68	; 0x44
   1140e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   11412:	f001 0607 	and.w	r6, r1, #7
   11416:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   11418:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   1141c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1141e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   11422:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   11424:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   11428:	f04f 33ff 	mov.w	r3, #4294967295
   1142c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1142e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   11432:	464f      	mov	r7, r9
	bool parsing = false;
   11434:	46cb      	mov	fp, r9
	size = sizeof(char *);
   11436:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   11438:	b10d      	cbz	r5, 1143e <cbvprintf_package+0x66>
				*(const char **)buf = s;
   1143a:	9a00      	ldr	r2, [sp, #0]
   1143c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1143e:	9805      	ldr	r0, [sp, #20]
   11440:	2800      	cmp	r0, #0
   11442:	f300 80eb 	bgt.w	1161c <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11446:	489a      	ldr	r0, [pc, #616]	; (116b0 <cbvprintf_package+0x2d8>)
   11448:	9a00      	ldr	r2, [sp, #0]
   1144a:	4282      	cmp	r2, r0
   1144c:	d303      	bcc.n	11456 <cbvprintf_package+0x7e>
   1144e:	4899      	ldr	r0, [pc, #612]	; (116b4 <cbvprintf_package+0x2dc>)
   11450:	4282      	cmp	r2, r0
   11452:	f0c0 80e3 	bcc.w	1161c <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11456:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11458:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1145c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1145e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   11462:	f100 8106 	bmi.w	11672 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11466:	2f0f      	cmp	r7, #15
   11468:	f200 80b4 	bhi.w	115d4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   1146c:	2d00      	cmp	r5, #0
   1146e:	f000 8108 	beq.w	11682 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   11472:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11476:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   1147a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1147c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   11480:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   11484:	9804      	ldr	r0, [sp, #16]
   11486:	3001      	adds	r0, #1
   11488:	9004      	str	r0, [sp, #16]
   1148a:	e0ea      	b.n	11662 <cbvprintf_package+0x28a>
			switch (*fmt) {
   1148c:	287a      	cmp	r0, #122	; 0x7a
   1148e:	d860      	bhi.n	11552 <cbvprintf_package+0x17a>
   11490:	284b      	cmp	r0, #75	; 0x4b
   11492:	d80e      	bhi.n	114b2 <cbvprintf_package+0xda>
   11494:	2847      	cmp	r0, #71	; 0x47
   11496:	d85c      	bhi.n	11552 <cbvprintf_package+0x17a>
   11498:	2829      	cmp	r0, #41	; 0x29
   1149a:	d82f      	bhi.n	114fc <cbvprintf_package+0x124>
   1149c:	2825      	cmp	r0, #37	; 0x25
   1149e:	d055      	beq.n	1154c <cbvprintf_package+0x174>
   114a0:	d857      	bhi.n	11552 <cbvprintf_package+0x17a>
   114a2:	2820      	cmp	r0, #32
   114a4:	d07d      	beq.n	115a2 <cbvprintf_package+0x1ca>
   114a6:	3823      	subs	r0, #35	; 0x23
   114a8:	f1d0 0b00 	rsbs	fp, r0, #0
   114ac:	eb4b 0b00 	adc.w	fp, fp, r0
   114b0:	e077      	b.n	115a2 <cbvprintf_package+0x1ca>
   114b2:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   114b6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   114ba:	d84a      	bhi.n	11552 <cbvprintf_package+0x17a>
   114bc:	e8df f00c 	tbb	[pc, ip]
   114c0:	49494971 	.word	0x49494971
   114c4:	49494949 	.word	0x49494949
   114c8:	49494949 	.word	0x49494949
   114cc:	4949494c 	.word	0x4949494c
   114d0:	49494949 	.word	0x49494949
   114d4:	4c495a49 	.word	0x4c495a49
   114d8:	5a5a5a4c 	.word	0x5a5a5a4c
   114dc:	496e4c71 	.word	0x496e4c71
   114e0:	4c184971 	.word	0x4c184971
   114e4:	83494918 	.word	0x83494918
   114e8:	49494c80 	.word	0x49494c80
   114ec:	494c      	.short	0x494c
   114ee:	80          	.byte	0x80
   114ef:	00          	.byte	0x00
   114f0:	2000      	movs	r0, #0
   114f2:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   114f6:	f04f 0a04 	mov.w	sl, #4
   114fa:	e039      	b.n	11570 <cbvprintf_package+0x198>
			switch (*fmt) {
   114fc:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   11500:	fa5f fc8c 	uxtb.w	ip, ip
   11504:	2201      	movs	r2, #1
   11506:	fa02 fc0c 	lsl.w	ip, r2, ip
   1150a:	ea1c 0f0e 	tst.w	ip, lr
   1150e:	d148      	bne.n	115a2 <cbvprintf_package+0x1ca>
   11510:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   11514:	d12e      	bne.n	11574 <cbvprintf_package+0x19c>
   11516:	ea1c 0b02 	ands.w	fp, ip, r2
   1151a:	d042      	beq.n	115a2 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   1151c:	3c01      	subs	r4, #1
   1151e:	4454      	add	r4, sl
   11520:	f1ca 0c00 	rsb	ip, sl, #0
   11524:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   11528:	2d00      	cmp	r5, #0
   1152a:	d061      	beq.n	115f0 <cbvprintf_package+0x218>
   1152c:	eba3 0c05 	sub.w	ip, r3, r5
   11530:	44a4      	add	ip, r4
   11532:	45b4      	cmp	ip, r6
   11534:	f63f af68 	bhi.w	11408 <cbvprintf_package+0x30>
		if (is_str_arg) {
   11538:	2800      	cmp	r0, #0
   1153a:	d168      	bne.n	1160e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   1153c:	2b04      	cmp	r3, #4
   1153e:	d147      	bne.n	115d0 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   11540:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   11544:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   11546:	3404      	adds	r4, #4
   11548:	2304      	movs	r3, #4
   1154a:	e02a      	b.n	115a2 <cbvprintf_package+0x1ca>
				arg_idx--;
   1154c:	9a01      	ldr	r2, [sp, #4]
   1154e:	3a01      	subs	r2, #1
   11550:	9201      	str	r2, [sp, #4]
				parsing = false;
   11552:	f04f 0b00 	mov.w	fp, #0
				continue;
   11556:	e024      	b.n	115a2 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   11558:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   1155c:	286c      	cmp	r0, #108	; 0x6c
   1155e:	d134      	bne.n	115ca <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   11560:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   11564:	2000      	movs	r0, #0
   11566:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   11568:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   1156a:	d1c4      	bne.n	114f6 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   1156c:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11570:	4653      	mov	r3, sl
   11572:	e7d3      	b.n	1151c <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   11574:	f108 0807 	add.w	r8, r8, #7
   11578:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   1157c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   1157e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   11582:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11586:	b135      	cbz	r5, 11596 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11588:	9806      	ldr	r0, [sp, #24]
   1158a:	4420      	add	r0, r4
   1158c:	42b0      	cmp	r0, r6
   1158e:	f63f af3b 	bhi.w	11408 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   11592:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   11596:	3408      	adds	r4, #8
				parsing = false;
   11598:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   1159c:	f04f 0a08 	mov.w	sl, #8
   115a0:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   115a2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   115a6:	2800      	cmp	r0, #0
   115a8:	d078      	beq.n	1169c <cbvprintf_package+0x2c4>
			if (!parsing) {
   115aa:	f1bb 0f00 	cmp.w	fp, #0
   115ae:	f47f af6d 	bne.w	1148c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   115b2:	2825      	cmp	r0, #37	; 0x25
   115b4:	d1f5      	bne.n	115a2 <cbvprintf_package+0x1ca>
					arg_idx++;
   115b6:	9b01      	ldr	r3, [sp, #4]
   115b8:	3301      	adds	r3, #1
   115ba:	9301      	str	r3, [sp, #4]
					parsing = true;
   115bc:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   115c0:	f04f 0a04 	mov.w	sl, #4
   115c4:	e7ec      	b.n	115a0 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   115c6:	4658      	mov	r0, fp
   115c8:	e793      	b.n	114f2 <cbvprintf_package+0x11a>
   115ca:	2000      	movs	r0, #0
				parsing = false;
   115cc:	4683      	mov	fp, r0
   115ce:	e7a5      	b.n	1151c <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   115d0:	2b08      	cmp	r3, #8
   115d2:	d002      	beq.n	115da <cbvprintf_package+0x202>
					return -EINVAL;
   115d4:	f06f 0015 	mvn.w	r0, #21
   115d8:	e718      	b.n	1140c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   115da:	f108 0807 	add.w	r8, r8, #7
   115de:	f028 0807 	bic.w	r8, r8, #7
   115e2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   115e6:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   115ea:	3408      	adds	r4, #8
   115ec:	2308      	movs	r3, #8
   115ee:	e7d8      	b.n	115a2 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   115f0:	b968      	cbnz	r0, 1160e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   115f2:	2b04      	cmp	r3, #4
   115f4:	d102      	bne.n	115fc <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   115f6:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   115fa:	e7a4      	b.n	11546 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   115fc:	2b08      	cmp	r3, #8
   115fe:	d1e9      	bne.n	115d4 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   11600:	f108 0807 	add.w	r8, r8, #7
   11604:	f028 0807 	bic.w	r8, r8, #7
   11608:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   1160c:	e7ed      	b.n	115ea <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1160e:	9a05      	ldr	r2, [sp, #20]
   11610:	3a01      	subs	r2, #1
   11612:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   11614:	f858 2b04 	ldr.w	r2, [r8], #4
   11618:	9200      	str	r2, [sp, #0]
   1161a:	e70d      	b.n	11438 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   1161c:	9a03      	ldr	r2, [sp, #12]
   1161e:	0790      	lsls	r0, r2, #30
   11620:	d520      	bpl.n	11664 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   11622:	eba4 0e05 	sub.w	lr, r4, r5
   11626:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1162a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1162e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   11632:	d2cf      	bcs.n	115d4 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   11634:	2f0f      	cmp	r7, #15
   11636:	d8cd      	bhi.n	115d4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   11638:	b1f5      	cbz	r5, 11678 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1163a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1163e:	eb0d 0e02 	add.w	lr, sp, r2
   11642:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   11644:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   11646:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1164a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   1164e:	f1bc 0f00 	cmp.w	ip, #0
   11652:	f43f af17 	beq.w	11484 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   11656:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1165a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   1165e:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   11662:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   11664:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   11668:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   1166a:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   1166c:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11670:	e797      	b.n	115a2 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11672:	f04f 0c00 	mov.w	ip, #0
   11676:	e7da      	b.n	1162e <cbvprintf_package+0x256>
				} else if (is_ro) {
   11678:	f1bc 0f00 	cmp.w	ip, #0
   1167c:	d001      	beq.n	11682 <cbvprintf_package+0x2aa>
					len += 1;
   1167e:	3601      	adds	r6, #1
   11680:	e7ef      	b.n	11662 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   11682:	9802      	ldr	r0, [sp, #8]
					len += 2;
   11684:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   11686:	2800      	cmp	r0, #0
   11688:	d1eb      	bne.n	11662 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   1168a:	9800      	ldr	r0, [sp, #0]
   1168c:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11690:	f011 fb59 	bl	22d46 <strlen>
   11694:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11698:	4406      	add	r6, r0
   1169a:	e7e2      	b.n	11662 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   1169c:	1b63      	subs	r3, r4, r5
   1169e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   116a2:	d297      	bcs.n	115d4 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   116a4:	b945      	cbnz	r5, 116b8 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   116a6:	f1a6 0408 	sub.w	r4, r6, #8
   116aa:	18e0      	adds	r0, r4, r3
   116ac:	e6ae      	b.n	1140c <cbvprintf_package+0x34>
   116ae:	bf00      	nop
   116b0:	00025b94 	.word	0x00025b94
   116b4:	00028760 	.word	0x00028760
	if (rws_pos_en) {
   116b8:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   116ba:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   116bc:	089b      	lsrs	r3, r3, #2
   116be:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   116c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   116c4:	b1c2      	cbz	r2, 116f8 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   116c6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   116c8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   116cc:	f1b9 0f00 	cmp.w	r9, #0
   116d0:	d005      	beq.n	116de <cbvprintf_package+0x306>
   116d2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   116d4:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   116d6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   116da:	4297      	cmp	r7, r2
   116dc:	d10e      	bne.n	116fc <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   116de:	f1c5 0301 	rsb	r3, r5, #1
   116e2:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   116e6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   116ea:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   116ec:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   116f0:	4557      	cmp	r7, sl
   116f2:	d112      	bne.n	1171a <cbvprintf_package+0x342>
	return BUF_OFFSET;
   116f4:	1b60      	subs	r0, r4, r5
   116f6:	e689      	b.n	1140c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   116f8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   116fa:	e7e5      	b.n	116c8 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   116fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   11700:	0619      	lsls	r1, r3, #24
   11702:	d508      	bpl.n	11716 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   11704:	eb04 0e0c 	add.w	lr, r4, ip
   11708:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1170a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1170e:	f63f ae7b 	bhi.w	11408 <cbvprintf_package+0x30>
			*buf++ = pos;
   11712:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   11716:	3201      	adds	r2, #1
   11718:	e7df      	b.n	116da <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1171a:	f1b9 0f00 	cmp.w	r9, #0
   1171e:	d003      	beq.n	11728 <cbvprintf_package+0x350>
   11720:	f998 2000 	ldrsb.w	r2, [r8]
   11724:	2a00      	cmp	r2, #0
   11726:	db17      	blt.n	11758 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   11728:	9b02      	ldr	r3, [sp, #8]
   1172a:	b1d3      	cbz	r3, 11762 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   1172c:	f81a 200b 	ldrb.w	r2, [sl, fp]
   11730:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   11734:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   11736:	9b01      	ldr	r3, [sp, #4]
   11738:	1898      	adds	r0, r3, r2
   1173a:	4420      	add	r0, r4
   1173c:	42b0      	cmp	r0, r6
   1173e:	f63f ae63 	bhi.w	11408 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   11742:	f898 0000 	ldrb.w	r0, [r8]
   11746:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   1174a:	9900      	ldr	r1, [sp, #0]
   1174c:	9203      	str	r2, [sp, #12]
   1174e:	4620      	mov	r0, r4
   11750:	f011 fb30 	bl	22db4 <memcpy>
		buf += size;
   11754:	9a03      	ldr	r2, [sp, #12]
   11756:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   11758:	f10a 0a01 	add.w	sl, sl, #1
   1175c:	f108 0801 	add.w	r8, r8, #1
   11760:	e7c6      	b.n	116f0 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   11762:	f898 2000 	ldrb.w	r2, [r8]
   11766:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1176a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   1176c:	9b02      	ldr	r3, [sp, #8]
   1176e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   11772:	9800      	ldr	r0, [sp, #0]
   11774:	f011 fae7 	bl	22d46 <strlen>
   11778:	1c42      	adds	r2, r0, #1
   1177a:	e7dc      	b.n	11736 <cbvprintf_package+0x35e>
		return -EFAULT;
   1177c:	f06f 000d 	mvn.w	r0, #13
   11780:	e644      	b.n	1140c <cbvprintf_package+0x34>
   11782:	bf00      	nop

00011784 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   11784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11788:	b095      	sub	sp, #84	; 0x54
   1178a:	af00      	add	r7, sp, #0
   1178c:	4604      	mov	r4, r0
   1178e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   11792:	61bb      	str	r3, [r7, #24]
   11794:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   11798:	627a      	str	r2, [r7, #36]	; 0x24
   1179a:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   1179c:	6239      	str	r1, [r7, #32]
   1179e:	b951      	cbnz	r1, 117b6 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
   117a0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   117a2:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   117a4:	7880      	ldrb	r0, [r0, #2]
   117a6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   117aa:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   117ac:	460d      	mov	r5, r1
   117ae:	42ae      	cmp	r6, r5
   117b0:	d81a      	bhi.n	117e8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
   117b2:	1b03      	subs	r3, r0, r4
   117b4:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   117b6:	f894 9002 	ldrb.w	r9, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   117ba:	78e3      	ldrb	r3, [r4, #3]
   117bc:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   117be:	464e      	mov	r6, r9
	ro_cpy = ros_nbr &&
   117c0:	f1b9 0f00 	cmp.w	r9, #0
   117c4:	d002      	beq.n	117cc <cbprintf_package_convert+0x48>
   117c6:	f01b 0f01 	tst.w	fp, #1
   117ca:	d116      	bne.n	117fa <cbprintf_package_convert+0x76>
	rw_cpy = rws_nbr > 0 &&
   117cc:	697b      	ldr	r3, [r7, #20]
   117ce:	bb53      	cbnz	r3, 11826 <cbprintf_package_convert+0xa2>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   117d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   117d2:	b11b      	cbz	r3, 117dc <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
   117d4:	69ba      	ldr	r2, [r7, #24]
   117d6:	6a39      	ldr	r1, [r7, #32]
   117d8:	4620      	mov	r0, r4
   117da:	4798      	blx	r3
		}

		return in_len;
   117dc:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   117de:	4628      	mov	r0, r5
   117e0:	3754      	adds	r7, #84	; 0x54
   117e2:	46bd      	mov	sp, r7
   117e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   117e8:	f100 0801 	add.w	r8, r0, #1
		buf += strlen((const char *)buf) + 1;
   117ec:	4640      	mov	r0, r8
   117ee:	f011 faaa 	bl	22d46 <strlen>
   117f2:	3001      	adds	r0, #1
   117f4:	4440      	add	r0, r8
	for (int i = 0; i < s_nbr; i++) {
   117f6:	3501      	adds	r5, #1
   117f8:	e7d9      	b.n	117ae <cbprintf_package_convert+0x2a>
	rw_cpy = rws_nbr > 0 &&
   117fa:	f894 a000 	ldrb.w	sl, [r4]
   117fe:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11800:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   11802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   11804:	ea4f 028a 	mov.w	r2, sl, lsl #2
   11808:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   1180a:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   1180e:	2b00      	cmp	r3, #0
   11810:	f040 8101 	bne.w	11a16 <cbprintf_package_convert+0x292>
		out_len = (int)in_len;
   11814:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   11816:	46d0      	mov	r8, sl
   11818:	eb09 030a 	add.w	r3, r9, sl
	size_t strl_cnt = 0;
   1181c:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   1181e:	4543      	cmp	r3, r8
   11820:	d14e      	bne.n	118c0 <cbprintf_package_convert+0x13c>
   11822:	44ca      	add	sl, r9
   11824:	e013      	b.n	1184e <cbprintf_package_convert+0xca>
	rw_cpy = rws_nbr > 0 &&
   11826:	f01b 0f02 	tst.w	fp, #2
   1182a:	d0d1      	beq.n	117d0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
   1182c:	f894 a000 	ldrb.w	sl, [r4]
   11830:	ea4f 038a 	mov.w	r3, sl, lsl #2
   11834:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   11836:	6863      	ldr	r3, [r4, #4]
   11838:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   1183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   1183c:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   11840:	2b00      	cmp	r3, #0
   11842:	d178      	bne.n	11936 <cbprintf_package_convert+0x1b2>
		out_len = (int)in_len;
   11844:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11846:	f1b9 0f00 	cmp.w	r9, #0
   1184a:	d14e      	bne.n	118ea <cbprintf_package_convert+0x166>
	size_t strl_cnt = 0;
   1184c:	464e      	mov	r6, r9
		for (int i = 0; i < rws_nbr; i++) {
   1184e:	f01b 0f05 	tst.w	fp, #5
   11852:	bf0c      	ite	eq
   11854:	2302      	moveq	r3, #2
   11856:	2301      	movne	r3, #1
   11858:	627b      	str	r3, [r7, #36]	; 0x24
   1185a:	697b      	ldr	r3, [r7, #20]
   1185c:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11860:	f00b 0302 	and.w	r3, fp, #2
   11864:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < rws_nbr; i++) {
   11866:	45ca      	cmp	sl, r9
   11868:	d0b9      	beq.n	117de <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
   1186a:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   1186e:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   11872:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   11876:	4bad      	ldr	r3, [pc, #692]	; (11b2c <cbprintf_package_convert+0x3a8>)
   11878:	4598      	cmp	r8, r3
   1187a:	d302      	bcc.n	11882 <cbprintf_package_convert+0xfe>
   1187c:	4bac      	ldr	r3, [pc, #688]	; (11b30 <cbprintf_package_convert+0x3ac>)
   1187e:	4598      	cmp	r8, r3
   11880:	d339      	bcc.n	118f6 <cbprintf_package_convert+0x172>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   11882:	693b      	ldr	r3, [r7, #16]
   11884:	2b00      	cmp	r3, #0
   11886:	d043      	beq.n	11910 <cbprintf_package_convert+0x18c>
   11888:	69f8      	ldr	r0, [r7, #28]
   1188a:	f010 f9c1 	bl	21c10 <is_ptr>
   1188e:	2800      	cmp	r0, #0
   11890:	d03e      	beq.n	11910 <cbprintf_package_convert+0x18c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   11892:	46e8      	mov	r8, sp
   11894:	b08a      	sub	sp, #40	; 0x28
   11896:	466a      	mov	r2, sp
   11898:	4ba6      	ldr	r3, [pc, #664]	; (11b34 <cbprintf_package_convert+0x3b0>)
   1189a:	6153      	str	r3, [r2, #20]
   1189c:	69fb      	ldr	r3, [r7, #28]
   1189e:	e9c2 3106 	strd	r3, r1, [r2, #24]
   118a2:	f44f 7300 	mov.w	r3, #512	; 0x200
   118a6:	8413      	strh	r3, [r2, #32]
   118a8:	4ba3      	ldr	r3, [pc, #652]	; (11b38 <cbprintf_package_convert+0x3b4>)
   118aa:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   118ae:	48a3      	ldr	r0, [pc, #652]	; (11b3c <cbprintf_package_convert+0x3b8>)
   118b0:	2300      	movs	r3, #0
   118b2:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   118b6:	f001 fb81 	bl	12fbc <z_impl_z_log_msg_static_create>
				out_len -= 2;
   118ba:	3d02      	subs	r5, #2
   118bc:	46c5      	mov	sp, r8
				continue;
   118be:	e7d2      	b.n	11866 <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   118c0:	f818 2b01 	ldrb.w	r2, [r8], #1
   118c4:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   118c6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   118ca:	f011 fa3c 	bl	22d46 <strlen>
				if (strl && strl_cnt < strl_len) {
   118ce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   118d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   118d2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   118d4:	b13a      	cbz	r2, 118e6 <cbprintf_package_convert+0x162>
   118d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   118da:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   118dc:	bf3e      	ittt	cc
   118de:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   118e0:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   118e4:	3601      	addcc	r6, #1
				out_len += len;
   118e6:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   118e8:	e799      	b.n	1181e <cbprintf_package_convert+0x9a>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   118ea:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   118ee:	bf1c      	itt	ne
   118f0:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   118f2:	44ca      	addne	sl, r9
   118f4:	e7ab      	b.n	1184e <cbprintf_package_convert+0xca>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   118f6:	693b      	ldr	r3, [r7, #16]
   118f8:	b123      	cbz	r3, 11904 <cbprintf_package_convert+0x180>
   118fa:	69f8      	ldr	r0, [r7, #28]
   118fc:	f010 f988 	bl	21c10 <is_ptr>
   11900:	2800      	cmp	r0, #0
   11902:	d1c6      	bne.n	11892 <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11904:	f01b 0f01 	tst.w	fp, #1
   11908:	d105      	bne.n	11916 <cbprintf_package_convert+0x192>
					out_len -= drop_ro_str_pos ? 2 : 1;
   1190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1190c:	1aed      	subs	r5, r5, r3
   1190e:	e7aa      	b.n	11866 <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11910:	6a3b      	ldr	r3, [r7, #32]
   11912:	2b00      	cmp	r3, #0
   11914:	d0a7      	beq.n	11866 <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   11916:	4640      	mov	r0, r8
   11918:	f011 fa15 	bl	22d46 <strlen>
				if (strl && strl_cnt < strl_len) {
   1191c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1191e:	b143      	cbz	r3, 11932 <cbprintf_package_convert+0x1ae>
   11920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   11924:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   11926:	bf3f      	itttt	cc
   11928:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   1192a:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   1192c:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   11930:	3601      	addcc	r6, #1
				out_len += (len - 1);
   11932:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   11934:	e797      	b.n	11866 <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11936:	f1b9 0f00 	cmp.w	r9, #0
   1193a:	d071      	beq.n	11a20 <cbprintf_package_convert+0x29c>
   1193c:	f01b 0604 	ands.w	r6, fp, #4
   11940:	d071      	beq.n	11a26 <cbprintf_package_convert+0x2a2>
		keep_cnt = ros_nbr;
   11942:	46c8      	mov	r8, r9
		scpy_cnt = 0;
   11944:	2600      	movs	r6, #0
		dst = keep_str_pos;
   11946:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   1194a:	464a      	mov	r2, r9
   1194c:	4651      	mov	r1, sl
   1194e:	f011 fa31 	bl	22db4 <memcpy>
	str_pos += ros_nbr;
   11952:	697b      	ldr	r3, [r7, #20]
   11954:	005b      	lsls	r3, r3, #1
   11956:	60bb      	str	r3, [r7, #8]
   11958:	697b      	ldr	r3, [r7, #20]
   1195a:	44ca      	add	sl, r9
	for (int i = 0; i < rws_nbr; i++) {
   1195c:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   11960:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11962:	f00b 0302 	and.w	r3, fp, #2
   11966:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < rws_nbr; i++) {
   11968:	697b      	ldr	r3, [r7, #20]
   1196a:	459a      	cmp	sl, r3
   1196c:	d15d      	bne.n	11a2a <cbprintf_package_convert+0x2a6>
	out_desc.len = in_desc->len;
   1196e:	7823      	ldrb	r3, [r4, #0]
   11970:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11972:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   11974:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11978:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1197c:	bf0c      	ite	eq
   1197e:	ea4f 0158 	moveq.w	r1, r8, lsr #1
   11982:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11984:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   11988:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1198a:	f040 809d 	bne.w	11ac8 <cbprintf_package_convert+0x344>
   1198e:	f01b 0f04 	tst.w	fp, #4
   11992:	bf14      	ite	ne
   11994:	4640      	movne	r0, r8
   11996:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   11998:	f894 b002 	ldrb.w	fp, [r4, #2]
   1199c:	f894 a003 	ldrb.w	sl, [r4, #3]
   119a0:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
   119a2:	7062      	strb	r2, [r4, #1]
   119a4:	70a0      	strb	r0, [r4, #2]
   119a6:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   119a8:	69ba      	ldr	r2, [r7, #24]
   119aa:	68f9      	ldr	r1, [r7, #12]
   119ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   119ae:	4620      	mov	r0, r4
   119b0:	4798      	blx	r3
	if (rv < 0) {
   119b2:	1e05      	subs	r5, r0, #0
   119b4:	f6ff af13 	blt.w	117de <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
   119b8:	69fb      	ldr	r3, [r7, #28]
   119ba:	7023      	strb	r3, [r4, #0]
   119bc:	693b      	ldr	r3, [r7, #16]
   119be:	7063      	strb	r3, [r4, #1]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   119c0:	4641      	mov	r1, r8
   119c2:	69ba      	ldr	r2, [r7, #24]
   119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   119c6:	f884 b002 	strb.w	fp, [r4, #2]
   119ca:	f884 a003 	strb.w	sl, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   119ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   119d2:	4798      	blx	r3
	if (rv < 0) {
   119d4:	f1b0 0800 	subs.w	r8, r0, #0
   119d8:	f2c0 80a3 	blt.w	11b22 <cbprintf_package_convert+0x39e>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   119dc:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   119de:	69ba      	ldr	r2, [r7, #24]
   119e0:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   119e2:	eba3 0109 	sub.w	r1, r3, r9
   119e6:	68fb      	ldr	r3, [r7, #12]
   119e8:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   119ea:	68bb      	ldr	r3, [r7, #8]
   119ec:	1ac9      	subs	r1, r1, r3
   119ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   119f0:	4798      	blx	r3
	if (rv < 0) {
   119f2:	2800      	cmp	r0, #0
   119f4:	f2c0 8097 	blt.w	11b26 <cbprintf_package_convert+0x3a2>
	out_len += rv;
   119f8:	44a8      	add	r8, r5
	out_len += rv;
   119fa:	eb08 0500 	add.w	r5, r8, r0
	for (int i = 0; i < scpy_cnt; i++) {
   119fe:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   11a02:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   11a06:	45b3      	cmp	fp, r6
   11a08:	db60      	blt.n	11acc <cbprintf_package_convert+0x348>
	(void)cb(NULL, 0, ctx);
   11a0a:	2100      	movs	r1, #0
   11a0c:	69ba      	ldr	r2, [r7, #24]
   11a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11a10:	4608      	mov	r0, r1
   11a12:	4798      	blx	r3
	return out_len;
   11a14:	e6e3      	b.n	117de <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
   11a16:	f04f 0800 	mov.w	r8, #0
   11a1a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   11a1e:	e794      	b.n	1194a <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   11a20:	464e      	mov	r6, r9
		keep_cnt = 0;
   11a22:	46c8      	mov	r8, r9
   11a24:	e795      	b.n	11952 <cbprintf_package_convert+0x1ce>
   11a26:	46b0      	mov	r8, r6
   11a28:	e793      	b.n	11952 <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   11a2a:	f81a 1b02 	ldrb.w	r1, [sl], #2
   11a2e:	4a3f      	ldr	r2, [pc, #252]	; (11b2c <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
   11a30:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   11a34:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   11a38:	4293      	cmp	r3, r2
   11a3a:	d302      	bcc.n	11a42 <cbprintf_package_convert+0x2be>
   11a3c:	4a3c      	ldr	r2, [pc, #240]	; (11b30 <cbprintf_package_convert+0x3ac>)
   11a3e:	4293      	cmp	r3, r2
   11a40:	d31c      	bcc.n	11a7c <cbprintf_package_convert+0x2f8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11a42:	693b      	ldr	r3, [r7, #16]
   11a44:	b123      	cbz	r3, 11a50 <cbprintf_package_convert+0x2cc>
   11a46:	69f8      	ldr	r0, [r7, #28]
   11a48:	f010 f8e2 	bl	21c10 <is_ptr>
   11a4c:	2800      	cmp	r0, #0
   11a4e:	d18b      	bne.n	11968 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   11a50:	687b      	ldr	r3, [r7, #4]
   11a52:	b9f3      	cbnz	r3, 11a92 <cbprintf_package_convert+0x30e>
				keep_str_pos[keep_cnt++] = arg_idx;
   11a54:	f108 0228 	add.w	r2, r8, #40	; 0x28
   11a58:	f107 0028 	add.w	r0, r7, #40	; 0x28
   11a5c:	4402      	add	r2, r0
   11a5e:	f108 0301 	add.w	r3, r8, #1
   11a62:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   11a66:	f107 0250 	add.w	r2, r7, #80	; 0x50
   11a6a:	fa52 f383 	uxtab	r3, r2, r3
   11a6e:	f108 0802 	add.w	r8, r8, #2
   11a72:	fa5f f888 	uxtb.w	r8, r8
   11a76:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   11a7a:	e775      	b.n	11968 <cbprintf_package_convert+0x1e4>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   11a7c:	693b      	ldr	r3, [r7, #16]
   11a7e:	b12b      	cbz	r3, 11a8c <cbprintf_package_convert+0x308>
   11a80:	69f8      	ldr	r0, [r7, #28]
   11a82:	f010 f8c5 	bl	21c10 <is_ptr>
   11a86:	2800      	cmp	r0, #0
   11a88:	f47f af6e 	bne.w	11968 <cbprintf_package_convert+0x1e4>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   11a8c:	f01b 0f01 	tst.w	fp, #1
   11a90:	d009      	beq.n	11aa6 <cbprintf_package_convert+0x322>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   11a92:	f106 0228 	add.w	r2, r6, #40	; 0x28
   11a96:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11a9a:	1c73      	adds	r3, r6, #1
   11a9c:	1856      	adds	r6, r2, r1
   11a9e:	f806 5c20 	strb.w	r5, [r6, #-32]
   11aa2:	b2de      	uxtb	r6, r3
   11aa4:	e760      	b.n	11968 <cbprintf_package_convert+0x1e4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   11aa6:	f01b 0f04 	tst.w	fp, #4
   11aaa:	f43f af5d 	beq.w	11968 <cbprintf_package_convert+0x1e4>
				keep_str_pos[keep_cnt++] = arg_pos;
   11aae:	f108 0228 	add.w	r2, r8, #40	; 0x28
   11ab2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   11ab6:	f108 0301 	add.w	r3, r8, #1
   11aba:	eb02 0801 	add.w	r8, r2, r1
   11abe:	f808 5c10 	strb.w	r5, [r8, #-16]
   11ac2:	fa5f f883 	uxtb.w	r8, r3
   11ac6:	e74f      	b.n	11968 <cbprintf_package_convert+0x1e4>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   11ac8:	2000      	movs	r0, #0
   11aca:	e765      	b.n	11998 <cbprintf_package_convert+0x214>
		uint8_t loc = cpy_str_pos[i];
   11acc:	f81b 300a 	ldrb.w	r3, [fp, sl]
   11ad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   11ad4:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   11ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   11ada:	b1fb      	cbz	r3, 11b1c <cbprintf_package_convert+0x398>
   11adc:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   11ae0:	69ba      	ldr	r2, [r7, #24]
   11ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ae4:	2101      	movs	r1, #1
   11ae6:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   11aea:	4798      	blx	r3
		if (rv < 0) {
   11aec:	2800      	cmp	r0, #0
   11aee:	db1a      	blt.n	11b26 <cbprintf_package_convert+0x3a2>
		out_len += rv;
   11af0:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   11af2:	f1b8 0f00 	cmp.w	r8, #0
   11af6:	d106      	bne.n	11b06 <cbprintf_package_convert+0x382>
   11af8:	4648      	mov	r0, r9
   11afa:	f011 f924 	bl	22d46 <strlen>
   11afe:	f100 0801 	add.w	r8, r0, #1
   11b02:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   11b06:	69ba      	ldr	r2, [r7, #24]
   11b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11b0a:	4641      	mov	r1, r8
   11b0c:	4648      	mov	r0, r9
   11b0e:	4798      	blx	r3
		if (rv < 0) {
   11b10:	2800      	cmp	r0, #0
   11b12:	db08      	blt.n	11b26 <cbprintf_package_convert+0x3a2>
		out_len += rv;
   11b14:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   11b16:	f10b 0b01 	add.w	fp, fp, #1
   11b1a:	e774      	b.n	11a06 <cbprintf_package_convert+0x282>
		uint16_t str_len = strl ? strl[i] : 0;
   11b1c:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   11b20:	e7de      	b.n	11ae0 <cbprintf_package_convert+0x35c>
   11b22:	4645      	mov	r5, r8
   11b24:	e65b      	b.n	117de <cbprintf_package_convert+0x5a>
   11b26:	4605      	mov	r5, r0
   11b28:	e659      	b.n	117de <cbprintf_package_convert+0x5a>
   11b2a:	bf00      	nop
   11b2c:	00025b94 	.word	0x00025b94
   11b30:	00028760 	.word	0x00028760
   11b34:	00026cb6 	.word	0x00026cb6
   11b38:	01000004 	.word	0x01000004
   11b3c:	00025fa0 	.word	0x00025fa0

00011b40 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   11b40:	4b01      	ldr	r3, [pc, #4]	; (11b48 <__printk_hook_install+0x8>)
   11b42:	6018      	str	r0, [r3, #0]
}
   11b44:	4770      	bx	lr
   11b46:	bf00      	nop
   11b48:	20000700 	.word	0x20000700

00011b4c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11b4c:	b530      	push	{r4, r5, lr}
   11b4e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11b50:	2500      	movs	r5, #0
   11b52:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   11b56:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   11b58:	9500      	str	r5, [sp, #0]
   11b5a:	a903      	add	r1, sp, #12
   11b5c:	4805      	ldr	r0, [pc, #20]	; (11b74 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   11b5e:	9505      	str	r5, [sp, #20]
   11b60:	f000 f918 	bl	11d94 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11b64:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   11b68:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11b6a:	bfb8      	it	lt
   11b6c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11b6e:	b007      	add	sp, #28
   11b70:	bd30      	pop	{r4, r5, pc}
   11b72:	bf00      	nop
   11b74:	00021c5f 	.word	0x00021c5f

00011b78 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b7c:	8b05      	ldrh	r5, [r0, #24]
{
   11b7e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11b80:	0728      	lsls	r0, r5, #28
{
   11b82:	4690      	mov	r8, r2
	if (processing) {
   11b84:	d411      	bmi.n	11baa <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   11b86:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11b88:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11b8c:	f040 80cd 	bne.w	11d2a <process_event+0x1b2>
			evt = process_recheck(mgr);
   11b90:	4620      	mov	r0, r4
   11b92:	f010 fa62 	bl	2205a <process_recheck>
		}

		if (evt == EVT_NOP) {
   11b96:	b178      	cbz	r0, 11bb8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   11b98:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11b9a:	8b21      	ldrh	r1, [r4, #24]
   11b9c:	2804      	cmp	r0, #4
   11b9e:	d811      	bhi.n	11bc4 <process_event+0x4c>
   11ba0:	e8df f000 	tbb	[pc, r0]
   11ba4:	856d10c3 	.word	0x856d10c3
   11ba8:	95          	.byte	0x95
   11ba9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   11baa:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11bac:	bf0c      	ite	eq
   11bae:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11bb2:	f045 0520 	orrne.w	r5, r5, #32
   11bb6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11bb8:	f388 8811 	msr	BASEPRI, r8
   11bbc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11bc4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11bc8:	45aa      	cmp	sl, r5
   11bca:	f000 80a6 	beq.w	11d1a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   11bce:	2700      	movs	r7, #0
   11bd0:	46b9      	mov	r9, r7
   11bd2:	463e      	mov	r6, r7
   11bd4:	68a3      	ldr	r3, [r4, #8]
   11bd6:	2b00      	cmp	r3, #0
   11bd8:	f000 80bd 	beq.w	11d56 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11bdc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11be0:	8321      	strh	r1, [r4, #24]
   11be2:	f388 8811 	msr	BASEPRI, r8
   11be6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11bea:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11bec:	2900      	cmp	r1, #0
   11bee:	f000 80bb 	beq.w	11d68 <process_event+0x1f0>
	return node->next;
   11bf2:	680d      	ldr	r5, [r1, #0]
   11bf4:	2900      	cmp	r1, #0
   11bf6:	f000 80b7 	beq.w	11d68 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   11bfa:	f8d1 8004 	ldr.w	r8, [r1, #4]
   11bfe:	4633      	mov	r3, r6
   11c00:	4652      	mov	r2, sl
   11c02:	4620      	mov	r0, r4
   11c04:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11c06:	2d00      	cmp	r5, #0
   11c08:	d076      	beq.n	11cf8 <process_event+0x180>
   11c0a:	682b      	ldr	r3, [r5, #0]
   11c0c:	4629      	mov	r1, r5
   11c0e:	461d      	mov	r5, r3
   11c10:	e7f0      	b.n	11bf4 <process_event+0x7c>
   11c12:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   11c16:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11c18:	2a01      	cmp	r2, #1
   11c1a:	d81b      	bhi.n	11c54 <process_event+0xdc>
	list->head = NULL;
   11c1c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c1e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11c22:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   11c24:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c26:	b289      	uxth	r1, r1
	list->tail = NULL;
   11c28:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11c2c:	d109      	bne.n	11c42 <process_event+0xca>
   11c2e:	463b      	mov	r3, r7
   11c30:	e003      	b.n	11c3a <process_event+0xc2>
				mgr->refs += 1U;
   11c32:	8b62      	ldrh	r2, [r4, #26]
   11c34:	3201      	adds	r2, #1
   11c36:	8362      	strh	r2, [r4, #26]
	return node->next;
   11c38:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11c3a:	2b00      	cmp	r3, #0
   11c3c:	d1f9      	bne.n	11c32 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c3e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11c42:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11c44:	4620      	mov	r0, r4
   11c46:	f010 fa08 	bl	2205a <process_recheck>
   11c4a:	2800      	cmp	r0, #0
   11c4c:	d07b      	beq.n	11d46 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11c4e:	f041 0120 	orr.w	r1, r1, #32
   11c52:	e077      	b.n	11d44 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11c54:	2b04      	cmp	r3, #4
   11c56:	d10a      	bne.n	11c6e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c58:	f021 0107 	bic.w	r1, r1, #7
   11c5c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11c5e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11c60:	4620      	mov	r0, r4
   11c62:	f010 f9fa 	bl	2205a <process_recheck>
   11c66:	b110      	cbz	r0, 11c6e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11c68:	f041 0120 	orr.w	r1, r1, #32
   11c6c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11c6e:	8b21      	ldrh	r1, [r4, #24]
   11c70:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11c74:	45aa      	cmp	sl, r5
   11c76:	d050      	beq.n	11d1a <process_event+0x1a2>
   11c78:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   11c7a:	46b9      	mov	r9, r7
   11c7c:	e7aa      	b.n	11bd4 <process_event+0x5c>
			transit = mgr->transitions->start;
   11c7e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11c80:	f021 0107 	bic.w	r1, r1, #7
   11c84:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   11c88:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   11c8a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11c8e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11c90:	d12d      	bne.n	11cee <process_event+0x176>
		    || (transit != NULL)) {
   11c92:	f1b9 0f00 	cmp.w	r9, #0
   11c96:	d040      	beq.n	11d1a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11c98:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11c9c:	8321      	strh	r1, [r4, #24]
   11c9e:	f388 8811 	msr	BASEPRI, r8
   11ca2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   11ca6:	493a      	ldr	r1, [pc, #232]	; (11d90 <process_event+0x218>)
   11ca8:	4620      	mov	r0, r4
   11caa:	47c8      	blx	r9
   11cac:	e029      	b.n	11d02 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cae:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   11cb2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cb4:	f041 0104 	orr.w	r1, r1, #4
   11cb8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   11cba:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   11cbc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11cc0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11cc2:	d0e6      	beq.n	11c92 <process_event+0x11a>
   11cc4:	2700      	movs	r7, #0
		res = 0;
   11cc6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11cc8:	f04f 0a04 	mov.w	sl, #4
   11ccc:	e782      	b.n	11bd4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cce:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   11cd2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11cd4:	f041 0105 	orr.w	r1, r1, #5
   11cd8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   11cda:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   11cdc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11ce0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11ce2:	d0d6      	beq.n	11c92 <process_event+0x11a>
   11ce4:	2700      	movs	r7, #0
		res = 0;
   11ce6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11ce8:	f04f 0a05 	mov.w	sl, #5
   11cec:	e772      	b.n	11bd4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   11cee:	2700      	movs	r7, #0
		res = 0;
   11cf0:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11cf2:	f04f 0a06 	mov.w	sl, #6
   11cf6:	e76d      	b.n	11bd4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11cf8:	462b      	mov	r3, r5
   11cfa:	e787      	b.n	11c0c <process_event+0x94>
			if (transit != NULL) {
   11cfc:	f1b9 0f00 	cmp.w	r9, #0
   11d00:	d1d1      	bne.n	11ca6 <process_event+0x12e>
	__asm__ volatile(
   11d02:	f04f 0340 	mov.w	r3, #64	; 0x40
   11d06:	f3ef 8811 	mrs	r8, BASEPRI
   11d0a:	f383 8812 	msr	BASEPRI_MAX, r3
   11d0e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11d12:	8b23      	ldrh	r3, [r4, #24]
   11d14:	f023 0308 	bic.w	r3, r3, #8
   11d18:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   11d1a:	8b25      	ldrh	r5, [r4, #24]
   11d1c:	06ea      	lsls	r2, r5, #27
   11d1e:	d52e      	bpl.n	11d7e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11d20:	f025 0310 	bic.w	r3, r5, #16
   11d24:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   11d26:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   11d2a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11d2c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11d2e:	2e00      	cmp	r6, #0
   11d30:	f6bf af6f 	bge.w	11c12 <process_event+0x9a>
	list->head = NULL;
   11d34:	2300      	movs	r3, #0
		*clients = mgr->clients;
   11d36:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   11d38:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11d3c:	f021 0107 	bic.w	r1, r1, #7
   11d40:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11d44:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11d46:	8b21      	ldrh	r1, [r4, #24]
   11d48:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11d4c:	45aa      	cmp	sl, r5
   11d4e:	f04f 0900 	mov.w	r9, #0
   11d52:	f47f af3f 	bne.w	11bd4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   11d56:	2f00      	cmp	r7, #0
   11d58:	d09b      	beq.n	11c92 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11d5a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11d5e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   11d60:	f388 8811 	msr	BASEPRI, r8
   11d64:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   11d68:	2f00      	cmp	r7, #0
   11d6a:	d0c7      	beq.n	11cfc <process_event+0x184>
	return node->next;
   11d6c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   11d6e:	4639      	mov	r1, r7
   11d70:	4633      	mov	r3, r6
   11d72:	4652      	mov	r2, sl
   11d74:	4620      	mov	r0, r4
   11d76:	f010 f99c 	bl	220b2 <notify_one>
	list->head = node;
   11d7a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   11d7c:	e7f4      	b.n	11d68 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11d7e:	06ab      	lsls	r3, r5, #26
   11d80:	f57f af1a 	bpl.w	11bb8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11d84:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11d88:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   11d8a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11d8e:	e6ff      	b.n	11b90 <process_event+0x18>
   11d90:	000220df 	.word	0x000220df

00011d94 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d98:	b09f      	sub	sp, #124	; 0x7c
   11d9a:	4682      	mov	sl, r0
   11d9c:	9103      	str	r1, [sp, #12]
   11d9e:	4616      	mov	r6, r2
   11da0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11da2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11da4:	7830      	ldrb	r0, [r6, #0]
   11da6:	b910      	cbnz	r0, 11dae <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11da8:	4628      	mov	r0, r5
   11daa:	f000 bd8b 	b.w	128c4 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
   11dae:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   11db0:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11db2:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   11db4:	d006      	beq.n	11dc4 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   11db6:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   11db8:	47d0      	blx	sl
   11dba:	2800      	cmp	r0, #0
   11dbc:	f2c0 8582 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   11dc0:	3501      	adds	r5, #1
		if (bps == NULL) {
   11dc2:	e22b      	b.n	1221c <z_cbvprintf_impl+0x488>
		} state = {
   11dc4:	2218      	movs	r2, #24
   11dc6:	2100      	movs	r1, #0
   11dc8:	a810      	add	r0, sp, #64	; 0x40
   11dca:	f010 fffe 	bl	22dca <memset>
	if (*sp == '%') {
   11dce:	7873      	ldrb	r3, [r6, #1]
   11dd0:	2b25      	cmp	r3, #37	; 0x25
   11dd2:	d07d      	beq.n	11ed0 <z_cbvprintf_impl+0x13c>
   11dd4:	2300      	movs	r3, #0
   11dd6:	1c70      	adds	r0, r6, #1
   11dd8:	4698      	mov	r8, r3
   11dda:	469e      	mov	lr, r3
   11ddc:	469c      	mov	ip, r3
   11dde:	461f      	mov	r7, r3
   11de0:	4601      	mov	r1, r0
		switch (*sp) {
   11de2:	f810 2b01 	ldrb.w	r2, [r0], #1
   11de6:	2a2b      	cmp	r2, #43	; 0x2b
   11de8:	f000 80a1 	beq.w	11f2e <z_cbvprintf_impl+0x19a>
   11dec:	f200 8098 	bhi.w	11f20 <z_cbvprintf_impl+0x18c>
   11df0:	2a20      	cmp	r2, #32
   11df2:	f000 809f 	beq.w	11f34 <z_cbvprintf_impl+0x1a0>
   11df6:	2a23      	cmp	r2, #35	; 0x23
   11df8:	f000 809f 	beq.w	11f3a <z_cbvprintf_impl+0x1a6>
   11dfc:	b12b      	cbz	r3, 11e0a <z_cbvprintf_impl+0x76>
   11dfe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11e06:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11e0a:	f1b8 0f00 	cmp.w	r8, #0
   11e0e:	d005      	beq.n	11e1c <z_cbvprintf_impl+0x88>
   11e10:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e14:	f043 0320 	orr.w	r3, r3, #32
   11e18:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11e1c:	f1be 0f00 	cmp.w	lr, #0
   11e20:	d005      	beq.n	11e2e <z_cbvprintf_impl+0x9a>
   11e22:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e26:	f043 0310 	orr.w	r3, r3, #16
   11e2a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11e2e:	f1bc 0f00 	cmp.w	ip, #0
   11e32:	d005      	beq.n	11e40 <z_cbvprintf_impl+0xac>
   11e34:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e38:	f043 0308 	orr.w	r3, r3, #8
   11e3c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11e40:	b12f      	cbz	r7, 11e4e <z_cbvprintf_impl+0xba>
   11e42:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e46:	f043 0304 	orr.w	r3, r3, #4
   11e4a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   11e4e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11e52:	f003 0044 	and.w	r0, r3, #68	; 0x44
   11e56:	2844      	cmp	r0, #68	; 0x44
   11e58:	d103      	bne.n	11e62 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   11e5a:	f36f 1386 	bfc	r3, #6, #1
   11e5e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   11e62:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   11e66:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   11e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11e6c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   11e70:	d17f      	bne.n	11f72 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
   11e72:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11e76:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   11e7a:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11e7c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
   11e80:	781a      	ldrb	r2, [r3, #0]
   11e82:	2a2e      	cmp	r2, #46	; 0x2e
   11e84:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11e88:	bf0c      	ite	eq
   11e8a:	2101      	moveq	r1, #1
   11e8c:	2100      	movne	r1, #0
   11e8e:	f361 0241 	bfi	r2, r1, #1, #1
   11e92:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   11e96:	d178      	bne.n	11f8a <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
   11e98:	785a      	ldrb	r2, [r3, #1]
   11e9a:	2a2a      	cmp	r2, #42	; 0x2a
   11e9c:	d06e      	beq.n	11f7c <z_cbvprintf_impl+0x1e8>
	++sp;
   11e9e:	3301      	adds	r3, #1
	size_t val = 0;
   11ea0:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11ea2:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11ea6:	4619      	mov	r1, r3
   11ea8:	f811 0b01 	ldrb.w	r0, [r1], #1
   11eac:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11eb0:	2f09      	cmp	r7, #9
   11eb2:	f240 80af 	bls.w	12014 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
   11eb6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
   11eba:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   11ebc:	f3c1 0040 	ubfx	r0, r1, #1, #1
   11ec0:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   11ec4:	460a      	mov	r2, r1
   11ec6:	f360 0241 	bfi	r2, r0, #1, #1
   11eca:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   11ece:	e05c      	b.n	11f8a <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
   11ed0:	1cb2      	adds	r2, r6, #2
   11ed2:	9206      	str	r2, [sp, #24]
   11ed4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   11ed8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11edc:	07df      	lsls	r7, r3, #31
   11ede:	f140 8154 	bpl.w	1218a <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
   11ee2:	f854 2b04 	ldr.w	r2, [r4], #4
   11ee6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   11ee8:	2a00      	cmp	r2, #0
   11eea:	da08      	bge.n	11efe <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
   11eec:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   11ef0:	f042 0204 	orr.w	r2, r2, #4
   11ef4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   11ef8:	9a04      	ldr	r2, [sp, #16]
   11efa:	4252      	negs	r2, r2
		int width = -1;
   11efc:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   11efe:	0758      	lsls	r0, r3, #29
   11f00:	f140 814b 	bpl.w	1219a <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
   11f04:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   11f08:	2f00      	cmp	r7, #0
   11f0a:	f280 814a 	bge.w	121a2 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
   11f0e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11f12:	f36f 0341 	bfc	r3, #1, #1
   11f16:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   11f1a:	f04f 37ff 	mov.w	r7, #4294967295
   11f1e:	e140      	b.n	121a2 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
   11f20:	2a2d      	cmp	r2, #45	; 0x2d
   11f22:	d00d      	beq.n	11f40 <z_cbvprintf_impl+0x1ac>
   11f24:	2a30      	cmp	r2, #48	; 0x30
   11f26:	f47f af69 	bne.w	11dfc <z_cbvprintf_impl+0x68>
   11f2a:	2301      	movs	r3, #1
	} while (loop);
   11f2c:	e758      	b.n	11de0 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   11f2e:	f04f 0c01 	mov.w	ip, #1
   11f32:	e755      	b.n	11de0 <z_cbvprintf_impl+0x4c>
   11f34:	f04f 0e01 	mov.w	lr, #1
   11f38:	e752      	b.n	11de0 <z_cbvprintf_impl+0x4c>
   11f3a:	f04f 0801 	mov.w	r8, #1
   11f3e:	e74f      	b.n	11de0 <z_cbvprintf_impl+0x4c>
   11f40:	2701      	movs	r7, #1
   11f42:	e74d      	b.n	11de0 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
   11f44:	fb0e 7202 	mla	r2, lr, r2, r7
   11f48:	3a30      	subs	r2, #48	; 0x30
   11f4a:	4603      	mov	r3, r0
   11f4c:	4618      	mov	r0, r3
   11f4e:	f810 7b01 	ldrb.w	r7, [r0], #1
   11f52:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11f56:	f1bc 0f09 	cmp.w	ip, #9
   11f5a:	d9f3      	bls.n	11f44 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
   11f5c:	4299      	cmp	r1, r3
   11f5e:	d08f      	beq.n	11e80 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
   11f60:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
   11f64:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   11f66:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   11f68:	f362 0141 	bfi	r1, r2, #1, #1
   11f6c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   11f70:	e786      	b.n	11e80 <z_cbvprintf_impl+0xec>
   11f72:	460b      	mov	r3, r1
	size_t val = 0;
   11f74:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11f76:	f04f 0e0a 	mov.w	lr, #10
   11f7a:	e7e7      	b.n	11f4c <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
   11f7c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11f80:	f042 0204 	orr.w	r2, r2, #4
   11f84:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   11f88:	3302      	adds	r3, #2
	switch (*sp) {
   11f8a:	781a      	ldrb	r2, [r3, #0]
   11f8c:	2a6c      	cmp	r2, #108	; 0x6c
   11f8e:	d061      	beq.n	12054 <z_cbvprintf_impl+0x2c0>
   11f90:	d845      	bhi.n	1201e <z_cbvprintf_impl+0x28a>
   11f92:	2a68      	cmp	r2, #104	; 0x68
   11f94:	d04b      	beq.n	1202e <z_cbvprintf_impl+0x29a>
   11f96:	2a6a      	cmp	r2, #106	; 0x6a
   11f98:	d065      	beq.n	12066 <z_cbvprintf_impl+0x2d2>
   11f9a:	2a4c      	cmp	r2, #76	; 0x4c
   11f9c:	d06b      	beq.n	12076 <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
   11f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
   11fa2:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   11fa4:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   11fa6:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   11faa:	f200 80ad 	bhi.w	12108 <z_cbvprintf_impl+0x374>
   11fae:	2a6d      	cmp	r2, #109	; 0x6d
   11fb0:	d86e      	bhi.n	12090 <z_cbvprintf_impl+0x2fc>
   11fb2:	2a69      	cmp	r2, #105	; 0x69
   11fb4:	f200 80a8 	bhi.w	12108 <z_cbvprintf_impl+0x374>
   11fb8:	2a57      	cmp	r2, #87	; 0x57
   11fba:	f200 8088 	bhi.w	120ce <z_cbvprintf_impl+0x33a>
   11fbe:	2a41      	cmp	r2, #65	; 0x41
   11fc0:	d004      	beq.n	11fcc <z_cbvprintf_impl+0x238>
   11fc2:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   11fc6:	2b02      	cmp	r3, #2
   11fc8:	f200 809e 	bhi.w	12108 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
   11fcc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   11fd0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   11fd4:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   11fd6:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   11fda:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   11fde:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
   11fe2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   11fe6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   11fea:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
   11fee:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   11ff2:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   11ff4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   11ff8:	b2cb      	uxtb	r3, r1
   11ffa:	f100 80c4 	bmi.w	12186 <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
   11ffe:	f003 0278 	and.w	r2, r3, #120	; 0x78
   12002:	2a18      	cmp	r2, #24
   12004:	f040 80ae 	bne.w	12164 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
   12008:	f36f 03c6 	bfc	r3, #3, #4
   1200c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   12010:	2300      	movs	r3, #0
   12012:	e09d      	b.n	12150 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
   12014:	fb0c 0202 	mla	r2, ip, r2, r0
   12018:	3a30      	subs	r2, #48	; 0x30
   1201a:	460b      	mov	r3, r1
   1201c:	e743      	b.n	11ea6 <z_cbvprintf_impl+0x112>
	switch (*sp) {
   1201e:	2a74      	cmp	r2, #116	; 0x74
   12020:	d025      	beq.n	1206e <z_cbvprintf_impl+0x2da>
   12022:	2a7a      	cmp	r2, #122	; 0x7a
   12024:	d1bb      	bne.n	11f9e <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
   12026:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1202a:	2106      	movs	r1, #6
   1202c:	e00c      	b.n	12048 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
   1202e:	785a      	ldrb	r2, [r3, #1]
   12030:	2a68      	cmp	r2, #104	; 0x68
   12032:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12036:	d106      	bne.n	12046 <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
   12038:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1203a:	f361 02c6 	bfi	r2, r1, #3, #4
   1203e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   12042:	3302      	adds	r3, #2
   12044:	e7ab      	b.n	11f9e <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
   12046:	2102      	movs	r1, #2
   12048:	f361 02c6 	bfi	r2, r1, #3, #4
   1204c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   12050:	3301      	adds	r3, #1
   12052:	e7a4      	b.n	11f9e <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
   12054:	785a      	ldrb	r2, [r3, #1]
   12056:	2a6c      	cmp	r2, #108	; 0x6c
   12058:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1205c:	d101      	bne.n	12062 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
   1205e:	2104      	movs	r1, #4
   12060:	e7eb      	b.n	1203a <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
   12062:	2103      	movs	r1, #3
   12064:	e7f0      	b.n	12048 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
   12066:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1206a:	2105      	movs	r1, #5
   1206c:	e7ec      	b.n	12048 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
   1206e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12072:	2107      	movs	r1, #7
   12074:	e7e8      	b.n	12048 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
   12076:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1207a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1207e:	f022 0202 	bic.w	r2, r2, #2
   12082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12086:	f042 0202 	orr.w	r2, r2, #2
   1208a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1208e:	e7df      	b.n	12050 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
   12090:	3a6e      	subs	r2, #110	; 0x6e
   12092:	b2d3      	uxtb	r3, r2
   12094:	2201      	movs	r2, #1
   12096:	409a      	lsls	r2, r3
   12098:	f240 4382 	movw	r3, #1154	; 0x482
   1209c:	421a      	tst	r2, r3
   1209e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   120a2:	d138      	bne.n	12116 <z_cbvprintf_impl+0x382>
   120a4:	f012 0f24 	tst.w	r2, #36	; 0x24
   120a8:	d160      	bne.n	1216c <z_cbvprintf_impl+0x3d8>
   120aa:	07d1      	lsls	r1, r2, #31
   120ac:	d52c      	bpl.n	12108 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
   120ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   120b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   120b6:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   120ba:	2103      	movs	r1, #3
   120bc:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   120c0:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
   120c4:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   120c8:	eb43 030c 	adc.w	r3, r3, ip
   120cc:	e040      	b.n	12150 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
   120ce:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   120d2:	b2c9      	uxtb	r1, r1
   120d4:	2001      	movs	r0, #1
   120d6:	fa00 f101 	lsl.w	r1, r0, r1
   120da:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   120de:	f47f af75 	bne.w	11fcc <z_cbvprintf_impl+0x238>
   120e2:	f640 0301 	movw	r3, #2049	; 0x801
   120e6:	4219      	tst	r1, r3
   120e8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   120ec:	d119      	bne.n	12122 <z_cbvprintf_impl+0x38e>
   120ee:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   120f2:	d009      	beq.n	12108 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
   120f4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   120f8:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   120fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12100:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12102:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12106:	d183      	bne.n	12010 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
   12108:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1210c:	f043 0301 	orr.w	r3, r3, #1
   12110:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   12114:	e77c      	b.n	12010 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
   12116:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1211a:	2102      	movs	r1, #2
   1211c:	f361 0202 	bfi	r2, r1, #0, #3
   12120:	e7ec      	b.n	120fc <z_cbvprintf_impl+0x368>
   12122:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   12126:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12128:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   1212c:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12130:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12132:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   12136:	bf02      	ittt	eq
   12138:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   1213c:	f041 0101 	orreq.w	r1, r1, #1
   12140:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   12144:	2a63      	cmp	r2, #99	; 0x63
   12146:	f47f af63 	bne.w	12010 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1214a:	3b00      	subs	r3, #0
   1214c:	bf18      	it	ne
   1214e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12150:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   12154:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12158:	430b      	orrs	r3, r1
   1215a:	f363 0241 	bfi	r2, r3, #1, #1
   1215e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   12162:	e6b9      	b.n	11ed8 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
   12164:	f013 0f38 	tst.w	r3, #56	; 0x38
   12168:	d1ce      	bne.n	12108 <z_cbvprintf_impl+0x374>
   1216a:	e751      	b.n	12010 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
   1216c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12170:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12172:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12176:	f361 0202 	bfi	r2, r1, #0, #3
   1217a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1217e:	bf14      	ite	ne
   12180:	2301      	movne	r3, #1
   12182:	2300      	moveq	r3, #0
   12184:	e7e4      	b.n	12150 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
   12186:	2301      	movs	r3, #1
   12188:	e7e2      	b.n	12150 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
   1218a:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1218e:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12190:	bfb4      	ite	lt
   12192:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   12194:	f04f 32ff 	movge.w	r2, #4294967295
   12198:	e6b0      	b.n	11efc <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
   1219a:	0799      	lsls	r1, r3, #30
   1219c:	f57f aebd 	bpl.w	11f1a <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
   121a0:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   121a2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
   121a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   121a8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   121ac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   121b0:	f003 0207 	and.w	r2, r3, #7
   121b4:	2a04      	cmp	r2, #4
   121b6:	d107      	bne.n	121c8 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
   121b8:	078a      	lsls	r2, r1, #30
   121ba:	d405      	bmi.n	121c8 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
   121bc:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   121c0:	2a00      	cmp	r2, #0
   121c2:	bfac      	ite	ge
   121c4:	2706      	movge	r7, #6
   121c6:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   121c8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   121cc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   121ce:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   121d2:	d133      	bne.n	1223c <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
   121d4:	1ecb      	subs	r3, r1, #3
   121d6:	2b04      	cmp	r3, #4
   121d8:	d804      	bhi.n	121e4 <z_cbvprintf_impl+0x450>
   121da:	e8df f003 	tbb	[pc, r3]
   121de:	4621      	.short	0x4621
   121e0:	2146      	.short	0x2146
   121e2:	21          	.byte	0x21
   121e3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   121e4:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   121e6:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   121e8:	ea4f 72e3 	mov.w	r2, r3, asr #31
   121ec:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   121f0:	d11c      	bne.n	1222c <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
   121f2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   121f6:	17da      	asrs	r2, r3, #31
   121f8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   121fc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   121fe:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12202:	9307      	str	r3, [sp, #28]
   12204:	079b      	lsls	r3, r3, #30
   12206:	d050      	beq.n	122aa <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
   12208:	9b06      	ldr	r3, [sp, #24]
   1220a:	9903      	ldr	r1, [sp, #12]
   1220c:	4632      	mov	r2, r6
   1220e:	4650      	mov	r0, sl
   12210:	f010 f880 	bl	22314 <outs>
   12214:	2800      	cmp	r0, #0
   12216:	f2c0 8355 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   1221a:	4405      	add	r5, r0
			continue;
   1221c:	9e06      	ldr	r6, [sp, #24]
   1221e:	e5c1      	b.n	11da4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12220:	f854 3b04 	ldr.w	r3, [r4], #4
   12224:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12226:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
   1222a:	e7e8      	b.n	121fe <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
   1222c:	2902      	cmp	r1, #2
   1222e:	d1e5      	bne.n	121fc <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
   12230:	b21a      	sxth	r2, r3
   12232:	f343 33c0 	sbfx	r3, r3, #15, #1
   12236:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1223a:	e7df      	b.n	121fc <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1223c:	2b02      	cmp	r3, #2
   1223e:	d124      	bne.n	1228a <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
   12240:	1ecb      	subs	r3, r1, #3
   12242:	2b04      	cmp	r3, #4
   12244:	d804      	bhi.n	12250 <z_cbvprintf_impl+0x4bc>
   12246:	e8df f003 	tbb	[pc, r3]
   1224a:	1018      	.short	0x1018
   1224c:	1810      	.short	0x1810
   1224e:	18          	.byte	0x18
   1224f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   12250:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   12252:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12256:	f04f 0200 	mov.w	r2, #0
   1225a:	d014      	beq.n	12286 <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
   1225c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   1225e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   12262:	d1cc      	bne.n	121fe <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
   12264:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12266:	9310      	str	r3, [sp, #64]	; 0x40
   12268:	e7c9      	b.n	121fe <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
   1226a:	3407      	adds	r4, #7
   1226c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   12270:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12274:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   12278:	e7c1      	b.n	121fe <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
   1227a:	f854 3b04 	ldr.w	r3, [r4], #4
   1227e:	9310      	str	r3, [sp, #64]	; 0x40
   12280:	2300      	movs	r3, #0
   12282:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   12284:	e7bb      	b.n	121fe <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
   12286:	b2db      	uxtb	r3, r3
   12288:	e7cd      	b.n	12226 <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
   1228a:	2b04      	cmp	r3, #4
   1228c:	d108      	bne.n	122a0 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
   1228e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12290:	f024 0407 	bic.w	r4, r4, #7
   12294:	e9d4 2300 	ldrd	r2, r3, [r4]
   12298:	3408      	adds	r4, #8
   1229a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   1229e:	e7ae      	b.n	121fe <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   122a0:	2b03      	cmp	r3, #3
   122a2:	d1ac      	bne.n	121fe <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
   122a4:	f854 3b04 	ldr.w	r3, [r4], #4
   122a8:	e7dd      	b.n	12266 <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
   122aa:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   122ae:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   122b2:	d8b3      	bhi.n	1221c <z_cbvprintf_impl+0x488>
   122b4:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   122b8:	d849      	bhi.n	1234e <z_cbvprintf_impl+0x5ba>
   122ba:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   122be:	f000 8091 	beq.w	123e4 <z_cbvprintf_impl+0x650>
   122c2:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   122c6:	d9a9      	bls.n	1221c <z_cbvprintf_impl+0x488>
   122c8:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   122cc:	d003      	beq.n	122d6 <z_cbvprintf_impl+0x542>
   122ce:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   122d2:	2a02      	cmp	r2, #2
   122d4:	d8a2      	bhi.n	1221c <z_cbvprintf_impl+0x488>
	} u = {
   122d6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   122da:	2a00      	cmp	r2, #0
   122dc:	f2c0 8136 	blt.w	1254c <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
   122e0:	9b07      	ldr	r3, [sp, #28]
   122e2:	0718      	lsls	r0, r3, #28
   122e4:	f100 8135 	bmi.w	12552 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
   122e8:	f3c3 1900 	ubfx	r9, r3, #4, #1
   122ec:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   122f0:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   122f4:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   122f8:	2800      	cmp	r0, #0
   122fa:	f040 812d 	bne.w	12558 <z_cbvprintf_impl+0x7c4>
   122fe:	ea51 0602 	orrs.w	r6, r1, r2
   12302:	bf14      	ite	ne
   12304:	2601      	movne	r6, #1
   12306:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   12308:	02d2      	lsls	r2, r2, #11
   1230a:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   1230e:	02c9      	lsls	r1, r1, #11
		c = 'f';
   12310:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   12314:	ea40 0e01 	orr.w	lr, r0, r1
   12318:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   1231c:	bf08      	it	eq
   1231e:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   12322:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   12326:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   1232a:	f000 8199 	beq.w	12660 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
   1232e:	2e00      	cmp	r6, #0
   12330:	f040 8144 	bne.w	125bc <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
   12334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12336:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1233a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   1233e:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   12340:	2000      	movs	r0, #0
   12342:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   12346:	4606      	mov	r6, r0
		fract *= 5U;
   12348:	f04f 0c05 	mov.w	ip, #5
   1234c:	e150      	b.n	125f0 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
   1234e:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
   12352:	2a20      	cmp	r2, #32
   12354:	f63f af62 	bhi.w	1221c <z_cbvprintf_impl+0x488>
   12358:	a001      	add	r0, pc, #4	; (adr r0, 12360 <z_cbvprintf_impl+0x5cc>)
   1235a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1235e:	bf00      	nop
   12360:	000124eb 	.word	0x000124eb
   12364:	0001221d 	.word	0x0001221d
   12368:	0001221d 	.word	0x0001221d
   1236c:	0001221d 	.word	0x0001221d
   12370:	0001221d 	.word	0x0001221d
   12374:	0001221d 	.word	0x0001221d
   12378:	0001221d 	.word	0x0001221d
   1237c:	0001221d 	.word	0x0001221d
   12380:	0001221d 	.word	0x0001221d
   12384:	000122d7 	.word	0x000122d7
   12388:	0001221d 	.word	0x0001221d
   1238c:	0001246f 	.word	0x0001246f
   12390:	00012483 	.word	0x00012483
   12394:	000122d7 	.word	0x000122d7
   12398:	000122d7 	.word	0x000122d7
   1239c:	000122d7 	.word	0x000122d7
   123a0:	0001221d 	.word	0x0001221d
   123a4:	00012483 	.word	0x00012483
   123a8:	0001221d 	.word	0x0001221d
   123ac:	0001221d 	.word	0x0001221d
   123b0:	0001221d 	.word	0x0001221d
   123b4:	0001221d 	.word	0x0001221d
   123b8:	00012525 	.word	0x00012525
   123bc:	000124eb 	.word	0x000124eb
   123c0:	000124f1 	.word	0x000124f1
   123c4:	0001221d 	.word	0x0001221d
   123c8:	0001221d 	.word	0x0001221d
   123cc:	000123eb 	.word	0x000123eb
   123d0:	0001221d 	.word	0x0001221d
   123d4:	000124eb 	.word	0x000124eb
   123d8:	0001221d 	.word	0x0001221d
   123dc:	0001221d 	.word	0x0001221d
   123e0:	000124eb 	.word	0x000124eb
			OUTC('%');
   123e4:	9903      	ldr	r1, [sp, #12]
   123e6:	4658      	mov	r0, fp
   123e8:	e4e6      	b.n	11db8 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   123ea:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   123ec:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   123ee:	db3a      	blt.n	12466 <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
   123f0:	4639      	mov	r1, r7
   123f2:	4630      	mov	r0, r6
   123f4:	f010 fcae 	bl	22d54 <strnlen>
			bpe = bps + len;
   123f8:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   123fa:	2e00      	cmp	r6, #0
   123fc:	f43f af0e 	beq.w	1221c <z_cbvprintf_impl+0x488>
		char sign = 0;
   12400:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   12404:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   12408:	f013 0210 	ands.w	r2, r3, #16
   1240c:	9205      	str	r2, [sp, #20]
   1240e:	f000 824e 	beq.w	128ae <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
   12412:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12414:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   12418:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   1241c:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   1241e:	bf18      	it	ne
   12420:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   12422:	f8cd 801c 	str.w	r8, [sp, #28]
   12426:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   12428:	bf18      	it	ne
   1242a:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   1242c:	9b04      	ldr	r3, [sp, #16]
   1242e:	2b00      	cmp	r3, #0
   12430:	f340 8258 	ble.w	128e4 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
   12434:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   12438:	1a1b      	subs	r3, r3, r0
   1243a:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   1243c:	0753      	lsls	r3, r2, #29
   1243e:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   12442:	f100 824f 	bmi.w	128e4 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
   12446:	0650      	lsls	r0, r2, #25
   12448:	f140 823f 	bpl.w	128ca <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
   1244c:	f1b9 0f00 	cmp.w	r9, #0
   12450:	d007      	beq.n	12462 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
   12452:	9903      	ldr	r1, [sp, #12]
   12454:	4648      	mov	r0, r9
   12456:	47d0      	blx	sl
   12458:	2800      	cmp	r0, #0
   1245a:	f2c0 8233 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   1245e:	3501      	adds	r5, #1
						sign = 0;
   12460:	46d9      	mov	r9, fp
					pad = '0';
   12462:	2230      	movs	r2, #48	; 0x30
   12464:	e232      	b.n	128cc <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
   12466:	4630      	mov	r0, r6
   12468:	f010 fc6d 	bl	22d46 <strlen>
   1246c:	e7c4      	b.n	123f8 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1246e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12470:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   12474:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   12478:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   1247c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   1247e:	2001      	movs	r0, #1
   12480:	e7c0      	b.n	12404 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
   12482:	9b07      	ldr	r3, [sp, #28]
   12484:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
   12486:	bf58      	it	pl
   12488:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   1248c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   12490:	bf54      	ite	pl
   12492:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   12496:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   1249a:	2b00      	cmp	r3, #0
   1249c:	da06      	bge.n	124ac <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
   1249e:	4252      	negs	r2, r2
   124a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   124a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   124a8:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   124ac:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   124b0:	9300      	str	r3, [sp, #0]
   124b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   124b6:	ab17      	add	r3, sp, #92	; 0x5c
   124b8:	aa12      	add	r2, sp, #72	; 0x48
   124ba:	f00f fee5 	bl	22288 <encode_uint>
   124be:	4606      	mov	r6, r0
			if (precision >= 0) {
   124c0:	2f00      	cmp	r7, #0
   124c2:	db0c      	blt.n	124de <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
   124c4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   124c8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   124cc:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   124ce:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   124d2:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   124d4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   124d8:	d901      	bls.n	124de <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
   124da:	1afb      	subs	r3, r7, r3
   124dc:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   124de:	2e00      	cmp	r6, #0
   124e0:	f43f ae9c 	beq.w	1221c <z_cbvprintf_impl+0x488>
   124e4:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   124e8:	e056      	b.n	12598 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
   124ea:	f04f 0900 	mov.w	r9, #0
   124ee:	e7dd      	b.n	124ac <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
   124f0:	9810      	ldr	r0, [sp, #64]	; 0x40
   124f2:	2800      	cmp	r0, #0
   124f4:	f000 81d6 	beq.w	128a4 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   124f8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   124fc:	9300      	str	r3, [sp, #0]
   124fe:	aa12      	add	r2, sp, #72	; 0x48
   12500:	ab17      	add	r3, sp, #92	; 0x5c
   12502:	2100      	movs	r1, #0
   12504:	f00f fec0 	bl	22288 <encode_uint>
				conv->altform_0c = true;
   12508:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   1250c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12510:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12514:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12518:	4606      	mov	r6, r0
				conv->altform_0c = true;
   1251a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   1251e:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   12522:	e7cd      	b.n	124c0 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
   12524:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   12526:	2907      	cmp	r1, #7
   12528:	f63f ae78 	bhi.w	1221c <z_cbvprintf_impl+0x488>
   1252c:	e8df f001 	tbb	[pc, r1]
   12530:	0c06040c 	.word	0x0c06040c
   12534:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   12538:	701d      	strb	r5, [r3, #0]
		break;
   1253a:	e66f      	b.n	1221c <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
   1253c:	801d      	strh	r5, [r3, #0]
		break;
   1253e:	e66d      	b.n	1221c <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
   12540:	17ea      	asrs	r2, r5, #31
   12542:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   12546:	e669      	b.n	1221c <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   12548:	601d      	str	r5, [r3, #0]
		break;
   1254a:	e667      	b.n	1221c <z_cbvprintf_impl+0x488>
		*sign = '-';
   1254c:	f04f 092d 	mov.w	r9, #45	; 0x2d
   12550:	e6ce      	b.n	122f0 <z_cbvprintf_impl+0x55c>
		*sign = '+';
   12552:	f04f 092b 	mov.w	r9, #43	; 0x2b
   12556:	e6cb      	b.n	122f0 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   12558:	f240 76ff 	movw	r6, #2047	; 0x7ff
   1255c:	42b0      	cmp	r0, r6
   1255e:	d12a      	bne.n	125b6 <z_cbvprintf_impl+0x822>
		if (fract == 0) {
   12560:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   12562:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   12566:	d11e      	bne.n	125a6 <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c)) {
   12568:	2b1a      	cmp	r3, #26
   1256a:	bf35      	itete	cc
   1256c:	2349      	movcc	r3, #73	; 0x49
   1256e:	2369      	movcs	r3, #105	; 0x69
   12570:	214e      	movcc	r1, #78	; 0x4e
   12572:	216e      	movcs	r1, #110	; 0x6e
   12574:	bf34      	ite	cc
   12576:	2246      	movcc	r2, #70	; 0x46
   12578:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
   1257a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   1257e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   12582:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   12586:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   1258a:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   1258e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   12592:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   12596:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   12598:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   1259a:	f1b9 0f00 	cmp.w	r9, #0
   1259e:	f43f af31 	beq.w	12404 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
   125a2:	3001      	adds	r0, #1
   125a4:	e72e      	b.n	12404 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c)) {
   125a6:	2b19      	cmp	r3, #25
   125a8:	bf8b      	itete	hi
   125aa:	236e      	movhi	r3, #110	; 0x6e
   125ac:	234e      	movls	r3, #78	; 0x4e
   125ae:	2161      	movhi	r1, #97	; 0x61
   125b0:	2141      	movls	r1, #65	; 0x41
   125b2:	461a      	mov	r2, r3
   125b4:	e7e1      	b.n	1257a <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
   125b6:	2600      	movs	r6, #0
   125b8:	e6a6      	b.n	12308 <z_cbvprintf_impl+0x574>
				expo--;
   125ba:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   125bc:	1849      	adds	r1, r1, r1
   125be:	4152      	adcs	r2, r2
   125c0:	2a00      	cmp	r2, #0
   125c2:	dafa      	bge.n	125ba <z_cbvprintf_impl+0x826>
   125c4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   125c8:	e6b4      	b.n	12334 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
   125ca:	0849      	lsrs	r1, r1, #1
   125cc:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   125d0:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   125d2:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   125d6:	4640      	mov	r0, r8
			expo++;
   125d8:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   125dc:	d2f5      	bcs.n	125ca <z_cbvprintf_impl+0x836>
		fract *= 5U;
   125de:	fb0c fe02 	mul.w	lr, ip, r2
   125e2:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   125e6:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   125ea:	4472      	add	r2, lr
		decexp--;
   125ec:	3e01      	subs	r6, #1
   125ee:	2001      	movs	r0, #1
	while (expo < -2) {
   125f0:	f118 0f02 	cmn.w	r8, #2
   125f4:	dbe9      	blt.n	125ca <z_cbvprintf_impl+0x836>
   125f6:	b108      	cbz	r0, 125fc <z_cbvprintf_impl+0x868>
   125f8:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   125fc:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   12600:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   12604:	dc2f      	bgt.n	12666 <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
   12606:	f1c8 0004 	rsb	r0, r8, #4
   1260a:	f108 081c 	add.w	r8, r8, #28
   1260e:	f1a0 0c20 	sub.w	ip, r0, #32
   12612:	40c2      	lsrs	r2, r0
   12614:	fa21 f300 	lsr.w	r3, r1, r0
   12618:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
   1261c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   12620:	ea42 0208 	orr.w	r2, r2, r8
   12624:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
   12628:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   1262a:	ea42 020c 	orr.w	r2, r2, ip
   1262e:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   12630:	d13a      	bne.n	126a8 <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
   12632:	1cf3      	adds	r3, r6, #3
   12634:	db01      	blt.n	1263a <z_cbvprintf_impl+0x8a6>
   12636:	42b7      	cmp	r7, r6
   12638:	da2b      	bge.n	12692 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
   1263a:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   1263e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   12640:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   12644:	dd7f      	ble.n	12746 <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
   12646:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   1264a:	0680      	lsls	r0, r0, #26
				precision--;
   1264c:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   12650:	d479      	bmi.n	12746 <z_cbvprintf_impl+0x9b2>
   12652:	1e3b      	subs	r3, r7, #0
   12654:	bf18      	it	ne
   12656:	2301      	movne	r3, #1
	bool prune_zero = false;
   12658:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   1265a:	f107 0801 	add.w	r8, r7, #1
   1265e:	e02d      	b.n	126bc <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   12660:	f04f 0800 	mov.w	r8, #0
   12664:	e66c      	b.n	12340 <z_cbvprintf_impl+0x5ac>
		fract += 2;
   12666:	3202      	adds	r2, #2
   12668:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   1266c:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   1266e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   12672:	f00f fdda 	bl	2222a <_ldiv5>
		expo--;
   12676:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   1267a:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   1267e:	3601      	adds	r6, #1
			fract <<= 1;
   12680:	1892      	adds	r2, r2, r2
   12682:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   12684:	2900      	cmp	r1, #0
			expo--;
   12686:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   1268a:	daf9      	bge.n	12680 <z_cbvprintf_impl+0x8ec>
   1268c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   12690:	e7b4      	b.n	125fc <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
   12692:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12696:	0699      	lsls	r1, r3, #26
			precision -= decexp;
   12698:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   1269c:	d451      	bmi.n	12742 <z_cbvprintf_impl+0x9ae>
   1269e:	1e3b      	subs	r3, r7, #0
   126a0:	bf18      	it	ne
   126a2:	2301      	movne	r3, #1
	bool prune_zero = false;
   126a4:	9305      	str	r3, [sp, #20]
   126a6:	e004      	b.n	126b2 <z_cbvprintf_impl+0x91e>
   126a8:	2300      	movs	r3, #0
	if (c == 'f') {
   126aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   126ae:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   126b0:	d1d3      	bne.n	1265a <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
   126b2:	eb17 0806 	adds.w	r8, r7, r6
   126b6:	f04f 0b66 	mov.w	fp, #102	; 0x66
   126ba:	d446      	bmi.n	1274a <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
   126bc:	f1b8 0f10 	cmp.w	r8, #16
   126c0:	bfa8      	it	ge
   126c2:	f04f 0810 	movge.w	r8, #16
   126c6:	2010      	movs	r0, #16
   126c8:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
   126ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   126ce:	2000      	movs	r0, #0
   126d0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
   126d4:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   126d8:	f1b8 0f00 	cmp.w	r8, #0
   126dc:	d138      	bne.n	12750 <z_cbvprintf_impl+0x9bc>
	fract += round;
   126de:	9908      	ldr	r1, [sp, #32]
   126e0:	1812      	adds	r2, r2, r0
   126e2:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   126e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   126ea:	d23f      	bcs.n	1276c <z_cbvprintf_impl+0x9d8>
	fract += round;
   126ec:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   126f0:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   126f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   126f6:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   126fa:	f040 80b2 	bne.w	12862 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
   126fe:	2e00      	cmp	r6, #0
   12700:	dc3f      	bgt.n	12782 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
   12702:	2130      	movs	r1, #48	; 0x30
   12704:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   12708:	2a00      	cmp	r2, #0
   1270a:	d163      	bne.n	127d4 <z_cbvprintf_impl+0xa40>
   1270c:	2f00      	cmp	r7, #0
   1270e:	f340 81a8 	ble.w	12a62 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   12712:	222e      	movs	r2, #46	; 0x2e
   12714:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   12718:	b186      	cbz	r6, 1273c <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
   1271a:	4272      	negs	r2, r6
   1271c:	42ba      	cmp	r2, r7
   1271e:	bfa8      	it	ge
   12720:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   12722:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   12726:	9213      	str	r2, [sp, #76]	; 0x4c
   12728:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   1272a:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   1272e:	bfd4      	ite	le
   12730:	2200      	movle	r2, #0
   12732:	2201      	movgt	r2, #1
   12734:	f362 1145 	bfi	r1, r2, #5, #1
   12738:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   1273c:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   12740:	e037      	b.n	127b2 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
   12742:	2300      	movs	r3, #0
   12744:	e7ae      	b.n	126a4 <z_cbvprintf_impl+0x910>
   12746:	2300      	movs	r3, #0
   12748:	e786      	b.n	12658 <z_cbvprintf_impl+0x8c4>
			decimals = 0;
   1274a:	f04f 0800 	mov.w	r8, #0
   1274e:	e7ba      	b.n	126c6 <z_cbvprintf_impl+0x932>
	*v >>= 1;
   12750:	0840      	lsrs	r0, r0, #1
   12752:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   12756:	085b      	lsrs	r3, r3, #1
   12758:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   1275c:	a80e      	add	r0, sp, #56	; 0x38
   1275e:	9209      	str	r2, [sp, #36]	; 0x24
   12760:	f108 38ff 	add.w	r8, r8, #4294967295
   12764:	f00f fd61 	bl	2222a <_ldiv5>
   12768:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
   1276a:	e7b3      	b.n	126d4 <z_cbvprintf_impl+0x940>
	*v >>= 1;
   1276c:	0852      	lsrs	r2, r2, #1
   1276e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   12772:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   12774:	0849      	lsrs	r1, r1, #1
   12776:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   1277a:	3601      	adds	r6, #1
	_ldiv5(v);
   1277c:	f00f fd55 	bl	2222a <_ldiv5>
		decexp++;
   12780:	e7b6      	b.n	126f0 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
   12782:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   12786:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12788:	2900      	cmp	r1, #0
   1278a:	dd09      	ble.n	127a0 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
   1278c:	a90b      	add	r1, sp, #44	; 0x2c
   1278e:	a80c      	add	r0, sp, #48	; 0x30
   12790:	9207      	str	r2, [sp, #28]
   12792:	f00f fd62 	bl	2225a <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   12796:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   12798:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   1279c:	9a07      	ldr	r2, [sp, #28]
   1279e:	d1f2      	bne.n	12786 <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
   127a0:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   127a2:	b99a      	cbnz	r2, 127cc <z_cbvprintf_impl+0xa38>
   127a4:	2f00      	cmp	r7, #0
   127a6:	f340 815a 	ble.w	12a5e <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
   127aa:	212e      	movs	r1, #46	; 0x2e
   127ac:	f808 1b01 	strb.w	r1, [r8], #1
   127b0:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   127b2:	2f00      	cmp	r7, #0
   127b4:	dd17      	ble.n	127e6 <z_cbvprintf_impl+0xa52>
   127b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   127b8:	2a00      	cmp	r2, #0
   127ba:	dd14      	ble.n	127e6 <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
   127bc:	a90b      	add	r1, sp, #44	; 0x2c
   127be:	a80c      	add	r0, sp, #48	; 0x30
   127c0:	f00f fd4b 	bl	2225a <_get_digit>
		precision--;
   127c4:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   127c6:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   127ca:	e7f2      	b.n	127b2 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
   127cc:	222e      	movs	r2, #46	; 0x2e
   127ce:	f808 2b01 	strb.w	r2, [r8], #1
   127d2:	e7ed      	b.n	127b0 <z_cbvprintf_impl+0xa1c>
   127d4:	222e      	movs	r2, #46	; 0x2e
   127d6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   127da:	2e00      	cmp	r6, #0
   127dc:	d0ae      	beq.n	1273c <z_cbvprintf_impl+0x9a8>
   127de:	2f00      	cmp	r7, #0
   127e0:	dc9b      	bgt.n	1271a <z_cbvprintf_impl+0x986>
			*buf++ = '.';
   127e2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   127e6:	9b05      	ldr	r3, [sp, #20]
   127e8:	2b00      	cmp	r3, #0
   127ea:	d14e      	bne.n	1288a <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
   127ec:	9714      	str	r7, [sp, #80]	; 0x50
   127ee:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   127f0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   127f4:	2a45      	cmp	r2, #69	; 0x45
   127f6:	d123      	bne.n	12840 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
   127f8:	2e00      	cmp	r6, #0
			decexp = -decexp;
   127fa:	bfba      	itte	lt
   127fc:	4276      	neglt	r6, r6
			*buf++ = '-';
   127fe:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   12800:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   12802:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   12804:	bfc8      	it	gt
   12806:	2164      	movgt	r1, #100	; 0x64
   12808:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   1280a:	bfd1      	iteee	le
   1280c:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   1280e:	fbb6 f3f1 	udivgt	r3, r6, r1
   12812:	1cfa      	addgt	r2, r7, #3
   12814:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   12818:	bfc8      	it	gt
   1281a:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   1281e:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   12822:	bfc8      	it	gt
   12824:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   12826:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   1282a:	fbb6 f3f1 	udiv	r3, r6, r1
   1282e:	4617      	mov	r7, r2
   12830:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   12834:	fb01 6313 	mls	r3, r1, r3, r6
   12838:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1283a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   1283e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   12840:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   12842:	2b00      	cmp	r3, #0
   12844:	dc2c      	bgt.n	128a0 <z_cbvprintf_impl+0xb0c>
   12846:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12848:	2b00      	cmp	r3, #0
   1284a:	bfd4      	ite	le
   1284c:	2300      	movle	r3, #0
   1284e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   12850:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12854:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   12858:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1285a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   1285e:	703b      	strb	r3, [r7, #0]
	return bps;
   12860:	e699      	b.n	12596 <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
   12862:	a90b      	add	r1, sp, #44	; 0x2c
   12864:	a80c      	add	r0, sp, #48	; 0x30
   12866:	9207      	str	r2, [sp, #28]
   12868:	f00f fcf7 	bl	2225a <_get_digit>
		if (*buf++ != '0') {
   1286c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   1286e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   12872:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   12874:	bf18      	it	ne
   12876:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   1287a:	b912      	cbnz	r2, 12882 <z_cbvprintf_impl+0xaee>
   1287c:	2f00      	cmp	r7, #0
   1287e:	f340 80f0 	ble.w	12a62 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   12882:	222e      	movs	r2, #46	; 0x2e
   12884:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   12888:	e758      	b.n	1273c <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
   1288a:	4647      	mov	r7, r8
   1288c:	f108 38ff 	add.w	r8, r8, #4294967295
   12890:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   12894:	2a30      	cmp	r2, #48	; 0x30
   12896:	d0f8      	beq.n	1288a <z_cbvprintf_impl+0xaf6>
   12898:	2a2e      	cmp	r2, #46	; 0x2e
   1289a:	bf08      	it	eq
   1289c:	4647      	moveq	r7, r8
   1289e:	e7a7      	b.n	127f0 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
   128a0:	2301      	movs	r3, #1
   128a2:	e7d5      	b.n	12850 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
   128a4:	4f70      	ldr	r7, [pc, #448]	; (12a68 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
   128a6:	4681      	mov	r9, r0
			bps = "(nil)";
   128a8:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   128aa:	2005      	movs	r0, #5
   128ac:	e5aa      	b.n	12404 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
   128ae:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   128b0:	bf48      	it	mi
   128b2:	3001      	addmi	r0, #1
   128b4:	e5ae      	b.n	12414 <z_cbvprintf_impl+0x680>
					OUTC(pad);
   128b6:	4610      	mov	r0, r2
   128b8:	9209      	str	r2, [sp, #36]	; 0x24
   128ba:	9903      	ldr	r1, [sp, #12]
   128bc:	47d0      	blx	sl
   128be:	2800      	cmp	r0, #0
   128c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   128c2:	da05      	bge.n	128d0 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
   128c4:	b01f      	add	sp, #124	; 0x7c
   128c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   128ca:	2220      	movs	r2, #32
					pad = '0';
   128cc:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   128d0:	4659      	mov	r1, fp
   128d2:	2900      	cmp	r1, #0
   128d4:	f10b 3bff 	add.w	fp, fp, #4294967295
   128d8:	dced      	bgt.n	128b6 <z_cbvprintf_impl+0xb22>
   128da:	9b04      	ldr	r3, [sp, #16]
   128dc:	f8cd b010 	str.w	fp, [sp, #16]
   128e0:	442b      	add	r3, r5
   128e2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   128e4:	f1b9 0f00 	cmp.w	r9, #0
   128e8:	d005      	beq.n	128f6 <z_cbvprintf_impl+0xb62>
			OUTC(sign);
   128ea:	9903      	ldr	r1, [sp, #12]
   128ec:	4648      	mov	r0, r9
   128ee:	47d0      	blx	sl
   128f0:	2800      	cmp	r0, #0
   128f2:	dbe7      	blt.n	128c4 <z_cbvprintf_impl+0xb30>
   128f4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   128f6:	9b08      	ldr	r3, [sp, #32]
   128f8:	2b00      	cmp	r3, #0
   128fa:	d075      	beq.n	129e8 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
   128fc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   12900:	2b00      	cmp	r3, #0
   12902:	db28      	blt.n	12956 <z_cbvprintf_impl+0xbc2>
   12904:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
   12906:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1290a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1290e:	2b09      	cmp	r3, #9
   12910:	46d9      	mov	r9, fp
   12912:	f10b 0b01 	add.w	fp, fp, #1
   12916:	d93f      	bls.n	12998 <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
   12918:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1291c:	1bae      	subs	r6, r5, r6
   1291e:	0699      	lsls	r1, r3, #26
   12920:	444e      	add	r6, r9
   12922:	d407      	bmi.n	12934 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
   12924:	4642      	mov	r2, r8
   12926:	2a00      	cmp	r2, #0
   12928:	f108 38ff 	add.w	r8, r8, #4294967295
   1292c:	dc39      	bgt.n	129a2 <z_cbvprintf_impl+0xc0e>
   1292e:	9b07      	ldr	r3, [sp, #28]
   12930:	4433      	add	r3, r6
   12932:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   12934:	f899 0000 	ldrb.w	r0, [r9]
   12938:	282e      	cmp	r0, #46	; 0x2e
   1293a:	d10a      	bne.n	12952 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
   1293c:	9903      	ldr	r1, [sp, #12]
   1293e:	47d0      	blx	sl
						OUTC('0');
   12940:	2800      	cmp	r0, #0
   12942:	dbbf      	blt.n	128c4 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
   12944:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   12948:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   1294c:	dc2f      	bgt.n	129ae <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
   1294e:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
   12952:	464d      	mov	r5, r9
   12954:	e035      	b.n	129c2 <z_cbvprintf_impl+0xc2e>
   12956:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   12958:	f899 0000 	ldrb.w	r0, [r9]
   1295c:	2870      	cmp	r0, #112	; 0x70
   1295e:	46c8      	mov	r8, r9
   12960:	f109 0901 	add.w	r9, r9, #1
   12964:	d113      	bne.n	1298e <z_cbvprintf_impl+0xbfa>
   12966:	1bae      	subs	r6, r5, r6
   12968:	9d14      	ldr	r5, [sp, #80]	; 0x50
   1296a:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   1296c:	4435      	add	r5, r6
   1296e:	1bab      	subs	r3, r5, r6
   12970:	2b00      	cmp	r3, #0
   12972:	dc31      	bgt.n	129d8 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
   12974:	9903      	ldr	r1, [sp, #12]
   12976:	463b      	mov	r3, r7
   12978:	4642      	mov	r2, r8
   1297a:	4650      	mov	r0, sl
   1297c:	f00f fcca 	bl	22314 <outs>
   12980:	2800      	cmp	r0, #0
   12982:	db9f      	blt.n	128c4 <z_cbvprintf_impl+0xb30>
   12984:	4430      	add	r0, r6
   12986:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   12988:	4605      	mov	r5, r0
   1298a:	4406      	add	r6, r0
   1298c:	e062      	b.n	12a54 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
   1298e:	9903      	ldr	r1, [sp, #12]
   12990:	47d0      	blx	sl
   12992:	2800      	cmp	r0, #0
   12994:	dae0      	bge.n	12958 <z_cbvprintf_impl+0xbc4>
   12996:	e795      	b.n	128c4 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
   12998:	9903      	ldr	r1, [sp, #12]
   1299a:	47d0      	blx	sl
   1299c:	2800      	cmp	r0, #0
   1299e:	dab2      	bge.n	12906 <z_cbvprintf_impl+0xb72>
   129a0:	e790      	b.n	128c4 <z_cbvprintf_impl+0xb30>
						OUTC('0');
   129a2:	9903      	ldr	r1, [sp, #12]
   129a4:	2030      	movs	r0, #48	; 0x30
   129a6:	47d0      	blx	sl
   129a8:	2800      	cmp	r0, #0
   129aa:	dabb      	bge.n	12924 <z_cbvprintf_impl+0xb90>
   129ac:	e78a      	b.n	128c4 <z_cbvprintf_impl+0xb30>
						OUTC('0');
   129ae:	9903      	ldr	r1, [sp, #12]
   129b0:	2030      	movs	r0, #48	; 0x30
   129b2:	47d0      	blx	sl
   129b4:	f108 38ff 	add.w	r8, r8, #4294967295
   129b8:	e7c2      	b.n	12940 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
   129ba:	9903      	ldr	r1, [sp, #12]
   129bc:	47d0      	blx	sl
   129be:	2800      	cmp	r0, #0
   129c0:	db80      	blt.n	128c4 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp)) {
   129c2:	7828      	ldrb	r0, [r5, #0]
   129c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   129c8:	2b09      	cmp	r3, #9
   129ca:	46a8      	mov	r8, r5
   129cc:	f105 0501 	add.w	r5, r5, #1
   129d0:	d9f3      	bls.n	129ba <z_cbvprintf_impl+0xc26>
   129d2:	eba6 0609 	sub.w	r6, r6, r9
   129d6:	e7c7      	b.n	12968 <z_cbvprintf_impl+0xbd4>
				OUTC('0');
   129d8:	9903      	ldr	r1, [sp, #12]
   129da:	2030      	movs	r0, #48	; 0x30
   129dc:	47d0      	blx	sl
   129de:	2800      	cmp	r0, #0
   129e0:	f6ff af70 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   129e4:	3601      	adds	r6, #1
   129e6:	e7c2      	b.n	1296e <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
   129e8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   129ec:	06da      	lsls	r2, r3, #27
   129ee:	d401      	bmi.n	129f4 <z_cbvprintf_impl+0xc60>
   129f0:	071b      	lsls	r3, r3, #28
   129f2:	d506      	bpl.n	12a02 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
   129f4:	9903      	ldr	r1, [sp, #12]
   129f6:	2030      	movs	r0, #48	; 0x30
   129f8:	47d0      	blx	sl
   129fa:	2800      	cmp	r0, #0
   129fc:	f6ff af62 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   12a00:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12a02:	9b05      	ldr	r3, [sp, #20]
   12a04:	b13b      	cbz	r3, 12a16 <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
   12a06:	9903      	ldr	r1, [sp, #12]
   12a08:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   12a0c:	47d0      	blx	sl
   12a0e:	2800      	cmp	r0, #0
   12a10:	f6ff af58 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   12a14:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12a16:	44a8      	add	r8, r5
   12a18:	e006      	b.n	12a28 <z_cbvprintf_impl+0xc94>
				OUTC('0');
   12a1a:	9903      	ldr	r1, [sp, #12]
   12a1c:	2030      	movs	r0, #48	; 0x30
   12a1e:	47d0      	blx	sl
   12a20:	2800      	cmp	r0, #0
   12a22:	f6ff af4f 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   12a26:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   12a28:	eba8 0305 	sub.w	r3, r8, r5
   12a2c:	2b00      	cmp	r3, #0
   12a2e:	dcf4      	bgt.n	12a1a <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
   12a30:	9903      	ldr	r1, [sp, #12]
   12a32:	463b      	mov	r3, r7
   12a34:	4632      	mov	r2, r6
   12a36:	4650      	mov	r0, sl
   12a38:	f00f fc6c 	bl	22314 <outs>
   12a3c:	2800      	cmp	r0, #0
   12a3e:	f6ff af41 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   12a42:	4428      	add	r0, r5
   12a44:	e79f      	b.n	12986 <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
   12a46:	9903      	ldr	r1, [sp, #12]
   12a48:	2020      	movs	r0, #32
   12a4a:	47d0      	blx	sl
   12a4c:	2800      	cmp	r0, #0
   12a4e:	f6ff af39 	blt.w	128c4 <z_cbvprintf_impl+0xb30>
   12a52:	3501      	adds	r5, #1
		while (width > 0) {
   12a54:	1b73      	subs	r3, r6, r5
   12a56:	2b00      	cmp	r3, #0
   12a58:	dcf5      	bgt.n	12a46 <z_cbvprintf_impl+0xcb2>
   12a5a:	f7ff bbdf 	b.w	1221c <z_cbvprintf_impl+0x488>
			decexp = 0;
   12a5e:	4616      	mov	r6, r2
   12a60:	e6c1      	b.n	127e6 <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
   12a62:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   12a66:	e6be      	b.n	127e6 <z_cbvprintf_impl+0xa52>
   12a68:	00026d6f 	.word	0x00026d6f

00012a6c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   12a6c:	b508      	push	{r3, lr}
	__asm__ volatile(
   12a6e:	f04f 0240 	mov.w	r2, #64	; 0x40
   12a72:	f3ef 8311 	mrs	r3, BASEPRI
   12a76:	f382 8812 	msr	BASEPRI_MAX, r2
   12a7a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   12a7e:	f001 fec7 	bl	14810 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12a82:	4803      	ldr	r0, [pc, #12]	; (12a90 <sys_reboot+0x24>)
   12a84:	f00f f900 	bl	21c88 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12a88:	f001 f866 	bl	13b58 <arch_cpu_idle>
   12a8c:	e7fc      	b.n	12a88 <sys_reboot+0x1c>
   12a8e:	bf00      	nop
   12a90:	00026d70 	.word	0x00026d70

00012a94 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   12a94:	f009 bebe 	b.w	1c814 <SystemInit>

00012a98 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   12a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12a9c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 12af8 <activate_foreach_backend+0x60>
{
   12aa0:	4604      	mov	r4, r0
	while (mask_cpy) {
   12aa2:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   12aa4:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   12aa8:	b914      	cbnz	r4, 12ab0 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   12aaa:	4638      	mov	r0, r7
   12aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   12ab0:	fa94 f5a4 	rbit	r5, r4
   12ab4:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   12ab8:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12abc:	012e      	lsls	r6, r5, #4
   12abe:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   12ac2:	ea6f 0a03 	mvn.w	sl, r3
   12ac6:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12aca:	7b2b      	ldrb	r3, [r5, #12]
   12acc:	2b00      	cmp	r3, #0
   12ace:	d0eb      	beq.n	12aa8 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   12ad0:	f858 3006 	ldr.w	r3, [r8, r6]
   12ad4:	691b      	ldr	r3, [r3, #16]
   12ad6:	b94b      	cbnz	r3, 12aec <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   12ad8:	4446      	add	r6, r8
			log_backend_enable(backend,
   12ada:	2204      	movs	r2, #4
   12adc:	6873      	ldr	r3, [r6, #4]
   12ade:	4628      	mov	r0, r5
   12ae0:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   12ae2:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   12ae6:	f000 fa55 	bl	12f94 <log_backend_enable>
   12aea:	e7dd      	b.n	12aa8 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   12aec:	4628      	mov	r0, r5
   12aee:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   12af0:	2800      	cmp	r0, #0
   12af2:	d1d9      	bne.n	12aa8 <activate_foreach_backend+0x10>
   12af4:	e7f0      	b.n	12ad8 <activate_foreach_backend+0x40>
   12af6:	bf00      	nop
   12af8:	00026010 	.word	0x00026010

00012afc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   12afc:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12afe:	4910      	ldr	r1, [pc, #64]	; (12b40 <enable_logger+0x44>)
   12b00:	4810      	ldr	r0, [pc, #64]	; (12b44 <enable_logger+0x48>)
{
   12b02:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12b04:	2200      	movs	r2, #0
   12b06:	f012 fea7 	bl	25858 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12b0a:	4d0f      	ldr	r5, [pc, #60]	; (12b48 <enable_logger+0x4c>)
   12b0c:	490f      	ldr	r1, [pc, #60]	; (12b4c <enable_logger+0x50>)
   12b0e:	2200      	movs	r2, #0
   12b10:	2300      	movs	r3, #0
   12b12:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12b16:	2400      	movs	r4, #0
   12b18:	230e      	movs	r3, #14
   12b1a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12b1e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12b22:	4b0b      	ldr	r3, [pc, #44]	; (12b50 <enable_logger+0x54>)
   12b24:	9400      	str	r4, [sp, #0]
   12b26:	f44f 7240 	mov.w	r2, #768	; 0x300
   12b2a:	4628      	mov	r0, r5
   12b2c:	f00a fd8a 	bl	1d644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12b30:	4908      	ldr	r1, [pc, #32]	; (12b54 <enable_logger+0x58>)
   12b32:	4628      	mov	r0, r5
   12b34:	f012 fb44 	bl	251c0 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   12b38:	4620      	mov	r0, r4
   12b3a:	b009      	add	sp, #36	; 0x24
   12b3c:	bd30      	pop	{r4, r5, pc}
   12b3e:	bf00      	nop
   12b40:	00012b59 	.word	0x00012b59
   12b44:	20002220 	.word	0x20002220
   12b48:	20001998 	.word	0x20001998
   12b4c:	20005b80 	.word	0x20005b80
   12b50:	00012e41 	.word	0x00012e41
   12b54:	00026d99 	.word	0x00026d99

00012b58 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   12b58:	4801      	ldr	r0, [pc, #4]	; (12b60 <log_process_thread_timer_expiry_fn+0x8>)
   12b5a:	f00a bfb1 	b.w	1dac0 <z_impl_k_sem_give>
   12b5e:	bf00      	nop
   12b60:	20000ba4 	.word	0x20000ba4

00012b64 <z_log_init>:
{
   12b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12b68:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   12b6a:	481f      	ldr	r0, [pc, #124]	; (12be8 <z_log_init+0x84>)
{
   12b6c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   12b6e:	f00f fe05 	bl	2277c <atomic_inc>
   12b72:	4606      	mov	r6, r0
   12b74:	2800      	cmp	r0, #0
   12b76:	d030      	beq.n	12bda <z_log_init+0x76>
	uint32_t mask = 0;
   12b78:	2500      	movs	r5, #0
}
   12b7a:	4628      	mov	r0, r5
   12b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   12b80:	7b23      	ldrb	r3, [r4, #12]
   12b82:	b173      	cbz	r3, 12ba2 <z_log_init+0x3e>
	if (backend->api->init) {
   12b84:	6823      	ldr	r3, [r4, #0]
   12b86:	68db      	ldr	r3, [r3, #12]
   12b88:	b10b      	cbz	r3, 12b8e <z_log_init+0x2a>
		backend->api->init(backend);
   12b8a:	4620      	mov	r0, r4
   12b8c:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   12b8e:	6823      	ldr	r3, [r4, #0]
   12b90:	691b      	ldr	r3, [r3, #16]
   12b92:	b9d3      	cbnz	r3, 12bca <z_log_init+0x66>
				log_backend_enable(backend,
   12b94:	6863      	ldr	r3, [r4, #4]
   12b96:	2204      	movs	r2, #4
   12b98:	6819      	ldr	r1, [r3, #0]
   12b9a:	4620      	mov	r0, r4
   12b9c:	f000 f9fa 	bl	12f94 <log_backend_enable>
			i++;
   12ba0:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12ba2:	3410      	adds	r4, #16
   12ba4:	454c      	cmp	r4, r9
   12ba6:	d3eb      	bcc.n	12b80 <z_log_init+0x1c>
	if (blocking) {
   12ba8:	f1b8 0f00 	cmp.w	r8, #0
   12bac:	d0e5      	beq.n	12b7a <z_log_init+0x16>
		while (mask) {
   12bae:	2d00      	cmp	r5, #0
   12bb0:	d0e2      	beq.n	12b78 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   12bb2:	4628      	mov	r0, r5
   12bb4:	f7ff ff70 	bl	12a98 <activate_foreach_backend>
   12bb8:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   12bba:	2f00      	cmp	r7, #0
   12bbc:	d0f7      	beq.n	12bae <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   12bbe:	2100      	movs	r1, #0
   12bc0:	f44f 70a4 	mov.w	r0, #328	; 0x148
   12bc4:	f00b fc62 	bl	1e48c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12bc8:	e7f1      	b.n	12bae <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   12bca:	4620      	mov	r0, r4
   12bcc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   12bce:	2800      	cmp	r0, #0
   12bd0:	d0e0      	beq.n	12b94 <z_log_init+0x30>
				mask |= BIT(i);
   12bd2:	fa0a f306 	lsl.w	r3, sl, r6
   12bd6:	431d      	orrs	r5, r3
   12bd8:	e7e2      	b.n	12ba0 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12bda:	4c04      	ldr	r4, [pc, #16]	; (12bec <z_log_init+0x88>)
   12bdc:	f8df 9010 	ldr.w	r9, [pc, #16]	; 12bf0 <z_log_init+0x8c>
	uint32_t mask = 0;
   12be0:	4605      	mov	r5, r0
				mask |= BIT(i);
   12be2:	f04f 0a01 	mov.w	sl, #1
   12be6:	e7dd      	b.n	12ba4 <z_log_init+0x40>
   12be8:	200030c8 	.word	0x200030c8
   12bec:	00026010 	.word	0x00026010
   12bf0:	00026030 	.word	0x00026030

00012bf4 <log_format_func_t_get>:
}
   12bf4:	4b01      	ldr	r3, [pc, #4]	; (12bfc <log_format_func_t_get+0x8>)
   12bf6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12bfa:	4770      	bx	lr
   12bfc:	00026158 	.word	0x00026158

00012c00 <log_set_timestamp_func>:
{
   12c00:	b508      	push	{r3, lr}
   12c02:	4603      	mov	r3, r0
   12c04:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   12c06:	b12b      	cbz	r3, 12c14 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   12c08:	4a04      	ldr	r2, [pc, #16]	; (12c1c <log_set_timestamp_func+0x1c>)
   12c0a:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   12c0c:	f000 fc48 	bl	134a0 <log_output_timestamp_freq_set>
	return 0;
   12c10:	2000      	movs	r0, #0
}
   12c12:	bd08      	pop	{r3, pc}
		return -EINVAL;
   12c14:	f06f 0015 	mvn.w	r0, #21
   12c18:	e7fb      	b.n	12c12 <log_set_timestamp_func+0x12>
   12c1a:	bf00      	nop
   12c1c:	20000704 	.word	0x20000704

00012c20 <z_log_notify_backend_enabled>:
{
   12c20:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12c22:	4c04      	ldr	r4, [pc, #16]	; (12c34 <z_log_notify_backend_enabled+0x14>)
   12c24:	7823      	ldrb	r3, [r4, #0]
   12c26:	b913      	cbnz	r3, 12c2e <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   12c28:	4803      	ldr	r0, [pc, #12]	; (12c38 <z_log_notify_backend_enabled+0x18>)
   12c2a:	f00a ff49 	bl	1dac0 <z_impl_k_sem_give>
	backend_attached = true;
   12c2e:	2301      	movs	r3, #1
   12c30:	7023      	strb	r3, [r4, #0]
}
   12c32:	bd10      	pop	{r4, pc}
   12c34:	2000455d 	.word	0x2000455d
   12c38:	20000ba4 	.word	0x20000ba4

00012c3c <z_log_dropped>:
{
   12c3c:	b510      	push	{r4, lr}
   12c3e:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   12c40:	4808      	ldr	r0, [pc, #32]	; (12c64 <z_log_dropped+0x28>)
   12c42:	f00f fd9b 	bl	2277c <atomic_inc>
	if (buffered) {
   12c46:	b15c      	cbz	r4, 12c60 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12c48:	f3bf 8f5b 	dmb	ish
   12c4c:	4b06      	ldr	r3, [pc, #24]	; (12c68 <z_log_dropped+0x2c>)
   12c4e:	e853 1f00 	ldrex	r1, [r3]
   12c52:	3901      	subs	r1, #1
   12c54:	e843 1200 	strex	r2, r1, [r3]
   12c58:	2a00      	cmp	r2, #0
   12c5a:	d1f8      	bne.n	12c4e <z_log_dropped+0x12>
   12c5c:	f3bf 8f5b 	dmb	ish
}
   12c60:	bd10      	pop	{r4, pc}
   12c62:	bf00      	nop
   12c64:	200030c0 	.word	0x200030c0
   12c68:	200030c4 	.word	0x200030c4

00012c6c <z_log_dropped_read_and_clear>:
}
   12c6c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12c6e:	4b06      	ldr	r3, [pc, #24]	; (12c88 <z_log_dropped_read_and_clear+0x1c>)
   12c70:	f3bf 8f5b 	dmb	ish
   12c74:	4601      	mov	r1, r0
   12c76:	e853 0f00 	ldrex	r0, [r3]
   12c7a:	e843 1200 	strex	r2, r1, [r3]
   12c7e:	2a00      	cmp	r2, #0
   12c80:	d1f9      	bne.n	12c76 <z_log_dropped_read_and_clear+0xa>
   12c82:	f3bf 8f5b 	dmb	ish
   12c86:	4770      	bx	lr
   12c88:	200030c0 	.word	0x200030c0

00012c8c <dropped_notify>:
{
   12c8c:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   12c8e:	f7ff ffed 	bl	12c6c <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12c92:	4c08      	ldr	r4, [pc, #32]	; (12cb4 <dropped_notify+0x28>)
   12c94:	4e08      	ldr	r6, [pc, #32]	; (12cb8 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   12c96:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12c98:	42b4      	cmp	r4, r6
   12c9a:	d300      	bcc.n	12c9e <dropped_notify+0x12>
}
   12c9c:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12c9e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12ca0:	795b      	ldrb	r3, [r3, #5]
   12ca2:	b12b      	cbz	r3, 12cb0 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   12ca4:	6823      	ldr	r3, [r4, #0]
   12ca6:	685b      	ldr	r3, [r3, #4]
   12ca8:	b113      	cbz	r3, 12cb0 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   12caa:	4629      	mov	r1, r5
   12cac:	4620      	mov	r0, r4
   12cae:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12cb0:	3410      	adds	r4, #16
   12cb2:	e7f1      	b.n	12c98 <dropped_notify+0xc>
   12cb4:	00026010 	.word	0x00026010
   12cb8:	00026030 	.word	0x00026030

00012cbc <z_log_msg_init>:
{
   12cbc:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   12cbe:	4c04      	ldr	r4, [pc, #16]	; (12cd0 <z_log_msg_init+0x14>)
   12cc0:	4904      	ldr	r1, [pc, #16]	; (12cd4 <z_log_msg_init+0x18>)
   12cc2:	4620      	mov	r0, r4
   12cc4:	f00f fbf7 	bl	224b6 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   12cc8:	4b03      	ldr	r3, [pc, #12]	; (12cd8 <z_log_msg_init+0x1c>)
   12cca:	601c      	str	r4, [r3, #0]
}
   12ccc:	bd10      	pop	{r4, pc}
   12cce:	bf00      	nop
   12cd0:	20000a50 	.word	0x20000a50
   12cd4:	00026144 	.word	0x00026144
   12cd8:	200030b8 	.word	0x200030b8

00012cdc <log_core_init>:
{
   12cdc:	b508      	push	{r3, lr}
	panic_mode = false;
   12cde:	4a07      	ldr	r2, [pc, #28]	; (12cfc <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   12ce0:	4807      	ldr	r0, [pc, #28]	; (12d00 <log_core_init+0x24>)
	panic_mode = false;
   12ce2:	2300      	movs	r3, #0
   12ce4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12ce6:	4a07      	ldr	r2, [pc, #28]	; (12d04 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
   12ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   12cec:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   12cee:	f7ff ff87 	bl	12c00 <log_set_timestamp_func>
}
   12cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   12cf6:	f7ff bfe1 	b.w	12cbc <z_log_msg_init>
   12cfa:	bf00      	nop
   12cfc:	2000455e 	.word	0x2000455e
   12d00:	00022779 	.word	0x00022779
   12d04:	200030c0 	.word	0x200030c0

00012d08 <z_log_msg_alloc>:
{
   12d08:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   12d0a:	2200      	movs	r2, #0
   12d0c:	4801      	ldr	r0, [pc, #4]	; (12d14 <z_log_msg_alloc+0xc>)
   12d0e:	2300      	movs	r3, #0
   12d10:	f00f bbf2 	b.w	224f8 <mpsc_pbuf_alloc>
   12d14:	20000a50 	.word	0x20000a50

00012d18 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   12d18:	4801      	ldr	r0, [pc, #4]	; (12d20 <z_log_msg_local_claim+0x8>)
   12d1a:	f00f bc8b 	b.w	22634 <mpsc_pbuf_claim>
   12d1e:	bf00      	nop
   12d20:	20000a50 	.word	0x20000a50

00012d24 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   12d24:	4b02      	ldr	r3, [pc, #8]	; (12d30 <z_log_msg_free+0xc>)
{
   12d26:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   12d28:	6818      	ldr	r0, [r3, #0]
   12d2a:	f00f bcd3 	b.w	226d4 <mpsc_pbuf_free>
   12d2e:	bf00      	nop
   12d30:	200030b8 	.word	0x200030b8

00012d34 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   12d34:	4801      	ldr	r0, [pc, #4]	; (12d3c <z_log_msg_pending+0x8>)
   12d36:	f00f bd01 	b.w	2273c <mpsc_pbuf_is_pending>
   12d3a:	bf00      	nop
   12d3c:	20000a50 	.word	0x20000a50

00012d40 <z_impl_log_process>:
{
   12d40:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   12d42:	4b28      	ldr	r3, [pc, #160]	; (12de4 <z_impl_log_process+0xa4>)
   12d44:	7818      	ldrb	r0, [r3, #0]
   12d46:	2800      	cmp	r0, #0
   12d48:	d04b      	beq.n	12de2 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   12d4a:	f7ff ffe5 	bl	12d18 <z_log_msg_local_claim>
	if (msg) {
   12d4e:	4605      	mov	r5, r0
   12d50:	b190      	cbz	r0, 12d78 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12d52:	f3bf 8f5b 	dmb	ish
   12d56:	4b24      	ldr	r3, [pc, #144]	; (12de8 <z_impl_log_process+0xa8>)
   12d58:	e853 1f00 	ldrex	r1, [r3]
   12d5c:	3901      	subs	r1, #1
   12d5e:	e843 1200 	strex	r2, r1, [r3]
   12d62:	2a00      	cmp	r2, #0
   12d64:	d1f8      	bne.n	12d58 <z_impl_log_process+0x18>
   12d66:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12d6a:	4c20      	ldr	r4, [pc, #128]	; (12dec <z_impl_log_process+0xac>)
   12d6c:	4e20      	ldr	r6, [pc, #128]	; (12df0 <z_impl_log_process+0xb0>)
   12d6e:	42b4      	cmp	r4, r6
   12d70:	d32d      	bcc.n	12dce <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   12d72:	4628      	mov	r0, r5
   12d74:	f7ff ffd6 	bl	12d24 <z_log_msg_free>
	return dropped_cnt > 0;
   12d78:	4b1e      	ldr	r3, [pc, #120]	; (12df4 <z_impl_log_process+0xb4>)
   12d7a:	4c1f      	ldr	r4, [pc, #124]	; (12df8 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   12d7c:	681b      	ldr	r3, [r3, #0]
   12d7e:	2b00      	cmp	r3, #0
   12d80:	dd19      	ble.n	12db6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   12d82:	f012 fd41 	bl	25808 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   12d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12d8a:	fba0 0302 	umull	r0, r3, r0, r2
   12d8e:	fb02 3101 	mla	r1, r2, r1, r3
   12d92:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12d94:	e9d4 2000 	ldrd	r2, r0, [r4]
   12d98:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   12d9c:	1a9b      	subs	r3, r3, r2
   12d9e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   12da2:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   12da6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   12daa:	4293      	cmp	r3, r2
   12dac:	f171 0100 	sbcs.w	r1, r1, #0
   12db0:	d301      	bcc.n	12db6 <z_impl_log_process+0x76>
				dropped_notify();
   12db2:	f7ff ff6b 	bl	12c8c <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   12db6:	e9d4 3200 	ldrd	r3, r2, [r4]
   12dba:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   12dbe:	f142 0200 	adc.w	r2, r2, #0
   12dc2:	e9c4 3200 	strd	r3, r2, [r4]
}
   12dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   12dca:	f7ff bfb3 	b.w	12d34 <z_log_msg_pending>
	return backend->cb->active;
   12dce:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   12dd0:	795b      	ldrb	r3, [r3, #5]
   12dd2:	b123      	cbz	r3, 12dde <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   12dd4:	6823      	ldr	r3, [r4, #0]
   12dd6:	4629      	mov	r1, r5
   12dd8:	681b      	ldr	r3, [r3, #0]
   12dda:	4620      	mov	r0, r4
   12ddc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12dde:	3410      	adds	r4, #16
   12de0:	e7c5      	b.n	12d6e <z_impl_log_process+0x2e>
}
   12de2:	bd70      	pop	{r4, r5, r6, pc}
   12de4:	2000455d 	.word	0x2000455d
   12de8:	200030c4 	.word	0x200030c4
   12dec:	00026010 	.word	0x00026010
   12df0:	00026030 	.word	0x00026030
   12df4:	200030c0 	.word	0x200030c0
   12df8:	20002218 	.word	0x20002218

00012dfc <z_impl_log_panic>:
{
   12dfc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   12dfe:	4d0d      	ldr	r5, [pc, #52]	; (12e34 <z_impl_log_panic+0x38>)
   12e00:	7829      	ldrb	r1, [r5, #0]
   12e02:	b961      	cbnz	r1, 12e1e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   12e04:	2001      	movs	r0, #1
   12e06:	f7ff fead 	bl	12b64 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e0a:	4c0b      	ldr	r4, [pc, #44]	; (12e38 <z_impl_log_panic+0x3c>)
   12e0c:	4e0b      	ldr	r6, [pc, #44]	; (12e3c <z_impl_log_panic+0x40>)
   12e0e:	42b4      	cmp	r4, r6
   12e10:	d306      	bcc.n	12e20 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   12e12:	f7ff ff95 	bl	12d40 <z_impl_log_process>
		while (log_process() == true) {
   12e16:	2800      	cmp	r0, #0
   12e18:	d1fb      	bne.n	12e12 <z_impl_log_panic+0x16>
	panic_mode = true;
   12e1a:	2301      	movs	r3, #1
   12e1c:	702b      	strb	r3, [r5, #0]
}
   12e1e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   12e20:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12e22:	795b      	ldrb	r3, [r3, #5]
   12e24:	b11b      	cbz	r3, 12e2e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   12e26:	6823      	ldr	r3, [r4, #0]
   12e28:	4620      	mov	r0, r4
   12e2a:	689b      	ldr	r3, [r3, #8]
   12e2c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e2e:	3410      	adds	r4, #16
   12e30:	e7ed      	b.n	12e0e <z_impl_log_panic+0x12>
   12e32:	bf00      	nop
   12e34:	2000455e 	.word	0x2000455e
   12e38:	00026010 	.word	0x00026010
   12e3c:	00026030 	.word	0x00026030

00012e40 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   12e40:	2100      	movs	r1, #0
{
   12e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   12e46:	4608      	mov	r0, r1
   12e48:	f7ff fe8c 	bl	12b64 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12e4c:	4604      	mov	r4, r0
   12e4e:	b348      	cbz	r0, 12ea4 <log_process_thread_func+0x64>
   12e50:	f240 6867 	movw	r8, #1639	; 0x667
   12e54:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   12e58:	f00b fb32 	bl	1e4c0 <z_impl_z_current_get>
	proc_tid = process_tid;
   12e5c:	4b1a      	ldr	r3, [pc, #104]	; (12ec8 <log_process_thread_func+0x88>)
   12e5e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12e60:	b130      	cbz	r0, 12e70 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12e62:	4b1a      	ldr	r3, [pc, #104]	; (12ecc <log_process_thread_func+0x8c>)
	    process_tid &&
   12e64:	681b      	ldr	r3, [r3, #0]
   12e66:	2b09      	cmp	r3, #9
   12e68:	dd02      	ble.n	12e70 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   12e6a:	4819      	ldr	r0, [pc, #100]	; (12ed0 <log_process_thread_func+0x90>)
   12e6c:	f00a fe28 	bl	1dac0 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12e70:	4f18      	ldr	r7, [pc, #96]	; (12ed4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   12e72:	f8df a05c 	ldr.w	sl, [pc, #92]	; 12ed0 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12e76:	2500      	movs	r5, #0
		if (activate_mask) {
   12e78:	b144      	cbz	r4, 12e8c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   12e7a:	4620      	mov	r0, r4
   12e7c:	f7ff fe0c 	bl	12a98 <activate_foreach_backend>
			if (!activate_mask) {
   12e80:	4604      	mov	r4, r0
   12e82:	b918      	cbnz	r0, 12e8c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   12e84:	f04f 38ff 	mov.w	r8, #4294967295
   12e88:	f04f 39ff 	mov.w	r9, #4294967295
   12e8c:	f7ff ff58 	bl	12d40 <z_impl_log_process>
		if (log_process() == false) {
   12e90:	4606      	mov	r6, r0
   12e92:	b928      	cbnz	r0, 12ea0 <log_process_thread_func+0x60>
			if (processed_any) {
   12e94:	b9b5      	cbnz	r5, 12ec4 <log_process_thread_func+0x84>
   12e96:	4642      	mov	r2, r8
   12e98:	464b      	mov	r3, r9
   12e9a:	4650      	mov	r0, sl
   12e9c:	f00a fe36 	bl	1db0c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   12ea0:	4635      	mov	r5, r6
   12ea2:	e7e9      	b.n	12e78 <log_process_thread_func+0x38>
   12ea4:	f04f 38ff 	mov.w	r8, #4294967295
   12ea8:	f04f 39ff 	mov.w	r9, #4294967295
   12eac:	e7d4      	b.n	12e58 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   12eae:	682b      	ldr	r3, [r5, #0]
   12eb0:	699b      	ldr	r3, [r3, #24]
   12eb2:	b11b      	cbz	r3, 12ebc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   12eb4:	2200      	movs	r2, #0
   12eb6:	4611      	mov	r1, r2
   12eb8:	4628      	mov	r0, r5
   12eba:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   12ebc:	3510      	adds	r5, #16
   12ebe:	42bd      	cmp	r5, r7
   12ec0:	d3f5      	bcc.n	12eae <log_process_thread_func+0x6e>
   12ec2:	e7e8      	b.n	12e96 <log_process_thread_func+0x56>
   12ec4:	4d04      	ldr	r5, [pc, #16]	; (12ed8 <log_process_thread_func+0x98>)
   12ec6:	e7fa      	b.n	12ebe <log_process_thread_func+0x7e>
   12ec8:	200030bc 	.word	0x200030bc
   12ecc:	200030c4 	.word	0x200030c4
   12ed0:	20000ba4 	.word	0x20000ba4
   12ed4:	00026030 	.word	0x00026030
   12ed8:	00026010 	.word	0x00026010

00012edc <z_log_msg_post_finalize>:
{
   12edc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   12ede:	4818      	ldr	r0, [pc, #96]	; (12f40 <z_log_msg_post_finalize+0x64>)
   12ee0:	f00f fc4c 	bl	2277c <atomic_inc>
	if (panic_mode) {
   12ee4:	4b17      	ldr	r3, [pc, #92]	; (12f44 <z_log_msg_post_finalize+0x68>)
   12ee6:	781b      	ldrb	r3, [r3, #0]
   12ee8:	b17b      	cbz	r3, 12f0a <z_log_msg_post_finalize+0x2e>
   12eea:	f04f 0340 	mov.w	r3, #64	; 0x40
   12eee:	f3ef 8411 	mrs	r4, BASEPRI
   12ef2:	f383 8812 	msr	BASEPRI_MAX, r3
   12ef6:	f3bf 8f6f 	isb	sy
   12efa:	f7ff ff21 	bl	12d40 <z_impl_log_process>
	__asm__ volatile(
   12efe:	f384 8811 	msr	BASEPRI, r4
   12f02:	f3bf 8f6f 	isb	sy
}
   12f06:	b002      	add	sp, #8
   12f08:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   12f0a:	4b0f      	ldr	r3, [pc, #60]	; (12f48 <z_log_msg_post_finalize+0x6c>)
   12f0c:	681b      	ldr	r3, [r3, #0]
   12f0e:	2b00      	cmp	r3, #0
   12f10:	d0f9      	beq.n	12f06 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   12f12:	b950      	cbnz	r0, 12f2a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   12f14:	2200      	movs	r2, #0
   12f16:	2300      	movs	r3, #0
   12f18:	e9cd 2300 	strd	r2, r3, [sp]
   12f1c:	480b      	ldr	r0, [pc, #44]	; (12f4c <z_log_msg_post_finalize+0x70>)
   12f1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   12f22:	2300      	movs	r3, #0
   12f24:	f00b fd08 	bl	1e938 <z_impl_k_timer_start>
   12f28:	e7ed      	b.n	12f06 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12f2a:	280a      	cmp	r0, #10
   12f2c:	d1eb      	bne.n	12f06 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   12f2e:	4807      	ldr	r0, [pc, #28]	; (12f4c <z_log_msg_post_finalize+0x70>)
   12f30:	f012 fc9e 	bl	25870 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   12f34:	4806      	ldr	r0, [pc, #24]	; (12f50 <z_log_msg_post_finalize+0x74>)
}
   12f36:	b002      	add	sp, #8
   12f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f3c:	f00a bdc0 	b.w	1dac0 <z_impl_k_sem_give>
   12f40:	200030c4 	.word	0x200030c4
   12f44:	2000455e 	.word	0x2000455e
   12f48:	200030bc 	.word	0x200030bc
   12f4c:	20002220 	.word	0x20002220
   12f50:	20000ba4 	.word	0x20000ba4

00012f54 <z_log_msg_commit>:
{
   12f54:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   12f56:	4b06      	ldr	r3, [pc, #24]	; (12f70 <z_log_msg_commit+0x1c>)
   12f58:	681b      	ldr	r3, [r3, #0]
{
   12f5a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12f5c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   12f5e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   12f60:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   12f62:	4804      	ldr	r0, [pc, #16]	; (12f74 <z_log_msg_commit+0x20>)
   12f64:	f00f fb46 	bl	225f4 <mpsc_pbuf_commit>
}
   12f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   12f6c:	f7ff bfb6 	b.w	12edc <z_log_msg_post_finalize>
   12f70:	20000704 	.word	0x20000704
   12f74:	20000a50 	.word	0x20000a50

00012f78 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   12f78:	4a04      	ldr	r2, [pc, #16]	; (12f8c <log_source_name_get+0x14>)
   12f7a:	4b05      	ldr	r3, [pc, #20]	; (12f90 <log_source_name_get+0x18>)
   12f7c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   12f7e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   12f82:	bf34      	ite	cc
   12f84:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   12f88:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   12f8a:	4770      	bx	lr
   12f8c:	00025f30 	.word	0x00025f30
   12f90:	00026010 	.word	0x00026010

00012f94 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   12f94:	4b08      	ldr	r3, [pc, #32]	; (12fb8 <log_backend_enable+0x24>)
   12f96:	1ac3      	subs	r3, r0, r3
{
   12f98:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   12f9a:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   12f9c:	6844      	ldr	r4, [r0, #4]
   12f9e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   12fa0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   12fa2:	6843      	ldr	r3, [r0, #4]
   12fa4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   12fa6:	6843      	ldr	r3, [r0, #4]
   12fa8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   12faa:	6843      	ldr	r3, [r0, #4]
   12fac:	2201      	movs	r2, #1
   12fae:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   12fb0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   12fb2:	f7ff be35 	b.w	12c20 <z_log_notify_backend_enabled>
   12fb6:	bf00      	nop
   12fb8:	00026010 	.word	0x00026010

00012fbc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   12fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fc0:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   12fc2:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   12fc6:	f3c1 2649 	ubfx	r6, r1, #9, #10
   12fca:	9005      	str	r0, [sp, #20]
   12fcc:	460d      	mov	r5, r1
   12fce:	4690      	mov	r8, r2
   12fd0:	4699      	mov	r9, r3
   12fd2:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   12fd4:	2e00      	cmp	r6, #0
   12fd6:	d03c      	beq.n	13052 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   12fd8:	f04f 0b04 	mov.w	fp, #4
   12fdc:	af09      	add	r7, sp, #36	; 0x24
   12fde:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   12fe2:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   12fe4:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   12fe6:	ab0b      	add	r3, sp, #44	; 0x2c
   12fe8:	f8cd b008 	str.w	fp, [sp, #8]
   12fec:	9701      	str	r7, [sp, #4]
   12fee:	f8cd a000 	str.w	sl, [sp]
   12ff2:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   12ff4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   12ff8:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   12ffa:	9607      	str	r6, [sp, #28]
   12ffc:	f7fe fbc2 	bl	11784 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   13000:	f3c0 0309 	ubfx	r3, r0, #0, #10
   13004:	1918      	adds	r0, r3, r4
   13006:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1300a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   1300c:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1300e:	f363 2552 	bfi	r5, r3, #9, #10
   13012:	9306      	str	r3, [sp, #24]
   13014:	f7ff fe78 	bl	12d08 <z_log_msg_alloc>
		if (msg) {
   13018:	4604      	mov	r4, r0
   1301a:	b178      	cbz	r0, 1303c <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   1301c:	9b06      	ldr	r3, [sp, #24]
   1301e:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   13020:	3010      	adds	r0, #16
   13022:	2200      	movs	r2, #0
   13024:	900b      	str	r0, [sp, #44]	; 0x2c
   13026:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   13028:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   1302c:	4a0c      	ldr	r2, [pc, #48]	; (13060 <z_impl_z_log_msg_static_create+0xa4>)
   1302e:	9907      	ldr	r1, [sp, #28]
   13030:	f8cd a000 	str.w	sl, [sp]
   13034:	ab0b      	add	r3, sp, #44	; 0x2c
   13036:	4640      	mov	r0, r8
   13038:	f7fe fba4 	bl	11784 <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   1303c:	f366 2552 	bfi	r5, r6, #9, #10
   13040:	9905      	ldr	r1, [sp, #20]
   13042:	464b      	mov	r3, r9
   13044:	462a      	mov	r2, r5
   13046:	4620      	mov	r0, r4
}
   13048:	b00f      	add	sp, #60	; 0x3c
   1304a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   1304e:	f00f bbcb 	b.w	227e8 <z_log_msg_finalize>
   13052:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   13056:	0880      	lsrs	r0, r0, #2
   13058:	f7ff fe56 	bl	12d08 <z_log_msg_alloc>
   1305c:	4604      	mov	r4, r0
   1305e:	e7ed      	b.n	1303c <z_impl_z_log_msg_static_create+0x80>
   13060:	000227bd 	.word	0x000227bd

00013064 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   13064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13068:	b087      	sub	sp, #28
   1306a:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   1306e:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   13072:	4604      	mov	r4, r0
   13074:	460f      	mov	r7, r1
   13076:	4693      	mov	fp, r2
   13078:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   1307a:	b3b6      	cbz	r6, 130ea <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1307c:	2110      	movs	r1, #16
   1307e:	f8cd 9000 	str.w	r9, [sp]
   13082:	4633      	mov	r3, r6
   13084:	4652      	mov	r2, sl
   13086:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   13088:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   1308c:	f7fe f9a4 	bl	113d8 <cbvprintf_package>
   13090:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   13092:	4b17      	ldr	r3, [pc, #92]	; (130f0 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   13094:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   13096:	f004 0407 	and.w	r4, r4, #7
   1309a:	f00b 0b07 	and.w	fp, fp, #7
   1309e:	00e4      	lsls	r4, r4, #3
   130a0:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   130a4:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   130a8:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   130ac:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   130ae:	4408      	add	r0, r1
	struct log_msg_desc desc =
   130b0:	4b10      	ldr	r3, [pc, #64]	; (130f4 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   130b2:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   130b6:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   130ba:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   130bc:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   130be:	f7ff fe23 	bl	12d08 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   130c2:	4605      	mov	r5, r0
   130c4:	b140      	cbz	r0, 130d8 <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   130c6:	b13e      	cbz	r6, 130d8 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   130c8:	9903      	ldr	r1, [sp, #12]
   130ca:	f8cd 9000 	str.w	r9, [sp]
   130ce:	4633      	mov	r3, r6
   130d0:	4652      	mov	r2, sl
   130d2:	3010      	adds	r0, #16
   130d4:	f7fe f980 	bl	113d8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   130d8:	4643      	mov	r3, r8
   130da:	4622      	mov	r2, r4
   130dc:	4639      	mov	r1, r7
   130de:	4628      	mov	r0, r5
	}
}
   130e0:	b007      	add	sp, #28
   130e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   130e6:	f00f bb7f 	b.w	227e8 <z_log_msg_finalize>
		plen = 0;
   130ea:	4631      	mov	r1, r6
   130ec:	e7d1      	b.n	13092 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   130ee:	bf00      	nop
   130f0:	0007fe00 	.word	0x0007fe00
   130f4:	7ff80000 	.word	0x7ff80000

000130f8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   130f8:	b40e      	push	{r1, r2, r3}
   130fa:	b503      	push	{r0, r1, lr}
   130fc:	ab03      	add	r3, sp, #12
   130fe:	4601      	mov	r1, r0
   13100:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13104:	4804      	ldr	r0, [pc, #16]	; (13118 <print_formatted+0x20>)
	va_start(args, fmt);
   13106:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13108:	f00f fb95 	bl	22836 <cbvprintf>
	va_end(args);

	return length;
}
   1310c:	b002      	add	sp, #8
   1310e:	f85d eb04 	ldr.w	lr, [sp], #4
   13112:	b003      	add	sp, #12
   13114:	4770      	bx	lr
   13116:	bf00      	nop
   13118:	0002285f 	.word	0x0002285f

0001311c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1311c:	06ca      	lsls	r2, r1, #27
   1311e:	d405      	bmi.n	1312c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13120:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   13122:	bf4c      	ite	mi
   13124:	4902      	ldrmi	r1, [pc, #8]	; (13130 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   13126:	4903      	ldrpl	r1, [pc, #12]	; (13134 <newline_print+0x18>)
   13128:	f7ff bfe6 	b.w	130f8 <print_formatted>
	}
}
   1312c:	4770      	bx	lr
   1312e:	bf00      	nop
   13130:	00026c14 	.word	0x00026c14
   13134:	00026c13 	.word	0x00026c13

00013138 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   13138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1313c:	b089      	sub	sp, #36	; 0x24
   1313e:	469b      	mov	fp, r3
   13140:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   13144:	9304      	str	r3, [sp, #16]
   13146:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   1314a:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1314c:	9b04      	ldr	r3, [sp, #16]
{
   1314e:	9206      	str	r2, [sp, #24]
   13150:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   13154:	4604      	mov	r4, r0
   13156:	460d      	mov	r5, r1
	if (!raw_string) {
   13158:	2b00      	cmp	r3, #0
   1315a:	f000 8087 	beq.w	1326c <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1315e:	f006 0308 	and.w	r3, r6, #8
   13162:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   13164:	f00f fb28 	bl	227b8 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   13168:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   1316c:	4602      	mov	r2, r0
   1316e:	2800      	cmp	r0, #0
   13170:	d04b      	beq.n	1320a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   13172:	4986      	ldr	r1, [pc, #536]	; (1338c <log_output_process+0x254>)
   13174:	4620      	mov	r0, r4
   13176:	f7ff ffbf 	bl	130f8 <print_formatted>
   1317a:	4680      	mov	r8, r0
	if (stamp) {
   1317c:	f1ba 0f00 	cmp.w	sl, #0
   13180:	d008      	beq.n	13194 <log_output_process+0x5c>
	if (!format) {
   13182:	f016 0f44 	tst.w	r6, #68	; 0x44
   13186:	d142      	bne.n	1320e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13188:	4981      	ldr	r1, [pc, #516]	; (13390 <log_output_process+0x258>)
   1318a:	462a      	mov	r2, r5
   1318c:	4620      	mov	r0, r4
   1318e:	f7ff ffb3 	bl	130f8 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   13192:	4480      	add	r8, r0
	if (color) {
   13194:	f006 0301 	and.w	r3, r6, #1
   13198:	b15b      	cbz	r3, 131b2 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   1319a:	4b7e      	ldr	r3, [pc, #504]	; (13394 <log_output_process+0x25c>)
   1319c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   1319e:	497e      	ldr	r1, [pc, #504]	; (13398 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   131a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   131a4:	4b7d      	ldr	r3, [pc, #500]	; (1339c <log_output_process+0x264>)
   131a6:	4620      	mov	r0, r4
   131a8:	2a00      	cmp	r2, #0
   131aa:	bf08      	it	eq
   131ac:	461a      	moveq	r2, r3
   131ae:	f7ff ffa3 	bl	130f8 <print_formatted>
	if (level_on) {
   131b2:	f006 0308 	and.w	r3, r6, #8
   131b6:	2b00      	cmp	r3, #0
   131b8:	d055      	beq.n	13266 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   131ba:	4b79      	ldr	r3, [pc, #484]	; (133a0 <log_output_process+0x268>)
   131bc:	9a04      	ldr	r2, [sp, #16]
   131be:	4979      	ldr	r1, [pc, #484]	; (133a4 <log_output_process+0x26c>)
   131c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   131c4:	4620      	mov	r0, r4
   131c6:	f7ff ff97 	bl	130f8 <print_formatted>
   131ca:	4605      	mov	r5, r0
	if (domain) {
   131cc:	9b06      	ldr	r3, [sp, #24]
   131ce:	b12b      	cbz	r3, 131dc <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   131d0:	4975      	ldr	r1, [pc, #468]	; (133a8 <log_output_process+0x270>)
   131d2:	461a      	mov	r2, r3
   131d4:	4620      	mov	r0, r4
   131d6:	f7ff ff8f 	bl	130f8 <print_formatted>
   131da:	4405      	add	r5, r0
	if (source) {
   131dc:	f1bb 0f00 	cmp.w	fp, #0
   131e0:	d005      	beq.n	131ee <log_output_process+0xb6>
		total += print_formatted(output,
   131e2:	4972      	ldr	r1, [pc, #456]	; (133ac <log_output_process+0x274>)
   131e4:	465a      	mov	r2, fp
   131e6:	4620      	mov	r0, r4
   131e8:	f7ff ff86 	bl	130f8 <print_formatted>
   131ec:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   131ee:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   131f0:	f1b9 0f00 	cmp.w	r9, #0
   131f4:	d149      	bne.n	1328a <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   131f6:	2f00      	cmp	r7, #0
   131f8:	d14f      	bne.n	1329a <log_output_process+0x162>
	if (color) {
   131fa:	07f3      	lsls	r3, r6, #31
   131fc:	f100 80c0 	bmi.w	13380 <log_output_process+0x248>
	newline_print(output, flags);
   13200:	4631      	mov	r1, r6
   13202:	4620      	mov	r0, r4
   13204:	f7ff ff8a 	bl	1311c <newline_print>
}
   13208:	e0b4      	b.n	13374 <log_output_process+0x23c>
	uint32_t length = 0U;
   1320a:	4680      	mov	r8, r0
   1320c:	e7b6      	b.n	1317c <log_output_process+0x44>
	} else if (freq != 0U) {
   1320e:	4b68      	ldr	r3, [pc, #416]	; (133b0 <log_output_process+0x278>)
   13210:	6818      	ldr	r0, [r3, #0]
   13212:	2800      	cmp	r0, #0
   13214:	d0bd      	beq.n	13192 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   13216:	4b67      	ldr	r3, [pc, #412]	; (133b4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   13218:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1321c:	681b      	ldr	r3, [r3, #0]
   1321e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   13222:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   13226:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1322a:	fb00 5513 	mls	r5, r0, r3, r5
   1322e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   13232:	fb0e f505 	mul.w	r5, lr, r5
   13236:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   1323a:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1323c:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   13240:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13244:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   13248:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1324c:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   13250:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   13252:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   13256:	4958      	ldr	r1, [pc, #352]	; (133b8 <log_output_process+0x280>)
   13258:	e9cd c501 	strd	ip, r5, [sp, #4]
   1325c:	4652      	mov	r2, sl
   1325e:	4620      	mov	r0, r4
   13260:	f7ff ff4a 	bl	130f8 <print_formatted>
   13264:	e795      	b.n	13192 <log_output_process+0x5a>
	int total = 0;
   13266:	f006 0508 	and.w	r5, r6, #8
   1326a:	e7af      	b.n	131cc <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1326c:	f1bb 0f01 	cmp.w	fp, #1
   13270:	d106      	bne.n	13280 <log_output_process+0x148>
	if (package) {
   13272:	f1b9 0f00 	cmp.w	r9, #0
   13276:	d164      	bne.n	13342 <log_output_process+0x20a>
	if (data_len) {
   13278:	2f00      	cmp	r7, #0
   1327a:	d07b      	beq.n	13374 <log_output_process+0x23c>
		prefix_offset = 0;
   1327c:	2500      	movs	r5, #0
   1327e:	e00c      	b.n	1329a <log_output_process+0x162>
	if (package) {
   13280:	f1b9 0f00 	cmp.w	r9, #0
   13284:	d0f8      	beq.n	13278 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13286:	484d      	ldr	r0, [pc, #308]	; (133bc <log_output_process+0x284>)
   13288:	e05c      	b.n	13344 <log_output_process+0x20c>
		cb = out_func;
   1328a:	484d      	ldr	r0, [pc, #308]	; (133c0 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   1328c:	494d      	ldr	r1, [pc, #308]	; (133c4 <log_output_process+0x28c>)
   1328e:	464b      	mov	r3, r9
   13290:	4622      	mov	r2, r4
   13292:	f00e fc8c 	bl	21bae <cbpprintf_external>
	if (data_len) {
   13296:	2f00      	cmp	r7, #0
   13298:	d068      	beq.n	1336c <log_output_process+0x234>
		print_formatted(output, " ");
   1329a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 133c8 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1329e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 133cc <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   132a2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   132a4:	4631      	mov	r1, r6
   132a6:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   132a8:	46b8      	mov	r8, r7
   132aa:	bf28      	it	cs
   132ac:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   132b0:	f7ff ff34 	bl	1311c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   132b4:	f04f 0b00 	mov.w	fp, #0
   132b8:	455d      	cmp	r5, fp
   132ba:	dc45      	bgt.n	13348 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   132bc:	9b05      	ldr	r3, [sp, #20]
   132be:	4651      	mov	r1, sl
   132c0:	781a      	ldrb	r2, [r3, #0]
   132c2:	4620      	mov	r0, r4
   132c4:	f7ff ff18 	bl	130f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   132c8:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   132cc:	f01b 0f07 	tst.w	fp, #7
   132d0:	d103      	bne.n	132da <log_output_process+0x1a2>
			print_formatted(output, " ");
   132d2:	4649      	mov	r1, r9
   132d4:	4620      	mov	r0, r4
   132d6:	f7ff ff0f 	bl	130f8 <print_formatted>
		if (i < length) {
   132da:	45d8      	cmp	r8, fp
   132dc:	d93b      	bls.n	13356 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   132de:	9b05      	ldr	r3, [sp, #20]
   132e0:	4651      	mov	r1, sl
   132e2:	f813 200b 	ldrb.w	r2, [r3, fp]
   132e6:	4620      	mov	r0, r4
   132e8:	f7ff ff06 	bl	130f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   132ec:	f10b 0b01 	add.w	fp, fp, #1
   132f0:	f1bb 0f10 	cmp.w	fp, #16
   132f4:	d1ea      	bne.n	132cc <log_output_process+0x194>
	print_formatted(output, "|");
   132f6:	4936      	ldr	r1, [pc, #216]	; (133d0 <log_output_process+0x298>)
   132f8:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   132fa:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   132fe:	f7ff fefb 	bl	130f8 <print_formatted>
		if (i < length) {
   13302:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   13304:	9b05      	ldr	r3, [sp, #20]
   13306:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   13308:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   1330c:	295f      	cmp	r1, #95	; 0x5f
   1330e:	bf28      	it	cs
   13310:	222e      	movcs	r2, #46	; 0x2e
   13312:	4930      	ldr	r1, [pc, #192]	; (133d4 <log_output_process+0x29c>)
   13314:	4620      	mov	r0, r4
   13316:	f7ff feef 	bl	130f8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1331a:	f10b 0b01 	add.w	fp, fp, #1
   1331e:	f1bb 0f10 	cmp.w	fp, #16
   13322:	d01d      	beq.n	13360 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   13324:	f01b 0f07 	tst.w	fp, #7
   13328:	d103      	bne.n	13332 <log_output_process+0x1fa>
			print_formatted(output, " ");
   1332a:	4649      	mov	r1, r9
   1332c:	4620      	mov	r0, r4
   1332e:	f7ff fee3 	bl	130f8 <print_formatted>
		if (i < length) {
   13332:	45d8      	cmp	r8, fp
   13334:	465a      	mov	r2, fp
   13336:	d8e5      	bhi.n	13304 <log_output_process+0x1cc>
			print_formatted(output, " ");
   13338:	4649      	mov	r1, r9
   1333a:	4620      	mov	r0, r4
   1333c:	f7ff fedc 	bl	130f8 <print_formatted>
   13340:	e7eb      	b.n	1331a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   13342:	481f      	ldr	r0, [pc, #124]	; (133c0 <log_output_process+0x288>)
		prefix_offset = 0;
   13344:	9d04      	ldr	r5, [sp, #16]
   13346:	e7a1      	b.n	1328c <log_output_process+0x154>
		print_formatted(output, " ");
   13348:	4649      	mov	r1, r9
   1334a:	4620      	mov	r0, r4
   1334c:	f7ff fed4 	bl	130f8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13350:	f10b 0b01 	add.w	fp, fp, #1
   13354:	e7b0      	b.n	132b8 <log_output_process+0x180>
			print_formatted(output, "   ");
   13356:	4920      	ldr	r1, [pc, #128]	; (133d8 <log_output_process+0x2a0>)
   13358:	4620      	mov	r0, r4
   1335a:	f7ff fecd 	bl	130f8 <print_formatted>
   1335e:	e7c5      	b.n	132ec <log_output_process+0x1b4>
		data += length;
   13360:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   13362:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   13366:	4443      	add	r3, r8
   13368:	9305      	str	r3, [sp, #20]
	} while (len);
   1336a:	d19a      	bne.n	132a2 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1336c:	9b04      	ldr	r3, [sp, #16]
   1336e:	2b00      	cmp	r3, #0
   13370:	f47f af43 	bne.w	131fa <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   13374:	4620      	mov	r0, r4
}
   13376:	b009      	add	sp, #36	; 0x24
   13378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1337c:	f00f ba62 	b.w	22844 <log_output_flush>
		print_formatted(output, "%s", log_color);
   13380:	4a06      	ldr	r2, [pc, #24]	; (1339c <log_output_process+0x264>)
   13382:	4905      	ldr	r1, [pc, #20]	; (13398 <log_output_process+0x260>)
   13384:	4620      	mov	r0, r4
   13386:	f7ff feb7 	bl	130f8 <print_formatted>
}
   1338a:	e739      	b.n	13200 <log_output_process+0xc8>
   1338c:	00026db3 	.word	0x00026db3
   13390:	00026db7 	.word	0x00026db7
   13394:	00026168 	.word	0x00026168
   13398:	00027509 	.word	0x00027509
   1339c:	00026dae 	.word	0x00026dae
   133a0:	0002617c 	.word	0x0002617c
   133a4:	00026ddc 	.word	0x00026ddc
   133a8:	00026de2 	.word	0x00026de2
   133ac:	00026de6 	.word	0x00026de6
   133b0:	200030d0 	.word	0x200030d0
   133b4:	200030cc 	.word	0x200030cc
   133b8:	00026dc0 	.word	0x00026dc0
   133bc:	00022895 	.word	0x00022895
   133c0:	0002285f 	.word	0x0002285f
   133c4:	00022837 	.word	0x00022837
   133c8:	00026df3 	.word	0x00026df3
   133cc:	00026deb 	.word	0x00026deb
   133d0:	00026df5 	.word	0x00026df5
   133d4:	00026df7 	.word	0x00026df7
   133d8:	00026df1 	.word	0x00026df1

000133dc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   133dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   133e0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   133e2:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   133e4:	688e      	ldr	r6, [r1, #8]
   133e6:	b086      	sub	sp, #24
   133e8:	4605      	mov	r5, r0
   133ea:	460c      	mov	r4, r1
   133ec:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   133ee:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   133f2:	b15b      	cbz	r3, 1340c <log_output_msg_process+0x30>
   133f4:	4a13      	ldr	r2, [pc, #76]	; (13444 <log_output_msg_process+0x68>)
   133f6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   133f8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   133fc:	2900      	cmp	r1, #0
   133fe:	db1f      	blt.n	13440 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   13400:	7820      	ldrb	r0, [r4, #0]
   13402:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   13406:	f7ff fdb7 	bl	12f78 <log_source_name_get>
   1340a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1340c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1340e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   13410:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   13414:	9700      	str	r7, [sp, #0]
   13416:	f3c2 2249 	ubfx	r2, r2, #9, #10
   1341a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1341c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   13420:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   13424:	bf08      	it	eq
   13426:	2100      	moveq	r1, #0
   13428:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1342c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   13430:	2200      	movs	r2, #0
   13432:	4631      	mov	r1, r6
   13434:	4628      	mov	r0, r5
   13436:	f7ff fe7f 	bl	13138 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1343a:	b006      	add	sp, #24
   1343c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   13440:	2300      	movs	r3, #0
   13442:	e7e3      	b.n	1340c <log_output_msg_process+0x30>
   13444:	00025f30 	.word	0x00025f30

00013448 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13448:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1344a:	f242 730f 	movw	r3, #9999	; 0x270f
   1344e:	428b      	cmp	r3, r1
   13450:	bf28      	it	cs
   13452:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13454:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13456:	4a0f      	ldr	r2, [pc, #60]	; (13494 <log_output_dropped_process+0x4c>)
{
   13458:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1345a:	2105      	movs	r1, #5
   1345c:	4668      	mov	r0, sp
   1345e:	f00e fc20 	bl	21ca2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13462:	6863      	ldr	r3, [r4, #4]
   13464:	490c      	ldr	r1, [pc, #48]	; (13498 <log_output_dropped_process+0x50>)
   13466:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13468:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1346a:	220b      	movs	r2, #11
   1346c:	4628      	mov	r0, r5
   1346e:	f00f f9d5 	bl	2281c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13472:	6863      	ldr	r3, [r4, #4]
   13474:	4632      	mov	r2, r6
   13476:	4669      	mov	r1, sp
   13478:	4628      	mov	r0, r5
   1347a:	685b      	ldr	r3, [r3, #4]
   1347c:	f00f f9ce 	bl	2281c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13480:	6863      	ldr	r3, [r4, #4]
   13482:	4906      	ldr	r1, [pc, #24]	; (1349c <log_output_dropped_process+0x54>)
   13484:	685b      	ldr	r3, [r3, #4]
   13486:	221b      	movs	r2, #27
   13488:	4628      	mov	r0, r5
   1348a:	f00f f9c7 	bl	2281c <buffer_write>
		     output->control_block->ctx);
}
   1348e:	b002      	add	sp, #8
   13490:	bd70      	pop	{r4, r5, r6, pc}
   13492:	bf00      	nop
   13494:	00028614 	.word	0x00028614
   13498:	00026e16 	.word	0x00026e16
   1349c:	00026dfa 	.word	0x00026dfa

000134a0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   134a0:	4a07      	ldr	r2, [pc, #28]	; (134c0 <log_output_timestamp_freq_set+0x20>)
   134a2:	2100      	movs	r1, #0
   134a4:	2301      	movs	r3, #1
   134a6:	4290      	cmp	r0, r2
   134a8:	d806      	bhi.n	134b8 <log_output_timestamp_freq_set+0x18>
   134aa:	4a06      	ldr	r2, [pc, #24]	; (134c4 <log_output_timestamp_freq_set+0x24>)
   134ac:	b901      	cbnz	r1, 134b0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   134ae:	2301      	movs	r3, #1
   134b0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   134b2:	4b05      	ldr	r3, [pc, #20]	; (134c8 <log_output_timestamp_freq_set+0x28>)
   134b4:	6018      	str	r0, [r3, #0]
}
   134b6:	4770      	bx	lr
		frequency /= 2U;
   134b8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   134ba:	005b      	lsls	r3, r3, #1
   134bc:	2101      	movs	r1, #1
   134be:	e7f2      	b.n	134a6 <log_output_timestamp_freq_set+0x6>
   134c0:	000f4240 	.word	0x000f4240
   134c4:	200030cc 	.word	0x200030cc
   134c8:	200030d0 	.word	0x200030d0

000134cc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   134cc:	4b01      	ldr	r3, [pc, #4]	; (134d4 <log_backend_rtt_init+0x8>)
   134ce:	2201      	movs	r2, #1
   134d0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   134d2:	4770      	bx	lr
   134d4:	2000455f 	.word	0x2000455f

000134d8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   134d8:	4b01      	ldr	r3, [pc, #4]	; (134e0 <format_set+0x8>)
	return 0;
}
   134da:	2000      	movs	r0, #0
	log_format_current = log_type;
   134dc:	6019      	str	r1, [r3, #0]
}
   134de:	4770      	bx	lr
   134e0:	200030e8 	.word	0x200030e8

000134e4 <panic>:
	panic_mode = true;
   134e4:	4b02      	ldr	r3, [pc, #8]	; (134f0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   134e6:	4803      	ldr	r0, [pc, #12]	; (134f4 <panic+0x10>)
   134e8:	2201      	movs	r2, #1
   134ea:	701a      	strb	r2, [r3, #0]
   134ec:	f00f b9aa 	b.w	22844 <log_output_flush>
   134f0:	20004560 	.word	0x20004560
   134f4:	000261ac 	.word	0x000261ac

000134f8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   134f8:	4801      	ldr	r0, [pc, #4]	; (13500 <dropped+0x8>)
   134fa:	f7ff bfa5 	b.w	13448 <log_output_dropped_process>
   134fe:	bf00      	nop
   13500:	000261ac 	.word	0x000261ac

00013504 <process>:
{
   13504:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13506:	4b06      	ldr	r3, [pc, #24]	; (13520 <process+0x1c>)
   13508:	6818      	ldr	r0, [r3, #0]
{
   1350a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1350c:	f7ff fb72 	bl	12bf4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   13510:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13512:	4603      	mov	r3, r0
}
   13514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   13518:	4802      	ldr	r0, [pc, #8]	; (13524 <process+0x20>)
   1351a:	220f      	movs	r2, #15
   1351c:	4718      	bx	r3
   1351e:	bf00      	nop
   13520:	200030e8 	.word	0x200030e8
   13524:	000261ac 	.word	0x000261ac

00013528 <on_failed_write>:
	if (retry_cnt == 0) {
   13528:	b910      	cbnz	r0, 13530 <on_failed_write+0x8>
		host_present = false;
   1352a:	4b07      	ldr	r3, [pc, #28]	; (13548 <on_failed_write+0x20>)
   1352c:	7018      	strb	r0, [r3, #0]
}
   1352e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13530:	4b06      	ldr	r3, [pc, #24]	; (1354c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   13532:	781b      	ldrb	r3, [r3, #0]
   13534:	b11b      	cbz	r3, 1353e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   13536:	f241 3088 	movw	r0, #5000	; 0x1388
   1353a:	f012 b967 	b.w	2580c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1353e:	20a4      	movs	r0, #164	; 0xa4
   13540:	2100      	movs	r1, #0
   13542:	f00a bfa3 	b.w	1e48c <z_impl_k_sleep>
   13546:	bf00      	nop
   13548:	2000455f 	.word	0x2000455f
   1354c:	20004560 	.word	0x20004560

00013550 <data_out_block_mode>:
{
   13550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   13554:	f8df 9074 	ldr.w	r9, [pc, #116]	; 135cc <data_out_block_mode+0x7c>
   13558:	4f1d      	ldr	r7, [pc, #116]	; (135d0 <data_out_block_mode+0x80>)
{
   1355a:	4680      	mov	r8, r0
   1355c:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1355e:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   13560:	f899 5000 	ldrb.w	r5, [r9]
   13564:	b995      	cbnz	r5, 1358c <data_out_block_mode+0x3c>
			RTT_LOCK();
   13566:	f009 fe69 	bl	1d23c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1356a:	4628      	mov	r0, r5
   1356c:	4632      	mov	r2, r6
   1356e:	4641      	mov	r1, r8
   13570:	f009 fe12 	bl	1d198 <SEGGER_RTT_WriteSkipNoLock>
   13574:	4605      	mov	r5, r0
			RTT_UNLOCK();
   13576:	f009 fe6b 	bl	1d250 <zephyr_rtt_mutex_unlock>
		if (ret) {
   1357a:	b1e5      	cbz	r5, 135b6 <data_out_block_mode+0x66>
	host_present = true;
   1357c:	2301      	movs	r3, #1
   1357e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   13580:	f899 3000 	ldrb.w	r3, [r9]
   13584:	b973      	cbnz	r3, 135a4 <data_out_block_mode+0x54>
}
   13586:	4630      	mov	r0, r6
   13588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1358c:	4632      	mov	r2, r6
   1358e:	4641      	mov	r1, r8
   13590:	2000      	movs	r0, #0
   13592:	f009 fe01 	bl	1d198 <SEGGER_RTT_WriteSkipNoLock>
   13596:	4605      	mov	r5, r0
   13598:	e7ef      	b.n	1357a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   1359a:	4620      	mov	r0, r4
   1359c:	f7ff ffc4 	bl	13528 <on_failed_write>
   135a0:	1e65      	subs	r5, r4, #1
   135a2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   135a4:	2000      	movs	r0, #0
   135a6:	f009 fe3f 	bl	1d228 <SEGGER_RTT_HasDataUp>
   135aa:	2800      	cmp	r0, #0
   135ac:	d0eb      	beq.n	13586 <data_out_block_mode+0x36>
   135ae:	783b      	ldrb	r3, [r7, #0]
   135b0:	2b00      	cmp	r3, #0
   135b2:	d1f2      	bne.n	1359a <data_out_block_mode+0x4a>
   135b4:	e7e7      	b.n	13586 <data_out_block_mode+0x36>
		} else if (host_present) {
   135b6:	783b      	ldrb	r3, [r7, #0]
   135b8:	2b00      	cmp	r3, #0
   135ba:	d0e4      	beq.n	13586 <data_out_block_mode+0x36>
			retry_cnt--;
   135bc:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   135be:	4620      	mov	r0, r4
   135c0:	f7ff ffb2 	bl	13528 <on_failed_write>
	} while ((ret == 0) && host_present);
   135c4:	783b      	ldrb	r3, [r7, #0]
   135c6:	2b00      	cmp	r3, #0
   135c8:	d1ca      	bne.n	13560 <data_out_block_mode+0x10>
   135ca:	e7dc      	b.n	13586 <data_out_block_mode+0x36>
   135cc:	20004560 	.word	0x20004560
   135d0:	2000455f 	.word	0x2000455f

000135d4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   135d4:	4b01      	ldr	r3, [pc, #4]	; (135dc <format_set+0x8>)
	return 0;
}
   135d6:	2000      	movs	r0, #0
	log_format_current = log_type;
   135d8:	6019      	str	r1, [r3, #0]
}
   135da:	4770      	bx	lr
   135dc:	20003100 	.word	0x20003100

000135e0 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   135e0:	4b02      	ldr	r3, [pc, #8]	; (135ec <panic+0xc>)
	log_output_flush(output);
   135e2:	4803      	ldr	r0, [pc, #12]	; (135f0 <panic+0x10>)
   135e4:	2201      	movs	r2, #1
   135e6:	701a      	strb	r2, [r3, #0]
   135e8:	f00f b92c 	b.w	22844 <log_output_flush>
   135ec:	20004572 	.word	0x20004572
   135f0:	000261d8 	.word	0x000261d8

000135f4 <dropped>:
	log_output_dropped_process(output, cnt);
   135f4:	4801      	ldr	r0, [pc, #4]	; (135fc <dropped+0x8>)
   135f6:	f7ff bf27 	b.w	13448 <log_output_dropped_process>
   135fa:	bf00      	nop
   135fc:	000261d8 	.word	0x000261d8

00013600 <process>:
{
   13600:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13602:	4b06      	ldr	r3, [pc, #24]	; (1361c <process+0x1c>)
   13604:	6818      	ldr	r0, [r3, #0]
{
   13606:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   13608:	f7ff faf4 	bl	12bf4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1360c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1360e:	4603      	mov	r3, r0
}
   13610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   13614:	4802      	ldr	r0, [pc, #8]	; (13620 <process+0x20>)
   13616:	220f      	movs	r2, #15
   13618:	4718      	bx	r3
   1361a:	bf00      	nop
   1361c:	20003100 	.word	0x20003100
   13620:	000261d8 	.word	0x000261d8

00013624 <char_out>:
{
   13624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
   13626:	4f07      	ldr	r7, [pc, #28]	; (13644 <char_out+0x20>)
   13628:	460d      	mov	r5, r1
   1362a:	4604      	mov	r4, r0
   1362c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1362e:	42b4      	cmp	r4, r6
   13630:	d101      	bne.n	13636 <char_out+0x12>
}
   13632:	4628      	mov	r0, r5
   13634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   13636:	f814 1b01 	ldrb.w	r1, [r4], #1
   1363a:	68bb      	ldr	r3, [r7, #8]
   1363c:	4801      	ldr	r0, [pc, #4]	; (13644 <char_out+0x20>)
   1363e:	69db      	ldr	r3, [r3, #28]
   13640:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   13642:	e7f4      	b.n	1362e <char_out+0xa>
   13644:	00025cfc 	.word	0x00025cfc

00013648 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1364c:	4605      	mov	r5, r0
	__asm__ volatile(
   1364e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13652:	f3ef 8611 	mrs	r6, BASEPRI
   13656:	f383 8812 	msr	BASEPRI_MAX, r3
   1365a:	f3bf 8f6f 	isb	sy
	return list->head;
   1365e:	4b0e      	ldr	r3, [pc, #56]	; (13698 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13660:	4f0e      	ldr	r7, [pc, #56]	; (1369c <pm_state_notify+0x54>)
   13662:	681c      	ldr	r4, [r3, #0]
   13664:	f8df 8038 	ldr.w	r8, [pc, #56]	; 136a0 <pm_state_notify+0x58>
   13668:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1366c:	b92c      	cbnz	r4, 1367a <pm_state_notify+0x32>
	__asm__ volatile(
   1366e:	f386 8811 	msr	BASEPRI, r6
   13672:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   1367a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   1367e:	2d00      	cmp	r5, #0
   13680:	bf18      	it	ne
   13682:	4613      	movne	r3, r2
		if (callback) {
   13684:	b12b      	cbz	r3, 13692 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13686:	f898 2014 	ldrb.w	r2, [r8, #20]
   1368a:	fb09 f202 	mul.w	r2, r9, r2
   1368e:	5cb8      	ldrb	r0, [r7, r2]
   13690:	4798      	blx	r3
	return node->next;
   13692:	6824      	ldr	r4, [r4, #0]
   13694:	e7ea      	b.n	1366c <pm_state_notify+0x24>
   13696:	bf00      	nop
   13698:	2000311c 	.word	0x2000311c
   1369c:	20003110 	.word	0x20003110
   136a0:	20003a3c 	.word	0x20003a3c

000136a4 <pm_system_resume>:

void pm_system_resume(void)
{
   136a4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   136a6:	4b19      	ldr	r3, [pc, #100]	; (1370c <pm_system_resume+0x68>)
   136a8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   136aa:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   136ae:	f004 031f 	and.w	r3, r4, #31
   136b2:	2201      	movs	r2, #1
   136b4:	409a      	lsls	r2, r3
   136b6:	4b16      	ldr	r3, [pc, #88]	; (13710 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   136b8:	0961      	lsrs	r1, r4, #5
   136ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   136be:	43d0      	mvns	r0, r2
   136c0:	e853 1f00 	ldrex	r1, [r3]
   136c4:	ea01 0500 	and.w	r5, r1, r0
   136c8:	e843 5600 	strex	r6, r5, [r3]
   136cc:	2e00      	cmp	r6, #0
   136ce:	d1f7      	bne.n	136c0 <pm_system_resume+0x1c>
   136d0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   136d4:	420a      	tst	r2, r1
   136d6:	d013      	beq.n	13700 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   136d8:	4b0e      	ldr	r3, [pc, #56]	; (13714 <pm_system_resume+0x70>)
   136da:	4d0f      	ldr	r5, [pc, #60]	; (13718 <pm_system_resume+0x74>)
   136dc:	b18b      	cbz	r3, 13702 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   136de:	230c      	movs	r3, #12
   136e0:	4363      	muls	r3, r4
   136e2:	18ea      	adds	r2, r5, r3
   136e4:	5ce8      	ldrb	r0, [r5, r3]
   136e6:	7851      	ldrb	r1, [r2, #1]
   136e8:	f00f fb87 	bl	22dfa <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   136ec:	2000      	movs	r0, #0
   136ee:	f7ff ffab 	bl	13648 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   136f2:	230c      	movs	r3, #12
   136f4:	435c      	muls	r4, r3
   136f6:	192a      	adds	r2, r5, r4
   136f8:	2300      	movs	r3, #0
   136fa:	512b      	str	r3, [r5, r4]
   136fc:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13700:	bd70      	pop	{r4, r5, r6, pc}
   13702:	f383 8811 	msr	BASEPRI, r3
   13706:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1370a:	e7ef      	b.n	136ec <pm_system_resume+0x48>
   1370c:	20003a3c 	.word	0x20003a3c
   13710:	20003124 	.word	0x20003124
   13714:	00022dfb 	.word	0x00022dfb
   13718:	20003110 	.word	0x20003110

0001371c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   1371c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13720:	4b35      	ldr	r3, [pc, #212]	; (137f8 <pm_system_suspend+0xdc>)
{
   13722:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13724:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   13726:	f04f 0340 	mov.w	r3, #64	; 0x40
   1372a:	f3ef 8811 	mrs	r8, BASEPRI
   1372e:	f383 8812 	msr	BASEPRI_MAX, r3
   13732:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13736:	240c      	movs	r4, #12
   13738:	4b30      	ldr	r3, [pc, #192]	; (137fc <pm_system_suspend+0xe0>)
   1373a:	4e31      	ldr	r6, [pc, #196]	; (13800 <pm_system_suspend+0xe4>)
   1373c:	436c      	muls	r4, r5
   1373e:	191a      	adds	r2, r3, r4
   13740:	5d19      	ldrb	r1, [r3, r4]
   13742:	2900      	cmp	r1, #0
   13744:	d04c      	beq.n	137e0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13746:	ca07      	ldmia	r2, {r0, r1, r2}
   13748:	eb06 0c04 	add.w	ip, r6, r4
   1374c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13750:	2200      	movs	r2, #0
   13752:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   13754:	f388 8811 	msr	BASEPRI, r8
   13758:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   1375c:	230c      	movs	r3, #12
   1375e:	436b      	muls	r3, r5
   13760:	18f2      	adds	r2, r6, r3
   13762:	5cf0      	ldrb	r0, [r6, r3]
   13764:	2800      	cmp	r0, #0
   13766:	d039      	beq.n	137dc <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13768:	1c7b      	adds	r3, r7, #1
   1376a:	d010      	beq.n	1378e <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1376c:	f8d2 c008 	ldr.w	ip, [r2, #8]
   13770:	4c24      	ldr	r4, [pc, #144]	; (13804 <pm_system_suspend+0xe8>)
   13772:	4a25      	ldr	r2, [pc, #148]	; (13808 <pm_system_suspend+0xec>)
   13774:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   13778:	2100      	movs	r1, #0
   1377a:	fbec 4100 	umlal	r4, r1, ip, r0
   1377e:	2300      	movs	r3, #0
   13780:	4620      	mov	r0, r4
   13782:	f7ed f8db 	bl	93c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13786:	2101      	movs	r1, #1
   13788:	1a38      	subs	r0, r7, r0
   1378a:	f012 f81d 	bl	257c8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1378e:	f00a fdbf 	bl	1e310 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13792:	2001      	movs	r0, #1
   13794:	f7ff ff58 	bl	13648 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13798:	f3bf 8f5b 	dmb	ish
   1379c:	4b1b      	ldr	r3, [pc, #108]	; (1380c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1379e:	096a      	lsrs	r2, r5, #5
   137a0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   137a4:	f005 011f 	and.w	r1, r5, #31
   137a8:	2201      	movs	r2, #1
   137aa:	408a      	lsls	r2, r1
   137ac:	e853 0f00 	ldrex	r0, [r3]
   137b0:	4310      	orrs	r0, r2
   137b2:	e843 0100 	strex	r1, r0, [r3]
   137b6:	2900      	cmp	r1, #0
   137b8:	d1f8      	bne.n	137ac <pm_system_suspend+0x90>
   137ba:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   137be:	4b14      	ldr	r3, [pc, #80]	; (13810 <pm_system_suspend+0xf4>)
   137c0:	b13b      	cbz	r3, 137d2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   137c2:	230c      	movs	r3, #12
   137c4:	fb03 f005 	mul.w	r0, r3, r5
   137c8:	1833      	adds	r3, r6, r0
   137ca:	5c30      	ldrb	r0, [r6, r0]
   137cc:	7859      	ldrb	r1, [r3, #1]
   137ce:	f00f fb08 	bl	22de2 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   137d2:	f7ff ff67 	bl	136a4 <pm_system_resume>
	k_sched_unlock();
   137d6:	f00a fdaf 	bl	1e338 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   137da:	2001      	movs	r0, #1
}
   137dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   137e0:	4601      	mov	r1, r0
   137e2:	4628      	mov	r0, r5
   137e4:	f000 f816 	bl	13814 <pm_policy_next_state>
		if (info != NULL) {
   137e8:	2800      	cmp	r0, #0
   137ea:	d0b3      	beq.n	13754 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   137ec:	c807      	ldmia	r0, {r0, r1, r2}
   137ee:	4434      	add	r4, r6
   137f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   137f4:	e7ae      	b.n	13754 <pm_system_suspend+0x38>
   137f6:	bf00      	nop
   137f8:	20003a3c 	.word	0x20003a3c
   137fc:	20003104 	.word	0x20003104
   13800:	20003110 	.word	0x20003110
   13804:	000f423f 	.word	0x000f423f
   13808:	000f4240 	.word	0x000f4240
   1380c:	20003124 	.word	0x20003124
   13810:	00022de3 	.word	0x00022de3

00013814 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13818:	b085      	sub	sp, #20
   1381a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   1381c:	a903      	add	r1, sp, #12
   1381e:	f000 f843 	bl	138a8 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13822:	4b1e      	ldr	r3, [pc, #120]	; (1389c <pm_policy_next_state+0x88>)
   13824:	9d03      	ldr	r5, [sp, #12]
   13826:	f8d3 a000 	ldr.w	sl, [r3]
   1382a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 138a0 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1382e:	1e43      	subs	r3, r0, #1
   13830:	b21b      	sxth	r3, r3
   13832:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13836:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13838:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   1383c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13840:	f04f 0b00 	mov.w	fp, #0
   13844:	b924      	cbnz	r4, 13850 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13846:	46a1      	mov	r9, r4
}
   13848:	4648      	mov	r0, r9
   1384a:	b005      	add	sp, #20
   1384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13850:	6868      	ldr	r0, [r5, #4]
   13852:	4a14      	ldr	r2, [pc, #80]	; (138a4 <pm_policy_next_state+0x90>)
   13854:	46c4      	mov	ip, r8
   13856:	4659      	mov	r1, fp
   13858:	fbe0 c107 	umlal	ip, r1, r0, r7
   1385c:	2300      	movs	r3, #0
   1385e:	4660      	mov	r0, ip
   13860:	f7ed f86c 	bl	93c <__aeabi_uldivmod>
   13864:	9001      	str	r0, [sp, #4]
   13866:	68a8      	ldr	r0, [r5, #8]
   13868:	4a0e      	ldr	r2, [pc, #56]	; (138a4 <pm_policy_next_state+0x90>)
   1386a:	46c4      	mov	ip, r8
   1386c:	4659      	mov	r1, fp
   1386e:	fbe0 c107 	umlal	ip, r1, r0, r7
   13872:	2300      	movs	r3, #0
   13874:	4660      	mov	r0, ip
   13876:	f7ed f861 	bl	93c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1387a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   1387e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13880:	d001      	beq.n	13886 <pm_policy_next_state+0x72>
   13882:	4582      	cmp	sl, r0
   13884:	d905      	bls.n	13892 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13886:	1c73      	adds	r3, r6, #1
   13888:	d0de      	beq.n	13848 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   1388a:	9b01      	ldr	r3, [sp, #4]
   1388c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   1388e:	42b0      	cmp	r0, r6
   13890:	d9da      	bls.n	13848 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13892:	3c01      	subs	r4, #1
   13894:	b2a4      	uxth	r4, r4
   13896:	3d0c      	subs	r5, #12
   13898:	e7d4      	b.n	13844 <pm_policy_next_state+0x30>
   1389a:	bf00      	nop
   1389c:	20000708 	.word	0x20000708
   138a0:	000f423f 	.word	0x000f423f
   138a4:	000f4240 	.word	0x000f4240

000138a8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   138a8:	b908      	cbnz	r0, 138ae <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   138aa:	4b02      	ldr	r3, [pc, #8]	; (138b4 <pm_state_cpu_get_all+0xc>)
   138ac:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   138ae:	2000      	movs	r0, #0
   138b0:	4770      	bx	lr
   138b2:	bf00      	nop
   138b4:	000261e8 	.word	0x000261e8

000138b8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   138b8:	4904      	ldr	r1, [pc, #16]	; (138cc <sub_bytes+0x14>)
   138ba:	1e43      	subs	r3, r0, #1
   138bc:	300f      	adds	r0, #15
   138be:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   138c2:	5c8a      	ldrb	r2, [r1, r2]
   138c4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   138c6:	4283      	cmp	r3, r0
   138c8:	d1f9      	bne.n	138be <sub_bytes+0x6>
	}
}
   138ca:	4770      	bx	lr
   138cc:	00026e6f 	.word	0x00026e6f

000138d0 <tc_aes128_set_encrypt_key>:
{
   138d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   138d2:	4e26      	ldr	r6, [pc, #152]	; (1396c <tc_aes128_set_encrypt_key+0x9c>)
{
   138d4:	4607      	mov	r7, r0
   138d6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   138d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   138da:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   138dc:	ad01      	add	r5, sp, #4
   138de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   138e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   138e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   138e4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   138e8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   138ec:	4638      	mov	r0, r7
   138ee:	2f00      	cmp	r7, #0
   138f0:	d038      	beq.n	13964 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   138f2:	2c00      	cmp	r4, #0
   138f4:	d038      	beq.n	13968 <tc_aes128_set_encrypt_key+0x98>
   138f6:	1f38      	subs	r0, r7, #4
   138f8:	4621      	mov	r1, r4
   138fa:	4602      	mov	r2, r0
   138fc:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   138fe:	784b      	ldrb	r3, [r1, #1]
   13900:	780d      	ldrb	r5, [r1, #0]
   13902:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13904:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   13908:	78cd      	ldrb	r5, [r1, #3]
   1390a:	432b      	orrs	r3, r5
   1390c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   1390e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   13910:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   13914:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   13916:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1391a:	d1f0      	bne.n	138fe <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1391c:	4c14      	ldr	r4, [pc, #80]	; (13970 <tc_aes128_set_encrypt_key+0xa0>)
   1391e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   13920:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   13922:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   13924:	d116      	bne.n	13954 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   13926:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1392a:	5ca5      	ldrb	r5, [r4, r2]
   1392c:	0e1a      	lsrs	r2, r3, #24
   1392e:	5ca2      	ldrb	r2, [r4, r2]
   13930:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   13934:	f3c3 2507 	ubfx	r5, r3, #8, #8
   13938:	b2db      	uxtb	r3, r3
   1393a:	5d65      	ldrb	r5, [r4, r5]
   1393c:	5ce3      	ldrb	r3, [r4, r3]
   1393e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   13942:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   13946:	f021 0303 	bic.w	r3, r1, #3
   1394a:	3330      	adds	r3, #48	; 0x30
   1394c:	446b      	add	r3, sp
   1394e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   13952:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   13954:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   13958:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1395a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   1395c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   1395e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   13960:	d1de      	bne.n	13920 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   13962:	2001      	movs	r0, #1
}
   13964:	b00d      	add	sp, #52	; 0x34
   13966:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   13968:	4620      	mov	r0, r4
   1396a:	e7fb      	b.n	13964 <tc_aes128_set_encrypt_key+0x94>
   1396c:	00026030 	.word	0x00026030
   13970:	00026e6f 	.word	0x00026e6f

00013974 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   13974:	4801      	ldr	r0, [pc, #4]	; (1397c <nrf_cc3xx_platform_abort_init+0x8>)
   13976:	f00b bc87 	b.w	1f288 <nrf_cc3xx_platform_set_abort>
   1397a:	bf00      	nop
   1397c:	000261e8 	.word	0x000261e8

00013980 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13980:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   13982:	4604      	mov	r4, r0
   13984:	b918      	cbnz	r0, 1398e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   13986:	4b0f      	ldr	r3, [pc, #60]	; (139c4 <mutex_free_platform+0x44>)
   13988:	480f      	ldr	r0, [pc, #60]	; (139c8 <mutex_free_platform+0x48>)
   1398a:	685b      	ldr	r3, [r3, #4]
   1398c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1398e:	6861      	ldr	r1, [r4, #4]
   13990:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   13994:	d00f      	beq.n	139b6 <mutex_free_platform+0x36>
   13996:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   1399a:	d00c      	beq.n	139b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   1399c:	4d0b      	ldr	r5, [pc, #44]	; (139cc <mutex_free_platform+0x4c>)
   1399e:	42a9      	cmp	r1, r5
   139a0:	d009      	beq.n	139b6 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   139a2:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   139a6:	d007      	beq.n	139b8 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   139a8:	4809      	ldr	r0, [pc, #36]	; (139d0 <mutex_free_platform+0x50>)
   139aa:	4621      	mov	r1, r4
   139ac:	f011 fbd9 	bl	25162 <k_mem_slab_free>
        mutex->mutex = NULL;
   139b0:	2300      	movs	r3, #0
   139b2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   139b4:	6065      	str	r5, [r4, #4]
}
   139b6:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   139b8:	6820      	ldr	r0, [r4, #0]
   139ba:	2214      	movs	r2, #20
   139bc:	f00f fa05 	bl	22dca <memset>
   139c0:	e7f8      	b.n	139b4 <mutex_free_platform+0x34>
   139c2:	bf00      	nop
   139c4:	200008d0 	.word	0x200008d0
   139c8:	00026f6f 	.word	0x00026f6f
   139cc:	a95c5f2c 	.word	0xa95c5f2c
   139d0:	20003628 	.word	0x20003628

000139d4 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   139d4:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   139d6:	b320      	cbz	r0, 13a22 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   139d8:	6843      	ldr	r3, [r0, #4]
   139da:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   139de:	d110      	bne.n	13a02 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   139e0:	2201      	movs	r2, #1
   139e2:	6803      	ldr	r3, [r0, #0]
   139e4:	f3bf 8f5b 	dmb	ish
   139e8:	e853 1f00 	ldrex	r1, [r3]
   139ec:	2900      	cmp	r1, #0
   139ee:	d103      	bne.n	139f8 <mutex_lock_platform+0x24>
   139f0:	e843 2000 	strex	r0, r2, [r3]
   139f4:	2800      	cmp	r0, #0
   139f6:	d1f7      	bne.n	139e8 <mutex_lock_platform+0x14>
   139f8:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   139fc:	d10d      	bne.n	13a1a <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   139fe:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   13a00:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13a02:	4a09      	ldr	r2, [pc, #36]	; (13a28 <mutex_lock_platform+0x54>)
   13a04:	4293      	cmp	r3, r2
   13a06:	d00a      	beq.n	13a1e <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13a08:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   13a0a:	f04f 32ff 	mov.w	r2, #4294967295
   13a0e:	f04f 33ff 	mov.w	r3, #4294967295
   13a12:	f009 ff6b 	bl	1d8ec <z_impl_k_mutex_lock>
        if (ret == 0) {
   13a16:	2800      	cmp	r0, #0
   13a18:	d0f1      	beq.n	139fe <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13a1a:	4804      	ldr	r0, [pc, #16]	; (13a2c <mutex_lock_platform+0x58>)
   13a1c:	e7f0      	b.n	13a00 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13a1e:	4804      	ldr	r0, [pc, #16]	; (13a30 <mutex_lock_platform+0x5c>)
   13a20:	e7ee      	b.n	13a00 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13a22:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13a26:	e7eb      	b.n	13a00 <mutex_lock_platform+0x2c>
   13a28:	a95c5f2c 	.word	0xa95c5f2c
   13a2c:	ffff8fe9 	.word	0xffff8fe9
   13a30:	ffff8fea 	.word	0xffff8fea

00013a34 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13a34:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   13a36:	b1d8      	cbz	r0, 13a70 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   13a38:	6843      	ldr	r3, [r0, #4]
   13a3a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   13a3e:	d110      	bne.n	13a62 <mutex_unlock_platform+0x2e>
   13a40:	2200      	movs	r2, #0
   13a42:	6803      	ldr	r3, [r0, #0]
   13a44:	f3bf 8f5b 	dmb	ish
   13a48:	e853 1f00 	ldrex	r1, [r3]
   13a4c:	2901      	cmp	r1, #1
   13a4e:	d103      	bne.n	13a58 <mutex_unlock_platform+0x24>
   13a50:	e843 2000 	strex	r0, r2, [r3]
   13a54:	2800      	cmp	r0, #0
   13a56:	d1f7      	bne.n	13a48 <mutex_unlock_platform+0x14>
   13a58:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13a5c:	d10b      	bne.n	13a76 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   13a5e:	2000      	movs	r0, #0
    }
}
   13a60:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   13a62:	4a07      	ldr	r2, [pc, #28]	; (13a80 <mutex_unlock_platform+0x4c>)
   13a64:	4293      	cmp	r3, r2
   13a66:	d008      	beq.n	13a7a <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   13a68:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   13a6a:	f009 ffb9 	bl	1d9e0 <z_impl_k_mutex_unlock>
   13a6e:	e7f6      	b.n	13a5e <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   13a70:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   13a74:	e7f4      	b.n	13a60 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   13a76:	4803      	ldr	r0, [pc, #12]	; (13a84 <mutex_unlock_platform+0x50>)
   13a78:	e7f2      	b.n	13a60 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   13a7a:	4803      	ldr	r0, [pc, #12]	; (13a88 <mutex_unlock_platform+0x54>)
   13a7c:	e7f0      	b.n	13a60 <mutex_unlock_platform+0x2c>
   13a7e:	bf00      	nop
   13a80:	a95c5f2c 	.word	0xa95c5f2c
   13a84:	ffff8fe9 	.word	0xffff8fe9
   13a88:	ffff8fea 	.word	0xffff8fea

00013a8c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   13a8c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   13a8e:	4604      	mov	r4, r0
   13a90:	b918      	cbnz	r0, 13a9a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   13a92:	4b1d      	ldr	r3, [pc, #116]	; (13b08 <mutex_init_platform+0x7c>)
   13a94:	481d      	ldr	r0, [pc, #116]	; (13b0c <mutex_init_platform+0x80>)
   13a96:	685b      	ldr	r3, [r3, #4]
   13a98:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   13a9a:	6863      	ldr	r3, [r4, #4]
   13a9c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   13aa0:	d02f      	beq.n	13b02 <mutex_init_platform+0x76>
   13aa2:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   13aa6:	d02c      	beq.n	13b02 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   13aa8:	4a19      	ldr	r2, [pc, #100]	; (13b10 <mutex_init_platform+0x84>)
   13aaa:	4293      	cmp	r3, r2
   13aac:	d119      	bne.n	13ae2 <mutex_init_platform+0x56>
   13aae:	6823      	ldr	r3, [r4, #0]
   13ab0:	bb03      	cbnz	r3, 13af4 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   13ab2:	4818      	ldr	r0, [pc, #96]	; (13b14 <mutex_init_platform+0x88>)
   13ab4:	f04f 32ff 	mov.w	r2, #4294967295
   13ab8:	f04f 33ff 	mov.w	r3, #4294967295
   13abc:	4621      	mov	r1, r4
   13abe:	f009 fd61 	bl	1d584 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   13ac2:	b908      	cbnz	r0, 13ac8 <mutex_init_platform+0x3c>
   13ac4:	6823      	ldr	r3, [r4, #0]
   13ac6:	b91b      	cbnz	r3, 13ad0 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   13ac8:	4b0f      	ldr	r3, [pc, #60]	; (13b08 <mutex_init_platform+0x7c>)
   13aca:	4813      	ldr	r0, [pc, #76]	; (13b18 <mutex_init_platform+0x8c>)
   13acc:	685b      	ldr	r3, [r3, #4]
   13ace:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   13ad0:	6820      	ldr	r0, [r4, #0]
   13ad2:	2214      	movs	r2, #20
   13ad4:	2100      	movs	r1, #0
   13ad6:	f00f f978 	bl	22dca <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   13ada:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   13ade:	6063      	str	r3, [r4, #4]
   13ae0:	e008      	b.n	13af4 <mutex_init_platform+0x68>
    switch(flags){
   13ae2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   13ae6:	d80d      	bhi.n	13b04 <mutex_init_platform+0x78>
   13ae8:	2b3a      	cmp	r3, #58	; 0x3a
   13aea:	d003      	beq.n	13af4 <mutex_init_platform+0x68>
   13aec:	f640 62ba 	movw	r2, #3770	; 0xeba
   13af0:	4293      	cmp	r3, r2
   13af2:	d1de      	bne.n	13ab2 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   13af4:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   13af6:	f011 fb79 	bl	251ec <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   13afa:	6863      	ldr	r3, [r4, #4]
   13afc:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   13b00:	6063      	str	r3, [r4, #4]
}
   13b02:	bd10      	pop	{r4, pc}
    switch(flags){
   13b04:	4a05      	ldr	r2, [pc, #20]	; (13b1c <mutex_init_platform+0x90>)
   13b06:	e7f3      	b.n	13af0 <mutex_init_platform+0x64>
   13b08:	200008d0 	.word	0x200008d0
   13b0c:	00026f6f 	.word	0x00026f6f
   13b10:	a95c5f2c 	.word	0xa95c5f2c
   13b14:	20003628 	.word	0x20003628
   13b18:	00026f95 	.word	0x00026f95
   13b1c:	3a00003a 	.word	0x3a00003a

00013b20 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   13b20:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   13b22:	4906      	ldr	r1, [pc, #24]	; (13b3c <nrf_cc3xx_platform_mutex_init+0x1c>)
   13b24:	4806      	ldr	r0, [pc, #24]	; (13b40 <nrf_cc3xx_platform_mutex_init+0x20>)
   13b26:	2340      	movs	r3, #64	; 0x40
   13b28:	2214      	movs	r2, #20
   13b2a:	f011 fb0c 	bl	25146 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   13b2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   13b32:	4904      	ldr	r1, [pc, #16]	; (13b44 <nrf_cc3xx_platform_mutex_init+0x24>)
   13b34:	4804      	ldr	r0, [pc, #16]	; (13b48 <nrf_cc3xx_platform_mutex_init+0x28>)
   13b36:	f00b bc6d 	b.w	1f414 <nrf_cc3xx_platform_set_mutexes>
   13b3a:	bf00      	nop
   13b3c:	20003128 	.word	0x20003128
   13b40:	20003628 	.word	0x20003628
   13b44:	000261f0 	.word	0x000261f0
   13b48:	00026204 	.word	0x00026204

00013b4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13b4c:	4901      	ldr	r1, [pc, #4]	; (13b54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13b4e:	2210      	movs	r2, #16
	str	r2, [r1]
   13b50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13b52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13b54:	e000ed10 	.word	0xe000ed10

00013b58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13b58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13b5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13b5c:	f380 8811 	msr	BASEPRI, r0
	isb
   13b60:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   13b64:	f3bf 8f4f 	dsb	sy
   13b68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13b6a:	b662      	cpsie	i
	isb
   13b6c:	f3bf 8f6f 	isb	sy

	bx	lr
   13b70:	4770      	bx	lr
   13b72:	bf00      	nop

00013b74 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13b74:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13b76:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13b78:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   13b7c:	f3bf 8f4f 	dsb	sy
   13b80:	bf20      	wfe

	msr	BASEPRI, r0
   13b82:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13b86:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13b88:	4770      	bx	lr
   13b8a:	bf00      	nop

00013b8c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   13b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b90:	4681      	mov	r9, r0
   13b92:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   13b94:	460c      	mov	r4, r1
   13b96:	2900      	cmp	r1, #0
   13b98:	d04c      	beq.n	13c34 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   13b9a:	466e      	mov	r6, sp
   13b9c:	b08a      	sub	sp, #40	; 0x28
   13b9e:	e9d1 1200 	ldrd	r1, r2, [r1]
   13ba2:	68a3      	ldr	r3, [r4, #8]
   13ba4:	466d      	mov	r5, sp
   13ba6:	4827      	ldr	r0, [pc, #156]	; (13c44 <z_arm_fatal_error+0xb8>)
   13ba8:	46a8      	mov	r8, r5
   13baa:	f04f 0a05 	mov.w	sl, #5
   13bae:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13bb2:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13bb6:	f848 af10 	str.w	sl, [r8, #16]!
   13bba:	4823      	ldr	r0, [pc, #140]	; (13c48 <z_arm_fatal_error+0xbc>)
   13bbc:	4642      	mov	r2, r8
   13bbe:	2300      	movs	r3, #0
   13bc0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13bc4:	f7ff f9fa 	bl	12fbc <z_impl_z_log_msg_static_create>
   13bc8:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   13bca:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   13bce:	6963      	ldr	r3, [r4, #20]
   13bd0:	46ad      	mov	sp, r5
   13bd2:	481e      	ldr	r0, [pc, #120]	; (13c4c <z_arm_fatal_error+0xc0>)
   13bd4:	f8c5 a010 	str.w	sl, [r5, #16]
   13bd8:	e9c5 0105 	strd	r0, r1, [r5, #20]
   13bdc:	e9c5 2307 	strd	r2, r3, [r5, #28]
   13be0:	4819      	ldr	r0, [pc, #100]	; (13c48 <z_arm_fatal_error+0xbc>)
   13be2:	2300      	movs	r3, #0
   13be4:	4642      	mov	r2, r8
   13be6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   13bea:	f7ff f9e7 	bl	12fbc <z_impl_z_log_msg_static_create>
   13bee:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   13bf0:	b088      	sub	sp, #32
   13bf2:	69e3      	ldr	r3, [r4, #28]
   13bf4:	466d      	mov	r5, sp
   13bf6:	4a16      	ldr	r2, [pc, #88]	; (13c50 <z_arm_fatal_error+0xc4>)
   13bf8:	46a8      	mov	r8, r5
   13bfa:	f04f 0a03 	mov.w	sl, #3
   13bfe:	e9c5 2305 	strd	r2, r3, [r5, #20]
   13c02:	f848 af10 	str.w	sl, [r8, #16]!
   13c06:	4810      	ldr	r0, [pc, #64]	; (13c48 <z_arm_fatal_error+0xbc>)
   13c08:	2300      	movs	r3, #0
   13c0a:	4642      	mov	r2, r8
   13c0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c10:	f7ff f9d4 	bl	12fbc <z_impl_z_log_msg_static_create>
   13c14:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   13c16:	69a3      	ldr	r3, [r4, #24]
   13c18:	46ad      	mov	sp, r5
   13c1a:	4a0e      	ldr	r2, [pc, #56]	; (13c54 <z_arm_fatal_error+0xc8>)
   13c1c:	f8c5 a010 	str.w	sl, [r5, #16]
   13c20:	e9c5 2305 	strd	r2, r3, [r5, #20]
   13c24:	4808      	ldr	r0, [pc, #32]	; (13c48 <z_arm_fatal_error+0xbc>)
   13c26:	2300      	movs	r3, #0
   13c28:	4642      	mov	r2, r8
   13c2a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13c2e:	f7ff f9c5 	bl	12fbc <z_impl_z_log_msg_static_create>
   13c32:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13c34:	4621      	mov	r1, r4
   13c36:	4648      	mov	r0, r9
   13c38:	f009 fb10 	bl	1d25c <z_fatal_error>
}
   13c3c:	46bd      	mov	sp, r7
   13c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c42:	bf00      	nop
   13c44:	00026fc2 	.word	0x00026fc2
   13c48:	00025ff0 	.word	0x00025ff0
   13c4c:	00026ff1 	.word	0x00026ff1
   13c50:	00027020 	.word	0x00027020
   13c54:	0002702f 	.word	0x0002702f

00013c58 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13c58:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13c5a:	2800      	cmp	r0, #0
   13c5c:	db07      	blt.n	13c6e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13c5e:	4a04      	ldr	r2, [pc, #16]	; (13c70 <arch_irq_enable+0x18>)
   13c60:	0941      	lsrs	r1, r0, #5
   13c62:	2301      	movs	r3, #1
   13c64:	f000 001f 	and.w	r0, r0, #31
   13c68:	4083      	lsls	r3, r0
   13c6a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   13c6e:	4770      	bx	lr
   13c70:	e000e100 	.word	0xe000e100

00013c74 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   13c74:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   13c76:	2800      	cmp	r0, #0
   13c78:	db0c      	blt.n	13c94 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13c7a:	0943      	lsrs	r3, r0, #5
   13c7c:	4906      	ldr	r1, [pc, #24]	; (13c98 <arch_irq_disable+0x24>)
   13c7e:	f000 001f 	and.w	r0, r0, #31
   13c82:	3320      	adds	r3, #32
   13c84:	2201      	movs	r2, #1
   13c86:	4082      	lsls	r2, r0
   13c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13c90:	f3bf 8f6f 	isb	sy
}
   13c94:	4770      	bx	lr
   13c96:	bf00      	nop
   13c98:	e000e100 	.word	0xe000e100

00013c9c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13c9c:	4b05      	ldr	r3, [pc, #20]	; (13cb4 <arch_irq_is_enabled+0x18>)
   13c9e:	0942      	lsrs	r2, r0, #5
   13ca0:	f000 001f 	and.w	r0, r0, #31
   13ca4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13ca8:	2301      	movs	r3, #1
   13caa:	fa03 f000 	lsl.w	r0, r3, r0
}
   13cae:	4010      	ands	r0, r2
   13cb0:	4770      	bx	lr
   13cb2:	bf00      	nop
   13cb4:	e000e100 	.word	0xe000e100

00013cb8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13cb8:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   13cba:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   13cbc:	bf54      	ite	pl
   13cbe:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   13cc0:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13cc2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cc4:	bfac      	ite	ge
   13cc6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cca:	4a07      	ldrlt	r2, [pc, #28]	; (13ce8 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ccc:	ea4f 1341 	mov.w	r3, r1, lsl #5
   13cd0:	bfac      	ite	ge
   13cd2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cd6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cda:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13cdc:	bfb4      	ite	lt
   13cde:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13ce0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   13ce4:	4770      	bx	lr
   13ce6:	bf00      	nop
   13ce8:	e000ed14 	.word	0xe000ed14

00013cec <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13cec:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13cee:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13cf0:	4b04      	ldr	r3, [pc, #16]	; (13d04 <_arch_isr_direct_pm+0x18>)
   13cf2:	699a      	ldr	r2, [r3, #24]
   13cf4:	b11a      	cbz	r2, 13cfe <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   13cf6:	2200      	movs	r2, #0
   13cf8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   13cfa:	f011 fa68 	bl	251ce <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13cfe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13d00:	bd08      	pop	{r3, pc}
   13d02:	bf00      	nop
   13d04:	20003a3c 	.word	0x20003a3c

00013d08 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13d08:	bf30      	wfi
    b z_SysNmiOnReset
   13d0a:	f7ff bffd 	b.w	13d08 <z_SysNmiOnReset>
   13d0e:	bf00      	nop

00013d10 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13d10:	4a0b      	ldr	r2, [pc, #44]	; (13d40 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   13d12:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13d14:	4b0b      	ldr	r3, [pc, #44]	; (13d44 <z_arm_prep_c+0x34>)
   13d16:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13d1a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   13d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13d20:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13d24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13d28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13d30:	f009 fb4e 	bl	1d3d0 <z_bss_zero>
	z_data_copy();
   13d34:	f00a fc3c 	bl	1e5b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13d38:	f000 fbba 	bl	144b0 <z_arm_interrupt_init>
	z_cstart();
   13d3c:	f009 fb8c 	bl	1d458 <z_cstart>
   13d40:	00000000 	.word	0x00000000
   13d44:	e000ed00 	.word	0xe000ed00

00013d48 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13d48:	4a09      	ldr	r2, [pc, #36]	; (13d70 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   13d4a:	490a      	ldr	r1, [pc, #40]	; (13d74 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   13d4c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   13d4e:	6809      	ldr	r1, [r1, #0]
   13d50:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d52:	4909      	ldr	r1, [pc, #36]	; (13d78 <arch_swap+0x30>)
	_current->arch.basepri = key;
   13d54:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13d56:	684b      	ldr	r3, [r1, #4]
   13d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13d5c:	604b      	str	r3, [r1, #4]
   13d5e:	2300      	movs	r3, #0
   13d60:	f383 8811 	msr	BASEPRI, r3
   13d64:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13d68:	6893      	ldr	r3, [r2, #8]
}
   13d6a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   13d6c:	4770      	bx	lr
   13d6e:	bf00      	nop
   13d70:	20003a3c 	.word	0x20003a3c
   13d74:	000266e4 	.word	0x000266e4
   13d78:	e000ed00 	.word	0xe000ed00

00013d7c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13d7c:	4912      	ldr	r1, [pc, #72]	; (13dc8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13d7e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13d80:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13d84:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13d86:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13d8a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13d8e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   13d90:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13d94:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13d98:	4f0c      	ldr	r7, [pc, #48]	; (13dcc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13d9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13d9e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   13da0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13da2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13da4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   13da6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13da8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13daa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   13dae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   13db0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   13db2:	f000 fc19 	bl	145e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   13db6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13dba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13dbe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13dc2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13dc6:	4770      	bx	lr
    ldr r1, =_kernel
   13dc8:	20003a3c 	.word	0x20003a3c
    ldr v4, =_SCS_ICSR
   13dcc:	e000ed04 	.word	0xe000ed04

00013dd0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   13dd0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13dd4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13dd6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13dda:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13dde:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13de0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13de4:	2902      	cmp	r1, #2
    beq _oops
   13de6:	d0ff      	beq.n	13de8 <_oops>

00013de8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13de8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   13dea:	f00e ff90 	bl	22d0e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   13dee:	bd01      	pop	{r0, pc}

00013df0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   13df0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13df4:	9b00      	ldr	r3, [sp, #0]
   13df6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   13dfa:	490a      	ldr	r1, [pc, #40]	; (13e24 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   13dfc:	9b01      	ldr	r3, [sp, #4]
   13dfe:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13e02:	9b02      	ldr	r3, [sp, #8]
   13e04:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   13e08:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13e10:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   13e14:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   13e18:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13e1a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   13e1c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13e1e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13e20:	4770      	bx	lr
   13e22:	bf00      	nop
   13e24:	00021cbd 	.word	0x00021cbd

00013e28 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   13e28:	4a09      	ldr	r2, [pc, #36]	; (13e50 <z_check_thread_stack_fail+0x28>)
{
   13e2a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   13e2c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   13e2e:	b170      	cbz	r0, 13e4e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   13e30:	f113 0f16 	cmn.w	r3, #22
   13e34:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13e36:	d005      	beq.n	13e44 <z_check_thread_stack_fail+0x1c>
   13e38:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   13e3c:	429a      	cmp	r2, r3
   13e3e:	d805      	bhi.n	13e4c <z_check_thread_stack_fail+0x24>
   13e40:	4283      	cmp	r3, r0
   13e42:	d203      	bcs.n	13e4c <z_check_thread_stack_fail+0x24>
		return 0;
   13e44:	4281      	cmp	r1, r0
   13e46:	bf28      	it	cs
   13e48:	2000      	movcs	r0, #0
   13e4a:	4770      	bx	lr
   13e4c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   13e4e:	4770      	bx	lr
   13e50:	20003a3c 	.word	0x20003a3c

00013e54 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13e54:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   13e56:	4b09      	ldr	r3, [pc, #36]	; (13e7c <arch_switch_to_main_thread+0x28>)
   13e58:	6098      	str	r0, [r3, #8]
{
   13e5a:	460d      	mov	r5, r1
   13e5c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   13e5e:	f000 fbc3 	bl	145e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13e62:	4620      	mov	r0, r4
   13e64:	f385 8809 	msr	PSP, r5
   13e68:	2100      	movs	r1, #0
   13e6a:	b663      	cpsie	if
   13e6c:	f381 8811 	msr	BASEPRI, r1
   13e70:	f3bf 8f6f 	isb	sy
   13e74:	2200      	movs	r2, #0
   13e76:	2300      	movs	r3, #0
   13e78:	f00d ff20 	bl	21cbc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13e7c:	20003a3c 	.word	0x20003a3c

00013e80 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13e80:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13e82:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13e84:	4a0b      	ldr	r2, [pc, #44]	; (13eb4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13e86:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   13e88:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13e8a:	bf1e      	ittt	ne
	movne	r1, #0
   13e8c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13e8e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   13e90:	f011 f99d 	blne	251ce <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13e94:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13e96:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13e9a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13e9e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13ea2:	4905      	ldr	r1, [pc, #20]	; (13eb8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13ea4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13ea6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13ea8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13eaa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13eae:	4903      	ldr	r1, [pc, #12]	; (13ebc <_isr_wrapper+0x3c>)
	bx r1
   13eb0:	4708      	bx	r1
   13eb2:	0000      	.short	0x0000
	ldr r2, =_kernel
   13eb4:	20003a3c 	.word	0x20003a3c
	ldr r1, =_sw_isr_table
   13eb8:	00025d14 	.word	0x00025d14
	ldr r1, =z_arm_int_exit
   13ebc:	00013ec1 	.word	0x00013ec1

00013ec0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13ec0:	4b04      	ldr	r3, [pc, #16]	; (13ed4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13ec2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13ec4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   13ec6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13ec8:	d003      	beq.n	13ed2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13eca:	4903      	ldr	r1, [pc, #12]	; (13ed8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13ed0:	600a      	str	r2, [r1, #0]

00013ed2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13ed2:	4770      	bx	lr
	ldr r3, =_kernel
   13ed4:	20003a3c 	.word	0x20003a3c
	ldr r1, =_SCS_ICSR
   13ed8:	e000ed04 	.word	0xe000ed04

00013edc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13ee0:	b086      	sub	sp, #24
   13ee2:	4606      	mov	r6, r0
   13ee4:	af00      	add	r7, sp, #0
   13ee6:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   13ee8:	4b3e      	ldr	r3, [pc, #248]	; (13fe4 <bus_fault.constprop.0+0x108>)
   13eea:	617b      	str	r3, [r7, #20]
   13eec:	2402      	movs	r4, #2
   13eee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13ef2:	483d      	ldr	r0, [pc, #244]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13ef4:	613c      	str	r4, [r7, #16]
   13ef6:	f107 0210 	add.w	r2, r7, #16
   13efa:	f00e ff17 	bl	22d2c <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13efe:	4b3b      	ldr	r3, [pc, #236]	; (13fec <bus_fault.constprop.0+0x110>)
   13f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f02:	04d9      	lsls	r1, r3, #19
   13f04:	d509      	bpl.n	13f1a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   13f06:	4b3a      	ldr	r3, [pc, #232]	; (13ff0 <bus_fault.constprop.0+0x114>)
   13f08:	4837      	ldr	r0, [pc, #220]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13f0a:	e9c7 4304 	strd	r4, r3, [r7, #16]
   13f0e:	f107 0210 	add.w	r2, r7, #16
   13f12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f16:	f00e ff09 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13f1a:	4b34      	ldr	r3, [pc, #208]	; (13fec <bus_fault.constprop.0+0x110>)
   13f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f1e:	051a      	lsls	r2, r3, #20
   13f20:	d50a      	bpl.n	13f38 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   13f22:	4b34      	ldr	r3, [pc, #208]	; (13ff4 <bus_fault.constprop.0+0x118>)
   13f24:	617b      	str	r3, [r7, #20]
   13f26:	2302      	movs	r3, #2
   13f28:	482f      	ldr	r0, [pc, #188]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13f2a:	613b      	str	r3, [r7, #16]
   13f2c:	f107 0210 	add.w	r2, r7, #16
   13f30:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f34:	f00e fefa 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13f38:	4c2c      	ldr	r4, [pc, #176]	; (13fec <bus_fault.constprop.0+0x110>)
   13f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13f3c:	059b      	lsls	r3, r3, #22
   13f3e:	d522      	bpl.n	13f86 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   13f40:	46e8      	mov	r8, sp
   13f42:	4b2d      	ldr	r3, [pc, #180]	; (13ff8 <bus_fault.constprop.0+0x11c>)
   13f44:	617b      	str	r3, [r7, #20]
   13f46:	2302      	movs	r3, #2
   13f48:	4827      	ldr	r0, [pc, #156]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13f4a:	613b      	str	r3, [r7, #16]
   13f4c:	f107 0210 	add.w	r2, r7, #16
   13f50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13f54:	f00e feea 	bl	22d2c <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   13f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13f5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   13f5c:	0410      	lsls	r0, r2, #16
   13f5e:	d512      	bpl.n	13f86 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13f60:	b088      	sub	sp, #32
   13f62:	466a      	mov	r2, sp
   13f64:	4925      	ldr	r1, [pc, #148]	; (13ffc <bus_fault.constprop.0+0x120>)
   13f66:	4820      	ldr	r0, [pc, #128]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13f68:	e9c2 1305 	strd	r1, r3, [r2, #20]
   13f6c:	2303      	movs	r3, #3
   13f6e:	f842 3f10 	str.w	r3, [r2, #16]!
   13f72:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   13f76:	f00e fed9 	bl	22d2c <z_log_msg_static_create.constprop.0>
   13f7a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   13f7c:	b11e      	cbz	r6, 13f86 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13f7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13f80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13f84:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13f86:	4b19      	ldr	r3, [pc, #100]	; (13fec <bus_fault.constprop.0+0x110>)
   13f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13f8a:	0559      	lsls	r1, r3, #21
   13f8c:	d50a      	bpl.n	13fa4 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   13f8e:	4b1c      	ldr	r3, [pc, #112]	; (14000 <bus_fault.constprop.0+0x124>)
   13f90:	617b      	str	r3, [r7, #20]
   13f92:	2302      	movs	r3, #2
   13f94:	4814      	ldr	r0, [pc, #80]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13f96:	613b      	str	r3, [r7, #16]
   13f98:	f107 0210 	add.w	r2, r7, #16
   13f9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13fa0:	f00e fec4 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13fa4:	4b11      	ldr	r3, [pc, #68]	; (13fec <bus_fault.constprop.0+0x110>)
   13fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13fa8:	05d2      	lsls	r2, r2, #23
   13faa:	d515      	bpl.n	13fd8 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   13fac:	4b15      	ldr	r3, [pc, #84]	; (14004 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13fae:	617b      	str	r3, [r7, #20]
   13fb0:	2302      	movs	r3, #2
   13fb2:	480d      	ldr	r0, [pc, #52]	; (13fe8 <bus_fault.constprop.0+0x10c>)
   13fb4:	613b      	str	r3, [r7, #16]
   13fb6:	f107 0210 	add.w	r2, r7, #16
   13fba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13fbe:	f00e feb5 	bl	22d2c <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13fc2:	4a0a      	ldr	r2, [pc, #40]	; (13fec <bus_fault.constprop.0+0x110>)
   13fc4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   13fc6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13fc8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   13fcc:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13fce:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13fd0:	7028      	strb	r0, [r5, #0]
}
   13fd2:	46bd      	mov	sp, r7
   13fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13fda:	049b      	lsls	r3, r3, #18
   13fdc:	d5f1      	bpl.n	13fc2 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13fde:	4b0a      	ldr	r3, [pc, #40]	; (14008 <bus_fault.constprop.0+0x12c>)
   13fe0:	e7e5      	b.n	13fae <bus_fault.constprop.0+0xd2>
   13fe2:	bf00      	nop
   13fe4:	0002705d 	.word	0x0002705d
   13fe8:	00025ff0 	.word	0x00025ff0
   13fec:	e000ed00 	.word	0xe000ed00
   13ff0:	00027073 	.word	0x00027073
   13ff4:	00027084 	.word	0x00027084
   13ff8:	00027097 	.word	0x00027097
   13ffc:	000270b0 	.word	0x000270b0
   14000:	000270c5 	.word	0x000270c5
   14004:	000270e0 	.word	0x000270e0
   14008:	000270f8 	.word	0x000270f8

0001400c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   1400c:	b510      	push	{r4, lr}
   1400e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14010:	4b33      	ldr	r3, [pc, #204]	; (140e0 <usage_fault.constprop.0+0xd4>)
   14012:	4834      	ldr	r0, [pc, #208]	; (140e4 <usage_fault.constprop.0+0xd8>)
   14014:	9305      	str	r3, [sp, #20]
   14016:	2402      	movs	r4, #2
   14018:	aa04      	add	r2, sp, #16
   1401a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1401e:	9404      	str	r4, [sp, #16]
   14020:	f00e fe84 	bl	22d2c <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14024:	4b30      	ldr	r3, [pc, #192]	; (140e8 <usage_fault.constprop.0+0xdc>)
   14026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14028:	019b      	lsls	r3, r3, #6
   1402a:	d508      	bpl.n	1403e <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   1402c:	4b2f      	ldr	r3, [pc, #188]	; (140ec <usage_fault.constprop.0+0xe0>)
   1402e:	482d      	ldr	r0, [pc, #180]	; (140e4 <usage_fault.constprop.0+0xd8>)
   14030:	aa04      	add	r2, sp, #16
   14032:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14036:	e9cd 4304 	strd	r4, r3, [sp, #16]
   1403a:	f00e fe77 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1403e:	4b2a      	ldr	r3, [pc, #168]	; (140e8 <usage_fault.constprop.0+0xdc>)
   14040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14042:	01dc      	lsls	r4, r3, #7
   14044:	d509      	bpl.n	1405a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   14046:	4b2a      	ldr	r3, [pc, #168]	; (140f0 <usage_fault.constprop.0+0xe4>)
   14048:	9305      	str	r3, [sp, #20]
   1404a:	4826      	ldr	r0, [pc, #152]	; (140e4 <usage_fault.constprop.0+0xd8>)
   1404c:	2302      	movs	r3, #2
   1404e:	aa04      	add	r2, sp, #16
   14050:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14054:	9304      	str	r3, [sp, #16]
   14056:	f00e fe69 	bl	22d2c <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1405a:	4b23      	ldr	r3, [pc, #140]	; (140e8 <usage_fault.constprop.0+0xdc>)
   1405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1405e:	0318      	lsls	r0, r3, #12
   14060:	d509      	bpl.n	14076 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   14062:	4b24      	ldr	r3, [pc, #144]	; (140f4 <usage_fault.constprop.0+0xe8>)
   14064:	9305      	str	r3, [sp, #20]
   14066:	481f      	ldr	r0, [pc, #124]	; (140e4 <usage_fault.constprop.0+0xd8>)
   14068:	2302      	movs	r3, #2
   1406a:	aa04      	add	r2, sp, #16
   1406c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14070:	9304      	str	r3, [sp, #16]
   14072:	f00e fe5b 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14076:	4b1c      	ldr	r3, [pc, #112]	; (140e8 <usage_fault.constprop.0+0xdc>)
   14078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1407a:	0359      	lsls	r1, r3, #13
   1407c:	d509      	bpl.n	14092 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1407e:	4b1e      	ldr	r3, [pc, #120]	; (140f8 <usage_fault.constprop.0+0xec>)
   14080:	9305      	str	r3, [sp, #20]
   14082:	4818      	ldr	r0, [pc, #96]	; (140e4 <usage_fault.constprop.0+0xd8>)
   14084:	2302      	movs	r3, #2
   14086:	aa04      	add	r2, sp, #16
   14088:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1408c:	9304      	str	r3, [sp, #16]
   1408e:	f00e fe4d 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14092:	4b15      	ldr	r3, [pc, #84]	; (140e8 <usage_fault.constprop.0+0xdc>)
   14094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14096:	039a      	lsls	r2, r3, #14
   14098:	d509      	bpl.n	140ae <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1409a:	4b18      	ldr	r3, [pc, #96]	; (140fc <usage_fault.constprop.0+0xf0>)
   1409c:	9305      	str	r3, [sp, #20]
   1409e:	4811      	ldr	r0, [pc, #68]	; (140e4 <usage_fault.constprop.0+0xd8>)
   140a0:	2302      	movs	r3, #2
   140a2:	aa04      	add	r2, sp, #16
   140a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   140a8:	9304      	str	r3, [sp, #16]
   140aa:	f00e fe3f 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   140ae:	4b0e      	ldr	r3, [pc, #56]	; (140e8 <usage_fault.constprop.0+0xdc>)
   140b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   140b2:	03db      	lsls	r3, r3, #15
   140b4:	d509      	bpl.n	140ca <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   140b6:	4b12      	ldr	r3, [pc, #72]	; (14100 <usage_fault.constprop.0+0xf4>)
   140b8:	9305      	str	r3, [sp, #20]
   140ba:	480a      	ldr	r0, [pc, #40]	; (140e4 <usage_fault.constprop.0+0xd8>)
   140bc:	2302      	movs	r3, #2
   140be:	aa04      	add	r2, sp, #16
   140c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   140c4:	9304      	str	r3, [sp, #16]
   140c6:	f00e fe31 	bl	22d2c <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   140ca:	4a07      	ldr	r2, [pc, #28]	; (140e8 <usage_fault.constprop.0+0xdc>)
   140cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   140ce:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   140d2:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   140d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   140d8:	6293      	str	r3, [r2, #40]	; 0x28
}
   140da:	b006      	add	sp, #24
   140dc:	bd10      	pop	{r4, pc}
   140de:	bf00      	nop
   140e0:	00027127 	.word	0x00027127
   140e4:	00025ff0 	.word	0x00025ff0
   140e8:	e000ed00 	.word	0xe000ed00
   140ec:	0002713f 	.word	0x0002713f
   140f0:	00027152 	.word	0x00027152
   140f4:	0002716c 	.word	0x0002716c
   140f8:	0002718a 	.word	0x0002718a
   140fc:	000271af 	.word	0x000271af
   14100:	000271c9 	.word	0x000271c9

00014104 <mem_manage_fault>:
{
   14104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14108:	b086      	sub	sp, #24
   1410a:	4680      	mov	r8, r0
   1410c:	af00      	add	r7, sp, #0
   1410e:	460c      	mov	r4, r1
   14110:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14112:	4b4f      	ldr	r3, [pc, #316]	; (14250 <mem_manage_fault+0x14c>)
   14114:	617b      	str	r3, [r7, #20]
   14116:	2602      	movs	r6, #2
   14118:	484e      	ldr	r0, [pc, #312]	; (14254 <mem_manage_fault+0x150>)
   1411a:	613e      	str	r6, [r7, #16]
   1411c:	f107 0210 	add.w	r2, r7, #16
   14120:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14124:	f00e fe02 	bl	22d2c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14128:	4b4b      	ldr	r3, [pc, #300]	; (14258 <mem_manage_fault+0x154>)
   1412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1412c:	06db      	lsls	r3, r3, #27
   1412e:	d509      	bpl.n	14144 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14130:	4b4a      	ldr	r3, [pc, #296]	; (1425c <mem_manage_fault+0x158>)
   14132:	4848      	ldr	r0, [pc, #288]	; (14254 <mem_manage_fault+0x150>)
   14134:	e9c7 6304 	strd	r6, r3, [r7, #16]
   14138:	f107 0210 	add.w	r2, r7, #16
   1413c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14140:	f00e fdf4 	bl	22d2c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14144:	4b44      	ldr	r3, [pc, #272]	; (14258 <mem_manage_fault+0x154>)
   14146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14148:	0718      	lsls	r0, r3, #28
   1414a:	d50a      	bpl.n	14162 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
   1414c:	4b44      	ldr	r3, [pc, #272]	; (14260 <mem_manage_fault+0x15c>)
   1414e:	617b      	str	r3, [r7, #20]
   14150:	2302      	movs	r3, #2
   14152:	4840      	ldr	r0, [pc, #256]	; (14254 <mem_manage_fault+0x150>)
   14154:	613b      	str	r3, [r7, #16]
   14156:	f107 0210 	add.w	r2, r7, #16
   1415a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1415e:	f00e fde5 	bl	22d2c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14162:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 14258 <mem_manage_fault+0x154>
   14166:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1416a:	0799      	lsls	r1, r3, #30
   1416c:	d439      	bmi.n	141e2 <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
   1416e:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14172:	4b39      	ldr	r3, [pc, #228]	; (14258 <mem_manage_fault+0x154>)
   14174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14176:	07db      	lsls	r3, r3, #31
   14178:	d50a      	bpl.n	14190 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
   1417a:	4b3a      	ldr	r3, [pc, #232]	; (14264 <mem_manage_fault+0x160>)
   1417c:	617b      	str	r3, [r7, #20]
   1417e:	2302      	movs	r3, #2
   14180:	4834      	ldr	r0, [pc, #208]	; (14254 <mem_manage_fault+0x150>)
   14182:	613b      	str	r3, [r7, #16]
   14184:	f107 0210 	add.w	r2, r7, #16
   14188:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1418c:	f00e fdce 	bl	22d2c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14190:	4b31      	ldr	r3, [pc, #196]	; (14258 <mem_manage_fault+0x154>)
   14192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14194:	069c      	lsls	r4, r3, #26
   14196:	d50a      	bpl.n	141ae <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
   14198:	4b33      	ldr	r3, [pc, #204]	; (14268 <mem_manage_fault+0x164>)
   1419a:	617b      	str	r3, [r7, #20]
   1419c:	2302      	movs	r3, #2
   1419e:	482d      	ldr	r0, [pc, #180]	; (14254 <mem_manage_fault+0x150>)
   141a0:	613b      	str	r3, [r7, #16]
   141a2:	f107 0210 	add.w	r2, r7, #16
   141a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141aa:	f00e fdbf 	bl	22d2c <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   141ae:	4c2a      	ldr	r4, [pc, #168]	; (14258 <mem_manage_fault+0x154>)
   141b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   141b2:	06d8      	lsls	r0, r3, #27
   141b4:	d43e      	bmi.n	14234 <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   141b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   141b8:	0799      	lsls	r1, r3, #30
   141ba:	d43b      	bmi.n	14234 <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   141bc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   141be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   141c0:	4a25      	ldr	r2, [pc, #148]	; (14258 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   141c2:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   141c4:	bf42      	ittt	mi
   141c6:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   141c8:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   141cc:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   141ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
   141d0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   141d4:	6293      	str	r3, [r2, #40]	; 0x28
}
   141d6:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   141d8:	2300      	movs	r3, #0
   141da:	702b      	strb	r3, [r5, #0]
}
   141dc:	46bd      	mov	sp, r7
   141de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   141e2:	46e9      	mov	r9, sp
   141e4:	4b21      	ldr	r3, [pc, #132]	; (1426c <mem_manage_fault+0x168>)
   141e6:	617b      	str	r3, [r7, #20]
   141e8:	2302      	movs	r3, #2
   141ea:	613b      	str	r3, [r7, #16]
   141ec:	f107 0210 	add.w	r2, r7, #16
   141f0:	4818      	ldr	r0, [pc, #96]	; (14254 <mem_manage_fault+0x150>)
   141f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   141f6:	f00e fd99 	bl	22d2c <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   141fa:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   141fe:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   14202:	061a      	lsls	r2, r3, #24
   14204:	d5b3      	bpl.n	1416e <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14206:	b088      	sub	sp, #32
   14208:	466a      	mov	r2, sp
   1420a:	4b19      	ldr	r3, [pc, #100]	; (14270 <mem_manage_fault+0x16c>)
   1420c:	4811      	ldr	r0, [pc, #68]	; (14254 <mem_manage_fault+0x150>)
   1420e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14212:	2303      	movs	r3, #3
   14214:	f842 3f10 	str.w	r3, [r2, #16]!
   14218:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1421c:	f00e fd86 	bl	22d2c <z_log_msg_static_create.constprop.0>
   14220:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   14222:	2c00      	cmp	r4, #0
   14224:	d0a5      	beq.n	14172 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14226:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1422a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1422e:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
   14232:	e79e      	b.n	14172 <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14234:	6863      	ldr	r3, [r4, #4]
   14236:	051a      	lsls	r2, r3, #20
   14238:	d5c0      	bpl.n	141bc <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1423a:	4641      	mov	r1, r8
   1423c:	4630      	mov	r0, r6
   1423e:	f7ff fdf3 	bl	13e28 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   14242:	2800      	cmp	r0, #0
   14244:	d0ba      	beq.n	141bc <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14246:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1424a:	2002      	movs	r0, #2
   1424c:	e7b7      	b.n	141be <mem_manage_fault+0xba>
   1424e:	bf00      	nop
   14250:	000271f4 	.word	0x000271f4
   14254:	00025ff0 	.word	0x00025ff0
   14258:	e000ed00 	.word	0xe000ed00
   1425c:	0002720a 	.word	0x0002720a
   14260:	00027084 	.word	0x00027084
   14264:	0002726b 	.word	0x0002726b
   14268:	000270f8 	.word	0x000270f8
   1426c:	0002723d 	.word	0x0002723d
   14270:	00027255 	.word	0x00027255

00014274 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   14274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14278:	4b77      	ldr	r3, [pc, #476]	; (14458 <z_arm_fault+0x1e4>)
{
   1427a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1427c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   14280:	af00      	add	r7, sp, #0
   14282:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   14284:	f3c8 0408 	ubfx	r4, r8, #0, #9
   14288:	2600      	movs	r6, #0
   1428a:	f386 8811 	msr	BASEPRI, r6
   1428e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   14292:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14296:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1429a:	d10e      	bne.n	142ba <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1429c:	f002 030c 	and.w	r3, r2, #12
   142a0:	2b08      	cmp	r3, #8
   142a2:	d119      	bne.n	142d8 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   142a4:	4b6d      	ldr	r3, [pc, #436]	; (1445c <z_arm_fault+0x1e8>)
   142a6:	61fb      	str	r3, [r7, #28]
   142a8:	2302      	movs	r3, #2
   142aa:	486d      	ldr	r0, [pc, #436]	; (14460 <z_arm_fault+0x1ec>)
   142ac:	61bb      	str	r3, [r7, #24]
   142ae:	f107 0218 	add.w	r2, r7, #24
   142b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142b6:	f00e fd39 	bl	22d2c <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   142ba:	2600      	movs	r6, #0
		return NULL;
   142bc:	4635      	mov	r5, r6
	*recoverable = false;
   142be:	2300      	movs	r3, #0
   142c0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   142c2:	1ee3      	subs	r3, r4, #3
   142c4:	2b09      	cmp	r3, #9
   142c6:	f200 80a6 	bhi.w	14416 <z_arm_fault+0x1a2>
   142ca:	e8df f003 	tbb	[pc, r3]
   142ce:	990a      	.short	0x990a
   142d0:	a4a4959c 	.word	0xa4a4959c
   142d4:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   142d8:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   142da:	bf4c      	ite	mi
   142dc:	460d      	movmi	r5, r1
			*nested_exc = true;
   142de:	2601      	movpl	r6, #1
   142e0:	e7ed      	b.n	142be <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   142e2:	46e9      	mov	r9, sp
   142e4:	4b5f      	ldr	r3, [pc, #380]	; (14464 <z_arm_fault+0x1f0>)
   142e6:	61fb      	str	r3, [r7, #28]
   142e8:	f04f 0802 	mov.w	r8, #2
   142ec:	f107 0218 	add.w	r2, r7, #24
   142f0:	485b      	ldr	r0, [pc, #364]	; (14460 <z_arm_fault+0x1ec>)
   142f2:	f8c7 8018 	str.w	r8, [r7, #24]
   142f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142fa:	f00e fd17 	bl	22d2c <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   142fe:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14300:	4c55      	ldr	r4, [pc, #340]	; (14458 <z_arm_fault+0x1e4>)
	*recoverable = false;
   14302:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14304:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14306:	079a      	lsls	r2, r3, #30
   14308:	d50b      	bpl.n	14322 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   1430a:	4b57      	ldr	r3, [pc, #348]	; (14468 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   1430c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   14310:	4853      	ldr	r0, [pc, #332]	; (14460 <z_arm_fault+0x1ec>)
   14312:	f107 0218 	add.w	r2, r7, #24
   14316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1431a:	f00e fd07 	bl	22d2c <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1431e:	2400      	movs	r4, #0
   14320:	e041      	b.n	143a6 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   14322:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14324:	2b00      	cmp	r3, #0
   14326:	da01      	bge.n	1432c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   14328:	4b50      	ldr	r3, [pc, #320]	; (1446c <z_arm_fault+0x1f8>)
   1432a:	e7ef      	b.n	1430c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1432c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1432e:	005b      	lsls	r3, r3, #1
   14330:	d5f5      	bpl.n	1431e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   14332:	4b4f      	ldr	r3, [pc, #316]	; (14470 <z_arm_fault+0x1fc>)
   14334:	484a      	ldr	r0, [pc, #296]	; (14460 <z_arm_fault+0x1ec>)
   14336:	e9c7 8306 	strd	r8, r3, [r7, #24]
   1433a:	f107 0218 	add.w	r2, r7, #24
   1433e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14342:	f00e fcf3 	bl	22d2c <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   14346:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   14348:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1434a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1434e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14354:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   14358:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1435a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1435e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   14362:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   14364:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14368:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1436c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   14370:	429a      	cmp	r2, r3
   14372:	d008      	beq.n	14386 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   14374:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14376:	b2db      	uxtb	r3, r3
   14378:	b38b      	cbz	r3, 143de <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1437a:	1dfa      	adds	r2, r7, #7
   1437c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1437e:	4628      	mov	r0, r5
   14380:	f7ff fec0 	bl	14104 <mem_manage_fault>
   14384:	e03a      	b.n	143fc <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   14386:	b088      	sub	sp, #32
   14388:	682b      	ldr	r3, [r5, #0]
   1438a:	466a      	mov	r2, sp
   1438c:	4939      	ldr	r1, [pc, #228]	; (14474 <z_arm_fault+0x200>)
   1438e:	4834      	ldr	r0, [pc, #208]	; (14460 <z_arm_fault+0x1ec>)
   14390:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14394:	2303      	movs	r3, #3
   14396:	f842 3f10 	str.w	r3, [r2, #16]!
   1439a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1439e:	f00e fcc5 	bl	22d2c <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   143a2:	682c      	ldr	r4, [r5, #0]
   143a4:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   143a6:	79fb      	ldrb	r3, [r7, #7]
   143a8:	b9ab      	cbnz	r3, 143d6 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   143aa:	2220      	movs	r2, #32
   143ac:	4629      	mov	r1, r5
   143ae:	f107 0008 	add.w	r0, r7, #8
   143b2:	f00e fcff 	bl	22db4 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   143b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   143b8:	2e00      	cmp	r6, #0
   143ba:	d047      	beq.n	1444c <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   143bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
   143c0:	b922      	cbnz	r2, 143cc <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   143c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   143c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   143ca:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   143cc:	f107 0108 	add.w	r1, r7, #8
   143d0:	4620      	mov	r0, r4
   143d2:	f7ff fbdb 	bl	13b8c <z_arm_fatal_error>
}
   143d6:	372c      	adds	r7, #44	; 0x2c
   143d8:	46bd      	mov	sp, r7
   143da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   143de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143e0:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   143e4:	d004      	beq.n	143f0 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   143e6:	1df9      	adds	r1, r7, #7
   143e8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   143ea:	f7ff fd77 	bl	13edc <bus_fault.constprop.0>
   143ee:	e005      	b.n	143fc <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   143f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   143f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   143f6:	d392      	bcc.n	1431e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   143f8:	f7ff fe08 	bl	1400c <usage_fault.constprop.0>
   143fc:	4604      	mov	r4, r0
   143fe:	e7d2      	b.n	143a6 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   14400:	1dfa      	adds	r2, r7, #7
   14402:	2100      	movs	r1, #0
   14404:	e7bb      	b.n	1437e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   14406:	1df9      	adds	r1, r7, #7
   14408:	2000      	movs	r0, #0
   1440a:	e7ee      	b.n	143ea <z_arm_fault+0x176>
	PR_FAULT_INFO(
   1440c:	4b1a      	ldr	r3, [pc, #104]	; (14478 <z_arm_fault+0x204>)
   1440e:	61fb      	str	r3, [r7, #28]
   14410:	2302      	movs	r3, #2
   14412:	61bb      	str	r3, [r7, #24]
   14414:	e77c      	b.n	14310 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   14416:	4a19      	ldr	r2, [pc, #100]	; (1447c <z_arm_fault+0x208>)
   14418:	4b19      	ldr	r3, [pc, #100]	; (14480 <z_arm_fault+0x20c>)
   1441a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   1441e:	46e8      	mov	r8, sp
   14420:	b08a      	sub	sp, #40	; 0x28
   14422:	bf18      	it	ne
   14424:	4613      	movne	r3, r2
   14426:	466a      	mov	r2, sp
   14428:	4916      	ldr	r1, [pc, #88]	; (14484 <z_arm_fault+0x210>)
   1442a:	480d      	ldr	r0, [pc, #52]	; (14460 <z_arm_fault+0x1ec>)
   1442c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14430:	f44f 7300 	mov.w	r3, #512	; 0x200
   14434:	8413      	strh	r3, [r2, #32]
   14436:	3c10      	subs	r4, #16
   14438:	4b13      	ldr	r3, [pc, #76]	; (14488 <z_arm_fault+0x214>)
   1443a:	61d4      	str	r4, [r2, #28]
   1443c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   14440:	f842 3f10 	str.w	r3, [r2, #16]!
   14444:	f00e fc72 	bl	22d2c <z_log_msg_static_create.constprop.0>
   14448:	46c5      	mov	sp, r8
}
   1444a:	e768      	b.n	1431e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1444c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14450:	f023 0301 	bic.w	r3, r3, #1
   14454:	e7b9      	b.n	143ca <z_arm_fault+0x156>
   14456:	bf00      	nop
   14458:	e000ed00 	.word	0xe000ed00
   1445c:	000272b8 	.word	0x000272b8
   14460:	00025ff0 	.word	0x00025ff0
   14464:	000272e3 	.word	0x000272e3
   14468:	000272fa 	.word	0x000272fa
   1446c:	0002731b 	.word	0x0002731b
   14470:	00027329 	.word	0x00027329
   14474:	00027348 	.word	0x00027348
   14478:	00027364 	.word	0x00027364
   1447c:	0002729f 	.word	0x0002729f
   14480:	0002728a 	.word	0x0002728a
   14484:	00027388 	.word	0x00027388
   14488:	01000004 	.word	0x01000004

0001448c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1448c:	4a02      	ldr	r2, [pc, #8]	; (14498 <z_arm_fault_init+0xc>)
   1448e:	6953      	ldr	r3, [r2, #20]
   14490:	f043 0310 	orr.w	r3, r3, #16
   14494:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   14496:	4770      	bx	lr
   14498:	e000ed00 	.word	0xe000ed00

0001449c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1449c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   144a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   144a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   144a6:	4672      	mov	r2, lr
	bl z_arm_fault
   144a8:	f7ff fee4 	bl	14274 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   144ac:	bd01      	pop	{r0, pc}
   144ae:	bf00      	nop

000144b0 <z_arm_interrupt_init>:
   144b0:	4804      	ldr	r0, [pc, #16]	; (144c4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   144b2:	2300      	movs	r3, #0
   144b4:	2140      	movs	r1, #64	; 0x40
   144b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   144b8:	3301      	adds	r3, #1
   144ba:	2b30      	cmp	r3, #48	; 0x30
   144bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   144c0:	d1f9      	bne.n	144b6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   144c2:	4770      	bx	lr
   144c4:	e000e100 	.word	0xe000e100

000144c8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   144c8:	2000      	movs	r0, #0
    msr CONTROL, r0
   144ca:	f380 8814 	msr	CONTROL, r0
    isb
   144ce:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   144d2:	f7fe fadf 	bl	12a94 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   144d6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   144d8:	490d      	ldr	r1, [pc, #52]	; (14510 <__start+0x48>)
    str r0, [r1]
   144da:	6008      	str	r0, [r1, #0]
    dsb
   144dc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   144e0:	480c      	ldr	r0, [pc, #48]	; (14514 <__start+0x4c>)
    msr msp, r0
   144e2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   144e6:	f000 f82b 	bl	14540 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   144ea:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   144ec:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   144f0:	4809      	ldr	r0, [pc, #36]	; (14518 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   144f2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   144f6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   144f8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   144fc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   14500:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   14502:	4308      	orrs	r0, r1
    msr CONTROL, r0
   14504:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   14508:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1450c:	f7ff fc00 	bl	13d10 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   14510:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   14514:	200084c0 	.word	0x200084c0
    ldr r0, =z_interrupt_stacks
   14518:	20007700 	.word	0x20007700

0001451c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1451c:	4907      	ldr	r1, [pc, #28]	; (1453c <z_arm_clear_arm_mpu_config+0x20>)
   1451e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   14522:	2300      	movs	r3, #0
	int num_regions =
   14524:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   14528:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1452a:	4293      	cmp	r3, r2
   1452c:	db00      	blt.n	14530 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1452e:	4770      	bx	lr
  MPU->RNR = rnr;
   14530:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   14534:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   14538:	3301      	adds	r3, #1
   1453a:	e7f6      	b.n	1452a <z_arm_clear_arm_mpu_config+0xe>
   1453c:	e000ed00 	.word	0xe000ed00

00014540 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   14540:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   14542:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   14544:	2300      	movs	r3, #0
   14546:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1454a:	f7ff ffe7 	bl	1451c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1454e:	4b14      	ldr	r3, [pc, #80]	; (145a0 <z_arm_init_arch_hw_at_boot+0x60>)
   14550:	f04f 32ff 	mov.w	r2, #4294967295
   14554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   14558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1455c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   14560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   14564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   14568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1456c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   14570:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   14574:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   14578:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1457c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   14580:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   14584:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   14588:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1458c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   14590:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   14594:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   14596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1459a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1459e:	bd08      	pop	{r3, pc}
   145a0:	e000e100 	.word	0xe000e100

000145a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   145a4:	4b08      	ldr	r3, [pc, #32]	; (145c8 <z_impl_k_thread_abort+0x24>)
   145a6:	689b      	ldr	r3, [r3, #8]
   145a8:	4283      	cmp	r3, r0
   145aa:	d10b      	bne.n	145c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   145ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   145b0:	b143      	cbz	r3, 145c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   145b2:	4b06      	ldr	r3, [pc, #24]	; (145cc <z_impl_k_thread_abort+0x28>)
   145b4:	685a      	ldr	r2, [r3, #4]
   145b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   145ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   145bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   145be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   145c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   145c4:	f009 bf82 	b.w	1e4cc <z_thread_abort>
   145c8:	20003a3c 	.word	0x20003a3c
   145cc:	e000ed00 	.word	0xe000ed00

000145d0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   145d0:	4b02      	ldr	r3, [pc, #8]	; (145dc <z_arm_configure_static_mpu_regions+0xc>)
   145d2:	4a03      	ldr	r2, [pc, #12]	; (145e0 <z_arm_configure_static_mpu_regions+0x10>)
   145d4:	4803      	ldr	r0, [pc, #12]	; (145e4 <z_arm_configure_static_mpu_regions+0x14>)
   145d6:	2101      	movs	r1, #1
   145d8:	f000 b892 	b.w	14700 <arm_core_mpu_configure_static_mpu_regions>
   145dc:	20040000 	.word	0x20040000
   145e0:	20000000 	.word	0x20000000
   145e4:	00026214 	.word	0x00026214

000145e8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   145e8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   145ea:	4b05      	ldr	r3, [pc, #20]	; (14600 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   145ec:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   145ee:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   145f0:	4a04      	ldr	r2, [pc, #16]	; (14604 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   145f2:	2140      	movs	r1, #64	; 0x40
   145f4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   145f8:	4618      	mov	r0, r3
   145fa:	2101      	movs	r1, #1
   145fc:	f000 b88a 	b.w	14714 <arm_core_mpu_configure_dynamic_mpu_regions>
   14600:	20003644 	.word	0x20003644
   14604:	150b0000 	.word	0x150b0000

00014608 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   14608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1460c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 146c4 <mpu_configure_regions+0xbc>
   14610:	469c      	mov	ip, r3
   14612:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   14614:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   14616:	2300      	movs	r3, #0
   14618:	428b      	cmp	r3, r1
   1461a:	da1a      	bge.n	14652 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   1461c:	6844      	ldr	r4, [r0, #4]
   1461e:	2c00      	cmp	r4, #0
   14620:	d04d      	beq.n	146be <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   14622:	f1bc 0f00 	cmp.w	ip, #0
   14626:	d01d      	beq.n	14664 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   14628:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1462a:	4234      	tst	r4, r6
   1462c:	d015      	beq.n	1465a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1462e:	466c      	mov	r4, sp
   14630:	b088      	sub	sp, #32
   14632:	466a      	mov	r2, sp
   14634:	4924      	ldr	r1, [pc, #144]	; (146c8 <mpu_configure_regions+0xc0>)
   14636:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1463a:	2303      	movs	r3, #3
   1463c:	f842 3f10 	str.w	r3, [r2, #16]!
   14640:	4822      	ldr	r0, [pc, #136]	; (146cc <mpu_configure_regions+0xc4>)
   14642:	2300      	movs	r3, #0
   14644:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14648:	f7fe fcb8 	bl	12fbc <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1464c:	f06f 0515 	mvn.w	r5, #21
   14650:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   14652:	4628      	mov	r0, r5
   14654:	46bd      	mov	sp, r7
   14656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   1465a:	2c1f      	cmp	r4, #31
   1465c:	d9e7      	bls.n	1462e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   1465e:	6802      	ldr	r2, [r0, #0]
		&&
   14660:	4216      	tst	r6, r2
   14662:	d1e4      	bne.n	1462e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   14664:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   14666:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14668:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1466a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   1466e:	d914      	bls.n	1469a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   14670:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   14674:	d813      	bhi.n	1469e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   14676:	3c01      	subs	r4, #1
   14678:	fab4 f484 	clz	r4, r4
   1467c:	f1c4 041f 	rsb	r4, r4, #31
   14680:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   14682:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   14686:	ea46 0604 	orr.w	r6, r6, r4
   1468a:	d90a      	bls.n	146a2 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1468c:	466c      	mov	r4, sp
   1468e:	b088      	sub	sp, #32
   14690:	466a      	mov	r2, sp
   14692:	4b0f      	ldr	r3, [pc, #60]	; (146d0 <mpu_configure_regions+0xc8>)
   14694:	e9c2 3505 	strd	r3, r5, [r2, #20]
   14698:	e7cf      	b.n	1463a <mpu_configure_regions+0x32>
		return REGION_32B;
   1469a:	2408      	movs	r4, #8
   1469c:	e7f1      	b.n	14682 <mpu_configure_regions+0x7a>
		return REGION_4G;
   1469e:	243e      	movs	r4, #62	; 0x3e
   146a0:	e7ef      	b.n	14682 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   146a2:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   146a6:	432a      	orrs	r2, r5
   146a8:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   146ac:	f046 0601 	orr.w	r6, r6, #1
   146b0:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   146b4:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   146b8:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   146ba:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   146be:	3301      	adds	r3, #1
   146c0:	300c      	adds	r0, #12
   146c2:	e7a9      	b.n	14618 <mpu_configure_regions+0x10>
   146c4:	e000ed00 	.word	0xe000ed00
   146c8:	0002739f 	.word	0x0002739f
   146cc:	00025fe0 	.word	0x00025fe0
   146d0:	000273c2 	.word	0x000273c2

000146d4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   146d4:	4b04      	ldr	r3, [pc, #16]	; (146e8 <arm_core_mpu_enable+0x14>)
   146d6:	2205      	movs	r2, #5
   146d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   146dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   146e0:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   146e4:	4770      	bx	lr
   146e6:	bf00      	nop
   146e8:	e000ed00 	.word	0xe000ed00

000146ec <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   146ec:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   146f0:	4b02      	ldr	r3, [pc, #8]	; (146fc <arm_core_mpu_disable+0x10>)
   146f2:	2200      	movs	r2, #0
   146f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   146f8:	4770      	bx	lr
   146fa:	bf00      	nop
   146fc:	e000ed00 	.word	0xe000ed00

00014700 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   14700:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   14702:	4c03      	ldr	r4, [pc, #12]	; (14710 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   14704:	2301      	movs	r3, #1
   14706:	7822      	ldrb	r2, [r4, #0]
   14708:	f7ff ff7e 	bl	14608 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1470c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1470e:	bd10      	pop	{r4, pc}
   14710:	20004573 	.word	0x20004573

00014714 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   14714:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   14716:	4a09      	ldr	r2, [pc, #36]	; (1473c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   14718:	2300      	movs	r3, #0
   1471a:	7812      	ldrb	r2, [r2, #0]
   1471c:	f7ff ff74 	bl	14608 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   14720:	f110 0f16 	cmn.w	r0, #22
   14724:	d003      	beq.n	1472e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   14726:	4b06      	ldr	r3, [pc, #24]	; (14740 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   14728:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1472a:	2807      	cmp	r0, #7
   1472c:	dd00      	ble.n	14730 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   1472e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   14730:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   14734:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   14738:	3001      	adds	r0, #1
   1473a:	e7f6      	b.n	1472a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   1473c:	20004573 	.word	0x20004573
   14740:	e000ed00 	.word	0xe000ed00

00014744 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14744:	4914      	ldr	r1, [pc, #80]	; (14798 <z_arm_mpu_init+0x54>)
   14746:	6808      	ldr	r0, [r1, #0]
   14748:	2808      	cmp	r0, #8
{
   1474a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   1474c:	d821      	bhi.n	14792 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1474e:	f7ff ffcd 	bl	146ec <arm_core_mpu_disable>
   14752:	4c12      	ldr	r4, [pc, #72]	; (1479c <z_arm_mpu_init+0x58>)
   14754:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14756:	2200      	movs	r2, #0
   14758:	4290      	cmp	r0, r2
   1475a:	f101 010c 	add.w	r1, r1, #12
   1475e:	d105      	bne.n	1476c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   14760:	4b0f      	ldr	r3, [pc, #60]	; (147a0 <z_arm_mpu_init+0x5c>)
   14762:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   14764:	f7ff ffb6 	bl	146d4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14768:	2000      	movs	r0, #0
}
   1476a:	bd10      	pop	{r4, pc}
   1476c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   14770:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   14774:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   14778:	4313      	orrs	r3, r2
   1477a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1477e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   14782:	f851 3c04 	ldr.w	r3, [r1, #-4]
   14786:	f043 0301 	orr.w	r3, r3, #1
   1478a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1478e:	3201      	adds	r2, #1
   14790:	e7e2      	b.n	14758 <z_arm_mpu_init+0x14>
		return -1;
   14792:	f04f 30ff 	mov.w	r0, #4294967295
   14796:	e7e8      	b.n	1476a <z_arm_mpu_init+0x26>
   14798:	00026220 	.word	0x00026220
   1479c:	e000ed00 	.word	0xe000ed00
   147a0:	20004573 	.word	0x20004573

000147a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   147a4:	4b01      	ldr	r3, [pc, #4]	; (147ac <__stdout_hook_install+0x8>)
   147a6:	6018      	str	r0, [r3, #0]
}
   147a8:	4770      	bx	lr
   147aa:	bf00      	nop
   147ac:	2000072c 	.word	0x2000072c

000147b0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   147b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   147b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   147b6:	f3ef 8011 	mrs	r0, BASEPRI
   147ba:	f383 8812 	msr	BASEPRI_MAX, r3
   147be:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   147c2:	4a11      	ldr	r2, [pc, #68]	; (14808 <nordicsemi_nrf52_init+0x58>)
   147c4:	2301      	movs	r3, #1
   147c6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   147ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   147ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   147d2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   147d6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   147da:	2c08      	cmp	r4, #8
   147dc:	d108      	bne.n	147f0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   147de:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   147e2:	2905      	cmp	r1, #5
   147e4:	d804      	bhi.n	147f0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   147e6:	4c09      	ldr	r4, [pc, #36]	; (1480c <nordicsemi_nrf52_init+0x5c>)
   147e8:	5c61      	ldrb	r1, [r4, r1]
   147ea:	b109      	cbz	r1, 147f0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   147ec:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   147f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   147f4:	2201      	movs	r2, #1
   147f6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   147fa:	f380 8811 	msr	BASEPRI, r0
   147fe:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   14802:	2000      	movs	r0, #0
   14804:	bd10      	pop	{r4, pc}
   14806:	bf00      	nop
   14808:	4001e000 	.word	0x4001e000
   1480c:	000273f7 	.word	0x000273f7

00014810 <sys_arch_reboot>:
    *p_gpregret = val;
   14810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14814:	b2c0      	uxtb	r0, r0
   14816:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   1481a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1481e:	4905      	ldr	r1, [pc, #20]	; (14834 <sys_arch_reboot+0x24>)
   14820:	4b05      	ldr	r3, [pc, #20]	; (14838 <sys_arch_reboot+0x28>)
   14822:	68ca      	ldr	r2, [r1, #12]
   14824:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   14828:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1482a:	60cb      	str	r3, [r1, #12]
   1482c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   14830:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   14832:	e7fd      	b.n	14830 <sys_arch_reboot+0x20>
   14834:	e000ed00 	.word	0xe000ed00
   14838:	05fa0004 	.word	0x05fa0004

0001483c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1483c:	b120      	cbz	r0, 14848 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1483e:	4b03      	ldr	r3, [pc, #12]	; (1484c <arch_busy_wait+0x10>)
   14840:	0180      	lsls	r0, r0, #6
   14842:	f043 0301 	orr.w	r3, r3, #1
   14846:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   14848:	4770      	bx	lr
   1484a:	bf00      	nop
   1484c:	00026070 	.word	0x00026070

00014850 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   14850:	4b0e      	ldr	r3, [pc, #56]	; (1488c <bt_hex+0x3c>)
   14852:	2940      	cmp	r1, #64	; 0x40
{
   14854:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   14856:	bf28      	it	cs
   14858:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1485a:	4c0d      	ldr	r4, [pc, #52]	; (14890 <bt_hex+0x40>)
   1485c:	1846      	adds	r6, r0, r1
   1485e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   14860:	42b0      	cmp	r0, r6
   14862:	f103 0302 	add.w	r3, r3, #2
   14866:	d104      	bne.n	14872 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   14868:	2300      	movs	r3, #0
   1486a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   1486e:	4807      	ldr	r0, [pc, #28]	; (1488c <bt_hex+0x3c>)
   14870:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   14872:	7802      	ldrb	r2, [r0, #0]
   14874:	0912      	lsrs	r2, r2, #4
   14876:	5ca2      	ldrb	r2, [r4, r2]
   14878:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1487c:	f810 2b01 	ldrb.w	r2, [r0], #1
   14880:	f002 020f 	and.w	r2, r2, #15
   14884:	5ca2      	ldrb	r2, [r4, r2]
   14886:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1488a:	e7e9      	b.n	14860 <bt_hex+0x10>
   1488c:	20004592 	.word	0x20004592
   14890:	00027460 	.word	0x00027460

00014894 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   14894:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   14896:	7803      	ldrb	r3, [r0, #0]
   14898:	b08b      	sub	sp, #44	; 0x2c
   1489a:	4604      	mov	r4, r0
   1489c:	ad07      	add	r5, sp, #28
   1489e:	2b03      	cmp	r3, #3
   148a0:	d821      	bhi.n	148e6 <bt_addr_le_str+0x52>
   148a2:	e8df f003 	tbb	[pc, r3]
   148a6:	1a02      	.short	0x1a02
   148a8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   148aa:	4912      	ldr	r1, [pc, #72]	; (148f4 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   148ac:	4628      	mov	r0, r5
   148ae:	f00e fa40 	bl	22d32 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   148b2:	9505      	str	r5, [sp, #20]
   148b4:	7863      	ldrb	r3, [r4, #1]
   148b6:	9304      	str	r3, [sp, #16]
   148b8:	78a3      	ldrb	r3, [r4, #2]
   148ba:	9303      	str	r3, [sp, #12]
   148bc:	78e3      	ldrb	r3, [r4, #3]
   148be:	9302      	str	r3, [sp, #8]
   148c0:	7923      	ldrb	r3, [r4, #4]
   148c2:	9301      	str	r3, [sp, #4]
   148c4:	7963      	ldrb	r3, [r4, #5]
   148c6:	9300      	str	r3, [sp, #0]
   148c8:	79a3      	ldrb	r3, [r4, #6]
   148ca:	4a0b      	ldr	r2, [pc, #44]	; (148f8 <bt_addr_le_str+0x64>)
   148cc:	480b      	ldr	r0, [pc, #44]	; (148fc <bt_addr_le_str+0x68>)
   148ce:	211e      	movs	r1, #30
   148d0:	f00d f9e7 	bl	21ca2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   148d4:	4809      	ldr	r0, [pc, #36]	; (148fc <bt_addr_le_str+0x68>)
   148d6:	b00b      	add	sp, #44	; 0x2c
   148d8:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   148da:	4909      	ldr	r1, [pc, #36]	; (14900 <bt_addr_le_str+0x6c>)
   148dc:	e7e6      	b.n	148ac <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   148de:	4909      	ldr	r1, [pc, #36]	; (14904 <bt_addr_le_str+0x70>)
   148e0:	e7e4      	b.n	148ac <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   148e2:	4909      	ldr	r1, [pc, #36]	; (14908 <bt_addr_le_str+0x74>)
   148e4:	e7e2      	b.n	148ac <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   148e6:	4a09      	ldr	r2, [pc, #36]	; (1490c <bt_addr_le_str+0x78>)
   148e8:	210a      	movs	r1, #10
   148ea:	4628      	mov	r0, r5
   148ec:	f00d f9d9 	bl	21ca2 <snprintk>
		break;
   148f0:	e7df      	b.n	148b2 <bt_addr_le_str+0x1e>
   148f2:	bf00      	nop
   148f4:	0002741b 	.word	0x0002741b
   148f8:	0002743d 	.word	0x0002743d
   148fc:	20004574 	.word	0x20004574
   14900:	00027422 	.word	0x00027422
   14904:	00027429 	.word	0x00027429
   14908:	00027433 	.word	0x00027433
   1490c:	00028036 	.word	0x00028036

00014910 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   14910:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   14912:	4d0a      	ldr	r5, [pc, #40]	; (1493c <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14914:	4b0a      	ldr	r3, [pc, #40]	; (14940 <long_wq_init+0x30>)
{
   14916:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   14918:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   1491a:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1491c:	9302      	str	r3, [sp, #8]
   1491e:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   14920:	f010 fdbe 	bl	254a0 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   14924:	ab02      	add	r3, sp, #8
   14926:	9300      	str	r3, [sp, #0]
   14928:	4628      	mov	r0, r5
   1492a:	4906      	ldr	r1, [pc, #24]	; (14944 <long_wq_init+0x34>)
   1492c:	230a      	movs	r3, #10
   1492e:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   14932:	f009 fa47 	bl	1ddc4 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   14936:	4620      	mov	r0, r4
   14938:	b005      	add	sp, #20
   1493a:	bd30      	pop	{r4, r5, pc}
   1493c:	20002258 	.word	0x20002258
   14940:	00027471 	.word	0x00027471
   14944:	20005ec0 	.word	0x20005ec0

00014948 <bt_long_wq_schedule>:
{
   14948:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1494a:	4801      	ldr	r0, [pc, #4]	; (14950 <bt_long_wq_schedule+0x8>)
   1494c:	f009 ba72 	b.w	1de34 <k_work_schedule_for_queue>
   14950:	20002258 	.word	0x20002258

00014954 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   14954:	b430      	push	{r4, r5}
   14956:	4603      	mov	r3, r0
   14958:	4608      	mov	r0, r1
	switch (src->type) {
   1495a:	781a      	ldrb	r2, [r3, #0]
   1495c:	2a01      	cmp	r2, #1
   1495e:	d013      	beq.n	14988 <uuid_to_uuid128+0x34>
   14960:	2a02      	cmp	r2, #2
   14962:	d026      	beq.n	149b2 <uuid_to_uuid128+0x5e>
   14964:	b972      	cbnz	r2, 14984 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   14966:	4a15      	ldr	r2, [pc, #84]	; (149bc <uuid_to_uuid128+0x68>)
   14968:	f102 0410 	add.w	r4, r2, #16
   1496c:	f852 5b04 	ldr.w	r5, [r2], #4
   14970:	f841 5b04 	str.w	r5, [r1], #4
   14974:	42a2      	cmp	r2, r4
   14976:	d1f9      	bne.n	1496c <uuid_to_uuid128+0x18>
   14978:	7812      	ldrb	r2, [r2, #0]
   1497a:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   1497c:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1497e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   14980:	0a1b      	lsrs	r3, r3, #8
   14982:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   14984:	bc30      	pop	{r4, r5}
   14986:	4770      	bx	lr
		*dst = uuid128_base;
   14988:	4a0c      	ldr	r2, [pc, #48]	; (149bc <uuid_to_uuid128+0x68>)
   1498a:	f102 0410 	add.w	r4, r2, #16
   1498e:	f852 5b04 	ldr.w	r5, [r2], #4
   14992:	f841 5b04 	str.w	r5, [r1], #4
   14996:	42a2      	cmp	r2, r4
   14998:	d1f9      	bne.n	1498e <uuid_to_uuid128+0x3a>
   1499a:	7812      	ldrb	r2, [r2, #0]
   1499c:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   1499e:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   149a0:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   149a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   149a6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   149a8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   149aa:	0a1b      	lsrs	r3, r3, #8
   149ac:	7382      	strb	r2, [r0, #14]
   149ae:	7403      	strb	r3, [r0, #16]
}
   149b0:	e7e8      	b.n	14984 <uuid_to_uuid128+0x30>
}
   149b2:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   149b4:	2211      	movs	r2, #17
   149b6:	4619      	mov	r1, r3
   149b8:	f00e b9fc 	b.w	22db4 <memcpy>
   149bc:	0002747a 	.word	0x0002747a

000149c0 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   149c0:	b538      	push	{r3, r4, r5, lr}
   149c2:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   149c4:	4805      	ldr	r0, [pc, #20]	; (149dc <bt_buf_get_rx+0x1c>)
   149c6:	f00f fd57 	bl	24478 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   149ca:	4604      	mov	r4, r0
   149cc:	b120      	cbz	r0, 149d8 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   149ce:	2100      	movs	r1, #0
   149d0:	300c      	adds	r0, #12
   149d2:	f00f fd58 	bl	24486 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   149d6:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   149d8:	4620      	mov	r0, r4
   149da:	bd38      	pop	{r3, r4, r5, pc}
   149dc:	20000c9c 	.word	0x20000c9c

000149e0 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   149e0:	b510      	push	{r4, lr}
   149e2:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   149e4:	490a      	ldr	r1, [pc, #40]	; (14a10 <bt_buf_get_cmd_complete+0x30>)
{
   149e6:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   149e8:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   149ec:	b920      	cbnz	r0, 149f8 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   149ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   149f2:	2001      	movs	r0, #1
   149f4:	f7ff bfe4 	b.w	149c0 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   149f8:	f00f fd78 	bl	244ec <net_buf_ref>
   149fc:	2301      	movs	r3, #1
		buf->len = 0U;
   149fe:	2100      	movs	r1, #0
   14a00:	7603      	strb	r3, [r0, #24]
   14a02:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   14a04:	4604      	mov	r4, r0
   14a06:	300c      	adds	r0, #12
   14a08:	f00f fd3d 	bl	24486 <net_buf_simple_reserve>
}
   14a0c:	4620      	mov	r0, r4
   14a0e:	bd10      	pop	{r4, pc}
   14a10:	20000388 	.word	0x20000388

00014a14 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   14a14:	b570      	push	{r4, r5, r6, lr}
   14a16:	4604      	mov	r4, r0
	switch (evt) {
   14a18:	2c0f      	cmp	r4, #15
{
   14a1a:	460d      	mov	r5, r1
   14a1c:	4610      	mov	r0, r2
   14a1e:	4619      	mov	r1, r3
	switch (evt) {
   14a20:	d805      	bhi.n	14a2e <bt_buf_get_evt+0x1a>
   14a22:	2c0d      	cmp	r4, #13
   14a24:	d90d      	bls.n	14a42 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   14a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   14a2a:	f7ff bfd9 	b.w	149e0 <bt_buf_get_cmd_complete>
	switch (evt) {
   14a2e:	2c13      	cmp	r4, #19
   14a30:	d107      	bne.n	14a42 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   14a32:	480c      	ldr	r0, [pc, #48]	; (14a64 <bt_buf_get_evt+0x50>)
   14a34:	f00f fd20 	bl	24478 <net_buf_alloc_fixed>
			if (buf) {
   14a38:	4604      	mov	r4, r0
   14a3a:	b938      	cbnz	r0, 14a4c <bt_buf_get_evt+0x38>
{
   14a3c:	2400      	movs	r4, #0
}
   14a3e:	4620      	mov	r0, r4
   14a40:	bd70      	pop	{r4, r5, r6, pc}
   14a42:	4602      	mov	r2, r0
   14a44:	460b      	mov	r3, r1
		if (discardable) {
   14a46:	b145      	cbz	r5, 14a5a <bt_buf_get_evt+0x46>
   14a48:	4807      	ldr	r0, [pc, #28]	; (14a68 <bt_buf_get_evt+0x54>)
   14a4a:	e7f3      	b.n	14a34 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   14a4c:	2100      	movs	r1, #0
   14a4e:	300c      	adds	r0, #12
   14a50:	f00f fd19 	bl	24486 <net_buf_simple_reserve>
   14a54:	2301      	movs	r3, #1
   14a56:	7623      	strb	r3, [r4, #24]
}
   14a58:	e7f1      	b.n	14a3e <bt_buf_get_evt+0x2a>
}
   14a5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   14a5e:	2001      	movs	r0, #1
   14a60:	f7ff bfae 	b.w	149c0 <bt_buf_get_rx>
   14a64:	20000cc8 	.word	0x20000cc8
   14a68:	20000c18 	.word	0x20000c18

00014a6c <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   14a6c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14a6e:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14a70:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   14a74:	781b      	ldrb	r3, [r3, #0]
   14a76:	b963      	cbnz	r3, 14a92 <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   14a78:	4620      	mov	r0, r4
   14a7a:	f002 fb67 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   14a7e:	4605      	mov	r5, r0
   14a80:	b940      	cbnz	r0, 14a94 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   14a82:	4b08      	ldr	r3, [pc, #32]	; (14aa4 <hci_disconn_complete_prio+0x38>)
   14a84:	881a      	ldrh	r2, [r3, #0]
   14a86:	b922      	cbnz	r2, 14a92 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   14a88:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   14a8c:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   14a90:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   14a92:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14a94:	2101      	movs	r1, #1
   14a96:	f002 fb61 	bl	1715c <bt_conn_set_state>
	bt_conn_unref(conn);
   14a9a:	4628      	mov	r0, r5
}
   14a9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   14aa0:	f00e bc4b 	b.w	2333a <bt_conn_unref>
   14aa4:	20004544 	.word	0x20004544

00014aa8 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14aa8:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14aaa:	4c08      	ldr	r4, [pc, #32]	; (14acc <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   14aac:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   14aae:	2205      	movs	r2, #5
   14ab0:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   14ab4:	f002 fd7e 	bl	175b4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   14ab8:	b938      	cbnz	r0, 14aca <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14aba:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   14abe:	4904      	ldr	r1, [pc, #16]	; (14ad0 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   14ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   14ac4:	2204      	movs	r2, #4
   14ac6:	f002 bd75 	b.w	175b4 <bt_conn_lookup_state_le>
}
   14aca:	bd10      	pop	{r4, pc}
   14acc:	20000388 	.word	0x20000388
   14ad0:	00027401 	.word	0x00027401

00014ad4 <hci_data_buf_overflow>:
{
   14ad4:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14ad6:	68c3      	ldr	r3, [r0, #12]
{
   14ad8:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   14ada:	b088      	sub	sp, #32
   14adc:	781b      	ldrb	r3, [r3, #0]
   14ade:	466a      	mov	r2, sp
   14ae0:	4906      	ldr	r1, [pc, #24]	; (14afc <hci_data_buf_overflow+0x28>)
   14ae2:	4807      	ldr	r0, [pc, #28]	; (14b00 <hci_data_buf_overflow+0x2c>)
   14ae4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14ae8:	2303      	movs	r3, #3
   14aea:	f842 3f10 	str.w	r3, [r2, #16]!
   14aee:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14af2:	f00e fa04 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   14af6:	46bd      	mov	sp, r7
   14af8:	bd80      	pop	{r7, pc}
   14afa:	bf00      	nop
   14afc:	0002748b 	.word	0x0002748b
   14b00:	00025f68 	.word	0x00025f68

00014b04 <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   14b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		LOG_ERR("Unable to allocate buffer");
   14b06:	4b06      	ldr	r3, [pc, #24]	; (14b20 <le_conn_param_neg_reply.part.0+0x1c>)
   14b08:	9305      	str	r3, [sp, #20]
   14b0a:	4806      	ldr	r0, [pc, #24]	; (14b24 <le_conn_param_neg_reply.part.0+0x20>)
   14b0c:	2302      	movs	r3, #2
   14b0e:	aa04      	add	r2, sp, #16
   14b10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14b14:	9304      	str	r3, [sp, #16]
   14b16:	f00e f9f2 	bl	22efe <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
   14b1a:	b007      	add	sp, #28
   14b1c:	f85d fb04 	ldr.w	pc, [sp], #4
   14b20:	000274b3 	.word	0x000274b3
   14b24:	00025f68 	.word	0x00025f68

00014b28 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   14b28:	b598      	push	{r3, r4, r7, lr}
   14b2a:	4601      	mov	r1, r0
   14b2c:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   14b2e:	480d      	ldr	r0, [pc, #52]	; (14b64 <rx_queue_put+0x3c>)
   14b30:	f00f fcad 	bl	2448e <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14b34:	490c      	ldr	r1, [pc, #48]	; (14b68 <rx_queue_put+0x40>)
   14b36:	480d      	ldr	r0, [pc, #52]	; (14b6c <rx_queue_put+0x44>)
   14b38:	f010 fca1 	bl	2547e <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   14b3c:	2800      	cmp	r0, #0
   14b3e:	da0e      	bge.n	14b5e <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   14b40:	466c      	mov	r4, sp
   14b42:	b088      	sub	sp, #32
   14b44:	466a      	mov	r2, sp
   14b46:	4b0a      	ldr	r3, [pc, #40]	; (14b70 <rx_queue_put+0x48>)
   14b48:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14b4c:	2303      	movs	r3, #3
   14b4e:	f842 3f10 	str.w	r3, [r2, #16]!
   14b52:	4808      	ldr	r0, [pc, #32]	; (14b74 <rx_queue_put+0x4c>)
   14b54:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14b58:	f00e f9d1 	bl	22efe <z_log_msg_static_create.constprop.0>
   14b5c:	46a5      	mov	sp, r4
	}
}
   14b5e:	46bd      	mov	sp, r7
   14b60:	bd98      	pop	{r3, r4, r7, pc}
   14b62:	bf00      	nop
   14b64:	200004bc 	.word	0x200004bc
   14b68:	2000076c 	.word	0x2000076c
   14b6c:	20002378 	.word	0x20002378
   14b70:	000274cd 	.word	0x000274cd
   14b74:	00025f68 	.word	0x00025f68

00014b78 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   14b78:	b5b0      	push	{r4, r5, r7, lr}
   14b7a:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   14b7c:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   14b7e:	af00      	add	r7, sp, #0
   14b80:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   14b82:	4629      	mov	r1, r5
   14b84:	68d8      	ldr	r0, [r3, #12]
   14b86:	f7ff fe63 	bl	14850 <bt_hex>
   14b8a:	b08a      	sub	sp, #40	; 0x28
   14b8c:	466a      	mov	r2, sp
   14b8e:	4b09      	ldr	r3, [pc, #36]	; (14bb4 <handle_event.part.0+0x3c>)
   14b90:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14b94:	f240 4302 	movw	r3, #1026	; 0x402
   14b98:	8493      	strh	r3, [r2, #36]	; 0x24
   14b9a:	4b07      	ldr	r3, [pc, #28]	; (14bb8 <handle_event.part.0+0x40>)
   14b9c:	e9c2 5007 	strd	r5, r0, [r2, #28]
   14ba0:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   14ba4:	f842 3f10 	str.w	r3, [r2, #16]!
   14ba8:	4804      	ldr	r0, [pc, #16]	; (14bbc <handle_event.part.0+0x44>)
   14baa:	f00e f9a8 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   14bae:	46bd      	mov	sp, r7
   14bb0:	bdb0      	pop	{r4, r5, r7, pc}
   14bb2:	bf00      	nop
   14bb4:	000274ea 	.word	0x000274ea
   14bb8:	01000005 	.word	0x01000005
   14bbc:	00025f68 	.word	0x00025f68

00014bc0 <hci_hardware_error>:
{
   14bc0:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   14bc2:	2101      	movs	r1, #1
   14bc4:	af00      	add	r7, sp, #0
   14bc6:	300c      	adds	r0, #12
   14bc8:	f00f fcdd 	bl	24586 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   14bcc:	b088      	sub	sp, #32
   14bce:	7803      	ldrb	r3, [r0, #0]
   14bd0:	466a      	mov	r2, sp
   14bd2:	4906      	ldr	r1, [pc, #24]	; (14bec <hci_hardware_error+0x2c>)
   14bd4:	4806      	ldr	r0, [pc, #24]	; (14bf0 <hci_hardware_error+0x30>)
   14bd6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14bda:	2303      	movs	r3, #3
   14bdc:	f842 3f10 	str.w	r3, [r2, #16]!
   14be0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14be4:	f00e f98b 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   14be8:	46bd      	mov	sp, r7
   14bea:	bd80      	pop	{r7, pc}
   14bec:	0002750c 	.word	0x0002750c
   14bf0:	00025f68 	.word	0x00025f68

00014bf4 <le_data_len_change>:
{
   14bf4:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14bf6:	68c3      	ldr	r3, [r0, #12]
   14bf8:	881c      	ldrh	r4, [r3, #0]
{
   14bfa:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14bfc:	4620      	mov	r0, r4
   14bfe:	f002 faa5 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   14c02:	b980      	cbnz	r0, 14c26 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14c04:	466d      	mov	r5, sp
   14c06:	b088      	sub	sp, #32
   14c08:	466a      	mov	r2, sp
   14c0a:	4b08      	ldr	r3, [pc, #32]	; (14c2c <le_data_len_change+0x38>)
   14c0c:	4808      	ldr	r0, [pc, #32]	; (14c30 <le_data_len_change+0x3c>)
   14c0e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   14c12:	2303      	movs	r3, #3
   14c14:	f842 3f10 	str.w	r3, [r2, #16]!
   14c18:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c1c:	f00e f96f 	bl	22efe <z_log_msg_static_create.constprop.0>
   14c20:	46ad      	mov	sp, r5
}
   14c22:	46bd      	mov	sp, r7
   14c24:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   14c26:	f00e fb88 	bl	2333a <bt_conn_unref>
   14c2a:	e7fa      	b.n	14c22 <le_data_len_change+0x2e>
   14c2c:	0002752e 	.word	0x0002752e
   14c30:	00025f68 	.word	0x00025f68

00014c34 <hci_disconn_complete>:
{
   14c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   14c38:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   14c3a:	782e      	ldrb	r6, [r5, #0]
{
   14c3c:	af00      	add	r7, sp, #0
	if (evt->status) {
   14c3e:	b9ae      	cbnz	r6, 14c6c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14c40:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   14c44:	4640      	mov	r0, r8
   14c46:	f002 fa81 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   14c4a:	4604      	mov	r4, r0
   14c4c:	b988      	cbnz	r0, 14c72 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   14c4e:	466c      	mov	r4, sp
   14c50:	b088      	sub	sp, #32
   14c52:	466a      	mov	r2, sp
   14c54:	4b0b      	ldr	r3, [pc, #44]	; (14c84 <hci_disconn_complete+0x50>)
   14c56:	480c      	ldr	r0, [pc, #48]	; (14c88 <hci_disconn_complete+0x54>)
   14c58:	e9c2 3805 	strd	r3, r8, [r2, #20]
   14c5c:	2303      	movs	r3, #3
   14c5e:	f842 3f10 	str.w	r3, [r2, #16]!
   14c62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14c66:	f00e f94a 	bl	22efe <z_log_msg_static_create.constprop.0>
   14c6a:	46a5      	mov	sp, r4
}
   14c6c:	46bd      	mov	sp, r7
   14c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   14c72:	78eb      	ldrb	r3, [r5, #3]
   14c74:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14c76:	4631      	mov	r1, r6
   14c78:	f002 fa70 	bl	1715c <bt_conn_set_state>
		bt_conn_unref(conn);
   14c7c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   14c7e:	f00e fb5c 	bl	2333a <bt_conn_unref>
   14c82:	e7f3      	b.n	14c6c <hci_disconn_complete+0x38>
   14c84:	00027552 	.word	0x00027552
   14c88:	00025f68 	.word	0x00025f68

00014c8c <handle_event>:
{
   14c8c:	b5b0      	push	{r4, r5, r7, lr}
   14c8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   14c92:	af00      	add	r7, sp, #0
   14c94:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   14c96:	4293      	cmp	r3, r2
   14c98:	d103      	bne.n	14ca2 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   14c9a:	4620      	mov	r0, r4
   14c9c:	f7ff ff6c 	bl	14b78 <handle_event.part.0>
}
   14ca0:	e018      	b.n	14cd4 <handle_event+0x48>
		if (handler->event != event) {
   14ca2:	4610      	mov	r0, r2
   14ca4:	f810 5b08 	ldrb.w	r5, [r0], #8
   14ca8:	42a5      	cmp	r5, r4
   14caa:	d119      	bne.n	14ce0 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   14cac:	8a0b      	ldrh	r3, [r1, #16]
   14cae:	7850      	ldrb	r0, [r2, #1]
   14cb0:	4298      	cmp	r0, r3
   14cb2:	d911      	bls.n	14cd8 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   14cb4:	466d      	mov	r5, sp
   14cb6:	b088      	sub	sp, #32
   14cb8:	466a      	mov	r2, sp
   14cba:	490a      	ldr	r1, [pc, #40]	; (14ce4 <handle_event+0x58>)
   14cbc:	61d4      	str	r4, [r2, #28]
   14cbe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14cc2:	2304      	movs	r3, #4
   14cc4:	f842 3f10 	str.w	r3, [r2, #16]!
   14cc8:	4807      	ldr	r0, [pc, #28]	; (14ce8 <handle_event+0x5c>)
   14cca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   14cce:	f00e f916 	bl	22efe <z_log_msg_static_create.constprop.0>
   14cd2:	46ad      	mov	sp, r5
}
   14cd4:	46bd      	mov	sp, r7
   14cd6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   14cd8:	6853      	ldr	r3, [r2, #4]
   14cda:	4608      	mov	r0, r1
   14cdc:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   14cde:	e7f9      	b.n	14cd4 <handle_event+0x48>
   14ce0:	4602      	mov	r2, r0
   14ce2:	e7d8      	b.n	14c96 <handle_event+0xa>
   14ce4:	00027578 	.word	0x00027578
   14ce8:	00025f68 	.word	0x00025f68

00014cec <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   14cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14cee:	4855      	ldr	r0, [pc, #340]	; (14e44 <rx_work_handler+0x158>)
{
   14cf0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   14cf2:	f00f fbe2 	bl	244ba <net_buf_slist_get>
	if (!buf) {
   14cf6:	4604      	mov	r4, r0
   14cf8:	2800      	cmp	r0, #0
   14cfa:	d06a      	beq.n	14dd2 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14cfc:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   14cfe:	2b01      	cmp	r3, #1
   14d00:	d069      	beq.n	14dd6 <rx_work_handler+0xea>
   14d02:	2b03      	cmp	r3, #3
   14d04:	f040 8099 	bne.w	14e3a <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14d08:	8a03      	ldrh	r3, [r0, #16]
   14d0a:	2b03      	cmp	r3, #3
   14d0c:	d80c      	bhi.n	14d28 <rx_work_handler+0x3c>
   14d0e:	4a4e      	ldr	r2, [pc, #312]	; (14e48 <rx_work_handler+0x15c>)
   14d10:	494e      	ldr	r1, [pc, #312]	; (14e4c <rx_work_handler+0x160>)
   14d12:	484f      	ldr	r0, [pc, #316]	; (14e50 <rx_work_handler+0x164>)
   14d14:	f240 13ed 	movw	r3, #493	; 0x1ed
   14d18:	f00d fb13 	bl	22342 <assert_print>
   14d1c:	4040      	eors	r0, r0
   14d1e:	f380 8811 	msr	BASEPRI, r0
   14d22:	f04f 0003 	mov.w	r0, #3
   14d26:	df02      	svc	2
   14d28:	2104      	movs	r1, #4
   14d2a:	f104 000c 	add.w	r0, r4, #12
   14d2e:	f00f fc2a 	bl	24586 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   14d32:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   14d34:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   14d36:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14d38:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   14d3a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   14d3e:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   14d40:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   14d42:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   14d44:	d010      	beq.n	14d68 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   14d46:	466d      	mov	r5, sp
   14d48:	b088      	sub	sp, #32
   14d4a:	466a      	mov	r2, sp
   14d4c:	4841      	ldr	r0, [pc, #260]	; (14e54 <rx_work_handler+0x168>)
   14d4e:	61d3      	str	r3, [r2, #28]
   14d50:	2304      	movs	r3, #4
   14d52:	e9c2 0105 	strd	r0, r1, [r2, #20]
   14d56:	f842 3f10 	str.w	r3, [r2, #16]!
   14d5a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14d5e:	483e      	ldr	r0, [pc, #248]	; (14e58 <rx_work_handler+0x16c>)
   14d60:	f00e f8cd 	bl	22efe <z_log_msg_static_create.constprop.0>
   14d64:	46ad      	mov	sp, r5
   14d66:	e064      	b.n	14e32 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   14d68:	f002 f9f0 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   14d6c:	4605      	mov	r5, r0
   14d6e:	b960      	cbnz	r0, 14d8a <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   14d70:	466d      	mov	r5, sp
   14d72:	b088      	sub	sp, #32
   14d74:	8b63      	ldrh	r3, [r4, #26]
   14d76:	466a      	mov	r2, sp
   14d78:	4938      	ldr	r1, [pc, #224]	; (14e5c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   14d7a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14d7e:	2303      	movs	r3, #3
   14d80:	f842 3f10 	str.w	r3, [r2, #16]!
   14d84:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14d88:	e7e9      	b.n	14d5e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   14d8a:	f002 fadd 	bl	17348 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   14d8e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   14d90:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   14d92:	4621      	mov	r1, r4
   14d94:	4628      	mov	r0, r5
   14d96:	f002 f893 	bl	16ec0 <bt_conn_recv>
	bt_conn_unref(conn);
   14d9a:	4628      	mov	r0, r5
   14d9c:	f00e facd 	bl	2333a <bt_conn_unref>
	return list->head;
   14da0:	4b2f      	ldr	r3, [pc, #188]	; (14e60 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   14da2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   14da6:	b1a3      	cbz	r3, 14dd2 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   14da8:	492e      	ldr	r1, [pc, #184]	; (14e64 <rx_work_handler+0x178>)
   14daa:	482f      	ldr	r0, [pc, #188]	; (14e68 <rx_work_handler+0x17c>)
   14dac:	f010 fb67 	bl	2547e <k_work_submit_to_queue>
#endif
		if (err < 0) {
   14db0:	2800      	cmp	r0, #0
   14db2:	da0e      	bge.n	14dd2 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   14db4:	466c      	mov	r4, sp
   14db6:	b088      	sub	sp, #32
   14db8:	466a      	mov	r2, sp
   14dba:	4b2c      	ldr	r3, [pc, #176]	; (14e6c <rx_work_handler+0x180>)
   14dbc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14dc0:	2303      	movs	r3, #3
   14dc2:	f842 3f10 	str.w	r3, [r2, #16]!
   14dc6:	4824      	ldr	r0, [pc, #144]	; (14e58 <rx_work_handler+0x16c>)
   14dc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14dcc:	f00e f897 	bl	22efe <z_log_msg_static_create.constprop.0>
   14dd0:	46a5      	mov	sp, r4
		}
	}
}
   14dd2:	46bd      	mov	sp, r7
   14dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14dd6:	8a03      	ldrh	r3, [r0, #16]
   14dd8:	2b01      	cmp	r3, #1
   14dda:	d80c      	bhi.n	14df6 <rx_work_handler+0x10a>
   14ddc:	4a1a      	ldr	r2, [pc, #104]	; (14e48 <rx_work_handler+0x15c>)
   14dde:	491b      	ldr	r1, [pc, #108]	; (14e4c <rx_work_handler+0x160>)
   14de0:	481b      	ldr	r0, [pc, #108]	; (14e50 <rx_work_handler+0x164>)
   14de2:	f640 136d 	movw	r3, #2413	; 0x96d
   14de6:	f00d faac 	bl	22342 <assert_print>
   14dea:	4040      	eors	r0, r0
   14dec:	f380 8811 	msr	BASEPRI, r0
   14df0:	f04f 0003 	mov.w	r0, #3
   14df4:	df02      	svc	2
   14df6:	2102      	movs	r1, #2
   14df8:	f104 000c 	add.w	r0, r4, #12
   14dfc:	f00f fbc3 	bl	24586 <net_buf_simple_pull_mem>
   14e00:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   14e02:	7800      	ldrb	r0, [r0, #0]
   14e04:	f00e f856 	bl	22eb4 <bt_hci_evt_get_flags>
   14e08:	0783      	lsls	r3, r0, #30
   14e0a:	d40c      	bmi.n	14e26 <rx_work_handler+0x13a>
   14e0c:	4a0e      	ldr	r2, [pc, #56]	; (14e48 <rx_work_handler+0x15c>)
   14e0e:	4918      	ldr	r1, [pc, #96]	; (14e70 <rx_work_handler+0x184>)
   14e10:	480f      	ldr	r0, [pc, #60]	; (14e50 <rx_work_handler+0x164>)
   14e12:	f640 1371 	movw	r3, #2417	; 0x971
   14e16:	f00d fa94 	bl	22342 <assert_print>
   14e1a:	4040      	eors	r0, r0
   14e1c:	f380 8811 	msr	BASEPRI, r0
   14e20:	f04f 0003 	mov.w	r0, #3
   14e24:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14e26:	4a13      	ldr	r2, [pc, #76]	; (14e74 <rx_work_handler+0x188>)
   14e28:	7828      	ldrb	r0, [r5, #0]
   14e2a:	2304      	movs	r3, #4
   14e2c:	4621      	mov	r1, r4
   14e2e:	f7ff ff2d 	bl	14c8c <handle_event>
		net_buf_unref(buf);
   14e32:	4620      	mov	r0, r4
   14e34:	f004 ff28 	bl	19c88 <net_buf_unref>
		break;
   14e38:	e7b2      	b.n	14da0 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   14e3a:	466d      	mov	r5, sp
   14e3c:	b088      	sub	sp, #32
   14e3e:	466a      	mov	r2, sp
   14e40:	490d      	ldr	r1, [pc, #52]	; (14e78 <rx_work_handler+0x18c>)
   14e42:	e79a      	b.n	14d7a <rx_work_handler+0x8e>
   14e44:	200004bc 	.word	0x200004bc
   14e48:	0002759a 	.word	0x0002759a
   14e4c:	000275ce 	.word	0x000275ce
   14e50:	000275e7 	.word	0x000275e7
   14e54:	00027604 	.word	0x00027604
   14e58:	00025f68 	.word	0x00025f68
   14e5c:	00027628 	.word	0x00027628
   14e60:	20000388 	.word	0x20000388
   14e64:	2000076c 	.word	0x2000076c
   14e68:	20002378 	.word	0x20002378
   14e6c:	000274cd 	.word	0x000274cd
   14e70:	0002764a 	.word	0x0002764a
   14e74:	00026298 	.word	0x00026298
   14e78:	00027678 	.word	0x00027678

00014e7c <hci_le_meta_event>:
{
   14e7c:	b510      	push	{r4, lr}
   14e7e:	2101      	movs	r1, #1
   14e80:	4604      	mov	r4, r0
   14e82:	300c      	adds	r0, #12
   14e84:	f00f fb7f 	bl	24586 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14e88:	4621      	mov	r1, r4
   14e8a:	4a03      	ldr	r2, [pc, #12]	; (14e98 <hci_le_meta_event+0x1c>)
   14e8c:	7800      	ldrb	r0, [r0, #0]
}
   14e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   14e92:	2307      	movs	r3, #7
   14e94:	f7ff befa 	b.w	14c8c <handle_event>
   14e98:	000262b8 	.word	0x000262b8

00014e9c <le_remote_feat_complete>:
{
   14e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   14e9e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14ea0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   14ea4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   14ea6:	4630      	mov	r0, r6
   14ea8:	f002 f950 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   14eac:	4604      	mov	r4, r0
   14eae:	b980      	cbnz	r0, 14ed2 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   14eb0:	466c      	mov	r4, sp
   14eb2:	b088      	sub	sp, #32
   14eb4:	466a      	mov	r2, sp
   14eb6:	4b0f      	ldr	r3, [pc, #60]	; (14ef4 <le_remote_feat_complete+0x58>)
   14eb8:	480f      	ldr	r0, [pc, #60]	; (14ef8 <le_remote_feat_complete+0x5c>)
   14eba:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14ebe:	2303      	movs	r3, #3
   14ec0:	f842 3f10 	str.w	r3, [r2, #16]!
   14ec4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ec8:	f00e f819 	bl	22efe <z_log_msg_static_create.constprop.0>
   14ecc:	46a5      	mov	sp, r4
}
   14ece:	46bd      	mov	sp, r7
   14ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   14ed2:	782b      	ldrb	r3, [r5, #0]
   14ed4:	b923      	cbnz	r3, 14ee0 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   14ed6:	2208      	movs	r2, #8
   14ed8:	1ce9      	adds	r1, r5, #3
   14eda:	30ad      	adds	r0, #173	; 0xad
   14edc:	f00d ff6a 	bl	22db4 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14ee0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   14ee4:	1d20      	adds	r0, r4, #4
   14ee6:	f00d fffb 	bl	22ee0 <atomic_or>
	bt_conn_unref(conn);
   14eea:	4620      	mov	r0, r4
   14eec:	f00e fa25 	bl	2333a <bt_conn_unref>
   14ef0:	e7ed      	b.n	14ece <le_remote_feat_complete+0x32>
   14ef2:	bf00      	nop
   14ef4:	0002752e 	.word	0x0002752e
   14ef8:	00025f68 	.word	0x00025f68

00014efc <hci_cmd_done>:
{
   14efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14f00:	4606      	mov	r6, r0
   14f02:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14f04:	7a90      	ldrb	r0, [r2, #10]
   14f06:	4d43      	ldr	r5, [pc, #268]	; (15014 <hci_cmd_done+0x118>)
{
   14f08:	4688      	mov	r8, r1
   14f0a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   14f0c:	f004 fdfa 	bl	19b04 <net_buf_pool_get>
   14f10:	4285      	cmp	r5, r0
   14f12:	d018      	beq.n	14f46 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   14f14:	7aa4      	ldrb	r4, [r4, #10]
   14f16:	4620      	mov	r0, r4
   14f18:	f004 fdf4 	bl	19b04 <net_buf_pool_get>
   14f1c:	46e8      	mov	r8, sp
   14f1e:	b08a      	sub	sp, #40	; 0x28
   14f20:	466a      	mov	r2, sp
   14f22:	4b3d      	ldr	r3, [pc, #244]	; (15018 <hci_cmd_done+0x11c>)
   14f24:	6255      	str	r5, [r2, #36]	; 0x24
   14f26:	e9c2 3605 	strd	r3, r6, [r2, #20]
   14f2a:	2306      	movs	r3, #6
   14f2c:	e9c2 4007 	strd	r4, r0, [r2, #28]
   14f30:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   14f34:	f842 3f10 	str.w	r3, [r2, #16]!
   14f38:	4838      	ldr	r0, [pc, #224]	; (1501c <hci_cmd_done+0x120>)
   14f3a:	f00d ffe0 	bl	22efe <z_log_msg_static_create.constprop.0>
   14f3e:	46c5      	mov	sp, r8
}
   14f40:	46bd      	mov	sp, r7
   14f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   14f46:	4620      	mov	r0, r4
   14f48:	f004 fde4 	bl	19b14 <net_buf_id>
   14f4c:	4d34      	ldr	r5, [pc, #208]	; (15020 <hci_cmd_done+0x124>)
   14f4e:	f04f 090c 	mov.w	r9, #12
   14f52:	fb09 5000 	mla	r0, r9, r0, r5
   14f56:	8843      	ldrh	r3, [r0, #2]
   14f58:	42b3      	cmp	r3, r6
   14f5a:	d016      	beq.n	14f8a <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   14f5c:	4620      	mov	r0, r4
   14f5e:	f004 fdd9 	bl	19b14 <net_buf_id>
   14f62:	fb09 5000 	mla	r0, r9, r0, r5
   14f66:	466c      	mov	r4, sp
   14f68:	b088      	sub	sp, #32
   14f6a:	8843      	ldrh	r3, [r0, #2]
   14f6c:	466a      	mov	r2, sp
   14f6e:	492d      	ldr	r1, [pc, #180]	; (15024 <hci_cmd_done+0x128>)
   14f70:	61d3      	str	r3, [r2, #28]
   14f72:	2304      	movs	r3, #4
   14f74:	e9c2 1605 	strd	r1, r6, [r2, #20]
   14f78:	4828      	ldr	r0, [pc, #160]	; (1501c <hci_cmd_done+0x120>)
   14f7a:	f842 3f10 	str.w	r3, [r2, #16]!
   14f7e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   14f82:	f00d ffbc 	bl	22efe <z_log_msg_static_create.constprop.0>
   14f86:	46a5      	mov	sp, r4
		return;
   14f88:	e7da      	b.n	14f40 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   14f8a:	4e27      	ldr	r6, [pc, #156]	; (15028 <hci_cmd_done+0x12c>)
   14f8c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   14f90:	b120      	cbz	r0, 14f9c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   14f92:	f004 fe79 	bl	19c88 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14f96:	2300      	movs	r3, #0
   14f98:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   14f9c:	4620      	mov	r0, r4
   14f9e:	f004 fdb9 	bl	19b14 <net_buf_id>
   14fa2:	260c      	movs	r6, #12
   14fa4:	fb06 5000 	mla	r0, r6, r0, r5
   14fa8:	6843      	ldr	r3, [r0, #4]
   14faa:	b1ab      	cbz	r3, 14fd8 <hci_cmd_done+0xdc>
   14fac:	f1b8 0f00 	cmp.w	r8, #0
   14fb0:	d112      	bne.n	14fd8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   14fb2:	4620      	mov	r0, r4
   14fb4:	f004 fdae 	bl	19b14 <net_buf_id>
   14fb8:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14fbc:	2101      	movs	r1, #1
   14fbe:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   14fc0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   14fc4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   14fc6:	f003 061f 	and.w	r6, r3, #31
   14fca:	40b1      	lsls	r1, r6
	if (val) {
   14fcc:	095b      	lsrs	r3, r3, #5
   14fce:	b1da      	cbz	r2, 15008 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14fd0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14fd4:	f00d ff84 	bl	22ee0 <atomic_or>
	if (cmd(buf)->sync) {
   14fd8:	4620      	mov	r0, r4
   14fda:	f004 fd9b 	bl	19b14 <net_buf_id>
   14fde:	260c      	movs	r6, #12
   14fe0:	fb06 5000 	mla	r0, r6, r0, r5
   14fe4:	6883      	ldr	r3, [r0, #8]
   14fe6:	2b00      	cmp	r3, #0
   14fe8:	d0aa      	beq.n	14f40 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   14fea:	4620      	mov	r0, r4
   14fec:	f004 fd92 	bl	19b14 <net_buf_id>
   14ff0:	4370      	muls	r0, r6
   14ff2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   14ff6:	4620      	mov	r0, r4
   14ff8:	f004 fd8c 	bl	19b14 <net_buf_id>
   14ffc:	fb06 5500 	mla	r5, r6, r0, r5
   15000:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   15002:	f008 fd5d 	bl	1dac0 <z_impl_k_sem_give>
}
   15006:	e79b      	b.n	14f40 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15008:	43c9      	mvns	r1, r1
   1500a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1500e:	f00d ff79 	bl	22f04 <atomic_and.isra.0>
   15012:	e7e1      	b.n	14fd8 <hci_cmd_done+0xdc>
   15014:	20000c70 	.word	0x20000c70
   15018:	0002768c 	.word	0x0002768c
   1501c:	00025f68 	.word	0x00025f68
   15020:	20003650 	.word	0x20003650
   15024:	000276c1 	.word	0x000276c1
   15028:	20000388 	.word	0x20000388

0001502c <hci_cmd_status>:
{
   1502c:	b538      	push	{r3, r4, r5, lr}
   1502e:	2104      	movs	r1, #4
   15030:	4604      	mov	r4, r0
   15032:	300c      	adds	r0, #12
   15034:	f00f faa7 	bl	24586 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   15038:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1503a:	7801      	ldrb	r1, [r0, #0]
   1503c:	8840      	ldrh	r0, [r0, #2]
   1503e:	4622      	mov	r2, r4
   15040:	f7ff ff5c 	bl	14efc <hci_cmd_done>
	if (ncmd) {
   15044:	b125      	cbz	r5, 15050 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   15046:	4803      	ldr	r0, [pc, #12]	; (15054 <hci_cmd_status+0x28>)
}
   15048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1504c:	f008 bd38 	b.w	1dac0 <z_impl_k_sem_give>
   15050:	bd38      	pop	{r3, r4, r5, pc}
   15052:	bf00      	nop
   15054:	200004a0 	.word	0x200004a0

00015058 <hci_cmd_complete>:
{
   15058:	b538      	push	{r3, r4, r5, lr}
   1505a:	2103      	movs	r1, #3
   1505c:	4604      	mov	r4, r0
   1505e:	300c      	adds	r0, #12
   15060:	f00f fa91 	bl	24586 <net_buf_simple_pull_mem>
	status = buf->data[0];
   15064:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   15066:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   15068:	7819      	ldrb	r1, [r3, #0]
   1506a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1506e:	4622      	mov	r2, r4
   15070:	f7ff ff44 	bl	14efc <hci_cmd_done>
	if (ncmd) {
   15074:	b125      	cbz	r5, 15080 <hci_cmd_complete+0x28>
   15076:	4803      	ldr	r0, [pc, #12]	; (15084 <hci_cmd_complete+0x2c>)
}
   15078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1507c:	f008 bd20 	b.w	1dac0 <z_impl_k_sem_give>
   15080:	bd38      	pop	{r3, r4, r5, pc}
   15082:	bf00      	nop
   15084:	200004a0 	.word	0x200004a0

00015088 <hci_num_completed_packets>:
{
   15088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1508c:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   1508e:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   15090:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   15094:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 15194 <hci_num_completed_packets+0x10c>
{
   15098:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   1509a:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   1509c:	f898 3000 	ldrb.w	r3, [r8]
   150a0:	429d      	cmp	r5, r3
   150a2:	db03      	blt.n	150ac <hci_num_completed_packets+0x24>
}
   150a4:	371c      	adds	r7, #28
   150a6:	46bd      	mov	sp, r7
   150a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   150ac:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   150b0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   150b4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   150b8:	4658      	mov	r0, fp
   150ba:	f002 f847 	bl	1714c <bt_conn_lookup_handle>
		if (!conn) {
   150be:	4604      	mov	r4, r0
   150c0:	b1d8      	cbz	r0, 150fa <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   150c2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   150c6:	2e00      	cmp	r6, #0
   150c8:	d039      	beq.n	1513e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   150ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   150ce:	f3ef 8211 	mrs	r2, BASEPRI
   150d2:	f383 8812 	msr	BASEPRI_MAX, r3
   150d6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   150da:	69e3      	ldr	r3, [r4, #28]
   150dc:	b1f3      	cbz	r3, 1511c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   150de:	3b01      	subs	r3, #1
   150e0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   150e2:	f382 8811 	msr	BASEPRI, r2
   150e6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   150ea:	4620      	mov	r0, r4
   150ec:	f001 feb2 	bl	16e54 <bt_conn_get_pkts>
   150f0:	3e01      	subs	r6, #1
   150f2:	f008 fce5 	bl	1dac0 <z_impl_k_sem_give>
   150f6:	b2b6      	uxth	r6, r6
   150f8:	e7e5      	b.n	150c6 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   150fa:	466c      	mov	r4, sp
   150fc:	b088      	sub	sp, #32
   150fe:	466a      	mov	r2, sp
   15100:	4b25      	ldr	r3, [pc, #148]	; (15198 <hci_num_completed_packets+0x110>)
   15102:	4826      	ldr	r0, [pc, #152]	; (1519c <hci_num_completed_packets+0x114>)
   15104:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   15108:	2303      	movs	r3, #3
   1510a:	f842 3f10 	str.w	r3, [r2, #16]!
   1510e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15112:	f00d fef4 	bl	22efe <z_log_msg_static_create.constprop.0>
   15116:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   15118:	3501      	adds	r5, #1
   1511a:	e7bf      	b.n	1509c <hci_num_completed_packets+0x14>
   1511c:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1511e:	b993      	cbnz	r3, 15146 <hci_num_completed_packets+0xbe>
   15120:	f382 8811 	msr	BASEPRI, r2
   15124:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   15128:	2302      	movs	r3, #2
   1512a:	481c      	ldr	r0, [pc, #112]	; (1519c <hci_num_completed_packets+0x114>)
   1512c:	f8c7 a014 	str.w	sl, [r7, #20]
   15130:	613b      	str	r3, [r7, #16]
   15132:	f107 0210 	add.w	r2, r7, #16
   15136:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1513a:	f00d fee0 	bl	22efe <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1513e:	4620      	mov	r0, r4
   15140:	f00e f8fb 	bl	2333a <bt_conn_unref>
   15144:	e7e8      	b.n	15118 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15146:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15148:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1514a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1514c:	428b      	cmp	r3, r1
	list->tail = node;
   1514e:	bf08      	it	eq
   15150:	61a0      	streq	r0, [r4, #24]
   15152:	f382 8811 	msr	BASEPRI, r2
   15156:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1515a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1515e:	f3ef 8111 	mrs	r1, BASEPRI
   15162:	f382 8812 	msr	BASEPRI_MAX, r2
   15166:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1516a:	68da      	ldr	r2, [r3, #12]
   1516c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1516e:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   15172:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   15176:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   15178:	b94a      	cbnz	r2, 1518e <hci_num_completed_packets+0x106>
	list->head = node;
   1517a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1517e:	f381 8811 	msr	BASEPRI, r1
   15182:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   15186:	4658      	mov	r0, fp
   15188:	f008 fe16 	bl	1ddb8 <k_work_submit>
   1518c:	e7ad      	b.n	150ea <hci_num_completed_packets+0x62>
	parent->next = child;
   1518e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15190:	6263      	str	r3, [r4, #36]	; 0x24
}
   15192:	e7f4      	b.n	1517e <hci_num_completed_packets+0xf6>
   15194:	00027710 	.word	0x00027710
   15198:	000276f4 	.word	0x000276f4
   1519c:	00025f68 	.word	0x00025f68

000151a0 <le_conn_update_complete>:
{
   151a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   151a2:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   151a4:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   151a6:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   151aa:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   151ac:	4630      	mov	r0, r6
   151ae:	f001 ffcd 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   151b2:	4604      	mov	r4, r0
   151b4:	b988      	cbnz	r0, 151da <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   151b6:	466c      	mov	r4, sp
   151b8:	b088      	sub	sp, #32
   151ba:	466a      	mov	r2, sp
   151bc:	4b2d      	ldr	r3, [pc, #180]	; (15274 <le_conn_update_complete+0xd4>)
   151be:	482e      	ldr	r0, [pc, #184]	; (15278 <le_conn_update_complete+0xd8>)
   151c0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   151c4:	2303      	movs	r3, #3
   151c6:	f842 3f10 	str.w	r3, [r2, #16]!
   151ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   151ce:	f00d fe96 	bl	22efe <z_log_msg_static_create.constprop.0>
   151d2:	46a5      	mov	sp, r4
}
   151d4:	370c      	adds	r7, #12
   151d6:	46bd      	mov	sp, r7
   151d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   151da:	782b      	ldrb	r3, [r5, #0]
   151dc:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   151de:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   151e2:	d117      	bne.n	15214 <le_conn_update_complete+0x74>
   151e4:	78c3      	ldrb	r3, [r0, #3]
   151e6:	2b01      	cmp	r3, #1
   151e8:	d128      	bne.n	1523c <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   151ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   151ee:	4630      	mov	r0, r6
   151f0:	f00d fe76 	bl	22ee0 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   151f4:	0542      	lsls	r2, r0, #21
   151f6:	d40d      	bmi.n	15214 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   151f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   151fc:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   151fe:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15202:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15204:	4639      	mov	r1, r7
   15206:	4620      	mov	r0, r4
   15208:	f002 fd2a 	bl	17c60 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   1520c:	4620      	mov	r0, r4
   1520e:	f00e f894 	bl	2333a <bt_conn_unref>
   15212:	e7df      	b.n	151d4 <le_conn_update_complete+0x34>
		if (!evt->status) {
   15214:	782b      	ldrb	r3, [r5, #0]
   15216:	b98b      	cbnz	r3, 1523c <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   15218:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1521c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   15220:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   15224:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15228:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1522c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15230:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15234:	4630      	mov	r0, r6
   15236:	f00d fe65 	bl	22f04 <atomic_and.isra.0>
}
   1523a:	e017      	b.n	1526c <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1523c:	f3bf 8f5b 	dmb	ish
   15240:	6863      	ldr	r3, [r4, #4]
   15242:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   15246:	05db      	lsls	r3, r3, #23
   15248:	d5f2      	bpl.n	15230 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1524a:	782b      	ldrb	r3, [r5, #0]
   1524c:	2b20      	cmp	r3, #32
   1524e:	d1ef      	bne.n	15230 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   15250:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   15254:	2b00      	cmp	r3, #0
   15256:	d0eb      	beq.n	15230 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   15258:	3b01      	subs	r3, #1
   1525a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1525e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15262:	2300      	movs	r3, #0
   15264:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15268:	f008 fe0e 	bl	1de88 <k_work_schedule>
		notify_le_param_updated(conn);
   1526c:	4620      	mov	r0, r4
   1526e:	f002 f88d 	bl	1738c <notify_le_param_updated>
   15272:	e7cb      	b.n	1520c <le_conn_update_complete+0x6c>
   15274:	0002752e 	.word	0x0002752e
   15278:	00025f68 	.word	0x00025f68

0001527c <bt_hci_cmd_state_set_init>:
{
   1527c:	b510      	push	{r4, lr}
	state->bit = bit;
   1527e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   15282:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15286:	720b      	strb	r3, [r1, #8]
{
   15288:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1528a:	f004 fc43 	bl	19b14 <net_buf_id>
   1528e:	4b03      	ldr	r3, [pc, #12]	; (1529c <bt_hci_cmd_state_set_init+0x20>)
   15290:	220c      	movs	r2, #12
   15292:	fb02 3300 	mla	r3, r2, r0, r3
   15296:	605c      	str	r4, [r3, #4]
}
   15298:	bd10      	pop	{r4, pc}
   1529a:	bf00      	nop
   1529c:	20003650 	.word	0x20003650

000152a0 <bt_hci_cmd_create>:
{
   152a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   152a4:	f04f 32ff 	mov.w	r2, #4294967295
   152a8:	f04f 33ff 	mov.w	r3, #4294967295
   152ac:	4606      	mov	r6, r0
   152ae:	4817      	ldr	r0, [pc, #92]	; (1530c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   152b0:	4d17      	ldr	r5, [pc, #92]	; (15310 <bt_hci_cmd_create+0x70>)
{
   152b2:	460f      	mov	r7, r1
   152b4:	f00f f8e0 	bl	24478 <net_buf_alloc_fixed>
   152b8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   152ba:	f100 0a0c 	add.w	sl, r0, #12
   152be:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   152c0:	f04f 0800 	mov.w	r8, #0
   152c4:	4650      	mov	r0, sl
   152c6:	f00f f8de 	bl	24486 <net_buf_simple_reserve>
   152ca:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   152ce:	4620      	mov	r0, r4
   152d0:	f004 fc20 	bl	19b14 <net_buf_id>
   152d4:	f04f 090c 	mov.w	r9, #12
   152d8:	fb09 5000 	mla	r0, r9, r0, r5
   152dc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   152de:	4620      	mov	r0, r4
   152e0:	f004 fc18 	bl	19b14 <net_buf_id>
   152e4:	fb09 5000 	mla	r0, r9, r0, r5
   152e8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   152ec:	4620      	mov	r0, r4
   152ee:	f004 fc11 	bl	19b14 <net_buf_id>
   152f2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   152f6:	2103      	movs	r1, #3
   152f8:	f8c5 8004 	str.w	r8, [r5, #4]
   152fc:	4650      	mov	r0, sl
   152fe:	f00f f91b 	bl	24538 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   15302:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   15304:	7087      	strb	r7, [r0, #2]
}
   15306:	4620      	mov	r0, r4
   15308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1530c:	20000c70 	.word	0x20000c70
   15310:	20003650 	.word	0x20003650

00015314 <bt_hci_cmd_send_sync>:
{
   15314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15318:	b087      	sub	sp, #28
   1531a:	4680      	mov	r8, r0
   1531c:	af00      	add	r7, sp, #0
   1531e:	4615      	mov	r5, r2
	if (!buf) {
   15320:	460c      	mov	r4, r1
   15322:	b921      	cbnz	r1, 1532e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   15324:	f7ff ffbc 	bl	152a0 <bt_hci_cmd_create>
		if (!buf) {
   15328:	4604      	mov	r4, r0
   1532a:	2800      	cmp	r0, #0
   1532c:	d05a      	beq.n	153e4 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1532e:	2201      	movs	r2, #1
   15330:	2100      	movs	r1, #0
   15332:	4638      	mov	r0, r7
   15334:	f00f fff4 	bl	25320 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   15338:	4620      	mov	r0, r4
   1533a:	f004 fbeb 	bl	19b14 <net_buf_id>
   1533e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 153ec <bt_hci_cmd_send_sync+0xd8>
   15342:	230c      	movs	r3, #12
   15344:	fb03 9000 	mla	r0, r3, r0, r9
   15348:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1534a:	4620      	mov	r0, r4
   1534c:	f00f f8ce 	bl	244ec <net_buf_ref>
   15350:	4601      	mov	r1, r0
   15352:	4827      	ldr	r0, [pc, #156]	; (153f0 <bt_hci_cmd_send_sync+0xdc>)
   15354:	f00f f8c8 	bl	244e8 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   15358:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1535c:	2300      	movs	r3, #0
   1535e:	4638      	mov	r0, r7
   15360:	f008 fbd4 	bl	1db0c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   15364:	4606      	mov	r6, r0
   15366:	b180      	cbz	r0, 1538a <bt_hci_cmd_send_sync+0x76>
   15368:	4a22      	ldr	r2, [pc, #136]	; (153f4 <bt_hci_cmd_send_sync+0xe0>)
   1536a:	4923      	ldr	r1, [pc, #140]	; (153f8 <bt_hci_cmd_send_sync+0xe4>)
   1536c:	4823      	ldr	r0, [pc, #140]	; (153fc <bt_hci_cmd_send_sync+0xe8>)
   1536e:	f240 1349 	movw	r3, #329	; 0x149
   15372:	f00c ffe6 	bl	22342 <assert_print>
   15376:	4822      	ldr	r0, [pc, #136]	; (15400 <bt_hci_cmd_send_sync+0xec>)
   15378:	4631      	mov	r1, r6
   1537a:	f00c ffe2 	bl	22342 <assert_print>
   1537e:	4040      	eors	r0, r0
   15380:	f380 8811 	msr	BASEPRI, r0
   15384:	f04f 0003 	mov.w	r0, #3
   15388:	df02      	svc	2
	status = cmd(buf)->status;
   1538a:	4620      	mov	r0, r4
   1538c:	f004 fbc2 	bl	19b14 <net_buf_id>
   15390:	230c      	movs	r3, #12
   15392:	4358      	muls	r0, r3
   15394:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   15398:	b1e6      	cbz	r6, 153d4 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1539a:	466d      	mov	r5, sp
   1539c:	b088      	sub	sp, #32
   1539e:	466a      	mov	r2, sp
   153a0:	4b18      	ldr	r3, [pc, #96]	; (15404 <bt_hci_cmd_send_sync+0xf0>)
   153a2:	61d6      	str	r6, [r2, #28]
   153a4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   153a8:	2304      	movs	r3, #4
   153aa:	f842 3f10 	str.w	r3, [r2, #16]!
   153ae:	4816      	ldr	r0, [pc, #88]	; (15408 <bt_hci_cmd_send_sync+0xf4>)
   153b0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   153b4:	f00d fda3 	bl	22efe <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   153b8:	4620      	mov	r0, r4
   153ba:	46ad      	mov	sp, r5
   153bc:	f004 fc64 	bl	19c88 <net_buf_unref>
			return -ECONNREFUSED;
   153c0:	2e09      	cmp	r6, #9
   153c2:	bf14      	ite	ne
   153c4:	f06f 0004 	mvnne.w	r0, #4
   153c8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   153cc:	371c      	adds	r7, #28
   153ce:	46bd      	mov	sp, r7
   153d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   153d4:	b115      	cbz	r5, 153dc <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   153d6:	602c      	str	r4, [r5, #0]
	return 0;
   153d8:	2000      	movs	r0, #0
   153da:	e7f7      	b.n	153cc <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   153dc:	4620      	mov	r0, r4
   153de:	f004 fc53 	bl	19c88 <net_buf_unref>
   153e2:	e7f9      	b.n	153d8 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   153e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   153e8:	e7f0      	b.n	153cc <bt_hci_cmd_send_sync+0xb8>
   153ea:	bf00      	nop
   153ec:	20003650 	.word	0x20003650
   153f0:	200004c4 	.word	0x200004c4
   153f4:	0002759a 	.word	0x0002759a
   153f8:	00027727 	.word	0x00027727
   153fc:	000275e7 	.word	0x000275e7
   15400:	00027730 	.word	0x00027730
   15404:	00027750 	.word	0x00027750
   15408:	00025f68 	.word	0x00025f68

0001540c <hci_le_read_max_data_len>:
{
   1540c:	b570      	push	{r4, r5, r6, lr}
   1540e:	b088      	sub	sp, #32
   15410:	4606      	mov	r6, r0
   15412:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   15414:	aa01      	add	r2, sp, #4
   15416:	2100      	movs	r1, #0
   15418:	f242 002f 	movw	r0, #8239	; 0x202f
   1541c:	f7ff ff7a 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15420:	4604      	mov	r4, r0
   15422:	b160      	cbz	r0, 1543e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   15424:	4b0b      	ldr	r3, [pc, #44]	; (15454 <hci_le_read_max_data_len+0x48>)
   15426:	9307      	str	r3, [sp, #28]
   15428:	480b      	ldr	r0, [pc, #44]	; (15458 <hci_le_read_max_data_len+0x4c>)
   1542a:	2302      	movs	r3, #2
   1542c:	aa06      	add	r2, sp, #24
   1542e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15432:	9306      	str	r3, [sp, #24]
   15434:	f00d fd63 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   15438:	4620      	mov	r0, r4
   1543a:	b008      	add	sp, #32
   1543c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   1543e:	9801      	ldr	r0, [sp, #4]
   15440:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   15442:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15446:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   15448:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1544c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1544e:	f004 fc1b 	bl	19c88 <net_buf_unref>
	return 0;
   15452:	e7f1      	b.n	15438 <hci_le_read_max_data_len+0x2c>
   15454:	0002776c 	.word	0x0002776c
   15458:	00025f68 	.word	0x00025f68

0001545c <bt_hci_le_rand>:
{
   1545c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1545e:	4b14      	ldr	r3, [pc, #80]	; (154b0 <bt_hci_le_rand+0x54>)
   15460:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   15464:	2b00      	cmp	r3, #0
{
   15466:	4605      	mov	r5, r0
   15468:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1546a:	da1d      	bge.n	154a8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   1546c:	b914      	cbnz	r4, 15474 <bt_hci_le_rand+0x18>
	return 0;
   1546e:	4620      	mov	r0, r4
}
   15470:	b003      	add	sp, #12
   15472:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   15474:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15476:	aa01      	add	r2, sp, #4
   15478:	f04f 0100 	mov.w	r1, #0
   1547c:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   15480:	4626      	mov	r6, r4
   15482:	bf28      	it	cs
   15484:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   15486:	f7ff ff45 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   1548a:	2800      	cmp	r0, #0
   1548c:	d1f0      	bne.n	15470 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   1548e:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   15490:	68f9      	ldr	r1, [r7, #12]
   15492:	4632      	mov	r2, r6
   15494:	3101      	adds	r1, #1
   15496:	4628      	mov	r0, r5
   15498:	f00d fc8c 	bl	22db4 <memcpy>
		net_buf_unref(rsp);
   1549c:	4638      	mov	r0, r7
   1549e:	f004 fbf3 	bl	19c88 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   154a2:	4435      	add	r5, r6
		len -= count;
   154a4:	1ba4      	subs	r4, r4, r6
   154a6:	e7e1      	b.n	1546c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   154a8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   154ac:	e7e0      	b.n	15470 <bt_hci_le_rand+0x14>
   154ae:	bf00      	nop
   154b0:	20000388 	.word	0x20000388

000154b4 <bt_get_phy>:
	switch (hci_phy) {
   154b4:	3801      	subs	r0, #1
   154b6:	b2c0      	uxtb	r0, r0
   154b8:	2802      	cmp	r0, #2
   154ba:	bf9a      	itte	ls
   154bc:	4b01      	ldrls	r3, [pc, #4]	; (154c4 <bt_get_phy+0x10>)
   154be:	5c18      	ldrbls	r0, [r3, r0]
{
   154c0:	2000      	movhi	r0, #0
}
   154c2:	4770      	bx	lr
   154c4:	000279a8 	.word	0x000279a8

000154c8 <le_phy_update_complete>:
{
   154c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   154ca:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   154cc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   154d0:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   154d2:	4630      	mov	r0, r6
   154d4:	f001 fe3a 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   154d8:	4604      	mov	r4, r0
   154da:	b980      	cbnz	r0, 154fe <le_phy_update_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   154dc:	466c      	mov	r4, sp
   154de:	b088      	sub	sp, #32
   154e0:	466a      	mov	r2, sp
   154e2:	4b0f      	ldr	r3, [pc, #60]	; (15520 <le_phy_update_complete+0x58>)
   154e4:	480f      	ldr	r0, [pc, #60]	; (15524 <le_phy_update_complete+0x5c>)
   154e6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   154ea:	2303      	movs	r3, #3
   154ec:	f842 3f10 	str.w	r3, [r2, #16]!
   154f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154f4:	f00d fd03 	bl	22efe <z_log_msg_static_create.constprop.0>
   154f8:	46a5      	mov	sp, r4
}
   154fa:	46bd      	mov	sp, r7
   154fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   154fe:	78e8      	ldrb	r0, [r5, #3]
   15500:	f7ff ffd8 	bl	154b4 <bt_get_phy>
   15504:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   15508:	7928      	ldrb	r0, [r5, #4]
   1550a:	f7ff ffd3 	bl	154b4 <bt_get_phy>
   1550e:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
	notify_le_phy_updated(conn);
   15512:	4620      	mov	r0, r4
   15514:	f001 ff86 	bl	17424 <notify_le_phy_updated>
	bt_conn_unref(conn);
   15518:	4620      	mov	r0, r4
   1551a:	f00d ff0e 	bl	2333a <bt_conn_unref>
   1551e:	e7ec      	b.n	154fa <le_phy_update_complete+0x32>
   15520:	0002752e 	.word	0x0002752e
   15524:	00025f68 	.word	0x00025f68

00015528 <bt_hci_le_enh_conn_complete>:
{
   15528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1552c:	b08b      	sub	sp, #44	; 0x2c
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1552e:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   15532:	4aa2      	ldr	r2, [pc, #648]	; (157bc <bt_hci_le_enh_conn_complete+0x294>)
	handle |= ~BT_ACL_HANDLE_MASK;
   15534:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
   15538:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1553a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   1553e:	b29b      	uxth	r3, r3
   15540:	4299      	cmp	r1, r3
   15542:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   15546:	bf08      	it	eq
   15548:	8016      	strheq	r6, [r2, #0]
	if (evt->status) {
   1554a:	7804      	ldrb	r4, [r0, #0]
{
   1554c:	af00      	add	r7, sp, #0
   1554e:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15550:	fa1f f889 	uxth.w	r8, r9
			return true;
   15554:	bf08      	it	eq
   15556:	2601      	moveq	r6, #1
	if (evt->status) {
   15558:	b3a4      	cbz	r4, 155c4 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1555a:	2c3c      	cmp	r4, #60	; 0x3c
   1555c:	d122      	bne.n	155a4 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1555e:	f001 f941 	bl	167e4 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15562:	f06f 0180 	mvn.w	r1, #128	; 0x80
   15566:	3010      	adds	r0, #16
   15568:	f00d fccc 	bl	22f04 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1556c:	2000      	movs	r0, #0
   1556e:	f7ff fa9b 	bl	14aa8 <find_pending_connect.part.0>
		if (!conn) {
   15572:	4605      	mov	r5, r0
   15574:	b970      	cbnz	r0, 15594 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   15576:	4b92      	ldr	r3, [pc, #584]	; (157c0 <bt_hci_le_enh_conn_complete+0x298>)
   15578:	627b      	str	r3, [r7, #36]	; 0x24
   1557a:	2302      	movs	r3, #2
   1557c:	4891      	ldr	r0, [pc, #580]	; (157c4 <bt_hci_le_enh_conn_complete+0x29c>)
   1557e:	623b      	str	r3, [r7, #32]
   15580:	f107 0220 	add.w	r2, r7, #32
   15584:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15588:	f00d fcb9 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   1558c:	372c      	adds	r7, #44	; 0x2c
   1558e:	46bd      	mov	sp, r7
   15590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   15594:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15596:	2100      	movs	r1, #0
   15598:	f001 fde0 	bl	1715c <bt_conn_set_state>
		bt_conn_unref(conn);
   1559c:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   1559e:	f00d fecc 	bl	2333a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   155a2:	e7f3      	b.n	1558c <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   155a4:	466d      	mov	r5, sp
   155a6:	b088      	sub	sp, #32
   155a8:	466a      	mov	r2, sp
   155aa:	4b87      	ldr	r3, [pc, #540]	; (157c8 <bt_hci_le_enh_conn_complete+0x2a0>)
   155ac:	4885      	ldr	r0, [pc, #532]	; (157c4 <bt_hci_le_enh_conn_complete+0x29c>)
   155ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   155b2:	2303      	movs	r3, #3
   155b4:	f842 3f10 	str.w	r3, [r2, #16]!
   155b8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   155bc:	f00d fc9f 	bl	22efe <z_log_msg_static_create.constprop.0>
   155c0:	46ad      	mov	sp, r5
		return;
   155c2:	e7e3      	b.n	1558c <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   155c4:	7903      	ldrb	r3, [r0, #4]
   155c6:	3b02      	subs	r3, #2
   155c8:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   155ca:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   155ce:	d82d      	bhi.n	1562c <bt_hci_le_enh_conn_complete+0x104>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   155d0:	4651      	mov	r1, sl
   155d2:	f107 0010 	add.w	r0, r7, #16
   155d6:	f00d fc80 	bl	22eda <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   155da:	7c3b      	ldrb	r3, [r7, #16]
   155dc:	3b02      	subs	r3, #2
   155de:	743b      	strb	r3, [r7, #16]
	memcpy(dst, src, sizeof(*dst));
   155e0:	2206      	movs	r2, #6
   155e2:	f105 0111 	add.w	r1, r5, #17
   155e6:	f107 0009 	add.w	r0, r7, #9
   155ea:	f00d fbe3 	bl	22db4 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   155ee:	2301      	movs	r3, #1
   155f0:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   155f2:	78eb      	ldrb	r3, [r5, #3]
   155f4:	2b01      	cmp	r3, #1
   155f6:	d02e      	beq.n	15656 <bt_hci_le_enh_conn_complete+0x12e>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   155f8:	4650      	mov	r0, sl
   155fa:	f7ff f94b 	bl	14894 <bt_addr_le_str>
   155fe:	466c      	mov	r4, sp
   15600:	b088      	sub	sp, #32
   15602:	466a      	mov	r2, sp
   15604:	4b71      	ldr	r3, [pc, #452]	; (157cc <bt_hci_le_enh_conn_complete+0x2a4>)
   15606:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1560a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1560e:	8393      	strh	r3, [r2, #28]
   15610:	4b6f      	ldr	r3, [pc, #444]	; (157d0 <bt_hci_le_enh_conn_complete+0x2a8>)
   15612:	f842 3f10 	str.w	r3, [r2, #16]!
   15616:	486b      	ldr	r0, [pc, #428]	; (157c4 <bt_hci_le_enh_conn_complete+0x29c>)
   15618:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1561c:	f00d fc6f 	bl	22efe <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   15620:	211f      	movs	r1, #31
   15622:	46a5      	mov	sp, r4
   15624:	4640      	mov	r0, r8
   15626:	f00d fc79 	bl	22f1c <bt_hci_disconnect>
		return;
   1562a:	e7af      	b.n	1558c <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1562c:	78c3      	ldrb	r3, [r0, #3]
   1562e:	2b01      	cmp	r3, #1
   15630:	bf04      	itt	eq
   15632:	4b68      	ldreq	r3, [pc, #416]	; (157d4 <bt_hci_le_enh_conn_complete+0x2ac>)
   15634:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   15638:	4651      	mov	r1, sl
   1563a:	4620      	mov	r0, r4
   1563c:	f00d fd1d 	bl	2307a <bt_lookup_id_addr>
   15640:	4601      	mov	r1, r0
   15642:	f107 0010 	add.w	r0, r7, #16
   15646:	f00d fc48 	bl	22eda <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1564a:	4651      	mov	r1, sl
   1564c:	f107 0008 	add.w	r0, r7, #8
   15650:	f00d fc43 	bl	22eda <bt_addr_le_copy>
   15654:	e7cd      	b.n	155f2 <bt_hci_le_enh_conn_complete+0xca>
   15656:	f107 0010 	add.w	r0, r7, #16
   1565a:	f7ff fa25 	bl	14aa8 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1565e:	78eb      	ldrb	r3, [r5, #3]
   15660:	2b01      	cmp	r3, #1
   15662:	4604      	mov	r4, r0
   15664:	d10a      	bne.n	1567c <bt_hci_le_enh_conn_complete+0x154>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15666:	f001 f8bd 	bl	167e4 <bt_le_adv_lookup_legacy>
   1566a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1566e:	4683      	mov	fp, r0
   15670:	3010      	adds	r0, #16
   15672:	f00d fc47 	bl	22f04 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   15676:	4658      	mov	r0, fp
   15678:	f00d fe0e 	bl	23298 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   1567c:	2c00      	cmp	r4, #0
   1567e:	d0bb      	beq.n	155f8 <bt_hci_le_enh_conn_complete+0xd0>
	conn->handle = handle;
   15680:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   15682:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
   15686:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1568a:	f00d fc26 	bl	22eda <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1568e:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   15692:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   15696:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   1569a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1569e:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   156a2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   156a6:	78eb      	ldrb	r3, [r5, #3]
   156a8:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   156aa:	2200      	movs	r2, #0
   156ac:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   156ae:	2b01      	cmp	r3, #1
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   156b0:	f240 1201 	movw	r2, #257	; 0x101
   156b4:	f8a4 20bc 	strh.w	r2, [r4, #188]	; 0xbc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   156b8:	d116      	bne.n	156e8 <bt_hci_le_enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   156ba:	f107 0108 	add.w	r1, r7, #8
   156be:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   156c2:	f00d fc0a 	bl	22eda <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   156c6:	f001 f88d 	bl	167e4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   156ca:	7a21      	ldrb	r1, [r4, #8]
   156cc:	4d41      	ldr	r5, [pc, #260]	; (157d4 <bt_hci_le_enh_conn_complete+0x2ac>)
   156ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   156d2:	f104 0096 	add.w	r0, r4, #150	; 0x96
   156d6:	4429      	add	r1, r5
   156d8:	f00d fbff 	bl	22eda <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   156dc:	f8d5 30dc 	ldr.w	r3, [r5, #220]	; 0xdc
   156e0:	0658      	lsls	r0, r3, #25
   156e2:	d501      	bpl.n	156e8 <bt_hci_le_enh_conn_complete+0x1c0>
			bt_le_adv_resume();
   156e4:	f001 fa48 	bl	16b78 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   156e8:	2107      	movs	r1, #7
   156ea:	4620      	mov	r0, r4
   156ec:	f001 fd36 	bl	1715c <bt_conn_set_state>
	if (is_disconnected) {
   156f0:	b11e      	cbz	r6, 156fa <bt_hci_le_enh_conn_complete+0x1d2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   156f2:	2101      	movs	r1, #1
   156f4:	4620      	mov	r0, r4
   156f6:	f001 fd31 	bl	1715c <bt_conn_set_state>
	bt_conn_connected(conn);
   156fa:	4620      	mov	r0, r4
   156fc:	f00d fe5b 	bl	233b6 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   15700:	7aa3      	ldrb	r3, [r4, #10]
   15702:	2b07      	cmp	r3, #7
   15704:	d155      	bne.n	157b2 <bt_hci_le_enh_conn_complete+0x28a>
   15706:	f3bf 8f5b 	dmb	ish
   1570a:	6863      	ldr	r3, [r4, #4]
   1570c:	4e31      	ldr	r6, [pc, #196]	; (157d4 <bt_hci_le_enh_conn_complete+0x2ac>)
   1570e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   15712:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15716:	d129      	bne.n	1576c <bt_hci_le_enh_conn_complete+0x244>
   15718:	78e3      	ldrb	r3, [r4, #3]
   1571a:	b11b      	cbz	r3, 15724 <bt_hci_le_enh_conn_complete+0x1fc>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1571c:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15720:	0719      	lsls	r1, r3, #28
   15722:	d523      	bpl.n	1576c <bt_hci_le_enh_conn_complete+0x244>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   15724:	2102      	movs	r1, #2
   15726:	f242 0016 	movw	r0, #8214	; 0x2016
   1572a:	f7ff fdb9 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   1572e:	4605      	mov	r5, r0
   15730:	2800      	cmp	r0, #0
   15732:	d040      	beq.n	157b6 <bt_hci_le_enh_conn_complete+0x28e>
   15734:	2102      	movs	r1, #2
   15736:	300c      	adds	r0, #12
   15738:	f00e fefe 	bl	24538 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1573c:	8823      	ldrh	r3, [r4, #0]
   1573e:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   15740:	2200      	movs	r2, #0
   15742:	4629      	mov	r1, r5
   15744:	f242 0016 	movw	r0, #8214	; 0x2016
   15748:	f7ff fde4 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   1574c:	b170      	cbz	r0, 1576c <bt_hci_le_enh_conn_complete+0x244>
			LOG_ERR("Failed read remote features (%d)", err);
   1574e:	466d      	mov	r5, sp
   15750:	b088      	sub	sp, #32
   15752:	466a      	mov	r2, sp
   15754:	4b20      	ldr	r3, [pc, #128]	; (157d8 <bt_hci_le_enh_conn_complete+0x2b0>)
   15756:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1575a:	2303      	movs	r3, #3
   1575c:	f842 3f10 	str.w	r3, [r2, #16]!
   15760:	4818      	ldr	r0, [pc, #96]	; (157c4 <bt_hci_le_enh_conn_complete+0x29c>)
   15762:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15766:	f00d fbca 	bl	22efe <z_log_msg_static_create.constprop.0>
   1576a:	46ad      	mov	sp, r5
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   1576c:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   15770:	069a      	lsls	r2, r3, #26
   15772:	d51e      	bpl.n	157b2 <bt_hci_le_enh_conn_complete+0x28a>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   15774:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   15778:	689b      	ldr	r3, [r3, #8]
   1577a:	079b      	lsls	r3, r3, #30
   1577c:	d519      	bpl.n	157b2 <bt_hci_le_enh_conn_complete+0x28a>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1577e:	1db9      	adds	r1, r7, #6
   15780:	1d38      	adds	r0, r7, #4
   15782:	f7ff fe43 	bl	1540c <hci_le_read_max_data_len>
			if (!err) {
   15786:	b9a0      	cbnz	r0, 157b2 <bt_hci_le_enh_conn_complete+0x28a>
				err = bt_le_set_data_len(conn,
   15788:	88fa      	ldrh	r2, [r7, #6]
   1578a:	88b9      	ldrh	r1, [r7, #4]
   1578c:	4620      	mov	r0, r4
   1578e:	f00d fbe0 	bl	22f52 <bt_le_set_data_len>
				if (err) {
   15792:	b170      	cbz	r0, 157b2 <bt_hci_le_enh_conn_complete+0x28a>
					LOG_ERR("Failed to set data len (%d)", err);
   15794:	466d      	mov	r5, sp
   15796:	b088      	sub	sp, #32
   15798:	466a      	mov	r2, sp
   1579a:	4b10      	ldr	r3, [pc, #64]	; (157dc <bt_hci_le_enh_conn_complete+0x2b4>)
   1579c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   157a0:	2303      	movs	r3, #3
   157a2:	f842 3f10 	str.w	r3, [r2, #16]!
   157a6:	4807      	ldr	r0, [pc, #28]	; (157c4 <bt_hci_le_enh_conn_complete+0x29c>)
   157a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   157ac:	f00d fba7 	bl	22efe <z_log_msg_static_create.constprop.0>
   157b0:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   157b2:	4620      	mov	r0, r4
   157b4:	e6f3      	b.n	1559e <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   157b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   157ba:	e7c8      	b.n	1574e <bt_hci_le_enh_conn_complete+0x226>
   157bc:	20004544 	.word	0x20004544
   157c0:	0002778c 	.word	0x0002778c
   157c4:	00025f68 	.word	0x00025f68
   157c8:	000277ad 	.word	0x000277ad
   157cc:	000277c6 	.word	0x000277c6
   157d0:	01000003 	.word	0x01000003
   157d4:	20000388 	.word	0x20000388
   157d8:	000277e2 	.word	0x000277e2
   157dc:	00027803 	.word	0x00027803

000157e0 <le_legacy_conn_complete>:
{
   157e0:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   157e2:	68c1      	ldr	r1, [r0, #12]
   157e4:	4c17      	ldr	r4, [pc, #92]	; (15844 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   157e6:	780b      	ldrb	r3, [r1, #0]
{
   157e8:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   157ea:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   157ec:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   157f0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   157f4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   157f8:	78cb      	ldrb	r3, [r1, #3]
   157fa:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   157fe:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   15802:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   15806:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1580a:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1580e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   15812:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   15816:	7c4b      	ldrb	r3, [r1, #17]
   15818:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1581c:	3104      	adds	r1, #4
   1581e:	f00d fb5c 	bl	22eda <bt_addr_le_copy>
   15822:	4621      	mov	r1, r4
   15824:	2206      	movs	r2, #6
   15826:	f10d 000b 	add.w	r0, sp, #11
   1582a:	f00d fac3 	bl	22db4 <memcpy>
   1582e:	2206      	movs	r2, #6
   15830:	4621      	mov	r1, r4
   15832:	f10d 0011 	add.w	r0, sp, #17
   15836:	f00d fabd 	bl	22db4 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1583a:	4668      	mov	r0, sp
   1583c:	f7ff fe74 	bl	15528 <bt_hci_le_enh_conn_complete>
}
   15840:	b008      	add	sp, #32
   15842:	bd10      	pop	{r4, pc}
   15844:	00027415 	.word	0x00027415

00015848 <bt_send>:
	return bt_dev.drv->send(buf);
   15848:	4b02      	ldr	r3, [pc, #8]	; (15854 <bt_send+0xc>)
   1584a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   1584e:	695b      	ldr	r3, [r3, #20]
   15850:	4718      	bx	r3
   15852:	bf00      	nop
   15854:	20000388 	.word	0x20000388

00015858 <bt_hci_cmd_send>:
{
   15858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1585a:	4605      	mov	r5, r0
   1585c:	af00      	add	r7, sp, #0
	if (!buf) {
   1585e:	460c      	mov	r4, r1
   15860:	b919      	cbnz	r1, 1586a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   15862:	f7ff fd1d 	bl	152a0 <bt_hci_cmd_create>
		if (!buf) {
   15866:	4604      	mov	r4, r0
   15868:	b318      	cbz	r0, 158b2 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1586a:	f640 4335 	movw	r3, #3125	; 0xc35
   1586e:	429d      	cmp	r5, r3
   15870:	d119      	bne.n	158a6 <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   15872:	4620      	mov	r0, r4
   15874:	f7ff ffe8 	bl	15848 <bt_send>
		if (err) {
   15878:	4605      	mov	r5, r0
   1587a:	b188      	cbz	r0, 158a0 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1587c:	466e      	mov	r6, sp
   1587e:	b088      	sub	sp, #32
   15880:	466a      	mov	r2, sp
   15882:	4b0d      	ldr	r3, [pc, #52]	; (158b8 <bt_hci_cmd_send+0x60>)
   15884:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15888:	2303      	movs	r3, #3
   1588a:	480c      	ldr	r0, [pc, #48]	; (158bc <bt_hci_cmd_send+0x64>)
   1588c:	f842 3f10 	str.w	r3, [r2, #16]!
   15890:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15894:	f00d fb33 	bl	22efe <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   15898:	4620      	mov	r0, r4
   1589a:	46b5      	mov	sp, r6
   1589c:	f004 f9f4 	bl	19c88 <net_buf_unref>
}
   158a0:	4628      	mov	r0, r5
   158a2:	46bd      	mov	sp, r7
   158a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   158a6:	4806      	ldr	r0, [pc, #24]	; (158c0 <bt_hci_cmd_send+0x68>)
   158a8:	4621      	mov	r1, r4
   158aa:	f00e fe1d 	bl	244e8 <net_buf_put>
	return 0;
   158ae:	2500      	movs	r5, #0
   158b0:	e7f6      	b.n	158a0 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   158b2:	f06f 0568 	mvn.w	r5, #104	; 0x68
   158b6:	e7f3      	b.n	158a0 <bt_hci_cmd_send+0x48>
   158b8:	0002781f 	.word	0x0002781f
   158bc:	00025f68 	.word	0x00025f68
   158c0:	200004c4 	.word	0x200004c4

000158c4 <le_conn_param_req>:
{
   158c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158c8:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   158ca:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   158cc:	78d9      	ldrb	r1, [r3, #3]
   158ce:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   158d0:	f8b3 8000 	ldrh.w	r8, [r3]
{
   158d4:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   158d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158da:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   158dc:	7959      	ldrb	r1, [r3, #5]
   158de:	791a      	ldrb	r2, [r3, #4]
   158e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158e4:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   158e6:	799a      	ldrb	r2, [r3, #6]
   158e8:	79d9      	ldrb	r1, [r3, #7]
   158ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   158ee:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158f0:	7a1a      	ldrb	r2, [r3, #8]
   158f2:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   158f4:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158f8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   158fc:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   158fe:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   15900:	f001 fc24 	bl	1714c <bt_conn_lookup_handle>
	if (!conn) {
   15904:	4606      	mov	r6, r0
   15906:	b9b0      	cbnz	r0, 15936 <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15908:	466d      	mov	r5, sp
   1590a:	b088      	sub	sp, #32
   1590c:	466a      	mov	r2, sp
   1590e:	4b20      	ldr	r3, [pc, #128]	; (15990 <le_conn_param_req+0xcc>)
   15910:	4820      	ldr	r0, [pc, #128]	; (15994 <le_conn_param_req+0xd0>)
   15912:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15916:	2303      	movs	r3, #3
   15918:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1591c:	f842 3f10 	str.w	r3, [r2, #16]!
   15920:	f00d faed 	bl	22efe <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   15924:	2102      	movs	r1, #2
   15926:	46ad      	mov	sp, r5
   15928:	4620      	mov	r0, r4
   1592a:	f00d fb7c 	bl	23026 <le_conn_param_neg_reply>
}
   1592e:	3708      	adds	r7, #8
   15930:	46bd      	mov	sp, r7
   15932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   15936:	4639      	mov	r1, r7
   15938:	f001 fd96 	bl	17468 <le_param_req>
   1593c:	b938      	cbnz	r0, 1594e <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1593e:	211e      	movs	r1, #30
   15940:	4620      	mov	r0, r4
   15942:	f00d fb70 	bl	23026 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   15946:	4630      	mov	r0, r6
   15948:	f00d fcf7 	bl	2333a <bt_conn_unref>
   1594c:	e7ef      	b.n	1592e <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1594e:	210e      	movs	r1, #14
   15950:	f242 0020 	movw	r0, #8224	; 0x2020
   15954:	f7ff fca4 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   15958:	4605      	mov	r5, r0
   1595a:	2800      	cmp	r0, #0
   1595c:	d0f3      	beq.n	15946 <le_conn_param_req+0x82>
   1595e:	210e      	movs	r1, #14
   15960:	300c      	adds	r0, #12
   15962:	f00e fde9 	bl	24538 <net_buf_simple_add>
   15966:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   15968:	220e      	movs	r2, #14
   1596a:	2100      	movs	r1, #0
   1596c:	f00d fa2d 	bl	22dca <memset>
	cp->handle = sys_cpu_to_le16(handle);
   15970:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   15974:	883b      	ldrh	r3, [r7, #0]
   15976:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   15978:	887b      	ldrh	r3, [r7, #2]
   1597a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1597c:	88bb      	ldrh	r3, [r7, #4]
   1597e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   15980:	88fb      	ldrh	r3, [r7, #6]
   15982:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   15984:	4629      	mov	r1, r5
   15986:	f242 0020 	movw	r0, #8224	; 0x2020
   1598a:	f7ff ff65 	bl	15858 <bt_hci_cmd_send>
   1598e:	e7da      	b.n	15946 <le_conn_param_req+0x82>
   15990:	0002752e 	.word	0x0002752e
   15994:	00025f68 	.word	0x00025f68

00015998 <hci_tx_thread>:
{
   15998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1599c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 15af4 <hci_tx_thread+0x15c>
		BT_ASSERT(err == 0);
   159a0:	f8df 9154 	ldr.w	r9, [pc, #340]	; 15af8 <hci_tx_thread+0x160>
{
   159a4:	b087      	sub	sp, #28
   159a6:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   159a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   159ac:	4853      	ldr	r0, [pc, #332]	; (15afc <hci_tx_thread+0x164>)
		events[0].state = K_POLL_STATE_NOT_READY;
   159ae:	f36f 3394 	bfc	r3, #14, #7
   159b2:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   159b6:	f001 fb87 	bl	170c8 <bt_conn_prepare_events>
   159ba:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   159bc:	484d      	ldr	r0, [pc, #308]	; (15af4 <hci_tx_thread+0x15c>)
   159be:	f04f 32ff 	mov.w	r2, #4294967295
   159c2:	f04f 33ff 	mov.w	r3, #4294967295
   159c6:	4629      	mov	r1, r5
   159c8:	f009 f802 	bl	1e9d0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   159cc:	b160      	cbz	r0, 159e8 <hci_tx_thread+0x50>
   159ce:	494c      	ldr	r1, [pc, #304]	; (15b00 <hci_tx_thread+0x168>)
   159d0:	484c      	ldr	r0, [pc, #304]	; (15b04 <hci_tx_thread+0x16c>)
   159d2:	f640 13e6 	movw	r3, #2534	; 0x9e6
   159d6:	464a      	mov	r2, r9
   159d8:	f00c fcb3 	bl	22342 <assert_print>
   159dc:	4040      	eors	r0, r0
   159de:	f380 8811 	msr	BASEPRI, r0
   159e2:	f04f 0003 	mov.w	r0, #3
   159e6:	df02      	svc	2
{
   159e8:	4e42      	ldr	r6, [pc, #264]	; (15af4 <hci_tx_thread+0x15c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   159ea:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   159ee:	b915      	cbnz	r5, 159f6 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   159f0:	f008 fcca 	bl	1e388 <z_impl_k_yield>
	while (1) {
   159f4:	e7d8      	b.n	159a8 <hci_tx_thread+0x10>
		switch (ev->state) {
   159f6:	68f3      	ldr	r3, [r6, #12]
   159f8:	f3c3 3386 	ubfx	r3, r3, #14, #7
   159fc:	2b01      	cmp	r3, #1
   159fe:	d960      	bls.n	15ac2 <hci_tx_thread+0x12a>
   15a00:	2b04      	cmp	r3, #4
   15a02:	d168      	bne.n	15ad6 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   15a04:	7b33      	ldrb	r3, [r6, #12]
   15a06:	2b00      	cmp	r3, #0
   15a08:	d15e      	bne.n	15ac8 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   15a0a:	483f      	ldr	r0, [pc, #252]	; (15b08 <hci_tx_thread+0x170>)
   15a0c:	2200      	movs	r2, #0
   15a0e:	2300      	movs	r3, #0
   15a10:	f00e fd37 	bl	24482 <net_buf_get>
	BT_ASSERT(buf);
   15a14:	4604      	mov	r4, r0
   15a16:	b960      	cbnz	r0, 15a32 <hci_tx_thread+0x9a>
   15a18:	493c      	ldr	r1, [pc, #240]	; (15b0c <hci_tx_thread+0x174>)
   15a1a:	483a      	ldr	r0, [pc, #232]	; (15b04 <hci_tx_thread+0x16c>)
   15a1c:	f44f 6318 	mov.w	r3, #2432	; 0x980
   15a20:	464a      	mov	r2, r9
   15a22:	f00c fc8e 	bl	22342 <assert_print>
   15a26:	4040      	eors	r0, r0
   15a28:	f380 8811 	msr	BASEPRI, r0
   15a2c:	f04f 0003 	mov.w	r0, #3
   15a30:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   15a32:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 15b10 <hci_tx_thread+0x178>
	return z_impl_k_sem_take(sem, timeout);
   15a36:	4837      	ldr	r0, [pc, #220]	; (15b14 <hci_tx_thread+0x17c>)
   15a38:	f04f 33ff 	mov.w	r3, #4294967295
   15a3c:	f04f 32ff 	mov.w	r2, #4294967295
   15a40:	f008 f864 	bl	1db0c <z_impl_k_sem_take>
   15a44:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
   15a48:	b18b      	cbz	r3, 15a6e <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   15a4a:	4b33      	ldr	r3, [pc, #204]	; (15b18 <hci_tx_thread+0x180>)
   15a4c:	617b      	str	r3, [r7, #20]
   15a4e:	2302      	movs	r3, #2
   15a50:	613b      	str	r3, [r7, #16]
   15a52:	4832      	ldr	r0, [pc, #200]	; (15b1c <hci_tx_thread+0x184>)
   15a54:	f107 0210 	add.w	r2, r7, #16
   15a58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15a5c:	f00d fa4f 	bl	22efe <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   15a60:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
   15a64:	f004 f910 	bl	19c88 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15a68:	2300      	movs	r3, #0
   15a6a:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   15a6e:	4620      	mov	r0, r4
   15a70:	f00e fd3c 	bl	244ec <net_buf_ref>
   15a74:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
   15a78:	4620      	mov	r0, r4
   15a7a:	f7ff fee5 	bl	15848 <bt_send>
	if (err) {
   15a7e:	b300      	cbz	r0, 15ac2 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   15a80:	46eb      	mov	fp, sp
   15a82:	b088      	sub	sp, #32
   15a84:	466a      	mov	r2, sp
   15a86:	4b26      	ldr	r3, [pc, #152]	; (15b20 <hci_tx_thread+0x188>)
   15a88:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15a8c:	2303      	movs	r3, #3
   15a8e:	f842 3f10 	str.w	r3, [r2, #16]!
   15a92:	4822      	ldr	r0, [pc, #136]	; (15b1c <hci_tx_thread+0x184>)
   15a94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15a98:	f00d fa31 	bl	22efe <z_log_msg_static_create.constprop.0>
   15a9c:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   15a9e:	481d      	ldr	r0, [pc, #116]	; (15b14 <hci_tx_thread+0x17c>)
   15aa0:	f008 f80e 	bl	1dac0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   15aa4:	4620      	mov	r0, r4
   15aa6:	f004 f835 	bl	19b14 <net_buf_id>
   15aaa:	4b1e      	ldr	r3, [pc, #120]	; (15b24 <hci_tx_thread+0x18c>)
   15aac:	220c      	movs	r2, #12
   15aae:	fb02 3000 	mla	r0, r2, r0, r3
   15ab2:	211f      	movs	r1, #31
   15ab4:	8840      	ldrh	r0, [r0, #2]
   15ab6:	4622      	mov	r2, r4
   15ab8:	f7ff fa20 	bl	14efc <hci_cmd_done>
		net_buf_unref(buf);
   15abc:	4620      	mov	r0, r4
   15abe:	f004 f8e3 	bl	19c88 <net_buf_unref>
	for (; count; ev++, count--) {
   15ac2:	3614      	adds	r6, #20
   15ac4:	3d01      	subs	r5, #1
   15ac6:	e792      	b.n	159ee <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   15ac8:	2b01      	cmp	r3, #1
   15aca:	d1fa      	bne.n	15ac2 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   15acc:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   15ace:	3838      	subs	r0, #56	; 0x38
   15ad0:	f001 fef6 	bl	178c0 <bt_conn_process_tx>
   15ad4:	e7f5      	b.n	15ac2 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   15ad6:	466c      	mov	r4, sp
   15ad8:	b088      	sub	sp, #32
   15ada:	466a      	mov	r2, sp
   15adc:	4912      	ldr	r1, [pc, #72]	; (15b28 <hci_tx_thread+0x190>)
   15ade:	480f      	ldr	r0, [pc, #60]	; (15b1c <hci_tx_thread+0x184>)
		switch (ev->state) {
   15ae0:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   15ae4:	f842 af10 	str.w	sl, [r2, #16]!
   15ae8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15aec:	f00d fa07 	bl	22efe <z_log_msg_static_create.constprop.0>
   15af0:	46a5      	mov	sp, r4
   15af2:	e7e6      	b.n	15ac2 <hci_tx_thread+0x12a>
   15af4:	20000730 	.word	0x20000730
   15af8:	0002759a 	.word	0x0002759a
   15afc:	20000744 	.word	0x20000744
   15b00:	00027727 	.word	0x00027727
   15b04:	000275e7 	.word	0x000275e7
   15b08:	200004c4 	.word	0x200004c4
   15b0c:	00028274 	.word	0x00028274
   15b10:	20000388 	.word	0x20000388
   15b14:	200004a0 	.word	0x200004a0
   15b18:	00027841 	.word	0x00027841
   15b1c:	00025f68 	.word	0x00025f68
   15b20:	0002781f 	.word	0x0002781f
   15b24:	20003650 	.word	0x20003650
   15b28:	0002785c 	.word	0x0002785c

00015b2c <hci_event_prio>:
{
   15b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b30:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   15b32:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   15b36:	4630      	mov	r0, r6
   15b38:	f00e fd35 	bl	245a6 <net_buf_simple_headroom>
	state->len = buf->len;
   15b3c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15b40:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   15b44:	4605      	mov	r5, r0
   15b46:	d80c      	bhi.n	15b62 <hci_event_prio+0x36>
   15b48:	4a1c      	ldr	r2, [pc, #112]	; (15bbc <hci_event_prio+0x90>)
   15b4a:	491d      	ldr	r1, [pc, #116]	; (15bc0 <hci_event_prio+0x94>)
   15b4c:	481d      	ldr	r0, [pc, #116]	; (15bc4 <hci_event_prio+0x98>)
   15b4e:	f640 537b 	movw	r3, #3451	; 0xd7b
   15b52:	f00c fbf6 	bl	22342 <assert_print>
   15b56:	4040      	eors	r0, r0
   15b58:	f380 8811 	msr	BASEPRI, r0
   15b5c:	f04f 0003 	mov.w	r0, #3
   15b60:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   15b62:	4630      	mov	r0, r6
   15b64:	2102      	movs	r1, #2
   15b66:	f00e fd0e 	bl	24586 <net_buf_simple_pull_mem>
   15b6a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15b6c:	7800      	ldrb	r0, [r0, #0]
   15b6e:	f00d f9a1 	bl	22eb4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15b72:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15b74:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   15b76:	d40c      	bmi.n	15b92 <hci_event_prio+0x66>
   15b78:	4a10      	ldr	r2, [pc, #64]	; (15bbc <hci_event_prio+0x90>)
   15b7a:	4913      	ldr	r1, [pc, #76]	; (15bc8 <hci_event_prio+0x9c>)
   15b7c:	4811      	ldr	r0, [pc, #68]	; (15bc4 <hci_event_prio+0x98>)
   15b7e:	f640 537f 	movw	r3, #3455	; 0xd7f
   15b82:	f00c fbde 	bl	22342 <assert_print>
   15b86:	4040      	eors	r0, r0
   15b88:	f380 8811 	msr	BASEPRI, r0
   15b8c:	f04f 0003 	mov.w	r0, #3
   15b90:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   15b92:	2305      	movs	r3, #5
   15b94:	4a0d      	ldr	r2, [pc, #52]	; (15bcc <hci_event_prio+0xa0>)
   15b96:	7838      	ldrb	r0, [r7, #0]
   15b98:	4621      	mov	r1, r4
   15b9a:	f7ff f877 	bl	14c8c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15b9e:	07b3      	lsls	r3, r6, #30
   15ba0:	d507      	bpl.n	15bb2 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   15ba2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15ba4:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   15ba8:	fa13 f585 	uxtah	r5, r3, r5
   15bac:	60e5      	str	r5, [r4, #12]
}
   15bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   15bb2:	4620      	mov	r0, r4
}
   15bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   15bb8:	f004 b866 	b.w	19c88 <net_buf_unref>
   15bbc:	0002759a 	.word	0x0002759a
   15bc0:	000275ce 	.word	0x000275ce
   15bc4:	000275e7 	.word	0x000275e7
   15bc8:	0002787d 	.word	0x0002787d
   15bcc:	00026270 	.word	0x00026270

00015bd0 <bt_recv>:
{
   15bd0:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15bd2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   15bd4:	2b01      	cmp	r3, #1
{
   15bd6:	af00      	add	r7, sp, #0
   15bd8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   15bda:	d006      	beq.n	15bea <bt_recv+0x1a>
   15bdc:	2b03      	cmp	r3, #3
   15bde:	d112      	bne.n	15c06 <bt_recv+0x36>
			rx_queue_put(buf);
   15be0:	f7fe ffa2 	bl	14b28 <rx_queue_put>
		return 0;
   15be4:	2000      	movs	r0, #0
}
   15be6:	46bd      	mov	sp, r7
   15be8:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15bea:	68c3      	ldr	r3, [r0, #12]
   15bec:	7818      	ldrb	r0, [r3, #0]
   15bee:	f00d f961 	bl	22eb4 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15bf2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   15bf4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   15bf6:	d502      	bpl.n	15bfe <bt_recv+0x2e>
			hci_event_prio(buf);
   15bf8:	4620      	mov	r0, r4
   15bfa:	f7ff ff97 	bl	15b2c <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   15bfe:	07ab      	lsls	r3, r5, #30
   15c00:	d5f0      	bpl.n	15be4 <bt_recv+0x14>
			rx_queue_put(buf);
   15c02:	4620      	mov	r0, r4
   15c04:	e7ec      	b.n	15be0 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15c06:	466d      	mov	r5, sp
   15c08:	b088      	sub	sp, #32
   15c0a:	466a      	mov	r2, sp
   15c0c:	4908      	ldr	r1, [pc, #32]	; (15c30 <bt_recv+0x60>)
   15c0e:	4809      	ldr	r0, [pc, #36]	; (15c34 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   15c10:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   15c14:	2303      	movs	r3, #3
   15c16:	f842 3f10 	str.w	r3, [r2, #16]!
   15c1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c1e:	f00d f96e 	bl	22efe <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   15c22:	4620      	mov	r0, r4
   15c24:	46ad      	mov	sp, r5
   15c26:	f004 f82f 	bl	19c88 <net_buf_unref>
		return -EINVAL;
   15c2a:	f06f 0015 	mvn.w	r0, #21
   15c2e:	e7da      	b.n	15be6 <bt_recv+0x16>
   15c30:	00027896 	.word	0x00027896
   15c34:	00025f68 	.word	0x00025f68

00015c38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   15c38:	4a08      	ldr	r2, [pc, #32]	; (15c5c <bt_hci_driver_register+0x24>)
{
   15c3a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   15c3c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   15c40:	b930      	cbnz	r0, 15c50 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   15c42:	68d9      	ldr	r1, [r3, #12]
   15c44:	b139      	cbz	r1, 15c56 <bt_hci_driver_register+0x1e>
   15c46:	6959      	ldr	r1, [r3, #20]
   15c48:	b129      	cbz	r1, 15c56 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   15c4a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   15c4e:	4770      	bx	lr
		return -EALREADY;
   15c50:	f06f 0077 	mvn.w	r0, #119	; 0x77
   15c54:	4770      	bx	lr
		return -EINVAL;
   15c56:	f06f 0015 	mvn.w	r0, #21
}
   15c5a:	4770      	bx	lr
   15c5c:	20000388 	.word	0x20000388

00015c60 <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15c60:	4801      	ldr	r0, [pc, #4]	; (15c68 <bt_finalize_init+0x8>)
   15c62:	2104      	movs	r1, #4
   15c64:	f00d b93c 	b.w	22ee0 <atomic_or>
   15c68:	20000454 	.word	0x20000454

00015c6c <bt_init>:
{
   15c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   15c6e:	4dba      	ldr	r5, [pc, #744]	; (15f58 <bt_init+0x2ec>)
   15c70:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   15c74:	6899      	ldr	r1, [r3, #8]
   15c76:	f011 0101 	ands.w	r1, r1, #1
{
   15c7a:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   15c7c:	d121      	bne.n	15cc2 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   15c7e:	aa02      	add	r2, sp, #8
   15c80:	f640 4003 	movw	r0, #3075	; 0xc03
   15c84:	f7ff fb46 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   15c88:	4604      	mov	r4, r0
   15c8a:	2800      	cmp	r0, #0
   15c8c:	d16c      	bne.n	15d68 <bt_init+0xfc>
		hci_reset_complete(rsp);
   15c8e:	9802      	ldr	r0, [sp, #8]
	uint8_t status = buf->data[0];
   15c90:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   15c92:	781b      	ldrb	r3, [r3, #0]
   15c94:	b99b      	cbnz	r3, 15cbe <bt_init+0x52>
   15c96:	f3bf 8f5b 	dmb	ish
   15c9a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   15c9e:	f3bf 8f5b 	dmb	ish
   15ca2:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15ca6:	f003 0309 	and.w	r3, r3, #9
   15caa:	f3bf 8f5b 	dmb	ish
   15cae:	e852 1f00 	ldrex	r1, [r2]
   15cb2:	e842 3400 	strex	r4, r3, [r2]
   15cb6:	2c00      	cmp	r4, #0
   15cb8:	d1f9      	bne.n	15cae <bt_init+0x42>
   15cba:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   15cbe:	f003 ffe3 	bl	19c88 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   15cc2:	aa02      	add	r2, sp, #8
   15cc4:	2100      	movs	r1, #0
   15cc6:	f241 0003 	movw	r0, #4099	; 0x1003
   15cca:	f7ff fb23 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15cce:	4604      	mov	r4, r0
   15cd0:	2800      	cmp	r0, #0
   15cd2:	d149      	bne.n	15d68 <bt_init+0xfc>
	read_local_features_complete(rsp);
   15cd4:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   15cd6:	48a1      	ldr	r0, [pc, #644]	; (15f5c <bt_init+0x2f0>)
   15cd8:	68f1      	ldr	r1, [r6, #12]
   15cda:	2208      	movs	r2, #8
   15cdc:	3101      	adds	r1, #1
   15cde:	f00d f869 	bl	22db4 <memcpy>
	net_buf_unref(rsp);
   15ce2:	4630      	mov	r0, r6
   15ce4:	f003 ffd0 	bl	19c88 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   15ce8:	4621      	mov	r1, r4
   15cea:	aa02      	add	r2, sp, #8
   15cec:	f241 0001 	movw	r0, #4097	; 0x1001
   15cf0:	f7ff fb10 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15cf4:	4604      	mov	r4, r0
   15cf6:	2800      	cmp	r0, #0
   15cf8:	d136      	bne.n	15d68 <bt_init+0xfc>
	read_local_ver_complete(rsp);
   15cfa:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   15cfc:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   15cfe:	785a      	ldrb	r2, [r3, #1]
   15d00:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   15d04:	885a      	ldrh	r2, [r3, #2]
   15d06:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   15d0a:	791a      	ldrb	r2, [r3, #4]
   15d0c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   15d10:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   15d14:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   15d18:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   15d1c:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   15d20:	f003 ffb2 	bl	19c88 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   15d24:	4621      	mov	r1, r4
   15d26:	aa02      	add	r2, sp, #8
   15d28:	f241 0002 	movw	r0, #4098	; 0x1002
   15d2c:	f7ff faf2 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15d30:	4604      	mov	r4, r0
   15d32:	b9c8      	cbnz	r0, 15d68 <bt_init+0xfc>
	read_supported_commands_complete(rsp);
   15d34:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   15d36:	488a      	ldr	r0, [pc, #552]	; (15f60 <bt_init+0x2f4>)
   15d38:	68f1      	ldr	r1, [r6, #12]
   15d3a:	2240      	movs	r2, #64	; 0x40
   15d3c:	3101      	adds	r1, #1
   15d3e:	f00d f839 	bl	22db4 <memcpy>
	net_buf_unref(rsp);
   15d42:	4630      	mov	r0, r6
   15d44:	f003 ffa0 	bl	19c88 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   15d48:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   15d4c:	065e      	lsls	r6, r3, #25
   15d4e:	d40e      	bmi.n	15d6e <bt_init+0x102>
		LOG_ERR("Non-LE capable controller detected!");
   15d50:	4b84      	ldr	r3, [pc, #528]	; (15f64 <bt_init+0x2f8>)
   15d52:	9307      	str	r3, [sp, #28]
   15d54:	4884      	ldr	r0, [pc, #528]	; (15f68 <bt_init+0x2fc>)
   15d56:	2302      	movs	r3, #2
   15d58:	aa06      	add	r2, sp, #24
   15d5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   15d5e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   15d62:	9306      	str	r3, [sp, #24]
   15d64:	f00d f8cb 	bl	22efe <z_log_msg_static_create.constprop.0>
}
   15d68:	4620      	mov	r0, r4
   15d6a:	b009      	add	sp, #36	; 0x24
   15d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   15d6e:	4621      	mov	r1, r4
   15d70:	aa02      	add	r2, sp, #8
   15d72:	f242 0003 	movw	r0, #8195	; 0x2003
   15d76:	f7ff facd 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15d7a:	4604      	mov	r4, r0
   15d7c:	2800      	cmp	r0, #0
   15d7e:	d1f3      	bne.n	15d68 <bt_init+0xfc>
	read_le_features_complete(rsp);
   15d80:	9e02      	ldr	r6, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   15d82:	487a      	ldr	r0, [pc, #488]	; (15f6c <bt_init+0x300>)
   15d84:	68f1      	ldr	r1, [r6, #12]
   15d86:	2208      	movs	r2, #8
   15d88:	3101      	adds	r1, #1
   15d8a:	f00d f813 	bl	22db4 <memcpy>
	net_buf_unref(rsp);
   15d8e:	4630      	mov	r0, r6
   15d90:	f003 ff7a 	bl	19c88 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   15d94:	4621      	mov	r1, r4
   15d96:	aa02      	add	r2, sp, #8
   15d98:	f242 0002 	movw	r0, #8194	; 0x2002
   15d9c:	f7ff faba 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   15da0:	4604      	mov	r4, r0
   15da2:	2800      	cmp	r0, #0
   15da4:	d1e0      	bne.n	15d68 <bt_init+0xfc>
		le_read_buffer_size_complete(rsp);
   15da6:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   15da8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   15daa:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15dae:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   15db2:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   15db4:	b121      	cbz	r1, 15dc0 <bt_init+0x154>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   15db6:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   15db8:	486d      	ldr	r0, [pc, #436]	; (15f70 <bt_init+0x304>)
   15dba:	4611      	mov	r1, r2
   15dbc:	f00f fab0 	bl	25320 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   15dc0:	4620      	mov	r0, r4
   15dc2:	f003 ff61 	bl	19c88 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15dc6:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   15dca:	f016 0620 	ands.w	r6, r6, #32
   15dce:	d118      	bne.n	15e02 <bt_init+0x196>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   15dd0:	2102      	movs	r1, #2
   15dd2:	f640 406d 	movw	r0, #3181	; 0xc6d
   15dd6:	f7ff fa63 	bl	152a0 <bt_hci_cmd_create>
		if (!buf) {
   15dda:	4604      	mov	r4, r0
   15ddc:	2800      	cmp	r0, #0
   15dde:	f000 80a9 	beq.w	15f34 <bt_init+0x2c8>
	return net_buf_simple_add(&buf->b, len);
   15de2:	2102      	movs	r1, #2
   15de4:	300c      	adds	r0, #12
   15de6:	f00e fba7 	bl	24538 <net_buf_simple_add>
		cp_le->le = 0x01;
   15dea:	2301      	movs	r3, #1
   15dec:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   15dee:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   15df0:	4621      	mov	r1, r4
   15df2:	4632      	mov	r2, r6
   15df4:	f640 406d 	movw	r0, #3181	; 0xc6d
   15df8:	f7ff fa8c 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   15dfc:	4604      	mov	r4, r0
   15dfe:	2800      	cmp	r0, #0
   15e00:	d1b2      	bne.n	15d68 <bt_init+0xfc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   15e02:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   15e06:	071c      	lsls	r4, r3, #28
   15e08:	d512      	bpl.n	15e30 <bt_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   15e0a:	aa02      	add	r2, sp, #8
   15e0c:	2100      	movs	r1, #0
   15e0e:	f242 001c 	movw	r0, #8220	; 0x201c
   15e12:	f7ff fa7f 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   15e16:	4604      	mov	r4, r0
   15e18:	2800      	cmp	r0, #0
   15e1a:	d1a5      	bne.n	15d68 <bt_init+0xfc>
		le_read_supp_states_complete(rsp);
   15e1c:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   15e1e:	68c3      	ldr	r3, [r0, #12]
   15e20:	f8d3 2001 	ldr.w	r2, [r3, #1]
   15e24:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   15e28:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   15e2c:	f003 ff2c 	bl	19c88 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   15e30:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   15e34:	0698      	lsls	r0, r3, #26
   15e36:	d523      	bpl.n	15e80 <bt_init+0x214>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   15e38:	a901      	add	r1, sp, #4
   15e3a:	f10d 0002 	add.w	r0, sp, #2
   15e3e:	f7ff fae5 	bl	1540c <hci_le_read_max_data_len>
		if (err) {
   15e42:	4604      	mov	r4, r0
   15e44:	2800      	cmp	r0, #0
   15e46:	d18f      	bne.n	15d68 <bt_init+0xfc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15e48:	2104      	movs	r1, #4
   15e4a:	f242 0024 	movw	r0, #8228	; 0x2024
   15e4e:	f7ff fa27 	bl	152a0 <bt_hci_cmd_create>
		if (!buf) {
   15e52:	4606      	mov	r6, r0
   15e54:	2800      	cmp	r0, #0
   15e56:	d06d      	beq.n	15f34 <bt_init+0x2c8>
   15e58:	2104      	movs	r1, #4
   15e5a:	300c      	adds	r0, #12
   15e5c:	f00e fb6c 	bl	24538 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15e60:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   15e64:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   15e66:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   15e6a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   15e6c:	4622      	mov	r2, r4
   15e6e:	4631      	mov	r1, r6
   15e70:	f242 0024 	movw	r0, #8228	; 0x2024
   15e74:	f7ff fa4e 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   15e78:	4604      	mov	r4, r0
   15e7a:	2800      	cmp	r0, #0
   15e7c:	f47f af74 	bne.w	15d68 <bt_init+0xfc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   15e80:	2108      	movs	r1, #8
   15e82:	f242 0001 	movw	r0, #8193	; 0x2001
   15e86:	f7ff fa0b 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   15e8a:	4604      	mov	r4, r0
   15e8c:	2800      	cmp	r0, #0
   15e8e:	d051      	beq.n	15f34 <bt_init+0x2c8>
   15e90:	2108      	movs	r1, #8
   15e92:	300c      	adds	r0, #12
   15e94:	f00e fb50 	bl	24538 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   15e98:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   15e9c:	f012 0f02 	tst.w	r2, #2
   15ea0:	bf14      	ite	ne
   15ea2:	232f      	movne	r3, #47	; 0x2f
   15ea4:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   15ea6:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15ea8:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   15eac:	bf48      	it	mi
   15eae:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   15eb2:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   15eb6:	bf18      	it	ne
   15eb8:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   15ebc:	2200      	movs	r2, #0
   15ebe:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   15ec0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15ec4:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   15ec6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   15ec8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   15eca:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   15ecc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   15ece:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15ed0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   15ed2:	4621      	mov	r1, r4
   15ed4:	f242 0001 	movw	r0, #8193	; 0x2001
   15ed8:	f7ff fa1c 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15edc:	4604      	mov	r4, r0
   15ede:	2800      	cmp	r0, #0
   15ee0:	f47f af42 	bne.w	15d68 <bt_init+0xfc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15ee4:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   15ee8:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   15eec:	069a      	lsls	r2, r3, #26
   15eee:	d424      	bmi.n	15f3a <bt_init+0x2ce>
	if (bt_dev.le.acl_mtu) {
   15ef0:	b9c9      	cbnz	r1, 15f26 <bt_init+0x2ba>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   15ef2:	aa02      	add	r2, sp, #8
   15ef4:	f241 0005 	movw	r0, #4101	; 0x1005
   15ef8:	f7ff fa0c 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15efc:	4604      	mov	r4, r0
   15efe:	2800      	cmp	r0, #0
   15f00:	f47f af32 	bne.w	15d68 <bt_init+0xfc>
	if (bt_dev.le.acl_mtu) {
   15f04:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   15f08:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
   15f0a:	b94b      	cbnz	r3, 15f20 <bt_init+0x2b4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   15f0c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   15f0e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   15f12:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   15f16:	889a      	ldrh	r2, [r3, #4]
   15f18:	4815      	ldr	r0, [pc, #84]	; (15f70 <bt_init+0x304>)
   15f1a:	4611      	mov	r1, r2
   15f1c:	f00f fa00 	bl	25320 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   15f20:	4620      	mov	r0, r4
   15f22:	f003 feb1 	bl	19c88 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   15f26:	2108      	movs	r1, #8
   15f28:	f640 4001 	movw	r0, #3073	; 0xc01
   15f2c:	f7ff f9b8 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   15f30:	4604      	mov	r4, r0
   15f32:	bb08      	cbnz	r0, 15f78 <bt_init+0x30c>
		return -ENOBUFS;
   15f34:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15f38:	e716      	b.n	15d68 <bt_init+0xfc>
	else if (!bt_dev.le.acl_mtu) {
   15f3a:	2900      	cmp	r1, #0
   15f3c:	d1f3      	bne.n	15f26 <bt_init+0x2ba>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   15f3e:	4b0d      	ldr	r3, [pc, #52]	; (15f74 <bt_init+0x308>)
   15f40:	9307      	str	r3, [sp, #28]
   15f42:	4809      	ldr	r0, [pc, #36]	; (15f68 <bt_init+0x2fc>)
   15f44:	2302      	movs	r3, #2
   15f46:	aa06      	add	r2, sp, #24
   15f48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15f4c:	9306      	str	r3, [sp, #24]
		return -EIO;
   15f4e:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
   15f52:	f00c ffd4 	bl	22efe <z_log_msg_static_create.constprop.0>
	if (err) {
   15f56:	e707      	b.n	15d68 <bt_init+0xfc>
   15f58:	20000388 	.word	0x20000388
   15f5c:	200003f8 	.word	0x200003f8
   15f60:	20000400 	.word	0x20000400
   15f64:	000278aa 	.word	0x000278aa
   15f68:	00025f68 	.word	0x00025f68
   15f6c:	20000458 	.word	0x20000458
   15f70:	20000488 	.word	0x20000488
   15f74:	000278ce 	.word	0x000278ce
   15f78:	2108      	movs	r1, #8
   15f7a:	300c      	adds	r0, #12
   15f7c:	f00e fadc 	bl	24538 <net_buf_simple_add>
	dst[0] = val;
   15f80:	2310      	movs	r3, #16
   15f82:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   15f84:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   15f86:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   15f88:	7043      	strb	r3, [r0, #1]
   15f8a:	2602      	movs	r6, #2
   15f8c:	2320      	movs	r3, #32
	dst[0] = val;
   15f8e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   15f90:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   15f92:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   15f94:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   15f96:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   15f98:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   15f9a:	4621      	mov	r1, r4
   15f9c:	f640 4001 	movw	r0, #3073	; 0xc01
   15fa0:	f7ff f9b8 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15fa4:	4604      	mov	r4, r0
   15fa6:	2800      	cmp	r0, #0
   15fa8:	f47f aede 	bne.w	15d68 <bt_init+0xfc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   15fac:	4601      	mov	r1, r0
   15fae:	aa01      	add	r2, sp, #4
   15fb0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   15fb4:	f7ff f9ae 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15fb8:	4604      	mov	r4, r0
   15fba:	b1b8      	cbz	r0, 15fec <bt_init+0x380>
		LOG_WRN("Vendor HCI extensions not available");
   15fbc:	4b23      	ldr	r3, [pc, #140]	; (1604c <bt_init+0x3e0>)
			LOG_WRN("Failed to read supported vendor features");
   15fbe:	4824      	ldr	r0, [pc, #144]	; (16050 <bt_init+0x3e4>)
   15fc0:	aa06      	add	r2, sp, #24
   15fc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   15fc6:	e9cd 6306 	strd	r6, r3, [sp, #24]
   15fca:	f00c ff98 	bl	22efe <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   15fce:	f000 faf1 	bl	165b4 <bt_id_init>
	if (err) {
   15fd2:	4604      	mov	r4, r0
   15fd4:	2800      	cmp	r0, #0
   15fd6:	f47f aec7 	bne.w	15d68 <bt_init+0xfc>
		err = bt_conn_init();
   15fda:	f001 fce1 	bl	179a0 <bt_conn_init>
		if (err) {
   15fde:	4604      	mov	r4, r0
   15fe0:	2800      	cmp	r0, #0
   15fe2:	f47f aec1 	bne.w	15d68 <bt_init+0xfc>
	bt_finalize_init();
   15fe6:	f7ff fe3b 	bl	15c60 <bt_finalize_init>
	return 0;
   15fea:	e6bd      	b.n	15d68 <bt_init+0xfc>
	net_buf_unref(rsp);
   15fec:	9801      	ldr	r0, [sp, #4]
   15fee:	f003 fe4b 	bl	19c88 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   15ff2:	4621      	mov	r1, r4
   15ff4:	aa01      	add	r2, sp, #4
   15ff6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   15ffa:	f7ff f98b 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   15ffe:	4604      	mov	r4, r0
   16000:	b108      	cbz	r0, 16006 <bt_init+0x39a>
		LOG_WRN("Failed to read supported vendor commands");
   16002:	4b14      	ldr	r3, [pc, #80]	; (16054 <bt_init+0x3e8>)
   16004:	e7db      	b.n	15fbe <bt_init+0x352>
	rp.cmds = (void *)rsp->data;
   16006:	9f01      	ldr	r7, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   16008:	4813      	ldr	r0, [pc, #76]	; (16058 <bt_init+0x3ec>)
   1600a:	68f9      	ldr	r1, [r7, #12]
   1600c:	4632      	mov	r2, r6
   1600e:	3101      	adds	r1, #1
   16010:	f00c fed0 	bl	22db4 <memcpy>
	net_buf_unref(rsp);
   16014:	4638      	mov	r0, r7
   16016:	f003 fe37 	bl	19c88 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1601a:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   1601e:	075b      	lsls	r3, r3, #29
   16020:	d5d5      	bpl.n	15fce <bt_init+0x362>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   16022:	aa01      	add	r2, sp, #4
   16024:	4621      	mov	r1, r4
   16026:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1602a:	f7ff f973 	bl	15314 <bt_hci_cmd_send_sync>
		if (err) {
   1602e:	b108      	cbz	r0, 16034 <bt_init+0x3c8>
			LOG_WRN("Failed to read supported vendor features");
   16030:	4b0a      	ldr	r3, [pc, #40]	; (1605c <bt_init+0x3f0>)
   16032:	e7c4      	b.n	15fbe <bt_init+0x352>
		rp.feat = (void *)rsp->data;
   16034:	9c01      	ldr	r4, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   16036:	480a      	ldr	r0, [pc, #40]	; (16060 <bt_init+0x3f4>)
   16038:	68e1      	ldr	r1, [r4, #12]
   1603a:	2201      	movs	r2, #1
   1603c:	4411      	add	r1, r2
   1603e:	f00c feb9 	bl	22db4 <memcpy>
		net_buf_unref(rsp);
   16042:	4620      	mov	r0, r4
   16044:	f003 fe20 	bl	19c88 <net_buf_unref>
   16048:	e7c1      	b.n	15fce <bt_init+0x362>
   1604a:	bf00      	nop
   1604c:	000278f1 	.word	0x000278f1
   16050:	00025f68 	.word	0x00025f68
   16054:	00027915 	.word	0x00027915
   16058:	20000441 	.word	0x20000441
   1605c:	0002793e 	.word	0x0002793e
   16060:	20000440 	.word	0x20000440

00016064 <init_work>:
{
   16064:	b510      	push	{r4, lr}
	err = bt_init();
   16066:	f7ff fe01 	bl	15c6c <bt_init>
	if (ready_cb) {
   1606a:	4b03      	ldr	r3, [pc, #12]	; (16078 <init_work+0x14>)
   1606c:	681b      	ldr	r3, [r3, #0]
   1606e:	b113      	cbz	r3, 16076 <init_work+0x12>
}
   16070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16074:	4718      	bx	r3
}
   16076:	bd10      	pop	{r4, pc}
   16078:	20003668 	.word	0x20003668

0001607c <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1607c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   1607e:	4d3c      	ldr	r5, [pc, #240]	; (16170 <bt_enable+0xf4>)
{
   16080:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   16082:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
   16086:	af08      	add	r7, sp, #32
   16088:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1608a:	b983      	cbnz	r3, 160ae <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   1608c:	4b39      	ldr	r3, [pc, #228]	; (16174 <bt_enable+0xf8>)
   1608e:	617b      	str	r3, [r7, #20]
   16090:	2302      	movs	r3, #2
   16092:	4839      	ldr	r0, [pc, #228]	; (16178 <bt_enable+0xfc>)
   16094:	613b      	str	r3, [r7, #16]
   16096:	f107 0210 	add.w	r2, r7, #16
   1609a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1609e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   160a2:	f00c ff2c 	bl	22efe <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   160a6:	4620      	mov	r0, r4
   160a8:	371c      	adds	r7, #28
   160aa:	46bd      	mov	sp, r7
   160ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   160ae:	f06f 0102 	mvn.w	r1, #2
   160b2:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   160b6:	f00c ff25 	bl	22f04 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   160ba:	2101      	movs	r1, #1
   160bc:	f00c ff10 	bl	22ee0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   160c0:	ea10 0401 	ands.w	r4, r0, r1
   160c4:	d150      	bne.n	16168 <bt_enable+0xec>
	ready_cb = cb;
   160c6:	4b2d      	ldr	r3, [pc, #180]	; (1617c <bt_enable+0x100>)
   160c8:	601e      	str	r6, [r3, #0]
   160ca:	460a      	mov	r2, r1
   160cc:	f505 708c 	add.w	r0, r5, #280	; 0x118
   160d0:	f00f f926 	bl	25320 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   160d4:	f505 709e 	add.w	r0, r5, #316	; 0x13c
   160d8:	f00f f901 	bl	252de <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   160dc:	2200      	movs	r2, #0
   160de:	2300      	movs	r3, #0
   160e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   160e4:	f06f 0308 	mvn.w	r3, #8
   160e8:	e9cd 4302 	strd	r4, r3, [sp, #8]
   160ec:	e9cd 4400 	strd	r4, r4, [sp]
   160f0:	4b23      	ldr	r3, [pc, #140]	; (16180 <bt_enable+0x104>)
   160f2:	4924      	ldr	r1, [pc, #144]	; (16184 <bt_enable+0x108>)
   160f4:	9404      	str	r4, [sp, #16]
   160f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   160fa:	4823      	ldr	r0, [pc, #140]	; (16188 <bt_enable+0x10c>)
   160fc:	f007 faa2 	bl	1d644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16100:	4922      	ldr	r1, [pc, #136]	; (1618c <bt_enable+0x110>)
   16102:	4821      	ldr	r0, [pc, #132]	; (16188 <bt_enable+0x10c>)
   16104:	f00f f85c 	bl	251c0 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   16108:	4821      	ldr	r0, [pc, #132]	; (16190 <bt_enable+0x114>)
   1610a:	f00f f9c9 	bl	254a0 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1610e:	4921      	ldr	r1, [pc, #132]	; (16194 <bt_enable+0x118>)
   16110:	481f      	ldr	r0, [pc, #124]	; (16190 <bt_enable+0x114>)
   16112:	9400      	str	r4, [sp, #0]
   16114:	f06f 0307 	mvn.w	r3, #7
   16118:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1611c:	f007 fe52 	bl	1ddc4 <k_work_queue_start>
   16120:	491d      	ldr	r1, [pc, #116]	; (16198 <bt_enable+0x11c>)
   16122:	481b      	ldr	r0, [pc, #108]	; (16190 <bt_enable+0x114>)
   16124:	f00f f84c 	bl	251c0 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16128:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   1612c:	68db      	ldr	r3, [r3, #12]
   1612e:	4798      	blx	r3
	if (err) {
   16130:	4604      	mov	r4, r0
   16132:	b178      	cbz	r0, 16154 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   16134:	466d      	mov	r5, sp
   16136:	462a      	mov	r2, r5
   16138:	b088      	sub	sp, #32
   1613a:	4b18      	ldr	r3, [pc, #96]	; (1619c <bt_enable+0x120>)
   1613c:	e9c5 3005 	strd	r3, r0, [r5, #20]
   16140:	2303      	movs	r3, #3
   16142:	f842 3f10 	str.w	r3, [r2, #16]!
   16146:	480c      	ldr	r0, [pc, #48]	; (16178 <bt_enable+0xfc>)
   16148:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1614c:	f00c fed7 	bl	22efe <z_log_msg_static_create.constprop.0>
   16150:	46ad      	mov	sp, r5
		return err;
   16152:	e7a8      	b.n	160a6 <bt_enable+0x2a>
	if (!cb) {
   16154:	b91e      	cbnz	r6, 1615e <bt_enable+0xe2>
		return bt_init();
   16156:	f7ff fd89 	bl	15c6c <bt_init>
   1615a:	4604      	mov	r4, r0
   1615c:	e7a3      	b.n	160a6 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   1615e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   16162:	f007 fe29 	bl	1ddb8 <k_work_submit>
	return 0;
   16166:	e79e      	b.n	160a6 <bt_enable+0x2a>
		return -EALREADY;
   16168:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1616c:	e79b      	b.n	160a6 <bt_enable+0x2a>
   1616e:	bf00      	nop
   16170:	20000388 	.word	0x20000388
   16174:	00027967 	.word	0x00027967
   16178:	00025f68 	.word	0x00025f68
   1617c:	20003668 	.word	0x20003668
   16180:	00015999 	.word	0x00015999
   16184:	20006440 	.word	0x20006440
   16188:	200022f8 	.word	0x200022f8
   1618c:	00027980 	.word	0x00027980
   16190:	20002378 	.word	0x20002378
   16194:	20006a80 	.word	0x20006a80
   16198:	00027986 	.word	0x00027986
   1619c:	0002798c 	.word	0x0002798c

000161a0 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161a0:	4b04      	ldr	r3, [pc, #16]	; (161b4 <bt_is_ready+0x14>)
   161a2:	f3bf 8f5b 	dmb	ish
   161a6:	6818      	ldr	r0, [r3, #0]
   161a8:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   161ac:	f3c0 0080 	ubfx	r0, r0, #2, #1
   161b0:	4770      	bx	lr
   161b2:	bf00      	nop
   161b4:	20000454 	.word	0x20000454

000161b8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   161b8:	4800      	ldr	r0, [pc, #0]	; (161bc <bt_get_name+0x4>)
   161ba:	4770      	bx	lr
   161bc:	00026c8c 	.word	0x00026c8c

000161c0 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   161c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   161c2:	4f0a      	ldr	r7, [pc, #40]	; (161ec <id_find+0x2c>)
{
   161c4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   161c6:	2500      	movs	r5, #0
   161c8:	79fb      	ldrb	r3, [r7, #7]
   161ca:	b2ec      	uxtb	r4, r5
   161cc:	42a3      	cmp	r3, r4
   161ce:	d802      	bhi.n	161d6 <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   161d0:	f06f 0001 	mvn.w	r0, #1
   161d4:	e009      	b.n	161ea <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   161d6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   161da:	4439      	add	r1, r7
   161dc:	4630      	mov	r0, r6
   161de:	f00c ff41 	bl	23064 <bt_addr_le_eq>
   161e2:	3501      	adds	r5, #1
   161e4:	2800      	cmp	r0, #0
   161e6:	d0ef      	beq.n	161c8 <id_find+0x8>
   161e8:	4620      	mov	r0, r4
}
   161ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161ec:	20000388 	.word	0x20000388

000161f0 <set_random_address>:
{
   161f0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   161f2:	4913      	ldr	r1, [pc, #76]	; (16240 <set_random_address+0x50>)
   161f4:	2206      	movs	r2, #6
   161f6:	4605      	mov	r5, r0
   161f8:	f00c fdb5 	bl	22d66 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   161fc:	b1d8      	cbz	r0, 16236 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   161fe:	2106      	movs	r1, #6
   16200:	f242 0005 	movw	r0, #8197	; 0x2005
   16204:	f7ff f84c 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   16208:	4604      	mov	r4, r0
   1620a:	b1b0      	cbz	r0, 1623a <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1620c:	2206      	movs	r2, #6
   1620e:	4629      	mov	r1, r5
   16210:	300c      	adds	r0, #12
   16212:	f00e f997 	bl	24544 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   16216:	2200      	movs	r2, #0
   16218:	4621      	mov	r1, r4
   1621a:	f242 0005 	movw	r0, #8197	; 0x2005
   1621e:	f7ff f879 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   16222:	b948      	cbnz	r0, 16238 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   16224:	2206      	movs	r2, #6
   16226:	4806      	ldr	r0, [pc, #24]	; (16240 <set_random_address+0x50>)
   16228:	4629      	mov	r1, r5
   1622a:	f00c fdc3 	bl	22db4 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1622e:	4b05      	ldr	r3, [pc, #20]	; (16244 <set_random_address+0x54>)
   16230:	2201      	movs	r2, #1
   16232:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   16236:	2000      	movs	r0, #0
}
   16238:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1623a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1623e:	e7fb      	b.n	16238 <set_random_address+0x48>
   16240:	200003e9 	.word	0x200003e9
   16244:	20000388 	.word	0x20000388

00016248 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   16248:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1624a:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1624c:	460d      	mov	r5, r1
   1624e:	b179      	cbz	r1, 16270 <id_create.constprop.0+0x28>
   16250:	4914      	ldr	r1, [pc, #80]	; (162a4 <id_create.constprop.0+0x5c>)
   16252:	4628      	mov	r0, r5
   16254:	f00c ff06 	bl	23064 <bt_addr_le_eq>
   16258:	b950      	cbnz	r0, 16270 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   1625a:	4813      	ldr	r0, [pc, #76]	; (162a8 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1625c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16260:	2207      	movs	r2, #7
   16262:	4629      	mov	r1, r5
   16264:	4420      	add	r0, r4
   16266:	f00c fda5 	bl	22db4 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   1626a:	2000      	movs	r0, #0
}
   1626c:	b003      	add	sp, #12
   1626e:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   16270:	4668      	mov	r0, sp
   16272:	f00c fe11 	bl	22e98 <bt_addr_le_create_static>
			if (err) {
   16276:	2800      	cmp	r0, #0
   16278:	d1f8      	bne.n	1626c <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   1627a:	4668      	mov	r0, sp
   1627c:	f7ff ffa0 	bl	161c0 <id_find>
   16280:	2800      	cmp	r0, #0
   16282:	daf5      	bge.n	16270 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   16284:	4b08      	ldr	r3, [pc, #32]	; (162a8 <id_create.constprop.0+0x60>)
   16286:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1628a:	441c      	add	r4, r3
   1628c:	2207      	movs	r2, #7
   1628e:	4669      	mov	r1, sp
   16290:	4620      	mov	r0, r4
   16292:	f00c fd8f 	bl	22db4 <memcpy>
		if (addr) {
   16296:	2d00      	cmp	r5, #0
   16298:	d0e7      	beq.n	1626a <id_create.constprop.0+0x22>
   1629a:	2207      	movs	r2, #7
   1629c:	4621      	mov	r1, r4
   1629e:	4628      	mov	r0, r5
   162a0:	e7e1      	b.n	16266 <id_create.constprop.0+0x1e>
   162a2:	bf00      	nop
   162a4:	00027408 	.word	0x00027408
   162a8:	20000388 	.word	0x20000388

000162ac <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   162ac:	b570      	push	{r4, r5, r6, lr}
   162ae:	460d      	mov	r5, r1
   162b0:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   162b2:	4604      	mov	r4, r0
   162b4:	b920      	cbnz	r0, 162c0 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   162b6:	b31d      	cbz	r5, 16300 <bt_id_create+0x54>
			return -EINVAL;
   162b8:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   162bc:	b006      	add	sp, #24
   162be:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   162c0:	4921      	ldr	r1, [pc, #132]	; (16348 <bt_id_create+0x9c>)
   162c2:	f00c fecf 	bl	23064 <bt_addr_le_eq>
   162c6:	2800      	cmp	r0, #0
   162c8:	d1f5      	bne.n	162b6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   162ca:	7823      	ldrb	r3, [r4, #0]
   162cc:	2b01      	cmp	r3, #1
   162ce:	d104      	bne.n	162da <bt_id_create+0x2e>
   162d0:	79a3      	ldrb	r3, [r4, #6]
   162d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   162d6:	2bc0      	cmp	r3, #192	; 0xc0
   162d8:	d00a      	beq.n	162f0 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   162da:	4b1c      	ldr	r3, [pc, #112]	; (1634c <bt_id_create+0xa0>)
   162dc:	9305      	str	r3, [sp, #20]
   162de:	481c      	ldr	r0, [pc, #112]	; (16350 <bt_id_create+0xa4>)
   162e0:	2302      	movs	r3, #2
   162e2:	aa04      	add	r2, sp, #16
   162e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   162e8:	9304      	str	r3, [sp, #16]
   162ea:	f00c fec3 	bl	23074 <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   162ee:	e7e3      	b.n	162b8 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   162f0:	4620      	mov	r0, r4
   162f2:	f7ff ff65 	bl	161c0 <id_find>
   162f6:	2800      	cmp	r0, #0
   162f8:	dbdd      	blt.n	162b6 <bt_id_create+0xa>
			return -EALREADY;
   162fa:	f06f 0077 	mvn.w	r0, #119	; 0x77
   162fe:	e7dd      	b.n	162bc <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   16300:	4d14      	ldr	r5, [pc, #80]	; (16354 <bt_id_create+0xa8>)
   16302:	79eb      	ldrb	r3, [r5, #7]
   16304:	2b01      	cmp	r3, #1
   16306:	d01c      	beq.n	16342 <bt_id_create+0x96>
   16308:	f3bf 8f5b 	dmb	ish
   1630c:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   16310:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16314:	07db      	lsls	r3, r3, #31
   16316:	d50b      	bpl.n	16330 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   16318:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1631a:	4621      	mov	r1, r4
   1631c:	4630      	mov	r0, r6
   1631e:	f7ff ff93 	bl	16248 <id_create.constprop.0>
	if (err) {
   16322:	2800      	cmp	r0, #0
   16324:	d1ca      	bne.n	162bc <bt_id_create+0x10>
		bt_dev.id_count++;
   16326:	79eb      	ldrb	r3, [r5, #7]
   16328:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   1632a:	4630      	mov	r0, r6
		bt_dev.id_count++;
   1632c:	71eb      	strb	r3, [r5, #7]
	return new_id;
   1632e:	e7c5      	b.n	162bc <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   16330:	2c00      	cmp	r4, #0
   16332:	d0c1      	beq.n	162b8 <bt_id_create+0xc>
   16334:	4904      	ldr	r1, [pc, #16]	; (16348 <bt_id_create+0x9c>)
   16336:	4620      	mov	r0, r4
   16338:	f00c fe94 	bl	23064 <bt_addr_le_eq>
   1633c:	2800      	cmp	r0, #0
   1633e:	d0eb      	beq.n	16318 <bt_id_create+0x6c>
   16340:	e7ba      	b.n	162b8 <bt_id_create+0xc>
		return -ENOMEM;
   16342:	f06f 000b 	mvn.w	r0, #11
   16346:	e7b9      	b.n	162bc <bt_id_create+0x10>
   16348:	00027408 	.word	0x00027408
   1634c:	000279b7 	.word	0x000279b7
   16350:	00025f70 	.word	0x00025f70
   16354:	20000388 	.word	0x20000388

00016358 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   16358:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1635a:	4604      	mov	r4, r0
{
   1635c:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   1635e:	b960      	cbnz	r0, 1637a <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   16360:	4b1a      	ldr	r3, [pc, #104]	; (163cc <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   16362:	9307      	str	r3, [sp, #28]
   16364:	481a      	ldr	r0, [pc, #104]	; (163d0 <bt_id_read_public_addr+0x78>)
   16366:	2302      	movs	r3, #2
   16368:	aa06      	add	r2, sp, #24
   1636a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1636e:	9306      	str	r3, [sp, #24]
   16370:	f00c fe80 	bl	23074 <z_log_msg_static_create.constprop.0>
		return 0U;
   16374:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   16376:	b008      	add	sp, #32
   16378:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1637a:	aa01      	add	r2, sp, #4
   1637c:	2100      	movs	r1, #0
   1637e:	f241 0009 	movw	r0, #4105	; 0x1009
   16382:	f7fe ffc7 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   16386:	4606      	mov	r6, r0
   16388:	b108      	cbz	r0, 1638e <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   1638a:	4b12      	ldr	r3, [pc, #72]	; (163d4 <bt_id_read_public_addr+0x7c>)
   1638c:	e7e9      	b.n	16362 <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1638e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   16390:	4911      	ldr	r1, [pc, #68]	; (163d8 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   16392:	68dd      	ldr	r5, [r3, #12]
   16394:	3501      	adds	r5, #1
   16396:	2206      	movs	r2, #6
   16398:	4628      	mov	r0, r5
   1639a:	f00c fce4 	bl	22d66 <memcmp>
   1639e:	b918      	cbnz	r0, 163a8 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   163a0:	9801      	ldr	r0, [sp, #4]
   163a2:	f003 fc71 	bl	19c88 <net_buf_unref>
		return 0U;
   163a6:	e7e5      	b.n	16374 <bt_id_read_public_addr+0x1c>
   163a8:	490c      	ldr	r1, [pc, #48]	; (163dc <bt_id_read_public_addr+0x84>)
   163aa:	2206      	movs	r2, #6
   163ac:	4628      	mov	r0, r5
   163ae:	f00c fcda 	bl	22d66 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   163b2:	2800      	cmp	r0, #0
   163b4:	d0f4      	beq.n	163a0 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   163b6:	2206      	movs	r2, #6
   163b8:	4629      	mov	r1, r5
   163ba:	1c60      	adds	r0, r4, #1
   163bc:	f00c fcfa 	bl	22db4 <memcpy>
	net_buf_unref(rsp);
   163c0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   163c2:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   163c4:	f003 fc60 	bl	19c88 <net_buf_unref>
	return 1U;
   163c8:	2001      	movs	r0, #1
   163ca:	e7d4      	b.n	16376 <bt_id_read_public_addr+0x1e>
   163cc:	000279e5 	.word	0x000279e5
   163d0:	00025f70 	.word	0x00025f70
   163d4:	000279fe 	.word	0x000279fe
   163d8:	00027415 	.word	0x00027415
   163dc:	0002740f 	.word	0x0002740f

000163e0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   163e0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   163e2:	4668      	mov	r0, sp
   163e4:	f7ff ffb8 	bl	16358 <bt_id_read_public_addr>
   163e8:	4b04      	ldr	r3, [pc, #16]	; (163fc <bt_setup_public_id_addr+0x1c>)
   163ea:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   163ec:	b118      	cbz	r0, 163f6 <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   163ee:	4669      	mov	r1, sp
   163f0:	2000      	movs	r0, #0
   163f2:	f7ff ff29 	bl	16248 <id_create.constprop.0>
}
   163f6:	b003      	add	sp, #12
   163f8:	f85d fb04 	ldr.w	pc, [sp], #4
   163fc:	20000388 	.word	0x20000388

00016400 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   16400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16404:	4b22      	ldr	r3, [pc, #136]	; (16490 <bt_read_static_addr+0x90>)
   16406:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   1640a:	07db      	lsls	r3, r3, #31
{
   1640c:	b088      	sub	sp, #32
   1640e:	4607      	mov	r7, r0
   16410:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   16412:	d40e      	bmi.n	16432 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   16414:	4b1f      	ldr	r3, [pc, #124]	; (16494 <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   16416:	9307      	str	r3, [sp, #28]
   16418:	481f      	ldr	r0, [pc, #124]	; (16498 <bt_read_static_addr+0x98>)
   1641a:	2302      	movs	r3, #2
   1641c:	aa06      	add	r2, sp, #24
   1641e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   16422:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   16424:	9306      	str	r3, [sp, #24]
   16426:	f00c fe25 	bl	23074 <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1642a:	4628      	mov	r0, r5
   1642c:	b008      	add	sp, #32
   1642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   16432:	aa01      	add	r2, sp, #4
   16434:	2100      	movs	r1, #0
   16436:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1643a:	f7fe ff6b 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   1643e:	4604      	mov	r4, r0
   16440:	b108      	cbz	r0, 16446 <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   16442:	4b16      	ldr	r3, [pc, #88]	; (1649c <bt_read_static_addr+0x9c>)
   16444:	e7e7      	b.n	16416 <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   16446:	9b01      	ldr	r3, [sp, #4]
   16448:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1644a:	7875      	ldrb	r5, [r6, #1]
   1644c:	4545      	cmp	r5, r8
   1644e:	bf28      	it	cs
   16450:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   16452:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   16454:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   16458:	42a5      	cmp	r5, r4
   1645a:	dc0f      	bgt.n	1647c <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   1645c:	9801      	ldr	r0, [sp, #4]
   1645e:	f003 fc13 	bl	19c88 <net_buf_unref>
	if (!cnt) {
   16462:	2d00      	cmp	r5, #0
   16464:	d1e1      	bne.n	1642a <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   16466:	4b0e      	ldr	r3, [pc, #56]	; (164a0 <bt_read_static_addr+0xa0>)
   16468:	9307      	str	r3, [sp, #28]
   1646a:	480b      	ldr	r0, [pc, #44]	; (16498 <bt_read_static_addr+0x98>)
   1646c:	2302      	movs	r3, #2
   1646e:	aa06      	add	r2, sp, #24
   16470:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16474:	9306      	str	r3, [sp, #24]
   16476:	f00c fdfd 	bl	23074 <z_log_msg_static_create.constprop.0>
   1647a:	e7d6      	b.n	1642a <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1647c:	4631      	mov	r1, r6
   1647e:	fb08 7004 	mla	r0, r8, r4, r7
   16482:	2216      	movs	r2, #22
   16484:	f00c fc96 	bl	22db4 <memcpy>
	for (i = 0; i < cnt; i++) {
   16488:	3401      	adds	r4, #1
   1648a:	3616      	adds	r6, #22
   1648c:	e7e4      	b.n	16458 <bt_read_static_addr+0x58>
   1648e:	bf00      	nop
   16490:	20000388 	.word	0x20000388
   16494:	00027a1c 	.word	0x00027a1c
   16498:	00025f70 	.word	0x00025f70
   1649c:	00027a48 	.word	0x00027a48
   164a0:	00027a68 	.word	0x00027a68

000164a4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   164a4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   164a6:	4e15      	ldr	r6, [pc, #84]	; (164fc <bt_setup_random_id_addr+0x58>)
   164a8:	79f4      	ldrb	r4, [r6, #7]
{
   164aa:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   164ac:	b92c      	cbnz	r4, 164ba <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   164ae:	2101      	movs	r1, #1
   164b0:	a802      	add	r0, sp, #8
   164b2:	f7ff ffa5 	bl	16400 <bt_read_static_addr>
   164b6:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   164b8:	b9c8      	cbnz	r0, 164ee <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   164ba:	2100      	movs	r1, #0
   164bc:	4608      	mov	r0, r1
}
   164be:	b009      	add	sp, #36	; 0x24
   164c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   164c4:	f7ff bef2 	b.w	162ac <bt_id_create>
   164c8:	ab02      	add	r3, sp, #8
   164ca:	fb07 3105 	mla	r1, r7, r5, r3
   164ce:	2206      	movs	r2, #6
   164d0:	f10d 0001 	add.w	r0, sp, #1
   164d4:	f00c fc6e 	bl	22db4 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   164d8:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   164da:	4669      	mov	r1, sp
   164dc:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   164de:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   164e2:	f7ff feb1 	bl	16248 <id_create.constprop.0>
				if (err) {
   164e6:	3401      	adds	r4, #1
   164e8:	b110      	cbz	r0, 164f0 <bt_setup_random_id_addr+0x4c>
}
   164ea:	b009      	add	sp, #36	; 0x24
   164ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   164ee:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   164f0:	79f3      	ldrb	r3, [r6, #7]
   164f2:	b2e5      	uxtb	r5, r4
   164f4:	42ab      	cmp	r3, r5
   164f6:	d8e7      	bhi.n	164c8 <bt_setup_random_id_addr+0x24>
			return 0;
   164f8:	2000      	movs	r0, #0
   164fa:	e7f6      	b.n	164ea <bt_setup_random_id_addr+0x46>
   164fc:	20000388 	.word	0x20000388

00016500 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   16500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16504:	4690      	mov	r8, r2
   16506:	460e      	mov	r6, r1
   16508:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1650a:	4602      	mov	r2, r0
   1650c:	2800      	cmp	r0, #0
   1650e:	d04b      	beq.n	165a8 <bt_id_set_adv_own_addr+0xa8>
   16510:	2b00      	cmp	r3, #0
   16512:	d049      	beq.n	165a8 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16514:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   16516:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   16518:	d531      	bpl.n	1657e <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1651a:	4f25      	ldr	r7, [pc, #148]	; (165b0 <bt_id_set_adv_own_addr+0xb0>)
   1651c:	f1b8 0f00 	cmp.w	r8, #0
   16520:	d013      	beq.n	1654a <bt_id_set_adv_own_addr+0x4a>
   16522:	0688      	lsls	r0, r1, #26
   16524:	d40a      	bmi.n	1653c <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16526:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1652a:	5cfb      	ldrb	r3, [r7, r3]
   1652c:	2b01      	cmp	r3, #1
   1652e:	d015      	beq.n	1655c <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   16530:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16532:	06b2      	lsls	r2, r6, #26
   16534:	d50f      	bpl.n	16556 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   16536:	f043 0302 	orr.w	r3, r3, #2
   1653a:	e00b      	b.n	16554 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1653c:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   16540:	0659      	lsls	r1, r3, #25
   16542:	d4f0      	bmi.n	16526 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   16544:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16548:	e006      	b.n	16558 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1654a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1654e:	5cfb      	ldrb	r3, [r7, r3]
   16550:	2b01      	cmp	r3, #1
   16552:	d003      	beq.n	1655c <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   16554:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   16556:	2000      	movs	r0, #0
}
   16558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1655c:	2107      	movs	r1, #7
   1655e:	fb01 7104 	mla	r1, r1, r4, r7
   16562:	3101      	adds	r1, #1
   16564:	4610      	mov	r0, r2
   16566:	f00c fd8d 	bl	23084 <bt_id_set_adv_random_addr>
				if (err) {
   1656a:	2800      	cmp	r0, #0
   1656c:	d1f4      	bne.n	16558 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   1656e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   16572:	5d3b      	ldrb	r3, [r7, r4]
   16574:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   16576:	f1b8 0f00 	cmp.w	r8, #0
   1657a:	d0ec      	beq.n	16556 <bt_id_set_adv_own_addr+0x56>
   1657c:	e7d9      	b.n	16532 <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1657e:	074b      	lsls	r3, r1, #29
   16580:	d50e      	bpl.n	165a0 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   16582:	4e0b      	ldr	r6, [pc, #44]	; (165b0 <bt_id_set_adv_own_addr+0xb0>)
   16584:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   16588:	5df3      	ldrb	r3, [r6, r7]
   1658a:	2b01      	cmp	r3, #1
   1658c:	d1e2      	bne.n	16554 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1658e:	2107      	movs	r1, #7
   16590:	fb11 3104 	smlabb	r1, r1, r4, r3
   16594:	4431      	add	r1, r6
   16596:	f00c fd75 	bl	23084 <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   1659a:	5df3      	ldrb	r3, [r6, r7]
   1659c:	702b      	strb	r3, [r5, #0]
		if (err) {
   1659e:	e7db      	b.n	16558 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   165a0:	f00c fd78 	bl	23094 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   165a4:	2301      	movs	r3, #1
   165a6:	e7f9      	b.n	1659c <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   165a8:	f06f 0015 	mvn.w	r0, #21
   165ac:	e7d4      	b.n	16558 <bt_id_set_adv_own_addr+0x58>
   165ae:	bf00      	nop
   165b0:	20000388 	.word	0x20000388

000165b4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   165b4:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   165b6:	4d13      	ldr	r5, [pc, #76]	; (16604 <bt_id_init+0x50>)
   165b8:	79eb      	ldrb	r3, [r5, #7]
{
   165ba:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   165bc:	b11b      	cbz	r3, 165c6 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   165be:	2400      	movs	r4, #0
}
   165c0:	4620      	mov	r0, r4
   165c2:	b007      	add	sp, #28
   165c4:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   165c6:	f7ff ff0b 	bl	163e0 <bt_setup_public_id_addr>
		if (err) {
   165ca:	4604      	mov	r4, r0
   165cc:	b150      	cbz	r0, 165e4 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   165ce:	4b0e      	ldr	r3, [pc, #56]	; (16608 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   165d0:	9305      	str	r3, [sp, #20]
   165d2:	480e      	ldr	r0, [pc, #56]	; (1660c <bt_id_init+0x58>)
   165d4:	2302      	movs	r3, #2
   165d6:	aa04      	add	r2, sp, #16
   165d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   165dc:	9304      	str	r3, [sp, #16]
   165de:	f00c fd49 	bl	23074 <z_log_msg_static_create.constprop.0>
			return err;
   165e2:	e7ed      	b.n	165c0 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   165e4:	79eb      	ldrb	r3, [r5, #7]
   165e6:	2b00      	cmp	r3, #0
   165e8:	d1e9      	bne.n	165be <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   165ea:	f7ff ff5b 	bl	164a4 <bt_setup_random_id_addr>
		if (err) {
   165ee:	4604      	mov	r4, r0
   165f0:	2800      	cmp	r0, #0
   165f2:	d1ec      	bne.n	165ce <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   165f4:	1c68      	adds	r0, r5, #1
   165f6:	f7ff fdfb 	bl	161f0 <set_random_address>
		if (err) {
   165fa:	4604      	mov	r4, r0
   165fc:	2800      	cmp	r0, #0
   165fe:	d0df      	beq.n	165c0 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   16600:	4b03      	ldr	r3, [pc, #12]	; (16610 <bt_id_init+0x5c>)
   16602:	e7e5      	b.n	165d0 <bt_id_init+0x1c>
   16604:	20000388 	.word	0x20000388
   16608:	00027a91 	.word	0x00027a91
   1660c:	00025f70 	.word	0x00025f70
   16610:	00027ab0 	.word	0x00027ab0

00016614 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   16614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16618:	b089      	sub	sp, #36	; 0x24
   1661a:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1661c:	2120      	movs	r1, #32
{
   1661e:	9000      	str	r0, [sp, #0]
   16620:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   16622:	f7fe fe3d 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   16626:	4605      	mov	r5, r0
   16628:	2800      	cmp	r0, #0
   1662a:	d05b      	beq.n	166e4 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   1662c:	2120      	movs	r1, #32
   1662e:	300c      	adds	r0, #12
   16630:	f00d ff82 	bl	24538 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   16634:	2220      	movs	r2, #32
   16636:	2100      	movs	r1, #0
   16638:	4681      	mov	r9, r0
   1663a:	f00c fbc6 	bl	22dca <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1663e:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   16642:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   16646:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   16648:	f8d4 8000 	ldr.w	r8, [r4]
   1664c:	2300      	movs	r3, #0
   1664e:	6862      	ldr	r2, [r4, #4]
   16650:	4293      	cmp	r3, r2
   16652:	d30c      	bcc.n	1666e <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   16654:	3408      	adds	r4, #8
   16656:	45a2      	cmp	sl, r4
   16658:	d1f6      	bne.n	16648 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1665a:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   1665c:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   16660:	2200      	movs	r2, #0
   16662:	4629      	mov	r1, r5
}
   16664:	b009      	add	sp, #36	; 0x24
   16666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1666a:	f7fe be53 	b.w	15314 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   1666e:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   16672:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   16676:	1cb0      	adds	r0, r6, #2
   16678:	1811      	adds	r1, r2, r0
   1667a:	291f      	cmp	r1, #31
   1667c:	d91b      	bls.n	166b6 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1667e:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   16682:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   16686:	d101      	bne.n	1668c <hci_set_ad+0x78>
   16688:	2a00      	cmp	r2, #0
   1668a:	dc12      	bgt.n	166b2 <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   1668c:	4b17      	ldr	r3, [pc, #92]	; (166ec <hci_set_ad+0xd8>)
   1668e:	9307      	str	r3, [sp, #28]
   16690:	2302      	movs	r3, #2
   16692:	9306      	str	r3, [sp, #24]
   16694:	4816      	ldr	r0, [pc, #88]	; (166f0 <hci_set_ad+0xdc>)
   16696:	2300      	movs	r3, #0
   16698:	aa06      	add	r2, sp, #24
   1669a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1669e:	f7fc fc8d 	bl	12fbc <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   166a2:	4628      	mov	r0, r5
   166a4:	f003 faf0 	bl	19c88 <net_buf_unref>
					return -EINVAL;
   166a8:	f06f 0015 	mvn.w	r0, #21
}
   166ac:	b009      	add	sp, #36	; 0x24
   166ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   166b2:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   166b6:	b2d7      	uxtb	r7, r2
   166b8:	1c79      	adds	r1, r7, #1
   166ba:	f80b 1006 	strb.w	r1, [fp, r6]
   166be:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   166c0:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   166c2:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   166c6:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   166ca:	f8d8 1004 	ldr.w	r1, [r8, #4]
   166ce:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   166d0:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   166d2:	f00c fb6f 	bl	22db4 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   166d6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   166d8:	4437      	add	r7, r6
   166da:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   166dc:	3301      	adds	r3, #1
   166de:	f108 0808 	add.w	r8, r8, #8
   166e2:	e7b4      	b.n	1664e <hci_set_ad+0x3a>
		return -ENOBUFS;
   166e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   166e8:	e7e0      	b.n	166ac <hci_set_ad+0x98>
   166ea:	bf00      	nop
   166ec:	00027ad3 	.word	0x00027ad3
   166f0:	00025f48 	.word	0x00025f48

000166f4 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   166f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   166f6:	4605      	mov	r5, r0
   166f8:	4b16      	ldr	r3, [pc, #88]	; (16754 <le_adv_start_add_conn+0x60>)
   166fa:	f815 2b09 	ldrb.w	r2, [r5], #9
   166fe:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   16702:	4604      	mov	r4, r0
   16704:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   16706:	2207      	movs	r2, #7
   16708:	4913      	ldr	r1, [pc, #76]	; (16758 <le_adv_start_add_conn+0x64>)
   1670a:	4628      	mov	r0, r5
   1670c:	f00c fb2b 	bl	22d66 <memcmp>
   16710:	4603      	mov	r3, r0
   16712:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16714:	b96b      	cbnz	r3, 16732 <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   16716:	4911      	ldr	r1, [pc, #68]	; (1675c <le_adv_start_add_conn+0x68>)
   16718:	f000 fee8 	bl	174ec <bt_conn_add_le>
		if (!conn) {
   1671c:	4604      	mov	r4, r0
   1671e:	b910      	cbnz	r0, 16726 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   16720:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   16724:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   16726:	2104      	movs	r1, #4
   16728:	f000 fd18 	bl	1715c <bt_conn_set_state>
		*out_conn = conn;
   1672c:	6034      	str	r4, [r6, #0]
		return 0;
   1672e:	2000      	movs	r0, #0
   16730:	e7f8      	b.n	16724 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   16732:	4629      	mov	r1, r5
   16734:	f000 ff0e 	bl	17554 <bt_conn_exists_le>
   16738:	b940      	cbnz	r0, 1674c <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1673a:	7820      	ldrb	r0, [r4, #0]
   1673c:	4629      	mov	r1, r5
   1673e:	f000 fed5 	bl	174ec <bt_conn_add_le>
	if (!conn) {
   16742:	4604      	mov	r4, r0
   16744:	2800      	cmp	r0, #0
   16746:	d0eb      	beq.n	16720 <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   16748:	2105      	movs	r1, #5
   1674a:	e7ed      	b.n	16728 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1674c:	f06f 0015 	mvn.w	r0, #21
   16750:	e7e8      	b.n	16724 <le_adv_start_add_conn+0x30>
   16752:	bf00      	nop
   16754:	20000388 	.word	0x20000388
   16758:	00027408 	.word	0x00027408
   1675c:	00027401 	.word	0x00027401

00016760 <valid_adv_param>:
{
   16760:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16762:	6843      	ldr	r3, [r0, #4]
{
   16764:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   16766:	0558      	lsls	r0, r3, #21
   16768:	d501      	bpl.n	1676e <valid_adv_param+0xe>
		return false;
   1676a:	2000      	movs	r0, #0
}
   1676c:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1676e:	6922      	ldr	r2, [r4, #16]
   16770:	b10a      	cbz	r2, 16776 <valid_adv_param+0x16>
   16772:	07d9      	lsls	r1, r3, #31
   16774:	d5f9      	bpl.n	1676a <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   16776:	4d19      	ldr	r5, [pc, #100]	; (167dc <valid_adv_param+0x7c>)
   16778:	7820      	ldrb	r0, [r4, #0]
   1677a:	79eb      	ldrb	r3, [r5, #7]
   1677c:	4283      	cmp	r3, r0
   1677e:	d9f4      	bls.n	1676a <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   16780:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   16784:	4916      	ldr	r1, [pc, #88]	; (167e0 <valid_adv_param+0x80>)
   16786:	2207      	movs	r2, #7
   16788:	4428      	add	r0, r5
   1678a:	f00c faec 	bl	22d66 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1678e:	2800      	cmp	r0, #0
   16790:	d0eb      	beq.n	1676a <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   16792:	6860      	ldr	r0, [r4, #4]
   16794:	07c2      	lsls	r2, r0, #31
   16796:	d406      	bmi.n	167a6 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   16798:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   1679c:	2b08      	cmp	r3, #8
   1679e:	d802      	bhi.n	167a6 <valid_adv_param+0x46>
   167a0:	68a3      	ldr	r3, [r4, #8]
   167a2:	2b9f      	cmp	r3, #159	; 0x9f
   167a4:	d9e1      	bls.n	1676a <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   167a6:	f010 0f30 	tst.w	r0, #48	; 0x30
   167aa:	d002      	beq.n	167b2 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   167ac:	6923      	ldr	r3, [r4, #16]
   167ae:	2b00      	cmp	r3, #0
   167b0:	d0db      	beq.n	1676a <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   167b2:	06c3      	lsls	r3, r0, #27
   167b4:	d401      	bmi.n	167ba <valid_adv_param+0x5a>
   167b6:	6923      	ldr	r3, [r4, #16]
   167b8:	b943      	cbnz	r3, 167cc <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   167ba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   167be:	429a      	cmp	r2, r3
   167c0:	d8d3      	bhi.n	1676a <valid_adv_param+0xa>
   167c2:	2a1f      	cmp	r2, #31
   167c4:	d9d1      	bls.n	1676a <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   167c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   167ca:	d8ce      	bhi.n	1676a <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   167cc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   167d0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   167d4:	bf18      	it	ne
   167d6:	2001      	movne	r0, #1
   167d8:	e7c8      	b.n	1676c <valid_adv_param+0xc>
   167da:	bf00      	nop
   167dc:	20000388 	.word	0x20000388
   167e0:	00027408 	.word	0x00027408

000167e4 <bt_le_adv_lookup_legacy>:
}
   167e4:	4800      	ldr	r0, [pc, #0]	; (167e8 <bt_le_adv_lookup_legacy+0x4>)
   167e6:	4770      	bx	lr
   167e8:	200003a0 	.word	0x200003a0

000167ec <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   167ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167f0:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   167f2:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   167f6:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   167f8:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   167fa:	ebba 0403 	subs.w	r4, sl, r3
{
   167fe:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16800:	4892      	ldr	r0, [pc, #584]	; (16a4c <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   16802:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   16804:	bf18      	it	ne
   16806:	2401      	movne	r4, #1
   16808:	f00c fc6e 	bl	230e8 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1680c:	0747      	lsls	r7, r0, #29
{
   1680e:	460d      	mov	r5, r1
   16810:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   16812:	f140 8112 	bpl.w	16a3a <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   16816:	4608      	mov	r0, r1
   16818:	f7ff ffa2 	bl	16760 <valid_adv_param>
   1681c:	b928      	cbnz	r0, 1682a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1681e:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   16822:	4620      	mov	r0, r4
   16824:	b013      	add	sp, #76	; 0x4c
   16826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1682a:	4628      	mov	r0, r5
   1682c:	f00c fc49 	bl	230c2 <bt_id_adv_random_addr_check>
   16830:	4681      	mov	r9, r0
   16832:	2800      	cmp	r0, #0
   16834:	d0f3      	beq.n	1681e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16836:	f106 0810 	add.w	r8, r6, #16
   1683a:	4640      	mov	r0, r8
   1683c:	f00c fc54 	bl	230e8 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   16840:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   16844:	0600      	lsls	r0, r0, #24
   16846:	f100 80fb 	bmi.w	16a40 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   1684a:	220f      	movs	r2, #15
   1684c:	4639      	mov	r1, r7
   1684e:	a808      	add	r0, sp, #32
   16850:	f00c fabb 	bl	22dca <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   16854:	68ab      	ldr	r3, [r5, #8]
   16856:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1685a:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1685c:	68eb      	ldr	r3, [r5, #12]
   1685e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   16862:	f00c fc32 	bl	230ca <get_adv_channel_map>
	if (adv->id != param->id) {
   16866:	7832      	ldrb	r2, [r6, #0]
   16868:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   1686a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   1686e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   16870:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   16874:	d004      	beq.n	16880 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16876:	4875      	ldr	r0, [pc, #468]	; (16a4c <bt_le_adv_start_legacy+0x260>)
   16878:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1687c:	f00c fc3a 	bl	230f4 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   16880:	4a73      	ldr	r2, [pc, #460]	; (16a50 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   16882:	782b      	ldrb	r3, [r5, #0]
   16884:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   16886:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1688a:	6869      	ldr	r1, [r5, #4]
   1688c:	4622      	mov	r2, r4
   1688e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   16892:	4630      	mov	r0, r6
   16894:	f7ff fe34 	bl	16500 <bt_id_set_adv_own_addr>
	if (err) {
   16898:	4604      	mov	r4, r0
   1689a:	2800      	cmp	r0, #0
   1689c:	d1c1      	bne.n	16822 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1689e:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   168a2:	2207      	movs	r2, #7
	if (dir_adv) {
   168a4:	f1ba 0f00 	cmp.w	sl, #0
   168a8:	d013      	beq.n	168d2 <bt_le_adv_start_legacy+0xe6>
   168aa:	6929      	ldr	r1, [r5, #16]
   168ac:	f00c fa82 	bl	22db4 <memcpy>
	name_type = get_adv_name_type_param(param);
   168b0:	4628      	mov	r0, r5
   168b2:	f00c fcbc 	bl	2322e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   168b6:	686b      	ldr	r3, [r5, #4]
   168b8:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   168ba:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   168bc:	d416      	bmi.n	168ec <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   168be:	059b      	lsls	r3, r3, #22
   168c0:	d403      	bmi.n	168ca <bt_le_adv_start_legacy+0xde>
   168c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   168c4:	b90b      	cbnz	r3, 168ca <bt_le_adv_start_legacy+0xde>
   168c6:	2f02      	cmp	r7, #2
   168c8:	d15a      	bne.n	16980 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   168ca:	2302      	movs	r3, #2
   168cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   168d0:	e01a      	b.n	16908 <bt_le_adv_start_legacy+0x11c>
   168d2:	4960      	ldr	r1, [pc, #384]	; (16a54 <bt_le_adv_start_legacy+0x268>)
   168d4:	f00c fa6e 	bl	22db4 <memcpy>
	name_type = get_adv_name_type_param(param);
   168d8:	4628      	mov	r0, r5
   168da:	f00c fca8 	bl	2322e <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   168de:	686b      	ldr	r3, [r5, #4]
   168e0:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   168e2:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   168e4:	d5eb      	bpl.n	168be <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   168e6:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   168ea:	e00d      	b.n	16908 <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   168ec:	f013 0f10 	tst.w	r3, #16
   168f0:	bf0c      	ite	eq
   168f2:	2301      	moveq	r3, #1
   168f4:	2304      	movne	r3, #4
   168f6:	6929      	ldr	r1, [r5, #16]
   168f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   168fc:	2207      	movs	r2, #7
   168fe:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   16902:	f00c fa57 	bl	22db4 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   16906:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   16908:	210f      	movs	r1, #15
   1690a:	f242 0006 	movw	r0, #8198	; 0x2006
   1690e:	f7fe fcc7 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   16912:	4604      	mov	r4, r0
   16914:	2800      	cmp	r0, #0
   16916:	f000 8096 	beq.w	16a46 <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1691a:	220f      	movs	r2, #15
   1691c:	a908      	add	r1, sp, #32
   1691e:	300c      	adds	r0, #12
   16920:	f00d fe10 	bl	24544 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   16924:	4621      	mov	r1, r4
   16926:	2200      	movs	r2, #0
   16928:	f242 0006 	movw	r0, #8198	; 0x2006
   1692c:	f7fe fcf2 	bl	15314 <bt_hci_cmd_send_sync>
	if (err) {
   16930:	4604      	mov	r4, r0
   16932:	2800      	cmp	r0, #0
   16934:	f47f af75 	bne.w	16822 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   16938:	f1ba 0f00 	cmp.w	sl, #0
   1693c:	d026      	beq.n	1698c <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1693e:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16940:	07dc      	lsls	r4, r3, #31
   16942:	d431      	bmi.n	169a8 <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16944:	2101      	movs	r1, #1
   16946:	4630      	mov	r0, r6
   16948:	f00c fc81 	bl	2324e <bt_le_adv_set_enable_legacy>
	if (err) {
   1694c:	4604      	mov	r4, r0
   1694e:	2800      	cmp	r0, #0
   16950:	d06b      	beq.n	16a2a <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   16952:	4b41      	ldr	r3, [pc, #260]	; (16a58 <bt_le_adv_start_legacy+0x26c>)
   16954:	9311      	str	r3, [sp, #68]	; 0x44
   16956:	2302      	movs	r3, #2
   16958:	9310      	str	r3, [sp, #64]	; 0x40
   1695a:	4840      	ldr	r0, [pc, #256]	; (16a5c <bt_le_adv_start_legacy+0x270>)
   1695c:	2300      	movs	r3, #0
   1695e:	aa10      	add	r2, sp, #64	; 0x40
   16960:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16964:	f7fc fb2a 	bl	12fbc <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16968:	9d07      	ldr	r5, [sp, #28]
   1696a:	2d00      	cmp	r5, #0
   1696c:	f43f af59 	beq.w	16822 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16970:	4628      	mov	r0, r5
   16972:	2100      	movs	r1, #0
   16974:	f000 fbf2 	bl	1715c <bt_conn_set_state>
			bt_conn_unref(conn);
   16978:	4628      	mov	r0, r5
   1697a:	f00c fcde 	bl	2333a <bt_conn_unref>
   1697e:	e750      	b.n	16822 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16980:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   16982:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   16986:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1698a:	e7bd      	b.n	16908 <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1698c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1698e:	9300      	str	r3, [sp, #0]
   16990:	e9cd 9701 	strd	r9, r7, [sp, #4]
   16994:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   16996:	9a05      	ldr	r2, [sp, #20]
   16998:	4659      	mov	r1, fp
   1699a:	4630      	mov	r0, r6
   1699c:	f00c fbd0 	bl	23140 <le_adv_update.constprop.0>
		if (err) {
   169a0:	4604      	mov	r4, r0
   169a2:	2800      	cmp	r0, #0
   169a4:	d0cb      	beq.n	1693e <bt_le_adv_start_legacy+0x152>
   169a6:	e73c      	b.n	16822 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   169a8:	a907      	add	r1, sp, #28
   169aa:	4630      	mov	r0, r6
   169ac:	f7ff fea2 	bl	166f4 <le_adv_start_add_conn>
		if (err) {
   169b0:	4604      	mov	r4, r0
   169b2:	2800      	cmp	r0, #0
   169b4:	d0c6      	beq.n	16944 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   169b6:	f110 0f0c 	cmn.w	r0, #12
   169ba:	f47f af32 	bne.w	16822 <bt_le_adv_start_legacy+0x36>
   169be:	f1ba 0f00 	cmp.w	sl, #0
   169c2:	f47f af2e 	bne.w	16822 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   169c6:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   169c8:	0798      	lsls	r0, r3, #30
   169ca:	f53f af2a 	bmi.w	16822 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   169ce:	686c      	ldr	r4, [r5, #4]
   169d0:	f084 0402 	eor.w	r4, r4, #2
   169d4:	f3c4 0440 	ubfx	r4, r4, #1, #1
   169d8:	f004 0201 	and.w	r2, r4, #1
   169dc:	210e      	movs	r1, #14
   169de:	4640      	mov	r0, r8
   169e0:	f00c fb97 	bl	23112 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   169e4:	1e7b      	subs	r3, r7, #1
   169e6:	425a      	negs	r2, r3
   169e8:	415a      	adcs	r2, r3
   169ea:	2108      	movs	r1, #8
   169ec:	4640      	mov	r0, r8
   169ee:	f00c fb90 	bl	23112 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   169f2:	1eb9      	subs	r1, r7, #2
   169f4:	424a      	negs	r2, r1
   169f6:	414a      	adcs	r2, r1
   169f8:	4640      	mov	r0, r8
   169fa:	2109      	movs	r1, #9
   169fc:	f00c fb89 	bl	23112 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   16a00:	686a      	ldr	r2, [r5, #4]
   16a02:	210a      	movs	r1, #10
   16a04:	f002 0201 	and.w	r2, r2, #1
   16a08:	4640      	mov	r0, r8
   16a0a:	f00c fb82 	bl	23112 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   16a0e:	464a      	mov	r2, r9
   16a10:	210b      	movs	r1, #11
   16a12:	4640      	mov	r0, r8
   16a14:	f00c fb7d 	bl	23112 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   16a18:	686a      	ldr	r2, [r5, #4]
   16a1a:	210d      	movs	r1, #13
   16a1c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   16a20:	4640      	mov	r0, r8
   16a22:	f00c fb76 	bl	23112 <atomic_set_bit_to>
	return 0;
   16a26:	2400      	movs	r4, #0
   16a28:	e6fb      	b.n	16822 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   16a2a:	9807      	ldr	r0, [sp, #28]
   16a2c:	b108      	cbz	r0, 16a32 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   16a2e:	f00c fc84 	bl	2333a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   16a32:	f1ba 0f00 	cmp.w	sl, #0
   16a36:	d1cf      	bne.n	169d8 <bt_le_adv_start_legacy+0x1ec>
   16a38:	e7c9      	b.n	169ce <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   16a3a:	f06f 040a 	mvn.w	r4, #10
   16a3e:	e6f0      	b.n	16822 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   16a40:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16a44:	e6ed      	b.n	16822 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   16a46:	f06f 0468 	mvn.w	r4, #104	; 0x68
   16a4a:	e6ea      	b.n	16822 <bt_le_adv_start_legacy+0x36>
   16a4c:	20000454 	.word	0x20000454
   16a50:	20000388 	.word	0x20000388
   16a54:	00027408 	.word	0x00027408
   16a58:	00027aec 	.word	0x00027aec
   16a5c:	00025f48 	.word	0x00025f48

00016a60 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   16a60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16a62:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16a64:	9a06      	ldr	r2, [sp, #24]
{
   16a66:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   16a68:	e9cd 3200 	strd	r3, r2, [sp]
   16a6c:	462b      	mov	r3, r5
   16a6e:	460a      	mov	r2, r1
   16a70:	4601      	mov	r1, r0
   16a72:	4811      	ldr	r0, [pc, #68]	; (16ab8 <bt_le_adv_start+0x58>)
   16a74:	f7ff feba 	bl	167ec <bt_le_adv_start_legacy>
   16a78:	4621      	mov	r1, r4
   16a7a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   16a7c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   16a7e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   16a82:	429d      	cmp	r5, r3
   16a84:	d102      	bne.n	16a8c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   16a86:	4630      	mov	r0, r6
   16a88:	b002      	add	sp, #8
   16a8a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   16a8c:	880a      	ldrh	r2, [r1, #0]
   16a8e:	4282      	cmp	r2, r0
   16a90:	d104      	bne.n	16a9c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   16a92:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   16a94:	b112      	cbz	r2, 16a9c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   16a96:	7812      	ldrb	r2, [r2, #0]
   16a98:	07d2      	lsls	r2, r2, #31
   16a9a:	d402      	bmi.n	16aa2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   16a9c:	3301      	adds	r3, #1
   16a9e:	3108      	adds	r1, #8
   16aa0:	e7ef      	b.n	16a82 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   16aa2:	4906      	ldr	r1, [pc, #24]	; (16abc <bt_le_adv_start+0x5c>)
   16aa4:	4806      	ldr	r0, [pc, #24]	; (16ac0 <bt_le_adv_start+0x60>)
   16aa6:	f00e fd01 	bl	254ac <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   16aaa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16aae:	2300      	movs	r3, #0
   16ab0:	4803      	ldr	r0, [pc, #12]	; (16ac0 <bt_le_adv_start+0x60>)
   16ab2:	f007 fa1d 	bl	1def0 <k_work_reschedule>
   16ab6:	e7e6      	b.n	16a86 <bt_le_adv_start+0x26>
   16ab8:	200003a0 	.word	0x200003a0
   16abc:	00016b49 	.word	0x00016b49
   16ac0:	200003b8 	.word	0x200003b8

00016ac4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   16ac4:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   16ac6:	481a      	ldr	r0, [pc, #104]	; (16b30 <bt_le_adv_stop+0x6c>)
   16ac8:	f00c fbe6 	bl	23298 <bt_le_lim_adv_cancel_timeout>
   16acc:	4819      	ldr	r0, [pc, #100]	; (16b34 <bt_le_adv_stop+0x70>)
   16ace:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   16ad2:	f00c fb0f 	bl	230f4 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   16ad6:	4817      	ldr	r0, [pc, #92]	; (16b34 <bt_le_adv_stop+0x70>)
   16ad8:	f00c fb06 	bl	230e8 <atomic_get>
   16adc:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   16ade:	061a      	lsls	r2, r3, #24
   16ae0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   16ae4:	d523      	bpl.n	16b2e <bt_le_adv_stop+0x6a>
   16ae6:	4813      	ldr	r0, [pc, #76]	; (16b34 <bt_le_adv_stop+0x70>)
   16ae8:	f00c fafe 	bl	230e8 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16aec:	0543      	lsls	r3, r0, #21
   16aee:	d514      	bpl.n	16b1a <bt_le_adv_stop+0x56>
	return memcmp(a, b, sizeof(*a));
   16af0:	4911      	ldr	r1, [pc, #68]	; (16b38 <bt_le_adv_stop+0x74>)
   16af2:	4812      	ldr	r0, [pc, #72]	; (16b3c <bt_le_adv_stop+0x78>)
   16af4:	2207      	movs	r2, #7
   16af6:	f00c f936 	bl	22d66 <memcmp>
   16afa:	4b11      	ldr	r3, [pc, #68]	; (16b40 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   16afc:	b998      	cbnz	r0, 16b26 <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   16afe:	4911      	ldr	r1, [pc, #68]	; (16b44 <bt_le_adv_stop+0x80>)
   16b00:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16b02:	7e18      	ldrb	r0, [r3, #24]
   16b04:	f000 fd56 	bl	175b4 <bt_conn_lookup_state_le>
   16b08:	4604      	mov	r4, r0
	if (conn) {
   16b0a:	b130      	cbz	r0, 16b1a <bt_le_adv_stop+0x56>
		conn->err = status;
   16b0c:	2100      	movs	r1, #0
   16b0e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16b10:	f000 fb24 	bl	1715c <bt_conn_set_state>
		bt_conn_unref(conn);
   16b14:	4620      	mov	r0, r4
   16b16:	f00c fc10 	bl	2333a <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   16b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   16b1e:	4804      	ldr	r0, [pc, #16]	; (16b30 <bt_le_adv_stop+0x6c>)
   16b20:	2100      	movs	r1, #0
   16b22:	f00c bb94 	b.w	2324e <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   16b26:	2205      	movs	r2, #5
   16b28:	f103 0121 	add.w	r1, r3, #33	; 0x21
   16b2c:	e7e9      	b.n	16b02 <bt_le_adv_stop+0x3e>
}
   16b2e:	bd10      	pop	{r4, pc}
   16b30:	200003a0 	.word	0x200003a0
   16b34:	200003b0 	.word	0x200003b0
   16b38:	00027408 	.word	0x00027408
   16b3c:	200003a9 	.word	0x200003a9
   16b40:	20000388 	.word	0x20000388
   16b44:	00027401 	.word	0x00027401

00016b48 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   16b48:	b580      	push	{r7, lr}
   16b4a:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   16b4c:	f7ff ffba 	bl	16ac4 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   16b50:	b088      	sub	sp, #32
   16b52:	466a      	mov	r2, sp
   16b54:	4b06      	ldr	r3, [pc, #24]	; (16b70 <adv_timeout+0x28>)
   16b56:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16b5a:	2303      	movs	r3, #3
   16b5c:	f842 3f10 	str.w	r3, [r2, #16]!
   16b60:	4804      	ldr	r0, [pc, #16]	; (16b74 <adv_timeout+0x2c>)
   16b62:	2300      	movs	r3, #0
   16b64:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16b68:	f7fc fa28 	bl	12fbc <z_impl_z_log_msg_static_create>
}
   16b6c:	46bd      	mov	sp, r7
   16b6e:	bd80      	pop	{r7, pc}
   16b70:	00027b07 	.word	0x00027b07
   16b74:	00025f48 	.word	0x00025f48

00016b78 <bt_le_adv_resume>:
{
   16b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16b7a:	4c20      	ldr	r4, [pc, #128]	; (16bfc <bt_le_adv_resume+0x84>)
   16b7c:	4620      	mov	r0, r4
   16b7e:	f00c fab3 	bl	230e8 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   16b82:	0440      	lsls	r0, r0, #17
   16b84:	d538      	bpl.n	16bf8 <bt_le_adv_resume+0x80>
   16b86:	4620      	mov	r0, r4
   16b88:	f00c faae 	bl	230e8 <atomic_get>
   16b8c:	0601      	lsls	r1, r0, #24
   16b8e:	d433      	bmi.n	16bf8 <bt_le_adv_resume+0x80>
   16b90:	4620      	mov	r0, r4
   16b92:	f00c faa9 	bl	230e8 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   16b96:	0542      	lsls	r2, r0, #21
   16b98:	d52e      	bpl.n	16bf8 <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   16b9a:	a901      	add	r1, sp, #4
   16b9c:	f1a4 0010 	sub.w	r0, r4, #16
   16ba0:	f7ff fda8 	bl	166f4 <le_adv_start_add_conn>
	if (err) {
   16ba4:	4605      	mov	r5, r0
   16ba6:	bb38      	cbnz	r0, 16bf8 <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   16ba8:	2101      	movs	r1, #1
   16baa:	f1a4 0010 	sub.w	r0, r4, #16
   16bae:	f00c fb4e 	bl	2324e <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   16bb2:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   16bb4:	b928      	cbnz	r0, 16bc2 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   16bb6:	4630      	mov	r0, r6
}
   16bb8:	b002      	add	sp, #8
   16bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   16bbe:	f00c bbbc 	b.w	2333a <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16bc2:	4629      	mov	r1, r5
   16bc4:	4630      	mov	r0, r6
   16bc6:	f000 fac9 	bl	1715c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16bca:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   16bce:	4620      	mov	r0, r4
   16bd0:	f00c fa90 	bl	230f4 <atomic_and>
   16bd4:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   16bd6:	4630      	mov	r0, r6
   16bd8:	f00c fbaf 	bl	2333a <bt_conn_unref>
	if (persist_paused) {
   16bdc:	046b      	lsls	r3, r5, #17
   16bde:	d50b      	bpl.n	16bf8 <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16be0:	f3bf 8f5b 	dmb	ish
   16be4:	e854 3f00 	ldrex	r3, [r4]
   16be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   16bec:	e844 3200 	strex	r2, r3, [r4]
   16bf0:	2a00      	cmp	r2, #0
   16bf2:	d1f7      	bne.n	16be4 <bt_le_adv_resume+0x6c>
   16bf4:	f3bf 8f5b 	dmb	ish
}
   16bf8:	b002      	add	sp, #8
   16bfa:	bd70      	pop	{r4, r5, r6, pc}
   16bfc:	200003b0 	.word	0x200003b0

00016c00 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   16c00:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   16c02:	4b0b      	ldr	r3, [pc, #44]	; (16c30 <notify_connected+0x30>)
   16c04:	681d      	ldr	r5, [r3, #0]
{
   16c06:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   16c08:	b925      	cbnz	r5, 16c14 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16c0a:	4d0a      	ldr	r5, [pc, #40]	; (16c34 <notify_connected+0x34>)
   16c0c:	4e0a      	ldr	r6, [pc, #40]	; (16c38 <notify_connected+0x38>)
   16c0e:	42b5      	cmp	r5, r6
   16c10:	d307      	bcc.n	16c22 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   16c12:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   16c14:	682b      	ldr	r3, [r5, #0]
   16c16:	b113      	cbz	r3, 16c1e <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   16c18:	7a61      	ldrb	r1, [r4, #9]
   16c1a:	4620      	mov	r0, r4
   16c1c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   16c1e:	696d      	ldr	r5, [r5, #20]
   16c20:	e7f2      	b.n	16c08 <notify_connected+0x8>
		if (cb->connected) {
   16c22:	682b      	ldr	r3, [r5, #0]
   16c24:	b113      	cbz	r3, 16c2c <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   16c26:	7a61      	ldrb	r1, [r4, #9]
   16c28:	4620      	mov	r0, r4
   16c2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   16c2c:	3518      	adds	r5, #24
   16c2e:	e7ee      	b.n	16c0e <notify_connected+0xe>
   16c30:	2000369c 	.word	0x2000369c
   16c34:	00025f18 	.word	0x00025f18
   16c38:	00025f18 	.word	0x00025f18

00016c3c <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   16c3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   16c3e:	4b07      	ldr	r3, [pc, #28]	; (16c5c <bt_conn_create_pdu_timeout.part.0+0x20>)
   16c40:	9305      	str	r3, [sp, #20]
   16c42:	4807      	ldr	r0, [pc, #28]	; (16c60 <bt_conn_create_pdu_timeout.part.0+0x24>)
   16c44:	2302      	movs	r3, #2
   16c46:	aa04      	add	r2, sp, #16
   16c48:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   16c4c:	9304      	str	r3, [sp, #16]
   16c4e:	f00c fb26 	bl	2329e <z_log_msg_static_create.constprop.0>
}
   16c52:	2000      	movs	r0, #0
   16c54:	b007      	add	sp, #28
   16c56:	f85d fb04 	ldr.w	pc, [sp], #4
   16c5a:	bf00      	nop
   16c5c:	00027b2d 	.word	0x00027b2d
   16c60:	00025f58 	.word	0x00025f58

00016c64 <tx_notify>:
{
   16c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   16c68:	4f15      	ldr	r7, [pc, #84]	; (16cc0 <tx_notify+0x5c>)
{
   16c6a:	4604      	mov	r4, r0
	tx->cb = NULL;
   16c6c:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   16c70:	f04f 0240 	mov.w	r2, #64	; 0x40
   16c74:	f3ef 8311 	mrs	r3, BASEPRI
   16c78:	f382 8812 	msr	BASEPRI_MAX, r2
   16c7c:	f3bf 8f6f 	isb	sy
	return list->head;
   16c80:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   16c82:	b929      	cbnz	r1, 16c90 <tx_notify+0x2c>
	__asm__ volatile(
   16c84:	f383 8811 	msr	BASEPRI, r3
   16c88:	f3bf 8f6f 	isb	sy
}
   16c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c90:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   16c92:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   16c94:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16c96:	4281      	cmp	r1, r0
	list->tail = node;
   16c98:	bf08      	it	eq
   16c9a:	6262      	streq	r2, [r4, #36]	; 0x24
   16c9c:	f383 8811 	msr	BASEPRI, r3
   16ca0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   16ca4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   16ca8:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   16cac:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   16cb0:	4638      	mov	r0, r7
   16cb2:	f00e fb20 	bl	252f6 <k_queue_append>
		cb(conn, user_data, 0);
   16cb6:	2200      	movs	r2, #0
   16cb8:	4631      	mov	r1, r6
   16cba:	4620      	mov	r0, r4
   16cbc:	47a8      	blx	r5
	while (1) {
   16cbe:	e7d7      	b.n	16c70 <tx_notify+0xc>
   16cc0:	20000bd4 	.word	0x20000bd4

00016cc4 <conn_tx_destroy>:
{
   16cc4:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   16cc6:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   16cca:	2200      	movs	r2, #0
	tx->user_data = NULL;
   16ccc:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   16cd0:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   16cd2:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   16cd4:	4805      	ldr	r0, [pc, #20]	; (16cec <conn_tx_destroy+0x28>)
   16cd6:	f00e fb0e 	bl	252f6 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   16cda:	4631      	mov	r1, r6
   16cdc:	4620      	mov	r0, r4
   16cde:	462b      	mov	r3, r5
   16ce0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   16ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   16ce8:	4718      	bx	r3
   16cea:	bf00      	nop
   16cec:	20000bd4 	.word	0x20000bd4

00016cf0 <send_frag>:
{
   16cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16cf4:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   16cf6:	698d      	ldr	r5, [r1, #24]
{
   16cf8:	af00      	add	r7, sp, #0
   16cfa:	460e      	mov	r6, r1
   16cfc:	4692      	mov	sl, r2
   16cfe:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   16d00:	f04f 33ff 	mov.w	r3, #4294967295
   16d04:	4850      	ldr	r0, [pc, #320]	; (16e48 <send_frag+0x158>)
   16d06:	f04f 32ff 	mov.w	r2, #4294967295
   16d0a:	f006 feff 	bl	1db0c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   16d0e:	7aa3      	ldrb	r3, [r4, #10]
   16d10:	2b07      	cmp	r3, #7
   16d12:	f040 808c 	bne.w	16e2e <send_frag+0x13e>
	__asm__ volatile(
   16d16:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d1a:	f3ef 8211 	mrs	r2, BASEPRI
   16d1e:	f383 8812 	msr	BASEPRI_MAX, r3
   16d22:	f3bf 8f6f 	isb	sy
	if (tx) {
   16d26:	2d00      	cmp	r5, #0
   16d28:	d058      	beq.n	16ddc <send_frag+0xec>
	parent->next = child;
   16d2a:	2300      	movs	r3, #0
   16d2c:	602b      	str	r3, [r5, #0]
	return list->tail;
   16d2e:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   16d30:	2b00      	cmp	r3, #0
   16d32:	d150      	bne.n	16dd6 <send_frag+0xe6>
	list->head = node;
   16d34:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   16d38:	f382 8811 	msr	BASEPRI, r2
   16d3c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   16d40:	2104      	movs	r1, #4
   16d42:	f106 000c 	add.w	r0, r6, #12
   16d46:	f00d fc0e 	bl	24566 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   16d4a:	8823      	ldrh	r3, [r4, #0]
   16d4c:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   16d50:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   16d54:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   16d58:	8a33      	ldrh	r3, [r6, #16]
   16d5a:	3b04      	subs	r3, #4
   16d5c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16d5e:	2302      	movs	r3, #2
   16d60:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   16d62:	4630      	mov	r0, r6
   16d64:	f7fe fd70 	bl	15848 <bt_send>
	if (err) {
   16d68:	2800      	cmp	r0, #0
   16d6a:	d06a      	beq.n	16e42 <send_frag+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16d6c:	46ea      	mov	sl, sp
   16d6e:	b088      	sub	sp, #32
   16d70:	466a      	mov	r2, sp
   16d72:	4b36      	ldr	r3, [pc, #216]	; (16e4c <send_frag+0x15c>)
   16d74:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16d78:	2303      	movs	r3, #3
   16d7a:	f842 3f10 	str.w	r3, [r2, #16]!
   16d7e:	4834      	ldr	r0, [pc, #208]	; (16e50 <send_frag+0x160>)
   16d80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16d84:	f00c fa8b 	bl	2329e <z_log_msg_static_create.constprop.0>
   16d88:	46d5      	mov	sp, sl
	__asm__ volatile(
   16d8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d8e:	f3ef 8111 	mrs	r1, BASEPRI
   16d92:	f383 8812 	msr	BASEPRI_MAX, r3
   16d96:	f3bf 8f6f 	isb	sy
		if (tx) {
   16d9a:	2d00      	cmp	r5, #0
   16d9c:	d034      	beq.n	16e08 <send_frag+0x118>
	return list->head;
   16d9e:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16da0:	2200      	movs	r2, #0
   16da2:	b153      	cbz	r3, 16dba <send_frag+0xca>
   16da4:	429d      	cmp	r5, r3
   16da6:	d12c      	bne.n	16e02 <send_frag+0x112>
	return node->next;
   16da8:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   16daa:	bb22      	cbnz	r2, 16df6 <send_frag+0x106>
   16dac:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   16dae:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   16db0:	4295      	cmp	r5, r2
   16db2:	d100      	bne.n	16db6 <send_frag+0xc6>
	list->tail = node;
   16db4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   16db6:	2300      	movs	r3, #0
   16db8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   16dba:	f381 8811 	msr	BASEPRI, r1
   16dbe:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   16dc2:	4821      	ldr	r0, [pc, #132]	; (16e48 <send_frag+0x158>)
   16dc4:	f006 fe7c 	bl	1dac0 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   16dc8:	2300      	movs	r3, #0
   16dca:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   16dcc:	4629      	mov	r1, r5
   16dce:	4620      	mov	r0, r4
   16dd0:	f7ff ff78 	bl	16cc4 <conn_tx_destroy>
   16dd4:	e024      	b.n	16e20 <send_frag+0x130>
   16dd6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   16dd8:	61a5      	str	r5, [r4, #24]
}
   16dda:	e7ad      	b.n	16d38 <send_frag+0x48>
	return list->tail;
   16ddc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   16dde:	b133      	cbz	r3, 16dee <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   16de0:	f103 080c 	add.w	r8, r3, #12
   16de4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   16de6:	3301      	adds	r3, #1
   16de8:	f8c8 3000 	str.w	r3, [r8]
   16dec:	e7a4      	b.n	16d38 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   16dee:	69e3      	ldr	r3, [r4, #28]
   16df0:	f104 081c 	add.w	r8, r4, #28
   16df4:	e7f7      	b.n	16de6 <send_frag+0xf6>
	parent->next = child;
   16df6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   16df8:	69a3      	ldr	r3, [r4, #24]
   16dfa:	429d      	cmp	r5, r3
	list->tail = node;
   16dfc:	bf08      	it	eq
   16dfe:	61a2      	streq	r2, [r4, #24]
}
   16e00:	e7d9      	b.n	16db6 <send_frag+0xc6>
	return node->next;
   16e02:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   16e04:	681b      	ldr	r3, [r3, #0]
   16e06:	e7cc      	b.n	16da2 <send_frag+0xb2>
			(*pending_no_cb)--;
   16e08:	f8d8 3000 	ldr.w	r3, [r8]
   16e0c:	3b01      	subs	r3, #1
   16e0e:	f8c8 3000 	str.w	r3, [r8]
   16e12:	f381 8811 	msr	BASEPRI, r1
   16e16:	f3bf 8f6f 	isb	sy
   16e1a:	480b      	ldr	r0, [pc, #44]	; (16e48 <send_frag+0x158>)
   16e1c:	f006 fe50 	bl	1dac0 <z_impl_k_sem_give>
	if (always_consume) {
   16e20:	f1b9 0f00 	cmp.w	r9, #0
   16e24:	d109      	bne.n	16e3a <send_frag+0x14a>
	return false;
   16e26:	2000      	movs	r0, #0
}
   16e28:	46bd      	mov	sp, r7
   16e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16e2e:	4806      	ldr	r0, [pc, #24]	; (16e48 <send_frag+0x158>)
   16e30:	f006 fe46 	bl	1dac0 <z_impl_k_sem_give>
	if (tx) {
   16e34:	2d00      	cmp	r5, #0
   16e36:	d1c7      	bne.n	16dc8 <send_frag+0xd8>
   16e38:	e7f2      	b.n	16e20 <send_frag+0x130>
		net_buf_unref(buf);
   16e3a:	4630      	mov	r0, r6
   16e3c:	f002 ff24 	bl	19c88 <net_buf_unref>
   16e40:	e7f1      	b.n	16e26 <send_frag+0x136>
	return true;
   16e42:	2001      	movs	r0, #1
   16e44:	e7f0      	b.n	16e28 <send_frag+0x138>
   16e46:	bf00      	nop
   16e48:	20000488 	.word	0x20000488
   16e4c:	0002781f 	.word	0x0002781f
   16e50:	00025f58 	.word	0x00025f58

00016e54 <bt_conn_get_pkts>:
}
   16e54:	4800      	ldr	r0, [pc, #0]	; (16e58 <bt_conn_get_pkts+0x4>)
   16e56:	4770      	bx	lr
   16e58:	20000488 	.word	0x20000488

00016e5c <bt_conn_new>:
{
   16e5c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   16e5e:	2200      	movs	r2, #0
   16e60:	4604      	mov	r4, r0
   16e62:	428a      	cmp	r2, r1
   16e64:	d102      	bne.n	16e6c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16e66:	2400      	movs	r4, #0
}
   16e68:	4620      	mov	r0, r4
   16e6a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16e6c:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   16e70:	2001      	movs	r0, #1
   16e72:	f3bf 8f5b 	dmb	ish
   16e76:	e853 5f00 	ldrex	r5, [r3]
   16e7a:	2d00      	cmp	r5, #0
   16e7c:	d104      	bne.n	16e88 <bt_conn_new+0x2c>
   16e7e:	e843 0c00 	strex	ip, r0, [r3]
   16e82:	f1bc 0f00 	cmp.w	ip, #0
   16e86:	d1f6      	bne.n	16e76 <bt_conn_new+0x1a>
   16e88:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   16e8c:	d002      	beq.n	16e94 <bt_conn_new+0x38>
   16e8e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   16e90:	4402      	add	r2, r0
   16e92:	e7e6      	b.n	16e62 <bt_conn_new+0x6>
	if (!conn) {
   16e94:	2c00      	cmp	r4, #0
   16e96:	d0e6      	beq.n	16e66 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   16e98:	22c0      	movs	r2, #192	; 0xc0
   16e9a:	2100      	movs	r1, #0
   16e9c:	4620      	mov	r0, r4
   16e9e:	f00b ff94 	bl	22dca <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   16ea2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   16ea6:	4904      	ldr	r1, [pc, #16]	; (16eb8 <bt_conn_new+0x5c>)
   16ea8:	f00e fb00 	bl	254ac <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   16eac:	4903      	ldr	r1, [pc, #12]	; (16ebc <bt_conn_new+0x60>)
   16eae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   16eb2:	f00e fab7 	bl	25424 <k_work_init>
	return conn;
   16eb6:	e7d7      	b.n	16e68 <bt_conn_new+0xc>
   16eb8:	00017715 	.word	0x00017715
   16ebc:	000232a5 	.word	0x000232a5

00016ec0 <bt_conn_recv>:
{
   16ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ec4:	b086      	sub	sp, #24
   16ec6:	4616      	mov	r6, r2
   16ec8:	af00      	add	r7, sp, #0
   16eca:	4604      	mov	r4, r0
   16ecc:	460d      	mov	r5, r1
	tx_notify(conn);
   16ece:	f7ff fec9 	bl	16c64 <tx_notify>
	switch (flags) {
   16ed2:	2e01      	cmp	r6, #1
   16ed4:	d030      	beq.n	16f38 <bt_conn_recv+0x78>
   16ed6:	2e02      	cmp	r6, #2
   16ed8:	d16a      	bne.n	16fb0 <bt_conn_recv+0xf0>
		if (conn->rx) {
   16eda:	6923      	ldr	r3, [r4, #16]
   16edc:	b163      	cbz	r3, 16ef8 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   16ede:	4b40      	ldr	r3, [pc, #256]	; (16fe0 <bt_conn_recv+0x120>)
   16ee0:	4840      	ldr	r0, [pc, #256]	; (16fe4 <bt_conn_recv+0x124>)
   16ee2:	e9c7 6304 	strd	r6, r3, [r7, #16]
   16ee6:	f107 0210 	add.w	r2, r7, #16
   16eea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16eee:	f00c f9d6 	bl	2329e <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   16ef2:	4620      	mov	r0, r4
   16ef4:	f00c f9d9 	bl	232aa <bt_conn_reset_rx_state>
		conn->rx = buf;
   16ef8:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   16efa:	6921      	ldr	r1, [r4, #16]
   16efc:	8a08      	ldrh	r0, [r1, #16]
   16efe:	2801      	cmp	r0, #1
   16f00:	d930      	bls.n	16f64 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   16f02:	68cb      	ldr	r3, [r1, #12]
   16f04:	881b      	ldrh	r3, [r3, #0]
   16f06:	3304      	adds	r3, #4
   16f08:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   16f0a:	4298      	cmp	r0, r3
   16f0c:	d32a      	bcc.n	16f64 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   16f0e:	d95f      	bls.n	16fd0 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   16f10:	466d      	mov	r5, sp
   16f12:	b088      	sub	sp, #32
   16f14:	466a      	mov	r2, sp
   16f16:	4934      	ldr	r1, [pc, #208]	; (16fe8 <bt_conn_recv+0x128>)
   16f18:	61d3      	str	r3, [r2, #28]
   16f1a:	2304      	movs	r3, #4
   16f1c:	e9c2 1005 	strd	r1, r0, [r2, #20]
   16f20:	f842 3f10 	str.w	r3, [r2, #16]!
   16f24:	482f      	ldr	r0, [pc, #188]	; (16fe4 <bt_conn_recv+0x124>)
   16f26:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   16f2a:	f00c f9b8 	bl	2329e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   16f2e:	4620      	mov	r0, r4
   16f30:	46ad      	mov	sp, r5
   16f32:	f00c f9ba 	bl	232aa <bt_conn_reset_rx_state>
		return;
   16f36:	e015      	b.n	16f64 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   16f38:	6920      	ldr	r0, [r4, #16]
   16f3a:	b970      	cbnz	r0, 16f5a <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   16f3c:	4b2b      	ldr	r3, [pc, #172]	; (16fec <bt_conn_recv+0x12c>)
   16f3e:	617b      	str	r3, [r7, #20]
   16f40:	2302      	movs	r3, #2
   16f42:	4828      	ldr	r0, [pc, #160]	; (16fe4 <bt_conn_recv+0x124>)
   16f44:	613b      	str	r3, [r7, #16]
   16f46:	f107 0210 	add.w	r2, r7, #16
   16f4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f4e:	f00c f9a6 	bl	2329e <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   16f52:	4620      	mov	r0, r4
   16f54:	f00c f9a9 	bl	232aa <bt_conn_reset_rx_state>
   16f58:	e001      	b.n	16f5e <bt_conn_recv+0x9e>
		if (!buf->len) {
   16f5a:	8a2e      	ldrh	r6, [r5, #16]
   16f5c:	b936      	cbnz	r6, 16f6c <bt_conn_recv+0xac>
		net_buf_unref(buf);
   16f5e:	4628      	mov	r0, r5
   16f60:	f002 fe92 	bl	19c88 <net_buf_unref>
}
   16f64:	3718      	adds	r7, #24
   16f66:	46bd      	mov	sp, r7
   16f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   16f6c:	300c      	adds	r0, #12
   16f6e:	f00d fb1e 	bl	245ae <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   16f72:	4286      	cmp	r6, r0
   16f74:	d912      	bls.n	16f9c <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   16f76:	4b1e      	ldr	r3, [pc, #120]	; (16ff0 <bt_conn_recv+0x130>)
   16f78:	617b      	str	r3, [r7, #20]
   16f7a:	2302      	movs	r3, #2
   16f7c:	613b      	str	r3, [r7, #16]
   16f7e:	4819      	ldr	r0, [pc, #100]	; (16fe4 <bt_conn_recv+0x124>)
   16f80:	f107 0210 	add.w	r2, r7, #16
   16f84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16f88:	f00c f989 	bl	2329e <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   16f8c:	2200      	movs	r2, #0
   16f8e:	6921      	ldr	r1, [r4, #16]
   16f90:	4620      	mov	r0, r4
   16f92:	f000 fe27 	bl	17be4 <bt_l2cap_recv>
			conn->rx = NULL;
   16f96:	2300      	movs	r3, #0
   16f98:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   16f9a:	e7e0      	b.n	16f5e <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   16f9c:	6920      	ldr	r0, [r4, #16]
   16f9e:	8a2a      	ldrh	r2, [r5, #16]
   16fa0:	68e9      	ldr	r1, [r5, #12]
   16fa2:	300c      	adds	r0, #12
   16fa4:	f00d face 	bl	24544 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   16fa8:	4628      	mov	r0, r5
   16faa:	f002 fe6d 	bl	19c88 <net_buf_unref>
		break;
   16fae:	e7a4      	b.n	16efa <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   16fb0:	46e8      	mov	r8, sp
   16fb2:	b088      	sub	sp, #32
   16fb4:	466a      	mov	r2, sp
   16fb6:	4b0f      	ldr	r3, [pc, #60]	; (16ff4 <bt_conn_recv+0x134>)
   16fb8:	480a      	ldr	r0, [pc, #40]	; (16fe4 <bt_conn_recv+0x124>)
	switch (flags) {
   16fba:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   16fbe:	2303      	movs	r3, #3
   16fc0:	f842 3f10 	str.w	r3, [r2, #16]!
   16fc4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16fc8:	f00c f969 	bl	2329e <z_log_msg_static_create.constprop.0>
   16fcc:	46c5      	mov	sp, r8
   16fce:	e7c0      	b.n	16f52 <bt_conn_recv+0x92>
	conn->rx = NULL;
   16fd0:	2300      	movs	r3, #0
   16fd2:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   16fd4:	2201      	movs	r2, #1
   16fd6:	4620      	mov	r0, r4
   16fd8:	f000 fe04 	bl	17be4 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   16fdc:	e7c2      	b.n	16f64 <bt_conn_recv+0xa4>
   16fde:	bf00      	nop
   16fe0:	00027b56 	.word	0x00027b56
   16fe4:	00025f58 	.word	0x00025f58
   16fe8:	00027bd6 	.word	0x00027bd6
   16fec:	00027b73 	.word	0x00027b73
   16ff0:	00027b91 	.word	0x00027b91
   16ff4:	00027bb8 	.word	0x00027bb8

00016ff8 <bt_conn_send_cb>:
{
   16ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ffc:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   16ffe:	7a83      	ldrb	r3, [r0, #10]
   17000:	2b07      	cmp	r3, #7
{
   17002:	b086      	sub	sp, #24
   17004:	4605      	mov	r5, r0
   17006:	460f      	mov	r7, r1
   17008:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1700a:	d00c      	beq.n	17026 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   1700c:	4b28      	ldr	r3, [pc, #160]	; (170b0 <bt_conn_send_cb+0xb8>)
   1700e:	9305      	str	r3, [sp, #20]
   17010:	4828      	ldr	r0, [pc, #160]	; (170b4 <bt_conn_send_cb+0xbc>)
   17012:	2302      	movs	r3, #2
   17014:	aa04      	add	r2, sp, #16
   17016:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1701a:	9304      	str	r3, [sp, #16]
   1701c:	f00c f93f 	bl	2329e <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   17020:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17024:	e01d      	b.n	17062 <bt_conn_send_cb+0x6a>
	if (cb) {
   17026:	2a00      	cmp	r2, #0
   17028:	d040      	beq.n	170ac <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   1702a:	f007 fa49 	bl	1e4c0 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1702e:	4b22      	ldr	r3, [pc, #136]	; (170b8 <bt_conn_send_cb+0xc0>)
   17030:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   17032:	4822      	ldr	r0, [pc, #136]	; (170bc <bt_conn_send_cb+0xc4>)
   17034:	bf07      	ittee	eq
   17036:	2200      	moveq	r2, #0
   17038:	2300      	moveq	r3, #0
   1703a:	f04f 32ff 	movne.w	r2, #4294967295
   1703e:	f04f 33ff 	movne.w	r3, #4294967295
   17042:	f006 fd09 	bl	1da58 <z_impl_k_queue_get>
   17046:	4604      	mov	r4, r0
		if (!tx) {
   17048:	b970      	cbnz	r0, 17068 <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   1704a:	4b1d      	ldr	r3, [pc, #116]	; (170c0 <bt_conn_send_cb+0xc8>)
   1704c:	4819      	ldr	r0, [pc, #100]	; (170b4 <bt_conn_send_cb+0xbc>)
   1704e:	9305      	str	r3, [sp, #20]
   17050:	aa04      	add	r2, sp, #16
   17052:	2302      	movs	r3, #2
   17054:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17058:	9304      	str	r3, [sp, #16]
   1705a:	f00c f920 	bl	2329e <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   1705e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17062:	b006      	add	sp, #24
   17064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   17068:	7aab      	ldrb	r3, [r5, #10]
   1706a:	2b07      	cmp	r3, #7
   1706c:	d012      	beq.n	17094 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   1706e:	4b15      	ldr	r3, [pc, #84]	; (170c4 <bt_conn_send_cb+0xcc>)
   17070:	9305      	str	r3, [sp, #20]
   17072:	4810      	ldr	r0, [pc, #64]	; (170b4 <bt_conn_send_cb+0xbc>)
   17074:	2302      	movs	r3, #2
   17076:	aa04      	add	r2, sp, #16
   17078:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1707c:	9304      	str	r3, [sp, #16]
   1707e:	f00c f90e 	bl	2329e <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   17082:	2300      	movs	r3, #0
	tx->user_data = NULL;
   17084:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   17088:	480c      	ldr	r0, [pc, #48]	; (170bc <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1708a:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1708c:	4621      	mov	r1, r4
   1708e:	f00e f932 	bl	252f6 <k_queue_append>
}
   17092:	e7c5      	b.n	17020 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   17094:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   17098:	2300      	movs	r3, #0
   1709a:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   1709c:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   170a0:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   170a2:	4639      	mov	r1, r7
   170a4:	f00d fa20 	bl	244e8 <net_buf_put>
	return 0;
   170a8:	2000      	movs	r0, #0
   170aa:	e7da      	b.n	17062 <bt_conn_send_cb+0x6a>
   170ac:	4614      	mov	r4, r2
   170ae:	e7f5      	b.n	1709c <bt_conn_send_cb+0xa4>
   170b0:	00027bf1 	.word	0x00027bf1
   170b4:	00025f58 	.word	0x00025f58
   170b8:	20002ff0 	.word	0x20002ff0
   170bc:	20000bd4 	.word	0x20000bd4
   170c0:	00027c00 	.word	0x00027c00
   170c4:	00027c1e 	.word	0x00027c1e

000170c8 <bt_conn_prepare_events>:
{
   170c8:	b570      	push	{r4, r5, r6, lr}
   170ca:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   170cc:	481c      	ldr	r0, [pc, #112]	; (17140 <bt_conn_prepare_events+0x78>)
   170ce:	f00e fd3a 	bl	25b46 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   170d2:	4b1b      	ldr	r3, [pc, #108]	; (17140 <bt_conn_prepare_events+0x78>)
   170d4:	2200      	movs	r2, #0
   170d6:	4620      	mov	r0, r4
   170d8:	2101      	movs	r1, #1
   170da:	f00e fd17 	bl	25b0c <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   170de:	f3bf 8f5b 	dmb	ish
   170e2:	4a18      	ldr	r2, [pc, #96]	; (17144 <bt_conn_prepare_events+0x7c>)
   170e4:	6813      	ldr	r3, [r2, #0]
   170e6:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   170ea:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   170ee:	b90b      	cbnz	r3, 170f4 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   170f0:	2001      	movs	r0, #1
}
   170f2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   170f4:	f1a2 03c0 	sub.w	r3, r2, #192	; 0xc0
   170f8:	f812 2cb6 	ldrb.w	r2, [r2, #-182]
   170fc:	b992      	cbnz	r2, 17124 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   170fe:	f3bf 8f5b 	dmb	ish
   17102:	1d1a      	adds	r2, r3, #4
   17104:	e852 1f00 	ldrex	r1, [r2]
   17108:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   1710c:	e842 5600 	strex	r6, r5, [r2]
   17110:	2e00      	cmp	r6, #0
   17112:	d1f7      	bne.n	17104 <bt_conn_prepare_events+0x3c>
   17114:	f3bf 8f5b 	dmb	ish
   17118:	064a      	lsls	r2, r1, #25
   1711a:	d503      	bpl.n	17124 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   1711c:	4618      	mov	r0, r3
   1711e:	f00c f8cd 	bl	232bc <conn_cleanup>
		return -ENOTCONN;
   17122:	e7e5      	b.n	170f0 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   17124:	7a9b      	ldrb	r3, [r3, #10]
   17126:	2b07      	cmp	r3, #7
   17128:	d1e2      	bne.n	170f0 <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   1712a:	4b07      	ldr	r3, [pc, #28]	; (17148 <bt_conn_prepare_events+0x80>)
   1712c:	2200      	movs	r2, #0
   1712e:	2104      	movs	r1, #4
   17130:	f00e fcec 	bl	25b0c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   17134:	2301      	movs	r3, #1
   17136:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1713a:	2002      	movs	r0, #2
	return ev_count;
   1713c:	e7d9      	b.n	170f2 <bt_conn_prepare_events+0x2a>
   1713e:	bf00      	nop
   17140:	2000077c 	.word	0x2000077c
   17144:	200024d8 	.word	0x200024d8
   17148:	20002450 	.word	0x20002450

0001714c <bt_conn_lookup_handle>:
{
   1714c:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1714e:	2101      	movs	r1, #1
   17150:	4801      	ldr	r0, [pc, #4]	; (17158 <bt_conn_lookup_handle+0xc>)
   17152:	f00c b90e 	b.w	23372 <conn_lookup_handle>
   17156:	bf00      	nop
   17158:	20002418 	.word	0x20002418

0001715c <bt_conn_set_state>:
{
   1715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   1715e:	7a86      	ldrb	r6, [r0, #10]
   17160:	428e      	cmp	r6, r1
{
   17162:	af00      	add	r7, sp, #0
   17164:	4604      	mov	r4, r0
   17166:	460d      	mov	r5, r1
	if (conn->state == state) {
   17168:	d118      	bne.n	1719c <bt_conn_set_state+0x40>
	switch (state) {
   1716a:	2e08      	cmp	r6, #8
   1716c:	bf96      	itet	ls
   1716e:	4b6d      	ldrls	r3, [pc, #436]	; (17324 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   17170:	4b6d      	ldrhi	r3, [pc, #436]	; (17328 <bt_conn_set_state+0x1cc>)
   17172:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   17176:	466c      	mov	r4, sp
   17178:	b088      	sub	sp, #32
   1717a:	466a      	mov	r2, sp
   1717c:	496b      	ldr	r1, [pc, #428]	; (1732c <bt_conn_set_state+0x1d0>)
   1717e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17182:	f44f 7300 	mov.w	r3, #512	; 0x200
   17186:	8393      	strh	r3, [r2, #28]
   17188:	4b69      	ldr	r3, [pc, #420]	; (17330 <bt_conn_set_state+0x1d4>)
   1718a:	f842 3f10 	str.w	r3, [r2, #16]!
   1718e:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   17192:	4868      	ldr	r0, [pc, #416]	; (17334 <bt_conn_set_state+0x1d8>)
   17194:	f00c f883 	bl	2329e <z_log_msg_static_create.constprop.0>
   17198:	46a5      	mov	sp, r4
   1719a:	e043      	b.n	17224 <bt_conn_set_state+0xc8>
	conn->state = state;
   1719c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1719e:	b926      	cbnz	r6, 171aa <bt_conn_set_state+0x4e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   171a0:	7883      	ldrb	r3, [r0, #2]
   171a2:	2b08      	cmp	r3, #8
   171a4:	d001      	beq.n	171aa <bt_conn_set_state+0x4e>
			bt_conn_ref(conn);
   171a6:	f00c f8ac 	bl	23302 <bt_conn_ref>
	switch (conn->state) {
   171aa:	7aa3      	ldrb	r3, [r4, #10]
   171ac:	2b08      	cmp	r3, #8
   171ae:	f200 80b3 	bhi.w	17318 <bt_conn_set_state+0x1bc>
   171b2:	e8df f003 	tbb	[pc, r3]
   171b6:	0539      	.short	0x0539
   171b8:	37373737 	.word	0x37373737
   171bc:	1c37      	.short	0x1c37
   171be:	37          	.byte	0x37
   171bf:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   171c0:	4d5d      	ldr	r5, [pc, #372]	; (17338 <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
   171c2:	2600      	movs	r6, #0
	__asm__ volatile(
   171c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   171c8:	f3ef 8311 	mrs	r3, BASEPRI
   171cc:	f382 8812 	msr	BASEPRI_MAX, r2
   171d0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   171d4:	69e2      	ldr	r2, [r4, #28]
   171d6:	2a00      	cmp	r2, #0
   171d8:	d07a      	beq.n	172d0 <bt_conn_set_state+0x174>
			conn->pending_no_cb--;
   171da:	3a01      	subs	r2, #1
   171dc:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   171de:	f383 8811 	msr	BASEPRI, r3
   171e2:	f3bf 8f6f 	isb	sy
   171e6:	4628      	mov	r0, r5
   171e8:	f006 fc6a 	bl	1dac0 <z_impl_k_sem_give>
}
   171ec:	e7ea      	b.n	171c4 <bt_conn_set_state+0x68>
		if (conn->type == BT_CONN_TYPE_SCO) {
   171ee:	78a3      	ldrb	r3, [r4, #2]
   171f0:	2b04      	cmp	r3, #4
   171f2:	d017      	beq.n	17224 <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   171f4:	f104 0038 	add.w	r0, r4, #56	; 0x38
   171f8:	f00e f871 	bl	252de <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   171fc:	484f      	ldr	r0, [pc, #316]	; (1733c <bt_conn_set_state+0x1e0>)
   171fe:	2100      	movs	r1, #0
   17200:	f007 fc42 	bl	1ea88 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   17204:	2300      	movs	r3, #0
	list->tail = NULL;
   17206:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1720a:	78e3      	ldrb	r3, [r4, #3]
   1720c:	2b01      	cmp	r3, #1
   1720e:	d109      	bne.n	17224 <bt_conn_set_state+0xc8>
			conn->le.conn_param_retry_countdown =
   17210:	2303      	movs	r3, #3
   17212:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   17216:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1721a:	2300      	movs	r3, #0
   1721c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17220:	f006 fe32 	bl	1de88 <k_work_schedule>
}
   17224:	46bd      	mov	sp, r7
   17226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   17228:	78a3      	ldrb	r3, [r4, #2]
   1722a:	2b04      	cmp	r3, #4
   1722c:	d103      	bne.n	17236 <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   1722e:	4620      	mov	r0, r4
   17230:	f00c f883 	bl	2333a <bt_conn_unref>
			break;
   17234:	e7f6      	b.n	17224 <bt_conn_set_state+0xc8>
		switch (old_state) {
   17236:	2e08      	cmp	r6, #8
   17238:	d8f4      	bhi.n	17224 <bt_conn_set_state+0xc8>
   1723a:	a301      	add	r3, pc, #4	; (adr r3, 17240 <bt_conn_set_state+0xe4>)
   1723c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   17240:	000172b9 	.word	0x000172b9
   17244:	00017265 	.word	0x00017265
   17248:	000172ab 	.word	0x000172ab
   1724c:	0001722f 	.word	0x0001722f
   17250:	0001722f 	.word	0x0001722f
   17254:	000172ab 	.word	0x000172ab
   17258:	000172ab 	.word	0x000172ab
   1725c:	00017225 	.word	0x00017225
   17260:	000172b9 	.word	0x000172b9
			tx_notify(conn);
   17264:	4620      	mov	r0, r4
   17266:	f7ff fcfd 	bl	16c64 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1726a:	78a3      	ldrb	r3, [r4, #2]
   1726c:	2b01      	cmp	r3, #1
   1726e:	d10a      	bne.n	17286 <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   17270:	f104 0558 	add.w	r5, r4, #88	; 0x58
   17274:	4628      	mov	r0, r5
   17276:	f00e f925 	bl	254c4 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1727a:	f010 0f0c 	tst.w	r0, #12
   1727e:	d002      	beq.n	17286 <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   17280:	4628      	mov	r0, r5
   17282:	f00e f921 	bl	254c8 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17286:	f3bf 8f5b 	dmb	ish
   1728a:	3404      	adds	r4, #4
   1728c:	e854 3f00 	ldrex	r3, [r4]
   17290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17294:	e844 3200 	strex	r2, r3, [r4]
   17298:	2a00      	cmp	r2, #0
   1729a:	d1f7      	bne.n	1728c <bt_conn_set_state+0x130>
   1729c:	f3bf 8f5b 	dmb	ish
   172a0:	2100      	movs	r1, #0
   172a2:	4826      	ldr	r0, [pc, #152]	; (1733c <bt_conn_set_state+0x1e0>)
   172a4:	f007 fbf0 	bl	1ea88 <z_impl_k_poll_signal_raise>
   172a8:	e7bc      	b.n	17224 <bt_conn_set_state+0xc8>
			if (conn->err) {
   172aa:	7a63      	ldrb	r3, [r4, #9]
   172ac:	2b00      	cmp	r3, #0
   172ae:	d0be      	beq.n	1722e <bt_conn_set_state+0xd2>
				notify_connected(conn);
   172b0:	4620      	mov	r0, r4
   172b2:	f7ff fca5 	bl	16c00 <notify_connected>
   172b6:	e7ba      	b.n	1722e <bt_conn_set_state+0xd2>
			LOG_WRN("Invalid (%u) old state", state);
   172b8:	466c      	mov	r4, sp
   172ba:	b088      	sub	sp, #32
   172bc:	466a      	mov	r2, sp
   172be:	4b20      	ldr	r3, [pc, #128]	; (17340 <bt_conn_set_state+0x1e4>)
		LOG_WRN("no valid (%u) state was set", state);
   172c0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   172c4:	2303      	movs	r3, #3
   172c6:	f842 3f10 	str.w	r3, [r2, #16]!
   172ca:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   172ce:	e760      	b.n	17192 <bt_conn_set_state+0x36>
	return list->head;
   172d0:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   172d2:	b921      	cbnz	r1, 172de <bt_conn_set_state+0x182>
   172d4:	f383 8811 	msr	BASEPRI, r3
   172d8:	f3bf 8f6f 	isb	sy
		if (!node) {
   172dc:	e7a2      	b.n	17224 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   172de:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   172e0:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   172e2:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   172e4:	4281      	cmp	r1, r0
	list->tail = node;
   172e6:	bf08      	it	eq
   172e8:	61a2      	streq	r2, [r4, #24]
   172ea:	f383 8811 	msr	BASEPRI, r3
   172ee:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   172f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   172f6:	f3ef 8311 	mrs	r3, BASEPRI
   172fa:	f382 8812 	msr	BASEPRI_MAX, r2
   172fe:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   17302:	68ca      	ldr	r2, [r1, #12]
   17304:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   17306:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   17308:	f383 8811 	msr	BASEPRI, r3
   1730c:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   17310:	4620      	mov	r0, r4
   17312:	f7ff fcd7 	bl	16cc4 <conn_tx_destroy>
   17316:	e766      	b.n	171e6 <bt_conn_set_state+0x8a>
		LOG_WRN("no valid (%u) state was set", state);
   17318:	466c      	mov	r4, sp
   1731a:	b088      	sub	sp, #32
   1731c:	466a      	mov	r2, sp
   1731e:	4b09      	ldr	r3, [pc, #36]	; (17344 <bt_conn_set_state+0x1e8>)
   17320:	e7ce      	b.n	172c0 <bt_conn_set_state+0x164>
   17322:	bf00      	nop
   17324:	00026300 	.word	0x00026300
   17328:	00027c44 	.word	0x00027c44
   1732c:	00027c4e 	.word	0x00027c4e
   17330:	01000003 	.word	0x01000003
   17334:	00025f58 	.word	0x00025f58
   17338:	20000488 	.word	0x20000488
   1733c:	2000077c 	.word	0x2000077c
   17340:	00027c5f 	.word	0x00027c5f
   17344:	00027c76 	.word	0x00027c76

00017348 <bt_conn_index>:
		index = conn - acl_conns;
   17348:	4b03      	ldr	r3, [pc, #12]	; (17358 <bt_conn_index+0x10>)
   1734a:	1ac0      	subs	r0, r0, r3
   1734c:	4b03      	ldr	r3, [pc, #12]	; (1735c <bt_conn_index+0x14>)
   1734e:	10c0      	asrs	r0, r0, #3
   17350:	4358      	muls	r0, r3
}
   17352:	b2c0      	uxtb	r0, r0
   17354:	4770      	bx	lr
   17356:	bf00      	nop
   17358:	20002418 	.word	0x20002418
   1735c:	c28f5c29 	.word	0xc28f5c29

00017360 <bt_conn_create_pdu_timeout>:
{
   17360:	b538      	push	{r3, r4, r5, lr}
   17362:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   17364:	4908      	ldr	r1, [pc, #32]	; (17388 <bt_conn_create_pdu_timeout+0x28>)
   17366:	2800      	cmp	r0, #0
   17368:	bf08      	it	eq
   1736a:	4608      	moveq	r0, r1
   1736c:	f00d f884 	bl	24478 <net_buf_alloc_fixed>
	if (!buf) {
   17370:	4604      	mov	r4, r0
   17372:	b918      	cbnz	r0, 1737c <bt_conn_create_pdu_timeout+0x1c>
}
   17374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   17378:	f7ff bc60 	b.w	16c3c <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   1737c:	1d29      	adds	r1, r5, #4
   1737e:	300c      	adds	r0, #12
   17380:	f00d f881 	bl	24486 <net_buf_simple_reserve>
   17384:	4620      	mov	r0, r4
   17386:	bd38      	pop	{r3, r4, r5, pc}
   17388:	20000bec 	.word	0x20000bec

0001738c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1738e:	f3bf 8f5b 	dmb	ish
   17392:	6842      	ldr	r2, [r0, #4]
   17394:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   17398:	0592      	lsls	r2, r2, #22
{
   1739a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1739c:	f100 0304 	add.w	r3, r0, #4
   173a0:	d519      	bpl.n	173d6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   173a2:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   173a6:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   173aa:	4291      	cmp	r1, r2
   173ac:	d813      	bhi.n	173d6 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   173ae:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   173b2:	4291      	cmp	r1, r2
   173b4:	d30f      	bcc.n	173d6 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   173b6:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   173ba:	4291      	cmp	r1, r2
   173bc:	d10b      	bne.n	173d6 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   173be:	f3bf 8f5b 	dmb	ish
   173c2:	e853 1f00 	ldrex	r1, [r3]
   173c6:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   173ca:	e843 1200 	strex	r2, r1, [r3]
   173ce:	2a00      	cmp	r2, #0
   173d0:	d1f7      	bne.n	173c2 <notify_le_param_updated+0x36>
   173d2:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   173d6:	4b10      	ldr	r3, [pc, #64]	; (17418 <notify_le_param_updated+0x8c>)
   173d8:	681d      	ldr	r5, [r3, #0]
   173da:	b925      	cbnz	r5, 173e6 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   173dc:	4d0f      	ldr	r5, [pc, #60]	; (1741c <notify_le_param_updated+0x90>)
   173de:	4f10      	ldr	r7, [pc, #64]	; (17420 <notify_le_param_updated+0x94>)
   173e0:	42bd      	cmp	r5, r7
   173e2:	d30c      	bcc.n	173fe <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   173e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   173e6:	68ee      	ldr	r6, [r5, #12]
   173e8:	b13e      	cbz	r6, 173fa <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   173ea:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   173ee:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   173f2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   173f6:	4620      	mov	r0, r4
   173f8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   173fa:	696d      	ldr	r5, [r5, #20]
   173fc:	e7ed      	b.n	173da <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   173fe:	68ee      	ldr	r6, [r5, #12]
   17400:	b13e      	cbz	r6, 17412 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   17402:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   17406:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1740a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1740e:	4620      	mov	r0, r4
   17410:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17412:	3518      	adds	r5, #24
   17414:	e7e4      	b.n	173e0 <notify_le_param_updated+0x54>
   17416:	bf00      	nop
   17418:	2000369c 	.word	0x2000369c
   1741c:	00025f18 	.word	0x00025f18
   17420:	00025f18 	.word	0x00025f18

00017424 <notify_le_phy_updated>:
}
#endif

#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
   17424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   17426:	4b0d      	ldr	r3, [pc, #52]	; (1745c <notify_le_phy_updated+0x38>)
   17428:	681d      	ldr	r5, [r3, #0]
{
   1742a:	4604      	mov	r4, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   1742c:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
	for (cb = callback_list; cb; cb = cb->_next) {
   17430:	b935      	cbnz	r5, 17440 <notify_le_phy_updated+0x1c>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17432:	4d0b      	ldr	r5, [pc, #44]	; (17460 <notify_le_phy_updated+0x3c>)
   17434:	4e0b      	ldr	r6, [pc, #44]	; (17464 <notify_le_phy_updated+0x40>)
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
   17436:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1743a:	42b5      	cmp	r5, r6
   1743c:	d307      	bcc.n	1744e <notify_le_phy_updated+0x2a>
		}
	}
}
   1743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_phy_updated) {
   17440:	692b      	ldr	r3, [r5, #16]
   17442:	b113      	cbz	r3, 1744a <notify_le_phy_updated+0x26>
			cb->le_phy_updated(conn, &conn->le.phy);
   17444:	4631      	mov	r1, r6
   17446:	4620      	mov	r0, r4
   17448:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1744a:	696d      	ldr	r5, [r5, #20]
   1744c:	e7f0      	b.n	17430 <notify_le_phy_updated+0xc>
		if (cb->le_phy_updated) {
   1744e:	692b      	ldr	r3, [r5, #16]
   17450:	b113      	cbz	r3, 17458 <notify_le_phy_updated+0x34>
			cb->le_phy_updated(conn, &conn->le.phy);
   17452:	4639      	mov	r1, r7
   17454:	4620      	mov	r0, r4
   17456:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17458:	3518      	adds	r5, #24
   1745a:	e7ee      	b.n	1743a <notify_le_phy_updated+0x16>
   1745c:	2000369c 	.word	0x2000369c
   17460:	00025f18 	.word	0x00025f18
   17464:	00025f18 	.word	0x00025f18

00017468 <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   17468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1746c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1746e:	4608      	mov	r0, r1
{
   17470:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   17472:	f00b fdb7 	bl	22fe4 <bt_le_conn_params_valid>
   17476:	4605      	mov	r5, r0
   17478:	b918      	cbnz	r0, 17482 <le_param_req+0x1a>
		return false;
   1747a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1747c:	4628      	mov	r0, r5
   1747e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   17482:	4b13      	ldr	r3, [pc, #76]	; (174d0 <le_param_req+0x68>)
   17484:	681e      	ldr	r6, [r3, #0]
   17486:	b946      	cbnz	r6, 1749a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17488:	4e12      	ldr	r6, [pc, #72]	; (174d4 <le_param_req+0x6c>)
   1748a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 174d8 <le_param_req+0x70>
   1748e:	4546      	cmp	r6, r8
   17490:	d2f4      	bcs.n	1747c <le_param_req+0x14>
		if (!cb->le_param_req) {
   17492:	68b3      	ldr	r3, [r6, #8]
   17494:	b983      	cbnz	r3, 174b8 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17496:	3618      	adds	r6, #24
   17498:	e7f9      	b.n	1748e <le_param_req+0x26>
		if (!cb->le_param_req) {
   1749a:	68b3      	ldr	r3, [r6, #8]
   1749c:	b90b      	cbnz	r3, 174a2 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   1749e:	6976      	ldr	r6, [r6, #20]
   174a0:	e7f1      	b.n	17486 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   174a2:	4621      	mov	r1, r4
   174a4:	4638      	mov	r0, r7
   174a6:	4798      	blx	r3
   174a8:	2800      	cmp	r0, #0
   174aa:	d0e6      	beq.n	1747a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   174ac:	4620      	mov	r0, r4
   174ae:	f00b fd99 	bl	22fe4 <bt_le_conn_params_valid>
   174b2:	2800      	cmp	r0, #0
   174b4:	d1f3      	bne.n	1749e <le_param_req+0x36>
   174b6:	e7e0      	b.n	1747a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   174b8:	4621      	mov	r1, r4
   174ba:	4638      	mov	r0, r7
   174bc:	4798      	blx	r3
   174be:	2800      	cmp	r0, #0
   174c0:	d0db      	beq.n	1747a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   174c2:	4620      	mov	r0, r4
   174c4:	f00b fd8e 	bl	22fe4 <bt_le_conn_params_valid>
   174c8:	2800      	cmp	r0, #0
   174ca:	d1e4      	bne.n	17496 <le_param_req+0x2e>
   174cc:	e7d5      	b.n	1747a <le_param_req+0x12>
   174ce:	bf00      	nop
   174d0:	2000369c 	.word	0x2000369c
   174d4:	00025f18 	.word	0x00025f18
   174d8:	00025f18 	.word	0x00025f18

000174dc <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   174dc:	4b02      	ldr	r3, [pc, #8]	; (174e8 <bt_conn_cb_register+0xc>)
   174de:	681a      	ldr	r2, [r3, #0]
   174e0:	6142      	str	r2, [r0, #20]
	callback_list = cb;
   174e2:	6018      	str	r0, [r3, #0]
}
   174e4:	4770      	bx	lr
   174e6:	bf00      	nop
   174e8:	2000369c 	.word	0x2000369c

000174ec <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   174ec:	b570      	push	{r4, r5, r6, lr}
   174ee:	4606      	mov	r6, r0
   174f0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   174f2:	4809      	ldr	r0, [pc, #36]	; (17518 <bt_conn_add_le+0x2c>)
   174f4:	2101      	movs	r1, #1
   174f6:	f7ff fcb1 	bl	16e5c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   174fa:	4604      	mov	r4, r0
   174fc:	b150      	cbz	r0, 17514 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   174fe:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   17500:	2207      	movs	r2, #7
   17502:	4629      	mov	r1, r5
   17504:	3088      	adds	r0, #136	; 0x88
   17506:	f00b fc55 	bl	22db4 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1750a:	2301      	movs	r3, #1
   1750c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1750e:	4b03      	ldr	r3, [pc, #12]	; (1751c <bt_conn_add_le+0x30>)
   17510:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   17514:	4620      	mov	r0, r4
   17516:	bd70      	pop	{r4, r5, r6, pc}
   17518:	20002418 	.word	0x20002418
   1751c:	00280018 	.word	0x00280018

00017520 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   17520:	b570      	push	{r4, r5, r6, lr}
   17522:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17524:	480a      	ldr	r0, [pc, #40]	; (17550 <bt_conn_lookup_addr_le+0x30>)
{
   17526:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   17528:	f00b feeb 	bl	23302 <bt_conn_ref>
   1752c:	4604      	mov	r4, r0

		if (!conn) {
   1752e:	b120      	cbz	r0, 1753a <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   17530:	7883      	ldrb	r3, [r0, #2]
   17532:	2b01      	cmp	r3, #1
   17534:	d004      	beq.n	17540 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   17536:	f00b ff00 	bl	2333a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1753a:	2400      	movs	r4, #0
}
   1753c:	4620      	mov	r0, r4
   1753e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   17540:	4632      	mov	r2, r6
   17542:	4629      	mov	r1, r5
   17544:	f00b ff42 	bl	233cc <bt_conn_is_peer_addr_le>
   17548:	2800      	cmp	r0, #0
   1754a:	d1f7      	bne.n	1753c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1754c:	4620      	mov	r0, r4
   1754e:	e7f2      	b.n	17536 <bt_conn_lookup_addr_le+0x16>
   17550:	20002418 	.word	0x20002418

00017554 <bt_conn_exists_le>:
{
   17554:	b5b0      	push	{r4, r5, r7, lr}
   17556:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   17558:	f7ff ffe2 	bl	17520 <bt_conn_lookup_addr_le>
	if (conn) {
   1755c:	4604      	mov	r4, r0
   1755e:	b1e0      	cbz	r0, 1759a <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   17560:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   17562:	2b08      	cmp	r3, #8
   17564:	bf96      	itet	ls
   17566:	4a0e      	ldrls	r2, [pc, #56]	; (175a0 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   17568:	4b0e      	ldrhi	r3, [pc, #56]	; (175a4 <bt_conn_exists_le+0x50>)
   1756a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1756e:	466d      	mov	r5, sp
   17570:	b088      	sub	sp, #32
   17572:	466a      	mov	r2, sp
   17574:	490c      	ldr	r1, [pc, #48]	; (175a8 <bt_conn_exists_le+0x54>)
   17576:	480d      	ldr	r0, [pc, #52]	; (175ac <bt_conn_exists_le+0x58>)
   17578:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1757c:	f44f 7300 	mov.w	r3, #512	; 0x200
   17580:	8393      	strh	r3, [r2, #28]
   17582:	4b0b      	ldr	r3, [pc, #44]	; (175b0 <bt_conn_exists_le+0x5c>)
   17584:	f842 3f10 	str.w	r3, [r2, #16]!
   17588:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   1758c:	f00b fe87 	bl	2329e <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   17590:	4620      	mov	r0, r4
   17592:	46ad      	mov	sp, r5
   17594:	f00b fed1 	bl	2333a <bt_conn_unref>
		return true;
   17598:	2001      	movs	r0, #1
}
   1759a:	46bd      	mov	sp, r7
   1759c:	bdb0      	pop	{r4, r5, r7, pc}
   1759e:	bf00      	nop
   175a0:	00026300 	.word	0x00026300
   175a4:	00027c44 	.word	0x00027c44
   175a8:	00027c92 	.word	0x00027c92
   175ac:	00025f58 	.word	0x00025f58
   175b0:	01000003 	.word	0x01000003

000175b4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   175b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175b6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   175b8:	480e      	ldr	r0, [pc, #56]	; (175f4 <bt_conn_lookup_state_le+0x40>)
{
   175ba:	460e      	mov	r6, r1
   175bc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   175be:	f00b fea0 	bl	23302 <bt_conn_ref>

		if (!conn) {
   175c2:	4604      	mov	r4, r0
   175c4:	b120      	cbz	r0, 175d0 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   175c6:	7883      	ldrb	r3, [r0, #2]
   175c8:	2b01      	cmp	r3, #1
   175ca:	d003      	beq.n	175d4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   175cc:	f00b feb5 	bl	2333a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   175d0:	2400      	movs	r4, #0
   175d2:	e00d      	b.n	175f0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   175d4:	b136      	cbz	r6, 175e4 <bt_conn_lookup_state_le+0x30>
   175d6:	4632      	mov	r2, r6
   175d8:	4629      	mov	r1, r5
   175da:	f00b fef7 	bl	233cc <bt_conn_is_peer_addr_le>
   175de:	b908      	cbnz	r0, 175e4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   175e0:	4620      	mov	r0, r4
   175e2:	e7f3      	b.n	175cc <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   175e4:	7aa3      	ldrb	r3, [r4, #10]
   175e6:	42bb      	cmp	r3, r7
   175e8:	d1fa      	bne.n	175e0 <bt_conn_lookup_state_le+0x2c>
   175ea:	7a23      	ldrb	r3, [r4, #8]
   175ec:	42ab      	cmp	r3, r5
   175ee:	d1f7      	bne.n	175e0 <bt_conn_lookup_state_le+0x2c>
}
   175f0:	4620      	mov	r0, r4
   175f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175f4:	20002418 	.word	0x20002418

000175f8 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   175f8:	b510      	push	{r4, lr}
	info->type = conn->type;
   175fa:	7883      	ldrb	r3, [r0, #2]
   175fc:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   175fe:	78c3      	ldrb	r3, [r0, #3]
   17600:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   17602:	7a03      	ldrb	r3, [r0, #8]
   17604:	708b      	strb	r3, [r1, #2]
	switch (state) {
   17606:	7a83      	ldrb	r3, [r0, #10]
   17608:	3b02      	subs	r3, #2
   1760a:	b2db      	uxtb	r3, r3
   1760c:	2b06      	cmp	r3, #6
   1760e:	bf96      	itet	ls
   17610:	4a23      	ldrls	r2, [pc, #140]	; (176a0 <bt_conn_get_info+0xa8>)
	info->state = conn_internal_to_public_state(conn->state);
   17612:	2300      	movhi	r3, #0
   17614:	5cd3      	ldrbls	r3, [r2, r3]
   17616:	f881 3020 	strb.w	r3, [r1, #32]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   1761a:	2301      	movs	r3, #1
   1761c:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   17620:	2300      	movs	r3, #0
   17622:	844b      	strh	r3, [r1, #34]	; 0x22
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   17624:	7883      	ldrb	r3, [r0, #2]
   17626:	2b01      	cmp	r3, #1
   17628:	d137      	bne.n	1769a <bt_conn_get_info+0xa2>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1762a:	f100 0388 	add.w	r3, r0, #136	; 0x88
   1762e:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   17630:	7a03      	ldrb	r3, [r0, #8]
   17632:	4a1c      	ldr	r2, [pc, #112]	; (176a4 <bt_conn_get_info+0xac>)
   17634:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   17638:	4413      	add	r3, r2
   1763a:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1763c:	78c4      	ldrb	r4, [r0, #3]
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1763e:	f100 0396 	add.w	r3, r0, #150	; 0x96
			info->le.local = &conn->le.init_addr;
   17642:	f100 028f 	add.w	r2, r0, #143	; 0x8f
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   17646:	b114      	cbz	r4, 1764e <bt_conn_get_info+0x56>
   17648:	461c      	mov	r4, r3
   1764a:	4613      	mov	r3, r2
   1764c:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   1764e:	e9c1 2303 	strd	r2, r3, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   17652:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   17656:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   17658:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   1765c:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   1765e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   17662:	830b      	strh	r3, [r1, #24]
#if defined(CONFIG_BT_USER_PHY_UPDATE)
		info->le.phy = &conn->le.phy;
   17664:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
   17668:	61cb      	str	r3, [r1, #28]
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   1766a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1766e:	b12b      	cbz	r3, 1767c <bt_conn_get_info+0x84>
   17670:	7b5b      	ldrb	r3, [r3, #13]
   17672:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   17674:	bf44      	itt	mi
   17676:	2301      	movmi	r3, #1
   17678:	f881 3023 	strbmi.w	r3, [r1, #35]	; 0x23
		}
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   1767c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   17680:	b113      	cbz	r3, 17688 <bt_conn_get_info+0x90>
   17682:	7b5b      	ldrb	r3, [r3, #13]
   17684:	069b      	lsls	r3, r3, #26
   17686:	d401      	bmi.n	1768c <bt_conn_get_info+0x94>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
		}
		return 0;
   17688:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   1768a:	bd10      	pop	{r4, pc}
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   1768c:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   17690:	f043 0302 	orr.w	r3, r3, #2
   17694:	f881 3023 	strb.w	r3, [r1, #35]	; 0x23
   17698:	e7f6      	b.n	17688 <bt_conn_get_info+0x90>
	return -EINVAL;
   1769a:	f06f 0015 	mvn.w	r0, #21
   1769e:	e7f4      	b.n	1768a <bt_conn_get_info+0x92>
   176a0:	00027d34 	.word	0x00027d34
   176a4:	20000388 	.word	0x20000388

000176a8 <send_conn_le_param_update>:
{
   176a8:	b538      	push	{r3, r4, r5, lr}
   176aa:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   176ac:	4608      	mov	r0, r1
{
   176ae:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   176b0:	f00b fc98 	bl	22fe4 <bt_le_conn_params_valid>
   176b4:	b348      	cbz	r0, 1770a <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   176b6:	4b16      	ldr	r3, [pc, #88]	; (17710 <send_conn_le_param_update+0x68>)
   176b8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   176bc:	0799      	lsls	r1, r3, #30
   176be:	d407      	bmi.n	176d0 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   176c0:	78e3      	ldrb	r3, [r4, #3]
   176c2:	b183      	cbz	r3, 176e6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   176c4:	4629      	mov	r1, r5
   176c6:	4620      	mov	r0, r4
}
   176c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   176cc:	f000 bac8 	b.w	17c60 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   176d0:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   176d4:	079a      	lsls	r2, r3, #30
   176d6:	d5f3      	bpl.n	176c0 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   176d8:	f3bf 8f5b 	dmb	ish
   176dc:	6863      	ldr	r3, [r4, #4]
   176de:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   176e2:	055b      	lsls	r3, r3, #21
   176e4:	d4ec      	bmi.n	176c0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   176e6:	4629      	mov	r1, r5
   176e8:	4620      	mov	r0, r4
   176ea:	f00b feab 	bl	23444 <bt_conn_le_conn_update>
		if (rc == 0) {
   176ee:	b958      	cbnz	r0, 17708 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   176f0:	882b      	ldrh	r3, [r5, #0]
   176f2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   176f6:	886b      	ldrh	r3, [r5, #2]
   176f8:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   176fc:	88ab      	ldrh	r3, [r5, #4]
   176fe:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   17702:	88eb      	ldrh	r3, [r5, #6]
   17704:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   17708:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1770a:	f06f 0015 	mvn.w	r0, #21
   1770e:	e7fb      	b.n	17708 <send_conn_le_param_update+0x60>
   17710:	20000388 	.word	0x20000388

00017714 <deferred_work>:
{
   17714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17718:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   1771a:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   1771e:	af00      	add	r7, sp, #0
   17720:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   17722:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   17726:	bb0b      	cbnz	r3, 1776c <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   17728:	4630      	mov	r0, r6
   1772a:	f00b fee8 	bl	234fe <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1772e:	4b3f      	ldr	r3, [pc, #252]	; (1782c <deferred_work+0x118>)
   17730:	681d      	ldr	r5, [r3, #0]
   17732:	b95d      	cbnz	r5, 1774c <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17734:	4d3e      	ldr	r5, [pc, #248]	; (17830 <deferred_work+0x11c>)
   17736:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17834 <deferred_work+0x120>
   1773a:	4545      	cmp	r5, r8
   1773c:	d30e      	bcc.n	1775c <deferred_work+0x48>
		bt_conn_unref(conn);
   1773e:	4630      	mov	r0, r6
   17740:	f00b fdfb 	bl	2333a <bt_conn_unref>
}
   17744:	3708      	adds	r7, #8
   17746:	46bd      	mov	sp, r7
   17748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   1774c:	686b      	ldr	r3, [r5, #4]
   1774e:	b11b      	cbz	r3, 17758 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   17750:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   17754:	4630      	mov	r0, r6
   17756:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   17758:	696d      	ldr	r5, [r5, #20]
   1775a:	e7ea      	b.n	17732 <deferred_work+0x1e>
		if (cb->disconnected) {
   1775c:	686b      	ldr	r3, [r5, #4]
   1775e:	b11b      	cbz	r3, 17768 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   17760:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   17764:	4630      	mov	r0, r6
   17766:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   17768:	3518      	adds	r5, #24
   1776a:	e7e6      	b.n	1773a <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   1776c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   17770:	2b01      	cmp	r3, #1
   17772:	d1e7      	bne.n	17744 <deferred_work+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17774:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   17778:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   1777c:	e855 3f00 	ldrex	r3, [r5]
   17780:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   17784:	e845 2100 	strex	r1, r2, [r5]
   17788:	2900      	cmp	r1, #0
   1778a:	d1f7      	bne.n	1777c <deferred_work+0x68>
   1778c:	f3bf 8f5b 	dmb	ish
   17790:	0599      	lsls	r1, r3, #22
   17792:	d531      	bpl.n	177f8 <deferred_work+0xe4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   17794:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17796:	603b      	str	r3, [r7, #0]
   17798:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1779a:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   1779c:	4639      	mov	r1, r7
   1779e:	4630      	mov	r0, r6
   177a0:	f7ff ff82 	bl	176a8 <send_conn_le_param_update>
		if (!err) {
   177a4:	b9c0      	cbnz	r0, 177d8 <deferred_work+0xc4>
   177a6:	f3bf 8f5b 	dmb	ish
   177aa:	e855 3f00 	ldrex	r3, [r5]
   177ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   177b2:	e845 3200 	strex	r2, r3, [r5]
   177b6:	2a00      	cmp	r2, #0
   177b8:	d1f7      	bne.n	177aa <deferred_work+0x96>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   177ba:	f3bf 8f5b 	dmb	ish
   177be:	f3bf 8f5b 	dmb	ish
   177c2:	e855 3f00 	ldrex	r3, [r5]
   177c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   177ca:	e845 3200 	strex	r2, r3, [r5]
   177ce:	2a00      	cmp	r2, #0
   177d0:	d1f7      	bne.n	177c2 <deferred_work+0xae>
   177d2:	f3bf 8f5b 	dmb	ish
   177d6:	e7b5      	b.n	17744 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   177d8:	466c      	mov	r4, sp
   177da:	b088      	sub	sp, #32
   177dc:	466a      	mov	r2, sp
   177de:	4b16      	ldr	r3, [pc, #88]	; (17838 <deferred_work+0x124>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   177e0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   177e4:	2303      	movs	r3, #3
   177e6:	f842 3f10 	str.w	r3, [r2, #16]!
   177ea:	4814      	ldr	r0, [pc, #80]	; (1783c <deferred_work+0x128>)
   177ec:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   177f0:	f00b fd55 	bl	2329e <z_log_msg_static_create.constprop.0>
   177f4:	46a5      	mov	sp, r4
   177f6:	e7e2      	b.n	177be <deferred_work+0xaa>
		param = BT_LE_CONN_PARAM(
   177f8:	4a11      	ldr	r2, [pc, #68]	; (17840 <deferred_work+0x12c>)
   177fa:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
   177fe:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   17802:	4639      	mov	r1, r7
   17804:	4630      	mov	r0, r6
   17806:	f7ff ff4f 	bl	176a8 <send_conn_le_param_update>
		if (!err) {
   1780a:	b950      	cbnz	r0, 17822 <deferred_work+0x10e>
   1780c:	f3bf 8f5b 	dmb	ish
   17810:	e855 3f00 	ldrex	r3, [r5]
   17814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   17818:	e845 3200 	strex	r2, r3, [r5]
   1781c:	2a00      	cmp	r2, #0
   1781e:	d0cc      	beq.n	177ba <deferred_work+0xa6>
   17820:	e7f6      	b.n	17810 <deferred_work+0xfc>
			LOG_WRN("Send auto LE param update failed (err %d)",
   17822:	466c      	mov	r4, sp
   17824:	b088      	sub	sp, #32
   17826:	466a      	mov	r2, sp
   17828:	4b06      	ldr	r3, [pc, #24]	; (17844 <deferred_work+0x130>)
   1782a:	e7d9      	b.n	177e0 <deferred_work+0xcc>
   1782c:	2000369c 	.word	0x2000369c
   17830:	00025f18 	.word	0x00025f18
   17834:	00025f18 	.word	0x00025f18
   17838:	00027cb5 	.word	0x00027cb5
   1783c:	00025f58 	.word	0x00025f58
   17840:	00280018 	.word	0x00280018
   17844:	00027cda 	.word	0x00027cda

00017848 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   17848:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1784a:	4801      	ldr	r0, [pc, #4]	; (17850 <bt_conn_create_frag_timeout+0x8>)
   1784c:	f7ff bd88 	b.w	17360 <bt_conn_create_pdu_timeout>
   17850:	20000c44 	.word	0x20000c44

00017854 <create_frag>:
{
   17854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17858:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1785a:	f04f 33ff 	mov.w	r3, #4294967295
   1785e:	f04f 32ff 	mov.w	r2, #4294967295
   17862:	2000      	movs	r0, #0
{
   17864:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   17866:	f7ff ffef 	bl	17848 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1786a:	7ab3      	ldrb	r3, [r6, #10]
   1786c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1786e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   17870:	f04f 0600 	mov.w	r6, #0
   17874:	d005      	beq.n	17882 <create_frag+0x2e>
		net_buf_unref(frag);
   17876:	f002 fa07 	bl	19c88 <net_buf_unref>
		return NULL;
   1787a:	4635      	mov	r5, r6
}
   1787c:	4628      	mov	r0, r5
   1787e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   17882:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   17884:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   17888:	4e0c      	ldr	r6, [pc, #48]	; (178bc <create_frag+0x68>)
   1788a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1788c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   17890:	f00c fe8d 	bl	245ae <net_buf_simple_tailroom>
   17894:	4580      	cmp	r8, r0
   17896:	d20c      	bcs.n	178b2 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   17898:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1789c:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   178a0:	4632      	mov	r2, r6
   178a2:	4638      	mov	r0, r7
   178a4:	f00c fe4e 	bl	24544 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   178a8:	4631      	mov	r1, r6
   178aa:	4620      	mov	r0, r4
   178ac:	f00c fe63 	bl	24576 <net_buf_simple_pull>
   178b0:	e7e4      	b.n	1787c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   178b2:	4638      	mov	r0, r7
   178b4:	f00c fe7b 	bl	245ae <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   178b8:	b286      	uxth	r6, r0
   178ba:	e7ef      	b.n	1789c <create_frag+0x48>
   178bc:	20000388 	.word	0x20000388

000178c0 <bt_conn_process_tx>:
{
   178c0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   178c2:	7a83      	ldrb	r3, [r0, #10]
{
   178c4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   178c6:	b993      	cbnz	r3, 178ee <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   178c8:	f3bf 8f5b 	dmb	ish
   178cc:	1d03      	adds	r3, r0, #4
   178ce:	e853 2f00 	ldrex	r2, [r3]
   178d2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   178d6:	e843 1500 	strex	r5, r1, [r3]
   178da:	2d00      	cmp	r5, #0
   178dc:	d1f7      	bne.n	178ce <bt_conn_process_tx+0xe>
   178de:	f3bf 8f5b 	dmb	ish
   178e2:	0653      	lsls	r3, r2, #25
   178e4:	d503      	bpl.n	178ee <bt_conn_process_tx+0x2e>
}
   178e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   178ea:	f00b bce7 	b.w	232bc <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   178ee:	2200      	movs	r2, #0
   178f0:	2300      	movs	r3, #0
   178f2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   178f6:	f00c fdc4 	bl	24482 <net_buf_get>
	BT_ASSERT(buf);
   178fa:	4605      	mov	r5, r0
   178fc:	b960      	cbnz	r0, 17918 <bt_conn_process_tx+0x58>
   178fe:	4a24      	ldr	r2, [pc, #144]	; (17990 <bt_conn_process_tx+0xd0>)
   17900:	4924      	ldr	r1, [pc, #144]	; (17994 <bt_conn_process_tx+0xd4>)
   17902:	4825      	ldr	r0, [pc, #148]	; (17998 <bt_conn_process_tx+0xd8>)
   17904:	f240 331a 	movw	r3, #794	; 0x31a
   17908:	f00a fd1b 	bl	22342 <assert_print>
   1790c:	4040      	eors	r0, r0
   1790e:	f380 8811 	msr	BASEPRI, r0
   17912:	f04f 0003 	mov.w	r0, #3
   17916:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   17918:	4e20      	ldr	r6, [pc, #128]	; (1799c <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   1791a:	8a2a      	ldrh	r2, [r5, #16]
   1791c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17920:	429a      	cmp	r2, r3
   17922:	d807      	bhi.n	17934 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   17924:	2300      	movs	r3, #0
   17926:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   17928:	4629      	mov	r1, r5
   1792a:	4620      	mov	r0, r4
   1792c:	f7ff f9e0 	bl	16cf0 <send_frag>
	if (!send_buf(conn, buf)) {
   17930:	b968      	cbnz	r0, 1794e <bt_conn_process_tx+0x8e>
   17932:	e005      	b.n	17940 <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   17934:	4629      	mov	r1, r5
   17936:	4620      	mov	r0, r4
   17938:	f7ff ff8c 	bl	17854 <create_frag>
	if (!frag) {
   1793c:	4601      	mov	r1, r0
   1793e:	b938      	cbnz	r0, 17950 <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   17940:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   17942:	2300      	movs	r3, #0
   17944:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   17946:	4628      	mov	r0, r5
   17948:	f002 f99e 	bl	19c88 <net_buf_unref>
		if (tx) {
   1794c:	b9ce      	cbnz	r6, 17982 <bt_conn_process_tx+0xc2>
}
   1794e:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   17950:	2301      	movs	r3, #1
   17952:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   17954:	4620      	mov	r0, r4
   17956:	f7ff f9cb 	bl	16cf0 <send_frag>
   1795a:	2800      	cmp	r0, #0
   1795c:	d0f0      	beq.n	17940 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   1795e:	8a2a      	ldrh	r2, [r5, #16]
   17960:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   17964:	429a      	cmp	r2, r3
   17966:	d802      	bhi.n	1796e <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   17968:	2300      	movs	r3, #0
   1796a:	2203      	movs	r2, #3
   1796c:	e7dc      	b.n	17928 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   1796e:	4629      	mov	r1, r5
   17970:	4620      	mov	r0, r4
   17972:	f7ff ff6f 	bl	17854 <create_frag>
		if (!frag) {
   17976:	4601      	mov	r1, r0
   17978:	2800      	cmp	r0, #0
   1797a:	d0e1      	beq.n	17940 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1797c:	2301      	movs	r3, #1
   1797e:	461a      	mov	r2, r3
   17980:	e7e8      	b.n	17954 <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   17982:	4631      	mov	r1, r6
   17984:	4620      	mov	r0, r4
}
   17986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1798a:	f7ff b99b 	b.w	16cc4 <conn_tx_destroy>
   1798e:	bf00      	nop
   17990:	00027d04 	.word	0x00027d04
   17994:	00028274 	.word	0x00028274
   17998:	000275e7 	.word	0x000275e7
   1799c:	20000388 	.word	0x20000388

000179a0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   179a0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   179a2:	480c      	ldr	r0, [pc, #48]	; (179d4 <bt_conn_init+0x34>)
   179a4:	f00d fc9b 	bl	252de <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   179a8:	490b      	ldr	r1, [pc, #44]	; (179d8 <bt_conn_init+0x38>)
   179aa:	480a      	ldr	r0, [pc, #40]	; (179d4 <bt_conn_init+0x34>)
   179ac:	f00d fca3 	bl	252f6 <k_queue_append>
   179b0:	490a      	ldr	r1, [pc, #40]	; (179dc <bt_conn_init+0x3c>)
   179b2:	4808      	ldr	r0, [pc, #32]	; (179d4 <bt_conn_init+0x34>)
   179b4:	f00d fc9f 	bl	252f6 <k_queue_append>
   179b8:	4909      	ldr	r1, [pc, #36]	; (179e0 <bt_conn_init+0x40>)
   179ba:	4806      	ldr	r0, [pc, #24]	; (179d4 <bt_conn_init+0x34>)
   179bc:	f00d fc9b 	bl	252f6 <k_queue_append>
	}

	bt_att_init();
   179c0:	f001 f8a4 	bl	18b0c <bt_att_init>

	err = bt_smp_init();
   179c4:	f00c fd55 	bl	24472 <bt_smp_init>
	if (err) {
   179c8:	4604      	mov	r4, r0
   179ca:	b908      	cbnz	r0, 179d0 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   179cc:	f00b fdd5 	bl	2357a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   179d0:	4620      	mov	r0, r4
   179d2:	bd10      	pop	{r4, pc}
   179d4:	20000bd4 	.word	0x20000bd4
   179d8:	2000366c 	.word	0x2000366c
   179dc:	2000367c 	.word	0x2000367c
   179e0:	2000368c 	.word	0x2000368c

000179e4 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   179e4:	b580      	push	{r7, lr}
   179e6:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   179e8:	b088      	sub	sp, #32
   179ea:	466a      	mov	r2, sp
   179ec:	4b06      	ldr	r3, [pc, #24]	; (17a08 <l2cap_create_le_sig_pdu.part.0+0x24>)
   179ee:	e9c2 3005 	strd	r3, r0, [r2, #20]
   179f2:	2303      	movs	r3, #3
   179f4:	f842 3f10 	str.w	r3, [r2, #16]!
   179f8:	4804      	ldr	r0, [pc, #16]	; (17a0c <l2cap_create_le_sig_pdu.part.0+0x28>)
   179fa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   179fe:	f00b fd4a 	bl	23496 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   17a02:	2000      	movs	r0, #0
   17a04:	46bd      	mov	sp, r7
   17a06:	bd80      	pop	{r7, pc}
   17a08:	00027db4 	.word	0x00027db4
   17a0c:	00025f78 	.word	0x00025f78

00017a10 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   17a10:	b580      	push	{r7, lr}
   17a12:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   17a14:	b088      	sub	sp, #32
   17a16:	466a      	mov	r2, sp
   17a18:	4b07      	ldr	r3, [pc, #28]	; (17a38 <l2cap_accept.part.0+0x28>)
   17a1a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17a1e:	2303      	movs	r3, #3
   17a20:	f842 3f10 	str.w	r3, [r2, #16]!
   17a24:	4805      	ldr	r0, [pc, #20]	; (17a3c <l2cap_accept.part.0+0x2c>)
   17a26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17a2a:	f00b fd34 	bl	23496 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   17a2e:	f06f 000b 	mvn.w	r0, #11
   17a32:	46bd      	mov	sp, r7
   17a34:	bd80      	pop	{r7, pc}
   17a36:	bf00      	nop
   17a38:	00027ddc 	.word	0x00027ddc
   17a3c:	00025f78 	.word	0x00025f78

00017a40 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   17a40:	4b04      	ldr	r3, [pc, #16]	; (17a54 <l2cap_accept+0x14>)
   17a42:	681a      	ldr	r2, [r3, #0]
   17a44:	b10a      	cbz	r2, 17a4a <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   17a46:	f7ff bfe3 	b.w	17a10 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   17a4a:	4803      	ldr	r0, [pc, #12]	; (17a58 <l2cap_accept+0x18>)
   17a4c:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   17a4e:	600b      	str	r3, [r1, #0]
}
   17a50:	4610      	mov	r0, r2
   17a52:	4770      	bx	lr
   17a54:	200036a0 	.word	0x200036a0
   17a58:	00026344 	.word	0x00026344

00017a5c <bt_l2cap_connected>:
{
   17a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17a5e:	4d24      	ldr	r5, [pc, #144]	; (17af0 <bt_l2cap_connected+0x94>)
   17a60:	4f24      	ldr	r7, [pc, #144]	; (17af4 <bt_l2cap_connected+0x98>)
{
   17a62:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17a64:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17a66:	42bd      	cmp	r5, r7
   17a68:	d301      	bcc.n	17a6e <bt_l2cap_connected+0x12>
}
   17a6a:	b003      	add	sp, #12
   17a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   17a6e:	686b      	ldr	r3, [r5, #4]
   17a70:	a901      	add	r1, sp, #4
   17a72:	4620      	mov	r0, r4
   17a74:	4798      	blx	r3
   17a76:	2800      	cmp	r0, #0
   17a78:	db34      	blt.n	17ae4 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   17a7a:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   17a7c:	882a      	ldrh	r2, [r5, #0]
   17a7e:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   17a80:	849a      	strh	r2, [r3, #36]	; 0x24
   17a82:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   17a86:	68a8      	ldr	r0, [r5, #8]
   17a88:	f3bf 8f5b 	dmb	ish
   17a8c:	e852 1f00 	ldrex	r1, [r2]
   17a90:	e842 6c00 	strex	ip, r6, [r2]
   17a94:	f1bc 0f00 	cmp.w	ip, #0
   17a98:	d1f8      	bne.n	17a8c <bt_l2cap_connected+0x30>
   17a9a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   17a9e:	609e      	str	r6, [r3, #8]
	return list->tail;
   17aa0:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   17aa2:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   17aa6:	b9f9      	cbnz	r1, 17ae8 <bt_l2cap_connected+0x8c>
	list->head = node;
   17aa8:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   17aac:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   17aae:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   17ab0:	9801      	ldr	r0, [sp, #4]
   17ab2:	6843      	ldr	r3, [r0, #4]
   17ab4:	681b      	ldr	r3, [r3, #0]
   17ab6:	b103      	cbz	r3, 17aba <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   17ab8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17aba:	9b01      	ldr	r3, [sp, #4]
   17abc:	f3bf 8f5b 	dmb	ish
   17ac0:	3310      	adds	r3, #16
   17ac2:	e853 1f00 	ldrex	r1, [r3]
   17ac6:	f041 0101 	orr.w	r1, r1, #1
   17aca:	e843 1200 	strex	r2, r1, [r3]
   17ace:	2a00      	cmp	r2, #0
   17ad0:	d1f7      	bne.n	17ac2 <bt_l2cap_connected+0x66>
   17ad2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   17ad6:	9801      	ldr	r0, [sp, #4]
   17ad8:	6843      	ldr	r3, [r0, #4]
   17ada:	69db      	ldr	r3, [r3, #28]
   17adc:	b113      	cbz	r3, 17ae4 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   17ade:	f100 0110 	add.w	r1, r0, #16
   17ae2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   17ae4:	350c      	adds	r5, #12
   17ae6:	e7be      	b.n	17a66 <bt_l2cap_connected+0xa>
	parent->next = child;
   17ae8:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17aea:	6562      	str	r2, [r4, #84]	; 0x54
}
   17aec:	e7de      	b.n	17aac <bt_l2cap_connected+0x50>
   17aee:	bf00      	nop
   17af0:	00025ef4 	.word	0x00025ef4
   17af4:	00025f18 	.word	0x00025f18

00017af8 <l2cap_recv>:
{
   17af8:	b5f0      	push	{r4, r5, r6, r7, lr}
   17afa:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   17afc:	8a0b      	ldrh	r3, [r1, #16]
   17afe:	2b03      	cmp	r3, #3
{
   17b00:	af02      	add	r7, sp, #8
   17b02:	4606      	mov	r6, r0
   17b04:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   17b06:	d80b      	bhi.n	17b20 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   17b08:	4b30      	ldr	r3, [pc, #192]	; (17bcc <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17b0a:	617b      	str	r3, [r7, #20]
   17b0c:	2302      	movs	r3, #2
   17b0e:	4830      	ldr	r0, [pc, #192]	; (17bd0 <l2cap_recv+0xd8>)
   17b10:	613b      	str	r3, [r7, #16]
   17b12:	f107 0210 	add.w	r2, r7, #16
   17b16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17b1a:	f00b fcbc 	bl	23496 <z_log_msg_static_create.constprop.0>
		return 0;
   17b1e:	e019      	b.n	17b54 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   17b20:	2104      	movs	r1, #4
   17b22:	f105 000c 	add.w	r0, r5, #12
   17b26:	f00c fd2e 	bl	24586 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   17b2a:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   17b2c:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   17b2e:	4299      	cmp	r1, r3
   17b30:	4604      	mov	r4, r0
   17b32:	d013      	beq.n	17b5c <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   17b34:	466c      	mov	r4, sp
   17b36:	b088      	sub	sp, #32
   17b38:	aa02      	add	r2, sp, #8
   17b3a:	4826      	ldr	r0, [pc, #152]	; (17bd4 <l2cap_recv+0xdc>)
   17b3c:	61d3      	str	r3, [r2, #28]
   17b3e:	2304      	movs	r3, #4
   17b40:	e9c2 0105 	strd	r0, r1, [r2, #20]
   17b44:	f842 3f10 	str.w	r3, [r2, #16]!
   17b48:	4821      	ldr	r0, [pc, #132]	; (17bd0 <l2cap_recv+0xd8>)
   17b4a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   17b4e:	f00b fca2 	bl	23496 <z_log_msg_static_create.constprop.0>
   17b52:	46a5      	mov	sp, r4
}
   17b54:	2000      	movs	r0, #0
   17b56:	371c      	adds	r7, #28
   17b58:	46bd      	mov	sp, r7
   17b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   17b5c:	7843      	ldrb	r3, [r0, #1]
   17b5e:	b90b      	cbnz	r3, 17b64 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   17b60:	4b1d      	ldr	r3, [pc, #116]	; (17bd8 <l2cap_recv+0xe0>)
   17b62:	e7d2      	b.n	17b0a <l2cap_recv+0x12>
	switch (hdr->code) {
   17b64:	7803      	ldrb	r3, [r0, #0]
   17b66:	2b01      	cmp	r3, #1
   17b68:	d0f4      	beq.n	17b54 <l2cap_recv+0x5c>
   17b6a:	2b13      	cmp	r3, #19
   17b6c:	d103      	bne.n	17b76 <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   17b6e:	2901      	cmp	r1, #1
   17b70:	d8f0      	bhi.n	17b54 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   17b72:	4b1a      	ldr	r3, [pc, #104]	; (17bdc <l2cap_recv+0xe4>)
   17b74:	e7c9      	b.n	17b0a <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17b76:	466d      	mov	r5, sp
   17b78:	b088      	sub	sp, #32
   17b7a:	aa02      	add	r2, sp, #8
   17b7c:	4918      	ldr	r1, [pc, #96]	; (17be0 <l2cap_recv+0xe8>)
   17b7e:	4814      	ldr	r0, [pc, #80]	; (17bd0 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   17b80:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   17b84:	2303      	movs	r3, #3
   17b86:	f842 3f10 	str.w	r3, [r2, #16]!
   17b8a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17b8e:	f00b fc82 	bl	23496 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17b92:	2202      	movs	r2, #2
   17b94:	7861      	ldrb	r1, [r4, #1]
   17b96:	46ad      	mov	sp, r5
   17b98:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   17b9a:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   17b9c:	f00b fc7e 	bl	2349c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17ba0:	4604      	mov	r4, r0
   17ba2:	2800      	cmp	r0, #0
   17ba4:	d0d6      	beq.n	17b54 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   17ba6:	2102      	movs	r1, #2
   17ba8:	300c      	adds	r0, #12
   17baa:	f00c fcc5 	bl	24538 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   17bae:	2300      	movs	r3, #0
   17bb0:	7003      	strb	r3, [r0, #0]
   17bb2:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   17bb4:	4622      	mov	r2, r4
   17bb6:	9300      	str	r3, [sp, #0]
   17bb8:	2105      	movs	r1, #5
   17bba:	4628      	mov	r0, r5
   17bbc:	f00b fcba 	bl	23534 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   17bc0:	2800      	cmp	r0, #0
   17bc2:	d0c7      	beq.n	17b54 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   17bc4:	4620      	mov	r0, r4
   17bc6:	f002 f85f 	bl	19c88 <net_buf_unref>
   17bca:	e7c3      	b.n	17b54 <l2cap_recv+0x5c>
   17bcc:	00027e03 	.word	0x00027e03
   17bd0:	00025f78 	.word	0x00025f78
   17bd4:	00027e21 	.word	0x00027e21
   17bd8:	00027e42 	.word	0x00027e42
   17bdc:	00027e63 	.word	0x00027e63
   17be0:	00027e7f 	.word	0x00027e7f

00017be4 <bt_l2cap_recv>:
{
   17be4:	b5b0      	push	{r4, r5, r7, lr}
   17be6:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   17be8:	8a0b      	ldrh	r3, [r1, #16]
   17bea:	2b03      	cmp	r3, #3
{
   17bec:	af00      	add	r7, sp, #0
   17bee:	4605      	mov	r5, r0
   17bf0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   17bf2:	d810      	bhi.n	17c16 <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   17bf4:	4b17      	ldr	r3, [pc, #92]	; (17c54 <bt_l2cap_recv+0x70>)
   17bf6:	617b      	str	r3, [r7, #20]
   17bf8:	2302      	movs	r3, #2
   17bfa:	4817      	ldr	r0, [pc, #92]	; (17c58 <bt_l2cap_recv+0x74>)
   17bfc:	613b      	str	r3, [r7, #16]
   17bfe:	f107 0210 	add.w	r2, r7, #16
   17c02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17c06:	f00b fc46 	bl	23496 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   17c0a:	4620      	mov	r0, r4
   17c0c:	f002 f83c 	bl	19c88 <net_buf_unref>
}
   17c10:	3718      	adds	r7, #24
   17c12:	46bd      	mov	sp, r7
   17c14:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   17c16:	2104      	movs	r1, #4
   17c18:	f104 000c 	add.w	r0, r4, #12
   17c1c:	f00c fcb3 	bl	24586 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   17c20:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   17c22:	4628      	mov	r0, r5
   17c24:	f00b fc9f 	bl	23566 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17c28:	b978      	cbnz	r0, 17c4a <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   17c2a:	466d      	mov	r5, sp
   17c2c:	b088      	sub	sp, #32
   17c2e:	466a      	mov	r2, sp
   17c30:	4b0a      	ldr	r3, [pc, #40]	; (17c5c <bt_l2cap_recv+0x78>)
   17c32:	4809      	ldr	r0, [pc, #36]	; (17c58 <bt_l2cap_recv+0x74>)
   17c34:	e9c2 3105 	strd	r3, r1, [r2, #20]
   17c38:	2303      	movs	r3, #3
   17c3a:	f842 3f10 	str.w	r3, [r2, #16]!
   17c3e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c42:	f00b fc28 	bl	23496 <z_log_msg_static_create.constprop.0>
   17c46:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17c48:	e7df      	b.n	17c0a <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   17c4a:	6843      	ldr	r3, [r0, #4]
   17c4c:	4621      	mov	r1, r4
   17c4e:	695b      	ldr	r3, [r3, #20]
   17c50:	4798      	blx	r3
   17c52:	e7da      	b.n	17c0a <bt_l2cap_recv+0x26>
   17c54:	00027ea7 	.word	0x00027ea7
   17c58:	00025f78 	.word	0x00025f78
   17c5c:	00027ec4 	.word	0x00027ec4

00017c60 <bt_l2cap_update_conn_param>:
{
   17c60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   17c62:	4b17      	ldr	r3, [pc, #92]	; (17cc0 <bt_l2cap_update_conn_param+0x60>)
{
   17c64:	460e      	mov	r6, r1
	ident++;
   17c66:	7819      	ldrb	r1, [r3, #0]
   17c68:	3101      	adds	r1, #1
   17c6a:	b2c9      	uxtb	r1, r1
   17c6c:	2901      	cmp	r1, #1
   17c6e:	bf38      	it	cc
   17c70:	2101      	movcc	r1, #1
{
   17c72:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17c74:	2208      	movs	r2, #8
   17c76:	2012      	movs	r0, #18
	ident++;
   17c78:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   17c7a:	f00b fc0f 	bl	2349c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   17c7e:	4604      	mov	r4, r0
   17c80:	b1d0      	cbz	r0, 17cb8 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   17c82:	2108      	movs	r1, #8
   17c84:	300c      	adds	r0, #12
   17c86:	f00c fc57 	bl	24538 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   17c8a:	8833      	ldrh	r3, [r6, #0]
   17c8c:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   17c8e:	8873      	ldrh	r3, [r6, #2]
   17c90:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   17c92:	88b3      	ldrh	r3, [r6, #4]
   17c94:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   17c96:	88f3      	ldrh	r3, [r6, #6]
   17c98:	80c3      	strh	r3, [r0, #6]
   17c9a:	2300      	movs	r3, #0
   17c9c:	4628      	mov	r0, r5
   17c9e:	9300      	str	r3, [sp, #0]
   17ca0:	4622      	mov	r2, r4
   17ca2:	2105      	movs	r1, #5
   17ca4:	f00b fc46 	bl	23534 <bt_l2cap_send_cb>
	if (err) {
   17ca8:	4605      	mov	r5, r0
   17caa:	b110      	cbz	r0, 17cb2 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   17cac:	4620      	mov	r0, r4
   17cae:	f001 ffeb 	bl	19c88 <net_buf_unref>
}
   17cb2:	4628      	mov	r0, r5
   17cb4:	b002      	add	sp, #8
   17cb6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   17cb8:	f06f 050b 	mvn.w	r5, #11
   17cbc:	e7f9      	b.n	17cb2 <bt_l2cap_update_conn_param+0x52>
   17cbe:	bf00      	nop
   17cc0:	20004613 	.word	0x20004613

00017cc4 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   17cc4:	2823      	cmp	r0, #35	; 0x23
   17cc6:	d81f      	bhi.n	17d08 <att_op_get_type+0x44>
   17cc8:	281a      	cmp	r0, #26
   17cca:	d804      	bhi.n	17cd6 <att_op_get_type+0x12>
   17ccc:	1e43      	subs	r3, r0, #1
   17cce:	2b18      	cmp	r3, #24
   17cd0:	d90e      	bls.n	17cf0 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   17cd2:	2006      	movs	r0, #6
   17cd4:	4770      	bx	lr
	switch (op) {
   17cd6:	f1a0 031b 	sub.w	r3, r0, #27
   17cda:	2b08      	cmp	r3, #8
   17cdc:	d81e      	bhi.n	17d1c <att_op_get_type+0x58>
   17cde:	e8df f003 	tbb	[pc, r3]
   17ce2:	1d05      	.short	0x1d05
   17ce4:	191d231b 	.word	0x191d231b
   17ce8:	1d25      	.short	0x1d25
   17cea:	05          	.byte	0x05
   17ceb:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   17cec:	2003      	movs	r0, #3
   17cee:	4770      	bx	lr
	switch (op) {
   17cf0:	4a0f      	ldr	r2, [pc, #60]	; (17d30 <att_op_get_type+0x6c>)
   17cf2:	2301      	movs	r3, #1
   17cf4:	4083      	lsls	r3, r0
   17cf6:	401a      	ands	r2, r3
   17cf8:	b9c2      	cbnz	r2, 17d2c <att_op_get_type+0x68>
   17cfa:	4a0e      	ldr	r2, [pc, #56]	; (17d34 <att_op_get_type+0x70>)
   17cfc:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   17cfe:	2a00      	cmp	r2, #0
   17d00:	bf14      	ite	ne
   17d02:	2001      	movne	r0, #1
   17d04:	2006      	moveq	r0, #6
   17d06:	4770      	bx	lr
	switch (op) {
   17d08:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   17d0c:	2b52      	cmp	r3, #82	; 0x52
   17d0e:	d105      	bne.n	17d1c <att_op_get_type+0x58>
		return ATT_COMMAND;
   17d10:	2000      	movs	r0, #0
}
   17d12:	4770      	bx	lr
		return ATT_REQUEST;
   17d14:	2001      	movs	r0, #1
   17d16:	4770      	bx	lr
		return ATT_INDICATION;
   17d18:	2005      	movs	r0, #5
   17d1a:	4770      	bx	lr
		return ATT_COMMAND;
   17d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
   17d20:	bf0c      	ite	eq
   17d22:	2006      	moveq	r0, #6
   17d24:	2000      	movne	r0, #0
   17d26:	4770      	bx	lr
	switch (op) {
   17d28:	2004      	movs	r0, #4
   17d2a:	4770      	bx	lr
		return ATT_RESPONSE;
   17d2c:	2002      	movs	r0, #2
   17d2e:	4770      	bx	lr
   17d30:	028aaaaa 	.word	0x028aaaaa
   17d34:	01455554 	.word	0x01455554

00017d38 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   17d38:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   17d3a:	3804      	subs	r0, #4
   17d3c:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   17d3e:	a901      	add	r1, sp, #4
   17d40:	4802      	ldr	r0, [pc, #8]	; (17d4c <bt_att_released+0x14>)
   17d42:	f00d fa0e 	bl	25162 <k_mem_slab_free>
}
   17d46:	b003      	add	sp, #12
   17d48:	f85d fb04 	ldr.w	pc, [sp], #4
   17d4c:	20000ab0 	.word	0x20000ab0

00017d50 <tx_meta_data_free>:
{
   17d50:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   17d52:	2100      	movs	r1, #0
{
   17d54:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   17d56:	2214      	movs	r2, #20
   17d58:	f00b f837 	bl	22dca <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   17d5c:	4621      	mov	r1, r4
   17d5e:	4802      	ldr	r0, [pc, #8]	; (17d68 <tx_meta_data_free+0x18>)
}
   17d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   17d64:	f00d bac7 	b.w	252f6 <k_queue_append>
   17d68:	20000bbc 	.word	0x20000bbc

00017d6c <find_type_cb>:
{
   17d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d70:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   17d72:	f8d2 a000 	ldr.w	sl, [r2]
{
   17d76:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   17d78:	f8da 3004 	ldr.w	r3, [sl, #4]
   17d7c:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d7e:	2500      	movs	r5, #0
   17d80:	f642 0301 	movw	r3, #10241	; 0x2801
{
   17d84:	4680      	mov	r8, r0
   17d86:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d88:	6800      	ldr	r0, [r0, #0]
   17d8a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   17d8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17d90:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   17d94:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   17d96:	f00b f836 	bl	22e06 <bt_uuid_cmp>
   17d9a:	2800      	cmp	r0, #0
   17d9c:	d070      	beq.n	17e80 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   17d9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17da2:	f8d8 0000 	ldr.w	r0, [r8]
   17da6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   17daa:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17dac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   17db0:	f00b f829 	bl	22e06 <bt_uuid_cmp>
   17db4:	b138      	cbz	r0, 17dc6 <find_type_cb+0x5a>
		if (data->group &&
   17db6:	68a3      	ldr	r3, [r4, #8]
   17db8:	b11b      	cbz	r3, 17dc2 <find_type_cb+0x56>
   17dba:	885a      	ldrh	r2, [r3, #2]
   17dbc:	42b2      	cmp	r2, r6
   17dbe:	d200      	bcs.n	17dc2 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   17dc0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   17dc2:	2001      	movs	r0, #1
   17dc4:	e009      	b.n	17dda <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   17dc6:	6861      	ldr	r1, [r4, #4]
   17dc8:	4608      	mov	r0, r1
   17dca:	f00b fbe1 	bl	23590 <net_buf_frags_len>
   17dce:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   17dd2:	1a1b      	subs	r3, r3, r0
   17dd4:	2b03      	cmp	r3, #3
   17dd6:	d804      	bhi.n	17de2 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   17dd8:	2000      	movs	r0, #0
}
   17dda:	3744      	adds	r7, #68	; 0x44
   17ddc:	46bd      	mov	sp, r7
   17dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   17de2:	4608      	mov	r0, r1
   17de4:	f00c fb86 	bl	244f4 <net_buf_frag_last>
   17de8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   17dea:	6860      	ldr	r0, [r4, #4]
   17dec:	f00b fbd0 	bl	23590 <net_buf_frags_len>
   17df0:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   17df4:	f105 090c 	add.w	r9, r5, #12
   17df8:	ebab 0b00 	sub.w	fp, fp, r0
   17dfc:	4648      	mov	r0, r9
   17dfe:	f00c fbd6 	bl	245ae <net_buf_simple_tailroom>
   17e02:	4558      	cmp	r0, fp
   17e04:	d93f      	bls.n	17e86 <find_type_cb+0x11a>
   17e06:	6860      	ldr	r0, [r4, #4]
   17e08:	f00b fbc2 	bl	23590 <net_buf_frags_len>
   17e0c:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   17e10:	1a18      	subs	r0, r3, r0
	if (!len) {
   17e12:	b970      	cbnz	r0, 17e32 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   17e14:	6863      	ldr	r3, [r4, #4]
   17e16:	7a98      	ldrb	r0, [r3, #10]
   17e18:	f001 fe74 	bl	19b04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   17e1c:	2200      	movs	r2, #0
   17e1e:	2300      	movs	r3, #0
   17e20:	f00c fb2a 	bl	24478 <net_buf_alloc_fixed>
		if (!frag) {
   17e24:	4605      	mov	r5, r0
   17e26:	2800      	cmp	r0, #0
   17e28:	d0d6      	beq.n	17dd8 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   17e2a:	4601      	mov	r1, r0
   17e2c:	6860      	ldr	r0, [r4, #4]
   17e2e:	f00c fb72 	bl	24516 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   17e32:	2300      	movs	r3, #0
   17e34:	9300      	str	r3, [sp, #0]
   17e36:	f8d8 a004 	ldr.w	sl, [r8, #4]
   17e3a:	6878      	ldr	r0, [r7, #4]
   17e3c:	4641      	mov	r1, r8
   17e3e:	2310      	movs	r3, #16
   17e40:	f107 0208 	add.w	r2, r7, #8
   17e44:	47d0      	blx	sl
	if (read < 0) {
   17e46:	f1b0 0800 	subs.w	r8, r0, #0
   17e4a:	db19      	blt.n	17e80 <find_type_cb+0x114>
	if (read != data->value_len) {
   17e4c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17e4e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   17e50:	4542      	cmp	r2, r8
   17e52:	d03f      	beq.n	17ed4 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   17e54:	4601      	mov	r1, r0
   17e56:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   17e5a:	f00b f802 	bl	22e62 <bt_uuid_create>
   17e5e:	b9b0      	cbnz	r0, 17e8e <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   17e60:	466d      	mov	r5, sp
   17e62:	b088      	sub	sp, #32
   17e64:	7c23      	ldrb	r3, [r4, #16]
   17e66:	aa02      	add	r2, sp, #8
   17e68:	491d      	ldr	r1, [pc, #116]	; (17ee0 <find_type_cb+0x174>)
   17e6a:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   17e6e:	2303      	movs	r3, #3
   17e70:	f842 3f10 	str.w	r3, [r2, #16]!
   17e74:	481b      	ldr	r0, [pc, #108]	; (17ee4 <find_type_cb+0x178>)
   17e76:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17e7a:	f00b fc77 	bl	2376c <z_log_msg_static_create.constprop.0>
   17e7e:	46ad      	mov	sp, r5
	data->group = NULL;
   17e80:	2300      	movs	r3, #0
   17e82:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   17e84:	e79d      	b.n	17dc2 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   17e86:	4648      	mov	r0, r9
   17e88:	f00c fb91 	bl	245ae <net_buf_simple_tailroom>
   17e8c:	e7c1      	b.n	17e12 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   17e8e:	fa5f f288 	uxtb.w	r2, r8
   17e92:	f107 0108 	add.w	r1, r7, #8
   17e96:	f107 0018 	add.w	r0, r7, #24
   17e9a:	f00a ffe2 	bl	22e62 <bt_uuid_create>
   17e9e:	b930      	cbnz	r0, 17eae <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   17ea0:	466d      	mov	r5, sp
   17ea2:	b088      	sub	sp, #32
   17ea4:	aa02      	add	r2, sp, #8
   17ea6:	4b10      	ldr	r3, [pc, #64]	; (17ee8 <find_type_cb+0x17c>)
   17ea8:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17eac:	e7df      	b.n	17e6e <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   17eae:	f107 0118 	add.w	r1, r7, #24
   17eb2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   17eb6:	f00a ffa6 	bl	22e06 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   17eba:	2800      	cmp	r0, #0
   17ebc:	d1e0      	bne.n	17e80 <find_type_cb+0x114>
	data->err = 0x00;
   17ebe:	2300      	movs	r3, #0
   17ec0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   17ec2:	2104      	movs	r1, #4
   17ec4:	f105 000c 	add.w	r0, r5, #12
   17ec8:	f00c fb36 	bl	24538 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   17ecc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   17ece:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   17ed0:	68a3      	ldr	r3, [r4, #8]
   17ed2:	e775      	b.n	17dc0 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   17ed4:	f107 0108 	add.w	r1, r7, #8
   17ed8:	f00a ff45 	bl	22d66 <memcmp>
   17edc:	e7ed      	b.n	17eba <find_type_cb+0x14e>
   17ede:	bf00      	nop
   17ee0:	00027f00 	.word	0x00027f00
   17ee4:	00025f50 	.word	0x00025f50
   17ee8:	00027f1f 	.word	0x00027f1f

00017eec <chan_send>:
{
   17eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17ef0:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   17ef2:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   17ef6:	68cb      	ldr	r3, [r1, #12]
{
   17ef8:	b089      	sub	sp, #36	; 0x24
   17efa:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   17efc:	3090      	adds	r0, #144	; 0x90
   17efe:	2102      	movs	r1, #2
   17f00:	f00b fb60 	bl	235c4 <atomic_test_bit>
   17f04:	2800      	cmp	r0, #0
   17f06:	d043      	beq.n	17f90 <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   17f08:	781b      	ldrb	r3, [r3, #0]
   17f0a:	2bd2      	cmp	r3, #210	; 0xd2
   17f0c:	d11a      	bne.n	17f44 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   17f0e:	6833      	ldr	r3, [r6, #0]
   17f10:	4621      	mov	r1, r4
   17f12:	6818      	ldr	r0, [r3, #0]
   17f14:	f00c faaa 	bl	2446c <bt_smp_sign>
		if (err) {
   17f18:	4605      	mov	r5, r0
   17f1a:	b198      	cbz	r0, 17f44 <chan_send+0x58>
			LOG_ERR("Error signing data");
   17f1c:	4b1e      	ldr	r3, [pc, #120]	; (17f98 <chan_send+0xac>)
   17f1e:	481f      	ldr	r0, [pc, #124]	; (17f9c <chan_send+0xb0>)
   17f20:	9307      	str	r3, [sp, #28]
   17f22:	aa06      	add	r2, sp, #24
   17f24:	2302      	movs	r3, #2
   17f26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17f2a:	9306      	str	r3, [sp, #24]
   17f2c:	f00b fc1e 	bl	2376c <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   17f30:	69a0      	ldr	r0, [r4, #24]
   17f32:	f7ff ff0d 	bl	17d50 <tx_meta_data_free>
			net_buf_unref(buf);
   17f36:	4620      	mov	r0, r4
   17f38:	f001 fea6 	bl	19c88 <net_buf_unref>
}
   17f3c:	4628      	mov	r0, r5
   17f3e:	b009      	add	sp, #36	; 0x24
   17f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   17f44:	f104 000c 	add.w	r0, r4, #12
   17f48:	f00c fb2d 	bl	245a6 <net_buf_simple_headroom>
	state->len = buf->len;
   17f4c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   17f50:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17f54:	6833      	ldr	r3, [r6, #0]
   17f56:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   17f58:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   17f5a:	4607      	mov	r7, r0
   17f5c:	7818      	ldrb	r0, [r3, #0]
   17f5e:	f7ff feb1 	bl	17cc4 <att_op_get_type>
	switch (op_type) {
   17f62:	2805      	cmp	r0, #5
   17f64:	bf96      	itet	ls
   17f66:	4b0e      	ldrls	r3, [pc, #56]	; (17fa0 <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   17f68:	4b0e      	ldrhi	r3, [pc, #56]	; (17fa4 <chan_send+0xb8>)
   17f6a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   17f6e:	f8cd 9000 	str.w	r9, [sp]
   17f72:	4628      	mov	r0, r5
   17f74:	4622      	mov	r2, r4
   17f76:	2104      	movs	r1, #4
   17f78:	f00b fadc 	bl	23534 <bt_l2cap_send_cb>
	if (err) {
   17f7c:	4605      	mov	r5, r0
   17f7e:	2800      	cmp	r0, #0
   17f80:	d0dc      	beq.n	17f3c <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   17f82:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17f84:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17f88:	fa13 f787 	uxtah	r7, r3, r7
   17f8c:	60e7      	str	r7, [r4, #12]
}
   17f8e:	e7d5      	b.n	17f3c <chan_send+0x50>
		return -EINVAL;
   17f90:	f06f 0515 	mvn.w	r5, #21
   17f94:	e7d2      	b.n	17f3c <chan_send+0x50>
   17f96:	bf00      	nop
   17f98:	00027f3e 	.word	0x00027f3e
   17f9c:	00025f50 	.word	0x00025f50
   17fa0:	0002636c 	.word	0x0002636c
   17fa4:	00023b61 	.word	0x00023b61

00017fa8 <att_get>:
{
   17fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   17faa:	7a83      	ldrb	r3, [r0, #10]
   17fac:	2b07      	cmp	r3, #7
   17fae:	d00d      	beq.n	17fcc <att_get+0x24>
		LOG_WRN("Not connected");
   17fb0:	4b0e      	ldr	r3, [pc, #56]	; (17fec <att_get+0x44>)
   17fb2:	9305      	str	r3, [sp, #20]
   17fb4:	2302      	movs	r3, #2
   17fb6:	9304      	str	r3, [sp, #16]
   17fb8:	aa04      	add	r2, sp, #16
   17fba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   17fbe:	480c      	ldr	r0, [pc, #48]	; (17ff0 <att_get+0x48>)
   17fc0:	f00b fbd4 	bl	2376c <z_log_msg_static_create.constprop.0>
		return NULL;
   17fc4:	2000      	movs	r0, #0
}
   17fc6:	b007      	add	sp, #28
   17fc8:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   17fcc:	2104      	movs	r1, #4
   17fce:	f00b faca 	bl	23566 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   17fd2:	b938      	cbnz	r0, 17fe4 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   17fd4:	4b07      	ldr	r3, [pc, #28]	; (17ff4 <att_get+0x4c>)
   17fd6:	9305      	str	r3, [sp, #20]
   17fd8:	2302      	movs	r3, #2
   17fda:	9304      	str	r3, [sp, #16]
   17fdc:	aa04      	add	r2, sp, #16
   17fde:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17fe2:	e7ec      	b.n	17fbe <att_get+0x16>
	return att_chan->att;
   17fe4:	f850 0c04 	ldr.w	r0, [r0, #-4]
   17fe8:	e7ed      	b.n	17fc6 <att_get+0x1e>
   17fea:	bf00      	nop
   17fec:	00027f51 	.word	0x00027f51
   17ff0:	00025f50 	.word	0x00025f50
   17ff4:	00027f5f 	.word	0x00027f5f

00017ff8 <bt_att_connected>:
{
   17ff8:	b510      	push	{r4, lr}
   17ffa:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   17ffe:	4604      	mov	r4, r0
   18000:	f3bf 8f5b 	dmb	ish
   18004:	e853 1f00 	ldrex	r1, [r3]
   18008:	f041 0104 	orr.w	r1, r1, #4
   1800c:	e843 1200 	strex	r2, r1, [r3]
   18010:	2a00      	cmp	r2, #0
   18012:	d1f7      	bne.n	18004 <bt_att_connected+0xc>
   18014:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   18018:	2317      	movs	r3, #23
   1801a:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1801c:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1801e:	1f20      	subs	r0, r4, #4
   18020:	f00b fb61 	bl	236e6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   18024:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   18028:	4903      	ldr	r1, [pc, #12]	; (18038 <bt_att_connected+0x40>)
   1802a:	f00d fa3f 	bl	254ac <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1802e:	6820      	ldr	r0, [r4, #0]
}
   18030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   18034:	f001 bcf8 	b.w	19a28 <bt_gatt_connected>
   18038:	00018d11 	.word	0x00018d11

0001803c <read_group_cb>:
{
   1803c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18040:	4605      	mov	r5, r0
   18042:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18044:	f04f 0800 	mov.w	r8, #0
   18048:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1804c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1804e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18050:	f88d 8008 	strb.w	r8, [sp, #8]
   18054:	a902      	add	r1, sp, #8
{
   18056:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18058:	f8ad 300a 	strh.w	r3, [sp, #10]
   1805c:	f00a fed3 	bl	22e06 <bt_uuid_cmp>
   18060:	b1a0      	cbz	r0, 1808c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   18062:	f642 0301 	movw	r3, #10241	; 0x2801
   18066:	6828      	ldr	r0, [r5, #0]
   18068:	f88d 800c 	strb.w	r8, [sp, #12]
   1806c:	a903      	add	r1, sp, #12
   1806e:	f8ad 300e 	strh.w	r3, [sp, #14]
   18072:	f00a fec8 	bl	22e06 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   18076:	b148      	cbz	r0, 1808c <read_group_cb+0x50>
		if (data->group &&
   18078:	6923      	ldr	r3, [r4, #16]
   1807a:	b11b      	cbz	r3, 18084 <read_group_cb+0x48>
   1807c:	885a      	ldrh	r2, [r3, #2]
   1807e:	42b2      	cmp	r2, r6
   18080:	d200      	bcs.n	18084 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   18082:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   18084:	2001      	movs	r0, #1
}
   18086:	b004      	add	sp, #16
   18088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1808c:	6861      	ldr	r1, [r4, #4]
   1808e:	6828      	ldr	r0, [r5, #0]
   18090:	f00a feb9 	bl	22e06 <bt_uuid_cmp>
   18094:	b110      	cbz	r0, 1809c <read_group_cb+0x60>
		data->group = NULL;
   18096:	2300      	movs	r3, #0
   18098:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1809a:	e7f3      	b.n	18084 <read_group_cb+0x48>
	if (data->rsp->len &&
   1809c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1809e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   180a0:	781a      	ldrb	r2, [r3, #0]
   180a2:	b132      	cbz	r2, 180b2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   180a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   180a6:	8a01      	ldrh	r1, [r0, #16]
   180a8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   180aa:	4293      	cmp	r3, r2
   180ac:	da01      	bge.n	180b2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   180ae:	2000      	movs	r0, #0
   180b0:	e7e9      	b.n	18086 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   180b2:	2104      	movs	r1, #4
   180b4:	300c      	adds	r0, #12
   180b6:	f00c fa3f 	bl	24538 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   180ba:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   180bc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   180be:	6923      	ldr	r3, [r4, #16]
   180c0:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   180c2:	4b08      	ldr	r3, [pc, #32]	; (180e4 <read_group_cb+0xa8>)
   180c4:	9300      	str	r3, [sp, #0]
   180c6:	9401      	str	r4, [sp, #4]
   180c8:	68a2      	ldr	r2, [r4, #8]
   180ca:	2300      	movs	r3, #0
   180cc:	4629      	mov	r1, r5
   180ce:	4638      	mov	r0, r7
   180d0:	f00b fb90 	bl	237f4 <att_chan_read>
	if (read < 0) {
   180d4:	2800      	cmp	r0, #0
   180d6:	dbea      	blt.n	180ae <read_group_cb+0x72>
	if (!data->group) {
   180d8:	6920      	ldr	r0, [r4, #16]
   180da:	3800      	subs	r0, #0
   180dc:	bf18      	it	ne
   180de:	2001      	movne	r0, #1
   180e0:	e7d1      	b.n	18086 <read_group_cb+0x4a>
   180e2:	bf00      	nop
   180e4:	0002374d 	.word	0x0002374d

000180e8 <read_type_cb>:
{
   180e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   180ec:	6817      	ldr	r7, [r2, #0]
{
   180ee:	4605      	mov	r5, r0
   180f0:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   180f2:	6800      	ldr	r0, [r0, #0]
   180f4:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   180f6:	687e      	ldr	r6, [r7, #4]
{
   180f8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   180fa:	f00a fe84 	bl	22e06 <bt_uuid_cmp>
   180fe:	4681      	mov	r9, r0
   18100:	2800      	cmp	r0, #0
   18102:	d13c      	bne.n	1817e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   18104:	4630      	mov	r0, r6
   18106:	2295      	movs	r2, #149	; 0x95
   18108:	4629      	mov	r1, r5
   1810a:	f00c f895 	bl	24238 <bt_gatt_check_perm>
   1810e:	4606      	mov	r6, r0
   18110:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   18112:	b140      	cbz	r0, 18126 <read_type_cb+0x3e>
		if (data->rsp->len) {
   18114:	68e3      	ldr	r3, [r4, #12]
   18116:	781b      	ldrb	r3, [r3, #0]
   18118:	b10b      	cbz	r3, 1811e <read_type_cb+0x36>
			data->err = 0x00;
   1811a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1811e:	2000      	movs	r0, #0
}
   18120:	b003      	add	sp, #12
   18122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18126:	68a0      	ldr	r0, [r4, #8]
   18128:	f00c f9e4 	bl	244f4 <net_buf_frag_last>
   1812c:	2102      	movs	r1, #2
   1812e:	300c      	adds	r0, #12
   18130:	f00c fa02 	bl	24538 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   18134:	4b13      	ldr	r3, [pc, #76]	; (18184 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   18136:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   18138:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1813c:	9300      	str	r3, [sp, #0]
   1813e:	9401      	str	r4, [sp, #4]
   18140:	68a2      	ldr	r2, [r4, #8]
   18142:	4633      	mov	r3, r6
   18144:	4629      	mov	r1, r5
   18146:	4638      	mov	r0, r7
   18148:	f00b fb54 	bl	237f4 <att_chan_read>
	if (read < 0) {
   1814c:	2800      	cmp	r0, #0
   1814e:	da07      	bge.n	18160 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   18150:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   18154:	bf26      	itte	cs
   18156:	4240      	negcs	r0, r0
   18158:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1815a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1815c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1815e:	e7de      	b.n	1811e <read_type_cb+0x36>
	if (!data->item) {
   18160:	6923      	ldr	r3, [r4, #16]
   18162:	2b00      	cmp	r3, #0
   18164:	d0db      	beq.n	1811e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   18166:	68a0      	ldr	r0, [r4, #8]
   18168:	f00b fa12 	bl	23590 <net_buf_frags_len>
   1816c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1816e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   18170:	68e3      	ldr	r3, [r4, #12]
   18172:	781b      	ldrb	r3, [r3, #0]
   18174:	4298      	cmp	r0, r3
   18176:	bf94      	ite	ls
   18178:	2000      	movls	r0, #0
   1817a:	2001      	movhi	r0, #1
   1817c:	e7d0      	b.n	18120 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1817e:	2001      	movs	r0, #1
   18180:	e7ce      	b.n	18120 <read_type_cb+0x38>
   18182:	bf00      	nop
   18184:	000235a1 	.word	0x000235a1

00018188 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   18188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1818c:	b082      	sub	sp, #8
   1818e:	af00      	add	r7, sp, #0
   18190:	4604      	mov	r4, r0
   18192:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   18194:	483b      	ldr	r0, [pc, #236]	; (18284 <bt_att_accept+0xfc>)
   18196:	2200      	movs	r2, #0
   18198:	2300      	movs	r3, #0
   1819a:	4639      	mov	r1, r7
   1819c:	f005 f9f2 	bl	1d584 <k_mem_slab_alloc>
   181a0:	4605      	mov	r5, r0
   181a2:	b1a8      	cbz	r0, 181d0 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   181a4:	466d      	mov	r5, sp
   181a6:	b088      	sub	sp, #32
   181a8:	466a      	mov	r2, sp
   181aa:	4b37      	ldr	r3, [pc, #220]	; (18288 <bt_att_accept+0x100>)
   181ac:	4837      	ldr	r0, [pc, #220]	; (1828c <bt_att_accept+0x104>)
   181ae:	e9c2 3405 	strd	r3, r4, [r2, #20]
   181b2:	2303      	movs	r3, #3
   181b4:	f842 3f10 	str.w	r3, [r2, #16]!
   181b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   181bc:	f00b fad6 	bl	2376c <z_log_msg_static_create.constprop.0>
   181c0:	46ad      	mov	sp, r5
		return -ENOMEM;
   181c2:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   181c6:	4628      	mov	r0, r5
   181c8:	3708      	adds	r7, #8
   181ca:	46bd      	mov	sp, r7
   181cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   181d0:	f006 f976 	bl	1e4c0 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   181d4:	4b2e      	ldr	r3, [pc, #184]	; (18290 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   181d6:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   181d8:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   181da:	222c      	movs	r2, #44	; 0x2c
   181dc:	6838      	ldr	r0, [r7, #0]
   181de:	f00a fdf4 	bl	22dca <memset>
	att->conn = conn;
   181e2:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   181e4:	482b      	ldr	r0, [pc, #172]	; (18294 <bt_att_accept+0x10c>)
	att->conn = conn;
   181e6:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   181e8:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   181ea:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   181ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
   181f0:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   181f4:	2200      	movs	r2, #0
   181f6:	2300      	movs	r3, #0
   181f8:	1d39      	adds	r1, r7, #4
   181fa:	f005 f9c3 	bl	1d584 <k_mem_slab_alloc>
   181fe:	4605      	mov	r5, r0
   18200:	b180      	cbz	r0, 18224 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   18202:	6823      	ldr	r3, [r4, #0]
   18204:	466c      	mov	r4, sp
   18206:	b088      	sub	sp, #32
   18208:	466a      	mov	r2, sp
   1820a:	4923      	ldr	r1, [pc, #140]	; (18298 <bt_att_accept+0x110>)
   1820c:	481f      	ldr	r0, [pc, #124]	; (1828c <bt_att_accept+0x104>)
   1820e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18212:	2303      	movs	r3, #3
   18214:	f842 3f10 	str.w	r3, [r2, #16]!
   18218:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1821c:	f00b faa6 	bl	2376c <z_log_msg_static_create.constprop.0>
   18220:	46a5      	mov	sp, r4
	if (!chan) {
   18222:	e7ce      	b.n	181c2 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   18224:	4601      	mov	r1, r0
   18226:	22e8      	movs	r2, #232	; 0xe8
   18228:	6878      	ldr	r0, [r7, #4]
   1822a:	f00a fdce 	bl	22dca <memset>
	chan->chan.chan.ops = &ops;
   1822e:	6878      	ldr	r0, [r7, #4]
   18230:	4b1a      	ldr	r3, [pc, #104]	; (1829c <bt_att_accept+0x114>)
   18232:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   18234:	3098      	adds	r0, #152	; 0x98
   18236:	f00d f852 	bl	252de <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1823a:	687b      	ldr	r3, [r7, #4]
   1823c:	f3bf 8f5b 	dmb	ish
   18240:	3390      	adds	r3, #144	; 0x90
   18242:	e853 2f00 	ldrex	r2, [r3]
   18246:	e843 5100 	strex	r1, r5, [r3]
   1824a:	2900      	cmp	r1, #0
   1824c:	d1f9      	bne.n	18242 <bt_att_accept+0xba>
   1824e:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   18252:	687b      	ldr	r3, [r7, #4]
   18254:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   18256:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   18258:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1825c:	b91b      	cbnz	r3, 18266 <bt_att_accept+0xde>
   1825e:	f104 000c 	add.w	r0, r4, #12
   18262:	f00d f83c 	bl	252de <z_impl_k_queue_init>
	return list->head;
   18266:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   18268:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1826c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1826e:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   18272:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   18274:	b902      	cbnz	r2, 18278 <bt_att_accept+0xf0>
	list->tail = node;
   18276:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   18278:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1827a:	2b00      	cmp	r3, #0
   1827c:	d0a1      	beq.n	181c2 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   1827e:	3304      	adds	r3, #4
   18280:	6033      	str	r3, [r6, #0]
	return 0;
   18282:	e7a0      	b.n	181c6 <bt_att_accept+0x3e>
   18284:	20000a94 	.word	0x20000a94
   18288:	00027f7a 	.word	0x00027f7a
   1828c:	00025f50 	.word	0x00025f50
   18290:	20003768 	.word	0x20003768
   18294:	20000ab0 	.word	0x20000ab0
   18298:	00027f9f 	.word	0x00027f9f
   1829c:	2000078c 	.word	0x2000078c

000182a0 <bt_att_chan_create_pdu>:
{
   182a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   182a4:	b086      	sub	sp, #24
   182a6:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   182a8:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   182aa:	1c53      	adds	r3, r2, #1
   182ac:	428b      	cmp	r3, r1
{
   182ae:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   182b0:	d915      	bls.n	182de <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   182b2:	466c      	mov	r4, sp
   182b4:	b088      	sub	sp, #32
   182b6:	466a      	mov	r2, sp
   182b8:	4829      	ldr	r0, [pc, #164]	; (18360 <bt_att_chan_create_pdu+0xc0>)
   182ba:	61d3      	str	r3, [r2, #28]
   182bc:	2304      	movs	r3, #4
   182be:	e9c2 0105 	strd	r0, r1, [r2, #20]
   182c2:	f842 3f10 	str.w	r3, [r2, #16]!
   182c6:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   182ca:	4826      	ldr	r0, [pc, #152]	; (18364 <bt_att_chan_create_pdu+0xc4>)
   182cc:	f00b fa4e 	bl	2376c <z_log_msg_static_create.constprop.0>
   182d0:	46a5      	mov	sp, r4
		return NULL;
   182d2:	2400      	movs	r4, #0
}
   182d4:	4620      	mov	r0, r4
   182d6:	3718      	adds	r7, #24
   182d8:	46bd      	mov	sp, r7
   182da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   182de:	4628      	mov	r0, r5
   182e0:	f7ff fcf0 	bl	17cc4 <att_op_get_type>
   182e4:	2802      	cmp	r0, #2
   182e6:	d019      	beq.n	1831c <bt_att_chan_create_pdu+0x7c>
   182e8:	2804      	cmp	r0, #4
   182ea:	d017      	beq.n	1831c <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   182ec:	f04f 38ff 	mov.w	r8, #4294967295
   182f0:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   182f4:	2100      	movs	r1, #0
   182f6:	4642      	mov	r2, r8
   182f8:	464b      	mov	r3, r9
   182fa:	4608      	mov	r0, r1
   182fc:	f00b f917 	bl	2352e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   18300:	4604      	mov	r4, r0
   18302:	b980      	cbnz	r0, 18326 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   18304:	466c      	mov	r4, sp
   18306:	b088      	sub	sp, #32
   18308:	466a      	mov	r2, sp
   1830a:	4b17      	ldr	r3, [pc, #92]	; (18368 <bt_att_chan_create_pdu+0xc8>)
   1830c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   18310:	2303      	movs	r3, #3
   18312:	f842 3f10 	str.w	r3, [r2, #16]!
   18316:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1831a:	e7d6      	b.n	182ca <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1831c:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   18320:	f04f 0900 	mov.w	r9, #0
   18324:	e7e6      	b.n	182f4 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   18326:	4811      	ldr	r0, [pc, #68]	; (1836c <bt_att_chan_create_pdu+0xcc>)
   18328:	4642      	mov	r2, r8
   1832a:	464b      	mov	r3, r9
   1832c:	f005 fb94 	bl	1da58 <z_impl_k_queue_get>
	if (!data) {
   18330:	b970      	cbnz	r0, 18350 <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   18332:	4b0f      	ldr	r3, [pc, #60]	; (18370 <bt_att_chan_create_pdu+0xd0>)
   18334:	617b      	str	r3, [r7, #20]
   18336:	2302      	movs	r3, #2
   18338:	480a      	ldr	r0, [pc, #40]	; (18364 <bt_att_chan_create_pdu+0xc4>)
   1833a:	613b      	str	r3, [r7, #16]
   1833c:	f107 0210 	add.w	r2, r7, #16
   18340:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18344:	f00b fa12 	bl	2376c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   18348:	4620      	mov	r0, r4
   1834a:	f001 fc9d 	bl	19c88 <net_buf_unref>
		return NULL;
   1834e:	e7c0      	b.n	182d2 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   18350:	61a0      	str	r0, [r4, #24]
   18352:	2101      	movs	r1, #1
   18354:	f104 000c 	add.w	r0, r4, #12
   18358:	f00c f8ee 	bl	24538 <net_buf_simple_add>
	hdr->code = op;
   1835c:	7005      	strb	r5, [r0, #0]
	return buf;
   1835e:	e7b9      	b.n	182d4 <bt_att_chan_create_pdu+0x34>
   18360:	00027fc4 	.word	0x00027fc4
   18364:	00025f50 	.word	0x00025f50
   18368:	00027db4 	.word	0x00027db4
   1836c:	20000bbc 	.word	0x20000bbc
   18370:	00027fe9 	.word	0x00027fe9

00018374 <bt_att_recv>:
{
   18374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18378:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1837a:	8a0b      	ldrh	r3, [r1, #16]
{
   1837c:	af00      	add	r7, sp, #0
   1837e:	4682      	mov	sl, r0
   18380:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   18382:	b97b      	cbnz	r3, 183a4 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   18384:	4b4c      	ldr	r3, [pc, #304]	; (184b8 <bt_att_recv+0x144>)
   18386:	617b      	str	r3, [r7, #20]
   18388:	2302      	movs	r3, #2
   1838a:	613b      	str	r3, [r7, #16]
   1838c:	f107 0210 	add.w	r2, r7, #16
   18390:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   18394:	4849      	ldr	r0, [pc, #292]	; (184bc <bt_att_recv+0x148>)
   18396:	f00b f9e9 	bl	2376c <z_log_msg_static_create.constprop.0>
}
   1839a:	2000      	movs	r0, #0
   1839c:	371c      	adds	r7, #28
   1839e:	46bd      	mov	sp, r7
   183a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   183a4:	2101      	movs	r1, #1
   183a6:	f104 000c 	add.w	r0, r4, #12
   183aa:	f00c f8ec 	bl	24586 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   183ae:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   183b2:	4605      	mov	r5, r0
   183b4:	2b00      	cmp	r3, #0
   183b6:	d0f0      	beq.n	1839a <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   183b8:	7801      	ldrb	r1, [r0, #0]
   183ba:	f8df 8104 	ldr.w	r8, [pc, #260]	; 184c0 <bt_att_recv+0x14c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   183be:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   183c2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   183c4:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   183c8:	4288      	cmp	r0, r1
   183ca:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   183ce:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   183d2:	d114      	bne.n	183fe <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   183d4:	f892 9002 	ldrb.w	r9, [r2, #2]
   183d8:	f1b9 0f01 	cmp.w	r9, #1
   183dc:	d131      	bne.n	18442 <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   183de:	2100      	movs	r1, #0
   183e0:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   183e4:	f00b faac 	bl	23940 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   183e8:	2800      	cmp	r0, #0
   183ea:	d035      	beq.n	18458 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   183ec:	4b35      	ldr	r3, [pc, #212]	; (184c4 <bt_att_recv+0x150>)
   183ee:	617b      	str	r3, [r7, #20]
   183f0:	2302      	movs	r3, #2
   183f2:	613b      	str	r3, [r7, #16]
   183f4:	f107 0210 	add.w	r2, r7, #16
   183f8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   183fc:	e7ca      	b.n	18394 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   183fe:	3301      	adds	r3, #1
   18400:	2b0e      	cmp	r3, #14
   18402:	d1df      	bne.n	183c4 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   18404:	466c      	mov	r4, sp
   18406:	b088      	sub	sp, #32
   18408:	466a      	mov	r2, sp
   1840a:	4b2f      	ldr	r3, [pc, #188]	; (184c8 <bt_att_recv+0x154>)
   1840c:	482b      	ldr	r0, [pc, #172]	; (184bc <bt_att_recv+0x148>)
   1840e:	e9c2 3105 	strd	r3, r1, [r2, #20]
   18412:	2303      	movs	r3, #3
   18414:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18418:	f842 3f10 	str.w	r3, [r2, #16]!
   1841c:	f00b f9a6 	bl	2376c <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   18420:	7829      	ldrb	r1, [r5, #0]
   18422:	46a5      	mov	sp, r4
   18424:	4608      	mov	r0, r1
   18426:	f7ff fc4d 	bl	17cc4 <att_op_get_type>
   1842a:	2800      	cmp	r0, #0
   1842c:	d0b5      	beq.n	1839a <bt_att_recv+0x26>
   1842e:	2805      	cmp	r0, #5
   18430:	d0b3      	beq.n	1839a <bt_att_recv+0x26>
	if (!req) {
   18432:	2900      	cmp	r1, #0
   18434:	d0b1      	beq.n	1839a <bt_att_recv+0x26>
   18436:	2306      	movs	r3, #6
   18438:	2200      	movs	r2, #0
   1843a:	4630      	mov	r0, r6
   1843c:	f00b fbfe 	bl	23c3c <send_err_rsp.part.0>
   18440:	e7ab      	b.n	1839a <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   18442:	f1b9 0f05 	cmp.w	r9, #5
   18446:	d107      	bne.n	18458 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   18448:	2101      	movs	r1, #1
   1844a:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1844e:	f00b fa77 	bl	23940 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   18452:	b108      	cbz	r0, 18458 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   18454:	4b1d      	ldr	r3, [pc, #116]	; (184cc <bt_att_recv+0x158>)
   18456:	e7ca      	b.n	183ee <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   18458:	44d8      	add	r8, fp
   1845a:	8a23      	ldrh	r3, [r4, #16]
   1845c:	f898 2001 	ldrb.w	r2, [r8, #1]
   18460:	429a      	cmp	r2, r3
   18462:	d916      	bls.n	18492 <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   18464:	46e9      	mov	r9, sp
   18466:	b088      	sub	sp, #32
   18468:	7829      	ldrb	r1, [r5, #0]
   1846a:	466a      	mov	r2, sp
   1846c:	4818      	ldr	r0, [pc, #96]	; (184d0 <bt_att_recv+0x15c>)
   1846e:	61d1      	str	r1, [r2, #28]
   18470:	2404      	movs	r4, #4
   18472:	e9c2 0305 	strd	r0, r3, [r2, #20]
   18476:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1847a:	f842 4f10 	str.w	r4, [r2, #16]!
   1847e:	480f      	ldr	r0, [pc, #60]	; (184bc <bt_att_recv+0x148>)
   18480:	f00b f974 	bl	2376c <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   18484:	f898 3002 	ldrb.w	r3, [r8, #2]
   18488:	2b01      	cmp	r3, #1
   1848a:	46cd      	mov	sp, r9
   1848c:	d185      	bne.n	1839a <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1848e:	4623      	mov	r3, r4
   18490:	e00c      	b.n	184ac <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   18492:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18496:	4621      	mov	r1, r4
   18498:	4630      	mov	r0, r6
   1849a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1849c:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   184a0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   184a2:	f47f af7a 	bne.w	1839a <bt_att_recv+0x26>
   184a6:	2800      	cmp	r0, #0
   184a8:	f43f af77 	beq.w	1839a <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   184ac:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   184ae:	2900      	cmp	r1, #0
   184b0:	f43f af73 	beq.w	1839a <bt_att_recv+0x26>
   184b4:	e7c0      	b.n	18438 <bt_att_recv+0xc4>
   184b6:	bf00      	nop
   184b8:	00028008 	.word	0x00028008
   184bc:	00025f50 	.word	0x00025f50
   184c0:	00026384 	.word	0x00026384
   184c4:	0002803d 	.word	0x0002803d
   184c8:	00028023 	.word	0x00028023
   184cc:	00028059 	.word	0x00028059
   184d0:	00028078 	.word	0x00028078

000184d4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   184d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   184d6:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   184d8:	6803      	ldr	r3, [r0, #0]
   184da:	460d      	mov	r5, r1
   184dc:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   184de:	b087      	sub	sp, #28
   184e0:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   184e2:	bf18      	it	ne
   184e4:	2101      	movne	r1, #1
   184e6:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   184e8:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   184ea:	f00b ff52 	bl	24392 <bt_gatt_change_aware>
   184ee:	b948      	cbnz	r0, 18504 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   184f0:	2105      	movs	r1, #5
   184f2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   184f6:	f00b fa23 	bl	23940 <atomic_test_and_set_bit>
   184fa:	2800      	cmp	r0, #0
   184fc:	d048      	beq.n	18590 <att_write_rsp.constprop.0+0xbc>
			return 0;
   184fe:	2000      	movs	r0, #0
}
   18500:	b007      	add	sp, #28
   18502:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   18504:	2e00      	cmp	r6, #0
   18506:	d045      	beq.n	18594 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   18508:	2218      	movs	r2, #24
   1850a:	2100      	movs	r1, #0
   1850c:	4668      	mov	r0, sp
   1850e:	f00a fc5c 	bl	22dca <memset>
	if (rsp) {
   18512:	bb67      	cbnz	r7, 1856e <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   18514:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18516:	4a20      	ldr	r2, [pc, #128]	; (18598 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   18518:	681b      	ldr	r3, [r3, #0]
   1851a:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1851c:	2300      	movs	r3, #0
   1851e:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   18522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18524:	9303      	str	r3, [sp, #12]
	data.len = len;
   18526:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1852a:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1852e:	2301      	movs	r3, #1
   18530:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   18534:	4631      	mov	r1, r6
   18536:	466b      	mov	r3, sp
   18538:	4630      	mov	r0, r6
	data.req = req;
   1853a:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1853e:	f00b f87b 	bl	23638 <bt_gatt_foreach_attr>
	if (data.err) {
   18542:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18546:	b1e3      	cbz	r3, 18582 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   18548:	2f00      	cmp	r7, #0
   1854a:	d0d8      	beq.n	184fe <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1854c:	9b01      	ldr	r3, [sp, #4]
   1854e:	6998      	ldr	r0, [r3, #24]
   18550:	f7ff fbfe 	bl	17d50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18554:	9801      	ldr	r0, [sp, #4]
   18556:	f001 fb97 	bl	19c88 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1855a:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1855e:	2d00      	cmp	r5, #0
   18560:	d0cd      	beq.n	184fe <att_write_rsp.constprop.0+0x2a>
   18562:	4632      	mov	r2, r6
   18564:	4629      	mov	r1, r5
   18566:	4620      	mov	r0, r4
   18568:	f00b fb68 	bl	23c3c <send_err_rsp.part.0>
   1856c:	e7c7      	b.n	184fe <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1856e:	2200      	movs	r2, #0
   18570:	4639      	mov	r1, r7
   18572:	4620      	mov	r0, r4
   18574:	f7ff fe94 	bl	182a0 <bt_att_chan_create_pdu>
   18578:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1857a:	2800      	cmp	r0, #0
   1857c:	d1ca      	bne.n	18514 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1857e:	200e      	movs	r0, #14
   18580:	e7be      	b.n	18500 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   18582:	9901      	ldr	r1, [sp, #4]
   18584:	2900      	cmp	r1, #0
   18586:	d0ba      	beq.n	184fe <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   18588:	4620      	mov	r0, r4
   1858a:	f00b f925 	bl	237d8 <bt_att_chan_send_rsp>
   1858e:	e7b6      	b.n	184fe <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18590:	2012      	movs	r0, #18
   18592:	e7b5      	b.n	18500 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   18594:	2001      	movs	r0, #1
   18596:	e7b3      	b.n	18500 <att_write_rsp.constprop.0+0x2c>
   18598:	000235d7 	.word	0x000235d7

0001859c <bt_att_create_pdu>:
{
   1859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1859e:	af00      	add	r7, sp, #0
   185a0:	460e      	mov	r6, r1
   185a2:	4615      	mov	r5, r2
	att = att_get(conn);
   185a4:	f7ff fd00 	bl	17fa8 <att_get>
	if (!att) {
   185a8:	b1e0      	cbz	r0, 185e4 <bt_att_create_pdu+0x48>
	return list->head;
   185aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   185ac:	4618      	mov	r0, r3
   185ae:	b11b      	cbz	r3, 185b8 <bt_att_create_pdu+0x1c>
	return node->next;
   185b0:	f850 39e0 	ldr.w	r3, [r0], #-224
   185b4:	b103      	cbz	r3, 185b8 <bt_att_create_pdu+0x1c>
   185b6:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   185b8:	1c6c      	adds	r4, r5, #1
   185ba:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   185bc:	b118      	cbz	r0, 185c6 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   185be:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   185c0:	42a1      	cmp	r1, r4
   185c2:	d21a      	bcs.n	185fa <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   185c4:	b983      	cbnz	r3, 185e8 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   185c6:	466d      	mov	r5, sp
   185c8:	b088      	sub	sp, #32
   185ca:	466a      	mov	r2, sp
   185cc:	4b0f      	ldr	r3, [pc, #60]	; (1860c <bt_att_create_pdu+0x70>)
   185ce:	4810      	ldr	r0, [pc, #64]	; (18610 <bt_att_create_pdu+0x74>)
   185d0:	e9c2 3405 	strd	r3, r4, [r2, #20]
   185d4:	2303      	movs	r3, #3
   185d6:	f842 3f10 	str.w	r3, [r2, #16]!
   185da:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   185de:	f00b f8c5 	bl	2376c <z_log_msg_static_create.constprop.0>
   185e2:	46ad      	mov	sp, r5
		return NULL;
   185e4:	2000      	movs	r0, #0
   185e6:	e00c      	b.n	18602 <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   185e8:	4618      	mov	r0, r3
   185ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   185ee:	b153      	cbz	r3, 18606 <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   185f0:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   185f2:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   185f4:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   185f8:	d8f6      	bhi.n	185e8 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   185fa:	462a      	mov	r2, r5
   185fc:	4631      	mov	r1, r6
   185fe:	f7ff fe4f 	bl	182a0 <bt_att_chan_create_pdu>
}
   18602:	46bd      	mov	sp, r7
   18604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   18606:	4614      	mov	r4, r2
   18608:	e7d9      	b.n	185be <bt_att_create_pdu+0x22>
   1860a:	bf00      	nop
   1860c:	00028097 	.word	0x00028097
   18610:	00025f50 	.word	0x00025f50

00018614 <att_read_group_req>:
{
   18614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18618:	8a0e      	ldrh	r6, [r1, #16]
   1861a:	3e04      	subs	r6, #4
   1861c:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1861e:	2e02      	cmp	r6, #2
{
   18620:	4604      	mov	r4, r0
   18622:	b08c      	sub	sp, #48	; 0x30
   18624:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18626:	d001      	beq.n	1862c <att_read_group_req+0x18>
   18628:	2e10      	cmp	r6, #16
   1862a:	d16a      	bne.n	18702 <att_read_group_req+0xee>
   1862c:	2104      	movs	r1, #4
   1862e:	300c      	adds	r0, #12
   18630:	f00b ffa9 	bl	24586 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18634:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   18638:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1863a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1863c:	1d01      	adds	r1, r0, #4
   1863e:	4632      	mov	r2, r6
   18640:	4640      	mov	r0, r8
   18642:	f00a fc0e 	bl	22e62 <bt_uuid_create>
   18646:	2800      	cmp	r0, #0
   18648:	d05d      	beq.n	18706 <att_read_group_req+0xf2>
	if (!start || !end) {
   1864a:	2d00      	cmp	r5, #0
   1864c:	d03a      	beq.n	186c4 <att_read_group_req+0xb0>
   1864e:	2600      	movs	r6, #0
   18650:	2f00      	cmp	r7, #0
   18652:	d036      	beq.n	186c2 <att_read_group_req+0xae>
	if (start > end) {
   18654:	42bd      	cmp	r5, r7
   18656:	d835      	bhi.n	186c4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   18658:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1865c:	a901      	add	r1, sp, #4
   1865e:	4640      	mov	r0, r8
   18660:	f88d 6004 	strb.w	r6, [sp, #4]
   18664:	f8ad 3006 	strh.w	r3, [sp, #6]
   18668:	f00a fbcd 	bl	22e06 <bt_uuid_cmp>
   1866c:	bb70      	cbnz	r0, 186cc <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1866e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   18670:	2214      	movs	r2, #20
   18672:	2100      	movs	r1, #0
   18674:	a807      	add	r0, sp, #28
   18676:	f00a fba8 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1867a:	2201      	movs	r2, #1
   1867c:	2111      	movs	r1, #17
   1867e:	4630      	mov	r0, r6
   18680:	f7ff ff8c 	bl	1859c <bt_att_create_pdu>
   18684:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   18686:	2800      	cmp	r0, #0
   18688:	d03d      	beq.n	18706 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1868a:	2101      	movs	r1, #1
   1868c:	300c      	adds	r0, #12
	data.uuid = uuid;
   1868e:	e9cd 4807 	strd	r4, r8, [sp, #28]
   18692:	f00b ff51 	bl	24538 <net_buf_simple_add>
	data.rsp->len = 0U;
   18696:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18698:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1869a:	4a1c      	ldr	r2, [pc, #112]	; (1870c <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1869c:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1869e:	4639      	mov	r1, r7
	data.group = NULL;
   186a0:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   186a2:	4628      	mov	r0, r5
   186a4:	ab07      	add	r3, sp, #28
   186a6:	f00a ffc7 	bl	23638 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   186aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   186ac:	781b      	ldrb	r3, [r3, #0]
   186ae:	bb1b      	cbnz	r3, 186f8 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   186b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   186b2:	6998      	ldr	r0, [r3, #24]
   186b4:	f7ff fb4c 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   186b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   186ba:	f001 fae5 	bl	19c88 <net_buf_unref>
	if (!req) {
   186be:	230a      	movs	r3, #10
   186c0:	e001      	b.n	186c6 <att_read_group_req+0xb2>
			*err = 0U;
   186c2:	463d      	mov	r5, r7
	if (!req) {
   186c4:	2301      	movs	r3, #1
   186c6:	462a      	mov	r2, r5
   186c8:	2110      	movs	r1, #16
   186ca:	e00e      	b.n	186ea <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   186cc:	f642 0301 	movw	r3, #10241	; 0x2801
   186d0:	a907      	add	r1, sp, #28
   186d2:	4640      	mov	r0, r8
   186d4:	f88d 601c 	strb.w	r6, [sp, #28]
   186d8:	f8ad 301e 	strh.w	r3, [sp, #30]
   186dc:	f00a fb93 	bl	22e06 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   186e0:	2800      	cmp	r0, #0
   186e2:	d0c4      	beq.n	1866e <att_read_group_req+0x5a>
	if (!req) {
   186e4:	2310      	movs	r3, #16
   186e6:	462a      	mov	r2, r5
   186e8:	4619      	mov	r1, r3
   186ea:	4620      	mov	r0, r4
   186ec:	f00b faa6 	bl	23c3c <send_err_rsp.part.0>
		return 0;
   186f0:	2000      	movs	r0, #0
}
   186f2:	b00c      	add	sp, #48	; 0x30
   186f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   186f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   186fa:	4620      	mov	r0, r4
   186fc:	f00b f86c 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   18700:	e7f6      	b.n	186f0 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   18702:	2004      	movs	r0, #4
   18704:	e7f5      	b.n	186f2 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   18706:	200e      	movs	r0, #14
   18708:	e7f3      	b.n	186f2 <att_read_group_req+0xde>
   1870a:	bf00      	nop
   1870c:	0001803d 	.word	0x0001803d

00018710 <att_read_mult_vl_req>:
{
   18710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18714:	6846      	ldr	r6, [r0, #4]
{
   18716:	b085      	sub	sp, #20
   18718:	4604      	mov	r4, r0
   1871a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1871c:	4630      	mov	r0, r6
   1871e:	2101      	movs	r1, #1
   18720:	f00b fe37 	bl	24392 <bt_gatt_change_aware>
   18724:	b950      	cbnz	r0, 1873c <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   18726:	2105      	movs	r1, #5
   18728:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1872c:	f00b f908 	bl	23940 <atomic_test_and_set_bit>
   18730:	2800      	cmp	r0, #0
   18732:	d13b      	bne.n	187ac <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18734:	2012      	movs	r0, #18
}
   18736:	b005      	add	sp, #20
   18738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1873c:	2210      	movs	r2, #16
   1873e:	2100      	movs	r1, #0
   18740:	4668      	mov	r0, sp
   18742:	f00a fb42 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   18746:	2200      	movs	r2, #0
   18748:	2121      	movs	r1, #33	; 0x21
   1874a:	4630      	mov	r0, r6
   1874c:	f7ff ff26 	bl	1859c <bt_att_create_pdu>
   18750:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18752:	b368      	cbz	r0, 187b0 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18754:	f8df 905c 	ldr.w	r9, [pc, #92]	; 187b4 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   18758:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1875a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1875e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   18762:	8a2b      	ldrh	r3, [r5, #16]
   18764:	2b01      	cmp	r3, #1
   18766:	d804      	bhi.n	18772 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   18768:	9902      	ldr	r1, [sp, #8]
   1876a:	4620      	mov	r0, r4
   1876c:	f00b f834 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   18770:	e01c      	b.n	187ac <att_read_mult_vl_req+0x9c>
   18772:	4638      	mov	r0, r7
   18774:	f00b ff0f 	bl	24596 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18778:	466b      	mov	r3, sp
   1877a:	464a      	mov	r2, r9
   1877c:	4601      	mov	r1, r0
   1877e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18780:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   18784:	f00a ff58 	bl	23638 <bt_gatt_foreach_attr>
		if (data.err) {
   18788:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1878c:	2b00      	cmp	r3, #0
   1878e:	d0e8      	beq.n	18762 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18790:	9b02      	ldr	r3, [sp, #8]
   18792:	6998      	ldr	r0, [r3, #24]
   18794:	f7ff fadc 	bl	17d50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18798:	9802      	ldr	r0, [sp, #8]
   1879a:	f001 fa75 	bl	19c88 <net_buf_unref>
	if (!req) {
   1879e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   187a2:	4632      	mov	r2, r6
   187a4:	2120      	movs	r1, #32
   187a6:	4620      	mov	r0, r4
   187a8:	f00b fa48 	bl	23c3c <send_err_rsp.part.0>
			return 0;
   187ac:	2000      	movs	r0, #0
   187ae:	e7c2      	b.n	18736 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   187b0:	200e      	movs	r0, #14
   187b2:	e7c0      	b.n	18736 <att_read_mult_vl_req+0x26>
   187b4:	000239b1 	.word	0x000239b1

000187b8 <att_read_mult_req>:
{
   187b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   187bc:	6846      	ldr	r6, [r0, #4]
{
   187be:	b085      	sub	sp, #20
   187c0:	4604      	mov	r4, r0
   187c2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   187c4:	4630      	mov	r0, r6
   187c6:	2101      	movs	r1, #1
   187c8:	f00b fde3 	bl	24392 <bt_gatt_change_aware>
   187cc:	b950      	cbnz	r0, 187e4 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   187ce:	2105      	movs	r1, #5
   187d0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   187d4:	f00b f8b4 	bl	23940 <atomic_test_and_set_bit>
   187d8:	2800      	cmp	r0, #0
   187da:	d13b      	bne.n	18854 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   187dc:	2012      	movs	r0, #18
}
   187de:	b005      	add	sp, #20
   187e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   187e4:	2210      	movs	r2, #16
   187e6:	2100      	movs	r1, #0
   187e8:	4668      	mov	r0, sp
   187ea:	f00a faee 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   187ee:	2200      	movs	r2, #0
   187f0:	210f      	movs	r1, #15
   187f2:	4630      	mov	r0, r6
   187f4:	f7ff fed2 	bl	1859c <bt_att_create_pdu>
   187f8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   187fa:	b368      	cbz	r0, 18858 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   187fc:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1885c <att_read_mult_req+0xa4>
	data.chan = chan;
   18800:	9400      	str	r4, [sp, #0]
   18802:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18806:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1880a:	8a2b      	ldrh	r3, [r5, #16]
   1880c:	2b01      	cmp	r3, #1
   1880e:	d804      	bhi.n	1881a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   18810:	9902      	ldr	r1, [sp, #8]
   18812:	4620      	mov	r0, r4
   18814:	f00a ffe0 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   18818:	e01c      	b.n	18854 <att_read_mult_req+0x9c>
   1881a:	4638      	mov	r0, r7
   1881c:	f00b febb 	bl	24596 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   18820:	466b      	mov	r3, sp
   18822:	464a      	mov	r2, r9
   18824:	4601      	mov	r1, r0
   18826:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   18828:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1882c:	f00a ff04 	bl	23638 <bt_gatt_foreach_attr>
		if (data.err) {
   18830:	f89d 300c 	ldrb.w	r3, [sp, #12]
   18834:	2b00      	cmp	r3, #0
   18836:	d0e8      	beq.n	1880a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18838:	9b02      	ldr	r3, [sp, #8]
   1883a:	6998      	ldr	r0, [r3, #24]
   1883c:	f7ff fa88 	bl	17d50 <tx_meta_data_free>
			net_buf_unref(data.buf);
   18840:	9802      	ldr	r0, [sp, #8]
   18842:	f001 fa21 	bl	19c88 <net_buf_unref>
	if (!req) {
   18846:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1884a:	4632      	mov	r2, r6
   1884c:	210e      	movs	r1, #14
   1884e:	4620      	mov	r0, r4
   18850:	f00b f9f4 	bl	23c3c <send_err_rsp.part.0>
			return 0;
   18854:	2000      	movs	r0, #0
   18856:	e7c2      	b.n	187de <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   18858:	200e      	movs	r0, #14
   1885a:	e7c0      	b.n	187de <att_read_mult_req+0x26>
   1885c:	0002396b 	.word	0x0002396b

00018860 <att_read_rsp>:
{
   18860:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   18864:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   18868:	4604      	mov	r4, r0
   1886a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1886c:	4640      	mov	r0, r8
   1886e:	2101      	movs	r1, #1
{
   18870:	4617      	mov	r7, r2
   18872:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   18874:	f00b fd8d 	bl	24392 <bt_gatt_change_aware>
   18878:	b948      	cbnz	r0, 1888e <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1887a:	2105      	movs	r1, #5
   1887c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   18880:	f00b f85e 	bl	23940 <atomic_test_and_set_bit>
   18884:	bb78      	cbnz	r0, 188e6 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   18886:	2012      	movs	r0, #18
}
   18888:	b004      	add	sp, #16
   1888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1888e:	b38d      	cbz	r5, 188f4 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   18890:	2210      	movs	r2, #16
   18892:	2100      	movs	r1, #0
   18894:	4668      	mov	r0, sp
   18896:	f00a fa98 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1889a:	2200      	movs	r2, #0
   1889c:	4639      	mov	r1, r7
   1889e:	4640      	mov	r0, r8
   188a0:	f7ff fe7c 	bl	1859c <bt_att_create_pdu>
   188a4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   188a6:	b338      	cbz	r0, 188f8 <att_read_rsp+0x98>
	data.offset = offset;
   188a8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   188ac:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   188b0:	2301      	movs	r3, #1
   188b2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   188b6:	4a11      	ldr	r2, [pc, #68]	; (188fc <att_read_rsp+0x9c>)
	data.chan = chan;
   188b8:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   188ba:	466b      	mov	r3, sp
   188bc:	4629      	mov	r1, r5
   188be:	4628      	mov	r0, r5
   188c0:	f00a feba 	bl	23638 <bt_gatt_foreach_attr>
	if (data.err) {
   188c4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   188c8:	b17b      	cbz	r3, 188ea <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   188ca:	9b02      	ldr	r3, [sp, #8]
   188cc:	6998      	ldr	r0, [r3, #24]
   188ce:	f7ff fa3f 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   188d2:	9802      	ldr	r0, [sp, #8]
   188d4:	f001 f9d8 	bl	19c88 <net_buf_unref>
	if (!req) {
   188d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   188dc:	462a      	mov	r2, r5
   188de:	4631      	mov	r1, r6
   188e0:	4620      	mov	r0, r4
   188e2:	f00b f9ab 	bl	23c3c <send_err_rsp.part.0>
			return 0;
   188e6:	2000      	movs	r0, #0
   188e8:	e7ce      	b.n	18888 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   188ea:	9902      	ldr	r1, [sp, #8]
   188ec:	4620      	mov	r0, r4
   188ee:	f00a ff73 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   188f2:	e7f8      	b.n	188e6 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   188f4:	2001      	movs	r0, #1
   188f6:	e7c7      	b.n	18888 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   188f8:	200e      	movs	r0, #14
   188fa:	e7c5      	b.n	18888 <att_read_rsp+0x28>
   188fc:	0002396b 	.word	0x0002396b

00018900 <att_read_type_req>:
{
   18900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   18904:	8a0d      	ldrh	r5, [r1, #16]
   18906:	3d04      	subs	r5, #4
   18908:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1890a:	2d02      	cmp	r5, #2
{
   1890c:	4604      	mov	r4, r0
   1890e:	b08c      	sub	sp, #48	; 0x30
   18910:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   18912:	d001      	beq.n	18918 <att_read_type_req+0x18>
   18914:	2d10      	cmp	r5, #16
   18916:	d150      	bne.n	189ba <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   18918:	2104      	movs	r1, #4
   1891a:	300c      	adds	r0, #12
   1891c:	f00b fe33 	bl	24586 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18920:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   18924:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18926:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   18928:	1d01      	adds	r1, r0, #4
   1892a:	462a      	mov	r2, r5
   1892c:	4640      	mov	r0, r8
   1892e:	f00a fa98 	bl	22e62 <bt_uuid_create>
   18932:	b188      	cbz	r0, 18958 <att_read_type_req+0x58>
	if (!start || !end) {
   18934:	b19e      	cbz	r6, 1895e <att_read_type_req+0x5e>
   18936:	b18f      	cbz	r7, 1895c <att_read_type_req+0x5c>
	if (start > end) {
   18938:	42b7      	cmp	r7, r6
   1893a:	d310      	bcc.n	1895e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1893c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1893e:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   18940:	2100      	movs	r1, #0
   18942:	eb0d 0002 	add.w	r0, sp, r2
   18946:	f00a fa40 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1894a:	2201      	movs	r2, #1
   1894c:	2109      	movs	r1, #9
   1894e:	4628      	mov	r0, r5
   18950:	f7ff fe24 	bl	1859c <bt_att_create_pdu>
   18954:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   18956:	b960      	cbnz	r0, 18972 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   18958:	200e      	movs	r0, #14
   1895a:	e007      	b.n	1896c <att_read_type_req+0x6c>
			*err = 0U;
   1895c:	463e      	mov	r6, r7
	if (!req) {
   1895e:	2301      	movs	r3, #1
   18960:	4632      	mov	r2, r6
   18962:	2108      	movs	r1, #8
   18964:	4620      	mov	r0, r4
   18966:	f00b f969 	bl	23c3c <send_err_rsp.part.0>
		return 0;
   1896a:	2000      	movs	r0, #0
}
   1896c:	b00c      	add	sp, #48	; 0x30
   1896e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   18972:	2101      	movs	r1, #1
   18974:	300c      	adds	r0, #12
	data.uuid = uuid;
   18976:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1897a:	f00b fddd 	bl	24538 <net_buf_simple_add>
	data.rsp->len = 0U;
   1897e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   18980:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   18982:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18984:	230a      	movs	r3, #10
   18986:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1898a:	4a0d      	ldr	r2, [pc, #52]	; (189c0 <att_read_type_req+0xc0>)
   1898c:	ab06      	add	r3, sp, #24
   1898e:	4639      	mov	r1, r7
   18990:	4630      	mov	r0, r6
   18992:	f00a fe51 	bl	23638 <bt_gatt_foreach_attr>
	if (data.err) {
   18996:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1899a:	b14b      	cbz	r3, 189b0 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1899c:	9b08      	ldr	r3, [sp, #32]
   1899e:	6998      	ldr	r0, [r3, #24]
   189a0:	f7ff f9d6 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   189a4:	9808      	ldr	r0, [sp, #32]
   189a6:	f001 f96f 	bl	19c88 <net_buf_unref>
	if (!req) {
   189aa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   189ae:	e7d7      	b.n	18960 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   189b0:	9908      	ldr	r1, [sp, #32]
   189b2:	4620      	mov	r0, r4
   189b4:	f00a ff10 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   189b8:	e7d7      	b.n	1896a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   189ba:	2004      	movs	r0, #4
   189bc:	e7d6      	b.n	1896c <att_read_type_req+0x6c>
   189be:	bf00      	nop
   189c0:	000180e9 	.word	0x000180e9

000189c4 <att_find_type_req>:
{
   189c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   189c8:	460f      	mov	r7, r1
   189ca:	b086      	sub	sp, #24
   189cc:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   189ce:	2106      	movs	r1, #6
   189d0:	f107 000c 	add.w	r0, r7, #12
   189d4:	f00b fdd7 	bl	24586 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   189d8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   189da:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   189de:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   189e0:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   189e4:	b1c5      	cbz	r5, 18a18 <att_find_type_req+0x54>
   189e6:	2300      	movs	r3, #0
   189e8:	f1b8 0f00 	cmp.w	r8, #0
   189ec:	d013      	beq.n	18a16 <att_find_type_req+0x52>
	if (start > end) {
   189ee:	4545      	cmp	r5, r8
   189f0:	d812      	bhi.n	18a18 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   189f2:	f88d 3000 	strb.w	r3, [sp]
   189f6:	f88d 3004 	strb.w	r3, [sp, #4]
   189fa:	a901      	add	r1, sp, #4
   189fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   18a00:	4668      	mov	r0, sp
   18a02:	f8ad 2002 	strh.w	r2, [sp, #2]
   18a06:	f8ad 3006 	strh.w	r3, [sp, #6]
   18a0a:	f00a f9fc 	bl	22e06 <bt_uuid_cmp>
   18a0e:	4606      	mov	r6, r0
   18a10:	b160      	cbz	r0, 18a2c <att_find_type_req+0x68>
	if (!req) {
   18a12:	230a      	movs	r3, #10
   18a14:	e001      	b.n	18a1a <att_find_type_req+0x56>
			*err = 0U;
   18a16:	4645      	mov	r5, r8
	if (!req) {
   18a18:	2301      	movs	r3, #1
   18a1a:	462a      	mov	r2, r5
   18a1c:	2106      	movs	r1, #6
   18a1e:	4620      	mov	r0, r4
   18a20:	f00b f90c 	bl	23c3c <send_err_rsp.part.0>
		return 0;
   18a24:	2000      	movs	r0, #0
}
   18a26:	b006      	add	sp, #24
   18a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   18a2c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18a30:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   18a32:	4601      	mov	r1, r0
   18a34:	2214      	movs	r2, #20
   18a36:	a801      	add	r0, sp, #4
   18a38:	f00a f9c7 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   18a3c:	4632      	mov	r2, r6
   18a3e:	2107      	movs	r1, #7
   18a40:	4650      	mov	r0, sl
   18a42:	f7ff fdab 	bl	1859c <bt_att_create_pdu>
   18a46:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   18a48:	b1f8      	cbz	r0, 18a8a <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   18a4a:	230a      	movs	r3, #10
   18a4c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18a50:	4a0f      	ldr	r2, [pc, #60]	; (18a90 <att_find_type_req+0xcc>)
	data.chan = chan;
   18a52:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18a54:	ab01      	add	r3, sp, #4
   18a56:	4641      	mov	r1, r8
   18a58:	4628      	mov	r0, r5
	data.value = value;
   18a5a:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   18a5e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   18a62:	f00a fde9 	bl	23638 <bt_gatt_foreach_attr>
	if (data.err) {
   18a66:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18a6a:	b14b      	cbz	r3, 18a80 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18a6c:	9b02      	ldr	r3, [sp, #8]
   18a6e:	6998      	ldr	r0, [r3, #24]
   18a70:	f7ff f96e 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18a74:	9802      	ldr	r0, [sp, #8]
   18a76:	f001 f907 	bl	19c88 <net_buf_unref>
	if (!req) {
   18a7a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18a7e:	e7cc      	b.n	18a1a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   18a80:	9902      	ldr	r1, [sp, #8]
   18a82:	4620      	mov	r0, r4
   18a84:	f00a fea8 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   18a88:	e7cc      	b.n	18a24 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   18a8a:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   18a8c:	e7cb      	b.n	18a26 <att_find_type_req+0x62>
   18a8e:	bf00      	nop
   18a90:	00017d6d 	.word	0x00017d6d

00018a94 <att_find_info_req>:
{
   18a94:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   18a96:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   18a98:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   18a9a:	885e      	ldrh	r6, [r3, #2]
{
   18a9c:	b085      	sub	sp, #20
   18a9e:	4604      	mov	r4, r0
	if (!start || !end) {
   18aa0:	b195      	cbz	r5, 18ac8 <att_find_info_req+0x34>
   18aa2:	b186      	cbz	r6, 18ac6 <att_find_info_req+0x32>
	if (start > end) {
   18aa4:	42b5      	cmp	r5, r6
   18aa6:	d80f      	bhi.n	18ac8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   18aa8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   18aaa:	2210      	movs	r2, #16
   18aac:	2100      	movs	r1, #0
   18aae:	4668      	mov	r0, sp
   18ab0:	f00a f98b 	bl	22dca <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   18ab4:	2200      	movs	r2, #0
   18ab6:	2105      	movs	r1, #5
   18ab8:	4638      	mov	r0, r7
   18aba:	f7ff fd6f 	bl	1859c <bt_att_create_pdu>
   18abe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   18ac0:	b958      	cbnz	r0, 18ada <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   18ac2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   18ac4:	e007      	b.n	18ad6 <att_find_info_req+0x42>
			*err = 0U;
   18ac6:	4635      	mov	r5, r6
	if (!req) {
   18ac8:	2301      	movs	r3, #1
   18aca:	462a      	mov	r2, r5
   18acc:	2104      	movs	r1, #4
   18ace:	4620      	mov	r0, r4
   18ad0:	f00b f8b4 	bl	23c3c <send_err_rsp.part.0>
		return 0;
   18ad4:	2000      	movs	r0, #0
}
   18ad6:	b005      	add	sp, #20
   18ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18ada:	466b      	mov	r3, sp
   18adc:	4a0a      	ldr	r2, [pc, #40]	; (18b08 <att_find_info_req+0x74>)
	data.chan = chan;
   18ade:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   18ae0:	4631      	mov	r1, r6
   18ae2:	4628      	mov	r0, r5
   18ae4:	f00a fda8 	bl	23638 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   18ae8:	9b02      	ldr	r3, [sp, #8]
   18aea:	b943      	cbnz	r3, 18afe <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   18aec:	9b01      	ldr	r3, [sp, #4]
   18aee:	6998      	ldr	r0, [r3, #24]
   18af0:	f7ff f92e 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(data.buf);
   18af4:	9801      	ldr	r0, [sp, #4]
   18af6:	f001 f8c7 	bl	19c88 <net_buf_unref>
	if (!req) {
   18afa:	230a      	movs	r3, #10
   18afc:	e7e5      	b.n	18aca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   18afe:	9901      	ldr	r1, [sp, #4]
   18b00:	4620      	mov	r0, r4
   18b02:	f00a fe69 	bl	237d8 <bt_att_chan_send_rsp>
	return 0;
   18b06:	e7e5      	b.n	18ad4 <att_find_info_req+0x40>
   18b08:	0002364f 	.word	0x0002364f

00018b0c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   18b0c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   18b0e:	4c0b      	ldr	r4, [pc, #44]	; (18b3c <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   18b10:	4d0b      	ldr	r5, [pc, #44]	; (18b40 <bt_att_init+0x34>)
   18b12:	4620      	mov	r0, r4
   18b14:	f00c fbe3 	bl	252de <z_impl_k_queue_init>
   18b18:	4629      	mov	r1, r5
   18b1a:	4620      	mov	r0, r4
   18b1c:	f00c fbeb 	bl	252f6 <k_queue_append>
   18b20:	f105 0114 	add.w	r1, r5, #20
   18b24:	4620      	mov	r0, r4
   18b26:	f00c fbe6 	bl	252f6 <k_queue_append>
   18b2a:	f105 0128 	add.w	r1, r5, #40	; 0x28
   18b2e:	4620      	mov	r0, r4
   18b30:	f00c fbe1 	bl	252f6 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   18b34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   18b38:	f000 bae4 	b.w	19104 <bt_gatt_init>
   18b3c:	20000bbc 	.word	0x20000bbc
   18b40:	2000372c 	.word	0x2000372c

00018b44 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   18b44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   18b46:	2300      	movs	r3, #0
{
   18b48:	4605      	mov	r5, r0
   18b4a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   18b4c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   18b4e:	f005 fcb7 	bl	1e4c0 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   18b52:	4b0b      	ldr	r3, [pc, #44]	; (18b80 <bt_att_req_alloc+0x3c>)
   18b54:	681b      	ldr	r3, [r3, #0]
   18b56:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   18b58:	bf04      	itt	eq
   18b5a:	2500      	moveq	r5, #0
   18b5c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   18b5e:	a901      	add	r1, sp, #4
   18b60:	4808      	ldr	r0, [pc, #32]	; (18b84 <bt_att_req_alloc+0x40>)
   18b62:	462a      	mov	r2, r5
   18b64:	4623      	mov	r3, r4
   18b66:	f004 fd0d 	bl	1d584 <k_mem_slab_alloc>
   18b6a:	4601      	mov	r1, r0
   18b6c:	b930      	cbnz	r0, 18b7c <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   18b6e:	9801      	ldr	r0, [sp, #4]
   18b70:	2210      	movs	r2, #16
   18b72:	f00a f92a 	bl	22dca <memset>

	return req;
   18b76:	9801      	ldr	r0, [sp, #4]
}
   18b78:	b003      	add	sp, #12
   18b7a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   18b7c:	2000      	movs	r0, #0
   18b7e:	e7fb      	b.n	18b78 <bt_att_req_alloc+0x34>
   18b80:	20003768 	.word	0x20003768
   18b84:	20000acc 	.word	0x20000acc

00018b88 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   18b88:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   18b8a:	6883      	ldr	r3, [r0, #8]
{
   18b8c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   18b8e:	b14b      	cbz	r3, 18ba4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   18b90:	6998      	ldr	r0, [r3, #24]
   18b92:	f7ff f8dd 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(req->buf);
   18b96:	9b01      	ldr	r3, [sp, #4]
   18b98:	6898      	ldr	r0, [r3, #8]
   18b9a:	f001 f875 	bl	19c88 <net_buf_unref>
		req->buf = NULL;
   18b9e:	9b01      	ldr	r3, [sp, #4]
   18ba0:	2200      	movs	r2, #0
   18ba2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   18ba4:	4803      	ldr	r0, [pc, #12]	; (18bb4 <bt_att_req_free+0x2c>)
   18ba6:	a901      	add	r1, sp, #4
   18ba8:	f00c fadb 	bl	25162 <k_mem_slab_free>
}
   18bac:	b003      	add	sp, #12
   18bae:	f85d fb04 	ldr.w	pc, [sp], #4
   18bb2:	bf00      	nop
   18bb4:	20000acc 	.word	0x20000acc

00018bb8 <att_handle_rsp>:
{
   18bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18bbc:	4604      	mov	r4, r0
   18bbe:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   18bc0:	30b0      	adds	r0, #176	; 0xb0
{
   18bc2:	460e      	mov	r6, r1
   18bc4:	4617      	mov	r7, r2
   18bc6:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   18bc8:	f00c fc7e 	bl	254c8 <k_work_cancel_delayable>
	if (!chan->req) {
   18bcc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   18bd0:	b980      	cbnz	r0, 18bf4 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   18bd2:	4b1a      	ldr	r3, [pc, #104]	; (18c3c <att_handle_rsp+0x84>)
   18bd4:	9307      	str	r3, [sp, #28]
   18bd6:	481a      	ldr	r0, [pc, #104]	; (18c40 <att_handle_rsp+0x88>)
   18bd8:	2302      	movs	r3, #2
   18bda:	aa06      	add	r2, sp, #24
   18bdc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18be0:	9306      	str	r3, [sp, #24]
   18be2:	f00a fdc3 	bl	2376c <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   18be6:	6820      	ldr	r0, [r4, #0]
   18be8:	f00a ff4e 	bl	23a88 <att_req_send_process>
}
   18bec:	2000      	movs	r0, #0
   18bee:	b008      	add	sp, #32
   18bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   18bf4:	4b13      	ldr	r3, [pc, #76]	; (18c44 <att_handle_rsp+0x8c>)
   18bf6:	4298      	cmp	r0, r3
   18bf8:	f04f 0800 	mov.w	r8, #0
   18bfc:	d102      	bne.n	18c04 <att_handle_rsp+0x4c>
		chan->req = NULL;
   18bfe:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   18c02:	e7f0      	b.n	18be6 <att_handle_rsp+0x2e>
	func = chan->req->func;
   18c04:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   18c08:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   18c0c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   18c10:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   18c14:	f7ff ffb8 	bl	18b88 <bt_att_req_free>
	att_req_send_process(chan->att);
   18c18:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   18c1a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   18c1e:	f00a ff33 	bl	23a88 <att_req_send_process>
	if (func) {
   18c22:	f1b9 0f00 	cmp.w	r9, #0
   18c26:	d0e1      	beq.n	18bec <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   18c28:	6820      	ldr	r0, [r4, #0]
   18c2a:	f8cd a000 	str.w	sl, [sp]
   18c2e:	6800      	ldr	r0, [r0, #0]
   18c30:	463b      	mov	r3, r7
   18c32:	4632      	mov	r2, r6
   18c34:	4629      	mov	r1, r5
   18c36:	47c8      	blx	r9
   18c38:	e7d8      	b.n	18bec <att_handle_rsp+0x34>
   18c3a:	bf00      	nop
   18c3c:	000280b2 	.word	0x000280b2
   18c40:	00025f50 	.word	0x00025f50
   18c44:	2000376c 	.word	0x2000376c

00018c48 <bt_att_disconnected>:
{
   18c48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   18c4c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   18c50:	4604      	mov	r4, r0
	if (!att_chan->att) {
   18c52:	2e00      	cmp	r6, #0
   18c54:	d056      	beq.n	18d04 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   18c56:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   18c5a:	f106 0024 	add.w	r0, r6, #36	; 0x24
   18c5e:	f00a fe54 	bl	2390a <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   18c62:	1f27      	subs	r7, r4, #4
   18c64:	f104 0894 	add.w	r8, r4, #148	; 0x94
   18c68:	2200      	movs	r2, #0
   18c6a:	2300      	movs	r3, #0
   18c6c:	4640      	mov	r0, r8
   18c6e:	f00b fc08 	bl	24482 <net_buf_get>
   18c72:	4605      	mov	r5, r0
   18c74:	bb28      	cbnz	r0, 18cc2 <bt_att_disconnected+0x7a>
	if (chan->req) {
   18c76:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   18c7a:	b12b      	cbz	r3, 18c88 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   18c7c:	4602      	mov	r2, r0
   18c7e:	4601      	mov	r1, r0
   18c80:	230e      	movs	r3, #14
   18c82:	4638      	mov	r0, r7
   18c84:	f7ff ff98 	bl	18bb8 <att_handle_rsp>
	chan->att = NULL;
   18c88:	2300      	movs	r3, #0
   18c8a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   18c8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   18c90:	2b00      	cmp	r3, #0
   18c92:	d137      	bne.n	18d04 <bt_att_disconnected+0xbc>
	att_reset(att);
   18c94:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   18c96:	9803      	ldr	r0, [sp, #12]
   18c98:	2200      	movs	r2, #0
   18c9a:	2300      	movs	r3, #0
   18c9c:	300c      	adds	r0, #12
   18c9e:	f00b fbf0 	bl	24482 <net_buf_get>
   18ca2:	4605      	mov	r5, r0
   18ca4:	b9a0      	cbnz	r0, 18cd0 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   18ca6:	9803      	ldr	r0, [sp, #12]
	return list->head;
   18ca8:	6845      	ldr	r5, [r0, #4]
   18caa:	b9c5      	cbnz	r5, 18cde <bt_att_disconnected+0x96>
	att->conn = NULL;
   18cac:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   18cae:	a903      	add	r1, sp, #12
   18cb0:	4816      	ldr	r0, [pc, #88]	; (18d0c <bt_att_disconnected+0xc4>)
   18cb2:	f00c fa56 	bl	25162 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   18cb6:	6820      	ldr	r0, [r4, #0]
}
   18cb8:	b004      	add	sp, #16
   18cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   18cbe:	f000 bed7 	b.w	19a70 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18cc2:	69a8      	ldr	r0, [r5, #24]
   18cc4:	f7ff f844 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(buf);
   18cc8:	4628      	mov	r0, r5
   18cca:	f000 ffdd 	bl	19c88 <net_buf_unref>
   18cce:	e7cb      	b.n	18c68 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   18cd0:	69a8      	ldr	r0, [r5, #24]
   18cd2:	f7ff f83d 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(buf);
   18cd6:	4628      	mov	r0, r5
   18cd8:	f000 ffd6 	bl	19c88 <net_buf_unref>
   18cdc:	e7db      	b.n	18c96 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18cde:	6882      	ldr	r2, [r0, #8]
	return node->next;
   18ce0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   18ce2:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18ce4:	4295      	cmp	r5, r2
	list->tail = node;
   18ce6:	bf08      	it	eq
   18ce8:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   18cea:	686e      	ldr	r6, [r5, #4]
   18cec:	b136      	cbz	r6, 18cfc <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   18cee:	68eb      	ldr	r3, [r5, #12]
   18cf0:	9300      	str	r3, [sp, #0]
   18cf2:	2300      	movs	r3, #0
   18cf4:	6800      	ldr	r0, [r0, #0]
   18cf6:	461a      	mov	r2, r3
   18cf8:	210e      	movs	r1, #14
   18cfa:	47b0      	blx	r6
		bt_att_req_free(req);
   18cfc:	4628      	mov	r0, r5
   18cfe:	f7ff ff43 	bl	18b88 <bt_att_req_free>
   18d02:	e7d0      	b.n	18ca6 <bt_att_disconnected+0x5e>
}
   18d04:	b004      	add	sp, #16
   18d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18d0a:	bf00      	nop
   18d0c:	20000a94 	.word	0x20000a94

00018d10 <att_timeout>:
{
   18d10:	b510      	push	{r4, lr}
   18d12:	4604      	mov	r4, r0
   18d14:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   18d16:	4b08      	ldr	r3, [pc, #32]	; (18d38 <att_timeout+0x28>)
   18d18:	9305      	str	r3, [sp, #20]
   18d1a:	4808      	ldr	r0, [pc, #32]	; (18d3c <att_timeout+0x2c>)
   18d1c:	2302      	movs	r3, #2
   18d1e:	aa04      	add	r2, sp, #16
   18d20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18d24:	9304      	str	r3, [sp, #16]
   18d26:	f00a fd21 	bl	2376c <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   18d2a:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   18d2e:	b006      	add	sp, #24
   18d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   18d34:	f7ff bf88 	b.w	18c48 <bt_att_disconnected>
   18d38:	000280c9 	.word	0x000280c9
   18d3c:	00025f50 	.word	0x00025f50

00018d40 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   18d40:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   18d42:	b930      	cbnz	r0, 18d52 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18d44:	4907      	ldr	r1, [pc, #28]	; (18d64 <find_cf_cfg+0x24>)
   18d46:	4808      	ldr	r0, [pc, #32]	; (18d68 <find_cf_cfg+0x28>)
   18d48:	f00b f8fd 	bl	23f46 <bt_addr_le_eq>
   18d4c:	b138      	cbz	r0, 18d5e <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   18d4e:	4807      	ldr	r0, [pc, #28]	; (18d6c <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   18d50:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   18d52:	4a05      	ldr	r2, [pc, #20]	; (18d68 <find_cf_cfg+0x28>)
   18d54:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   18d58:	f00a fb38 	bl	233cc <bt_conn_is_peer_addr_le>
   18d5c:	e7f6      	b.n	18d4c <find_cf_cfg+0xc>
	return NULL;
   18d5e:	2000      	movs	r0, #0
   18d60:	e7f6      	b.n	18d50 <find_cf_cfg+0x10>
   18d62:	bf00      	nop
   18d64:	00027408 	.word	0x00027408
   18d68:	20003795 	.word	0x20003795
   18d6c:	20003794 	.word	0x20003794

00018d70 <find_sc_cfg>:
{
   18d70:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   18d72:	4c06      	ldr	r4, [pc, #24]	; (18d8c <find_sc_cfg+0x1c>)
   18d74:	7823      	ldrb	r3, [r4, #0]
   18d76:	4283      	cmp	r3, r0
   18d78:	d103      	bne.n	18d82 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   18d7a:	1c60      	adds	r0, r4, #1
   18d7c:	f00b f8e3 	bl	23f46 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   18d80:	b908      	cbnz	r0, 18d86 <find_sc_cfg+0x16>
	return NULL;
   18d82:	2000      	movs	r0, #0
}
   18d84:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   18d86:	4620      	mov	r0, r4
   18d88:	e7fc      	b.n	18d84 <find_sc_cfg+0x14>
   18d8a:	bf00      	nop
   18d8c:	20004546 	.word	0x20004546

00018d90 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   18d90:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   18d92:	1c4a      	adds	r2, r1, #1
{
   18d94:	460c      	mov	r4, r1
		if (conn) {
   18d96:	b138      	cbz	r0, 18da8 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   18d98:	7809      	ldrb	r1, [r1, #0]
   18d9a:	f00a fb17 	bl	233cc <bt_conn_is_peer_addr_le>
   18d9e:	b108      	cbz	r0, 18da4 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   18da0:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   18da2:	bd10      	pop	{r4, pc}
	return NULL;
   18da4:	2000      	movs	r0, #0
   18da6:	e7fc      	b.n	18da2 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   18da8:	4902      	ldr	r1, [pc, #8]	; (18db4 <find_ccc_cfg+0x24>)
   18daa:	4610      	mov	r0, r2
   18dac:	f00b f8cb 	bl	23f46 <bt_addr_le_eq>
   18db0:	e7f5      	b.n	18d9e <find_ccc_cfg+0xe>
   18db2:	bf00      	nop
   18db4:	00027408 	.word	0x00027408

00018db8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   18db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18dbc:	b087      	sub	sp, #28
   18dbe:	461e      	mov	r6, r3
   18dc0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   18dc4:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   18dc8:	4681      	mov	r9, r0
   18dca:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   18dcc:	2b00      	cmp	r3, #0
   18dce:	d14b      	bne.n	18e68 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   18dd0:	1e73      	subs	r3, r6, #1
   18dd2:	2b01      	cmp	r3, #1
   18dd4:	d84b      	bhi.n	18e6e <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   18dd6:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   18dd8:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   18dda:	7815      	ldrb	r5, [r2, #0]
   18ddc:	bf18      	it	ne
   18dde:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   18de0:	f7ff ffd6 	bl	18d90 <find_ccc_cfg>
	if (!cfg) {
   18de4:	4604      	mov	r4, r0
   18de6:	b9f0      	cbnz	r0, 18e26 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   18de8:	b91d      	cbnz	r5, 18df2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   18dea:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   18dec:	b007      	add	sp, #28
   18dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   18df2:	4641      	mov	r1, r8
   18df4:	f7ff ffcc 	bl	18d90 <find_ccc_cfg>
		if (!cfg) {
   18df8:	4604      	mov	r4, r0
   18dfa:	b960      	cbnz	r0, 18e16 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   18dfc:	4b1d      	ldr	r3, [pc, #116]	; (18e74 <bt_gatt_attr_write_ccc+0xbc>)
   18dfe:	481e      	ldr	r0, [pc, #120]	; (18e78 <bt_gatt_attr_write_ccc+0xc0>)
   18e00:	9305      	str	r3, [sp, #20]
   18e02:	aa04      	add	r2, sp, #16
   18e04:	2302      	movs	r3, #2
   18e06:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18e0a:	9304      	str	r3, [sp, #16]
   18e0c:	f00b f8a6 	bl	23f5c <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18e10:	f06f 0010 	mvn.w	r0, #16
   18e14:	e7ea      	b.n	18dec <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18e16:	f109 0188 	add.w	r1, r9, #136	; 0x88
   18e1a:	3001      	adds	r0, #1
   18e1c:	f00b f89b 	bl	23f56 <bt_addr_le_copy>
		cfg->id = conn->id;
   18e20:	f899 3008 	ldrb.w	r3, [r9, #8]
   18e24:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   18e26:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18e2a:	b98b      	cbnz	r3, 18e50 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   18e2c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   18e2e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   18e32:	42ab      	cmp	r3, r5
   18e34:	d003      	beq.n	18e3e <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   18e36:	4641      	mov	r1, r8
   18e38:	4638      	mov	r0, r7
   18e3a:	f00b f810 	bl	23e5e <gatt_ccc_changed>
	if (!value) {
   18e3e:	2d00      	cmp	r5, #0
   18e40:	d1d3      	bne.n	18dea <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18e42:	490e      	ldr	r1, [pc, #56]	; (18e7c <bt_gatt_attr_write_ccc+0xc4>)
   18e44:	1c60      	adds	r0, r4, #1
   18e46:	f00b f886 	bl	23f56 <bt_addr_le_copy>
	cfg->id = 0U;
   18e4a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   18e4c:	8125      	strh	r5, [r4, #8]
}
   18e4e:	e7cc      	b.n	18dea <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   18e50:	462a      	mov	r2, r5
   18e52:	4639      	mov	r1, r7
   18e54:	4648      	mov	r0, r9
   18e56:	4798      	blx	r3
		if (write < 0) {
   18e58:	2800      	cmp	r0, #0
   18e5a:	dbc7      	blt.n	18dec <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   18e5c:	3801      	subs	r0, #1
   18e5e:	2801      	cmp	r0, #1
   18e60:	d9e4      	bls.n	18e2c <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   18e62:	f06f 000d 	mvn.w	r0, #13
   18e66:	e7c1      	b.n	18dec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18e68:	f06f 0006 	mvn.w	r0, #6
   18e6c:	e7be      	b.n	18dec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18e6e:	f06f 000c 	mvn.w	r0, #12
   18e72:	e7bb      	b.n	18dec <bt_gatt_attr_write_ccc+0x34>
   18e74:	000280dc 	.word	0x000280dc
   18e78:	00025f60 	.word	0x00025f60
   18e7c:	00027408 	.word	0x00027408

00018e80 <clear_cf_cfg>:
{
   18e80:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18e82:	490c      	ldr	r1, [pc, #48]	; (18eb4 <clear_cf_cfg+0x34>)
{
   18e84:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   18e86:	3001      	adds	r0, #1
   18e88:	f00b f865 	bl	23f56 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   18e8c:	f104 0008 	add.w	r0, r4, #8
   18e90:	2201      	movs	r2, #1
   18e92:	2100      	movs	r1, #0
   18e94:	f009 ff99 	bl	22dca <memset>
   18e98:	f3bf 8f5b 	dmb	ish
   18e9c:	340c      	adds	r4, #12
   18e9e:	2300      	movs	r3, #0
   18ea0:	e854 2f00 	ldrex	r2, [r4]
   18ea4:	e844 3100 	strex	r1, r3, [r4]
   18ea8:	2900      	cmp	r1, #0
   18eaa:	d1f9      	bne.n	18ea0 <clear_cf_cfg+0x20>
   18eac:	f3bf 8f5b 	dmb	ish
}
   18eb0:	bd10      	pop	{r4, pc}
   18eb2:	bf00      	nop
   18eb4:	00027408 	.word	0x00027408

00018eb8 <sc_save>:
{
   18eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ebc:	b086      	sub	sp, #24
   18ebe:	4680      	mov	r8, r0
   18ec0:	460f      	mov	r7, r1
   18ec2:	4616      	mov	r6, r2
   18ec4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   18ec6:	f7ff ff53 	bl	18d70 <find_sc_cfg>
	if (!cfg) {
   18eca:	4604      	mov	r4, r0
   18ecc:	b9b0      	cbnz	r0, 18efc <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   18ece:	4912      	ldr	r1, [pc, #72]	; (18f18 <sc_save+0x60>)
   18ed0:	f7ff ff4e 	bl	18d70 <find_sc_cfg>
		if (!cfg) {
   18ed4:	4604      	mov	r4, r0
   18ed6:	b960      	cbnz	r0, 18ef2 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   18ed8:	4b10      	ldr	r3, [pc, #64]	; (18f1c <sc_save+0x64>)
   18eda:	9305      	str	r3, [sp, #20]
   18edc:	4810      	ldr	r0, [pc, #64]	; (18f20 <sc_save+0x68>)
   18ede:	2302      	movs	r3, #2
   18ee0:	aa04      	add	r2, sp, #16
   18ee2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18ee6:	9304      	str	r3, [sp, #16]
   18ee8:	f00b f838 	bl	23f5c <z_log_msg_static_create.constprop.0>
}
   18eec:	b006      	add	sp, #24
   18eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   18ef2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   18ef6:	4639      	mov	r1, r7
   18ef8:	f00b f82d 	bl	23f56 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   18efc:	8922      	ldrh	r2, [r4, #8]
   18efe:	8963      	ldrh	r3, [r4, #10]
   18f00:	b91a      	cbnz	r2, 18f0a <sc_save+0x52>
   18f02:	b92b      	cbnz	r3, 18f10 <sc_save+0x58>
		cfg->data.start = start;
   18f04:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   18f06:	8165      	strh	r5, [r4, #10]
   18f08:	e7f0      	b.n	18eec <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   18f0a:	4296      	cmp	r6, r2
		*start = new_start;
   18f0c:	bf38      	it	cc
   18f0e:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   18f10:	429d      	cmp	r5, r3
   18f12:	d9eb      	bls.n	18eec <sc_save+0x34>
   18f14:	e7f7      	b.n	18f06 <sc_save+0x4e>
   18f16:	bf00      	nop
   18f18:	00027408 	.word	0x00027408
   18f1c:	000280f6 	.word	0x000280f6
   18f20:	00025f60 	.word	0x00025f60

00018f24 <cf_write>:
{
   18f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f28:	b086      	sub	sp, #24
   18f2a:	461f      	mov	r7, r3
   18f2c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   18f30:	2b01      	cmp	r3, #1
{
   18f32:	4606      	mov	r6, r0
   18f34:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   18f36:	d83c      	bhi.n	18fb2 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   18f38:	443b      	add	r3, r7
   18f3a:	2b01      	cmp	r3, #1
   18f3c:	463d      	mov	r5, r7
   18f3e:	dc3b      	bgt.n	18fb8 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   18f40:	f7ff fefe 	bl	18d40 <find_cf_cfg>
	if (!cfg) {
   18f44:	4604      	mov	r4, r0
   18f46:	b998      	cbnz	r0, 18f70 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   18f48:	f7ff fefa 	bl	18d40 <find_cf_cfg>
	if (!cfg) {
   18f4c:	4604      	mov	r4, r0
   18f4e:	b978      	cbnz	r0, 18f70 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   18f50:	4b1c      	ldr	r3, [pc, #112]	; (18fc4 <cf_write+0xa0>)
   18f52:	9305      	str	r3, [sp, #20]
   18f54:	481c      	ldr	r0, [pc, #112]	; (18fc8 <cf_write+0xa4>)
   18f56:	2302      	movs	r3, #2
   18f58:	aa04      	add	r2, sp, #16
   18f5a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   18f5e:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   18f62:	9304      	str	r3, [sp, #16]
   18f64:	f00a fffa 	bl	23f5c <z_log_msg_static_create.constprop.0>
}
   18f68:	4628      	mov	r0, r5
   18f6a:	b006      	add	sp, #24
   18f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18f70:	b197      	cbz	r7, 18f98 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18f72:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   18f74:	f898 2000 	ldrb.w	r2, [r8]
   18f78:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18f7a:	fa21 f003 	lsr.w	r0, r1, r3
   18f7e:	07c7      	lsls	r7, r0, #31
   18f80:	d503      	bpl.n	18f8a <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   18f82:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   18f86:	07c0      	lsls	r0, r0, #31
   18f88:	d519      	bpl.n	18fbe <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   18f8a:	3301      	adds	r3, #1
   18f8c:	2b03      	cmp	r3, #3
   18f8e:	d1f4      	bne.n	18f7a <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   18f90:	f002 0207 	and.w	r2, r2, #7
   18f94:	4311      	orrs	r1, r2
   18f96:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18f98:	f106 0188 	add.w	r1, r6, #136	; 0x88
   18f9c:	1c60      	adds	r0, r4, #1
   18f9e:	f00a ffda 	bl	23f56 <bt_addr_le_copy>
	cfg->id = conn->id;
   18fa2:	4620      	mov	r0, r4
   18fa4:	7a33      	ldrb	r3, [r6, #8]
   18fa6:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   18faa:	2100      	movs	r1, #0
   18fac:	f00a ffd9 	bl	23f62 <atomic_set_bit>
	return len;
   18fb0:	e7da      	b.n	18f68 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18fb2:	f06f 0506 	mvn.w	r5, #6
   18fb6:	e7d7      	b.n	18f68 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   18fb8:	f06f 050c 	mvn.w	r5, #12
   18fbc:	e7d4      	b.n	18f68 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   18fbe:	f06f 0512 	mvn.w	r5, #18
   18fc2:	e7d1      	b.n	18f68 <cf_write+0x44>
   18fc4:	00028115 	.word	0x00028115
   18fc8:	00025f60 	.word	0x00025f60

00018fcc <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   18fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   18fd0:	4b23      	ldr	r3, [pc, #140]	; (19060 <disconnected_cb+0x94>)
{
   18fd2:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18fd4:	6882      	ldr	r2, [r0, #8]
   18fd6:	429a      	cmp	r2, r3
{
   18fd8:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   18fda:	d102      	bne.n	18fe2 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   18fdc:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   18fde:	8963      	ldrh	r3, [r4, #10]
   18fe0:	bb33      	cbnz	r3, 19030 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   18fe2:	2001      	movs	r0, #1
   18fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   18fe8:	f00a f9a7 	bl	2333a <bt_conn_unref>
		if (ccc->cfg_changed) {
   18fec:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   18fee:	2100      	movs	r1, #0
   18ff0:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   18ff2:	2b00      	cmp	r3, #0
   18ff4:	d0f5      	beq.n	18fe2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   18ff6:	4638      	mov	r0, r7
   18ff8:	4798      	blx	r3
   18ffa:	e7f2      	b.n	18fe2 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18ffc:	f105 0888 	add.w	r8, r5, #136	; 0x88
   19000:	7a28      	ldrb	r0, [r5, #8]
   19002:	4641      	mov	r1, r8
   19004:	f00a f82c 	bl	23060 <bt_addr_le_is_bonded>
   19008:	b968      	cbnz	r0, 19026 <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1900a:	4b16      	ldr	r3, [pc, #88]	; (19064 <disconnected_cb+0x98>)
   1900c:	429c      	cmp	r4, r3
   1900e:	d102      	bne.n	19016 <disconnected_cb+0x4a>
					sc_clear(conn);
   19010:	4628      	mov	r0, r5
   19012:	f00a ffd4 	bl	23fbe <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   19016:	4914      	ldr	r1, [pc, #80]	; (19068 <disconnected_cb+0x9c>)
   19018:	4630      	mov	r0, r6
   1901a:	f00a ff9c 	bl	23f56 <bt_addr_le_copy>
	cfg->id = 0U;
   1901e:	2300      	movs	r3, #0
   19020:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   19022:	8123      	strh	r3, [r4, #8]
}
   19024:	e7e2      	b.n	18fec <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19026:	4641      	mov	r1, r8
   19028:	4630      	mov	r0, r6
   1902a:	f00a ff94 	bl	23f56 <bt_addr_le_copy>
   1902e:	e7dd      	b.n	18fec <disconnected_cb+0x20>
		if (!cfg->value) {
   19030:	8923      	ldrh	r3, [r4, #8]
   19032:	2b00      	cmp	r3, #0
   19034:	d0da      	beq.n	18fec <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   19036:	4626      	mov	r6, r4
   19038:	4628      	mov	r0, r5
   1903a:	f816 1b01 	ldrb.w	r1, [r6], #1
   1903e:	4632      	mov	r2, r6
   19040:	f00a f9c4 	bl	233cc <bt_conn_is_peer_addr_le>
   19044:	2800      	cmp	r0, #0
   19046:	d1d9      	bne.n	18ffc <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19048:	7820      	ldrb	r0, [r4, #0]
   1904a:	4631      	mov	r1, r6
   1904c:	f7fe fa68 	bl	17520 <bt_conn_lookup_addr_le>
			if (tmp) {
   19050:	2800      	cmp	r0, #0
   19052:	d0cb      	beq.n	18fec <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   19054:	7a83      	ldrb	r3, [r0, #10]
   19056:	2b07      	cmp	r3, #7
   19058:	d1c6      	bne.n	18fe8 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1905a:	f00a f96e 	bl	2333a <bt_conn_unref>
	if (!value_used) {
   1905e:	e7c0      	b.n	18fe2 <disconnected_cb+0x16>
   19060:	00018db9 	.word	0x00018db9
   19064:	200007cc 	.word	0x200007cc
   19068:	00027408 	.word	0x00027408

0001906c <read_ppcp>:
{
   1906c:	b513      	push	{r0, r1, r4, lr}
   1906e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   19072:	4c0b      	ldr	r4, [pc, #44]	; (190a0 <read_ppcp+0x34>)
{
   19074:	4610      	mov	r0, r2
	if (offset > value_len) {
   19076:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   19078:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
   1907c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   19080:	d80b      	bhi.n	1909a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   19082:	f1c1 0408 	rsb	r4, r1, #8
   19086:	429c      	cmp	r4, r3
   19088:	bfa8      	it	ge
   1908a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1908c:	4622      	mov	r2, r4
   1908e:	4469      	add	r1, sp
   19090:	f009 fe90 	bl	22db4 <memcpy>
}
   19094:	4620      	mov	r0, r4
   19096:	b002      	add	sp, #8
   19098:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1909a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1909e:	e7f9      	b.n	19094 <read_ppcp+0x28>
   190a0:	00280018 	.word	0x00280018

000190a4 <sc_indicate_rsp>:
{
   190a4:	b510      	push	{r4, lr}
   190a6:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   190a8:	4815      	ldr	r0, [pc, #84]	; (19100 <sc_indicate_rsp+0x5c>)
   190aa:	f3bf 8f5b 	dmb	ish
   190ae:	e850 3f00 	ldrex	r3, [r0]
   190b2:	f023 0302 	bic.w	r3, r3, #2
   190b6:	e840 3200 	strex	r2, r3, [r0]
   190ba:	2a00      	cmp	r2, #0
   190bc:	d1f7      	bne.n	190ae <sc_indicate_rsp+0xa>
   190be:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   190c2:	f3bf 8f5b 	dmb	ish
   190c6:	6803      	ldr	r3, [r0, #0]
   190c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   190cc:	07da      	lsls	r2, r3, #31
   190ce:	d504      	bpl.n	190da <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   190d0:	2200      	movs	r2, #0
   190d2:	2300      	movs	r3, #0
   190d4:	3830      	subs	r0, #48	; 0x30
   190d6:	f004 ff0b 	bl	1def0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   190da:	4620      	mov	r0, r4
   190dc:	f00a fe8e 	bl	23dfc <bt_att_fixed_chan_only>
   190e0:	b160      	cbz	r0, 190fc <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   190e2:	4620      	mov	r0, r4
   190e4:	f7ff fe2c 	bl	18d40 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   190e8:	b140      	cbz	r0, 190fc <sc_indicate_rsp+0x58>
   190ea:	7a03      	ldrb	r3, [r0, #8]
   190ec:	07db      	lsls	r3, r3, #31
   190ee:	d505      	bpl.n	190fc <sc_indicate_rsp+0x58>
}
   190f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   190f4:	2100      	movs	r1, #0
   190f6:	300c      	adds	r0, #12
   190f8:	f00a bf33 	b.w	23f62 <atomic_set_bit>
}
   190fc:	bd10      	pop	{r4, pc}
   190fe:	bf00      	nop
   19100:	20002598 	.word	0x20002598

00019104 <bt_gatt_init>:
{
   19104:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19106:	4b20      	ldr	r3, [pc, #128]	; (19188 <bt_gatt_init+0x84>)
   19108:	f3bf 8f5b 	dmb	ish
   1910c:	2201      	movs	r2, #1
   1910e:	e853 1f00 	ldrex	r1, [r3]
   19112:	2900      	cmp	r1, #0
   19114:	d103      	bne.n	1911e <bt_gatt_init+0x1a>
   19116:	e843 2000 	strex	r0, r2, [r3]
   1911a:	2800      	cmp	r0, #0
   1911c:	d1f7      	bne.n	1910e <bt_gatt_init+0xa>
   1911e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   19122:	d130      	bne.n	19186 <bt_gatt_init+0x82>
   19124:	f3bf 8f5b 	dmb	ish
   19128:	4b18      	ldr	r3, [pc, #96]	; (1918c <bt_gatt_init+0x88>)
   1912a:	e853 1f00 	ldrex	r1, [r3]
   1912e:	2900      	cmp	r1, #0
   19130:	d103      	bne.n	1913a <bt_gatt_init+0x36>
   19132:	e843 2000 	strex	r0, r2, [r3]
   19136:	2800      	cmp	r0, #0
   19138:	d1f7      	bne.n	1912a <bt_gatt_init+0x26>
   1913a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1913e:	d108      	bne.n	19152 <bt_gatt_init+0x4e>
   19140:	4913      	ldr	r1, [pc, #76]	; (19190 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19142:	4a14      	ldr	r2, [pc, #80]	; (19194 <bt_gatt_init+0x90>)
   19144:	880b      	ldrh	r3, [r1, #0]
   19146:	4c14      	ldr	r4, [pc, #80]	; (19198 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   19148:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1914a:	42a2      	cmp	r2, r4
   1914c:	d315      	bcc.n	1917a <bt_gatt_init+0x76>
   1914e:	b100      	cbz	r0, 19152 <bt_gatt_init+0x4e>
   19150:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   19152:	4b12      	ldr	r3, [pc, #72]	; (1919c <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   19154:	4912      	ldr	r1, [pc, #72]	; (191a0 <bt_gatt_init+0x9c>)
   19156:	4813      	ldr	r0, [pc, #76]	; (191a4 <bt_gatt_init+0xa0>)
   19158:	2200      	movs	r2, #0
	list->tail = NULL;
   1915a:	e9c3 2200 	strd	r2, r2, [r3]
   1915e:	f00c f9a5 	bl	254ac <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   19162:	4810      	ldr	r0, [pc, #64]	; (191a4 <bt_gatt_init+0xa0>)
   19164:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19168:	2300      	movs	r3, #0
   1916a:	f7fb fbed 	bl	14948 <bt_long_wq_schedule>
}
   1916e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   19172:	490d      	ldr	r1, [pc, #52]	; (191a8 <bt_gatt_init+0xa4>)
   19174:	480d      	ldr	r0, [pc, #52]	; (191ac <bt_gatt_init+0xa8>)
   19176:	f00c b999 	b.w	254ac <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1917a:	6850      	ldr	r0, [r2, #4]
   1917c:	4403      	add	r3, r0
   1917e:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   19180:	3208      	adds	r2, #8
   19182:	2001      	movs	r0, #1
   19184:	e7e1      	b.n	1914a <bt_gatt_init+0x46>
}
   19186:	bd10      	pop	{r4, pc}
   19188:	200037a8 	.word	0x200037a8
   1918c:	200037a4 	.word	0x200037a4
   19190:	20004552 	.word	0x20004552
   19194:	00025f18 	.word	0x00025f18
   19198:	00025f30 	.word	0x00025f30
   1919c:	200037ac 	.word	0x200037ac
   191a0:	00024235 	.word	0x00024235
   191a4:	200024f0 	.word	0x200024f0
   191a8:	000195fd 	.word	0x000195fd
   191ac:	20002568 	.word	0x20002568

000191b0 <bt_gatt_attr_get_handle>:
{
   191b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   191b4:	4603      	mov	r3, r0
   191b6:	b148      	cbz	r0, 191cc <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   191b8:	8a00      	ldrh	r0, [r0, #16]
   191ba:	b938      	cbnz	r0, 191cc <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   191bc:	4912      	ldr	r1, [pc, #72]	; (19208 <bt_gatt_attr_get_handle+0x58>)
   191be:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1920c <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   191c2:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   191c4:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   191c8:	4571      	cmp	r1, lr
   191ca:	d301      	bcc.n	191d0 <bt_gatt_attr_get_handle+0x20>
}
   191cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   191d0:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   191d4:	42bb      	cmp	r3, r7
   191d6:	d304      	bcc.n	191e2 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   191d8:	fb0c 7206 	mla	r2, ip, r6, r7
   191dc:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   191de:	4293      	cmp	r3, r2
   191e0:	d90e      	bls.n	19200 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   191e2:	4434      	add	r4, r6
   191e4:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   191e6:	3108      	adds	r1, #8
   191e8:	4614      	mov	r4, r2
   191ea:	e7ed      	b.n	191c8 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   191ec:	fb0c 7805 	mla	r8, ip, r5, r7
   191f0:	4543      	cmp	r3, r8
   191f2:	d007      	beq.n	19204 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   191f4:	3501      	adds	r5, #1
   191f6:	1962      	adds	r2, r4, r5
   191f8:	42b5      	cmp	r5, r6
   191fa:	b292      	uxth	r2, r2
   191fc:	d1f6      	bne.n	191ec <bt_gatt_attr_get_handle+0x3c>
   191fe:	e7f2      	b.n	191e6 <bt_gatt_attr_get_handle+0x36>
   19200:	2500      	movs	r5, #0
   19202:	e7f8      	b.n	191f6 <bt_gatt_attr_get_handle+0x46>
   19204:	4610      	mov	r0, r2
   19206:	e7e1      	b.n	191cc <bt_gatt_attr_get_handle+0x1c>
   19208:	00025f18 	.word	0x00025f18
   1920c:	00025f30 	.word	0x00025f30

00019210 <bt_gatt_foreach_attr_type>:
{
   19210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19214:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   19218:	9100      	str	r1, [sp, #0]
   1921a:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1921c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19220:	2d00      	cmp	r5, #0
   19222:	bf08      	it	eq
   19224:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   19226:	4b24      	ldr	r3, [pc, #144]	; (192b8 <bt_gatt_foreach_attr_type+0xa8>)
   19228:	881b      	ldrh	r3, [r3, #0]
   1922a:	4283      	cmp	r3, r0
{
   1922c:	4607      	mov	r7, r0
   1922e:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   19230:	d23c      	bcs.n	192ac <bt_gatt_foreach_attr_type+0x9c>
}
   19232:	b003      	add	sp, #12
   19234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   19238:	6873      	ldr	r3, [r6, #4]
   1923a:	4423      	add	r3, r4
   1923c:	42bb      	cmp	r3, r7
   1923e:	d232      	bcs.n	192a6 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   19240:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   19242:	3608      	adds	r6, #8
   19244:	4b1d      	ldr	r3, [pc, #116]	; (192bc <bt_gatt_foreach_attr_type+0xac>)
   19246:	429e      	cmp	r6, r3
   19248:	d3f6      	bcc.n	19238 <bt_gatt_foreach_attr_type+0x28>
   1924a:	e7f2      	b.n	19232 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1924c:	5889      	ldr	r1, [r1, r2]
   1924e:	9301      	str	r3, [sp, #4]
   19250:	4640      	mov	r0, r8
   19252:	f009 fdd8 	bl	22e06 <bt_uuid_cmp>
   19256:	9b01      	ldr	r3, [sp, #4]
   19258:	b190      	cbz	r0, 19280 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1925a:	3401      	adds	r4, #1
   1925c:	f10a 0a01 	add.w	sl, sl, #1
   19260:	b2a4      	uxth	r4, r4
   19262:	6873      	ldr	r3, [r6, #4]
   19264:	4553      	cmp	r3, sl
   19266:	d9ec      	bls.n	19242 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   19268:	9b00      	ldr	r3, [sp, #0]
   1926a:	429c      	cmp	r4, r3
   1926c:	d8e1      	bhi.n	19232 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1926e:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19270:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   19272:	d3f2      	bcc.n	1925a <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19274:	fb0b f20a 	mul.w	r2, fp, sl
   19278:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1927a:	f1b8 0f00 	cmp.w	r8, #0
   1927e:	d1e5      	bne.n	1924c <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   19280:	f1b9 0f00 	cmp.w	r9, #0
   19284:	d10b      	bne.n	1929e <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   19286:	3d01      	subs	r5, #1
   19288:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1928a:	4618      	mov	r0, r3
   1928c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1928e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19290:	4621      	mov	r1, r4
   19292:	4798      	blx	r3
	if (!*num_matches) {
   19294:	2d00      	cmp	r5, #0
   19296:	d0cc      	beq.n	19232 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   19298:	2800      	cmp	r0, #0
   1929a:	d1de      	bne.n	1925a <bt_gatt_foreach_attr_type+0x4a>
   1929c:	e7c9      	b.n	19232 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1929e:	68da      	ldr	r2, [r3, #12]
   192a0:	4591      	cmp	r9, r2
   192a2:	d1da      	bne.n	1925a <bt_gatt_foreach_attr_type+0x4a>
   192a4:	e7ef      	b.n	19286 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   192a6:	f04f 0a00 	mov.w	sl, #0
   192aa:	e7da      	b.n	19262 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   192ac:	4e04      	ldr	r6, [pc, #16]	; (192c0 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   192ae:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   192b0:	f04f 0b14 	mov.w	fp, #20
   192b4:	e7c6      	b.n	19244 <bt_gatt_foreach_attr_type+0x34>
   192b6:	bf00      	nop
   192b8:	20004552 	.word	0x20004552
   192bc:	00025f30 	.word	0x00025f30
   192c0:	00025f18 	.word	0x00025f18

000192c4 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   192c4:	b510      	push	{r4, lr}
   192c6:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   192c8:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   192ca:	aa22      	add	r2, sp, #136	; 0x88
   192cc:	4669      	mov	r1, sp
   192ce:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   192d0:	e9cd 3300 	strd	r3, r3, [sp]
   192d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   192d8:	f009 fc4b 	bl	22b72 <tc_cmac_setup>
   192dc:	b958      	cbnz	r0, 192f6 <db_hash_gen.constprop.0+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   192de:	4b1a      	ldr	r3, [pc, #104]	; (19348 <db_hash_gen.constprop.0+0x84>)
		LOG_ERR("Unable to calculate hash");
   192e0:	9309      	str	r3, [sp, #36]	; 0x24
   192e2:	481a      	ldr	r0, [pc, #104]	; (1934c <db_hash_gen.constprop.0+0x88>)
   192e4:	2302      	movs	r3, #2
   192e6:	aa08      	add	r2, sp, #32
   192e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192ec:	9308      	str	r3, [sp, #32]
   192ee:	f00a fe35 	bl	23f5c <z_log_msg_static_create.constprop.0>
}
   192f2:	b04e      	add	sp, #312	; 0x138
   192f4:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   192f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   192fa:	2001      	movs	r0, #1
   192fc:	4a14      	ldr	r2, [pc, #80]	; (19350 <db_hash_gen.constprop.0+0x8c>)
   192fe:	ab0a      	add	r3, sp, #40	; 0x28
   19300:	f00a ff8d 	bl	2421e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19304:	4813      	ldr	r0, [pc, #76]	; (19354 <db_hash_gen.constprop.0+0x90>)
   19306:	a90a      	add	r1, sp, #40	; 0x28
   19308:	f009 fcc8 	bl	22c9c <tc_cmac_final>
   1930c:	b908      	cbnz	r0, 19312 <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1930e:	4b12      	ldr	r3, [pc, #72]	; (19358 <db_hash_gen.constprop.0+0x94>)
   19310:	e7e6      	b.n	192e0 <db_hash_gen.constprop.0+0x1c>
   19312:	4b10      	ldr	r3, [pc, #64]	; (19354 <db_hash_gen.constprop.0+0x90>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   19314:	2208      	movs	r2, #8
   19316:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1931a:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1931c:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   19320:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   19324:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   19326:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   19328:	d1f7      	bne.n	1931a <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1932a:	f3bf 8f5b 	dmb	ish
   1932e:	4b0b      	ldr	r3, [pc, #44]	; (1935c <db_hash_gen.constprop.0+0x98>)
   19330:	e853 1f00 	ldrex	r1, [r3]
   19334:	f041 0104 	orr.w	r1, r1, #4
   19338:	e843 1200 	strex	r2, r1, [r3]
   1933c:	2a00      	cmp	r2, #0
   1933e:	d1f7      	bne.n	19330 <db_hash_gen.constprop.0+0x6c>
   19340:	f3bf 8f5b 	dmb	ish
   19344:	e7d5      	b.n	192f2 <db_hash_gen.constprop.0+0x2e>
   19346:	bf00      	nop
   19348:	00028141 	.word	0x00028141
   1934c:	00025f60 	.word	0x00025f60
   19350:	00023ea1 	.word	0x00023ea1
   19354:	200024e0 	.word	0x200024e0
   19358:	0002815a 	.word	0x0002815a
   1935c:	20002598 	.word	0x20002598

00019360 <db_hash_read>:
{
   19360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19362:	491d      	ldr	r1, [pc, #116]	; (193d8 <db_hash_read+0x78>)
{
   19364:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   19368:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1936a:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1936e:	461f      	mov	r7, r3
   19370:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   19372:	f00c f8bd 	bl	254f0 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19376:	f3bf 8f5b 	dmb	ish
   1937a:	4b18      	ldr	r3, [pc, #96]	; (193dc <db_hash_read+0x7c>)
   1937c:	681b      	ldr	r3, [r3, #0]
   1937e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   19382:	0759      	lsls	r1, r3, #29
   19384:	d401      	bmi.n	1938a <db_hash_read+0x2a>
		db_hash_gen(true);
   19386:	f7ff ff9d 	bl	192c4 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1938a:	4620      	mov	r0, r4
   1938c:	f7ff fcd8 	bl	18d40 <find_cf_cfg>
	if (cfg &&
   19390:	4601      	mov	r1, r0
   19392:	b170      	cbz	r0, 193b2 <db_hash_read+0x52>
   19394:	7a03      	ldrb	r3, [r0, #8]
   19396:	07da      	lsls	r2, r3, #31
   19398:	d50b      	bpl.n	193b2 <db_hash_read+0x52>
   1939a:	f3bf 8f5b 	dmb	ish
   1939e:	68cb      	ldr	r3, [r1, #12]
   193a0:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   193a4:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   193a6:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   193aa:	d402      	bmi.n	193b2 <db_hash_read+0x52>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   193ac:	2101      	movs	r1, #1
   193ae:	f00a fdd8 	bl	23f62 <atomic_set_bit>
	if (offset > value_len) {
   193b2:	2e10      	cmp	r6, #16
   193b4:	d80c      	bhi.n	193d0 <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   193b6:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   193ba:	4909      	ldr	r1, [pc, #36]	; (193e0 <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   193bc:	42bc      	cmp	r4, r7
   193be:	bfa8      	it	ge
   193c0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   193c2:	4622      	mov	r2, r4
   193c4:	4431      	add	r1, r6
   193c6:	4628      	mov	r0, r5
   193c8:	f009 fcf4 	bl	22db4 <memcpy>
}
   193cc:	4620      	mov	r0, r4
   193ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   193d0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   193d4:	e7fa      	b.n	193cc <db_hash_read+0x6c>
   193d6:	bf00      	nop
   193d8:	20002520 	.word	0x20002520
   193dc:	20002598 	.word	0x20002598
   193e0:	200024e0 	.word	0x200024e0

000193e4 <bt_gatt_attr_next>:
{
   193e4:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   193e6:	2300      	movs	r3, #0
   193e8:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   193ea:	f7ff fee1 	bl	191b0 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   193ee:	1c41      	adds	r1, r0, #1
   193f0:	b289      	uxth	r1, r1
   193f2:	4608      	mov	r0, r1
   193f4:	4a03      	ldr	r2, [pc, #12]	; (19404 <bt_gatt_attr_next+0x20>)
   193f6:	ab01      	add	r3, sp, #4
   193f8:	f00a ff11 	bl	2421e <bt_gatt_foreach_attr>
}
   193fc:	9801      	ldr	r0, [sp, #4]
   193fe:	b003      	add	sp, #12
   19400:	f85d fb04 	ldr.w	pc, [sp], #4
   19404:	00023e59 	.word	0x00023e59

00019408 <gatt_indicate>:
{
   19408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1940c:	4615      	mov	r5, r2
   1940e:	b086      	sub	sp, #24
   19410:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19412:	2294      	movs	r2, #148	; 0x94
   19414:	6869      	ldr	r1, [r5, #4]
{
   19416:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19418:	f00a ff0e 	bl	24238 <bt_gatt_check_perm>
   1941c:	4680      	mov	r8, r0
   1941e:	b178      	cbz	r0, 19440 <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   19420:	4b34      	ldr	r3, [pc, #208]	; (194f4 <gatt_indicate+0xec>)
   19422:	9305      	str	r3, [sp, #20]
   19424:	4834      	ldr	r0, [pc, #208]	; (194f8 <gatt_indicate+0xf0>)
   19426:	2302      	movs	r3, #2
   19428:	aa04      	add	r2, sp, #16
   1942a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1942e:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   19432:	9304      	str	r3, [sp, #16]
   19434:	f00a fd92 	bl	23f5c <z_log_msg_static_create.constprop.0>
}
   19438:	4628      	mov	r0, r5
   1943a:	b006      	add	sp, #24
   1943c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   19440:	6869      	ldr	r1, [r5, #4]
   19442:	2202      	movs	r2, #2
   19444:	4630      	mov	r0, r6
   19446:	f00a ff20 	bl	2428a <bt_gatt_is_subscribed>
   1944a:	b960      	cbnz	r0, 19466 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1944c:	4b2b      	ldr	r3, [pc, #172]	; (194fc <gatt_indicate+0xf4>)
   1944e:	9305      	str	r3, [sp, #20]
   19450:	4829      	ldr	r0, [pc, #164]	; (194f8 <gatt_indicate+0xf0>)
   19452:	2302      	movs	r3, #2
   19454:	aa04      	add	r2, sp, #16
   19456:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1945a:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1945c:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   19460:	f00a fd7c 	bl	23f5c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   19464:	e7e8      	b.n	19438 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   19466:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1946a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1946c:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1946e:	f7ff fb69 	bl	18b44 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   19472:	3702      	adds	r7, #2
	if (!req) {
   19474:	4604      	mov	r4, r0
   19476:	b1b0      	cbz	r0, 194a6 <gatt_indicate+0x9e>
	req->func = func;
   19478:	4b21      	ldr	r3, [pc, #132]	; (19500 <gatt_indicate+0xf8>)
   1947a:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1947c:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1947e:	463a      	mov	r2, r7
   19480:	211d      	movs	r1, #29
   19482:	4630      	mov	r0, r6
   19484:	f7ff f88a 	bl	1859c <bt_att_create_pdu>
	if (!buf) {
   19488:	4607      	mov	r7, r0
   1948a:	b978      	cbnz	r0, 194ac <gatt_indicate+0xa4>
		LOG_WRN("No buffer available to send indication");
   1948c:	4b1d      	ldr	r3, [pc, #116]	; (19504 <gatt_indicate+0xfc>)
   1948e:	481a      	ldr	r0, [pc, #104]	; (194f8 <gatt_indicate+0xf0>)
   19490:	9305      	str	r3, [sp, #20]
   19492:	aa04      	add	r2, sp, #16
   19494:	2302      	movs	r3, #2
   19496:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1949a:	9304      	str	r3, [sp, #16]
   1949c:	f00a fd5e 	bl	23f5c <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   194a0:	4620      	mov	r0, r4
   194a2:	f7ff fb71 	bl	18b88 <bt_att_req_free>
		return -ENOMEM;
   194a6:	f06f 050b 	mvn.w	r5, #11
   194aa:	e7c5      	b.n	19438 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   194ac:	2301      	movs	r3, #1
   194ae:	4642      	mov	r2, r8
   194b0:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   194b2:	f107 0a0c 	add.w	sl, r7, #12
   194b6:	f00a fcc8 	bl	23e4a <bt_att_set_tx_meta_data>
   194ba:	2102      	movs	r1, #2
   194bc:	4650      	mov	r0, sl
   194be:	f00b f83b 	bl	24538 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   194c2:	4680      	mov	r8, r0
   194c4:	4650      	mov	r0, sl
   194c6:	f828 9b02 	strh.w	r9, [r8], #2
   194ca:	8aa9      	ldrh	r1, [r5, #20]
   194cc:	f00b f834 	bl	24538 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   194d0:	8aaa      	ldrh	r2, [r5, #20]
   194d2:	6929      	ldr	r1, [r5, #16]
   194d4:	4640      	mov	r0, r8
   194d6:	f009 fc6d 	bl	22db4 <memcpy>
	req->buf = buf;
   194da:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   194dc:	4621      	mov	r1, r4
   194de:	4630      	mov	r0, r6
   194e0:	f00a fc77 	bl	23dd2 <bt_att_req_send>
	if (err) {
   194e4:	4605      	mov	r5, r0
   194e6:	2800      	cmp	r0, #0
   194e8:	d0a6      	beq.n	19438 <gatt_indicate+0x30>
		bt_att_req_free(req);
   194ea:	4620      	mov	r0, r4
   194ec:	f7ff fb4c 	bl	18b88 <bt_att_req_free>
   194f0:	e7a2      	b.n	19438 <gatt_indicate+0x30>
   194f2:	bf00      	nop
   194f4:	00028173 	.word	0x00028173
   194f8:	00025f60 	.word	0x00025f60
   194fc:	00028189 	.word	0x00028189
   19500:	00023e73 	.word	0x00023e73
   19504:	000281b4 	.word	0x000281b4

00019508 <bt_gatt_indicate>:
{
   19508:	b530      	push	{r4, r5, lr}
   1950a:	4b39      	ldr	r3, [pc, #228]	; (195f0 <bt_gatt_indicate+0xe8>)
   1950c:	f3bf 8f5b 	dmb	ish
   19510:	681b      	ldr	r3, [r3, #0]
   19512:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19516:	075a      	lsls	r2, r3, #29
{
   19518:	b08b      	sub	sp, #44	; 0x2c
   1951a:	4604      	mov	r4, r0
   1951c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1951e:	d561      	bpl.n	195e4 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   19520:	b110      	cbz	r0, 19528 <bt_gatt_indicate+0x20>
   19522:	7a83      	ldrb	r3, [r0, #10]
   19524:	2b07      	cmp	r3, #7
   19526:	d160      	bne.n	195ea <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   19528:	6868      	ldr	r0, [r5, #4]
   1952a:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1952c:	f7ff fe40 	bl	191b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   19530:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19532:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19536:	b33a      	cbz	r2, 19588 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19538:	a905      	add	r1, sp, #20
   1953a:	9102      	str	r1, [sp, #8]
   1953c:	492d      	ldr	r1, [pc, #180]	; (195f4 <bt_gatt_indicate+0xec>)
   1953e:	9101      	str	r1, [sp, #4]
   19540:	2101      	movs	r1, #1
	found->attr = NULL;
   19542:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19544:	9100      	str	r1, [sp, #0]
   19546:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1954a:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1954c:	f7ff fe60 	bl	19210 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   19550:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   19552:	b91b      	cbnz	r3, 1955c <bt_gatt_indicate+0x54>
			return -ENOENT;
   19554:	f06f 0001 	mvn.w	r0, #1
}
   19558:	b00b      	add	sp, #44	; 0x2c
   1955a:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1955c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1955e:	9b05      	ldr	r3, [sp, #20]
   19560:	6818      	ldr	r0, [r3, #0]
   19562:	2300      	movs	r3, #0
   19564:	f88d 3010 	strb.w	r3, [sp, #16]
   19568:	a904      	add	r1, sp, #16
   1956a:	f642 0303 	movw	r3, #10243	; 0x2803
   1956e:	f8ad 3012 	strh.w	r3, [sp, #18]
   19572:	f009 fc48 	bl	22e06 <bt_uuid_cmp>
   19576:	b970      	cbnz	r0, 19596 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19578:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1957a:	68c3      	ldr	r3, [r0, #12]
   1957c:	799b      	ldrb	r3, [r3, #6]
   1957e:	069b      	lsls	r3, r3, #26
   19580:	d405      	bmi.n	1958e <bt_gatt_indicate+0x86>
			return -EINVAL;
   19582:	f06f 0015 	mvn.w	r0, #21
   19586:	e7e7      	b.n	19558 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   19588:	2800      	cmp	r0, #0
   1958a:	d1e8      	bne.n	1955e <bt_gatt_indicate+0x56>
   1958c:	e7e2      	b.n	19554 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1958e:	f00a fdf8 	bl	24182 <bt_gatt_attr_value_handle>
   19592:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   19596:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1959a:	b13c      	cbz	r4, 195ac <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   1959c:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1959e:	4601      	mov	r1, r0
		params->_ref = 1;
   195a0:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   195a2:	462a      	mov	r2, r5
   195a4:	4620      	mov	r0, r4
   195a6:	f7ff ff2f 	bl	19408 <gatt_indicate>
   195aa:	e7d5      	b.n	19558 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   195ac:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   195b0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   195b2:	2302      	movs	r3, #2
   195b4:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   195b8:	f642 1302 	movw	r3, #10498	; 0x2902
   195bc:	f8ad 3012 	strh.w	r3, [sp, #18]
   195c0:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   195c2:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   195c4:	9302      	str	r3, [sp, #8]
   195c6:	4b0c      	ldr	r3, [pc, #48]	; (195f8 <bt_gatt_indicate+0xf0>)
   195c8:	9301      	str	r3, [sp, #4]
   195ca:	2301      	movs	r3, #1
   195cc:	9300      	str	r3, [sp, #0]
   195ce:	aa04      	add	r2, sp, #16
   195d0:	4623      	mov	r3, r4
   195d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   195d6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   195d8:	f88d 4010 	strb.w	r4, [sp, #16]
   195dc:	f7ff fe18 	bl	19210 <bt_gatt_foreach_attr_type>
	return data.err;
   195e0:	9807      	ldr	r0, [sp, #28]
   195e2:	e7b9      	b.n	19558 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   195e4:	f06f 000a 	mvn.w	r0, #10
   195e8:	e7b6      	b.n	19558 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   195ea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   195ee:	e7b3      	b.n	19558 <bt_gatt_indicate+0x50>
   195f0:	20000454 	.word	0x20000454
   195f4:	00023e99 	.word	0x00023e99
   195f8:	00019911 	.word	0x00019911

000195fc <sc_process>:
{
   195fc:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   195fe:	f850 2c08 	ldr.w	r2, [r0, #-8]
   19602:	9201      	str	r2, [sp, #4]
{
   19604:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   19606:	f1a0 0120 	sub.w	r1, r0, #32
   1960a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1960e:	f3bf 8f5b 	dmb	ish
   19612:	e854 2f00 	ldrex	r2, [r4]
   19616:	f022 0201 	bic.w	r2, r2, #1
   1961a:	e844 2000 	strex	r0, r2, [r4]
   1961e:	2800      	cmp	r0, #0
   19620:	d1f7      	bne.n	19612 <sc_process+0x16>
   19622:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   19626:	4a0d      	ldr	r2, [pc, #52]	; (1965c <sc_process+0x60>)
   19628:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1962c:	4a0c      	ldr	r2, [pc, #48]	; (19660 <sc_process+0x64>)
   1962e:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   19632:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   19634:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   19636:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1963a:	2204      	movs	r2, #4
	sc->start = 0U;
   1963c:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   19640:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   19644:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   19648:	f7ff ff5e 	bl	19508 <bt_gatt_indicate>
   1964c:	b918      	cbnz	r0, 19656 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1964e:	2101      	movs	r1, #1
   19650:	4620      	mov	r0, r4
   19652:	f00a fc86 	bl	23f62 <atomic_set_bit>
}
   19656:	b002      	add	sp, #8
   19658:	bd10      	pop	{r4, pc}
   1965a:	bf00      	nop
   1965c:	0002641c 	.word	0x0002641c
   19660:	000190a5 	.word	0x000190a5

00019664 <update_ccc>:
{
   19664:	b5f0      	push	{r4, r5, r6, r7, lr}
   19666:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   19668:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1966a:	4b31      	ldr	r3, [pc, #196]	; (19730 <update_ccc+0xcc>)
   1966c:	6882      	ldr	r2, [r0, #8]
   1966e:	429a      	cmp	r2, r3
{
   19670:	af00      	add	r7, sp, #0
   19672:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   19674:	d11e      	bne.n	196b4 <update_ccc+0x50>
	ccc = attr->user_data;
   19676:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   19678:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1967a:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1967c:	b1d3      	cbz	r3, 196b4 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1967e:	7831      	ldrb	r1, [r6, #0]
   19680:	4628      	mov	r0, r5
   19682:	f009 fea3 	bl	233cc <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   19686:	b1a8      	cbz	r0, 196b4 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   19688:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1968c:	4621      	mov	r1, r4
   1968e:	4628      	mov	r0, r5
   19690:	f00a fdd2 	bl	24238 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   19694:	2803      	cmp	r0, #3
   19696:	d111      	bne.n	196bc <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   19698:	466d      	mov	r5, sp
   1969a:	b088      	sub	sp, #32
   1969c:	466a      	mov	r2, sp
   1969e:	4b25      	ldr	r3, [pc, #148]	; (19734 <update_ccc+0xd0>)
   196a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   196a4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   196a8:	f842 0f10 	str.w	r0, [r2, #16]!
   196ac:	4822      	ldr	r0, [pc, #136]	; (19738 <update_ccc+0xd4>)
   196ae:	f00a fc55 	bl	23f5c <z_log_msg_static_create.constprop.0>
   196b2:	46ad      	mov	sp, r5
}
   196b4:	2001      	movs	r0, #1
   196b6:	3724      	adds	r7, #36	; 0x24
   196b8:	46bd      	mov	sp, r7
   196ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   196bc:	4631      	mov	r1, r6
   196be:	4620      	mov	r0, r4
   196c0:	f00a fbcd 	bl	23e5e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   196c4:	4b1d      	ldr	r3, [pc, #116]	; (1973c <update_ccc+0xd8>)
   196c6:	429e      	cmp	r6, r3
   196c8:	d1f4      	bne.n	196b4 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   196ca:	7a28      	ldrb	r0, [r5, #8]
   196cc:	f105 0188 	add.w	r1, r5, #136	; 0x88
   196d0:	f7ff fb4e 	bl	18d70 <find_sc_cfg>
	if (!cfg) {
   196d4:	2800      	cmp	r0, #0
   196d6:	d0ed      	beq.n	196b4 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   196d8:	8902      	ldrh	r2, [r0, #8]
   196da:	8943      	ldrh	r3, [r0, #10]
   196dc:	ea52 0103 	orrs.w	r1, r2, r3
   196e0:	d0e8      	beq.n	196b4 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   196e2:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   196e4:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   196e6:	4628      	mov	r0, r5
   196e8:	f7fd fe2e 	bl	17348 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   196ec:	4914      	ldr	r1, [pc, #80]	; (19740 <update_ccc+0xdc>)
   196ee:	4a15      	ldr	r2, [pc, #84]	; (19744 <update_ccc+0xe0>)
   196f0:	2318      	movs	r3, #24
   196f2:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   196f6:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   196f8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   196fa:	4a13      	ldr	r2, [pc, #76]	; (19748 <update_ccc+0xe4>)
   196fc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   196fe:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19700:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   19704:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   19706:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   19708:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1970c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1970e:	4628      	mov	r0, r5
   19710:	f7ff fefa 	bl	19508 <bt_gatt_indicate>
   19714:	2800      	cmp	r0, #0
   19716:	d0cd      	beq.n	196b4 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   19718:	4b0c      	ldr	r3, [pc, #48]	; (1974c <update_ccc+0xe8>)
   1971a:	61fb      	str	r3, [r7, #28]
   1971c:	2302      	movs	r3, #2
   1971e:	4806      	ldr	r0, [pc, #24]	; (19738 <update_ccc+0xd4>)
   19720:	61bb      	str	r3, [r7, #24]
   19722:	f107 0218 	add.w	r2, r7, #24
   19726:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1972a:	f00a fc17 	bl	23f5c <z_log_msg_static_create.constprop.0>
   1972e:	e7c1      	b.n	196b4 <update_ccc+0x50>
   19730:	00018db9 	.word	0x00018db9
   19734:	000281db 	.word	0x000281db
   19738:	00025f60 	.word	0x00025f60
   1973c:	200007cc 	.word	0x200007cc
   19740:	2000377c 	.word	0x2000377c
   19744:	0002641c 	.word	0x0002641c
   19748:	00023f7f 	.word	0x00023f7f
   1974c:	000281ef 	.word	0x000281ef

00019750 <gatt_notify>:
{
   19750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19754:	4614      	mov	r4, r2
   19756:	b087      	sub	sp, #28
   19758:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1975a:	2294      	movs	r2, #148	; 0x94
   1975c:	6861      	ldr	r1, [r4, #4]
{
   1975e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19760:	f00a fd6a 	bl	24238 <bt_gatt_check_perm>
   19764:	b170      	cbz	r0, 19784 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   19766:	4b2b      	ldr	r3, [pc, #172]	; (19814 <gatt_notify+0xc4>)
   19768:	482b      	ldr	r0, [pc, #172]	; (19818 <gatt_notify+0xc8>)
   1976a:	9305      	str	r3, [sp, #20]
   1976c:	aa04      	add	r2, sp, #16
   1976e:	2302      	movs	r3, #2
   19770:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19774:	9304      	str	r3, [sp, #16]
   19776:	f00a fbf1 	bl	23f5c <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1977a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1977e:	b007      	add	sp, #28
   19780:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   19784:	6861      	ldr	r1, [r4, #4]
   19786:	2201      	movs	r2, #1
   19788:	4630      	mov	r0, r6
   1978a:	f00a fd7e 	bl	2428a <bt_gatt_is_subscribed>
   1978e:	b960      	cbnz	r0, 197aa <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   19790:	4b22      	ldr	r3, [pc, #136]	; (1981c <gatt_notify+0xcc>)
   19792:	4821      	ldr	r0, [pc, #132]	; (19818 <gatt_notify+0xc8>)
   19794:	9305      	str	r3, [sp, #20]
   19796:	aa04      	add	r2, sp, #16
   19798:	2302      	movs	r3, #2
   1979a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1979e:	9304      	str	r3, [sp, #16]
   197a0:	f00a fbdc 	bl	23f5c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   197a4:	f06f 0015 	mvn.w	r0, #21
   197a8:	e7e9      	b.n	1977e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   197aa:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   197ac:	211b      	movs	r1, #27
   197ae:	3202      	adds	r2, #2
   197b0:	4630      	mov	r0, r6
   197b2:	f7fe fef3 	bl	1859c <bt_att_create_pdu>
	if (!buf) {
   197b6:	4605      	mov	r5, r0
   197b8:	b960      	cbnz	r0, 197d4 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   197ba:	4b19      	ldr	r3, [pc, #100]	; (19820 <gatt_notify+0xd0>)
   197bc:	4816      	ldr	r0, [pc, #88]	; (19818 <gatt_notify+0xc8>)
   197be:	9305      	str	r3, [sp, #20]
   197c0:	aa04      	add	r2, sp, #16
   197c2:	2302      	movs	r3, #2
   197c4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   197c8:	9304      	str	r3, [sp, #16]
   197ca:	f00a fbc7 	bl	23f5c <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   197ce:	f06f 000b 	mvn.w	r0, #11
   197d2:	e7d4      	b.n	1977e <gatt_notify+0x2e>
   197d4:	f100 090c 	add.w	r9, r0, #12
   197d8:	2102      	movs	r1, #2
   197da:	4648      	mov	r0, r9
   197dc:	f00a feac 	bl	24538 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   197e0:	4607      	mov	r7, r0
   197e2:	4648      	mov	r0, r9
   197e4:	f827 8b02 	strh.w	r8, [r7], #2
   197e8:	89a1      	ldrh	r1, [r4, #12]
   197ea:	f00a fea5 	bl	24538 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   197ee:	89a2      	ldrh	r2, [r4, #12]
   197f0:	68a1      	ldr	r1, [r4, #8]
   197f2:	4638      	mov	r0, r7
   197f4:	f009 fade 	bl	22db4 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   197f8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   197fc:	4628      	mov	r0, r5
   197fe:	2301      	movs	r3, #1
   19800:	f00a fb23 	bl	23e4a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   19804:	4629      	mov	r1, r5
   19806:	4630      	mov	r0, r6
}
   19808:	b007      	add	sp, #28
   1980a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1980e:	f00a baa2 	b.w	23d56 <bt_att_send>
   19812:	bf00      	nop
   19814:	00028173 	.word	0x00028173
   19818:	00025f60 	.word	0x00025f60
   1981c:	00028189 	.word	0x00028189
   19820:	0002820c 	.word	0x0002820c

00019824 <bt_gatt_notify_cb>:
{
   19824:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19826:	4b37      	ldr	r3, [pc, #220]	; (19904 <bt_gatt_notify_cb+0xe0>)
   19828:	f3bf 8f5b 	dmb	ish
   1982c:	681b      	ldr	r3, [r3, #0]
   1982e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19832:	075a      	lsls	r2, r3, #29
{
   19834:	b08b      	sub	sp, #44	; 0x2c
   19836:	4604      	mov	r4, r0
   19838:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1983a:	d55d      	bpl.n	198f8 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1983c:	b110      	cbz	r0, 19844 <bt_gatt_notify_cb+0x20>
   1983e:	7a83      	ldrb	r3, [r0, #10]
   19840:	2b07      	cmp	r3, #7
   19842:	d15c      	bne.n	198fe <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   19844:	6868      	ldr	r0, [r5, #4]
   19846:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   19848:	f7ff fcb2 	bl	191b0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1984c:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1984e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   19852:	b33a      	cbz	r2, 198a4 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19854:	a905      	add	r1, sp, #20
   19856:	9102      	str	r1, [sp, #8]
   19858:	492b      	ldr	r1, [pc, #172]	; (19908 <bt_gatt_notify_cb+0xe4>)
   1985a:	9101      	str	r1, [sp, #4]
   1985c:	2101      	movs	r1, #1
	found->attr = NULL;
   1985e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19860:	9100      	str	r1, [sp, #0]
   19862:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   19866:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   19868:	f7ff fcd2 	bl	19210 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1986c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1986e:	b91b      	cbnz	r3, 19878 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   19870:	f06f 0001 	mvn.w	r0, #1
}
   19874:	b00b      	add	sp, #44	; 0x2c
   19876:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   19878:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1987a:	9b05      	ldr	r3, [sp, #20]
   1987c:	6818      	ldr	r0, [r3, #0]
   1987e:	2300      	movs	r3, #0
   19880:	f88d 3010 	strb.w	r3, [sp, #16]
   19884:	a904      	add	r1, sp, #16
   19886:	f642 0303 	movw	r3, #10243	; 0x2803
   1988a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1988e:	f009 faba 	bl	22e06 <bt_uuid_cmp>
   19892:	b970      	cbnz	r0, 198b2 <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   19894:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   19896:	68c3      	ldr	r3, [r0, #12]
   19898:	799b      	ldrb	r3, [r3, #6]
   1989a:	06db      	lsls	r3, r3, #27
   1989c:	d405      	bmi.n	198aa <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   1989e:	f06f 0015 	mvn.w	r0, #21
   198a2:	e7e7      	b.n	19874 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   198a4:	2800      	cmp	r0, #0
   198a6:	d1e8      	bne.n	1987a <bt_gatt_notify_cb+0x56>
   198a8:	e7e2      	b.n	19870 <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   198aa:	f00a fc6a 	bl	24182 <bt_gatt_attr_value_handle>
   198ae:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   198b2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   198b6:	b12c      	cbz	r4, 198c4 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   198b8:	4601      	mov	r1, r0
   198ba:	462a      	mov	r2, r5
   198bc:	4620      	mov	r0, r4
   198be:	f7ff ff47 	bl	19750 <gatt_notify>
   198c2:	e7d7      	b.n	19874 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198c4:	f642 1202 	movw	r2, #10498	; 0x2902
   198c8:	f8ad 2012 	strh.w	r2, [sp, #18]
   198cc:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   198ce:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198d2:	9202      	str	r2, [sp, #8]
   198d4:	4a0d      	ldr	r2, [pc, #52]	; (1990c <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   198d6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   198d8:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198da:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   198de:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198e2:	aa04      	add	r2, sp, #16
   198e4:	4623      	mov	r3, r4
   198e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   198ea:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   198ec:	f88d 4010 	strb.w	r4, [sp, #16]
   198f0:	f7ff fc8e 	bl	19210 <bt_gatt_foreach_attr_type>
	return data.err;
   198f4:	9807      	ldr	r0, [sp, #28]
   198f6:	e7bd      	b.n	19874 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   198f8:	f06f 000a 	mvn.w	r0, #10
   198fc:	e7ba      	b.n	19874 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   198fe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19902:	e7b7      	b.n	19874 <bt_gatt_notify_cb+0x50>
   19904:	20000454 	.word	0x20000454
   19908:	00023e99 	.word	0x00023e99
   1990c:	00019911 	.word	0x00019911

00019910 <notify_cb>:
{
   19910:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   19912:	4b3f      	ldr	r3, [pc, #252]	; (19a10 <notify_cb+0x100>)
{
   19914:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   19916:	6882      	ldr	r2, [r0, #8]
   19918:	429a      	cmp	r2, r3
{
   1991a:	b087      	sub	sp, #28
   1991c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1991e:	d003      	beq.n	19928 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   19920:	2701      	movs	r7, #1
}
   19922:	4638      	mov	r0, r7
   19924:	b007      	add	sp, #28
   19926:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   19928:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1992a:	4b3a      	ldr	r3, [pc, #232]	; (19a14 <notify_cb+0x104>)
   1992c:	429e      	cmp	r6, r3
   1992e:	d056      	beq.n	199de <notify_cb+0xce>
		if (cfg->value != data->type) {
   19930:	8932      	ldrh	r2, [r6, #8]
   19932:	89ab      	ldrh	r3, [r5, #12]
   19934:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   19936:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1993a:	d1f1      	bne.n	19920 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1993c:	7830      	ldrb	r0, [r6, #0]
   1993e:	f7fd fdef 	bl	17520 <bt_conn_lookup_addr_le>
		if (!conn) {
   19942:	4604      	mov	r4, r0
   19944:	2800      	cmp	r0, #0
   19946:	d0eb      	beq.n	19920 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   19948:	7a83      	ldrb	r3, [r0, #10]
   1994a:	2b07      	cmp	r3, #7
   1994c:	d005      	beq.n	1995a <notify_cb+0x4a>
			bt_conn_unref(conn);
   1994e:	f009 fcf4 	bl	2333a <bt_conn_unref>
			continue;
   19952:	e7e5      	b.n	19920 <notify_cb+0x10>
			bt_conn_unref(conn);
   19954:	f009 fcf1 	bl	2333a <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   19958:	e7ea      	b.n	19930 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1995a:	6973      	ldr	r3, [r6, #20]
   1995c:	b123      	cbz	r3, 19968 <notify_cb+0x58>
   1995e:	4639      	mov	r1, r7
   19960:	4798      	blx	r3
   19962:	b908      	cbnz	r0, 19968 <notify_cb+0x58>
			bt_conn_unref(conn);
   19964:	4620      	mov	r0, r4
   19966:	e7f2      	b.n	1994e <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   19968:	4639      	mov	r1, r7
   1996a:	2294      	movs	r2, #148	; 0x94
   1996c:	4620      	mov	r0, r4
   1996e:	f00a fc63 	bl	24238 <bt_gatt_check_perm>
   19972:	4607      	mov	r7, r0
   19974:	b150      	cbz	r0, 1998c <notify_cb+0x7c>
			LOG_WRN("Link is not encrypted");
   19976:	4b28      	ldr	r3, [pc, #160]	; (19a18 <notify_cb+0x108>)
   19978:	9305      	str	r3, [sp, #20]
   1997a:	4828      	ldr	r0, [pc, #160]	; (19a1c <notify_cb+0x10c>)
   1997c:	2302      	movs	r3, #2
   1997e:	aa04      	add	r2, sp, #16
   19980:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19984:	9304      	str	r3, [sp, #16]
   19986:	f00a fae9 	bl	23f5c <z_log_msg_static_create.constprop.0>
   1998a:	e7eb      	b.n	19964 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1998c:	89ab      	ldrh	r3, [r5, #12]
   1998e:	2b02      	cmp	r3, #2
   19990:	d114      	bne.n	199bc <notify_cb+0xac>
   19992:	8933      	ldrh	r3, [r6, #8]
   19994:	079a      	lsls	r2, r3, #30
   19996:	d405      	bmi.n	199a4 <notify_cb+0x94>
		bt_conn_unref(conn);
   19998:	4620      	mov	r0, r4
   1999a:	f009 fcce 	bl	2333a <bt_conn_unref>
		data->err = 0;
   1999e:	2300      	movs	r3, #0
   199a0:	60ab      	str	r3, [r5, #8]
   199a2:	e7bd      	b.n	19920 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   199a4:	692a      	ldr	r2, [r5, #16]
   199a6:	88a9      	ldrh	r1, [r5, #4]
   199a8:	4620      	mov	r0, r4
   199aa:	f7ff fd2d 	bl	19408 <gatt_indicate>
			if (err == 0) {
   199ae:	4606      	mov	r6, r0
   199b0:	b978      	cbnz	r0, 199d2 <notify_cb+0xc2>
				data->ind_params->_ref++;
   199b2:	692a      	ldr	r2, [r5, #16]
   199b4:	7d93      	ldrb	r3, [r2, #22]
   199b6:	3301      	adds	r3, #1
   199b8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   199ba:	e7ed      	b.n	19998 <notify_cb+0x88>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   199bc:	2b01      	cmp	r3, #1
   199be:	d1eb      	bne.n	19998 <notify_cb+0x88>
   199c0:	8933      	ldrh	r3, [r6, #8]
   199c2:	07db      	lsls	r3, r3, #31
   199c4:	d5e8      	bpl.n	19998 <notify_cb+0x88>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   199c6:	692a      	ldr	r2, [r5, #16]
   199c8:	88a9      	ldrh	r1, [r5, #4]
   199ca:	4620      	mov	r0, r4
   199cc:	f7ff fec0 	bl	19750 <gatt_notify>
   199d0:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   199d2:	4620      	mov	r0, r4
   199d4:	f009 fcb1 	bl	2333a <bt_conn_unref>
		if (err < 0) {
   199d8:	2e00      	cmp	r6, #0
   199da:	dba2      	blt.n	19922 <notify_cb+0x12>
   199dc:	e7df      	b.n	1999e <notify_cb+0x8e>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   199de:	4c10      	ldr	r4, [pc, #64]	; (19a20 <notify_cb+0x110>)
   199e0:	4910      	ldr	r1, [pc, #64]	; (19a24 <notify_cb+0x114>)
   199e2:	4620      	mov	r0, r4
   199e4:	f00a faaf 	bl	23f46 <bt_addr_le_eq>
   199e8:	2800      	cmp	r0, #0
   199ea:	d1a1      	bne.n	19930 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   199ec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   199f0:	2207      	movs	r2, #7
   199f2:	4621      	mov	r1, r4
   199f4:	f7fd fdde 	bl	175b4 <bt_conn_lookup_state_le>
			if (!conn) {
   199f8:	2800      	cmp	r0, #0
   199fa:	d1ab      	bne.n	19954 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   199fc:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   199fe:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   19a02:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   19a04:	4621      	mov	r1, r4
   19a06:	8853      	ldrh	r3, [r2, #2]
   19a08:	8812      	ldrh	r2, [r2, #0]
   19a0a:	f7ff fa55 	bl	18eb8 <sc_save>
				continue;
   19a0e:	e78f      	b.n	19930 <notify_cb+0x20>
   19a10:	00018db9 	.word	0x00018db9
   19a14:	200007cc 	.word	0x200007cc
   19a18:	00028173 	.word	0x00028173
   19a1c:	00025f60 	.word	0x00025f60
   19a20:	20004547 	.word	0x20004547
   19a24:	00027408 	.word	0x00027408

00019a28 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   19a28:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19a2a:	4a06      	ldr	r2, [pc, #24]	; (19a44 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   19a2c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19a2e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   19a30:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19a32:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   19a36:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   19a3a:	f00a fbf0 	bl	2421e <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   19a3e:	b003      	add	sp, #12
   19a40:	f85d fb04 	ldr.w	pc, [sp], #4
   19a44:	00019665 	.word	0x00019665

00019a48 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   19a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   19a4a:	4b08      	ldr	r3, [pc, #32]	; (19a6c <bt_gatt_att_max_mtu_changed+0x24>)
   19a4c:	681c      	ldr	r4, [r3, #0]
   19a4e:	4605      	mov	r5, r0
   19a50:	460e      	mov	r6, r1
   19a52:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19a54:	b14c      	cbz	r4, 19a6a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   19a56:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   19a5a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   19a5c:	b11b      	cbz	r3, 19a66 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   19a5e:	463a      	mov	r2, r7
   19a60:	4631      	mov	r1, r6
   19a62:	4628      	mov	r0, r5
   19a64:	4798      	blx	r3
	return node->next;
   19a66:	6864      	ldr	r4, [r4, #4]
   19a68:	e7f4      	b.n	19a54 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   19a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19a6c:	200037ac 	.word	0x200037ac

00019a70 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   19a70:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19a72:	4603      	mov	r3, r0
   19a74:	4a0f      	ldr	r2, [pc, #60]	; (19ab4 <bt_gatt_disconnected+0x44>)
{
   19a76:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   19a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   19a7c:	2001      	movs	r0, #1
   19a7e:	f00a fbce 	bl	2421e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   19a82:	4620      	mov	r0, r4
   19a84:	f7ff f95c 	bl	18d40 <find_cf_cfg>
	if (!cfg) {
   19a88:	4605      	mov	r5, r0
   19a8a:	b188      	cbz	r0, 19ab0 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   19a8c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   19a90:	7a20      	ldrb	r0, [r4, #8]
   19a92:	4631      	mov	r1, r6
   19a94:	f009 fae4 	bl	23060 <bt_addr_le_is_bonded>
   19a98:	b920      	cbnz	r0, 19aa4 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   19a9a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   19a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   19aa0:	f7ff b9ee 	b.w	18e80 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19aa4:	4631      	mov	r1, r6
   19aa6:	1c68      	adds	r0, r5, #1
}
   19aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   19aac:	f00a ba53 	b.w	23f56 <bt_addr_le_copy>
}
   19ab0:	bd70      	pop	{r4, r5, r6, pc}
   19ab2:	bf00      	nop
   19ab4:	00018fcd 	.word	0x00018fcd

00019ab8 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   19ab8:	b580      	push	{r7, lr}
   19aba:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   19abc:	b088      	sub	sp, #32
   19abe:	466a      	mov	r2, sp
   19ac0:	4b07      	ldr	r3, [pc, #28]	; (19ae0 <bt_smp_accept.part.0+0x28>)
   19ac2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19ac6:	2303      	movs	r3, #3
   19ac8:	f842 3f10 	str.w	r3, [r2, #16]!
   19acc:	4805      	ldr	r0, [pc, #20]	; (19ae4 <bt_smp_accept.part.0+0x2c>)
   19ace:	2300      	movs	r3, #0
   19ad0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ad4:	f7f9 fa72 	bl	12fbc <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   19ad8:	f06f 000b 	mvn.w	r0, #11
   19adc:	46bd      	mov	sp, r7
   19ade:	bd80      	pop	{r7, pc}
   19ae0:	00028244 	.word	0x00028244
   19ae4:	00025f98 	.word	0x00025f98

00019ae8 <bt_smp_accept>:
		if (smp->chan.conn) {
   19ae8:	4b04      	ldr	r3, [pc, #16]	; (19afc <bt_smp_accept+0x14>)
   19aea:	681a      	ldr	r2, [r3, #0]
   19aec:	b10a      	cbz	r2, 19af2 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   19aee:	f7ff bfe3 	b.w	19ab8 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   19af2:	4803      	ldr	r0, [pc, #12]	; (19b00 <bt_smp_accept+0x18>)
   19af4:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   19af6:	600b      	str	r3, [r1, #0]
}
   19af8:	4610      	mov	r0, r2
   19afa:	4770      	bx	lr
   19afc:	200037b4 	.word	0x200037b4
   19b00:	00026520 	.word	0x00026520

00019b04 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19b04:	4b02      	ldr	r3, [pc, #8]	; (19b10 <net_buf_pool_get+0xc>)
   19b06:	222c      	movs	r2, #44	; 0x2c
   19b08:	fb02 3000 	mla	r0, r2, r0, r3
   19b0c:	4770      	bx	lr
   19b0e:	bf00      	nop
   19b10:	20000bec 	.word	0x20000bec

00019b14 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19b14:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19b16:	4b06      	ldr	r3, [pc, #24]	; (19b30 <net_buf_id+0x1c>)
   19b18:	212c      	movs	r1, #44	; 0x2c
   19b1a:	fb01 3302 	mla	r3, r1, r2, r3
   19b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19b20:	7f1b      	ldrb	r3, [r3, #28]
   19b22:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   19b24:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19b26:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   19b2a:	fbb0 f0f3 	udiv	r0, r0, r3
   19b2e:	4770      	bx	lr
   19b30:	20000bec 	.word	0x20000bec

00019b34 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19b34:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19b36:	4b0a      	ldr	r3, [pc, #40]	; (19b60 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19b38:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19b3a:	242c      	movs	r4, #44	; 0x2c
   19b3c:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   19b40:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19b44:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19b46:	681a      	ldr	r2, [r3, #0]
   19b48:	4294      	cmp	r4, r2
   19b4a:	bf94      	ite	ls
   19b4c:	600c      	strls	r4, [r1, #0]
   19b4e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19b50:	e9d3 5400 	ldrd	r5, r4, [r3]
   19b54:	f7ff ffde 	bl	19b14 <net_buf_id>
}
   19b58:	fb05 4000 	mla	r0, r5, r0, r4
   19b5c:	bd38      	pop	{r3, r4, r5, pc}
   19b5e:	bf00      	nop
   19b60:	20000bec 	.word	0x20000bec

00019b64 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b68:	4605      	mov	r5, r0
   19b6a:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19b6c:	4610      	mov	r0, r2
   19b6e:	4619      	mov	r1, r3
{
   19b70:	4691      	mov	r9, r2
   19b72:	4698      	mov	r8, r3
   19b74:	4617      	mov	r7, r2
   19b76:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   19b78:	f00b fe4c 	bl	25814 <sys_clock_timeout_end_calc>
   19b7c:	4682      	mov	sl, r0
   19b7e:	468b      	mov	fp, r1
	__asm__ volatile(
   19b80:	f04f 0340 	mov.w	r3, #64	; 0x40
   19b84:	f3ef 8111 	mrs	r1, BASEPRI
   19b88:	f383 8812 	msr	BASEPRI_MAX, r3
   19b8c:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   19b90:	8b6b      	ldrh	r3, [r5, #26]
   19b92:	2b00      	cmp	r3, #0
   19b94:	d058      	beq.n	19c48 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   19b96:	8b2a      	ldrh	r2, [r5, #24]
   19b98:	429a      	cmp	r2, r3
   19b9a:	d93c      	bls.n	19c16 <net_buf_alloc_len+0xb2>
   19b9c:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   19b9e:	2200      	movs	r2, #0
   19ba0:	2300      	movs	r3, #0
   19ba2:	4628      	mov	r0, r5
   19ba4:	f003 ff58 	bl	1da58 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   19ba8:	9900      	ldr	r1, [sp, #0]
   19baa:	4604      	mov	r4, r0
   19bac:	2800      	cmp	r0, #0
   19bae:	d032      	beq.n	19c16 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   19bb0:	f381 8811 	msr	BASEPRI, r1
   19bb4:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   19bb8:	9b01      	ldr	r3, [sp, #4]
   19bba:	2b00      	cmp	r3, #0
   19bbc:	d055      	beq.n	19c6a <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   19bbe:	ea58 0309 	orrs.w	r3, r8, r9
   19bc2:	d00f      	beq.n	19be4 <net_buf_alloc_len+0x80>
   19bc4:	f1b8 3fff 	cmp.w	r8, #4294967295
   19bc8:	bf08      	it	eq
   19bca:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   19bce:	d009      	beq.n	19be4 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   19bd0:	f004 fe2e 	bl	1e830 <sys_clock_tick_get>
   19bd4:	ebba 0700 	subs.w	r7, sl, r0
   19bd8:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   19bdc:	2e00      	cmp	r6, #0
   19bde:	bfbc      	itt	lt
   19be0:	2700      	movlt	r7, #0
   19be2:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19be4:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   19be6:	4d26      	ldr	r5, [pc, #152]	; (19c80 <net_buf_alloc_len+0x11c>)
   19be8:	f04f 082c 	mov.w	r8, #44	; 0x2c
   19bec:	fb08 5303 	mla	r3, r8, r3, r5
   19bf0:	463a      	mov	r2, r7
   19bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19bf4:	681b      	ldr	r3, [r3, #0]
   19bf6:	a901      	add	r1, sp, #4
   19bf8:	f8d3 9000 	ldr.w	r9, [r3]
   19bfc:	4620      	mov	r0, r4
   19bfe:	4633      	mov	r3, r6
   19c00:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   19c02:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   19c04:	2800      	cmp	r0, #0
   19c06:	d131      	bne.n	19c6c <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   19c08:	7aa0      	ldrb	r0, [r4, #10]
   19c0a:	4621      	mov	r1, r4
   19c0c:	fb00 5008 	mla	r0, r0, r8, r5
   19c10:	f00b fb7c 	bl	2530c <k_queue_prepend>
}
   19c14:	e024      	b.n	19c60 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   19c16:	8b68      	ldrh	r0, [r5, #26]
   19c18:	1e43      	subs	r3, r0, #1
   19c1a:	836b      	strh	r3, [r5, #26]
   19c1c:	f381 8811 	msr	BASEPRI, r1
   19c20:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19c24:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19c26:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19c28:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   19c2a:	331b      	adds	r3, #27
   19c2c:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   19c30:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   19c32:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   19c36:	4b12      	ldr	r3, [pc, #72]	; (19c80 <net_buf_alloc_len+0x11c>)
   19c38:	4a12      	ldr	r2, [pc, #72]	; (19c84 <net_buf_alloc_len+0x120>)
   19c3a:	1aeb      	subs	r3, r5, r3
   19c3c:	109b      	asrs	r3, r3, #2
   19c3e:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   19c40:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   19c42:	7f2b      	ldrb	r3, [r5, #28]
   19c44:	72e3      	strb	r3, [r4, #11]
		goto success;
   19c46:	e7b7      	b.n	19bb8 <net_buf_alloc_len+0x54>
   19c48:	f381 8811 	msr	BASEPRI, r1
   19c4c:	f3bf 8f6f 	isb	sy
   19c50:	464a      	mov	r2, r9
   19c52:	4643      	mov	r3, r8
   19c54:	4628      	mov	r0, r5
   19c56:	f003 feff 	bl	1da58 <z_impl_k_queue_get>
	if (!buf) {
   19c5a:	4604      	mov	r4, r0
   19c5c:	2800      	cmp	r0, #0
   19c5e:	d1ab      	bne.n	19bb8 <net_buf_alloc_len+0x54>
		return NULL;
   19c60:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   19c62:	4620      	mov	r0, r4
   19c64:	b003      	add	sp, #12
   19c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   19c6a:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   19c6c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   19c6e:	2201      	movs	r2, #1
	buf->frags = NULL;
   19c70:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   19c72:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   19c74:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   19c76:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   19c78:	6963      	ldr	r3, [r4, #20]
   19c7a:	8262      	strh	r2, [r4, #18]
   19c7c:	60e3      	str	r3, [r4, #12]
	return buf;
   19c7e:	e7f0      	b.n	19c62 <net_buf_alloc_len+0xfe>
   19c80:	20000bec 	.word	0x20000bec
   19c84:	ba2e8ba3 	.word	0xba2e8ba3

00019c88 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   19c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c8c:	4d16      	ldr	r5, [pc, #88]	; (19ce8 <net_buf_unref+0x60>)
   19c8e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   19c90:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   19c92:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   19c94:	b90c      	cbnz	r4, 19c9a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   19c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   19c9a:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   19c9c:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   19ca0:	3b01      	subs	r3, #1
   19ca2:	b2db      	uxtb	r3, r3
   19ca4:	7223      	strb	r3, [r4, #8]
   19ca6:	2b00      	cmp	r3, #0
   19ca8:	d1f5      	bne.n	19c96 <net_buf_unref+0xe>
		if (buf->__buf) {
   19caa:	6961      	ldr	r1, [r4, #20]
   19cac:	b159      	cbz	r1, 19cc6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   19cae:	7a63      	ldrb	r3, [r4, #9]
   19cb0:	07db      	lsls	r3, r3, #31
   19cb2:	d407      	bmi.n	19cc4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19cb4:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   19cb6:	fb07 5303 	mla	r3, r7, r3, r5
   19cba:	4620      	mov	r0, r4
   19cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19cbe:	681b      	ldr	r3, [r3, #0]
   19cc0:	689b      	ldr	r3, [r3, #8]
   19cc2:	4798      	blx	r3
			buf->__buf = NULL;
   19cc4:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   19cc6:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   19cc8:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   19cca:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   19cce:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   19cd0:	6a1b      	ldr	r3, [r3, #32]
   19cd2:	b11b      	cbz	r3, 19cdc <net_buf_unref+0x54>
			pool->destroy(buf);
   19cd4:	4620      	mov	r0, r4
   19cd6:	4798      	blx	r3
{
   19cd8:	4644      	mov	r4, r8
   19cda:	e7db      	b.n	19c94 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   19cdc:	4621      	mov	r1, r4
   19cde:	fb00 5007 	mla	r0, r0, r7, r5
   19ce2:	f00b fb13 	bl	2530c <k_queue_prepend>
}
   19ce6:	e7f7      	b.n	19cd8 <net_buf_unref+0x50>
   19ce8:	20000bec 	.word	0x20000bec

00019cec <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   19cec:	b508      	push	{r3, lr}
   19cee:	4804      	ldr	r0, [pc, #16]	; (19d00 <xoshiro128_initialize+0x14>)
   19cf0:	f00b f992 	bl	25018 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   19cf4:	2800      	cmp	r0, #0
}
   19cf6:	bf0c      	ite	eq
   19cf8:	f06f 0012 	mvneq.w	r0, #18
   19cfc:	2000      	movne	r0, #0
   19cfe:	bd08      	pop	{r3, pc}
   19d00:	00025ccc 	.word	0x00025ccc

00019d04 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   19d04:	4b08      	ldr	r3, [pc, #32]	; (19d28 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19d06:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   19d08:	1ac3      	subs	r3, r0, r3
{
   19d0a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19d0c:	4907      	ldr	r1, [pc, #28]	; (19d2c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   19d0e:	109b      	asrs	r3, r3, #2
{
   19d10:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19d12:	4359      	muls	r1, r3
   19d14:	4806      	ldr	r0, [pc, #24]	; (19d30 <onoff_stop+0x2c>)
   19d16:	2240      	movs	r2, #64	; 0x40
   19d18:	f00a fc6d 	bl	245f6 <stop>
	notify(mgr, res);
   19d1c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   19d1e:	4601      	mov	r1, r0
	notify(mgr, res);
   19d20:	4620      	mov	r0, r4
}
   19d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   19d26:	4718      	bx	r3
   19d28:	20003854 	.word	0x20003854
   19d2c:	b6db6db7 	.word	0xb6db6db7
   19d30:	00025c54 	.word	0x00025c54

00019d34 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   19d34:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   19d36:	4c0c      	ldr	r4, [pc, #48]	; (19d68 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19d38:	4a0c      	ldr	r2, [pc, #48]	; (19d6c <onoff_start+0x38>)
   19d3a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   19d3c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19d3e:	9300      	str	r3, [sp, #0]
{
   19d40:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19d42:	460b      	mov	r3, r1
   19d44:	490a      	ldr	r1, [pc, #40]	; (19d70 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   19d46:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19d48:	4361      	muls	r1, r4
{
   19d4a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   19d4c:	4809      	ldr	r0, [pc, #36]	; (19d74 <onoff_start+0x40>)
   19d4e:	f00a fc7e 	bl	2464e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   19d52:	1e01      	subs	r1, r0, #0
   19d54:	da05      	bge.n	19d62 <onoff_start+0x2e>
		notify(mgr, err);
   19d56:	4630      	mov	r0, r6
   19d58:	462b      	mov	r3, r5
	}
}
   19d5a:	b002      	add	sp, #8
   19d5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   19d60:	4718      	bx	r3
}
   19d62:	b002      	add	sp, #8
   19d64:	bd70      	pop	{r4, r5, r6, pc}
   19d66:	bf00      	nop
   19d68:	20003854 	.word	0x20003854
   19d6c:	000246b9 	.word	0x000246b9
   19d70:	b6db6db7 	.word	0xb6db6db7
   19d74:	00025c54 	.word	0x00025c54

00019d78 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19d78:	2200      	movs	r2, #0
{
   19d7a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19d7c:	2101      	movs	r1, #1
{
   19d7e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   19d80:	4610      	mov	r0, r2
   19d82:	f7f9 ff99 	bl	13cb8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   19d86:	480f      	ldr	r0, [pc, #60]	; (19dc4 <clk_init+0x4c>)
   19d88:	f002 fd22 	bl	1c7d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   19d8c:	4b0e      	ldr	r3, [pc, #56]	; (19dc8 <clk_init+0x50>)
   19d8e:	4298      	cmp	r0, r3
   19d90:	d115      	bne.n	19dbe <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   19d92:	f00b f8d0 	bl	24f36 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   19d96:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   19d98:	490c      	ldr	r1, [pc, #48]	; (19dcc <clk_init+0x54>)
   19d9a:	4630      	mov	r0, r6
   19d9c:	f008 f9ad 	bl	220fa <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   19da0:	2800      	cmp	r0, #0
   19da2:	db0b      	blt.n	19dbc <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19da4:	2501      	movs	r5, #1
   19da6:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   19da8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   19daa:	4908      	ldr	r1, [pc, #32]	; (19dcc <clk_init+0x54>)
   19dac:	f104 001c 	add.w	r0, r4, #28
   19db0:	f008 f9a3 	bl	220fa <onoff_manager_init>
		if (err < 0) {
   19db4:	2800      	cmp	r0, #0
   19db6:	db01      	blt.n	19dbc <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   19db8:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   19dba:	2000      	movs	r0, #0
}
   19dbc:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   19dbe:	f06f 0004 	mvn.w	r0, #4
   19dc2:	e7fb      	b.n	19dbc <clk_init+0x44>
   19dc4:	00019e05 	.word	0x00019e05
   19dc8:	0bad0000 	.word	0x0bad0000
   19dcc:	00026554 	.word	0x00026554

00019dd0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   19dd0:	b570      	push	{r4, r5, r6, lr}
   19dd2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   19dd4:	230c      	movs	r3, #12
   19dd6:	4809      	ldr	r0, [pc, #36]	; (19dfc <clkstarted_handle.constprop.0+0x2c>)
   19dd8:	434b      	muls	r3, r1
   19dda:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   19ddc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   19de0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   19de2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   19de4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   19de6:	4418      	add	r0, r3
   19de8:	f00a fbf2 	bl	245d0 <set_on_state>
	if (callback) {
   19dec:	b12d      	cbz	r5, 19dfa <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   19dee:	4632      	mov	r2, r6
   19df0:	462b      	mov	r3, r5
   19df2:	4803      	ldr	r0, [pc, #12]	; (19e00 <clkstarted_handle.constprop.0+0x30>)
}
   19df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   19df8:	4718      	bx	r3
}
   19dfa:	bd70      	pop	{r4, r5, r6, pc}
   19dfc:	20003854 	.word	0x20003854
   19e00:	00025c54 	.word	0x00025c54

00019e04 <clock_event_handler>:
	switch (event) {
   19e04:	b110      	cbz	r0, 19e0c <clock_event_handler+0x8>
   19e06:	2801      	cmp	r0, #1
   19e08:	d004      	beq.n	19e14 <clock_event_handler+0x10>
   19e0a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   19e0c:	4b03      	ldr	r3, [pc, #12]	; (19e1c <clock_event_handler+0x18>)
   19e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19e10:	075b      	lsls	r3, r3, #29
   19e12:	d101      	bne.n	19e18 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   19e14:	f7ff bfdc 	b.w	19dd0 <clkstarted_handle.constprop.0>
}
   19e18:	4770      	bx	lr
   19e1a:	bf00      	nop
   19e1c:	20003854 	.word	0x20003854

00019e20 <generic_hfclk_start>:
{
   19e20:	b508      	push	{r3, lr}
	__asm__ volatile(
   19e22:	f04f 0340 	mov.w	r3, #64	; 0x40
   19e26:	f3ef 8111 	mrs	r1, BASEPRI
   19e2a:	f383 8812 	msr	BASEPRI_MAX, r3
   19e2e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   19e32:	4a12      	ldr	r2, [pc, #72]	; (19e7c <generic_hfclk_start+0x5c>)
   19e34:	6813      	ldr	r3, [r2, #0]
   19e36:	f043 0002 	orr.w	r0, r3, #2
   19e3a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   19e3c:	07da      	lsls	r2, r3, #31
   19e3e:	d408      	bmi.n	19e52 <generic_hfclk_start+0x32>
	__asm__ volatile(
   19e40:	f381 8811 	msr	BASEPRI, r1
   19e44:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   19e48:	2001      	movs	r0, #1
}
   19e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19e4e:	f002 bcaf 	b.w	1c7b0 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19e56:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19e5a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   19e5e:	07d3      	lsls	r3, r2, #31
   19e60:	d5ee      	bpl.n	19e40 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   19e62:	4807      	ldr	r0, [pc, #28]	; (19e80 <generic_hfclk_start+0x60>)
   19e64:	f00a fbb4 	bl	245d0 <set_on_state>
   19e68:	f381 8811 	msr	BASEPRI, r1
   19e6c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   19e70:	2000      	movs	r0, #0
}
   19e72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   19e76:	f7ff bfab 	b.w	19dd0 <clkstarted_handle.constprop.0>
   19e7a:	bf00      	nop
   19e7c:	200038a4 	.word	0x200038a4
   19e80:	20003894 	.word	0x20003894

00019e84 <api_blocking_start>:
{
   19e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19e86:	2200      	movs	r2, #0
   19e88:	2301      	movs	r3, #1
   19e8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   19e8e:	ab04      	add	r3, sp, #16
   19e90:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19e94:	4a09      	ldr	r2, [pc, #36]	; (19ebc <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19e96:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19e9a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   19e9c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   19ea0:	f00a fc03 	bl	246aa <api_start>
	if (err < 0) {
   19ea4:	2800      	cmp	r0, #0
   19ea6:	db05      	blt.n	19eb4 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   19ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   19eac:	2300      	movs	r3, #0
   19eae:	4668      	mov	r0, sp
   19eb0:	f003 fe2c 	bl	1db0c <z_impl_k_sem_take>
}
   19eb4:	b007      	add	sp, #28
   19eb6:	f85d fb04 	ldr.w	pc, [sp], #4
   19eba:	bf00      	nop
   19ebc:	000246d7 	.word	0x000246d7

00019ec0 <generic_hfclk_stop>:
{
   19ec0:	b510      	push	{r4, lr}
	__asm__ volatile(
   19ec2:	f04f 0340 	mov.w	r3, #64	; 0x40
   19ec6:	f3ef 8411 	mrs	r4, BASEPRI
   19eca:	f383 8812 	msr	BASEPRI_MAX, r3
   19ece:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   19ed2:	4a07      	ldr	r2, [pc, #28]	; (19ef0 <generic_hfclk_stop+0x30>)
   19ed4:	6813      	ldr	r3, [r2, #0]
   19ed6:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   19eda:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   19edc:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   19ede:	d402      	bmi.n	19ee6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   19ee0:	2001      	movs	r0, #1
   19ee2:	f00b f823 	bl	24f2c <nrfx_clock_stop>
	__asm__ volatile(
   19ee6:	f384 8811 	msr	BASEPRI, r4
   19eea:	f3bf 8f6f 	isb	sy
}
   19eee:	bd10      	pop	{r4, pc}
   19ef0:	200038a4 	.word	0x200038a4

00019ef4 <z_nrf_clock_control_lf_on>:
{
   19ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19ef8:	4938      	ldr	r1, [pc, #224]	; (19fdc <z_nrf_clock_control_lf_on+0xe8>)
   19efa:	f3bf 8f5b 	dmb	ish
   19efe:	4607      	mov	r7, r0
   19f00:	2201      	movs	r2, #1
   19f02:	e851 3f00 	ldrex	r3, [r1]
   19f06:	e841 2000 	strex	r0, r2, [r1]
   19f0a:	2800      	cmp	r0, #0
   19f0c:	d1f9      	bne.n	19f02 <z_nrf_clock_control_lf_on+0xe>
   19f0e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   19f12:	b933      	cbnz	r3, 19f22 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   19f14:	4932      	ldr	r1, [pc, #200]	; (19fe0 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   19f16:	4833      	ldr	r0, [pc, #204]	; (19fe4 <z_nrf_clock_control_lf_on+0xf0>)
   19f18:	604b      	str	r3, [r1, #4]
   19f1a:	60cb      	str	r3, [r1, #12]
   19f1c:	608a      	str	r2, [r1, #8]
   19f1e:	f008 f8ff 	bl	22120 <onoff_request>
	switch (start_mode) {
   19f22:	1e7b      	subs	r3, r7, #1
   19f24:	2b01      	cmp	r3, #1
   19f26:	d82b      	bhi.n	19f80 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   19f28:	2f01      	cmp	r7, #1
   19f2a:	d107      	bne.n	19f3c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   19f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19f30:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   19f34:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   19f38:	2b01      	cmp	r3, #1
   19f3a:	d021      	beq.n	19f80 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19f3c:	f00b f93a 	bl	251b4 <k_is_in_isr>
   19f40:	4605      	mov	r5, r0
   19f42:	b9f8      	cbnz	r0, 19f84 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
   19f44:	4b28      	ldr	r3, [pc, #160]	; (19fe8 <z_nrf_clock_control_lf_on+0xf4>)
   19f46:	781b      	ldrb	r3, [r3, #0]
   19f48:	b1e3      	cbz	r3, 19f84 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   19f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19f4e:	2202      	movs	r2, #2
   19f50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   19f54:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19f56:	f8df 8094 	ldr.w	r8, [pc, #148]	; 19fec <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19f5a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   19f5e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19f62:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   19f66:	03d2      	lsls	r2, r2, #15
   19f68:	d516      	bpl.n	19f98 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   19f6a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   19f6e:	2b01      	cmp	r3, #1
   19f70:	d001      	beq.n	19f76 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   19f72:	2f01      	cmp	r7, #1
   19f74:	d110      	bne.n	19f98 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   19f76:	b35d      	cbz	r5, 19fd0 <z_nrf_clock_control_lf_on+0xdc>
   19f78:	f386 8811 	msr	BASEPRI, r6
   19f7c:	f3bf 8f6f 	isb	sy
}
   19f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19f84:	f04f 0340 	mov.w	r3, #64	; 0x40
   19f88:	f3ef 8611 	mrs	r6, BASEPRI
   19f8c:	f383 8812 	msr	BASEPRI_MAX, r3
   19f90:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19f94:	2501      	movs	r5, #1
   19f96:	e7de      	b.n	19f56 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   19f98:	b1ad      	cbz	r5, 19fc6 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   19f9a:	4630      	mov	r0, r6
   19f9c:	f7f9 fdea 	bl	13b74 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   19fa0:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   19fa4:	2b00      	cmp	r3, #0
   19fa6:	d1da      	bne.n	19f5e <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19fa8:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   19fac:	2a00      	cmp	r2, #0
   19fae:	d0d6      	beq.n	19f5e <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19fb0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   19fb4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   19fb8:	2301      	movs	r3, #1
   19fba:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   19fbe:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19fc2:	60a3      	str	r3, [r4, #8]
}
   19fc4:	e7cb      	b.n	19f5e <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   19fc6:	2100      	movs	r1, #0
   19fc8:	2021      	movs	r0, #33	; 0x21
   19fca:	f004 fa5f 	bl	1e48c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19fce:	e7e7      	b.n	19fa0 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   19fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19fd4:	2202      	movs	r2, #2
   19fd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   19fda:	e7d1      	b.n	19f80 <z_nrf_clock_control_lf_on+0x8c>
   19fdc:	20003850 	.word	0x20003850
   19fe0:	20003840 	.word	0x20003840
   19fe4:	20003870 	.word	0x20003870
   19fe8:	20004b26 	.word	0x20004b26
   19fec:	e000e100 	.word	0xe000e100

00019ff0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   19ff0:	b508      	push	{r3, lr}
   19ff2:	4807      	ldr	r0, [pc, #28]	; (1a010 <uart_console_init+0x20>)
   19ff4:	f00b f810 	bl	25018 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   19ff8:	b138      	cbz	r0, 1a00a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   19ffa:	4806      	ldr	r0, [pc, #24]	; (1a014 <uart_console_init+0x24>)
   19ffc:	f7fa fbd2 	bl	147a4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1a000:	4804      	ldr	r0, [pc, #16]	; (1a014 <uart_console_init+0x24>)
   1a002:	f7f7 fd9d 	bl	11b40 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1a006:	2000      	movs	r0, #0
}
   1a008:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1a00a:	f06f 0012 	mvn.w	r0, #18
   1a00e:	e7fb      	b.n	1a008 <uart_console_init+0x18>
   1a010:	00025cfc 	.word	0x00025cfc
   1a014:	0001a019 	.word	0x0001a019

0001a018 <console_out>:
	if ('\n' == c) {
   1a018:	280a      	cmp	r0, #10
{
   1a01a:	b538      	push	{r3, r4, r5, lr}
   1a01c:	4d07      	ldr	r5, [pc, #28]	; (1a03c <console_out+0x24>)
   1a01e:	4604      	mov	r4, r0
	if ('\n' == c) {
   1a020:	d104      	bne.n	1a02c <console_out+0x14>
   1a022:	68ab      	ldr	r3, [r5, #8]
   1a024:	210d      	movs	r1, #13
   1a026:	69db      	ldr	r3, [r3, #28]
   1a028:	4628      	mov	r0, r5
   1a02a:	4798      	blx	r3
   1a02c:	68ab      	ldr	r3, [r5, #8]
   1a02e:	4803      	ldr	r0, [pc, #12]	; (1a03c <console_out+0x24>)
   1a030:	69db      	ldr	r3, [r3, #28]
   1a032:	b2e1      	uxtb	r1, r4
   1a034:	4798      	blx	r3
}
   1a036:	4620      	mov	r0, r4
   1a038:	bd38      	pop	{r3, r4, r5, pc}
   1a03a:	bf00      	nop
   1a03c:	00025cfc 	.word	0x00025cfc

0001a040 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1a040:	b530      	push	{r4, r5, lr}
	return port->config;
   1a042:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a044:	7b05      	ldrb	r5, [r0, #12]
   1a046:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1a04a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1a04e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a050:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1a054:	d105      	bne.n	1a062 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1a056:	4620      	mov	r0, r4
   1a058:	f002 ff3e 	bl	1ced8 <nrfx_gpiote_trigger_disable>

		return 0;
   1a05c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1a05e:	b005      	add	sp, #20
   1a060:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a062:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a064:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a068:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1a06c:	d114      	bne.n	1a098 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1a06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a072:	bf0c      	ite	eq
   1a074:	2304      	moveq	r3, #4
   1a076:	2305      	movne	r3, #5
   1a078:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a07c:	2300      	movs	r3, #0
   1a07e:	4619      	mov	r1, r3
   1a080:	aa02      	add	r2, sp, #8
   1a082:	4620      	mov	r0, r4
   1a084:	f002 fd66 	bl	1cb54 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a088:	4b1f      	ldr	r3, [pc, #124]	; (1a108 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1a08a:	4298      	cmp	r0, r3
   1a08c:	d139      	bne.n	1a102 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1a08e:	2101      	movs	r1, #1
   1a090:	4620      	mov	r0, r4
   1a092:	f002 fed9 	bl	1ce48 <nrfx_gpiote_trigger_enable>
	return 0;
   1a096:	e7e1      	b.n	1a05c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a098:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1a09c:	d026      	beq.n	1a0ec <gpio_nrfx_pin_interrupt_configure+0xac>
   1a09e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1a0a2:	bf14      	ite	ne
   1a0a4:	2301      	movne	r3, #1
   1a0a6:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a0a8:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1a0ac:	6883      	ldr	r3, [r0, #8]
   1a0ae:	40cb      	lsrs	r3, r1
   1a0b0:	07d9      	lsls	r1, r3, #31
   1a0b2:	d4e3      	bmi.n	1a07c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1a0b4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1a0b8:	d1e0      	bne.n	1a07c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1a0ba:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   1a0bc:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1a0be:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1a0c2:	4a12      	ldr	r2, [pc, #72]	; (1a10c <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a0c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1a0c8:	bf18      	it	ne
   1a0ca:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1a0d2:	07db      	lsls	r3, r3, #31
   1a0d4:	d4d2      	bmi.n	1a07c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a0d6:	f10d 0507 	add.w	r5, sp, #7
   1a0da:	4629      	mov	r1, r5
   1a0dc:	4620      	mov	r0, r4
   1a0de:	f002 fe5f 	bl	1cda0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1a0e2:	4b0b      	ldr	r3, [pc, #44]	; (1a110 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1a0e4:	4298      	cmp	r0, r3
   1a0e6:	d003      	beq.n	1a0f0 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1a0e8:	9503      	str	r5, [sp, #12]
   1a0ea:	e7c7      	b.n	1a07c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1a0ec:	2303      	movs	r3, #3
   1a0ee:	e7db      	b.n	1a0a8 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1a0f0:	4628      	mov	r0, r5
   1a0f2:	f002 fea3 	bl	1ce3c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1a0f6:	4b04      	ldr	r3, [pc, #16]	; (1a108 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1a0f8:	4298      	cmp	r0, r3
   1a0fa:	d0f5      	beq.n	1a0e8 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   1a0fc:	f06f 000b 	mvn.w	r0, #11
   1a100:	e7ad      	b.n	1a05e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1a102:	f06f 0015 	mvn.w	r0, #21
   1a106:	e7aa      	b.n	1a05e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1a108:	0bad0000 	.word	0x0bad0000
   1a10c:	50000300 	.word	0x50000300
   1a110:	0bad0004 	.word	0x0bad0004

0001a114 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1a114:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1a116:	f002 fe81 	bl	1ce1c <nrfx_gpiote_is_init>
   1a11a:	4604      	mov	r4, r0
   1a11c:	b968      	cbnz	r0, 1a13a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1a11e:	f002 fe55 	bl	1cdcc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1a122:	4b08      	ldr	r3, [pc, #32]	; (1a144 <gpio_nrfx_init+0x30>)
   1a124:	4298      	cmp	r0, r3
   1a126:	d10a      	bne.n	1a13e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1a128:	4807      	ldr	r0, [pc, #28]	; (1a148 <gpio_nrfx_init+0x34>)
   1a12a:	4621      	mov	r1, r4
   1a12c:	f002 fe32 	bl	1cd94 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a130:	4622      	mov	r2, r4
   1a132:	2105      	movs	r1, #5
   1a134:	2006      	movs	r0, #6
   1a136:	f7f9 fdbf 	bl	13cb8 <z_arm_irq_priority_set>
		return 0;
   1a13a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1a13c:	bd10      	pop	{r4, pc}
		return -EIO;
   1a13e:	f06f 0004 	mvn.w	r0, #4
   1a142:	e7fb      	b.n	1a13c <gpio_nrfx_init+0x28>
   1a144:	0bad0000 	.word	0x0bad0000
   1a148:	0001a14d 	.word	0x0001a14d

0001a14c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a14c:	0942      	lsrs	r2, r0, #5
{
   1a14e:	b570      	push	{r4, r5, r6, lr}
   1a150:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a152:	d002      	beq.n	1a15a <nrfx_gpio_handler+0xe>
   1a154:	2a01      	cmp	r2, #1
   1a156:	d017      	beq.n	1a188 <nrfx_gpio_handler+0x3c>
}
   1a158:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a15a:	4e0d      	ldr	r6, [pc, #52]	; (1a190 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1a15c:	6932      	ldr	r2, [r6, #16]
   1a15e:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a160:	2900      	cmp	r1, #0
   1a162:	d0f9      	beq.n	1a158 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1a164:	f003 031f 	and.w	r3, r3, #31
   1a168:	2501      	movs	r5, #1
   1a16a:	680c      	ldr	r4, [r1, #0]
   1a16c:	409d      	lsls	r5, r3
   1a16e:	2900      	cmp	r1, #0
   1a170:	d0f2      	beq.n	1a158 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1a172:	688a      	ldr	r2, [r1, #8]
   1a174:	402a      	ands	r2, r5
   1a176:	d002      	beq.n	1a17e <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a178:	684b      	ldr	r3, [r1, #4]
   1a17a:	4630      	mov	r0, r6
   1a17c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a17e:	b12c      	cbz	r4, 1a18c <nrfx_gpio_handler+0x40>
   1a180:	6823      	ldr	r3, [r4, #0]
   1a182:	4621      	mov	r1, r4
   1a184:	461c      	mov	r4, r3
   1a186:	e7f2      	b.n	1a16e <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1a188:	4e02      	ldr	r6, [pc, #8]	; (1a194 <nrfx_gpio_handler+0x48>)
   1a18a:	e7e7      	b.n	1a15c <nrfx_gpio_handler+0x10>
   1a18c:	4623      	mov	r3, r4
   1a18e:	e7f8      	b.n	1a182 <nrfx_gpio_handler+0x36>
   1a190:	00025c84 	.word	0x00025c84
   1a194:	00025c6c 	.word	0x00025c6c

0001a198 <gpio_nrfx_pin_configure>:
{
   1a198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1a19c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a19e:	7b3b      	ldrb	r3, [r7, #12]
   1a1a0:	f001 051f 	and.w	r5, r1, #31
   1a1a4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1a1a8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a1aa:	4628      	mov	r0, r5
   1a1ac:	f10d 0103 	add.w	r1, sp, #3
{
   1a1b0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a1b2:	f002 fdf5 	bl	1cda0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a1b6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1a1ba:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1a1bc:	d10b      	bne.n	1a1d6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1a1be:	4628      	mov	r0, r5
   1a1c0:	f002 feb2 	bl	1cf28 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1a1c4:	4b3d      	ldr	r3, [pc, #244]	; (1a2bc <gpio_nrfx_pin_configure+0x124>)
   1a1c6:	4598      	cmp	r8, r3
   1a1c8:	d103      	bne.n	1a1d2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1a1ca:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a1ce:	f002 fe2f 	bl	1ce30 <nrfx_gpiote_channel_free>
		return 0;
   1a1d2:	2000      	movs	r0, #0
   1a1d4:	e00c      	b.n	1a1f0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a1d6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a1d8:	4619      	mov	r1, r3
   1a1da:	aa02      	add	r2, sp, #8
   1a1dc:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1a1de:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1a1e2:	f002 fcb7 	bl	1cb54 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1a1e6:	4b35      	ldr	r3, [pc, #212]	; (1a2bc <gpio_nrfx_pin_configure+0x124>)
   1a1e8:	4298      	cmp	r0, r3
   1a1ea:	d004      	beq.n	1a1f6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1a1ec:	f06f 0015 	mvn.w	r0, #21
}
   1a1f0:	b004      	add	sp, #16
   1a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1a1f6:	4580      	cmp	r8, r0
   1a1f8:	d103      	bne.n	1a202 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1a1fa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1a1fe:	f002 fe17 	bl	1ce30 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1a202:	03a3      	lsls	r3, r4, #14
   1a204:	d54b      	bpl.n	1a29e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a206:	f240 3306 	movw	r3, #774	; 0x306
   1a20a:	4023      	ands	r3, r4
   1a20c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1a210:	d019      	beq.n	1a246 <gpio_nrfx_pin_configure+0xae>
   1a212:	d80c      	bhi.n	1a22e <gpio_nrfx_pin_configure+0x96>
   1a214:	2b06      	cmp	r3, #6
   1a216:	d017      	beq.n	1a248 <gpio_nrfx_pin_configure+0xb0>
   1a218:	d804      	bhi.n	1a224 <gpio_nrfx_pin_configure+0x8c>
   1a21a:	b1ab      	cbz	r3, 1a248 <gpio_nrfx_pin_configure+0xb0>
   1a21c:	2b02      	cmp	r3, #2
   1a21e:	d1e5      	bne.n	1a1ec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1a220:	2304      	movs	r3, #4
   1a222:	e011      	b.n	1a248 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a228:	d1e0      	bne.n	1a1ec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1a22a:	2301      	movs	r3, #1
   1a22c:	e00c      	b.n	1a248 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a22e:	f240 2202 	movw	r2, #514	; 0x202
   1a232:	4293      	cmp	r3, r2
   1a234:	d027      	beq.n	1a286 <gpio_nrfx_pin_configure+0xee>
   1a236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1a23a:	d026      	beq.n	1a28a <gpio_nrfx_pin_configure+0xf2>
   1a23c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1a240:	d1d4      	bne.n	1a1ec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1a242:	2302      	movs	r3, #2
   1a244:	e000      	b.n	1a248 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1a246:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1a248:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1a24c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1a250:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1a254:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1a256:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1a25a:	bf54      	ite	pl
   1a25c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1a260:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a262:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1a264:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1a268:	d511      	bpl.n	1a28e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1a26a:	687a      	ldr	r2, [r7, #4]
   1a26c:	2301      	movs	r3, #1
   1a26e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1a270:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1a274:	2200      	movs	r2, #0
   1a276:	a901      	add	r1, sp, #4
   1a278:	4628      	mov	r0, r5
   1a27a:	f002 fd19 	bl	1ccb0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1a27e:	4b0f      	ldr	r3, [pc, #60]	; (1a2bc <gpio_nrfx_pin_configure+0x124>)
   1a280:	4298      	cmp	r0, r3
   1a282:	d0a6      	beq.n	1a1d2 <gpio_nrfx_pin_configure+0x3a>
   1a284:	e7b2      	b.n	1a1ec <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1a286:	2305      	movs	r3, #5
   1a288:	e7de      	b.n	1a248 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1a28a:	2303      	movs	r3, #3
   1a28c:	e7dc      	b.n	1a248 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1a28e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1a290:	bf41      	itttt	mi
   1a292:	2301      	movmi	r3, #1
   1a294:	687a      	ldrmi	r2, [r7, #4]
   1a296:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1a298:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1a29c:	e7ea      	b.n	1a274 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1a29e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a2a0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1a2a4:	bf54      	ite	pl
   1a2a6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1a2aa:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a2ac:	461a      	mov	r2, r3
   1a2ae:	a901      	add	r1, sp, #4
   1a2b0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1a2b2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1a2b6:	f002 fc4d 	bl	1cb54 <nrfx_gpiote_input_configure>
   1a2ba:	e7e0      	b.n	1a27e <gpio_nrfx_pin_configure+0xe6>
   1a2bc:	0bad0000 	.word	0x0bad0000

0001a2c0 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1a2c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a2c2:	461d      	mov	r5, r3
	return config->uarte_regs;
   1a2c4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1a2c6:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1a2c8:	f8d3 c000 	ldr.w	ip, [r3]
{
   1a2cc:	4606      	mov	r6, r0
   1a2ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a2d2:	f3ef 8711 	mrs	r7, BASEPRI
   1a2d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a2da:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1a2de:	68e3      	ldr	r3, [r4, #12]
   1a2e0:	68d8      	ldr	r0, [r3, #12]
   1a2e2:	b138      	cbz	r0, 1a2f4 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1a2e4:	f387 8811 	msr	BASEPRI, r7
   1a2e8:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1a2ec:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1a2f0:	b003      	add	sp, #12
   1a2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1a2f4:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1a2f6:	68e3      	ldr	r3, [r4, #12]
   1a2f8:	6099      	str	r1, [r3, #8]
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a2fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a2fe:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1a302:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1a306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1a30a:	68e3      	ldr	r3, [r4, #12]
   1a30c:	d111      	bne.n	1a332 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1a30e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1a310:	68e3      	ldr	r3, [r4, #12]
   1a312:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1a314:	4621      	mov	r1, r4
   1a316:	4630      	mov	r0, r6
   1a318:	f00a fbaa 	bl	24a70 <start_tx_locked>
   1a31c:	f387 8811 	msr	BASEPRI, r7
   1a320:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1a324:	7ae3      	ldrb	r3, [r4, #11]
   1a326:	2b01      	cmp	r3, #1
   1a328:	d101      	bne.n	1a32e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1a32a:	1c6b      	adds	r3, r5, #1
   1a32c:	d106      	bne.n	1a33c <uarte_nrfx_tx+0x7c>
	return 0;
   1a32e:	2000      	movs	r0, #0
   1a330:	e7de      	b.n	1a2f0 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1a332:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1a334:	4620      	mov	r0, r4
   1a336:	f00a fb15 	bl	24964 <setup_tx_cache>
   1a33a:	e7eb      	b.n	1a314 <uarte_nrfx_tx+0x54>
			return ((t * to_hz + off) / from_hz);
   1a33c:	480b      	ldr	r0, [pc, #44]	; (1a36c <uarte_nrfx_tx+0xac>)
   1a33e:	4a0c      	ldr	r2, [pc, #48]	; (1a370 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1a340:	68e4      	ldr	r4, [r4, #12]
   1a342:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1a346:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a34a:	2100      	movs	r1, #0
   1a34c:	2300      	movs	r3, #0
   1a34e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1a352:	f7e6 faf3 	bl	93c <__aeabi_uldivmod>
   1a356:	3420      	adds	r4, #32
   1a358:	4602      	mov	r2, r0
   1a35a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1a35c:	2000      	movs	r0, #0
   1a35e:	2100      	movs	r1, #0
   1a360:	e9cd 0100 	strd	r0, r1, [sp]
   1a364:	4620      	mov	r0, r4
   1a366:	f004 fae7 	bl	1e938 <z_impl_k_timer_start>
   1a36a:	e7e0      	b.n	1a32e <uarte_nrfx_tx+0x6e>
   1a36c:	000f423f 	.word	0x000f423f
   1a370:	000f4240 	.word	0x000f4240

0001a374 <uarte_nrfx_configure>:
{
   1a374:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1a376:	794b      	ldrb	r3, [r1, #5]
   1a378:	2b01      	cmp	r3, #1
   1a37a:	d026      	beq.n	1a3ca <uarte_nrfx_configure+0x56>
   1a37c:	2b03      	cmp	r3, #3
   1a37e:	d121      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1a380:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a382:	798b      	ldrb	r3, [r1, #6]
   1a384:	2b03      	cmp	r3, #3
   1a386:	d11d      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   1a388:	79ce      	ldrb	r6, [r1, #7]
   1a38a:	b10e      	cbz	r6, 1a390 <uarte_nrfx_configure+0x1c>
   1a38c:	2e01      	cmp	r6, #1
   1a38e:	d119      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   1a390:	790a      	ldrb	r2, [r1, #4]
   1a392:	b112      	cbz	r2, 1a39a <uarte_nrfx_configure+0x26>
   1a394:	2a02      	cmp	r2, #2
   1a396:	d115      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1a398:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a39a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1a39c:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1a39e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1a3a2:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1a3a4:	d067      	beq.n	1a476 <uarte_nrfx_configure+0x102>
   1a3a6:	d82d      	bhi.n	1a404 <uarte_nrfx_configure+0x90>
   1a3a8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a3ac:	d066      	beq.n	1a47c <uarte_nrfx_configure+0x108>
   1a3ae:	d816      	bhi.n	1a3de <uarte_nrfx_configure+0x6a>
   1a3b0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a3b4:	d064      	beq.n	1a480 <uarte_nrfx_configure+0x10c>
   1a3b6:	d80a      	bhi.n	1a3ce <uarte_nrfx_configure+0x5a>
   1a3b8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a3bc:	d063      	beq.n	1a486 <uarte_nrfx_configure+0x112>
   1a3be:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a3c2:	d063      	beq.n	1a48c <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1a3c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a3c8:	e054      	b.n	1a474 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1a3ca:	2500      	movs	r5, #0
   1a3cc:	e7d9      	b.n	1a382 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1a3ce:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a3d2:	d05e      	beq.n	1a492 <uarte_nrfx_configure+0x11e>
   1a3d4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a3d8:	d1f4      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1a3da:	4b38      	ldr	r3, [pc, #224]	; (1a4bc <uarte_nrfx_configure+0x148>)
   1a3dc:	e03c      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a3de:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a3e2:	d059      	beq.n	1a498 <uarte_nrfx_configure+0x124>
   1a3e4:	d807      	bhi.n	1a3f6 <uarte_nrfx_configure+0x82>
   1a3e6:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a3ea:	d057      	beq.n	1a49c <uarte_nrfx_configure+0x128>
   1a3ec:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a3f0:	d1e8      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1a3f2:	4b33      	ldr	r3, [pc, #204]	; (1a4c0 <uarte_nrfx_configure+0x14c>)
   1a3f4:	e030      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a3f6:	f647 2412 	movw	r4, #31250	; 0x7a12
   1a3fa:	42a3      	cmp	r3, r4
   1a3fc:	d1e2      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1a3fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a402:	e029      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a404:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a408:	d04a      	beq.n	1a4a0 <uarte_nrfx_configure+0x12c>
   1a40a:	d813      	bhi.n	1a434 <uarte_nrfx_configure+0xc0>
   1a40c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a410:	d049      	beq.n	1a4a6 <uarte_nrfx_configure+0x132>
   1a412:	d809      	bhi.n	1a428 <uarte_nrfx_configure+0xb4>
   1a414:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1a418:	42a3      	cmp	r3, r4
   1a41a:	d046      	beq.n	1a4aa <uarte_nrfx_configure+0x136>
   1a41c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a420:	d1d0      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1a422:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1a426:	e017      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a428:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a42c:	d1ca      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1a42e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1a432:	e011      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a434:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a438:	d03a      	beq.n	1a4b0 <uarte_nrfx_configure+0x13c>
   1a43a:	d808      	bhi.n	1a44e <uarte_nrfx_configure+0xda>
   1a43c:	4c21      	ldr	r4, [pc, #132]	; (1a4c4 <uarte_nrfx_configure+0x150>)
   1a43e:	42a3      	cmp	r3, r4
   1a440:	d039      	beq.n	1a4b6 <uarte_nrfx_configure+0x142>
   1a442:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a446:	d1bd      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1a448:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1a44c:	e004      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a44e:	4c1e      	ldr	r4, [pc, #120]	; (1a4c8 <uarte_nrfx_configure+0x154>)
   1a450:	42a3      	cmp	r3, r4
   1a452:	d1b7      	bne.n	1a3c4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1a454:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1a458:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a45a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1a45e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1a460:	4335      	orrs	r5, r6
   1a462:	681b      	ldr	r3, [r3, #0]
   1a464:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a466:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1a46a:	c903      	ldmia	r1, {r0, r1}
   1a46c:	1d23      	adds	r3, r4, #4
   1a46e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1a472:	2000      	movs	r0, #0
}
   1a474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1a476:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1a47a:	e7ed      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1a47c:	4b13      	ldr	r3, [pc, #76]	; (1a4cc <uarte_nrfx_configure+0x158>)
   1a47e:	e7eb      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1a480:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a484:	e7e8      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1a486:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a48a:	e7e5      	b.n	1a458 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1a48c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a490:	e7e2      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1a492:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a496:	e7df      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1a498:	4b0d      	ldr	r3, [pc, #52]	; (1a4d0 <uarte_nrfx_configure+0x15c>)
   1a49a:	e7dd      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1a49c:	4b0d      	ldr	r3, [pc, #52]	; (1a4d4 <uarte_nrfx_configure+0x160>)
   1a49e:	e7db      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1a4a0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1a4a4:	e7d8      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1a4a6:	4b0c      	ldr	r3, [pc, #48]	; (1a4d8 <uarte_nrfx_configure+0x164>)
   1a4a8:	e7d6      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1a4aa:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a4ae:	e7d3      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1a4b0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1a4b4:	e7d0      	b.n	1a458 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1a4b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a4ba:	e7cd      	b.n	1a458 <uarte_nrfx_configure+0xe4>
   1a4bc:	0013b000 	.word	0x0013b000
   1a4c0:	004ea000 	.word	0x004ea000
   1a4c4:	0003d090 	.word	0x0003d090
   1a4c8:	000f4240 	.word	0x000f4240
   1a4cc:	00275000 	.word	0x00275000
   1a4d0:	0075c000 	.word	0x0075c000
   1a4d4:	003af000 	.word	0x003af000
   1a4d8:	013a9000 	.word	0x013a9000

0001a4dc <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1a4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1a4e0:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1a4e4:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   1a4e6:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1a4ea:	2100      	movs	r1, #0
   1a4ec:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1a4f0:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1a4f2:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
   1a4f6:	b087      	sub	sp, #28
   1a4f8:	4607      	mov	r7, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1a4fa:	466a      	mov	r2, sp
   1a4fc:	4648      	mov	r0, r9
   1a4fe:	f00a fc36 	bl	24d6e <pinctrl_lookup_state>
	if (ret < 0) {
   1a502:	1e05      	subs	r5, r0, #0
   1a504:	db26      	blt.n	1a554 <uarte_instance_init.constprop.0+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1a506:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1a508:	f8d9 2000 	ldr.w	r2, [r9]
   1a50c:	7919      	ldrb	r1, [r3, #4]
   1a50e:	6818      	ldr	r0, [r3, #0]
   1a510:	f000 fe26 	bl	1b160 <pinctrl_configure_pins>
	if (err < 0) {
   1a514:	1e05      	subs	r5, r0, #0
   1a516:	db1d      	blt.n	1a554 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1a518:	1d31      	adds	r1, r6, #4
   1a51a:	4638      	mov	r0, r7
   1a51c:	f7ff ff2a 	bl	1a374 <uarte_nrfx_configure>
	if (err) {
   1a520:	4605      	mov	r5, r0
   1a522:	b9b8      	cbnz	r0, 1a554 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1a524:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1a528:	0799      	lsls	r1, r3, #30
   1a52a:	d52b      	bpl.n	1a584 <uarte_instance_init.constprop.0+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1a52c:	f106 001c 	add.w	r0, r6, #28
   1a530:	f002 fdfc 	bl	1d12c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1a534:	4b4b      	ldr	r3, [pc, #300]	; (1a664 <uarte_instance_init.constprop.0+0x188>)
   1a536:	4298      	cmp	r0, r3
   1a538:	d010      	beq.n	1a55c <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
   1a53a:	4b4b      	ldr	r3, [pc, #300]	; (1a668 <uarte_instance_init.constprop.0+0x18c>)
   1a53c:	9305      	str	r3, [sp, #20]
   1a53e:	2302      	movs	r3, #2
   1a540:	9304      	str	r3, [sp, #16]
   1a542:	484a      	ldr	r0, [pc, #296]	; (1a66c <uarte_instance_init.constprop.0+0x190>)
   1a544:	462b      	mov	r3, r5
   1a546:	aa04      	add	r2, sp, #16
   1a548:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1a54c:	f06f 0504 	mvn.w	r5, #4
   1a550:	f7f8 fd34 	bl	12fbc <z_impl_z_log_msg_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1a554:	4628      	mov	r0, r5
   1a556:	b007      	add	sp, #28
   1a558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1a55c:	7f33      	ldrb	r3, [r6, #28]
   1a55e:	00db      	lsls	r3, r3, #3
   1a560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a564:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1a568:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1a56c:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1a570:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1a574:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1a578:	7f32      	ldrb	r2, [r6, #28]
   1a57a:	2301      	movs	r3, #1
   1a57c:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1a57e:	4a3c      	ldr	r2, [pc, #240]	; (1a670 <uarte_instance_init.constprop.0+0x194>)
   1a580:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1a584:	68f3      	ldr	r3, [r6, #12]
   1a586:	2b00      	cmp	r3, #0
   1a588:	d059      	beq.n	1a63e <uarte_instance_init.constprop.0+0x162>
	return config->uarte_regs;
   1a58a:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1a58c:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
   1a590:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1a592:	2204      	movs	r2, #4
   1a594:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1a598:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1a59c:	2201      	movs	r2, #1
   1a59e:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1a5a2:	4934      	ldr	r1, [pc, #208]	; (1a674 <uarte_instance_init.constprop.0+0x198>)
   1a5a4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a5a8:	2108      	movs	r1, #8
   1a5aa:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5ae:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1a5b2:	b1a1      	cbz	r1, 1a5de <uarte_instance_init.constprop.0+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a5b4:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a5b6:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1a5ba:	b91a      	cbnz	r2, 1a5c4 <uarte_instance_init.constprop.0+0xe8>
   1a5bc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1a5c0:	2a00      	cmp	r2, #0
   1a5c2:	d0f8      	beq.n	1a5b6 <uarte_instance_init.constprop.0+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a5c4:	2200      	movs	r2, #0
   1a5c6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1a5ca:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1a5ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1a5d2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1a5d6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1a5da:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1a5de:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1a5e2:	4925      	ldr	r1, [pc, #148]	; (1a678 <uarte_instance_init.constprop.0+0x19c>)
   1a5e4:	2200      	movs	r2, #0
   1a5e6:	3080      	adds	r0, #128	; 0x80
   1a5e8:	f00b f936 	bl	25858 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1a5ec:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
   1a5f0:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1a5f4:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1a5f8:	4920      	ldr	r1, [pc, #128]	; (1a67c <uarte_instance_init.constprop.0+0x1a0>)
   1a5fa:	2200      	movs	r2, #0
   1a5fc:	3020      	adds	r0, #32
   1a5fe:	f00b f92b 	bl	25858 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1a602:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1a606:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1a60a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a60e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1a610:	bf5c      	itt	pl
   1a612:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1a616:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a61a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a61e:	06db      	lsls	r3, r3, #27
   1a620:	bf44      	itt	mi
   1a622:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1a626:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1a62a:	6973      	ldr	r3, [r6, #20]
   1a62c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1a630:	2300      	movs	r3, #0
   1a632:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a636:	2301      	movs	r3, #1
   1a638:	60a3      	str	r3, [r4, #8]
   1a63a:	60e3      	str	r3, [r4, #12]
	return 0;
   1a63c:	e78a      	b.n	1a554 <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1a63e:	2308      	movs	r3, #8
   1a640:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1a644:	f898 3008 	ldrb.w	r3, [r8, #8]
   1a648:	2b00      	cmp	r3, #0
   1a64a:	d1de      	bne.n	1a60a <uarte_instance_init.constprop.0+0x12e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a64c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1a650:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1a654:	69b3      	ldr	r3, [r6, #24]
   1a656:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1a65a:	2301      	movs	r3, #1
   1a65c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a660:	6023      	str	r3, [r4, #0]
}
   1a662:	e7d2      	b.n	1a60a <uarte_instance_init.constprop.0+0x12e>
   1a664:	0bad0000 	.word	0x0bad0000
   1a668:	000282bd 	.word	0x000282bd
   1a66c:	00026008 	.word	0x00026008
   1a670:	4001f000 	.word	0x4001f000
   1a674:	000a0210 	.word	0x000a0210
   1a678:	00024bf9 	.word	0x00024bf9
   1a67c:	00024cc9 	.word	0x00024cc9

0001a680 <uarte_nrfx_poll_out>:
{
   1a680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a684:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1a686:	6905      	ldr	r5, [r0, #16]
{
   1a688:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1a68a:	f00a fd93 	bl	251b4 <k_is_in_isr>
   1a68e:	b9b0      	cbnz	r0, 1a6be <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1a690:	4b2a      	ldr	r3, [pc, #168]	; (1a73c <uarte_nrfx_poll_out+0xbc>)
   1a692:	781b      	ldrb	r3, [r3, #0]
   1a694:	b19b      	cbz	r3, 1a6be <uarte_nrfx_poll_out+0x3e>
{
   1a696:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1a698:	6860      	ldr	r0, [r4, #4]
   1a69a:	f00a f9d9 	bl	24a50 <is_tx_ready.isra.0>
   1a69e:	2800      	cmp	r0, #0
   1a6a0:	d138      	bne.n	1a714 <uarte_nrfx_poll_out+0x94>
   1a6a2:	2001      	movs	r0, #1
   1a6a4:	f00a fc56 	bl	24f54 <nrfx_busy_wait>
   1a6a8:	3f01      	subs	r7, #1
   1a6aa:	d1f5      	bne.n	1a698 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1a6ac:	2100      	movs	r1, #0
   1a6ae:	2021      	movs	r0, #33	; 0x21
   1a6b0:	f003 feec 	bl	1e48c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1a6b4:	e7ef      	b.n	1a696 <uarte_nrfx_poll_out+0x16>
   1a6b6:	f381 8811 	msr	BASEPRI, r1
   1a6ba:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a6be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a6c2:	f3ef 8111 	mrs	r1, BASEPRI
   1a6c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6ca:	f3bf 8f6f 	isb	sy
   1a6ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   1a6d2:	4640      	mov	r0, r8
   1a6d4:	460f      	mov	r7, r1
   1a6d6:	f00a f9bb 	bl	24a50 <is_tx_ready.isra.0>
   1a6da:	2800      	cmp	r0, #0
   1a6dc:	d0eb      	beq.n	1a6b6 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1a6de:	68eb      	ldr	r3, [r5, #12]
   1a6e0:	b15b      	cbz	r3, 1a6fa <uarte_nrfx_poll_out+0x7a>
   1a6e2:	68da      	ldr	r2, [r3, #12]
   1a6e4:	b14a      	cbz	r2, 1a6fa <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1a6e6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1a6ea:	2a00      	cmp	r2, #0
   1a6ec:	da05      	bge.n	1a6fa <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1a6ee:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1a6f2:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1a6f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1a6fa:	696b      	ldr	r3, [r5, #20]
   1a6fc:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1a6fe:	6969      	ldr	r1, [r5, #20]
   1a700:	2201      	movs	r2, #1
   1a702:	4620      	mov	r0, r4
   1a704:	f00a f84e 	bl	247a4 <tx_start>
	__asm__ volatile(
   1a708:	f387 8811 	msr	BASEPRI, r7
   1a70c:	f3bf 8f6f 	isb	sy
}
   1a710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1a714:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a718:	f3ef 8111 	mrs	r1, BASEPRI
   1a71c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a720:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1a724:	6860      	ldr	r0, [r4, #4]
   1a726:	460f      	mov	r7, r1
   1a728:	f00a f992 	bl	24a50 <is_tx_ready.isra.0>
   1a72c:	2800      	cmp	r0, #0
   1a72e:	d1e4      	bne.n	1a6fa <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1a730:	f381 8811 	msr	BASEPRI, r1
   1a734:	f3bf 8f6f 	isb	sy
}
   1a738:	e7b8      	b.n	1a6ac <uarte_nrfx_poll_out+0x2c>
   1a73a:	bf00      	nop
   1a73c:	20004b26 	.word	0x20004b26

0001a740 <uarte_nrfx_isr_async>:
{
   1a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1a744:	6843      	ldr	r3, [r0, #4]
   1a746:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1a748:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a74a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1a74e:	b088      	sub	sp, #32
   1a750:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1a752:	b169      	cbz	r1, 1a770 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a754:	2200      	movs	r2, #0
   1a756:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1a75a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1a75e:	68da      	ldr	r2, [r3, #12]
   1a760:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1a764:	3301      	adds	r3, #1
   1a766:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1a76a:	b008      	add	sp, #32
   1a76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a770:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1a774:	b323      	cbz	r3, 1a7c0 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a776:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1a77a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1a77e:	6843      	ldr	r3, [r0, #4]
   1a780:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a782:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a786:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   1a78a:	2214      	movs	r2, #20
   1a78c:	a803      	add	r0, sp, #12
   1a78e:	f008 fb1c 	bl	22dca <memset>
   1a792:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a794:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1a796:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a79a:	f100 8103 	bmi.w	1a9a4 <uarte_nrfx_isr_async+0x264>
   1a79e:	07b3      	lsls	r3, r6, #30
   1a7a0:	f100 8102 	bmi.w	1a9a8 <uarte_nrfx_isr_async+0x268>
   1a7a4:	0777      	lsls	r7, r6, #29
   1a7a6:	f100 8101 	bmi.w	1a9ac <uarte_nrfx_isr_async+0x26c>
   1a7aa:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1a7ae:	4620      	mov	r0, r4
   1a7b0:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1a7b2:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1a7b6:	f00a f81d 	bl	247f4 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1a7ba:	4620      	mov	r0, r4
   1a7bc:	f00a f8b0 	bl	24920 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a7c0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1a7c4:	b38b      	cbz	r3, 1a82a <uarte_nrfx_isr_async+0xea>
    return p_reg->INTENSET & mask;
   1a7c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1a7ca:	06d8      	lsls	r0, r3, #27
   1a7cc:	d52d      	bpl.n	1a82a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a7ce:	f04f 0800 	mov.w	r8, #0
   1a7d2:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1a7d6:	6926      	ldr	r6, [r4, #16]
   1a7d8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1a7dc:	6863      	ldr	r3, [r4, #4]
   1a7de:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1a7e0:	68f3      	ldr	r3, [r6, #12]
   1a7e2:	2201      	movs	r2, #1
   1a7e4:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   1a7e8:	68f0      	ldr	r0, [r6, #12]
   1a7ea:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1a7ec:	f00b f840 	bl	25870 <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1a7f0:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1a7f2:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1a7f6:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1a7fa:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1a7fe:	68f2      	ldr	r2, [r6, #12]
   1a800:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1a802:	1a1b      	subs	r3, r3, r0
   1a804:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1a806:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1a808:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1a80c:	4408      	add	r0, r1
	if (rx_len > 0) {
   1a80e:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1a810:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1a812:	dd02      	ble.n	1a81a <uarte_nrfx_isr_async+0xda>
		notify_uart_rx_rdy(dev, rx_len);
   1a814:	4620      	mov	r0, r4
   1a816:	f009 fff4 	bl	24802 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1a81a:	68f1      	ldr	r1, [r6, #12]
   1a81c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1a820:	2b00      	cmp	r3, #0
   1a822:	f040 80c5 	bne.w	1a9b0 <uarte_nrfx_isr_async+0x270>
		data->async->is_in_irq = false;
   1a826:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a82a:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1a82e:	b383      	cbz	r3, 1a892 <uarte_nrfx_isr_async+0x152>
   1a830:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1a834:	bb6e      	cbnz	r6, 1a892 <uarte_nrfx_isr_async+0x152>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a836:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1a83a:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   1a83c:	6927      	ldr	r7, [r4, #16]
   1a83e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1a842:	4631      	mov	r1, r6
   1a844:	a803      	add	r0, sp, #12
   1a846:	f008 fac0 	bl	22dca <memset>
   1a84a:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1a84c:	a903      	add	r1, sp, #12
   1a84e:	4620      	mov	r0, r4
	struct uart_event evt = {
   1a850:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1a854:	f009 ffce 	bl	247f4 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1a858:	68fb      	ldr	r3, [r7, #12]
   1a85a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1a85c:	1c51      	adds	r1, r2, #1
   1a85e:	d018      	beq.n	1a892 <uarte_nrfx_isr_async+0x152>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1a860:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1a862:	68ff      	ldr	r7, [r7, #12]
   1a864:	498e      	ldr	r1, [pc, #568]	; (1aaa0 <uarte_nrfx_isr_async+0x360>)
			      K_USEC(data->async->rx_timeout_slab),
   1a866:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1a868:	4a8e      	ldr	r2, [pc, #568]	; (1aaa4 <uarte_nrfx_isr_async+0x364>)
   1a86a:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1a86e:	468e      	mov	lr, r1
   1a870:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1a874:	4631      	mov	r1, r6
   1a876:	fbcc e100 	smlal	lr, r1, ip, r0
   1a87a:	2300      	movs	r3, #0
   1a87c:	4670      	mov	r0, lr
   1a87e:	f7e6 f85d 	bl	93c <__aeabi_uldivmod>
   1a882:	4602      	mov	r2, r0
   1a884:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1a886:	e9cd 0100 	strd	r0, r1, [sp]
   1a88a:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1a88e:	f004 f853 	bl	1e938 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a892:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1a896:	b333      	cbz	r3, 1a8e6 <uarte_nrfx_isr_async+0x1a6>
   1a898:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1a89c:	bb1e      	cbnz	r6, 1a8e6 <uarte_nrfx_isr_async+0x1a6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a89e:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1a8a2:	6927      	ldr	r7, [r4, #16]
   1a8a4:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   1a8a8:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   1a8aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1a8ae:	3158      	adds	r1, #88	; 0x58
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	f009 ffbf 	bl	24834 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1a8b6:	68f9      	ldr	r1, [r7, #12]
   1a8b8:	4620      	mov	r0, r4
   1a8ba:	3164      	adds	r1, #100	; 0x64
   1a8bc:	f009 ffba 	bl	24834 <rx_buf_release>
	if (data->async->rx_enabled) {
   1a8c0:	68fb      	ldr	r3, [r7, #12]
   1a8c2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   1a8c6:	2a00      	cmp	r2, #0
   1a8c8:	f000 80a3 	beq.w	1aa12 <uarte_nrfx_isr_async+0x2d2>
		data->async->rx_enabled = false;
   1a8cc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a8d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a8d4:	06d8      	lsls	r0, r3, #27
   1a8d6:	d503      	bpl.n	1a8e0 <uarte_nrfx_isr_async+0x1a0>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1a8d8:	2102      	movs	r1, #2
   1a8da:	4620      	mov	r0, r4
   1a8dc:	f00a f88e 	bl	249fc <async_uart_release>
	notify_rx_disable(dev);
   1a8e0:	4620      	mov	r0, r4
   1a8e2:	f009 ffbf 	bl	24864 <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a8e6:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1a8ea:	b1db      	cbz	r3, 1a924 <uarte_nrfx_isr_async+0x1e4>
    return p_reg->INTENSET & mask;
   1a8ec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1a8f0:	05d9      	lsls	r1, r3, #23
   1a8f2:	d517      	bpl.n	1a924 <uarte_nrfx_isr_async+0x1e4>
	return config->uarte_regs;
   1a8f4:	6863      	ldr	r3, [r4, #4]
   1a8f6:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1a8f8:	f04f 0140 	mov.w	r1, #64	; 0x40
   1a8fc:	f3ef 8211 	mrs	r2, BASEPRI
   1a900:	f381 8812 	msr	BASEPRI_MAX, r1
   1a904:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a908:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1a90c:	b131      	cbz	r1, 1a91c <uarte_nrfx_isr_async+0x1dc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a90e:	2100      	movs	r1, #0
   1a910:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1a914:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a918:	2101      	movs	r1, #1
   1a91a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1a91c:	f382 8811 	msr	BASEPRI, r2
   1a920:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a924:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1a928:	2b00      	cmp	r3, #0
   1a92a:	f43f af1e 	beq.w	1a76a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1a92e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1a932:	025a      	lsls	r2, r3, #9
   1a934:	f57f af19 	bpl.w	1a76a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1a938:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1a93a:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1a93c:	e9d3 7300 	ldrd	r7, r3, [r3]
   1a940:	06db      	lsls	r3, r3, #27
   1a942:	d46b      	bmi.n	1aa1c <uarte_nrfx_isr_async+0x2dc>
	if (!data->async->tx_buf) {
   1a944:	68eb      	ldr	r3, [r5, #12]
   1a946:	689b      	ldr	r3, [r3, #8]
   1a948:	2b00      	cmp	r3, #0
   1a94a:	f43f af0e 	beq.w	1a76a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1a94e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a952:	f3ef 8211 	mrs	r2, BASEPRI
   1a956:	f383 8812 	msr	BASEPRI_MAX, r3
   1a95a:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1a95e:	68eb      	ldr	r3, [r5, #12]
   1a960:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1a964:	2900      	cmp	r1, #0
   1a966:	bfac      	ite	ge
   1a968:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1a96c:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1a970:	f382 8811 	msr	BASEPRI, r2
   1a974:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1a978:	68eb      	ldr	r3, [r5, #12]
   1a97a:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   1a97e:	2a00      	cmp	r2, #0
   1a980:	d059      	beq.n	1aa36 <uarte_nrfx_isr_async+0x2f6>
	__asm__ volatile(
   1a982:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a986:	f3ef 8611 	mrs	r6, BASEPRI
   1a98a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a98e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1a992:	4629      	mov	r1, r5
   1a994:	4620      	mov	r0, r4
   1a996:	f00a f86b 	bl	24a70 <start_tx_locked>
	__asm__ volatile(
   1a99a:	f386 8811 	msr	BASEPRI, r6
   1a99e:	f3bf 8f6f 	isb	sy
				return;
   1a9a2:	e6e2      	b.n	1a76a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1a9a4:	2601      	movs	r6, #1
   1a9a6:	e702      	b.n	1a7ae <uarte_nrfx_isr_async+0x6e>
   1a9a8:	2602      	movs	r6, #2
   1a9aa:	e700      	b.n	1a7ae <uarte_nrfx_isr_async+0x6e>
   1a9ac:	2604      	movs	r6, #4
   1a9ae:	e6fe      	b.n	1a7ae <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1a9b0:	3158      	adds	r1, #88	; 0x58
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	f009 ff3e 	bl	24834 <rx_buf_release>
	__asm__ volatile(
   1a9b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a9bc:	f3ef 8111 	mrs	r1, BASEPRI
   1a9c0:	f383 8812 	msr	BASEPRI_MAX, r3
   1a9c4:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1a9c8:	68f3      	ldr	r3, [r6, #12]
   1a9ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1a9cc:	b1f2      	cbz	r2, 1aa0c <uarte_nrfx_isr_async+0x2cc>
		data->async->rx_buf = data->async->rx_next_buf;
   1a9ce:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1a9d0:	68f3      	ldr	r3, [r6, #12]
   1a9d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1a9d4:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1a9d6:	68f2      	ldr	r2, [r6, #12]
   1a9d8:	2300      	movs	r3, #0
   1a9da:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1a9dc:	68f2      	ldr	r2, [r6, #12]
   1a9de:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1a9e0:	68f2      	ldr	r2, [r6, #12]
   1a9e2:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1a9e8:	b90b      	cbnz	r3, 1a9ee <uarte_nrfx_isr_async+0x2ae>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9ea:	2301      	movs	r3, #1
   1a9ec:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1a9ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1a9f2:	f023 0320 	bic.w	r3, r3, #32
   1a9f6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1a9fa:	f381 8811 	msr	BASEPRI, r1
   1a9fe:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1aa02:	68f3      	ldr	r3, [r6, #12]
   1aa04:	2200      	movs	r2, #0
   1aa06:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   1aa0a:	e70e      	b.n	1a82a <uarte_nrfx_isr_async+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa0c:	2301      	movs	r3, #1
   1aa0e:	607b      	str	r3, [r7, #4]
}
   1aa10:	e7f3      	b.n	1a9fa <uarte_nrfx_isr_async+0x2ba>
		(void)rx_flush(dev, NULL, 0);
   1aa12:	6860      	ldr	r0, [r4, #4]
   1aa14:	4611      	mov	r1, r2
   1aa16:	f009 ffbd 	bl	24994 <rx_flush.isra.0>
   1aa1a:	e759      	b.n	1a8d0 <uarte_nrfx_isr_async+0x190>
    p_reg->INTENCLR = mask;
   1aa1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1aa20:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1aa24:	2101      	movs	r1, #1
   1aa26:	4620      	mov	r0, r4
   1aa28:	f009 ffe8 	bl	249fc <async_uart_release>
		if (!data->async->tx_size) {
   1aa2c:	68eb      	ldr	r3, [r5, #12]
   1aa2e:	68db      	ldr	r3, [r3, #12]
   1aa30:	2b00      	cmp	r3, #0
   1aa32:	d187      	bne.n	1a944 <uarte_nrfx_isr_async+0x204>
   1aa34:	e699      	b.n	1a76a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1aa36:	6899      	ldr	r1, [r3, #8]
   1aa38:	691a      	ldr	r2, [r3, #16]
   1aa3a:	4291      	cmp	r1, r2
   1aa3c:	d00c      	beq.n	1aa58 <uarte_nrfx_isr_async+0x318>
		if (amount == data->async->xfer_len) {
   1aa3e:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1aa40:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1aa42:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1aa44:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1aa46:	d128      	bne.n	1aa9a <uarte_nrfx_isr_async+0x35a>
			data->async->tx_cache_offset += amount;
   1aa48:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1aa4a:	4628      	mov	r0, r5
   1aa4c:	f009 ff8a 	bl	24964 <setup_tx_cache>
   1aa50:	2800      	cmp	r0, #0
   1aa52:	d196      	bne.n	1a982 <uarte_nrfx_isr_async+0x242>
			amount = data->async->tx_cache_offset;
   1aa54:	68eb      	ldr	r3, [r5, #12]
   1aa56:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1aa58:	68e8      	ldr	r0, [r5, #12]
   1aa5a:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1aa5c:	f00a ff08 	bl	25870 <z_impl_k_timer_stop>
	struct uart_event evt = {
   1aa60:	2214      	movs	r2, #20
   1aa62:	2100      	movs	r1, #0
   1aa64:	a803      	add	r0, sp, #12
   1aa66:	f008 f9b0 	bl	22dca <memset>
		.data.tx.buf = data->async->tx_buf,
   1aa6a:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   1aa6c:	689a      	ldr	r2, [r3, #8]
   1aa6e:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1aa72:	68db      	ldr	r3, [r3, #12]
   1aa74:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1aa76:	bf1c      	itt	ne
   1aa78:	2301      	movne	r3, #1
   1aa7a:	f88d 300c 	strbne.w	r3, [sp, #12]
   1aa7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1aa82:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1aa86:	68ea      	ldr	r2, [r5, #12]
   1aa88:	2300      	movs	r3, #0
   1aa8a:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1aa8c:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   1aa8e:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   1aa90:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1aa92:	4620      	mov	r0, r4
   1aa94:	f009 feae 	bl	247f4 <user_callback>
   1aa98:	e667      	b.n	1a76a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1aa9a:	4616      	mov	r6, r2
   1aa9c:	e7dc      	b.n	1aa58 <uarte_nrfx_isr_async+0x318>
   1aa9e:	bf00      	nop
   1aaa0:	000f423f 	.word	0x000f423f
   1aaa4:	000f4240 	.word	0x000f4240

0001aaa8 <random_byte_get>:
	__asm__ volatile(
   1aaa8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aaac:	f3ef 8211 	mrs	r2, BASEPRI
   1aab0:	f383 8812 	msr	BASEPRI_MAX, r3
   1aab4:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1aab8:	4b09      	ldr	r3, [pc, #36]	; (1aae0 <random_byte_get+0x38>)
   1aaba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1aabe:	b161      	cbz	r1, 1aada <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aac0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1aac2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1aac6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1aaca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1aace:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1aad0:	f382 8811 	msr	BASEPRI, r2
   1aad4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1aad8:	4770      	bx	lr
	int retval = -EAGAIN;
   1aada:	f06f 000a 	mvn.w	r0, #10
   1aade:	e7f7      	b.n	1aad0 <random_byte_get+0x28>
   1aae0:	4000d000 	.word	0x4000d000

0001aae4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1aae4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aae6:	4603      	mov	r3, r0
   1aae8:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1aaea:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1aaec:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1aaf0:	f04f 0540 	mov.w	r5, #64	; 0x40
   1aaf4:	f3ef 8211 	mrs	r2, BASEPRI
   1aaf8:	f385 8812 	msr	BASEPRI_MAX, r5
   1aafc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1ab00:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1ab02:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1ab06:	1be4      	subs	r4, r4, r7
   1ab08:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1ab0c:	42a0      	cmp	r0, r4
		len = available;
   1ab0e:	bf88      	it	hi
   1ab10:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1ab12:	183e      	adds	r6, r7, r0
   1ab14:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1ab18:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1ab1a:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1ab1c:	f382 8811 	msr	BASEPRI, r2
   1ab20:	f3bf 8f6f 	isb	sy
   1ab24:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1ab26:	428a      	cmp	r2, r1
   1ab28:	d117      	bne.n	1ab5a <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1ab2a:	4577      	cmp	r7, lr
   1ab2c:	d10d      	bne.n	1ab4a <rng_pool_get+0x66>
	__asm__ volatile(
   1ab2e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1ab32:	f3ef 8211 	mrs	r2, BASEPRI
   1ab36:	f381 8812 	msr	BASEPRI_MAX, r1
   1ab3a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1ab3e:	7819      	ldrb	r1, [r3, #0]
   1ab40:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1ab42:	f382 8811 	msr	BASEPRI, r2
   1ab46:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1ab4a:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1ab4c:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1ab4e:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ab50:	bf22      	ittt	cs
   1ab52:	4b06      	ldrcs	r3, [pc, #24]	; (1ab6c <rng_pool_get+0x88>)
   1ab54:	2201      	movcs	r2, #1
   1ab56:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1ab58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1ab5a:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1ab5c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1ab5e:	7976      	ldrb	r6, [r6, #5]
   1ab60:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1ab64:	ea05 050c 	and.w	r5, r5, ip
   1ab68:	e7dd      	b.n	1ab26 <rng_pool_get+0x42>
   1ab6a:	bf00      	nop
   1ab6c:	4000d000 	.word	0x4000d000

0001ab70 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab70:	43db      	mvns	r3, r3
{
   1ab72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab76:	f013 0501 	ands.w	r5, r3, #1
{
   1ab7a:	460e      	mov	r6, r1
   1ab7c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab7e:	d004      	beq.n	1ab8a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ab80:	4823      	ldr	r0, [pc, #140]	; (1ac10 <entropy_nrf5_get_entropy_isr+0xa0>)
   1ab82:	f7ff ffaf 	bl	1aae4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ab86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ab8a:	b3a2      	cbz	r2, 1abf6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1ab8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ab90:	f3ef 8811 	mrs	r8, BASEPRI
   1ab94:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab98:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ab9c:	200d      	movs	r0, #13
   1ab9e:	f7f9 f87d 	bl	13c9c <arch_irq_is_enabled>
   1aba2:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1aba4:	200d      	movs	r0, #13
   1aba6:	f7f9 f865 	bl	13c74 <arch_irq_disable>
	__asm__ volatile(
   1abaa:	f388 8811 	msr	BASEPRI, r8
   1abae:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1abb2:	f8df a060 	ldr.w	sl, [pc, #96]	; 1ac14 <entropy_nrf5_get_entropy_isr+0xa4>
   1abb6:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1ac18 <entropy_nrf5_get_entropy_isr+0xa8>
   1abba:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1abbe:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1abc2:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1abc6:	2301      	movs	r3, #1
   1abc8:	f8ca 3000 	str.w	r3, [sl]
   1abcc:	4625      	mov	r5, r4
   1abce:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1abd2:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1abd6:	b183      	cbz	r3, 1abfa <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1abd8:	f7ff ff66 	bl	1aaa8 <random_byte_get>
			if (byte < 0) {
   1abdc:	1e03      	subs	r3, r0, #0
   1abde:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1abe2:	dbf6      	blt.n	1abd2 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1abe4:	3d01      	subs	r5, #1
   1abe6:	b2ad      	uxth	r5, r5
   1abe8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1abea:	2d00      	cmp	r5, #0
   1abec:	d1f1      	bne.n	1abd2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1abee:	b117      	cbz	r7, 1abf6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1abf0:	200d      	movs	r0, #13
   1abf2:	f7f9 f831 	bl	13c58 <arch_irq_enable>
	return cnt;
   1abf6:	4620      	mov	r0, r4
   1abf8:	e7c5      	b.n	1ab86 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1abfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1abfe:	f3ef 8011 	mrs	r0, BASEPRI
   1ac02:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac06:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1ac0a:	f7f8 ffb3 	bl	13b74 <arch_cpu_atomic_idle>
}
   1ac0e:	e7e0      	b.n	1abd2 <entropy_nrf5_get_entropy_isr+0x62>
   1ac10:	200038f0 	.word	0x200038f0
   1ac14:	4000d000 	.word	0x4000d000
   1ac18:	e000e100 	.word	0xe000e100

0001ac1c <entropy_nrf5_get_entropy>:
{
   1ac1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ac20:	4f12      	ldr	r7, [pc, #72]	; (1ac6c <entropy_nrf5_get_entropy+0x50>)
   1ac22:	460d      	mov	r5, r1
   1ac24:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac26:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1ac2a:	b914      	cbnz	r4, 1ac32 <entropy_nrf5_get_entropy+0x16>
}
   1ac2c:	4620      	mov	r0, r4
   1ac2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac32:	f04f 33ff 	mov.w	r3, #4294967295
   1ac36:	f04f 32ff 	mov.w	r2, #4294967295
   1ac3a:	4638      	mov	r0, r7
   1ac3c:	f002 ff66 	bl	1db0c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ac40:	4622      	mov	r2, r4
   1ac42:	4629      	mov	r1, r5
   1ac44:	4640      	mov	r0, r8
   1ac46:	f7ff ff4d 	bl	1aae4 <rng_pool_get>
   1ac4a:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ac4c:	4638      	mov	r0, r7
   1ac4e:	f002 ff37 	bl	1dac0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ac52:	b93e      	cbnz	r6, 1ac64 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1ac54:	f04f 32ff 	mov.w	r2, #4294967295
   1ac58:	f04f 33ff 	mov.w	r3, #4294967295
   1ac5c:	4804      	ldr	r0, [pc, #16]	; (1ac70 <entropy_nrf5_get_entropy+0x54>)
   1ac5e:	f002 ff55 	bl	1db0c <z_impl_k_sem_take>
	while (len) {
   1ac62:	e7e6      	b.n	1ac32 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1ac64:	1ba4      	subs	r4, r4, r6
   1ac66:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ac68:	4435      	add	r5, r6
   1ac6a:	e7de      	b.n	1ac2a <entropy_nrf5_get_entropy+0xe>
   1ac6c:	200038c0 	.word	0x200038c0
   1ac70:	200038d8 	.word	0x200038d8

0001ac74 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ac74:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac76:	4c19      	ldr	r4, [pc, #100]	; (1acdc <entropy_nrf5_init+0x68>)
   1ac78:	2201      	movs	r2, #1
   1ac7a:	4611      	mov	r1, r2
   1ac7c:	4620      	mov	r0, r4
   1ac7e:	f00a fb4f 	bl	25320 <z_impl_k_sem_init>
   1ac82:	2201      	movs	r2, #1
   1ac84:	2100      	movs	r1, #0
   1ac86:	f104 0018 	add.w	r0, r4, #24
   1ac8a:	f00a fb49 	bl	25320 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ac8e:	f240 4307 	movw	r3, #1031	; 0x407
   1ac92:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ac96:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ac9a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ac9c:	230c      	movs	r3, #12
   1ac9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1aca2:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1aca4:	4b0e      	ldr	r3, [pc, #56]	; (1ace0 <entropy_nrf5_init+0x6c>)
   1aca6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1acaa:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1acae:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1acb2:	f022 0201 	bic.w	r2, r2, #1
   1acb6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1acba:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1acbc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1acc0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1acc4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1acc8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1acca:	6019      	str	r1, [r3, #0]
   1accc:	200d      	movs	r0, #13
   1acce:	f7f8 fff3 	bl	13cb8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1acd2:	200d      	movs	r0, #13
   1acd4:	f7f8 ffc0 	bl	13c58 <arch_irq_enable>

	return 0;
}
   1acd8:	4628      	mov	r0, r5
   1acda:	bd38      	pop	{r3, r4, r5, pc}
   1acdc:	200038c0 	.word	0x200038c0
   1ace0:	4000d000 	.word	0x4000d000

0001ace4 <isr>:
{
   1ace4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1ace6:	f7ff fedf 	bl	1aaa8 <random_byte_get>
	if (byte < 0) {
   1acea:	2800      	cmp	r0, #0
   1acec:	db20      	blt.n	1ad30 <isr+0x4c>
	uint8_t last  = rngp->last;
   1acee:	4b17      	ldr	r3, [pc, #92]	; (1ad4c <isr+0x68>)
   1acf0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1acf4:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1acf8:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1acfc:	1b14      	subs	r4, r2, r4
   1acfe:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1ad02:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1ad04:	d10d      	bne.n	1ad22 <isr+0x3e>
	uint8_t last  = rngp->last;
   1ad06:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ad0a:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ad0e:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1ad12:	1b14      	subs	r4, r2, r4
   1ad14:	ea31 0404 	bics.w	r4, r1, r4
   1ad18:	d10b      	bne.n	1ad32 <isr+0x4e>
   1ad1a:	4b0d      	ldr	r3, [pc, #52]	; (1ad50 <isr+0x6c>)
   1ad1c:	2201      	movs	r2, #1
   1ad1e:	605a      	str	r2, [r3, #4]
}
   1ad20:	e00e      	b.n	1ad40 <isr+0x5c>
	rngp->buffer[last] = byte;
   1ad22:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ad24:	3201      	adds	r2, #1
   1ad26:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ad28:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ad2c:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1ad30:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ad32:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1ad34:	3201      	adds	r2, #1
   1ad36:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1ad38:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ad3c:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ad40:	4804      	ldr	r0, [pc, #16]	; (1ad54 <isr+0x70>)
}
   1ad42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad46:	f002 bebb 	b.w	1dac0 <z_impl_k_sem_give>
   1ad4a:	bf00      	nop
   1ad4c:	200038c0 	.word	0x200038c0
   1ad50:	4000d000 	.word	0x4000d000
   1ad54:	200038d8 	.word	0x200038d8

0001ad58 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1ad58:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1ad5a:	2301      	movs	r3, #1
   1ad5c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ad5e:	4a0e      	ldr	r2, [pc, #56]	; (1ad98 <compare_int_lock+0x40>)
   1ad60:	f3bf 8f5b 	dmb	ish
   1ad64:	43dc      	mvns	r4, r3
   1ad66:	e852 1f00 	ldrex	r1, [r2]
   1ad6a:	ea01 0504 	and.w	r5, r1, r4
   1ad6e:	e842 5600 	strex	r6, r5, [r2]
   1ad72:	2e00      	cmp	r6, #0
   1ad74:	d1f7      	bne.n	1ad66 <compare_int_lock+0xe>
   1ad76:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ad7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ad7e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ad80:	4806      	ldr	r0, [pc, #24]	; (1ad9c <compare_int_lock+0x44>)
   1ad82:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ad86:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ad8a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ad8e:	420b      	tst	r3, r1
}
   1ad90:	bf14      	ite	ne
   1ad92:	2001      	movne	r0, #1
   1ad94:	2000      	moveq	r0, #0
   1ad96:	bd70      	pop	{r4, r5, r6, pc}
   1ad98:	20003918 	.word	0x20003918
   1ad9c:	40011000 	.word	0x40011000

0001ada0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1ada0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1ada2:	490e      	ldr	r1, [pc, #56]	; (1addc <sys_clock_timeout_handler+0x3c>)
   1ada4:	e9d1 3400 	ldrd	r3, r4, [r1]
   1ada8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1adaa:	18c3      	adds	r3, r0, r3
   1adac:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1adb0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1adb4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1adb8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1adbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1adc0:	d209      	bcs.n	1add6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1adc2:	4b07      	ldr	r3, [pc, #28]	; (1ade0 <sys_clock_timeout_handler+0x40>)
   1adc4:	681b      	ldr	r3, [r3, #0]
   1adc6:	0a1a      	lsrs	r2, r3, #8
   1adc8:	061b      	lsls	r3, r3, #24
   1adca:	199c      	adds	r4, r3, r6
   1adcc:	4b05      	ldr	r3, [pc, #20]	; (1ade4 <sys_clock_timeout_handler+0x44>)
   1adce:	f142 0500 	adc.w	r5, r2, #0
   1add2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1add6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1add8:	f003 bcd0 	b.w	1e77c <sys_clock_announce>
   1addc:	200025b0 	.word	0x200025b0
   1ade0:	2000391c 	.word	0x2000391c
   1ade4:	200025b8 	.word	0x200025b8

0001ade8 <compare_int_unlock>:
	if (key) {
   1ade8:	b311      	cbz	r1, 1ae30 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1adea:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1adee:	2301      	movs	r3, #1
   1adf0:	4a10      	ldr	r2, [pc, #64]	; (1ae34 <compare_int_unlock+0x4c>)
   1adf2:	4083      	lsls	r3, r0
   1adf4:	e852 cf00 	ldrex	ip, [r2]
   1adf8:	ea4c 0c03 	orr.w	ip, ip, r3
   1adfc:	e842 c100 	strex	r1, ip, [r2]
   1ae00:	2900      	cmp	r1, #0
   1ae02:	d1f7      	bne.n	1adf4 <compare_int_unlock+0xc>
   1ae04:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ae08:	4a0b      	ldr	r2, [pc, #44]	; (1ae38 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ae0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ae0e:	4083      	lsls	r3, r0
   1ae10:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ae14:	4b09      	ldr	r3, [pc, #36]	; (1ae3c <compare_int_unlock+0x54>)
   1ae16:	f3bf 8f5b 	dmb	ish
   1ae1a:	681b      	ldr	r3, [r3, #0]
   1ae1c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ae20:	40c3      	lsrs	r3, r0
   1ae22:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae24:	bf42      	ittt	mi
   1ae26:	4b06      	ldrmi	r3, [pc, #24]	; (1ae40 <compare_int_unlock+0x58>)
   1ae28:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1ae2c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1ae30:	4770      	bx	lr
   1ae32:	bf00      	nop
   1ae34:	20003918 	.word	0x20003918
   1ae38:	40011000 	.word	0x40011000
   1ae3c:	20003914 	.word	0x20003914
   1ae40:	e000e100 	.word	0xe000e100

0001ae44 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1ae44:	4b0d      	ldr	r3, [pc, #52]	; (1ae7c <z_nrf_rtc_timer_read+0x38>)
   1ae46:	6818      	ldr	r0, [r3, #0]
   1ae48:	0a01      	lsrs	r1, r0, #8
   1ae4a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1ae4c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1ae50:	4b0b      	ldr	r3, [pc, #44]	; (1ae80 <z_nrf_rtc_timer_read+0x3c>)
   1ae52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1ae56:	1818      	adds	r0, r3, r0
   1ae58:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ae5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ae60:	d20a      	bcs.n	1ae78 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ae62:	4b08      	ldr	r3, [pc, #32]	; (1ae84 <z_nrf_rtc_timer_read+0x40>)
   1ae64:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae68:	4290      	cmp	r0, r2
   1ae6a:	eb71 0303 	sbcs.w	r3, r1, r3
   1ae6e:	d203      	bcs.n	1ae78 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1ae70:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ae74:	f141 0100 	adc.w	r1, r1, #0
}
   1ae78:	4770      	bx	lr
   1ae7a:	bf00      	nop
   1ae7c:	2000391c 	.word	0x2000391c
   1ae80:	40011000 	.word	0x40011000
   1ae84:	200025b8 	.word	0x200025b8

0001ae88 <compare_set>:
{
   1ae88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae8c:	4616      	mov	r6, r2
   1ae8e:	461f      	mov	r7, r3
   1ae90:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1ae92:	f7ff ff61 	bl	1ad58 <compare_int_lock>
   1ae96:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1ae98:	f7ff ffd4 	bl	1ae44 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1ae9c:	42b0      	cmp	r0, r6
   1ae9e:	eb71 0307 	sbcs.w	r3, r1, r7
   1aea2:	d251      	bcs.n	1af48 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1aea4:	4b3a      	ldr	r3, [pc, #232]	; (1af90 <compare_set+0x108>)
   1aea6:	1a30      	subs	r0, r6, r0
   1aea8:	eb67 0101 	sbc.w	r1, r7, r1
   1aeac:	4298      	cmp	r0, r3
   1aeae:	f171 0100 	sbcs.w	r1, r1, #0
   1aeb2:	d26a      	bcs.n	1af8a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1aeb4:	4b37      	ldr	r3, [pc, #220]	; (1af94 <compare_set+0x10c>)
   1aeb6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1aeba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1aebe:	429f      	cmp	r7, r3
   1aec0:	bf08      	it	eq
   1aec2:	4296      	cmpeq	r6, r2
   1aec4:	d04e      	beq.n	1af64 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1aec6:	4934      	ldr	r1, [pc, #208]	; (1af98 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1aec8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1aecc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1aed0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1aed4:	00ad      	lsls	r5, r5, #2
   1aed6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1aeda:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aedc:	b2ad      	uxth	r5, r5
   1aede:	f009 ff36 	bl	24d4e <event_clear>
	return absolute_time & COUNTER_MAX;
   1aee2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1aee6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1aeea:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1aeee:	4a2b      	ldr	r2, [pc, #172]	; (1af9c <compare_set+0x114>)
   1aef0:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1aef2:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1aef6:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1aef8:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   1aefc:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1aefe:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1af02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1af06:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1af0a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1af0e:	f06f 0002 	mvn.w	r0, #2
   1af12:	eba0 0008 	sub.w	r0, r0, r8
   1af16:	4460      	add	r0, ip
   1af18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1af1c:	4290      	cmp	r0, r2
   1af1e:	d921      	bls.n	1af64 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1af20:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1af22:	b160      	cbz	r0, 1af3e <compare_set+0xb6>
     return p_reg->COUNTER;
   1af24:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1af28:	eba8 000b 	sub.w	r0, r8, fp
   1af2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1af30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1af34:	d916      	bls.n	1af64 <compare_set+0xdc>
					event_clear(chan);
   1af36:	4620      	mov	r0, r4
   1af38:	f009 ff09 	bl	24d4e <event_clear>
   1af3c:	4a17      	ldr	r2, [pc, #92]	; (1af9c <compare_set+0x114>)
			cc_val = now + cc_inc;
   1af3e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   1af42:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1af46:	e7d9      	b.n	1aefc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1af48:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1af4a:	4a15      	ldr	r2, [pc, #84]	; (1afa0 <compare_set+0x118>)
   1af4c:	f3bf 8f5b 	dmb	ish
   1af50:	40a3      	lsls	r3, r4
   1af52:	e852 0f00 	ldrex	r0, [r2]
   1af56:	4318      	orrs	r0, r3
   1af58:	e842 0100 	strex	r1, r0, [r2]
   1af5c:	2900      	cmp	r1, #0
   1af5e:	d1f8      	bne.n	1af52 <compare_set+0xca>
   1af60:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1af64:	490b      	ldr	r1, [pc, #44]	; (1af94 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   1af66:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1af68:	0123      	lsls	r3, r4, #4
   1af6a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1af6e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   1af72:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1af74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1af76:	6053      	str	r3, [r2, #4]
	return ret;
   1af78:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   1af7a:	4620      	mov	r0, r4
   1af7c:	9900      	ldr	r1, [sp, #0]
   1af7e:	f7ff ff33 	bl	1ade8 <compare_int_unlock>
}
   1af82:	4628      	mov	r0, r5
   1af84:	b003      	add	sp, #12
   1af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1af8a:	f06f 0515 	mvn.w	r5, #21
   1af8e:	e7f4      	b.n	1af7a <compare_set+0xf2>
   1af90:	00800001 	.word	0x00800001
   1af94:	200025a0 	.word	0x200025a0
   1af98:	40011000 	.word	0x40011000
   1af9c:	007ffffd 	.word	0x007ffffd
   1afa0:	20003914 	.word	0x20003914

0001afa4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1afa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1afa6:	4b19      	ldr	r3, [pc, #100]	; (1b00c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1afa8:	4d19      	ldr	r5, [pc, #100]	; (1b010 <sys_clock_driver_init+0x6c>)
   1afaa:	2400      	movs	r4, #0
   1afac:	f04f 30ff 	mov.w	r0, #4294967295
   1afb0:	f04f 31ff 	mov.w	r1, #4294967295
   1afb4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1afb8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1afbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1afc0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1afc4:	4b13      	ldr	r3, [pc, #76]	; (1b014 <sys_clock_driver_init+0x70>)
   1afc6:	2602      	movs	r6, #2
   1afc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1afcc:	2101      	movs	r1, #1
   1afce:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1afd2:	2011      	movs	r0, #17
   1afd4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1afd8:	4622      	mov	r2, r4
   1afda:	f7f8 fe6d 	bl	13cb8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1afde:	2011      	movs	r0, #17
   1afe0:	f7f8 fe3a 	bl	13c58 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1afe4:	4a0c      	ldr	r2, [pc, #48]	; (1b018 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1afe6:	2301      	movs	r3, #1
   1afe8:	60ab      	str	r3, [r5, #8]
   1afea:	602b      	str	r3, [r5, #0]
   1afec:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1afee:	4b0b      	ldr	r3, [pc, #44]	; (1b01c <sys_clock_driver_init+0x78>)
   1aff0:	4a0b      	ldr	r2, [pc, #44]	; (1b020 <sys_clock_driver_init+0x7c>)
   1aff2:	9300      	str	r3, [sp, #0]
   1aff4:	9401      	str	r4, [sp, #4]
   1aff6:	2300      	movs	r3, #0
   1aff8:	4620      	mov	r0, r4
   1affa:	f7ff ff45 	bl	1ae88 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1affe:	4630      	mov	r0, r6
   1b000:	f7fe ff78 	bl	19ef4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1b004:	4620      	mov	r0, r4
   1b006:	b002      	add	sp, #8
   1b008:	bd70      	pop	{r4, r5, r6, pc}
   1b00a:	bf00      	nop
   1b00c:	200025a0 	.word	0x200025a0
   1b010:	40011000 	.word	0x40011000
   1b014:	e000e100 	.word	0xe000e100
   1b018:	20003918 	.word	0x20003918
   1b01c:	0001ada1 	.word	0x0001ada1
   1b020:	007fffff 	.word	0x007fffff

0001b024 <rtc_nrf_isr>:
{
   1b024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1b028:	4c2b      	ldr	r4, [pc, #172]	; (1b0d8 <rtc_nrf_isr+0xb4>)
   1b02a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1b02e:	0799      	lsls	r1, r3, #30
   1b030:	d50b      	bpl.n	1b04a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b032:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1b036:	b143      	cbz	r3, 1b04a <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1b038:	4a28      	ldr	r2, [pc, #160]	; (1b0dc <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b03a:	2300      	movs	r3, #0
   1b03c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1b040:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1b044:	6813      	ldr	r3, [r2, #0]
   1b046:	3301      	adds	r3, #1
   1b048:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1b04a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1b04e:	03da      	lsls	r2, r3, #15
   1b050:	d523      	bpl.n	1b09a <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b052:	f3bf 8f5b 	dmb	ish
   1b056:	4b22      	ldr	r3, [pc, #136]	; (1b0e0 <rtc_nrf_isr+0xbc>)
   1b058:	e853 2f00 	ldrex	r2, [r3]
   1b05c:	f022 0101 	bic.w	r1, r2, #1
   1b060:	e843 1000 	strex	r0, r1, [r3]
   1b064:	2800      	cmp	r0, #0
   1b066:	d1f7      	bne.n	1b058 <rtc_nrf_isr+0x34>
   1b068:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1b06c:	07d3      	lsls	r3, r2, #31
   1b06e:	d402      	bmi.n	1b076 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b070:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1b074:	b18b      	cbz	r3, 1b09a <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b076:	2500      	movs	r5, #0
   1b078:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1b07c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1b080:	f7ff fee0 	bl	1ae44 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1b084:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b088:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1b08a:	4b16      	ldr	r3, [pc, #88]	; (1b0e4 <rtc_nrf_isr+0xc0>)
   1b08c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1b090:	42b0      	cmp	r0, r6
   1b092:	41b9      	sbcs	r1, r7
   1b094:	d204      	bcs.n	1b0a0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1b096:	f382 8810 	msr	PRIMASK, r2
}
   1b09a:	b003      	add	sp, #12
   1b09c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1b0a0:	f04f 38ff 	mov.w	r8, #4294967295
   1b0a4:	f04f 39ff 	mov.w	r9, #4294967295
   1b0a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1b0ac:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1b0b0:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1b0b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b0b6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1b0ba:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1b0be:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1b0c2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1b0c6:	2900      	cmp	r1, #0
   1b0c8:	d0e7      	beq.n	1b09a <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1b0ca:	9000      	str	r0, [sp, #0]
   1b0cc:	4632      	mov	r2, r6
   1b0ce:	463b      	mov	r3, r7
   1b0d0:	4628      	mov	r0, r5
   1b0d2:	4788      	blx	r1
   1b0d4:	e7e1      	b.n	1b09a <rtc_nrf_isr+0x76>
   1b0d6:	bf00      	nop
   1b0d8:	40011000 	.word	0x40011000
   1b0dc:	2000391c 	.word	0x2000391c
   1b0e0:	20003914 	.word	0x20003914
   1b0e4:	200025a0 	.word	0x200025a0

0001b0e8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1b0e8:	1c43      	adds	r3, r0, #1
{
   1b0ea:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1b0ec:	d022      	beq.n	1b134 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1b0ee:	2801      	cmp	r0, #1
   1b0f0:	dd22      	ble.n	1b138 <sys_clock_set_timeout+0x50>
   1b0f2:	4a12      	ldr	r2, [pc, #72]	; (1b13c <sys_clock_set_timeout+0x54>)
   1b0f4:	4b12      	ldr	r3, [pc, #72]	; (1b140 <sys_clock_set_timeout+0x58>)
   1b0f6:	4290      	cmp	r0, r2
   1b0f8:	bfd4      	ite	le
   1b0fa:	4604      	movle	r4, r0
   1b0fc:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b0fe:	f7ff fea1 	bl	1ae44 <z_nrf_rtc_timer_read>
   1b102:	4b10      	ldr	r3, [pc, #64]	; (1b144 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1b104:	490e      	ldr	r1, [pc, #56]	; (1b140 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1b106:	e9d3 2300 	ldrd	r2, r3, [r3]
   1b10a:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1b10c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1b110:	bf28      	it	cs
   1b112:	2400      	movcs	r4, #0
	cyc += unannounced;
   1b114:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1b116:	428c      	cmp	r4, r1
   1b118:	bf28      	it	cs
   1b11a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1b11c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b11e:	490a      	ldr	r1, [pc, #40]	; (1b148 <sys_clock_set_timeout+0x60>)
   1b120:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1b122:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1b126:	9001      	str	r0, [sp, #4]
   1b128:	f143 0300 	adc.w	r3, r3, #0
   1b12c:	f7ff feac 	bl	1ae88 <compare_set>
}
   1b130:	b002      	add	sp, #8
   1b132:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1b134:	4c02      	ldr	r4, [pc, #8]	; (1b140 <sys_clock_set_timeout+0x58>)
   1b136:	e7e2      	b.n	1b0fe <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1b138:	2401      	movs	r4, #1
   1b13a:	e7e0      	b.n	1b0fe <sys_clock_set_timeout+0x16>
   1b13c:	007ffffe 	.word	0x007ffffe
   1b140:	007fffff 	.word	0x007fffff
   1b144:	200025b0 	.word	0x200025b0
   1b148:	0001ada1 	.word	0x0001ada1

0001b14c <sys_clock_elapsed>:
{
   1b14c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1b14e:	f7ff fe79 	bl	1ae44 <z_nrf_rtc_timer_read>
   1b152:	4b02      	ldr	r3, [pc, #8]	; (1b15c <sys_clock_elapsed+0x10>)
   1b154:	681b      	ldr	r3, [r3, #0]
}
   1b156:	1ac0      	subs	r0, r0, r3
   1b158:	bd08      	pop	{r3, pc}
   1b15a:	bf00      	nop
   1b15c:	200025b0 	.word	0x200025b0

0001b160 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1b160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
   1b164:	4e5a      	ldr	r6, [pc, #360]	; (1b2d0 <pinctrl_configure_pins+0x170>)
   1b166:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b16a:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1b16c:	4281      	cmp	r1, r0
   1b16e:	d102      	bne.n	1b176 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1b170:	2000      	movs	r0, #0
}
   1b172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1b176:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1b178:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1b17c:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
   1b180:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   1b182:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
   1b186:	bf08      	it	eq
   1b188:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1b18c:	2c22      	cmp	r4, #34	; 0x22
   1b18e:	f200 809b 	bhi.w	1b2c8 <pinctrl_configure_pins+0x168>
   1b192:	e8df f004 	tbb	[pc, r4]
   1b196:	2412      	.short	0x2412
   1b198:	402c4429 	.word	0x402c4429
   1b19c:	99999944 	.word	0x99999944
   1b1a0:	99704799 	.word	0x99704799
   1b1a4:	99999999 	.word	0x99999999
   1b1a8:	99999999 	.word	0x99999999
   1b1ac:	817e7b73 	.word	0x817e7b73
   1b1b0:	84999999 	.word	0x84999999
   1b1b4:	93908d8a 	.word	0x93908d8a
   1b1b8:	96          	.byte	0x96
   1b1b9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   1b1ba:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
   1b1be:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
   1b1c2:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   1b1c6:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
   1b1ca:	bf14      	ite	ne
   1b1cc:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
   1b1d0:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1b1d2:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
   1b1d6:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
   1b1da:	2401      	movs	r4, #1
   1b1dc:	e002      	b.n	1b1e4 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   1b1de:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1b1e2:	2400      	movs	r4, #0
   1b1e4:	46a6      	mov	lr, r4
   1b1e6:	e024      	b.n	1b232 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
   1b1e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
   1b1ec:	e7e7      	b.n	1b1be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1b1ee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1b1f2:	2400      	movs	r4, #0
    return pin_number >> 5;
   1b1f4:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   1b1f8:	f1be 0f01 	cmp.w	lr, #1
   1b1fc:	bf14      	ite	ne
   1b1fe:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1b202:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1b204:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1b208:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1b20c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   1b210:	f04f 0e01 	mov.w	lr, #1
   1b214:	e00d      	b.n	1b232 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1b216:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   1b21a:	2401      	movs	r4, #1
   1b21c:	e7ea      	b.n	1b1f4 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1b21e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
   1b222:	e7de      	b.n	1b1e2 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1b224:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1b228:	2d00      	cmp	r5, #0
   1b22a:	d1da      	bne.n	1b1e2 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1b22c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1b22e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
   1b230:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1b232:	f850 cb04 	ldr.w	ip, [r0], #4
   1b236:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1b23a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1b23e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1b242:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
   1b246:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1b24a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1b24e:	bf1c      	itt	ne
   1b250:	2401      	movne	r4, #1
   1b252:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b256:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
   1b25a:	2b01      	cmp	r3, #1
   1b25c:	bf0c      	ite	eq
   1b25e:	4633      	moveq	r3, r6
   1b260:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b264:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
   1b268:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b26c:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1b270:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1b274:	e77a      	b.n	1b16c <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1b276:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1b27a:	e7d5      	b.n	1b228 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   1b27c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   1b280:	6804      	ldr	r4, [r0, #0]
   1b282:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
   1b286:	2c00      	cmp	r4, #0
   1b288:	d0c7      	beq.n	1b21a <pinctrl_configure_pins+0xba>
   1b28a:	e798      	b.n	1b1be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   1b28c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   1b290:	e7f6      	b.n	1b280 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   1b292:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   1b296:	e7f3      	b.n	1b280 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   1b298:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
   1b29c:	e7f0      	b.n	1b280 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   1b29e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1b2a2:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1b2a4:	f04f 0e00 	mov.w	lr, #0
   1b2a8:	e7c3      	b.n	1b232 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   1b2aa:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   1b2ae:	e786      	b.n	1b1be <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   1b2b0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
   1b2b4:	e7f5      	b.n	1b2a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   1b2b6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
   1b2ba:	e7f2      	b.n	1b2a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   1b2bc:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
   1b2c0:	e7ef      	b.n	1b2a2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   1b2c2:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
   1b2c6:	e7ec      	b.n	1b2a2 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
   1b2c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b2cc:	e751      	b.n	1b172 <pinctrl_configure_pins+0x12>
   1b2ce:	bf00      	nop
   1b2d0:	50000300 	.word	0x50000300

0001b2d4 <get_buttons.part.0>:
	}

	return err;
}

static uint32_t get_buttons(void)
   1b2d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
			LOG_ERR("Cannot read gpio pin");
   1b2d6:	4b07      	ldr	r3, [pc, #28]	; (1b2f4 <get_buttons.part.0+0x20>)
   1b2d8:	9305      	str	r3, [sp, #20]
   1b2da:	4807      	ldr	r0, [pc, #28]	; (1b2f8 <get_buttons.part.0+0x24>)
   1b2dc:	2302      	movs	r3, #2
   1b2de:	aa04      	add	r2, sp, #16
   1b2e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b2e4:	9304      	str	r3, [sp, #16]
   1b2e6:	f009 fd7a 	bl	24dde <z_log_msg_static_create.constprop.0>
			ret |= 1U << i;
		}
	}

	return ret;
}
   1b2ea:	2000      	movs	r0, #0
   1b2ec:	b007      	add	sp, #28
   1b2ee:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2f2:	bf00      	nop
   1b2f4:	00028337 	.word	0x00028337
   1b2f8:	00025fb0 	.word	0x00025fb0

0001b2fc <get_buttons>:
{
   1b2fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   1b300:	2400      	movs	r4, #0
   1b302:	4e14      	ldr	r6, [pc, #80]	; (1b354 <get_buttons+0x58>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b304:	4625      	mov	r5, r4
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1b306:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   1b30a:	6830      	ldr	r0, [r6, #0]
   1b30c:	7937      	ldrb	r7, [r6, #4]
	const struct gpio_driver_data *const data =
   1b30e:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   1b312:	6883      	ldr	r3, [r0, #8]
   1b314:	a901      	add	r1, sp, #4
   1b316:	685b      	ldr	r3, [r3, #4]
   1b318:	4798      	blx	r3
	if (ret == 0) {
   1b31a:	2800      	cmp	r0, #0
   1b31c:	d00c      	beq.n	1b338 <get_buttons+0x3c>
		if (val < 0) {
   1b31e:	db14      	blt.n	1b34a <get_buttons+0x4e>
			ret |= 1U << i;
   1b320:	fa08 f305 	lsl.w	r3, r8, r5
   1b324:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b326:	3501      	adds	r5, #1
   1b328:	2d04      	cmp	r5, #4
   1b32a:	f106 0608 	add.w	r6, r6, #8
   1b32e:	d1ec      	bne.n	1b30a <get_buttons+0xe>
}
   1b330:	4620      	mov	r0, r4
   1b332:	b003      	add	sp, #12
   1b334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*value ^= data->invert;
   1b338:	f8d9 2000 	ldr.w	r2, [r9]
   1b33c:	9b01      	ldr	r3, [sp, #4]
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   1b33e:	fa08 f707 	lsl.w	r7, r8, r7
		*value ^= data->invert;
   1b342:	4053      	eors	r3, r2
		if (val) {
   1b344:	423b      	tst	r3, r7
   1b346:	d0ee      	beq.n	1b326 <get_buttons+0x2a>
   1b348:	e7ea      	b.n	1b320 <get_buttons+0x24>
}
   1b34a:	b003      	add	sp, #12
   1b34c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b350:	f7ff bfc0 	b.w	1b2d4 <get_buttons.part.0>
   1b354:	000266ac 	.word	0x000266ac

0001b358 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1b358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b35c:	4e15      	ldr	r6, [pc, #84]	; (1b3b4 <dk_set_leds_state.part.0+0x5c>)
   1b35e:	b086      	sub	sp, #24
   1b360:	4607      	mov	r7, r0
   1b362:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1b364:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1b366:	fa27 f205 	lsr.w	r2, r7, r5
   1b36a:	f012 0201 	ands.w	r2, r2, #1
   1b36e:	d117      	bne.n	1b3a0 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1b370:	fa28 f305 	lsr.w	r3, r8, r5
   1b374:	07db      	lsls	r3, r3, #31
   1b376:	d515      	bpl.n	1b3a4 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1b378:	7931      	ldrb	r1, [r6, #4]
   1b37a:	6830      	ldr	r0, [r6, #0]
   1b37c:	f009 fd1f 	bl	24dbe <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1b380:	4604      	mov	r4, r0
   1b382:	b178      	cbz	r0, 1b3a4 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1b384:	4b0c      	ldr	r3, [pc, #48]	; (1b3b8 <dk_set_leds_state.part.0+0x60>)
   1b386:	9305      	str	r3, [sp, #20]
   1b388:	480c      	ldr	r0, [pc, #48]	; (1b3bc <dk_set_leds_state.part.0+0x64>)
   1b38a:	2302      	movs	r3, #2
   1b38c:	aa04      	add	r2, sp, #16
   1b38e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b392:	9304      	str	r3, [sp, #16]
   1b394:	f009 fd23 	bl	24dde <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1b398:	4620      	mov	r0, r4
   1b39a:	b006      	add	sp, #24
   1b39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1b3a0:	2201      	movs	r2, #1
   1b3a2:	e7e9      	b.n	1b378 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1b3a4:	3501      	adds	r5, #1
   1b3a6:	2d04      	cmp	r5, #4
   1b3a8:	f106 0608 	add.w	r6, r6, #8
   1b3ac:	d1db      	bne.n	1b366 <dk_set_leds_state.part.0+0xe>
	return 0;
   1b3ae:	2400      	movs	r4, #0
   1b3b0:	e7f2      	b.n	1b398 <dk_set_leds_state.part.0+0x40>
   1b3b2:	bf00      	nop
   1b3b4:	0002668c 	.word	0x0002668c
   1b3b8:	0002834c 	.word	0x0002834c
   1b3bc:	00025fb0 	.word	0x00025fb0

0001b3c0 <callback_ctrl>:
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1b3c0:	2800      	cmp	r0, #0
{
   1b3c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   1b3c6:	bf0c      	ite	eq
   1b3c8:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   1b3cc:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   1b3d0:	4c12      	ldr	r4, [pc, #72]	; (1b41c <callback_ctrl+0x5c>)
   1b3d2:	2500      	movs	r5, #0
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1b3d4:	f406 0700 	and.w	r7, r6, #8388608	; 0x800000
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1b3d8:	f04f 0801 	mov.w	r8, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1b3dc:	6820      	ldr	r0, [r4, #0]
   1b3de:	7921      	ldrb	r1, [r4, #4]
	const struct gpio_driver_api *api =
   1b3e0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	const struct gpio_driver_data *const data =
   1b3e4:	6902      	ldr	r2, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1b3e6:	b1bf      	cbz	r7, 1b418 <callback_ctrl+0x58>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   1b3e8:	6812      	ldr	r2, [r2, #0]
   1b3ea:	fa08 f301 	lsl.w	r3, r8, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   1b3ee:	4213      	tst	r3, r2
   1b3f0:	bf0c      	ite	eq
   1b3f2:	f04f 6298 	moveq.w	r2, #79691776	; 0x4c00000
   1b3f6:	f04f 7230 	movne.w	r2, #46137344	; 0x2c00000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1b3fa:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   1b3fe:	f8dc 9018 	ldr.w	r9, [ip, #24]
   1b402:	f402 02c0 	and.w	r2, r2, #6291456	; 0x600000
   1b406:	3501      	adds	r5, #1
   1b408:	47c8      	blx	r9
   1b40a:	2d04      	cmp	r5, #4
   1b40c:	d002      	beq.n	1b414 <callback_ctrl+0x54>
   1b40e:	3408      	adds	r4, #8
   1b410:	2800      	cmp	r0, #0
   1b412:	d0e3      	beq.n	1b3dc <callback_ctrl+0x1c>
}
   1b414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b418:	4632      	mov	r2, r6
   1b41a:	e7ee      	b.n	1b3fa <callback_ctrl+0x3a>
   1b41c:	000266ac 	.word	0x000266ac

0001b420 <button_pressed>:
{
   1b420:	b510      	push	{r4, lr}
   1b422:	b086      	sub	sp, #24
   1b424:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b428:	f3ef 8411 	mrs	r4, BASEPRI
   1b42c:	f383 8812 	msr	BASEPRI_MAX, r3
   1b430:	f3bf 8f6f 	isb	sy
	int err = callback_ctrl(false);
   1b434:	2000      	movs	r0, #0
   1b436:	f7ff ffc3 	bl	1b3c0 <callback_ctrl>
	if (err) {
   1b43a:	b148      	cbz	r0, 1b450 <button_pressed+0x30>
		LOG_ERR("Cannot disable callbacks");
   1b43c:	4b0c      	ldr	r3, [pc, #48]	; (1b470 <button_pressed+0x50>)
   1b43e:	9305      	str	r3, [sp, #20]
   1b440:	480c      	ldr	r0, [pc, #48]	; (1b474 <button_pressed+0x54>)
   1b442:	2302      	movs	r3, #2
   1b444:	aa04      	add	r2, sp, #16
   1b446:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b44a:	9304      	str	r3, [sp, #16]
   1b44c:	f009 fcc7 	bl	24dde <z_log_msg_static_create.constprop.0>
	switch (state) {
   1b450:	4b09      	ldr	r3, [pc, #36]	; (1b478 <button_pressed+0x58>)
   1b452:	781a      	ldrb	r2, [r3, #0]
   1b454:	b932      	cbnz	r2, 1b464 <button_pressed+0x44>
		state = STATE_SCANNING;
   1b456:	2201      	movs	r2, #1
   1b458:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   1b45a:	4808      	ldr	r0, [pc, #32]	; (1b47c <button_pressed+0x5c>)
   1b45c:	2221      	movs	r2, #33	; 0x21
   1b45e:	2300      	movs	r3, #0
   1b460:	f002 fd46 	bl	1def0 <k_work_reschedule>
	__asm__ volatile(
   1b464:	f384 8811 	msr	BASEPRI, r4
   1b468:	f3bf 8f6f 	isb	sy
}
   1b46c:	b006      	add	sp, #24
   1b46e:	bd10      	pop	{r4, pc}
   1b470:	00028362 	.word	0x00028362
   1b474:	00025fb0 	.word	0x00025fb0
   1b478:	20004628 	.word	0x20004628
   1b47c:	200025c0 	.word	0x200025c0

0001b480 <buttons_scan_fn>:
{
   1b480:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b482:	b087      	sub	sp, #28
	button_scan = get_buttons();
   1b484:	f7ff ff3a 	bl	1b2fc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b488:	f3bf 8f5b 	dmb	ish
   1b48c:	4b2f      	ldr	r3, [pc, #188]	; (1b54c <buttons_scan_fn+0xcc>)
   1b48e:	4604      	mov	r4, r0
   1b490:	e853 2f00 	ldrex	r2, [r3]
   1b494:	e843 4100 	strex	r1, r4, [r3]
   1b498:	2900      	cmp	r1, #0
   1b49a:	d1f9      	bne.n	1b490 <buttons_scan_fn+0x10>
   1b49c:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   1b4a0:	4b2b      	ldr	r3, [pc, #172]	; (1b550 <buttons_scan_fn+0xd0>)
   1b4a2:	4f2c      	ldr	r7, [pc, #176]	; (1b554 <buttons_scan_fn+0xd4>)
   1b4a4:	781a      	ldrb	r2, [r3, #0]
   1b4a6:	bb3a      	cbnz	r2, 1b4f8 <buttons_scan_fn+0x78>
		if (button_scan != last_button_scan) {
   1b4a8:	683e      	ldr	r6, [r7, #0]
   1b4aa:	42a6      	cmp	r6, r4
   1b4ac:	d019      	beq.n	1b4e2 <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
   1b4ae:	4b2a      	ldr	r3, [pc, #168]	; (1b558 <buttons_scan_fn+0xd8>)
   1b4b0:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   1b4b2:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   1b4b4:	b10b      	cbz	r3, 1b4ba <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
   1b4b6:	4631      	mov	r1, r6
   1b4b8:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   1b4ba:	f04f 33ff 	mov.w	r3, #4294967295
   1b4be:	4827      	ldr	r0, [pc, #156]	; (1b55c <buttons_scan_fn+0xdc>)
   1b4c0:	f04f 32ff 	mov.w	r2, #4294967295
   1b4c4:	f002 fa12 	bl	1d8ec <z_impl_k_mutex_lock>
	return list->head;
   1b4c8:	4b25      	ldr	r3, [pc, #148]	; (1b560 <buttons_scan_fn+0xe0>)
   1b4ca:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   1b4cc:	b135      	cbz	r5, 1b4dc <buttons_scan_fn+0x5c>
   1b4ce:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   1b4d0:	4631      	mov	r1, r6
   1b4d2:	682b      	ldr	r3, [r5, #0]
   1b4d4:	4620      	mov	r0, r4
   1b4d6:	4798      	blx	r3
	return node->next;
   1b4d8:	686d      	ldr	r5, [r5, #4]
   1b4da:	e7f7      	b.n	1b4cc <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   1b4dc:	481f      	ldr	r0, [pc, #124]	; (1b55c <buttons_scan_fn+0xdc>)
   1b4de:	f002 fa7f 	bl	1d9e0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   1b4e2:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   1b4e4:	b15c      	cbz	r4, 1b4fe <buttons_scan_fn+0x7e>
		k_work_reschedule(&buttons_scan,
   1b4e6:	481f      	ldr	r0, [pc, #124]	; (1b564 <buttons_scan_fn+0xe4>)
   1b4e8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b4ec:	2300      	movs	r3, #0
}
   1b4ee:	b007      	add	sp, #28
   1b4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		k_work_reschedule(&buttons_scan,
   1b4f4:	f002 bcfc 	b.w	1def0 <k_work_reschedule>
		initial_run = false;
   1b4f8:	2200      	movs	r2, #0
   1b4fa:	701a      	strb	r2, [r3, #0]
   1b4fc:	e7f1      	b.n	1b4e2 <buttons_scan_fn+0x62>
	__asm__ volatile(
   1b4fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b502:	f3ef 8511 	mrs	r5, BASEPRI
   1b506:	f383 8812 	msr	BASEPRI_MAX, r3
   1b50a:	f3bf 8f6f 	isb	sy
		switch (state) {
   1b50e:	4b16      	ldr	r3, [pc, #88]	; (1b568 <buttons_scan_fn+0xe8>)
   1b510:	7818      	ldrb	r0, [r3, #0]
   1b512:	2801      	cmp	r0, #1
   1b514:	d005      	beq.n	1b522 <buttons_scan_fn+0xa2>
	__asm__ volatile(
   1b516:	f385 8811 	msr	BASEPRI, r5
   1b51a:	f3bf 8f6f 	isb	sy
}
   1b51e:	b007      	add	sp, #28
   1b520:	bdf0      	pop	{r4, r5, r6, r7, pc}
			state = STATE_WAITING;
   1b522:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   1b524:	f7ff ff4c 	bl	1b3c0 <callback_ctrl>
   1b528:	f385 8811 	msr	BASEPRI, r5
   1b52c:	f3bf 8f6f 	isb	sy
		if (err) {
   1b530:	2800      	cmp	r0, #0
   1b532:	d0f4      	beq.n	1b51e <buttons_scan_fn+0x9e>
			LOG_ERR("Cannot enable callbacks");
   1b534:	4b0d      	ldr	r3, [pc, #52]	; (1b56c <buttons_scan_fn+0xec>)
   1b536:	9305      	str	r3, [sp, #20]
   1b538:	480d      	ldr	r0, [pc, #52]	; (1b570 <buttons_scan_fn+0xf0>)
   1b53a:	2302      	movs	r3, #2
   1b53c:	aa04      	add	r2, sp, #16
   1b53e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b542:	9304      	str	r3, [sp, #16]
   1b544:	f009 fc4b 	bl	24dde <z_log_msg_static_create.constprop.0>
}
   1b548:	e7e9      	b.n	1b51e <buttons_scan_fn+0x9e>
   1b54a:	bf00      	nop
   1b54c:	20003950 	.word	0x20003950
   1b550:	20000a3c 	.word	0x20000a3c
   1b554:	20003924 	.word	0x20003924
   1b558:	20003954 	.word	0x20003954
   1b55c:	20003928 	.word	0x20003928
   1b560:	2000393c 	.word	0x2000393c
   1b564:	200025c0 	.word	0x200025c0
   1b568:	20004628 	.word	0x20004628
   1b56c:	0002837b 	.word	0x0002837b
   1b570:	00025fb0 	.word	0x00025fb0

0001b574 <dk_leds_init>:
{
   1b574:	b570      	push	{r4, r5, r6, lr}
   1b576:	4e11      	ldr	r6, [pc, #68]	; (1b5bc <dk_leds_init+0x48>)
   1b578:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1b57a:	2500      	movs	r5, #0
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   1b57c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   1b580:	4630      	mov	r0, r6
   1b582:	f009 fc07 	bl	24d94 <gpio_pin_configure_dt>
		if (err) {
   1b586:	4604      	mov	r4, r0
   1b588:	b950      	cbnz	r0, 1b5a0 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1b58a:	3501      	adds	r5, #1
   1b58c:	2d04      	cmp	r5, #4
   1b58e:	f106 0608 	add.w	r6, r6, #8
   1b592:	d1f3      	bne.n	1b57c <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1b594:	210f      	movs	r1, #15
}
   1b596:	b006      	add	sp, #24
   1b598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b59c:	f7ff bedc 	b.w	1b358 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1b5a0:	4b07      	ldr	r3, [pc, #28]	; (1b5c0 <dk_leds_init+0x4c>)
   1b5a2:	9305      	str	r3, [sp, #20]
   1b5a4:	4807      	ldr	r0, [pc, #28]	; (1b5c4 <dk_leds_init+0x50>)
   1b5a6:	2302      	movs	r3, #2
   1b5a8:	aa04      	add	r2, sp, #16
   1b5aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b5ae:	9304      	str	r3, [sp, #16]
   1b5b0:	f009 fc15 	bl	24dde <z_log_msg_static_create.constprop.0>
}
   1b5b4:	4620      	mov	r0, r4
   1b5b6:	b006      	add	sp, #24
   1b5b8:	bd70      	pop	{r4, r5, r6, pc}
   1b5ba:	bf00      	nop
   1b5bc:	0002668c 	.word	0x0002668c
   1b5c0:	00028393 	.word	0x00028393
   1b5c4:	00025fb0 	.word	0x00025fb0

0001b5c8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b5c8:	4b07      	ldr	r3, [pc, #28]	; (1b5e8 <dk_read_buttons+0x20>)
   1b5ca:	f3bf 8f5b 	dmb	ish
   1b5ce:	681b      	ldr	r3, [r3, #0]
   1b5d0:	f3bf 8f5b 	dmb	ish
	if (button_state != NULL) {
   1b5d4:	b100      	cbz	r0, 1b5d8 <dk_read_buttons+0x10>
		*button_state = current_state;
   1b5d6:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   1b5d8:	4804      	ldr	r0, [pc, #16]	; (1b5ec <dk_read_buttons+0x24>)
   1b5da:	b111      	cbz	r1, 1b5e2 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   1b5dc:	6802      	ldr	r2, [r0, #0]
   1b5de:	405a      	eors	r2, r3
   1b5e0:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   1b5e2:	6003      	str	r3, [r0, #0]
}
   1b5e4:	4770      	bx	lr
   1b5e6:	bf00      	nop
   1b5e8:	20003950 	.word	0x20003950
   1b5ec:	20003920 	.word	0x20003920

0001b5f0 <dk_buttons_init>:
{
   1b5f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   1b5f4:	4b3c      	ldr	r3, [pc, #240]	; (1b6e8 <dk_buttons_init+0xf8>)
{
   1b5f6:	b087      	sub	sp, #28
	button_handler_cb = button_handler;
   1b5f8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   1b5fa:	483c      	ldr	r0, [pc, #240]	; (1b6ec <dk_buttons_init+0xfc>)
   1b5fc:	4d3c      	ldr	r5, [pc, #240]	; (1b6f0 <dk_buttons_init+0x100>)
   1b5fe:	f009 fdf5 	bl	251ec <z_impl_k_mutex_init>
   1b602:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b604:	2700      	movs	r7, #0
   1b606:	46a8      	mov	r8, r5
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   1b608:	88f3      	ldrh	r3, [r6, #6]
   1b60a:	f013 0f01 	tst.w	r3, #1
   1b60e:	bf0c      	ite	eq
   1b610:	2120      	moveq	r1, #32
   1b612:	2110      	movne	r1, #16
		err = gpio_pin_configure_dt(&buttons[i], GPIO_INPUT | flags);
   1b614:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   1b618:	4630      	mov	r0, r6
   1b61a:	f009 fbbb 	bl	24d94 <gpio_pin_configure_dt>
		if (err) {
   1b61e:	4604      	mov	r4, r0
   1b620:	b168      	cbz	r0, 1b63e <dk_buttons_init+0x4e>
			LOG_ERR("Cannot configure button gpio");
   1b622:	4b34      	ldr	r3, [pc, #208]	; (1b6f4 <dk_buttons_init+0x104>)
			LOG_ERR("Cannot disable callbacks()");
   1b624:	9305      	str	r3, [sp, #20]
   1b626:	4834      	ldr	r0, [pc, #208]	; (1b6f8 <dk_buttons_init+0x108>)
   1b628:	2302      	movs	r3, #2
   1b62a:	aa04      	add	r2, sp, #16
   1b62c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b630:	9304      	str	r3, [sp, #16]
   1b632:	f009 fbd4 	bl	24dde <z_log_msg_static_create.constprop.0>
}
   1b636:	4620      	mov	r0, r4
   1b638:	b007      	add	sp, #28
   1b63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b63e:	3701      	adds	r7, #1
   1b640:	2f04      	cmp	r7, #4
   1b642:	f106 0608 	add.w	r6, r6, #8
   1b646:	d1df      	bne.n	1b608 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b648:	4606      	mov	r6, r0
	uint32_t pin_mask = 0;
   1b64a:	4607      	mov	r7, r0
		pin_mask |= BIT(buttons[i].pin);
   1b64c:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1b650:	6828      	ldr	r0, [r5, #0]
   1b652:	7929      	ldrb	r1, [r5, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1b654:	6883      	ldr	r3, [r0, #8]
   1b656:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1b65a:	699c      	ldr	r4, [r3, #24]
   1b65c:	2300      	movs	r3, #0
   1b65e:	47a0      	blx	r4
		if (err) {
   1b660:	4604      	mov	r4, r0
   1b662:	b108      	cbz	r0, 1b668 <dk_buttons_init+0x78>
			LOG_ERR("Cannot disable callbacks()");
   1b664:	4b25      	ldr	r3, [pc, #148]	; (1b6fc <dk_buttons_init+0x10c>)
   1b666:	e7dd      	b.n	1b624 <dk_buttons_init+0x34>
		pin_mask |= BIT(buttons[i].pin);
   1b668:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b66a:	3601      	adds	r6, #1
		pin_mask |= BIT(buttons[i].pin);
   1b66c:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b670:	2e04      	cmp	r6, #4
		pin_mask |= BIT(buttons[i].pin);
   1b672:	ea47 0703 	orr.w	r7, r7, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b676:	f105 0508 	add.w	r5, r5, #8
   1b67a:	d1e9      	bne.n	1b650 <dk_buttons_init+0x60>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1b67c:	4e20      	ldr	r6, [pc, #128]	; (1b700 <dk_buttons_init+0x110>)
   1b67e:	4b21      	ldr	r3, [pc, #132]	; (1b704 <dk_buttons_init+0x114>)
	callback->pin_mask = pin_mask;
   1b680:	e9c6 3701 	strd	r3, r7, [r6, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b684:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   1b686:	f858 0035 	ldr.w	r0, [r8, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1b68a:	6883      	ldr	r3, [r0, #8]
   1b68c:	69db      	ldr	r3, [r3, #28]
   1b68e:	b133      	cbz	r3, 1b69e <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   1b690:	2201      	movs	r2, #1
   1b692:	4631      	mov	r1, r6
   1b694:	4798      	blx	r3
		if (err) {
   1b696:	4604      	mov	r4, r0
   1b698:	b120      	cbz	r0, 1b6a4 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   1b69a:	4b1b      	ldr	r3, [pc, #108]	; (1b708 <dk_buttons_init+0x118>)
   1b69c:	e7c2      	b.n	1b624 <dk_buttons_init+0x34>
		return -ENOTSUP;
   1b69e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1b6a2:	e7fa      	b.n	1b69a <dk_buttons_init+0xaa>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   1b6a4:	3501      	adds	r5, #1
   1b6a6:	2d04      	cmp	r5, #4
   1b6a8:	d1ed      	bne.n	1b686 <dk_buttons_init+0x96>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   1b6aa:	4918      	ldr	r1, [pc, #96]	; (1b70c <dk_buttons_init+0x11c>)
   1b6ac:	4818      	ldr	r0, [pc, #96]	; (1b710 <dk_buttons_init+0x120>)
   1b6ae:	f009 fefd 	bl	254ac <k_work_init_delayable>
	state = STATE_SCANNING;
   1b6b2:	4b18      	ldr	r3, [pc, #96]	; (1b714 <dk_buttons_init+0x124>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1b6b4:	4816      	ldr	r0, [pc, #88]	; (1b710 <dk_buttons_init+0x120>)
	state = STATE_SCANNING;
   1b6b6:	2201      	movs	r2, #1
   1b6b8:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   1b6ba:	2300      	movs	r3, #0
   1b6bc:	2200      	movs	r2, #0
   1b6be:	f002 fbe3 	bl	1de88 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   1b6c2:	4621      	mov	r1, r4
   1b6c4:	4620      	mov	r0, r4
   1b6c6:	f7ff ff7f 	bl	1b5c8 <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   1b6ca:	f7ff fe17 	bl	1b2fc <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b6ce:	f3bf 8f5b 	dmb	ish
   1b6d2:	4b11      	ldr	r3, [pc, #68]	; (1b718 <dk_buttons_init+0x128>)
   1b6d4:	e853 2f00 	ldrex	r2, [r3]
   1b6d8:	e843 0100 	strex	r1, r0, [r3]
   1b6dc:	2900      	cmp	r1, #0
   1b6de:	d1f9      	bne.n	1b6d4 <dk_buttons_init+0xe4>
   1b6e0:	f3bf 8f5b 	dmb	ish
   1b6e4:	e7a7      	b.n	1b636 <dk_buttons_init+0x46>
   1b6e6:	bf00      	nop
   1b6e8:	20003954 	.word	0x20003954
   1b6ec:	20003928 	.word	0x20003928
   1b6f0:	000266ac 	.word	0x000266ac
   1b6f4:	000283ad 	.word	0x000283ad
   1b6f8:	00025fb0 	.word	0x00025fb0
   1b6fc:	000283ca 	.word	0x000283ca
   1b700:	20003944 	.word	0x20003944
   1b704:	0001b421 	.word	0x0001b421
   1b708:	000283e5 	.word	0x000283e5
   1b70c:	0001b481 	.word	0x0001b481
   1b710:	200025c0 	.word	0x200025c0
   1b714:	20004628 	.word	0x20004628
   1b718:	20003950 	.word	0x20003950

0001b71c <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1b71c:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1b71e:	2803      	cmp	r0, #3
{
   1b720:	b086      	sub	sp, #24
   1b722:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1b724:	d90e      	bls.n	1b744 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1b726:	4b12      	ldr	r3, [pc, #72]	; (1b770 <dk_set_led+0x54>)
   1b728:	9305      	str	r3, [sp, #20]
   1b72a:	4812      	ldr	r0, [pc, #72]	; (1b774 <dk_set_led+0x58>)
   1b72c:	2302      	movs	r3, #2
   1b72e:	aa04      	add	r2, sp, #16
   1b730:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1b734:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1b738:	9304      	str	r3, [sp, #16]
   1b73a:	f009 fb50 	bl	24dde <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1b73e:	4620      	mov	r0, r4
   1b740:	b006      	add	sp, #24
   1b742:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1b744:	4b0c      	ldr	r3, [pc, #48]	; (1b778 <dk_set_led+0x5c>)
   1b746:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1b74a:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1b74e:	7909      	ldrb	r1, [r1, #4]
   1b750:	f009 fb35 	bl	24dbe <gpio_pin_set>
	if (err) {
   1b754:	4604      	mov	r4, r0
   1b756:	2800      	cmp	r0, #0
   1b758:	d0f1      	beq.n	1b73e <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1b75a:	4b08      	ldr	r3, [pc, #32]	; (1b77c <dk_set_led+0x60>)
   1b75c:	9305      	str	r3, [sp, #20]
   1b75e:	4805      	ldr	r0, [pc, #20]	; (1b774 <dk_set_led+0x58>)
   1b760:	2302      	movs	r3, #2
   1b762:	aa04      	add	r2, sp, #16
   1b764:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b768:	9304      	str	r3, [sp, #16]
   1b76a:	f009 fb38 	bl	24dde <z_log_msg_static_create.constprop.0>
   1b76e:	e7e6      	b.n	1b73e <dk_set_led+0x22>
   1b770:	000283f9 	.word	0x000283f9
   1b774:	00025fb0 	.word	0x00025fb0
   1b778:	0002668c 	.word	0x0002668c
   1b77c:	0002834c 	.word	0x0002834c

0001b780 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1b780:	4602      	mov	r2, r0
   1b782:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1b784:	4801      	ldr	r0, [pc, #4]	; (1b78c <multithreading_lock_acquire+0xc>)
   1b786:	f002 b8b1 	b.w	1d8ec <z_impl_k_mutex_lock>
   1b78a:	bf00      	nop
   1b78c:	20000b10 	.word	0x20000b10

0001b790 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1b790:	4801      	ldr	r0, [pc, #4]	; (1b798 <multithreading_lock_release+0x8>)
   1b792:	f002 b925 	b.w	1d9e0 <z_impl_k_mutex_unlock>
   1b796:	bf00      	nop
   1b798:	20000b10 	.word	0x20000b10

0001b79c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1b79c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1b79e:	f7f7 fb2d 	bl	12dfc <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1b7a2:	4b07      	ldr	r3, [pc, #28]	; (1b7c0 <k_sys_fatal_error_handler+0x24>)
   1b7a4:	9305      	str	r3, [sp, #20]
   1b7a6:	2302      	movs	r3, #2
   1b7a8:	9304      	str	r3, [sp, #16]
   1b7aa:	4806      	ldr	r0, [pc, #24]	; (1b7c4 <k_sys_fatal_error_handler+0x28>)
   1b7ac:	2300      	movs	r3, #0
   1b7ae:	aa04      	add	r2, sp, #16
   1b7b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b7b4:	f7f7 fc02 	bl	12fbc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1b7b8:	2000      	movs	r0, #0
   1b7ba:	f7f9 f829 	bl	14810 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1b7be:	bf00      	nop
   1b7c0:	00028428 	.word	0x00028428
   1b7c4:	00025fb8 	.word	0x00025fb8

0001b7c8 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1b7c8:	b598      	push	{r3, r4, r7, lr}
   1b7ca:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1b7cc:	466c      	mov	r4, sp
   1b7ce:	b08a      	sub	sp, #40	; 0x28
   1b7d0:	466a      	mov	r2, sp
   1b7d2:	4b0c      	ldr	r3, [pc, #48]	; (1b804 <sdc_assertion_handler+0x3c>)
   1b7d4:	61d1      	str	r1, [r2, #28]
   1b7d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b7da:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b7de:	8413      	strh	r3, [r2, #32]
   1b7e0:	4b09      	ldr	r3, [pc, #36]	; (1b808 <sdc_assertion_handler+0x40>)
   1b7e2:	f842 3f10 	str.w	r3, [r2, #16]!
   1b7e6:	4809      	ldr	r0, [pc, #36]	; (1b80c <sdc_assertion_handler+0x44>)
   1b7e8:	2300      	movs	r3, #0
   1b7ea:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1b7ee:	f7f7 fbe5 	bl	12fbc <z_impl_z_log_msg_static_create>
   1b7f2:	46a5      	mov	sp, r4
	k_oops();
   1b7f4:	4040      	eors	r0, r0
   1b7f6:	f380 8811 	msr	BASEPRI, r0
   1b7fa:	f04f 0003 	mov.w	r0, #3
   1b7fe:	df02      	svc	2
}
   1b800:	46bd      	mov	sp, r7
   1b802:	bd98      	pop	{r3, r4, r7, pc}
   1b804:	00028445 	.word	0x00028445
   1b808:	01000004 	.word	0x01000004
   1b80c:	00025f90 	.word	0x00025f90

0001b810 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   1b810:	b538      	push	{r3, r4, r5, lr}
   1b812:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1b814:	4807      	ldr	r0, [pc, #28]	; (1b834 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1b816:	6883      	ldr	r3, [r0, #8]
   1b818:	685d      	ldr	r5, [r3, #4]
   1b81a:	460a      	mov	r2, r1
   1b81c:	b135      	cbz	r5, 1b82c <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1b81e:	2300      	movs	r3, #0
   1b820:	4621      	mov	r1, r4
   1b822:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   1b824:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1b828:	b2c0      	uxtb	r0, r0
   1b82a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1b82c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1b830:	e7f8      	b.n	1b824 <rand_prio_low_vector_get+0x14>
   1b832:	bf00      	nop
   1b834:	00025c9c 	.word	0x00025c9c

0001b838 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1b838:	4901      	ldr	r1, [pc, #4]	; (1b840 <receive_signal_raise+0x8>)
   1b83a:	4802      	ldr	r0, [pc, #8]	; (1b844 <receive_signal_raise+0xc>)
   1b83c:	f009 be1f 	b.w	2547e <k_work_submit_to_queue>
   1b840:	20003958 	.word	0x20003958
   1b844:	20002e50 	.word	0x20002e50

0001b848 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1b848:	b410      	push	{r4}
   1b84a:	4603      	mov	r3, r0
   1b84c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1b84e:	4803      	ldr	r0, [pc, #12]	; (1b85c <rand_prio_low_vector_get_blocking+0x14>)
   1b850:	6881      	ldr	r1, [r0, #8]
   1b852:	680c      	ldr	r4, [r1, #0]
   1b854:	4619      	mov	r1, r3
   1b856:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1b858:	bc10      	pop	{r4}
   1b85a:	4718      	bx	r3
   1b85c:	00025c9c 	.word	0x00025c9c

0001b860 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1b860:	b5b0      	push	{r4, r5, r7, lr}
   1b862:	b082      	sub	sp, #8
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1b864:	4835      	ldr	r0, [pc, #212]	; (1b93c <hci_driver_init+0xdc>)
{
   1b866:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1b868:	f7fa f9e6 	bl	15c38 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1b86c:	4834      	ldr	r0, [pc, #208]	; (1b940 <hci_driver_init+0xe0>)
   1b86e:	f7e5 fc7f 	bl	1170 <sdc_init>
		err = sdc_support_adv();
   1b872:	f7e5 fcf7 	bl	1264 <sdc_support_adv>
		if (err) {
   1b876:	b120      	cbz	r0, 1b882 <hci_driver_init+0x22>
			return -ENOTSUP;
   1b878:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1b87c:	3708      	adds	r7, #8
   1b87e:	46bd      	mov	sp, r7
   1b880:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1b882:	f7e5 fd1f 	bl	12c4 <sdc_support_peripheral>
		if (err) {
   1b886:	2800      	cmp	r0, #0
   1b888:	d1f6      	bne.n	1b878 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1b88a:	f7e5 fcfb 	bl	1284 <sdc_support_dle_peripheral>
			if (err) {
   1b88e:	2800      	cmp	r0, #0
   1b890:	d1f2      	bne.n	1b878 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1b892:	f7e5 fd07 	bl	12a4 <sdc_support_le_2m_phy>
		if (err) {
   1b896:	2800      	cmp	r0, #0
   1b898:	d1ee      	bne.n	1b878 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1b89a:	f7e5 fd23 	bl	12e4 <sdc_support_phy_update_peripheral>
			if (err) {
   1b89e:	4604      	mov	r4, r0
   1b8a0:	2800      	cmp	r0, #0
   1b8a2:	d1e9      	bne.n	1b878 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1b8a4:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8a6:	1d3a      	adds	r2, r7, #4
   1b8a8:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1b8aa:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8ac:	f7e5 fbde 	bl	106c <sdc_cfg_set>
	if (required_memory < 0) {
   1b8b0:	2800      	cmp	r0, #0
   1b8b2:	dbe3      	blt.n	1b87c <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1b8b4:	4b23      	ldr	r3, [pc, #140]	; (1b944 <hci_driver_init+0xe4>)
   1b8b6:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8b8:	1d3a      	adds	r2, r7, #4
   1b8ba:	2103      	movs	r1, #3
   1b8bc:	4620      	mov	r0, r4
   1b8be:	f7e5 fbd5 	bl	106c <sdc_cfg_set>
	if (required_memory < 0) {
   1b8c2:	2800      	cmp	r0, #0
   1b8c4:	dbda      	blt.n	1b87c <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1b8c6:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8ca:	1d3a      	adds	r2, r7, #4
   1b8cc:	2104      	movs	r1, #4
   1b8ce:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1b8d0:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8d2:	f7e5 fbcb 	bl	106c <sdc_cfg_set>
	if (required_memory < 0) {
   1b8d6:	2800      	cmp	r0, #0
   1b8d8:	dbd0      	blt.n	1b87c <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8da:	1d3a      	adds	r2, r7, #4
   1b8dc:	2105      	movs	r1, #5
   1b8de:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1b8e0:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8e2:	f7e5 fbc3 	bl	106c <sdc_cfg_set>
	if (required_memory < 0) {
   1b8e6:	2800      	cmp	r0, #0
   1b8e8:	dbc8      	blt.n	1b87c <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1b8ea:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8ec:	1d3a      	adds	r2, r7, #4
   1b8ee:	2107      	movs	r1, #7
   1b8f0:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1b8f2:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1b8f4:	f7e5 fbba 	bl	106c <sdc_cfg_set>
	if (required_memory < 0) {
   1b8f8:	2800      	cmp	r0, #0
   1b8fa:	dbbf      	blt.n	1b87c <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1b8fc:	f240 73dd 	movw	r3, #2013	; 0x7dd
   1b900:	4298      	cmp	r0, r3
   1b902:	dd19      	ble.n	1b938 <hci_driver_init+0xd8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1b904:	466c      	mov	r4, sp
   1b906:	b088      	sub	sp, #32
   1b908:	466a      	mov	r2, sp
   1b90a:	490f      	ldr	r1, [pc, #60]	; (1b948 <hci_driver_init+0xe8>)
   1b90c:	61d0      	str	r0, [r2, #28]
   1b90e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1b912:	2304      	movs	r3, #4
   1b914:	f842 3f10 	str.w	r3, [r2, #16]!
   1b918:	480c      	ldr	r0, [pc, #48]	; (1b94c <hci_driver_init+0xec>)
   1b91a:	2300      	movs	r3, #0
   1b91c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1b920:	f7f7 fb4c 	bl	12fbc <z_impl_z_log_msg_static_create>
   1b924:	46a5      	mov	sp, r4
		k_panic();
   1b926:	4040      	eors	r0, r0
   1b928:	f380 8811 	msr	BASEPRI, r0
   1b92c:	f04f 0004 	mov.w	r0, #4
   1b930:	df02      	svc	2
		return -ENOMEM;
   1b932:	f06f 000b 	mvn.w	r0, #11
   1b936:	e7a1      	b.n	1b87c <hci_driver_init+0x1c>
	return 0;
   1b938:	2000      	movs	r0, #0
	if (err) {
   1b93a:	e79f      	b.n	1b87c <hci_driver_init+0x1c>
   1b93c:	000266cc 	.word	0x000266cc
   1b940:	0001b7c9 	.word	0x0001b7c9
   1b944:	02031b1b 	.word	0x02031b1b
   1b948:	0002846a 	.word	0x0002846a
   1b94c:	00025f90 	.word	0x00025f90

0001b950 <hci_driver_open>:
{
   1b950:	b590      	push	{r4, r7, lr}
   1b952:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1b954:	492f      	ldr	r1, [pc, #188]	; (1ba14 <hci_driver_open+0xc4>)
   1b956:	4830      	ldr	r0, [pc, #192]	; (1ba18 <hci_driver_open+0xc8>)
{
   1b958:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1b95a:	f009 fd63 	bl	25424 <k_work_init>
		hci_ecdh_init();
   1b95e:	f000 fe2d 	bl	1c5bc <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1b962:	1d38      	adds	r0, r7, #4
   1b964:	f7e5 fb74 	bl	1050 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1b968:	466c      	mov	r4, sp
   1b96a:	b088      	sub	sp, #32
   1b96c:	466a      	mov	r2, sp
   1b96e:	4b2b      	ldr	r3, [pc, #172]	; (1ba1c <hci_driver_open+0xcc>)
   1b970:	6153      	str	r3, [r2, #20]
   1b972:	4b2b      	ldr	r3, [pc, #172]	; (1ba20 <hci_driver_open+0xd0>)
   1b974:	6193      	str	r3, [r2, #24]
   1b976:	f44f 7300 	mov.w	r3, #512	; 0x200
   1b97a:	8393      	strh	r3, [r2, #28]
   1b97c:	4b29      	ldr	r3, [pc, #164]	; (1ba24 <hci_driver_open+0xd4>)
   1b97e:	f842 3f10 	str.w	r3, [r2, #16]!
   1b982:	4929      	ldr	r1, [pc, #164]	; (1ba28 <hci_driver_open+0xd8>)
   1b984:	4829      	ldr	r0, [pc, #164]	; (1ba2c <hci_driver_open+0xdc>)
   1b986:	1d3b      	adds	r3, r7, #4
   1b988:	f7f7 fb18 	bl	12fbc <z_impl_z_log_msg_static_create>
   1b98c:	46a5      	mov	sp, r4
   1b98e:	4828      	ldr	r0, [pc, #160]	; (1ba30 <hci_driver_open+0xe0>)
   1b990:	f009 fb42 	bl	25018 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1b994:	4603      	mov	r3, r0
   1b996:	b980      	cbnz	r0, 1b9ba <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1b998:	4a26      	ldr	r2, [pc, #152]	; (1ba34 <hci_driver_open+0xe4>)
   1b99a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1b99c:	2202      	movs	r2, #2
   1b99e:	62ba      	str	r2, [r7, #40]	; 0x28
   1b9a0:	4822      	ldr	r0, [pc, #136]	; (1ba2c <hci_driver_open+0xdc>)
   1b9a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1b9a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1b9aa:	f06f 0412 	mvn.w	r4, #18
   1b9ae:	f7f7 fb05 	bl	12fbc <z_impl_z_log_msg_static_create>
}
   1b9b2:	4620      	mov	r0, r4
   1b9b4:	3734      	adds	r7, #52	; 0x34
   1b9b6:	46bd      	mov	sp, r7
   1b9b8:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1b9ba:	4a1f      	ldr	r2, [pc, #124]	; (1ba38 <hci_driver_open+0xe8>)
   1b9bc:	ca07      	ldmia	r2, {r0, r1, r2}
   1b9be:	f107 0318 	add.w	r3, r7, #24
   1b9c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1b9c6:	4618      	mov	r0, r3
   1b9c8:	f7e5 fce2 	bl	1390 <sdc_rand_source_register>
	if (err) {
   1b9cc:	b188      	cbz	r0, 1b9f2 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1b9ce:	b088      	sub	sp, #32
   1b9d0:	466a      	mov	r2, sp
   1b9d2:	4b1a      	ldr	r3, [pc, #104]	; (1ba3c <hci_driver_open+0xec>)
   1b9d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b9d8:	2303      	movs	r3, #3
   1b9da:	f842 3f10 	str.w	r3, [r2, #16]!
   1b9de:	4813      	ldr	r0, [pc, #76]	; (1ba2c <hci_driver_open+0xdc>)
   1b9e0:	2300      	movs	r3, #0
   1b9e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b9e6:	f7f7 fae9 	bl	12fbc <z_impl_z_log_msg_static_create>
   1b9ea:	46a5      	mov	sp, r4
		return -EINVAL;
   1b9ec:	f06f 0415 	mvn.w	r4, #21
   1b9f0:	e7df      	b.n	1b9b2 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1b9f2:	f04f 30ff 	mov.w	r0, #4294967295
   1b9f6:	f04f 31ff 	mov.w	r1, #4294967295
   1b9fa:	f7ff fec1 	bl	1b780 <multithreading_lock_acquire>
	if (err) {
   1b9fe:	4604      	mov	r4, r0
   1ba00:	2800      	cmp	r0, #0
   1ba02:	d1d6      	bne.n	1b9b2 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1ba04:	490e      	ldr	r1, [pc, #56]	; (1ba40 <hci_driver_open+0xf0>)
   1ba06:	480f      	ldr	r0, [pc, #60]	; (1ba44 <hci_driver_open+0xf4>)
   1ba08:	f7e5 fb88 	bl	111c <sdc_enable>
	if (err) {
   1ba0c:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1ba0e:	f7ff febf 	bl	1b790 <multithreading_lock_release>
	return 0;
   1ba12:	e7ce      	b.n	1b9b2 <hci_driver_open+0x62>
   1ba14:	00024e85 	.word	0x00024e85
   1ba18:	20003958 	.word	0x20003958
   1ba1c:	00027509 	.word	0x00027509
   1ba20:	0002848c 	.word	0x0002848c
   1ba24:	01000003 	.word	0x01000003
   1ba28:	00a01cc0 	.word	0x00a01cc0
   1ba2c:	00025f90 	.word	0x00025f90
   1ba30:	00025c9c 	.word	0x00025c9c
   1ba34:	000284b3 	.word	0x000284b3
   1ba38:	0002605c 	.word	0x0002605c
   1ba3c:	000284d3 	.word	0x000284d3
   1ba40:	200025f0 	.word	0x200025f0
   1ba44:	0001b839 	.word	0x0001b839

0001ba48 <hci_driver_receive_process>:
{
   1ba48:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba4a:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ba4c:	f04f 30ff 	mov.w	r0, #4294967295
{
   1ba50:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ba52:	f04f 31ff 	mov.w	r1, #4294967295
   1ba56:	f7ff fe93 	bl	1b780 <multithreading_lock_acquire>
	if (!errcode) {
   1ba5a:	bb40      	cbnz	r0, 1baae <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1ba5c:	4d33      	ldr	r5, [pc, #204]	; (1bb2c <hci_driver_receive_process+0xe4>)
   1ba5e:	1df9      	adds	r1, r7, #7
   1ba60:	4628      	mov	r0, r5
   1ba62:	f000 fc79 	bl	1c358 <hci_internal_msg_get>
   1ba66:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ba68:	f7ff fe92 	bl	1b790 <multithreading_lock_release>
	if (errcode) {
   1ba6c:	b9fc      	cbnz	r4, 1baae <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1ba6e:	79fe      	ldrb	r6, [r7, #7]
   1ba70:	2e04      	cmp	r6, #4
   1ba72:	d133      	bne.n	1badc <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1ba74:	7828      	ldrb	r0, [r5, #0]
   1ba76:	283e      	cmp	r0, #62	; 0x3e
   1ba78:	d01c      	beq.n	1bab4 <hci_driver_receive_process+0x6c>
   1ba7a:	28ff      	cmp	r0, #255	; 0xff
   1ba7c:	d021      	beq.n	1bac2 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1ba7e:	f04f 32ff 	mov.w	r2, #4294967295
   1ba82:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1ba86:	4621      	mov	r1, r4
   1ba88:	f7f8 ffc4 	bl	14a14 <bt_buf_get_evt>
	if (!evt_buf) {
   1ba8c:	4606      	mov	r6, r0
   1ba8e:	b9d8      	cbnz	r0, 1bac8 <hci_driver_receive_process+0x80>
		if (discardable) {
   1ba90:	b95c      	cbnz	r4, 1baaa <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1ba92:	4b27      	ldr	r3, [pc, #156]	; (1bb30 <hci_driver_receive_process+0xe8>)
   1ba94:	61fb      	str	r3, [r7, #28]
   1ba96:	2302      	movs	r3, #2
   1ba98:	61bb      	str	r3, [r7, #24]
   1ba9a:	4826      	ldr	r0, [pc, #152]	; (1bb34 <hci_driver_receive_process+0xec>)
   1ba9c:	4623      	mov	r3, r4
   1ba9e:	f107 0218 	add.w	r2, r7, #24
   1baa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1baa6:	f7f7 fa89 	bl	12fbc <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1baaa:	f7ff fec5 	bl	1b838 <receive_signal_raise>
}
   1baae:	3724      	adds	r7, #36	; 0x24
   1bab0:	46bd      	mov	sp, r7
   1bab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1bab4:	78ab      	ldrb	r3, [r5, #2]
   1bab6:	2b02      	cmp	r3, #2
		switch (subevent) {
   1bab8:	d1e1      	bne.n	1ba7e <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1baba:	2200      	movs	r2, #0
   1babc:	2300      	movs	r3, #0
			return true;
   1babe:	2401      	movs	r4, #1
   1bac0:	e7e1      	b.n	1ba86 <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1bac2:	78ab      	ldrb	r3, [r5, #2]
   1bac4:	2b80      	cmp	r3, #128	; 0x80
   1bac6:	e7f7      	b.n	1bab8 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1bac8:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1baca:	4918      	ldr	r1, [pc, #96]	; (1bb2c <hci_driver_receive_process+0xe4>)
   1bacc:	3202      	adds	r2, #2
   1bace:	300c      	adds	r0, #12
   1bad0:	f008 fd38 	bl	24544 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1bad4:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1bad6:	f7fa f87b 	bl	15bd0 <bt_recv>
   1bada:	e7e6      	b.n	1baaa <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1badc:	2e02      	cmp	r6, #2
   1bade:	d114      	bne.n	1bb0a <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1bae0:	f04f 32ff 	mov.w	r2, #4294967295
   1bae4:	f04f 33ff 	mov.w	r3, #4294967295
   1bae8:	2003      	movs	r0, #3
   1baea:	f7f8 ff69 	bl	149c0 <bt_buf_get_rx>
	if (!data_buf) {
   1baee:	4604      	mov	r4, r0
   1baf0:	b918      	cbnz	r0, 1bafa <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1baf2:	4b11      	ldr	r3, [pc, #68]	; (1bb38 <hci_driver_receive_process+0xf0>)
   1baf4:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1baf8:	e7cf      	b.n	1ba9a <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1bafa:	886a      	ldrh	r2, [r5, #2]
   1bafc:	4629      	mov	r1, r5
   1bafe:	3204      	adds	r2, #4
   1bb00:	300c      	adds	r0, #12
   1bb02:	f008 fd1f 	bl	24544 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1bb06:	4620      	mov	r0, r4
   1bb08:	e7e5      	b.n	1bad6 <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1bb0a:	466d      	mov	r5, sp
   1bb0c:	b088      	sub	sp, #32
   1bb0e:	466a      	mov	r2, sp
   1bb10:	4b0a      	ldr	r3, [pc, #40]	; (1bb3c <hci_driver_receive_process+0xf4>)
   1bb12:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1bb16:	2303      	movs	r3, #3
   1bb18:	f842 3f10 	str.w	r3, [r2, #16]!
   1bb1c:	4805      	ldr	r0, [pc, #20]	; (1bb34 <hci_driver_receive_process+0xec>)
   1bb1e:	4623      	mov	r3, r4
   1bb20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bb24:	f7f7 fa4a 	bl	12fbc <z_impl_z_log_msg_static_create>
   1bb28:	46ad      	mov	sp, r5
   1bb2a:	e7be      	b.n	1baaa <hci_driver_receive_process+0x62>
   1bb2c:	20004629 	.word	0x20004629
   1bb30:	000284f7 	.word	0x000284f7
   1bb34:	00025f90 	.word	0x00025f90
   1bb38:	00028511 	.word	0x00028511
   1bb3c:	0002852a 	.word	0x0002852a

0001bb40 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1bb40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1bb42:	4cc7      	ldr	r4, [pc, #796]	; (1be60 <hci_internal_cmd_put+0x320>)
   1bb44:	7823      	ldrb	r3, [r4, #0]
{
   1bb46:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	f040 8400 	bne.w	1c34e <hci_internal_cmd_put+0x80e>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1bb4e:	2304      	movs	r3, #4
   1bb50:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1bb54:	4bc3      	ldr	r3, [pc, #780]	; (1be64 <hci_internal_cmd_put+0x324>)
   1bb56:	8806      	ldrh	r6, [r0, #0]
   1bb58:	681f      	ldr	r7, [r3, #0]
   1bb5a:	b1b7      	cbz	r7, 1bb8a <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1bb5c:	f10d 0306 	add.w	r3, sp, #6
   1bb60:	f10d 0207 	add.w	r2, sp, #7
   1bb64:	1c61      	adds	r1, r4, #1
   1bb66:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1bb68:	2801      	cmp	r0, #1
   1bb6a:	d00e      	beq.n	1bb8a <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1bb6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1bb70:	2b00      	cmp	r3, #0
   1bb72:	f040 82c4 	bne.w	1c0fe <hci_internal_cmd_put+0x5be>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1bb76:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1bb7a:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1bb7c:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1bb7e:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1bb80:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1bb82:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1bb84:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1bb86:	71a0      	strb	r0, [r4, #6]
}
   1bb88:	e2c2      	b.n	1c110 <hci_internal_cmd_put+0x5d0>
		switch (BT_OGF(opcode)) {
   1bb8a:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1bb8e:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1bb92:	d20f      	bcs.n	1bbb4 <hci_internal_cmd_put+0x74>
   1bb94:	2b00      	cmp	r3, #0
   1bb96:	d057      	beq.n	1bc48 <hci_internal_cmd_put+0x108>
   1bb98:	3b01      	subs	r3, #1
   1bb9a:	2b07      	cmp	r3, #7
   1bb9c:	f200 83be 	bhi.w	1c31c <hci_internal_cmd_put+0x7dc>
   1bba0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1bba4:	03bc000d 	.word	0x03bc000d
   1bba8:	0082003e 	.word	0x0082003e
   1bbac:	03bc03bc 	.word	0x03bc03bc
   1bbb0:	013903bc 	.word	0x013903bc
   1bbb4:	2b3f      	cmp	r3, #63	; 0x3f
   1bbb6:	f000 82ef 	beq.w	1c198 <hci_internal_cmd_put+0x658>
	switch (opcode)	{
   1bbba:	2001      	movs	r0, #1
   1bbbc:	e346      	b.n	1c24c <hci_internal_cmd_put+0x70c>
	return ((uint16_t)src[1] << 8) | src[0];
   1bbbe:	4628      	mov	r0, r5
	switch (opcode)	{
   1bbc0:	f240 4206 	movw	r2, #1030	; 0x406
   1bbc4:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1bbc8:	4293      	cmp	r3, r2
   1bbca:	d00f      	beq.n	1bbec <hci_internal_cmd_put+0xac>
   1bbcc:	f240 421d 	movw	r2, #1053	; 0x41d
   1bbd0:	4293      	cmp	r3, r2
   1bbd2:	d022      	beq.n	1bc1a <hci_internal_cmd_put+0xda>
   1bbd4:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1bbd6:	f240 4306 	movw	r3, #1030	; 0x406
   1bbda:	429e      	cmp	r6, r3
   1bbdc:	f000 828f 	beq.w	1c0fe <hci_internal_cmd_put+0x5be>
   1bbe0:	f240 431d 	movw	r3, #1053	; 0x41d
   1bbe4:	429e      	cmp	r6, r3
   1bbe6:	f000 828a 	beq.w	1c0fe <hci_internal_cmd_put+0x5be>
   1bbea:	e042      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1bbec:	f7f1 fab4 	bl	d158 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1bbf0:	f242 0332 	movw	r3, #8242	; 0x2032
   1bbf4:	429e      	cmp	r6, r3
   1bbf6:	f240 838b 	bls.w	1c310 <hci_internal_cmd_put+0x7d0>
   1bbfa:	f242 0385 	movw	r3, #8325	; 0x2085
   1bbfe:	429e      	cmp	r6, r3
   1bc00:	d837      	bhi.n	1bc72 <hci_internal_cmd_put+0x132>
   1bc02:	f242 036c 	movw	r3, #8300	; 0x206c
   1bc06:	429e      	cmp	r6, r3
   1bc08:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1bc0c:	f200 838a 	bhi.w	1c324 <hci_internal_cmd_put+0x7e4>
   1bc10:	3b03      	subs	r3, #3
   1bc12:	b29b      	uxth	r3, r3
   1bc14:	2b01      	cmp	r3, #1
   1bc16:	d82c      	bhi.n	1bc72 <hci_internal_cmd_put+0x132>
   1bc18:	e271      	b.n	1c0fe <hci_internal_cmd_put+0x5be>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1bc1a:	f7f1 fa9f 	bl	d15c <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1bc1e:	e7e7      	b.n	1bbf0 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1bc20:	4628      	mov	r0, r5
	switch (opcode)	{
   1bc22:	f640 4263 	movw	r2, #3171	; 0xc63
   1bc26:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1bc2a:	4293      	cmp	r3, r2
   1bc2c:	d030      	beq.n	1bc90 <hci_internal_cmd_put+0x150>
   1bc2e:	dc0d      	bgt.n	1bc4c <hci_internal_cmd_put+0x10c>
   1bc30:	f640 4203 	movw	r2, #3075	; 0xc03
   1bc34:	4293      	cmp	r3, r2
   1bc36:	d01f      	beq.n	1bc78 <hci_internal_cmd_put+0x138>
   1bc38:	f640 422d 	movw	r2, #3117	; 0xc2d
   1bc3c:	4293      	cmp	r3, r2
   1bc3e:	d01e      	beq.n	1bc7e <hci_internal_cmd_put+0x13e>
   1bc40:	f640 4201 	movw	r2, #3073	; 0xc01
   1bc44:	4293      	cmp	r3, r2
   1bc46:	d012      	beq.n	1bc6e <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   1bc48:	2001      	movs	r0, #1
   1bc4a:	e258      	b.n	1c0fe <hci_internal_cmd_put+0x5be>
	switch (opcode)	{
   1bc4c:	f640 427b 	movw	r2, #3195	; 0xc7b
   1bc50:	4293      	cmp	r3, r2
   1bc52:	d020      	beq.n	1bc96 <hci_internal_cmd_put+0x156>
   1bc54:	f640 427c 	movw	r2, #3196	; 0xc7c
   1bc58:	4293      	cmp	r3, r2
   1bc5a:	d1f5      	bne.n	1bc48 <hci_internal_cmd_put+0x108>
		*param_length_out +=
   1bc5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1bc60:	4981      	ldr	r1, [pc, #516]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1bc62:	3302      	adds	r3, #2
   1bc64:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1bc68:	f7f1 f968 	bl	cf3c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1bc6c:	e001      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1bc6e:	f7f1 f95b 	bl	cf28 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1bc72:	2801      	cmp	r0, #1
   1bc74:	d0e8      	beq.n	1bc48 <hci_internal_cmd_put+0x108>
   1bc76:	e77e      	b.n	1bb76 <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   1bc78:	f7e5 fc90 	bl	159c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1bc7c:	e7f9      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1bc7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1bc82:	4979      	ldr	r1, [pc, #484]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1bc84:	3303      	adds	r3, #3
   1bc86:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1bc8a:	f7f1 f94b 	bl	cf24 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1bc8e:	e7f0      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1bc90:	f7f1 f94f 	bl	cf32 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1bc94:	e7ed      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		*param_length_out +=
   1bc96:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1bc9a:	4973      	ldr	r1, [pc, #460]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1bc9c:	3304      	adds	r3, #4
   1bc9e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1bca2:	f7f1 f93d 	bl	cf20 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1bca6:	e7e4      	b.n	1bc72 <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   1bca8:	882b      	ldrh	r3, [r5, #0]
   1bcaa:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1bcae:	3b01      	subs	r3, #1
   1bcb0:	2b08      	cmp	r3, #8
   1bcb2:	d8c9      	bhi.n	1bc48 <hci_internal_cmd_put+0x108>
   1bcb4:	a201      	add	r2, pc, #4	; (adr r2, 1bcbc <hci_internal_cmd_put+0x17c>)
   1bcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bcba:	bf00      	nop
   1bcbc:	0001bce1 	.word	0x0001bce1
   1bcc0:	0001bcf3 	.word	0x0001bcf3
   1bcc4:	0001bde3 	.word	0x0001bde3
   1bcc8:	0001bc49 	.word	0x0001bc49
   1bccc:	0001bc49 	.word	0x0001bc49
   1bcd0:	0001bc49 	.word	0x0001bc49
   1bcd4:	0001bc49 	.word	0x0001bc49
   1bcd8:	0001bc49 	.word	0x0001bc49
   1bcdc:	0001be05 	.word	0x0001be05
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1bce0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1bce4:	4860      	ldr	r0, [pc, #384]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1bce6:	3308      	adds	r3, #8
   1bce8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1bcec:	f7f1 f9f5 	bl	d0da <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1bcf0:	e7bf      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1bcf2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1bcf6:	485c      	ldr	r0, [pc, #368]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1bcf8:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1bcfa:	2230      	movs	r2, #48	; 0x30
   1bcfc:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1bcfe:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1bd02:	f007 f862 	bl	22dca <memset>
	cmds->hci_disconnect = 1;
   1bd06:	79e3      	ldrb	r3, [r4, #7]
   1bd08:	f043 0320 	orr.w	r3, r3, #32
   1bd0c:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1bd0e:	7a63      	ldrb	r3, [r4, #9]
   1bd10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bd14:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1bd16:	7b23      	ldrb	r3, [r4, #12]
   1bd18:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1bd1c:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1bd1e:	7c63      	ldrb	r3, [r4, #17]
   1bd20:	f043 0304 	orr.w	r3, r3, #4
   1bd24:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1bd26:	7d63      	ldrb	r3, [r4, #21]
   1bd28:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1bd2c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1bd30:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1bd32:	7da3      	ldrb	r3, [r4, #22]
   1bd34:	f043 0302 	orr.w	r3, r3, #2
   1bd38:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1bd3a:	7f63      	ldrb	r3, [r4, #29]
   1bd3c:	f043 0304 	orr.w	r3, r3, #4
   1bd40:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1bd42:	f894 3020 	ldrb.w	r3, [r4, #32]
   1bd46:	f063 0308 	orn	r3, r3, #8
   1bd4a:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1bd4e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1bd52:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1bd56:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1bd5a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1bd5e:	f063 030c 	orn	r3, r3, #12
   1bd62:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1bd66:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1bd6a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1bd6e:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1bd72:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1bd76:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1bd7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1bd7e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1bd82:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1bd86:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1bd8a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1bd8e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1bd92:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1bd96:	f023 0307 	bic.w	r3, r3, #7
   1bd9a:	f043 0307 	orr.w	r3, r3, #7
   1bd9e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1bda2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1bda6:	f063 0307 	orn	r3, r3, #7
   1bdaa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1bdae:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1bdb2:	f043 0301 	orr.w	r3, r3, #1
   1bdb6:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1bdba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1bdbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1bdc2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1bdc6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1bdca:	f043 0304 	orr.w	r3, r3, #4
   1bdce:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1bdd2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1bdd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bdda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		return 0;
   1bdde:	2000      	movs	r0, #0
   1bde0:	e6c9      	b.n	1bb76 <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1bde2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1bde6:	4820      	ldr	r0, [pc, #128]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1bde8:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1bdea:	2208      	movs	r2, #8
   1bdec:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1bdee:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1bdf2:	f006 ffea 	bl	22dca <memset>
	features->bdedr_not_supported = 1;
   1bdf6:	7ae3      	ldrb	r3, [r4, #11]
   1bdf8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1bdfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1be00:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   1be02:	e7ec      	b.n	1bdde <hci_internal_cmd_put+0x29e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1be04:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1be08:	4817      	ldr	r0, [pc, #92]	; (1be68 <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1be0a:	3306      	adds	r3, #6
   1be0c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1be10:	f7f1 f961 	bl	d0d6 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1be14:	e72d      	b.n	1bc72 <hci_internal_cmd_put+0x132>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1be16:	4628      	mov	r0, r5
	switch (opcode)	{
   1be18:	f242 014b 	movw	r1, #8267	; 0x204b
   1be1c:	f830 3b03 	ldrh.w	r3, [r0], #3
   1be20:	b21a      	sxth	r2, r3
   1be22:	428a      	cmp	r2, r1
   1be24:	f300 80c2 	bgt.w	1bfac <hci_internal_cmd_put+0x46c>
   1be28:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1be2c:	f242 0232 	movw	r2, #8242	; 0x2032
   1be30:	dc1e      	bgt.n	1be70 <hci_internal_cmd_put+0x330>
	switch (hci_opcode) {
   1be32:	4296      	cmp	r6, r2
   1be34:	f43f af08 	beq.w	1bc48 <hci_internal_cmd_put+0x108>
   1be38:	f200 8283 	bhi.w	1c342 <hci_internal_cmd_put+0x802>
   1be3c:	f242 0326 	movw	r3, #8230	; 0x2026
   1be40:	429e      	cmp	r6, r3
   1be42:	f63f af01 	bhi.w	1bc48 <hci_internal_cmd_put+0x108>
   1be46:	2001      	movs	r0, #1
   1be48:	f242 030c 	movw	r3, #8204	; 0x200c
   1be4c:	429e      	cmp	r6, r3
   1be4e:	f67f aec2 	bls.w	1bbd6 <hci_internal_cmd_put+0x96>
   1be52:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1be56:	3b0d      	subs	r3, #13
   1be58:	4a04      	ldr	r2, [pc, #16]	; (1be6c <hci_internal_cmd_put+0x32c>)
   1be5a:	b29b      	uxth	r3, r3
   1be5c:	e265      	b.n	1c32a <hci_internal_cmd_put+0x7ea>
   1be5e:	bf00      	nop
   1be60:	2000466f 	.word	0x2000466f
   1be64:	20003968 	.word	0x20003968
   1be68:	20004676 	.word	0x20004676
   1be6c:	03001241 	.word	0x03001241
	switch (opcode)	{
   1be70:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1be74:	3b01      	subs	r3, #1
   1be76:	2b4a      	cmp	r3, #74	; 0x4a
   1be78:	d8db      	bhi.n	1be32 <hci_internal_cmd_put+0x2f2>
   1be7a:	a101      	add	r1, pc, #4	; (adr r1, 1be80 <hci_internal_cmd_put+0x340>)
   1be7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1be80:	0001bfc7 	.word	0x0001bfc7
   1be84:	0001bfd7 	.word	0x0001bfd7
   1be88:	0001bfe9 	.word	0x0001bfe9
   1be8c:	0001be33 	.word	0x0001be33
   1be90:	0001c02f 	.word	0x0001c02f
   1be94:	0001c035 	.word	0x0001c035
   1be98:	0001c03b 	.word	0x0001c03b
   1be9c:	0001c04d 	.word	0x0001c04d
   1bea0:	0001c053 	.word	0x0001c053
   1bea4:	0001c059 	.word	0x0001c059
   1bea8:	0001be33 	.word	0x0001be33
   1beac:	0001be33 	.word	0x0001be33
   1beb0:	0001be33 	.word	0x0001be33
   1beb4:	0001be33 	.word	0x0001be33
   1beb8:	0001c065 	.word	0x0001c065
   1bebc:	0001c077 	.word	0x0001c077
   1bec0:	0001c07d 	.word	0x0001c07d
   1bec4:	0001c083 	.word	0x0001c083
   1bec8:	0001be33 	.word	0x0001be33
   1becc:	0001be33 	.word	0x0001be33
   1bed0:	0001c089 	.word	0x0001c089
   1bed4:	0001c09b 	.word	0x0001c09b
   1bed8:	0001c0a1 	.word	0x0001c0a1
   1bedc:	0001c0b3 	.word	0x0001c0b3
   1bee0:	0001be33 	.word	0x0001be33
   1bee4:	0001c0c5 	.word	0x0001c0c5
   1bee8:	0001c0d7 	.word	0x0001c0d7
   1beec:	0001c0e9 	.word	0x0001c0e9
   1bef0:	0001be33 	.word	0x0001be33
   1bef4:	0001be33 	.word	0x0001be33
   1bef8:	0001be33 	.word	0x0001be33
   1befc:	0001be33 	.word	0x0001be33
   1bf00:	0001be33 	.word	0x0001be33
   1bf04:	0001c11b 	.word	0x0001c11b
   1bf08:	0001c12d 	.word	0x0001c12d
   1bf0c:	0001c13f 	.word	0x0001c13f
   1bf10:	0001c145 	.word	0x0001c145
   1bf14:	0001c14b 	.word	0x0001c14b
   1bf18:	0001be33 	.word	0x0001be33
   1bf1c:	0001be33 	.word	0x0001be33
   1bf20:	0001be33 	.word	0x0001be33
   1bf24:	0001be33 	.word	0x0001be33
   1bf28:	0001be33 	.word	0x0001be33
   1bf2c:	0001be33 	.word	0x0001be33
   1bf30:	0001be33 	.word	0x0001be33
   1bf34:	0001be33 	.word	0x0001be33
   1bf38:	0001c157 	.word	0x0001c157
   1bf3c:	0001c169 	.word	0x0001c169
   1bf40:	0001c17b 	.word	0x0001c17b
   1bf44:	0001c181 	.word	0x0001c181
   1bf48:	0001be33 	.word	0x0001be33
   1bf4c:	0001be33 	.word	0x0001be33
   1bf50:	0001be33 	.word	0x0001be33
   1bf54:	0001be33 	.word	0x0001be33
   1bf58:	0001be33 	.word	0x0001be33
   1bf5c:	0001be33 	.word	0x0001be33
   1bf60:	0001be33 	.word	0x0001be33
   1bf64:	0001be33 	.word	0x0001be33
   1bf68:	0001be33 	.word	0x0001be33
   1bf6c:	0001be33 	.word	0x0001be33
   1bf70:	0001be33 	.word	0x0001be33
   1bf74:	0001be33 	.word	0x0001be33
   1bf78:	0001be33 	.word	0x0001be33
   1bf7c:	0001be33 	.word	0x0001be33
   1bf80:	0001be33 	.word	0x0001be33
   1bf84:	0001be33 	.word	0x0001be33
   1bf88:	0001be33 	.word	0x0001be33
   1bf8c:	0001be33 	.word	0x0001be33
   1bf90:	0001be33 	.word	0x0001be33
   1bf94:	0001be33 	.word	0x0001be33
   1bf98:	0001be33 	.word	0x0001be33
   1bf9c:	0001be33 	.word	0x0001be33
   1bfa0:	0001be33 	.word	0x0001be33
   1bfa4:	0001be33 	.word	0x0001be33
   1bfa8:	0001c187 	.word	0x0001c187
   1bfac:	f242 035e 	movw	r3, #8286	; 0x205e
   1bfb0:	429a      	cmp	r2, r3
   1bfb2:	f000 80cd 	beq.w	1c150 <hci_internal_cmd_put+0x610>
   1bfb6:	f242 037c 	movw	r3, #8316	; 0x207c
   1bfba:	429a      	cmp	r2, r3
   1bfbc:	d04f      	beq.n	1c05e <hci_internal_cmd_put+0x51e>
	switch (hci_opcode) {
   1bfbe:	f242 0332 	movw	r3, #8242	; 0x2032
   1bfc2:	429e      	cmp	r6, r3
   1bfc4:	e736      	b.n	1be34 <hci_internal_cmd_put+0x2f4>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1bfc6:	f7f1 f8ba 	bl	d13e <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1bfca:	f242 0332 	movw	r3, #8242	; 0x2032
   1bfce:	429e      	cmp	r6, r3
   1bfd0:	f47f ae0e 	bne.w	1bbf0 <hci_internal_cmd_put+0xb0>
   1bfd4:	e093      	b.n	1c0fe <hci_internal_cmd_put+0x5be>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1bfd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1bfda:	48d1      	ldr	r0, [pc, #836]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1bfdc:	3303      	adds	r3, #3
   1bfde:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1bfe2:	f7f1 f88e 	bl	d102 <sdc_hci_cmd_le_read_buffer_size>
   1bfe6:	e7f0      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1bfe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1bfec:	48cc      	ldr	r0, [pc, #816]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1bfee:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1bff0:	2208      	movs	r2, #8
   1bff2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1bff4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1bff8:	f006 fee7 	bl	22dca <memset>
	features->params.le_encryption = 1;
   1bffc:	79e3      	ldrb	r3, [r4, #7]
   1bffe:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1c002:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1c006:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1c008:	7a23      	ldrb	r3, [r4, #8]
   1c00a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1c00e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1c012:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1c014:	f242 0332 	movw	r3, #8242	; 0x2032
   1c018:	429e      	cmp	r6, r3
   1c01a:	d06f      	beq.n	1c0fc <hci_internal_cmd_put+0x5bc>
   1c01c:	f200 818b 	bhi.w	1c336 <hci_internal_cmd_put+0x7f6>
   1c020:	f242 0326 	movw	r3, #8230	; 0x2026
   1c024:	429e      	cmp	r6, r3
   1c026:	f63f aeda 	bhi.w	1bdde <hci_internal_cmd_put+0x29e>
		return 0;
   1c02a:	2000      	movs	r0, #0
   1c02c:	e70c      	b.n	1be48 <hci_internal_cmd_put+0x308>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1c02e:	f7f1 f88d 	bl	d14c <sdc_hci_cmd_le_set_random_address>
   1c032:	e7ca      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1c034:	f7f1 f87b 	bl	d12e <sdc_hci_cmd_le_set_adv_params>
   1c038:	e7c7      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1c03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1c03e:	48b8      	ldr	r0, [pc, #736]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1c040:	3301      	adds	r3, #1
   1c042:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1c046:	f7f1 f85a 	bl	d0fe <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1c04a:	e7be      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1c04c:	f7f1 f86b 	bl	d126 <sdc_hci_cmd_le_set_adv_data>
   1c050:	e7bb      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1c052:	f7f1 f87d 	bl	d150 <sdc_hci_cmd_le_set_scan_response_data>
   1c056:	e7b8      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1c058:	f7f1 f867 	bl	d12a <sdc_hci_cmd_le_set_adv_enable>
   1c05c:	e7b5      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1c05e:	f7f1 f86a 	bl	d136 <sdc_hci_cmd_le_set_data_related_address_changes>
   1c062:	e7b2      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1c064:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1c068:	48ad      	ldr	r0, [pc, #692]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1c06a:	3301      	adds	r3, #1
   1c06c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1c070:	f7f1 f84b 	bl	d10a <sdc_hci_cmd_le_read_filter_accept_list_size>
   1c074:	e7a9      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1c076:	f7f1 f834 	bl	d0e2 <sdc_hci_cmd_le_clear_filter_accept_list>
   1c07a:	e7a6      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1c07c:	f7f1 f82f 	bl	d0de <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1c080:	e7a3      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1c082:	f7f1 f84e 	bl	d122 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1c086:	e7a0      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1c088:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c08c:	49a4      	ldr	r1, [pc, #656]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1c08e:	3307      	adds	r3, #7
   1c090:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1c094:	f7f1 f837 	bl	d106 <sdc_hci_cmd_le_read_channel_map>
   1c098:	e797      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1c09a:	f7f1 f83c 	bl	d116 <sdc_hci_cmd_le_read_remote_features>
   1c09e:	e794      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1c0a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c0a4:	499e      	ldr	r1, [pc, #632]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1c0a6:	3310      	adds	r3, #16
   1c0a8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1c0ac:	f7f1 f81b 	bl	d0e6 <sdc_hci_cmd_le_encrypt>
   1c0b0:	e78b      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1c0b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1c0b6:	489a      	ldr	r0, [pc, #616]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1c0b8:	3308      	adds	r3, #8
   1c0ba:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1c0be:	f7f1 f81c 	bl	d0fa <sdc_hci_cmd_le_rand>
   1c0c2:	e782      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1c0c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1c0c8:	4995      	ldr	r1, [pc, #596]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1c0ca:	3302      	adds	r3, #2
   1c0cc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1c0d0:	f7f1 f80f 	bl	d0f2 <sdc_hci_cmd_le_long_term_key_request_reply>
   1c0d4:	e779      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1c0d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1c0da:	4991      	ldr	r1, [pc, #580]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1c0dc:	3302      	adds	r3, #2
   1c0de:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1c0e2:	f7f1 f802 	bl	d0ea <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1c0e6:	e770      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1c0e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c0ec:	3308      	adds	r3, #8
   1c0ee:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1c0f2:	238f      	movs	r3, #143	; 0x8f
   1c0f4:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1c0f6:	23c0      	movs	r3, #192	; 0xc0
   1c0f8:	72e3      	strb	r3, [r4, #11]
   1c0fa:	e78b      	b.n	1c014 <hci_internal_cmd_put+0x4d4>
		return 0;
   1c0fc:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1c0fe:	230f      	movs	r3, #15
   1c100:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1c102:	2304      	movs	r3, #4
   1c104:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1c106:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1c108:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1c10a:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1c10c:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1c110:	2301      	movs	r3, #1
   1c112:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1c114:	2000      	movs	r0, #0
}
   1c116:	b003      	add	sp, #12
   1c118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1c11a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1c11e:	4980      	ldr	r1, [pc, #512]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1c120:	3302      	adds	r3, #2
   1c122:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1c126:	f7f1 f804 	bl	d132 <sdc_hci_cmd_le_set_data_length>
   1c12a:	e74e      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out +=
   1c12c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1c130:	487b      	ldr	r0, [pc, #492]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1c132:	3304      	adds	r3, #4
   1c134:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1c138:	f7f0 ffef 	bl	d11a <sdc_hci_cmd_le_read_suggested_default_data_length>
   1c13c:	e745      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1c13e:	f7f1 f809 	bl	d154 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1c142:	e742      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_read_local_p256_public_key();
   1c144:	f000 fa6a 	bl	1c61c <hci_cmd_le_read_local_p256_public_key>
   1c148:	e73f      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1c14a:	f008 fea7 	bl	24e9c <hci_cmd_le_generate_dhkey>
   1c14e:	e73c      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1c150:	f008 fea7 	bl	24ea2 <hci_cmd_le_generate_dhkey_v2>
   1c154:	e739      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1c156:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1c15a:	4871      	ldr	r0, [pc, #452]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1c15c:	3308      	adds	r3, #8
   1c15e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1c162:	f7f0 ffd4 	bl	d10e <sdc_hci_cmd_le_read_max_data_length>
   1c166:	e730      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1c168:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1c16c:	496c      	ldr	r1, [pc, #432]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1c16e:	3304      	adds	r3, #4
   1c170:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1c174:	f7f0 ffcd 	bl	d112 <sdc_hci_cmd_le_read_phy>
   1c178:	e727      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1c17a:	f7f0 ffde 	bl	d13a <sdc_hci_cmd_le_set_default_phy>
   1c17e:	e724      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1c180:	f7f0 ffe2 	bl	d148 <sdc_hci_cmd_le_set_phy>
   1c184:	e721      	b.n	1bfca <hci_internal_cmd_put+0x48a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1c186:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1c18a:	4865      	ldr	r0, [pc, #404]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1c18c:	3302      	adds	r3, #2
   1c18e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1c192:	f7f0 ffc4 	bl	d11e <sdc_hci_cmd_le_read_transmit_power>
   1c196:	e718      	b.n	1bfca <hci_internal_cmd_put+0x48a>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1c198:	4628      	mov	r0, r5
	switch (opcode)	{
   1c19a:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1c19e:	f830 3b03 	ldrh.w	r3, [r0], #3
   1c1a2:	4293      	cmp	r3, r2
   1c1a4:	d822      	bhi.n	1c1ec <hci_internal_cmd_put+0x6ac>
   1c1a6:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1c1aa:	f67f ad06 	bls.w	1bbba <hci_internal_cmd_put+0x7a>
   1c1ae:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1c1b2:	3b01      	subs	r3, #1
   1c1b4:	2b0a      	cmp	r3, #10
   1c1b6:	f63f ad00 	bhi.w	1bbba <hci_internal_cmd_put+0x7a>
   1c1ba:	a201      	add	r2, pc, #4	; (adr r2, 1c1c0 <hci_internal_cmd_put+0x680>)
   1c1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c1c0:	0001c23d 	.word	0x0001c23d
   1c1c4:	0001c259 	.word	0x0001c259
   1c1c8:	0001bbbb 	.word	0x0001bbbb
   1c1cc:	0001bbbb 	.word	0x0001bbbb
   1c1d0:	0001bbbb 	.word	0x0001bbbb
   1c1d4:	0001c2ad 	.word	0x0001c2ad
   1c1d8:	0001bbbb 	.word	0x0001bbbb
   1c1dc:	0001bbbb 	.word	0x0001bbbb
   1c1e0:	0001c289 	.word	0x0001c289
   1c1e4:	0001c29b 	.word	0x0001c29b
   1c1e8:	0001c2b3 	.word	0x0001c2b3
   1c1ec:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1c1f0:	b292      	uxth	r2, r2
   1c1f2:	2a0c      	cmp	r2, #12
   1c1f4:	f63f ace1 	bhi.w	1bbba <hci_internal_cmd_put+0x7a>
   1c1f8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1c1fc:	2b0c      	cmp	r3, #12
   1c1fe:	f63f acdc 	bhi.w	1bbba <hci_internal_cmd_put+0x7a>
   1c202:	a201      	add	r2, pc, #4	; (adr r2, 1c208 <hci_internal_cmd_put+0x6c8>)
   1c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c208:	0001c2c5 	.word	0x0001c2c5
   1c20c:	0001c2e7 	.word	0x0001c2e7
   1c210:	0001c2ed 	.word	0x0001c2ed
   1c214:	0001c2f3 	.word	0x0001c2f3
   1c218:	0001c2f9 	.word	0x0001c2f9
   1c21c:	0001c2ff 	.word	0x0001c2ff
   1c220:	0001bbbb 	.word	0x0001bbbb
   1c224:	0001bbbb 	.word	0x0001bbbb
   1c228:	0001bbbb 	.word	0x0001bbbb
   1c22c:	0001c305 	.word	0x0001c305
   1c230:	0001bbbb 	.word	0x0001bbbb
   1c234:	0001bbbb 	.word	0x0001bbbb
   1c238:	0001c30b 	.word	0x0001c30b
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1c23c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1c240:	4837      	ldr	r0, [pc, #220]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1c242:	330c      	adds	r3, #12
   1c244:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1c248:	f7e5 f9bc 	bl	15c4 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1c24c:	f026 0308 	bic.w	r3, r6, #8
   1c250:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1c254:	4293      	cmp	r3, r2
   1c256:	e4c6      	b.n	1bbe6 <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1c258:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c25c:	4830      	ldr	r0, [pc, #192]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1c25e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1c260:	2202      	movs	r2, #2
   1c262:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1c264:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c268:	f006 fdaf 	bl	22dca <memset>
	cmds->read_version_info = 1;
   1c26c:	79e3      	ldrb	r3, [r4, #7]
   1c26e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1c272:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1c276:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1c278:	7a23      	ldrb	r3, [r4, #8]
   1c27a:	f023 0307 	bic.w	r3, r3, #7
   1c27e:	f043 0307 	orr.w	r3, r3, #7
   1c282:	7223      	strb	r3, [r4, #8]
		return 0;
   1c284:	2000      	movs	r0, #0
   1c286:	e7e1      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1c288:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1c28c:	4824      	ldr	r0, [pc, #144]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1c28e:	3317      	adds	r3, #23
   1c290:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1c294:	f7f0 fece 	bl	d034 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1c298:	e7d8      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		*param_length_out +=
   1c29a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1c29e:	4820      	ldr	r0, [pc, #128]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out +=
   1c2a0:	3320      	adds	r3, #32
   1c2a2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1c2a6:	f7f0 fe78 	bl	cf9a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1c2aa:	e7cf      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1c2ac:	f7f0 ff11 	bl	d0d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1c2b0:	e7cc      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1c2b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1c2b6:	481a      	ldr	r0, [pc, #104]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1c2b8:	3301      	adds	r3, #1
   1c2ba:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1c2be:	f7f0 fe58 	bl	cf72 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1c2c2:	e7c3      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1c2c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c2c8:	4815      	ldr	r0, [pc, #84]	; (1c320 <hci_internal_cmd_put+0x7e0>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1c2ca:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1c2cc:	2202      	movs	r2, #2
   1c2ce:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1c2d0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1c2d4:	f006 fd79 	bl	22dca <memset>
	cmds->read_supported_vs_commands = 1;
   1c2d8:	79e3      	ldrb	r3, [r4, #7]
   1c2da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1c2de:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1c2e2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1c2e4:	e7ce      	b.n	1c284 <hci_internal_cmd_put+0x744>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1c2e6:	f7f0 fe37 	bl	cf58 <sdc_hci_cmd_vs_llpm_mode_set>
   1c2ea:	e7af      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1c2ec:	f7f0 fe30 	bl	cf50 <sdc_hci_cmd_vs_conn_update>
   1c2f0:	e7ac      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1c2f2:	f7f0 fe25 	bl	cf40 <sdc_hci_cmd_vs_conn_event_extend>
   1c2f6:	e7a9      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1c2f8:	f7f0 fe34 	bl	cf64 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1c2fc:	e7a6      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1c2fe:	f7f0 fe29 	bl	cf54 <sdc_hci_cmd_vs_event_length_set>
   1c302:	e7a3      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1c304:	f7f0 fe2a 	bl	cf5c <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1c308:	e7a0      	b.n	1c24c <hci_internal_cmd_put+0x70c>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1c30a:	f7f0 fe30 	bl	cf6e <sdc_hci_cmd_vs_set_adv_randomness>
   1c30e:	e79d      	b.n	1c24c <hci_internal_cmd_put+0x70c>
	switch (hci_opcode) {
   1c310:	f242 0326 	movw	r3, #8230	; 0x2026
   1c314:	429e      	cmp	r6, r3
   1c316:	f67f ad97 	bls.w	1be48 <hci_internal_cmd_put+0x308>
   1c31a:	e4aa      	b.n	1bc72 <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   1c31c:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1c31e:	e4a8      	b.n	1bc72 <hci_internal_cmd_put+0x132>
   1c320:	20004676 	.word	0x20004676
	switch (hci_opcode) {
   1c324:	3b2d      	subs	r3, #45	; 0x2d
   1c326:	4a0b      	ldr	r2, [pc, #44]	; (1c354 <hci_internal_cmd_put+0x814>)
   1c328:	b29b      	uxth	r3, r3
   1c32a:	fa22 f303 	lsr.w	r3, r2, r3
   1c32e:	07db      	lsls	r3, r3, #31
   1c330:	f57f ac9f 	bpl.w	1bc72 <hci_internal_cmd_put+0x132>
   1c334:	e6e3      	b.n	1c0fe <hci_internal_cmd_put+0x5be>
   1c336:	f242 0385 	movw	r3, #8325	; 0x2085
   1c33a:	429e      	cmp	r6, r3
   1c33c:	d905      	bls.n	1c34a <hci_internal_cmd_put+0x80a>
		return 0;
   1c33e:	2000      	movs	r0, #0
   1c340:	e497      	b.n	1bc72 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   1c342:	f242 0385 	movw	r3, #8325	; 0x2085
   1c346:	2001      	movs	r0, #1
   1c348:	e459      	b.n	1bbfe <hci_internal_cmd_put+0xbe>
		return 0;
   1c34a:	2000      	movs	r0, #0
   1c34c:	e459      	b.n	1bc02 <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   1c34e:	f04f 30ff 	mov.w	r0, #4294967295
   1c352:	e6e0      	b.n	1c116 <hci_internal_cmd_put+0x5d6>
   1c354:	01000401 	.word	0x01000401

0001c358 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1c358:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1c35a:	4c09      	ldr	r4, [pc, #36]	; (1c380 <hci_internal_msg_get+0x28>)
   1c35c:	7823      	ldrb	r3, [r4, #0]
{
   1c35e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1c360:	b91b      	cbnz	r3, 1c36a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1c362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1c366:	f7f0 bdcb 	b.w	cf00 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1c36a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1c36c:	1c61      	adds	r1, r4, #1
   1c36e:	3202      	adds	r2, #2
   1c370:	f006 fd20 	bl	22db4 <memcpy>
		cmd_complete_or_status.occurred = false;
   1c374:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1c376:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1c378:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1c37a:	702b      	strb	r3, [r5, #0]
}
   1c37c:	bd38      	pop	{r3, r4, r5, pc}
   1c37e:	bf00      	nop
   1c380:	2000466f 	.word	0x2000466f

0001c384 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1c384:	b570      	push	{r4, r5, r6, lr}
   1c386:	4605      	mov	r5, r0
   1c388:	460e      	mov	r6, r1
   1c38a:	4c08      	ldr	r4, [pc, #32]	; (1c3ac <bt_rand+0x28>)
   1c38c:	4620      	mov	r0, r4
   1c38e:	f008 fe43 	bl	25018 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1c392:	b138      	cbz	r0, 1c3a4 <bt_rand+0x20>
   1c394:	68a3      	ldr	r3, [r4, #8]
   1c396:	b2b2      	uxth	r2, r6
   1c398:	4629      	mov	r1, r5
   1c39a:	4620      	mov	r0, r4
   1c39c:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1c39e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c3a2:	4718      	bx	r3
   1c3a4:	f06f 0012 	mvn.w	r0, #18
   1c3a8:	bd70      	pop	{r4, r5, r6, pc}
   1c3aa:	bf00      	nop
   1c3ac:	00025c9c 	.word	0x00025c9c

0001c3b0 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1c3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1c3b2:	4b24      	ldr	r3, [pc, #144]	; (1c444 <ecdh_p256_common_secret+0x94>)
   1c3b4:	4924      	ldr	r1, [pc, #144]	; (1c448 <ecdh_p256_common_secret+0x98>)
   1c3b6:	f103 0220 	add.w	r2, r3, #32
   1c3ba:	2800      	cmp	r0, #0
   1c3bc:	bf08      	it	eq
   1c3be:	4619      	moveq	r1, r3
{
   1c3c0:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1c3c2:	4610      	mov	r0, r2
   1c3c4:	f002 fbc0 	bl	1eb48 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1c3c8:	4604      	mov	r4, r0
   1c3ca:	b180      	cbz	r0, 1c3ee <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1c3cc:	466d      	mov	r5, sp
   1c3ce:	b088      	sub	sp, #32
   1c3d0:	466a      	mov	r2, sp
   1c3d2:	4b1e      	ldr	r3, [pc, #120]	; (1c44c <ecdh_p256_common_secret+0x9c>)
   1c3d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c3d8:	2303      	movs	r3, #3
   1c3da:	f842 3f10 	str.w	r3, [r2, #16]!
   1c3de:	481c      	ldr	r0, [pc, #112]	; (1c450 <ecdh_p256_common_secret+0xa0>)
   1c3e0:	2300      	movs	r3, #0
   1c3e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c3e6:	f7f6 fde9 	bl	12fbc <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1c3ea:	2412      	movs	r4, #18
   1c3ec:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1c3ee:	f04f 32ff 	mov.w	r2, #4294967295
   1c3f2:	f04f 33ff 	mov.w	r3, #4294967295
   1c3f6:	2001      	movs	r0, #1
   1c3f8:	f7f8 fae2 	bl	149c0 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1c3fc:	f100 060c 	add.w	r6, r0, #12
   1c400:	2102      	movs	r1, #2
   1c402:	4605      	mov	r5, r0
   1c404:	4630      	mov	r0, r6
   1c406:	f008 f897 	bl	24538 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1c40a:	233e      	movs	r3, #62	; 0x3e
   1c40c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1c40e:	2322      	movs	r3, #34	; 0x22
   1c410:	7043      	strb	r3, [r0, #1]
   1c412:	2101      	movs	r1, #1
   1c414:	4630      	mov	r0, r6
   1c416:	f008 f88f 	bl	24538 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1c41a:	2309      	movs	r3, #9
   1c41c:	7003      	strb	r3, [r0, #0]
   1c41e:	2121      	movs	r1, #33	; 0x21
   1c420:	4630      	mov	r0, r6
   1c422:	f008 f889 	bl	24538 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1c426:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1c42a:	b134      	cbz	r4, 1c43a <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1c42c:	2220      	movs	r2, #32
   1c42e:	21ff      	movs	r1, #255	; 0xff
   1c430:	f006 fccb 	bl	22dca <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1c434:	4628      	mov	r0, r5
   1c436:	46bd      	mov	sp, r7
   1c438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1c43a:	4906      	ldr	r1, [pc, #24]	; (1c454 <ecdh_p256_common_secret+0xa4>)
   1c43c:	f008 fd24 	bl	24e88 <sys_memcpy_swap.constprop.0>
   1c440:	e7f8      	b.n	1c434 <ecdh_p256_common_secret+0x84>
   1c442:	bf00      	nop
   1c444:	200046b6 	.word	0x200046b6
   1c448:	000285d7 	.word	0x000285d7
   1c44c:	00028599 	.word	0x00028599
   1c450:	00025f88 	.word	0x00025f88
   1c454:	200046d6 	.word	0x200046d6

0001c458 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1c458:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c45a:	4c42      	ldr	r4, [pc, #264]	; (1c564 <ecdh_cmd_process+0x10c>)
   1c45c:	f3bf 8f5b 	dmb	ish
   1c460:	6823      	ldr	r3, [r4, #0]
   1c462:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1c466:	2b02      	cmp	r3, #2
{
   1c468:	b087      	sub	sp, #28
   1c46a:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1c46c:	d05a      	beq.n	1c524 <ecdh_cmd_process+0xcc>
   1c46e:	2b04      	cmp	r3, #4
   1c470:	d05d      	beq.n	1c52e <ecdh_cmd_process+0xd6>
   1c472:	2b01      	cmp	r3, #1
   1c474:	d15d      	bne.n	1c532 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1c476:	4c3c      	ldr	r4, [pc, #240]	; (1c568 <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1c478:	4e3c      	ldr	r6, [pc, #240]	; (1c56c <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1c47a:	2120      	movs	r1, #32
   1c47c:	4620      	mov	r0, r4
   1c47e:	f7ff ff81 	bl	1c384 <bt_rand>
		if (err) {
   1c482:	2800      	cmp	r0, #0
   1c484:	d143      	bne.n	1c50e <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1c486:	2220      	movs	r2, #32
   1c488:	4631      	mov	r1, r6
   1c48a:	4620      	mov	r0, r4
   1c48c:	f006 fc6b 	bl	22d66 <memcmp>
   1c490:	2800      	cmp	r0, #0
   1c492:	d0f2      	beq.n	1c47a <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1c494:	4836      	ldr	r0, [pc, #216]	; (1c570 <ecdh_cmd_process+0x118>)
   1c496:	4621      	mov	r1, r4
   1c498:	f002 fb42 	bl	1eb20 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1c49c:	4605      	mov	r5, r0
   1c49e:	2800      	cmp	r0, #0
   1c4a0:	d1eb      	bne.n	1c47a <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1c4a2:	f04f 32ff 	mov.w	r2, #4294967295
   1c4a6:	f04f 33ff 	mov.w	r3, #4294967295
   1c4aa:	2001      	movs	r0, #1
   1c4ac:	f7f8 fa88 	bl	149c0 <bt_buf_get_rx>
   1c4b0:	f100 060c 	add.w	r6, r0, #12
   1c4b4:	2102      	movs	r1, #2
   1c4b6:	4604      	mov	r4, r0
   1c4b8:	4630      	mov	r0, r6
   1c4ba:	f008 f83d 	bl	24538 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1c4be:	233e      	movs	r3, #62	; 0x3e
   1c4c0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1c4c2:	2342      	movs	r3, #66	; 0x42
   1c4c4:	7043      	strb	r3, [r0, #1]
   1c4c6:	2101      	movs	r1, #1
   1c4c8:	4630      	mov	r0, r6
   1c4ca:	f008 f835 	bl	24538 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1c4ce:	2308      	movs	r3, #8
   1c4d0:	7003      	strb	r3, [r0, #0]
   1c4d2:	2141      	movs	r1, #65	; 0x41
   1c4d4:	4630      	mov	r0, r6
   1c4d6:	f008 f82f 	bl	24538 <net_buf_simple_add>
   1c4da:	4606      	mov	r6, r0
	evt->status = status;
   1c4dc:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1c4e0:	b1bd      	cbz	r5, 1c512 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1c4e2:	2240      	movs	r2, #64	; 0x40
   1c4e4:	2100      	movs	r1, #0
   1c4e6:	f006 fc70 	bl	22dca <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c4ea:	f3bf 8f5b 	dmb	ish
   1c4ee:	2300      	movs	r3, #0
   1c4f0:	e857 2f00 	ldrex	r2, [r7]
   1c4f4:	e847 3100 	strex	r1, r3, [r7]
   1c4f8:	2900      	cmp	r1, #0
   1c4fa:	d1f9      	bne.n	1c4f0 <ecdh_cmd_process+0x98>
   1c4fc:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1c500:	b36c      	cbz	r4, 1c55e <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1c502:	4620      	mov	r0, r4
	}
}
   1c504:	b007      	add	sp, #28
   1c506:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1c50a:	f7f9 bb61 	b.w	15bd0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1c50e:	251f      	movs	r5, #31
   1c510:	e7c7      	b.n	1c4a2 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1c512:	4917      	ldr	r1, [pc, #92]	; (1c570 <ecdh_cmd_process+0x118>)
   1c514:	f008 fcb8 	bl	24e88 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1c518:	3120      	adds	r1, #32
   1c51a:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1c51e:	f008 fcb3 	bl	24e88 <sys_memcpy_swap.constprop.0>
		break;
   1c522:	e7e2      	b.n	1c4ea <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1c524:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1c526:	f7ff ff43 	bl	1c3b0 <ecdh_p256_common_secret>
   1c52a:	4604      	mov	r4, r0
		break;
   1c52c:	e7dd      	b.n	1c4ea <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1c52e:	2001      	movs	r0, #1
   1c530:	e7f9      	b.n	1c526 <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1c532:	4b10      	ldr	r3, [pc, #64]	; (1c574 <ecdh_cmd_process+0x11c>)
   1c534:	9305      	str	r3, [sp, #20]
   1c536:	2302      	movs	r3, #2
   1c538:	9304      	str	r3, [sp, #16]
   1c53a:	2300      	movs	r3, #0
   1c53c:	480e      	ldr	r0, [pc, #56]	; (1c578 <ecdh_cmd_process+0x120>)
   1c53e:	aa04      	add	r2, sp, #16
   1c540:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1c544:	f7f6 fd3a 	bl	12fbc <z_impl_z_log_msg_static_create>
   1c548:	f3bf 8f5b 	dmb	ish
   1c54c:	2300      	movs	r3, #0
   1c54e:	e854 2f00 	ldrex	r2, [r4]
   1c552:	e844 3100 	strex	r1, r3, [r4]
   1c556:	2900      	cmp	r1, #0
   1c558:	d1f9      	bne.n	1c54e <ecdh_cmd_process+0xf6>
   1c55a:	f3bf 8f5b 	dmb	ish
}
   1c55e:	b007      	add	sp, #28
   1c560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c562:	bf00      	nop
   1c564:	2000397c 	.word	0x2000397c
   1c568:	200046b6 	.word	0x200046b6
   1c56c:	000285d7 	.word	0x000285d7
   1c570:	200046d6 	.word	0x200046d6
   1c574:	000285ba 	.word	0x000285ba
   1c578:	00025f88 	.word	0x00025f88

0001c57c <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1c57c:	b510      	push	{r4, lr}
   1c57e:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1c580:	2210      	movs	r2, #16
   1c582:	2100      	movs	r1, #0
   1c584:	a801      	add	r0, sp, #4
   1c586:	f006 fc20 	bl	22dca <memset>
   1c58a:	4c0b      	ldr	r4, [pc, #44]	; (1c5b8 <ecdh_thread+0x3c>)
   1c58c:	9405      	str	r4, [sp, #20]
   1c58e:	2301      	movs	r3, #1
   1c590:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1c594:	f04f 32ff 	mov.w	r2, #4294967295
   1c598:	f04f 33ff 	mov.w	r3, #4294967295
   1c59c:	2101      	movs	r1, #1
   1c59e:	a801      	add	r0, sp, #4
   1c5a0:	f002 fa16 	bl	1e9d0 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1c5a4:	4620      	mov	r0, r4
   1c5a6:	f009 fad3 	bl	25b50 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1c5aa:	9b04      	ldr	r3, [sp, #16]
   1c5ac:	f36f 3394 	bfc	r3, #14, #7
   1c5b0:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1c5b2:	f7ff ff51 	bl	1c458 <ecdh_cmd_process>
	while (true) {
   1c5b6:	e7ed      	b.n	1c594 <ecdh_thread+0x18>
   1c5b8:	2000396c 	.word	0x2000396c

0001c5bc <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1c5bc:	b510      	push	{r4, lr}
   1c5be:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1c5c0:	480e      	ldr	r0, [pc, #56]	; (1c5fc <hci_ecdh_init+0x40>)
   1c5c2:	f009 fac0 	bl	25b46 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c5c6:	4c0e      	ldr	r4, [pc, #56]	; (1c600 <hci_ecdh_init+0x44>)
   1c5c8:	490e      	ldr	r1, [pc, #56]	; (1c604 <hci_ecdh_init+0x48>)
   1c5ca:	2200      	movs	r2, #0
   1c5cc:	2300      	movs	r3, #0
   1c5ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1c5d2:	2300      	movs	r3, #0
   1c5d4:	220a      	movs	r2, #10
   1c5d6:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1c5da:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1c5de:	9300      	str	r3, [sp, #0]
   1c5e0:	f44f 7262 	mov.w	r2, #904	; 0x388
   1c5e4:	4b08      	ldr	r3, [pc, #32]	; (1c608 <hci_ecdh_init+0x4c>)
   1c5e6:	4620      	mov	r0, r4
   1c5e8:	f001 f82c 	bl	1d644 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1c5ec:	4907      	ldr	r1, [pc, #28]	; (1c60c <hci_ecdh_init+0x50>)
   1c5ee:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1c5f0:	b008      	add	sp, #32
   1c5f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c5f6:	f008 bde3 	b.w	251c0 <z_impl_k_thread_name_set>
   1c5fa:	bf00      	nop
   1c5fc:	2000396c 	.word	0x2000396c
   1c600:	20002dd0 	.word	0x20002dd0
   1c604:	20006ec0 	.word	0x20006ec0
   1c608:	0001c57d 	.word	0x0001c57d
   1c60c:	000285ca 	.word	0x000285ca

0001c610 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1c610:	4801      	ldr	r0, [pc, #4]	; (1c618 <hci_ecdh_uninit+0x8>)
   1c612:	f7f7 bfc7 	b.w	145a4 <z_impl_k_thread_abort>
   1c616:	bf00      	nop
   1c618:	20002dd0 	.word	0x20002dd0

0001c61c <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1c61c:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c61e:	4b0b      	ldr	r3, [pc, #44]	; (1c64c <hci_cmd_le_read_local_p256_public_key+0x30>)
   1c620:	f3bf 8f5b 	dmb	ish
   1c624:	2201      	movs	r2, #1
   1c626:	e853 1f00 	ldrex	r1, [r3]
   1c62a:	2900      	cmp	r1, #0
   1c62c:	d103      	bne.n	1c636 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1c62e:	e843 2000 	strex	r0, r2, [r3]
   1c632:	2800      	cmp	r0, #0
   1c634:	d1f7      	bne.n	1c626 <hci_cmd_le_read_local_p256_public_key+0xa>
   1c636:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1c63a:	d105      	bne.n	1c648 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1c63c:	4804      	ldr	r0, [pc, #16]	; (1c650 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1c63e:	2100      	movs	r1, #0
   1c640:	f002 fa22 	bl	1ea88 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1c644:	2000      	movs	r0, #0
}
   1c646:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c648:	200c      	movs	r0, #12
   1c64a:	e7fc      	b.n	1c646 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1c64c:	2000397c 	.word	0x2000397c
   1c650:	2000396c 	.word	0x2000396c

0001c654 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1c654:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1c656:	2900      	cmp	r1, #0
   1c658:	4b11      	ldr	r3, [pc, #68]	; (1c6a0 <cmd_le_generate_dhkey+0x4c>)
   1c65a:	f3bf 8f5b 	dmb	ish
{
   1c65e:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1c660:	bf0c      	ite	eq
   1c662:	2202      	moveq	r2, #2
   1c664:	2204      	movne	r2, #4
   1c666:	e853 1f00 	ldrex	r1, [r3]
   1c66a:	2900      	cmp	r1, #0
   1c66c:	d103      	bne.n	1c676 <cmd_le_generate_dhkey+0x22>
   1c66e:	e843 2000 	strex	r0, r2, [r3]
   1c672:	2800      	cmp	r0, #0
   1c674:	d1f7      	bne.n	1c666 <cmd_le_generate_dhkey+0x12>
   1c676:	f3bf 8f5b 	dmb	ish
   1c67a:	d10e      	bne.n	1c69a <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1c67c:	4621      	mov	r1, r4
   1c67e:	4809      	ldr	r0, [pc, #36]	; (1c6a4 <cmd_le_generate_dhkey+0x50>)
   1c680:	f008 fc02 	bl	24e88 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1c684:	4808      	ldr	r0, [pc, #32]	; (1c6a8 <cmd_le_generate_dhkey+0x54>)
   1c686:	f104 0120 	add.w	r1, r4, #32
   1c68a:	f008 fbfd 	bl	24e88 <sys_memcpy_swap.constprop.0>
   1c68e:	4807      	ldr	r0, [pc, #28]	; (1c6ac <cmd_le_generate_dhkey+0x58>)
   1c690:	2100      	movs	r1, #0
   1c692:	f002 f9f9 	bl	1ea88 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1c696:	2000      	movs	r0, #0
}
   1c698:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c69a:	200c      	movs	r0, #12
   1c69c:	e7fc      	b.n	1c698 <cmd_le_generate_dhkey+0x44>
   1c69e:	bf00      	nop
   1c6a0:	2000397c 	.word	0x2000397c
   1c6a4:	200046d6 	.word	0x200046d6
   1c6a8:	200046f6 	.word	0x200046f6
   1c6ac:	2000396c 	.word	0x2000396c

0001c6b0 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1c6b0:	4901      	ldr	r1, [pc, #4]	; (1c6b8 <mpsl_low_prio_irq_handler+0x8>)
   1c6b2:	4802      	ldr	r0, [pc, #8]	; (1c6bc <mpsl_low_prio_irq_handler+0xc>)
   1c6b4:	f008 bee3 	b.w	2547e <k_work_submit_to_queue>
   1c6b8:	20003980 	.word	0x20003980
   1c6bc:	20002e50 	.word	0x20002e50

0001c6c0 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1c6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1c6c2:	2332      	movs	r3, #50	; 0x32
   1c6c4:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c6c8:	4a10      	ldr	r2, [pc, #64]	; (1c70c <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1c6ca:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1c6cc:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c6ce:	2119      	movs	r1, #25
   1c6d0:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1c6d2:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1c6d6:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1c6da:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1c6de:	f7ef fe35 	bl	c34c <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1c6e2:	4604      	mov	r4, r0
   1c6e4:	b970      	cbnz	r0, 1c704 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c6e6:	4601      	mov	r1, r0
   1c6e8:	462a      	mov	r2, r5
   1c6ea:	2008      	movs	r0, #8
   1c6ec:	f7f7 fae4 	bl	13cb8 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c6f0:	462a      	mov	r2, r5
   1c6f2:	4621      	mov	r1, r4
   1c6f4:	200b      	movs	r0, #11
   1c6f6:	f7f7 fadf 	bl	13cb8 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1c6fa:	462a      	mov	r2, r5
   1c6fc:	4621      	mov	r1, r4
   1c6fe:	4628      	mov	r0, r5
   1c700:	f7f7 fada 	bl	13cb8 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1c704:	4620      	mov	r0, r4
   1c706:	b003      	add	sp, #12
   1c708:	bd30      	pop	{r4, r5, pc}
   1c70a:	bf00      	nop
   1c70c:	0001c711 	.word	0x0001c711

0001c710 <m_assert_handler>:
{
   1c710:	b598      	push	{r3, r4, r7, lr}
   1c712:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1c714:	466c      	mov	r4, sp
   1c716:	b08a      	sub	sp, #40	; 0x28
   1c718:	466a      	mov	r2, sp
   1c71a:	4b0c      	ldr	r3, [pc, #48]	; (1c74c <m_assert_handler+0x3c>)
   1c71c:	61d1      	str	r1, [r2, #28]
   1c71e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c722:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c726:	8413      	strh	r3, [r2, #32]
   1c728:	4b09      	ldr	r3, [pc, #36]	; (1c750 <m_assert_handler+0x40>)
   1c72a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c72e:	4809      	ldr	r0, [pc, #36]	; (1c754 <m_assert_handler+0x44>)
   1c730:	2300      	movs	r3, #0
   1c732:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1c736:	f7f6 fc41 	bl	12fbc <z_impl_z_log_msg_static_create>
   1c73a:	46a5      	mov	sp, r4
	k_oops();
   1c73c:	4040      	eors	r0, r0
   1c73e:	f380 8811 	msr	BASEPRI, r0
   1c742:	f04f 0003 	mov.w	r0, #3
   1c746:	df02      	svc	2
}
   1c748:	46bd      	mov	sp, r7
   1c74a:	bd98      	pop	{r3, r4, r7, pc}
   1c74c:	00028603 	.word	0x00028603
   1c750:	01000004 	.word	0x01000004
   1c754:	00025fd8 	.word	0x00025fd8

0001c758 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1c758:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1c75a:	4d0d      	ldr	r5, [pc, #52]	; (1c790 <mpsl_low_prio_init+0x38>)
   1c75c:	490d      	ldr	r1, [pc, #52]	; (1c794 <mpsl_low_prio_init+0x3c>)
   1c75e:	2400      	movs	r4, #0
   1c760:	9400      	str	r4, [sp, #0]
   1c762:	f06f 0309 	mvn.w	r3, #9
   1c766:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c76a:	4628      	mov	r0, r5
   1c76c:	f001 fb2a 	bl	1ddc4 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1c770:	4909      	ldr	r1, [pc, #36]	; (1c798 <mpsl_low_prio_init+0x40>)
   1c772:	4628      	mov	r0, r5
   1c774:	f008 fd24 	bl	251c0 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1c778:	4908      	ldr	r1, [pc, #32]	; (1c79c <mpsl_low_prio_init+0x44>)
   1c77a:	4809      	ldr	r0, [pc, #36]	; (1c7a0 <mpsl_low_prio_init+0x48>)
   1c77c:	f008 fe52 	bl	25424 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1c780:	4622      	mov	r2, r4
   1c782:	2104      	movs	r1, #4
   1c784:	2019      	movs	r0, #25
   1c786:	f7f7 fa97 	bl	13cb8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1c78a:	4620      	mov	r0, r4
   1c78c:	b003      	add	sp, #12
   1c78e:	bd30      	pop	{r4, r5, pc}
   1c790:	20002e50 	.word	0x20002e50
   1c794:	200072c0 	.word	0x200072c0
   1c798:	00028617 	.word	0x00028617
   1c79c:	00024ed1 	.word	0x00024ed1
   1c7a0:	20003980 	.word	0x20003980

0001c7a4 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1c7a4:	4b01      	ldr	r3, [pc, #4]	; (1c7ac <mpsl_hfclk_callback+0x8>)
   1c7a6:	2000      	movs	r0, #0
   1c7a8:	681b      	ldr	r3, [r3, #0]
   1c7aa:	4718      	bx	r3
   1c7ac:	20003990 	.word	0x20003990

0001c7b0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1c7b0:	b120      	cbz	r0, 1c7bc <nrfx_clock_start+0xc>
   1c7b2:	2801      	cmp	r0, #1
   1c7b4:	d106      	bne.n	1c7c4 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1c7b6:	4804      	ldr	r0, [pc, #16]	; (1c7c8 <nrfx_clock_start+0x18>)
   1c7b8:	f7ef bc2a 	b.w	c010 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1c7bc:	4b03      	ldr	r3, [pc, #12]	; (1c7cc <nrfx_clock_start+0x1c>)
   1c7be:	2001      	movs	r0, #1
   1c7c0:	681b      	ldr	r3, [r3, #0]
   1c7c2:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1c7c4:	4770      	bx	lr
   1c7c6:	bf00      	nop
   1c7c8:	0001c7a5 	.word	0x0001c7a5
   1c7cc:	20003990 	.word	0x20003990

0001c7d0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1c7d0:	4b01      	ldr	r3, [pc, #4]	; (1c7d8 <nrfx_clock_init+0x8>)
   1c7d2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1c7d4:	4801      	ldr	r0, [pc, #4]	; (1c7dc <nrfx_clock_init+0xc>)
   1c7d6:	4770      	bx	lr
   1c7d8:	20003990 	.word	0x20003990
   1c7dc:	0bad0000 	.word	0x0bad0000

0001c7e0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c7e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1c7e4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1c7e8:	2a08      	cmp	r2, #8
   1c7ea:	d106      	bne.n	1c7fa <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c7ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1c7f0:	2b05      	cmp	r3, #5
   1c7f2:	d802      	bhi.n	1c7fa <nrf52_errata_103+0x1a>
   1c7f4:	4a02      	ldr	r2, [pc, #8]	; (1c800 <nrf52_errata_103+0x20>)
   1c7f6:	5cd0      	ldrb	r0, [r2, r3]
   1c7f8:	4770      	bx	lr
                        return false;
   1c7fa:	2000      	movs	r0, #0
}
   1c7fc:	4770      	bx	lr
   1c7fe:	bf00      	nop
   1c800:	00028631 	.word	0x00028631

0001c804 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1c804:	4a02      	ldr	r2, [pc, #8]	; (1c810 <nvmc_wait+0xc>)
   1c806:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1c80a:	2b00      	cmp	r3, #0
   1c80c:	d0fb      	beq.n	1c806 <nvmc_wait+0x2>
}
   1c80e:	4770      	bx	lr
   1c810:	4001e000 	.word	0x4001e000

0001c814 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1c814:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1c81a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1c81e:	2a08      	cmp	r2, #8
   1c820:	d14e      	bne.n	1c8c0 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1c822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1c826:	2100      	movs	r1, #0
   1c828:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1c82c:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1c830:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1c834:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1c838:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1c83c:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1c840:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1c844:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1c848:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1c84c:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1c850:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1c854:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1c858:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1c85c:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1c860:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1c864:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1c868:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1c86c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1c870:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1c874:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1c878:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1c87c:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1c880:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1c884:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1c888:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1c88c:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1c890:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1c894:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1c898:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1c89c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1c8a0:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1c8a4:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1c8a8:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1c8ac:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1c8b0:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1c8b4:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1c8b8:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1c8bc:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1c8c0:	f7ff ff8e 	bl	1c7e0 <nrf52_errata_103>
   1c8c4:	b118      	cbz	r0, 1c8ce <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1c8c6:	4b3b      	ldr	r3, [pc, #236]	; (1c9b4 <SystemInit+0x1a0>)
   1c8c8:	4a3b      	ldr	r2, [pc, #236]	; (1c9b8 <SystemInit+0x1a4>)
   1c8ca:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1c8ce:	f7ff ff87 	bl	1c7e0 <nrf52_errata_103>
   1c8d2:	b118      	cbz	r0, 1c8dc <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1c8d4:	4b39      	ldr	r3, [pc, #228]	; (1c9bc <SystemInit+0x1a8>)
   1c8d6:	22fb      	movs	r2, #251	; 0xfb
   1c8d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1c8dc:	f7ff ff80 	bl	1c7e0 <nrf52_errata_103>
   1c8e0:	b170      	cbz	r0, 1c900 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1c8e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1c8e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c8ea:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1c8ee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1c8f2:	f022 020f 	bic.w	r2, r2, #15
   1c8f6:	f003 030f 	and.w	r3, r3, #15
   1c8fa:	4313      	orrs	r3, r2
   1c8fc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1c900:	f7ff ff6e 	bl	1c7e0 <nrf52_errata_103>
   1c904:	b120      	cbz	r0, 1c910 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1c906:	4b2e      	ldr	r3, [pc, #184]	; (1c9c0 <SystemInit+0x1ac>)
   1c908:	f44f 7200 	mov.w	r2, #512	; 0x200
   1c90c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1c910:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1c914:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1c918:	2b08      	cmp	r3, #8
   1c91a:	d11a      	bne.n	1c952 <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1c91c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c920:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1c924:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1c926:	bf44      	itt	mi
   1c928:	f06f 0201 	mvnmi.w	r2, #1
   1c92c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1c930:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c934:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   1c938:	2b05      	cmp	r3, #5
   1c93a:	d802      	bhi.n	1c942 <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1c93c:	4a21      	ldr	r2, [pc, #132]	; (1c9c4 <SystemInit+0x1b0>)
   1c93e:	5cd3      	ldrb	r3, [r2, r3]
   1c940:	b13b      	cbz	r3, 1c952 <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1c942:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c946:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1c94a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c94e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c952:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1c956:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1c95a:	2a00      	cmp	r2, #0
   1c95c:	db03      	blt.n	1c966 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1c95e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1c962:	2b00      	cmp	r3, #0
   1c964:	da22      	bge.n	1c9ac <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c966:	4918      	ldr	r1, [pc, #96]	; (1c9c8 <SystemInit+0x1b4>)
   1c968:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c96a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c96e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c972:	2412      	movs	r4, #18
    nvmc_wait();
   1c974:	f7ff ff46 	bl	1c804 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1c978:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1c97c:	f7ff ff42 	bl	1c804 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1c980:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1c984:	f7ff ff3e 	bl	1c804 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1c988:	2300      	movs	r3, #0
   1c98a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1c98e:	f7ff ff39 	bl	1c804 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1c992:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1c996:	490d      	ldr	r1, [pc, #52]	; (1c9cc <SystemInit+0x1b8>)
   1c998:	4b0d      	ldr	r3, [pc, #52]	; (1c9d0 <SystemInit+0x1bc>)
   1c99a:	68ca      	ldr	r2, [r1, #12]
   1c99c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1c9a0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1c9a2:	60cb      	str	r3, [r1, #12]
   1c9a4:	f3bf 8f4f 	dsb	sy
    __NOP();
   1c9a8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1c9aa:	e7fd      	b.n	1c9a8 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1c9ac:	4b09      	ldr	r3, [pc, #36]	; (1c9d4 <SystemInit+0x1c0>)
   1c9ae:	4a0a      	ldr	r2, [pc, #40]	; (1c9d8 <SystemInit+0x1c4>)
   1c9b0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1c9b2:	bd10      	pop	{r4, pc}
   1c9b4:	40005000 	.word	0x40005000
   1c9b8:	00038148 	.word	0x00038148
   1c9bc:	4000f000 	.word	0x4000f000
   1c9c0:	40029000 	.word	0x40029000
   1c9c4:	0002862b 	.word	0x0002862b
   1c9c8:	4001e000 	.word	0x4001e000
   1c9cc:	e000ed00 	.word	0xe000ed00
   1c9d0:	05fa0004 	.word	0x05fa0004
   1c9d4:	2000083c 	.word	0x2000083c
   1c9d8:	03d09000 	.word	0x03d09000

0001c9dc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1c9dc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c9de:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1c9e0:	6802      	ldr	r2, [r0, #0]
   1c9e2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1c9e6:	fab2 f382 	clz	r3, r2
   1c9ea:	f1c3 031f 	rsb	r3, r3, #31
   1c9ee:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1c9f0:	fa05 f403 	lsl.w	r4, r5, r3
   1c9f4:	ea22 0404 	bic.w	r4, r2, r4
   1c9f8:	e850 6f00 	ldrex	r6, [r0]
   1c9fc:	4296      	cmp	r6, r2
   1c9fe:	d104      	bne.n	1ca0a <nrfx_flag32_alloc+0x2e>
   1ca00:	e840 4c00 	strex	ip, r4, [r0]
   1ca04:	f1bc 0f00 	cmp.w	ip, #0
   1ca08:	d1f6      	bne.n	1c9f8 <nrfx_flag32_alloc+0x1c>
   1ca0a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ca0e:	d1e7      	bne.n	1c9e0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1ca10:	4801      	ldr	r0, [pc, #4]	; (1ca18 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1ca12:	700b      	strb	r3, [r1, #0]
}
   1ca14:	bd70      	pop	{r4, r5, r6, pc}
   1ca16:	bf00      	nop
   1ca18:	0bad0000 	.word	0x0bad0000

0001ca1c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ca1c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ca1e:	6803      	ldr	r3, [r0, #0]
   1ca20:	40cb      	lsrs	r3, r1
   1ca22:	07db      	lsls	r3, r3, #31
   1ca24:	d414      	bmi.n	1ca50 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ca26:	2301      	movs	r3, #1
   1ca28:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ca2a:	6802      	ldr	r2, [r0, #0]
   1ca2c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1ca30:	ea43 0102 	orr.w	r1, r3, r2
   1ca34:	e850 4f00 	ldrex	r4, [r0]
   1ca38:	4294      	cmp	r4, r2
   1ca3a:	d104      	bne.n	1ca46 <nrfx_flag32_free+0x2a>
   1ca3c:	e840 1c00 	strex	ip, r1, [r0]
   1ca40:	f1bc 0f00 	cmp.w	ip, #0
   1ca44:	d1f6      	bne.n	1ca34 <nrfx_flag32_free+0x18>
   1ca46:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ca4a:	d1ee      	bne.n	1ca2a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1ca4c:	4801      	ldr	r0, [pc, #4]	; (1ca54 <nrfx_flag32_free+0x38>)
}
   1ca4e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ca50:	4801      	ldr	r0, [pc, #4]	; (1ca58 <nrfx_flag32_free+0x3c>)
   1ca52:	e7fc      	b.n	1ca4e <nrfx_flag32_free+0x32>
   1ca54:	0bad0000 	.word	0x0bad0000
   1ca58:	0bad0004 	.word	0x0bad0004

0001ca5c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1ca5c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1ca5e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ca62:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1ca64:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1ca66:	6002      	str	r2, [r0, #0]
}
   1ca68:	4802      	ldr	r0, [pc, #8]	; (1ca74 <nrf_gpio_pin_port_decode+0x18>)
   1ca6a:	bf18      	it	ne
   1ca6c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1ca70:	4770      	bx	lr
   1ca72:	bf00      	nop
   1ca74:	50000300 	.word	0x50000300

0001ca78 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1ca78:	4b03      	ldr	r3, [pc, #12]	; (1ca88 <pin_in_use_by_te+0x10>)
   1ca7a:	3008      	adds	r0, #8
   1ca7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ca80:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1ca84:	4770      	bx	lr
   1ca86:	bf00      	nop
   1ca88:	20000840 	.word	0x20000840

0001ca8c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1ca8c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca8e:	f100 0308 	add.w	r3, r0, #8
   1ca92:	4c0c      	ldr	r4, [pc, #48]	; (1cac4 <call_handler+0x38>)
   1ca94:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1ca98:	05da      	lsls	r2, r3, #23
{
   1ca9a:	4605      	mov	r5, r0
   1ca9c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1ca9e:	d507      	bpl.n	1cab0 <call_handler+0x24>
   1caa0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1caa4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1caa8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1caac:	6852      	ldr	r2, [r2, #4]
   1caae:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1cab0:	68a3      	ldr	r3, [r4, #8]
   1cab2:	b12b      	cbz	r3, 1cac0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cab4:	68e2      	ldr	r2, [r4, #12]
   1cab6:	4631      	mov	r1, r6
   1cab8:	4628      	mov	r0, r5
    }
}
   1caba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1cabe:	4718      	bx	r3
}
   1cac0:	bd70      	pop	{r4, r5, r6, pc}
   1cac2:	bf00      	nop
   1cac4:	20000840 	.word	0x20000840

0001cac8 <release_handler>:
{
   1cac8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1caca:	4a12      	ldr	r2, [pc, #72]	; (1cb14 <release_handler+0x4c>)
   1cacc:	3008      	adds	r0, #8
   1cace:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1cad2:	05d9      	lsls	r1, r3, #23
   1cad4:	d51b      	bpl.n	1cb0e <release_handler+0x46>
   1cad6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1cada:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cade:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1cae2:	f102 040e 	add.w	r4, r2, #14
   1cae6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1cae8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1caec:	f413 7f80 	tst.w	r3, #256	; 0x100
   1caf0:	d003      	beq.n	1cafa <release_handler+0x32>
   1caf2:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1caf6:	4299      	cmp	r1, r3
   1caf8:	d009      	beq.n	1cb0e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1cafa:	3001      	adds	r0, #1
   1cafc:	2830      	cmp	r0, #48	; 0x30
   1cafe:	d1f3      	bne.n	1cae8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1cb00:	2300      	movs	r3, #0
   1cb02:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cb06:	4804      	ldr	r0, [pc, #16]	; (1cb18 <release_handler+0x50>)
}
   1cb08:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1cb0a:	f7ff bf87 	b.w	1ca1c <nrfx_flag32_free>
}
   1cb0e:	bc10      	pop	{r4}
   1cb10:	4770      	bx	lr
   1cb12:	bf00      	nop
   1cb14:	20000840 	.word	0x20000840
   1cb18:	200008b4 	.word	0x200008b4

0001cb1c <pin_handler_trigger_uninit>:
{
   1cb1c:	b538      	push	{r3, r4, r5, lr}
   1cb1e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1cb20:	f7ff ffaa 	bl	1ca78 <pin_in_use_by_te>
   1cb24:	4c09      	ldr	r4, [pc, #36]	; (1cb4c <pin_handler_trigger_uninit+0x30>)
   1cb26:	f102 0508 	add.w	r5, r2, #8
   1cb2a:	b140      	cbz	r0, 1cb3e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cb2c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1cb30:	4907      	ldr	r1, [pc, #28]	; (1cb50 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1cb32:	0b5b      	lsrs	r3, r3, #13
   1cb34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1cb38:	2000      	movs	r0, #0
   1cb3a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1cb3e:	4610      	mov	r0, r2
   1cb40:	f7ff ffc2 	bl	1cac8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1cb44:	2300      	movs	r3, #0
   1cb46:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1cb4a:	bd38      	pop	{r3, r4, r5, pc}
   1cb4c:	20000840 	.word	0x20000840
   1cb50:	40006000 	.word	0x40006000

0001cb54 <nrfx_gpiote_input_configure>:
{
   1cb54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1cb58:	4604      	mov	r4, r0
   1cb5a:	4616      	mov	r6, r2
   1cb5c:	461d      	mov	r5, r3
    if (p_input_config)
   1cb5e:	b301      	cbz	r1, 1cba2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cb60:	4f4e      	ldr	r7, [pc, #312]	; (1cc9c <nrfx_gpiote_input_configure+0x148>)
   1cb62:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1cb66:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1cb6a:	079b      	lsls	r3, r3, #30
   1cb6c:	d502      	bpl.n	1cb74 <nrfx_gpiote_input_configure+0x20>
   1cb6e:	f7ff ff83 	bl	1ca78 <pin_in_use_by_te>
   1cb72:	bb10      	cbnz	r0, 1cbba <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1cb74:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cb76:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1cb7a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1cb7e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1cb82:	f10d 020f 	add.w	r2, sp, #15
   1cb86:	460b      	mov	r3, r1
   1cb88:	4620      	mov	r0, r4
   1cb8a:	f10d 010e 	add.w	r1, sp, #14
   1cb8e:	f008 f9e3 	bl	24f58 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1cb92:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1cb96:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1cb9a:	f043 0301 	orr.w	r3, r3, #1
   1cb9e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1cba2:	b346      	cbz	r6, 1cbf6 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cba4:	4b3d      	ldr	r3, [pc, #244]	; (1cc9c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1cba6:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1cbaa:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cbac:	f104 0708 	add.w	r7, r4, #8
   1cbb0:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1cbb4:	0788      	lsls	r0, r1, #30
   1cbb6:	d502      	bpl.n	1cbbe <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1cbb8:	b1aa      	cbz	r2, 1cbe6 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1cbba:	4839      	ldr	r0, [pc, #228]	; (1cca0 <nrfx_gpiote_input_configure+0x14c>)
   1cbbc:	e01d      	b.n	1cbfa <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1cbbe:	f021 0120 	bic.w	r1, r1, #32
   1cbc2:	04c9      	lsls	r1, r1, #19
   1cbc4:	0cc9      	lsrs	r1, r1, #19
   1cbc6:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1cbca:	b162      	cbz	r2, 1cbe6 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1cbcc:	f1bc 0f03 	cmp.w	ip, #3
   1cbd0:	d8f3      	bhi.n	1cbba <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1cbd2:	6872      	ldr	r2, [r6, #4]
   1cbd4:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1cbd6:	f1bc 0f00 	cmp.w	ip, #0
   1cbda:	d111      	bne.n	1cc00 <nrfx_gpiote_input_configure+0xac>
   1cbdc:	4a31      	ldr	r2, [pc, #196]	; (1cca4 <nrfx_gpiote_input_configure+0x150>)
   1cbde:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1cbe2:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1cbe6:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1cbea:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1cbee:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1cbf2:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1cbf6:	bb45      	cbnz	r5, 1cc4a <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1cbf8:	482b      	ldr	r0, [pc, #172]	; (1cca8 <nrfx_gpiote_input_configure+0x154>)
}
   1cbfa:	b004      	add	sp, #16
   1cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1cc00:	00b2      	lsls	r2, r6, #2
   1cc02:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1cc06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1cc0a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1cc0e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1cc12:	f020 0003 	bic.w	r0, r0, #3
   1cc16:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1cc1a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1cc1e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1cc22:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1cc26:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cc2a:	0220      	lsls	r0, r4, #8
   1cc2c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1cc30:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1cc34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cc38:	ea40 000e 	orr.w	r0, r0, lr
   1cc3c:	f041 0120 	orr.w	r1, r1, #32
   1cc40:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1cc44:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1cc48:	e7cd      	b.n	1cbe6 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1cc4a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1cc4e:	4620      	mov	r0, r4
   1cc50:	f7ff ff3a 	bl	1cac8 <release_handler>
    if (!handler)
   1cc54:	2e00      	cmp	r6, #0
   1cc56:	d0cf      	beq.n	1cbf8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1cc58:	4d10      	ldr	r5, [pc, #64]	; (1cc9c <nrfx_gpiote_input_configure+0x148>)
   1cc5a:	e9d5 2300 	ldrd	r2, r3, [r5]
   1cc5e:	4296      	cmp	r6, r2
   1cc60:	d101      	bne.n	1cc66 <nrfx_gpiote_input_configure+0x112>
   1cc62:	429f      	cmp	r7, r3
   1cc64:	d018      	beq.n	1cc98 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1cc66:	4811      	ldr	r0, [pc, #68]	; (1ccac <nrfx_gpiote_input_configure+0x158>)
   1cc68:	f10d 010f 	add.w	r1, sp, #15
   1cc6c:	f7ff feb6 	bl	1c9dc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1cc70:	4b0d      	ldr	r3, [pc, #52]	; (1cca8 <nrfx_gpiote_input_configure+0x154>)
   1cc72:	4298      	cmp	r0, r3
   1cc74:	d1c1      	bne.n	1cbfa <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1cc76:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1cc7a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1cc7e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1cc82:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1cc84:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1cc86:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1cc8a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1cc8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1cc92:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1cc96:	e7af      	b.n	1cbf8 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1cc98:	2200      	movs	r2, #0
   1cc9a:	e7ee      	b.n	1cc7a <nrfx_gpiote_input_configure+0x126>
   1cc9c:	20000840 	.word	0x20000840
   1cca0:	0bad0004 	.word	0x0bad0004
   1cca4:	40006000 	.word	0x40006000
   1cca8:	0bad0000 	.word	0x0bad0000
   1ccac:	200008b4 	.word	0x200008b4

0001ccb0 <nrfx_gpiote_output_configure>:
{
   1ccb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ccb2:	4604      	mov	r4, r0
   1ccb4:	b085      	sub	sp, #20
   1ccb6:	4615      	mov	r5, r2
    if (p_config)
   1ccb8:	b319      	cbz	r1, 1cd02 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ccba:	4e33      	ldr	r6, [pc, #204]	; (1cd88 <nrfx_gpiote_output_configure+0xd8>)
   1ccbc:	f100 0708 	add.w	r7, r0, #8
   1ccc0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1ccc4:	0793      	lsls	r3, r2, #30
   1ccc6:	d403      	bmi.n	1ccd0 <nrfx_gpiote_output_configure+0x20>
   1ccc8:	f7ff fed6 	bl	1ca78 <pin_in_use_by_te>
   1cccc:	2800      	cmp	r0, #0
   1ccce:	d158      	bne.n	1cd82 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1ccd0:	f012 0f1c 	tst.w	r2, #28
   1ccd4:	d002      	beq.n	1ccdc <nrfx_gpiote_output_configure+0x2c>
   1ccd6:	784b      	ldrb	r3, [r1, #1]
   1ccd8:	2b01      	cmp	r3, #1
   1ccda:	d052      	beq.n	1cd82 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1ccdc:	2301      	movs	r3, #1
   1ccde:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1cce2:	2300      	movs	r3, #0
   1cce4:	e9cd 1300 	strd	r1, r3, [sp]
   1cce8:	1c4a      	adds	r2, r1, #1
   1ccea:	1c8b      	adds	r3, r1, #2
   1ccec:	4620      	mov	r0, r4
   1ccee:	f10d 010f 	add.w	r1, sp, #15
   1ccf2:	f008 f931 	bl	24f58 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1ccf6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1ccfa:	f043 0303 	orr.w	r3, r3, #3
   1ccfe:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1cd02:	b915      	cbnz	r5, 1cd0a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1cd04:	4821      	ldr	r0, [pc, #132]	; (1cd8c <nrfx_gpiote_output_configure+0xdc>)
}
   1cd06:	b005      	add	sp, #20
   1cd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cd0a:	4e1f      	ldr	r6, [pc, #124]	; (1cd88 <nrfx_gpiote_output_configure+0xd8>)
   1cd0c:	f104 0708 	add.w	r7, r4, #8
   1cd10:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1cd14:	0783      	lsls	r3, r0, #30
   1cd16:	d534      	bpl.n	1cd82 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1cd18:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1cd1c:	4661      	mov	r1, ip
   1cd1e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1cd20:	f020 0020 	bic.w	r0, r0, #32
   1cd24:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cd28:	04c0      	lsls	r0, r0, #19
   1cd2a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1cd2e:	0cc0      	lsrs	r0, r0, #19
   1cd30:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1cd34:	2300      	movs	r3, #0
   1cd36:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1cd3a:	786a      	ldrb	r2, [r5, #1]
   1cd3c:	2a00      	cmp	r2, #0
   1cd3e:	d0e1      	beq.n	1cd04 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1cd40:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1cd44:	78ad      	ldrb	r5, [r5, #2]
   1cd46:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1cd4a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1cd4e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd52:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1cd56:	0223      	lsls	r3, r4, #8
   1cd58:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1cd5c:	0412      	lsls	r2, r2, #16
   1cd5e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd62:	ea43 030e 	orr.w	r3, r3, lr
   1cd66:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1cd68:	052a      	lsls	r2, r5, #20
   1cd6a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1cd6e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1cd72:	4313      	orrs	r3, r2
   1cd74:	f040 0020 	orr.w	r0, r0, #32
   1cd78:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1cd7c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1cd80:	e7c0      	b.n	1cd04 <nrfx_gpiote_output_configure+0x54>
{
   1cd82:	4803      	ldr	r0, [pc, #12]	; (1cd90 <nrfx_gpiote_output_configure+0xe0>)
   1cd84:	e7bf      	b.n	1cd06 <nrfx_gpiote_output_configure+0x56>
   1cd86:	bf00      	nop
   1cd88:	20000840 	.word	0x20000840
   1cd8c:	0bad0000 	.word	0x0bad0000
   1cd90:	0bad0004 	.word	0x0bad0004

0001cd94 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1cd94:	4b01      	ldr	r3, [pc, #4]	; (1cd9c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1cd96:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1cd9a:	4770      	bx	lr
   1cd9c:	20000840 	.word	0x20000840

0001cda0 <nrfx_gpiote_channel_get>:
{
   1cda0:	b508      	push	{r3, lr}
   1cda2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1cda4:	f7ff fe68 	bl	1ca78 <pin_in_use_by_te>
   1cda8:	b138      	cbz	r0, 1cdba <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cdaa:	4b05      	ldr	r3, [pc, #20]	; (1cdc0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1cdac:	4805      	ldr	r0, [pc, #20]	; (1cdc4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cdae:	3208      	adds	r2, #8
   1cdb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1cdb4:	0b5b      	lsrs	r3, r3, #13
   1cdb6:	700b      	strb	r3, [r1, #0]
}
   1cdb8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1cdba:	4803      	ldr	r0, [pc, #12]	; (1cdc8 <nrfx_gpiote_channel_get+0x28>)
   1cdbc:	e7fc      	b.n	1cdb8 <nrfx_gpiote_channel_get+0x18>
   1cdbe:	bf00      	nop
   1cdc0:	20000840 	.word	0x20000840
   1cdc4:	0bad0000 	.word	0x0bad0000
   1cdc8:	0bad0004 	.word	0x0bad0004

0001cdcc <nrfx_gpiote_init>:
{
   1cdcc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1cdce:	4c0f      	ldr	r4, [pc, #60]	; (1ce0c <nrfx_gpiote_init+0x40>)
   1cdd0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1cdd4:	b9bd      	cbnz	r5, 1ce06 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1cdd6:	2260      	movs	r2, #96	; 0x60
   1cdd8:	4629      	mov	r1, r5
   1cdda:	f104 0010 	add.w	r0, r4, #16
   1cdde:	f005 fff4 	bl	22dca <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1cde2:	2006      	movs	r0, #6
   1cde4:	f7f6 ff38 	bl	13c58 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cde8:	4b09      	ldr	r3, [pc, #36]	; (1ce10 <nrfx_gpiote_init+0x44>)
    return err_code;
   1cdea:	480a      	ldr	r0, [pc, #40]	; (1ce14 <nrfx_gpiote_init+0x48>)
   1cdec:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1cdf0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1cdf4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1cdf8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1cdfc:	2301      	movs	r3, #1
   1cdfe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ce02:	6763      	str	r3, [r4, #116]	; 0x74
}
   1ce04:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1ce06:	4804      	ldr	r0, [pc, #16]	; (1ce18 <nrfx_gpiote_init+0x4c>)
   1ce08:	e7fc      	b.n	1ce04 <nrfx_gpiote_init+0x38>
   1ce0a:	bf00      	nop
   1ce0c:	20000840 	.word	0x20000840
   1ce10:	40006000 	.word	0x40006000
   1ce14:	0bad0000 	.word	0x0bad0000
   1ce18:	0bad0005 	.word	0x0bad0005

0001ce1c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ce1c:	4b03      	ldr	r3, [pc, #12]	; (1ce2c <nrfx_gpiote_is_init+0x10>)
   1ce1e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1ce22:	3800      	subs	r0, #0
   1ce24:	bf18      	it	ne
   1ce26:	2001      	movne	r0, #1
   1ce28:	4770      	bx	lr
   1ce2a:	bf00      	nop
   1ce2c:	20000840 	.word	0x20000840

0001ce30 <nrfx_gpiote_channel_free>:
{
   1ce30:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ce32:	4801      	ldr	r0, [pc, #4]	; (1ce38 <nrfx_gpiote_channel_free+0x8>)
   1ce34:	f7ff bdf2 	b.w	1ca1c <nrfx_flag32_free>
   1ce38:	200008b0 	.word	0x200008b0

0001ce3c <nrfx_gpiote_channel_alloc>:
{
   1ce3c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ce3e:	4801      	ldr	r0, [pc, #4]	; (1ce44 <nrfx_gpiote_channel_alloc+0x8>)
   1ce40:	f7ff bdcc 	b.w	1c9dc <nrfx_flag32_alloc>
   1ce44:	200008b0 	.word	0x200008b0

0001ce48 <nrfx_gpiote_trigger_enable>:
{
   1ce48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ce4a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ce4c:	f7ff fe14 	bl	1ca78 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1ce50:	f104 0208 	add.w	r2, r4, #8
   1ce54:	4b1e      	ldr	r3, [pc, #120]	; (1ced0 <nrfx_gpiote_trigger_enable+0x88>)
   1ce56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ce5a:	b1e8      	cbz	r0, 1ce98 <nrfx_gpiote_trigger_enable+0x50>
   1ce5c:	f013 0502 	ands.w	r5, r3, #2
   1ce60:	d11a      	bne.n	1ce98 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ce62:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1ce64:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1ce66:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1ce6a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1ce6e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ce72:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ce76:	6005      	str	r5, [r0, #0]
   1ce78:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ce7a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1ce7e:	f040 0001 	orr.w	r0, r0, #1
   1ce82:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1ce86:	b129      	cbz	r1, 1ce94 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1ce88:	2201      	movs	r2, #1
   1ce8a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1ce8e:	4a11      	ldr	r2, [pc, #68]	; (1ced4 <nrfx_gpiote_trigger_enable+0x8c>)
   1ce90:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1ce94:	b003      	add	sp, #12
   1ce96:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ce98:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1ce9c:	2b04      	cmp	r3, #4
   1ce9e:	d012      	beq.n	1cec6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1cea0:	2b05      	cmp	r3, #5
   1cea2:	d012      	beq.n	1ceca <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cea4:	a801      	add	r0, sp, #4
   1cea6:	9401      	str	r4, [sp, #4]
   1cea8:	f7ff fdd8 	bl	1ca5c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ceac:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1ceae:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1ceb2:	40d9      	lsrs	r1, r3
   1ceb4:	f001 0101 	and.w	r1, r1, #1
   1ceb8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1ceba:	4620      	mov	r0, r4
}
   1cebc:	b003      	add	sp, #12
   1cebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1cec2:	f008 b892 	b.w	24fea <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1cec6:	2103      	movs	r1, #3
   1cec8:	e7f7      	b.n	1ceba <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1ceca:	2102      	movs	r1, #2
   1cecc:	e7f5      	b.n	1ceba <nrfx_gpiote_trigger_enable+0x72>
   1cece:	bf00      	nop
   1ced0:	20000840 	.word	0x20000840
   1ced4:	40006000 	.word	0x40006000

0001ced8 <nrfx_gpiote_trigger_disable>:
{
   1ced8:	b508      	push	{r3, lr}
   1ceda:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1cedc:	f7ff fdcc 	bl	1ca78 <pin_in_use_by_te>
   1cee0:	b1c0      	cbz	r0, 1cf14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1cee2:	f102 0108 	add.w	r1, r2, #8
   1cee6:	4b0e      	ldr	r3, [pc, #56]	; (1cf20 <nrfx_gpiote_trigger_disable+0x48>)
   1cee8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ceec:	0799      	lsls	r1, r3, #30
   1ceee:	d411      	bmi.n	1cf14 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1cef0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1cef2:	2201      	movs	r2, #1
   1cef4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1cef6:	009b      	lsls	r3, r3, #2
   1cef8:	490a      	ldr	r1, [pc, #40]	; (1cf24 <nrfx_gpiote_trigger_disable+0x4c>)
   1cefa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cefe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1cf02:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1cf06:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1cf0a:	f022 0203 	bic.w	r2, r2, #3
   1cf0e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1cf12:	bd08      	pop	{r3, pc}
   1cf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1cf18:	2100      	movs	r1, #0
   1cf1a:	4610      	mov	r0, r2
   1cf1c:	f008 b865 	b.w	24fea <nrf_gpio_cfg_sense_set>
   1cf20:	20000840 	.word	0x20000840
   1cf24:	40006000 	.word	0x40006000

0001cf28 <nrfx_gpiote_pin_uninit>:
{
   1cf28:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1cf2a:	4b0e      	ldr	r3, [pc, #56]	; (1cf64 <nrfx_gpiote_pin_uninit+0x3c>)
   1cf2c:	f100 0208 	add.w	r2, r0, #8
{
   1cf30:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1cf32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1cf36:	07db      	lsls	r3, r3, #31
   1cf38:	d511      	bpl.n	1cf5e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1cf3a:	f7ff ffcd 	bl	1ced8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1cf3e:	4620      	mov	r0, r4
   1cf40:	f7ff fdec 	bl	1cb1c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1cf44:	a801      	add	r0, sp, #4
   1cf46:	9401      	str	r4, [sp, #4]
   1cf48:	f7ff fd88 	bl	1ca5c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1cf4c:	9b01      	ldr	r3, [sp, #4]
   1cf4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1cf52:	2202      	movs	r2, #2
   1cf54:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1cf58:	4803      	ldr	r0, [pc, #12]	; (1cf68 <nrfx_gpiote_pin_uninit+0x40>)
}
   1cf5a:	b002      	add	sp, #8
   1cf5c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1cf5e:	4803      	ldr	r0, [pc, #12]	; (1cf6c <nrfx_gpiote_pin_uninit+0x44>)
   1cf60:	e7fb      	b.n	1cf5a <nrfx_gpiote_pin_uninit+0x32>
   1cf62:	bf00      	nop
   1cf64:	20000840 	.word	0x20000840
   1cf68:	0bad0000 	.word	0x0bad0000
   1cf6c:	0bad0004 	.word	0x0bad0004

0001cf70 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1cf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf74:	4b68      	ldr	r3, [pc, #416]	; (1d118 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1cf76:	4869      	ldr	r0, [pc, #420]	; (1d11c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1cf78:	4969      	ldr	r1, [pc, #420]	; (1d120 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1cf7a:	2600      	movs	r6, #0
{
   1cf7c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1cf7e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cf80:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf82:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1cf84:	b135      	cbz	r5, 1cf94 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1cf86:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1cf8a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1cf8c:	bf1e      	ittt	ne
   1cf8e:	601c      	strne	r4, [r3, #0]
   1cf90:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1cf92:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1cf94:	3304      	adds	r3, #4
   1cf96:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1cf98:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1cf9c:	d1f1      	bne.n	1cf82 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf9e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1d11c <nrfx_gpiote_irq_handler+0x1ac>
   1cfa2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	f000 8099 	beq.w	1d0de <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1cfac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1cfb0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1cfb4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1cfb6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1cfba:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1cfbe:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1cfc0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1cfc4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1cfc8:	f10d 0a10 	add.w	sl, sp, #16
   1cfcc:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1cfd0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1cfd2:	f04f 0b01 	mov.w	fp, #1
   1cfd6:	e049      	b.n	1d06c <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1cfd8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1cfda:	4a52      	ldr	r2, [pc, #328]	; (1d124 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1cfdc:	fa94 f4a4 	rbit	r4, r4
   1cfe0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1cfe4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1cfe6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1cfe8:	f104 0308 	add.w	r3, r4, #8
   1cfec:	9403      	str	r4, [sp, #12]
   1cfee:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1cff2:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1cff6:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1cffa:	fa0b f202 	lsl.w	r2, fp, r2
   1cffe:	ea23 0302 	bic.w	r3, r3, r2
   1d002:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d006:	a803      	add	r0, sp, #12
   1d008:	f7ff fd28 	bl	1ca5c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d00c:	9b03      	ldr	r3, [sp, #12]
   1d00e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d012:	08b9      	lsrs	r1, r7, #2
   1d014:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1d018:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1d01c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1d01e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1d020:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1d024:	d52c      	bpl.n	1d080 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1d026:	4620      	mov	r0, r4
   1d028:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d02a:	b2dd      	uxtb	r5, r3
   1d02c:	f7ff fd2e 	bl	1ca8c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d030:	a803      	add	r0, sp, #12
   1d032:	9403      	str	r4, [sp, #12]
   1d034:	f7ff fd12 	bl	1ca5c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1d038:	9b03      	ldr	r3, [sp, #12]
   1d03a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1d03e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1d042:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1d046:	429d      	cmp	r5, r3
   1d048:	d107      	bne.n	1d05a <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1d04a:	2100      	movs	r1, #0
   1d04c:	4620      	mov	r0, r4
   1d04e:	f007 ffcc 	bl	24fea <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1d052:	4629      	mov	r1, r5
   1d054:	4620      	mov	r0, r4
   1d056:	f007 ffc8 	bl	24fea <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1d05a:	a803      	add	r0, sp, #12
   1d05c:	9403      	str	r4, [sp, #12]
   1d05e:	f7ff fcfd 	bl	1ca5c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1d062:	9b03      	ldr	r3, [sp, #12]
   1d064:	fa0b f303 	lsl.w	r3, fp, r3
   1d068:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1d06c:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1d070:	2c00      	cmp	r4, #0
   1d072:	d1b1      	bne.n	1cfd8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1d074:	f1b8 0f00 	cmp.w	r8, #0
   1d078:	d11d      	bne.n	1d0b6 <nrfx_gpiote_irq_handler+0x146>
   1d07a:	f04f 0801 	mov.w	r8, #1
   1d07e:	e7a5      	b.n	1cfcc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1d080:	2b02      	cmp	r3, #2
   1d082:	d10c      	bne.n	1d09e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d084:	2103      	movs	r1, #3
   1d086:	4620      	mov	r0, r4
   1d088:	f007 ffaf 	bl	24fea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d08c:	f005 0305 	and.w	r3, r5, #5
   1d090:	2b01      	cmp	r3, #1
   1d092:	d1e2      	bne.n	1d05a <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1d094:	4639      	mov	r1, r7
   1d096:	4620      	mov	r0, r4
   1d098:	f7ff fcf8 	bl	1ca8c <call_handler>
   1d09c:	e7dd      	b.n	1d05a <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1d09e:	2102      	movs	r1, #2
   1d0a0:	4620      	mov	r0, r4
   1d0a2:	9301      	str	r3, [sp, #4]
   1d0a4:	f007 ffa1 	bl	24fea <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1d0a8:	2d03      	cmp	r5, #3
   1d0aa:	d0f3      	beq.n	1d094 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1d0ac:	9b01      	ldr	r3, [sp, #4]
   1d0ae:	2b03      	cmp	r3, #3
   1d0b0:	d1d3      	bne.n	1d05a <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1d0b2:	2d02      	cmp	r5, #2
   1d0b4:	e7ed      	b.n	1d092 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1d0b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d0ba:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1d0be:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1d0c2:	4919      	ldr	r1, [pc, #100]	; (1d128 <nrfx_gpiote_irq_handler+0x1b8>)
   1d0c4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1d0c8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1d0ca:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1d0ce:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1d0d2:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1d0d4:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1d0d6:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1d0da:	f47f af73 	bne.w	1cfc4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1d0de:	2401      	movs	r4, #1
    while (mask)
   1d0e0:	b916      	cbnz	r6, 1d0e8 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1d0e2:	b007      	add	sp, #28
   1d0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1d0e8:	fa96 f3a6 	rbit	r3, r6
   1d0ec:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1d0f0:	fa04 f203 	lsl.w	r2, r4, r3
   1d0f4:	009b      	lsls	r3, r3, #2
   1d0f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d0fa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d0fe:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d102:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1d106:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1d10a:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1d10e:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1d112:	f7ff fcbb 	bl	1ca8c <call_handler>
   1d116:	e7e3      	b.n	1d0e0 <nrfx_gpiote_irq_handler+0x170>
   1d118:	40006100 	.word	0x40006100
   1d11c:	40006000 	.word	0x40006000
   1d120:	40006120 	.word	0x40006120
   1d124:	20000840 	.word	0x20000840
   1d128:	50000300 	.word	0x50000300

0001d12c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1d12c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1d12e:	4801      	ldr	r0, [pc, #4]	; (1d134 <nrfx_ppi_channel_alloc+0x8>)
   1d130:	f7ff bc54 	b.w	1c9dc <nrfx_flag32_alloc>
   1d134:	200008bc 	.word	0x200008bc

0001d138 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1d138:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1d13a:	4c11      	ldr	r4, [pc, #68]	; (1d180 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1d13c:	4a11      	ldr	r2, [pc, #68]	; (1d184 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1d13e:	4912      	ldr	r1, [pc, #72]	; (1d188 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1d140:	2303      	movs	r3, #3
   1d142:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1d144:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1d146:	4b11      	ldr	r3, [pc, #68]	; (1d18c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1d148:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1d14a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1d14c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1d150:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1d152:	2300      	movs	r3, #0
   1d154:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1d156:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1d158:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1d15a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1d15c:	4a0c      	ldr	r2, [pc, #48]	; (1d190 <_DoInit+0x58>)
   1d15e:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1d160:	2210      	movs	r2, #16
   1d162:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1d164:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1d166:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1d168:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1d16a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1d16c:	f005 fde1 	bl	22d32 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1d170:	4908      	ldr	r1, [pc, #32]	; (1d194 <_DoInit+0x5c>)
   1d172:	4620      	mov	r0, r4
   1d174:	f005 fddd 	bl	22d32 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1d178:	2320      	movs	r3, #32
   1d17a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1d17c:	bd10      	pop	{r4, pc}
   1d17e:	bf00      	nop
   1d180:	20003994 	.word	0x20003994
   1d184:	0002864c 	.word	0x0002864c
   1d188:	00028655 	.word	0x00028655
   1d18c:	20004726 	.word	0x20004726
   1d190:	20004716 	.word	0x20004716
   1d194:	00028659 	.word	0x00028659

0001d198 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1d198:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1d19c:	4f21      	ldr	r7, [pc, #132]	; (1d224 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1d19e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1d1a2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1d1a4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1d1a8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1d1aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1d1ac:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1d1ae:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1d1b0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1d1b2:	d831      	bhi.n	1d218 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1d1b4:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1d1b8:	ebaa 0905 	sub.w	r9, sl, r5
   1d1bc:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1d1c0:	4294      	cmp	r4, r2
   1d1c2:	d811      	bhi.n	1d1e8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1d1c4:	2318      	movs	r3, #24
   1d1c6:	fb06 3303 	mla	r3, r6, r3, r3
   1d1ca:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1d1cc:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1d1ce:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1d1d0:	4641      	mov	r1, r8
   1d1d2:	4428      	add	r0, r5
   1d1d4:	f005 fdee 	bl	22db4 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1d1d8:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1d1da:	2318      	movs	r3, #24
   1d1dc:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1d1e0:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1d1e2:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1d1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1d1e8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1d1ea:	429c      	cmp	r4, r3
   1d1ec:	d818      	bhi.n	1d220 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1d1ee:	fb00 bb0b 	mla	fp, r0, fp, fp
   1d1f2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1d1f4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1d1f6:	f8db 0004 	ldr.w	r0, [fp, #4]
   1d1fa:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1d1fc:	4428      	add	r0, r5
   1d1fe:	f005 fdd9 	bl	22db4 <memcpy>
      if (NumBytes) {
   1d202:	ebb4 040a 	subs.w	r4, r4, sl
   1d206:	d0e8      	beq.n	1d1da <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1d208:	f8db 0004 	ldr.w	r0, [fp, #4]
   1d20c:	4622      	mov	r2, r4
   1d20e:	eb08 0109 	add.w	r1, r8, r9
   1d212:	f005 fdcf 	bl	22db4 <memcpy>
      return 1;
   1d216:	e7e0      	b.n	1d1da <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1d218:	3b01      	subs	r3, #1
   1d21a:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1d21c:	42a3      	cmp	r3, r4
   1d21e:	d2d1      	bcs.n	1d1c4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1d220:	2000      	movs	r0, #0
   1d222:	e7df      	b.n	1d1e4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1d224:	20003994 	.word	0x20003994

0001d228 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1d228:	4b03      	ldr	r3, [pc, #12]	; (1d238 <SEGGER_RTT_HasDataUp+0x10>)
   1d22a:	2218      	movs	r2, #24
   1d22c:	fb02 3300 	mla	r3, r2, r0, r3
   1d230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1d232:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1d234:	1a80      	subs	r0, r0, r2
   1d236:	4770      	bx	lr
   1d238:	20003994 	.word	0x20003994

0001d23c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1d23c:	4803      	ldr	r0, [pc, #12]	; (1d24c <zephyr_rtt_mutex_lock+0x10>)
   1d23e:	f04f 32ff 	mov.w	r2, #4294967295
   1d242:	f04f 33ff 	mov.w	r3, #4294967295
   1d246:	f000 bb51 	b.w	1d8ec <z_impl_k_mutex_lock>
   1d24a:	bf00      	nop
   1d24c:	20000b4c 	.word	0x20000b4c

0001d250 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1d250:	4801      	ldr	r0, [pc, #4]	; (1d258 <zephyr_rtt_mutex_unlock+0x8>)
   1d252:	f000 bbc5 	b.w	1d9e0 <z_impl_k_mutex_unlock>
   1d256:	bf00      	nop
   1d258:	20000b4c 	.word	0x20000b4c

0001d25c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d260:	b086      	sub	sp, #24
   1d262:	4605      	mov	r5, r0
   1d264:	af00      	add	r7, sp, #0
   1d266:	460e      	mov	r6, r1
	__asm__ volatile(
   1d268:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d26c:	f3ef 8811 	mrs	r8, BASEPRI
   1d270:	f383 8812 	msr	BASEPRI_MAX, r3
   1d274:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1d278:	f001 f922 	bl	1e4c0 <z_impl_z_current_get>
   1d27c:	2d04      	cmp	r5, #4
   1d27e:	bf96      	itet	ls
   1d280:	4b2c      	ldrls	r3, [pc, #176]	; (1d334 <z_fatal_error+0xd8>)
   1d282:	4b2d      	ldrhi	r3, [pc, #180]	; (1d338 <z_fatal_error+0xdc>)
   1d284:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1d288:	46e9      	mov	r9, sp
   1d28a:	b08a      	sub	sp, #40	; 0x28
   1d28c:	4604      	mov	r4, r0
   1d28e:	466a      	mov	r2, sp
   1d290:	492a      	ldr	r1, [pc, #168]	; (1d33c <z_fatal_error+0xe0>)
   1d292:	61d3      	str	r3, [r2, #28]
   1d294:	f240 3301 	movw	r3, #769	; 0x301
   1d298:	8493      	strh	r3, [r2, #36]	; 0x24
   1d29a:	f04f 0a00 	mov.w	sl, #0
   1d29e:	4b28      	ldr	r3, [pc, #160]	; (1d340 <z_fatal_error+0xe4>)
   1d2a0:	f8c2 a020 	str.w	sl, [r2, #32]
   1d2a4:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1d2a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d2ac:	4825      	ldr	r0, [pc, #148]	; (1d344 <z_fatal_error+0xe8>)
   1d2ae:	4653      	mov	r3, sl
   1d2b0:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1d2b4:	f7f5 fe82 	bl	12fbc <z_impl_z_log_msg_static_create>
   1d2b8:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1d2ba:	b17e      	cbz	r6, 1d2dc <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1d2bc:	69f3      	ldr	r3, [r6, #28]
   1d2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1d2c2:	b15b      	cbz	r3, 1d2dc <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1d2c4:	4b20      	ldr	r3, [pc, #128]	; (1d348 <z_fatal_error+0xec>)
   1d2c6:	617b      	str	r3, [r7, #20]
   1d2c8:	2302      	movs	r3, #2
   1d2ca:	613b      	str	r3, [r7, #16]
   1d2cc:	481d      	ldr	r0, [pc, #116]	; (1d344 <z_fatal_error+0xe8>)
   1d2ce:	4653      	mov	r3, sl
   1d2d0:	f107 0210 	add.w	r2, r7, #16
   1d2d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d2d8:	f7f5 fe70 	bl	12fbc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1d2dc:	b12c      	cbz	r4, 1d2ea <z_fatal_error+0x8e>
   1d2de:	4620      	mov	r0, r4
   1d2e0:	f007 ff71 	bl	251c6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1d2e4:	b108      	cbz	r0, 1d2ea <z_fatal_error+0x8e>
   1d2e6:	7803      	ldrb	r3, [r0, #0]
   1d2e8:	b903      	cbnz	r3, 1d2ec <z_fatal_error+0x90>
		thread_name = "unknown";
   1d2ea:	4818      	ldr	r0, [pc, #96]	; (1d34c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1d2ec:	46e9      	mov	r9, sp
   1d2ee:	b08a      	sub	sp, #40	; 0x28
   1d2f0:	466a      	mov	r2, sp
   1d2f2:	4b17      	ldr	r3, [pc, #92]	; (1d350 <z_fatal_error+0xf4>)
   1d2f4:	61d0      	str	r0, [r2, #28]
   1d2f6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1d2fa:	f240 3301 	movw	r3, #769	; 0x301
   1d2fe:	8413      	strh	r3, [r2, #32]
   1d300:	4b14      	ldr	r3, [pc, #80]	; (1d354 <z_fatal_error+0xf8>)
   1d302:	f842 3f10 	str.w	r3, [r2, #16]!
   1d306:	2300      	movs	r3, #0
   1d308:	480e      	ldr	r0, [pc, #56]	; (1d344 <z_fatal_error+0xe8>)
   1d30a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d30e:	f7f5 fe55 	bl	12fbc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1d312:	4631      	mov	r1, r6
   1d314:	46cd      	mov	sp, r9
   1d316:	4628      	mov	r0, r5
   1d318:	f7fe fa40 	bl	1b79c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1d31c:	f388 8811 	msr	BASEPRI, r8
   1d320:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1d324:	4620      	mov	r0, r4
   1d326:	f7f7 f93d 	bl	145a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1d32a:	3718      	adds	r7, #24
   1d32c:	46bd      	mov	sp, r7
   1d32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d332:	bf00      	nop
   1d334:	000266e8 	.word	0x000266e8
   1d338:	00028660 	.word	0x00028660
   1d33c:	00028676 	.word	0x00028676
   1d340:	01000005 	.word	0x01000005
   1d344:	00025ff0 	.word	0x00025ff0
   1d348:	0002869e 	.word	0x0002869e
   1d34c:	0002866e 	.word	0x0002866e
   1d350:	000286bf 	.word	0x000286bf
   1d354:	01000004 	.word	0x01000004

0001d358 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d358:	4b0f      	ldr	r3, [pc, #60]	; (1d398 <z_sys_init_run_level+0x40>)
{
   1d35a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d35c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1d360:	3001      	adds	r0, #1
   1d362:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1d366:	42a6      	cmp	r6, r4
   1d368:	d800      	bhi.n	1d36c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1d36a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1d36c:	e9d4 3500 	ldrd	r3, r5, [r4]
   1d370:	4628      	mov	r0, r5
   1d372:	4798      	blx	r3
		if (dev != NULL) {
   1d374:	b16d      	cbz	r5, 1d392 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1d376:	b138      	cbz	r0, 1d388 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1d378:	2800      	cmp	r0, #0
   1d37a:	bfb8      	it	lt
   1d37c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1d37e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1d380:	28ff      	cmp	r0, #255	; 0xff
   1d382:	bfa8      	it	ge
   1d384:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1d386:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1d388:	68ea      	ldr	r2, [r5, #12]
   1d38a:	7853      	ldrb	r3, [r2, #1]
   1d38c:	f043 0301 	orr.w	r3, r3, #1
   1d390:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1d392:	3408      	adds	r4, #8
   1d394:	e7e7      	b.n	1d366 <z_sys_init_run_level+0xe>
   1d396:	bf00      	nop
   1d398:	000266fc 	.word	0x000266fc

0001d39c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1d39c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1d39e:	4b0a      	ldr	r3, [pc, #40]	; (1d3c8 <bg_thread_main+0x2c>)
   1d3a0:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1d3a2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1d3a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1d3a6:	f7ff ffd7 	bl	1d358 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1d3aa:	f001 fbb3 	bl	1eb14 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1d3ae:	2004      	movs	r0, #4
   1d3b0:	f7ff ffd2 	bl	1d358 <z_sys_init_run_level>

	z_init_static_threads();
   1d3b4:	f000 f972 	bl	1d69c <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1d3b8:	f7f3 fe9e 	bl	110f8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1d3bc:	4a03      	ldr	r2, [pc, #12]	; (1d3cc <bg_thread_main+0x30>)
   1d3be:	7b13      	ldrb	r3, [r2, #12]
   1d3c0:	f023 0301 	bic.w	r3, r3, #1
   1d3c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1d3c6:	bd08      	pop	{r3, pc}
   1d3c8:	20004b26 	.word	0x20004b26
   1d3cc:	20002f70 	.word	0x20002f70

0001d3d0 <z_bss_zero>:
{
   1d3d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1d3d2:	4803      	ldr	r0, [pc, #12]	; (1d3e0 <z_bss_zero+0x10>)
   1d3d4:	4a03      	ldr	r2, [pc, #12]	; (1d3e4 <z_bss_zero+0x14>)
   1d3d6:	2100      	movs	r1, #0
   1d3d8:	1a12      	subs	r2, r2, r0
   1d3da:	f007 fe28 	bl	2502e <z_early_memset>
}
   1d3de:	bd08      	pop	{r3, pc}
   1d3e0:	20000cf8 	.word	0x20000cf8
   1d3e4:	20004b28 	.word	0x20004b28

0001d3e8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1d3e8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1d3ea:	2300      	movs	r3, #0
{
   1d3ec:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1d3ee:	2201      	movs	r2, #1
   1d3f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1d3f4:	4e13      	ldr	r6, [pc, #76]	; (1d444 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1d3f6:	4d14      	ldr	r5, [pc, #80]	; (1d448 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1d3f8:	9301      	str	r3, [sp, #4]
   1d3fa:	220f      	movs	r2, #15
   1d3fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1d400:	4912      	ldr	r1, [pc, #72]	; (1d44c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1d402:	2318      	movs	r3, #24
   1d404:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1d408:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1d40c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1d40e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1d412:	fb00 1104 	mla	r1, r0, r4, r1
   1d416:	4b0e      	ldr	r3, [pc, #56]	; (1d450 <z_init_cpu+0x68>)
   1d418:	9500      	str	r5, [sp, #0]
   1d41a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1d41e:	4630      	mov	r0, r6
   1d420:	f000 f8de 	bl	1d5e0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1d424:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1d426:	4a0b      	ldr	r2, [pc, #44]	; (1d454 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1d428:	60ee      	str	r6, [r5, #12]
   1d42a:	f023 0304 	bic.w	r3, r3, #4
   1d42e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1d430:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1d434:	fb04 3303 	mla	r3, r4, r3, r3
   1d438:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1d43a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1d43c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1d43e:	b006      	add	sp, #24
   1d440:	bd70      	pop	{r4, r5, r6, pc}
   1d442:	bf00      	nop
   1d444:	20002ef0 	.word	0x20002ef0
   1d448:	20003a3c 	.word	0x20003a3c
   1d44c:	20007f40 	.word	0x20007f40
   1d450:	0001d755 	.word	0x0001d755
   1d454:	20007700 	.word	0x20007700

0001d458 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1d458:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1d45a:	2000      	movs	r0, #0
{
   1d45c:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1d45e:	f7ff ff7b 	bl	1d358 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1d462:	4b2f      	ldr	r3, [pc, #188]	; (1d520 <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1d464:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1d468:	4c2e      	ldr	r4, [pc, #184]	; (1d524 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1d46a:	4e2f      	ldr	r6, [pc, #188]	; (1d528 <z_cstart+0xd0>)
   1d46c:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d46e:	4f2f      	ldr	r7, [pc, #188]	; (1d52c <z_cstart+0xd4>)
   1d470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1d474:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d476:	23e0      	movs	r3, #224	; 0xe0
   1d478:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1d47c:	2500      	movs	r5, #0
   1d47e:	2320      	movs	r3, #32
   1d480:	77e3      	strb	r3, [r4, #31]
   1d482:	7625      	strb	r5, [r4, #24]
   1d484:	7665      	strb	r5, [r4, #25]
   1d486:	76a5      	strb	r5, [r4, #26]
   1d488:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1d48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d48e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1d492:	6263      	str	r3, [r4, #36]	; 0x24
   1d494:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1d498:	f7f6 fff8 	bl	1448c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1d49c:	f7f6 fb56 	bl	13b4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1d4a0:	f04f 33ff 	mov.w	r3, #4294967295
   1d4a4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1d4a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   1d4a8:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1d4aa:	f7f7 f94b 	bl	14744 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1d4ae:	f7f7 f88f 	bl	145d0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1d4b2:	f7f5 fc13 	bl	12cdc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1d4b6:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1d4ba:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   1d4bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1d4c0:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1d4c4:	f001 fb08 	bl	1ead8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1d4c8:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1d4ca:	f007 fda4 	bl	25016 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1d4ce:	2001      	movs	r0, #1
   1d4d0:	f7ff ff42 	bl	1d358 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1d4d4:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1d4d6:	4c16      	ldr	r4, [pc, #88]	; (1d530 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1d4d8:	f7ff ff3e 	bl	1d358 <z_sys_init_run_level>
	z_sched_init();
   1d4dc:	f000 ff48 	bl	1e370 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d4e0:	4b14      	ldr	r3, [pc, #80]	; (1d534 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1d4e2:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1d4e4:	9305      	str	r3, [sp, #20]
   1d4e6:	2301      	movs	r3, #1
   1d4e8:	4913      	ldr	r1, [pc, #76]	; (1d538 <z_cstart+0xe0>)
   1d4ea:	9500      	str	r5, [sp, #0]
   1d4ec:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1d4f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1d4f4:	463b      	mov	r3, r7
   1d4f6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1d4fa:	4620      	mov	r0, r4
   1d4fc:	f000 f870 	bl	1d5e0 <z_setup_new_thread>
   1d500:	7b62      	ldrb	r2, [r4, #13]
   1d502:	4606      	mov	r6, r0
   1d504:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1d508:	4620      	mov	r0, r4
   1d50a:	7362      	strb	r2, [r4, #13]
   1d50c:	f008 f886 	bl	2561c <z_ready_thread>
	z_init_cpu(0);
   1d510:	4628      	mov	r0, r5
   1d512:	f7ff ff69 	bl	1d3e8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1d516:	463a      	mov	r2, r7
   1d518:	4631      	mov	r1, r6
   1d51a:	4620      	mov	r0, r4
   1d51c:	f7f6 fc9a 	bl	13e54 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1d520:	20007f40 	.word	0x20007f40
   1d524:	e000ed00 	.word	0xe000ed00
   1d528:	20003a3c 	.word	0x20003a3c
   1d52c:	0001d39d 	.word	0x0001d39d
   1d530:	20002f70 	.word	0x20002f70
   1d534:	00028721 	.word	0x00028721
   1d538:	200080c0 	.word	0x200080c0

0001d53c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1d53c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1d53e:	4c06      	ldr	r4, [pc, #24]	; (1d558 <statics_init+0x1c>)
   1d540:	4d06      	ldr	r5, [pc, #24]	; (1d55c <statics_init+0x20>)
   1d542:	42ac      	cmp	r4, r5
   1d544:	d301      	bcc.n	1d54a <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1d546:	2000      	movs	r0, #0
   1d548:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1d54a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1d54e:	4620      	mov	r0, r4
   1d550:	f007 fd71 	bl	25036 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1d554:	3414      	adds	r4, #20
   1d556:	e7f4      	b.n	1d542 <statics_init+0x6>
   1d558:	20000ae8 	.word	0x20000ae8
   1d55c:	20000afc 	.word	0x20000afc

0001d560 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1d560:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d562:	4c06      	ldr	r4, [pc, #24]	; (1d57c <init_mem_slab_module+0x1c>)
   1d564:	4d06      	ldr	r5, [pc, #24]	; (1d580 <init_mem_slab_module+0x20>)
	int rc = 0;
   1d566:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d568:	42ac      	cmp	r4, r5
   1d56a:	d300      	bcc.n	1d56e <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1d56c:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1d56e:	4620      	mov	r0, r4
   1d570:	f007 fdd3 	bl	2511a <create_free_list>
		if (rc < 0) {
   1d574:	2800      	cmp	r0, #0
   1d576:	dbf9      	blt.n	1d56c <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1d578:	341c      	adds	r4, #28
   1d57a:	e7f5      	b.n	1d568 <init_mem_slab_module+0x8>
   1d57c:	20000a94 	.word	0x20000a94
   1d580:	20000ae8 	.word	0x20000ae8

0001d584 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1d584:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d586:	460c      	mov	r4, r1
	__asm__ volatile(
   1d588:	f04f 0540 	mov.w	r5, #64	; 0x40
   1d58c:	f3ef 8111 	mrs	r1, BASEPRI
   1d590:	f385 8812 	msr	BASEPRI_MAX, r5
   1d594:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1d598:	6945      	ldr	r5, [r0, #20]
   1d59a:	b15d      	cbz	r5, 1d5b4 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1d59c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1d59e:	682b      	ldr	r3, [r5, #0]
   1d5a0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1d5a2:	6983      	ldr	r3, [r0, #24]
   1d5a4:	3301      	adds	r3, #1
   1d5a6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1d5a8:	2000      	movs	r0, #0
	__asm__ volatile(
   1d5aa:	f381 8811 	msr	BASEPRI, r1
   1d5ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1d5b2:	e011      	b.n	1d5d8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1d5b4:	ea52 0603 	orrs.w	r6, r2, r3
   1d5b8:	d103      	bne.n	1d5c2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1d5ba:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1d5bc:	f06f 000b 	mvn.w	r0, #11
   1d5c0:	e7f3      	b.n	1d5aa <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1d5c2:	e9cd 2300 	strd	r2, r3, [sp]
   1d5c6:	4602      	mov	r2, r0
   1d5c8:	3008      	adds	r0, #8
   1d5ca:	f000 fddb 	bl	1e184 <z_pend_curr>
		if (result == 0) {
   1d5ce:	b918      	cbnz	r0, 1d5d8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1d5d0:	4b02      	ldr	r3, [pc, #8]	; (1d5dc <k_mem_slab_alloc+0x58>)
   1d5d2:	689b      	ldr	r3, [r3, #8]
   1d5d4:	695b      	ldr	r3, [r3, #20]
   1d5d6:	6023      	str	r3, [r4, #0]
}
   1d5d8:	b002      	add	sp, #8
   1d5da:	bd70      	pop	{r4, r5, r6, pc}
   1d5dc:	20003a3c 	.word	0x20003a3c

0001d5e0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1d5e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1d5e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1d5e6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1d5e8:	2604      	movs	r6, #4
   1d5ea:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1d5ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1d5ee:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1d5f0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1d5f4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1d5f6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1d5f8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d5fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1d5fe:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1d600:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1d604:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1d606:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1d60a:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1d60e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1d610:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1d612:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1d614:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d618:	9202      	str	r2, [sp, #8]
   1d61a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d61c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1d61e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d622:	9200      	str	r2, [sp, #0]
   1d624:	4642      	mov	r2, r8
{
   1d626:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1d628:	f7f6 fbe2 	bl	13df0 <arch_new_thread>
	if (!_current) {
   1d62c:	4b04      	ldr	r3, [pc, #16]	; (1d640 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1d62e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1d630:	689b      	ldr	r3, [r3, #8]
   1d632:	b103      	cbz	r3, 1d636 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1d634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1d636:	6763      	str	r3, [r4, #116]	; 0x74
}
   1d638:	4640      	mov	r0, r8
   1d63a:	b004      	add	sp, #16
   1d63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d640:	20003a3c 	.word	0x20003a3c

0001d644 <z_impl_k_thread_create>:
{
   1d644:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d646:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d648:	2500      	movs	r5, #0
   1d64a:	9505      	str	r5, [sp, #20]
   1d64c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1d64e:	9504      	str	r5, [sp, #16]
   1d650:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1d652:	9503      	str	r5, [sp, #12]
   1d654:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1d656:	9502      	str	r5, [sp, #8]
{
   1d658:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d65c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1d65e:	9501      	str	r5, [sp, #4]
   1d660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1d662:	9500      	str	r5, [sp, #0]
{
   1d664:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1d666:	f7ff ffbb 	bl	1d5e0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1d66a:	f1b6 3fff 	cmp.w	r6, #4294967295
   1d66e:	bf08      	it	eq
   1d670:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1d674:	d005      	beq.n	1d682 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d676:	ea56 0307 	orrs.w	r3, r6, r7
   1d67a:	d105      	bne.n	1d688 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1d67c:	4620      	mov	r0, r4
   1d67e:	f000 fdf7 	bl	1e270 <z_sched_start>
}
   1d682:	4620      	mov	r0, r4
   1d684:	b007      	add	sp, #28
   1d686:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1d688:	4903      	ldr	r1, [pc, #12]	; (1d698 <z_impl_k_thread_create+0x54>)
   1d68a:	463a      	mov	r2, r7
   1d68c:	4633      	mov	r3, r6
   1d68e:	f104 0018 	add.w	r0, r4, #24
   1d692:	f000 fff5 	bl	1e680 <z_add_timeout>
   1d696:	e7f4      	b.n	1d682 <z_impl_k_thread_create+0x3e>
   1d698:	00025589 	.word	0x00025589

0001d69c <z_init_static_threads>:
{
   1d69c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6a0:	4c29      	ldr	r4, [pc, #164]	; (1d748 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1d6a2:	4d2a      	ldr	r5, [pc, #168]	; (1d74c <z_init_static_threads+0xb0>)
{
   1d6a4:	b087      	sub	sp, #28
   1d6a6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1d6a8:	42ae      	cmp	r6, r5
   1d6aa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1d6ae:	d30f      	bcc.n	1d6d0 <z_init_static_threads+0x34>
	k_sched_lock();
   1d6b0:	f000 fe2e 	bl	1e310 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d6b4:	4c24      	ldr	r4, [pc, #144]	; (1d748 <z_init_static_threads+0xac>)
   1d6b6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1d750 <z_init_static_threads+0xb4>
   1d6ba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d6be:	f240 37e7 	movw	r7, #999	; 0x3e7
   1d6c2:	42ac      	cmp	r4, r5
   1d6c4:	d320      	bcc.n	1d708 <z_init_static_threads+0x6c>
}
   1d6c6:	b007      	add	sp, #28
   1d6c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1d6cc:	f000 be34 	b.w	1e338 <k_sched_unlock>
		z_setup_new_thread(
   1d6d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d6d4:	9305      	str	r3, [sp, #20]
   1d6d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1d6da:	9304      	str	r3, [sp, #16]
   1d6dc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1d6e0:	9303      	str	r3, [sp, #12]
   1d6e2:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1d6e6:	9302      	str	r3, [sp, #8]
   1d6e8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1d6ec:	9301      	str	r3, [sp, #4]
   1d6ee:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1d6f2:	9300      	str	r3, [sp, #0]
   1d6f4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1d6f8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1d6fc:	f7ff ff70 	bl	1d5e0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1d700:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1d704:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1d706:	e7ce      	b.n	1d6a6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1d708:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d70a:	1c5a      	adds	r2, r3, #1
   1d70c:	d00d      	beq.n	1d72a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1d70e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1d712:	2100      	movs	r1, #0
   1d714:	4638      	mov	r0, r7
   1d716:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d71a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1d71e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1d722:	d104      	bne.n	1d72e <z_init_static_threads+0x92>
	z_sched_start(thread);
   1d724:	4640      	mov	r0, r8
   1d726:	f000 fda3 	bl	1e270 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1d72a:	3430      	adds	r4, #48	; 0x30
   1d72c:	e7c9      	b.n	1d6c2 <z_init_static_threads+0x26>
   1d72e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d732:	2300      	movs	r3, #0
   1d734:	f7e3 f902 	bl	93c <__aeabi_uldivmod>
   1d738:	4602      	mov	r2, r0
   1d73a:	460b      	mov	r3, r1
   1d73c:	f108 0018 	add.w	r0, r8, #24
   1d740:	4649      	mov	r1, r9
   1d742:	f000 ff9d 	bl	1e680 <z_add_timeout>
   1d746:	e7f0      	b.n	1d72a <z_init_static_threads+0x8e>
   1d748:	00025e94 	.word	0x00025e94
   1d74c:	00025ec4 	.word	0x00025ec4
   1d750:	00025589 	.word	0x00025589

0001d754 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1d754:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1d756:	4c0b      	ldr	r4, [pc, #44]	; (1d784 <idle+0x30>)
	return !z_sys_post_kernel;
   1d758:	4d0b      	ldr	r5, [pc, #44]	; (1d788 <idle+0x34>)
	__asm__ volatile(
   1d75a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d75e:	f3ef 8311 	mrs	r3, BASEPRI
   1d762:	f382 8812 	msr	BASEPRI_MAX, r2
   1d766:	f3bf 8f6f 	isb	sy
   1d76a:	f008 f81d 	bl	257a8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1d76e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1d770:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1d772:	b913      	cbnz	r3, 1d77a <idle+0x26>
	arch_cpu_idle();
   1d774:	f7f6 f9f0 	bl	13b58 <arch_cpu_idle>
}
   1d778:	e7ef      	b.n	1d75a <idle+0x6>
   1d77a:	f7f5 ffcf 	bl	1371c <pm_system_suspend>
   1d77e:	2800      	cmp	r0, #0
   1d780:	d1eb      	bne.n	1d75a <idle+0x6>
   1d782:	e7f7      	b.n	1d774 <idle+0x20>
   1d784:	20003a3c 	.word	0x20003a3c
   1d788:	20004b26 	.word	0x20004b26

0001d78c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1d78c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d790:	4604      	mov	r4, r0
   1d792:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1d794:	f100 0808 	add.w	r8, r0, #8
   1d798:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d79c:	f3ef 8711 	mrs	r7, BASEPRI
   1d7a0:	f381 8812 	msr	BASEPRI_MAX, r1
   1d7a4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1d7a8:	6a05      	ldr	r5, [r0, #32]
   1d7aa:	68c1      	ldr	r1, [r0, #12]
   1d7ac:	428d      	cmp	r5, r1
   1d7ae:	d22f      	bcs.n	1d810 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1d7b0:	f007 ff6b 	bl	2568a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
   1d7b4:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
   1d7b6:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
   1d7b8:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
   1d7ba:	b178      	cbz	r0, 1d7dc <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1d7bc:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
   1d7be:	6940      	ldr	r0, [r0, #20]
   1d7c0:	f005 faf8 	bl	22db4 <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1d7c4:	4628      	mov	r0, r5
   1d7c6:	67ec      	str	r4, [r5, #124]	; 0x7c
   1d7c8:	f007 ff28 	bl	2561c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1d7cc:	4640      	mov	r0, r8
   1d7ce:	4639      	mov	r1, r7
   1d7d0:	f000 fd3c 	bl	1e24c <z_reschedule>
			return 0;
   1d7d4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1d7d6:	b002      	add	sp, #8
   1d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
   1d7dc:	69e0      	ldr	r0, [r4, #28]
   1d7de:	f005 fae9 	bl	22db4 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1d7e2:	69e3      	ldr	r3, [r4, #28]
   1d7e4:	68a2      	ldr	r2, [r4, #8]
   1d7e6:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1d7e8:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1d7ea:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1d7ec:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1d7ee:	bf04      	itt	eq
   1d7f0:	6923      	ldreq	r3, [r4, #16]
   1d7f2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   1d7f4:	6a23      	ldr	r3, [r4, #32]
   1d7f6:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1d7f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   1d7fc:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1d7fe:	2110      	movs	r1, #16
   1d800:	f008 f993 	bl	25b2a <z_handle_obj_poll_events>
		result = 0;
   1d804:	2000      	movs	r0, #0
	__asm__ volatile(
   1d806:	f387 8811 	msr	BASEPRI, r7
   1d80a:	f3bf 8f6f 	isb	sy
	return result;
   1d80e:	e7e2      	b.n	1d7d6 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d810:	ea52 0103 	orrs.w	r1, r2, r3
   1d814:	d00a      	beq.n	1d82c <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   1d816:	4907      	ldr	r1, [pc, #28]	; (1d834 <z_impl_k_msgq_put+0xa8>)
   1d818:	6889      	ldr	r1, [r1, #8]
   1d81a:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d81c:	e9cd 2300 	strd	r2, r3, [sp]
   1d820:	4639      	mov	r1, r7
   1d822:	4602      	mov	r2, r0
   1d824:	4640      	mov	r0, r8
   1d826:	f000 fcad 	bl	1e184 <z_pend_curr>
		return result;
   1d82a:	e7d4      	b.n	1d7d6 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   1d82c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d830:	e7e9      	b.n	1d806 <z_impl_k_msgq_put+0x7a>
   1d832:	bf00      	nop
   1d834:	20003a3c 	.word	0x20003a3c

0001d838 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1d838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d83a:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1d83c:	f104 0708 	add.w	r7, r4, #8
{
   1d840:	4608      	mov	r0, r1
	__asm__ volatile(
   1d842:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d846:	f3ef 8611 	mrs	r6, BASEPRI
   1d84a:	f381 8812 	msr	BASEPRI_MAX, r1
   1d84e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1d852:	6a21      	ldr	r1, [r4, #32]
   1d854:	2900      	cmp	r1, #0
   1d856:	d031      	beq.n	1d8bc <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
   1d858:	68a2      	ldr	r2, [r4, #8]
   1d85a:	69a1      	ldr	r1, [r4, #24]
   1d85c:	f005 faaa 	bl	22db4 <memcpy>
		msgq->read_ptr += msgq->msg_size;
   1d860:	69a3      	ldr	r3, [r4, #24]
   1d862:	68a2      	ldr	r2, [r4, #8]
   1d864:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   1d866:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   1d868:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1d86a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   1d86c:	bf04      	itt	eq
   1d86e:	6923      	ldreq	r3, [r4, #16]
   1d870:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   1d872:	6a23      	ldr	r3, [r4, #32]
   1d874:	3b01      	subs	r3, #1
   1d876:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1d878:	4620      	mov	r0, r4
   1d87a:	f007 ff06 	bl	2568a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1d87e:	4605      	mov	r5, r0
   1d880:	b360      	cbz	r0, 1d8dc <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
   1d882:	6941      	ldr	r1, [r0, #20]
   1d884:	68a2      	ldr	r2, [r4, #8]
   1d886:	69e0      	ldr	r0, [r4, #28]
   1d888:	f005 fa94 	bl	22db4 <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1d88c:	69e3      	ldr	r3, [r4, #28]
   1d88e:	68a2      	ldr	r2, [r4, #8]
   1d890:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   1d892:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   1d894:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1d896:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   1d898:	bf04      	itt	eq
   1d89a:	6923      	ldreq	r3, [r4, #16]
   1d89c:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   1d89e:	6a23      	ldr	r3, [r4, #32]
   1d8a0:	3301      	adds	r3, #1
   1d8a2:	6223      	str	r3, [r4, #32]
   1d8a4:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1d8a6:	4628      	mov	r0, r5
   1d8a8:	67ec      	str	r4, [r5, #124]	; 0x7c
   1d8aa:	f007 feb7 	bl	2561c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1d8ae:	4638      	mov	r0, r7
   1d8b0:	4631      	mov	r1, r6
   1d8b2:	f000 fccb 	bl	1e24c <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1d8b6:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1d8b8:	b003      	add	sp, #12
   1d8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d8bc:	ea52 0103 	orrs.w	r1, r2, r3
   1d8c0:	d00a      	beq.n	1d8d8 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   1d8c2:	4909      	ldr	r1, [pc, #36]	; (1d8e8 <z_impl_k_msgq_get+0xb0>)
   1d8c4:	6889      	ldr	r1, [r1, #8]
   1d8c6:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1d8c8:	e9cd 2300 	strd	r2, r3, [sp]
   1d8cc:	4631      	mov	r1, r6
   1d8ce:	4622      	mov	r2, r4
   1d8d0:	4638      	mov	r0, r7
   1d8d2:	f000 fc57 	bl	1e184 <z_pend_curr>
		return result;
   1d8d6:	e7ef      	b.n	1d8b8 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   1d8d8:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1d8dc:	f386 8811 	msr	BASEPRI, r6
   1d8e0:	f3bf 8f6f 	isb	sy
	return result;
   1d8e4:	e7e8      	b.n	1d8b8 <z_impl_k_msgq_get+0x80>
   1d8e6:	bf00      	nop
   1d8e8:	20003a3c 	.word	0x20003a3c

0001d8ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d8ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d8f0:	4604      	mov	r4, r0
   1d8f2:	4617      	mov	r7, r2
   1d8f4:	461e      	mov	r6, r3
	__asm__ volatile(
   1d8f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8fa:	f3ef 8811 	mrs	r8, BASEPRI
   1d8fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1d902:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d906:	68c3      	ldr	r3, [r0, #12]
   1d908:	4a33      	ldr	r2, [pc, #204]	; (1d9d8 <z_impl_k_mutex_lock+0xec>)
   1d90a:	b17b      	cbz	r3, 1d92c <z_impl_k_mutex_lock+0x40>
   1d90c:	6880      	ldr	r0, [r0, #8]
   1d90e:	6891      	ldr	r1, [r2, #8]
   1d910:	4288      	cmp	r0, r1
   1d912:	d019      	beq.n	1d948 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d914:	ea57 0306 	orrs.w	r3, r7, r6
   1d918:	d118      	bne.n	1d94c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1d91a:	f388 8811 	msr	BASEPRI, r8
   1d91e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1d922:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1d926:	b002      	add	sp, #8
   1d928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1d92c:	6891      	ldr	r1, [r2, #8]
   1d92e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d932:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1d934:	3301      	adds	r3, #1
   1d936:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1d938:	6893      	ldr	r3, [r2, #8]
   1d93a:	60a3      	str	r3, [r4, #8]
   1d93c:	f388 8811 	msr	BASEPRI, r8
   1d940:	f3bf 8f6f 	isb	sy
		return 0;
   1d944:	2000      	movs	r0, #0
   1d946:	e7ee      	b.n	1d926 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1d948:	6921      	ldr	r1, [r4, #16]
   1d94a:	e7f2      	b.n	1d932 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d94c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1d950:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1d954:	4299      	cmp	r1, r3
   1d956:	bfa8      	it	ge
   1d958:	4619      	movge	r1, r3
   1d95a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1d95e:	4291      	cmp	r1, r2
   1d960:	bfb8      	it	lt
   1d962:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d964:	428b      	cmp	r3, r1
   1d966:	dd2e      	ble.n	1d9c6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1d968:	f007 fc38 	bl	251dc <adjust_owner_prio.isra.0>
   1d96c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d96e:	e9cd 7600 	strd	r7, r6, [sp]
   1d972:	481a      	ldr	r0, [pc, #104]	; (1d9dc <z_impl_k_mutex_lock+0xf0>)
   1d974:	4622      	mov	r2, r4
   1d976:	4641      	mov	r1, r8
   1d978:	f000 fc04 	bl	1e184 <z_pend_curr>
	if (got_mutex == 0) {
   1d97c:	2800      	cmp	r0, #0
   1d97e:	d0e1      	beq.n	1d944 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1d980:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d984:	f3ef 8611 	mrs	r6, BASEPRI
   1d988:	f383 8812 	msr	BASEPRI_MAX, r3
   1d98c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1d990:	68a0      	ldr	r0, [r4, #8]
   1d992:	b1d0      	cbz	r0, 1d9ca <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1d994:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d996:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d998:	429c      	cmp	r4, r3
   1d99a:	d00a      	beq.n	1d9b2 <z_impl_k_mutex_lock+0xc6>
   1d99c:	b14b      	cbz	r3, 1d9b2 <z_impl_k_mutex_lock+0xc6>
   1d99e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d9a2:	4299      	cmp	r1, r3
   1d9a4:	bfa8      	it	ge
   1d9a6:	4619      	movge	r1, r3
   1d9a8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1d9ac:	4299      	cmp	r1, r3
   1d9ae:	bfb8      	it	lt
   1d9b0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d9b2:	f007 fc13 	bl	251dc <adjust_owner_prio.isra.0>
   1d9b6:	b140      	cbz	r0, 1d9ca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1d9b8:	4808      	ldr	r0, [pc, #32]	; (1d9dc <z_impl_k_mutex_lock+0xf0>)
   1d9ba:	4631      	mov	r1, r6
   1d9bc:	f000 fc46 	bl	1e24c <z_reschedule>
	return -EAGAIN;
   1d9c0:	f06f 000a 	mvn.w	r0, #10
   1d9c4:	e7af      	b.n	1d926 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1d9c6:	2500      	movs	r5, #0
   1d9c8:	e7d1      	b.n	1d96e <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1d9ca:	2d00      	cmp	r5, #0
   1d9cc:	d1f4      	bne.n	1d9b8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1d9ce:	f386 8811 	msr	BASEPRI, r6
   1d9d2:	f3bf 8f6f 	isb	sy
   1d9d6:	e7f3      	b.n	1d9c0 <z_impl_k_mutex_lock+0xd4>
   1d9d8:	20003a3c 	.word	0x20003a3c
   1d9dc:	20004b27 	.word	0x20004b27

0001d9e0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1d9e0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1d9e2:	6883      	ldr	r3, [r0, #8]
{
   1d9e4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1d9e6:	b36b      	cbz	r3, 1da44 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1d9e8:	4a19      	ldr	r2, [pc, #100]	; (1da50 <z_impl_k_mutex_unlock+0x70>)
   1d9ea:	6892      	ldr	r2, [r2, #8]
   1d9ec:	4293      	cmp	r3, r2
   1d9ee:	d12c      	bne.n	1da4a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1d9f0:	68c3      	ldr	r3, [r0, #12]
   1d9f2:	2b01      	cmp	r3, #1
   1d9f4:	d903      	bls.n	1d9fe <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1d9f6:	3b01      	subs	r3, #1
   1d9f8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1d9fa:	2000      	movs	r0, #0
}
   1d9fc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1d9fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da02:	f3ef 8511 	mrs	r5, BASEPRI
   1da06:	f383 8812 	msr	BASEPRI_MAX, r3
   1da0a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1da0e:	6901      	ldr	r1, [r0, #16]
   1da10:	6880      	ldr	r0, [r0, #8]
   1da12:	f007 fbe3 	bl	251dc <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1da16:	4620      	mov	r0, r4
   1da18:	f007 fe37 	bl	2568a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1da1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1da1e:	b158      	cbz	r0, 1da38 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1da20:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1da24:	6122      	str	r2, [r4, #16]
   1da26:	2200      	movs	r2, #0
   1da28:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1da2a:	f007 fdf7 	bl	2561c <z_ready_thread>
		z_reschedule(&lock, key);
   1da2e:	4809      	ldr	r0, [pc, #36]	; (1da54 <z_impl_k_mutex_unlock+0x74>)
   1da30:	4629      	mov	r1, r5
   1da32:	f000 fc0b 	bl	1e24c <z_reschedule>
   1da36:	e7e0      	b.n	1d9fa <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1da38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1da3a:	f385 8811 	msr	BASEPRI, r5
   1da3e:	f3bf 8f6f 	isb	sy
   1da42:	e7da      	b.n	1d9fa <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1da44:	f06f 0015 	mvn.w	r0, #21
   1da48:	e7d8      	b.n	1d9fc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1da4a:	f04f 30ff 	mov.w	r0, #4294967295
   1da4e:	e7d5      	b.n	1d9fc <z_impl_k_mutex_unlock+0x1c>
   1da50:	20003a3c 	.word	0x20003a3c
   1da54:	20004b27 	.word	0x20004b27

0001da58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1da58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1da5a:	4611      	mov	r1, r2
	__asm__ volatile(
   1da5c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1da60:	f3ef 8511 	mrs	r5, BASEPRI
   1da64:	f382 8812 	msr	BASEPRI_MAX, r2
   1da68:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1da6c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1da6e:	b19c      	cbz	r4, 1da98 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1da70:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1da72:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1da74:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1da78:	4294      	cmp	r4, r2
	list->head = node;
   1da7a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1da7c:	bf08      	it	eq
   1da7e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1da80:	2101      	movs	r1, #1
   1da82:	4620      	mov	r0, r4
   1da84:	f007 fc1f 	bl	252c6 <z_queue_node_peek>
   1da88:	4604      	mov	r4, r0
	__asm__ volatile(
   1da8a:	f385 8811 	msr	BASEPRI, r5
   1da8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1da92:	4620      	mov	r0, r4
   1da94:	b003      	add	sp, #12
   1da96:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1da98:	ea51 0203 	orrs.w	r2, r1, r3
   1da9c:	d0f5      	beq.n	1da8a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1da9e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1daa2:	e9cd 1300 	strd	r1, r3, [sp]
   1daa6:	4610      	mov	r0, r2
   1daa8:	4629      	mov	r1, r5
   1daaa:	f000 fb6b 	bl	1e184 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1daae:	2800      	cmp	r0, #0
   1dab0:	d1ef      	bne.n	1da92 <z_impl_k_queue_get+0x3a>
   1dab2:	4b02      	ldr	r3, [pc, #8]	; (1dabc <z_impl_k_queue_get+0x64>)
   1dab4:	689b      	ldr	r3, [r3, #8]
   1dab6:	695c      	ldr	r4, [r3, #20]
   1dab8:	e7eb      	b.n	1da92 <z_impl_k_queue_get+0x3a>
   1daba:	bf00      	nop
   1dabc:	20003a3c 	.word	0x20003a3c

0001dac0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1dac0:	b538      	push	{r3, r4, r5, lr}
   1dac2:	4604      	mov	r4, r0
	__asm__ volatile(
   1dac4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dac8:	f3ef 8511 	mrs	r5, BASEPRI
   1dacc:	f383 8812 	msr	BASEPRI_MAX, r3
   1dad0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1dad4:	f007 fdd9 	bl	2568a <z_unpend_first_thread>

	if (thread != NULL) {
   1dad8:	b148      	cbz	r0, 1daee <z_impl_k_sem_give+0x2e>
   1dada:	2200      	movs	r2, #0
   1dadc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1dade:	f007 fd9d 	bl	2561c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1dae2:	4629      	mov	r1, r5
   1dae4:	4808      	ldr	r0, [pc, #32]	; (1db08 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1dae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1daea:	f000 bbaf 	b.w	1e24c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1daee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1daf2:	429a      	cmp	r2, r3
   1daf4:	bf18      	it	ne
   1daf6:	3301      	addne	r3, #1
   1daf8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1dafa:	2102      	movs	r1, #2
   1dafc:	f104 0010 	add.w	r0, r4, #16
   1db00:	f008 f813 	bl	25b2a <z_handle_obj_poll_events>
}
   1db04:	e7ed      	b.n	1dae2 <z_impl_k_sem_give+0x22>
   1db06:	bf00      	nop
   1db08:	20004b27 	.word	0x20004b27

0001db0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1db0c:	b513      	push	{r0, r1, r4, lr}
   1db0e:	f04f 0440 	mov.w	r4, #64	; 0x40
   1db12:	f3ef 8111 	mrs	r1, BASEPRI
   1db16:	f384 8812 	msr	BASEPRI_MAX, r4
   1db1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1db1e:	6884      	ldr	r4, [r0, #8]
   1db20:	b144      	cbz	r4, 1db34 <z_impl_k_sem_take+0x28>
		sem->count--;
   1db22:	3c01      	subs	r4, #1
   1db24:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1db26:	f381 8811 	msr	BASEPRI, r1
   1db2a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1db2e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1db30:	b002      	add	sp, #8
   1db32:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1db34:	ea52 0403 	orrs.w	r4, r2, r3
   1db38:	d106      	bne.n	1db48 <z_impl_k_sem_take+0x3c>
   1db3a:	f381 8811 	msr	BASEPRI, r1
   1db3e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1db42:	f06f 000f 	mvn.w	r0, #15
   1db46:	e7f3      	b.n	1db30 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1db48:	e9cd 2300 	strd	r2, r3, [sp]
   1db4c:	4602      	mov	r2, r0
   1db4e:	4802      	ldr	r0, [pc, #8]	; (1db58 <z_impl_k_sem_take+0x4c>)
   1db50:	f000 fb18 	bl	1e184 <z_pend_curr>
	return ret;
   1db54:	e7ec      	b.n	1db30 <z_impl_k_sem_take+0x24>
   1db56:	bf00      	nop
   1db58:	20004b27 	.word	0x20004b27

0001db5c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1db5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1db5e:	4b09      	ldr	r3, [pc, #36]	; (1db84 <k_sys_work_q_init+0x28>)
   1db60:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1db62:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1db64:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1db66:	9300      	str	r3, [sp, #0]
   1db68:	4907      	ldr	r1, [pc, #28]	; (1db88 <k_sys_work_q_init+0x2c>)
   1db6a:	4808      	ldr	r0, [pc, #32]	; (1db8c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1db6c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1db70:	f04f 33ff 	mov.w	r3, #4294967295
   1db74:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1db78:	f000 f924 	bl	1ddc4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1db7c:	4620      	mov	r0, r4
   1db7e:	b004      	add	sp, #16
   1db80:	bd10      	pop	{r4, pc}
   1db82:	bf00      	nop
   1db84:	00028729 	.word	0x00028729
   1db88:	20008500 	.word	0x20008500
   1db8c:	20002ff0 	.word	0x20002ff0

0001db90 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1db90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1db94:	4e4a      	ldr	r6, [pc, #296]	; (1dcc0 <work_queue_main+0x130>)
   1db96:	b085      	sub	sp, #20
   1db98:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1db9a:	f04f 38ff 	mov.w	r8, #4294967295
   1db9e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1dba2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dba6:	f3ef 8711 	mrs	r7, BASEPRI
   1dbaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1dbae:	f3bf 8f6f 	isb	sy
   1dbb2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1dbb6:	b98d      	cbnz	r5, 1dbdc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1dbb8:	2102      	movs	r1, #2
   1dbba:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1dbbe:	f007 fbbf 	bl	25340 <flag_test_and_clear>
   1dbc2:	2800      	cmp	r0, #0
   1dbc4:	d143      	bne.n	1dc4e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1dbc6:	2300      	movs	r3, #0
   1dbc8:	e9cd 8900 	strd	r8, r9, [sp]
   1dbcc:	9302      	str	r3, [sp, #8]
   1dbce:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1dbd2:	4639      	mov	r1, r7
   1dbd4:	483b      	ldr	r0, [pc, #236]	; (1dcc4 <work_queue_main+0x134>)
   1dbd6:	f000 fcd9 	bl	1e58c <z_sched_wait>
			continue;
   1dbda:	e7e2      	b.n	1dba2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dbdc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1dbe0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1dbe2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1dbe6:	4295      	cmp	r5, r2
	list->tail = node;
   1dbe8:	bf08      	it	eq
   1dbea:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1dbee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1dbf2:	f043 0302 	orr.w	r3, r3, #2
   1dbf6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1dbfa:	68eb      	ldr	r3, [r5, #12]
   1dbfc:	f023 0304 	bic.w	r3, r3, #4
   1dc00:	f043 0301 	orr.w	r3, r3, #1
   1dc04:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1dc06:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1dc08:	f387 8811 	msr	BASEPRI, r7
   1dc0c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1dc10:	4628      	mov	r0, r5
   1dc12:	4798      	blx	r3
	__asm__ volatile(
   1dc14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dc18:	f3ef 8b11 	mrs	fp, BASEPRI
   1dc1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc20:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1dc24:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dc26:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1dc28:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dc2c:	d419      	bmi.n	1dc62 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1dc2e:	60ea      	str	r2, [r5, #12]
   1dc30:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1dc34:	f023 0302 	bic.w	r3, r3, #2
   1dc38:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1dc3c:	f38b 8811 	msr	BASEPRI, fp
   1dc40:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1dc44:	05db      	lsls	r3, r3, #23
   1dc46:	d4ac      	bmi.n	1dba2 <work_queue_main+0x12>
	z_impl_k_yield();
   1dc48:	f000 fb9e 	bl	1e388 <z_impl_k_yield>
}
   1dc4c:	e7a9      	b.n	1dba2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1dc4e:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1dc52:	2200      	movs	r2, #0
   1dc54:	2101      	movs	r1, #1
   1dc56:	4628      	mov	r0, r5
   1dc58:	f007 fd6d 	bl	25736 <z_sched_wake>
   1dc5c:	2800      	cmp	r0, #0
   1dc5e:	d1f8      	bne.n	1dc52 <work_queue_main+0xc2>
   1dc60:	e7b1      	b.n	1dbc6 <work_queue_main+0x36>
	return list->head;
   1dc62:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1dc64:	f023 0303 	bic.w	r3, r3, #3
   1dc68:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1dc6a:	2800      	cmp	r0, #0
   1dc6c:	d0e0      	beq.n	1dc30 <work_queue_main+0xa0>
	return node->next;
   1dc6e:	2700      	movs	r7, #0
   1dc70:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1dc74:	463b      	mov	r3, r7
   1dc76:	2800      	cmp	r0, #0
   1dc78:	d0da      	beq.n	1dc30 <work_queue_main+0xa0>
		if (wc->work == work) {
   1dc7a:	6842      	ldr	r2, [r0, #4]
   1dc7c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1dc7e:	4601      	mov	r1, r0
		if (wc->work == work) {
   1dc80:	d10c      	bne.n	1dc9c <work_queue_main+0x10c>
	return node->next;
   1dc82:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dc84:	b99f      	cbnz	r7, 1dcae <work_queue_main+0x11e>
   1dc86:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1dc88:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dc8a:	4282      	cmp	r2, r0
   1dc8c:	d100      	bne.n	1dc90 <work_queue_main+0x100>
	list->tail = node;
   1dc8e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1dc90:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1dc94:	f7ff ff14 	bl	1dac0 <z_impl_k_sem_give>
}
   1dc98:	4639      	mov	r1, r7
   1dc9a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1dc9c:	f1ba 0f00 	cmp.w	sl, #0
   1dca0:	d00b      	beq.n	1dcba <work_queue_main+0x12a>
	return node->next;
   1dca2:	f8da 2000 	ldr.w	r2, [sl]
   1dca6:	4650      	mov	r0, sl
   1dca8:	460f      	mov	r7, r1
   1dcaa:	4692      	mov	sl, r2
   1dcac:	e7e3      	b.n	1dc76 <work_queue_main+0xe6>
	parent->next = child;
   1dcae:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dcb0:	6872      	ldr	r2, [r6, #4]
   1dcb2:	4282      	cmp	r2, r0
	list->tail = node;
   1dcb4:	bf08      	it	eq
   1dcb6:	6077      	streq	r7, [r6, #4]
}
   1dcb8:	e7ea      	b.n	1dc90 <work_queue_main+0x100>
   1dcba:	4652      	mov	r2, sl
   1dcbc:	e7f3      	b.n	1dca6 <work_queue_main+0x116>
   1dcbe:	bf00      	nop
   1dcc0:	20003a64 	.word	0x20003a64
   1dcc4:	20004b27 	.word	0x20004b27

0001dcc8 <cancel_sync_locked>:
{
   1dcc8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1dcca:	68c3      	ldr	r3, [r0, #12]
   1dccc:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1dcd0:	079b      	lsls	r3, r3, #30
{
   1dcd2:	4605      	mov	r5, r0
   1dcd4:	460c      	mov	r4, r1
	if (ret) {
   1dcd6:	d50d      	bpl.n	1dcf4 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dcd8:	2201      	movs	r2, #1
   1dcda:	2100      	movs	r1, #0
   1dcdc:	f104 0008 	add.w	r0, r4, #8
   1dce0:	f007 fb1e 	bl	25320 <z_impl_k_sem_init>
	parent->next = child;
   1dce4:	2300      	movs	r3, #0
   1dce6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1dce8:	4b05      	ldr	r3, [pc, #20]	; (1dd00 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1dcea:	6065      	str	r5, [r4, #4]
   1dcec:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1dcee:	b91a      	cbnz	r2, 1dcf8 <cancel_sync_locked+0x30>
	list->head = node;
   1dcf0:	e9c3 4400 	strd	r4, r4, [r3]
}
   1dcf4:	4630      	mov	r0, r6
   1dcf6:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1dcf8:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1dcfa:	605c      	str	r4, [r3, #4]
}
   1dcfc:	e7fa      	b.n	1dcf4 <cancel_sync_locked+0x2c>
   1dcfe:	bf00      	nop
   1dd00:	20003a64 	.word	0x20003a64

0001dd04 <submit_to_queue_locked>:
{
   1dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1dd06:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dd08:	079a      	lsls	r2, r3, #30
{
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dd0e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1dd12:	d42c      	bmi.n	1dd6e <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1dd14:	075b      	lsls	r3, r3, #29
   1dd16:	d41a      	bmi.n	1dd4e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1dd18:	680b      	ldr	r3, [r1, #0]
   1dd1a:	b90b      	cbnz	r3, 1dd20 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1dd1c:	6883      	ldr	r3, [r0, #8]
   1dd1e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1dd20:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1dd22:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1dd24:	bf44      	itt	mi
   1dd26:	68a3      	ldrmi	r3, [r4, #8]
   1dd28:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1dd2a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1dd2c:	bf4c      	ite	mi
   1dd2e:	2602      	movmi	r6, #2
		ret = 1;
   1dd30:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1dd32:	2d00      	cmp	r5, #0
   1dd34:	d03a      	beq.n	1ddac <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1dd36:	4b1f      	ldr	r3, [pc, #124]	; (1ddb4 <submit_to_queue_locked+0xb0>)
   1dd38:	689b      	ldr	r3, [r3, #8]
   1dd3a:	42ab      	cmp	r3, r5
   1dd3c:	d00a      	beq.n	1dd54 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1dd3e:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1dd42:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1dd44:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1dd48:	d414      	bmi.n	1dd74 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1dd4a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1dd4e:	2300      	movs	r3, #0
   1dd50:	603b      	str	r3, [r7, #0]
	return ret;
   1dd52:	e025      	b.n	1dda0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1dd54:	f007 fa2e 	bl	251b4 <k_is_in_isr>
   1dd58:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1dd5c:	2800      	cmp	r0, #0
   1dd5e:	d1f0      	bne.n	1dd42 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1dd60:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1dd62:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1dd66:	d5f0      	bpl.n	1dd4a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1dd68:	b152      	cbz	r2, 1dd80 <submit_to_queue_locked+0x7c>
   1dd6a:	075b      	lsls	r3, r3, #29
   1dd6c:	d408      	bmi.n	1dd80 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1dd6e:	f06f 060f 	mvn.w	r6, #15
   1dd72:	e7ec      	b.n	1dd4e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1dd74:	2a00      	cmp	r2, #0
   1dd76:	d1fa      	bne.n	1dd6e <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1dd78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1dd7c:	2b00      	cmp	r3, #0
   1dd7e:	d1f6      	bne.n	1dd6e <submit_to_queue_locked+0x6a>
	parent->next = child;
   1dd80:	2300      	movs	r3, #0
   1dd82:	6023      	str	r3, [r4, #0]
	return list->tail;
   1dd84:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1dd88:	b963      	cbnz	r3, 1dda4 <submit_to_queue_locked+0xa0>
	list->head = node;
   1dd8a:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1dd8e:	4628      	mov	r0, r5
   1dd90:	f007 faef 	bl	25372 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1dd94:	68e3      	ldr	r3, [r4, #12]
   1dd96:	f043 0304 	orr.w	r3, r3, #4
   1dd9a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1dd9c:	683b      	ldr	r3, [r7, #0]
   1dd9e:	60a3      	str	r3, [r4, #8]
}
   1dda0:	4630      	mov	r0, r6
   1dda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1dda4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1dda6:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1ddaa:	e7f0      	b.n	1dd8e <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1ddac:	f06f 0615 	mvn.w	r6, #21
   1ddb0:	e7cd      	b.n	1dd4e <submit_to_queue_locked+0x4a>
   1ddb2:	bf00      	nop
   1ddb4:	20003a3c 	.word	0x20003a3c

0001ddb8 <k_work_submit>:
{
   1ddb8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1ddba:	4801      	ldr	r0, [pc, #4]	; (1ddc0 <k_work_submit+0x8>)
   1ddbc:	f007 bb5f 	b.w	2547e <k_work_submit_to_queue>
   1ddc0:	20002ff0 	.word	0x20002ff0

0001ddc4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1ddc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ddc6:	b089      	sub	sp, #36	; 0x24
   1ddc8:	4604      	mov	r4, r0
	list->head = NULL;
   1ddca:	2000      	movs	r0, #0
	list->tail = NULL;
   1ddcc:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1ddd0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1ddd2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1ddd6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1ddda:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ddde:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1dde2:	b31d      	cbz	r5, 1de2c <k_work_queue_start+0x68>
   1dde4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1dde6:	2800      	cmp	r0, #0
   1dde8:	f240 1001 	movw	r0, #257	; 0x101
   1ddec:	bf08      	it	eq
   1ddee:	2001      	moveq	r0, #1
	*flagp = flags;
   1ddf0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ddf4:	2000      	movs	r0, #0
   1ddf6:	f04f 36ff 	mov.w	r6, #4294967295
   1ddfa:	f04f 37ff 	mov.w	r7, #4294967295
   1ddfe:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1de02:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1de06:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1de0a:	4b09      	ldr	r3, [pc, #36]	; (1de30 <k_work_queue_start+0x6c>)
   1de0c:	9400      	str	r4, [sp, #0]
   1de0e:	4620      	mov	r0, r4
   1de10:	f7ff fc18 	bl	1d644 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1de14:	b125      	cbz	r5, 1de20 <k_work_queue_start+0x5c>
   1de16:	6829      	ldr	r1, [r5, #0]
   1de18:	b111      	cbz	r1, 1de20 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1de1a:	4620      	mov	r0, r4
   1de1c:	f007 f9d0 	bl	251c0 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1de20:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1de22:	b009      	add	sp, #36	; 0x24
   1de24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1de28:	f007 b9cf 	b.w	251ca <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1de2c:	2001      	movs	r0, #1
   1de2e:	e7df      	b.n	1ddf0 <k_work_queue_start+0x2c>
   1de30:	0001db91 	.word	0x0001db91

0001de34 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1de34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1de36:	9001      	str	r0, [sp, #4]
   1de38:	4608      	mov	r0, r1
	__asm__ volatile(
   1de3a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1de3e:	f3ef 8411 	mrs	r4, BASEPRI
   1de42:	f381 8812 	msr	BASEPRI_MAX, r1
   1de46:	f3bf 8f6f 	isb	sy
	return *flagp;
   1de4a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1de4c:	f011 0f0e 	tst.w	r1, #14
   1de50:	d116      	bne.n	1de80 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1de52:	ea53 0502 	orrs.w	r5, r3, r2
   1de56:	d108      	bne.n	1de6a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1de58:	a901      	add	r1, sp, #4
   1de5a:	f7ff ff53 	bl	1dd04 <submit_to_queue_locked>
	__asm__ volatile(
   1de5e:	f384 8811 	msr	BASEPRI, r4
   1de62:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1de66:	b003      	add	sp, #12
   1de68:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1de6a:	f041 0108 	orr.w	r1, r1, #8
   1de6e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1de70:	9901      	ldr	r1, [sp, #4]
   1de72:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1de74:	3010      	adds	r0, #16
   1de76:	4903      	ldr	r1, [pc, #12]	; (1de84 <k_work_schedule_for_queue+0x50>)
   1de78:	f000 fc02 	bl	1e680 <z_add_timeout>
	return ret;
   1de7c:	2001      	movs	r0, #1
   1de7e:	e7ee      	b.n	1de5e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1de80:	2000      	movs	r0, #0
   1de82:	e7ec      	b.n	1de5e <k_work_schedule_for_queue+0x2a>
   1de84:	000253e7 	.word	0x000253e7

0001de88 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1de88:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1de8a:	4801      	ldr	r0, [pc, #4]	; (1de90 <k_work_schedule+0x8>)
   1de8c:	f7ff bfd2 	b.w	1de34 <k_work_schedule_for_queue>
   1de90:	20002ff0 	.word	0x20002ff0

0001de94 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1de94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1de96:	460c      	mov	r4, r1
   1de98:	9001      	str	r0, [sp, #4]
   1de9a:	4616      	mov	r6, r2
   1de9c:	461d      	mov	r5, r3
	__asm__ volatile(
   1de9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dea2:	f3ef 8711 	mrs	r7, BASEPRI
   1dea6:	f383 8812 	msr	BASEPRI_MAX, r3
   1deaa:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1deae:	4608      	mov	r0, r1
   1deb0:	f007 fa51 	bl	25356 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1deb4:	ea55 0306 	orrs.w	r3, r5, r6
   1deb8:	d109      	bne.n	1dece <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1deba:	a901      	add	r1, sp, #4
   1debc:	4620      	mov	r0, r4
   1debe:	f7ff ff21 	bl	1dd04 <submit_to_queue_locked>
	__asm__ volatile(
   1dec2:	f387 8811 	msr	BASEPRI, r7
   1dec6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1deca:	b003      	add	sp, #12
   1decc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1dece:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1ded0:	4906      	ldr	r1, [pc, #24]	; (1deec <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1ded2:	f043 0308 	orr.w	r3, r3, #8
   1ded6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1ded8:	9b01      	ldr	r3, [sp, #4]
   1deda:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1dedc:	f104 0010 	add.w	r0, r4, #16
   1dee0:	4632      	mov	r2, r6
   1dee2:	462b      	mov	r3, r5
   1dee4:	f000 fbcc 	bl	1e680 <z_add_timeout>
	return ret;
   1dee8:	2001      	movs	r0, #1
   1deea:	e7ea      	b.n	1dec2 <k_work_reschedule_for_queue+0x2e>
   1deec:	000253e7 	.word	0x000253e7

0001def0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1def0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1def2:	4801      	ldr	r0, [pc, #4]	; (1def8 <k_work_reschedule+0x8>)
   1def4:	f7ff bfce 	b.w	1de94 <k_work_reschedule_for_queue>
   1def8:	20002ff0 	.word	0x20002ff0

0001defc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1defc:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1defe:	4d07      	ldr	r5, [pc, #28]	; (1df1c <z_reset_time_slice+0x20>)
   1df00:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1df02:	b154      	cbz	r4, 1df1a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1df04:	f7fd f922 	bl	1b14c <sys_clock_elapsed>
   1df08:	4b05      	ldr	r3, [pc, #20]	; (1df20 <z_reset_time_slice+0x24>)
   1df0a:	4404      	add	r4, r0
   1df0c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1df0e:	6828      	ldr	r0, [r5, #0]
   1df10:	2100      	movs	r1, #0
	}
}
   1df12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1df16:	f007 bc57 	b.w	257c8 <z_set_timeout_expiry>
}
   1df1a:	bd38      	pop	{r3, r4, r5, pc}
   1df1c:	20003a74 	.word	0x20003a74
   1df20:	20003a3c 	.word	0x20003a3c

0001df24 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1df24:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1df26:	4d0d      	ldr	r5, [pc, #52]	; (1df5c <update_cache+0x38>)
   1df28:	462b      	mov	r3, r5
   1df2a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df2e:	429c      	cmp	r4, r3
   1df30:	d000      	beq.n	1df34 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1df32:	b904      	cbnz	r4, 1df36 <update_cache+0x12>
   1df34:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1df36:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1df38:	b938      	cbnz	r0, 1df4a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1df3a:	7b5a      	ldrb	r2, [r3, #13]
   1df3c:	06d2      	lsls	r2, r2, #27
   1df3e:	d104      	bne.n	1df4a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1df40:	69a2      	ldr	r2, [r4, #24]
   1df42:	b912      	cbnz	r2, 1df4a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1df44:	89da      	ldrh	r2, [r3, #14]
   1df46:	2a7f      	cmp	r2, #127	; 0x7f
   1df48:	d805      	bhi.n	1df56 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1df4a:	429c      	cmp	r4, r3
   1df4c:	d002      	beq.n	1df54 <update_cache+0x30>
			z_reset_time_slice(thread);
   1df4e:	4620      	mov	r0, r4
   1df50:	f7ff ffd4 	bl	1defc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1df54:	4623      	mov	r3, r4
   1df56:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1df58:	bd38      	pop	{r3, r4, r5, pc}
   1df5a:	bf00      	nop
   1df5c:	20003a3c 	.word	0x20003a3c

0001df60 <move_thread_to_end_of_prio_q>:
{
   1df60:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1df62:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1df66:	7b43      	ldrb	r3, [r0, #13]
   1df68:	2a00      	cmp	r2, #0
{
   1df6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1df6c:	da04      	bge.n	1df78 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1df6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1df72:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1df74:	f007 faed 	bl	25552 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1df78:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1df7a:	4a15      	ldr	r2, [pc, #84]	; (1dfd0 <move_thread_to_end_of_prio_q+0x70>)
   1df7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1df80:	4610      	mov	r0, r2
   1df82:	734b      	strb	r3, [r1, #13]
   1df84:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1df88:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df8a:	4283      	cmp	r3, r0
   1df8c:	bf08      	it	eq
   1df8e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1df90:	b923      	cbnz	r3, 1df9c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1df92:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1df96:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1df98:	6251      	str	r1, [r2, #36]	; 0x24
}
   1df9a:	e00c      	b.n	1dfb6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1df9c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1dfa0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1dfa4:	42b5      	cmp	r5, r6
   1dfa6:	d00e      	beq.n	1dfc6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dfa8:	42ae      	cmp	r6, r5
   1dfaa:	dd0c      	ble.n	1dfc6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1dfac:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1dfae:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1dfb2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1dfb4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1dfb6:	6890      	ldr	r0, [r2, #8]
   1dfb8:	1a43      	subs	r3, r0, r1
   1dfba:	4258      	negs	r0, r3
}
   1dfbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1dfc0:	4158      	adcs	r0, r3
   1dfc2:	f7ff bfaf 	b.w	1df24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1dfc6:	429c      	cmp	r4, r3
   1dfc8:	d0e3      	beq.n	1df92 <move_thread_to_end_of_prio_q+0x32>
   1dfca:	681b      	ldr	r3, [r3, #0]
   1dfcc:	e7e0      	b.n	1df90 <move_thread_to_end_of_prio_q+0x30>
   1dfce:	bf00      	nop
   1dfd0:	20003a3c 	.word	0x20003a3c

0001dfd4 <ready_thread>:
{
   1dfd4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1dfd6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1dfda:	7b42      	ldrb	r2, [r0, #13]
   1dfdc:	2b00      	cmp	r3, #0
   1dfde:	db29      	blt.n	1e034 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1dfe0:	06d3      	lsls	r3, r2, #27
   1dfe2:	d127      	bne.n	1e034 <ready_thread+0x60>
	return node->next != NULL;
   1dfe4:	6983      	ldr	r3, [r0, #24]
   1dfe6:	bb2b      	cbnz	r3, 1e034 <ready_thread+0x60>
	return list->head == list;
   1dfe8:	4913      	ldr	r1, [pc, #76]	; (1e038 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1dfea:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1dfee:	7342      	strb	r2, [r0, #13]
   1dff0:	460a      	mov	r2, r1
   1dff2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dff6:	4294      	cmp	r4, r2
   1dff8:	bf18      	it	ne
   1dffa:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1dffc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dffe:	b923      	cbnz	r3, 1e00a <ready_thread+0x36>
	node->prev = tail;
   1e000:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1e004:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1e006:	6248      	str	r0, [r1, #36]	; 0x24
}
   1e008:	e00c      	b.n	1e024 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1e00a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1e00e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1e012:	42b5      	cmp	r5, r6
   1e014:	d00a      	beq.n	1e02c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e016:	42ae      	cmp	r6, r5
   1e018:	dd08      	ble.n	1e02c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1e01a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1e01c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1e020:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1e022:	6058      	str	r0, [r3, #4]
}
   1e024:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1e026:	2000      	movs	r0, #0
   1e028:	f7ff bf7c 	b.w	1df24 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1e02c:	42a3      	cmp	r3, r4
   1e02e:	d0e7      	beq.n	1e000 <ready_thread+0x2c>
   1e030:	681b      	ldr	r3, [r3, #0]
   1e032:	e7e4      	b.n	1dffe <ready_thread+0x2a>
}
   1e034:	bc70      	pop	{r4, r5, r6}
   1e036:	4770      	bx	lr
   1e038:	20003a3c 	.word	0x20003a3c

0001e03c <unready_thread>:
{
   1e03c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1e03e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1e042:	7b43      	ldrb	r3, [r0, #13]
   1e044:	2a00      	cmp	r2, #0
{
   1e046:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1e048:	da04      	bge.n	1e054 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e04e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e050:	f007 fa7f 	bl	25552 <sys_dlist_remove>
	update_cache(thread == _current);
   1e054:	4b04      	ldr	r3, [pc, #16]	; (1e068 <unready_thread+0x2c>)
   1e056:	6898      	ldr	r0, [r3, #8]
   1e058:	1a43      	subs	r3, r0, r1
   1e05a:	4258      	negs	r0, r3
   1e05c:	4158      	adcs	r0, r3
}
   1e05e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1e062:	f7ff bf5f 	b.w	1df24 <update_cache>
   1e066:	bf00      	nop
   1e068:	20003a3c 	.word	0x20003a3c

0001e06c <pend_locked>:
{
   1e06c:	b570      	push	{r4, r5, r6, lr}
   1e06e:	4615      	mov	r5, r2
   1e070:	461c      	mov	r4, r3
   1e072:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1e074:	f007 faaa 	bl	255cc <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e078:	f1b4 3fff 	cmp.w	r4, #4294967295
   1e07c:	bf08      	it	eq
   1e07e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1e082:	d008      	beq.n	1e096 <pend_locked+0x2a>
   1e084:	462a      	mov	r2, r5
   1e086:	4623      	mov	r3, r4
   1e088:	f106 0018 	add.w	r0, r6, #24
   1e08c:	4902      	ldr	r1, [pc, #8]	; (1e098 <pend_locked+0x2c>)
}
   1e08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e092:	f000 baf5 	b.w	1e680 <z_add_timeout>
   1e096:	bd70      	pop	{r4, r5, r6, pc}
   1e098:	00025589 	.word	0x00025589

0001e09c <k_sched_time_slice_set>:
{
   1e09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e09e:	4604      	mov	r4, r0
   1e0a0:	460d      	mov	r5, r1
	__asm__ volatile(
   1e0a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e0a6:	f3ef 8711 	mrs	r7, BASEPRI
   1e0aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1e0ae:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1e0b2:	2600      	movs	r6, #0
   1e0b4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1e0b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1e0bc:	4631      	mov	r1, r6
   1e0be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1e0c2:	2300      	movs	r3, #0
   1e0c4:	fbe4 010c 	umlal	r0, r1, r4, ip
   1e0c8:	f7e2 fc38 	bl	93c <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1e0cc:	42b4      	cmp	r4, r6
   1e0ce:	dd02      	ble.n	1e0d6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1e0d0:	2802      	cmp	r0, #2
   1e0d2:	bfb8      	it	lt
   1e0d4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1e0d6:	4a07      	ldr	r2, [pc, #28]	; (1e0f4 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1e0d8:	4b07      	ldr	r3, [pc, #28]	; (1e0f8 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1e0da:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1e0dc:	4a07      	ldr	r2, [pc, #28]	; (1e0fc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1e0de:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1e0e0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1e0e2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1e0e4:	f7ff ff0a 	bl	1defc <z_reset_time_slice>
	__asm__ volatile(
   1e0e8:	f387 8811 	msr	BASEPRI, r7
   1e0ec:	f3bf 8f6f 	isb	sy
}
   1e0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e0f2:	bf00      	nop
   1e0f4:	20003a74 	.word	0x20003a74
   1e0f8:	20003a3c 	.word	0x20003a3c
   1e0fc:	20003a70 	.word	0x20003a70

0001e100 <z_time_slice>:
{
   1e100:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1e102:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e106:	f3ef 8511 	mrs	r5, BASEPRI
   1e10a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e10e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1e112:	4b17      	ldr	r3, [pc, #92]	; (1e170 <z_time_slice+0x70>)
   1e114:	4a17      	ldr	r2, [pc, #92]	; (1e174 <z_time_slice+0x74>)
   1e116:	689c      	ldr	r4, [r3, #8]
   1e118:	6811      	ldr	r1, [r2, #0]
   1e11a:	428c      	cmp	r4, r1
   1e11c:	d107      	bne.n	1e12e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1e11e:	4620      	mov	r0, r4
   1e120:	f7ff feec 	bl	1defc <z_reset_time_slice>
	__asm__ volatile(
   1e124:	f385 8811 	msr	BASEPRI, r5
   1e128:	f3bf 8f6f 	isb	sy
}
   1e12c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1e12e:	2100      	movs	r1, #0
   1e130:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1e132:	4a11      	ldr	r2, [pc, #68]	; (1e178 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1e134:	6812      	ldr	r2, [r2, #0]
   1e136:	b1c2      	cbz	r2, 1e16a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e138:	89e2      	ldrh	r2, [r4, #14]
   1e13a:	2a7f      	cmp	r2, #127	; 0x7f
   1e13c:	d815      	bhi.n	1e16a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1e13e:	7b62      	ldrb	r2, [r4, #13]
   1e140:	06d2      	lsls	r2, r2, #27
   1e142:	d112      	bne.n	1e16a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e144:	4a0d      	ldr	r2, [pc, #52]	; (1e17c <z_time_slice+0x7c>)
   1e146:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1e14a:	6812      	ldr	r2, [r2, #0]
   1e14c:	4291      	cmp	r1, r2
   1e14e:	db0c      	blt.n	1e16a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1e150:	4a0b      	ldr	r2, [pc, #44]	; (1e180 <z_time_slice+0x80>)
   1e152:	4294      	cmp	r4, r2
   1e154:	d009      	beq.n	1e16a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1e156:	691a      	ldr	r2, [r3, #16]
   1e158:	4282      	cmp	r2, r0
   1e15a:	dc03      	bgt.n	1e164 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1e15c:	4620      	mov	r0, r4
   1e15e:	f7ff feff 	bl	1df60 <move_thread_to_end_of_prio_q>
   1e162:	e7dc      	b.n	1e11e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1e164:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1e166:	611a      	str	r2, [r3, #16]
   1e168:	e7dc      	b.n	1e124 <z_time_slice+0x24>
   1e16a:	2200      	movs	r2, #0
   1e16c:	e7fb      	b.n	1e166 <z_time_slice+0x66>
   1e16e:	bf00      	nop
   1e170:	20003a3c 	.word	0x20003a3c
   1e174:	20003a6c 	.word	0x20003a6c
   1e178:	20003a74 	.word	0x20003a74
   1e17c:	20003a70 	.word	0x20003a70
   1e180:	20002ef0 	.word	0x20002ef0

0001e184 <z_pend_curr>:
{
   1e184:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1e186:	480c      	ldr	r0, [pc, #48]	; (1e1b8 <z_pend_curr+0x34>)
   1e188:	4d0c      	ldr	r5, [pc, #48]	; (1e1bc <z_pend_curr+0x38>)
   1e18a:	6886      	ldr	r6, [r0, #8]
   1e18c:	602e      	str	r6, [r5, #0]
{
   1e18e:	460c      	mov	r4, r1
   1e190:	4611      	mov	r1, r2
   1e192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1e196:	f04f 0640 	mov.w	r6, #64	; 0x40
   1e19a:	f3ef 8511 	mrs	r5, BASEPRI
   1e19e:	f386 8812 	msr	BASEPRI_MAX, r6
   1e1a2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1e1a6:	6880      	ldr	r0, [r0, #8]
   1e1a8:	f7ff ff60 	bl	1e06c <pend_locked>
	ret = arch_swap(key);
   1e1ac:	4620      	mov	r0, r4
}
   1e1ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e1b2:	f7f5 bdc9 	b.w	13d48 <arch_swap>
   1e1b6:	bf00      	nop
   1e1b8:	20003a3c 	.word	0x20003a3c
   1e1bc:	20003a6c 	.word	0x20003a6c

0001e1c0 <z_set_prio>:
{
   1e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1c2:	4604      	mov	r4, r0
   1e1c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e1c8:	f3ef 8611 	mrs	r6, BASEPRI
   1e1cc:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1d0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1e1d4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e1d6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1e1d8:	b249      	sxtb	r1, r1
   1e1da:	d119      	bne.n	1e210 <z_set_prio+0x50>
	return node->next != NULL;
   1e1dc:	6985      	ldr	r5, [r0, #24]
   1e1de:	b9bd      	cbnz	r5, 1e210 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e1e4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e1e6:	f007 f9b4 	bl	25552 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1e1ea:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1e1ec:	4a16      	ldr	r2, [pc, #88]	; (1e248 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1e1ee:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e1f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e1f4:	7343      	strb	r3, [r0, #13]
   1e1f6:	4613      	mov	r3, r2
   1e1f8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e1fc:	4298      	cmp	r0, r3
   1e1fe:	bf18      	it	ne
   1e200:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1e202:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e204:	b95d      	cbnz	r5, 1e21e <z_set_prio+0x5e>
	node->prev = tail;
   1e206:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1e20a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1e20c:	6254      	str	r4, [r2, #36]	; 0x24
}
   1e20e:	e011      	b.n	1e234 <z_set_prio+0x74>
			thread->base.prio = prio;
   1e210:	73a1      	strb	r1, [r4, #14]
   1e212:	2000      	movs	r0, #0
	__asm__ volatile(
   1e214:	f386 8811 	msr	BASEPRI, r6
   1e218:	f3bf 8f6f 	isb	sy
}
   1e21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1e21e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1e222:	42b9      	cmp	r1, r7
   1e224:	d00b      	beq.n	1e23e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e226:	428f      	cmp	r7, r1
   1e228:	dd09      	ble.n	1e23e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1e22a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1e22c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1e230:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e232:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1e234:	2001      	movs	r0, #1
   1e236:	f7ff fe75 	bl	1df24 <update_cache>
   1e23a:	2001      	movs	r0, #1
   1e23c:	e7ea      	b.n	1e214 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1e23e:	42a8      	cmp	r0, r5
   1e240:	d0e1      	beq.n	1e206 <z_set_prio+0x46>
   1e242:	682d      	ldr	r5, [r5, #0]
   1e244:	e7de      	b.n	1e204 <z_set_prio+0x44>
   1e246:	bf00      	nop
   1e248:	20003a3c 	.word	0x20003a3c

0001e24c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1e24c:	b949      	cbnz	r1, 1e262 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e24e:	f3ef 8005 	mrs	r0, IPSR
   1e252:	b930      	cbnz	r0, 1e262 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1e254:	4b05      	ldr	r3, [pc, #20]	; (1e26c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1e256:	69da      	ldr	r2, [r3, #28]
   1e258:	689b      	ldr	r3, [r3, #8]
   1e25a:	429a      	cmp	r2, r3
   1e25c:	d001      	beq.n	1e262 <z_reschedule+0x16>
   1e25e:	f7f5 bd73 	b.w	13d48 <arch_swap>
   1e262:	f381 8811 	msr	BASEPRI, r1
   1e266:	f3bf 8f6f 	isb	sy
}
   1e26a:	4770      	bx	lr
   1e26c:	20003a3c 	.word	0x20003a3c

0001e270 <z_sched_start>:
{
   1e270:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e272:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e276:	f3ef 8411 	mrs	r4, BASEPRI
   1e27a:	f382 8812 	msr	BASEPRI_MAX, r2
   1e27e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1e282:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1e284:	0751      	lsls	r1, r2, #29
   1e286:	d404      	bmi.n	1e292 <z_sched_start+0x22>
	__asm__ volatile(
   1e288:	f384 8811 	msr	BASEPRI, r4
   1e28c:	f3bf 8f6f 	isb	sy
}
   1e290:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1e292:	f022 0204 	bic.w	r2, r2, #4
   1e296:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1e298:	f7ff fe9c 	bl	1dfd4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e29c:	4621      	mov	r1, r4
   1e29e:	4802      	ldr	r0, [pc, #8]	; (1e2a8 <z_sched_start+0x38>)
}
   1e2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1e2a4:	f7ff bfd2 	b.w	1e24c <z_reschedule>
   1e2a8:	20004b27 	.word	0x20004b27

0001e2ac <z_impl_k_thread_suspend>:
{
   1e2ac:	b570      	push	{r4, r5, r6, lr}
   1e2ae:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1e2b0:	3018      	adds	r0, #24
   1e2b2:	f007 fa63 	bl	2577c <z_abort_timeout>
	__asm__ volatile(
   1e2b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e2ba:	f3ef 8611 	mrs	r6, BASEPRI
   1e2be:	f383 8812 	msr	BASEPRI_MAX, r3
   1e2c2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1e2c6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1e2ca:	7b63      	ldrb	r3, [r4, #13]
   1e2cc:	2a00      	cmp	r2, #0
   1e2ce:	da05      	bge.n	1e2dc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e2d4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e2d6:	4620      	mov	r0, r4
   1e2d8:	f007 f93b 	bl	25552 <sys_dlist_remove>
		update_cache(thread == _current);
   1e2dc:	4d0b      	ldr	r5, [pc, #44]	; (1e30c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e2de:	7b63      	ldrb	r3, [r4, #13]
   1e2e0:	68a8      	ldr	r0, [r5, #8]
   1e2e2:	f043 0310 	orr.w	r3, r3, #16
   1e2e6:	7363      	strb	r3, [r4, #13]
   1e2e8:	1b03      	subs	r3, r0, r4
   1e2ea:	4258      	negs	r0, r3
   1e2ec:	4158      	adcs	r0, r3
   1e2ee:	f7ff fe19 	bl	1df24 <update_cache>
	__asm__ volatile(
   1e2f2:	f386 8811 	msr	BASEPRI, r6
   1e2f6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1e2fa:	68ab      	ldr	r3, [r5, #8]
   1e2fc:	42a3      	cmp	r3, r4
   1e2fe:	d103      	bne.n	1e308 <z_impl_k_thread_suspend+0x5c>
}
   1e300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1e304:	f007 b9fd 	b.w	25702 <z_reschedule_unlocked>
}
   1e308:	bd70      	pop	{r4, r5, r6, pc}
   1e30a:	bf00      	nop
   1e30c:	20003a3c 	.word	0x20003a3c

0001e310 <k_sched_lock>:
	__asm__ volatile(
   1e310:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e314:	f3ef 8111 	mrs	r1, BASEPRI
   1e318:	f383 8812 	msr	BASEPRI_MAX, r3
   1e31c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1e320:	4b04      	ldr	r3, [pc, #16]	; (1e334 <k_sched_lock+0x24>)
   1e322:	689a      	ldr	r2, [r3, #8]
   1e324:	7bd3      	ldrb	r3, [r2, #15]
   1e326:	3b01      	subs	r3, #1
   1e328:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1e32a:	f381 8811 	msr	BASEPRI, r1
   1e32e:	f3bf 8f6f 	isb	sy
}
   1e332:	4770      	bx	lr
   1e334:	20003a3c 	.word	0x20003a3c

0001e338 <k_sched_unlock>:
{
   1e338:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e33a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e33e:	f3ef 8411 	mrs	r4, BASEPRI
   1e342:	f383 8812 	msr	BASEPRI_MAX, r3
   1e346:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1e34a:	4b08      	ldr	r3, [pc, #32]	; (1e36c <k_sched_unlock+0x34>)
   1e34c:	689a      	ldr	r2, [r3, #8]
   1e34e:	7bd3      	ldrb	r3, [r2, #15]
   1e350:	3301      	adds	r3, #1
   1e352:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1e354:	2000      	movs	r0, #0
   1e356:	f7ff fde5 	bl	1df24 <update_cache>
	__asm__ volatile(
   1e35a:	f384 8811 	msr	BASEPRI, r4
   1e35e:	f3bf 8f6f 	isb	sy
}
   1e362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1e366:	f007 b9cc 	b.w	25702 <z_reschedule_unlocked>
   1e36a:	bf00      	nop
   1e36c:	20003a3c 	.word	0x20003a3c

0001e370 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1e370:	4b04      	ldr	r3, [pc, #16]	; (1e384 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1e372:	2100      	movs	r1, #0
   1e374:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1e378:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1e37c:	4608      	mov	r0, r1
   1e37e:	f7ff be8d 	b.w	1e09c <k_sched_time_slice_set>
   1e382:	bf00      	nop
   1e384:	20003a3c 	.word	0x20003a3c

0001e388 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1e38a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e38e:	f3ef 8511 	mrs	r5, BASEPRI
   1e392:	f383 8812 	msr	BASEPRI_MAX, r3
   1e396:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1e39a:	4919      	ldr	r1, [pc, #100]	; (1e400 <z_impl_k_yield+0x78>)
   1e39c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e39e:	7b43      	ldrb	r3, [r0, #13]
   1e3a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e3a4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e3a6:	f007 f8d4 	bl	25552 <sys_dlist_remove>
	}
	queue_thread(_current);
   1e3aa:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e3ac:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1e3ae:	4608      	mov	r0, r1
   1e3b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1e3b4:	735a      	strb	r2, [r3, #13]
   1e3b6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1e3ba:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e3bc:	4282      	cmp	r2, r0
   1e3be:	bf08      	it	eq
   1e3c0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e3c2:	b922      	cbnz	r2, 1e3ce <z_impl_k_yield+0x46>
	node->prev = tail;
   1e3c4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1e3c8:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1e3ca:	624b      	str	r3, [r1, #36]	; 0x24
}
   1e3cc:	e00c      	b.n	1e3e8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1e3ce:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1e3d2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1e3d6:	42be      	cmp	r6, r7
   1e3d8:	d00e      	beq.n	1e3f8 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e3da:	42b7      	cmp	r7, r6
   1e3dc:	dd0c      	ble.n	1e3f8 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1e3de:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1e3e0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1e3e4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1e3e6:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1e3e8:	2001      	movs	r0, #1
   1e3ea:	f7ff fd9b 	bl	1df24 <update_cache>
   1e3ee:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1e3f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1e3f4:	f7f5 bca8 	b.w	13d48 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1e3f8:	42a2      	cmp	r2, r4
   1e3fa:	d0e3      	beq.n	1e3c4 <z_impl_k_yield+0x3c>
   1e3fc:	6812      	ldr	r2, [r2, #0]
   1e3fe:	e7e0      	b.n	1e3c2 <z_impl_k_yield+0x3a>
   1e400:	20003a3c 	.word	0x20003a3c

0001e404 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1e404:	ea50 0301 	orrs.w	r3, r0, r1
{
   1e408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e40c:	4605      	mov	r5, r0
   1e40e:	460e      	mov	r6, r1
	if (ticks == 0) {
   1e410:	d103      	bne.n	1e41a <z_tick_sleep+0x16>
	z_impl_k_yield();
   1e412:	f7ff ffb9 	bl	1e388 <z_impl_k_yield>
		k_yield();
		return 0;
   1e416:	2000      	movs	r0, #0
   1e418:	e02c      	b.n	1e474 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1e41a:	1c83      	adds	r3, r0, #2
   1e41c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1e420:	db2a      	blt.n	1e478 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1e422:	f007 f9ed 	bl	25800 <sys_clock_tick_get_32>
   1e426:	182c      	adds	r4, r5, r0
   1e428:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e42c:	f3ef 8811 	mrs	r8, BASEPRI
   1e430:	f383 8812 	msr	BASEPRI_MAX, r3
   1e434:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1e438:	4f11      	ldr	r7, [pc, #68]	; (1e480 <z_tick_sleep+0x7c>)
   1e43a:	4b12      	ldr	r3, [pc, #72]	; (1e484 <z_tick_sleep+0x80>)
   1e43c:	68b8      	ldr	r0, [r7, #8]
   1e43e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1e440:	f7ff fdfc 	bl	1e03c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1e444:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e446:	4910      	ldr	r1, [pc, #64]	; (1e488 <z_tick_sleep+0x84>)
   1e448:	462a      	mov	r2, r5
   1e44a:	4633      	mov	r3, r6
   1e44c:	3018      	adds	r0, #24
   1e44e:	f000 f917 	bl	1e680 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1e452:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1e454:	7b53      	ldrb	r3, [r2, #13]
   1e456:	f043 0310 	orr.w	r3, r3, #16
   1e45a:	7353      	strb	r3, [r2, #13]
   1e45c:	4640      	mov	r0, r8
   1e45e:	f7f5 fc73 	bl	13d48 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1e462:	f007 f9cd 	bl	25800 <sys_clock_tick_get_32>
   1e466:	1a20      	subs	r0, r4, r0
   1e468:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1e46c:	2801      	cmp	r0, #1
   1e46e:	f173 0300 	sbcs.w	r3, r3, #0
   1e472:	dbd0      	blt.n	1e416 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1e474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1e478:	f06f 0401 	mvn.w	r4, #1
   1e47c:	1a24      	subs	r4, r4, r0
   1e47e:	e7d3      	b.n	1e428 <z_tick_sleep+0x24>
   1e480:	20003a3c 	.word	0x20003a3c
   1e484:	20003a6c 	.word	0x20003a6c
   1e488:	00025589 	.word	0x00025589

0001e48c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e48c:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e490:	bf08      	it	eq
   1e492:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1e496:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e498:	d106      	bne.n	1e4a8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1e49a:	4b08      	ldr	r3, [pc, #32]	; (1e4bc <z_impl_k_sleep+0x30>)
   1e49c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1e49e:	f7ff ff05 	bl	1e2ac <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1e4a2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1e4a6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1e4a8:	f7ff ffac 	bl	1e404 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1e4ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e4b0:	fb80 0303 	smull	r0, r3, r0, r3
   1e4b4:	0bc0      	lsrs	r0, r0, #15
   1e4b6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1e4ba:	e7f4      	b.n	1e4a6 <z_impl_k_sleep+0x1a>
   1e4bc:	20003a3c 	.word	0x20003a3c

0001e4c0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1e4c0:	4b01      	ldr	r3, [pc, #4]	; (1e4c8 <z_impl_z_current_get+0x8>)
   1e4c2:	6898      	ldr	r0, [r3, #8]
   1e4c4:	4770      	bx	lr
   1e4c6:	bf00      	nop
   1e4c8:	20003a3c 	.word	0x20003a3c

0001e4cc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e4d0:	4604      	mov	r4, r0
   1e4d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e4d6:	f3ef 8611 	mrs	r6, BASEPRI
   1e4da:	f383 8812 	msr	BASEPRI_MAX, r3
   1e4de:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1e4e2:	7b03      	ldrb	r3, [r0, #12]
   1e4e4:	07d9      	lsls	r1, r3, #31
   1e4e6:	d50b      	bpl.n	1e500 <z_thread_abort+0x34>
	__asm__ volatile(
   1e4e8:	f386 8811 	msr	BASEPRI, r6
   1e4ec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1e4f0:	4040      	eors	r0, r0
   1e4f2:	f380 8811 	msr	BASEPRI, r0
   1e4f6:	f04f 0004 	mov.w	r0, #4
   1e4fa:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1e500:	7b43      	ldrb	r3, [r0, #13]
   1e502:	071a      	lsls	r2, r3, #28
   1e504:	d504      	bpl.n	1e510 <z_thread_abort+0x44>
   1e506:	f386 8811 	msr	BASEPRI, r6
   1e50a:	f3bf 8f6f 	isb	sy
   1e50e:	e7f5      	b.n	1e4fc <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1e510:	f023 0220 	bic.w	r2, r3, #32
   1e514:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1e518:	09d2      	lsrs	r2, r2, #7
   1e51a:	d120      	bne.n	1e55e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1e51c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1e51e:	68a3      	ldr	r3, [r4, #8]
   1e520:	b113      	cbz	r3, 1e528 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1e522:	4620      	mov	r0, r4
   1e524:	f007 f81d 	bl	25562 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1e528:	f104 0018 	add.w	r0, r4, #24
   1e52c:	f007 f926 	bl	2577c <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1e530:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1e534:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1e538:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e53a:	42bd      	cmp	r5, r7
   1e53c:	d000      	beq.n	1e540 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e53e:	b9b5      	cbnz	r5, 1e56e <z_thread_abort+0xa2>
		update_cache(1);
   1e540:	2001      	movs	r0, #1
   1e542:	f7ff fcef 	bl	1df24 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1e546:	4b10      	ldr	r3, [pc, #64]	; (1e588 <z_thread_abort+0xbc>)
   1e548:	689b      	ldr	r3, [r3, #8]
   1e54a:	42a3      	cmp	r3, r4
   1e54c:	d1db      	bne.n	1e506 <z_thread_abort+0x3a>
   1e54e:	f3ef 8305 	mrs	r3, IPSR
   1e552:	2b00      	cmp	r3, #0
   1e554:	d1d7      	bne.n	1e506 <z_thread_abort+0x3a>
   1e556:	4630      	mov	r0, r6
   1e558:	f7f5 fbf6 	bl	13d48 <arch_swap>
	return ret;
   1e55c:	e7d3      	b.n	1e506 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e55e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1e562:	f043 0308 	orr.w	r3, r3, #8
   1e566:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1e568:	f006 fff3 	bl	25552 <sys_dlist_remove>
}
   1e56c:	e7d7      	b.n	1e51e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1e56e:	4628      	mov	r0, r5
   1e570:	f006 fff7 	bl	25562 <unpend_thread_no_timeout>
   1e574:	f105 0018 	add.w	r0, r5, #24
   1e578:	f007 f900 	bl	2577c <z_abort_timeout>
   1e57c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1e580:	4628      	mov	r0, r5
   1e582:	f7ff fd27 	bl	1dfd4 <ready_thread>
   1e586:	e7d7      	b.n	1e538 <z_thread_abort+0x6c>
   1e588:	20003a3c 	.word	0x20003a3c

0001e58c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1e58c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1e58e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1e592:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1e594:	e9cd 6700 	strd	r6, r7, [sp]
   1e598:	f7ff fdf4 	bl	1e184 <z_pend_curr>

	if (data != NULL) {
   1e59c:	b11c      	cbz	r4, 1e5a6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1e59e:	4b03      	ldr	r3, [pc, #12]	; (1e5ac <z_sched_wait+0x20>)
   1e5a0:	689b      	ldr	r3, [r3, #8]
   1e5a2:	695b      	ldr	r3, [r3, #20]
   1e5a4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1e5a6:	b002      	add	sp, #8
   1e5a8:	bdd0      	pop	{r4, r6, r7, pc}
   1e5aa:	bf00      	nop
   1e5ac:	20003a3c 	.word	0x20003a3c

0001e5b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1e5b0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1e5b2:	4806      	ldr	r0, [pc, #24]	; (1e5cc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1e5b4:	4a06      	ldr	r2, [pc, #24]	; (1e5d0 <z_data_copy+0x20>)
   1e5b6:	4907      	ldr	r1, [pc, #28]	; (1e5d4 <z_data_copy+0x24>)
   1e5b8:	1a12      	subs	r2, r2, r0
   1e5ba:	f006 fd3a 	bl	25032 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1e5be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1e5c2:	4a05      	ldr	r2, [pc, #20]	; (1e5d8 <z_data_copy+0x28>)
   1e5c4:	4905      	ldr	r1, [pc, #20]	; (1e5dc <z_data_copy+0x2c>)
   1e5c6:	4806      	ldr	r0, [pc, #24]	; (1e5e0 <z_data_copy+0x30>)
   1e5c8:	f006 bd33 	b.w	25032 <z_early_memcpy>
   1e5cc:	20000000 	.word	0x20000000
   1e5d0:	20000cf4 	.word	0x20000cf4
   1e5d4:	00028760 	.word	0x00028760
   1e5d8:	00000000 	.word	0x00000000
   1e5dc:	00028760 	.word	0x00028760
   1e5e0:	20000000 	.word	0x20000000

0001e5e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1e5e4:	4b03      	ldr	r3, [pc, #12]	; (1e5f4 <elapsed+0x10>)
   1e5e6:	681b      	ldr	r3, [r3, #0]
   1e5e8:	b90b      	cbnz	r3, 1e5ee <elapsed+0xa>
   1e5ea:	f7fc bdaf 	b.w	1b14c <sys_clock_elapsed>
}
   1e5ee:	2000      	movs	r0, #0
   1e5f0:	4770      	bx	lr
   1e5f2:	bf00      	nop
   1e5f4:	20003a78 	.word	0x20003a78

0001e5f8 <next_timeout>:

static int32_t next_timeout(void)
{
   1e5f8:	b510      	push	{r4, lr}
	return list->head == list;
   1e5fa:	4b11      	ldr	r3, [pc, #68]	; (1e640 <next_timeout+0x48>)
   1e5fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e5fe:	429c      	cmp	r4, r3
   1e600:	d10a      	bne.n	1e618 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1e602:	f7ff ffef 	bl	1e5e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1e606:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1e60a:	4b0e      	ldr	r3, [pc, #56]	; (1e644 <next_timeout+0x4c>)
   1e60c:	691b      	ldr	r3, [r3, #16]
   1e60e:	b113      	cbz	r3, 1e616 <next_timeout+0x1e>
   1e610:	4298      	cmp	r0, r3
   1e612:	bfa8      	it	ge
   1e614:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1e616:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1e618:	f7ff ffe4 	bl	1e5e4 <elapsed>
	if ((to == NULL) ||
   1e61c:	2c00      	cmp	r4, #0
   1e61e:	d0f2      	beq.n	1e606 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1e620:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1e624:	1a1b      	subs	r3, r3, r0
   1e626:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1e62a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1e62e:	f172 0100 	sbcs.w	r1, r2, #0
   1e632:	dae8      	bge.n	1e606 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1e634:	2a00      	cmp	r2, #0
   1e636:	bfac      	ite	ge
   1e638:	4618      	movge	r0, r3
   1e63a:	2000      	movlt	r0, #0
   1e63c:	e7e5      	b.n	1e60a <next_timeout+0x12>
   1e63e:	bf00      	nop
   1e640:	200008c0 	.word	0x200008c0
   1e644:	20003a3c 	.word	0x20003a3c

0001e648 <remove_timeout>:
{
   1e648:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1e64a:	b170      	cbz	r0, 1e66a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1e64c:	4b0b      	ldr	r3, [pc, #44]	; (1e67c <remove_timeout+0x34>)
   1e64e:	685b      	ldr	r3, [r3, #4]
   1e650:	4298      	cmp	r0, r3
   1e652:	d00a      	beq.n	1e66a <remove_timeout+0x22>
   1e654:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1e656:	b143      	cbz	r3, 1e66a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1e658:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1e65c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1e660:	1912      	adds	r2, r2, r4
   1e662:	eb41 0105 	adc.w	r1, r1, r5
   1e666:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1e66a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1e66e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e670:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e672:	2300      	movs	r3, #0
	node->prev = NULL;
   1e674:	e9c0 3300 	strd	r3, r3, [r0]
}
   1e678:	bd30      	pop	{r4, r5, pc}
   1e67a:	bf00      	nop
   1e67c:	200008c0 	.word	0x200008c0

0001e680 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e680:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e684:	bf08      	it	eq
   1e686:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1e68a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e68c:	4604      	mov	r4, r0
   1e68e:	461d      	mov	r5, r3
   1e690:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e692:	d061      	beq.n	1e758 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1e694:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1e696:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e69a:	f3ef 8711 	mrs	r7, BASEPRI
   1e69e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6a2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1e6a6:	3201      	adds	r2, #1
   1e6a8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1e6ac:	da24      	bge.n	1e6f8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1e6ae:	4930      	ldr	r1, [pc, #192]	; (1e770 <z_add_timeout+0xf0>)
   1e6b0:	e9d1 2000 	ldrd	r2, r0, [r1]
   1e6b4:	f06f 0301 	mvn.w	r3, #1
   1e6b8:	1a9b      	subs	r3, r3, r2
   1e6ba:	f04f 32ff 	mov.w	r2, #4294967295
   1e6be:	eb62 0000 	sbc.w	r0, r2, r0
   1e6c2:	1b9e      	subs	r6, r3, r6
   1e6c4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1e6c8:	2e01      	cmp	r6, #1
   1e6ca:	f170 0300 	sbcs.w	r3, r0, #0
   1e6ce:	da01      	bge.n	1e6d4 <z_add_timeout+0x54>
   1e6d0:	2601      	movs	r6, #1
   1e6d2:	2000      	movs	r0, #0
   1e6d4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1e6d8:	4e26      	ldr	r6, [pc, #152]	; (1e774 <z_add_timeout+0xf4>)
   1e6da:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1e6de:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e6e0:	45b4      	cmp	ip, r6
   1e6e2:	bf08      	it	eq
   1e6e4:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1e6e8:	f1bc 0f00 	cmp.w	ip, #0
   1e6ec:	d10d      	bne.n	1e70a <z_add_timeout+0x8a>
	node->prev = tail;
   1e6ee:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1e6f2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1e6f4:	6074      	str	r4, [r6, #4]
}
   1e6f6:	e01c      	b.n	1e732 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1e6f8:	f7ff ff74 	bl	1e5e4 <elapsed>
   1e6fc:	3601      	adds	r6, #1
   1e6fe:	f145 0500 	adc.w	r5, r5, #0
   1e702:	1836      	adds	r6, r6, r0
   1e704:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1e708:	e7e4      	b.n	1e6d4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1e70a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1e70e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1e712:	4293      	cmp	r3, r2
   1e714:	eb71 0e00 	sbcs.w	lr, r1, r0
   1e718:	da1f      	bge.n	1e75a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1e71a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1e71c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1e720:	eb60 0001 	sbc.w	r0, r0, r1
   1e724:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1e728:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1e72c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1e72e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1e732:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e734:	42b3      	cmp	r3, r6
   1e736:	d00b      	beq.n	1e750 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1e738:	429c      	cmp	r4, r3
   1e73a:	d109      	bne.n	1e750 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1e73c:	f7ff ff5c 	bl	1e5f8 <next_timeout>

			if (next_time == 0 ||
   1e740:	b118      	cbz	r0, 1e74a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   1e742:	4b0d      	ldr	r3, [pc, #52]	; (1e778 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   1e744:	691b      	ldr	r3, [r3, #16]
   1e746:	4283      	cmp	r3, r0
   1e748:	d002      	beq.n	1e750 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1e74a:	2100      	movs	r1, #0
   1e74c:	f7fc fccc 	bl	1b0e8 <sys_clock_set_timeout>
	__asm__ volatile(
   1e750:	f387 8811 	msr	BASEPRI, r7
   1e754:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1e758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1e75a:	1a9b      	subs	r3, r3, r2
   1e75c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1e760:	45ac      	cmp	ip, r5
   1e762:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1e766:	d0c2      	beq.n	1e6ee <z_add_timeout+0x6e>
   1e768:	f8dc c000 	ldr.w	ip, [ip]
   1e76c:	e7bc      	b.n	1e6e8 <z_add_timeout+0x68>
   1e76e:	bf00      	nop
   1e770:	20003090 	.word	0x20003090
   1e774:	200008c0 	.word	0x200008c0
   1e778:	20003a3c 	.word	0x20003a3c

0001e77c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1e77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e780:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1e782:	f7ff fcbd 	bl	1e100 <z_time_slice>
	__asm__ volatile(
   1e786:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e78a:	f3ef 8611 	mrs	r6, BASEPRI
   1e78e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e792:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1e796:	4f23      	ldr	r7, [pc, #140]	; (1e824 <sys_clock_announce+0xa8>)
	return list->head == list;
   1e798:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1e828 <sys_clock_announce+0xac>
   1e79c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1e7a0:	4a22      	ldr	r2, [pc, #136]	; (1e82c <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   1e7a2:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e7a4:	4540      	cmp	r0, r8
		curr_tick += dt;
   1e7a6:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1e7aa:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1e7ae:	d00b      	beq.n	1e7c8 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1e7b0:	b150      	cbz	r0, 1e7c8 <sys_clock_announce+0x4c>
   1e7b2:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   1e7b6:	42ac      	cmp	r4, r5
   1e7b8:	eb71 090c 	sbcs.w	r9, r1, ip
   1e7bc:	da16      	bge.n	1e7ec <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1e7be:	1b2d      	subs	r5, r5, r4
   1e7c0:	eb6c 0c01 	sbc.w	ip, ip, r1
   1e7c4:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1e7c8:	18e3      	adds	r3, r4, r3
   1e7ca:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1e7ce:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1e7d0:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1e7d4:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1e7d6:	f7ff ff0f 	bl	1e5f8 <next_timeout>
   1e7da:	4621      	mov	r1, r4
   1e7dc:	f7fc fc84 	bl	1b0e8 <sys_clock_set_timeout>
	__asm__ volatile(
   1e7e0:	f386 8811 	msr	BASEPRI, r6
   1e7e4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1e7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1e7ec:	18eb      	adds	r3, r5, r3
   1e7ee:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1e7f2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1e7f6:	2200      	movs	r2, #0
   1e7f8:	2300      	movs	r3, #0
   1e7fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1e7fe:	f7ff ff23 	bl	1e648 <remove_timeout>
   1e802:	f386 8811 	msr	BASEPRI, r6
   1e806:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1e80a:	6883      	ldr	r3, [r0, #8]
   1e80c:	4798      	blx	r3
	__asm__ volatile(
   1e80e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e812:	f3ef 8611 	mrs	r6, BASEPRI
   1e816:	f383 8812 	msr	BASEPRI_MAX, r3
   1e81a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1e81e:	683c      	ldr	r4, [r7, #0]
   1e820:	1b64      	subs	r4, r4, r5
   1e822:	e7bb      	b.n	1e79c <sys_clock_announce+0x20>
   1e824:	20003a78 	.word	0x20003a78
   1e828:	200008c0 	.word	0x200008c0
   1e82c:	20003090 	.word	0x20003090

0001e830 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1e830:	b510      	push	{r4, lr}
   1e832:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e836:	f3ef 8411 	mrs	r4, BASEPRI
   1e83a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e83e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1e842:	f7ff fecf 	bl	1e5e4 <elapsed>
   1e846:	4a06      	ldr	r2, [pc, #24]	; (1e860 <sys_clock_tick_get+0x30>)
   1e848:	4603      	mov	r3, r0
   1e84a:	e9d2 0100 	ldrd	r0, r1, [r2]
   1e84e:	1818      	adds	r0, r3, r0
   1e850:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1e854:	f384 8811 	msr	BASEPRI, r4
   1e858:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1e85c:	bd10      	pop	{r4, pc}
   1e85e:	bf00      	nop
   1e860:	20003090 	.word	0x20003090

0001e864 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1e864:	b570      	push	{r4, r5, r6, lr}
   1e866:	4604      	mov	r4, r0
	__asm__ volatile(
   1e868:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e86c:	f3ef 8511 	mrs	r5, BASEPRI
   1e870:	f383 8812 	msr	BASEPRI_MAX, r3
   1e874:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1e878:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1e87c:	3301      	adds	r3, #1
   1e87e:	f142 0200 	adc.w	r2, r2, #0
   1e882:	2b02      	cmp	r3, #2
   1e884:	f172 0200 	sbcs.w	r2, r2, #0
   1e888:	d322      	bcc.n	1e8d0 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   1e88a:	f006 ffbd 	bl	25808 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1e88e:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   1e892:	3001      	adds	r0, #1
   1e894:	f141 0100 	adc.w	r1, r1, #0
   1e898:	18c0      	adds	r0, r0, r3
   1e89a:	eb41 0102 	adc.w	r1, r1, r2
   1e89e:	2801      	cmp	r0, #1
   1e8a0:	f171 0100 	sbcs.w	r1, r1, #0
   1e8a4:	db32      	blt.n	1e90c <z_timer_expiration_handler+0xa8>
   1e8a6:	f006 ffaf 	bl	25808 <z_impl_k_uptime_ticks>
   1e8aa:	3001      	adds	r0, #1
   1e8ac:	f141 0300 	adc.w	r3, r1, #0
   1e8b0:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   1e8b4:	1880      	adds	r0, r0, r2
   1e8b6:	f06f 0201 	mvn.w	r2, #1
   1e8ba:	eb43 0301 	adc.w	r3, r3, r1
   1e8be:	1a12      	subs	r2, r2, r0
   1e8c0:	f04f 31ff 	mov.w	r1, #4294967295
   1e8c4:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e8c8:	491a      	ldr	r1, [pc, #104]	; (1e934 <z_timer_expiration_handler+0xd0>)
   1e8ca:	4620      	mov	r0, r4
   1e8cc:	f7ff fed8 	bl	1e680 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   1e8d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e8d2:	3301      	adds	r3, #1
   1e8d4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1e8d6:	6a23      	ldr	r3, [r4, #32]
   1e8d8:	b173      	cbz	r3, 1e8f8 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   1e8da:	f385 8811 	msr	BASEPRI, r5
   1e8de:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   1e8e2:	6a23      	ldr	r3, [r4, #32]
   1e8e4:	4620      	mov	r0, r4
   1e8e6:	4798      	blx	r3
	__asm__ volatile(
   1e8e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e8ec:	f3ef 8511 	mrs	r5, BASEPRI
   1e8f0:	f383 8812 	msr	BASEPRI_MAX, r3
   1e8f4:	f3bf 8f6f 	isb	sy
	return list->head == list;
   1e8f8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e8fc:	42a6      	cmp	r6, r4
   1e8fe:	d000      	beq.n	1e902 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1e900:	b94e      	cbnz	r6, 1e916 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   1e902:	f385 8811 	msr	BASEPRI, r5
   1e906:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   1e90a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   1e90c:	f06f 0201 	mvn.w	r2, #1
   1e910:	f04f 33ff 	mov.w	r3, #4294967295
   1e914:	e7d8      	b.n	1e8c8 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   1e916:	4630      	mov	r0, r6
   1e918:	f006 fe90 	bl	2563c <z_unpend_thread_no_timeout>
   1e91c:	2300      	movs	r3, #0
   1e91e:	67f3      	str	r3, [r6, #124]	; 0x7c
   1e920:	f385 8811 	msr	BASEPRI, r5
   1e924:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   1e928:	4630      	mov	r0, r6
}
   1e92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   1e92e:	f006 be75 	b.w	2561c <z_ready_thread>
   1e932:	bf00      	nop
   1e934:	0001e865 	.word	0x0001e865

0001e938 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1e938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e93c:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e940:	bf08      	it	eq
   1e942:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1e946:	4605      	mov	r5, r0
   1e948:	4614      	mov	r4, r2
   1e94a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   1e94e:	4619      	mov	r1, r3
   1e950:	4691      	mov	r9, r2
   1e952:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1e954:	d037      	beq.n	1e9c6 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1e956:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e95a:	bf08      	it	eq
   1e95c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1e960:	4637      	mov	r7, r6
   1e962:	4682      	mov	sl, r0
   1e964:	d011      	beq.n	1e98a <z_impl_k_timer_start+0x52>
   1e966:	ea50 0306 	orrs.w	r3, r0, r6
   1e96a:	d00e      	beq.n	1e98a <z_impl_k_timer_start+0x52>
   1e96c:	1c72      	adds	r2, r6, #1
   1e96e:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   1e972:	db0a      	blt.n	1e98a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   1e974:	2e02      	cmp	r6, #2
   1e976:	4684      	mov	ip, r0
   1e978:	f170 0000 	sbcs.w	r0, r0, #0
   1e97c:	bfbc      	itt	lt
   1e97e:	2702      	movlt	r7, #2
   1e980:	f04f 0c00 	movlt.w	ip, #0
   1e984:	3f01      	subs	r7, #1
   1e986:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1e98a:	1c63      	adds	r3, r4, #1
   1e98c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1e990:	db0a      	blt.n	1e9a8 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1e992:	2c01      	cmp	r4, #1
   1e994:	f171 0300 	sbcs.w	r3, r1, #0
   1e998:	4622      	mov	r2, r4
   1e99a:	bfbc      	itt	lt
   1e99c:	2201      	movlt	r2, #1
   1e99e:	2100      	movlt	r1, #0
   1e9a0:	f112 39ff 	adds.w	r9, r2, #4294967295
   1e9a4:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   1e9a8:	4628      	mov	r0, r5
   1e9aa:	f006 fee7 	bl	2577c <z_abort_timeout>
	timer->period = period;
   1e9ae:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   1e9b2:	2300      	movs	r3, #0
   1e9b4:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e9b6:	464a      	mov	r2, r9
   1e9b8:	4643      	mov	r3, r8
   1e9ba:	4628      	mov	r0, r5
   1e9bc:	4903      	ldr	r1, [pc, #12]	; (1e9cc <z_impl_k_timer_start+0x94>)
		     duration);
}
   1e9be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1e9c2:	f7ff be5d 	b.w	1e680 <z_add_timeout>
}
   1e9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e9ca:	bf00      	nop
   1e9cc:	0001e865 	.word	0x0001e865

0001e9d0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1e9d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1e9d4:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1e9d6:	4b29      	ldr	r3, [pc, #164]	; (1ea7c <z_impl_k_poll+0xac>)
   1e9d8:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1e9da:	2301      	movs	r3, #1
   1e9dc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1e9e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1e9e4:	ea52 0305 	orrs.w	r3, r2, r5
{
   1e9e8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1e9ea:	bf0c      	ite	eq
   1e9ec:	2301      	moveq	r3, #1
   1e9ee:	2300      	movne	r3, #0
   1e9f0:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1e9f4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1e9f6:	f006 ff89 	bl	2590c <register_events>
   1e9fa:	4681      	mov	r9, r0
	__asm__ volatile(
   1e9fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea00:	f3ef 8a11 	mrs	sl, BASEPRI
   1ea04:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea08:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1ea0c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1ea10:	b964      	cbnz	r4, 1ea2c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1ea12:	4601      	mov	r1, r0
   1ea14:	4652      	mov	r2, sl
   1ea16:	4640      	mov	r0, r8
   1ea18:	f007 f849 	bl	25aae <clear_event_registrations>
	__asm__ volatile(
   1ea1c:	f38a 8811 	msr	BASEPRI, sl
   1ea20:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1ea24:	4620      	mov	r0, r4
   1ea26:	b002      	add	sp, #8
   1ea28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1ea2c:	2300      	movs	r3, #0
   1ea2e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1ea32:	ea56 0305 	orrs.w	r3, r6, r5
   1ea36:	d106      	bne.n	1ea46 <z_impl_k_poll+0x76>
   1ea38:	f38a 8811 	msr	BASEPRI, sl
   1ea3c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1ea40:	f06f 040a 	mvn.w	r4, #10
   1ea44:	e7ee      	b.n	1ea24 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1ea46:	e9cd 6500 	strd	r6, r5, [sp]
   1ea4a:	4a0d      	ldr	r2, [pc, #52]	; (1ea80 <z_impl_k_poll+0xb0>)
   1ea4c:	480d      	ldr	r0, [pc, #52]	; (1ea84 <z_impl_k_poll+0xb4>)
   1ea4e:	4651      	mov	r1, sl
   1ea50:	f7ff fb98 	bl	1e184 <z_pend_curr>
   1ea54:	4604      	mov	r4, r0
	__asm__ volatile(
   1ea56:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ea5a:	f3ef 8511 	mrs	r5, BASEPRI
   1ea5e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ea62:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1ea66:	462a      	mov	r2, r5
   1ea68:	4649      	mov	r1, r9
   1ea6a:	4640      	mov	r0, r8
   1ea6c:	f007 f81f 	bl	25aae <clear_event_registrations>
	__asm__ volatile(
   1ea70:	f385 8811 	msr	BASEPRI, r5
   1ea74:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1ea78:	e7d4      	b.n	1ea24 <z_impl_k_poll+0x54>
   1ea7a:	bf00      	nop
   1ea7c:	20003a3c 	.word	0x20003a3c
   1ea80:	200008c8 	.word	0x200008c8
   1ea84:	20004b27 	.word	0x20004b27

0001ea88 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1ea88:	b538      	push	{r3, r4, r5, lr}
   1ea8a:	4603      	mov	r3, r0
	__asm__ volatile(
   1ea8c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ea90:	f3ef 8511 	mrs	r5, BASEPRI
   1ea94:	f382 8812 	msr	BASEPRI_MAX, r2
   1ea98:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1ea9c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1ea9e:	2101      	movs	r1, #1
   1eaa0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1eaa2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1eaa4:	4283      	cmp	r3, r0
   1eaa6:	d106      	bne.n	1eab6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1eaa8:	f385 8811 	msr	BASEPRI, r5
   1eaac:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1eab0:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1eab2:	4620      	mov	r0, r4
   1eab4:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1eab6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1eaba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1eabc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1eabe:	2300      	movs	r3, #0
	node->prev = NULL;
   1eac0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1eac4:	f006 ff99 	bl	259fa <signal_poll_event>
	z_reschedule(&lock, key);
   1eac8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1eaca:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1eacc:	4801      	ldr	r0, [pc, #4]	; (1ead4 <z_impl_k_poll_signal_raise+0x4c>)
   1eace:	f7ff fbbd 	bl	1e24c <z_reschedule>
	return rc;
   1ead2:	e7ee      	b.n	1eab2 <z_impl_k_poll_signal_raise+0x2a>
   1ead4:	20004b27 	.word	0x20004b27

0001ead8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   1ead8:	4b01      	ldr	r3, [pc, #4]	; (1eae0 <k_thread_system_pool_assign+0x8>)
   1eada:	6743      	str	r3, [r0, #116]	; 0x74
}
   1eadc:	4770      	bx	lr
   1eade:	bf00      	nop
   1eae0:	20000ae8 	.word	0x20000ae8

0001eae4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1eae4:	b538      	push	{r3, r4, r5, lr}
   1eae6:	4604      	mov	r4, r0
   1eae8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1eaea:	f006 fb63 	bl	251b4 <k_is_in_isr>
   1eaee:	b920      	cbnz	r0, 1eafa <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1eaf0:	4b06      	ldr	r3, [pc, #24]	; (1eb0c <z_thread_aligned_alloc+0x28>)
   1eaf2:	689b      	ldr	r3, [r3, #8]
   1eaf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1eaf6:	b90b      	cbnz	r3, 1eafc <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   1eaf8:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   1eafa:	4b05      	ldr	r3, [pc, #20]	; (1eb10 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   1eafc:	462a      	mov	r2, r5
   1eafe:	4621      	mov	r1, r4
   1eb00:	4618      	mov	r0, r3
}
   1eb02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   1eb06:	f007 b826 	b.w	25b56 <z_heap_aligned_alloc>
   1eb0a:	bf00      	nop
   1eb0c:	20003a3c 	.word	0x20003a3c
   1eb10:	20000ae8 	.word	0x20000ae8

0001eb14 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1eb14:	4801      	ldr	r0, [pc, #4]	; (1eb1c <boot_banner+0x8>)
   1eb16:	f003 b8b7 	b.w	21c88 <printk>
   1eb1a:	bf00      	nop
   1eb1c:	00028732 	.word	0x00028732

0001eb20 <ocrypto_ecdh_p256_public_key>:
   1eb20:	b530      	push	{r4, r5, lr}
   1eb22:	b099      	sub	sp, #100	; 0x64
   1eb24:	4605      	mov	r5, r0
   1eb26:	4668      	mov	r0, sp
   1eb28:	f000 f828 	bl	1eb7c <ocrypto_sc_p256_from32bytes>
   1eb2c:	4669      	mov	r1, sp
   1eb2e:	4604      	mov	r4, r0
   1eb30:	a808      	add	r0, sp, #32
   1eb32:	f000 fa53 	bl	1efdc <ocrypto_curve_p256_scalarmult_base>
   1eb36:	a908      	add	r1, sp, #32
   1eb38:	4304      	orrs	r4, r0
   1eb3a:	4628      	mov	r0, r5
   1eb3c:	f000 f98a 	bl	1ee54 <ocrypto_curve_p256_to64bytes>
   1eb40:	4620      	mov	r0, r4
   1eb42:	b019      	add	sp, #100	; 0x64
   1eb44:	bd30      	pop	{r4, r5, pc}
   1eb46:	bf00      	nop

0001eb48 <ocrypto_ecdh_p256_common_secret>:
   1eb48:	b570      	push	{r4, r5, r6, lr}
   1eb4a:	b098      	sub	sp, #96	; 0x60
   1eb4c:	4605      	mov	r5, r0
   1eb4e:	4668      	mov	r0, sp
   1eb50:	4616      	mov	r6, r2
   1eb52:	f000 f813 	bl	1eb7c <ocrypto_sc_p256_from32bytes>
   1eb56:	4631      	mov	r1, r6
   1eb58:	4604      	mov	r4, r0
   1eb5a:	a808      	add	r0, sp, #32
   1eb5c:	f000 f946 	bl	1edec <ocrypto_curve_p256_from64bytes>
   1eb60:	a908      	add	r1, sp, #32
   1eb62:	466a      	mov	r2, sp
   1eb64:	4304      	orrs	r4, r0
   1eb66:	4608      	mov	r0, r1
   1eb68:	f000 f982 	bl	1ee70 <ocrypto_curve_p256_scalarmult>
   1eb6c:	a908      	add	r1, sp, #32
   1eb6e:	4304      	orrs	r4, r0
   1eb70:	4628      	mov	r0, r5
   1eb72:	f000 f96d 	bl	1ee50 <ocrypto_curve_p256_to32bytes>
   1eb76:	4620      	mov	r0, r4
   1eb78:	b018      	add	sp, #96	; 0x60
   1eb7a:	bd70      	pop	{r4, r5, r6, pc}

0001eb7c <ocrypto_sc_p256_from32bytes>:
   1eb7c:	b570      	push	{r4, r5, r6, lr}
   1eb7e:	680b      	ldr	r3, [r1, #0]
   1eb80:	4e12      	ldr	r6, [pc, #72]	; (1ebcc <ocrypto_sc_p256_from32bytes+0x50>)
   1eb82:	ba1b      	rev	r3, r3
   1eb84:	61c3      	str	r3, [r0, #28]
   1eb86:	684b      	ldr	r3, [r1, #4]
   1eb88:	ba1b      	rev	r3, r3
   1eb8a:	6183      	str	r3, [r0, #24]
   1eb8c:	688b      	ldr	r3, [r1, #8]
   1eb8e:	ba1b      	rev	r3, r3
   1eb90:	6143      	str	r3, [r0, #20]
   1eb92:	68cb      	ldr	r3, [r1, #12]
   1eb94:	ba1b      	rev	r3, r3
   1eb96:	6103      	str	r3, [r0, #16]
   1eb98:	690b      	ldr	r3, [r1, #16]
   1eb9a:	ba1b      	rev	r3, r3
   1eb9c:	60c3      	str	r3, [r0, #12]
   1eb9e:	694b      	ldr	r3, [r1, #20]
   1eba0:	ba1b      	rev	r3, r3
   1eba2:	6083      	str	r3, [r0, #8]
   1eba4:	698b      	ldr	r3, [r1, #24]
   1eba6:	ba1b      	rev	r3, r3
   1eba8:	6043      	str	r3, [r0, #4]
   1ebaa:	69cb      	ldr	r3, [r1, #28]
   1ebac:	ba1b      	rev	r3, r3
   1ebae:	4632      	mov	r2, r6
   1ebb0:	6003      	str	r3, [r0, #0]
   1ebb2:	4601      	mov	r1, r0
   1ebb4:	4604      	mov	r4, r0
   1ebb6:	f7e1 fefb 	bl	9b0 <ocrypto_bigint_sub256>
   1ebba:	4631      	mov	r1, r6
   1ebbc:	4605      	mov	r5, r0
   1ebbe:	4602      	mov	r2, r0
   1ebc0:	4620      	mov	r0, r4
   1ebc2:	f7e1 ff15 	bl	9f0 <ocrypto_bigint_cadd256>
   1ebc6:	1e68      	subs	r0, r5, #1
   1ebc8:	bd70      	pop	{r4, r5, r6, pc}
   1ebca:	bf00      	nop
   1ebcc:	00026714 	.word	0x00026714

0001ebd0 <p256_zdblu>:
   1ebd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebd4:	b088      	sub	sp, #32
   1ebd6:	460c      	mov	r4, r1
   1ebd8:	4606      	mov	r6, r0
   1ebda:	f102 0120 	add.w	r1, r2, #32
   1ebde:	4668      	mov	r0, sp
   1ebe0:	f106 0720 	add.w	r7, r6, #32
   1ebe4:	4690      	mov	r8, r2
   1ebe6:	f7e2 f9ed 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ebea:	466a      	mov	r2, sp
   1ebec:	4669      	mov	r1, sp
   1ebee:	4668      	mov	r0, sp
   1ebf0:	f7e2 f8fa 	bl	de8 <ocrypto_mod_p256_add>
   1ebf4:	4669      	mov	r1, sp
   1ebf6:	4638      	mov	r0, r7
   1ebf8:	f7e2 f9e4 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ebfc:	463a      	mov	r2, r7
   1ebfe:	4639      	mov	r1, r7
   1ec00:	4638      	mov	r0, r7
   1ec02:	f104 0520 	add.w	r5, r4, #32
   1ec06:	f7e2 f8ef 	bl	de8 <ocrypto_mod_p256_add>
   1ec0a:	466a      	mov	r2, sp
   1ec0c:	4669      	mov	r1, sp
   1ec0e:	4668      	mov	r0, sp
   1ec10:	f7e2 f8ea 	bl	de8 <ocrypto_mod_p256_add>
   1ec14:	4641      	mov	r1, r8
   1ec16:	4628      	mov	r0, r5
   1ec18:	f7e2 f9d4 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ec1c:	466a      	mov	r2, sp
   1ec1e:	4641      	mov	r1, r8
   1ec20:	4630      	mov	r0, r6
   1ec22:	f7e2 f9b7 	bl	f94 <ocrypto_mod_p256_mul>
   1ec26:	462a      	mov	r2, r5
   1ec28:	4629      	mov	r1, r5
   1ec2a:	4668      	mov	r0, sp
   1ec2c:	f7e2 f8dc 	bl	de8 <ocrypto_mod_p256_add>
   1ec30:	462a      	mov	r2, r5
   1ec32:	4669      	mov	r1, sp
   1ec34:	4668      	mov	r0, sp
   1ec36:	f7e2 f8d7 	bl	de8 <ocrypto_mod_p256_add>
   1ec3a:	4a12      	ldr	r2, [pc, #72]	; (1ec84 <p256_zdblu+0xb4>)
   1ec3c:	4669      	mov	r1, sp
   1ec3e:	4668      	mov	r0, sp
   1ec40:	f7e2 f8d2 	bl	de8 <ocrypto_mod_p256_add>
   1ec44:	4669      	mov	r1, sp
   1ec46:	4620      	mov	r0, r4
   1ec48:	f7e2 f9bc 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ec4c:	4632      	mov	r2, r6
   1ec4e:	4621      	mov	r1, r4
   1ec50:	4620      	mov	r0, r4
   1ec52:	f7e2 f907 	bl	e64 <ocrypto_mod_p256_sub>
   1ec56:	4632      	mov	r2, r6
   1ec58:	4621      	mov	r1, r4
   1ec5a:	4620      	mov	r0, r4
   1ec5c:	f7e2 f902 	bl	e64 <ocrypto_mod_p256_sub>
   1ec60:	4622      	mov	r2, r4
   1ec62:	4631      	mov	r1, r6
   1ec64:	4628      	mov	r0, r5
   1ec66:	f7e2 f8fd 	bl	e64 <ocrypto_mod_p256_sub>
   1ec6a:	466a      	mov	r2, sp
   1ec6c:	4629      	mov	r1, r5
   1ec6e:	4628      	mov	r0, r5
   1ec70:	f7e2 f990 	bl	f94 <ocrypto_mod_p256_mul>
   1ec74:	463a      	mov	r2, r7
   1ec76:	4629      	mov	r1, r5
   1ec78:	4628      	mov	r0, r5
   1ec7a:	f7e2 f8f3 	bl	e64 <ocrypto_mod_p256_sub>
   1ec7e:	b008      	add	sp, #32
   1ec80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ec84:	000267b4 	.word	0x000267b4

0001ec88 <p256_zaddc>:
   1ec88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ec8a:	b099      	sub	sp, #100	; 0x64
   1ec8c:	4604      	mov	r4, r0
   1ec8e:	460d      	mov	r5, r1
   1ec90:	460a      	mov	r2, r1
   1ec92:	4601      	mov	r1, r0
   1ec94:	4668      	mov	r0, sp
   1ec96:	f7e2 f8e5 	bl	e64 <ocrypto_mod_p256_sub>
   1ec9a:	4669      	mov	r1, sp
   1ec9c:	4668      	mov	r0, sp
   1ec9e:	f7e2 f991 	bl	fc4 <ocrypto_mod_p256_sqr>
   1eca2:	466a      	mov	r2, sp
   1eca4:	4621      	mov	r1, r4
   1eca6:	a808      	add	r0, sp, #32
   1eca8:	f105 0620 	add.w	r6, r5, #32
   1ecac:	f104 0720 	add.w	r7, r4, #32
   1ecb0:	f7e2 f970 	bl	f94 <ocrypto_mod_p256_mul>
   1ecb4:	466a      	mov	r2, sp
   1ecb6:	4629      	mov	r1, r5
   1ecb8:	4668      	mov	r0, sp
   1ecba:	f7e2 f96b 	bl	f94 <ocrypto_mod_p256_mul>
   1ecbe:	4632      	mov	r2, r6
   1ecc0:	4639      	mov	r1, r7
   1ecc2:	a810      	add	r0, sp, #64	; 0x40
   1ecc4:	f7e2 f890 	bl	de8 <ocrypto_mod_p256_add>
   1ecc8:	4632      	mov	r2, r6
   1ecca:	4639      	mov	r1, r7
   1eccc:	4630      	mov	r0, r6
   1ecce:	f7e2 f8c9 	bl	e64 <ocrypto_mod_p256_sub>
   1ecd2:	4631      	mov	r1, r6
   1ecd4:	4628      	mov	r0, r5
   1ecd6:	f7e2 f975 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ecda:	466a      	mov	r2, sp
   1ecdc:	a908      	add	r1, sp, #32
   1ecde:	4620      	mov	r0, r4
   1ece0:	f7e2 f882 	bl	de8 <ocrypto_mod_p256_add>
   1ece4:	4622      	mov	r2, r4
   1ece6:	4629      	mov	r1, r5
   1ece8:	4628      	mov	r0, r5
   1ecea:	f7e2 f8bb 	bl	e64 <ocrypto_mod_p256_sub>
   1ecee:	466a      	mov	r2, sp
   1ecf0:	a908      	add	r1, sp, #32
   1ecf2:	4668      	mov	r0, sp
   1ecf4:	f7e2 f8b6 	bl	e64 <ocrypto_mod_p256_sub>
   1ecf8:	466a      	mov	r2, sp
   1ecfa:	4639      	mov	r1, r7
   1ecfc:	4638      	mov	r0, r7
   1ecfe:	f7e2 f949 	bl	f94 <ocrypto_mod_p256_mul>
   1ed02:	462a      	mov	r2, r5
   1ed04:	a908      	add	r1, sp, #32
   1ed06:	4668      	mov	r0, sp
   1ed08:	f7e2 f8ac 	bl	e64 <ocrypto_mod_p256_sub>
   1ed0c:	466a      	mov	r2, sp
   1ed0e:	4631      	mov	r1, r6
   1ed10:	4630      	mov	r0, r6
   1ed12:	f7e2 f93f 	bl	f94 <ocrypto_mod_p256_mul>
   1ed16:	463a      	mov	r2, r7
   1ed18:	4631      	mov	r1, r6
   1ed1a:	4630      	mov	r0, r6
   1ed1c:	f7e2 f8a2 	bl	e64 <ocrypto_mod_p256_sub>
   1ed20:	a910      	add	r1, sp, #64	; 0x40
   1ed22:	4668      	mov	r0, sp
   1ed24:	f7e2 f94e 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ed28:	4622      	mov	r2, r4
   1ed2a:	4669      	mov	r1, sp
   1ed2c:	4620      	mov	r0, r4
   1ed2e:	f7e2 f899 	bl	e64 <ocrypto_mod_p256_sub>
   1ed32:	a908      	add	r1, sp, #32
   1ed34:	4622      	mov	r2, r4
   1ed36:	4608      	mov	r0, r1
   1ed38:	f7e2 f894 	bl	e64 <ocrypto_mod_p256_sub>
   1ed3c:	a910      	add	r1, sp, #64	; 0x40
   1ed3e:	aa08      	add	r2, sp, #32
   1ed40:	4608      	mov	r0, r1
   1ed42:	f7e2 f927 	bl	f94 <ocrypto_mod_p256_mul>
   1ed46:	463a      	mov	r2, r7
   1ed48:	a910      	add	r1, sp, #64	; 0x40
   1ed4a:	4638      	mov	r0, r7
   1ed4c:	f7e2 f88a 	bl	e64 <ocrypto_mod_p256_sub>
   1ed50:	b019      	add	sp, #100	; 0x64
   1ed52:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001ed54 <p256_zaddu>:
   1ed54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed58:	b088      	sub	sp, #32
   1ed5a:	460c      	mov	r4, r1
   1ed5c:	4605      	mov	r5, r0
   1ed5e:	4690      	mov	r8, r2
   1ed60:	460a      	mov	r2, r1
   1ed62:	4601      	mov	r1, r0
   1ed64:	4668      	mov	r0, sp
   1ed66:	f7e2 f87d 	bl	e64 <ocrypto_mod_p256_sub>
   1ed6a:	4669      	mov	r1, sp
   1ed6c:	4668      	mov	r0, sp
   1ed6e:	f7e2 f929 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ed72:	466a      	mov	r2, sp
   1ed74:	4629      	mov	r1, r5
   1ed76:	4628      	mov	r0, r5
   1ed78:	f104 0620 	add.w	r6, r4, #32
   1ed7c:	f7e2 f90a 	bl	f94 <ocrypto_mod_p256_mul>
   1ed80:	f105 0720 	add.w	r7, r5, #32
   1ed84:	466a      	mov	r2, sp
   1ed86:	4621      	mov	r1, r4
   1ed88:	4668      	mov	r0, sp
   1ed8a:	f7e2 f903 	bl	f94 <ocrypto_mod_p256_mul>
   1ed8e:	4632      	mov	r2, r6
   1ed90:	4639      	mov	r1, r7
   1ed92:	4630      	mov	r0, r6
   1ed94:	f7e2 f866 	bl	e64 <ocrypto_mod_p256_sub>
   1ed98:	4631      	mov	r1, r6
   1ed9a:	4620      	mov	r0, r4
   1ed9c:	f7e2 f912 	bl	fc4 <ocrypto_mod_p256_sqr>
   1eda0:	462a      	mov	r2, r5
   1eda2:	4621      	mov	r1, r4
   1eda4:	4620      	mov	r0, r4
   1eda6:	f7e2 f85d 	bl	e64 <ocrypto_mod_p256_sub>
   1edaa:	466a      	mov	r2, sp
   1edac:	4621      	mov	r1, r4
   1edae:	4620      	mov	r0, r4
   1edb0:	f7e2 f858 	bl	e64 <ocrypto_mod_p256_sub>
   1edb4:	466a      	mov	r2, sp
   1edb6:	4629      	mov	r1, r5
   1edb8:	4640      	mov	r0, r8
   1edba:	f7e2 f853 	bl	e64 <ocrypto_mod_p256_sub>
   1edbe:	4642      	mov	r2, r8
   1edc0:	4639      	mov	r1, r7
   1edc2:	4638      	mov	r0, r7
   1edc4:	f7e2 f8e6 	bl	f94 <ocrypto_mod_p256_mul>
   1edc8:	4622      	mov	r2, r4
   1edca:	4629      	mov	r1, r5
   1edcc:	4668      	mov	r0, sp
   1edce:	f7e2 f849 	bl	e64 <ocrypto_mod_p256_sub>
   1edd2:	466a      	mov	r2, sp
   1edd4:	4631      	mov	r1, r6
   1edd6:	4630      	mov	r0, r6
   1edd8:	f7e2 f8dc 	bl	f94 <ocrypto_mod_p256_mul>
   1eddc:	463a      	mov	r2, r7
   1edde:	4631      	mov	r1, r6
   1ede0:	4630      	mov	r0, r6
   1ede2:	f7e2 f83f 	bl	e64 <ocrypto_mod_p256_sub>
   1ede6:	b008      	add	sp, #32
   1ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001edec <ocrypto_curve_p256_from64bytes>:
   1edec:	b570      	push	{r4, r5, r6, lr}
   1edee:	f100 0620 	add.w	r6, r0, #32
   1edf2:	b090      	sub	sp, #64	; 0x40
   1edf4:	460d      	mov	r5, r1
   1edf6:	4604      	mov	r4, r0
   1edf8:	f000 f914 	bl	1f024 <ocrypto_mod_p256_from_bytes>
   1edfc:	f105 0120 	add.w	r1, r5, #32
   1ee00:	4630      	mov	r0, r6
   1ee02:	f000 f90f 	bl	1f024 <ocrypto_mod_p256_from_bytes>
   1ee06:	4621      	mov	r1, r4
   1ee08:	a808      	add	r0, sp, #32
   1ee0a:	f7e2 f8db 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ee0e:	a908      	add	r1, sp, #32
   1ee10:	4608      	mov	r0, r1
   1ee12:	4a0d      	ldr	r2, [pc, #52]	; (1ee48 <ocrypto_curve_p256_from64bytes+0x5c>)
   1ee14:	f7e1 ffe8 	bl	de8 <ocrypto_mod_p256_add>
   1ee18:	a908      	add	r1, sp, #32
   1ee1a:	4622      	mov	r2, r4
   1ee1c:	4608      	mov	r0, r1
   1ee1e:	f7e2 f8b9 	bl	f94 <ocrypto_mod_p256_mul>
   1ee22:	a908      	add	r1, sp, #32
   1ee24:	4a09      	ldr	r2, [pc, #36]	; (1ee4c <ocrypto_curve_p256_from64bytes+0x60>)
   1ee26:	4608      	mov	r0, r1
   1ee28:	f7e1 ffde 	bl	de8 <ocrypto_mod_p256_add>
   1ee2c:	4631      	mov	r1, r6
   1ee2e:	4668      	mov	r0, sp
   1ee30:	f7e2 f8c8 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ee34:	2220      	movs	r2, #32
   1ee36:	4669      	mov	r1, sp
   1ee38:	eb0d 0002 	add.w	r0, sp, r2
   1ee3c:	f7e1 ffa6 	bl	d8c <ocrypto_constant_time_equal>
   1ee40:	3801      	subs	r0, #1
   1ee42:	b010      	add	sp, #64	; 0x40
   1ee44:	bd70      	pop	{r4, r5, r6, pc}
   1ee46:	bf00      	nop
   1ee48:	000267b4 	.word	0x000267b4
   1ee4c:	000267d4 	.word	0x000267d4

0001ee50 <ocrypto_curve_p256_to32bytes>:
   1ee50:	f000 b902 	b.w	1f058 <ocrypto_mod_p256_to_bytes>

0001ee54 <ocrypto_curve_p256_to64bytes>:
   1ee54:	b538      	push	{r3, r4, r5, lr}
   1ee56:	4604      	mov	r4, r0
   1ee58:	460d      	mov	r5, r1
   1ee5a:	f000 f8fd 	bl	1f058 <ocrypto_mod_p256_to_bytes>
   1ee5e:	f105 0120 	add.w	r1, r5, #32
   1ee62:	f104 0020 	add.w	r0, r4, #32
   1ee66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ee6a:	f000 b8f5 	b.w	1f058 <ocrypto_mod_p256_to_bytes>
   1ee6e:	bf00      	nop

0001ee70 <ocrypto_curve_p256_scalarmult>:
   1ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ee74:	4613      	mov	r3, r2
   1ee76:	b0b8      	sub	sp, #224	; 0xe0
   1ee78:	4a54      	ldr	r2, [pc, #336]	; (1efcc <ocrypto_curve_p256_scalarmult+0x15c>)
   1ee7a:	4689      	mov	r9, r1
   1ee7c:	4680      	mov	r8, r0
   1ee7e:	4619      	mov	r1, r3
   1ee80:	a810      	add	r0, sp, #64	; 0x40
   1ee82:	f7e1 fd95 	bl	9b0 <ocrypto_bigint_sub256>
   1ee86:	4952      	ldr	r1, [pc, #328]	; (1efd0 <ocrypto_curve_p256_scalarmult+0x160>)
   1ee88:	4602      	mov	r2, r0
   1ee8a:	a810      	add	r0, sp, #64	; 0x40
   1ee8c:	f7e1 fdb0 	bl	9f0 <ocrypto_bigint_cadd256>
   1ee90:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1ee92:	494e      	ldr	r1, [pc, #312]	; (1efcc <ocrypto_curve_p256_scalarmult+0x15c>)
   1ee94:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1ee98:	4607      	mov	r7, r0
   1ee9a:	f1c6 0201 	rsb	r2, r6, #1
   1ee9e:	a810      	add	r0, sp, #64	; 0x40
   1eea0:	f7e1 fda6 	bl	9f0 <ocrypto_bigint_cadd256>
   1eea4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1eea6:	464a      	mov	r2, r9
   1eea8:	ea6f 0a03 	mvn.w	sl, r3
   1eeac:	a928      	add	r1, sp, #160	; 0xa0
   1eeae:	a818      	add	r0, sp, #96	; 0x60
   1eeb0:	f7ff fe8e 	bl	1ebd0 <p256_zdblu>
   1eeb4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1eeb8:	a920      	add	r1, sp, #128	; 0x80
   1eeba:	f1ca 0201 	rsb	r2, sl, #1
   1eebe:	4608      	mov	r0, r1
   1eec0:	f000 f892 	bl	1efe8 <ocrypto_mod_p256_cneg>
   1eec4:	f1c7 0701 	rsb	r7, r7, #1
   1eec8:	24fe      	movs	r4, #254	; 0xfe
   1eeca:	466a      	mov	r2, sp
   1eecc:	a918      	add	r1, sp, #96	; 0x60
   1eece:	a828      	add	r0, sp, #160	; 0xa0
   1eed0:	f7ff ff40 	bl	1ed54 <p256_zaddu>
   1eed4:	1162      	asrs	r2, r4, #5
   1eed6:	ab38      	add	r3, sp, #224	; 0xe0
   1eed8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1eedc:	f004 011f 	and.w	r1, r4, #31
   1eee0:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1eee4:	40cb      	lsrs	r3, r1
   1eee6:	4655      	mov	r5, sl
   1eee8:	f003 0a01 	and.w	sl, r3, #1
   1eeec:	ea8a 0505 	eor.w	r5, sl, r5
   1eef0:	462a      	mov	r2, r5
   1eef2:	a928      	add	r1, sp, #160	; 0xa0
   1eef4:	a818      	add	r0, sp, #96	; 0x60
   1eef6:	f7e1 fdd7 	bl	aa8 <ocrypto_bigint_cswap256>
   1eefa:	462a      	mov	r2, r5
   1eefc:	a930      	add	r1, sp, #192	; 0xc0
   1eefe:	a820      	add	r0, sp, #128	; 0x80
   1ef00:	f7e1 fdd2 	bl	aa8 <ocrypto_bigint_cswap256>
   1ef04:	3c01      	subs	r4, #1
   1ef06:	a928      	add	r1, sp, #160	; 0xa0
   1ef08:	a818      	add	r0, sp, #96	; 0x60
   1ef0a:	f7ff febd 	bl	1ec88 <p256_zaddc>
   1ef0e:	1c63      	adds	r3, r4, #1
   1ef10:	d1db      	bne.n	1eeca <ocrypto_curve_p256_scalarmult+0x5a>
   1ef12:	f1ca 0201 	rsb	r2, sl, #1
   1ef16:	a920      	add	r1, sp, #128	; 0x80
   1ef18:	a808      	add	r0, sp, #32
   1ef1a:	f000 f865 	bl	1efe8 <ocrypto_mod_p256_cneg>
   1ef1e:	ea86 060a 	eor.w	r6, r6, sl
   1ef22:	466a      	mov	r2, sp
   1ef24:	a918      	add	r1, sp, #96	; 0x60
   1ef26:	a828      	add	r0, sp, #160	; 0xa0
   1ef28:	f7ff ff14 	bl	1ed54 <p256_zaddu>
   1ef2c:	a928      	add	r1, sp, #160	; 0xa0
   1ef2e:	4632      	mov	r2, r6
   1ef30:	a818      	add	r0, sp, #96	; 0x60
   1ef32:	f7e1 fdb9 	bl	aa8 <ocrypto_bigint_cswap256>
   1ef36:	4632      	mov	r2, r6
   1ef38:	a930      	add	r1, sp, #192	; 0xc0
   1ef3a:	a820      	add	r0, sp, #128	; 0x80
   1ef3c:	f7e1 fdb4 	bl	aa8 <ocrypto_bigint_cswap256>
   1ef40:	a908      	add	r1, sp, #32
   1ef42:	466a      	mov	r2, sp
   1ef44:	4608      	mov	r0, r1
   1ef46:	f7e2 f825 	bl	f94 <ocrypto_mod_p256_mul>
   1ef4a:	a908      	add	r1, sp, #32
   1ef4c:	4608      	mov	r0, r1
   1ef4e:	f000 f89d 	bl	1f08c <ocrypto_mod_p256_inv>
   1ef52:	a908      	add	r1, sp, #32
   1ef54:	f108 0420 	add.w	r4, r8, #32
   1ef58:	f109 0220 	add.w	r2, r9, #32
   1ef5c:	4608      	mov	r0, r1
   1ef5e:	f7e2 f819 	bl	f94 <ocrypto_mod_p256_mul>
   1ef62:	a920      	add	r1, sp, #128	; 0x80
   1ef64:	aa08      	add	r2, sp, #32
   1ef66:	4620      	mov	r0, r4
   1ef68:	f7e2 f814 	bl	f94 <ocrypto_mod_p256_mul>
   1ef6c:	aa08      	add	r2, sp, #32
   1ef6e:	a918      	add	r1, sp, #96	; 0x60
   1ef70:	4668      	mov	r0, sp
   1ef72:	f7e2 f80f 	bl	f94 <ocrypto_mod_p256_mul>
   1ef76:	4669      	mov	r1, sp
   1ef78:	4668      	mov	r0, sp
   1ef7a:	f7e2 f823 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ef7e:	aa18      	add	r2, sp, #96	; 0x60
   1ef80:	4669      	mov	r1, sp
   1ef82:	a808      	add	r0, sp, #32
   1ef84:	f7e2 f806 	bl	f94 <ocrypto_mod_p256_mul>
   1ef88:	4621      	mov	r1, r4
   1ef8a:	4668      	mov	r0, sp
   1ef8c:	f7e2 f81a 	bl	fc4 <ocrypto_mod_p256_sqr>
   1ef90:	aa08      	add	r2, sp, #32
   1ef92:	4669      	mov	r1, sp
   1ef94:	4610      	mov	r0, r2
   1ef96:	f7e1 ff65 	bl	e64 <ocrypto_mod_p256_sub>
   1ef9a:	4a0e      	ldr	r2, [pc, #56]	; (1efd4 <ocrypto_curve_p256_scalarmult+0x164>)
   1ef9c:	a908      	add	r1, sp, #32
   1ef9e:	4668      	mov	r0, sp
   1efa0:	f7e1 ff60 	bl	e64 <ocrypto_mod_p256_sub>
   1efa4:	4620      	mov	r0, r4
   1efa6:	2120      	movs	r1, #32
   1efa8:	f7e1 ff04 	bl	db4 <ocrypto_constant_time_is_zero>
   1efac:	a908      	add	r1, sp, #32
   1efae:	4243      	negs	r3, r0
   1efb0:	4602      	mov	r2, r0
   1efb2:	4668      	mov	r0, sp
   1efb4:	431f      	orrs	r7, r3
   1efb6:	f7e1 fd77 	bl	aa8 <ocrypto_bigint_cswap256>
   1efba:	4640      	mov	r0, r8
   1efbc:	4a06      	ldr	r2, [pc, #24]	; (1efd8 <ocrypto_curve_p256_scalarmult+0x168>)
   1efbe:	4669      	mov	r1, sp
   1efc0:	f7e1 ffe8 	bl	f94 <ocrypto_mod_p256_mul>
   1efc4:	4638      	mov	r0, r7
   1efc6:	b038      	add	sp, #224	; 0xe0
   1efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efcc:	000267f4 	.word	0x000267f4
   1efd0:	00026774 	.word	0x00026774
   1efd4:	000267d4 	.word	0x000267d4
   1efd8:	00026794 	.word	0x00026794

0001efdc <ocrypto_curve_p256_scalarmult_base>:
   1efdc:	460a      	mov	r2, r1
   1efde:	4901      	ldr	r1, [pc, #4]	; (1efe4 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1efe0:	f7ff bf46 	b.w	1ee70 <ocrypto_curve_p256_scalarmult>
   1efe4:	00026734 	.word	0x00026734

0001efe8 <ocrypto_mod_p256_cneg>:
   1efe8:	b570      	push	{r4, r5, r6, lr}
   1efea:	b088      	sub	sp, #32
   1efec:	4604      	mov	r4, r0
   1efee:	460d      	mov	r5, r1
   1eff0:	4616      	mov	r6, r2
   1eff2:	2100      	movs	r1, #0
   1eff4:	2220      	movs	r2, #32
   1eff6:	4668      	mov	r0, sp
   1eff8:	f003 fee7 	bl	22dca <memset>
   1effc:	2300      	movs	r3, #0
   1effe:	4629      	mov	r1, r5
   1f000:	2220      	movs	r2, #32
   1f002:	4620      	mov	r0, r4
   1f004:	9300      	str	r3, [sp, #0]
   1f006:	f003 fed5 	bl	22db4 <memcpy>
   1f00a:	462a      	mov	r2, r5
   1f00c:	4669      	mov	r1, sp
   1f00e:	4668      	mov	r0, sp
   1f010:	f7e1 ff28 	bl	e64 <ocrypto_mod_p256_sub>
   1f014:	4632      	mov	r2, r6
   1f016:	4669      	mov	r1, sp
   1f018:	4620      	mov	r0, r4
   1f01a:	f7e1 fd45 	bl	aa8 <ocrypto_bigint_cswap256>
   1f01e:	b008      	add	sp, #32
   1f020:	bd70      	pop	{r4, r5, r6, pc}
   1f022:	bf00      	nop

0001f024 <ocrypto_mod_p256_from_bytes>:
   1f024:	680b      	ldr	r3, [r1, #0]
   1f026:	ba1b      	rev	r3, r3
   1f028:	61c3      	str	r3, [r0, #28]
   1f02a:	684b      	ldr	r3, [r1, #4]
   1f02c:	ba1b      	rev	r3, r3
   1f02e:	6183      	str	r3, [r0, #24]
   1f030:	688b      	ldr	r3, [r1, #8]
   1f032:	ba1b      	rev	r3, r3
   1f034:	6143      	str	r3, [r0, #20]
   1f036:	68cb      	ldr	r3, [r1, #12]
   1f038:	ba1b      	rev	r3, r3
   1f03a:	6103      	str	r3, [r0, #16]
   1f03c:	690b      	ldr	r3, [r1, #16]
   1f03e:	ba1b      	rev	r3, r3
   1f040:	60c3      	str	r3, [r0, #12]
   1f042:	694b      	ldr	r3, [r1, #20]
   1f044:	ba1b      	rev	r3, r3
   1f046:	6083      	str	r3, [r0, #8]
   1f048:	698b      	ldr	r3, [r1, #24]
   1f04a:	ba1b      	rev	r3, r3
   1f04c:	6043      	str	r3, [r0, #4]
   1f04e:	69cb      	ldr	r3, [r1, #28]
   1f050:	ba1b      	rev	r3, r3
   1f052:	6003      	str	r3, [r0, #0]
   1f054:	4770      	bx	lr
   1f056:	bf00      	nop

0001f058 <ocrypto_mod_p256_to_bytes>:
   1f058:	69cb      	ldr	r3, [r1, #28]
   1f05a:	ba1b      	rev	r3, r3
   1f05c:	6003      	str	r3, [r0, #0]
   1f05e:	698b      	ldr	r3, [r1, #24]
   1f060:	ba1b      	rev	r3, r3
   1f062:	6043      	str	r3, [r0, #4]
   1f064:	694b      	ldr	r3, [r1, #20]
   1f066:	ba1b      	rev	r3, r3
   1f068:	6083      	str	r3, [r0, #8]
   1f06a:	690b      	ldr	r3, [r1, #16]
   1f06c:	ba1b      	rev	r3, r3
   1f06e:	60c3      	str	r3, [r0, #12]
   1f070:	68cb      	ldr	r3, [r1, #12]
   1f072:	ba1b      	rev	r3, r3
   1f074:	6103      	str	r3, [r0, #16]
   1f076:	688b      	ldr	r3, [r1, #8]
   1f078:	ba1b      	rev	r3, r3
   1f07a:	6143      	str	r3, [r0, #20]
   1f07c:	684b      	ldr	r3, [r1, #4]
   1f07e:	ba1b      	rev	r3, r3
   1f080:	6183      	str	r3, [r0, #24]
   1f082:	680b      	ldr	r3, [r1, #0]
   1f084:	ba1b      	rev	r3, r3
   1f086:	61c3      	str	r3, [r0, #28]
   1f088:	4770      	bx	lr
   1f08a:	bf00      	nop

0001f08c <ocrypto_mod_p256_inv>:
   1f08c:	b570      	push	{r4, r5, r6, lr}
   1f08e:	b098      	sub	sp, #96	; 0x60
   1f090:	460d      	mov	r5, r1
   1f092:	4606      	mov	r6, r0
   1f094:	a810      	add	r0, sp, #64	; 0x40
   1f096:	f7e1 ff95 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f09a:	462a      	mov	r2, r5
   1f09c:	a910      	add	r1, sp, #64	; 0x40
   1f09e:	4668      	mov	r0, sp
   1f0a0:	f7e1 ff78 	bl	f94 <ocrypto_mod_p256_mul>
   1f0a4:	4669      	mov	r1, sp
   1f0a6:	a810      	add	r0, sp, #64	; 0x40
   1f0a8:	f7e1 ff8c 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0ac:	a910      	add	r1, sp, #64	; 0x40
   1f0ae:	4608      	mov	r0, r1
   1f0b0:	f7e1 ff88 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0b4:	466a      	mov	r2, sp
   1f0b6:	a910      	add	r1, sp, #64	; 0x40
   1f0b8:	a808      	add	r0, sp, #32
   1f0ba:	f7e1 ff6b 	bl	f94 <ocrypto_mod_p256_mul>
   1f0be:	a908      	add	r1, sp, #32
   1f0c0:	a810      	add	r0, sp, #64	; 0x40
   1f0c2:	f7e1 ff7f 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0c6:	a910      	add	r1, sp, #64	; 0x40
   1f0c8:	4608      	mov	r0, r1
   1f0ca:	f7e1 ff7b 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0ce:	a910      	add	r1, sp, #64	; 0x40
   1f0d0:	4608      	mov	r0, r1
   1f0d2:	f7e1 ff77 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0d6:	a910      	add	r1, sp, #64	; 0x40
   1f0d8:	4608      	mov	r0, r1
   1f0da:	f7e1 ff73 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0de:	a910      	add	r1, sp, #64	; 0x40
   1f0e0:	aa08      	add	r2, sp, #32
   1f0e2:	4608      	mov	r0, r1
   1f0e4:	f7e1 ff56 	bl	f94 <ocrypto_mod_p256_mul>
   1f0e8:	a910      	add	r1, sp, #64	; 0x40
   1f0ea:	4608      	mov	r0, r1
   1f0ec:	f7e1 ff6a 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0f0:	a910      	add	r1, sp, #64	; 0x40
   1f0f2:	4608      	mov	r0, r1
   1f0f4:	f7e1 ff66 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f0f8:	a910      	add	r1, sp, #64	; 0x40
   1f0fa:	466a      	mov	r2, sp
   1f0fc:	a808      	add	r0, sp, #32
   1f0fe:	f7e1 ff49 	bl	f94 <ocrypto_mod_p256_mul>
   1f102:	2405      	movs	r4, #5
   1f104:	a908      	add	r1, sp, #32
   1f106:	a810      	add	r0, sp, #64	; 0x40
   1f108:	f7e1 ff5c 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f10c:	a910      	add	r1, sp, #64	; 0x40
   1f10e:	4608      	mov	r0, r1
   1f110:	f7e1 ff58 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f114:	3c01      	subs	r4, #1
   1f116:	a910      	add	r1, sp, #64	; 0x40
   1f118:	d1f5      	bne.n	1f106 <ocrypto_mod_p256_inv+0x7a>
   1f11a:	aa08      	add	r2, sp, #32
   1f11c:	4608      	mov	r0, r1
   1f11e:	f7e1 ff39 	bl	f94 <ocrypto_mod_p256_mul>
   1f122:	2405      	movs	r4, #5
   1f124:	a910      	add	r1, sp, #64	; 0x40
   1f126:	4608      	mov	r0, r1
   1f128:	f7e1 ff4c 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f12c:	a910      	add	r1, sp, #64	; 0x40
   1f12e:	4608      	mov	r0, r1
   1f130:	f7e1 ff48 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f134:	3c01      	subs	r4, #1
   1f136:	d1f5      	bne.n	1f124 <ocrypto_mod_p256_inv+0x98>
   1f138:	a910      	add	r1, sp, #64	; 0x40
   1f13a:	aa08      	add	r2, sp, #32
   1f13c:	4608      	mov	r0, r1
   1f13e:	f7e1 ff29 	bl	f94 <ocrypto_mod_p256_mul>
   1f142:	a910      	add	r1, sp, #64	; 0x40
   1f144:	a808      	add	r0, sp, #32
   1f146:	f7e1 ff3d 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f14a:	a908      	add	r1, sp, #32
   1f14c:	4608      	mov	r0, r1
   1f14e:	f7e1 ff39 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f152:	a908      	add	r1, sp, #32
   1f154:	466a      	mov	r2, sp
   1f156:	4668      	mov	r0, sp
   1f158:	f7e1 ff1c 	bl	f94 <ocrypto_mod_p256_mul>
   1f15c:	2410      	movs	r4, #16
   1f15e:	4669      	mov	r1, sp
   1f160:	a810      	add	r0, sp, #64	; 0x40
   1f162:	f7e1 ff2f 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f166:	a910      	add	r1, sp, #64	; 0x40
   1f168:	4608      	mov	r0, r1
   1f16a:	f7e1 ff2b 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f16e:	3c01      	subs	r4, #1
   1f170:	a910      	add	r1, sp, #64	; 0x40
   1f172:	d1f5      	bne.n	1f160 <ocrypto_mod_p256_inv+0xd4>
   1f174:	462a      	mov	r2, r5
   1f176:	4608      	mov	r0, r1
   1f178:	f7e1 ff0c 	bl	f94 <ocrypto_mod_p256_mul>
   1f17c:	2440      	movs	r4, #64	; 0x40
   1f17e:	a910      	add	r1, sp, #64	; 0x40
   1f180:	4608      	mov	r0, r1
   1f182:	f7e1 ff1f 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f186:	a910      	add	r1, sp, #64	; 0x40
   1f188:	4608      	mov	r0, r1
   1f18a:	f7e1 ff1b 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f18e:	3c01      	subs	r4, #1
   1f190:	d1f5      	bne.n	1f17e <ocrypto_mod_p256_inv+0xf2>
   1f192:	a910      	add	r1, sp, #64	; 0x40
   1f194:	466a      	mov	r2, sp
   1f196:	4608      	mov	r0, r1
   1f198:	f7e1 fefc 	bl	f94 <ocrypto_mod_p256_mul>
   1f19c:	2410      	movs	r4, #16
   1f19e:	a910      	add	r1, sp, #64	; 0x40
   1f1a0:	4608      	mov	r0, r1
   1f1a2:	f7e1 ff0f 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f1a6:	a910      	add	r1, sp, #64	; 0x40
   1f1a8:	4608      	mov	r0, r1
   1f1aa:	f7e1 ff0b 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f1ae:	3c01      	subs	r4, #1
   1f1b0:	d1f5      	bne.n	1f19e <ocrypto_mod_p256_inv+0x112>
   1f1b2:	a910      	add	r1, sp, #64	; 0x40
   1f1b4:	466a      	mov	r2, sp
   1f1b6:	4608      	mov	r0, r1
   1f1b8:	f7e1 feec 	bl	f94 <ocrypto_mod_p256_mul>
   1f1bc:	2410      	movs	r4, #16
   1f1be:	a910      	add	r1, sp, #64	; 0x40
   1f1c0:	4608      	mov	r0, r1
   1f1c2:	f7e1 feff 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f1c6:	a910      	add	r1, sp, #64	; 0x40
   1f1c8:	4608      	mov	r0, r1
   1f1ca:	f7e1 fefb 	bl	fc4 <ocrypto_mod_p256_sqr>
   1f1ce:	3c01      	subs	r4, #1
   1f1d0:	d1f5      	bne.n	1f1be <ocrypto_mod_p256_inv+0x132>
   1f1d2:	a910      	add	r1, sp, #64	; 0x40
   1f1d4:	aa08      	add	r2, sp, #32
   1f1d6:	4608      	mov	r0, r1
   1f1d8:	f7e1 fedc 	bl	f94 <ocrypto_mod_p256_mul>
   1f1dc:	462a      	mov	r2, r5
   1f1de:	a910      	add	r1, sp, #64	; 0x40
   1f1e0:	4630      	mov	r0, r6
   1f1e2:	f7e1 fed7 	bl	f94 <ocrypto_mod_p256_mul>
   1f1e6:	b018      	add	sp, #96	; 0x60
   1f1e8:	bd70      	pop	{r4, r5, r6, pc}
   1f1ea:	bf00      	nop

0001f1ec <nrf_cc3xx_platform_init>:
   1f1ec:	b510      	push	{r4, lr}
   1f1ee:	4c0c      	ldr	r4, [pc, #48]	; (1f220 <nrf_cc3xx_platform_init+0x34>)
   1f1f0:	6823      	ldr	r3, [r4, #0]
   1f1f2:	b113      	cbz	r3, 1f1fa <nrf_cc3xx_platform_init+0xe>
   1f1f4:	4b0b      	ldr	r3, [pc, #44]	; (1f224 <nrf_cc3xx_platform_init+0x38>)
   1f1f6:	681b      	ldr	r3, [r3, #0]
   1f1f8:	b92b      	cbnz	r3, 1f206 <nrf_cc3xx_platform_init+0x1a>
   1f1fa:	f000 fe99 	bl	1ff30 <CC_LibInit>
   1f1fe:	b930      	cbnz	r0, 1f20e <nrf_cc3xx_platform_init+0x22>
   1f200:	4b08      	ldr	r3, [pc, #32]	; (1f224 <nrf_cc3xx_platform_init+0x38>)
   1f202:	2201      	movs	r2, #1
   1f204:	601a      	str	r2, [r3, #0]
   1f206:	2301      	movs	r3, #1
   1f208:	6023      	str	r3, [r4, #0]
   1f20a:	2000      	movs	r0, #0
   1f20c:	bd10      	pop	{r4, pc}
   1f20e:	3801      	subs	r0, #1
   1f210:	2806      	cmp	r0, #6
   1f212:	d901      	bls.n	1f218 <nrf_cc3xx_platform_init+0x2c>
   1f214:	4804      	ldr	r0, [pc, #16]	; (1f228 <nrf_cc3xx_platform_init+0x3c>)
   1f216:	bd10      	pop	{r4, pc}
   1f218:	4b04      	ldr	r3, [pc, #16]	; (1f22c <nrf_cc3xx_platform_init+0x40>)
   1f21a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1f21e:	bd10      	pop	{r4, pc}
   1f220:	20003a7c 	.word	0x20003a7c
   1f224:	20003a80 	.word	0x20003a80
   1f228:	ffff8ffe 	.word	0xffff8ffe
   1f22c:	00026814 	.word	0x00026814

0001f230 <nrf_cc3xx_platform_abort>:
   1f230:	f3bf 8f4f 	dsb	sy
   1f234:	4905      	ldr	r1, [pc, #20]	; (1f24c <nrf_cc3xx_platform_abort+0x1c>)
   1f236:	4b06      	ldr	r3, [pc, #24]	; (1f250 <nrf_cc3xx_platform_abort+0x20>)
   1f238:	68ca      	ldr	r2, [r1, #12]
   1f23a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f23e:	4313      	orrs	r3, r2
   1f240:	60cb      	str	r3, [r1, #12]
   1f242:	f3bf 8f4f 	dsb	sy
   1f246:	bf00      	nop
   1f248:	e7fd      	b.n	1f246 <nrf_cc3xx_platform_abort+0x16>
   1f24a:	bf00      	nop
   1f24c:	e000ed00 	.word	0xe000ed00
   1f250:	05fa0004 	.word	0x05fa0004

0001f254 <CC_PalAbort>:
   1f254:	b410      	push	{r4}
   1f256:	4b09      	ldr	r3, [pc, #36]	; (1f27c <CC_PalAbort+0x28>)
   1f258:	4909      	ldr	r1, [pc, #36]	; (1f280 <CC_PalAbort+0x2c>)
   1f25a:	4c0a      	ldr	r4, [pc, #40]	; (1f284 <CC_PalAbort+0x30>)
   1f25c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   1f260:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   1f264:	6849      	ldr	r1, [r1, #4]
   1f266:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   1f26a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   1f26e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   1f272:	2300      	movs	r3, #0
   1f274:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1f278:	bc10      	pop	{r4}
   1f27a:	4708      	bx	r1
   1f27c:	5002b000 	.word	0x5002b000
   1f280:	200008d0 	.word	0x200008d0
   1f284:	5002a000 	.word	0x5002a000

0001f288 <nrf_cc3xx_platform_set_abort>:
   1f288:	e9d0 1200 	ldrd	r1, r2, [r0]
   1f28c:	4b01      	ldr	r3, [pc, #4]	; (1f294 <nrf_cc3xx_platform_set_abort+0xc>)
   1f28e:	e9c3 1200 	strd	r1, r2, [r3]
   1f292:	4770      	bx	lr
   1f294:	200008d0 	.word	0x200008d0

0001f298 <nrf_cc3xx_platform_ctr_drbg_init>:
   1f298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f29c:	4c14      	ldr	r4, [pc, #80]	; (1f2f0 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   1f29e:	4e15      	ldr	r6, [pc, #84]	; (1f2f4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   1f2a0:	2800      	cmp	r0, #0
   1f2a2:	bf18      	it	ne
   1f2a4:	4604      	movne	r4, r0
   1f2a6:	b083      	sub	sp, #12
   1f2a8:	6823      	ldr	r3, [r4, #0]
   1f2aa:	42b3      	cmp	r3, r6
   1f2ac:	d01c      	beq.n	1f2e8 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   1f2ae:	460d      	mov	r5, r1
   1f2b0:	4620      	mov	r0, r4
   1f2b2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   1f2b6:	f104 0904 	add.w	r9, r4, #4
   1f2ba:	4617      	mov	r7, r2
   1f2bc:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   1f2c0:	f000 f8e8 	bl	1f494 <mbedtls_platform_zeroize>
   1f2c4:	4648      	mov	r0, r9
   1f2c6:	f000 fd1d 	bl	1fd04 <cc_mbedtls_entropy_init>
   1f2ca:	4640      	mov	r0, r8
   1f2cc:	f000 fb4a 	bl	1f964 <cc_mbedtls_ctr_drbg_init>
   1f2d0:	4909      	ldr	r1, [pc, #36]	; (1f2f8 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   1f2d2:	9700      	str	r7, [sp, #0]
   1f2d4:	462b      	mov	r3, r5
   1f2d6:	464a      	mov	r2, r9
   1f2d8:	4640      	mov	r0, r8
   1f2da:	f000 fb59 	bl	1f990 <cc_mbedtls_ctr_drbg_seed>
   1f2de:	b900      	cbnz	r0, 1f2e2 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   1f2e0:	6026      	str	r6, [r4, #0]
   1f2e2:	b003      	add	sp, #12
   1f2e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f2e8:	2000      	movs	r0, #0
   1f2ea:	b003      	add	sp, #12
   1f2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f2f0:	20003a84 	.word	0x20003a84
   1f2f4:	5ac9bca5 	.word	0x5ac9bca5
   1f2f8:	0001fd8d 	.word	0x0001fd8d

0001f2fc <nrf_cc3xx_platform_ctr_drbg_get>:
   1f2fc:	b570      	push	{r4, r5, r6, lr}
   1f2fe:	4d0d      	ldr	r5, [pc, #52]	; (1f334 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   1f300:	2800      	cmp	r0, #0
   1f302:	bf18      	it	ne
   1f304:	4605      	movne	r5, r0
   1f306:	461e      	mov	r6, r3
   1f308:	6828      	ldr	r0, [r5, #0]
   1f30a:	4b0b      	ldr	r3, [pc, #44]	; (1f338 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   1f30c:	4298      	cmp	r0, r3
   1f30e:	b082      	sub	sp, #8
   1f310:	d10d      	bne.n	1f32e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   1f312:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   1f316:	2500      	movs	r5, #0
   1f318:	9500      	str	r5, [sp, #0]
   1f31a:	462b      	mov	r3, r5
   1f31c:	4614      	mov	r4, r2
   1f31e:	f000 fb85 	bl	1fa2c <cc_mbedtls_ctr_drbg_random_with_add>
   1f322:	2800      	cmp	r0, #0
   1f324:	bf18      	it	ne
   1f326:	462c      	movne	r4, r5
   1f328:	6034      	str	r4, [r6, #0]
   1f32a:	b002      	add	sp, #8
   1f32c:	bd70      	pop	{r4, r5, r6, pc}
   1f32e:	4803      	ldr	r0, [pc, #12]	; (1f33c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   1f330:	e7fb      	b.n	1f32a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   1f332:	bf00      	nop
   1f334:	20003a84 	.word	0x20003a84
   1f338:	5ac9bca5 	.word	0x5ac9bca5
   1f33c:	ffff8fe8 	.word	0xffff8fe8

0001f340 <mutex_free>:
   1f340:	b510      	push	{r4, lr}
   1f342:	4604      	mov	r4, r0
   1f344:	b150      	cbz	r0, 1f35c <mutex_free+0x1c>
   1f346:	6863      	ldr	r3, [r4, #4]
   1f348:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1f34c:	d005      	beq.n	1f35a <mutex_free+0x1a>
   1f34e:	4a06      	ldr	r2, [pc, #24]	; (1f368 <mutex_free+0x28>)
   1f350:	4293      	cmp	r3, r2
   1f352:	d002      	beq.n	1f35a <mutex_free+0x1a>
   1f354:	2300      	movs	r3, #0
   1f356:	6023      	str	r3, [r4, #0]
   1f358:	6062      	str	r2, [r4, #4]
   1f35a:	bd10      	pop	{r4, pc}
   1f35c:	4b03      	ldr	r3, [pc, #12]	; (1f36c <mutex_free+0x2c>)
   1f35e:	4804      	ldr	r0, [pc, #16]	; (1f370 <mutex_free+0x30>)
   1f360:	685b      	ldr	r3, [r3, #4]
   1f362:	4798      	blx	r3
   1f364:	e7ef      	b.n	1f346 <mutex_free+0x6>
   1f366:	bf00      	nop
   1f368:	a95c5f2c 	.word	0xa95c5f2c
   1f36c:	200008d0 	.word	0x200008d0
   1f370:	00026830 	.word	0x00026830

0001f374 <mutex_lock>:
   1f374:	b1c8      	cbz	r0, 1f3aa <mutex_lock+0x36>
   1f376:	6843      	ldr	r3, [r0, #4]
   1f378:	4a0d      	ldr	r2, [pc, #52]	; (1f3b0 <mutex_lock+0x3c>)
   1f37a:	4293      	cmp	r3, r2
   1f37c:	d013      	beq.n	1f3a6 <mutex_lock+0x32>
   1f37e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1f382:	d00e      	beq.n	1f3a2 <mutex_lock+0x2e>
   1f384:	2301      	movs	r3, #1
   1f386:	e850 2f00 	ldrex	r2, [r0]
   1f38a:	4619      	mov	r1, r3
   1f38c:	e840 1c00 	strex	ip, r1, [r0]
   1f390:	f09c 0f00 	teq	ip, #0
   1f394:	d1f7      	bne.n	1f386 <mutex_lock+0x12>
   1f396:	2a01      	cmp	r2, #1
   1f398:	d0f5      	beq.n	1f386 <mutex_lock+0x12>
   1f39a:	f3bf 8f5f 	dmb	sy
   1f39e:	2000      	movs	r0, #0
   1f3a0:	4770      	bx	lr
   1f3a2:	4804      	ldr	r0, [pc, #16]	; (1f3b4 <mutex_lock+0x40>)
   1f3a4:	4770      	bx	lr
   1f3a6:	4804      	ldr	r0, [pc, #16]	; (1f3b8 <mutex_lock+0x44>)
   1f3a8:	4770      	bx	lr
   1f3aa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1f3ae:	4770      	bx	lr
   1f3b0:	a95c5f2c 	.word	0xa95c5f2c
   1f3b4:	ffff8fe9 	.word	0xffff8fe9
   1f3b8:	ffff8fea 	.word	0xffff8fea

0001f3bc <mutex_unlock>:
   1f3bc:	b180      	cbz	r0, 1f3e0 <mutex_unlock+0x24>
   1f3be:	6843      	ldr	r3, [r0, #4]
   1f3c0:	4a09      	ldr	r2, [pc, #36]	; (1f3e8 <mutex_unlock+0x2c>)
   1f3c2:	4293      	cmp	r3, r2
   1f3c4:	d00a      	beq.n	1f3dc <mutex_unlock+0x20>
   1f3c6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1f3ca:	d005      	beq.n	1f3d8 <mutex_unlock+0x1c>
   1f3cc:	f3bf 8f5f 	dmb	sy
   1f3d0:	2300      	movs	r3, #0
   1f3d2:	6003      	str	r3, [r0, #0]
   1f3d4:	4618      	mov	r0, r3
   1f3d6:	4770      	bx	lr
   1f3d8:	4804      	ldr	r0, [pc, #16]	; (1f3ec <mutex_unlock+0x30>)
   1f3da:	4770      	bx	lr
   1f3dc:	4804      	ldr	r0, [pc, #16]	; (1f3f0 <mutex_unlock+0x34>)
   1f3de:	4770      	bx	lr
   1f3e0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1f3e4:	4770      	bx	lr
   1f3e6:	bf00      	nop
   1f3e8:	a95c5f2c 	.word	0xa95c5f2c
   1f3ec:	ffff8fe9 	.word	0xffff8fe9
   1f3f0:	ffff8fea 	.word	0xffff8fea

0001f3f4 <mutex_init>:
   1f3f4:	b510      	push	{r4, lr}
   1f3f6:	4604      	mov	r4, r0
   1f3f8:	b120      	cbz	r0, 1f404 <mutex_init+0x10>
   1f3fa:	4b04      	ldr	r3, [pc, #16]	; (1f40c <mutex_init+0x18>)
   1f3fc:	6063      	str	r3, [r4, #4]
   1f3fe:	2200      	movs	r2, #0
   1f400:	6022      	str	r2, [r4, #0]
   1f402:	bd10      	pop	{r4, pc}
   1f404:	4802      	ldr	r0, [pc, #8]	; (1f410 <mutex_init+0x1c>)
   1f406:	f7ff ff25 	bl	1f254 <CC_PalAbort>
   1f40a:	e7f6      	b.n	1f3fa <mutex_init+0x6>
   1f40c:	3a00003a 	.word	0x3a00003a
   1f410:	00026858 	.word	0x00026858

0001f414 <nrf_cc3xx_platform_set_mutexes>:
   1f414:	b570      	push	{r4, r5, r6, lr}
   1f416:	e9d0 2300 	ldrd	r2, r3, [r0]
   1f41a:	4c15      	ldr	r4, [pc, #84]	; (1f470 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   1f41c:	4d15      	ldr	r5, [pc, #84]	; (1f474 <nrf_cc3xx_platform_set_mutexes+0x60>)
   1f41e:	6063      	str	r3, [r4, #4]
   1f420:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   1f424:	e9c4 3002 	strd	r3, r0, [r4, #8]
   1f428:	6022      	str	r2, [r4, #0]
   1f42a:	4b13      	ldr	r3, [pc, #76]	; (1f478 <nrf_cc3xx_platform_set_mutexes+0x64>)
   1f42c:	6808      	ldr	r0, [r1, #0]
   1f42e:	6018      	str	r0, [r3, #0]
   1f430:	6848      	ldr	r0, [r1, #4]
   1f432:	6058      	str	r0, [r3, #4]
   1f434:	6888      	ldr	r0, [r1, #8]
   1f436:	6098      	str	r0, [r3, #8]
   1f438:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   1f43c:	60d8      	str	r0, [r3, #12]
   1f43e:	6119      	str	r1, [r3, #16]
   1f440:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1f444:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   1f448:	d010      	beq.n	1f46c <nrf_cc3xx_platform_set_mutexes+0x58>
   1f44a:	490c      	ldr	r1, [pc, #48]	; (1f47c <nrf_cc3xx_platform_set_mutexes+0x68>)
   1f44c:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   1f450:	2300      	movs	r3, #0
   1f452:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   1f456:	f505 708a 	add.w	r0, r5, #276	; 0x114
   1f45a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1f45e:	4790      	blx	r2
   1f460:	6823      	ldr	r3, [r4, #0]
   1f462:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   1f466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f46a:	4718      	bx	r3
   1f46c:	bd70      	pop	{r4, r5, r6, pc}
   1f46e:	bf00      	nop
   1f470:	200008e0 	.word	0x200008e0
   1f474:	20003a84 	.word	0x20003a84
   1f478:	200008f0 	.word	0x200008f0
   1f47c:	a95c5f2c 	.word	0xa95c5f2c

0001f480 <mbedtls_zeroize_internal>:
   1f480:	b138      	cbz	r0, 1f492 <mbedtls_zeroize_internal+0x12>
   1f482:	b131      	cbz	r1, 1f492 <mbedtls_zeroize_internal+0x12>
   1f484:	4401      	add	r1, r0
   1f486:	2200      	movs	r2, #0
   1f488:	4603      	mov	r3, r0
   1f48a:	3001      	adds	r0, #1
   1f48c:	4281      	cmp	r1, r0
   1f48e:	701a      	strb	r2, [r3, #0]
   1f490:	d1fa      	bne.n	1f488 <mbedtls_zeroize_internal+0x8>
   1f492:	4770      	bx	lr

0001f494 <mbedtls_platform_zeroize>:
   1f494:	b138      	cbz	r0, 1f4a6 <mbedtls_platform_zeroize+0x12>
   1f496:	b131      	cbz	r1, 1f4a6 <mbedtls_platform_zeroize+0x12>
   1f498:	4401      	add	r1, r0
   1f49a:	2200      	movs	r2, #0
   1f49c:	4603      	mov	r3, r0
   1f49e:	3001      	adds	r0, #1
   1f4a0:	4288      	cmp	r0, r1
   1f4a2:	701a      	strb	r2, [r3, #0]
   1f4a4:	d1fa      	bne.n	1f49c <mbedtls_platform_zeroize+0x8>
   1f4a6:	4770      	bx	lr

0001f4a8 <block_cipher_df>:
   1f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4ac:	b0b7      	sub	sp, #220	; 0xdc
   1f4ae:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   1f4b2:	9005      	str	r0, [sp, #20]
   1f4b4:	f200 8147 	bhi.w	1f746 <block_cipher_df+0x29e>
   1f4b8:	4614      	mov	r4, r2
   1f4ba:	460d      	mov	r5, r1
   1f4bc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1f4c0:	2100      	movs	r1, #0
   1f4c2:	48a2      	ldr	r0, [pc, #648]	; (1f74c <block_cipher_df+0x2a4>)
   1f4c4:	f003 fc81 	bl	22dca <memset>
   1f4c8:	a819      	add	r0, sp, #100	; 0x64
   1f4ca:	f001 f9cf 	bl	2086c <cc_mbedtls_aes_init>
   1f4ce:	489f      	ldr	r0, [pc, #636]	; (1f74c <block_cipher_df+0x2a4>)
   1f4d0:	2300      	movs	r3, #0
   1f4d2:	8203      	strh	r3, [r0, #16]
   1f4d4:	ba63      	rev16	r3, r4
   1f4d6:	8243      	strh	r3, [r0, #18]
   1f4d8:	2320      	movs	r3, #32
   1f4da:	4629      	mov	r1, r5
   1f4dc:	75c3      	strb	r3, [r0, #23]
   1f4de:	4605      	mov	r5, r0
   1f4e0:	4622      	mov	r2, r4
   1f4e2:	3018      	adds	r0, #24
   1f4e4:	f003 fc66 	bl	22db4 <memcpy>
   1f4e8:	462b      	mov	r3, r5
   1f4ea:	4423      	add	r3, r4
   1f4ec:	2280      	movs	r2, #128	; 0x80
   1f4ee:	761a      	strb	r2, [r3, #24]
   1f4f0:	4b97      	ldr	r3, [pc, #604]	; (1f750 <block_cipher_df+0x2a8>)
   1f4f2:	930d      	str	r3, [sp, #52]	; 0x34
   1f4f4:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1f4f8:	930e      	str	r3, [sp, #56]	; 0x38
   1f4fa:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1f4fe:	930f      	str	r3, [sp, #60]	; 0x3c
   1f500:	a90d      	add	r1, sp, #52	; 0x34
   1f502:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   1f506:	a819      	add	r0, sp, #100	; 0x64
   1f508:	9310      	str	r3, [sp, #64]	; 0x40
   1f50a:	f001 f9c5 	bl	20898 <cc_mbedtls_aes_setkey_enc>
   1f50e:	4605      	mov	r5, r0
   1f510:	2800      	cmp	r0, #0
   1f512:	f040 80f4 	bne.w	1f6fe <block_cipher_df+0x256>
   1f516:	f104 0319 	add.w	r3, r4, #25
   1f51a:	9306      	str	r3, [sp, #24]
   1f51c:	f10d 0820 	add.w	r8, sp, #32
   1f520:	ab11      	add	r3, sp, #68	; 0x44
   1f522:	9304      	str	r3, [sp, #16]
   1f524:	9307      	str	r3, [sp, #28]
   1f526:	46c1      	mov	r9, r8
   1f528:	2210      	movs	r2, #16
   1f52a:	2100      	movs	r1, #0
   1f52c:	4648      	mov	r0, r9
   1f52e:	f003 fc4c 	bl	22dca <memset>
   1f532:	f8df a220 	ldr.w	sl, [pc, #544]	; 1f754 <block_cipher_df+0x2ac>
   1f536:	9b06      	ldr	r3, [sp, #24]
   1f538:	9300      	str	r3, [sp, #0]
   1f53a:	f8cd 900c 	str.w	r9, [sp, #12]
   1f53e:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   1f542:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   1f546:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   1f54a:	f89d 5020 	ldrb.w	r5, [sp, #32]
   1f54e:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   1f552:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   1f556:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   1f55a:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   1f55e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1f562:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   1f566:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   1f56a:	406a      	eors	r2, r5
   1f56c:	ea8e 0e00 	eor.w	lr, lr, r0
   1f570:	9d00      	ldr	r5, [sp, #0]
   1f572:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1f576:	9202      	str	r2, [sp, #8]
   1f578:	ea8c 0c03 	eor.w	ip, ip, r3
   1f57c:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   1f580:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   1f584:	2d10      	cmp	r5, #16
   1f586:	ea80 0003 	eor.w	r0, r0, r3
   1f58a:	462b      	mov	r3, r5
   1f58c:	bf8c      	ite	hi
   1f58e:	3b10      	subhi	r3, #16
   1f590:	1b6b      	subls	r3, r5, r5
   1f592:	9300      	str	r3, [sp, #0]
   1f594:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   1f598:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   1f59c:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   1f5a0:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   1f5a4:	4061      	eors	r1, r4
   1f5a6:	405f      	eors	r7, r3
   1f5a8:	2400      	movs	r4, #0
   1f5aa:	406a      	eors	r2, r5
   1f5ac:	ea8b 0b06 	eor.w	fp, fp, r6
   1f5b0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   1f5b4:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   1f5b8:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   1f5bc:	9601      	str	r6, [sp, #4]
   1f5be:	4626      	mov	r6, r4
   1f5c0:	406b      	eors	r3, r5
   1f5c2:	f36b 0607 	bfi	r6, fp, #0, #8
   1f5c6:	4625      	mov	r5, r4
   1f5c8:	f367 260f 	bfi	r6, r7, #8, #8
   1f5cc:	462f      	mov	r7, r5
   1f5ce:	f361 0707 	bfi	r7, r1, #0, #8
   1f5d2:	9902      	ldr	r1, [sp, #8]
   1f5d4:	f361 0507 	bfi	r5, r1, #0, #8
   1f5d8:	f362 250f 	bfi	r5, r2, #8, #8
   1f5dc:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1f5e0:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   1f5e4:	f363 270f 	bfi	r7, r3, #8, #8
   1f5e8:	ea82 0909 	eor.w	r9, r2, r9
   1f5ec:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1f5f0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   1f5f4:	ea83 0808 	eor.w	r8, r3, r8
   1f5f8:	404a      	eors	r2, r1
   1f5fa:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1f5fe:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   1f602:	f36e 0407 	bfi	r4, lr, #0, #8
   1f606:	404b      	eors	r3, r1
   1f608:	f368 4717 	bfi	r7, r8, #16, #8
   1f60c:	f36c 240f 	bfi	r4, ip, #8, #8
   1f610:	f363 671f 	bfi	r7, r3, #24, #8
   1f614:	9b03      	ldr	r3, [sp, #12]
   1f616:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   1f61a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1f61e:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   1f622:	ea8c 0c0e 	eor.w	ip, ip, lr
   1f626:	f36c 4617 	bfi	r6, ip, #16, #8
   1f62a:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   1f62e:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   1f632:	ea8c 0c08 	eor.w	ip, ip, r8
   1f636:	f36c 661f 	bfi	r6, ip, #24, #8
   1f63a:	f369 4517 	bfi	r5, r9, #16, #8
   1f63e:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   1f642:	960b      	str	r6, [sp, #44]	; 0x2c
   1f644:	f362 651f 	bfi	r5, r2, #24, #8
   1f648:	f360 4417 	bfi	r4, r0, #16, #8
   1f64c:	9508      	str	r5, [sp, #32]
   1f64e:	ea8c 050e 	eor.w	r5, ip, lr
   1f652:	f365 641f 	bfi	r4, r5, #24, #8
   1f656:	461a      	mov	r2, r3
   1f658:	2101      	movs	r1, #1
   1f65a:	a819      	add	r0, sp, #100	; 0x64
   1f65c:	f10a 0a10 	add.w	sl, sl, #16
   1f660:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   1f664:	f001 f932 	bl	208cc <cc_mbedtls_aes_crypt_ecb>
   1f668:	2800      	cmp	r0, #0
   1f66a:	d168      	bne.n	1f73e <block_cipher_df+0x296>
   1f66c:	9b00      	ldr	r3, [sp, #0]
   1f66e:	2b00      	cmp	r3, #0
   1f670:	f47f af65 	bne.w	1f53e <block_cipher_df+0x96>
   1f674:	9c07      	ldr	r4, [sp, #28]
   1f676:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1f67a:	4620      	mov	r0, r4
   1f67c:	2210      	movs	r2, #16
   1f67e:	3410      	adds	r4, #16
   1f680:	4649      	mov	r1, r9
   1f682:	9407      	str	r4, [sp, #28]
   1f684:	f003 fb96 	bl	22db4 <memcpy>
   1f688:	4a30      	ldr	r2, [pc, #192]	; (1f74c <block_cipher_df+0x2a4>)
   1f68a:	78d3      	ldrb	r3, [r2, #3]
   1f68c:	3301      	adds	r3, #1
   1f68e:	70d3      	strb	r3, [r2, #3]
   1f690:	ab19      	add	r3, sp, #100	; 0x64
   1f692:	429c      	cmp	r4, r3
   1f694:	f47f af48 	bne.w	1f528 <block_cipher_df+0x80>
   1f698:	9904      	ldr	r1, [sp, #16]
   1f69a:	2280      	movs	r2, #128	; 0x80
   1f69c:	4618      	mov	r0, r3
   1f69e:	f001 f8fb 	bl	20898 <cc_mbedtls_aes_setkey_enc>
   1f6a2:	46c8      	mov	r8, r9
   1f6a4:	4605      	mov	r5, r0
   1f6a6:	bb70      	cbnz	r0, 1f706 <block_cipher_df+0x25e>
   1f6a8:	9c05      	ldr	r4, [sp, #20]
   1f6aa:	f104 0620 	add.w	r6, r4, #32
   1f6ae:	ab15      	add	r3, sp, #84	; 0x54
   1f6b0:	461a      	mov	r2, r3
   1f6b2:	2101      	movs	r1, #1
   1f6b4:	a819      	add	r0, sp, #100	; 0x64
   1f6b6:	f001 f909 	bl	208cc <cc_mbedtls_aes_crypt_ecb>
   1f6ba:	2210      	movs	r2, #16
   1f6bc:	4605      	mov	r5, r0
   1f6be:	bb10      	cbnz	r0, 1f706 <block_cipher_df+0x25e>
   1f6c0:	4620      	mov	r0, r4
   1f6c2:	a915      	add	r1, sp, #84	; 0x54
   1f6c4:	3410      	adds	r4, #16
   1f6c6:	f003 fb75 	bl	22db4 <memcpy>
   1f6ca:	42b4      	cmp	r4, r6
   1f6cc:	d1ef      	bne.n	1f6ae <block_cipher_df+0x206>
   1f6ce:	a819      	add	r0, sp, #100	; 0x64
   1f6d0:	f001 f8dc 	bl	2088c <cc_mbedtls_aes_free>
   1f6d4:	481d      	ldr	r0, [pc, #116]	; (1f74c <block_cipher_df+0x2a4>)
   1f6d6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1f6da:	f7ff fedb 	bl	1f494 <mbedtls_platform_zeroize>
   1f6de:	9804      	ldr	r0, [sp, #16]
   1f6e0:	2120      	movs	r1, #32
   1f6e2:	f7ff fed7 	bl	1f494 <mbedtls_platform_zeroize>
   1f6e6:	a80d      	add	r0, sp, #52	; 0x34
   1f6e8:	2110      	movs	r1, #16
   1f6ea:	f7ff fed3 	bl	1f494 <mbedtls_platform_zeroize>
   1f6ee:	4640      	mov	r0, r8
   1f6f0:	2110      	movs	r1, #16
   1f6f2:	f7ff fecf 	bl	1f494 <mbedtls_platform_zeroize>
   1f6f6:	4628      	mov	r0, r5
   1f6f8:	b037      	add	sp, #220	; 0xdc
   1f6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f6fe:	ab11      	add	r3, sp, #68	; 0x44
   1f700:	9304      	str	r3, [sp, #16]
   1f702:	f10d 0820 	add.w	r8, sp, #32
   1f706:	a819      	add	r0, sp, #100	; 0x64
   1f708:	f001 f8c0 	bl	2088c <cc_mbedtls_aes_free>
   1f70c:	480f      	ldr	r0, [pc, #60]	; (1f74c <block_cipher_df+0x2a4>)
   1f70e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   1f712:	f7ff febf 	bl	1f494 <mbedtls_platform_zeroize>
   1f716:	9804      	ldr	r0, [sp, #16]
   1f718:	2120      	movs	r1, #32
   1f71a:	f7ff febb 	bl	1f494 <mbedtls_platform_zeroize>
   1f71e:	a80d      	add	r0, sp, #52	; 0x34
   1f720:	2110      	movs	r1, #16
   1f722:	f7ff feb7 	bl	1f494 <mbedtls_platform_zeroize>
   1f726:	4640      	mov	r0, r8
   1f728:	2110      	movs	r1, #16
   1f72a:	f7ff feb3 	bl	1f494 <mbedtls_platform_zeroize>
   1f72e:	9805      	ldr	r0, [sp, #20]
   1f730:	2120      	movs	r1, #32
   1f732:	f7ff feaf 	bl	1f494 <mbedtls_platform_zeroize>
   1f736:	4628      	mov	r0, r5
   1f738:	b037      	add	sp, #220	; 0xdc
   1f73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f73e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1f742:	4605      	mov	r5, r0
   1f744:	e7df      	b.n	1f706 <block_cipher_df+0x25e>
   1f746:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1f74a:	e7f4      	b.n	1f736 <block_cipher_df+0x28e>
   1f74c:	20003c54 	.word	0x20003c54
   1f750:	03020100 	.word	0x03020100
   1f754:	20003c64 	.word	0x20003c64

0001f758 <ctr_drbg_update_internal>:
   1f758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f75c:	b088      	sub	sp, #32
   1f75e:	4604      	mov	r4, r0
   1f760:	460d      	mov	r5, r1
   1f762:	2220      	movs	r2, #32
   1f764:	2100      	movs	r1, #0
   1f766:	4668      	mov	r0, sp
   1f768:	f003 fb2f 	bl	22dca <memset>
   1f76c:	f104 0620 	add.w	r6, r4, #32
   1f770:	466f      	mov	r7, sp
   1f772:	7be2      	ldrb	r2, [r4, #15]
   1f774:	3201      	adds	r2, #1
   1f776:	b2d2      	uxtb	r2, r2
   1f778:	73e2      	strb	r2, [r4, #15]
   1f77a:	2a00      	cmp	r2, #0
   1f77c:	d14d      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f77e:	7ba2      	ldrb	r2, [r4, #14]
   1f780:	3201      	adds	r2, #1
   1f782:	b2d2      	uxtb	r2, r2
   1f784:	73a2      	strb	r2, [r4, #14]
   1f786:	2a00      	cmp	r2, #0
   1f788:	d147      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f78a:	7b63      	ldrb	r3, [r4, #13]
   1f78c:	3301      	adds	r3, #1
   1f78e:	b2db      	uxtb	r3, r3
   1f790:	7363      	strb	r3, [r4, #13]
   1f792:	2b00      	cmp	r3, #0
   1f794:	d141      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f796:	7b23      	ldrb	r3, [r4, #12]
   1f798:	3301      	adds	r3, #1
   1f79a:	b2db      	uxtb	r3, r3
   1f79c:	7323      	strb	r3, [r4, #12]
   1f79e:	2b00      	cmp	r3, #0
   1f7a0:	d13b      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f7a2:	7ae3      	ldrb	r3, [r4, #11]
   1f7a4:	3301      	adds	r3, #1
   1f7a6:	b2db      	uxtb	r3, r3
   1f7a8:	72e3      	strb	r3, [r4, #11]
   1f7aa:	2b00      	cmp	r3, #0
   1f7ac:	d135      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f7ae:	7aa3      	ldrb	r3, [r4, #10]
   1f7b0:	3301      	adds	r3, #1
   1f7b2:	b2db      	uxtb	r3, r3
   1f7b4:	72a3      	strb	r3, [r4, #10]
   1f7b6:	2b00      	cmp	r3, #0
   1f7b8:	d12f      	bne.n	1f81a <ctr_drbg_update_internal+0xc2>
   1f7ba:	7a63      	ldrb	r3, [r4, #9]
   1f7bc:	3301      	adds	r3, #1
   1f7be:	b2db      	uxtb	r3, r3
   1f7c0:	7263      	strb	r3, [r4, #9]
   1f7c2:	bb53      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7c4:	7a23      	ldrb	r3, [r4, #8]
   1f7c6:	3301      	adds	r3, #1
   1f7c8:	b2db      	uxtb	r3, r3
   1f7ca:	7223      	strb	r3, [r4, #8]
   1f7cc:	bb2b      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7ce:	79e3      	ldrb	r3, [r4, #7]
   1f7d0:	3301      	adds	r3, #1
   1f7d2:	b2db      	uxtb	r3, r3
   1f7d4:	71e3      	strb	r3, [r4, #7]
   1f7d6:	bb03      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7d8:	79a3      	ldrb	r3, [r4, #6]
   1f7da:	3301      	adds	r3, #1
   1f7dc:	b2db      	uxtb	r3, r3
   1f7de:	71a3      	strb	r3, [r4, #6]
   1f7e0:	b9db      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7e2:	7963      	ldrb	r3, [r4, #5]
   1f7e4:	3301      	adds	r3, #1
   1f7e6:	b2db      	uxtb	r3, r3
   1f7e8:	7163      	strb	r3, [r4, #5]
   1f7ea:	b9b3      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7ec:	7923      	ldrb	r3, [r4, #4]
   1f7ee:	3301      	adds	r3, #1
   1f7f0:	b2db      	uxtb	r3, r3
   1f7f2:	7123      	strb	r3, [r4, #4]
   1f7f4:	b98b      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f7f6:	78e3      	ldrb	r3, [r4, #3]
   1f7f8:	3301      	adds	r3, #1
   1f7fa:	b2db      	uxtb	r3, r3
   1f7fc:	70e3      	strb	r3, [r4, #3]
   1f7fe:	b963      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f800:	78a3      	ldrb	r3, [r4, #2]
   1f802:	3301      	adds	r3, #1
   1f804:	b2db      	uxtb	r3, r3
   1f806:	70a3      	strb	r3, [r4, #2]
   1f808:	b93b      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f80a:	7863      	ldrb	r3, [r4, #1]
   1f80c:	3301      	adds	r3, #1
   1f80e:	b2db      	uxtb	r3, r3
   1f810:	7063      	strb	r3, [r4, #1]
   1f812:	b913      	cbnz	r3, 1f81a <ctr_drbg_update_internal+0xc2>
   1f814:	7823      	ldrb	r3, [r4, #0]
   1f816:	3301      	adds	r3, #1
   1f818:	7023      	strb	r3, [r4, #0]
   1f81a:	463b      	mov	r3, r7
   1f81c:	4622      	mov	r2, r4
   1f81e:	2101      	movs	r1, #1
   1f820:	4630      	mov	r0, r6
   1f822:	f001 f853 	bl	208cc <cc_mbedtls_aes_crypt_ecb>
   1f826:	4680      	mov	r8, r0
   1f828:	bb50      	cbnz	r0, 1f880 <ctr_drbg_update_internal+0x128>
   1f82a:	3710      	adds	r7, #16
   1f82c:	ab08      	add	r3, sp, #32
   1f82e:	429f      	cmp	r7, r3
   1f830:	d19f      	bne.n	1f772 <ctr_drbg_update_internal+0x1a>
   1f832:	9a00      	ldr	r2, [sp, #0]
   1f834:	682b      	ldr	r3, [r5, #0]
   1f836:	9906      	ldr	r1, [sp, #24]
   1f838:	4053      	eors	r3, r2
   1f83a:	9300      	str	r3, [sp, #0]
   1f83c:	9a01      	ldr	r2, [sp, #4]
   1f83e:	686b      	ldr	r3, [r5, #4]
   1f840:	4053      	eors	r3, r2
   1f842:	9301      	str	r3, [sp, #4]
   1f844:	9a02      	ldr	r2, [sp, #8]
   1f846:	68ab      	ldr	r3, [r5, #8]
   1f848:	4053      	eors	r3, r2
   1f84a:	9302      	str	r3, [sp, #8]
   1f84c:	9a03      	ldr	r2, [sp, #12]
   1f84e:	68eb      	ldr	r3, [r5, #12]
   1f850:	4053      	eors	r3, r2
   1f852:	9303      	str	r3, [sp, #12]
   1f854:	9a04      	ldr	r2, [sp, #16]
   1f856:	692b      	ldr	r3, [r5, #16]
   1f858:	4053      	eors	r3, r2
   1f85a:	9304      	str	r3, [sp, #16]
   1f85c:	9a05      	ldr	r2, [sp, #20]
   1f85e:	696b      	ldr	r3, [r5, #20]
   1f860:	4053      	eors	r3, r2
   1f862:	69aa      	ldr	r2, [r5, #24]
   1f864:	9305      	str	r3, [sp, #20]
   1f866:	404a      	eors	r2, r1
   1f868:	69eb      	ldr	r3, [r5, #28]
   1f86a:	9206      	str	r2, [sp, #24]
   1f86c:	9a07      	ldr	r2, [sp, #28]
   1f86e:	4630      	mov	r0, r6
   1f870:	4053      	eors	r3, r2
   1f872:	4669      	mov	r1, sp
   1f874:	2280      	movs	r2, #128	; 0x80
   1f876:	9307      	str	r3, [sp, #28]
   1f878:	f001 f80e 	bl	20898 <cc_mbedtls_aes_setkey_enc>
   1f87c:	4680      	mov	r8, r0
   1f87e:	b138      	cbz	r0, 1f890 <ctr_drbg_update_internal+0x138>
   1f880:	4668      	mov	r0, sp
   1f882:	2120      	movs	r1, #32
   1f884:	f7ff fe06 	bl	1f494 <mbedtls_platform_zeroize>
   1f888:	4640      	mov	r0, r8
   1f88a:	b008      	add	sp, #32
   1f88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f890:	2210      	movs	r2, #16
   1f892:	eb0d 0102 	add.w	r1, sp, r2
   1f896:	4620      	mov	r0, r4
   1f898:	f003 fa8c 	bl	22db4 <memcpy>
   1f89c:	e7f0      	b.n	1f880 <ctr_drbg_update_internal+0x128>
   1f89e:	bf00      	nop

0001f8a0 <mbedtls_ctr_drbg_reseed_internal>:
   1f8a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f8a4:	4604      	mov	r4, r0
   1f8a6:	6980      	ldr	r0, [r0, #24]
   1f8a8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   1f8ac:	d852      	bhi.n	1f954 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1f8ae:	461d      	mov	r5, r3
   1f8b0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   1f8b4:	42ab      	cmp	r3, r5
   1f8b6:	d34d      	bcc.n	1f954 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1f8b8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   1f8bc:	1a18      	subs	r0, r3, r0
   1f8be:	4290      	cmp	r0, r2
   1f8c0:	4616      	mov	r6, r2
   1f8c2:	d347      	bcc.n	1f954 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   1f8c4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f960 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   1f8c8:	f44f 72c0 	mov.w	r2, #384	; 0x180
   1f8cc:	460f      	mov	r7, r1
   1f8ce:	4648      	mov	r0, r9
   1f8d0:	2100      	movs	r1, #0
   1f8d2:	f003 fa7a 	bl	22dca <memset>
   1f8d6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1f8da:	69a2      	ldr	r2, [r4, #24]
   1f8dc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   1f8e0:	4649      	mov	r1, r9
   1f8e2:	4798      	blx	r3
   1f8e4:	2800      	cmp	r0, #0
   1f8e6:	d138      	bne.n	1f95a <mbedtls_ctr_drbg_reseed_internal+0xba>
   1f8e8:	f8d4 8018 	ldr.w	r8, [r4, #24]
   1f8ec:	b13d      	cbz	r5, 1f8fe <mbedtls_ctr_drbg_reseed_internal+0x5e>
   1f8ee:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1f8f2:	462a      	mov	r2, r5
   1f8f4:	eb09 0108 	add.w	r1, r9, r8
   1f8f8:	4798      	blx	r3
   1f8fa:	bb70      	cbnz	r0, 1f95a <mbedtls_ctr_drbg_reseed_internal+0xba>
   1f8fc:	44a8      	add	r8, r5
   1f8fe:	b107      	cbz	r7, 1f902 <mbedtls_ctr_drbg_reseed_internal+0x62>
   1f900:	b9c6      	cbnz	r6, 1f934 <mbedtls_ctr_drbg_reseed_internal+0x94>
   1f902:	4917      	ldr	r1, [pc, #92]	; (1f960 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1f904:	4642      	mov	r2, r8
   1f906:	4608      	mov	r0, r1
   1f908:	f7ff fdce 	bl	1f4a8 <block_cipher_df>
   1f90c:	4605      	mov	r5, r0
   1f90e:	b138      	cbz	r0, 1f920 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1f910:	4813      	ldr	r0, [pc, #76]	; (1f960 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1f912:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1f916:	f7ff fdbd 	bl	1f494 <mbedtls_platform_zeroize>
   1f91a:	4628      	mov	r0, r5
   1f91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f920:	490f      	ldr	r1, [pc, #60]	; (1f960 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1f922:	4620      	mov	r0, r4
   1f924:	f7ff ff18 	bl	1f758 <ctr_drbg_update_internal>
   1f928:	4605      	mov	r5, r0
   1f92a:	2800      	cmp	r0, #0
   1f92c:	d1f0      	bne.n	1f910 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1f92e:	2301      	movs	r3, #1
   1f930:	6123      	str	r3, [r4, #16]
   1f932:	e7ed      	b.n	1f910 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1f934:	eb09 0008 	add.w	r0, r9, r8
   1f938:	4639      	mov	r1, r7
   1f93a:	4632      	mov	r2, r6
   1f93c:	f003 fa3a 	bl	22db4 <memcpy>
   1f940:	4907      	ldr	r1, [pc, #28]	; (1f960 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   1f942:	44b0      	add	r8, r6
   1f944:	4642      	mov	r2, r8
   1f946:	4608      	mov	r0, r1
   1f948:	f7ff fdae 	bl	1f4a8 <block_cipher_df>
   1f94c:	4605      	mov	r5, r0
   1f94e:	2800      	cmp	r0, #0
   1f950:	d1de      	bne.n	1f910 <mbedtls_ctr_drbg_reseed_internal+0x70>
   1f952:	e7e5      	b.n	1f920 <mbedtls_ctr_drbg_reseed_internal+0x80>
   1f954:	f06f 0537 	mvn.w	r5, #55	; 0x37
   1f958:	e7df      	b.n	1f91a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1f95a:	f06f 0533 	mvn.w	r5, #51	; 0x33
   1f95e:	e7dc      	b.n	1f91a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   1f960:	20003df4 	.word	0x20003df4

0001f964 <cc_mbedtls_ctr_drbg_init>:
   1f964:	b510      	push	{r4, lr}
   1f966:	22a4      	movs	r2, #164	; 0xa4
   1f968:	4604      	mov	r4, r0
   1f96a:	2100      	movs	r1, #0
   1f96c:	f003 fa2d 	bl	22dca <memset>
   1f970:	4b06      	ldr	r3, [pc, #24]	; (1f98c <cc_mbedtls_ctr_drbg_init+0x28>)
   1f972:	f04f 31ff 	mov.w	r1, #4294967295
   1f976:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   1f97a:	6121      	str	r1, [r4, #16]
   1f97c:	61e2      	str	r2, [r4, #28]
   1f97e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1f982:	681b      	ldr	r3, [r3, #0]
   1f984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f988:	4718      	bx	r3
   1f98a:	bf00      	nop
   1f98c:	20000934 	.word	0x20000934

0001f990 <cc_mbedtls_ctr_drbg_seed>:
   1f990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f994:	b085      	sub	sp, #20
   1f996:	4605      	mov	r5, r0
   1f998:	460f      	mov	r7, r1
   1f99a:	4616      	mov	r6, r2
   1f99c:	2100      	movs	r1, #0
   1f99e:	2210      	movs	r2, #16
   1f9a0:	4668      	mov	r0, sp
   1f9a2:	4699      	mov	r9, r3
   1f9a4:	f003 fa11 	bl	22dca <memset>
   1f9a8:	4b1e      	ldr	r3, [pc, #120]	; (1fa24 <cc_mbedtls_ctr_drbg_seed+0x94>)
   1f9aa:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   1f9ae:	681b      	ldr	r3, [r3, #0]
   1f9b0:	4640      	mov	r0, r8
   1f9b2:	4798      	blx	r3
   1f9b4:	b120      	cbz	r0, 1f9c0 <cc_mbedtls_ctr_drbg_seed+0x30>
   1f9b6:	4604      	mov	r4, r0
   1f9b8:	4620      	mov	r0, r4
   1f9ba:	b005      	add	sp, #20
   1f9bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f9c0:	f105 0420 	add.w	r4, r5, #32
   1f9c4:	4620      	mov	r0, r4
   1f9c6:	f000 ff51 	bl	2086c <cc_mbedtls_aes_init>
   1f9ca:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   1f9ce:	69ae      	ldr	r6, [r5, #24]
   1f9d0:	692b      	ldr	r3, [r5, #16]
   1f9d2:	b9ee      	cbnz	r6, 1fa10 <cc_mbedtls_ctr_drbg_seed+0x80>
   1f9d4:	2220      	movs	r2, #32
   1f9d6:	2b00      	cmp	r3, #0
   1f9d8:	61aa      	str	r2, [r5, #24]
   1f9da:	db20      	blt.n	1fa1e <cc_mbedtls_ctr_drbg_seed+0x8e>
   1f9dc:	461e      	mov	r6, r3
   1f9de:	4620      	mov	r0, r4
   1f9e0:	4669      	mov	r1, sp
   1f9e2:	2280      	movs	r2, #128	; 0x80
   1f9e4:	f000 ff58 	bl	20898 <cc_mbedtls_aes_setkey_enc>
   1f9e8:	4604      	mov	r4, r0
   1f9ea:	b930      	cbnz	r0, 1f9fa <cc_mbedtls_ctr_drbg_seed+0x6a>
   1f9ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f9ee:	4633      	mov	r3, r6
   1f9f0:	4649      	mov	r1, r9
   1f9f2:	4628      	mov	r0, r5
   1f9f4:	f7ff ff54 	bl	1f8a0 <mbedtls_ctr_drbg_reseed_internal>
   1f9f8:	4604      	mov	r4, r0
   1f9fa:	4b0b      	ldr	r3, [pc, #44]	; (1fa28 <cc_mbedtls_ctr_drbg_seed+0x98>)
   1f9fc:	4640      	mov	r0, r8
   1f9fe:	681b      	ldr	r3, [r3, #0]
   1fa00:	4798      	blx	r3
   1fa02:	2800      	cmp	r0, #0
   1fa04:	bf18      	it	ne
   1fa06:	4604      	movne	r4, r0
   1fa08:	4620      	mov	r0, r4
   1fa0a:	b005      	add	sp, #20
   1fa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fa10:	2b00      	cmp	r3, #0
   1fa12:	dae3      	bge.n	1f9dc <cc_mbedtls_ctr_drbg_seed+0x4c>
   1fa14:	2e17      	cmp	r6, #23
   1fa16:	d802      	bhi.n	1fa1e <cc_mbedtls_ctr_drbg_seed+0x8e>
   1fa18:	3601      	adds	r6, #1
   1fa1a:	0876      	lsrs	r6, r6, #1
   1fa1c:	e7df      	b.n	1f9de <cc_mbedtls_ctr_drbg_seed+0x4e>
   1fa1e:	2600      	movs	r6, #0
   1fa20:	e7dd      	b.n	1f9de <cc_mbedtls_ctr_drbg_seed+0x4e>
   1fa22:	bf00      	nop
   1fa24:	20000938 	.word	0x20000938
   1fa28:	2000093c 	.word	0x2000093c

0001fa2c <cc_mbedtls_ctr_drbg_random_with_add>:
   1fa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa30:	b08d      	sub	sp, #52	; 0x34
   1fa32:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1fa36:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1fa38:	f200 80e3 	bhi.w	1fc02 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   1fa3c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   1fa40:	f200 80dc 	bhi.w	1fbfc <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   1fa44:	4604      	mov	r4, r0
   1fa46:	4615      	mov	r5, r2
   1fa48:	460e      	mov	r6, r1
   1fa4a:	2220      	movs	r2, #32
   1fa4c:	2100      	movs	r1, #0
   1fa4e:	a804      	add	r0, sp, #16
   1fa50:	4698      	mov	r8, r3
   1fa52:	f003 f9ba 	bl	22dca <memset>
   1fa56:	4b6c      	ldr	r3, [pc, #432]	; (1fc08 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   1fa58:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   1fa5c:	681b      	ldr	r3, [r3, #0]
   1fa5e:	4648      	mov	r0, r9
   1fa60:	4798      	blx	r3
   1fa62:	4683      	mov	fp, r0
   1fa64:	2800      	cmp	r0, #0
   1fa66:	f040 8092 	bne.w	1fb8e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1fa6a:	6922      	ldr	r2, [r4, #16]
   1fa6c:	69e3      	ldr	r3, [r4, #28]
   1fa6e:	429a      	cmp	r2, r3
   1fa70:	f300 8091 	bgt.w	1fb96 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1fa74:	6963      	ldr	r3, [r4, #20]
   1fa76:	2b00      	cmp	r3, #0
   1fa78:	f040 808d 	bne.w	1fb96 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   1fa7c:	2f00      	cmp	r7, #0
   1fa7e:	f040 80a9 	bne.w	1fbd4 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   1fa82:	f8df a188 	ldr.w	sl, [pc, #392]	; 1fc0c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1fa86:	466f      	mov	r7, sp
   1fa88:	2d00      	cmp	r5, #0
   1fa8a:	f000 8098 	beq.w	1fbbe <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1fa8e:	f104 0820 	add.w	r8, r4, #32
   1fa92:	466f      	mov	r7, sp
   1fa94:	e00e      	b.n	1fab4 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   1fa96:	2d10      	cmp	r5, #16
   1fa98:	46ab      	mov	fp, r5
   1fa9a:	bf28      	it	cs
   1fa9c:	f04f 0b10 	movcs.w	fp, #16
   1faa0:	4630      	mov	r0, r6
   1faa2:	465a      	mov	r2, fp
   1faa4:	4639      	mov	r1, r7
   1faa6:	f003 f985 	bl	22db4 <memcpy>
   1faaa:	ebb5 050b 	subs.w	r5, r5, fp
   1faae:	445e      	add	r6, fp
   1fab0:	f000 8085 	beq.w	1fbbe <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   1fab4:	7be3      	ldrb	r3, [r4, #15]
   1fab6:	3301      	adds	r3, #1
   1fab8:	b2db      	uxtb	r3, r3
   1faba:	73e3      	strb	r3, [r4, #15]
   1fabc:	2b00      	cmp	r3, #0
   1fabe:	d14d      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fac0:	7ba3      	ldrb	r3, [r4, #14]
   1fac2:	3301      	adds	r3, #1
   1fac4:	b2db      	uxtb	r3, r3
   1fac6:	73a3      	strb	r3, [r4, #14]
   1fac8:	2b00      	cmp	r3, #0
   1faca:	d147      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1facc:	7b63      	ldrb	r3, [r4, #13]
   1face:	3301      	adds	r3, #1
   1fad0:	b2db      	uxtb	r3, r3
   1fad2:	7363      	strb	r3, [r4, #13]
   1fad4:	2b00      	cmp	r3, #0
   1fad6:	d141      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fad8:	7b23      	ldrb	r3, [r4, #12]
   1fada:	3301      	adds	r3, #1
   1fadc:	b2db      	uxtb	r3, r3
   1fade:	7323      	strb	r3, [r4, #12]
   1fae0:	2b00      	cmp	r3, #0
   1fae2:	d13b      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fae4:	7ae3      	ldrb	r3, [r4, #11]
   1fae6:	3301      	adds	r3, #1
   1fae8:	b2db      	uxtb	r3, r3
   1faea:	72e3      	strb	r3, [r4, #11]
   1faec:	2b00      	cmp	r3, #0
   1faee:	d135      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1faf0:	7aa3      	ldrb	r3, [r4, #10]
   1faf2:	3301      	adds	r3, #1
   1faf4:	b2db      	uxtb	r3, r3
   1faf6:	72a3      	strb	r3, [r4, #10]
   1faf8:	2b00      	cmp	r3, #0
   1fafa:	d12f      	bne.n	1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fafc:	7a63      	ldrb	r3, [r4, #9]
   1fafe:	3301      	adds	r3, #1
   1fb00:	b2db      	uxtb	r3, r3
   1fb02:	7263      	strb	r3, [r4, #9]
   1fb04:	bb53      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb06:	7a23      	ldrb	r3, [r4, #8]
   1fb08:	3301      	adds	r3, #1
   1fb0a:	b2db      	uxtb	r3, r3
   1fb0c:	7223      	strb	r3, [r4, #8]
   1fb0e:	bb2b      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb10:	79e3      	ldrb	r3, [r4, #7]
   1fb12:	3301      	adds	r3, #1
   1fb14:	b2db      	uxtb	r3, r3
   1fb16:	71e3      	strb	r3, [r4, #7]
   1fb18:	bb03      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb1a:	79a3      	ldrb	r3, [r4, #6]
   1fb1c:	3301      	adds	r3, #1
   1fb1e:	b2db      	uxtb	r3, r3
   1fb20:	71a3      	strb	r3, [r4, #6]
   1fb22:	b9db      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb24:	7963      	ldrb	r3, [r4, #5]
   1fb26:	3301      	adds	r3, #1
   1fb28:	b2db      	uxtb	r3, r3
   1fb2a:	7163      	strb	r3, [r4, #5]
   1fb2c:	b9b3      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb2e:	7923      	ldrb	r3, [r4, #4]
   1fb30:	3301      	adds	r3, #1
   1fb32:	b2db      	uxtb	r3, r3
   1fb34:	7123      	strb	r3, [r4, #4]
   1fb36:	b98b      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb38:	78e3      	ldrb	r3, [r4, #3]
   1fb3a:	3301      	adds	r3, #1
   1fb3c:	b2db      	uxtb	r3, r3
   1fb3e:	70e3      	strb	r3, [r4, #3]
   1fb40:	b963      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb42:	78a3      	ldrb	r3, [r4, #2]
   1fb44:	3301      	adds	r3, #1
   1fb46:	b2db      	uxtb	r3, r3
   1fb48:	70a3      	strb	r3, [r4, #2]
   1fb4a:	b93b      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb4c:	7863      	ldrb	r3, [r4, #1]
   1fb4e:	3301      	adds	r3, #1
   1fb50:	b2db      	uxtb	r3, r3
   1fb52:	7063      	strb	r3, [r4, #1]
   1fb54:	b913      	cbnz	r3, 1fb5c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   1fb56:	7823      	ldrb	r3, [r4, #0]
   1fb58:	3301      	adds	r3, #1
   1fb5a:	7023      	strb	r3, [r4, #0]
   1fb5c:	463b      	mov	r3, r7
   1fb5e:	4622      	mov	r2, r4
   1fb60:	2101      	movs	r1, #1
   1fb62:	4640      	mov	r0, r8
   1fb64:	f000 feb2 	bl	208cc <cc_mbedtls_aes_crypt_ecb>
   1fb68:	4683      	mov	fp, r0
   1fb6a:	2800      	cmp	r0, #0
   1fb6c:	d093      	beq.n	1fa96 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   1fb6e:	f8da 3000 	ldr.w	r3, [sl]
   1fb72:	4648      	mov	r0, r9
   1fb74:	4798      	blx	r3
   1fb76:	2120      	movs	r1, #32
   1fb78:	4603      	mov	r3, r0
   1fb7a:	a804      	add	r0, sp, #16
   1fb7c:	2b00      	cmp	r3, #0
   1fb7e:	bf18      	it	ne
   1fb80:	469b      	movne	fp, r3
   1fb82:	f7ff fc87 	bl	1f494 <mbedtls_platform_zeroize>
   1fb86:	2110      	movs	r1, #16
   1fb88:	4638      	mov	r0, r7
   1fb8a:	f7ff fc83 	bl	1f494 <mbedtls_platform_zeroize>
   1fb8e:	4658      	mov	r0, fp
   1fb90:	b00d      	add	sp, #52	; 0x34
   1fb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb96:	463a      	mov	r2, r7
   1fb98:	4641      	mov	r1, r8
   1fb9a:	2300      	movs	r3, #0
   1fb9c:	4620      	mov	r0, r4
   1fb9e:	f7ff fe7f 	bl	1f8a0 <mbedtls_ctr_drbg_reseed_internal>
   1fba2:	f8df a068 	ldr.w	sl, [pc, #104]	; 1fc0c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1fba6:	2800      	cmp	r0, #0
   1fba8:	f43f af6d 	beq.w	1fa86 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1fbac:	f8da 3000 	ldr.w	r3, [sl]
   1fbb0:	4648      	mov	r0, r9
   1fbb2:	4798      	blx	r3
   1fbb4:	4683      	mov	fp, r0
   1fbb6:	2800      	cmp	r0, #0
   1fbb8:	f43f af65 	beq.w	1fa86 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   1fbbc:	e7e7      	b.n	1fb8e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1fbbe:	a904      	add	r1, sp, #16
   1fbc0:	4620      	mov	r0, r4
   1fbc2:	f7ff fdc9 	bl	1f758 <ctr_drbg_update_internal>
   1fbc6:	4683      	mov	fp, r0
   1fbc8:	2800      	cmp	r0, #0
   1fbca:	d1d0      	bne.n	1fb6e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1fbcc:	6923      	ldr	r3, [r4, #16]
   1fbce:	3301      	adds	r3, #1
   1fbd0:	6123      	str	r3, [r4, #16]
   1fbd2:	e7cc      	b.n	1fb6e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1fbd4:	463a      	mov	r2, r7
   1fbd6:	4641      	mov	r1, r8
   1fbd8:	a804      	add	r0, sp, #16
   1fbda:	f7ff fc65 	bl	1f4a8 <block_cipher_df>
   1fbde:	4683      	mov	fp, r0
   1fbe0:	b118      	cbz	r0, 1fbea <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   1fbe2:	f8df a028 	ldr.w	sl, [pc, #40]	; 1fc0c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   1fbe6:	466f      	mov	r7, sp
   1fbe8:	e7c1      	b.n	1fb6e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   1fbea:	a904      	add	r1, sp, #16
   1fbec:	4620      	mov	r0, r4
   1fbee:	f7ff fdb3 	bl	1f758 <ctr_drbg_update_internal>
   1fbf2:	4683      	mov	fp, r0
   1fbf4:	2800      	cmp	r0, #0
   1fbf6:	f43f af44 	beq.w	1fa82 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   1fbfa:	e7f2      	b.n	1fbe2 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   1fbfc:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   1fc00:	e7c5      	b.n	1fb8e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1fc02:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   1fc06:	e7c2      	b.n	1fb8e <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   1fc08:	20000938 	.word	0x20000938
   1fc0c:	2000093c 	.word	0x2000093c

0001fc10 <entropy_update>:
   1fc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fc14:	2b20      	cmp	r3, #32
   1fc16:	b08b      	sub	sp, #44	; 0x2c
   1fc18:	461d      	mov	r5, r3
   1fc1a:	4606      	mov	r6, r0
   1fc1c:	4688      	mov	r8, r1
   1fc1e:	4691      	mov	r9, r2
   1fc20:	d826      	bhi.n	1fc70 <entropy_update+0x60>
   1fc22:	b2db      	uxtb	r3, r3
   1fc24:	af02      	add	r7, sp, #8
   1fc26:	f88d 8004 	strb.w	r8, [sp, #4]
   1fc2a:	46b0      	mov	r8, r6
   1fc2c:	f88d 3005 	strb.w	r3, [sp, #5]
   1fc30:	f858 1b04 	ldr.w	r1, [r8], #4
   1fc34:	b921      	cbnz	r1, 1fc40 <entropy_update+0x30>
   1fc36:	4640      	mov	r0, r8
   1fc38:	f000 fe8c 	bl	20954 <cc_mbedtls_sha256_starts>
   1fc3c:	4604      	mov	r4, r0
   1fc3e:	b940      	cbnz	r0, 1fc52 <entropy_update+0x42>
   1fc40:	2301      	movs	r3, #1
   1fc42:	6033      	str	r3, [r6, #0]
   1fc44:	2202      	movs	r2, #2
   1fc46:	a901      	add	r1, sp, #4
   1fc48:	4640      	mov	r0, r8
   1fc4a:	f000 fe97 	bl	2097c <cc_mbedtls_sha256_update>
   1fc4e:	4604      	mov	r4, r0
   1fc50:	b138      	cbz	r0, 1fc62 <entropy_update+0x52>
   1fc52:	4638      	mov	r0, r7
   1fc54:	2120      	movs	r1, #32
   1fc56:	f7ff fc1d 	bl	1f494 <mbedtls_platform_zeroize>
   1fc5a:	4620      	mov	r0, r4
   1fc5c:	b00b      	add	sp, #44	; 0x2c
   1fc5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1fc62:	462a      	mov	r2, r5
   1fc64:	4649      	mov	r1, r9
   1fc66:	4640      	mov	r0, r8
   1fc68:	f000 fe88 	bl	2097c <cc_mbedtls_sha256_update>
   1fc6c:	4604      	mov	r4, r0
   1fc6e:	e7f0      	b.n	1fc52 <entropy_update+0x42>
   1fc70:	af02      	add	r7, sp, #8
   1fc72:	4619      	mov	r1, r3
   1fc74:	4610      	mov	r0, r2
   1fc76:	2300      	movs	r3, #0
   1fc78:	463a      	mov	r2, r7
   1fc7a:	f001 f807 	bl	20c8c <cc_mbedtls_sha256>
   1fc7e:	4604      	mov	r4, r0
   1fc80:	2800      	cmp	r0, #0
   1fc82:	d1e6      	bne.n	1fc52 <entropy_update+0x42>
   1fc84:	2320      	movs	r3, #32
   1fc86:	46b9      	mov	r9, r7
   1fc88:	461d      	mov	r5, r3
   1fc8a:	e7cc      	b.n	1fc26 <entropy_update+0x16>

0001fc8c <entropy_gather_internal.part.0>:
   1fc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc8e:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   1fc92:	b0a7      	sub	sp, #156	; 0x9c
   1fc94:	2b00      	cmp	r3, #0
   1fc96:	bfd8      	it	le
   1fc98:	ae02      	addle	r6, sp, #8
   1fc9a:	dd2c      	ble.n	1fcf6 <entropy_gather_internal.part.0+0x6a>
   1fc9c:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   1fca0:	4605      	mov	r5, r0
   1fca2:	2300      	movs	r3, #0
   1fca4:	ae02      	add	r6, sp, #8
   1fca6:	9301      	str	r3, [sp, #4]
   1fca8:	f1a4 0701 	sub.w	r7, r4, #1
   1fcac:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   1fcb0:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   1fcb4:	ab01      	add	r3, sp, #4
   1fcb6:	2290      	movs	r2, #144	; 0x90
   1fcb8:	4631      	mov	r1, r6
   1fcba:	47a0      	blx	r4
   1fcbc:	fab7 f787 	clz	r7, r7
   1fcc0:	097f      	lsrs	r7, r7, #5
   1fcc2:	4604      	mov	r4, r0
   1fcc4:	b910      	cbnz	r0, 1fccc <entropy_gather_internal.part.0+0x40>
   1fcc6:	9b01      	ldr	r3, [sp, #4]
   1fcc8:	b93b      	cbnz	r3, 1fcda <entropy_gather_internal.part.0+0x4e>
   1fcca:	b1a7      	cbz	r7, 1fcf6 <entropy_gather_internal.part.0+0x6a>
   1fccc:	4630      	mov	r0, r6
   1fcce:	2190      	movs	r1, #144	; 0x90
   1fcd0:	f7ff fbe0 	bl	1f494 <mbedtls_platform_zeroize>
   1fcd4:	4620      	mov	r0, r4
   1fcd6:	b027      	add	sp, #156	; 0x9c
   1fcd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1fcda:	4601      	mov	r1, r0
   1fcdc:	4632      	mov	r2, r6
   1fcde:	4628      	mov	r0, r5
   1fce0:	f7ff ff96 	bl	1fc10 <entropy_update>
   1fce4:	b950      	cbnz	r0, 1fcfc <entropy_gather_internal.part.0+0x70>
   1fce6:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   1fcea:	9a01      	ldr	r2, [sp, #4]
   1fcec:	4413      	add	r3, r2
   1fcee:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   1fcf2:	2f00      	cmp	r7, #0
   1fcf4:	d1ea      	bne.n	1fccc <entropy_gather_internal.part.0+0x40>
   1fcf6:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   1fcfa:	e7e7      	b.n	1fccc <entropy_gather_internal.part.0+0x40>
   1fcfc:	4604      	mov	r4, r0
   1fcfe:	4620      	mov	r0, r4
   1fd00:	b027      	add	sp, #156	; 0x9c
   1fd02:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fd04 <cc_mbedtls_entropy_init>:
   1fd04:	b570      	push	{r4, r5, r6, lr}
   1fd06:	2500      	movs	r5, #0
   1fd08:	4604      	mov	r4, r0
   1fd0a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   1fd0e:	2214      	movs	r2, #20
   1fd10:	4629      	mov	r1, r5
   1fd12:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   1fd16:	30fc      	adds	r0, #252	; 0xfc
   1fd18:	f003 f857 	bl	22dca <memset>
   1fd1c:	2208      	movs	r2, #8
   1fd1e:	4629      	mov	r1, r5
   1fd20:	4630      	mov	r0, r6
   1fd22:	f003 f852 	bl	22dca <memset>
   1fd26:	4b15      	ldr	r3, [pc, #84]	; (1fd7c <cc_mbedtls_entropy_init+0x78>)
   1fd28:	4630      	mov	r0, r6
   1fd2a:	681b      	ldr	r3, [r3, #0]
   1fd2c:	4798      	blx	r3
   1fd2e:	4620      	mov	r0, r4
   1fd30:	f840 5b04 	str.w	r5, [r0], #4
   1fd34:	f000 fdf4 	bl	20920 <cc_mbedtls_sha256_init>
   1fd38:	4b11      	ldr	r3, [pc, #68]	; (1fd80 <cc_mbedtls_entropy_init+0x7c>)
   1fd3a:	4630      	mov	r0, r6
   1fd3c:	681b      	ldr	r3, [r3, #0]
   1fd3e:	4798      	blx	r3
   1fd40:	b9d8      	cbnz	r0, 1fd7a <cc_mbedtls_entropy_init+0x76>
   1fd42:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1fd46:	42ab      	cmp	r3, r5
   1fd48:	dc11      	bgt.n	1fd6e <cc_mbedtls_entropy_init+0x6a>
   1fd4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1fd4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1fd52:	2120      	movs	r1, #32
   1fd54:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   1fd58:	2101      	movs	r1, #1
   1fd5a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   1fd5e:	3301      	adds	r3, #1
   1fd60:	4908      	ldr	r1, [pc, #32]	; (1fd84 <cc_mbedtls_entropy_init+0x80>)
   1fd62:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   1fd66:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   1fd6a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   1fd6e:	4b06      	ldr	r3, [pc, #24]	; (1fd88 <cc_mbedtls_entropy_init+0x84>)
   1fd70:	4630      	mov	r0, r6
   1fd72:	681b      	ldr	r3, [r3, #0]
   1fd74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fd78:	4718      	bx	r3
   1fd7a:	bd70      	pop	{r4, r5, r6, pc}
   1fd7c:	20000934 	.word	0x20000934
   1fd80:	20000938 	.word	0x20000938
   1fd84:	00020771 	.word	0x00020771
   1fd88:	2000093c 	.word	0x2000093c

0001fd8c <cc_mbedtls_entropy_func>:
   1fd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fd90:	2a20      	cmp	r2, #32
   1fd92:	b088      	sub	sp, #32
   1fd94:	d876      	bhi.n	1fe84 <cc_mbedtls_entropy_func+0xf8>
   1fd96:	4b3d      	ldr	r3, [pc, #244]	; (1fe8c <cc_mbedtls_entropy_func+0x100>)
   1fd98:	f500 7988 	add.w	r9, r0, #272	; 0x110
   1fd9c:	681b      	ldr	r3, [r3, #0]
   1fd9e:	4604      	mov	r4, r0
   1fda0:	4648      	mov	r0, r9
   1fda2:	4617      	mov	r7, r2
   1fda4:	4688      	mov	r8, r1
   1fda6:	4798      	blx	r3
   1fda8:	4605      	mov	r5, r0
   1fdaa:	bba0      	cbnz	r0, 1fe16 <cc_mbedtls_entropy_func+0x8a>
   1fdac:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1fdb0:	f240 1601 	movw	r6, #257	; 0x101
   1fdb4:	e001      	b.n	1fdba <cc_mbedtls_entropy_func+0x2e>
   1fdb6:	3e01      	subs	r6, #1
   1fdb8:	d060      	beq.n	1fe7c <cc_mbedtls_entropy_func+0xf0>
   1fdba:	4620      	mov	r0, r4
   1fdbc:	b37b      	cbz	r3, 1fe1e <cc_mbedtls_entropy_func+0x92>
   1fdbe:	f7ff ff65 	bl	1fc8c <entropy_gather_internal.part.0>
   1fdc2:	4605      	mov	r5, r0
   1fdc4:	bb68      	cbnz	r0, 1fe22 <cc_mbedtls_entropy_func+0x96>
   1fdc6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1fdca:	2b00      	cmp	r3, #0
   1fdcc:	ddf3      	ble.n	1fdb6 <cc_mbedtls_entropy_func+0x2a>
   1fdce:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   1fdd2:	4290      	cmp	r0, r2
   1fdd4:	d3ef      	bcc.n	1fdb6 <cc_mbedtls_entropy_func+0x2a>
   1fdd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fdda:	2a01      	cmp	r2, #1
   1fddc:	d1eb      	bne.n	1fdb6 <cc_mbedtls_entropy_func+0x2a>
   1fdde:	281f      	cmp	r0, #31
   1fde0:	d9e9      	bls.n	1fdb6 <cc_mbedtls_entropy_func+0x2a>
   1fde2:	466e      	mov	r6, sp
   1fde4:	4629      	mov	r1, r5
   1fde6:	2220      	movs	r2, #32
   1fde8:	4630      	mov	r0, r6
   1fdea:	f104 0a04 	add.w	sl, r4, #4
   1fdee:	f002 ffec 	bl	22dca <memset>
   1fdf2:	4631      	mov	r1, r6
   1fdf4:	4650      	mov	r0, sl
   1fdf6:	f000 fdeb 	bl	209d0 <cc_mbedtls_sha256_finish>
   1fdfa:	4605      	mov	r5, r0
   1fdfc:	b198      	cbz	r0, 1fe26 <cc_mbedtls_entropy_func+0x9a>
   1fdfe:	2120      	movs	r1, #32
   1fe00:	4630      	mov	r0, r6
   1fe02:	f7ff fb47 	bl	1f494 <mbedtls_platform_zeroize>
   1fe06:	4b22      	ldr	r3, [pc, #136]	; (1fe90 <cc_mbedtls_entropy_func+0x104>)
   1fe08:	4648      	mov	r0, r9
   1fe0a:	681b      	ldr	r3, [r3, #0]
   1fe0c:	4798      	blx	r3
   1fe0e:	2800      	cmp	r0, #0
   1fe10:	bf18      	it	ne
   1fe12:	f06f 051d 	mvnne.w	r5, #29
   1fe16:	4628      	mov	r0, r5
   1fe18:	b008      	add	sp, #32
   1fe1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fe1e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   1fe22:	466e      	mov	r6, sp
   1fe24:	e7eb      	b.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe26:	4650      	mov	r0, sl
   1fe28:	f000 fd8e 	bl	20948 <cc_mbedtls_sha256_free>
   1fe2c:	4650      	mov	r0, sl
   1fe2e:	f000 fd77 	bl	20920 <cc_mbedtls_sha256_init>
   1fe32:	4629      	mov	r1, r5
   1fe34:	4650      	mov	r0, sl
   1fe36:	f000 fd8d 	bl	20954 <cc_mbedtls_sha256_starts>
   1fe3a:	4605      	mov	r5, r0
   1fe3c:	2800      	cmp	r0, #0
   1fe3e:	d1de      	bne.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe40:	4650      	mov	r0, sl
   1fe42:	2220      	movs	r2, #32
   1fe44:	4631      	mov	r1, r6
   1fe46:	f000 fd99 	bl	2097c <cc_mbedtls_sha256_update>
   1fe4a:	4605      	mov	r5, r0
   1fe4c:	2800      	cmp	r0, #0
   1fe4e:	d1d6      	bne.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe50:	4603      	mov	r3, r0
   1fe52:	4632      	mov	r2, r6
   1fe54:	2120      	movs	r1, #32
   1fe56:	4630      	mov	r0, r6
   1fe58:	f000 ff18 	bl	20c8c <cc_mbedtls_sha256>
   1fe5c:	4605      	mov	r5, r0
   1fe5e:	2800      	cmp	r0, #0
   1fe60:	d1cd      	bne.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe62:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1fe66:	2b00      	cmp	r3, #0
   1fe68:	bfc4      	itt	gt
   1fe6a:	2300      	movgt	r3, #0
   1fe6c:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   1fe70:	463a      	mov	r2, r7
   1fe72:	4640      	mov	r0, r8
   1fe74:	4631      	mov	r1, r6
   1fe76:	f002 ff9d 	bl	22db4 <memcpy>
   1fe7a:	e7c0      	b.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe7c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1fe80:	466e      	mov	r6, sp
   1fe82:	e7bc      	b.n	1fdfe <cc_mbedtls_entropy_func+0x72>
   1fe84:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   1fe88:	e7c5      	b.n	1fe16 <cc_mbedtls_entropy_func+0x8a>
   1fe8a:	bf00      	nop
   1fe8c:	20000938 	.word	0x20000938
   1fe90:	2000093c 	.word	0x2000093c

0001fe94 <RndStartupTest.constprop.0>:
   1fe94:	b530      	push	{r4, r5, lr}
   1fe96:	b08d      	sub	sp, #52	; 0x34
   1fe98:	2100      	movs	r1, #0
   1fe9a:	2228      	movs	r2, #40	; 0x28
   1fe9c:	a802      	add	r0, sp, #8
   1fe9e:	9101      	str	r1, [sp, #4]
   1fea0:	f002 ff93 	bl	22dca <memset>
   1fea4:	a802      	add	r0, sp, #8
   1fea6:	f000 ff19 	bl	20cdc <RNG_PLAT_SetUserRngParameters>
   1feaa:	4604      	mov	r4, r0
   1feac:	b110      	cbz	r0, 1feb4 <RndStartupTest.constprop.0+0x20>
   1feae:	4620      	mov	r0, r4
   1feb0:	b00d      	add	sp, #52	; 0x34
   1feb2:	bd30      	pop	{r4, r5, pc}
   1feb4:	4d18      	ldr	r5, [pc, #96]	; (1ff18 <RndStartupTest.constprop.0+0x84>)
   1feb6:	f04f 31ff 	mov.w	r1, #4294967295
   1feba:	6828      	ldr	r0, [r5, #0]
   1febc:	f000 f946 	bl	2014c <CC_PalMutexLock>
   1fec0:	4604      	mov	r4, r0
   1fec2:	b9c0      	cbnz	r0, 1fef6 <RndStartupTest.constprop.0+0x62>
   1fec4:	2000      	movs	r0, #0
   1fec6:	f000 f971 	bl	201ac <CC_PalPowerSaveModeSelect>
   1feca:	bb00      	cbnz	r0, 1ff0e <RndStartupTest.constprop.0+0x7a>
   1fecc:	4a13      	ldr	r2, [pc, #76]	; (1ff1c <RndStartupTest.constprop.0+0x88>)
   1fece:	a902      	add	r1, sp, #8
   1fed0:	a801      	add	r0, sp, #4
   1fed2:	f000 fc3f 	bl	20754 <LLF_RND_RunTrngStartupTest>
   1fed6:	4604      	mov	r4, r0
   1fed8:	2001      	movs	r0, #1
   1feda:	f000 f967 	bl	201ac <CC_PalPowerSaveModeSelect>
   1fede:	b990      	cbnz	r0, 1ff06 <RndStartupTest.constprop.0+0x72>
   1fee0:	6828      	ldr	r0, [r5, #0]
   1fee2:	f000 f93b 	bl	2015c <CC_PalMutexUnlock>
   1fee6:	2800      	cmp	r0, #0
   1fee8:	d0e1      	beq.n	1feae <RndStartupTest.constprop.0+0x1a>
   1feea:	480d      	ldr	r0, [pc, #52]	; (1ff20 <RndStartupTest.constprop.0+0x8c>)
   1feec:	f7ff f9b2 	bl	1f254 <CC_PalAbort>
   1fef0:	4620      	mov	r0, r4
   1fef2:	b00d      	add	sp, #52	; 0x34
   1fef4:	bd30      	pop	{r4, r5, pc}
   1fef6:	480b      	ldr	r0, [pc, #44]	; (1ff24 <RndStartupTest.constprop.0+0x90>)
   1fef8:	f7ff f9ac 	bl	1f254 <CC_PalAbort>
   1fefc:	2c01      	cmp	r4, #1
   1fefe:	bf08      	it	eq
   1ff00:	2405      	moveq	r4, #5
   1ff02:	d0ed      	beq.n	1fee0 <RndStartupTest.constprop.0+0x4c>
   1ff04:	e7de      	b.n	1fec4 <RndStartupTest.constprop.0+0x30>
   1ff06:	4808      	ldr	r0, [pc, #32]	; (1ff28 <RndStartupTest.constprop.0+0x94>)
   1ff08:	f7ff f9a4 	bl	1f254 <CC_PalAbort>
   1ff0c:	e7e8      	b.n	1fee0 <RndStartupTest.constprop.0+0x4c>
   1ff0e:	4807      	ldr	r0, [pc, #28]	; (1ff2c <RndStartupTest.constprop.0+0x98>)
   1ff10:	f7ff f9a0 	bl	1f254 <CC_PalAbort>
   1ff14:	e7da      	b.n	1fecc <RndStartupTest.constprop.0+0x38>
   1ff16:	bf00      	nop
   1ff18:	20000930 	.word	0x20000930
   1ff1c:	20003fe0 	.word	0x20003fe0
   1ff20:	000268d4 	.word	0x000268d4
   1ff24:	0002687c 	.word	0x0002687c
   1ff28:	000268b4 	.word	0x000268b4
   1ff2c:	00026894 	.word	0x00026894

0001ff30 <CC_LibInit>:
   1ff30:	b530      	push	{r4, r5, lr}
   1ff32:	b083      	sub	sp, #12
   1ff34:	f000 f85c 	bl	1fff0 <CC_HalInit>
   1ff38:	b128      	cbz	r0, 1ff46 <CC_LibInit+0x16>
   1ff3a:	f000 f8ab 	bl	20094 <CC_PalTerminate>
   1ff3e:	2403      	movs	r4, #3
   1ff40:	4620      	mov	r0, r4
   1ff42:	b003      	add	sp, #12
   1ff44:	bd30      	pop	{r4, r5, pc}
   1ff46:	f000 f877 	bl	20038 <CC_PalInit>
   1ff4a:	b9d8      	cbnz	r0, 1ff84 <CC_LibInit+0x54>
   1ff4c:	f000 f92e 	bl	201ac <CC_PalPowerSaveModeSelect>
   1ff50:	b9e0      	cbnz	r0, 1ff8c <CC_LibInit+0x5c>
   1ff52:	4c22      	ldr	r4, [pc, #136]	; (1ffdc <CC_LibInit+0xac>)
   1ff54:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   1ff58:	0e1b      	lsrs	r3, r3, #24
   1ff5a:	2bf0      	cmp	r3, #240	; 0xf0
   1ff5c:	d10a      	bne.n	1ff74 <CC_LibInit+0x44>
   1ff5e:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   1ff62:	4b1f      	ldr	r3, [pc, #124]	; (1ffe0 <CC_LibInit+0xb0>)
   1ff64:	429a      	cmp	r2, r3
   1ff66:	d031      	beq.n	1ffcc <CC_LibInit+0x9c>
   1ff68:	f000 f844 	bl	1fff4 <CC_HalTerminate>
   1ff6c:	2407      	movs	r4, #7
   1ff6e:	f000 f891 	bl	20094 <CC_PalTerminate>
   1ff72:	e7e5      	b.n	1ff40 <CC_LibInit+0x10>
   1ff74:	f000 f83e 	bl	1fff4 <CC_HalTerminate>
   1ff78:	f000 f88c 	bl	20094 <CC_PalTerminate>
   1ff7c:	2406      	movs	r4, #6
   1ff7e:	4620      	mov	r0, r4
   1ff80:	b003      	add	sp, #12
   1ff82:	bd30      	pop	{r4, r5, pc}
   1ff84:	2404      	movs	r4, #4
   1ff86:	4620      	mov	r0, r4
   1ff88:	b003      	add	sp, #12
   1ff8a:	bd30      	pop	{r4, r5, pc}
   1ff8c:	f000 f832 	bl	1fff4 <CC_HalTerminate>
   1ff90:	f000 f880 	bl	20094 <CC_PalTerminate>
   1ff94:	f7ff ff7e 	bl	1fe94 <RndStartupTest.constprop.0>
   1ff98:	4604      	mov	r4, r0
   1ff9a:	b998      	cbnz	r0, 1ffc4 <CC_LibInit+0x94>
   1ff9c:	4d11      	ldr	r5, [pc, #68]	; (1ffe4 <CC_LibInit+0xb4>)
   1ff9e:	682b      	ldr	r3, [r5, #0]
   1ffa0:	2b00      	cmp	r3, #0
   1ffa2:	d1cd      	bne.n	1ff40 <CC_LibInit+0x10>
   1ffa4:	4602      	mov	r2, r0
   1ffa6:	4601      	mov	r1, r0
   1ffa8:	f7ff f976 	bl	1f298 <nrf_cc3xx_platform_ctr_drbg_init>
   1ffac:	b950      	cbnz	r0, 1ffc4 <CC_LibInit+0x94>
   1ffae:	490e      	ldr	r1, [pc, #56]	; (1ffe8 <CC_LibInit+0xb8>)
   1ffb0:	ab01      	add	r3, sp, #4
   1ffb2:	2268      	movs	r2, #104	; 0x68
   1ffb4:	f7ff f9a2 	bl	1f2fc <nrf_cc3xx_platform_ctr_drbg_get>
   1ffb8:	b920      	cbnz	r0, 1ffc4 <CC_LibInit+0x94>
   1ffba:	4b0c      	ldr	r3, [pc, #48]	; (1ffec <CC_LibInit+0xbc>)
   1ffbc:	602b      	str	r3, [r5, #0]
   1ffbe:	4620      	mov	r0, r4
   1ffc0:	b003      	add	sp, #12
   1ffc2:	bd30      	pop	{r4, r5, pc}
   1ffc4:	2405      	movs	r4, #5
   1ffc6:	4620      	mov	r0, r4
   1ffc8:	b003      	add	sp, #12
   1ffca:	bd30      	pop	{r4, r5, pc}
   1ffcc:	2001      	movs	r0, #1
   1ffce:	f000 f8ed 	bl	201ac <CC_PalPowerSaveModeSelect>
   1ffd2:	2800      	cmp	r0, #0
   1ffd4:	d1da      	bne.n	1ff8c <CC_LibInit+0x5c>
   1ffd6:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   1ffda:	e7db      	b.n	1ff94 <CC_LibInit+0x64>
   1ffdc:	5002b000 	.word	0x5002b000
   1ffe0:	20e00000 	.word	0x20e00000
   1ffe4:	20003fdc 	.word	0x20003fdc
   1ffe8:	20003f74 	.word	0x20003f74
   1ffec:	5a5aea5a 	.word	0x5a5aea5a

0001fff0 <CC_HalInit>:
   1fff0:	2000      	movs	r0, #0
   1fff2:	4770      	bx	lr

0001fff4 <CC_HalTerminate>:
   1fff4:	2000      	movs	r0, #0
   1fff6:	4770      	bx	lr

0001fff8 <CC_HalClearInterruptBit>:
   1fff8:	0543      	lsls	r3, r0, #21
   1fffa:	d504      	bpl.n	20006 <CC_HalClearInterruptBit+0xe>
   1fffc:	4b04      	ldr	r3, [pc, #16]	; (20010 <CC_HalClearInterruptBit+0x18>)
   1fffe:	f04f 32ff 	mov.w	r2, #4294967295
   20002:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   20006:	4b02      	ldr	r3, [pc, #8]	; (20010 <CC_HalClearInterruptBit+0x18>)
   20008:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   2000c:	4770      	bx	lr
   2000e:	bf00      	nop
   20010:	5002b000 	.word	0x5002b000

00020014 <CC_HalMaskInterrupt>:
   20014:	4b01      	ldr	r3, [pc, #4]	; (2001c <CC_HalMaskInterrupt+0x8>)
   20016:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   2001a:	4770      	bx	lr
   2001c:	5002b000 	.word	0x5002b000

00020020 <CC_HalWaitInterrupt>:
   20020:	b108      	cbz	r0, 20026 <CC_HalWaitInterrupt+0x6>
   20022:	f000 b86b 	b.w	200fc <CC_PalWaitInterrupt>
   20026:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2002a:	4770      	bx	lr

0002002c <CC_HalWaitInterruptRND>:
   2002c:	b108      	cbz	r0, 20032 <CC_HalWaitInterruptRND+0x6>
   2002e:	f000 b84f 	b.w	200d0 <CC_PalWaitInterruptRND>
   20032:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   20036:	4770      	bx	lr

00020038 <CC_PalInit>:
   20038:	b510      	push	{r4, lr}
   2003a:	4811      	ldr	r0, [pc, #68]	; (20080 <CC_PalInit+0x48>)
   2003c:	f000 f872 	bl	20124 <CC_PalMutexCreate>
   20040:	b100      	cbz	r0, 20044 <CC_PalInit+0xc>
   20042:	bd10      	pop	{r4, pc}
   20044:	480f      	ldr	r0, [pc, #60]	; (20084 <CC_PalInit+0x4c>)
   20046:	f000 f86d 	bl	20124 <CC_PalMutexCreate>
   2004a:	2800      	cmp	r0, #0
   2004c:	d1f9      	bne.n	20042 <CC_PalInit+0xa>
   2004e:	4c0e      	ldr	r4, [pc, #56]	; (20088 <CC_PalInit+0x50>)
   20050:	4620      	mov	r0, r4
   20052:	f000 f867 	bl	20124 <CC_PalMutexCreate>
   20056:	2800      	cmp	r0, #0
   20058:	d1f3      	bne.n	20042 <CC_PalInit+0xa>
   2005a:	4b0c      	ldr	r3, [pc, #48]	; (2008c <CC_PalInit+0x54>)
   2005c:	480c      	ldr	r0, [pc, #48]	; (20090 <CC_PalInit+0x58>)
   2005e:	601c      	str	r4, [r3, #0]
   20060:	f000 f860 	bl	20124 <CC_PalMutexCreate>
   20064:	4601      	mov	r1, r0
   20066:	2800      	cmp	r0, #0
   20068:	d1eb      	bne.n	20042 <CC_PalInit+0xa>
   2006a:	f000 f82d 	bl	200c8 <CC_PalDmaInit>
   2006e:	4604      	mov	r4, r0
   20070:	b108      	cbz	r0, 20076 <CC_PalInit+0x3e>
   20072:	4620      	mov	r0, r4
   20074:	bd10      	pop	{r4, pc}
   20076:	f000 f87b 	bl	20170 <CC_PalPowerSaveModeInit>
   2007a:	4620      	mov	r0, r4
   2007c:	e7fa      	b.n	20074 <CC_PalInit+0x3c>
   2007e:	bf00      	nop
   20080:	2000092c 	.word	0x2000092c
   20084:	20000920 	.word	0x20000920
   20088:	20000928 	.word	0x20000928
   2008c:	20000930 	.word	0x20000930
   20090:	20000924 	.word	0x20000924

00020094 <CC_PalTerminate>:
   20094:	b508      	push	{r3, lr}
   20096:	4808      	ldr	r0, [pc, #32]	; (200b8 <CC_PalTerminate+0x24>)
   20098:	f000 f84e 	bl	20138 <CC_PalMutexDestroy>
   2009c:	4807      	ldr	r0, [pc, #28]	; (200bc <CC_PalTerminate+0x28>)
   2009e:	f000 f84b 	bl	20138 <CC_PalMutexDestroy>
   200a2:	4807      	ldr	r0, [pc, #28]	; (200c0 <CC_PalTerminate+0x2c>)
   200a4:	f000 f848 	bl	20138 <CC_PalMutexDestroy>
   200a8:	4806      	ldr	r0, [pc, #24]	; (200c4 <CC_PalTerminate+0x30>)
   200aa:	f000 f845 	bl	20138 <CC_PalMutexDestroy>
   200ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   200b2:	f000 b80b 	b.w	200cc <CC_PalDmaTerminate>
   200b6:	bf00      	nop
   200b8:	2000092c 	.word	0x2000092c
   200bc:	20000920 	.word	0x20000920
   200c0:	20000928 	.word	0x20000928
   200c4:	20000924 	.word	0x20000924

000200c8 <CC_PalDmaInit>:
   200c8:	2000      	movs	r0, #0
   200ca:	4770      	bx	lr

000200cc <CC_PalDmaTerminate>:
   200cc:	4770      	bx	lr
   200ce:	bf00      	nop

000200d0 <CC_PalWaitInterruptRND>:
   200d0:	b410      	push	{r4}
   200d2:	4c09      	ldr	r4, [pc, #36]	; (200f8 <CC_PalWaitInterruptRND+0x28>)
   200d4:	4602      	mov	r2, r0
   200d6:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   200da:	4213      	tst	r3, r2
   200dc:	d0fb      	beq.n	200d6 <CC_PalWaitInterruptRND+0x6>
   200de:	b121      	cbz	r1, 200ea <CC_PalWaitInterruptRND+0x1a>
   200e0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   200e4:	600b      	str	r3, [r1, #0]
   200e6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   200ea:	4b03      	ldr	r3, [pc, #12]	; (200f8 <CC_PalWaitInterruptRND+0x28>)
   200ec:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   200f0:	2000      	movs	r0, #0
   200f2:	bc10      	pop	{r4}
   200f4:	4770      	bx	lr
   200f6:	bf00      	nop
   200f8:	5002b000 	.word	0x5002b000

000200fc <CC_PalWaitInterrupt>:
   200fc:	4a04      	ldr	r2, [pc, #16]	; (20110 <CC_PalWaitInterrupt+0x14>)
   200fe:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   20102:	4218      	tst	r0, r3
   20104:	d0fb      	beq.n	200fe <CC_PalWaitInterrupt+0x2>
   20106:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   2010a:	2000      	movs	r0, #0
   2010c:	4770      	bx	lr
   2010e:	bf00      	nop
   20110:	5002b000 	.word	0x5002b000

00020114 <CC_PalMemCopyPlat>:
   20114:	f002 be37 	b.w	22d86 <memmove>

00020118 <CC_PalMemSetPlat>:
   20118:	f002 be57 	b.w	22dca <memset>

0002011c <CC_PalMemSetZeroPlat>:
   2011c:	460a      	mov	r2, r1
   2011e:	2100      	movs	r1, #0
   20120:	f002 be53 	b.w	22dca <memset>

00020124 <CC_PalMutexCreate>:
   20124:	b508      	push	{r3, lr}
   20126:	4b03      	ldr	r3, [pc, #12]	; (20134 <CC_PalMutexCreate+0x10>)
   20128:	6802      	ldr	r2, [r0, #0]
   2012a:	681b      	ldr	r3, [r3, #0]
   2012c:	6810      	ldr	r0, [r2, #0]
   2012e:	4798      	blx	r3
   20130:	2000      	movs	r0, #0
   20132:	bd08      	pop	{r3, pc}
   20134:	200008e0 	.word	0x200008e0

00020138 <CC_PalMutexDestroy>:
   20138:	b508      	push	{r3, lr}
   2013a:	4b03      	ldr	r3, [pc, #12]	; (20148 <CC_PalMutexDestroy+0x10>)
   2013c:	6802      	ldr	r2, [r0, #0]
   2013e:	685b      	ldr	r3, [r3, #4]
   20140:	6810      	ldr	r0, [r2, #0]
   20142:	4798      	blx	r3
   20144:	2000      	movs	r0, #0
   20146:	bd08      	pop	{r3, pc}
   20148:	200008e0 	.word	0x200008e0

0002014c <CC_PalMutexLock>:
   2014c:	4b02      	ldr	r3, [pc, #8]	; (20158 <CC_PalMutexLock+0xc>)
   2014e:	6802      	ldr	r2, [r0, #0]
   20150:	689b      	ldr	r3, [r3, #8]
   20152:	6810      	ldr	r0, [r2, #0]
   20154:	4718      	bx	r3
   20156:	bf00      	nop
   20158:	200008e0 	.word	0x200008e0

0002015c <CC_PalMutexUnlock>:
   2015c:	b508      	push	{r3, lr}
   2015e:	4b03      	ldr	r3, [pc, #12]	; (2016c <CC_PalMutexUnlock+0x10>)
   20160:	6802      	ldr	r2, [r0, #0]
   20162:	68db      	ldr	r3, [r3, #12]
   20164:	6810      	ldr	r0, [r2, #0]
   20166:	4798      	blx	r3
   20168:	2000      	movs	r0, #0
   2016a:	bd08      	pop	{r3, pc}
   2016c:	200008e0 	.word	0x200008e0

00020170 <CC_PalPowerSaveModeInit>:
   20170:	b570      	push	{r4, r5, r6, lr}
   20172:	4c09      	ldr	r4, [pc, #36]	; (20198 <CC_PalPowerSaveModeInit+0x28>)
   20174:	4d09      	ldr	r5, [pc, #36]	; (2019c <CC_PalPowerSaveModeInit+0x2c>)
   20176:	6920      	ldr	r0, [r4, #16]
   20178:	68ab      	ldr	r3, [r5, #8]
   2017a:	4798      	blx	r3
   2017c:	b118      	cbz	r0, 20186 <CC_PalPowerSaveModeInit+0x16>
   2017e:	4b08      	ldr	r3, [pc, #32]	; (201a0 <CC_PalPowerSaveModeInit+0x30>)
   20180:	4808      	ldr	r0, [pc, #32]	; (201a4 <CC_PalPowerSaveModeInit+0x34>)
   20182:	685b      	ldr	r3, [r3, #4]
   20184:	4798      	blx	r3
   20186:	4a08      	ldr	r2, [pc, #32]	; (201a8 <CC_PalPowerSaveModeInit+0x38>)
   20188:	68eb      	ldr	r3, [r5, #12]
   2018a:	6920      	ldr	r0, [r4, #16]
   2018c:	2100      	movs	r1, #0
   2018e:	6011      	str	r1, [r2, #0]
   20190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20194:	4718      	bx	r3
   20196:	bf00      	nop
   20198:	200008f0 	.word	0x200008f0
   2019c:	200008e0 	.word	0x200008e0
   201a0:	200008d0 	.word	0x200008d0
   201a4:	000268ec 	.word	0x000268ec
   201a8:	20004200 	.word	0x20004200

000201ac <CC_PalPowerSaveModeSelect>:
   201ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   201ae:	4d1a      	ldr	r5, [pc, #104]	; (20218 <CC_PalPowerSaveModeSelect+0x6c>)
   201b0:	4e1a      	ldr	r6, [pc, #104]	; (2021c <CC_PalPowerSaveModeSelect+0x70>)
   201b2:	4604      	mov	r4, r0
   201b4:	68b2      	ldr	r2, [r6, #8]
   201b6:	6928      	ldr	r0, [r5, #16]
   201b8:	4790      	blx	r2
   201ba:	b9e8      	cbnz	r0, 201f8 <CC_PalPowerSaveModeSelect+0x4c>
   201bc:	4f18      	ldr	r7, [pc, #96]	; (20220 <CC_PalPowerSaveModeSelect+0x74>)
   201be:	683b      	ldr	r3, [r7, #0]
   201c0:	b14c      	cbz	r4, 201d6 <CC_PalPowerSaveModeSelect+0x2a>
   201c2:	b1a3      	cbz	r3, 201ee <CC_PalPowerSaveModeSelect+0x42>
   201c4:	2b01      	cmp	r3, #1
   201c6:	d019      	beq.n	201fc <CC_PalPowerSaveModeSelect+0x50>
   201c8:	3b01      	subs	r3, #1
   201ca:	603b      	str	r3, [r7, #0]
   201cc:	6928      	ldr	r0, [r5, #16]
   201ce:	68f3      	ldr	r3, [r6, #12]
   201d0:	4798      	blx	r3
   201d2:	2000      	movs	r0, #0
   201d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   201d6:	b943      	cbnz	r3, 201ea <CC_PalPowerSaveModeSelect+0x3e>
   201d8:	4a12      	ldr	r2, [pc, #72]	; (20224 <CC_PalPowerSaveModeSelect+0x78>)
   201da:	2101      	movs	r1, #1
   201dc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   201e0:	4911      	ldr	r1, [pc, #68]	; (20228 <CC_PalPowerSaveModeSelect+0x7c>)
   201e2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   201e6:	2a00      	cmp	r2, #0
   201e8:	d1fb      	bne.n	201e2 <CC_PalPowerSaveModeSelect+0x36>
   201ea:	3301      	adds	r3, #1
   201ec:	603b      	str	r3, [r7, #0]
   201ee:	68f3      	ldr	r3, [r6, #12]
   201f0:	6928      	ldr	r0, [r5, #16]
   201f2:	4798      	blx	r3
   201f4:	2000      	movs	r0, #0
   201f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   201f8:	480c      	ldr	r0, [pc, #48]	; (2022c <CC_PalPowerSaveModeSelect+0x80>)
   201fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   201fc:	4a0a      	ldr	r2, [pc, #40]	; (20228 <CC_PalPowerSaveModeSelect+0x7c>)
   201fe:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   20202:	2b00      	cmp	r3, #0
   20204:	d1fb      	bne.n	201fe <CC_PalPowerSaveModeSelect+0x52>
   20206:	4a07      	ldr	r2, [pc, #28]	; (20224 <CC_PalPowerSaveModeSelect+0x78>)
   20208:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   2020c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   20210:	f7ff ff00 	bl	20014 <CC_HalMaskInterrupt>
   20214:	683b      	ldr	r3, [r7, #0]
   20216:	e7d7      	b.n	201c8 <CC_PalPowerSaveModeSelect+0x1c>
   20218:	200008f0 	.word	0x200008f0
   2021c:	200008e0 	.word	0x200008e0
   20220:	20004200 	.word	0x20004200
   20224:	5002a000 	.word	0x5002a000
   20228:	5002b000 	.word	0x5002b000
   2022c:	ffff8fe9 	.word	0xffff8fe9

00020230 <mutex_init>:
   20230:	4b01      	ldr	r3, [pc, #4]	; (20238 <mutex_init+0x8>)
   20232:	681b      	ldr	r3, [r3, #0]
   20234:	4718      	bx	r3
   20236:	bf00      	nop
   20238:	200008e0 	.word	0x200008e0

0002023c <mutex_lock>:
   2023c:	4b01      	ldr	r3, [pc, #4]	; (20244 <mutex_lock+0x8>)
   2023e:	689b      	ldr	r3, [r3, #8]
   20240:	4718      	bx	r3
   20242:	bf00      	nop
   20244:	200008e0 	.word	0x200008e0

00020248 <mutex_unlock>:
   20248:	4b01      	ldr	r3, [pc, #4]	; (20250 <mutex_unlock+0x8>)
   2024a:	68db      	ldr	r3, [r3, #12]
   2024c:	4718      	bx	r3
   2024e:	bf00      	nop
   20250:	200008e0 	.word	0x200008e0

00020254 <startTrngHW>:
   20254:	2800      	cmp	r0, #0
   20256:	f000 8084 	beq.w	20362 <startTrngHW+0x10e>
   2025a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2025e:	460c      	mov	r4, r1
   20260:	b083      	sub	sp, #12
   20262:	2900      	cmp	r1, #0
   20264:	d078      	beq.n	20358 <startTrngHW+0x104>
   20266:	461d      	mov	r5, r3
   20268:	2b00      	cmp	r3, #0
   2026a:	d075      	beq.n	20358 <startTrngHW+0x104>
   2026c:	4607      	mov	r7, r0
   2026e:	b11a      	cbz	r2, 20278 <startTrngHW+0x24>
   20270:	2201      	movs	r2, #1
   20272:	2300      	movs	r3, #0
   20274:	602a      	str	r2, [r5, #0]
   20276:	6003      	str	r3, [r0, #0]
   20278:	682b      	ldr	r3, [r5, #0]
   2027a:	2b00      	cmp	r3, #0
   2027c:	d067      	beq.n	2034e <startTrngHW+0xfa>
   2027e:	4629      	mov	r1, r5
   20280:	4620      	mov	r0, r4
   20282:	f000 fde9 	bl	20e58 <LLF_RND_GetFastestRosc>
   20286:	4603      	mov	r3, r0
   20288:	2800      	cmp	r0, #0
   2028a:	d161      	bne.n	20350 <startTrngHW+0xfc>
   2028c:	6828      	ldr	r0, [r5, #0]
   2028e:	4621      	mov	r1, r4
   20290:	f000 fdc4 	bl	20e1c <LLF_RND_GetRoscSampleCnt>
   20294:	4603      	mov	r3, r0
   20296:	2800      	cmp	r0, #0
   20298:	d15a      	bne.n	20350 <startTrngHW+0xfc>
   2029a:	682a      	ldr	r2, [r5, #0]
   2029c:	2a08      	cmp	r2, #8
   2029e:	d072      	beq.n	20386 <startTrngHW+0x132>
   202a0:	2a04      	cmp	r2, #4
   202a2:	d073      	beq.n	2038c <startTrngHW+0x138>
   202a4:	f1a2 0802 	sub.w	r8, r2, #2
   202a8:	fab8 f888 	clz	r8, r8
   202ac:	ea4f 1858 	mov.w	r8, r8, lsr #5
   202b0:	4e38      	ldr	r6, [pc, #224]	; (20394 <startTrngHW+0x140>)
   202b2:	2001      	movs	r0, #1
   202b4:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   202b8:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   202bc:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   202c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   202c2:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   202c6:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   202ca:	428a      	cmp	r2, r1
   202cc:	d1f6      	bne.n	202bc <startTrngHW+0x68>
   202ce:	f04f 0900 	mov.w	r9, #0
   202d2:	9301      	str	r3, [sp, #4]
   202d4:	f04f 30ff 	mov.w	r0, #4294967295
   202d8:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   202dc:	f7ff fe8c 	bl	1fff8 <CC_HalClearInterruptBit>
   202e0:	f06f 021b 	mvn.w	r2, #27
   202e4:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   202e8:	4648      	mov	r0, r9
   202ea:	f7ff fe93 	bl	20014 <CC_HalMaskInterrupt>
   202ee:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   202f2:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   202f6:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   202fa:	f7ff fe8b 	bl	20014 <CC_HalMaskInterrupt>
   202fe:	220a      	movs	r2, #10
   20300:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   20304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20306:	2b01      	cmp	r3, #1
   20308:	9b01      	ldr	r3, [sp, #4]
   2030a:	d02d      	beq.n	20368 <startTrngHW+0x114>
   2030c:	6922      	ldr	r2, [r4, #16]
   2030e:	4922      	ldr	r1, [pc, #136]	; (20398 <startTrngHW+0x144>)
   20310:	fba1 1202 	umull	r1, r2, r1, r2
   20314:	0912      	lsrs	r2, r2, #4
   20316:	6a61      	ldr	r1, [r4, #36]	; 0x24
   20318:	fb01 f202 	mul.w	r2, r1, r2
   2031c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   20320:	491c      	ldr	r1, [pc, #112]	; (20394 <startTrngHW+0x140>)
   20322:	03d2      	lsls	r2, r2, #15
   20324:	0992      	lsrs	r2, r2, #6
   20326:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   2032a:	2201      	movs	r2, #1
   2032c:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   20330:	683a      	ldr	r2, [r7, #0]
   20332:	6829      	ldr	r1, [r5, #0]
   20334:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   20338:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   2033c:	603a      	str	r2, [r7, #0]
   2033e:	6829      	ldr	r1, [r5, #0]
   20340:	4618      	mov	r0, r3
   20342:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   20346:	603a      	str	r2, [r7, #0]
   20348:	b003      	add	sp, #12
   2034a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2034e:	4b13      	ldr	r3, [pc, #76]	; (2039c <startTrngHW+0x148>)
   20350:	4618      	mov	r0, r3
   20352:	b003      	add	sp, #12
   20354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20358:	4b11      	ldr	r3, [pc, #68]	; (203a0 <startTrngHW+0x14c>)
   2035a:	4618      	mov	r0, r3
   2035c:	b003      	add	sp, #12
   2035e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20362:	4b0f      	ldr	r3, [pc, #60]	; (203a0 <startTrngHW+0x14c>)
   20364:	4618      	mov	r0, r3
   20366:	4770      	bx	lr
   20368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2036c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   20370:	3101      	adds	r1, #1
   20372:	d006      	beq.n	20382 <startTrngHW+0x12e>
   20374:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   20378:	4907      	ldr	r1, [pc, #28]	; (20398 <startTrngHW+0x144>)
   2037a:	fba1 1202 	umull	r1, r2, r1, r2
   2037e:	0912      	lsrs	r2, r2, #4
   20380:	e7c9      	b.n	20316 <startTrngHW+0xc2>
   20382:	2216      	movs	r2, #22
   20384:	e7c7      	b.n	20316 <startTrngHW+0xc2>
   20386:	f04f 0803 	mov.w	r8, #3
   2038a:	e791      	b.n	202b0 <startTrngHW+0x5c>
   2038c:	f04f 0802 	mov.w	r8, #2
   20390:	e78e      	b.n	202b0 <startTrngHW+0x5c>
   20392:	bf00      	nop
   20394:	5002b000 	.word	0x5002b000
   20398:	aaaaaaab 	.word	0xaaaaaaab
   2039c:	00f10c31 	.word	0x00f10c31
   203a0:	00f10c35 	.word	0x00f10c35

000203a4 <LLF_RND_RepetitionCounterTest.part.0>:
   203a4:	b570      	push	{r4, r5, r6, lr}
   203a6:	00c9      	lsls	r1, r1, #3
   203a8:	2400      	movs	r4, #0
   203aa:	1e4e      	subs	r6, r1, #1
   203ac:	f04f 0c01 	mov.w	ip, #1
   203b0:	4625      	mov	r5, r4
   203b2:	46a6      	mov	lr, r4
   203b4:	e008      	b.n	203c8 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   203b6:	459e      	cmp	lr, r3
   203b8:	d015      	beq.n	203e6 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   203ba:	2501      	movs	r5, #1
   203bc:	45b4      	cmp	ip, r6
   203be:	d817      	bhi.n	203f0 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   203c0:	3401      	adds	r4, #1
   203c2:	f10c 0c01 	add.w	ip, ip, #1
   203c6:	469e      	mov	lr, r3
   203c8:	0963      	lsrs	r3, r4, #5
   203ca:	f004 011f 	and.w	r1, r4, #31
   203ce:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   203d2:	291f      	cmp	r1, #31
   203d4:	fa23 f301 	lsr.w	r3, r3, r1
   203d8:	bf18      	it	ne
   203da:	f003 0301 	andne.w	r3, r3, #1
   203de:	2c00      	cmp	r4, #0
   203e0:	d1e9      	bne.n	203b6 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   203e2:	2501      	movs	r5, #1
   203e4:	e7ec      	b.n	203c0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   203e6:	3501      	adds	r5, #1
   203e8:	4295      	cmp	r5, r2
   203ea:	d1e7      	bne.n	203bc <LLF_RND_RepetitionCounterTest.part.0+0x18>
   203ec:	4801      	ldr	r0, [pc, #4]	; (203f4 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   203ee:	bd70      	pop	{r4, r5, r6, pc}
   203f0:	2000      	movs	r0, #0
   203f2:	bd70      	pop	{r4, r5, r6, pc}
   203f4:	00f10c36 	.word	0x00f10c36

000203f8 <LLF_RND_AdaptiveProportionTest>:
   203f8:	2800      	cmp	r0, #0
   203fa:	d03f      	beq.n	2047c <LLF_RND_AdaptiveProportionTest+0x84>
   203fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20400:	1e4c      	subs	r4, r1, #1
   20402:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   20406:	d228      	bcs.n	2045a <LLF_RND_AdaptiveProportionTest+0x62>
   20408:	b33b      	cbz	r3, 2045a <LLF_RND_AdaptiveProportionTest+0x62>
   2040a:	b332      	cbz	r2, 2045a <LLF_RND_AdaptiveProportionTest+0x62>
   2040c:	f04f 0e00 	mov.w	lr, #0
   20410:	00cf      	lsls	r7, r1, #3
   20412:	4676      	mov	r6, lr
   20414:	4675      	mov	r5, lr
   20416:	4674      	mov	r4, lr
   20418:	f103 38ff 	add.w	r8, r3, #4294967295
   2041c:	0961      	lsrs	r1, r4, #5
   2041e:	f004 0c1f 	and.w	ip, r4, #31
   20422:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   20426:	f1bc 0f1f 	cmp.w	ip, #31
   2042a:	fa21 f10c 	lsr.w	r1, r1, ip
   2042e:	bf18      	it	ne
   20430:	f001 0101 	andne.w	r1, r1, #1
   20434:	b1a4      	cbz	r4, 20460 <LLF_RND_AdaptiveProportionTest+0x68>
   20436:	42ab      	cmp	r3, r5
   20438:	d018      	beq.n	2046c <LLF_RND_AdaptiveProportionTest+0x74>
   2043a:	428e      	cmp	r6, r1
   2043c:	bf08      	it	eq
   2043e:	f10e 0e01 	addeq.w	lr, lr, #1
   20442:	45a8      	cmp	r8, r5
   20444:	d015      	beq.n	20472 <LLF_RND_AdaptiveProportionTest+0x7a>
   20446:	3501      	adds	r5, #1
   20448:	4631      	mov	r1, r6
   2044a:	3401      	adds	r4, #1
   2044c:	42bc      	cmp	r4, r7
   2044e:	d001      	beq.n	20454 <LLF_RND_AdaptiveProportionTest+0x5c>
   20450:	460e      	mov	r6, r1
   20452:	e7e3      	b.n	2041c <LLF_RND_AdaptiveProportionTest+0x24>
   20454:	2000      	movs	r0, #0
   20456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2045a:	4809      	ldr	r0, [pc, #36]	; (20480 <LLF_RND_AdaptiveProportionTest+0x88>)
   2045c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20460:	f04f 0e01 	mov.w	lr, #1
   20464:	4674      	mov	r4, lr
   20466:	4675      	mov	r5, lr
   20468:	460e      	mov	r6, r1
   2046a:	e7d7      	b.n	2041c <LLF_RND_AdaptiveProportionTest+0x24>
   2046c:	2501      	movs	r5, #1
   2046e:	46ae      	mov	lr, r5
   20470:	e7eb      	b.n	2044a <LLF_RND_AdaptiveProportionTest+0x52>
   20472:	4572      	cmp	r2, lr
   20474:	d3f1      	bcc.n	2045a <LLF_RND_AdaptiveProportionTest+0x62>
   20476:	4631      	mov	r1, r6
   20478:	461d      	mov	r5, r3
   2047a:	e7e6      	b.n	2044a <LLF_RND_AdaptiveProportionTest+0x52>
   2047c:	4800      	ldr	r0, [pc, #0]	; (20480 <LLF_RND_AdaptiveProportionTest+0x88>)
   2047e:	4770      	bx	lr
   20480:	00f10c37 	.word	0x00f10c37

00020484 <getTrngSource>:
   20484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20488:	b091      	sub	sp, #68	; 0x44
   2048a:	460d      	mov	r5, r1
   2048c:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   20490:	4681      	mov	r9, r0
   20492:	2900      	cmp	r1, #0
   20494:	d14c      	bne.n	20530 <getTrngSource+0xac>
   20496:	6928      	ldr	r0, [r5, #16]
   20498:	9006      	str	r0, [sp, #24]
   2049a:	981a      	ldr	r0, [sp, #104]	; 0x68
   2049c:	601c      	str	r4, [r3, #0]
   2049e:	2300      	movs	r3, #0
   204a0:	6003      	str	r3, [r0, #0]
   204a2:	2a00      	cmp	r2, #0
   204a4:	f000 8124 	beq.w	206f0 <getTrngSource+0x26c>
   204a8:	4b9d      	ldr	r3, [pc, #628]	; (20720 <getTrngSource+0x29c>)
   204aa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   204ac:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   204b0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   204b4:	429a      	cmp	r2, r3
   204b6:	d147      	bne.n	20548 <getTrngSource+0xc4>
   204b8:	290a      	cmp	r1, #10
   204ba:	d145      	bne.n	20548 <getTrngSource+0xc4>
   204bc:	f899 3003 	ldrb.w	r3, [r9, #3]
   204c0:	9308      	str	r3, [sp, #32]
   204c2:	f104 0308 	add.w	r3, r4, #8
   204c6:	9a06      	ldr	r2, [sp, #24]
   204c8:	9307      	str	r3, [sp, #28]
   204ca:	4b96      	ldr	r3, [pc, #600]	; (20724 <getTrngSource+0x2a0>)
   204cc:	4c94      	ldr	r4, [pc, #592]	; (20720 <getTrngSource+0x29c>)
   204ce:	fba3 1302 	umull	r1, r3, r3, r2
   204d2:	089b      	lsrs	r3, r3, #2
   204d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   204d8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   204dc:	9303      	str	r3, [sp, #12]
   204de:	2304      	movs	r3, #4
   204e0:	9305      	str	r3, [sp, #20]
   204e2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   204e4:	9e06      	ldr	r6, [sp, #24]
   204e6:	601e      	str	r6, [r3, #0]
   204e8:	2e00      	cmp	r6, #0
   204ea:	d033      	beq.n	20554 <getTrngSource+0xd0>
   204ec:	f8dd 801c 	ldr.w	r8, [sp, #28]
   204f0:	2700      	movs	r7, #0
   204f2:	f04f 0a01 	mov.w	sl, #1
   204f6:	f000 fcbf 	bl	20e78 <LLF_RND_TurnOffTrng>
   204fa:	2300      	movs	r3, #0
   204fc:	9309      	str	r3, [sp, #36]	; 0x24
   204fe:	f1b9 0f00 	cmp.w	r9, #0
   20502:	f000 80df 	beq.w	206c4 <getTrngSource+0x240>
   20506:	2d00      	cmp	r5, #0
   20508:	f000 80dc 	beq.w	206c4 <getTrngSource+0x240>
   2050c:	9b08      	ldr	r3, [sp, #32]
   2050e:	b1eb      	cbz	r3, 2054c <getTrngSource+0xc8>
   20510:	a908      	add	r1, sp, #32
   20512:	4628      	mov	r0, r5
   20514:	f000 fca0 	bl	20e58 <LLF_RND_GetFastestRosc>
   20518:	2800      	cmp	r0, #0
   2051a:	d03e      	beq.n	2059a <getTrngSource+0x116>
   2051c:	4b82      	ldr	r3, [pc, #520]	; (20728 <getTrngSource+0x2a4>)
   2051e:	4298      	cmp	r0, r3
   20520:	d118      	bne.n	20554 <getTrngSource+0xd0>
   20522:	9003      	str	r0, [sp, #12]
   20524:	f000 fca8 	bl	20e78 <LLF_RND_TurnOffTrng>
   20528:	9803      	ldr	r0, [sp, #12]
   2052a:	b011      	add	sp, #68	; 0x44
   2052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20530:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   20534:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   20538:	3601      	adds	r6, #1
   2053a:	bf14      	ite	ne
   2053c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   20540:	f44f 7004 	moveq.w	r0, #528	; 0x210
   20544:	9006      	str	r0, [sp, #24]
   20546:	e7a8      	b.n	2049a <getTrngSource+0x16>
   20548:	4878      	ldr	r0, [pc, #480]	; (2072c <getTrngSource+0x2a8>)
   2054a:	e7ea      	b.n	20522 <getTrngSource+0x9e>
   2054c:	4878      	ldr	r0, [pc, #480]	; (20730 <getTrngSource+0x2ac>)
   2054e:	4b76      	ldr	r3, [pc, #472]	; (20728 <getTrngSource+0x2a4>)
   20550:	4298      	cmp	r0, r3
   20552:	d0e6      	beq.n	20522 <getTrngSource+0x9e>
   20554:	9b08      	ldr	r3, [sp, #32]
   20556:	2b08      	cmp	r3, #8
   20558:	f000 80c8 	beq.w	206ec <getTrngSource+0x268>
   2055c:	005b      	lsls	r3, r3, #1
   2055e:	2200      	movs	r2, #0
   20560:	9308      	str	r3, [sp, #32]
   20562:	9200      	str	r2, [sp, #0]
   20564:	ab08      	add	r3, sp, #32
   20566:	4629      	mov	r1, r5
   20568:	4648      	mov	r0, r9
   2056a:	f7ff fe73 	bl	20254 <startTrngHW>
   2056e:	4b70      	ldr	r3, [pc, #448]	; (20730 <getTrngSource+0x2ac>)
   20570:	4298      	cmp	r0, r3
   20572:	f000 80b7 	beq.w	206e4 <getTrngSource+0x260>
   20576:	2800      	cmp	r0, #0
   20578:	d1d3      	bne.n	20522 <getTrngSource+0x9e>
   2057a:	f8d9 2000 	ldr.w	r2, [r9]
   2057e:	0a13      	lsrs	r3, r2, #8
   20580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   20584:	4313      	orrs	r3, r2
   20586:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2058a:	f8c9 3000 	str.w	r3, [r9]
   2058e:	9b05      	ldr	r3, [sp, #20]
   20590:	3b01      	subs	r3, #1
   20592:	9305      	str	r3, [sp, #20]
   20594:	d1a5      	bne.n	204e2 <getTrngSource+0x5e>
   20596:	2000      	movs	r0, #0
   20598:	e7c3      	b.n	20522 <getTrngSource+0x9e>
   2059a:	9808      	ldr	r0, [sp, #32]
   2059c:	4629      	mov	r1, r5
   2059e:	f000 fc3d 	bl	20e1c <LLF_RND_GetRoscSampleCnt>
   205a2:	2800      	cmp	r0, #0
   205a4:	d1ba      	bne.n	2051c <getTrngSource+0x98>
   205a6:	9b08      	ldr	r3, [sp, #32]
   205a8:	2b08      	cmp	r3, #8
   205aa:	f000 8095 	beq.w	206d8 <getTrngSource+0x254>
   205ae:	2b04      	cmp	r3, #4
   205b0:	f000 8095 	beq.w	206de <getTrngSource+0x25a>
   205b4:	f1a3 0302 	sub.w	r3, r3, #2
   205b8:	fab3 f383 	clz	r3, r3
   205bc:	095b      	lsrs	r3, r3, #5
   205be:	9304      	str	r3, [sp, #16]
   205c0:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   205c4:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   205c8:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   205cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   205ce:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   205d2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   205d6:	4293      	cmp	r3, r2
   205d8:	d1f6      	bne.n	205c8 <getTrngSource+0x144>
   205da:	f04f 0b00 	mov.w	fp, #0
   205de:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   205e2:	f04f 30ff 	mov.w	r0, #4294967295
   205e6:	f7ff fd07 	bl	1fff8 <CC_HalClearInterruptBit>
   205ea:	f06f 031b 	mvn.w	r3, #27
   205ee:	4658      	mov	r0, fp
   205f0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   205f4:	f7ff fd0e 	bl	20014 <CC_HalMaskInterrupt>
   205f8:	9b04      	ldr	r3, [sp, #16]
   205fa:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   205fe:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   20602:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   20606:	f7ff fd05 	bl	20014 <CC_HalMaskInterrupt>
   2060a:	230a      	movs	r3, #10
   2060c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   20610:	692b      	ldr	r3, [r5, #16]
   20612:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   20616:	fbab 2303 	umull	r2, r3, fp, r3
   2061a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2061c:	091b      	lsrs	r3, r3, #4
   2061e:	fb02 f303 	mul.w	r3, r2, r3
   20622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20626:	03db      	lsls	r3, r3, #15
   20628:	099b      	lsrs	r3, r3, #6
   2062a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2062e:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   20632:	9908      	ldr	r1, [sp, #32]
   20634:	f8d9 2000 	ldr.w	r2, [r9]
   20638:	020b      	lsls	r3, r1, #8
   2063a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2063e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   20642:	4313      	orrs	r3, r2
   20644:	f8c9 3000 	str.w	r3, [r9]
   20648:	a809      	add	r0, sp, #36	; 0x24
   2064a:	f000 fbd7 	bl	20dfc <LLF_RND_WaitRngInterrupt>
   2064e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20650:	f003 031a 	and.w	r3, r3, #26
   20654:	4303      	orrs	r3, r0
   20656:	f47f af7d 	bne.w	20554 <getTrngSource+0xd0>
   2065a:	fbab 3b06 	umull	r3, fp, fp, r6
   2065e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   20662:	930a      	str	r3, [sp, #40]	; 0x28
   20664:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   20668:	930b      	str	r3, [sp, #44]	; 0x2c
   2066a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2066e:	930c      	str	r3, [sp, #48]	; 0x30
   20670:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   20674:	930d      	str	r3, [sp, #52]	; 0x34
   20676:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2067a:	930e      	str	r3, [sp, #56]	; 0x38
   2067c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20680:	930f      	str	r3, [sp, #60]	; 0x3c
   20682:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   20686:	d101      	bne.n	2068c <getTrngSource+0x208>
   20688:	9b03      	ldr	r3, [sp, #12]
   2068a:	b9eb      	cbnz	r3, 206c8 <getTrngSource+0x244>
   2068c:	4640      	mov	r0, r8
   2068e:	2218      	movs	r2, #24
   20690:	a90a      	add	r1, sp, #40	; 0x28
   20692:	3e18      	subs	r6, #24
   20694:	f108 0818 	add.w	r8, r8, #24
   20698:	f7ff fd3c 	bl	20114 <CC_PalMemCopyPlat>
   2069c:	3701      	adds	r7, #1
   2069e:	2e00      	cmp	r6, #0
   206a0:	f47f af29 	bne.w	204f6 <getTrngSource+0x72>
   206a4:	9b06      	ldr	r3, [sp, #24]
   206a6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   206aa:	d836      	bhi.n	2071a <getTrngSource+0x296>
   206ac:	9e07      	ldr	r6, [sp, #28]
   206ae:	696a      	ldr	r2, [r5, #20]
   206b0:	4619      	mov	r1, r3
   206b2:	4630      	mov	r0, r6
   206b4:	461f      	mov	r7, r3
   206b6:	f7ff fe75 	bl	203a4 <LLF_RND_RepetitionCounterTest.part.0>
   206ba:	b320      	cbz	r0, 20706 <getTrngSource+0x282>
   206bc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   206be:	2300      	movs	r3, #0
   206c0:	6013      	str	r3, [r2, #0]
   206c2:	e72b      	b.n	2051c <getTrngSource+0x98>
   206c4:	481b      	ldr	r0, [pc, #108]	; (20734 <getTrngSource+0x2b0>)
   206c6:	e729      	b.n	2051c <getTrngSource+0x98>
   206c8:	4640      	mov	r0, r8
   206ca:	461a      	mov	r2, r3
   206cc:	a90a      	add	r1, sp, #40	; 0x28
   206ce:	1af6      	subs	r6, r6, r3
   206d0:	4498      	add	r8, r3
   206d2:	f7ff fd1f 	bl	20114 <CC_PalMemCopyPlat>
   206d6:	e7e1      	b.n	2069c <getTrngSource+0x218>
   206d8:	2303      	movs	r3, #3
   206da:	9304      	str	r3, [sp, #16]
   206dc:	e770      	b.n	205c0 <getTrngSource+0x13c>
   206de:	2302      	movs	r3, #2
   206e0:	9304      	str	r3, [sp, #16]
   206e2:	e76d      	b.n	205c0 <getTrngSource+0x13c>
   206e4:	6a2b      	ldr	r3, [r5, #32]
   206e6:	2b00      	cmp	r3, #0
   206e8:	f43f af1b 	beq.w	20522 <getTrngSource+0x9e>
   206ec:	4812      	ldr	r0, [pc, #72]	; (20738 <getTrngSource+0x2b4>)
   206ee:	e718      	b.n	20522 <getTrngSource+0x9e>
   206f0:	9100      	str	r1, [sp, #0]
   206f2:	ab08      	add	r3, sp, #32
   206f4:	2201      	movs	r2, #1
   206f6:	4629      	mov	r1, r5
   206f8:	4648      	mov	r0, r9
   206fa:	f7ff fdab 	bl	20254 <startTrngHW>
   206fe:	2800      	cmp	r0, #0
   20700:	f43f aedf 	beq.w	204c2 <getTrngSource+0x3e>
   20704:	e70d      	b.n	20522 <getTrngSource+0x9e>
   20706:	69aa      	ldr	r2, [r5, #24]
   20708:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2070c:	4639      	mov	r1, r7
   2070e:	4630      	mov	r0, r6
   20710:	f7ff fe72 	bl	203f8 <LLF_RND_AdaptiveProportionTest>
   20714:	2800      	cmp	r0, #0
   20716:	d1d1      	bne.n	206bc <getTrngSource+0x238>
   20718:	e73d      	b.n	20596 <getTrngSource+0x112>
   2071a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2071c:	601e      	str	r6, [r3, #0]
   2071e:	e719      	b.n	20554 <getTrngSource+0xd0>
   20720:	5002b000 	.word	0x5002b000
   20724:	aaaaaaab 	.word	0xaaaaaaab
   20728:	00f10c02 	.word	0x00f10c02
   2072c:	00f10c30 	.word	0x00f10c30
   20730:	00f10c31 	.word	0x00f10c31
   20734:	00f10c35 	.word	0x00f10c35
   20738:	00f10c32 	.word	0x00f10c32

0002073c <LLF_RND_GetTrngSource>:
   2073c:	b410      	push	{r4}
   2073e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   20742:	9401      	str	r4, [sp, #4]
   20744:	9c03      	ldr	r4, [sp, #12]
   20746:	9402      	str	r4, [sp, #8]
   20748:	2400      	movs	r4, #0
   2074a:	9403      	str	r4, [sp, #12]
   2074c:	bc10      	pop	{r4}
   2074e:	f7ff be99 	b.w	20484 <getTrngSource>
   20752:	bf00      	nop

00020754 <LLF_RND_RunTrngStartupTest>:
   20754:	b510      	push	{r4, lr}
   20756:	b086      	sub	sp, #24
   20758:	ab05      	add	r3, sp, #20
   2075a:	2401      	movs	r4, #1
   2075c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   20760:	9300      	str	r3, [sp, #0]
   20762:	2200      	movs	r2, #0
   20764:	ab04      	add	r3, sp, #16
   20766:	f7ff fe8d 	bl	20484 <getTrngSource>
   2076a:	b006      	add	sp, #24
   2076c:	bd10      	pop	{r4, pc}
   2076e:	bf00      	nop

00020770 <mbedtls_hardware_poll>:
   20770:	b5f0      	push	{r4, r5, r6, r7, lr}
   20772:	b089      	sub	sp, #36	; 0x24
   20774:	9205      	str	r2, [sp, #20]
   20776:	2900      	cmp	r1, #0
   20778:	d064      	beq.n	20844 <mbedtls_hardware_poll+0xd4>
   2077a:	461c      	mov	r4, r3
   2077c:	2b00      	cmp	r3, #0
   2077e:	d061      	beq.n	20844 <mbedtls_hardware_poll+0xd4>
   20780:	4615      	mov	r5, r2
   20782:	2a00      	cmp	r2, #0
   20784:	d05e      	beq.n	20844 <mbedtls_hardware_poll+0xd4>
   20786:	4f31      	ldr	r7, [pc, #196]	; (2084c <mbedtls_hardware_poll+0xdc>)
   20788:	460e      	mov	r6, r1
   2078a:	6838      	ldr	r0, [r7, #0]
   2078c:	f04f 31ff 	mov.w	r1, #4294967295
   20790:	f7ff fcdc 	bl	2014c <CC_PalMutexLock>
   20794:	2800      	cmp	r0, #0
   20796:	d14b      	bne.n	20830 <mbedtls_hardware_poll+0xc0>
   20798:	2000      	movs	r0, #0
   2079a:	f7ff fd07 	bl	201ac <CC_PalPowerSaveModeSelect>
   2079e:	2800      	cmp	r0, #0
   207a0:	d142      	bne.n	20828 <mbedtls_hardware_poll+0xb8>
   207a2:	482b      	ldr	r0, [pc, #172]	; (20850 <mbedtls_hardware_poll+0xe0>)
   207a4:	f000 fa9a 	bl	20cdc <RNG_PLAT_SetUserRngParameters>
   207a8:	b1d8      	cbz	r0, 207e2 <mbedtls_hardware_poll+0x72>
   207aa:	2001      	movs	r0, #1
   207ac:	f04f 36ff 	mov.w	r6, #4294967295
   207b0:	f7ff fcfc 	bl	201ac <CC_PalPowerSaveModeSelect>
   207b4:	2800      	cmp	r0, #0
   207b6:	d133      	bne.n	20820 <mbedtls_hardware_poll+0xb0>
   207b8:	4826      	ldr	r0, [pc, #152]	; (20854 <mbedtls_hardware_poll+0xe4>)
   207ba:	f44f 7108 	mov.w	r1, #544	; 0x220
   207be:	f7fe fe5f 	bl	1f480 <mbedtls_zeroize_internal>
   207c2:	4825      	ldr	r0, [pc, #148]	; (20858 <mbedtls_hardware_poll+0xe8>)
   207c4:	2104      	movs	r1, #4
   207c6:	f7fe fe5b 	bl	1f480 <mbedtls_zeroize_internal>
   207ca:	4821      	ldr	r0, [pc, #132]	; (20850 <mbedtls_hardware_poll+0xe0>)
   207cc:	2128      	movs	r1, #40	; 0x28
   207ce:	f7fe fe57 	bl	1f480 <mbedtls_zeroize_internal>
   207d2:	6838      	ldr	r0, [r7, #0]
   207d4:	f7ff fcc2 	bl	2015c <CC_PalMutexUnlock>
   207d8:	2800      	cmp	r0, #0
   207da:	d12d      	bne.n	20838 <mbedtls_hardware_poll+0xc8>
   207dc:	4630      	mov	r0, r6
   207de:	b009      	add	sp, #36	; 0x24
   207e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   207e2:	4b1c      	ldr	r3, [pc, #112]	; (20854 <mbedtls_hardware_poll+0xe4>)
   207e4:	9302      	str	r3, [sp, #8]
   207e6:	ab07      	add	r3, sp, #28
   207e8:	9003      	str	r0, [sp, #12]
   207ea:	4602      	mov	r2, r0
   207ec:	9300      	str	r3, [sp, #0]
   207ee:	4918      	ldr	r1, [pc, #96]	; (20850 <mbedtls_hardware_poll+0xe0>)
   207f0:	4819      	ldr	r0, [pc, #100]	; (20858 <mbedtls_hardware_poll+0xe8>)
   207f2:	9401      	str	r4, [sp, #4]
   207f4:	ab05      	add	r3, sp, #20
   207f6:	f7ff ffa1 	bl	2073c <LLF_RND_GetTrngSource>
   207fa:	4603      	mov	r3, r0
   207fc:	2800      	cmp	r0, #0
   207fe:	d1d4      	bne.n	207aa <mbedtls_hardware_poll+0x3a>
   20800:	6822      	ldr	r2, [r4, #0]
   20802:	42aa      	cmp	r2, r5
   20804:	d3d1      	bcc.n	207aa <mbedtls_hardware_poll+0x3a>
   20806:	9907      	ldr	r1, [sp, #28]
   20808:	4630      	mov	r0, r6
   2080a:	3108      	adds	r1, #8
   2080c:	462a      	mov	r2, r5
   2080e:	461e      	mov	r6, r3
   20810:	f7ff fc80 	bl	20114 <CC_PalMemCopyPlat>
   20814:	6025      	str	r5, [r4, #0]
   20816:	2001      	movs	r0, #1
   20818:	f7ff fcc8 	bl	201ac <CC_PalPowerSaveModeSelect>
   2081c:	2800      	cmp	r0, #0
   2081e:	d0cb      	beq.n	207b8 <mbedtls_hardware_poll+0x48>
   20820:	480e      	ldr	r0, [pc, #56]	; (2085c <mbedtls_hardware_poll+0xec>)
   20822:	f7fe fd17 	bl	1f254 <CC_PalAbort>
   20826:	e7c7      	b.n	207b8 <mbedtls_hardware_poll+0x48>
   20828:	480d      	ldr	r0, [pc, #52]	; (20860 <mbedtls_hardware_poll+0xf0>)
   2082a:	f7fe fd13 	bl	1f254 <CC_PalAbort>
   2082e:	e7b8      	b.n	207a2 <mbedtls_hardware_poll+0x32>
   20830:	480c      	ldr	r0, [pc, #48]	; (20864 <mbedtls_hardware_poll+0xf4>)
   20832:	f7fe fd0f 	bl	1f254 <CC_PalAbort>
   20836:	e7af      	b.n	20798 <mbedtls_hardware_poll+0x28>
   20838:	480b      	ldr	r0, [pc, #44]	; (20868 <mbedtls_hardware_poll+0xf8>)
   2083a:	f7fe fd0b 	bl	1f254 <CC_PalAbort>
   2083e:	4630      	mov	r0, r6
   20840:	b009      	add	sp, #36	; 0x24
   20842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20844:	f04f 36ff 	mov.w	r6, #4294967295
   20848:	e7c8      	b.n	207dc <mbedtls_hardware_poll+0x6c>
   2084a:	bf00      	nop
   2084c:	20000930 	.word	0x20000930
   20850:	20004428 	.word	0x20004428
   20854:	20004208 	.word	0x20004208
   20858:	20004204 	.word	0x20004204
   2085c:	000268b4 	.word	0x000268b4
   20860:	00026894 	.word	0x00026894
   20864:	0002687c 	.word	0x0002687c
   20868:	0002690c 	.word	0x0002690c

0002086c <cc_mbedtls_aes_init>:
   2086c:	b510      	push	{r4, lr}
   2086e:	4604      	mov	r4, r0
   20870:	b130      	cbz	r0, 20880 <cc_mbedtls_aes_init+0x14>
   20872:	2200      	movs	r2, #0
   20874:	2301      	movs	r3, #1
   20876:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2087a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2087e:	bd10      	pop	{r4, pc}
   20880:	4801      	ldr	r0, [pc, #4]	; (20888 <cc_mbedtls_aes_init+0x1c>)
   20882:	f7fe fce7 	bl	1f254 <CC_PalAbort>
   20886:	e7f4      	b.n	20872 <cc_mbedtls_aes_init+0x6>
   20888:	00026924 	.word	0x00026924

0002088c <cc_mbedtls_aes_free>:
   2088c:	b118      	cbz	r0, 20896 <cc_mbedtls_aes_free+0xa>
   2088e:	2274      	movs	r2, #116	; 0x74
   20890:	2100      	movs	r1, #0
   20892:	f7ff bc41 	b.w	20118 <CC_PalMemSetPlat>
   20896:	4770      	bx	lr

00020898 <cc_mbedtls_aes_setkey_enc>:
   20898:	b190      	cbz	r0, 208c0 <cc_mbedtls_aes_setkey_enc+0x28>
   2089a:	b1a1      	cbz	r1, 208c6 <cc_mbedtls_aes_setkey_enc+0x2e>
   2089c:	b510      	push	{r4, lr}
   2089e:	2a80      	cmp	r2, #128	; 0x80
   208a0:	f04f 0400 	mov.w	r4, #0
   208a4:	6384      	str	r4, [r0, #56]	; 0x38
   208a6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   208aa:	d106      	bne.n	208ba <cc_mbedtls_aes_setkey_enc+0x22>
   208ac:	2210      	movs	r2, #16
   208ae:	6304      	str	r4, [r0, #48]	; 0x30
   208b0:	4410      	add	r0, r2
   208b2:	f7ff fc2f 	bl	20114 <CC_PalMemCopyPlat>
   208b6:	4620      	mov	r0, r4
   208b8:	bd10      	pop	{r4, pc}
   208ba:	f06f 001f 	mvn.w	r0, #31
   208be:	bd10      	pop	{r4, pc}
   208c0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   208c4:	4770      	bx	lr
   208c6:	f06f 001f 	mvn.w	r0, #31
   208ca:	4770      	bx	lr

000208cc <cc_mbedtls_aes_crypt_ecb>:
   208cc:	b328      	cbz	r0, 2091a <cc_mbedtls_aes_crypt_ecb+0x4e>
   208ce:	b322      	cbz	r2, 2091a <cc_mbedtls_aes_crypt_ecb+0x4e>
   208d0:	b31b      	cbz	r3, 2091a <cc_mbedtls_aes_crypt_ecb+0x4e>
   208d2:	2901      	cmp	r1, #1
   208d4:	d821      	bhi.n	2091a <cc_mbedtls_aes_crypt_ecb+0x4e>
   208d6:	b570      	push	{r4, r5, r6, lr}
   208d8:	4604      	mov	r4, r0
   208da:	6b81      	ldr	r1, [r0, #56]	; 0x38
   208dc:	b086      	sub	sp, #24
   208de:	d017      	beq.n	20910 <cc_mbedtls_aes_crypt_ecb+0x44>
   208e0:	2901      	cmp	r1, #1
   208e2:	d117      	bne.n	20914 <cc_mbedtls_aes_crypt_ecb+0x48>
   208e4:	2510      	movs	r5, #16
   208e6:	2100      	movs	r1, #0
   208e8:	eb0d 0605 	add.w	r6, sp, r5
   208ec:	6361      	str	r1, [r4, #52]	; 0x34
   208ee:	4610      	mov	r0, r2
   208f0:	9500      	str	r5, [sp, #0]
   208f2:	9601      	str	r6, [sp, #4]
   208f4:	aa02      	add	r2, sp, #8
   208f6:	4629      	mov	r1, r5
   208f8:	f000 faca 	bl	20e90 <SetDataBuffersInfo>
   208fc:	b950      	cbnz	r0, 20914 <cc_mbedtls_aes_crypt_ecb+0x48>
   208fe:	462b      	mov	r3, r5
   20900:	4632      	mov	r2, r6
   20902:	a902      	add	r1, sp, #8
   20904:	4620      	mov	r0, r4
   20906:	f000 fd4b 	bl	213a0 <ProcessAesDrv>
   2090a:	b918      	cbnz	r0, 20914 <cc_mbedtls_aes_crypt_ecb+0x48>
   2090c:	b006      	add	sp, #24
   2090e:	bd70      	pop	{r4, r5, r6, pc}
   20910:	2900      	cmp	r1, #0
   20912:	d0e7      	beq.n	208e4 <cc_mbedtls_aes_crypt_ecb+0x18>
   20914:	f06f 0021 	mvn.w	r0, #33	; 0x21
   20918:	e7f8      	b.n	2090c <cc_mbedtls_aes_crypt_ecb+0x40>
   2091a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2091e:	4770      	bx	lr

00020920 <cc_mbedtls_sha256_init>:
   20920:	b510      	push	{r4, lr}
   20922:	4604      	mov	r4, r0
   20924:	b128      	cbz	r0, 20932 <cc_mbedtls_sha256_init+0x12>
   20926:	4620      	mov	r0, r4
   20928:	21f4      	movs	r1, #244	; 0xf4
   2092a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2092e:	f7ff bbf5 	b.w	2011c <CC_PalMemSetZeroPlat>
   20932:	4804      	ldr	r0, [pc, #16]	; (20944 <cc_mbedtls_sha256_init+0x24>)
   20934:	f7fe fc8e 	bl	1f254 <CC_PalAbort>
   20938:	4620      	mov	r0, r4
   2093a:	21f4      	movs	r1, #244	; 0xf4
   2093c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20940:	f7ff bbec 	b.w	2011c <CC_PalMemSetZeroPlat>
   20944:	00026938 	.word	0x00026938

00020948 <cc_mbedtls_sha256_free>:
   20948:	b110      	cbz	r0, 20950 <cc_mbedtls_sha256_free+0x8>
   2094a:	21f4      	movs	r1, #244	; 0xf4
   2094c:	f7fe bd98 	b.w	1f480 <mbedtls_zeroize_internal>
   20950:	4770      	bx	lr
   20952:	bf00      	nop

00020954 <cc_mbedtls_sha256_starts>:
   20954:	b508      	push	{r3, lr}
   20956:	b161      	cbz	r1, 20972 <cc_mbedtls_sha256_starts+0x1e>
   20958:	2901      	cmp	r1, #1
   2095a:	d107      	bne.n	2096c <cc_mbedtls_sha256_starts+0x18>
   2095c:	2102      	movs	r1, #2
   2095e:	f000 f85b 	bl	20a18 <mbedtls_sha_starts_internal>
   20962:	2800      	cmp	r0, #0
   20964:	bf18      	it	ne
   20966:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2096a:	bd08      	pop	{r3, pc}
   2096c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20970:	bd08      	pop	{r3, pc}
   20972:	2101      	movs	r1, #1
   20974:	f000 f850 	bl	20a18 <mbedtls_sha_starts_internal>
   20978:	e7f3      	b.n	20962 <cc_mbedtls_sha256_starts+0xe>
   2097a:	bf00      	nop

0002097c <cc_mbedtls_sha256_update>:
   2097c:	b530      	push	{r4, r5, lr}
   2097e:	4605      	mov	r5, r0
   20980:	1888      	adds	r0, r1, r2
   20982:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   20986:	b0a1      	sub	sp, #132	; 0x84
   20988:	460b      	mov	r3, r1
   2098a:	4614      	mov	r4, r2
   2098c:	d801      	bhi.n	20992 <cc_mbedtls_sha256_update+0x16>
   2098e:	2a80      	cmp	r2, #128	; 0x80
   20990:	d90c      	bls.n	209ac <cc_mbedtls_sha256_update+0x30>
   20992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20996:	d917      	bls.n	209c8 <cc_mbedtls_sha256_update+0x4c>
   20998:	4622      	mov	r2, r4
   2099a:	4619      	mov	r1, r3
   2099c:	4628      	mov	r0, r5
   2099e:	f000 f87d 	bl	20a9c <mbedtls_sha_update_internal>
   209a2:	4604      	mov	r4, r0
   209a4:	b984      	cbnz	r4, 209c8 <cc_mbedtls_sha256_update+0x4c>
   209a6:	4620      	mov	r0, r4
   209a8:	b021      	add	sp, #132	; 0x84
   209aa:	bd30      	pop	{r4, r5, pc}
   209ac:	4668      	mov	r0, sp
   209ae:	f7ff fbb1 	bl	20114 <CC_PalMemCopyPlat>
   209b2:	4622      	mov	r2, r4
   209b4:	4669      	mov	r1, sp
   209b6:	4628      	mov	r0, r5
   209b8:	f000 f870 	bl	20a9c <mbedtls_sha_update_internal>
   209bc:	2180      	movs	r1, #128	; 0x80
   209be:	4604      	mov	r4, r0
   209c0:	4668      	mov	r0, sp
   209c2:	f7ff fbab 	bl	2011c <CC_PalMemSetZeroPlat>
   209c6:	e7ed      	b.n	209a4 <cc_mbedtls_sha256_update+0x28>
   209c8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   209cc:	e7eb      	b.n	209a6 <cc_mbedtls_sha256_update+0x2a>
   209ce:	bf00      	nop

000209d0 <cc_mbedtls_sha256_finish>:
   209d0:	b570      	push	{r4, r5, r6, lr}
   209d2:	b1e8      	cbz	r0, 20a10 <cc_mbedtls_sha256_finish+0x40>
   209d4:	460e      	mov	r6, r1
   209d6:	b1d9      	cbz	r1, 20a10 <cc_mbedtls_sha256_finish+0x40>
   209d8:	4604      	mov	r4, r0
   209da:	f000 f831 	bl	20a40 <mbedtls_sha_finish_internal>
   209de:	4605      	mov	r5, r0
   209e0:	b9b0      	cbnz	r0, 20a10 <cc_mbedtls_sha256_finish+0x40>
   209e2:	6823      	ldr	r3, [r4, #0]
   209e4:	2b01      	cmp	r3, #1
   209e6:	d00b      	beq.n	20a00 <cc_mbedtls_sha256_finish+0x30>
   209e8:	2b02      	cmp	r3, #2
   209ea:	d001      	beq.n	209f0 <cc_mbedtls_sha256_finish+0x20>
   209ec:	4628      	mov	r0, r5
   209ee:	bd70      	pop	{r4, r5, r6, pc}
   209f0:	221c      	movs	r2, #28
   209f2:	f104 0108 	add.w	r1, r4, #8
   209f6:	4630      	mov	r0, r6
   209f8:	f7ff fb8c 	bl	20114 <CC_PalMemCopyPlat>
   209fc:	4628      	mov	r0, r5
   209fe:	bd70      	pop	{r4, r5, r6, pc}
   20a00:	2220      	movs	r2, #32
   20a02:	f104 0108 	add.w	r1, r4, #8
   20a06:	4630      	mov	r0, r6
   20a08:	f7ff fb84 	bl	20114 <CC_PalMemCopyPlat>
   20a0c:	4628      	mov	r0, r5
   20a0e:	bd70      	pop	{r4, r5, r6, pc}
   20a10:	f06f 0536 	mvn.w	r5, #54	; 0x36
   20a14:	e7ea      	b.n	209ec <cc_mbedtls_sha256_finish+0x1c>
   20a16:	bf00      	nop

00020a18 <mbedtls_sha_starts_internal>:
   20a18:	b178      	cbz	r0, 20a3a <mbedtls_sha_starts_internal+0x22>
   20a1a:	b538      	push	{r3, r4, r5, lr}
   20a1c:	4604      	mov	r4, r0
   20a1e:	460d      	mov	r5, r1
   20a20:	21f0      	movs	r1, #240	; 0xf0
   20a22:	f7ff fb7b 	bl	2011c <CC_PalMemSetZeroPlat>
   20a26:	2340      	movs	r3, #64	; 0x40
   20a28:	6025      	str	r5, [r4, #0]
   20a2a:	65e3      	str	r3, [r4, #92]	; 0x5c
   20a2c:	4620      	mov	r0, r4
   20a2e:	f000 fa63 	bl	20ef8 <InitHashDrv>
   20a32:	3800      	subs	r0, #0
   20a34:	bf18      	it	ne
   20a36:	2001      	movne	r0, #1
   20a38:	bd38      	pop	{r3, r4, r5, pc}
   20a3a:	2001      	movs	r0, #1
   20a3c:	4770      	bx	lr
   20a3e:	bf00      	nop

00020a40 <mbedtls_sha_finish_internal>:
   20a40:	b570      	push	{r4, r5, r6, lr}
   20a42:	6e05      	ldr	r5, [r0, #96]	; 0x60
   20a44:	b0a4      	sub	sp, #144	; 0x90
   20a46:	4604      	mov	r4, r0
   20a48:	ae04      	add	r6, sp, #16
   20a4a:	b9e5      	cbnz	r5, 20a86 <mbedtls_sha_finish_internal+0x46>
   20a4c:	2201      	movs	r2, #1
   20a4e:	2300      	movs	r3, #0
   20a50:	6062      	str	r2, [r4, #4]
   20a52:	4630      	mov	r0, r6
   20a54:	e9cd 3300 	strd	r3, r3, [sp]
   20a58:	aa02      	add	r2, sp, #8
   20a5a:	4629      	mov	r1, r5
   20a5c:	f000 fa18 	bl	20e90 <SetDataBuffersInfo>
   20a60:	b110      	cbz	r0, 20a68 <mbedtls_sha_finish_internal+0x28>
   20a62:	2001      	movs	r0, #1
   20a64:	b024      	add	sp, #144	; 0x90
   20a66:	bd70      	pop	{r4, r5, r6, pc}
   20a68:	462a      	mov	r2, r5
   20a6a:	a902      	add	r1, sp, #8
   20a6c:	4620      	mov	r0, r4
   20a6e:	f000 fa6d 	bl	20f4c <ProcessHashDrv>
   20a72:	2800      	cmp	r0, #0
   20a74:	d1f5      	bne.n	20a62 <mbedtls_sha_finish_internal+0x22>
   20a76:	4620      	mov	r0, r4
   20a78:	f000 fb7e 	bl	21178 <FinishHashDrv>
   20a7c:	2800      	cmp	r0, #0
   20a7e:	d1f0      	bne.n	20a62 <mbedtls_sha_finish_internal+0x22>
   20a80:	6620      	str	r0, [r4, #96]	; 0x60
   20a82:	b024      	add	sp, #144	; 0x90
   20a84:	bd70      	pop	{r4, r5, r6, pc}
   20a86:	2d80      	cmp	r5, #128	; 0x80
   20a88:	462a      	mov	r2, r5
   20a8a:	f100 0164 	add.w	r1, r0, #100	; 0x64
   20a8e:	bf28      	it	cs
   20a90:	2280      	movcs	r2, #128	; 0x80
   20a92:	4630      	mov	r0, r6
   20a94:	f7ff fb3e 	bl	20114 <CC_PalMemCopyPlat>
   20a98:	6e25      	ldr	r5, [r4, #96]	; 0x60
   20a9a:	e7d7      	b.n	20a4c <mbedtls_sha_finish_internal+0xc>

00020a9c <mbedtls_sha_update_internal>:
   20a9c:	2800      	cmp	r0, #0
   20a9e:	f000 80cd 	beq.w	20c3c <mbedtls_sha_update_internal+0x1a0>
   20aa2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20aa6:	4615      	mov	r5, r2
   20aa8:	b0a5      	sub	sp, #148	; 0x94
   20aaa:	2a00      	cmp	r2, #0
   20aac:	f000 80b4 	beq.w	20c18 <mbedtls_sha_update_internal+0x17c>
   20ab0:	460f      	mov	r7, r1
   20ab2:	2900      	cmp	r1, #0
   20ab4:	f000 80ac 	beq.w	20c10 <mbedtls_sha_update_internal+0x174>
   20ab8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   20abc:	4606      	mov	r6, r0
   20abe:	6e00      	ldr	r0, [r0, #96]	; 0x60
   20ac0:	d37d      	bcc.n	20bbe <mbedtls_sha_update_internal+0x122>
   20ac2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   20ac6:	f106 0964 	add.w	r9, r6, #100	; 0x64
   20aca:	e014      	b.n	20af6 <mbedtls_sha_update_internal+0x5a>
   20acc:	4283      	cmp	r3, r0
   20ace:	46ba      	mov	sl, r7
   20ad0:	f64f 74ff 	movw	r4, #65535	; 0xffff
   20ad4:	d029      	beq.n	20b2a <mbedtls_sha_update_internal+0x8e>
   20ad6:	fbb4 fbf3 	udiv	fp, r4, r3
   20ada:	fb03 fb0b 	mul.w	fp, r3, fp
   20ade:	f1bb 0f00 	cmp.w	fp, #0
   20ae2:	d144      	bne.n	20b6e <mbedtls_sha_update_internal+0xd2>
   20ae4:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   20ae8:	4447      	add	r7, r8
   20aea:	3dff      	subs	r5, #255	; 0xff
   20aec:	2c00      	cmp	r4, #0
   20aee:	d159      	bne.n	20ba4 <mbedtls_sha_update_internal+0x108>
   20af0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   20af4:	d363      	bcc.n	20bbe <mbedtls_sha_update_internal+0x122>
   20af6:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   20af8:	1a1c      	subs	r4, r3, r0
   20afa:	fbb4 f2f3 	udiv	r2, r4, r3
   20afe:	fb03 4412 	mls	r4, r3, r2, r4
   20b02:	2c00      	cmp	r4, #0
   20b04:	d0e2      	beq.n	20acc <mbedtls_sha_update_internal+0x30>
   20b06:	4544      	cmp	r4, r8
   20b08:	bf28      	it	cs
   20b0a:	4644      	movcs	r4, r8
   20b0c:	4622      	mov	r2, r4
   20b0e:	4448      	add	r0, r9
   20b10:	4639      	mov	r1, r7
   20b12:	f7ff faff 	bl	20114 <CC_PalMemCopyPlat>
   20b16:	6e30      	ldr	r0, [r6, #96]	; 0x60
   20b18:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   20b1a:	4420      	add	r0, r4
   20b1c:	4283      	cmp	r3, r0
   20b1e:	eb07 0a04 	add.w	sl, r7, r4
   20b22:	6630      	str	r0, [r6, #96]	; 0x60
   20b24:	eba8 0404 	sub.w	r4, r8, r4
   20b28:	d1d5      	bne.n	20ad6 <mbedtls_sha_update_internal+0x3a>
   20b2a:	2b80      	cmp	r3, #128	; 0x80
   20b2c:	bf28      	it	cs
   20b2e:	2380      	movcs	r3, #128	; 0x80
   20b30:	461a      	mov	r2, r3
   20b32:	4649      	mov	r1, r9
   20b34:	a804      	add	r0, sp, #16
   20b36:	f7ff faed 	bl	20114 <CC_PalMemCopyPlat>
   20b3a:	2300      	movs	r3, #0
   20b3c:	e9cd 3300 	strd	r3, r3, [sp]
   20b40:	aa02      	add	r2, sp, #8
   20b42:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   20b44:	a804      	add	r0, sp, #16
   20b46:	f000 f9a3 	bl	20e90 <SetDataBuffersInfo>
   20b4a:	2800      	cmp	r0, #0
   20b4c:	d160      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20b4e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   20b50:	a902      	add	r1, sp, #8
   20b52:	4630      	mov	r0, r6
   20b54:	f000 f9fa 	bl	20f4c <ProcessHashDrv>
   20b58:	2800      	cmp	r0, #0
   20b5a:	d159      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20b5c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   20b5e:	fbb4 fbf3 	udiv	fp, r4, r3
   20b62:	fb03 fb0b 	mul.w	fp, r3, fp
   20b66:	6630      	str	r0, [r6, #96]	; 0x60
   20b68:	f1bb 0f00 	cmp.w	fp, #0
   20b6c:	d0ba      	beq.n	20ae4 <mbedtls_sha_update_internal+0x48>
   20b6e:	2300      	movs	r3, #0
   20b70:	e9cd 3300 	strd	r3, r3, [sp]
   20b74:	aa02      	add	r2, sp, #8
   20b76:	4659      	mov	r1, fp
   20b78:	4650      	mov	r0, sl
   20b7a:	f000 f989 	bl	20e90 <SetDataBuffersInfo>
   20b7e:	2800      	cmp	r0, #0
   20b80:	d146      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20b82:	a902      	add	r1, sp, #8
   20b84:	465a      	mov	r2, fp
   20b86:	4630      	mov	r0, r6
   20b88:	f000 f9e0 	bl	20f4c <ProcessHashDrv>
   20b8c:	2800      	cmp	r0, #0
   20b8e:	d13f      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20b90:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   20b94:	eba4 040b 	sub.w	r4, r4, fp
   20b98:	6e30      	ldr	r0, [r6, #96]	; 0x60
   20b9a:	44da      	add	sl, fp
   20b9c:	4447      	add	r7, r8
   20b9e:	3dff      	subs	r5, #255	; 0xff
   20ba0:	2c00      	cmp	r4, #0
   20ba2:	d0a5      	beq.n	20af0 <mbedtls_sha_update_internal+0x54>
   20ba4:	3019      	adds	r0, #25
   20ba6:	4651      	mov	r1, sl
   20ba8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   20bac:	4622      	mov	r2, r4
   20bae:	f7ff fab1 	bl	20114 <CC_PalMemCopyPlat>
   20bb2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   20bb4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   20bb8:	4420      	add	r0, r4
   20bba:	6630      	str	r0, [r6, #96]	; 0x60
   20bbc:	d29b      	bcs.n	20af6 <mbedtls_sha_update_internal+0x5a>
   20bbe:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   20bc0:	1a14      	subs	r4, r2, r0
   20bc2:	fbb4 f3f2 	udiv	r3, r4, r2
   20bc6:	fb02 4413 	mls	r4, r2, r3, r4
   20bca:	42ac      	cmp	r4, r5
   20bcc:	bf28      	it	cs
   20bce:	462c      	movcs	r4, r5
   20bd0:	bb34      	cbnz	r4, 20c20 <mbedtls_sha_update_internal+0x184>
   20bd2:	4290      	cmp	r0, r2
   20bd4:	d034      	beq.n	20c40 <mbedtls_sha_update_internal+0x1a4>
   20bd6:	fbb5 f4f2 	udiv	r4, r5, r2
   20bda:	fb02 f404 	mul.w	r4, r2, r4
   20bde:	b96c      	cbnz	r4, 20bfc <mbedtls_sha_update_internal+0x160>
   20be0:	b1d5      	cbz	r5, 20c18 <mbedtls_sha_update_internal+0x17c>
   20be2:	6e33      	ldr	r3, [r6, #96]	; 0x60
   20be4:	3319      	adds	r3, #25
   20be6:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   20bea:	462a      	mov	r2, r5
   20bec:	4639      	mov	r1, r7
   20bee:	f7ff fa91 	bl	20114 <CC_PalMemCopyPlat>
   20bf2:	6e33      	ldr	r3, [r6, #96]	; 0x60
   20bf4:	442b      	add	r3, r5
   20bf6:	2000      	movs	r0, #0
   20bf8:	6633      	str	r3, [r6, #96]	; 0x60
   20bfa:	e00a      	b.n	20c12 <mbedtls_sha_update_internal+0x176>
   20bfc:	2300      	movs	r3, #0
   20bfe:	e9cd 3300 	strd	r3, r3, [sp]
   20c02:	aa02      	add	r2, sp, #8
   20c04:	4621      	mov	r1, r4
   20c06:	4638      	mov	r0, r7
   20c08:	f000 f942 	bl	20e90 <SetDataBuffersInfo>
   20c0c:	2800      	cmp	r0, #0
   20c0e:	d033      	beq.n	20c78 <mbedtls_sha_update_internal+0x1dc>
   20c10:	2001      	movs	r0, #1
   20c12:	b025      	add	sp, #148	; 0x94
   20c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c18:	4628      	mov	r0, r5
   20c1a:	b025      	add	sp, #148	; 0x94
   20c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c20:	f106 0364 	add.w	r3, r6, #100	; 0x64
   20c24:	4639      	mov	r1, r7
   20c26:	4622      	mov	r2, r4
   20c28:	4418      	add	r0, r3
   20c2a:	f7ff fa73 	bl	20114 <CC_PalMemCopyPlat>
   20c2e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   20c30:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   20c32:	4420      	add	r0, r4
   20c34:	1b2d      	subs	r5, r5, r4
   20c36:	4427      	add	r7, r4
   20c38:	6630      	str	r0, [r6, #96]	; 0x60
   20c3a:	e7ca      	b.n	20bd2 <mbedtls_sha_update_internal+0x136>
   20c3c:	2001      	movs	r0, #1
   20c3e:	4770      	bx	lr
   20c40:	2a80      	cmp	r2, #128	; 0x80
   20c42:	bf28      	it	cs
   20c44:	2280      	movcs	r2, #128	; 0x80
   20c46:	f106 0164 	add.w	r1, r6, #100	; 0x64
   20c4a:	a804      	add	r0, sp, #16
   20c4c:	f7ff fa62 	bl	20114 <CC_PalMemCopyPlat>
   20c50:	2300      	movs	r3, #0
   20c52:	e9cd 3300 	strd	r3, r3, [sp]
   20c56:	a804      	add	r0, sp, #16
   20c58:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   20c5a:	aa02      	add	r2, sp, #8
   20c5c:	f000 f918 	bl	20e90 <SetDataBuffersInfo>
   20c60:	2800      	cmp	r0, #0
   20c62:	d1d5      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20c64:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   20c66:	a902      	add	r1, sp, #8
   20c68:	4630      	mov	r0, r6
   20c6a:	f000 f96f 	bl	20f4c <ProcessHashDrv>
   20c6e:	2800      	cmp	r0, #0
   20c70:	d1ce      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20c72:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   20c74:	6630      	str	r0, [r6, #96]	; 0x60
   20c76:	e7ae      	b.n	20bd6 <mbedtls_sha_update_internal+0x13a>
   20c78:	a902      	add	r1, sp, #8
   20c7a:	4622      	mov	r2, r4
   20c7c:	4630      	mov	r0, r6
   20c7e:	f000 f965 	bl	20f4c <ProcessHashDrv>
   20c82:	2800      	cmp	r0, #0
   20c84:	d1c4      	bne.n	20c10 <mbedtls_sha_update_internal+0x174>
   20c86:	4427      	add	r7, r4
   20c88:	1b2d      	subs	r5, r5, r4
   20c8a:	e7a9      	b.n	20be0 <mbedtls_sha_update_internal+0x144>

00020c8c <cc_mbedtls_sha256>:
   20c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c8e:	461c      	mov	r4, r3
   20c90:	4605      	mov	r5, r0
   20c92:	4811      	ldr	r0, [pc, #68]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20c94:	460e      	mov	r6, r1
   20c96:	4617      	mov	r7, r2
   20c98:	f7ff fe42 	bl	20920 <cc_mbedtls_sha256_init>
   20c9c:	4621      	mov	r1, r4
   20c9e:	480e      	ldr	r0, [pc, #56]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20ca0:	f7ff fe58 	bl	20954 <cc_mbedtls_sha256_starts>
   20ca4:	4604      	mov	r4, r0
   20ca6:	b120      	cbz	r0, 20cb2 <cc_mbedtls_sha256+0x26>
   20ca8:	480b      	ldr	r0, [pc, #44]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20caa:	f7ff fe4d 	bl	20948 <cc_mbedtls_sha256_free>
   20cae:	4620      	mov	r0, r4
   20cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cb2:	4809      	ldr	r0, [pc, #36]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20cb4:	4632      	mov	r2, r6
   20cb6:	4629      	mov	r1, r5
   20cb8:	f7ff fe60 	bl	2097c <cc_mbedtls_sha256_update>
   20cbc:	4604      	mov	r4, r0
   20cbe:	2800      	cmp	r0, #0
   20cc0:	d1f2      	bne.n	20ca8 <cc_mbedtls_sha256+0x1c>
   20cc2:	4639      	mov	r1, r7
   20cc4:	4804      	ldr	r0, [pc, #16]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20cc6:	f7ff fe83 	bl	209d0 <cc_mbedtls_sha256_finish>
   20cca:	4604      	mov	r4, r0
   20ccc:	4802      	ldr	r0, [pc, #8]	; (20cd8 <cc_mbedtls_sha256+0x4c>)
   20cce:	f7ff fe3b 	bl	20948 <cc_mbedtls_sha256_free>
   20cd2:	4620      	mov	r0, r4
   20cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20cd6:	bf00      	nop
   20cd8:	20004450 	.word	0x20004450

00020cdc <RNG_PLAT_SetUserRngParameters>:
   20cdc:	b530      	push	{r4, r5, lr}
   20cde:	b083      	sub	sp, #12
   20ce0:	231c      	movs	r3, #28
   20ce2:	a901      	add	r1, sp, #4
   20ce4:	4604      	mov	r4, r0
   20ce6:	9301      	str	r3, [sp, #4]
   20ce8:	f000 f834 	bl	20d54 <CC_PalTrngParamGet>
   20cec:	4605      	mov	r5, r0
   20cee:	b938      	cbnz	r0, 20d00 <RNG_PLAT_SetUserRngParameters+0x24>
   20cf0:	9b01      	ldr	r3, [sp, #4]
   20cf2:	2b1c      	cmp	r3, #28
   20cf4:	d007      	beq.n	20d06 <RNG_PLAT_SetUserRngParameters+0x2a>
   20cf6:	4d15      	ldr	r5, [pc, #84]	; (20d4c <RNG_PLAT_SetUserRngParameters+0x70>)
   20cf8:	211c      	movs	r1, #28
   20cfa:	4620      	mov	r0, r4
   20cfc:	f7ff fa0e 	bl	2011c <CC_PalMemSetZeroPlat>
   20d00:	4628      	mov	r0, r5
   20d02:	b003      	add	sp, #12
   20d04:	bd30      	pop	{r4, r5, pc}
   20d06:	e9d4 3200 	ldrd	r3, r2, [r4]
   20d0a:	2101      	movs	r1, #1
   20d0c:	3b00      	subs	r3, #0
   20d0e:	61e1      	str	r1, [r4, #28]
   20d10:	bf18      	it	ne
   20d12:	2301      	movne	r3, #1
   20d14:	b10a      	cbz	r2, 20d1a <RNG_PLAT_SetUserRngParameters+0x3e>
   20d16:	f043 0302 	orr.w	r3, r3, #2
   20d1a:	68a2      	ldr	r2, [r4, #8]
   20d1c:	b932      	cbnz	r2, 20d2c <RNG_PLAT_SetUserRngParameters+0x50>
   20d1e:	68e2      	ldr	r2, [r4, #12]
   20d20:	b942      	cbnz	r2, 20d34 <RNG_PLAT_SetUserRngParameters+0x58>
   20d22:	e9c4 3208 	strd	r3, r2, [r4, #32]
   20d26:	b97b      	cbnz	r3, 20d48 <RNG_PLAT_SetUserRngParameters+0x6c>
   20d28:	4d09      	ldr	r5, [pc, #36]	; (20d50 <RNG_PLAT_SetUserRngParameters+0x74>)
   20d2a:	e7e5      	b.n	20cf8 <RNG_PLAT_SetUserRngParameters+0x1c>
   20d2c:	68e2      	ldr	r2, [r4, #12]
   20d2e:	f043 0304 	orr.w	r3, r3, #4
   20d32:	b13a      	cbz	r2, 20d44 <RNG_PLAT_SetUserRngParameters+0x68>
   20d34:	f043 0308 	orr.w	r3, r3, #8
   20d38:	2200      	movs	r2, #0
   20d3a:	4628      	mov	r0, r5
   20d3c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   20d40:	b003      	add	sp, #12
   20d42:	bd30      	pop	{r4, r5, pc}
   20d44:	e9c4 3208 	strd	r3, r2, [r4, #32]
   20d48:	4615      	mov	r5, r2
   20d4a:	e7d9      	b.n	20d00 <RNG_PLAT_SetUserRngParameters+0x24>
   20d4c:	00f00c37 	.word	0x00f00c37
   20d50:	00f00c0e 	.word	0x00f00c0e

00020d54 <CC_PalTrngParamGet>:
   20d54:	b118      	cbz	r0, 20d5e <CC_PalTrngParamGet+0xa>
   20d56:	b111      	cbz	r1, 20d5e <CC_PalTrngParamGet+0xa>
   20d58:	680b      	ldr	r3, [r1, #0]
   20d5a:	2b1c      	cmp	r3, #28
   20d5c:	d001      	beq.n	20d62 <CC_PalTrngParamGet+0xe>
   20d5e:	2001      	movs	r0, #1
   20d60:	4770      	bx	lr
   20d62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d66:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   20d6a:	3201      	adds	r2, #1
   20d6c:	bf14      	ite	ne
   20d6e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   20d72:	f241 225c 	movweq	r2, #4700	; 0x125c
   20d76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d7a:	6002      	str	r2, [r0, #0]
   20d7c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   20d80:	3201      	adds	r2, #1
   20d82:	bf14      	ite	ne
   20d84:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   20d88:	f641 1264 	movweq	r2, #6500	; 0x1964
   20d8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20d90:	6042      	str	r2, [r0, #4]
   20d92:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   20d96:	3201      	adds	r2, #1
   20d98:	bf14      	ite	ne
   20d9a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   20d9e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   20da2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20da6:	6082      	str	r2, [r0, #8]
   20da8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   20dac:	3201      	adds	r2, #1
   20dae:	bf14      	ite	ne
   20db0:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   20db4:	f241 3288 	movweq	r2, #5000	; 0x1388
   20db8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20dbc:	60c2      	str	r2, [r0, #12]
   20dbe:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   20dc2:	3201      	adds	r2, #1
   20dc4:	bf14      	ite	ne
   20dc6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   20dca:	2290      	moveq	r2, #144	; 0x90
   20dcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20dd0:	6102      	str	r2, [r0, #16]
   20dd2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   20dd6:	3201      	adds	r2, #1
   20dd8:	bf14      	ite	ne
   20dda:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   20dde:	2251      	moveq	r2, #81	; 0x51
   20de0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20de4:	6142      	str	r2, [r0, #20]
   20de6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   20dea:	3201      	adds	r2, #1
   20dec:	bf14      	ite	ne
   20dee:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   20df2:	f240 3337 	movweq	r3, #823	; 0x337
   20df6:	6183      	str	r3, [r0, #24]
   20df8:	2000      	movs	r0, #0
   20dfa:	4770      	bx	lr

00020dfc <LLF_RND_WaitRngInterrupt>:
   20dfc:	b508      	push	{r3, lr}
   20dfe:	4601      	mov	r1, r0
   20e00:	f44f 6080 	mov.w	r0, #1024	; 0x400
   20e04:	f7ff f912 	bl	2002c <CC_HalWaitInterruptRND>
   20e08:	4b03      	ldr	r3, [pc, #12]	; (20e18 <LLF_RND_WaitRngInterrupt+0x1c>)
   20e0a:	2200      	movs	r2, #0
   20e0c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   20e10:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   20e14:	bd08      	pop	{r3, pc}
   20e16:	bf00      	nop
   20e18:	5002b000 	.word	0x5002b000

00020e1c <LLF_RND_GetRoscSampleCnt>:
   20e1c:	3801      	subs	r0, #1
   20e1e:	2807      	cmp	r0, #7
   20e20:	d805      	bhi.n	20e2e <LLF_RND_GetRoscSampleCnt+0x12>
   20e22:	e8df f000 	tbb	[pc, r0]
   20e26:	0e12      	.short	0x0e12
   20e28:	04040a04 	.word	0x04040a04
   20e2c:	0604      	.short	0x0604
   20e2e:	4809      	ldr	r0, [pc, #36]	; (20e54 <LLF_RND_GetRoscSampleCnt+0x38>)
   20e30:	4770      	bx	lr
   20e32:	68cb      	ldr	r3, [r1, #12]
   20e34:	624b      	str	r3, [r1, #36]	; 0x24
   20e36:	2000      	movs	r0, #0
   20e38:	4770      	bx	lr
   20e3a:	688b      	ldr	r3, [r1, #8]
   20e3c:	624b      	str	r3, [r1, #36]	; 0x24
   20e3e:	2000      	movs	r0, #0
   20e40:	4770      	bx	lr
   20e42:	684b      	ldr	r3, [r1, #4]
   20e44:	624b      	str	r3, [r1, #36]	; 0x24
   20e46:	2000      	movs	r0, #0
   20e48:	4770      	bx	lr
   20e4a:	680b      	ldr	r3, [r1, #0]
   20e4c:	624b      	str	r3, [r1, #36]	; 0x24
   20e4e:	2000      	movs	r0, #0
   20e50:	4770      	bx	lr
   20e52:	bf00      	nop
   20e54:	00f10c31 	.word	0x00f10c31

00020e58 <LLF_RND_GetFastestRosc>:
   20e58:	680b      	ldr	r3, [r1, #0]
   20e5a:	e002      	b.n	20e62 <LLF_RND_GetFastestRosc+0xa>
   20e5c:	2b08      	cmp	r3, #8
   20e5e:	600b      	str	r3, [r1, #0]
   20e60:	d806      	bhi.n	20e70 <LLF_RND_GetFastestRosc+0x18>
   20e62:	6a02      	ldr	r2, [r0, #32]
   20e64:	4213      	tst	r3, r2
   20e66:	ea4f 0343 	mov.w	r3, r3, lsl #1
   20e6a:	d0f7      	beq.n	20e5c <LLF_RND_GetFastestRosc+0x4>
   20e6c:	2000      	movs	r0, #0
   20e6e:	4770      	bx	lr
   20e70:	4800      	ldr	r0, [pc, #0]	; (20e74 <LLF_RND_GetFastestRosc+0x1c>)
   20e72:	4770      	bx	lr
   20e74:	00f10c31 	.word	0x00f10c31

00020e78 <LLF_RND_TurnOffTrng>:
   20e78:	4b04      	ldr	r3, [pc, #16]	; (20e8c <LLF_RND_TurnOffTrng+0x14>)
   20e7a:	2200      	movs	r2, #0
   20e7c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   20e80:	f44f 6080 	mov.w	r0, #1024	; 0x400
   20e84:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   20e88:	f7ff b8b6 	b.w	1fff8 <CC_HalClearInterruptBit>
   20e8c:	5002b000 	.word	0x5002b000

00020e90 <SetDataBuffersInfo>:
   20e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   20e92:	b083      	sub	sp, #12
   20e94:	461d      	mov	r5, r3
   20e96:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   20e9a:	f04f 0300 	mov.w	r3, #0
   20e9e:	f88d 3007 	strb.w	r3, [sp, #7]
   20ea2:	d324      	bcc.n	20eee <SetDataBuffersInfo+0x5e>
   20ea4:	468c      	mov	ip, r1
   20ea6:	4484      	add	ip, r0
   20ea8:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   20eac:	4604      	mov	r4, r0
   20eae:	d81e      	bhi.n	20eee <SetDataBuffersInfo+0x5e>
   20eb0:	4617      	mov	r7, r2
   20eb2:	f10d 0307 	add.w	r3, sp, #7
   20eb6:	2201      	movs	r2, #1
   20eb8:	f000 fe68 	bl	21b8c <CC_PalDataBufferAttrGet>
   20ebc:	4606      	mov	r6, r0
   20ebe:	b9b0      	cbnz	r0, 20eee <SetDataBuffersInfo+0x5e>
   20ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ec2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20ec6:	603c      	str	r4, [r7, #0]
   20ec8:	713b      	strb	r3, [r7, #4]
   20eca:	b192      	cbz	r2, 20ef2 <SetDataBuffersInfo+0x62>
   20ecc:	b14d      	cbz	r5, 20ee2 <SetDataBuffersInfo+0x52>
   20ece:	4602      	mov	r2, r0
   20ed0:	9908      	ldr	r1, [sp, #32]
   20ed2:	f10d 0307 	add.w	r3, sp, #7
   20ed6:	4628      	mov	r0, r5
   20ed8:	f000 fe58 	bl	21b8c <CC_PalDataBufferAttrGet>
   20edc:	b938      	cbnz	r0, 20eee <SetDataBuffersInfo+0x5e>
   20ede:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ee4:	4630      	mov	r0, r6
   20ee6:	6015      	str	r5, [r2, #0]
   20ee8:	7113      	strb	r3, [r2, #4]
   20eea:	b003      	add	sp, #12
   20eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20eee:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   20ef2:	4630      	mov	r0, r6
   20ef4:	b003      	add	sp, #12
   20ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020ef8 <InitHashDrv>:
   20ef8:	b1e8      	cbz	r0, 20f36 <InitHashDrv+0x3e>
   20efa:	b510      	push	{r4, lr}
   20efc:	6804      	ldr	r4, [r0, #0]
   20efe:	2c01      	cmp	r4, #1
   20f00:	d004      	beq.n	20f0c <InitHashDrv+0x14>
   20f02:	2c02      	cmp	r4, #2
   20f04:	d010      	beq.n	20f28 <InitHashDrv+0x30>
   20f06:	b144      	cbz	r4, 20f1a <InitHashDrv+0x22>
   20f08:	480c      	ldr	r0, [pc, #48]	; (20f3c <InitHashDrv+0x44>)
   20f0a:	bd10      	pop	{r4, pc}
   20f0c:	490c      	ldr	r1, [pc, #48]	; (20f40 <InitHashDrv+0x48>)
   20f0e:	2220      	movs	r2, #32
   20f10:	3008      	adds	r0, #8
   20f12:	f7ff f8ff 	bl	20114 <CC_PalMemCopyPlat>
   20f16:	2000      	movs	r0, #0
   20f18:	bd10      	pop	{r4, pc}
   20f1a:	490a      	ldr	r1, [pc, #40]	; (20f44 <InitHashDrv+0x4c>)
   20f1c:	2214      	movs	r2, #20
   20f1e:	3008      	adds	r0, #8
   20f20:	f7ff f8f8 	bl	20114 <CC_PalMemCopyPlat>
   20f24:	4620      	mov	r0, r4
   20f26:	bd10      	pop	{r4, pc}
   20f28:	4907      	ldr	r1, [pc, #28]	; (20f48 <InitHashDrv+0x50>)
   20f2a:	2220      	movs	r2, #32
   20f2c:	3008      	adds	r0, #8
   20f2e:	f7ff f8f1 	bl	20114 <CC_PalMemCopyPlat>
   20f32:	2000      	movs	r0, #0
   20f34:	bd10      	pop	{r4, pc}
   20f36:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   20f3a:	4770      	bx	lr
   20f3c:	00f30001 	.word	0x00f30001
   20f40:	0002697c 	.word	0x0002697c
   20f44:	00026948 	.word	0x00026948
   20f48:	0002695c 	.word	0x0002695c

00020f4c <ProcessHashDrv>:
   20f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f50:	2900      	cmp	r1, #0
   20f52:	f000 80f9 	beq.w	21148 <ProcessHashDrv+0x1fc>
   20f56:	4604      	mov	r4, r0
   20f58:	2800      	cmp	r0, #0
   20f5a:	f000 80f9 	beq.w	21150 <ProcessHashDrv+0x204>
   20f5e:	6803      	ldr	r3, [r0, #0]
   20f60:	4690      	mov	r8, r2
   20f62:	460f      	mov	r7, r1
   20f64:	2b00      	cmp	r3, #0
   20f66:	f000 80c3 	beq.w	210f0 <ProcessHashDrv+0x1a4>
   20f6a:	3b01      	subs	r3, #1
   20f6c:	2b01      	cmp	r3, #1
   20f6e:	f200 80d7 	bhi.w	21120 <ProcessHashDrv+0x1d4>
   20f72:	4879      	ldr	r0, [pc, #484]	; (21158 <ProcessHashDrv+0x20c>)
   20f74:	f04f 31ff 	mov.w	r1, #4294967295
   20f78:	f04f 0902 	mov.w	r9, #2
   20f7c:	f7ff f8e6 	bl	2014c <CC_PalMutexLock>
   20f80:	2800      	cmp	r0, #0
   20f82:	f040 80bf 	bne.w	21104 <ProcessHashDrv+0x1b8>
   20f86:	2000      	movs	r0, #0
   20f88:	f7ff f910 	bl	201ac <CC_PalPowerSaveModeSelect>
   20f8c:	4606      	mov	r6, r0
   20f8e:	2800      	cmp	r0, #0
   20f90:	f040 80c2 	bne.w	21118 <ProcessHashDrv+0x1cc>
   20f94:	4a71      	ldr	r2, [pc, #452]	; (2115c <ProcessHashDrv+0x210>)
   20f96:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   20f9a:	2b00      	cmp	r3, #0
   20f9c:	d1fb      	bne.n	20f96 <ProcessHashDrv+0x4a>
   20f9e:	4d6f      	ldr	r5, [pc, #444]	; (2115c <ProcessHashDrv+0x210>)
   20fa0:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   20fa4:	2b00      	cmp	r3, #0
   20fa6:	d1fb      	bne.n	20fa0 <ProcessHashDrv+0x54>
   20fa8:	f04f 30ff 	mov.w	r0, #4294967295
   20fac:	f7ff f824 	bl	1fff8 <CC_HalClearInterruptBit>
   20fb0:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   20fb4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   20fb8:	f7ff f82c 	bl	20014 <CC_HalMaskInterrupt>
   20fbc:	2301      	movs	r3, #1
   20fbe:	2207      	movs	r2, #7
   20fc0:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   20fc4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   20fc8:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   20fcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   20fce:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   20fd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   20fd4:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   20fd8:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   20fdc:	6823      	ldr	r3, [r4, #0]
   20fde:	b15b      	cbz	r3, 20ff8 <ProcessHashDrv+0xac>
   20fe0:	3b01      	subs	r3, #1
   20fe2:	2b01      	cmp	r3, #1
   20fe4:	d818      	bhi.n	21018 <ProcessHashDrv+0xcc>
   20fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20fe8:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   20fec:	6a23      	ldr	r3, [r4, #32]
   20fee:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   20ff2:	69e3      	ldr	r3, [r4, #28]
   20ff4:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   20ff8:	4b58      	ldr	r3, [pc, #352]	; (2115c <ProcessHashDrv+0x210>)
   20ffa:	69a2      	ldr	r2, [r4, #24]
   20ffc:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   21000:	6962      	ldr	r2, [r4, #20]
   21002:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   21006:	6922      	ldr	r2, [r4, #16]
   21008:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   2100c:	68e2      	ldr	r2, [r4, #12]
   2100e:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   21012:	68a2      	ldr	r2, [r4, #8]
   21014:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   21018:	4a50      	ldr	r2, [pc, #320]	; (2115c <ProcessHashDrv+0x210>)
   2101a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2101e:	2b00      	cmp	r3, #0
   21020:	d1fb      	bne.n	2101a <ProcessHashDrv+0xce>
   21022:	f1b8 0f00 	cmp.w	r8, #0
   21026:	d05f      	beq.n	210e8 <ProcessHashDrv+0x19c>
   21028:	6863      	ldr	r3, [r4, #4]
   2102a:	2b01      	cmp	r3, #1
   2102c:	bf08      	it	eq
   2102e:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   21032:	4b4a      	ldr	r3, [pc, #296]	; (2115c <ProcessHashDrv+0x210>)
   21034:	683a      	ldr	r2, [r7, #0]
   21036:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   2103a:	2040      	movs	r0, #64	; 0x40
   2103c:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   21040:	f7fe ffee 	bl	20020 <CC_HalWaitInterrupt>
   21044:	4606      	mov	r6, r0
   21046:	4a45      	ldr	r2, [pc, #276]	; (2115c <ProcessHashDrv+0x210>)
   21048:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2104c:	2b00      	cmp	r3, #0
   2104e:	d1fb      	bne.n	21048 <ProcessHashDrv+0xfc>
   21050:	4a42      	ldr	r2, [pc, #264]	; (2115c <ProcessHashDrv+0x210>)
   21052:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   21056:	2b00      	cmp	r3, #0
   21058:	d1fb      	bne.n	21052 <ProcessHashDrv+0x106>
   2105a:	6823      	ldr	r3, [r4, #0]
   2105c:	b15b      	cbz	r3, 21076 <ProcessHashDrv+0x12a>
   2105e:	3b01      	subs	r3, #1
   21060:	2b01      	cmp	r3, #1
   21062:	d818      	bhi.n	21096 <ProcessHashDrv+0x14a>
   21064:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   21068:	6263      	str	r3, [r4, #36]	; 0x24
   2106a:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   2106e:	6223      	str	r3, [r4, #32]
   21070:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   21074:	61e3      	str	r3, [r4, #28]
   21076:	4b39      	ldr	r3, [pc, #228]	; (2115c <ProcessHashDrv+0x210>)
   21078:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   2107c:	61a2      	str	r2, [r4, #24]
   2107e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   21082:	6162      	str	r2, [r4, #20]
   21084:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   21088:	6122      	str	r2, [r4, #16]
   2108a:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   2108e:	60e2      	str	r2, [r4, #12]
   21090:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   21094:	60a3      	str	r3, [r4, #8]
   21096:	4a31      	ldr	r2, [pc, #196]	; (2115c <ProcessHashDrv+0x210>)
   21098:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   2109c:	64a1      	str	r1, [r4, #72]	; 0x48
   2109e:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   210a2:	64e1      	str	r1, [r4, #76]	; 0x4c
   210a4:	2300      	movs	r3, #0
   210a6:	2101      	movs	r1, #1
   210a8:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   210ac:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   210b0:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   210b4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   210b8:	2b00      	cmp	r3, #0
   210ba:	d1fb      	bne.n	210b4 <ProcessHashDrv+0x168>
   210bc:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   210c0:	2e00      	cmp	r6, #0
   210c2:	d13b      	bne.n	2113c <ProcessHashDrv+0x1f0>
   210c4:	4b25      	ldr	r3, [pc, #148]	; (2115c <ProcessHashDrv+0x210>)
   210c6:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   210ca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   210ce:	f7fe ffa1 	bl	20014 <CC_HalMaskInterrupt>
   210d2:	2001      	movs	r0, #1
   210d4:	f7ff f86a 	bl	201ac <CC_PalPowerSaveModeSelect>
   210d8:	bb60      	cbnz	r0, 21134 <ProcessHashDrv+0x1e8>
   210da:	481f      	ldr	r0, [pc, #124]	; (21158 <ProcessHashDrv+0x20c>)
   210dc:	f7ff f83e 	bl	2015c <CC_PalMutexUnlock>
   210e0:	bb10      	cbnz	r0, 21128 <ProcessHashDrv+0x1dc>
   210e2:	4630      	mov	r0, r6
   210e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   210e8:	2304      	movs	r3, #4
   210ea:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   210ee:	e7aa      	b.n	21046 <ProcessHashDrv+0xfa>
   210f0:	4819      	ldr	r0, [pc, #100]	; (21158 <ProcessHashDrv+0x20c>)
   210f2:	f04f 31ff 	mov.w	r1, #4294967295
   210f6:	f04f 0901 	mov.w	r9, #1
   210fa:	f7ff f827 	bl	2014c <CC_PalMutexLock>
   210fe:	2800      	cmp	r0, #0
   21100:	f43f af41 	beq.w	20f86 <ProcessHashDrv+0x3a>
   21104:	4816      	ldr	r0, [pc, #88]	; (21160 <ProcessHashDrv+0x214>)
   21106:	f7fe f8a5 	bl	1f254 <CC_PalAbort>
   2110a:	2000      	movs	r0, #0
   2110c:	f7ff f84e 	bl	201ac <CC_PalPowerSaveModeSelect>
   21110:	4606      	mov	r6, r0
   21112:	2800      	cmp	r0, #0
   21114:	f43f af3e 	beq.w	20f94 <ProcessHashDrv+0x48>
   21118:	4812      	ldr	r0, [pc, #72]	; (21164 <ProcessHashDrv+0x218>)
   2111a:	f7fe f89b 	bl	1f254 <CC_PalAbort>
   2111e:	e739      	b.n	20f94 <ProcessHashDrv+0x48>
   21120:	4e11      	ldr	r6, [pc, #68]	; (21168 <ProcessHashDrv+0x21c>)
   21122:	4630      	mov	r0, r6
   21124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21128:	4810      	ldr	r0, [pc, #64]	; (2116c <ProcessHashDrv+0x220>)
   2112a:	f7fe f893 	bl	1f254 <CC_PalAbort>
   2112e:	4630      	mov	r0, r6
   21130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21134:	480e      	ldr	r0, [pc, #56]	; (21170 <ProcessHashDrv+0x224>)
   21136:	f7fe f88d 	bl	1f254 <CC_PalAbort>
   2113a:	e7ce      	b.n	210da <ProcessHashDrv+0x18e>
   2113c:	2110      	movs	r1, #16
   2113e:	f104 0008 	add.w	r0, r4, #8
   21142:	f7fe ffeb 	bl	2011c <CC_PalMemSetZeroPlat>
   21146:	e7bd      	b.n	210c4 <ProcessHashDrv+0x178>
   21148:	4e0a      	ldr	r6, [pc, #40]	; (21174 <ProcessHashDrv+0x228>)
   2114a:	4630      	mov	r0, r6
   2114c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21150:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   21154:	e7c5      	b.n	210e2 <ProcessHashDrv+0x196>
   21156:	bf00      	nop
   21158:	2000092c 	.word	0x2000092c
   2115c:	5002b000 	.word	0x5002b000
   21160:	0002687c 	.word	0x0002687c
   21164:	00026894 	.word	0x00026894
   21168:	00f30001 	.word	0x00f30001
   2116c:	000268d4 	.word	0x000268d4
   21170:	000268b4 	.word	0x000268b4
   21174:	00f30003 	.word	0x00f30003

00021178 <FinishHashDrv>:
   21178:	b398      	cbz	r0, 211e2 <FinishHashDrv+0x6a>
   2117a:	b470      	push	{r4, r5, r6}
   2117c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   21180:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   21184:	ba26      	rev	r6, r4
   21186:	ba0d      	rev	r5, r1
   21188:	ba14      	rev	r4, r2
   2118a:	ba19      	rev	r1, r3
   2118c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   21190:	ba12      	rev	r2, r2
   21192:	e9c0 4104 	strd	r4, r1, [r0, #16]
   21196:	6182      	str	r2, [r0, #24]
   21198:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   2119c:	e9c0 6502 	strd	r6, r5, [r0, #8]
   211a0:	ba1b      	rev	r3, r3
   211a2:	ba25      	rev	r5, r4
   211a4:	e9c0 3507 	strd	r3, r5, [r0, #28]
   211a8:	ba14      	rev	r4, r2
   211aa:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   211ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
   211b0:	ba12      	rev	r2, r2
   211b2:	ba09      	rev	r1, r1
   211b4:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   211b8:	62c2      	str	r2, [r0, #44]	; 0x2c
   211ba:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   211be:	ba1b      	rev	r3, r3
   211c0:	ba25      	rev	r5, r4
   211c2:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   211c6:	ba14      	rev	r4, r2
   211c8:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   211cc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   211ce:	ba12      	rev	r2, r2
   211d0:	ba09      	rev	r1, r1
   211d2:	ba1b      	rev	r3, r3
   211d4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   211d8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   211dc:	2000      	movs	r0, #0
   211de:	bc70      	pop	{r4, r5, r6}
   211e0:	4770      	bx	lr
   211e2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   211e6:	4770      	bx	lr

000211e8 <LoadAesKey>:
   211e8:	2800      	cmp	r0, #0
   211ea:	d046      	beq.n	2127a <LoadAesKey+0x92>
   211ec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   211f0:	2b00      	cmp	r3, #0
   211f2:	d033      	beq.n	2125c <LoadAesKey+0x74>
   211f4:	2b03      	cmp	r3, #3
   211f6:	b510      	push	{r4, lr}
   211f8:	d013      	beq.n	21222 <LoadAesKey+0x3a>
   211fa:	4821      	ldr	r0, [pc, #132]	; (21280 <LoadAesKey+0x98>)
   211fc:	4c21      	ldr	r4, [pc, #132]	; (21284 <LoadAesKey+0x9c>)
   211fe:	6822      	ldr	r2, [r4, #0]
   21200:	4b21      	ldr	r3, [pc, #132]	; (21288 <LoadAesKey+0xa0>)
   21202:	6812      	ldr	r2, [r2, #0]
   21204:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   21208:	6822      	ldr	r2, [r4, #0]
   2120a:	6852      	ldr	r2, [r2, #4]
   2120c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   21210:	6822      	ldr	r2, [r4, #0]
   21212:	6892      	ldr	r2, [r2, #8]
   21214:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   21218:	6822      	ldr	r2, [r4, #0]
   2121a:	68d2      	ldr	r2, [r2, #12]
   2121c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   21220:	bd10      	pop	{r4, pc}
   21222:	6b01      	ldr	r1, [r0, #48]	; 0x30
   21224:	6c00      	ldr	r0, [r0, #64]	; 0x40
   21226:	4c17      	ldr	r4, [pc, #92]	; (21284 <LoadAesKey+0x9c>)
   21228:	f000 fbac 	bl	21984 <kmu_validate_kdr_slot_and_size>
   2122c:	2800      	cmp	r0, #0
   2122e:	d1e6      	bne.n	211fe <LoadAesKey+0x16>
   21230:	6822      	ldr	r2, [r4, #0]
   21232:	4b15      	ldr	r3, [pc, #84]	; (21288 <LoadAesKey+0xa0>)
   21234:	6812      	ldr	r2, [r2, #0]
   21236:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2123a:	6822      	ldr	r2, [r4, #0]
   2123c:	6852      	ldr	r2, [r2, #4]
   2123e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   21242:	6822      	ldr	r2, [r4, #0]
   21244:	6892      	ldr	r2, [r2, #8]
   21246:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2124a:	6822      	ldr	r2, [r4, #0]
   2124c:	68d2      	ldr	r2, [r2, #12]
   2124e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   21252:	f000 fba3 	bl	2199c <kmu_use_kdr_key>
   21256:	2800      	cmp	r0, #0
   21258:	d1d1      	bne.n	211fe <LoadAesKey+0x16>
   2125a:	bd10      	pop	{r4, pc}
   2125c:	4a0a      	ldr	r2, [pc, #40]	; (21288 <LoadAesKey+0xa0>)
   2125e:	6901      	ldr	r1, [r0, #16]
   21260:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   21264:	6941      	ldr	r1, [r0, #20]
   21266:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   2126a:	6981      	ldr	r1, [r0, #24]
   2126c:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   21270:	69c1      	ldr	r1, [r0, #28]
   21272:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   21276:	4618      	mov	r0, r3
   21278:	4770      	bx	lr
   2127a:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2127e:	4770      	bx	lr
   21280:	00f10009 	.word	0x00f10009
   21284:	2000091c 	.word	0x2000091c
   21288:	5002b000 	.word	0x5002b000

0002128c <InitAes.part.0>:
   2128c:	4a37      	ldr	r2, [pc, #220]	; (2136c <InitAes.part.0+0xe0>)
   2128e:	b538      	push	{r3, r4, r5, lr}
   21290:	4604      	mov	r4, r0
   21292:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   21296:	2b00      	cmp	r3, #0
   21298:	d1fb      	bne.n	21292 <InitAes.part.0+0x6>
   2129a:	4a34      	ldr	r2, [pc, #208]	; (2136c <InitAes.part.0+0xe0>)
   2129c:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   212a0:	2b00      	cmp	r3, #0
   212a2:	d1fb      	bne.n	2129c <InitAes.part.0+0x10>
   212a4:	4a31      	ldr	r2, [pc, #196]	; (2136c <InitAes.part.0+0xe0>)
   212a6:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   212aa:	2b00      	cmp	r3, #0
   212ac:	d1fb      	bne.n	212a6 <InitAes.part.0+0x1a>
   212ae:	4a2f      	ldr	r2, [pc, #188]	; (2136c <InitAes.part.0+0xe0>)
   212b0:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   212b4:	2b00      	cmp	r3, #0
   212b6:	d1fb      	bne.n	212b0 <InitAes.part.0+0x24>
   212b8:	4a2c      	ldr	r2, [pc, #176]	; (2136c <InitAes.part.0+0xe0>)
   212ba:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   212be:	2b00      	cmp	r3, #0
   212c0:	d1fb      	bne.n	212ba <InitAes.part.0+0x2e>
   212c2:	4d2a      	ldr	r5, [pc, #168]	; (2136c <InitAes.part.0+0xe0>)
   212c4:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   212c8:	2b00      	cmp	r3, #0
   212ca:	d1fb      	bne.n	212c4 <InitAes.part.0+0x38>
   212cc:	f04f 30ff 	mov.w	r0, #4294967295
   212d0:	f7fe fe92 	bl	1fff8 <CC_HalClearInterruptBit>
   212d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   212d6:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   212da:	f023 0304 	bic.w	r3, r3, #4
   212de:	2b03      	cmp	r3, #3
   212e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   212e2:	d039      	beq.n	21358 <InitAes.part.0+0xcc>
   212e4:	2b01      	cmp	r3, #1
   212e6:	bf0c      	ite	eq
   212e8:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   212ec:	f020 0020 	bicne.w	r0, r0, #32
   212f0:	f7fe fe90 	bl	20014 <CC_HalMaskInterrupt>
   212f4:	4a1d      	ldr	r2, [pc, #116]	; (2136c <InitAes.part.0+0xe0>)
   212f6:	2301      	movs	r3, #1
   212f8:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   212fc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   21300:	2b00      	cmp	r3, #0
   21302:	d1fb      	bne.n	212fc <InitAes.part.0+0x70>
   21304:	4a19      	ldr	r2, [pc, #100]	; (2136c <InitAes.part.0+0xe0>)
   21306:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2130a:	2b00      	cmp	r3, #0
   2130c:	d1fb      	bne.n	21306 <InitAes.part.0+0x7a>
   2130e:	4917      	ldr	r1, [pc, #92]	; (2136c <InitAes.part.0+0xe0>)
   21310:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   21314:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   21318:	2b00      	cmp	r3, #0
   2131a:	d1fb      	bne.n	21314 <InitAes.part.0+0x88>
   2131c:	4a13      	ldr	r2, [pc, #76]	; (2136c <InitAes.part.0+0xe0>)
   2131e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   21322:	2b00      	cmp	r3, #0
   21324:	d1fb      	bne.n	2131e <InitAes.part.0+0x92>
   21326:	6b62      	ldr	r2, [r4, #52]	; 0x34
   21328:	f022 0104 	bic.w	r1, r2, #4
   2132c:	2903      	cmp	r1, #3
   2132e:	bf18      	it	ne
   21330:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   21332:	490e      	ldr	r1, [pc, #56]	; (2136c <InitAes.part.0+0xe0>)
   21334:	ea4f 0282 	mov.w	r2, r2, lsl #2
   21338:	bf18      	it	ne
   2133a:	f003 0301 	andne.w	r3, r3, #1
   2133e:	f002 021c 	and.w	r2, r2, #28
   21342:	4313      	orrs	r3, r2
   21344:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   21348:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2134a:	2b07      	cmp	r3, #7
   2134c:	bf04      	itt	eq
   2134e:	2301      	moveq	r3, #1
   21350:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   21354:	2000      	movs	r0, #0
   21356:	bd38      	pop	{r3, r4, r5, pc}
   21358:	2b01      	cmp	r3, #1
   2135a:	bf0c      	ite	eq
   2135c:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   21360:	f020 0010 	bicne.w	r0, r0, #16
   21364:	f7fe fe56 	bl	20014 <CC_HalMaskInterrupt>
   21368:	e7c4      	b.n	212f4 <InitAes.part.0+0x68>
   2136a:	bf00      	nop
   2136c:	5002b000 	.word	0x5002b000

00021370 <write_invalid_key>:
   21370:	4a09      	ldr	r2, [pc, #36]	; (21398 <write_invalid_key+0x28>)
   21372:	4b0a      	ldr	r3, [pc, #40]	; (2139c <write_invalid_key+0x2c>)
   21374:	6811      	ldr	r1, [r2, #0]
   21376:	6809      	ldr	r1, [r1, #0]
   21378:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   2137c:	6811      	ldr	r1, [r2, #0]
   2137e:	6849      	ldr	r1, [r1, #4]
   21380:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   21384:	6811      	ldr	r1, [r2, #0]
   21386:	6889      	ldr	r1, [r1, #8]
   21388:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   2138c:	6812      	ldr	r2, [r2, #0]
   2138e:	68d2      	ldr	r2, [r2, #12]
   21390:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   21394:	4770      	bx	lr
   21396:	bf00      	nop
   21398:	2000091c 	.word	0x2000091c
   2139c:	5002b000 	.word	0x5002b000

000213a0 <ProcessAesDrv>:
   213a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213a4:	b085      	sub	sp, #20
   213a6:	2900      	cmp	r1, #0
   213a8:	f000 80a3 	beq.w	214f2 <ProcessAesDrv+0x152>
   213ac:	4690      	mov	r8, r2
   213ae:	2a00      	cmp	r2, #0
   213b0:	f000 809f 	beq.w	214f2 <ProcessAesDrv+0x152>
   213b4:	4605      	mov	r5, r0
   213b6:	2800      	cmp	r0, #0
   213b8:	f000 813c 	beq.w	21634 <ProcessAesDrv+0x294>
   213bc:	4699      	mov	r9, r3
   213be:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   213c0:	460e      	mov	r6, r1
   213c2:	2b00      	cmp	r3, #0
   213c4:	d151      	bne.n	2146a <ProcessAesDrv+0xca>
   213c6:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   213ca:	d253      	bcs.n	21474 <ProcessAesDrv+0xd4>
   213cc:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   213d0:	2b04      	cmp	r3, #4
   213d2:	f000 8112 	beq.w	215fa <ProcessAesDrv+0x25a>
   213d6:	2700      	movs	r7, #0
   213d8:	48a6      	ldr	r0, [pc, #664]	; (21674 <ProcessAesDrv+0x2d4>)
   213da:	f04f 31ff 	mov.w	r1, #4294967295
   213de:	f7fe feb5 	bl	2014c <CC_PalMutexLock>
   213e2:	2800      	cmp	r0, #0
   213e4:	f040 80e8 	bne.w	215b8 <ProcessAesDrv+0x218>
   213e8:	2000      	movs	r0, #0
   213ea:	f7fe fedf 	bl	201ac <CC_PalPowerSaveModeSelect>
   213ee:	2800      	cmp	r0, #0
   213f0:	f040 80eb 	bne.w	215ca <ProcessAesDrv+0x22a>
   213f4:	48a0      	ldr	r0, [pc, #640]	; (21678 <ProcessAesDrv+0x2d8>)
   213f6:	2301      	movs	r3, #1
   213f8:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   213fc:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   21400:	2c00      	cmp	r4, #0
   21402:	d1fb      	bne.n	213fc <ProcessAesDrv+0x5c>
   21404:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21406:	2b03      	cmp	r3, #3
   21408:	dc39      	bgt.n	2147e <ProcessAesDrv+0xde>
   2140a:	2b00      	cmp	r3, #0
   2140c:	da3a      	bge.n	21484 <ProcessAesDrv+0xe4>
   2140e:	4c9b      	ldr	r4, [pc, #620]	; (2167c <ProcessAesDrv+0x2dc>)
   21410:	4a99      	ldr	r2, [pc, #612]	; (21678 <ProcessAesDrv+0x2d8>)
   21412:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   21416:	2b00      	cmp	r3, #0
   21418:	d1fb      	bne.n	21412 <ProcessAesDrv+0x72>
   2141a:	2f00      	cmp	r7, #0
   2141c:	f040 80e4 	bne.w	215e8 <ProcessAesDrv+0x248>
   21420:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21422:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   21424:	f023 0304 	bic.w	r3, r3, #4
   21428:	2b03      	cmp	r3, #3
   2142a:	4b93      	ldr	r3, [pc, #588]	; (21678 <ProcessAesDrv+0x2d8>)
   2142c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   21430:	d056      	beq.n	214e0 <ProcessAesDrv+0x140>
   21432:	2a01      	cmp	r2, #1
   21434:	bf0c      	ite	eq
   21436:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2143a:	f040 0020 	orrne.w	r0, r0, #32
   2143e:	f7fe fde9 	bl	20014 <CC_HalMaskInterrupt>
   21442:	4b8d      	ldr	r3, [pc, #564]	; (21678 <ProcessAesDrv+0x2d8>)
   21444:	2200      	movs	r2, #0
   21446:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   2144a:	2001      	movs	r0, #1
   2144c:	f7fe feae 	bl	201ac <CC_PalPowerSaveModeSelect>
   21450:	2800      	cmp	r0, #0
   21452:	f040 80c5 	bne.w	215e0 <ProcessAesDrv+0x240>
   21456:	4887      	ldr	r0, [pc, #540]	; (21674 <ProcessAesDrv+0x2d4>)
   21458:	f7fe fe80 	bl	2015c <CC_PalMutexUnlock>
   2145c:	2800      	cmp	r0, #0
   2145e:	f040 80b8 	bne.w	215d2 <ProcessAesDrv+0x232>
   21462:	4620      	mov	r0, r4
   21464:	b005      	add	sp, #20
   21466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2146a:	2b01      	cmp	r3, #1
   2146c:	d1ae      	bne.n	213cc <ProcessAesDrv+0x2c>
   2146e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   21472:	d3ab      	bcc.n	213cc <ProcessAesDrv+0x2c>
   21474:	4c82      	ldr	r4, [pc, #520]	; (21680 <ProcessAesDrv+0x2e0>)
   21476:	4620      	mov	r0, r4
   21478:	b005      	add	sp, #20
   2147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2147e:	3b06      	subs	r3, #6
   21480:	2b01      	cmp	r3, #1
   21482:	d8c4      	bhi.n	2140e <ProcessAesDrv+0x6e>
   21484:	6bab      	ldr	r3, [r5, #56]	; 0x38
   21486:	2b01      	cmp	r3, #1
   21488:	f200 80d2 	bhi.w	21630 <ProcessAesDrv+0x290>
   2148c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2148e:	2b01      	cmp	r3, #1
   21490:	d834      	bhi.n	214fc <ProcessAesDrv+0x15c>
   21492:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   21494:	2b01      	cmp	r3, #1
   21496:	f200 8122 	bhi.w	216de <ProcessAesDrv+0x33e>
   2149a:	4628      	mov	r0, r5
   2149c:	f7ff fef6 	bl	2128c <InitAes.part.0>
   214a0:	4604      	mov	r4, r0
   214a2:	2800      	cmp	r0, #0
   214a4:	d1b4      	bne.n	21410 <ProcessAesDrv+0x70>
   214a6:	4628      	mov	r0, r5
   214a8:	f7ff fe9e 	bl	211e8 <LoadAesKey>
   214ac:	4604      	mov	r4, r0
   214ae:	2800      	cmp	r0, #0
   214b0:	d1ae      	bne.n	21410 <ProcessAesDrv+0x70>
   214b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   214b4:	2b07      	cmp	r3, #7
   214b6:	d8aa      	bhi.n	2140e <ProcessAesDrv+0x6e>
   214b8:	a201      	add	r2, pc, #4	; (adr r2, 214c0 <ProcessAesDrv+0x120>)
   214ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   214be:	bf00      	nop
   214c0:	0002151d 	.word	0x0002151d
   214c4:	00021501 	.word	0x00021501
   214c8:	000216a5 	.word	0x000216a5
   214cc:	00021501 	.word	0x00021501
   214d0:	0002140f 	.word	0x0002140f
   214d4:	0002140f 	.word	0x0002140f
   214d8:	000216a5 	.word	0x000216a5
   214dc:	00021501 	.word	0x00021501
   214e0:	2a01      	cmp	r2, #1
   214e2:	bf0c      	ite	eq
   214e4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   214e8:	f040 0010 	orrne.w	r0, r0, #16
   214ec:	f7fe fd92 	bl	20014 <CC_HalMaskInterrupt>
   214f0:	e7a7      	b.n	21442 <ProcessAesDrv+0xa2>
   214f2:	4c64      	ldr	r4, [pc, #400]	; (21684 <ProcessAesDrv+0x2e4>)
   214f4:	4620      	mov	r0, r4
   214f6:	b005      	add	sp, #20
   214f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214fc:	4c62      	ldr	r4, [pc, #392]	; (21688 <ProcessAesDrv+0x2e8>)
   214fe:	e787      	b.n	21410 <ProcessAesDrv+0x70>
   21500:	4b5d      	ldr	r3, [pc, #372]	; (21678 <ProcessAesDrv+0x2d8>)
   21502:	682a      	ldr	r2, [r5, #0]
   21504:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   21508:	686a      	ldr	r2, [r5, #4]
   2150a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2150e:	68aa      	ldr	r2, [r5, #8]
   21510:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   21514:	68ea      	ldr	r2, [r5, #12]
   21516:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2151a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2151c:	6832      	ldr	r2, [r6, #0]
   2151e:	f023 0304 	bic.w	r3, r3, #4
   21522:	2b03      	cmp	r3, #3
   21524:	d00d      	beq.n	21542 <ProcessAesDrv+0x1a2>
   21526:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   21528:	f8d8 1000 	ldr.w	r1, [r8]
   2152c:	2b01      	cmp	r3, #1
   2152e:	4b52      	ldr	r3, [pc, #328]	; (21678 <ProcessAesDrv+0x2d8>)
   21530:	bf0b      	itete	eq
   21532:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   21536:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   2153a:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2153e:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   21542:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   21544:	2b01      	cmp	r3, #1
   21546:	4b4c      	ldr	r3, [pc, #304]	; (21678 <ProcessAesDrv+0x2d8>)
   21548:	bf0b      	itete	eq
   2154a:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2154e:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   21552:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   21556:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   2155a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2155c:	f023 0304 	bic.w	r3, r3, #4
   21560:	2b03      	cmp	r3, #3
   21562:	d06a      	beq.n	2163a <ProcessAesDrv+0x29a>
   21564:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   21566:	2b01      	cmp	r3, #1
   21568:	bf0c      	ite	eq
   2156a:	2080      	moveq	r0, #128	; 0x80
   2156c:	2020      	movne	r0, #32
   2156e:	f7fe fd57 	bl	20020 <CC_HalWaitInterrupt>
   21572:	4604      	mov	r4, r0
   21574:	2800      	cmp	r0, #0
   21576:	f47f af4b 	bne.w	21410 <ProcessAesDrv+0x70>
   2157a:	4b3f      	ldr	r3, [pc, #252]	; (21678 <ProcessAesDrv+0x2d8>)
   2157c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   21580:	2c00      	cmp	r4, #0
   21582:	d1fb      	bne.n	2157c <ProcessAesDrv+0x1dc>
   21584:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21586:	3b01      	subs	r3, #1
   21588:	2b06      	cmp	r3, #6
   2158a:	d812      	bhi.n	215b2 <ProcessAesDrv+0x212>
   2158c:	e8df f003 	tbb	[pc, r3]
   21590:	11049904 	.word	0x11049904
   21594:	9911      	.short	0x9911
   21596:	04          	.byte	0x04
   21597:	00          	.byte	0x00
   21598:	4b37      	ldr	r3, [pc, #220]	; (21678 <ProcessAesDrv+0x2d8>)
   2159a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   2159e:	602a      	str	r2, [r5, #0]
   215a0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   215a4:	606a      	str	r2, [r5, #4]
   215a6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   215aa:	60aa      	str	r2, [r5, #8]
   215ac:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   215b0:	60eb      	str	r3, [r5, #12]
   215b2:	2301      	movs	r3, #1
   215b4:	65ab      	str	r3, [r5, #88]	; 0x58
   215b6:	e72b      	b.n	21410 <ProcessAesDrv+0x70>
   215b8:	4834      	ldr	r0, [pc, #208]	; (2168c <ProcessAesDrv+0x2ec>)
   215ba:	f7fd fe4b 	bl	1f254 <CC_PalAbort>
   215be:	2000      	movs	r0, #0
   215c0:	f7fe fdf4 	bl	201ac <CC_PalPowerSaveModeSelect>
   215c4:	2800      	cmp	r0, #0
   215c6:	f43f af15 	beq.w	213f4 <ProcessAesDrv+0x54>
   215ca:	4831      	ldr	r0, [pc, #196]	; (21690 <ProcessAesDrv+0x2f0>)
   215cc:	f7fd fe42 	bl	1f254 <CC_PalAbort>
   215d0:	e710      	b.n	213f4 <ProcessAesDrv+0x54>
   215d2:	4830      	ldr	r0, [pc, #192]	; (21694 <ProcessAesDrv+0x2f4>)
   215d4:	f7fd fe3e 	bl	1f254 <CC_PalAbort>
   215d8:	4620      	mov	r0, r4
   215da:	b005      	add	sp, #20
   215dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215e0:	482d      	ldr	r0, [pc, #180]	; (21698 <ProcessAesDrv+0x2f8>)
   215e2:	f7fd fe37 	bl	1f254 <CC_PalAbort>
   215e6:	e736      	b.n	21456 <ProcessAesDrv+0xb6>
   215e8:	2304      	movs	r3, #4
   215ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   215ee:	2120      	movs	r1, #32
   215f0:	f105 0010 	add.w	r0, r5, #16
   215f4:	f7fe fd92 	bl	2011c <CC_PalMemSetZeroPlat>
   215f8:	e712      	b.n	21420 <ProcessAesDrv+0x80>
   215fa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   215fc:	6c28      	ldr	r0, [r5, #64]	; 0x40
   215fe:	f000 f9b5 	bl	2196c <kmu_validate_slot_and_size>
   21602:	b998      	cbnz	r0, 2162c <ProcessAesDrv+0x28c>
   21604:	4f25      	ldr	r7, [pc, #148]	; (2169c <ProcessAesDrv+0x2fc>)
   21606:	4c1c      	ldr	r4, [pc, #112]	; (21678 <ProcessAesDrv+0x2d8>)
   21608:	683b      	ldr	r3, [r7, #0]
   2160a:	681b      	ldr	r3, [r3, #0]
   2160c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   21610:	683b      	ldr	r3, [r7, #0]
   21612:	685b      	ldr	r3, [r3, #4]
   21614:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   21618:	683b      	ldr	r3, [r7, #0]
   2161a:	689b      	ldr	r3, [r3, #8]
   2161c:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   21620:	683b      	ldr	r3, [r7, #0]
   21622:	68db      	ldr	r3, [r3, #12]
   21624:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   21628:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2162a:	b161      	cbz	r1, 21646 <ProcessAesDrv+0x2a6>
   2162c:	2701      	movs	r7, #1
   2162e:	e6d3      	b.n	213d8 <ProcessAesDrv+0x38>
   21630:	4c1b      	ldr	r4, [pc, #108]	; (216a0 <ProcessAesDrv+0x300>)
   21632:	e6ed      	b.n	21410 <ProcessAesDrv+0x70>
   21634:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   21638:	e713      	b.n	21462 <ProcessAesDrv+0xc2>
   2163a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2163c:	2b01      	cmp	r3, #1
   2163e:	bf0c      	ite	eq
   21640:	2040      	moveq	r0, #64	; 0x40
   21642:	2010      	movne	r0, #16
   21644:	e793      	b.n	2156e <ProcessAesDrv+0x1ce>
   21646:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21648:	9301      	str	r3, [sp, #4]
   2164a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2164c:	9300      	str	r3, [sp, #0]
   2164e:	f105 0a10 	add.w	sl, r5, #16
   21652:	f04f 0b10 	mov.w	fp, #16
   21656:	f8cd a008 	str.w	sl, [sp, #8]
   2165a:	f8cd b00c 	str.w	fp, [sp, #12]
   2165e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   21662:	6c28      	ldr	r0, [r5, #64]	; 0x40
   21664:	f000 f9a4 	bl	219b0 <kmu_derive_cmac>
   21668:	2800      	cmp	r0, #0
   2166a:	d13a      	bne.n	216e2 <ProcessAesDrv+0x342>
   2166c:	2300      	movs	r3, #0
   2166e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   21672:	e7db      	b.n	2162c <ProcessAesDrv+0x28c>
   21674:	2000092c 	.word	0x2000092c
   21678:	5002b000 	.word	0x5002b000
   2167c:	00f10001 	.word	0x00f10001
   21680:	00f10005 	.word	0x00f10005
   21684:	00f1000b 	.word	0x00f1000b
   21688:	00f10003 	.word	0x00f10003
   2168c:	0002687c 	.word	0x0002687c
   21690:	00026894 	.word	0x00026894
   21694:	000268d4 	.word	0x000268d4
   21698:	000268b4 	.word	0x000268b4
   2169c:	2000091c 	.word	0x2000091c
   216a0:	00f10002 	.word	0x00f10002
   216a4:	4b19      	ldr	r3, [pc, #100]	; (2170c <ProcessAesDrv+0x36c>)
   216a6:	682a      	ldr	r2, [r5, #0]
   216a8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   216ac:	686a      	ldr	r2, [r5, #4]
   216ae:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   216b2:	68aa      	ldr	r2, [r5, #8]
   216b4:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   216b8:	68ea      	ldr	r2, [r5, #12]
   216ba:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   216be:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   216c0:	e72c      	b.n	2151c <ProcessAesDrv+0x17c>
   216c2:	4b12      	ldr	r3, [pc, #72]	; (2170c <ProcessAesDrv+0x36c>)
   216c4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   216c8:	602a      	str	r2, [r5, #0]
   216ca:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   216ce:	606a      	str	r2, [r5, #4]
   216d0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   216d4:	60aa      	str	r2, [r5, #8]
   216d6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   216da:	60eb      	str	r3, [r5, #12]
   216dc:	e769      	b.n	215b2 <ProcessAesDrv+0x212>
   216de:	4c0c      	ldr	r4, [pc, #48]	; (21710 <ProcessAesDrv+0x370>)
   216e0:	e696      	b.n	21410 <ProcessAesDrv+0x70>
   216e2:	683b      	ldr	r3, [r7, #0]
   216e4:	681b      	ldr	r3, [r3, #0]
   216e6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   216ea:	683b      	ldr	r3, [r7, #0]
   216ec:	685b      	ldr	r3, [r3, #4]
   216ee:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   216f2:	683b      	ldr	r3, [r7, #0]
   216f4:	689b      	ldr	r3, [r3, #8]
   216f6:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   216fa:	683b      	ldr	r3, [r7, #0]
   216fc:	68db      	ldr	r3, [r3, #12]
   216fe:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   21702:	4659      	mov	r1, fp
   21704:	4650      	mov	r0, sl
   21706:	f7fe fd09 	bl	2011c <CC_PalMemSetZeroPlat>
   2170a:	e7af      	b.n	2166c <ProcessAesDrv+0x2cc>
   2170c:	5002b000 	.word	0x5002b000
   21710:	00f10004 	.word	0x00f10004

00021714 <FinishAesDrv>:
   21714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21718:	b301      	cbz	r1, 2175c <FinishAesDrv+0x48>
   2171a:	b1fa      	cbz	r2, 2175c <FinishAesDrv+0x48>
   2171c:	4604      	mov	r4, r0
   2171e:	2800      	cmp	r0, #0
   21720:	d07c      	beq.n	2181c <FinishAesDrv+0x108>
   21722:	461d      	mov	r5, r3
   21724:	6b43      	ldr	r3, [r0, #52]	; 0x34
   21726:	2b07      	cmp	r3, #7
   21728:	460e      	mov	r6, r1
   2172a:	d01b      	beq.n	21764 <FinishAesDrv+0x50>
   2172c:	b95d      	cbnz	r5, 21746 <FinishAesDrv+0x32>
   2172e:	2b03      	cmp	r3, #3
   21730:	d110      	bne.n	21754 <FinishAesDrv+0x40>
   21732:	6d83      	ldr	r3, [r0, #88]	; 0x58
   21734:	b973      	cbnz	r3, 21754 <FinishAesDrv+0x40>
   21736:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2173a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2173e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   21742:	600b      	str	r3, [r1, #0]
   21744:	2510      	movs	r5, #16
   21746:	462b      	mov	r3, r5
   21748:	4631      	mov	r1, r6
   2174a:	4620      	mov	r0, r4
   2174c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21750:	f7ff be26 	b.w	213a0 <ProcessAesDrv>
   21754:	462f      	mov	r7, r5
   21756:	4638      	mov	r0, r7
   21758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2175c:	4f77      	ldr	r7, [pc, #476]	; (2193c <FinishAesDrv+0x228>)
   2175e:	4638      	mov	r0, r7
   21760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21764:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   21766:	2b00      	cmp	r3, #0
   21768:	d15b      	bne.n	21822 <FinishAesDrv+0x10e>
   2176a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2176e:	d25d      	bcs.n	2182c <FinishAesDrv+0x118>
   21770:	b915      	cbnz	r5, 21778 <FinishAesDrv+0x64>
   21772:	6da3      	ldr	r3, [r4, #88]	; 0x58
   21774:	2b00      	cmp	r3, #0
   21776:	d159      	bne.n	2182c <FinishAesDrv+0x118>
   21778:	4871      	ldr	r0, [pc, #452]	; (21940 <FinishAesDrv+0x22c>)
   2177a:	f04f 31ff 	mov.w	r1, #4294967295
   2177e:	f7fe fce5 	bl	2014c <CC_PalMutexLock>
   21782:	2800      	cmp	r0, #0
   21784:	f040 80b8 	bne.w	218f8 <FinishAesDrv+0x1e4>
   21788:	2000      	movs	r0, #0
   2178a:	f7fe fd0f 	bl	201ac <CC_PalPowerSaveModeSelect>
   2178e:	2800      	cmp	r0, #0
   21790:	f040 80ae 	bne.w	218f0 <FinishAesDrv+0x1dc>
   21794:	4a6b      	ldr	r2, [pc, #428]	; (21944 <FinishAesDrv+0x230>)
   21796:	2301      	movs	r3, #1
   21798:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   2179c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   217a0:	2b00      	cmp	r3, #0
   217a2:	d1fb      	bne.n	2179c <FinishAesDrv+0x88>
   217a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   217a6:	2b03      	cmp	r3, #3
   217a8:	dd20      	ble.n	217ec <FinishAesDrv+0xd8>
   217aa:	3b06      	subs	r3, #6
   217ac:	2b01      	cmp	r3, #1
   217ae:	d81f      	bhi.n	217f0 <FinishAesDrv+0xdc>
   217b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   217b2:	2b01      	cmp	r3, #1
   217b4:	d83c      	bhi.n	21830 <FinishAesDrv+0x11c>
   217b6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   217b8:	2b01      	cmp	r3, #1
   217ba:	f200 80a5 	bhi.w	21908 <FinishAesDrv+0x1f4>
   217be:	6e23      	ldr	r3, [r4, #96]	; 0x60
   217c0:	2b01      	cmp	r3, #1
   217c2:	f200 80a3 	bhi.w	2190c <FinishAesDrv+0x1f8>
   217c6:	4620      	mov	r0, r4
   217c8:	f7ff fd60 	bl	2128c <InitAes.part.0>
   217cc:	4607      	mov	r7, r0
   217ce:	b980      	cbnz	r0, 217f2 <FinishAesDrv+0xde>
   217d0:	4620      	mov	r0, r4
   217d2:	f7ff fd09 	bl	211e8 <LoadAesKey>
   217d6:	4607      	mov	r7, r0
   217d8:	b958      	cbnz	r0, 217f2 <FinishAesDrv+0xde>
   217da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   217dc:	2b07      	cmp	r3, #7
   217de:	d807      	bhi.n	217f0 <FinishAesDrv+0xdc>
   217e0:	e8df f003 	tbb	[pc, r3]
   217e4:	285c2835 	.word	0x285c2835
   217e8:	285c0606 	.word	0x285c0606
   217ec:	2b00      	cmp	r3, #0
   217ee:	dadf      	bge.n	217b0 <FinishAesDrv+0x9c>
   217f0:	4f55      	ldr	r7, [pc, #340]	; (21948 <FinishAesDrv+0x234>)
   217f2:	4a54      	ldr	r2, [pc, #336]	; (21944 <FinishAesDrv+0x230>)
   217f4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   217f8:	2b00      	cmp	r3, #0
   217fa:	d1fb      	bne.n	217f4 <FinishAesDrv+0xe0>
   217fc:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   21800:	2001      	movs	r0, #1
   21802:	f7fe fcd3 	bl	201ac <CC_PalPowerSaveModeSelect>
   21806:	2800      	cmp	r0, #0
   21808:	d17a      	bne.n	21900 <FinishAesDrv+0x1ec>
   2180a:	484d      	ldr	r0, [pc, #308]	; (21940 <FinishAesDrv+0x22c>)
   2180c:	f7fe fca6 	bl	2015c <CC_PalMutexUnlock>
   21810:	2800      	cmp	r0, #0
   21812:	d0a0      	beq.n	21756 <FinishAesDrv+0x42>
   21814:	484d      	ldr	r0, [pc, #308]	; (2194c <FinishAesDrv+0x238>)
   21816:	f7fd fd1d 	bl	1f254 <CC_PalAbort>
   2181a:	e79c      	b.n	21756 <FinishAesDrv+0x42>
   2181c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   21820:	e799      	b.n	21756 <FinishAesDrv+0x42>
   21822:	2b01      	cmp	r3, #1
   21824:	d1a4      	bne.n	21770 <FinishAesDrv+0x5c>
   21826:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2182a:	d3a1      	bcc.n	21770 <FinishAesDrv+0x5c>
   2182c:	4f48      	ldr	r7, [pc, #288]	; (21950 <FinishAesDrv+0x23c>)
   2182e:	e792      	b.n	21756 <FinishAesDrv+0x42>
   21830:	4f48      	ldr	r7, [pc, #288]	; (21954 <FinishAesDrv+0x240>)
   21832:	e7de      	b.n	217f2 <FinishAesDrv+0xde>
   21834:	4b43      	ldr	r3, [pc, #268]	; (21944 <FinishAesDrv+0x230>)
   21836:	6822      	ldr	r2, [r4, #0]
   21838:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2183c:	6862      	ldr	r2, [r4, #4]
   2183e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   21842:	68a2      	ldr	r2, [r4, #8]
   21844:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   21848:	68e2      	ldr	r2, [r4, #12]
   2184a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2184e:	4b3d      	ldr	r3, [pc, #244]	; (21944 <FinishAesDrv+0x230>)
   21850:	2201      	movs	r2, #1
   21852:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   21856:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   2185a:	2d00      	cmp	r5, #0
   2185c:	d158      	bne.n	21910 <FinishAesDrv+0x1fc>
   2185e:	6da1      	ldr	r1, [r4, #88]	; 0x58
   21860:	b909      	cbnz	r1, 21866 <FinishAesDrv+0x152>
   21862:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   21866:	4b37      	ldr	r3, [pc, #220]	; (21944 <FinishAesDrv+0x230>)
   21868:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   2186c:	2f00      	cmp	r7, #0
   2186e:	d1fb      	bne.n	21868 <FinishAesDrv+0x154>
   21870:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21872:	3b01      	subs	r3, #1
   21874:	2b06      	cmp	r3, #6
   21876:	d8bc      	bhi.n	217f2 <FinishAesDrv+0xde>
   21878:	a201      	add	r2, pc, #4	; (adr r2, 21880 <FinishAesDrv+0x16c>)
   2187a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2187e:	bf00      	nop
   21880:	000218b9 	.word	0x000218b9
   21884:	000218d5 	.word	0x000218d5
   21888:	000218b9 	.word	0x000218b9
   2188c:	000217f3 	.word	0x000217f3
   21890:	000217f3 	.word	0x000217f3
   21894:	000218d5 	.word	0x000218d5
   21898:	000218b9 	.word	0x000218b9
   2189c:	4b29      	ldr	r3, [pc, #164]	; (21944 <FinishAesDrv+0x230>)
   2189e:	6822      	ldr	r2, [r4, #0]
   218a0:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   218a4:	6862      	ldr	r2, [r4, #4]
   218a6:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   218aa:	68a2      	ldr	r2, [r4, #8]
   218ac:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   218b0:	68e2      	ldr	r2, [r4, #12]
   218b2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   218b6:	e7ca      	b.n	2184e <FinishAesDrv+0x13a>
   218b8:	4b22      	ldr	r3, [pc, #136]	; (21944 <FinishAesDrv+0x230>)
   218ba:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   218be:	6022      	str	r2, [r4, #0]
   218c0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   218c4:	6062      	str	r2, [r4, #4]
   218c6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   218ca:	60a2      	str	r2, [r4, #8]
   218cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   218d0:	60e3      	str	r3, [r4, #12]
   218d2:	e78e      	b.n	217f2 <FinishAesDrv+0xde>
   218d4:	4b1b      	ldr	r3, [pc, #108]	; (21944 <FinishAesDrv+0x230>)
   218d6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   218da:	6022      	str	r2, [r4, #0]
   218dc:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   218e0:	6062      	str	r2, [r4, #4]
   218e2:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   218e6:	60a2      	str	r2, [r4, #8]
   218e8:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   218ec:	60e3      	str	r3, [r4, #12]
   218ee:	e780      	b.n	217f2 <FinishAesDrv+0xde>
   218f0:	4819      	ldr	r0, [pc, #100]	; (21958 <FinishAesDrv+0x244>)
   218f2:	f7fd fcaf 	bl	1f254 <CC_PalAbort>
   218f6:	e74d      	b.n	21794 <FinishAesDrv+0x80>
   218f8:	4818      	ldr	r0, [pc, #96]	; (2195c <FinishAesDrv+0x248>)
   218fa:	f7fd fcab 	bl	1f254 <CC_PalAbort>
   218fe:	e743      	b.n	21788 <FinishAesDrv+0x74>
   21900:	4817      	ldr	r0, [pc, #92]	; (21960 <FinishAesDrv+0x24c>)
   21902:	f7fd fca7 	bl	1f254 <CC_PalAbort>
   21906:	e780      	b.n	2180a <FinishAesDrv+0xf6>
   21908:	4f16      	ldr	r7, [pc, #88]	; (21964 <FinishAesDrv+0x250>)
   2190a:	e772      	b.n	217f2 <FinishAesDrv+0xde>
   2190c:	4f16      	ldr	r7, [pc, #88]	; (21968 <FinishAesDrv+0x254>)
   2190e:	e770      	b.n	217f2 <FinishAesDrv+0xde>
   21910:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   21912:	6832      	ldr	r2, [r6, #0]
   21914:	2901      	cmp	r1, #1
   21916:	d00a      	beq.n	2192e <FinishAesDrv+0x21a>
   21918:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   2191c:	2010      	movs	r0, #16
   2191e:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   21922:	f7fe fb7d 	bl	20020 <CC_HalWaitInterrupt>
   21926:	4607      	mov	r7, r0
   21928:	2800      	cmp	r0, #0
   2192a:	d09c      	beq.n	21866 <FinishAesDrv+0x152>
   2192c:	e761      	b.n	217f2 <FinishAesDrv+0xde>
   2192e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   21932:	2040      	movs	r0, #64	; 0x40
   21934:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   21938:	e7f3      	b.n	21922 <FinishAesDrv+0x20e>
   2193a:	bf00      	nop
   2193c:	00f1000b 	.word	0x00f1000b
   21940:	2000092c 	.word	0x2000092c
   21944:	5002b000 	.word	0x5002b000
   21948:	00f10001 	.word	0x00f10001
   2194c:	000268d4 	.word	0x000268d4
   21950:	00f10005 	.word	0x00f10005
   21954:	00f10002 	.word	0x00f10002
   21958:	00026894 	.word	0x00026894
   2195c:	0002687c 	.word	0x0002687c
   21960:	000268b4 	.word	0x000268b4
   21964:	00f10003 	.word	0x00f10003
   21968:	00f10004 	.word	0x00f10004

0002196c <kmu_validate_slot_and_size>:
   2196c:	b921      	cbnz	r1, 21978 <kmu_validate_slot_and_size+0xc>
   2196e:	4b03      	ldr	r3, [pc, #12]	; (2197c <kmu_validate_slot_and_size+0x10>)
   21970:	2800      	cmp	r0, #0
   21972:	bf18      	it	ne
   21974:	4618      	movne	r0, r3
   21976:	4770      	bx	lr
   21978:	4801      	ldr	r0, [pc, #4]	; (21980 <kmu_validate_slot_and_size+0x14>)
   2197a:	4770      	bx	lr
   2197c:	00f70001 	.word	0x00f70001
   21980:	00f70003 	.word	0x00f70003

00021984 <kmu_validate_kdr_slot_and_size>:
   21984:	b921      	cbnz	r1, 21990 <kmu_validate_kdr_slot_and_size+0xc>
   21986:	4b03      	ldr	r3, [pc, #12]	; (21994 <kmu_validate_kdr_slot_and_size+0x10>)
   21988:	2800      	cmp	r0, #0
   2198a:	bf18      	it	ne
   2198c:	4618      	movne	r0, r3
   2198e:	4770      	bx	lr
   21990:	4801      	ldr	r0, [pc, #4]	; (21998 <kmu_validate_kdr_slot_and_size+0x14>)
   21992:	4770      	bx	lr
   21994:	00f70001 	.word	0x00f70001
   21998:	00f70003 	.word	0x00f70003

0002199c <kmu_use_kdr_key>:
   2199c:	4b03      	ldr	r3, [pc, #12]	; (219ac <kmu_use_kdr_key+0x10>)
   2199e:	2000      	movs	r0, #0
   219a0:	2201      	movs	r2, #1
   219a2:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   219a6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   219aa:	4770      	bx	lr
   219ac:	5002b000 	.word	0x5002b000

000219b0 <kmu_derive_cmac>:
   219b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219b4:	b0cc      	sub	sp, #304	; 0x130
   219b6:	2400      	movs	r4, #0
   219b8:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   219ba:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   219be:	4682      	mov	sl, r0
   219c0:	4689      	mov	r9, r1
   219c2:	4616      	mov	r6, r2
   219c4:	4621      	mov	r1, r4
   219c6:	2274      	movs	r2, #116	; 0x74
   219c8:	a80e      	add	r0, sp, #56	; 0x38
   219ca:	461f      	mov	r7, r3
   219cc:	f001 f9fd 	bl	22dca <memset>
   219d0:	2280      	movs	r2, #128	; 0x80
   219d2:	4621      	mov	r1, r4
   219d4:	a82c      	add	r0, sp, #176	; 0xb0
   219d6:	942b      	str	r4, [sp, #172]	; 0xac
   219d8:	f001 f9f7 	bl	22dca <memset>
   219dc:	2384      	movs	r3, #132	; 0x84
   219de:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   219e2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   219e6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   219ea:	9305      	str	r3, [sp, #20]
   219ec:	d863      	bhi.n	21ab6 <kmu_derive_cmac+0x106>
   219ee:	f7ff fcbf 	bl	21370 <write_invalid_key>
   219f2:	ab05      	add	r3, sp, #20
   219f4:	4630      	mov	r0, r6
   219f6:	ae2b      	add	r6, sp, #172	; 0xac
   219f8:	9301      	str	r3, [sp, #4]
   219fa:	9502      	str	r5, [sp, #8]
   219fc:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   21a00:	4639      	mov	r1, r7
   21a02:	9600      	str	r6, [sp, #0]
   21a04:	f000 f862 	bl	21acc <UtilCmacBuildDataForDerivation>
   21a08:	2800      	cmp	r0, #0
   21a0a:	d14f      	bne.n	21aac <kmu_derive_cmac+0xfc>
   21a0c:	2303      	movs	r3, #3
   21a0e:	f88d 3013 	strb.w	r3, [sp, #19]
   21a12:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21a16:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   21a1a:	2307      	movs	r3, #7
   21a1c:	2200      	movs	r2, #0
   21a1e:	901c      	str	r0, [sp, #112]	; 0x70
   21a20:	2110      	movs	r1, #16
   21a22:	a80e      	add	r0, sp, #56	; 0x38
   21a24:	931b      	str	r3, [sp, #108]	; 0x6c
   21a26:	2401      	movs	r4, #1
   21a28:	2301      	movs	r3, #1
   21a2a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   21a2e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   21a32:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   21a36:	9426      	str	r4, [sp, #152]	; 0x98
   21a38:	f10d 0920 	add.w	r9, sp, #32
   21a3c:	f7fe fb6e 	bl	2011c <CC_PalMemSetZeroPlat>
   21a40:	2210      	movs	r2, #16
   21a42:	9200      	str	r2, [sp, #0]
   21a44:	9905      	ldr	r1, [sp, #20]
   21a46:	f8cd 9004 	str.w	r9, [sp, #4]
   21a4a:	ab0a      	add	r3, sp, #40	; 0x28
   21a4c:	4630      	mov	r0, r6
   21a4e:	aa06      	add	r2, sp, #24
   21a50:	f7ff fa1e 	bl	20e90 <SetDataBuffersInfo>
   21a54:	4607      	mov	r7, r0
   21a56:	b170      	cbz	r0, 21a76 <kmu_derive_cmac+0xc6>
   21a58:	e01d      	b.n	21a96 <kmu_derive_cmac+0xe6>
   21a5a:	a90e      	add	r1, sp, #56	; 0x38
   21a5c:	eb08 0007 	add.w	r0, r8, r7
   21a60:	f7fe fb58 	bl	20114 <CC_PalMemCopyPlat>
   21a64:	2110      	movs	r1, #16
   21a66:	a80e      	add	r0, sp, #56	; 0x38
   21a68:	f7fe fb58 	bl	2011c <CC_PalMemSetZeroPlat>
   21a6c:	3401      	adds	r4, #1
   21a6e:	1bad      	subs	r5, r5, r6
   21a70:	4437      	add	r7, r6
   21a72:	b2e4      	uxtb	r4, r4
   21a74:	d024      	beq.n	21ac0 <kmu_derive_cmac+0x110>
   21a76:	2d10      	cmp	r5, #16
   21a78:	464a      	mov	r2, r9
   21a7a:	9b05      	ldr	r3, [sp, #20]
   21a7c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   21a80:	a906      	add	r1, sp, #24
   21a82:	a80e      	add	r0, sp, #56	; 0x38
   21a84:	462e      	mov	r6, r5
   21a86:	bf28      	it	cs
   21a88:	2610      	movcs	r6, #16
   21a8a:	f7ff fe43 	bl	21714 <FinishAesDrv>
   21a8e:	4632      	mov	r2, r6
   21a90:	2800      	cmp	r0, #0
   21a92:	d0e2      	beq.n	21a5a <kmu_derive_cmac+0xaa>
   21a94:	4607      	mov	r7, r0
   21a96:	a80e      	add	r0, sp, #56	; 0x38
   21a98:	2274      	movs	r2, #116	; 0x74
   21a9a:	2100      	movs	r1, #0
   21a9c:	f7fe fb3c 	bl	20118 <CC_PalMemSetPlat>
   21aa0:	f7ff fc66 	bl	21370 <write_invalid_key>
   21aa4:	4638      	mov	r0, r7
   21aa6:	b04c      	add	sp, #304	; 0x130
   21aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21aac:	4f05      	ldr	r7, [pc, #20]	; (21ac4 <kmu_derive_cmac+0x114>)
   21aae:	4638      	mov	r0, r7
   21ab0:	b04c      	add	sp, #304	; 0x130
   21ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ab6:	4f04      	ldr	r7, [pc, #16]	; (21ac8 <kmu_derive_cmac+0x118>)
   21ab8:	4638      	mov	r0, r7
   21aba:	b04c      	add	sp, #304	; 0x130
   21abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21ac0:	462f      	mov	r7, r5
   21ac2:	e7e8      	b.n	21a96 <kmu_derive_cmac+0xe6>
   21ac4:	00f1000e 	.word	0x00f1000e
   21ac8:	00f1000f 	.word	0x00f1000f

00021acc <UtilCmacBuildDataForDerivation>:
   21acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ad0:	b082      	sub	sp, #8
   21ad2:	461e      	mov	r6, r3
   21ad4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21ad6:	2300      	movs	r3, #0
   21ad8:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   21adc:	9301      	str	r3, [sp, #4]
   21ade:	d83e      	bhi.n	21b5e <UtilCmacBuildDataForDerivation+0x92>
   21ae0:	00e4      	lsls	r4, r4, #3
   21ae2:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   21ae6:	4617      	mov	r7, r2
   21ae8:	f101 32ff 	add.w	r2, r1, #4294967295
   21aec:	bf34      	ite	cc
   21aee:	2303      	movcc	r3, #3
   21af0:	2304      	movcs	r3, #4
   21af2:	2a3f      	cmp	r2, #63	; 0x3f
   21af4:	460d      	mov	r5, r1
   21af6:	9300      	str	r3, [sp, #0]
   21af8:	d831      	bhi.n	21b5e <UtilCmacBuildDataForDerivation+0x92>
   21afa:	b380      	cbz	r0, 21b5e <UtilCmacBuildDataForDerivation+0x92>
   21afc:	b116      	cbz	r6, 21b04 <UtilCmacBuildDataForDerivation+0x38>
   21afe:	b377      	cbz	r7, 21b5e <UtilCmacBuildDataForDerivation+0x92>
   21b00:	2e40      	cmp	r6, #64	; 0x40
   21b02:	d82c      	bhi.n	21b5e <UtilCmacBuildDataForDerivation+0x92>
   21b04:	9a08      	ldr	r2, [sp, #32]
   21b06:	b352      	cbz	r2, 21b5e <UtilCmacBuildDataForDerivation+0x92>
   21b08:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21b0a:	6811      	ldr	r1, [r2, #0]
   21b0c:	b339      	cbz	r1, 21b5e <UtilCmacBuildDataForDerivation+0x92>
   21b0e:	19aa      	adds	r2, r5, r6
   21b10:	4413      	add	r3, r2
   21b12:	4299      	cmp	r1, r3
   21b14:	d323      	bcc.n	21b5e <UtilCmacBuildDataForDerivation+0x92>
   21b16:	9b08      	ldr	r3, [sp, #32]
   21b18:	4601      	mov	r1, r0
   21b1a:	462a      	mov	r2, r5
   21b1c:	1c58      	adds	r0, r3, #1
   21b1e:	f7fe faf9 	bl	20114 <CC_PalMemCopyPlat>
   21b22:	9b08      	ldr	r3, [sp, #32]
   21b24:	f105 0802 	add.w	r8, r5, #2
   21b28:	441d      	add	r5, r3
   21b2a:	2300      	movs	r3, #0
   21b2c:	706b      	strb	r3, [r5, #1]
   21b2e:	bb0e      	cbnz	r6, 21b74 <UtilCmacBuildDataForDerivation+0xa8>
   21b30:	9b08      	ldr	r3, [sp, #32]
   21b32:	9400      	str	r4, [sp, #0]
   21b34:	2cff      	cmp	r4, #255	; 0xff
   21b36:	eb03 0008 	add.w	r0, r3, r8
   21b3a:	d914      	bls.n	21b66 <UtilCmacBuildDataForDerivation+0x9a>
   21b3c:	0223      	lsls	r3, r4, #8
   21b3e:	b29b      	uxth	r3, r3
   21b40:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   21b44:	2202      	movs	r2, #2
   21b46:	a901      	add	r1, sp, #4
   21b48:	9401      	str	r4, [sp, #4]
   21b4a:	f7fe fae3 	bl	20114 <CC_PalMemCopyPlat>
   21b4e:	f108 0302 	add.w	r3, r8, #2
   21b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21b54:	2000      	movs	r0, #0
   21b56:	6013      	str	r3, [r2, #0]
   21b58:	b002      	add	sp, #8
   21b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b5e:	480a      	ldr	r0, [pc, #40]	; (21b88 <UtilCmacBuildDataForDerivation+0xbc>)
   21b60:	b002      	add	sp, #8
   21b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21b66:	2201      	movs	r2, #1
   21b68:	4669      	mov	r1, sp
   21b6a:	f7fe fad3 	bl	20114 <CC_PalMemCopyPlat>
   21b6e:	f108 0301 	add.w	r3, r8, #1
   21b72:	e7ee      	b.n	21b52 <UtilCmacBuildDataForDerivation+0x86>
   21b74:	9b08      	ldr	r3, [sp, #32]
   21b76:	4632      	mov	r2, r6
   21b78:	eb03 0008 	add.w	r0, r3, r8
   21b7c:	4639      	mov	r1, r7
   21b7e:	f7fe fac9 	bl	20114 <CC_PalMemCopyPlat>
   21b82:	44b0      	add	r8, r6
   21b84:	e7d4      	b.n	21b30 <UtilCmacBuildDataForDerivation+0x64>
   21b86:	bf00      	nop
   21b88:	80000006 	.word	0x80000006

00021b8c <CC_PalDataBufferAttrGet>:
   21b8c:	2000      	movs	r0, #0
   21b8e:	7018      	strb	r0, [r3, #0]
   21b90:	4770      	bx	lr
   21b92:	bf00      	nop

00021b94 <app_led_cb>:
{
   21b94:	4601      	mov	r1, r0
	dk_set_led(USER_LED, led_state);
   21b96:	2002      	movs	r0, #2
   21b98:	f7f9 bdc0 	b.w	1b71c <dk_set_led>

00021b9c <z_log_msg_static_create.constprop.0>:
   21b9c:	2300      	movs	r3, #0
   21b9e:	f7f1 ba0d 	b.w	12fbc <z_impl_z_log_msg_static_create>

00021ba2 <button_changed>:
	if (has_changed & USER_BUTTON) {
   21ba2:	07cb      	lsls	r3, r1, #31
   21ba4:	d501      	bpl.n	21baa <button_changed+0x8>
   21ba6:	f7ef b9b1 	b.w	10f0c <button_changed.part.0>
}
   21baa:	4770      	bx	lr

00021bac <indicate_cb>:
}
   21bac:	4770      	bx	lr

00021bae <cbpprintf_external>:
{
   21bae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21bb2:	4606      	mov	r6, r0
   21bb4:	460d      	mov	r5, r1
   21bb6:	4617      	mov	r7, r2
	if (buf == NULL) {
   21bb8:	4698      	mov	r8, r3
   21bba:	b32b      	cbz	r3, 21c08 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   21bbc:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   21bc0:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   21bc4:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   21bc6:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   21bc8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   21bcc:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   21bd0:	441c      	add	r4, r3
   21bd2:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   21bd4:	f04f 0a00 	mov.w	sl, #0
   21bd8:	45ca      	cmp	sl, r9
   21bda:	d309      	bcc.n	21bf0 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   21bdc:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21be0:	f108 0308 	add.w	r3, r8, #8
   21be4:	4639      	mov	r1, r7
   21be6:	4630      	mov	r0, r6
   21be8:	46ac      	mov	ip, r5
}
   21bea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   21bee:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   21bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   21bf4:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   21bf8:	4620      	mov	r0, r4
   21bfa:	f001 f8a4 	bl	22d46 <strlen>
   21bfe:	3001      	adds	r0, #1
   21c00:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   21c02:	f10a 0a01 	add.w	sl, sl, #1
   21c06:	e7e7      	b.n	21bd8 <cbpprintf_external+0x2a>
}
   21c08:	f06f 0015 	mvn.w	r0, #21
   21c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00021c10 <is_ptr>:
{
   21c10:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   21c12:	2500      	movs	r5, #0
{
   21c14:	4602      	mov	r2, r0
	bool mod = false;
   21c16:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   21c18:	4614      	mov	r4, r2
   21c1a:	f814 3b01 	ldrb.w	r3, [r4], #1
   21c1e:	b90b      	cbnz	r3, 21c24 <is_ptr+0x14>
					return false;
   21c20:	4618      	mov	r0, r3
   21c22:	e009      	b.n	21c38 <is_ptr+0x28>
		if (mod) {
   21c24:	b198      	cbz	r0, 21c4e <is_ptr+0x3e>
			if (cnt == n) {
   21c26:	428d      	cmp	r5, r1
   21c28:	d107      	bne.n	21c3a <is_ptr+0x2a>
				if (c == 'p') {
   21c2a:	2b70      	cmp	r3, #112	; 0x70
   21c2c:	d004      	beq.n	21c38 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   21c2e:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   21c32:	2a3a      	cmp	r2, #58	; 0x3a
   21c34:	d80b      	bhi.n	21c4e <is_ptr+0x3e>
					return false;
   21c36:	2000      	movs	r0, #0
}
   21c38:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   21c3a:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   21c3e:	2e3a      	cmp	r6, #58	; 0x3a
   21c40:	d805      	bhi.n	21c4e <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   21c42:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   21c44:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   21c46:	1c94      	adds	r4, r2, #2
   21c48:	2b00      	cmp	r3, #0
   21c4a:	d0e9      	beq.n	21c20 <is_ptr+0x10>
   21c4c:	2000      	movs	r0, #0
		if (c == '%') {
   21c4e:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   21c50:	bf08      	it	eq
   21c52:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   21c56:	4622      	mov	r2, r4
   21c58:	e7de      	b.n	21c18 <is_ptr+0x8>

00021c5a <arch_printk_char_out>:
}
   21c5a:	2000      	movs	r0, #0
   21c5c:	4770      	bx	lr

00021c5e <str_out>:
{
   21c5e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21c60:	688a      	ldr	r2, [r1, #8]
   21c62:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   21c64:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21c66:	b114      	cbz	r4, 21c6e <str_out+0x10>
   21c68:	684b      	ldr	r3, [r1, #4]
   21c6a:	4293      	cmp	r3, r2
   21c6c:	dc01      	bgt.n	21c72 <str_out+0x14>
		ctx->count++;
   21c6e:	608d      	str	r5, [r1, #8]
}
   21c70:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   21c72:	3b01      	subs	r3, #1
   21c74:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21c76:	bf08      	it	eq
   21c78:	2200      	moveq	r2, #0
   21c7a:	608d      	str	r5, [r1, #8]
   21c7c:	bf0c      	ite	eq
   21c7e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21c80:	54a0      	strbne	r0, [r4, r2]
   21c82:	e7f5      	b.n	21c70 <str_out+0x12>

00021c84 <vprintk>:
		z_log_vprintk(fmt, ap);
   21c84:	f000 bd87 	b.w	22796 <z_log_vprintk>

00021c88 <printk>:
{
   21c88:	b40f      	push	{r0, r1, r2, r3}
   21c8a:	b507      	push	{r0, r1, r2, lr}
   21c8c:	a904      	add	r1, sp, #16
   21c8e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21c92:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   21c94:	f000 fd7f 	bl	22796 <z_log_vprintk>
}
   21c98:	b003      	add	sp, #12
   21c9a:	f85d eb04 	ldr.w	lr, [sp], #4
   21c9e:	b004      	add	sp, #16
   21ca0:	4770      	bx	lr

00021ca2 <snprintk>:
{
   21ca2:	b40c      	push	{r2, r3}
   21ca4:	b507      	push	{r0, r1, r2, lr}
   21ca6:	ab04      	add	r3, sp, #16
   21ca8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21cac:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21cae:	f7ef ff4d 	bl	11b4c <vsnprintk>
}
   21cb2:	b003      	add	sp, #12
   21cb4:	f85d eb04 	ldr.w	lr, [sp], #4
   21cb8:	b002      	add	sp, #8
   21cba:	4770      	bx	lr

00021cbc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21cbc:	4604      	mov	r4, r0
   21cbe:	b508      	push	{r3, lr}
   21cc0:	4608      	mov	r0, r1
   21cc2:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   21cc4:	461a      	mov	r2, r3
   21cc6:	47a0      	blx	r4
	return z_impl_z_current_get();
   21cc8:	f7fc fbfa 	bl	1e4c0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   21ccc:	f7f2 fc6a 	bl	145a4 <z_impl_k_thread_abort>

00021cd0 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   21cd0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   21cd4:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   21cd6:	0840      	lsrs	r0, r0, #1
   21cd8:	4770      	bx	lr

00021cda <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   21cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21cdc:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   21cde:	f7ff fff7 	bl	21cd0 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   21ce2:	fab0 f080 	clz	r0, r0
   21ce6:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   21cea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   21cee:	00ca      	lsls	r2, r1, #3
   21cf0:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   21cf4:	1d17      	adds	r7, r2, #4
{
   21cf6:	460c      	mov	r4, r1
   21cf8:	3206      	adds	r2, #6
   21cfa:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   21cfc:	b956      	cbnz	r6, 21d14 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   21cfe:	2101      	movs	r1, #1
   21d00:	fa01 f000 	lsl.w	r0, r1, r0
   21d04:	68d9      	ldr	r1, [r3, #12]
   21d06:	4301      	orrs	r1, r0
   21d08:	60d9      	str	r1, [r3, #12]
		b->next = c;
   21d0a:	f8cc 4010 	str.w	r4, [ip, #16]
   21d0e:	53dd      	strh	r5, [r3, r7]
   21d10:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   21d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   21d14:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   21d16:	3104      	adds	r1, #4
   21d18:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   21d1a:	53d8      	strh	r0, [r3, r7]
   21d1c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   21d20:	529e      	strh	r6, [r3, r2]
   21d22:	80c5      	strh	r5, [r0, #6]
   21d24:	525d      	strh	r5, [r3, r1]
   21d26:	e7f4      	b.n	21d12 <free_list_add+0x38>

00021d28 <free_list_remove_bidx>:
{
   21d28:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   21d2a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   21d2e:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   21d30:	4299      	cmp	r1, r3
   21d32:	f102 0104 	add.w	r1, r2, #4
   21d36:	d10a      	bne.n	21d4e <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   21d38:	2301      	movs	r3, #1
   21d3a:	fa03 f202 	lsl.w	r2, r3, r2
   21d3e:	68c3      	ldr	r3, [r0, #12]
   21d40:	ea23 0302 	bic.w	r3, r3, r2
   21d44:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   21d46:	2300      	movs	r3, #0
   21d48:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   21d4c:	bd10      	pop	{r4, pc}
   21d4e:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   21d50:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   21d54:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   21d58:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   21d5c:	80cb      	strh	r3, [r1, #6]
   21d5e:	8082      	strh	r2, [r0, #4]
}
   21d60:	e7f4      	b.n	21d4c <free_list_remove_bidx+0x24>

00021d62 <free_list_remove>:
{
   21d62:	b508      	push	{r3, lr}
   21d64:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   21d66:	f7ff ffb3 	bl	21cd0 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   21d6a:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21d6e:	f1c2 021f 	rsb	r2, r2, #31
   21d72:	4618      	mov	r0, r3
}
   21d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   21d78:	f7ff bfd6 	b.w	21d28 <free_list_remove_bidx>

00021d7c <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   21d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d80:	fab1 f581 	clz	r5, r1
   21d84:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21d88:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   21d8c:	4603      	mov	r3, r0
	if (b->next) {
   21d8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   21d92:	460e      	mov	r6, r1
	if (b->next) {
   21d94:	b1c2      	cbz	r2, 21dc8 <alloc_chunk+0x4c>
   21d96:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   21d98:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   21d9c:	4618      	mov	r0, r3
   21d9e:	4621      	mov	r1, r4
   21da0:	f7ff ff96 	bl	21cd0 <chunk_size>
   21da4:	42b0      	cmp	r0, r6
   21da6:	d306      	bcc.n	21db6 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   21da8:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   21daa:	4618      	mov	r0, r3
   21dac:	f7ff ffbc 	bl	21d28 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21db0:	4620      	mov	r0, r4
   21db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   21db6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   21dba:	3f01      	subs	r7, #1
   21dbc:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   21dbe:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   21dc2:	d001      	beq.n	21dc8 <alloc_chunk+0x4c>
   21dc4:	4282      	cmp	r2, r0
   21dc6:	d1e7      	bne.n	21d98 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   21dc8:	f1c5 0220 	rsb	r2, r5, #32
   21dcc:	f04f 34ff 	mov.w	r4, #4294967295
   21dd0:	4094      	lsls	r4, r2
   21dd2:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   21dd4:	4014      	ands	r4, r2
   21dd6:	d0eb      	beq.n	21db0 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   21dd8:	fa94 f2a4 	rbit	r2, r4
   21ddc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21de0:	1d11      	adds	r1, r2, #4
   21de2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   21de6:	4621      	mov	r1, r4
   21de8:	e7df      	b.n	21daa <alloc_chunk+0x2e>

00021dea <merge_chunks>:
{
   21dea:	b538      	push	{r3, r4, r5, lr}
   21dec:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21dee:	f7ff ff6f 	bl	21cd0 <chunk_size>
{
   21df2:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21df4:	4604      	mov	r4, r0
   21df6:	4611      	mov	r1, r2
   21df8:	4618      	mov	r0, r3
   21dfa:	f7ff ff69 	bl	21cd0 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   21dfe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   21e02:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21e04:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   21e06:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   21e08:	4618      	mov	r0, r3
   21e0a:	f7ff ff61 	bl	21cd0 <chunk_size>
	void *cmem = &buf[c];
   21e0e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   21e10:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   21e14:	bd38      	pop	{r3, r4, r5, pc}

00021e16 <split_chunks>:
{
   21e16:	b538      	push	{r3, r4, r5, lr}
   21e18:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   21e1a:	f7ff ff59 	bl	21cd0 <chunk_size>
{
   21e1e:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   21e20:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   21e22:	1a51      	subs	r1, r2, r1
   21e24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   21e28:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21e2a:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   21e2c:	8060      	strh	r0, [r4, #2]
   21e2e:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21e32:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   21e34:	8044      	strh	r4, [r0, #2]
   21e36:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   21e3a:	4618      	mov	r0, r3
   21e3c:	4611      	mov	r1, r2
   21e3e:	f7ff ff47 	bl	21cd0 <chunk_size>
	void *cmem = &buf[c];
   21e42:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   21e44:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   21e48:	bd38      	pop	{r3, r4, r5, pc}

00021e4a <free_chunk>:
{
   21e4a:	b538      	push	{r3, r4, r5, lr}
   21e4c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   21e4e:	f7ff ff3f 	bl	21cd0 <chunk_size>
   21e52:	460c      	mov	r4, r1
   21e54:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   21e56:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21e5a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   21e5c:	07da      	lsls	r2, r3, #31
   21e5e:	d40a      	bmi.n	21e76 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   21e60:	4628      	mov	r0, r5
   21e62:	f7ff ff7e 	bl	21d62 <free_list_remove>
	return c + chunk_size(h, c);
   21e66:	4621      	mov	r1, r4
   21e68:	4628      	mov	r0, r5
   21e6a:	f7ff ff31 	bl	21cd0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   21e6e:	1822      	adds	r2, r4, r0
   21e70:	4628      	mov	r0, r5
   21e72:	f7ff ffba 	bl	21dea <merge_chunks>
		return ((uint16_t *)cmem)[f];
   21e76:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21e7a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   21e7c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21e80:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   21e82:	07db      	lsls	r3, r3, #31
   21e84:	d40c      	bmi.n	21ea0 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   21e86:	4628      	mov	r0, r5
   21e88:	f7ff ff6b 	bl	21d62 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   21e8c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   21e90:	4622      	mov	r2, r4
   21e92:	1a61      	subs	r1, r4, r1
   21e94:	4628      	mov	r0, r5
   21e96:	f7ff ffa8 	bl	21dea <merge_chunks>
   21e9a:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21e9e:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   21ea0:	4621      	mov	r1, r4
   21ea2:	4628      	mov	r0, r5
}
   21ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   21ea8:	f7ff bf17 	b.w	21cda <free_list_add>

00021eac <sys_heap_free>:
	if (mem == NULL) {
   21eac:	b161      	cbz	r1, 21ec8 <sys_heap_free+0x1c>
   21eae:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21eb0:	3904      	subs	r1, #4
   21eb2:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   21eb4:	f021 0307 	bic.w	r3, r1, #7
   21eb8:	4403      	add	r3, r0
	free_chunk(h, c);
   21eba:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21ebc:	885a      	ldrh	r2, [r3, #2]
   21ebe:	f022 0201 	bic.w	r2, r2, #1
   21ec2:	805a      	strh	r2, [r3, #2]
   21ec4:	f7ff bfc1 	b.w	21e4a <free_chunk>
}
   21ec8:	4770      	bx	lr

00021eca <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   21eca:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   21ecc:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   21ece:	b909      	cbnz	r1, 21ed4 <sys_heap_alloc+0xa>
		return NULL;
   21ed0:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   21ed2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   21ed4:	68ab      	ldr	r3, [r5, #8]
   21ed6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   21eda:	d9f9      	bls.n	21ed0 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21edc:	310b      	adds	r1, #11
   21ede:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21ee0:	4621      	mov	r1, r4
   21ee2:	4628      	mov	r0, r5
   21ee4:	f7ff ff4a 	bl	21d7c <alloc_chunk>
	if (c == 0U) {
   21ee8:	4606      	mov	r6, r0
   21eea:	2800      	cmp	r0, #0
   21eec:	d0f0      	beq.n	21ed0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   21eee:	4601      	mov	r1, r0
   21ef0:	4628      	mov	r0, r5
   21ef2:	f7ff feed 	bl	21cd0 <chunk_size>
   21ef6:	42a0      	cmp	r0, r4
   21ef8:	d907      	bls.n	21f0a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   21efa:	1932      	adds	r2, r6, r4
   21efc:	4628      	mov	r0, r5
   21efe:	f7ff ff8a 	bl	21e16 <split_chunks>
		free_list_add(h, c + chunk_sz);
   21f02:	4611      	mov	r1, r2
   21f04:	4628      	mov	r0, r5
   21f06:	f7ff fee8 	bl	21cda <free_list_add>
	void *cmem = &buf[c];
   21f0a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21f0e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21f10:	8853      	ldrh	r3, [r2, #2]
   21f12:	f043 0301 	orr.w	r3, r3, #1
   21f16:	8053      	strh	r3, [r2, #2]
   21f18:	3004      	adds	r0, #4
	return mem;
   21f1a:	e7da      	b.n	21ed2 <sys_heap_alloc+0x8>

00021f1c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21f20:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   21f24:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   21f28:	6806      	ldr	r6, [r0, #0]
{
   21f2a:	460f      	mov	r7, r1
   21f2c:	4614      	mov	r4, r2
	if (align != rew) {
   21f2e:	d00c      	beq.n	21f4a <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   21f30:	424b      	negs	r3, r1
   21f32:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   21f34:	2b04      	cmp	r3, #4
   21f36:	461a      	mov	r2, r3
   21f38:	464f      	mov	r7, r9
   21f3a:	bf28      	it	cs
   21f3c:	2204      	movcs	r2, #4
	rew = align & -align;
   21f3e:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21f40:	b964      	cbnz	r4, 21f5c <sys_heap_aligned_alloc+0x40>
		return NULL;
   21f42:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   21f44:	4628      	mov	r0, r5
   21f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   21f4a:	2904      	cmp	r1, #4
   21f4c:	d804      	bhi.n	21f58 <sys_heap_aligned_alloc+0x3c>
}
   21f4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   21f52:	4611      	mov	r1, r2
   21f54:	f7ff bfb9 	b.w	21eca <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   21f58:	2204      	movs	r2, #4
   21f5a:	e7f1      	b.n	21f40 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   21f5c:	68b3      	ldr	r3, [r6, #8]
   21f5e:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   21f62:	d9ee      	bls.n	21f42 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21f64:	f104 010b 	add.w	r1, r4, #11
   21f68:	4439      	add	r1, r7
   21f6a:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   21f6c:	08c9      	lsrs	r1, r1, #3
   21f6e:	4630      	mov	r0, r6
   21f70:	f7ff ff04 	bl	21d7c <alloc_chunk>
	if (c0 == 0) {
   21f74:	4680      	mov	r8, r0
   21f76:	2800      	cmp	r0, #0
   21f78:	d0e3      	beq.n	21f42 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21f7a:	f109 0504 	add.w	r5, r9, #4
   21f7e:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   21f82:	1e7b      	subs	r3, r7, #1
   21f84:	4435      	add	r5, r6
   21f86:	441d      	add	r5, r3
   21f88:	427f      	negs	r7, r7
   21f8a:	403d      	ands	r5, r7
   21f8c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21f90:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21f92:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21f94:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21f96:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21f98:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   21f9c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   21f9e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21fa2:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   21fa6:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21faa:	d208      	bcs.n	21fbe <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   21fac:	4601      	mov	r1, r0
   21fae:	463a      	mov	r2, r7
   21fb0:	4630      	mov	r0, r6
   21fb2:	f7ff ff30 	bl	21e16 <split_chunks>
		free_list_add(h, c0);
   21fb6:	4641      	mov	r1, r8
   21fb8:	4630      	mov	r0, r6
   21fba:	f7ff fe8e 	bl	21cda <free_list_add>
	return c + chunk_size(h, c);
   21fbe:	4639      	mov	r1, r7
   21fc0:	4630      	mov	r0, r6
   21fc2:	f7ff fe85 	bl	21cd0 <chunk_size>
   21fc6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   21fc8:	4284      	cmp	r4, r0
   21fca:	d207      	bcs.n	21fdc <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   21fcc:	4630      	mov	r0, r6
   21fce:	4622      	mov	r2, r4
   21fd0:	f7ff ff21 	bl	21e16 <split_chunks>
		free_list_add(h, c_end);
   21fd4:	4621      	mov	r1, r4
   21fd6:	4630      	mov	r0, r6
   21fd8:	f7ff fe7f 	bl	21cda <free_list_add>
	void *cmem = &buf[c];
   21fdc:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21fe0:	8873      	ldrh	r3, [r6, #2]
   21fe2:	f043 0301 	orr.w	r3, r3, #1
   21fe6:	8073      	strh	r3, [r6, #2]
   21fe8:	e7ac      	b.n	21f44 <sys_heap_aligned_alloc+0x28>

00021fea <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   21fea:	3a04      	subs	r2, #4
{
   21fec:	b4f0      	push	{r4, r5, r6, r7}
   21fee:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21ff0:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21ff2:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21ff4:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21ff8:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21ffc:	1a0e      	subs	r6, r1, r0
   21ffe:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   22000:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   22002:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   22006:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   22008:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   2200c:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   2200e:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   22010:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   22012:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22016:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   22018:	f1c2 0220 	rsb	r2, r2, #32
   2201c:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2201e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   22022:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   22026:	4294      	cmp	r4, r2
   22028:	d1fb      	bne.n	22022 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2202a:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2202c:	f042 0201 	orr.w	r2, r2, #1
   22030:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   22032:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   22036:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   22038:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   2203a:	8007      	strh	r7, [r0, #0]
   2203c:	8065      	strh	r5, [r4, #2]
   2203e:	1984      	adds	r4, r0, r6
   22040:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   22044:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   22048:	8067      	strh	r7, [r4, #2]
   2204a:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2204c:	885a      	ldrh	r2, [r3, #2]
   2204e:	f042 0201 	orr.w	r2, r2, #1
   22052:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   22054:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   22056:	f7ff be40 	b.w	21cda <free_list_add>

0002205a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2205a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2205c:	f013 0307 	ands.w	r3, r3, #7
   22060:	d105      	bne.n	2206e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22062:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   22064:	2b00      	cmp	r3, #0
   22066:	bf0c      	ite	eq
   22068:	2000      	moveq	r0, #0
   2206a:	2003      	movne	r0, #3
   2206c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2206e:	2b02      	cmp	r3, #2
   22070:	d105      	bne.n	2207e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22072:	8b40      	ldrh	r0, [r0, #26]
   22074:	fab0 f080 	clz	r0, r0
   22078:	0940      	lsrs	r0, r0, #5
   2207a:	0080      	lsls	r0, r0, #2
   2207c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2207e:	2b01      	cmp	r3, #1
   22080:	d105      	bne.n	2208e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22082:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   22084:	2b00      	cmp	r3, #0
   22086:	bf0c      	ite	eq
   22088:	2000      	moveq	r0, #0
   2208a:	2005      	movne	r0, #5
   2208c:	4770      	bx	lr
	int evt = EVT_NOP;
   2208e:	2000      	movs	r0, #0
}
   22090:	4770      	bx	lr

00022092 <validate_args>:
{
   22092:	b510      	push	{r4, lr}
   22094:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22096:	b100      	cbz	r0, 2209a <validate_args+0x8>
   22098:	b911      	cbnz	r1, 220a0 <validate_args+0xe>
		return -EINVAL;
   2209a:	f06f 0015 	mvn.w	r0, #21
}
   2209e:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   220a0:	1d08      	adds	r0, r1, #4
   220a2:	f000 f895 	bl	221d0 <sys_notify_validate>
	if ((rv == 0)
   220a6:	2800      	cmp	r0, #0
   220a8:	d1f9      	bne.n	2209e <validate_args+0xc>
	    && ((cli->notify.flags
   220aa:	68a3      	ldr	r3, [r4, #8]
   220ac:	2b03      	cmp	r3, #3
   220ae:	d9f6      	bls.n	2209e <validate_args+0xc>
   220b0:	e7f3      	b.n	2209a <validate_args+0x8>

000220b2 <notify_one>:
{
   220b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220b6:	460d      	mov	r5, r1
   220b8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   220ba:	4619      	mov	r1, r3
   220bc:	1d28      	adds	r0, r5, #4
{
   220be:	4690      	mov	r8, r2
   220c0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   220c2:	f000 f899 	bl	221f8 <sys_notify_finalize>
	if (cb) {
   220c6:	4604      	mov	r4, r0
   220c8:	b138      	cbz	r0, 220da <notify_one+0x28>
		cb(mgr, cli, state, res);
   220ca:	4633      	mov	r3, r6
   220cc:	4642      	mov	r2, r8
   220ce:	4629      	mov	r1, r5
   220d0:	4638      	mov	r0, r7
   220d2:	46a4      	mov	ip, r4
}
   220d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   220d8:	4760      	bx	ip
}
   220da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000220de <transition_complete>:
{
   220de:	b410      	push	{r4}
	__asm__ volatile(
   220e0:	f04f 0440 	mov.w	r4, #64	; 0x40
   220e4:	f3ef 8211 	mrs	r2, BASEPRI
   220e8:	f384 8812 	msr	BASEPRI_MAX, r4
   220ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   220f0:	6141      	str	r1, [r0, #20]
}
   220f2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   220f4:	2101      	movs	r1, #1
   220f6:	f7ef bd3f 	b.w	11b78 <process_event>

000220fa <onoff_manager_init>:
{
   220fa:	b538      	push	{r3, r4, r5, lr}
   220fc:	460c      	mov	r4, r1
	if ((mgr == NULL)
   220fe:	4605      	mov	r5, r0
   22100:	b158      	cbz	r0, 2211a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22102:	b151      	cbz	r1, 2211a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22104:	680b      	ldr	r3, [r1, #0]
   22106:	b143      	cbz	r3, 2211a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22108:	684b      	ldr	r3, [r1, #4]
   2210a:	b133      	cbz	r3, 2211a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2210c:	221c      	movs	r2, #28
   2210e:	2100      	movs	r1, #0
   22110:	f000 fe5b 	bl	22dca <memset>
   22114:	612c      	str	r4, [r5, #16]
	return 0;
   22116:	2000      	movs	r0, #0
}
   22118:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2211a:	f06f 0015 	mvn.w	r0, #21
   2211e:	e7fb      	b.n	22118 <onoff_manager_init+0x1e>

00022120 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   22120:	b570      	push	{r4, r5, r6, lr}
   22122:	4605      	mov	r5, r0
   22124:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   22126:	f7ff ffb4 	bl	22092 <validate_args>

	if (rv < 0) {
   2212a:	1e04      	subs	r4, r0, #0
   2212c:	db15      	blt.n	2215a <onoff_request+0x3a>
   2212e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22132:	f3ef 8211 	mrs	r2, BASEPRI
   22136:	f383 8812 	msr	BASEPRI_MAX, r3
   2213a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2213e:	8b6b      	ldrh	r3, [r5, #26]
   22140:	8b2c      	ldrh	r4, [r5, #24]
   22142:	f64f 71ff 	movw	r1, #65535	; 0xffff
   22146:	428b      	cmp	r3, r1
   22148:	f004 0407 	and.w	r4, r4, #7
   2214c:	d107      	bne.n	2215e <onoff_request+0x3e>
	__asm__ volatile(
   2214e:	f382 8811 	msr	BASEPRI, r2
   22152:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   22156:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2215a:	4620      	mov	r0, r4
   2215c:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   2215e:	2c02      	cmp	r4, #2
   22160:	d10c      	bne.n	2217c <onoff_request+0x5c>
		mgr->refs += 1U;
   22162:	3301      	adds	r3, #1
   22164:	836b      	strh	r3, [r5, #26]
   22166:	f382 8811 	msr	BASEPRI, r2
   2216a:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   2216e:	2300      	movs	r3, #0
   22170:	4622      	mov	r2, r4
   22172:	4631      	mov	r1, r6
   22174:	4628      	mov	r0, r5
   22176:	f7ff ff9c 	bl	220b2 <notify_one>
   2217a:	e7ee      	b.n	2215a <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   2217c:	2c06      	cmp	r4, #6
   2217e:	d814      	bhi.n	221aa <onoff_request+0x8a>
   22180:	e8df f004 	tbb	[pc, r4]
   22184:	13131304 	.word	0x13131304
   22188:	1a04      	.short	0x1a04
   2218a:	04          	.byte	0x04
   2218b:	00          	.byte	0x00
	parent->next = child;
   2218c:	2300      	movs	r3, #0
   2218e:	6033      	str	r3, [r6, #0]
	return list->tail;
   22190:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   22192:	b93b      	cbnz	r3, 221a4 <onoff_request+0x84>
	list->head = node;
   22194:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   22198:	b9ac      	cbnz	r4, 221c6 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   2219a:	2102      	movs	r1, #2
   2219c:	4628      	mov	r0, r5
   2219e:	f7ef fceb 	bl	11b78 <process_event>
   221a2:	e7da      	b.n	2215a <onoff_request+0x3a>
	parent->next = child;
   221a4:	601e      	str	r6, [r3, #0]
	list->tail = node;
   221a6:	606e      	str	r6, [r5, #4]
}
   221a8:	e7f6      	b.n	22198 <onoff_request+0x78>
   221aa:	f382 8811 	msr	BASEPRI, r2
   221ae:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   221b2:	f06f 0404 	mvn.w	r4, #4
   221b6:	e7d0      	b.n	2215a <onoff_request+0x3a>
   221b8:	f382 8811 	msr	BASEPRI, r2
   221bc:	f3bf 8f6f 	isb	sy
   221c0:	f06f 0485 	mvn.w	r4, #133	; 0x85
   221c4:	e7c9      	b.n	2215a <onoff_request+0x3a>
   221c6:	f382 8811 	msr	BASEPRI, r2
   221ca:	f3bf 8f6f 	isb	sy
		if (notify) {
   221ce:	e7c4      	b.n	2215a <onoff_request+0x3a>

000221d0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   221d0:	4603      	mov	r3, r0
   221d2:	b140      	cbz	r0, 221e6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   221d4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   221d6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   221da:	2a02      	cmp	r2, #2
   221dc:	d006      	beq.n	221ec <sys_notify_validate+0x1c>
   221de:	2a03      	cmp	r2, #3
   221e0:	d004      	beq.n	221ec <sys_notify_validate+0x1c>
   221e2:	2a01      	cmp	r2, #1
   221e4:	d005      	beq.n	221f2 <sys_notify_validate+0x22>
   221e6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   221ea:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   221ec:	681a      	ldr	r2, [r3, #0]
   221ee:	2a00      	cmp	r2, #0
   221f0:	d0f9      	beq.n	221e6 <sys_notify_validate+0x16>
		notify->result = 0;
   221f2:	2000      	movs	r0, #0
   221f4:	6098      	str	r0, [r3, #8]
   221f6:	4770      	bx	lr

000221f8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   221f8:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   221fa:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   221fc:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   221fe:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   22202:	2a02      	cmp	r2, #2
{
   22204:	4603      	mov	r3, r0
	switch (method) {
   22206:	f04f 0400 	mov.w	r4, #0
   2220a:	d007      	beq.n	2221c <sys_notify_finalize+0x24>
   2220c:	2a03      	cmp	r2, #3
   2220e:	d002      	beq.n	22216 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22210:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   22212:	2000      	movs	r0, #0
   22214:	e001      	b.n	2221a <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   22216:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22218:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2221a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2221c:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2221e:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   22220:	2800      	cmp	r0, #0
   22222:	d0f6      	beq.n	22212 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   22224:	f7fc fc30 	bl	1ea88 <z_impl_k_poll_signal_raise>
   22228:	e7f3      	b.n	22212 <sys_notify_finalize+0x1a>

0002222a <_ldiv5>:
	uint32_t v_lo = *v;
   2222a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   2222e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   22230:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   22234:	fba2 2403 	umull	r2, r4, r2, r3
   22238:	18d5      	adds	r5, r2, r3
   2223a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   2223e:	fba1 1303 	umull	r1, r3, r1, r3
   22242:	1852      	adds	r2, r2, r1
   22244:	eb44 0403 	adc.w	r4, r4, r3
   22248:	1952      	adds	r2, r2, r5
   2224a:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   2224e:	1889      	adds	r1, r1, r2
   22250:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   22254:	e9c0 1300 	strd	r1, r3, [r0]
}
   22258:	bd30      	pop	{r4, r5, pc}

0002225a <_get_digit>:
{
   2225a:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   2225c:	680a      	ldr	r2, [r1, #0]
   2225e:	2a00      	cmp	r2, #0
{
   22260:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   22262:	dd0f      	ble.n	22284 <_get_digit+0x2a>
		--*digit_count;
   22264:	3a01      	subs	r2, #1
   22266:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   22268:	681a      	ldr	r2, [r3, #0]
   2226a:	6844      	ldr	r4, [r0, #4]
   2226c:	200a      	movs	r0, #10
   2226e:	fba2 1200 	umull	r1, r2, r2, r0
   22272:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   22276:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   22278:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   2227c:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   22280:	3030      	adds	r0, #48	; 0x30
}
   22282:	bd10      	pop	{r4, pc}
		rval = '0';
   22284:	2030      	movs	r0, #48	; 0x30
   22286:	e7fc      	b.n	22282 <_get_digit+0x28>

00022288 <encode_uint>:
{
   22288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2228c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   2228e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   22290:	2b6f      	cmp	r3, #111	; 0x6f
{
   22292:	4680      	mov	r8, r0
   22294:	460f      	mov	r7, r1
   22296:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22298:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2229c:	d029      	beq.n	222f2 <encode_uint+0x6a>
   2229e:	d824      	bhi.n	222ea <encode_uint+0x62>
		return 10;
   222a0:	2b58      	cmp	r3, #88	; 0x58
   222a2:	bf0c      	ite	eq
   222a4:	2610      	moveq	r6, #16
   222a6:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   222a8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   222ac:	4632      	mov	r2, r6
   222ae:	2300      	movs	r3, #0
   222b0:	4640      	mov	r0, r8
   222b2:	4639      	mov	r1, r7
   222b4:	f7de fb42 	bl	93c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   222b8:	2a09      	cmp	r2, #9
   222ba:	b2d4      	uxtb	r4, r2
   222bc:	d81e      	bhi.n	222fc <encode_uint+0x74>
   222be:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   222c0:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   222c2:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   222c4:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   222c8:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   222cc:	d301      	bcc.n	222d2 <encode_uint+0x4a>
   222ce:	45d1      	cmp	r9, sl
   222d0:	d811      	bhi.n	222f6 <encode_uint+0x6e>
	if (conv->flag_hash) {
   222d2:	782b      	ldrb	r3, [r5, #0]
   222d4:	069b      	lsls	r3, r3, #26
   222d6:	d505      	bpl.n	222e4 <encode_uint+0x5c>
		if (radix == 8) {
   222d8:	2e08      	cmp	r6, #8
   222da:	d115      	bne.n	22308 <encode_uint+0x80>
			conv->altform_0 = true;
   222dc:	78ab      	ldrb	r3, [r5, #2]
   222de:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   222e2:	70ab      	strb	r3, [r5, #2]
}
   222e4:	4648      	mov	r0, r9
   222e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   222ea:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   222ee:	2b70      	cmp	r3, #112	; 0x70
   222f0:	e7d7      	b.n	222a2 <encode_uint+0x1a>
	switch (specifier) {
   222f2:	2608      	movs	r6, #8
   222f4:	e7d8      	b.n	222a8 <encode_uint+0x20>
		value /= radix;
   222f6:	4680      	mov	r8, r0
   222f8:	460f      	mov	r7, r1
   222fa:	e7d7      	b.n	222ac <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   222fc:	f1bb 0f19 	cmp.w	fp, #25
   22300:	bf94      	ite	ls
   22302:	3437      	addls	r4, #55	; 0x37
   22304:	3457      	addhi	r4, #87	; 0x57
   22306:	e7db      	b.n	222c0 <encode_uint+0x38>
		} else if (radix == 16) {
   22308:	2e10      	cmp	r6, #16
   2230a:	d1eb      	bne.n	222e4 <encode_uint+0x5c>
			conv->altform_0c = true;
   2230c:	78ab      	ldrb	r3, [r5, #2]
   2230e:	f043 0310 	orr.w	r3, r3, #16
   22312:	e7e6      	b.n	222e2 <encode_uint+0x5a>

00022314 <outs>:
{
   22314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22318:	4607      	mov	r7, r0
   2231a:	4688      	mov	r8, r1
   2231c:	4615      	mov	r5, r2
   2231e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22320:	4614      	mov	r4, r2
   22322:	42b4      	cmp	r4, r6
   22324:	d305      	bcc.n	22332 <outs+0x1e>
   22326:	b10e      	cbz	r6, 2232c <outs+0x18>
	return (int)count;
   22328:	1b60      	subs	r0, r4, r5
   2232a:	e008      	b.n	2233e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2232c:	7823      	ldrb	r3, [r4, #0]
   2232e:	2b00      	cmp	r3, #0
   22330:	d0fa      	beq.n	22328 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   22332:	f814 0b01 	ldrb.w	r0, [r4], #1
   22336:	4641      	mov	r1, r8
   22338:	47b8      	blx	r7
		if (rc < 0) {
   2233a:	2800      	cmp	r0, #0
   2233c:	daf1      	bge.n	22322 <outs+0xe>
}
   2233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022342 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   22342:	b40f      	push	{r0, r1, r2, r3}
   22344:	b507      	push	{r0, r1, r2, lr}
   22346:	a904      	add	r1, sp, #16
   22348:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2234c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2234e:	f7ff fc99 	bl	21c84 <vprintk>

	va_end(ap);
}
   22352:	b003      	add	sp, #12
   22354:	f85d eb04 	ldr.w	lr, [sp], #4
   22358:	b004      	add	sp, #16
   2235a:	4770      	bx	lr

0002235c <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2235c:	68c3      	ldr	r3, [r0, #12]
   2235e:	6802      	ldr	r2, [r0, #0]
   22360:	4293      	cmp	r3, r2
   22362:	d904      	bls.n	2236e <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   22364:	3b01      	subs	r3, #1
   22366:	1a9a      	subs	r2, r3, r2

		return false;
   22368:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2236a:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   2236c:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2236e:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   22370:	b913      	cbnz	r3, 22378 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   22372:	3801      	subs	r0, #1
   22374:	1a82      	subs	r2, r0, r2
		return false;
   22376:	e7f7      	b.n	22368 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   22378:	1a82      	subs	r2, r0, r2
	return true;
   2237a:	2001      	movs	r0, #1
   2237c:	e7f5      	b.n	2236a <free_space+0xe>

0002237e <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   2237e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   22380:	a901      	add	r1, sp, #4
{
   22382:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   22384:	f7ff ffea 	bl	2235c <free_space>
   22388:	b120      	cbz	r0, 22394 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   2238a:	9b01      	ldr	r3, [sp, #4]
   2238c:	68e2      	ldr	r2, [r4, #12]
   2238e:	3b01      	subs	r3, #1
   22390:	4413      	add	r3, r2
   22392:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   22394:	6a20      	ldr	r0, [r4, #32]
   22396:	9b01      	ldr	r3, [sp, #4]
   22398:	1ac0      	subs	r0, r0, r3
}
   2239a:	3801      	subs	r0, #1
   2239c:	b002      	add	sp, #8
   2239e:	bd10      	pop	{r4, pc}

000223a0 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   223a0:	b510      	push	{r4, lr}
   223a2:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   223a4:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   223a6:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   223a8:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   223aa:	07d2      	lsls	r2, r2, #31
   223ac:	d502      	bpl.n	223b4 <idx_inc+0x14>
		return i & (buffer->size - 1);
   223ae:	3b01      	subs	r3, #1
   223b0:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   223b2:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   223b4:	4298      	cmp	r0, r3
   223b6:	bf28      	it	cs
   223b8:	1ac0      	subcs	r0, r0, r3
   223ba:	e7fa      	b.n	223b2 <idx_inc+0x12>

000223bc <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   223bc:	b538      	push	{r3, r4, r5, lr}
   223be:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   223c0:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   223c2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   223c4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   223c6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   223ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   223ce:	462a      	mov	r2, r5
   223d0:	6801      	ldr	r1, [r0, #0]
{
   223d2:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   223d4:	f7ff ffe4 	bl	223a0 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   223d8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   223da:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   223dc:	462a      	mov	r2, r5
   223de:	4620      	mov	r0, r4
   223e0:	f7ff ffde 	bl	223a0 <idx_inc>
   223e4:	6060      	str	r0, [r4, #4]
}
   223e6:	bd38      	pop	{r3, r4, r5, pc}

000223e8 <max_utilization_update>:
{
   223e8:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   223ea:	6903      	ldr	r3, [r0, #16]
   223ec:	075b      	lsls	r3, r3, #29
{
   223ee:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   223f0:	d506      	bpl.n	22400 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   223f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   223f4:	f7ff ffc3 	bl	2237e <get_usage>
   223f8:	4285      	cmp	r5, r0
   223fa:	bf2c      	ite	cs
   223fc:	6265      	strcs	r5, [r4, #36]	; 0x24
   223fe:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   22400:	bd38      	pop	{r3, r4, r5, pc}

00022402 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   22402:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22406:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   22408:	2300      	movs	r3, #0
   2240a:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2240c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   22410:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   22414:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   22418:	f003 0303 	and.w	r3, r3, #3
   2241c:	2b02      	cmp	r3, #2
{
   2241e:	4604      	mov	r4, r0
   22420:	468b      	mov	fp, r1
   22422:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   22424:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   22428:	d103      	bne.n	22432 <drop_item_locked+0x30>
		return item->skip.len;
   2242a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2242e:	08ad      	lsrs	r5, r5, #2
   22430:	d12e      	bne.n	22490 <drop_item_locked+0x8e>
   22432:	69a3      	ldr	r3, [r4, #24]
   22434:	4630      	mov	r0, r6
   22436:	4798      	blx	r3
   22438:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   2243a:	f1b8 0f00 	cmp.w	r8, #0
   2243e:	d038      	beq.n	224b2 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   22440:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   22444:	079b      	lsls	r3, r3, #30
   22446:	d531      	bpl.n	224ac <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   22448:	f10b 0101 	add.w	r1, fp, #1
   2244c:	4620      	mov	r0, r4
   2244e:	f7ff ffb5 	bl	223bc <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   22452:	6861      	ldr	r1, [r4, #4]
   22454:	462a      	mov	r2, r5
   22456:	4620      	mov	r0, r4
   22458:	f7ff ffa2 	bl	223a0 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2245c:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2245e:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   22460:	462a      	mov	r2, r5
   22462:	4620      	mov	r0, r4
   22464:	f7ff ff9c 	bl	223a0 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   22468:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   2246a:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   2246c:	68e1      	ldr	r1, [r4, #12]
   2246e:	4620      	mov	r0, r4
   22470:	f7ff ff96 	bl	223a0 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   22474:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   22476:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   2247a:	f002 0203 	and.w	r2, r2, #3
   2247e:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   22480:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   22484:	d10e      	bne.n	224a4 <drop_item_locked+0xa2>
		return item->skip.len;
   22486:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   2248a:	089b      	lsrs	r3, r3, #2
   2248c:	d00a      	beq.n	224a4 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   2248e:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   22490:	68e1      	ldr	r1, [r4, #12]
   22492:	462a      	mov	r2, r5
   22494:	4620      	mov	r0, r4
   22496:	f7ff ff83 	bl	223a0 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2249a:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   2249e:	4630      	mov	r0, r6
   224a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   224a4:	69a3      	ldr	r3, [r4, #24]
   224a6:	4630      	mov	r0, r6
   224a8:	4798      	blx	r3
   224aa:	4405      	add	r5, r0
			*user_packet = true;
   224ac:	2301      	movs	r3, #1
   224ae:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   224b0:	e7ee      	b.n	22490 <drop_item_locked+0x8e>
		item = NULL;
   224b2:	4646      	mov	r6, r8
	return item;
   224b4:	e7f3      	b.n	2249e <drop_item_locked+0x9c>

000224b6 <mpsc_pbuf_init>:
{
   224b6:	b538      	push	{r3, r4, r5, lr}
   224b8:	460d      	mov	r5, r1
   224ba:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   224bc:	221c      	movs	r2, #28
   224be:	2100      	movs	r1, #0
   224c0:	f000 fc83 	bl	22dca <memset>
	buffer->get_wlen = cfg->get_wlen;
   224c4:	68eb      	ldr	r3, [r5, #12]
   224c6:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   224c8:	68ab      	ldr	r3, [r5, #8]
   224ca:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   224cc:	682b      	ldr	r3, [r5, #0]
   224ce:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   224d0:	686b      	ldr	r3, [r5, #4]
   224d2:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   224d4:	2200      	movs	r2, #0
   224d6:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   224d8:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   224da:	b123      	cbz	r3, 224e6 <mpsc_pbuf_init+0x30>
   224dc:	1e59      	subs	r1, r3, #1
   224de:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   224e0:	bf08      	it	eq
   224e2:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   224e6:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   224e8:	2201      	movs	r2, #1
   224ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
   224ee:	2100      	movs	r1, #0
}
   224f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   224f4:	f002 bf14 	b.w	25320 <z_impl_k_sem_init>

000224f8 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   224f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   224fc:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   224fe:	6a03      	ldr	r3, [r0, #32]
   22500:	3b01      	subs	r3, #1
   22502:	428b      	cmp	r3, r1
{
   22504:	4604      	mov	r4, r0
   22506:	460e      	mov	r6, r1
   22508:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   2250a:	d351      	bcc.n	225b0 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   2250c:	2500      	movs	r5, #0
	__asm__ volatile(
   2250e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22512:	f3ef 8911 	mrs	r9, BASEPRI
   22516:	f383 8812 	msr	BASEPRI_MAX, r3
   2251a:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   2251e:	a901      	add	r1, sp, #4
   22520:	4620      	mov	r0, r4
   22522:	f7ff ff1b 	bl	2235c <free_space>

		if (free_wlen >= wlen) {
   22526:	f8dd a004 	ldr.w	sl, [sp, #4]
   2252a:	45b2      	cmp	sl, r6
   2252c:	d317      	bcc.n	2255e <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2252e:	6822      	ldr	r2, [r4, #0]
			item =
   22530:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   22532:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   22536:	f021 0103 	bic.w	r1, r1, #3
   2253a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   2253e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   22542:	6821      	ldr	r1, [r4, #0]
   22544:	4632      	mov	r2, r6
   22546:	4620      	mov	r0, r4
   22548:	f7ff ff2a 	bl	223a0 <idx_inc>
   2254c:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   2254e:	f389 8811 	msr	BASEPRI, r9
   22552:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   22556:	4628      	mov	r0, r5
   22558:	b002      	add	sp, #8
   2255a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   2255e:	b150      	cbz	r0, 22576 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   22560:	4651      	mov	r1, sl
   22562:	4620      	mov	r0, r4
   22564:	f7ff ff2a 	bl	223bc <add_skip_item>
   22568:	f389 8811 	msr	BASEPRI, r9
   2256c:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   22570:	2d00      	cmp	r5, #0
   22572:	d0cb      	beq.n	2250c <mpsc_pbuf_alloc+0x14>
   22574:	e033      	b.n	225de <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   22576:	ea57 0308 	orrs.w	r3, r7, r8
   2257a:	d020      	beq.n	225be <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   2257c:	f002 fe1a 	bl	251b4 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   22580:	b9e8      	cbnz	r0, 225be <mpsc_pbuf_alloc+0xc6>
   22582:	f389 8811 	msr	BASEPRI, r9
   22586:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   2258a:	463a      	mov	r2, r7
   2258c:	4643      	mov	r3, r8
   2258e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   22592:	f7fb fabb 	bl	1db0c <z_impl_k_sem_take>
	__asm__ volatile(
   22596:	f04f 0240 	mov.w	r2, #64	; 0x40
   2259a:	f3ef 8311 	mrs	r3, BASEPRI
   2259e:	f382 8812 	msr	BASEPRI_MAX, r2
   225a2:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   225a6:	b128      	cbz	r0, 225b4 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   225a8:	f383 8811 	msr	BASEPRI, r3
   225ac:	f3bf 8f6f 	isb	sy
		return NULL;
   225b0:	2500      	movs	r5, #0
   225b2:	e7d0      	b.n	22556 <mpsc_pbuf_alloc+0x5e>
   225b4:	f383 8811 	msr	BASEPRI, r3
   225b8:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   225bc:	e7d8      	b.n	22570 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   225be:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   225c0:	f10d 0303 	add.w	r3, sp, #3
   225c4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   225c8:	4651      	mov	r1, sl
   225ca:	4620      	mov	r0, r4
   225cc:	f7ff ff19 	bl	22402 <drop_item_locked>
   225d0:	4605      	mov	r5, r0
   225d2:	f389 8811 	msr	BASEPRI, r9
   225d6:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   225da:	2800      	cmp	r0, #0
   225dc:	d0e8      	beq.n	225b0 <mpsc_pbuf_alloc+0xb8>
   225de:	f89d 3003 	ldrb.w	r3, [sp, #3]
   225e2:	2b00      	cmp	r3, #0
   225e4:	d093      	beq.n	2250e <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   225e6:	6963      	ldr	r3, [r4, #20]
   225e8:	2b00      	cmp	r3, #0
   225ea:	d08f      	beq.n	2250c <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   225ec:	4629      	mov	r1, r5
   225ee:	4620      	mov	r0, r4
   225f0:	4798      	blx	r3
   225f2:	e78b      	b.n	2250c <mpsc_pbuf_alloc+0x14>

000225f4 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   225f4:	b570      	push	{r4, r5, r6, lr}
   225f6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   225f8:	6983      	ldr	r3, [r0, #24]
   225fa:	4608      	mov	r0, r1
{
   225fc:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   225fe:	4798      	blx	r3
   22600:	4602      	mov	r2, r0
	__asm__ volatile(
   22602:	f04f 0340 	mov.w	r3, #64	; 0x40
   22606:	f3ef 8611 	mrs	r6, BASEPRI
   2260a:	f383 8812 	msr	BASEPRI_MAX, r3
   2260e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   22612:	782b      	ldrb	r3, [r5, #0]
   22614:	f043 0301 	orr.w	r3, r3, #1
   22618:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2261a:	6861      	ldr	r1, [r4, #4]
   2261c:	4620      	mov	r0, r4
   2261e:	f7ff febf 	bl	223a0 <idx_inc>
   22622:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   22624:	4620      	mov	r0, r4
   22626:	f7ff fedf 	bl	223e8 <max_utilization_update>
	__asm__ volatile(
   2262a:	f386 8811 	msr	BASEPRI, r6
   2262e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   22632:	bd70      	pop	{r4, r5, r6, pc}

00022634 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   22634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22636:	4604      	mov	r4, r0
	__asm__ volatile(
   22638:	f04f 0340 	mov.w	r3, #64	; 0x40
   2263c:	f3ef 8611 	mrs	r6, BASEPRI
   22640:	f383 8812 	msr	BASEPRI_MAX, r3
   22644:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   22648:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2264c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2264e:	bf88      	it	hi
   22650:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   22652:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   22654:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   22656:	b132      	cbz	r2, 22666 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   22658:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   2265c:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   22660:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   22664:	d105      	bne.n	22672 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   22666:	f386 8811 	msr	BASEPRI, r6
   2266a:	f3bf 8f6f 	isb	sy
			item = NULL;
   2266e:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   22670:	e02e      	b.n	226d0 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   22672:	2802      	cmp	r0, #2
   22674:	d103      	bne.n	2267e <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   22676:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   2267a:	08ad      	lsrs	r5, r5, #2
   2267c:	d105      	bne.n	2268a <mpsc_pbuf_claim+0x56>
   2267e:	07d0      	lsls	r0, r2, #31
   22680:	d414      	bmi.n	226ac <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   22682:	69a3      	ldr	r3, [r4, #24]
   22684:	4638      	mov	r0, r7
   22686:	4798      	blx	r3
   22688:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   2268a:	68a1      	ldr	r1, [r4, #8]
   2268c:	462a      	mov	r2, r5
   2268e:	4620      	mov	r0, r4
   22690:	f7ff fe86 	bl	223a0 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   22694:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   22696:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   22698:	462a      	mov	r2, r5
   2269a:	4620      	mov	r0, r4
   2269c:	f7ff fe80 	bl	223a0 <idx_inc>
				buffer->rd_idx =
   226a0:	60e0      	str	r0, [r4, #12]
   226a2:	f386 8811 	msr	BASEPRI, r6
   226a6:	f3bf 8f6f 	isb	sy
	} while (cont);
   226aa:	e7c5      	b.n	22638 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   226ac:	f042 0202 	orr.w	r2, r2, #2
   226b0:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   226b4:	4638      	mov	r0, r7
   226b6:	69a3      	ldr	r3, [r4, #24]
   226b8:	68a5      	ldr	r5, [r4, #8]
   226ba:	4798      	blx	r3
   226bc:	4629      	mov	r1, r5
   226be:	4602      	mov	r2, r0
   226c0:	4620      	mov	r0, r4
   226c2:	f7ff fe6d 	bl	223a0 <idx_inc>
				buffer->tmp_rd_idx =
   226c6:	60a0      	str	r0, [r4, #8]
   226c8:	f386 8811 	msr	BASEPRI, r6
   226cc:	f3bf 8f6f 	isb	sy
}
   226d0:	4638      	mov	r0, r7
   226d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000226d4 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   226d4:	b570      	push	{r4, r5, r6, lr}
   226d6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   226d8:	6983      	ldr	r3, [r0, #24]
   226da:	4608      	mov	r0, r1
{
   226dc:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   226de:	4798      	blx	r3
   226e0:	4602      	mov	r2, r0
	__asm__ volatile(
   226e2:	f04f 0340 	mov.w	r3, #64	; 0x40
   226e6:	f3ef 8611 	mrs	r6, BASEPRI
   226ea:	f383 8812 	msr	BASEPRI_MAX, r3
   226ee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   226f2:	782b      	ldrb	r3, [r5, #0]
   226f4:	f36f 0300 	bfc	r3, #0, #1
   226f8:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   226fa:	6923      	ldr	r3, [r4, #16]
   226fc:	079b      	lsls	r3, r3, #30
   226fe:	d505      	bpl.n	2270c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   22700:	68e1      	ldr	r1, [r4, #12]
   22702:	69e3      	ldr	r3, [r4, #28]
   22704:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   22708:	429d      	cmp	r5, r3
   2270a:	d112      	bne.n	22732 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2270c:	782b      	ldrb	r3, [r5, #0]
   2270e:	f36f 0341 	bfc	r3, #1, #1
   22712:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   22714:	68e1      	ldr	r1, [r4, #12]
   22716:	4620      	mov	r0, r4
   22718:	f7ff fe42 	bl	223a0 <idx_inc>
   2271c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2271e:	f386 8811 	msr	BASEPRI, r6
   22722:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   22726:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2272a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2272e:	f7fb b9c7 	b.w	1dac0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   22732:	682b      	ldr	r3, [r5, #0]
   22734:	f360 039f 	bfi	r3, r0, #2, #30
   22738:	602b      	str	r3, [r5, #0]
   2273a:	e7f0      	b.n	2271e <mpsc_pbuf_free+0x4a>

0002273c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2273c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   22740:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   22742:	bf88      	it	hi
   22744:	6a02      	ldrhi	r2, [r0, #32]
   22746:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   22748:	1e18      	subs	r0, r3, #0
   2274a:	bf18      	it	ne
   2274c:	2001      	movne	r0, #1
   2274e:	4770      	bx	lr

00022750 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22750:	4770      	bx	lr

00022752 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   22752:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   22754:	075b      	lsls	r3, r3, #29
   22756:	d40b      	bmi.n	22770 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   22758:	6803      	ldr	r3, [r0, #0]
   2275a:	8842      	ldrh	r2, [r0, #2]
   2275c:	f3c3 2349 	ubfx	r3, r3, #9, #10
   22760:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   22764:	1898      	adds	r0, r3, r2
   22766:	3017      	adds	r0, #23
   22768:	f020 0007 	bic.w	r0, r0, #7
   2276c:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   2276e:	4770      	bx	lr
	return 0;
   22770:	2000      	movs	r0, #0
}
   22772:	4770      	bx	lr

00022774 <dummy_timestamp>:
}
   22774:	2000      	movs	r0, #0
   22776:	4770      	bx	lr

00022778 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   22778:	f002 baf5 	b.w	24d66 <sys_clock_cycle_get_32>

0002277c <atomic_inc>:
{
   2277c:	4603      	mov	r3, r0
}
   2277e:	f3bf 8f5b 	dmb	ish
   22782:	e853 0f00 	ldrex	r0, [r3]
   22786:	1c42      	adds	r2, r0, #1
   22788:	e843 2100 	strex	r1, r2, [r3]
   2278c:	2900      	cmp	r1, #0
   2278e:	d1f8      	bne.n	22782 <atomic_inc+0x6>
   22790:	f3bf 8f5b 	dmb	ish
   22794:	4770      	bx	lr

00022796 <z_log_vprintk>:
{
   22796:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   22798:	2300      	movs	r3, #0
   2279a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2279e:	e9cd 3300 	strd	r3, r3, [sp]
   227a2:	461a      	mov	r2, r3
   227a4:	4619      	mov	r1, r3
   227a6:	4618      	mov	r0, r3
   227a8:	f7f0 fc5c 	bl	13064 <z_impl_z_log_msg_runtime_vcreate>
}
   227ac:	b005      	add	sp, #20
   227ae:	f85d fb04 	ldr.w	pc, [sp], #4

000227b2 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   227b2:	2001      	movs	r0, #1
   227b4:	f7f0 ba42 	b.w	12c3c <z_log_dropped>

000227b8 <z_log_get_tag>:
}
   227b8:	2000      	movs	r0, #0
   227ba:	4770      	bx	lr

000227bc <z_cbprintf_cpy>:
{
   227bc:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   227be:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   227c2:	1b9b      	subs	r3, r3, r6
   227c4:	428b      	cmp	r3, r1
{
   227c6:	460c      	mov	r4, r1
   227c8:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   227ca:	d30a      	bcc.n	227e2 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   227cc:	6813      	ldr	r3, [r2, #0]
   227ce:	460a      	mov	r2, r1
   227d0:	4601      	mov	r1, r0
   227d2:	1998      	adds	r0, r3, r6
   227d4:	f000 faee 	bl	22db4 <memcpy>
	desc->off += len;
   227d8:	68ab      	ldr	r3, [r5, #8]
   227da:	4423      	add	r3, r4
   227dc:	60ab      	str	r3, [r5, #8]
	return len;
   227de:	4620      	mov	r0, r4
}
   227e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   227e2:	f06f 001b 	mvn.w	r0, #27
   227e6:	e7fb      	b.n	227e0 <z_cbprintf_cpy+0x24>

000227e8 <z_log_msg_finalize>:
{
   227e8:	b570      	push	{r4, r5, r6, lr}
   227ea:	460e      	mov	r6, r1
   227ec:	4615      	mov	r5, r2
   227ee:	4619      	mov	r1, r3
	if (!msg) {
   227f0:	4604      	mov	r4, r0
   227f2:	b918      	cbnz	r0, 227fc <z_log_msg_finalize+0x14>
}
   227f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   227f8:	f7f0 ba20 	b.w	12c3c <z_log_dropped>
	if (data) {
   227fc:	b13b      	cbz	r3, 2280e <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   227fe:	f3c2 2349 	ubfx	r3, r2, #9, #10
   22802:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   22804:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   22808:	4418      	add	r0, r3
   2280a:	f000 fad3 	bl	22db4 <memcpy>
	msg->hdr.source = source;
   2280e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   22812:	4620      	mov	r0, r4
}
   22814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   22818:	f7f0 bb9c 	b.w	12f54 <z_log_msg_commit>

0002281c <buffer_write>:
{
   2281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2281e:	4606      	mov	r6, r0
   22820:	460d      	mov	r5, r1
   22822:	4614      	mov	r4, r2
   22824:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   22826:	4621      	mov	r1, r4
   22828:	4628      	mov	r0, r5
   2282a:	463a      	mov	r2, r7
   2282c:	47b0      	blx	r6
	} while (len != 0);
   2282e:	1a24      	subs	r4, r4, r0
		buf += processed;
   22830:	4405      	add	r5, r0
	} while (len != 0);
   22832:	d1f8      	bne.n	22826 <buffer_write+0xa>
}
   22834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022836 <cbvprintf>:
{
   22836:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   22838:	2400      	movs	r4, #0
   2283a:	9400      	str	r4, [sp, #0]
   2283c:	f7ef faaa 	bl	11d94 <z_cbvprintf_impl>
}
   22840:	b002      	add	sp, #8
   22842:	bd10      	pop	{r4, pc}

00022844 <log_output_flush>:
{
   22844:	b510      	push	{r4, lr}
		     output->control_block->offset,
   22846:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   22848:	6881      	ldr	r1, [r0, #8]
{
   2284a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2284c:	e9d2 2300 	ldrd	r2, r3, [r2]
   22850:	6800      	ldr	r0, [r0, #0]
   22852:	f7ff ffe3 	bl	2281c <buffer_write>
	output->control_block->offset = 0;
   22856:	6863      	ldr	r3, [r4, #4]
   22858:	2200      	movs	r2, #0
   2285a:	601a      	str	r2, [r3, #0]
}
   2285c:	bd10      	pop	{r4, pc}

0002285e <out_func>:
{
   2285e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   22860:	684b      	ldr	r3, [r1, #4]
   22862:	681a      	ldr	r2, [r3, #0]
   22864:	68cb      	ldr	r3, [r1, #12]
   22866:	429a      	cmp	r2, r3
{
   22868:	4605      	mov	r5, r0
   2286a:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2286c:	d102      	bne.n	22874 <out_func+0x16>
		log_output_flush(out_ctx);
   2286e:	4608      	mov	r0, r1
   22870:	f7ff ffe8 	bl	22844 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22874:	6863      	ldr	r3, [r4, #4]
   22876:	f3bf 8f5b 	dmb	ish
   2287a:	e853 2f00 	ldrex	r2, [r3]
   2287e:	1c51      	adds	r1, r2, #1
   22880:	e843 1000 	strex	r0, r1, [r3]
   22884:	2800      	cmp	r0, #0
   22886:	d1f8      	bne.n	2287a <out_func+0x1c>
   22888:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2288c:	68a3      	ldr	r3, [r4, #8]
   2288e:	549d      	strb	r5, [r3, r2]
}
   22890:	2000      	movs	r0, #0
   22892:	bd38      	pop	{r3, r4, r5, pc}

00022894 <cr_out_func>:
	if (c == '\n') {
   22894:	280a      	cmp	r0, #10
{
   22896:	b538      	push	{r3, r4, r5, lr}
   22898:	4604      	mov	r4, r0
   2289a:	460d      	mov	r5, r1
	if (c == '\n') {
   2289c:	d102      	bne.n	228a4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   2289e:	200d      	movs	r0, #13
   228a0:	f7ff ffdd 	bl	2285e <out_func>
	out_func(c, ctx);
   228a4:	4629      	mov	r1, r5
   228a6:	4620      	mov	r0, r4
   228a8:	f7ff ffd9 	bl	2285e <out_func>
}
   228ac:	2000      	movs	r0, #0
   228ae:	bd38      	pop	{r3, r4, r5, pc}

000228b0 <log_backend_uart_init>:
}
   228b0:	4770      	bx	lr

000228b2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   228b2:	b538      	push	{r3, r4, r5, lr}
   228b4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   228b6:	42ab      	cmp	r3, r5
{
   228b8:	4611      	mov	r1, r2
   228ba:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   228bc:	d804      	bhi.n	228c8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   228be:	461a      	mov	r2, r3
   228c0:	f000 fa78 	bl	22db4 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   228c4:	4620      	mov	r0, r4
   228c6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   228c8:	2400      	movs	r4, #0
   228ca:	e7fb      	b.n	228c4 <_copy+0x12>

000228cc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   228cc:	f000 ba7d 	b.w	22dca <memset>

000228d0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   228d0:	09c3      	lsrs	r3, r0, #7
   228d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   228d6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   228da:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   228de:	b2c0      	uxtb	r0, r0
   228e0:	4770      	bx	lr

000228e2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   228e2:	78cb      	ldrb	r3, [r1, #3]
   228e4:	7802      	ldrb	r2, [r0, #0]
   228e6:	4053      	eors	r3, r2
   228e8:	7003      	strb	r3, [r0, #0]
   228ea:	884b      	ldrh	r3, [r1, #2]
   228ec:	7842      	ldrb	r2, [r0, #1]
   228ee:	4053      	eors	r3, r2
   228f0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   228f2:	680a      	ldr	r2, [r1, #0]
   228f4:	7883      	ldrb	r3, [r0, #2]
   228f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   228fa:	7083      	strb	r3, [r0, #2]
   228fc:	680a      	ldr	r2, [r1, #0]
   228fe:	78c3      	ldrb	r3, [r0, #3]
   22900:	4053      	eors	r3, r2
   22902:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   22904:	79cb      	ldrb	r3, [r1, #7]
   22906:	7902      	ldrb	r2, [r0, #4]
   22908:	4053      	eors	r3, r2
   2290a:	7103      	strb	r3, [r0, #4]
   2290c:	88cb      	ldrh	r3, [r1, #6]
   2290e:	7942      	ldrb	r2, [r0, #5]
   22910:	4053      	eors	r3, r2
   22912:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   22914:	684a      	ldr	r2, [r1, #4]
   22916:	7983      	ldrb	r3, [r0, #6]
   22918:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2291c:	7183      	strb	r3, [r0, #6]
   2291e:	684a      	ldr	r2, [r1, #4]
   22920:	79c3      	ldrb	r3, [r0, #7]
   22922:	4053      	eors	r3, r2
   22924:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   22926:	7acb      	ldrb	r3, [r1, #11]
   22928:	7a02      	ldrb	r2, [r0, #8]
   2292a:	4053      	eors	r3, r2
   2292c:	7203      	strb	r3, [r0, #8]
   2292e:	7a42      	ldrb	r2, [r0, #9]
   22930:	894b      	ldrh	r3, [r1, #10]
   22932:	4053      	eors	r3, r2
   22934:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   22936:	688a      	ldr	r2, [r1, #8]
   22938:	7a83      	ldrb	r3, [r0, #10]
   2293a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2293e:	7283      	strb	r3, [r0, #10]
   22940:	688a      	ldr	r2, [r1, #8]
   22942:	7ac3      	ldrb	r3, [r0, #11]
   22944:	4053      	eors	r3, r2
   22946:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   22948:	7bcb      	ldrb	r3, [r1, #15]
   2294a:	7b02      	ldrb	r2, [r0, #12]
   2294c:	4053      	eors	r3, r2
   2294e:	7303      	strb	r3, [r0, #12]
   22950:	89cb      	ldrh	r3, [r1, #14]
   22952:	7b42      	ldrb	r2, [r0, #13]
   22954:	4053      	eors	r3, r2
   22956:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   22958:	68ca      	ldr	r2, [r1, #12]
   2295a:	7b83      	ldrb	r3, [r0, #14]
   2295c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22960:	7383      	strb	r3, [r0, #14]
   22962:	68ca      	ldr	r2, [r1, #12]
   22964:	7bc3      	ldrb	r3, [r0, #15]
   22966:	4053      	eors	r3, r2
   22968:	73c3      	strb	r3, [r0, #15]
}
   2296a:	4770      	bx	lr

0002296c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2296c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2296e:	7802      	ldrb	r2, [r0, #0]
   22970:	f88d 2000 	strb.w	r2, [sp]
   22974:	7942      	ldrb	r2, [r0, #5]
   22976:	f88d 2001 	strb.w	r2, [sp, #1]
   2297a:	7a82      	ldrb	r2, [r0, #10]
   2297c:	f88d 2002 	strb.w	r2, [sp, #2]
   22980:	7bc2      	ldrb	r2, [r0, #15]
   22982:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   22986:	7902      	ldrb	r2, [r0, #4]
   22988:	f88d 2004 	strb.w	r2, [sp, #4]
   2298c:	7a42      	ldrb	r2, [r0, #9]
   2298e:	f88d 2005 	strb.w	r2, [sp, #5]
   22992:	7b82      	ldrb	r2, [r0, #14]
   22994:	f88d 2006 	strb.w	r2, [sp, #6]
   22998:	78c2      	ldrb	r2, [r0, #3]
   2299a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2299e:	7a02      	ldrb	r2, [r0, #8]
   229a0:	f88d 2008 	strb.w	r2, [sp, #8]
   229a4:	7b42      	ldrb	r2, [r0, #13]
   229a6:	f88d 2009 	strb.w	r2, [sp, #9]
   229aa:	7882      	ldrb	r2, [r0, #2]
   229ac:	f88d 200a 	strb.w	r2, [sp, #10]
   229b0:	79c2      	ldrb	r2, [r0, #7]
   229b2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   229b6:	7b02      	ldrb	r2, [r0, #12]
   229b8:	f88d 200c 	strb.w	r2, [sp, #12]
   229bc:	7842      	ldrb	r2, [r0, #1]
   229be:	7ac3      	ldrb	r3, [r0, #11]
   229c0:	f88d 200d 	strb.w	r2, [sp, #13]
   229c4:	7982      	ldrb	r2, [r0, #6]
   229c6:	f88d 200e 	strb.w	r2, [sp, #14]
   229ca:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   229ce:	2310      	movs	r3, #16
   229d0:	466a      	mov	r2, sp
   229d2:	4619      	mov	r1, r3
   229d4:	f7ff ff6d 	bl	228b2 <_copy>
}
   229d8:	b005      	add	sp, #20
   229da:	f85d fb04 	ldr.w	pc, [sp], #4

000229de <mult_row_column>:
{
   229de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   229e0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   229e2:	7808      	ldrb	r0, [r1, #0]
{
   229e4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   229e6:	f7ff ff73 	bl	228d0 <_double_byte>
   229ea:	4605      	mov	r5, r0
   229ec:	7860      	ldrb	r0, [r4, #1]
   229ee:	f7ff ff6f 	bl	228d0 <_double_byte>
   229f2:	78a2      	ldrb	r2, [r4, #2]
   229f4:	7863      	ldrb	r3, [r4, #1]
   229f6:	4053      	eors	r3, r2
   229f8:	78e2      	ldrb	r2, [r4, #3]
   229fa:	4053      	eors	r3, r2
   229fc:	405d      	eors	r5, r3
   229fe:	4068      	eors	r0, r5
   22a00:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   22a02:	7860      	ldrb	r0, [r4, #1]
   22a04:	7827      	ldrb	r7, [r4, #0]
   22a06:	f7ff ff63 	bl	228d0 <_double_byte>
   22a0a:	4605      	mov	r5, r0
   22a0c:	78a0      	ldrb	r0, [r4, #2]
   22a0e:	f7ff ff5f 	bl	228d0 <_double_byte>
   22a12:	78a3      	ldrb	r3, [r4, #2]
   22a14:	405f      	eors	r7, r3
   22a16:	78e3      	ldrb	r3, [r4, #3]
   22a18:	405f      	eors	r7, r3
   22a1a:	407d      	eors	r5, r7
   22a1c:	4068      	eors	r0, r5
   22a1e:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   22a20:	7863      	ldrb	r3, [r4, #1]
   22a22:	7827      	ldrb	r7, [r4, #0]
   22a24:	78a0      	ldrb	r0, [r4, #2]
   22a26:	405f      	eors	r7, r3
   22a28:	f7ff ff52 	bl	228d0 <_double_byte>
   22a2c:	4605      	mov	r5, r0
   22a2e:	78e0      	ldrb	r0, [r4, #3]
   22a30:	f7ff ff4e 	bl	228d0 <_double_byte>
   22a34:	78e3      	ldrb	r3, [r4, #3]
   22a36:	405f      	eors	r7, r3
   22a38:	407d      	eors	r5, r7
   22a3a:	4068      	eors	r0, r5
   22a3c:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   22a3e:	7820      	ldrb	r0, [r4, #0]
   22a40:	f7ff ff46 	bl	228d0 <_double_byte>
   22a44:	7862      	ldrb	r2, [r4, #1]
   22a46:	7823      	ldrb	r3, [r4, #0]
   22a48:	4053      	eors	r3, r2
   22a4a:	78a2      	ldrb	r2, [r4, #2]
   22a4c:	4053      	eors	r3, r2
   22a4e:	ea80 0503 	eor.w	r5, r0, r3
   22a52:	78e0      	ldrb	r0, [r4, #3]
   22a54:	f7ff ff3c 	bl	228d0 <_double_byte>
   22a58:	b2ed      	uxtb	r5, r5
   22a5a:	4045      	eors	r5, r0
   22a5c:	70f5      	strb	r5, [r6, #3]
}
   22a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022a60 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   22a60:	b570      	push	{r4, r5, r6, lr}
   22a62:	4614      	mov	r4, r2
   22a64:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   22a66:	4605      	mov	r5, r0
   22a68:	2800      	cmp	r0, #0
   22a6a:	d049      	beq.n	22b00 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   22a6c:	2900      	cmp	r1, #0
   22a6e:	d049      	beq.n	22b04 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   22a70:	2a00      	cmp	r2, #0
   22a72:	d049      	beq.n	22b08 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   22a74:	2310      	movs	r3, #16
   22a76:	460a      	mov	r2, r1
   22a78:	4668      	mov	r0, sp
   22a7a:	4619      	mov	r1, r3
   22a7c:	f7ff ff19 	bl	228b2 <_copy>
	add_round_key(state, s->words);
   22a80:	4621      	mov	r1, r4
   22a82:	4668      	mov	r0, sp
   22a84:	f7ff ff2d 	bl	228e2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   22a88:	3410      	adds	r4, #16
   22a8a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   22a8e:	4668      	mov	r0, sp
   22a90:	f7f0 ff12 	bl	138b8 <sub_bytes>
		shift_rows(state);
   22a94:	4668      	mov	r0, sp
   22a96:	f7ff ff69 	bl	2296c <shift_rows>
	mult_row_column(t, s);
   22a9a:	4669      	mov	r1, sp
   22a9c:	a804      	add	r0, sp, #16
   22a9e:	f7ff ff9e 	bl	229de <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   22aa2:	a901      	add	r1, sp, #4
   22aa4:	a805      	add	r0, sp, #20
   22aa6:	f7ff ff9a 	bl	229de <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   22aaa:	a902      	add	r1, sp, #8
   22aac:	a806      	add	r0, sp, #24
   22aae:	f7ff ff96 	bl	229de <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   22ab2:	a903      	add	r1, sp, #12
   22ab4:	a807      	add	r0, sp, #28
   22ab6:	f7ff ff92 	bl	229de <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   22aba:	2310      	movs	r3, #16
   22abc:	4619      	mov	r1, r3
   22abe:	eb0d 0203 	add.w	r2, sp, r3
   22ac2:	4668      	mov	r0, sp
   22ac4:	f7ff fef5 	bl	228b2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   22ac8:	4621      	mov	r1, r4
   22aca:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   22acc:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   22ace:	f7ff ff08 	bl	228e2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   22ad2:	42b4      	cmp	r4, r6
   22ad4:	d1db      	bne.n	22a8e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   22ad6:	f7f0 feef 	bl	138b8 <sub_bytes>
	shift_rows(state);
   22ada:	4668      	mov	r0, sp
   22adc:	f7ff ff46 	bl	2296c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   22ae0:	4621      	mov	r1, r4
   22ae2:	4668      	mov	r0, sp
   22ae4:	f7ff fefd 	bl	228e2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   22ae8:	2310      	movs	r3, #16
   22aea:	4619      	mov	r1, r3
   22aec:	466a      	mov	r2, sp
   22aee:	4628      	mov	r0, r5
   22af0:	f7ff fedf 	bl	228b2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   22af4:	4668      	mov	r0, sp
   22af6:	2210      	movs	r2, #16
   22af8:	2100      	movs	r1, #0
   22afa:	f7ff fee7 	bl	228cc <_set>

	return TC_CRYPTO_SUCCESS;
   22afe:	2001      	movs	r0, #1
}
   22b00:	b008      	add	sp, #32
   22b02:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   22b04:	4608      	mov	r0, r1
   22b06:	e7fb      	b.n	22b00 <tc_aes_encrypt+0xa0>
   22b08:	4610      	mov	r0, r2
   22b0a:	e7f9      	b.n	22b00 <tc_aes_encrypt+0xa0>

00022b0c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   22b0c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22b0e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   22b10:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22b12:	f912 3b10 	ldrsb.w	r3, [r2], #16
   22b16:	2b00      	cmp	r3, #0
   22b18:	bfac      	ite	ge
   22b1a:	2300      	movge	r3, #0
   22b1c:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   22b1e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   22b22:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   22b26:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   22b28:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   22b2c:	d002      	beq.n	22b34 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   22b2e:	7813      	ldrb	r3, [r2, #0]
   22b30:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   22b32:	e7f4      	b.n	22b1e <gf_double+0x12>
	}
}
   22b34:	bd10      	pop	{r4, pc}

00022b36 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   22b36:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   22b38:	b120      	cbz	r0, 22b44 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   22b3a:	2258      	movs	r2, #88	; 0x58
   22b3c:	2100      	movs	r1, #0
   22b3e:	f7ff fec5 	bl	228cc <_set>
   22b42:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   22b44:	bd08      	pop	{r3, pc}

00022b46 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   22b46:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   22b48:	4604      	mov	r4, r0
   22b4a:	b188      	cbz	r0, 22b70 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   22b4c:	2210      	movs	r2, #16
   22b4e:	2100      	movs	r1, #0
   22b50:	f7ff febc 	bl	228cc <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   22b54:	2210      	movs	r2, #16
   22b56:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22b5a:	2100      	movs	r1, #0
   22b5c:	f7ff feb6 	bl	228cc <_set>
	s->leftover_offset = 0;
   22b60:	2300      	movs	r3, #0
   22b62:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   22b64:	2200      	movs	r2, #0
   22b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22b6a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   22b6e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   22b70:	bd10      	pop	{r4, pc}

00022b72 <tc_cmac_setup>:
{
   22b72:	b570      	push	{r4, r5, r6, lr}
   22b74:	4604      	mov	r4, r0
   22b76:	460d      	mov	r5, r1
   22b78:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   22b7a:	b310      	cbz	r0, 22bc2 <tc_cmac_setup+0x50>
   22b7c:	b311      	cbz	r1, 22bc4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   22b7e:	2258      	movs	r2, #88	; 0x58
   22b80:	2100      	movs	r1, #0
   22b82:	f7ff fea3 	bl	228cc <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   22b86:	4629      	mov	r1, r5
	s->sched = sched;
   22b88:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   22b8a:	4630      	mov	r0, r6
   22b8c:	f7f0 fea0 	bl	138d0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   22b90:	2210      	movs	r2, #16
   22b92:	2100      	movs	r1, #0
   22b94:	4620      	mov	r0, r4
   22b96:	f7ff fe99 	bl	228cc <_set>
	gf_double (s->K1, s->iv);
   22b9a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   22b9e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22ba0:	4621      	mov	r1, r4
   22ba2:	4620      	mov	r0, r4
   22ba4:	f7ff ff5c 	bl	22a60 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   22ba8:	4621      	mov	r1, r4
   22baa:	4628      	mov	r0, r5
   22bac:	f7ff ffae 	bl	22b0c <gf_double>
	gf_double (s->K2, s->K1);
   22bb0:	4629      	mov	r1, r5
   22bb2:	f104 0020 	add.w	r0, r4, #32
   22bb6:	f7ff ffa9 	bl	22b0c <gf_double>
	tc_cmac_init(s);
   22bba:	4620      	mov	r0, r4
   22bbc:	f7ff ffc3 	bl	22b46 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   22bc0:	2001      	movs	r0, #1
}
   22bc2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   22bc4:	4608      	mov	r0, r1
   22bc6:	e7fc      	b.n	22bc2 <tc_cmac_setup+0x50>

00022bc8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   22bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22bcc:	460e      	mov	r6, r1
   22bce:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   22bd0:	4604      	mov	r4, r0
   22bd2:	2800      	cmp	r0, #0
   22bd4:	d060      	beq.n	22c98 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   22bd6:	b1fa      	cbz	r2, 22c18 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   22bd8:	2900      	cmp	r1, #0
   22bda:	d05d      	beq.n	22c98 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   22bdc:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   22be0:	ea53 0102 	orrs.w	r1, r3, r2
   22be4:	d058      	beq.n	22c98 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   22be6:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   22be8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   22bec:	f142 32ff 	adc.w	r2, r2, #4294967295
   22bf0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   22bf4:	f1b8 0f00 	cmp.w	r8, #0
   22bf8:	d02c      	beq.n	22c54 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   22bfa:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22bfe:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   22c02:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22c04:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   22c06:	d20a      	bcs.n	22c1e <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22c08:	462b      	mov	r3, r5
   22c0a:	4632      	mov	r2, r6
   22c0c:	4629      	mov	r1, r5
   22c0e:	f7ff fe50 	bl	228b2 <_copy>
			s->leftover_offset += data_length;
   22c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22c14:	442b      	add	r3, r5
   22c16:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   22c18:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   22c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   22c1e:	463b      	mov	r3, r7
   22c20:	4632      	mov	r2, r6
   22c22:	4639      	mov	r1, r7
   22c24:	f7ff fe45 	bl	228b2 <_copy>
		data_length -= remaining_space;
   22c28:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   22c2a:	2300      	movs	r3, #0
   22c2c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   22c2e:	4445      	add	r5, r8
		data += remaining_space;
   22c30:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22c32:	1e63      	subs	r3, r4, #1
   22c34:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   22c38:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22c3c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22c40:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   22c42:	ea82 0200 	eor.w	r2, r2, r0
   22c46:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22c48:	d1f6      	bne.n	22c38 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22c4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22c4c:	4621      	mov	r1, r4
   22c4e:	4620      	mov	r0, r4
   22c50:	f7ff ff06 	bl	22a60 <tc_aes_encrypt>
   22c54:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   22c58:	2d10      	cmp	r5, #16
   22c5a:	d80a      	bhi.n	22c72 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   22c5c:	2d00      	cmp	r5, #0
   22c5e:	d0db      	beq.n	22c18 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   22c60:	462b      	mov	r3, r5
   22c62:	4632      	mov	r2, r6
   22c64:	4629      	mov	r1, r5
   22c66:	f104 0030 	add.w	r0, r4, #48	; 0x30
   22c6a:	f7ff fe22 	bl	228b2 <_copy>
		s->leftover_offset = data_length;
   22c6e:	6465      	str	r5, [r4, #68]	; 0x44
   22c70:	e7d2      	b.n	22c18 <tc_cmac_update+0x50>
   22c72:	1e63      	subs	r3, r4, #1
   22c74:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   22c76:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22c7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22c7e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   22c80:	ea82 0200 	eor.w	r2, r2, r0
   22c84:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22c86:	d1f6      	bne.n	22c76 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   22c88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22c8a:	4621      	mov	r1, r4
   22c8c:	4620      	mov	r0, r4
   22c8e:	f7ff fee7 	bl	22a60 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   22c92:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   22c94:	3d10      	subs	r5, #16
   22c96:	e7df      	b.n	22c58 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   22c98:	2000      	movs	r0, #0
   22c9a:	e7be      	b.n	22c1a <tc_cmac_update+0x52>

00022c9c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   22c9c:	b570      	push	{r4, r5, r6, lr}
   22c9e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   22ca0:	4605      	mov	r5, r0
   22ca2:	b1e8      	cbz	r0, 22ce0 <tc_cmac_final+0x44>
   22ca4:	b369      	cbz	r1, 22d02 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   22ca6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   22ca8:	2a10      	cmp	r2, #16
   22caa:	d11a      	bne.n	22ce2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   22cac:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22cae:	1e63      	subs	r3, r4, #1
   22cb0:	3901      	subs	r1, #1
   22cb2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22cb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22cba:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   22cbe:	4072      	eors	r2, r6
   22cc0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22cc4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22cc6:	ea82 0206 	eor.w	r2, r2, r6
   22cca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22ccc:	d1f3      	bne.n	22cb6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   22cce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   22cd0:	4621      	mov	r1, r4
   22cd2:	4628      	mov	r0, r5
   22cd4:	f7ff fec4 	bl	22a60 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22cd8:	4620      	mov	r0, r4
   22cda:	f7ff ff2c 	bl	22b36 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   22cde:	2001      	movs	r0, #1
}
   22ce0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   22ce2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   22ce6:	2100      	movs	r1, #0
   22ce8:	f1c2 0210 	rsb	r2, r2, #16
   22cec:	4420      	add	r0, r4
   22cee:	f7ff fded 	bl	228cc <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   22cf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22cf4:	4423      	add	r3, r4
   22cf6:	2280      	movs	r2, #128	; 0x80
   22cf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   22cfc:	f104 0120 	add.w	r1, r4, #32
   22d00:	e7d5      	b.n	22cae <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   22d02:	4608      	mov	r0, r1
   22d04:	e7ec      	b.n	22ce0 <tc_cmac_final+0x44>

00022d06 <abort_function>:
{
   22d06:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   22d08:	2000      	movs	r0, #0
   22d0a:	f7ef feaf 	bl	12a6c <sys_reboot>

00022d0e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   22d0e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22d10:	6800      	ldr	r0, [r0, #0]
   22d12:	f7f0 bf3b 	b.w	13b8c <z_arm_fatal_error>

00022d16 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22d16:	2100      	movs	r1, #0
   22d18:	2001      	movs	r0, #1
   22d1a:	f7f0 bf37 	b.w	13b8c <z_arm_fatal_error>

00022d1e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   22d1e:	b508      	push	{r3, lr}
	handler();
   22d20:	f7f0 fff2 	bl	13d08 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   22d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   22d28:	f7f1 b8ca 	b.w	13ec0 <z_arm_exc_exit>

00022d2c <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   22d2c:	2300      	movs	r3, #0
   22d2e:	f7f0 b945 	b.w	12fbc <z_impl_z_log_msg_static_create>

00022d32 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   22d32:	3901      	subs	r1, #1
   22d34:	4603      	mov	r3, r0
   22d36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   22d3a:	b90a      	cbnz	r2, 22d40 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   22d3c:	701a      	strb	r2, [r3, #0]

	return dest;
}
   22d3e:	4770      	bx	lr
		*d = *s;
   22d40:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   22d44:	e7f7      	b.n	22d36 <strcpy+0x4>

00022d46 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   22d46:	4603      	mov	r3, r0
	size_t n = 0;
   22d48:	2000      	movs	r0, #0

	while (*s != '\0') {
   22d4a:	5c1a      	ldrb	r2, [r3, r0]
   22d4c:	b902      	cbnz	r2, 22d50 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   22d4e:	4770      	bx	lr
		n++;
   22d50:	3001      	adds	r0, #1
   22d52:	e7fa      	b.n	22d4a <strlen+0x4>

00022d54 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   22d54:	4603      	mov	r3, r0
	size_t n = 0;
   22d56:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   22d58:	5c1a      	ldrb	r2, [r3, r0]
   22d5a:	b10a      	cbz	r2, 22d60 <strnlen+0xc>
   22d5c:	4288      	cmp	r0, r1
   22d5e:	d100      	bne.n	22d62 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   22d60:	4770      	bx	lr
		n++;
   22d62:	3001      	adds	r0, #1
   22d64:	e7f8      	b.n	22d58 <strnlen+0x4>

00022d66 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   22d66:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   22d68:	b15a      	cbz	r2, 22d82 <memcmp+0x1c>
   22d6a:	3901      	subs	r1, #1
   22d6c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   22d6e:	f810 2b01 	ldrb.w	r2, [r0], #1
   22d72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   22d76:	42a0      	cmp	r0, r4
   22d78:	d001      	beq.n	22d7e <memcmp+0x18>
   22d7a:	429a      	cmp	r2, r3
   22d7c:	d0f7      	beq.n	22d6e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   22d7e:	1ad0      	subs	r0, r2, r3
}
   22d80:	bd10      	pop	{r4, pc}
		return 0;
   22d82:	4610      	mov	r0, r2
   22d84:	e7fc      	b.n	22d80 <memcmp+0x1a>

00022d86 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   22d86:	1a43      	subs	r3, r0, r1
   22d88:	4293      	cmp	r3, r2
{
   22d8a:	b510      	push	{r4, lr}
   22d8c:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   22d90:	d308      	bcc.n	22da4 <memmove+0x1e>
   22d92:	3901      	subs	r1, #1
	char *dest = d;
   22d94:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   22d96:	429a      	cmp	r2, r3
   22d98:	d00b      	beq.n	22db2 <memmove+0x2c>
			*dest = *src;
   22d9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   22d9e:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   22da2:	e7f8      	b.n	22d96 <memmove+0x10>
   22da4:	440a      	add	r2, r1
			dest[n] = src[n];
   22da6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   22daa:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   22dae:	428a      	cmp	r2, r1
   22db0:	d1f9      	bne.n	22da6 <memmove+0x20>
		}
	}

	return d;
}
   22db2:	bd10      	pop	{r4, pc}

00022db4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   22db4:	b510      	push	{r4, lr}
   22db6:	1e43      	subs	r3, r0, #1
   22db8:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   22dba:	4291      	cmp	r1, r2
   22dbc:	d100      	bne.n	22dc0 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   22dbe:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   22dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
   22dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   22dc8:	e7f7      	b.n	22dba <memcpy+0x6>

00022dca <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   22dca:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   22dcc:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   22dce:	4603      	mov	r3, r0
	while (n > 0) {
   22dd0:	4293      	cmp	r3, r2
   22dd2:	d100      	bne.n	22dd6 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   22dd4:	4770      	bx	lr
		*(d_byte++) = c_byte;
   22dd6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   22dda:	e7f9      	b.n	22dd0 <memset+0x6>

00022ddc <_stdout_hook_default>:
}
   22ddc:	f04f 30ff 	mov.w	r0, #4294967295
   22de0:	4770      	bx	lr

00022de2 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   22de2:	2806      	cmp	r0, #6
   22de4:	d108      	bne.n	22df8 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   22de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22dea:	2201      	movs	r2, #1
   22dec:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   22df0:	f3bf 8f4f 	dsb	sy
        __WFE();
   22df4:	bf20      	wfe
    while (true)
   22df6:	e7fd      	b.n	22df4 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   22df8:	4770      	bx	lr

00022dfa <pm_state_exit_post_ops>:
   22dfa:	2300      	movs	r3, #0
   22dfc:	f383 8811 	msr	BASEPRI, r3
   22e00:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   22e04:	4770      	bx	lr

00022e06 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   22e06:	b510      	push	{r4, lr}
   22e08:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   22e0a:	7801      	ldrb	r1, [r0, #0]
   22e0c:	7822      	ldrb	r2, [r4, #0]
   22e0e:	428a      	cmp	r2, r1
{
   22e10:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   22e12:	d00f      	beq.n	22e34 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   22e14:	4669      	mov	r1, sp
   22e16:	f7f1 fd9d 	bl	14954 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   22e1a:	a905      	add	r1, sp, #20
   22e1c:	4620      	mov	r0, r4
   22e1e:	f7f1 fd99 	bl	14954 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   22e22:	2210      	movs	r2, #16
   22e24:	f10d 0115 	add.w	r1, sp, #21
   22e28:	f10d 0001 	add.w	r0, sp, #1
   22e2c:	f7ff ff9b 	bl	22d66 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   22e30:	b00a      	add	sp, #40	; 0x28
   22e32:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   22e34:	2a01      	cmp	r2, #1
   22e36:	d006      	beq.n	22e46 <bt_uuid_cmp+0x40>
   22e38:	2a02      	cmp	r2, #2
   22e3a:	d007      	beq.n	22e4c <bt_uuid_cmp+0x46>
   22e3c:	b972      	cbnz	r2, 22e5c <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   22e3e:	8840      	ldrh	r0, [r0, #2]
   22e40:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   22e42:	1ac0      	subs	r0, r0, r3
   22e44:	e7f4      	b.n	22e30 <bt_uuid_cmp+0x2a>
   22e46:	6840      	ldr	r0, [r0, #4]
   22e48:	6863      	ldr	r3, [r4, #4]
   22e4a:	e7fa      	b.n	22e42 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22e4c:	2210      	movs	r2, #16
   22e4e:	1c61      	adds	r1, r4, #1
   22e50:	3001      	adds	r0, #1
}
   22e52:	b00a      	add	sp, #40	; 0x28
   22e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22e58:	f7ff bf85 	b.w	22d66 <memcmp>
	switch (u1->type) {
   22e5c:	f06f 0015 	mvn.w	r0, #21
   22e60:	e7e6      	b.n	22e30 <bt_uuid_cmp+0x2a>

00022e62 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22e62:	2a04      	cmp	r2, #4
{
   22e64:	b510      	push	{r4, lr}
	switch (data_len) {
   22e66:	d00a      	beq.n	22e7e <bt_uuid_create+0x1c>
   22e68:	2a10      	cmp	r2, #16
   22e6a:	d00d      	beq.n	22e88 <bt_uuid_create+0x26>
   22e6c:	2a02      	cmp	r2, #2
   22e6e:	f04f 0300 	mov.w	r3, #0
   22e72:	d10f      	bne.n	22e94 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   22e74:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22e76:	880b      	ldrh	r3, [r1, #0]
   22e78:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   22e7a:	2001      	movs	r0, #1
}
   22e7c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   22e7e:	2301      	movs	r3, #1
   22e80:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22e82:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   22e84:	6043      	str	r3, [r0, #4]
		break;
   22e86:	e7f8      	b.n	22e7a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   22e88:	2302      	movs	r3, #2
   22e8a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   22e8e:	f7ff ff91 	bl	22db4 <memcpy>
		break;
   22e92:	e7f2      	b.n	22e7a <bt_uuid_create+0x18>
	switch (data_len) {
   22e94:	4618      	mov	r0, r3
   22e96:	e7f1      	b.n	22e7c <bt_uuid_create+0x1a>

00022e98 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   22e98:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   22e9a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   22e9c:	2106      	movs	r1, #6
{
   22e9e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   22ea0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   22ea4:	f7f9 fa6e 	bl	1c384 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   22ea8:	b918      	cbnz	r0, 22eb2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   22eaa:	79a3      	ldrb	r3, [r4, #6]
   22eac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   22eb0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   22eb2:	bd10      	pop	{r4, pc}

00022eb4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   22eb4:	280f      	cmp	r0, #15
   22eb6:	d807      	bhi.n	22ec8 <bt_hci_evt_get_flags+0x14>
   22eb8:	280d      	cmp	r0, #13
   22eba:	d80b      	bhi.n	22ed4 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   22ebc:	2805      	cmp	r0, #5
   22ebe:	bf08      	it	eq
   22ec0:	2003      	moveq	r0, #3
   22ec2:	bf18      	it	ne
   22ec4:	2002      	movne	r0, #2
   22ec6:	4770      	bx	lr
	switch (evt) {
   22ec8:	2813      	cmp	r0, #19
   22eca:	d003      	beq.n	22ed4 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   22ecc:	281a      	cmp	r0, #26
   22ece:	bf08      	it	eq
   22ed0:	2001      	moveq	r0, #1
   22ed2:	e7f6      	b.n	22ec2 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   22ed4:	2001      	movs	r0, #1
	}
}
   22ed6:	4770      	bx	lr

00022ed8 <hci_vendor_event>:
}
   22ed8:	4770      	bx	lr

00022eda <bt_addr_le_copy>:
   22eda:	2207      	movs	r2, #7
   22edc:	f7ff bf6a 	b.w	22db4 <memcpy>

00022ee0 <atomic_or>:
{
   22ee0:	b510      	push	{r4, lr}
   22ee2:	4603      	mov	r3, r0
}
   22ee4:	f3bf 8f5b 	dmb	ish
   22ee8:	e853 0f00 	ldrex	r0, [r3]
   22eec:	ea40 0201 	orr.w	r2, r0, r1
   22ef0:	e843 2400 	strex	r4, r2, [r3]
   22ef4:	2c00      	cmp	r4, #0
   22ef6:	d1f7      	bne.n	22ee8 <atomic_or+0x8>
   22ef8:	f3bf 8f5b 	dmb	ish
   22efc:	bd10      	pop	{r4, pc}

00022efe <z_log_msg_static_create.constprop.0>:
   22efe:	2300      	movs	r3, #0
   22f00:	f7f0 b85c 	b.w	12fbc <z_impl_z_log_msg_static_create>

00022f04 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22f04:	f3bf 8f5b 	dmb	ish
   22f08:	e850 3f00 	ldrex	r3, [r0]
   22f0c:	400b      	ands	r3, r1
   22f0e:	e840 3200 	strex	r2, r3, [r0]
   22f12:	2a00      	cmp	r2, #0
   22f14:	d1f8      	bne.n	22f08 <atomic_and.isra.0+0x4>
   22f16:	f3bf 8f5b 	dmb	ish
}
   22f1a:	4770      	bx	lr

00022f1c <bt_hci_disconnect>:
{
   22f1c:	b570      	push	{r4, r5, r6, lr}
   22f1e:	4606      	mov	r6, r0
   22f20:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   22f22:	f240 4006 	movw	r0, #1030	; 0x406
   22f26:	2103      	movs	r1, #3
   22f28:	f7f2 f9ba 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   22f2c:	4604      	mov	r4, r0
   22f2e:	b168      	cbz	r0, 22f4c <bt_hci_disconnect+0x30>
   22f30:	2103      	movs	r1, #3
   22f32:	300c      	adds	r0, #12
   22f34:	f001 fb00 	bl	24538 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   22f38:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   22f3a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   22f3c:	4621      	mov	r1, r4
   22f3e:	2200      	movs	r2, #0
}
   22f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   22f44:	f240 4006 	movw	r0, #1030	; 0x406
   22f48:	f7f2 b9e4 	b.w	15314 <bt_hci_cmd_send_sync>
}
   22f4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f50:	bd70      	pop	{r4, r5, r6, pc}

00022f52 <bt_le_set_data_len>:
{
   22f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f54:	4607      	mov	r7, r0
   22f56:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22f58:	f242 0022 	movw	r0, #8226	; 0x2022
   22f5c:	2106      	movs	r1, #6
{
   22f5e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22f60:	f7f2 f99e 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   22f64:	4604      	mov	r4, r0
   22f66:	b178      	cbz	r0, 22f88 <bt_le_set_data_len+0x36>
   22f68:	2106      	movs	r1, #6
   22f6a:	300c      	adds	r0, #12
   22f6c:	f001 fae4 	bl	24538 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22f70:	883b      	ldrh	r3, [r7, #0]
   22f72:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   22f74:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   22f76:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   22f78:	4621      	mov	r1, r4
   22f7a:	2200      	movs	r2, #0
}
   22f7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   22f80:	f242 0022 	movw	r0, #8226	; 0x2022
   22f84:	f7f2 b9c6 	b.w	15314 <bt_hci_cmd_send_sync>
}
   22f88:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022f8e <bt_le_set_phy>:
{
   22f8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22f92:	4681      	mov	r9, r0
   22f94:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22f96:	f242 0032 	movw	r0, #8242	; 0x2032
   22f9a:	2107      	movs	r1, #7
{
   22f9c:	f89d a020 	ldrb.w	sl, [sp, #32]
   22fa0:	4617      	mov	r7, r2
   22fa2:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22fa4:	f7f2 f97c 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   22fa8:	4605      	mov	r5, r0
   22faa:	b1a0      	cbz	r0, 22fd6 <bt_le_set_phy+0x48>
   22fac:	2107      	movs	r1, #7
   22fae:	300c      	adds	r0, #12
   22fb0:	f001 fac2 	bl	24538 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22fb4:	f8b9 3000 	ldrh.w	r3, [r9]
   22fb8:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   22fba:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   22fbe:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22fc0:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   22fc2:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   22fc6:	4629      	mov	r1, r5
   22fc8:	2200      	movs	r2, #0
}
   22fca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   22fce:	f242 0032 	movw	r0, #8242	; 0x2032
   22fd2:	f7f2 b99f 	b.w	15314 <bt_hci_cmd_send_sync>
}
   22fd6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00022fde <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   22fde:	68c0      	ldr	r0, [r0, #12]
   22fe0:	f7f2 baa2 	b.w	15528 <bt_hci_le_enh_conn_complete>

00022fe4 <bt_le_conn_params_valid>:
{
   22fe4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   22fe6:	8803      	ldrh	r3, [r0, #0]
   22fe8:	8842      	ldrh	r2, [r0, #2]
   22fea:	4293      	cmp	r3, r2
   22fec:	d819      	bhi.n	23022 <bt_le_conn_params_valid+0x3e>
   22fee:	2b05      	cmp	r3, #5
   22ff0:	d917      	bls.n	23022 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   22ff2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   22ff6:	d814      	bhi.n	23022 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   22ff8:	8883      	ldrh	r3, [r0, #4]
   22ffa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   22ffe:	d210      	bcs.n	23022 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   23000:	88c0      	ldrh	r0, [r0, #6]
   23002:	f1a0 010a 	sub.w	r1, r0, #10
   23006:	b289      	uxth	r1, r1
   23008:	f640 4476 	movw	r4, #3190	; 0xc76
   2300c:	42a1      	cmp	r1, r4
   2300e:	d808      	bhi.n	23022 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   23010:	3301      	adds	r3, #1
   23012:	b29b      	uxth	r3, r3
   23014:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   23016:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2301a:	bf34      	ite	cc
   2301c:	2001      	movcc	r0, #1
   2301e:	2000      	movcs	r0, #0
}
   23020:	bd10      	pop	{r4, pc}
		return false;
   23022:	2000      	movs	r0, #0
   23024:	e7fc      	b.n	23020 <bt_le_conn_params_valid+0x3c>

00023026 <le_conn_param_neg_reply>:
{
   23026:	b570      	push	{r4, r5, r6, lr}
   23028:	4606      	mov	r6, r0
   2302a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   2302c:	f242 0021 	movw	r0, #8225	; 0x2021
   23030:	2103      	movs	r1, #3
   23032:	f7f2 f935 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   23036:	4604      	mov	r4, r0
   23038:	b918      	cbnz	r0, 23042 <le_conn_param_neg_reply+0x1c>
}
   2303a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2303e:	f7f1 bd61 	b.w	14b04 <le_conn_param_neg_reply.part.0>
   23042:	2103      	movs	r1, #3
   23044:	300c      	adds	r0, #12
   23046:	f001 fa77 	bl	24538 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   2304a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   2304c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   2304e:	4621      	mov	r1, r4
   23050:	f242 0021 	movw	r0, #8225	; 0x2021
}
   23054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   23058:	f7f2 bbfe 	b.w	15858 <bt_hci_cmd_send>

0002305c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   2305c:	2000      	movs	r0, #0
   2305e:	4770      	bx	lr

00023060 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   23060:	2000      	movs	r0, #0
   23062:	4770      	bx	lr

00023064 <bt_addr_le_eq>:
{
   23064:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   23066:	2207      	movs	r2, #7
   23068:	f7ff fe7d 	bl	22d66 <memcmp>
}
   2306c:	fab0 f080 	clz	r0, r0
   23070:	0940      	lsrs	r0, r0, #5
   23072:	bd08      	pop	{r3, pc}

00023074 <z_log_msg_static_create.constprop.0>:
   23074:	2300      	movs	r3, #0
   23076:	f7ef bfa1 	b.w	12fbc <z_impl_z_log_msg_static_create>

0002307a <bt_lookup_id_addr>:
	return addr;
   2307a:	2800      	cmp	r0, #0
}
   2307c:	bf0c      	ite	eq
   2307e:	4608      	moveq	r0, r1
   23080:	2000      	movne	r0, #0
   23082:	4770      	bx	lr

00023084 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   23084:	b118      	cbz	r0, 2308e <bt_id_set_adv_random_addr+0xa>
   23086:	b111      	cbz	r1, 2308e <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   23088:	4608      	mov	r0, r1
   2308a:	f7f3 b8b1 	b.w	161f0 <set_random_address>
}
   2308e:	f06f 0015 	mvn.w	r0, #21
   23092:	4770      	bx	lr

00023094 <bt_id_set_adv_private_addr>:
{
   23094:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   23096:	4604      	mov	r4, r0
   23098:	b180      	cbz	r0, 230bc <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2309a:	2106      	movs	r1, #6
   2309c:	4668      	mov	r0, sp
   2309e:	f7f9 f971 	bl	1c384 <bt_rand>
	if (err) {
   230a2:	b948      	cbnz	r0, 230b8 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   230a4:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   230a8:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   230aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   230ae:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   230b0:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   230b4:	f7ff ffe6 	bl	23084 <bt_id_set_adv_random_addr>
}
   230b8:	b002      	add	sp, #8
   230ba:	bd10      	pop	{r4, pc}
		return -EINVAL;
   230bc:	f06f 0015 	mvn.w	r0, #21
   230c0:	e7fa      	b.n	230b8 <bt_id_set_adv_private_addr+0x24>

000230c2 <bt_id_adv_random_addr_check>:
}
   230c2:	3800      	subs	r0, #0
   230c4:	bf18      	it	ne
   230c6:	2001      	movne	r0, #1
   230c8:	4770      	bx	lr

000230ca <get_adv_channel_map>:
{
   230ca:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   230cc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   230d0:	bf0c      	ite	eq
   230d2:	2007      	moveq	r0, #7
   230d4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   230d6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   230d8:	bf48      	it	mi
   230da:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   230de:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   230e0:	bf48      	it	mi
   230e2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   230e6:	4770      	bx	lr

000230e8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   230e8:	f3bf 8f5b 	dmb	ish
   230ec:	6800      	ldr	r0, [r0, #0]
   230ee:	f3bf 8f5b 	dmb	ish
}
   230f2:	4770      	bx	lr

000230f4 <atomic_and>:
{
   230f4:	b510      	push	{r4, lr}
   230f6:	4603      	mov	r3, r0
}
   230f8:	f3bf 8f5b 	dmb	ish
   230fc:	e853 0f00 	ldrex	r0, [r3]
   23100:	ea00 0201 	and.w	r2, r0, r1
   23104:	e843 2400 	strex	r4, r2, [r3]
   23108:	2c00      	cmp	r4, #0
   2310a:	d1f7      	bne.n	230fc <atomic_and+0x8>
   2310c:	f3bf 8f5b 	dmb	ish
   23110:	bd10      	pop	{r4, pc}

00023112 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23112:	2301      	movs	r3, #1
{
   23114:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23116:	fa03 f101 	lsl.w	r1, r3, r1
{
   2311a:	4604      	mov	r4, r0
	if (val) {
   2311c:	b162      	cbz	r2, 23138 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2311e:	f3bf 8f5b 	dmb	ish
   23122:	e854 3f00 	ldrex	r3, [r4]
   23126:	430b      	orrs	r3, r1
   23128:	e844 3200 	strex	r2, r3, [r4]
   2312c:	2a00      	cmp	r2, #0
   2312e:	d1f8      	bne.n	23122 <atomic_set_bit_to+0x10>
   23130:	f3bf 8f5b 	dmb	ish
	}
}
   23134:	bc10      	pop	{r4}
   23136:	4770      	bx	lr
   23138:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2313a:	43c9      	mvns	r1, r1
   2313c:	f7ff bfda 	b.w	230f4 <atomic_and>

00023140 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   23140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23144:	b087      	sub	sp, #28
   23146:	4605      	mov	r5, r0
   23148:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2314c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   23150:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   23154:	460c      	mov	r4, r1
   23156:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   23158:	2100      	movs	r1, #0
   2315a:	2210      	movs	r2, #16
   2315c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2315e:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   23160:	f7ff fe33 	bl	22dca <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   23164:	b9ee      	cbnz	r6, 231a2 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   23166:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   2316a:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2316c:	a902      	add	r1, sp, #8
   2316e:	f242 0008 	movw	r0, #8200	; 0x2008
   23172:	f7f3 fa4f 	bl	16614 <hci_set_ad>
		if (err) {
   23176:	4604      	mov	r4, r0
   23178:	b978      	cbnz	r0, 2319a <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   2317a:	f1ba 0f00 	cmp.w	sl, #0
   2317e:	d13e      	bne.n	231fe <le_adv_update.constprop.0+0xbe>
   23180:	3510      	adds	r5, #16
   23182:	f3bf 8f5b 	dmb	ish
   23186:	e855 3f00 	ldrex	r3, [r5]
   2318a:	f043 0304 	orr.w	r3, r3, #4
   2318e:	e845 3200 	strex	r2, r3, [r5]
   23192:	2a00      	cmp	r2, #0
   23194:	d1f7      	bne.n	23186 <le_adv_update.constprop.0+0x46>
   23196:	f3bf 8f5b 	dmb	ish
}
   2319a:	4620      	mov	r0, r4
   2319c:	b007      	add	sp, #28
   2319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   231a2:	f7f3 f809 	bl	161b8 <bt_get_name>
   231a6:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   231a8:	b9e4      	cbnz	r4, 231e4 <le_adv_update.constprop.0+0xa4>
   231aa:	bb37      	cbnz	r7, 231fa <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   231ac:	4658      	mov	r0, fp
   231ae:	f7ff fdca 	bl	22d46 <strlen>
   231b2:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   231b4:	2e01      	cmp	r6, #1
		d[0].data = ad;
   231b6:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   231ba:	f88d 3000 	strb.w	r3, [sp]
   231be:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   231c2:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   231c6:	d1d0      	bne.n	2316a <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   231c8:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   231cc:	9605      	str	r6, [sp, #20]
			d_len = 2;
   231ce:	2202      	movs	r2, #2
   231d0:	e7cc      	b.n	2316c <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   231d2:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   231d6:	3a08      	subs	r2, #8
   231d8:	2a01      	cmp	r2, #1
   231da:	d925      	bls.n	23228 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   231dc:	3301      	adds	r3, #1
   231de:	4598      	cmp	r8, r3
   231e0:	d1f7      	bne.n	231d2 <le_adv_update.constprop.0+0x92>
   231e2:	e7e2      	b.n	231aa <le_adv_update.constprop.0+0x6a>
   231e4:	2300      	movs	r3, #0
   231e6:	e7fa      	b.n	231de <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   231e8:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   231ec:	3a08      	subs	r2, #8
   231ee:	2a01      	cmp	r2, #1
   231f0:	d91a      	bls.n	23228 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   231f2:	3301      	adds	r3, #1
   231f4:	4599      	cmp	r9, r3
   231f6:	d1f7      	bne.n	231e8 <le_adv_update.constprop.0+0xa8>
   231f8:	e7d8      	b.n	231ac <le_adv_update.constprop.0+0x6c>
   231fa:	2300      	movs	r3, #0
   231fc:	e7fa      	b.n	231f4 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   231fe:	2e02      	cmp	r6, #2
   23200:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   23204:	bf08      	it	eq
   23206:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   23208:	a902      	add	r1, sp, #8
			d_len = 2;
   2320a:	bf08      	it	eq
   2320c:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2320e:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   23212:	bf08      	it	eq
   23214:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   23218:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2321c:	f7f3 f9fa 	bl	16614 <hci_set_ad>
		if (err) {
   23220:	2800      	cmp	r0, #0
   23222:	d0ad      	beq.n	23180 <le_adv_update.constprop.0+0x40>
   23224:	4604      	mov	r4, r0
   23226:	e7b8      	b.n	2319a <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   23228:	f06f 0415 	mvn.w	r4, #21
   2322c:	e7b5      	b.n	2319a <le_adv_update.constprop.0+0x5a>

0002322e <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2322e:	6843      	ldr	r3, [r0, #4]
   23230:	f013 0008 	ands.w	r0, r3, #8
   23234:	d00a      	beq.n	2324c <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   23236:	035a      	lsls	r2, r3, #13
   23238:	d407      	bmi.n	2324a <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2323a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   2323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23242:	bf14      	ite	ne
   23244:	2002      	movne	r0, #2
   23246:	2001      	moveq	r0, #1
   23248:	4770      	bx	lr
   2324a:	2001      	movs	r0, #1
}
   2324c:	4770      	bx	lr

0002324e <bt_le_adv_set_enable_legacy>:
{
   2324e:	b570      	push	{r4, r5, r6, lr}
   23250:	4606      	mov	r6, r0
   23252:	b086      	sub	sp, #24
   23254:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   23256:	f242 000a 	movw	r0, #8202	; 0x200a
   2325a:	2101      	movs	r1, #1
   2325c:	f7f2 f820 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   23260:	4604      	mov	r4, r0
   23262:	b1b0      	cbz	r0, 23292 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   23264:	300c      	adds	r0, #12
	if (enable) {
   23266:	b195      	cbz	r5, 2328e <bt_le_adv_set_enable_legacy+0x40>
   23268:	2101      	movs	r1, #1
   2326a:	f001 f974 	bl	24556 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2326e:	f106 0210 	add.w	r2, r6, #16
   23272:	a903      	add	r1, sp, #12
   23274:	4620      	mov	r0, r4
   23276:	9500      	str	r5, [sp, #0]
   23278:	2307      	movs	r3, #7
   2327a:	f7f1 ffff 	bl	1527c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2327e:	2200      	movs	r2, #0
   23280:	4621      	mov	r1, r4
   23282:	f242 000a 	movw	r0, #8202	; 0x200a
   23286:	f7f2 f845 	bl	15314 <bt_hci_cmd_send_sync>
}
   2328a:	b006      	add	sp, #24
   2328c:	bd70      	pop	{r4, r5, r6, pc}
   2328e:	4629      	mov	r1, r5
   23290:	e7eb      	b.n	2326a <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   23292:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23296:	e7f8      	b.n	2328a <bt_le_adv_set_enable_legacy+0x3c>

00023298 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   23298:	3018      	adds	r0, #24
   2329a:	f002 b915 	b.w	254c8 <k_work_cancel_delayable>

0002329e <z_log_msg_static_create.constprop.0>:
   2329e:	2300      	movs	r3, #0
   232a0:	f7ef be8c 	b.w	12fbc <z_impl_z_log_msg_static_create>

000232a4 <tx_complete_work>:
	tx_notify(conn);
   232a4:	3828      	subs	r0, #40	; 0x28
   232a6:	f7f3 bcdd 	b.w	16c64 <tx_notify>

000232aa <bt_conn_reset_rx_state>:
{
   232aa:	b510      	push	{r4, lr}
   232ac:	4604      	mov	r4, r0
	if (!conn->rx) {
   232ae:	6900      	ldr	r0, [r0, #16]
   232b0:	b118      	cbz	r0, 232ba <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   232b2:	f7f6 fce9 	bl	19c88 <net_buf_unref>
	conn->rx = NULL;
   232b6:	2300      	movs	r3, #0
   232b8:	6123      	str	r3, [r4, #16]
}
   232ba:	bd10      	pop	{r4, pc}

000232bc <conn_cleanup>:
{
   232bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232c0:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   232c2:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   232c4:	f104 0638 	add.w	r6, r4, #56	; 0x38
   232c8:	2300      	movs	r3, #0
   232ca:	2200      	movs	r2, #0
   232cc:	4630      	mov	r0, r6
   232ce:	f001 f8d8 	bl	24482 <net_buf_get>
   232d2:	4603      	mov	r3, r0
   232d4:	b950      	cbnz	r0, 232ec <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   232d6:	4620      	mov	r0, r4
   232d8:	f7ff ffe7 	bl	232aa <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   232dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   232e0:	2200      	movs	r2, #0
}
   232e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   232e6:	2300      	movs	r3, #0
   232e8:	f7fa be02 	b.w	1def0 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   232ec:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   232ee:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   232f0:	f7f6 fcca 	bl	19c88 <net_buf_unref>
		if (tx) {
   232f4:	2d00      	cmp	r5, #0
   232f6:	d0e7      	beq.n	232c8 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   232f8:	4629      	mov	r1, r5
   232fa:	4620      	mov	r0, r4
   232fc:	f7f3 fce2 	bl	16cc4 <conn_tx_destroy>
   23300:	e7e0      	b.n	232c4 <conn_cleanup+0x8>

00023302 <bt_conn_ref>:
{
   23302:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23304:	f3bf 8f5b 	dmb	ish
   23308:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   2330c:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   23310:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
		if (!old) {
   23314:	b17b      	cbz	r3, 23336 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23316:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2331a:	1c59      	adds	r1, r3, #1
   2331c:	e852 4f00 	ldrex	r4, [r2]
   23320:	429c      	cmp	r4, r3
   23322:	d104      	bne.n	2332e <bt_conn_ref+0x2c>
   23324:	e842 1c00 	strex	ip, r1, [r2]
   23328:	f1bc 0f00 	cmp.w	ip, #0
   2332c:	d1f6      	bne.n	2331c <bt_conn_ref+0x1a>
   2332e:	f3bf 8f5b 	dmb	ish
   23332:	d1e7      	bne.n	23304 <bt_conn_ref+0x2>
}
   23334:	bd10      	pop	{r4, pc}
			return NULL;
   23336:	4618      	mov	r0, r3
   23338:	e7fc      	b.n	23334 <bt_conn_ref+0x32>

0002333a <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   2333a:	f100 03c0 	add.w	r3, r0, #192	; 0xc0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2333e:	f3bf 8f5b 	dmb	ish
   23342:	e853 1f00 	ldrex	r1, [r3]
   23346:	3901      	subs	r1, #1
   23348:	e843 1200 	strex	r2, r1, [r3]
   2334c:	2a00      	cmp	r2, #0
   2334e:	d1f8      	bne.n	23342 <bt_conn_unref+0x8>
   23350:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   23354:	8842      	ldrh	r2, [r0, #2]
   23356:	f240 1301 	movw	r3, #257	; 0x101
   2335a:	429a      	cmp	r2, r3
   2335c:	d108      	bne.n	23370 <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2335e:	f3bf 8f5b 	dmb	ish
   23362:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   23366:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   2336a:	b90b      	cbnz	r3, 23370 <bt_conn_unref+0x36>
		bt_le_adv_resume();
   2336c:	f7f3 bc04 	b.w	16b78 <bt_le_adv_resume>
}
   23370:	4770      	bx	lr

00023372 <conn_lookup_handle>:
{
   23372:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23376:	4607      	mov	r7, r0
   23378:	460e      	mov	r6, r1
   2337a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2337c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2337e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   23382:	42b4      	cmp	r4, r6
   23384:	d103      	bne.n	2338e <conn_lookup_handle+0x1c>
	return NULL;
   23386:	2300      	movs	r3, #0
}
   23388:	4618      	mov	r0, r3
   2338a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2338e:	fb09 7004 	mla	r0, r9, r4, r7
   23392:	f7ff ffb6 	bl	23302 <bt_conn_ref>
   23396:	4603      	mov	r3, r0
		if (!conn) {
   23398:	b158      	cbz	r0, 233b2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2339a:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2339c:	2d01      	cmp	r5, #1
   2339e:	d002      	beq.n	233a6 <conn_lookup_handle+0x34>
   233a0:	3d07      	subs	r5, #7
   233a2:	2d01      	cmp	r5, #1
   233a4:	d803      	bhi.n	233ae <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   233a6:	881a      	ldrh	r2, [r3, #0]
   233a8:	4542      	cmp	r2, r8
   233aa:	d0ed      	beq.n	23388 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   233ac:	4618      	mov	r0, r3
   233ae:	f7ff ffc4 	bl	2333a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   233b2:	3401      	adds	r4, #1
   233b4:	e7e5      	b.n	23382 <conn_lookup_handle+0x10>

000233b6 <bt_conn_connected>:
{
   233b6:	b510      	push	{r4, lr}
   233b8:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   233ba:	f7f4 fb4f 	bl	17a5c <bt_l2cap_connected>
	notify_connected(conn);
   233be:	4620      	mov	r0, r4
}
   233c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   233c4:	f7f3 bc1c 	b.w	16c00 <notify_connected>

000233c8 <bt_conn_get_security>:
}
   233c8:	2001      	movs	r0, #1
   233ca:	4770      	bx	lr

000233cc <bt_conn_is_peer_addr_le>:
{
   233cc:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   233ce:	7a03      	ldrb	r3, [r0, #8]
   233d0:	428b      	cmp	r3, r1
{
   233d2:	4604      	mov	r4, r0
   233d4:	4615      	mov	r5, r2
	if (id != conn->id) {
   233d6:	d115      	bne.n	23404 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   233d8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   233dc:	2207      	movs	r2, #7
   233de:	4628      	mov	r0, r5
   233e0:	f7ff fcc1 	bl	22d66 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   233e4:	b180      	cbz	r0, 23408 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   233e6:	78e3      	ldrb	r3, [r4, #3]
   233e8:	2207      	movs	r2, #7
   233ea:	b943      	cbnz	r3, 233fe <bt_conn_is_peer_addr_le+0x32>
   233ec:	f104 0196 	add.w	r1, r4, #150	; 0x96
   233f0:	4628      	mov	r0, r5
   233f2:	f7ff fcb8 	bl	22d66 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   233f6:	fab0 f080 	clz	r0, r0
   233fa:	0940      	lsrs	r0, r0, #5
}
   233fc:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   233fe:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   23402:	e7f5      	b.n	233f0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   23404:	2000      	movs	r0, #0
   23406:	e7f9      	b.n	233fc <bt_conn_is_peer_addr_le+0x30>
		return true;
   23408:	2001      	movs	r0, #1
   2340a:	e7f7      	b.n	233fc <bt_conn_is_peer_addr_le+0x30>

0002340c <bt_conn_le_phy_update>:
{
   2340c:	b513      	push	{r0, r1, r4, lr}
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   2340e:	880c      	ldrh	r4, [r1, #0]
   23410:	f004 0203 	and.w	r2, r4, #3
   23414:	2a03      	cmp	r2, #3
{
   23416:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   23418:	d010      	beq.n	2343c <bt_conn_le_phy_update+0x30>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   2341a:	07e2      	lsls	r2, r4, #31
   2341c:	d410      	bmi.n	23440 <bt_conn_le_phy_update+0x34>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
   2341e:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   23422:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   23424:	78db      	ldrb	r3, [r3, #3]
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   23426:	fab2 f182 	clz	r1, r2
   2342a:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   2342c:	b90b      	cbnz	r3, 23432 <bt_conn_le_phy_update+0x26>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   2342e:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   23432:	9400      	str	r4, [sp, #0]
   23434:	f7ff fdab 	bl	22f8e <bt_le_set_phy>
}
   23438:	b002      	add	sp, #8
   2343a:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   2343c:	2400      	movs	r4, #0
   2343e:	e7f0      	b.n	23422 <bt_conn_le_phy_update+0x16>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   23440:	2401      	movs	r4, #1
   23442:	e7ee      	b.n	23422 <bt_conn_le_phy_update+0x16>

00023444 <bt_conn_le_conn_update>:
{
   23444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23446:	4607      	mov	r7, r0
   23448:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2344a:	f242 0013 	movw	r0, #8211	; 0x2013
   2344e:	210e      	movs	r1, #14
   23450:	f7f1 ff26 	bl	152a0 <bt_hci_cmd_create>
	if (!buf) {
   23454:	4606      	mov	r6, r0
   23456:	b1d0      	cbz	r0, 2348e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   23458:	210e      	movs	r1, #14
   2345a:	300c      	adds	r0, #12
   2345c:	f001 f86c 	bl	24538 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   23460:	220e      	movs	r2, #14
   23462:	4604      	mov	r4, r0
   23464:	2100      	movs	r1, #0
   23466:	f7ff fcb0 	bl	22dca <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2346a:	883b      	ldrh	r3, [r7, #0]
   2346c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2346e:	882b      	ldrh	r3, [r5, #0]
   23470:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   23472:	886b      	ldrh	r3, [r5, #2]
   23474:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   23476:	88ab      	ldrh	r3, [r5, #4]
   23478:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2347a:	88eb      	ldrh	r3, [r5, #6]
   2347c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2347e:	4631      	mov	r1, r6
   23480:	2200      	movs	r2, #0
}
   23482:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   23486:	f242 0013 	movw	r0, #8211	; 0x2013
   2348a:	f7f1 bf43 	b.w	15314 <bt_hci_cmd_send_sync>
}
   2348e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   23492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023494 <l2cap_connected>:
}
   23494:	4770      	bx	lr

00023496 <z_log_msg_static_create.constprop.0>:
   23496:	2300      	movs	r3, #0
   23498:	f7ef bd90 	b.w	12fbc <z_impl_z_log_msg_static_create>

0002349c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2349e:	4605      	mov	r5, r0
   234a0:	460f      	mov	r7, r1
   234a2:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   234a4:	2300      	movs	r3, #0
   234a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   234aa:	2104      	movs	r1, #4
   234ac:	2000      	movs	r0, #0
   234ae:	f7f3 ff57 	bl	17360 <bt_conn_create_pdu_timeout>
	if (!buf) {
   234b2:	4604      	mov	r4, r0
   234b4:	b920      	cbnz	r0, 234c0 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   234b6:	4628      	mov	r0, r5
}
   234b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   234bc:	f7f4 ba92 	b.w	179e4 <l2cap_create_le_sig_pdu.part.0>
   234c0:	2104      	movs	r1, #4
   234c2:	300c      	adds	r0, #12
   234c4:	f001 f838 	bl	24538 <net_buf_simple_add>
	hdr->code = code;
   234c8:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   234ca:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   234cc:	8046      	strh	r6, [r0, #2]
}
   234ce:	4620      	mov	r0, r4
   234d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000234d2 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   234d2:	4770      	bx	lr

000234d4 <bt_l2cap_chan_del>:
{
   234d4:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   234d6:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   234da:	4604      	mov	r4, r0
	if (!chan->conn) {
   234dc:	b123      	cbz	r3, 234e8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   234de:	686b      	ldr	r3, [r5, #4]
   234e0:	b103      	cbz	r3, 234e4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   234e2:	4798      	blx	r3
	chan->conn = NULL;
   234e4:	2300      	movs	r3, #0
   234e6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   234e8:	68e3      	ldr	r3, [r4, #12]
   234ea:	b10b      	cbz	r3, 234f0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   234ec:	4620      	mov	r0, r4
   234ee:	4798      	blx	r3
	if (ops->released) {
   234f0:	6a2b      	ldr	r3, [r5, #32]
   234f2:	b11b      	cbz	r3, 234fc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   234f4:	4620      	mov	r0, r4
}
   234f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   234fa:	4718      	bx	r3
}
   234fc:	bd70      	pop	{r4, r5, r6, pc}

000234fe <bt_l2cap_disconnected>:
{
   234fe:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   23500:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23502:	b130      	cbz	r0, 23512 <bt_l2cap_disconnected+0x14>
	return node->next;
   23504:	f850 4908 	ldr.w	r4, [r0], #-8
   23508:	b104      	cbz	r4, 2350c <bt_l2cap_disconnected+0xe>
   2350a:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2350c:	f7ff ffe2 	bl	234d4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23510:	b904      	cbnz	r4, 23514 <bt_l2cap_disconnected+0x16>
}
   23512:	bd38      	pop	{r3, r4, r5, pc}
   23514:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23516:	b12d      	cbz	r5, 23524 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   23518:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2351a:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2351c:	f7ff ffda 	bl	234d4 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   23520:	462c      	mov	r4, r5
   23522:	e7f7      	b.n	23514 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   23524:	4620      	mov	r0, r4
}
   23526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2352a:	f7ff bfd3 	b.w	234d4 <bt_l2cap_chan_del>

0002352e <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2352e:	3104      	adds	r1, #4
   23530:	f7f3 bf16 	b.w	17360 <bt_conn_create_pdu_timeout>

00023534 <bt_l2cap_send_cb>:
{
   23534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23538:	4614      	mov	r4, r2
   2353a:	4605      	mov	r5, r0
   2353c:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2353e:	f102 000c 	add.w	r0, r2, #12
   23542:	2104      	movs	r1, #4
   23544:	461e      	mov	r6, r3
   23546:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2354a:	f001 f80c 	bl	24566 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2354e:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   23550:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   23552:	3a04      	subs	r2, #4
   23554:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23556:	4643      	mov	r3, r8
   23558:	4632      	mov	r2, r6
   2355a:	4621      	mov	r1, r4
   2355c:	4628      	mov	r0, r5
}
   2355e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   23562:	f7f3 bd49 	b.w	16ff8 <bt_conn_send_cb>

00023566 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   23566:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   23568:	b130      	cbz	r0, 23578 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2356a:	8983      	ldrh	r3, [r0, #12]
   2356c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2356e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   23572:	d001      	beq.n	23578 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   23574:	6880      	ldr	r0, [r0, #8]
   23576:	e7f7      	b.n	23568 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   23578:	4770      	bx	lr

0002357a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2357a:	4770      	bx	lr

0002357c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2357c:	4603      	mov	r3, r0
	return list->head;
   2357e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   23580:	b128      	cbz	r0, 2358e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23582:	6859      	ldr	r1, [r3, #4]
	return node->next;
   23584:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   23586:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23588:	4288      	cmp	r0, r1
	list->tail = node;
   2358a:	bf08      	it	eq
   2358c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2358e:	4770      	bx	lr

00023590 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   23590:	4603      	mov	r3, r0
	size_t bytes = 0;
   23592:	2000      	movs	r0, #0

	while (buf) {
   23594:	b903      	cbnz	r3, 23598 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   23596:	4770      	bx	lr
		bytes += buf->len;
   23598:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2359a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2359c:	4410      	add	r0, r2
		buf = buf->frags;
   2359e:	e7f9      	b.n	23594 <net_buf_frags_len+0x4>

000235a0 <attr_read_type_cb>:
{
   235a0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   235a2:	68d4      	ldr	r4, [r2, #12]
   235a4:	7823      	ldrb	r3, [r4, #0]
   235a6:	3102      	adds	r1, #2
   235a8:	b913      	cbnz	r3, 235b0 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   235aa:	7021      	strb	r1, [r4, #0]
	return true;
   235ac:	2001      	movs	r0, #1
}
   235ae:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   235b0:	428b      	cmp	r3, r1
   235b2:	d0fb      	beq.n	235ac <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   235b4:	8a03      	ldrh	r3, [r0, #16]
   235b6:	3b02      	subs	r3, #2
   235b8:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   235ba:	2000      	movs	r0, #0
   235bc:	6110      	str	r0, [r2, #16]
		return false;
   235be:	e7f6      	b.n	235ae <attr_read_type_cb+0xe>

000235c0 <att_prepare_write_req>:
}
   235c0:	2006      	movs	r0, #6
   235c2:	4770      	bx	lr

000235c4 <atomic_test_bit>:
   235c4:	f3bf 8f5b 	dmb	ish
   235c8:	6800      	ldr	r0, [r0, #0]
   235ca:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   235ce:	4108      	asrs	r0, r1
}
   235d0:	f000 0001 	and.w	r0, r0, #1
   235d4:	4770      	bx	lr

000235d6 <write_cb>:
{
   235d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   235d8:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   235da:	4601      	mov	r1, r0
{
   235dc:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   235de:	f44f 7295 	mov.w	r2, #298	; 0x12a
   235e2:	6820      	ldr	r0, [r4, #0]
   235e4:	f000 fe28 	bl	24238 <bt_gatt_check_perm>
   235e8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   235ea:	bb00      	cbnz	r0, 2362e <write_cb+0x58>
	if (!data->req) {
   235ec:	7a23      	ldrb	r3, [r4, #8]
   235ee:	b1b3      	cbz	r3, 2361e <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   235f0:	f1a3 0218 	sub.w	r2, r3, #24
   235f4:	4253      	negs	r3, r2
   235f6:	4153      	adcs	r3, r2
   235f8:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   235fa:	9301      	str	r3, [sp, #4]
   235fc:	8a63      	ldrh	r3, [r4, #18]
   235fe:	9300      	str	r3, [sp, #0]
   23600:	68ae      	ldr	r6, [r5, #8]
   23602:	8a23      	ldrh	r3, [r4, #16]
   23604:	68e2      	ldr	r2, [r4, #12]
   23606:	6820      	ldr	r0, [r4, #0]
   23608:	4629      	mov	r1, r5
   2360a:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2360c:	2800      	cmp	r0, #0
   2360e:	db08      	blt.n	23622 <write_cb+0x4c>
   23610:	8a23      	ldrh	r3, [r4, #16]
   23612:	4298      	cmp	r0, r3
   23614:	d10e      	bne.n	23634 <write_cb+0x5e>
	data->err = 0U;
   23616:	2300      	movs	r3, #0
   23618:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2361a:	2001      	movs	r0, #1
   2361c:	e008      	b.n	23630 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2361e:	2302      	movs	r3, #2
   23620:	e7eb      	b.n	235fa <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   23622:	f110 0fff 	cmn.w	r0, #255	; 0xff
   23626:	d305      	bcc.n	23634 <write_cb+0x5e>
		return -err;
   23628:	4240      	negs	r0, r0
   2362a:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2362c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2362e:	2000      	movs	r0, #0
}
   23630:	b002      	add	sp, #8
   23632:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   23634:	200e      	movs	r0, #14
   23636:	e7f9      	b.n	2362c <write_cb+0x56>

00023638 <bt_gatt_foreach_attr>:
{
   23638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2363a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2363e:	2300      	movs	r3, #0
   23640:	9300      	str	r3, [sp, #0]
   23642:	461a      	mov	r2, r3
   23644:	f7f5 fde4 	bl	19210 <bt_gatt_foreach_attr_type>
}
   23648:	b005      	add	sp, #20
   2364a:	f85d fb04 	ldr.w	pc, [sp], #4

0002364e <find_info_cb>:
{
   2364e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   23650:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   23652:	6817      	ldr	r7, [r2, #0]
{
   23654:	4605      	mov	r5, r0
   23656:	460e      	mov	r6, r1
   23658:	4614      	mov	r4, r2
	if (!data->rsp) {
   2365a:	b963      	cbnz	r3, 23676 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2365c:	6850      	ldr	r0, [r2, #4]
   2365e:	2101      	movs	r1, #1
   23660:	300c      	adds	r0, #12
   23662:	f000 ff69 	bl	24538 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   23666:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   23668:	682b      	ldr	r3, [r5, #0]
   2366a:	781b      	ldrb	r3, [r3, #0]
   2366c:	2b00      	cmp	r3, #0
   2366e:	bf14      	ite	ne
   23670:	2302      	movne	r3, #2
   23672:	2301      	moveq	r3, #1
   23674:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   23676:	68a3      	ldr	r3, [r4, #8]
   23678:	781b      	ldrb	r3, [r3, #0]
   2367a:	2b01      	cmp	r3, #1
   2367c:	d003      	beq.n	23686 <find_info_cb+0x38>
   2367e:	2b02      	cmp	r3, #2
   23680:	d019      	beq.n	236b6 <find_info_cb+0x68>
   23682:	2000      	movs	r0, #0
   23684:	e016      	b.n	236b4 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   23686:	682b      	ldr	r3, [r5, #0]
   23688:	781b      	ldrb	r3, [r3, #0]
   2368a:	2b00      	cmp	r3, #0
   2368c:	d1f9      	bne.n	23682 <find_info_cb+0x34>
   2368e:	6860      	ldr	r0, [r4, #4]
   23690:	2104      	movs	r1, #4
   23692:	300c      	adds	r0, #12
   23694:	f000 ff50 	bl	24538 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   23698:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2369a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2369c:	682a      	ldr	r2, [r5, #0]
   2369e:	68e3      	ldr	r3, [r4, #12]
   236a0:	8852      	ldrh	r2, [r2, #2]
   236a2:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   236a4:	6863      	ldr	r3, [r4, #4]
   236a6:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   236a8:	8a1b      	ldrh	r3, [r3, #16]
   236aa:	1ac0      	subs	r0, r0, r3
   236ac:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   236ae:	bf94      	ite	ls
   236b0:	2000      	movls	r0, #0
   236b2:	2001      	movhi	r0, #1
}
   236b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   236b6:	682b      	ldr	r3, [r5, #0]
   236b8:	781b      	ldrb	r3, [r3, #0]
   236ba:	2b02      	cmp	r3, #2
   236bc:	d1e1      	bne.n	23682 <find_info_cb+0x34>
   236be:	6860      	ldr	r0, [r4, #4]
   236c0:	2112      	movs	r1, #18
   236c2:	300c      	adds	r0, #12
   236c4:	f000 ff38 	bl	24538 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   236c8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   236ca:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   236cc:	6829      	ldr	r1, [r5, #0]
   236ce:	68e0      	ldr	r0, [r4, #12]
   236d0:	2210      	movs	r2, #16
   236d2:	3101      	adds	r1, #1
   236d4:	3002      	adds	r0, #2
   236d6:	f7ff fb6d 	bl	22db4 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   236da:	6863      	ldr	r3, [r4, #4]
   236dc:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   236de:	8a1b      	ldrh	r3, [r3, #16]
   236e0:	1ac0      	subs	r0, r0, r3
   236e2:	2812      	cmp	r0, #18
   236e4:	e7e3      	b.n	236ae <find_info_cb+0x60>

000236e6 <att_chan_mtu_updated>:
{
   236e6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   236e8:	6805      	ldr	r5, [r0, #0]
	return list->head;
   236ea:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   236ec:	b352      	cbz	r2, 23744 <att_chan_mtu_updated+0x5e>
	return node->next;
   236ee:	6813      	ldr	r3, [r2, #0]
   236f0:	b103      	cbz	r3, 236f4 <att_chan_mtu_updated+0xe>
   236f2:	3be0      	subs	r3, #224	; 0xe0
   236f4:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   236f8:	2200      	movs	r2, #0
   236fa:	4611      	mov	r1, r2
   236fc:	e000      	b.n	23700 <att_chan_mtu_updated+0x1a>
   236fe:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   23700:	4284      	cmp	r4, r0
   23702:	d007      	beq.n	23714 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23704:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   23706:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23708:	42b1      	cmp	r1, r6
   2370a:	bf38      	it	cc
   2370c:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2370e:	42a2      	cmp	r2, r4
   23710:	bf38      	it	cc
   23712:	4622      	movcc	r2, r4
   23714:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23716:	b12b      	cbz	r3, 23724 <att_chan_mtu_updated+0x3e>
   23718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   2371c:	2b00      	cmp	r3, #0
   2371e:	d1ee      	bne.n	236fe <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   23720:	4284      	cmp	r4, r0
   23722:	d1ef      	bne.n	23704 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23724:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   23726:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23728:	428b      	cmp	r3, r1
   2372a:	d801      	bhi.n	23730 <att_chan_mtu_updated+0x4a>
   2372c:	4290      	cmp	r0, r2
   2372e:	d90b      	bls.n	23748 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   23730:	4282      	cmp	r2, r0
   23732:	bf38      	it	cc
   23734:	4602      	movcc	r2, r0
   23736:	4299      	cmp	r1, r3
   23738:	6828      	ldr	r0, [r5, #0]
   2373a:	bf38      	it	cc
   2373c:	4619      	movcc	r1, r3
}
   2373e:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   23740:	f7f6 b982 	b.w	19a48 <bt_gatt_att_max_mtu_changed>
   23744:	4611      	mov	r1, r2
   23746:	e7ed      	b.n	23724 <att_chan_mtu_updated+0x3e>
}
   23748:	bc70      	pop	{r4, r5, r6}
   2374a:	4770      	bx	lr

0002374c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2374c:	68d0      	ldr	r0, [r2, #12]
   2374e:	7803      	ldrb	r3, [r0, #0]
   23750:	3104      	adds	r1, #4
   23752:	b913      	cbnz	r3, 2375a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   23754:	7001      	strb	r1, [r0, #0]
	return true;
   23756:	2001      	movs	r0, #1
   23758:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2375a:	428b      	cmp	r3, r1
   2375c:	d0fb      	beq.n	23756 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2375e:	6891      	ldr	r1, [r2, #8]
   23760:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   23762:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   23764:	3b04      	subs	r3, #4
   23766:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   23768:	6110      	str	r0, [r2, #16]
}
   2376a:	4770      	bx	lr

0002376c <z_log_msg_static_create.constprop.0>:
   2376c:	2300      	movs	r3, #0
   2376e:	f7ef bc25 	b.w	12fbc <z_impl_z_log_msg_static_create>

00023772 <chan_req_send>:
{
   23772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23774:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23776:	6888      	ldr	r0, [r1, #8]
   23778:	f7ff ff0a 	bl	23590 <net_buf_frags_len>
   2377c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2377e:	4283      	cmp	r3, r0
{
   23780:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23782:	d30d      	bcc.n	237a0 <chan_req_send+0x2e>
	chan->req = req;
   23784:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   23788:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2378a:	2600      	movs	r6, #0
   2378c:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2378e:	4628      	mov	r0, r5
   23790:	4639      	mov	r1, r7
   23792:	f7f4 fbab 	bl	17eec <chan_send>
	if (err) {
   23796:	b110      	cbz	r0, 2379e <chan_req_send+0x2c>
		req->buf = buf;
   23798:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2379a:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2379e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   237a0:	f06f 0079 	mvn.w	r0, #121	; 0x79
   237a4:	e7fb      	b.n	2379e <chan_req_send+0x2c>

000237a6 <process_queue>:
{
   237a6:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   237a8:	2200      	movs	r2, #0
{
   237aa:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   237ac:	2300      	movs	r3, #0
   237ae:	4608      	mov	r0, r1
{
   237b0:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   237b2:	f000 fe66 	bl	24482 <net_buf_get>
	if (buf) {
   237b6:	4605      	mov	r5, r0
   237b8:	b158      	cbz	r0, 237d2 <process_queue+0x2c>
	return chan_send(chan, buf);
   237ba:	4601      	mov	r1, r0
   237bc:	4620      	mov	r0, r4
   237be:	f7f4 fb95 	bl	17eec <chan_send>
		if (err) {
   237c2:	4604      	mov	r4, r0
   237c4:	b118      	cbz	r0, 237ce <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   237c6:	4629      	mov	r1, r5
   237c8:	4630      	mov	r0, r6
   237ca:	f001 fd9f 	bl	2530c <k_queue_prepend>
}
   237ce:	4620      	mov	r0, r4
   237d0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   237d2:	f06f 0401 	mvn.w	r4, #1
   237d6:	e7fa      	b.n	237ce <process_queue+0x28>

000237d8 <bt_att_chan_send_rsp>:
{
   237d8:	b538      	push	{r3, r4, r5, lr}
   237da:	4604      	mov	r4, r0
   237dc:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   237de:	f7f4 fb85 	bl	17eec <chan_send>
	if (err) {
   237e2:	b130      	cbz	r0, 237f2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   237e4:	4629      	mov	r1, r5
   237e6:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   237ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   237ee:	f000 be7b 	b.w	244e8 <net_buf_put>
}
   237f2:	bd38      	pop	{r3, r4, r5, pc}

000237f4 <att_chan_read>:
{
   237f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237f8:	4680      	mov	r8, r0
   237fa:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   237fc:	4610      	mov	r0, r2
{
   237fe:	4699      	mov	r9, r3
   23800:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   23802:	f7ff fec5 	bl	23590 <net_buf_frags_len>
   23806:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2380a:	4283      	cmp	r3, r0
{
   2380c:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2380e:	d97a      	bls.n	23906 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   23810:	f8d8 3004 	ldr.w	r3, [r8, #4]
   23814:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   23816:	4630      	mov	r0, r6
   23818:	f000 fe6c 	bl	244f4 <net_buf_frag_last>
	size_t len, total = 0;
   2381c:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   23820:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23822:	4630      	mov	r0, r6
   23824:	f7ff feb4 	bl	23590 <net_buf_frags_len>
   23828:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2382c:	f105 070c 	add.w	r7, r5, #12
   23830:	1a24      	subs	r4, r4, r0
   23832:	4638      	mov	r0, r7
   23834:	f000 febb 	bl	245ae <net_buf_simple_tailroom>
   23838:	4284      	cmp	r4, r0
   2383a:	d211      	bcs.n	23860 <att_chan_read+0x6c>
   2383c:	4630      	mov	r0, r6
   2383e:	f7ff fea7 	bl	23590 <net_buf_frags_len>
   23842:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23846:	1a24      	subs	r4, r4, r0
		if (!len) {
   23848:	bb34      	cbnz	r4, 23898 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2384a:	7ab0      	ldrb	r0, [r6, #10]
   2384c:	f7f6 f95a 	bl	19b04 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   23850:	2200      	movs	r2, #0
   23852:	2300      	movs	r3, #0
   23854:	f000 fe10 	bl	24478 <net_buf_alloc_fixed>
			if (!frag) {
   23858:	4605      	mov	r5, r0
   2385a:	b930      	cbnz	r0, 2386a <att_chan_read+0x76>
	return total;
   2385c:	4657      	mov	r7, sl
   2385e:	e02c      	b.n	238ba <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   23860:	4638      	mov	r0, r7
   23862:	f000 fea4 	bl	245ae <net_buf_simple_tailroom>
   23866:	4604      	mov	r4, r0
   23868:	e7ee      	b.n	23848 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2386a:	4601      	mov	r1, r0
   2386c:	4630      	mov	r0, r6
   2386e:	f000 fe52 	bl	24516 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   23872:	4630      	mov	r0, r6
   23874:	f7ff fe8c 	bl	23590 <net_buf_frags_len>
   23878:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2387c:	f105 070c 	add.w	r7, r5, #12
   23880:	1a24      	subs	r4, r4, r0
   23882:	4638      	mov	r0, r7
   23884:	f000 fe93 	bl	245ae <net_buf_simple_tailroom>
   23888:	4284      	cmp	r4, r0
   2388a:	d21a      	bcs.n	238c2 <att_chan_read+0xce>
   2388c:	4630      	mov	r0, r6
   2388e:	f7ff fe7f 	bl	23590 <net_buf_frags_len>
   23892:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23896:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   23898:	68e9      	ldr	r1, [r5, #12]
   2389a:	8a2a      	ldrh	r2, [r5, #16]
   2389c:	f8cd 9000 	str.w	r9, [sp]
   238a0:	f8db 7004 	ldr.w	r7, [fp, #4]
   238a4:	9803      	ldr	r0, [sp, #12]
   238a6:	440a      	add	r2, r1
   238a8:	b2a3      	uxth	r3, r4
   238aa:	4659      	mov	r1, fp
   238ac:	47b8      	blx	r7
		if (read < 0) {
   238ae:	1e07      	subs	r7, r0, #0
   238b0:	da0c      	bge.n	238cc <att_chan_read+0xd8>
				return total;
   238b2:	f1ba 0f00 	cmp.w	sl, #0
   238b6:	bf18      	it	ne
   238b8:	4657      	movne	r7, sl
}
   238ba:	4638      	mov	r0, r7
   238bc:	b005      	add	sp, #20
   238be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   238c2:	4638      	mov	r0, r7
   238c4:	f000 fe73 	bl	245ae <net_buf_simple_tailroom>
   238c8:	4604      	mov	r4, r0
   238ca:	e7e5      	b.n	23898 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   238cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   238ce:	b993      	cbnz	r3, 238f6 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   238d0:	4639      	mov	r1, r7
   238d2:	f105 000c 	add.w	r0, r5, #12
   238d6:	f000 fe2f 	bl	24538 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238da:	4630      	mov	r0, r6
   238dc:	f7ff fe58 	bl	23590 <net_buf_frags_len>
   238e0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   238e4:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238e6:	4283      	cmp	r3, r0
		total += read;
   238e8:	44ba      	add	sl, r7
		offset += read;
   238ea:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   238ee:	d9b5      	bls.n	2385c <att_chan_read+0x68>
   238f0:	42a7      	cmp	r7, r4
   238f2:	d096      	beq.n	23822 <att_chan_read+0x2e>
   238f4:	e7b2      	b.n	2385c <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   238f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   238f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   238fa:	4639      	mov	r1, r7
   238fc:	4628      	mov	r0, r5
   238fe:	4798      	blx	r3
   23900:	2800      	cmp	r0, #0
   23902:	d1e5      	bne.n	238d0 <att_chan_read+0xdc>
   23904:	e7aa      	b.n	2385c <att_chan_read+0x68>
		return 0;
   23906:	2700      	movs	r7, #0
   23908:	e7d7      	b.n	238ba <att_chan_read+0xc6>

0002390a <sys_slist_find_and_remove.isra.0>:
	return list->head;
   2390a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2390c:	2200      	movs	r2, #0
   2390e:	b903      	cbnz	r3, 23912 <sys_slist_find_and_remove.isra.0+0x8>
   23910:	4770      	bx	lr
   23912:	428b      	cmp	r3, r1
   23914:	d10f      	bne.n	23936 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   23916:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23918:	b93a      	cbnz	r2, 2392a <sys_slist_find_and_remove.isra.0+0x20>
   2391a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2391c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2391e:	4291      	cmp	r1, r2
   23920:	d100      	bne.n	23924 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   23922:	6043      	str	r3, [r0, #4]
	parent->next = child;
   23924:	2300      	movs	r3, #0
   23926:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   23928:	4770      	bx	lr
	parent->next = child;
   2392a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2392c:	6843      	ldr	r3, [r0, #4]
   2392e:	4299      	cmp	r1, r3
	list->tail = node;
   23930:	bf08      	it	eq
   23932:	6042      	streq	r2, [r0, #4]
}
   23934:	e7f6      	b.n	23924 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   23936:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23938:	681b      	ldr	r3, [r3, #0]
   2393a:	e7e8      	b.n	2390e <sys_slist_find_and_remove.isra.0+0x4>

0002393c <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2393c:	2006      	movs	r0, #6
   2393e:	4770      	bx	lr

00023940 <atomic_test_and_set_bit>:
{
   23940:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   23942:	2301      	movs	r3, #1
   23944:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23948:	f3bf 8f5b 	dmb	ish
   2394c:	e850 3f00 	ldrex	r3, [r0]
   23950:	ea43 0201 	orr.w	r2, r3, r1
   23954:	e840 2400 	strex	r4, r2, [r0]
   23958:	2c00      	cmp	r4, #0
   2395a:	d1f7      	bne.n	2394c <atomic_test_and_set_bit+0xc>
   2395c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   23960:	4219      	tst	r1, r3
}
   23962:	bf14      	ite	ne
   23964:	2001      	movne	r0, #1
   23966:	2000      	moveq	r0, #0
   23968:	bd10      	pop	{r4, pc}

0002396a <read_cb>:
{
   2396a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2396c:	6816      	ldr	r6, [r2, #0]
{
   2396e:	4605      	mov	r5, r0
	data->err = 0x00;
   23970:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   23972:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   23974:	7313      	strb	r3, [r2, #12]
{
   23976:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23978:	4629      	mov	r1, r5
   2397a:	2295      	movs	r2, #149	; 0x95
   2397c:	f000 fc5c 	bl	24238 <bt_gatt_check_perm>
   23980:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   23982:	b980      	cbnz	r0, 239a6 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   23984:	e9cd 0000 	strd	r0, r0, [sp]
   23988:	4629      	mov	r1, r5
   2398a:	88a3      	ldrh	r3, [r4, #4]
   2398c:	68a2      	ldr	r2, [r4, #8]
   2398e:	4630      	mov	r0, r6
   23990:	f7ff ff30 	bl	237f4 <att_chan_read>
	if (ret < 0) {
   23994:	2800      	cmp	r0, #0
   23996:	da09      	bge.n	239ac <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   23998:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2399c:	bf26      	itte	cs
   2399e:	4240      	negcs	r0, r0
   239a0:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   239a2:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   239a4:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   239a6:	2000      	movs	r0, #0
}
   239a8:	b002      	add	sp, #8
   239aa:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   239ac:	2001      	movs	r0, #1
   239ae:	e7fb      	b.n	239a8 <read_cb+0x3e>

000239b0 <read_vl_cb>:
{
   239b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   239b4:	f8d2 8000 	ldr.w	r8, [r2]
{
   239b8:	4606      	mov	r6, r0
	data->err = 0x00;
   239ba:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   239bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   239c0:	7313      	strb	r3, [r2, #12]
{
   239c2:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   239c4:	4631      	mov	r1, r6
   239c6:	2295      	movs	r2, #149	; 0x95
   239c8:	f000 fc36 	bl	24238 <bt_gatt_check_perm>
   239cc:	4605      	mov	r5, r0
   239ce:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   239d0:	b9e0      	cbnz	r0, 23a0c <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   239d2:	68a0      	ldr	r0, [r4, #8]
   239d4:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   239d8:	8a02      	ldrh	r2, [r0, #16]
   239da:	1a9b      	subs	r3, r3, r2
   239dc:	2b01      	cmp	r3, #1
   239de:	dd15      	ble.n	23a0c <read_vl_cb+0x5c>
   239e0:	2102      	movs	r1, #2
   239e2:	300c      	adds	r0, #12
   239e4:	f000 fda8 	bl	24538 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   239e8:	e9cd 5500 	strd	r5, r5, [sp]
   239ec:	4607      	mov	r7, r0
   239ee:	88a3      	ldrh	r3, [r4, #4]
   239f0:	68a2      	ldr	r2, [r4, #8]
   239f2:	4631      	mov	r1, r6
   239f4:	4640      	mov	r0, r8
   239f6:	f7ff fefd 	bl	237f4 <att_chan_read>
	if (read < 0) {
   239fa:	1e03      	subs	r3, r0, #0
   239fc:	da0a      	bge.n	23a14 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   239fe:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   23a02:	bf26      	itte	cs
   23a04:	425b      	negcs	r3, r3
   23a06:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   23a08:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   23a0a:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   23a0c:	2000      	movs	r0, #0
}
   23a0e:	b002      	add	sp, #8
   23a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   23a14:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   23a16:	2001      	movs	r0, #1
   23a18:	e7f9      	b.n	23a0e <read_vl_cb+0x5e>

00023a1a <bt_att_sent>:
{
   23a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a1c:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   23a1e:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23a20:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   23a24:	f850 4c04 	ldr.w	r4, [r0, #-4]
   23a28:	f3bf 8f5b 	dmb	ish
   23a2c:	e853 1f00 	ldrex	r1, [r3]
   23a30:	f021 0110 	bic.w	r1, r1, #16
   23a34:	e843 1200 	strex	r2, r1, [r3]
   23a38:	2a00      	cmp	r2, #0
   23a3a:	d1f7      	bne.n	23a2c <bt_att_sent+0x12>
   23a3c:	f3bf 8f5b 	dmb	ish
	if (!att) {
   23a40:	b30c      	cbz	r4, 23a86 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   23a42:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   23a46:	b98b      	cbnz	r3, 23a6c <bt_att_sent+0x52>
   23a48:	6863      	ldr	r3, [r4, #4]
   23a4a:	b17b      	cbz	r3, 23a6c <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23a4c:	1d20      	adds	r0, r4, #4
   23a4e:	f7ff fd95 	bl	2357c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23a52:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23a54:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23a56:	4638      	mov	r0, r7
   23a58:	f7ff fe8b 	bl	23772 <chan_req_send>
   23a5c:	2800      	cmp	r0, #0
   23a5e:	da12      	bge.n	23a86 <bt_att_sent+0x6c>
	return list->head;
   23a60:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   23a62:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   23a64:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   23a66:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   23a68:	b903      	cbnz	r3, 23a6c <bt_att_sent+0x52>
	list->tail = node;
   23a6a:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   23a6c:	f105 0194 	add.w	r1, r5, #148	; 0x94
   23a70:	4638      	mov	r0, r7
   23a72:	f7ff fe98 	bl	237a6 <process_queue>
	if (!err) {
   23a76:	b130      	cbz	r0, 23a86 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   23a78:	f104 010c 	add.w	r1, r4, #12
   23a7c:	4638      	mov	r0, r7
}
   23a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   23a82:	f7ff be90 	b.w	237a6 <process_queue>
}
   23a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023a88 <att_req_send_process>:
{
   23a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   23a8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
   23a8e:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23a90:	2c00      	cmp	r4, #0
   23a92:	d03b      	beq.n	23b0c <att_req_send_process+0x84>
	return node->next;
   23a94:	f854 69e0 	ldr.w	r6, [r4], #-224
   23a98:	b106      	cbz	r6, 23a9c <att_req_send_process+0x14>
   23a9a:	3ee0      	subs	r6, #224	; 0xe0
{
   23a9c:	2300      	movs	r3, #0
   23a9e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   23aa0:	f108 0704 	add.w	r7, r8, #4
   23aa4:	e013      	b.n	23ace <att_req_send_process+0x46>
		if (!req && prev &&
   23aa6:	b1c3      	cbz	r3, 23ada <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   23aa8:	2103      	movs	r1, #3
   23aaa:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23aae:	f7ff fd89 	bl	235c4 <atomic_test_bit>
   23ab2:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   23ab4:	f103 0090 	add.w	r0, r3, #144	; 0x90
   23ab8:	f7ff fd84 	bl	235c4 <atomic_test_bit>
		if (!req && prev &&
   23abc:	4282      	cmp	r2, r0
   23abe:	d10c      	bne.n	23ada <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23ac0:	b326      	cbz	r6, 23b0c <att_req_send_process+0x84>
   23ac2:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   23ac6:	b102      	cbz	r2, 23aca <att_req_send_process+0x42>
   23ac8:	3ae0      	subs	r2, #224	; 0xe0
{
   23aca:	4634      	mov	r4, r6
   23acc:	4616      	mov	r6, r2
		if (chan->req) {
   23ace:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   23ad2:	2a00      	cmp	r2, #0
   23ad4:	d1f4      	bne.n	23ac0 <att_req_send_process+0x38>
		if (!req && prev &&
   23ad6:	2d00      	cmp	r5, #0
   23ad8:	d0e5      	beq.n	23aa6 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   23ada:	4638      	mov	r0, r7
   23adc:	f7ff fd4e 	bl	2357c <sys_slist_get>
	if (node) {
   23ae0:	4605      	mov	r5, r0
   23ae2:	b908      	cbnz	r0, 23ae8 <att_req_send_process+0x60>
   23ae4:	4623      	mov	r3, r4
   23ae6:	e7eb      	b.n	23ac0 <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   23ae8:	4601      	mov	r1, r0
   23aea:	4620      	mov	r0, r4
   23aec:	f7ff fe41 	bl	23772 <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   23af0:	2800      	cmp	r0, #0
   23af2:	da0b      	bge.n	23b0c <att_req_send_process+0x84>
	return list->head;
   23af4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   23af8:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   23afa:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   23afe:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   23b02:	2b00      	cmp	r3, #0
   23b04:	d1ee      	bne.n	23ae4 <att_req_send_process+0x5c>
	list->tail = node;
   23b06:	f8c8 5008 	str.w	r5, [r8, #8]
}
   23b0a:	e7eb      	b.n	23ae4 <att_req_send_process+0x5c>
}
   23b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023b10 <bt_att_status>:
{
   23b10:	b538      	push	{r3, r4, r5, lr}
   23b12:	4605      	mov	r5, r0
   23b14:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   23b16:	2100      	movs	r1, #0
   23b18:	f7ff fd54 	bl	235c4 <atomic_test_bit>
   23b1c:	b1c0      	cbz	r0, 23b50 <bt_att_status+0x40>
	if (!chan->att) {
   23b1e:	f855 0c04 	ldr.w	r0, [r5, #-4]
   23b22:	b1a8      	cbz	r0, 23b50 <bt_att_status+0x40>
	if (chan->req) {
   23b24:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   23b28:	b993      	cbnz	r3, 23b50 <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   23b2a:	3004      	adds	r0, #4
   23b2c:	f7ff fd26 	bl	2357c <sys_slist_get>
	if (!node) {
   23b30:	4604      	mov	r4, r0
   23b32:	b168      	cbz	r0, 23b50 <bt_att_status+0x40>
	return chan_req_send(chan, req);
   23b34:	4601      	mov	r1, r0
   23b36:	1f28      	subs	r0, r5, #4
   23b38:	f7ff fe1b 	bl	23772 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23b3c:	2800      	cmp	r0, #0
   23b3e:	da07      	bge.n	23b50 <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   23b40:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   23b44:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   23b46:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23b48:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   23b4a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23b4c:	b902      	cbnz	r2, 23b50 <bt_att_status+0x40>
	list->tail = node;
   23b4e:	609c      	str	r4, [r3, #8]
}
   23b50:	bd38      	pop	{r3, r4, r5, pc}

00023b52 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   23b52:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   23b54:	6883      	ldr	r3, [r0, #8]
   23b56:	699b      	ldr	r3, [r3, #24]
   23b58:	b10b      	cbz	r3, 23b5e <att_sent+0xc>
		chan->ops->sent(chan);
   23b5a:	3004      	adds	r0, #4
   23b5c:	4718      	bx	r3
}
   23b5e:	4770      	bx	lr

00023b60 <att_unknown>:
{
   23b60:	b510      	push	{r4, lr}
   23b62:	460c      	mov	r4, r1
	if (!err) {
   23b64:	b90a      	cbnz	r2, 23b6a <att_unknown+0xa>
		att_sent(conn, user_data);
   23b66:	f7ff fff4 	bl	23b52 <att_sent>
	tx_meta_data_free(user_data);
   23b6a:	4620      	mov	r0, r4
}
   23b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   23b70:	f7f4 b8ee 	b.w	17d50 <tx_meta_data_free>

00023b74 <att_tx_complete>:
{
   23b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23b78:	4606      	mov	r6, r0
   23b7a:	460d      	mov	r5, r1
	if (!err) {
   23b7c:	4614      	mov	r4, r2
   23b7e:	b122      	cbz	r2, 23b8a <att_tx_complete+0x16>
}
   23b80:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   23b84:	4608      	mov	r0, r1
   23b86:	f7f4 b8e3 	b.w	17d50 <tx_meta_data_free>
		att_sent(conn, user_data);
   23b8a:	f7ff ffe2 	bl	23b52 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   23b8e:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   23b90:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   23b94:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   23b98:	4628      	mov	r0, r5
   23b9a:	f7f4 f8d9 	bl	17d50 <tx_meta_data_free>
	if (!err && func) {
   23b9e:	b92f      	cbnz	r7, 23bac <att_tx_complete+0x38>
}
   23ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   23ba4:	4649      	mov	r1, r9
   23ba6:	4630      	mov	r0, r6
   23ba8:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   23baa:	3401      	adds	r4, #1
   23bac:	b2a3      	uxth	r3, r4
   23bae:	4543      	cmp	r3, r8
   23bb0:	d3f8      	bcc.n	23ba4 <att_tx_complete+0x30>
   23bb2:	e7f5      	b.n	23ba0 <att_tx_complete+0x2c>

00023bb4 <att_req_sent>:
{
   23bb4:	b510      	push	{r4, lr}
   23bb6:	460c      	mov	r4, r1
	if (!err) {
   23bb8:	b90a      	cbnz	r2, 23bbe <att_req_sent+0xa>
		att_sent(conn, user_data);
   23bba:	f7ff ffca 	bl	23b52 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   23bbe:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   23bc0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   23bc4:	b12b      	cbz	r3, 23bd2 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   23bc6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23bca:	2300      	movs	r3, #0
   23bcc:	30b0      	adds	r0, #176	; 0xb0
   23bce:	f7fa f98f 	bl	1def0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   23bd2:	4620      	mov	r0, r4
}
   23bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   23bd8:	f7f4 b8ba 	b.w	17d50 <tx_meta_data_free>

00023bdc <att_cfm_sent>:
{
   23bdc:	b510      	push	{r4, lr}
   23bde:	460c      	mov	r4, r1
	if (!err) {
   23be0:	b90a      	cbnz	r2, 23be6 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   23be2:	f7ff ffb6 	bl	23b52 <att_sent>
   23be6:	6823      	ldr	r3, [r4, #0]
   23be8:	f3bf 8f5b 	dmb	ish
   23bec:	3390      	adds	r3, #144	; 0x90
   23bee:	e853 1f00 	ldrex	r1, [r3]
   23bf2:	f021 0102 	bic.w	r1, r1, #2
   23bf6:	e843 1200 	strex	r2, r1, [r3]
   23bfa:	2a00      	cmp	r2, #0
   23bfc:	d1f7      	bne.n	23bee <att_cfm_sent+0x12>
   23bfe:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   23c02:	4620      	mov	r0, r4
}
   23c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   23c08:	f7f4 b8a2 	b.w	17d50 <tx_meta_data_free>

00023c0c <att_rsp_sent>:
{
   23c0c:	b510      	push	{r4, lr}
   23c0e:	460c      	mov	r4, r1
	if (!err) {
   23c10:	b90a      	cbnz	r2, 23c16 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   23c12:	f7ff ff9e 	bl	23b52 <att_sent>
   23c16:	6823      	ldr	r3, [r4, #0]
   23c18:	f3bf 8f5b 	dmb	ish
   23c1c:	3390      	adds	r3, #144	; 0x90
   23c1e:	e853 1f00 	ldrex	r1, [r3]
   23c22:	f021 0101 	bic.w	r1, r1, #1
   23c26:	e843 1200 	strex	r2, r1, [r3]
   23c2a:	2a00      	cmp	r2, #0
   23c2c:	d1f7      	bne.n	23c1e <att_rsp_sent+0x12>
   23c2e:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   23c32:	4620      	mov	r0, r4
}
   23c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   23c38:	f7f4 b88a 	b.w	17d50 <tx_meta_data_free>

00023c3c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   23c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c40:	4688      	mov	r8, r1
   23c42:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   23c44:	2101      	movs	r1, #1
   23c46:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   23c48:	4605      	mov	r5, r0
   23c4a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   23c4c:	f7f4 fb28 	bl	182a0 <bt_att_chan_create_pdu>
	if (!buf) {
   23c50:	4604      	mov	r4, r0
   23c52:	b170      	cbz	r0, 23c72 <send_err_rsp.part.0+0x36>
   23c54:	2104      	movs	r1, #4
   23c56:	300c      	adds	r0, #12
   23c58:	f000 fc6e 	bl	24538 <net_buf_simple_add>
	rsp->request = req;
   23c5c:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   23c60:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   23c64:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   23c66:	4621      	mov	r1, r4
   23c68:	4628      	mov	r0, r5
}
   23c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   23c6e:	f7ff bdb3 	b.w	237d8 <bt_att_chan_send_rsp>
}
   23c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023c76 <att_write_req>:
{
   23c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23c78:	460c      	mov	r4, r1
   23c7a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   23c7c:	f101 000c 	add.w	r0, r1, #12
   23c80:	f000 fc89 	bl	24596 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23c84:	8a22      	ldrh	r2, [r4, #16]
   23c86:	9201      	str	r2, [sp, #4]
   23c88:	68e2      	ldr	r2, [r4, #12]
   23c8a:	9200      	str	r2, [sp, #0]
   23c8c:	4603      	mov	r3, r0
   23c8e:	2213      	movs	r2, #19
   23c90:	2112      	movs	r1, #18
   23c92:	4628      	mov	r0, r5
   23c94:	f7f4 fc1e 	bl	184d4 <att_write_rsp.constprop.0>
}
   23c98:	b003      	add	sp, #12
   23c9a:	bd30      	pop	{r4, r5, pc}

00023c9c <att_write_cmd>:
{
   23c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23c9e:	460c      	mov	r4, r1
   23ca0:	4605      	mov	r5, r0
   23ca2:	f101 000c 	add.w	r0, r1, #12
   23ca6:	f000 fc76 	bl	24596 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23caa:	8a22      	ldrh	r2, [r4, #16]
   23cac:	9201      	str	r2, [sp, #4]
   23cae:	68e2      	ldr	r2, [r4, #12]
   23cb0:	9200      	str	r2, [sp, #0]
   23cb2:	2200      	movs	r2, #0
   23cb4:	4603      	mov	r3, r0
   23cb6:	4611      	mov	r1, r2
   23cb8:	4628      	mov	r0, r5
   23cba:	f7f4 fc0b 	bl	184d4 <att_write_rsp.constprop.0>
}
   23cbe:	b003      	add	sp, #12
   23cc0:	bd30      	pop	{r4, r5, pc}

00023cc2 <att_read_blob_req>:
{
   23cc2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   23cc4:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23cc6:	8813      	ldrh	r3, [r2, #0]
   23cc8:	8852      	ldrh	r2, [r2, #2]
   23cca:	9200      	str	r2, [sp, #0]
   23ccc:	210c      	movs	r1, #12
   23cce:	220d      	movs	r2, #13
   23cd0:	f7f4 fdc6 	bl	18860 <att_read_rsp>
}
   23cd4:	b003      	add	sp, #12
   23cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00023cda <att_read_req>:
{
   23cda:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   23cdc:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   23cde:	2200      	movs	r2, #0
   23ce0:	881b      	ldrh	r3, [r3, #0]
   23ce2:	9200      	str	r2, [sp, #0]
   23ce4:	210a      	movs	r1, #10
   23ce6:	220b      	movs	r2, #11
   23ce8:	f7f4 fdba 	bl	18860 <att_read_rsp>
}
   23cec:	b003      	add	sp, #12
   23cee:	f85d fb04 	ldr.w	pc, [sp], #4

00023cf2 <att_mtu_req>:
{
   23cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cf4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   23cf6:	f850 2b90 	ldr.w	r2, [r0], #144
{
   23cfa:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   23cfc:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   23cfe:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   23d00:	f7ff fc60 	bl	235c4 <atomic_test_bit>
   23d04:	4604      	mov	r4, r0
   23d06:	b9d8      	cbnz	r0, 23d40 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   23d08:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   23d0a:	881b      	ldrh	r3, [r3, #0]
   23d0c:	2b16      	cmp	r3, #22
   23d0e:	d919      	bls.n	23d44 <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   23d10:	4630      	mov	r0, r6
   23d12:	2202      	movs	r2, #2
   23d14:	f7f4 fc42 	bl	1859c <bt_att_create_pdu>
	if (!pdu) {
   23d18:	4606      	mov	r6, r0
   23d1a:	b1a8      	cbz	r0, 23d48 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   23d1c:	2102      	movs	r1, #2
   23d1e:	300c      	adds	r0, #12
   23d20:	f000 fc0a 	bl	24538 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   23d24:	2717      	movs	r7, #23
   23d26:	7007      	strb	r7, [r0, #0]
   23d28:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   23d2a:	4631      	mov	r1, r6
   23d2c:	4628      	mov	r0, r5
   23d2e:	f7ff fd53 	bl	237d8 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   23d32:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   23d34:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   23d36:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   23d38:	f7ff fcd5 	bl	236e6 <att_chan_mtu_updated>
	return 0;
   23d3c:	4620      	mov	r0, r4
}
   23d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   23d40:	2006      	movs	r0, #6
   23d42:	e7fc      	b.n	23d3e <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   23d44:	2004      	movs	r0, #4
   23d46:	e7fa      	b.n	23d3e <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   23d48:	200e      	movs	r0, #14
   23d4a:	e7f8      	b.n	23d3e <att_mtu_req+0x4c>

00023d4c <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   23d4c:	8a0a      	ldrh	r2, [r1, #16]
   23d4e:	68c9      	ldr	r1, [r1, #12]
   23d50:	2300      	movs	r3, #0
   23d52:	f7f4 bf31 	b.w	18bb8 <att_handle_rsp>

00023d56 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   23d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d58:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   23d5a:	f7f4 f925 	bl	17fa8 <att_get>
	if (!att) {
   23d5e:	4604      	mov	r4, r0
   23d60:	b940      	cbnz	r0, 23d74 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   23d62:	69a8      	ldr	r0, [r5, #24]
   23d64:	f7f3 fff4 	bl	17d50 <tx_meta_data_free>
		net_buf_unref(buf);
   23d68:	4628      	mov	r0, r5
   23d6a:	f7f5 ff8d 	bl	19c88 <net_buf_unref>
		return -ENOTCONN;
   23d6e:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   23d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   23d74:	f100 060c 	add.w	r6, r0, #12
   23d78:	4629      	mov	r1, r5
   23d7a:	4630      	mov	r0, r6
   23d7c:	f000 fbb4 	bl	244e8 <net_buf_put>
	return list->head;
   23d80:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23d82:	b14d      	cbz	r5, 23d98 <bt_att_send+0x42>
	return node->next;
   23d84:	f855 49e0 	ldr.w	r4, [r5], #-224
   23d88:	b104      	cbz	r4, 23d8c <bt_att_send+0x36>
   23d8a:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   23d8c:	4631      	mov	r1, r6
   23d8e:	4628      	mov	r0, r5
   23d90:	f7ff fd09 	bl	237a6 <process_queue>
		if (!err) {
   23d94:	4603      	mov	r3, r0
   23d96:	b980      	cbnz	r0, 23dba <bt_att_send+0x64>
	return 0;
   23d98:	2000      	movs	r0, #0
   23d9a:	e7ea      	b.n	23d72 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   23d9c:	2103      	movs	r1, #3
   23d9e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23da2:	f7ff fc0f 	bl	235c4 <atomic_test_bit>
   23da6:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   23da8:	f105 0090 	add.w	r0, r5, #144	; 0x90
   23dac:	f7ff fc0a 	bl	235c4 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   23db0:	4287      	cmp	r7, r0
   23db2:	f06f 0301 	mvn.w	r3, #1
   23db6:	d107      	bne.n	23dc8 <bt_att_send+0x72>
   23db8:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23dba:	2c00      	cmp	r4, #0
   23dbc:	d0ec      	beq.n	23d98 <bt_att_send+0x42>
   23dbe:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   23dc2:	b922      	cbnz	r2, 23dce <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   23dc4:	3302      	adds	r3, #2
   23dc6:	d0e9      	beq.n	23d9c <bt_att_send+0x46>
{
   23dc8:	4625      	mov	r5, r4
   23dca:	4614      	mov	r4, r2
   23dcc:	e7de      	b.n	23d8c <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23dce:	3ae0      	subs	r2, #224	; 0xe0
   23dd0:	e7f8      	b.n	23dc4 <bt_att_send+0x6e>

00023dd2 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   23dd2:	b510      	push	{r4, lr}
   23dd4:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   23dd6:	f7f4 f8e7 	bl	17fa8 <att_get>
	if (!att) {
   23dda:	b160      	cbz	r0, 23df6 <bt_att_req_send+0x24>
	parent->next = child;
   23ddc:	2300      	movs	r3, #0
   23dde:	6023      	str	r3, [r4, #0]
	return list->tail;
   23de0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   23de2:	b92b      	cbnz	r3, 23df0 <bt_att_req_send+0x1e>
	list->head = node;
   23de4:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   23de8:	f7ff fe4e 	bl	23a88 <att_req_send_process>

	return 0;
   23dec:	2000      	movs	r0, #0
}
   23dee:	bd10      	pop	{r4, pc}
	parent->next = child;
   23df0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23df2:	6084      	str	r4, [r0, #8]
}
   23df4:	e7f8      	b.n	23de8 <bt_att_req_send+0x16>
		return -ENOTCONN;
   23df6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   23dfa:	e7f8      	b.n	23dee <bt_att_req_send+0x1c>

00023dfc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   23dfc:	2001      	movs	r0, #1
   23dfe:	4770      	bx	lr

00023e00 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   23e00:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   23e02:	f7f4 f8d1 	bl	17fa8 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   23e06:	b198      	cbz	r0, 23e30 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   23e08:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   23e0a:	b18b      	cbz	r3, 23e30 <bt_att_clear_out_of_sync_sent+0x30>
   23e0c:	f3bf 8f5b 	dmb	ish
   23e10:	3be0      	subs	r3, #224	; 0xe0
   23e12:	f103 0290 	add.w	r2, r3, #144	; 0x90
   23e16:	e852 0f00 	ldrex	r0, [r2]
   23e1a:	f020 0020 	bic.w	r0, r0, #32
   23e1e:	e842 0100 	strex	r1, r0, [r2]
   23e22:	2900      	cmp	r1, #0
   23e24:	d1f7      	bne.n	23e16 <bt_att_clear_out_of_sync_sent+0x16>
   23e26:	f3bf 8f5b 	dmb	ish
	return node->next;
   23e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   23e2e:	e7ec      	b.n	23e0a <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   23e30:	bd08      	pop	{r3, pc}

00023e32 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   23e32:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   23e34:	2104      	movs	r1, #4
   23e36:	f7ff fb96 	bl	23566 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   23e3a:	b128      	cbz	r0, 23e48 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   23e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   23e40:	2105      	movs	r1, #5
   23e42:	308c      	adds	r0, #140	; 0x8c
   23e44:	f7ff bbbe 	b.w	235c4 <atomic_test_bit>
}
   23e48:	bd08      	pop	{r3, pc}

00023e4a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   23e4a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   23e4c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   23e50:	2201      	movs	r2, #1
   23e52:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   23e54:	7403      	strb	r3, [r0, #16]
}
   23e56:	4770      	bx	lr

00023e58 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   23e58:	6010      	str	r0, [r2, #0]
}
   23e5a:	2000      	movs	r0, #0
   23e5c:	4770      	bx	lr

00023e5e <gatt_ccc_changed>:
{
   23e5e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   23e60:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   23e62:	895a      	ldrh	r2, [r3, #10]
   23e64:	428a      	cmp	r2, r1
   23e66:	d003      	beq.n	23e70 <gatt_ccc_changed+0x12>
		ccc->value = value;
   23e68:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   23e6a:	68db      	ldr	r3, [r3, #12]
   23e6c:	b103      	cbz	r3, 23e70 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   23e6e:	4718      	bx	r3
}
   23e70:	4770      	bx	lr

00023e72 <gatt_indicate_rsp>:
{
   23e72:	b510      	push	{r4, lr}
   23e74:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   23e76:	68a3      	ldr	r3, [r4, #8]
{
   23e78:	460a      	mov	r2, r1
	if (params->func) {
   23e7a:	b10b      	cbz	r3, 23e80 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   23e7c:	4621      	mov	r1, r4
   23e7e:	4798      	blx	r3
	params->_ref--;
   23e80:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   23e82:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   23e84:	3b01      	subs	r3, #1
   23e86:	b2db      	uxtb	r3, r3
   23e88:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   23e8a:	b122      	cbz	r2, 23e96 <gatt_indicate_rsp+0x24>
   23e8c:	b91b      	cbnz	r3, 23e96 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   23e8e:	4620      	mov	r0, r4
}
   23e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   23e94:	4710      	bx	r2
}
   23e96:	bd10      	pop	{r4, pc}

00023e98 <match_uuid>:
	data->attr = attr;
   23e98:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   23e9a:	8091      	strh	r1, [r2, #4]
}
   23e9c:	2000      	movs	r0, #0
   23e9e:	4770      	bx	lr

00023ea0 <gen_hash_m>:
{
   23ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23ea2:	6807      	ldr	r7, [r0, #0]
   23ea4:	783d      	ldrb	r5, [r7, #0]
{
   23ea6:	b089      	sub	sp, #36	; 0x24
   23ea8:	4606      	mov	r6, r0
   23eaa:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23eac:	b9dd      	cbnz	r5, 23ee6 <gen_hash_m+0x46>
	switch (u16->val) {
   23eae:	887b      	ldrh	r3, [r7, #2]
   23eb0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   23eb4:	d004      	beq.n	23ec0 <gen_hash_m+0x20>
   23eb6:	d810      	bhi.n	23eda <gen_hash_m+0x3a>
   23eb8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   23ebc:	2b03      	cmp	r3, #3
   23ebe:	d812      	bhi.n	23ee6 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   23ec0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23ec4:	2202      	movs	r2, #2
   23ec6:	f10d 010a 	add.w	r1, sp, #10
   23eca:	4620      	mov	r0, r4
   23ecc:	f7fe fe7c 	bl	22bc8 <tc_cmac_update>
   23ed0:	b968      	cbnz	r0, 23eee <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   23ed2:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   23ed6:	65a2      	str	r2, [r4, #88]	; 0x58
   23ed8:	e006      	b.n	23ee8 <gen_hash_m+0x48>
	switch (u16->val) {
   23eda:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   23ede:	33ff      	adds	r3, #255	; 0xff
   23ee0:	b29b      	uxth	r3, r3
   23ee2:	2b04      	cmp	r3, #4
   23ee4:	d91e      	bls.n	23f24 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   23ee6:	2501      	movs	r5, #1
}
   23ee8:	4628      	mov	r0, r5
   23eea:	b009      	add	sp, #36	; 0x24
   23eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   23eee:	887b      	ldrh	r3, [r7, #2]
   23ef0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23ef4:	2202      	movs	r2, #2
   23ef6:	f10d 010a 	add.w	r1, sp, #10
   23efa:	4620      	mov	r0, r4
   23efc:	f7fe fe64 	bl	22bc8 <tc_cmac_update>
   23f00:	2800      	cmp	r0, #0
   23f02:	d0e6      	beq.n	23ed2 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   23f04:	2000      	movs	r0, #0
   23f06:	9000      	str	r0, [sp, #0]
   23f08:	aa03      	add	r2, sp, #12
   23f0a:	6877      	ldr	r7, [r6, #4]
   23f0c:	2313      	movs	r3, #19
   23f0e:	4631      	mov	r1, r6
   23f10:	47b8      	blx	r7
		if (len < 0) {
   23f12:	1e02      	subs	r2, r0, #0
   23f14:	dbdf      	blt.n	23ed6 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   23f16:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f18:	4620      	mov	r0, r4
   23f1a:	f7fe fe55 	bl	22bc8 <tc_cmac_update>
   23f1e:	2800      	cmp	r0, #0
   23f20:	d1e1      	bne.n	23ee6 <gen_hash_m+0x46>
   23f22:	e7d6      	b.n	23ed2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   23f24:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f28:	2202      	movs	r2, #2
   23f2a:	f10d 010a 	add.w	r1, sp, #10
   23f2e:	4620      	mov	r0, r4
   23f30:	f7fe fe4a 	bl	22bc8 <tc_cmac_update>
   23f34:	2800      	cmp	r0, #0
   23f36:	d0cc      	beq.n	23ed2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   23f38:	887b      	ldrh	r3, [r7, #2]
   23f3a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23f3e:	2202      	movs	r2, #2
   23f40:	f10d 010a 	add.w	r1, sp, #10
   23f44:	e7e8      	b.n	23f18 <gen_hash_m+0x78>

00023f46 <bt_addr_le_eq>:
{
   23f46:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   23f48:	2207      	movs	r2, #7
   23f4a:	f7fe ff0c 	bl	22d66 <memcmp>
}
   23f4e:	fab0 f080 	clz	r0, r0
   23f52:	0940      	lsrs	r0, r0, #5
   23f54:	bd08      	pop	{r3, pc}

00023f56 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   23f56:	2207      	movs	r2, #7
   23f58:	f7fe bf2c 	b.w	22db4 <memcpy>

00023f5c <z_log_msg_static_create.constprop.0>:
   23f5c:	2300      	movs	r3, #0
   23f5e:	f7ef b82d 	b.w	12fbc <z_impl_z_log_msg_static_create>

00023f62 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23f62:	2301      	movs	r3, #1
   23f64:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23f66:	f3bf 8f5b 	dmb	ish
   23f6a:	e850 2f00 	ldrex	r2, [r0]
   23f6e:	431a      	orrs	r2, r3
   23f70:	e840 2100 	strex	r1, r2, [r0]
   23f74:	2900      	cmp	r1, #0
   23f76:	d1f8      	bne.n	23f6a <atomic_set_bit+0x8>
   23f78:	f3bf 8f5b 	dmb	ish
}
   23f7c:	4770      	bx	lr

00023f7e <sc_restore_rsp>:
{
   23f7e:	b538      	push	{r3, r4, r5, lr}
   23f80:	4604      	mov	r4, r0
   23f82:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   23f84:	f7ff ff3a 	bl	23dfc <bt_att_fixed_chan_only>
   23f88:	b150      	cbz	r0, 23fa0 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   23f8a:	4620      	mov	r0, r4
   23f8c:	f7f4 fed8 	bl	18d40 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   23f90:	b130      	cbz	r0, 23fa0 <sc_restore_rsp+0x22>
   23f92:	7a03      	ldrb	r3, [r0, #8]
   23f94:	07db      	lsls	r3, r3, #31
   23f96:	d503      	bpl.n	23fa0 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   23f98:	2100      	movs	r1, #0
   23f9a:	300c      	adds	r0, #12
   23f9c:	f7ff ffe1 	bl	23f62 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   23fa0:	b965      	cbnz	r5, 23fbc <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   23fa2:	7a20      	ldrb	r0, [r4, #8]
   23fa4:	f104 0188 	add.w	r1, r4, #136	; 0x88
   23fa8:	f7f4 fee2 	bl	18d70 <find_sc_cfg>
		if (sc_cfg) {
   23fac:	b130      	cbz	r0, 23fbc <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   23fae:	4629      	mov	r1, r5
   23fb0:	2204      	movs	r2, #4
}
   23fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   23fb6:	3008      	adds	r0, #8
   23fb8:	f7fe bf07 	b.w	22dca <memset>
}
   23fbc:	bd38      	pop	{r3, r4, r5, pc}

00023fbe <sc_clear>:
{
   23fbe:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23fc0:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   23fc4:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23fc6:	4631      	mov	r1, r6
   23fc8:	7a00      	ldrb	r0, [r0, #8]
   23fca:	f7ff f849 	bl	23060 <bt_addr_le_is_bonded>
   23fce:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   23fd0:	4631      	mov	r1, r6
   23fd2:	f7f4 fecd 	bl	18d70 <find_sc_cfg>
	if (!cfg) {
   23fd6:	b128      	cbz	r0, 23fe4 <sc_clear+0x26>
}
   23fd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   23fdc:	220c      	movs	r2, #12
   23fde:	2100      	movs	r1, #0
   23fe0:	f7fe bef3 	b.w	22dca <memset>
}
   23fe4:	bd70      	pop	{r4, r5, r6, pc}

00023fe6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   23fe6:	2a02      	cmp	r2, #2
{
   23fe8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   23fea:	d108      	bne.n	23ffe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   23fec:	2300      	movs	r3, #0
   23fee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   23ff2:	461a      	mov	r2, r3
   23ff4:	7a00      	ldrb	r0, [r0, #8]
   23ff6:	f7f4 ff5f 	bl	18eb8 <sc_save>
}
   23ffa:	2002      	movs	r0, #2
   23ffc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   23ffe:	f7ff ffde 	bl	23fbe <sc_clear>
   24002:	e7fa      	b.n	23ffa <sc_ccc_cfg_write+0x14>

00024004 <read_appearance>:
{
   24004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24006:	4615      	mov	r5, r2
   24008:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2400c:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2400e:	f7ff f825 	bl	2305c <bt_get_appearance>
	if (offset > value_len) {
   24012:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   24014:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   24018:	d80e      	bhi.n	24038 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2401a:	f1c6 0402 	rsb	r4, r6, #2
   2401e:	42bc      	cmp	r4, r7
   24020:	bfa8      	it	ge
   24022:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   24024:	f10d 0306 	add.w	r3, sp, #6
   24028:	4622      	mov	r2, r4
   2402a:	1999      	adds	r1, r3, r6
   2402c:	4628      	mov	r0, r5
   2402e:	f7fe fec1 	bl	22db4 <memcpy>
}
   24032:	4620      	mov	r0, r4
   24034:	b003      	add	sp, #12
   24036:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24038:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2403c:	e7f9      	b.n	24032 <read_appearance+0x2e>

0002403e <read_name>:
{
   2403e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24042:	4698      	mov	r8, r3
   24044:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   24048:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2404a:	f7f2 f8b5 	bl	161b8 <bt_get_name>
   2404e:	4607      	mov	r7, r0
				 strlen(name));
   24050:	f7fe fe79 	bl	22d46 <strlen>
	if (offset > value_len) {
   24054:	b283      	uxth	r3, r0
   24056:	42b3      	cmp	r3, r6
   24058:	d30c      	bcc.n	24074 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2405a:	1b9c      	subs	r4, r3, r6
   2405c:	4544      	cmp	r4, r8
   2405e:	bfa8      	it	ge
   24060:	4644      	movge	r4, r8
   24062:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   24064:	4622      	mov	r2, r4
   24066:	19b9      	adds	r1, r7, r6
   24068:	4628      	mov	r0, r5
   2406a:	f7fe fea3 	bl	22db4 <memcpy>
}
   2406e:	4620      	mov	r0, r4
   24070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24074:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   24078:	e7f9      	b.n	2406e <read_name+0x30>

0002407a <cf_read>:
{
   2407a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2407c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2407e:	2300      	movs	r3, #0
{
   24080:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   24084:	f88d 3004 	strb.w	r3, [sp, #4]
{
   24088:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2408a:	f7f4 fe59 	bl	18d40 <find_cf_cfg>
	if (cfg) {
   2408e:	b128      	cbz	r0, 2409c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   24090:	f100 0108 	add.w	r1, r0, #8
   24094:	2201      	movs	r2, #1
   24096:	a801      	add	r0, sp, #4
   24098:	f7fe fe8c 	bl	22db4 <memcpy>
	if (offset > value_len) {
   2409c:	2e01      	cmp	r6, #1
   2409e:	d80d      	bhi.n	240bc <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   240a0:	f1c6 0401 	rsb	r4, r6, #1
   240a4:	42bc      	cmp	r4, r7
   240a6:	bfa8      	it	ge
   240a8:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   240aa:	ab01      	add	r3, sp, #4
   240ac:	4622      	mov	r2, r4
   240ae:	1999      	adds	r1, r3, r6
   240b0:	4628      	mov	r0, r5
   240b2:	f7fe fe7f 	bl	22db4 <memcpy>
}
   240b6:	4620      	mov	r0, r4
   240b8:	b003      	add	sp, #12
   240ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   240bc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   240c0:	e7f9      	b.n	240b6 <cf_read+0x3c>

000240c2 <bt_gatt_attr_read_service>:
{
   240c2:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   240c4:	68c9      	ldr	r1, [r1, #12]
{
   240c6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   240c8:	780a      	ldrb	r2, [r1, #0]
{
   240ca:	461c      	mov	r4, r3
   240cc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   240d0:	b992      	cbnz	r2, 240f8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   240d2:	884a      	ldrh	r2, [r1, #2]
   240d4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   240d8:	2b02      	cmp	r3, #2
   240da:	d818      	bhi.n	2410e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   240dc:	f1c3 0202 	rsb	r2, r3, #2
   240e0:	4294      	cmp	r4, r2
   240e2:	bfa8      	it	ge
   240e4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   240e6:	4622      	mov	r2, r4
   240e8:	f10d 0106 	add.w	r1, sp, #6
   240ec:	4419      	add	r1, r3
   240ee:	f7fe fe61 	bl	22db4 <memcpy>
}
   240f2:	4620      	mov	r0, r4
   240f4:	b002      	add	sp, #8
   240f6:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   240f8:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   240fa:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   240fe:	d806      	bhi.n	2410e <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   24100:	f1c3 0210 	rsb	r2, r3, #16
   24104:	4294      	cmp	r4, r2
   24106:	bfa8      	it	ge
   24108:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2410a:	4622      	mov	r2, r4
   2410c:	e7ee      	b.n	240ec <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2410e:	f06f 0406 	mvn.w	r4, #6
   24112:	e7ee      	b.n	240f2 <bt_gatt_attr_read_service+0x30>

00024114 <bt_gatt_attr_read_ccc>:
{
   24114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   24116:	68c9      	ldr	r1, [r1, #12]
{
   24118:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2411c:	4615      	mov	r5, r2
   2411e:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   24120:	f7f4 fe36 	bl	18d90 <find_ccc_cfg>
	if (cfg) {
   24124:	b100      	cbz	r0, 24128 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   24126:	8900      	ldrh	r0, [r0, #8]
   24128:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2412c:	2e02      	cmp	r6, #2
   2412e:	d80e      	bhi.n	2414e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   24130:	f1c6 0402 	rsb	r4, r6, #2
   24134:	42bc      	cmp	r4, r7
   24136:	bfa8      	it	ge
   24138:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2413a:	f10d 0306 	add.w	r3, sp, #6
   2413e:	4622      	mov	r2, r4
   24140:	1999      	adds	r1, r3, r6
   24142:	4628      	mov	r0, r5
   24144:	f7fe fe36 	bl	22db4 <memcpy>
}
   24148:	4620      	mov	r0, r4
   2414a:	b003      	add	sp, #12
   2414c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2414e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   24152:	e7f9      	b.n	24148 <bt_gatt_attr_read_ccc+0x34>

00024154 <bt_gatt_attr_read>:
{
   24154:	b510      	push	{r4, lr}
   24156:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2415a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2415e:	42a1      	cmp	r1, r4
{
   24160:	4610      	mov	r0, r2
	if (offset > value_len) {
   24162:	d80b      	bhi.n	2417c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   24164:	1a64      	subs	r4, r4, r1
   24166:	429c      	cmp	r4, r3
   24168:	bfa8      	it	ge
   2416a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2416c:	9b03      	ldr	r3, [sp, #12]
   2416e:	b2a4      	uxth	r4, r4
   24170:	4622      	mov	r2, r4
   24172:	4419      	add	r1, r3
   24174:	f7fe fe1e 	bl	22db4 <memcpy>
}
   24178:	4620      	mov	r0, r4
   2417a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2417c:	f06f 0406 	mvn.w	r4, #6
   24180:	e7fa      	b.n	24178 <bt_gatt_attr_read+0x24>

00024182 <bt_gatt_attr_value_handle>:
{
   24182:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   24184:	4604      	mov	r4, r0
   24186:	b910      	cbnz	r0, 2418e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   24188:	2000      	movs	r0, #0
}
   2418a:	b002      	add	sp, #8
   2418c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2418e:	2300      	movs	r3, #0
   24190:	f88d 3004 	strb.w	r3, [sp, #4]
   24194:	6800      	ldr	r0, [r0, #0]
   24196:	f642 0303 	movw	r3, #10243	; 0x2803
   2419a:	a901      	add	r1, sp, #4
   2419c:	f8ad 3006 	strh.w	r3, [sp, #6]
   241a0:	f7fe fe31 	bl	22e06 <bt_uuid_cmp>
   241a4:	2800      	cmp	r0, #0
   241a6:	d1ef      	bne.n	24188 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   241a8:	68e3      	ldr	r3, [r4, #12]
   241aa:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   241ac:	2800      	cmp	r0, #0
   241ae:	d1ec      	bne.n	2418a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   241b0:	4620      	mov	r0, r4
   241b2:	f7f4 fffd 	bl	191b0 <bt_gatt_attr_get_handle>
   241b6:	3001      	adds	r0, #1
   241b8:	b280      	uxth	r0, r0
	return handle;
   241ba:	e7e6      	b.n	2418a <bt_gatt_attr_value_handle+0x8>

000241bc <bt_gatt_attr_read_chrc>:
{
   241bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   241be:	68cc      	ldr	r4, [r1, #12]
{
   241c0:	b087      	sub	sp, #28
   241c2:	4608      	mov	r0, r1
   241c4:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   241c6:	79a3      	ldrb	r3, [r4, #6]
   241c8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   241cc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   241d0:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   241d2:	f7ff ffd6 	bl	24182 <bt_gatt_attr_value_handle>
   241d6:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   241da:	6821      	ldr	r1, [r4, #0]
   241dc:	780b      	ldrb	r3, [r1, #0]
   241de:	b99b      	cbnz	r3, 24208 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   241e0:	884b      	ldrh	r3, [r1, #2]
   241e2:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   241e6:	2405      	movs	r4, #5
	if (offset > value_len) {
   241e8:	42b4      	cmp	r4, r6
   241ea:	d315      	bcc.n	24218 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   241ec:	1ba4      	subs	r4, r4, r6
   241ee:	42bc      	cmp	r4, r7
   241f0:	bfa8      	it	ge
   241f2:	463c      	movge	r4, r7
   241f4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   241f6:	ab01      	add	r3, sp, #4
   241f8:	4622      	mov	r2, r4
   241fa:	1999      	adds	r1, r3, r6
   241fc:	4628      	mov	r0, r5
   241fe:	f7fe fdd9 	bl	22db4 <memcpy>
}
   24202:	4620      	mov	r0, r4
   24204:	b007      	add	sp, #28
   24206:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   24208:	2210      	movs	r2, #16
   2420a:	3101      	adds	r1, #1
   2420c:	f10d 0007 	add.w	r0, sp, #7
   24210:	f7fe fdd0 	bl	22db4 <memcpy>
		value_len += 16U;
   24214:	2413      	movs	r4, #19
   24216:	e7e7      	b.n	241e8 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   24218:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2421c:	e7f1      	b.n	24202 <bt_gatt_attr_read_chrc+0x46>

0002421e <bt_gatt_foreach_attr>:
{
   2421e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24220:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24224:	2300      	movs	r3, #0
   24226:	9300      	str	r3, [sp, #0]
   24228:	461a      	mov	r2, r3
   2422a:	f7f4 fff1 	bl	19210 <bt_gatt_foreach_attr_type>
}
   2422e:	b005      	add	sp, #20
   24230:	f85d fb04 	ldr.w	pc, [sp], #4

00024234 <db_hash_process>:
	db_hash_gen(true);
   24234:	f7f5 b846 	b.w	192c4 <db_hash_gen.constprop.0>

00024238 <bt_gatt_check_perm>:
{
   24238:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2423a:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2423c:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2423e:	d504      	bpl.n	2424a <bt_gatt_check_perm+0x12>
   24240:	f013 0f95 	tst.w	r3, #149	; 0x95
   24244:	d01d      	beq.n	24282 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   24246:	684c      	ldr	r4, [r1, #4]
   24248:	b1dc      	cbz	r4, 24282 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2424a:	0794      	lsls	r4, r2, #30
   2424c:	d504      	bpl.n	24258 <bt_gatt_check_perm+0x20>
   2424e:	f413 7f95 	tst.w	r3, #298	; 0x12a
   24252:	d018      	beq.n	24286 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   24254:	6889      	ldr	r1, [r1, #8]
   24256:	b1b1      	cbz	r1, 24286 <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   24258:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2425c:	f414 7fc0 	tst.w	r4, #384	; 0x180
   24260:	d001      	beq.n	24266 <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   24262:	2005      	movs	r0, #5
}
   24264:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   24266:	f014 0f30 	tst.w	r4, #48	; 0x30
   2426a:	d105      	bne.n	24278 <bt_gatt_check_perm+0x40>
	return 0;
   2426c:	f014 0f0c 	tst.w	r4, #12
   24270:	bf14      	ite	ne
   24272:	200f      	movne	r0, #15
   24274:	2000      	moveq	r0, #0
   24276:	e7f5      	b.n	24264 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   24278:	f7ff f8a6 	bl	233c8 <bt_conn_get_security>
   2427c:	2802      	cmp	r0, #2
   2427e:	d8f5      	bhi.n	2426c <bt_gatt_check_perm+0x34>
   24280:	e7ef      	b.n	24262 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   24282:	2002      	movs	r0, #2
   24284:	e7ee      	b.n	24264 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   24286:	2003      	movs	r0, #3
   24288:	e7ec      	b.n	24264 <bt_gatt_check_perm+0x2c>

0002428a <bt_gatt_is_subscribed>:
{
   2428a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2428e:	7a83      	ldrb	r3, [r0, #10]
   24290:	2b07      	cmp	r3, #7
{
   24292:	4605      	mov	r5, r0
   24294:	460c      	mov	r4, r1
   24296:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   24298:	d110      	bne.n	242bc <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   2429a:	2300      	movs	r3, #0
   2429c:	f88d 300c 	strb.w	r3, [sp, #12]
   242a0:	6820      	ldr	r0, [r4, #0]
   242a2:	f642 0303 	movw	r3, #10243	; 0x2803
   242a6:	a903      	add	r1, sp, #12
   242a8:	f8ad 300e 	strh.w	r3, [sp, #14]
   242ac:	f7fe fdab 	bl	22e06 <bt_uuid_cmp>
   242b0:	b960      	cbnz	r0, 242cc <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   242b2:	68e3      	ldr	r3, [r4, #12]
   242b4:	799b      	ldrb	r3, [r3, #6]
   242b6:	f013 0f30 	tst.w	r3, #48	; 0x30
   242ba:	d103      	bne.n	242c4 <bt_gatt_is_subscribed+0x3a>
		return false;
   242bc:	2000      	movs	r0, #0
}
   242be:	b004      	add	sp, #16
   242c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   242c4:	4620      	mov	r0, r4
   242c6:	f7f5 f88d 	bl	193e4 <bt_gatt_attr_next>
   242ca:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   242cc:	2300      	movs	r3, #0
   242ce:	6820      	ldr	r0, [r4, #0]
   242d0:	f88d 300c 	strb.w	r3, [sp, #12]
   242d4:	a903      	add	r1, sp, #12
   242d6:	f642 1302 	movw	r3, #10498	; 0x2902
   242da:	f8ad 300e 	strh.w	r3, [sp, #14]
   242de:	f7fe fd92 	bl	22e06 <bt_uuid_cmp>
   242e2:	b118      	cbz	r0, 242ec <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   242e4:	4620      	mov	r0, r4
   242e6:	f7f5 f87d 	bl	193e4 <bt_gatt_attr_next>
   242ea:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   242ec:	2600      	movs	r6, #0
   242ee:	f642 1802 	movw	r8, #10498	; 0x2902
   242f2:	6820      	ldr	r0, [r4, #0]
   242f4:	f88d 6000 	strb.w	r6, [sp]
   242f8:	4669      	mov	r1, sp
   242fa:	f8ad 8002 	strh.w	r8, [sp, #2]
   242fe:	f7fe fd82 	bl	22e06 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24302:	b9d8      	cbnz	r0, 2433c <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   24304:	2300      	movs	r3, #0
   24306:	6820      	ldr	r0, [r4, #0]
   24308:	f88d 300c 	strb.w	r3, [sp, #12]
   2430c:	a903      	add	r1, sp, #12
   2430e:	f642 1302 	movw	r3, #10498	; 0x2902
   24312:	f8ad 300e 	strh.w	r3, [sp, #14]
   24316:	f7fe fd76 	bl	22e06 <bt_uuid_cmp>
   2431a:	2800      	cmp	r0, #0
   2431c:	d1ce      	bne.n	242bc <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   2431e:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   24320:	4622      	mov	r2, r4
   24322:	4628      	mov	r0, r5
   24324:	f812 1b01 	ldrb.w	r1, [r2], #1
   24328:	f7ff f850 	bl	233cc <bt_conn_is_peer_addr_le>
   2432c:	2800      	cmp	r0, #0
   2432e:	d0c5      	beq.n	242bc <bt_gatt_is_subscribed+0x32>
   24330:	8923      	ldrh	r3, [r4, #8]
   24332:	421f      	tst	r7, r3
   24334:	bf14      	ite	ne
   24336:	2001      	movne	r0, #1
   24338:	2000      	moveq	r0, #0
   2433a:	e7c0      	b.n	242be <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   2433c:	6820      	ldr	r0, [r4, #0]
   2433e:	f88d 6004 	strb.w	r6, [sp, #4]
   24342:	f642 0303 	movw	r3, #10243	; 0x2803
   24346:	a901      	add	r1, sp, #4
   24348:	f8ad 3006 	strh.w	r3, [sp, #6]
   2434c:	f7fe fd5b 	bl	22e06 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   24350:	2800      	cmp	r0, #0
   24352:	d0d7      	beq.n	24304 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24354:	6820      	ldr	r0, [r4, #0]
   24356:	f88d 6008 	strb.w	r6, [sp, #8]
   2435a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2435e:	a902      	add	r1, sp, #8
   24360:	f8ad 300a 	strh.w	r3, [sp, #10]
   24364:	f7fe fd4f 	bl	22e06 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   24368:	2800      	cmp	r0, #0
   2436a:	d0cb      	beq.n	24304 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   2436c:	6820      	ldr	r0, [r4, #0]
   2436e:	f88d 600c 	strb.w	r6, [sp, #12]
   24372:	f642 0301 	movw	r3, #10241	; 0x2801
   24376:	a903      	add	r1, sp, #12
   24378:	f8ad 300e 	strh.w	r3, [sp, #14]
   2437c:	f7fe fd43 	bl	22e06 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24380:	2800      	cmp	r0, #0
   24382:	d0bf      	beq.n	24304 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   24384:	4620      	mov	r0, r4
   24386:	f7f5 f82d 	bl	193e4 <bt_gatt_attr_next>
		if (!attr) {
   2438a:	4604      	mov	r4, r0
   2438c:	2800      	cmp	r0, #0
   2438e:	d1b0      	bne.n	242f2 <bt_gatt_is_subscribed+0x68>
   24390:	e794      	b.n	242bc <bt_gatt_is_subscribed+0x32>

00024392 <bt_gatt_change_aware>:
{
   24392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24394:	4606      	mov	r6, r0
   24396:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   24398:	f7f4 fcd2 	bl	18d40 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2439c:	b318      	cbz	r0, 243e6 <bt_gatt_change_aware+0x54>
   2439e:	7a03      	ldrb	r3, [r0, #8]
   243a0:	07db      	lsls	r3, r3, #31
   243a2:	d520      	bpl.n	243e6 <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   243a4:	f3bf 8f5b 	dmb	ish
   243a8:	68c5      	ldr	r5, [r0, #12]
   243aa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   243ae:	f015 0501 	ands.w	r5, r5, #1
   243b2:	f100 040c 	add.w	r4, r0, #12
   243b6:	d116      	bne.n	243e6 <bt_gatt_change_aware+0x54>
	if (!req) {
   243b8:	b1b7      	cbz	r7, 243e8 <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   243ba:	f3bf 8f5b 	dmb	ish
   243be:	e854 1f00 	ldrex	r1, [r4]
   243c2:	f021 0302 	bic.w	r3, r1, #2
   243c6:	e844 3200 	strex	r2, r3, [r4]
   243ca:	2a00      	cmp	r2, #0
   243cc:	d1f7      	bne.n	243be <bt_gatt_change_aware+0x2c>
   243ce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   243d2:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   243d6:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   243d8:	d008      	beq.n	243ec <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   243da:	f7ff fd11 	bl	23e00 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   243de:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   243e0:	4620      	mov	r0, r4
   243e2:	f7ff fdbe 	bl	23f62 <atomic_set_bit>
		return true;
   243e6:	2501      	movs	r5, #1
}
   243e8:	4628      	mov	r0, r5
   243ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   243ec:	f7ff fd06 	bl	23dfc <bt_att_fixed_chan_only>
   243f0:	2800      	cmp	r0, #0
   243f2:	d0f9      	beq.n	243e8 <bt_gatt_change_aware+0x56>
   243f4:	4630      	mov	r0, r6
   243f6:	f7ff fd1c 	bl	23e32 <bt_att_out_of_sync_sent_on_fixed>
   243fa:	2800      	cmp	r0, #0
   243fc:	d0f4      	beq.n	243e8 <bt_gatt_change_aware+0x56>
   243fe:	f3bf 8f5b 	dmb	ish
   24402:	e854 3f00 	ldrex	r3, [r4]
   24406:	f023 0302 	bic.w	r3, r3, #2
   2440a:	e844 3200 	strex	r2, r3, [r4]
   2440e:	2a00      	cmp	r2, #0
   24410:	d1f7      	bne.n	24402 <bt_gatt_change_aware+0x70>
   24412:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   24416:	4630      	mov	r0, r6
   24418:	f7ff fcf2 	bl	23e00 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2441c:	4639      	mov	r1, r7
   2441e:	e7df      	b.n	243e0 <bt_gatt_change_aware+0x4e>

00024420 <bt_smp_recv>:
{
   24420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   24422:	2100      	movs	r1, #0
   24424:	f04f 32ff 	mov.w	r2, #4294967295
   24428:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2442c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2442e:	4608      	mov	r0, r1
   24430:	f7ff f87d 	bl	2352e <bt_l2cap_create_pdu_timeout>
   24434:	f100 060c 	add.w	r6, r0, #12
   24438:	4604      	mov	r4, r0
   2443a:	2101      	movs	r1, #1
   2443c:	4630      	mov	r0, r6
   2443e:	f000 f87b 	bl	24538 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   24442:	2505      	movs	r5, #5
   24444:	7005      	strb	r5, [r0, #0]
   24446:	2101      	movs	r1, #1
   24448:	4630      	mov	r0, r6
   2444a:	f000 f875 	bl	24538 <net_buf_simple_add>
   2444e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   24450:	7005      	strb	r5, [r0, #0]
   24452:	4622      	mov	r2, r4
   24454:	9300      	str	r3, [sp, #0]
   24456:	2106      	movs	r1, #6
   24458:	4638      	mov	r0, r7
   2445a:	f7ff f86b 	bl	23534 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2445e:	b110      	cbz	r0, 24466 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   24460:	4620      	mov	r0, r4
   24462:	f7f5 fc11 	bl	19c88 <net_buf_unref>
}
   24466:	2000      	movs	r0, #0
   24468:	b003      	add	sp, #12
   2446a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002446c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2446c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24470:	4770      	bx	lr

00024472 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   24472:	2000      	movs	r0, #0
   24474:	4770      	bx	lr

00024476 <fixed_data_unref>:
}
   24476:	4770      	bx	lr

00024478 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   24478:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2447a:	6849      	ldr	r1, [r1, #4]
   2447c:	6809      	ldr	r1, [r1, #0]
   2447e:	f7f5 bb71 	b.w	19b64 <net_buf_alloc_len>

00024482 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   24482:	f7f9 bae9 	b.w	1da58 <z_impl_k_queue_get>

00024486 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   24486:	6883      	ldr	r3, [r0, #8]
   24488:	440b      	add	r3, r1
   2448a:	6003      	str	r3, [r0, #0]
}
   2448c:	4770      	bx	lr

0002448e <net_buf_slist_put>:
	__asm__ volatile(
   2448e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24492:	f3ef 8211 	mrs	r2, BASEPRI
   24496:	f383 8812 	msr	BASEPRI_MAX, r3
   2449a:	f3bf 8f6f 	isb	sy
	parent->next = child;
   2449e:	2300      	movs	r3, #0
   244a0:	600b      	str	r3, [r1, #0]
	return list->tail;
   244a2:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   244a4:	b933      	cbnz	r3, 244b4 <net_buf_slist_put+0x26>
	list->head = node;
   244a6:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   244aa:	f382 8811 	msr	BASEPRI, r2
   244ae:	f3bf 8f6f 	isb	sy
}
   244b2:	4770      	bx	lr
	parent->next = child;
   244b4:	6019      	str	r1, [r3, #0]
	list->tail = node;
   244b6:	6041      	str	r1, [r0, #4]
}
   244b8:	e7f7      	b.n	244aa <net_buf_slist_put+0x1c>

000244ba <net_buf_slist_get>:
{
   244ba:	b510      	push	{r4, lr}
   244bc:	4603      	mov	r3, r0
	__asm__ volatile(
   244be:	f04f 0240 	mov.w	r2, #64	; 0x40
   244c2:	f3ef 8111 	mrs	r1, BASEPRI
   244c6:	f382 8812 	msr	BASEPRI_MAX, r2
   244ca:	f3bf 8f6f 	isb	sy
	return list->head;
   244ce:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   244d0:	b128      	cbz	r0, 244de <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   244d2:	685c      	ldr	r4, [r3, #4]
	return node->next;
   244d4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   244d6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   244d8:	42a0      	cmp	r0, r4
	list->tail = node;
   244da:	bf08      	it	eq
   244dc:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   244de:	f381 8811 	msr	BASEPRI, r1
   244e2:	f3bf 8f6f 	isb	sy
}
   244e6:	bd10      	pop	{r4, pc}

000244e8 <net_buf_put>:
	k_fifo_put(fifo, buf);
   244e8:	f000 bf05 	b.w	252f6 <k_queue_append>

000244ec <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   244ec:	7a02      	ldrb	r2, [r0, #8]
   244ee:	3201      	adds	r2, #1
   244f0:	7202      	strb	r2, [r0, #8]
	return buf;
}
   244f2:	4770      	bx	lr

000244f4 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   244f4:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   244f6:	4618      	mov	r0, r3
   244f8:	685b      	ldr	r3, [r3, #4]
   244fa:	2b00      	cmp	r3, #0
   244fc:	d1fb      	bne.n	244f6 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   244fe:	4770      	bx	lr

00024500 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   24500:	6842      	ldr	r2, [r0, #4]
{
   24502:	b510      	push	{r4, lr}
	if (parent->frags) {
   24504:	b12a      	cbz	r2, 24512 <net_buf_frag_insert+0x12>
   24506:	460b      	mov	r3, r1
	while (buf->frags) {
   24508:	461c      	mov	r4, r3
   2450a:	685b      	ldr	r3, [r3, #4]
   2450c:	2b00      	cmp	r3, #0
   2450e:	d1fb      	bne.n	24508 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   24510:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   24512:	6041      	str	r1, [r0, #4]
}
   24514:	bd10      	pop	{r4, pc}

00024516 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   24516:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   24518:	4604      	mov	r4, r0
   2451a:	b920      	cbnz	r0, 24526 <net_buf_frag_add+0x10>
	buf->ref++;
   2451c:	7a0b      	ldrb	r3, [r1, #8]
   2451e:	3301      	adds	r3, #1
   24520:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   24522:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   24524:	bd10      	pop	{r4, pc}
   24526:	4603      	mov	r3, r0
	while (buf->frags) {
   24528:	4618      	mov	r0, r3
   2452a:	685b      	ldr	r3, [r3, #4]
   2452c:	2b00      	cmp	r3, #0
   2452e:	d1fb      	bne.n	24528 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   24530:	f7ff ffe6 	bl	24500 <net_buf_frag_insert>
   24534:	4620      	mov	r0, r4
   24536:	e7f5      	b.n	24524 <net_buf_frag_add+0xe>

00024538 <net_buf_simple_add>:
	return buf->data + buf->len;
   24538:	8883      	ldrh	r3, [r0, #4]
   2453a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2453c:	4419      	add	r1, r3
   2453e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   24540:	18d0      	adds	r0, r2, r3
   24542:	4770      	bx	lr

00024544 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   24544:	b430      	push	{r4, r5}
   24546:	8884      	ldrh	r4, [r0, #4]
   24548:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2454a:	18a3      	adds	r3, r4, r2
   2454c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2454e:	1928      	adds	r0, r5, r4
}
   24550:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   24552:	f7fe bc2f 	b.w	22db4 <memcpy>

00024556 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   24556:	b510      	push	{r4, lr}
   24558:	8883      	ldrh	r3, [r0, #4]
   2455a:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   2455c:	1c5c      	adds	r4, r3, #1
   2455e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   24560:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   24562:	18d0      	adds	r0, r2, r3
   24564:	bd10      	pop	{r4, pc}

00024566 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   24566:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   24568:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2456a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2456c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2456e:	4411      	add	r1, r2
	buf->data -= len;
   24570:	6018      	str	r0, [r3, #0]
	buf->len += len;
   24572:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   24574:	4770      	bx	lr

00024576 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   24576:	8882      	ldrh	r2, [r0, #4]
   24578:	1a52      	subs	r2, r2, r1
{
   2457a:	4603      	mov	r3, r0
	buf->len -= len;
   2457c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2457e:	6800      	ldr	r0, [r0, #0]
   24580:	4408      	add	r0, r1
   24582:	6018      	str	r0, [r3, #0]
}
   24584:	4770      	bx	lr

00024586 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   24586:	4603      	mov	r3, r0
	void *data = buf->data;
   24588:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2458a:	889a      	ldrh	r2, [r3, #4]
   2458c:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2458e:	4401      	add	r1, r0
	buf->len -= len;
   24590:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   24592:	6019      	str	r1, [r3, #0]

	return data;
}
   24594:	4770      	bx	lr

00024596 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   24596:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   24598:	6803      	ldr	r3, [r0, #0]
   2459a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2459c:	2102      	movs	r1, #2
   2459e:	f7ff ffea 	bl	24576 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   245a2:	4620      	mov	r0, r4
   245a4:	bd10      	pop	{r4, pc}

000245a6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   245a6:	6802      	ldr	r2, [r0, #0]
   245a8:	6880      	ldr	r0, [r0, #8]
}
   245aa:	1a10      	subs	r0, r2, r0
   245ac:	4770      	bx	lr

000245ae <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   245ae:	8883      	ldrh	r3, [r0, #4]
   245b0:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   245b2:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   245b4:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   245b6:	6803      	ldr	r3, [r0, #0]
   245b8:	1a5b      	subs	r3, r3, r1
}
   245ba:	1ad0      	subs	r0, r2, r3
   245bc:	4770      	bx	lr

000245be <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   245be:	6903      	ldr	r3, [r0, #16]
   245c0:	b2c9      	uxtb	r1, r1
   245c2:	220c      	movs	r2, #12
   245c4:	fb01 3302 	mla	r3, r1, r2, r3
   245c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   245ca:	f000 0007 	and.w	r0, r0, #7
   245ce:	4770      	bx	lr

000245d0 <set_on_state>:
	__asm__ volatile(
   245d0:	f04f 0340 	mov.w	r3, #64	; 0x40
   245d4:	f3ef 8211 	mrs	r2, BASEPRI
   245d8:	f383 8812 	msr	BASEPRI_MAX, r3
   245dc:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   245e0:	6803      	ldr	r3, [r0, #0]
   245e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   245e6:	f043 0302 	orr.w	r3, r3, #2
   245ea:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   245ec:	f382 8811 	msr	BASEPRI, r2
   245f0:	f3bf 8f6f 	isb	sy
}
   245f4:	4770      	bx	lr

000245f6 <stop>:
{
   245f6:	b570      	push	{r4, r5, r6, lr}
   245f8:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   245fa:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   245fc:	f04f 0440 	mov.w	r4, #64	; 0x40
   24600:	f3ef 8511 	mrs	r5, BASEPRI
   24604:	f384 8812 	msr	BASEPRI_MAX, r4
   24608:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2460c:	260c      	movs	r6, #12
   2460e:	fb06 3401 	mla	r4, r6, r1, r3
   24612:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   24614:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   24618:	d008      	beq.n	2462c <stop+0x36>
   2461a:	42a2      	cmp	r2, r4
   2461c:	d006      	beq.n	2462c <stop+0x36>
	__asm__ volatile(
   2461e:	f385 8811 	msr	BASEPRI, r5
   24622:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   24626:	f04f 30ff 	mov.w	r0, #4294967295
}
   2462a:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2462c:	4371      	muls	r1, r6
   2462e:	440b      	add	r3, r1
   24630:	2201      	movs	r2, #1
   24632:	641a      	str	r2, [r3, #64]	; 0x40
   24634:	f385 8811 	msr	BASEPRI, r5
   24638:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   2463c:	6843      	ldr	r3, [r0, #4]
   2463e:	440b      	add	r3, r1
   24640:	685b      	ldr	r3, [r3, #4]
   24642:	4798      	blx	r3
	return 0;
   24644:	2000      	movs	r0, #0
   24646:	e7f0      	b.n	2462a <stop+0x34>

00024648 <api_stop>:
	return stop(dev, subsys, CTX_API);
   24648:	2280      	movs	r2, #128	; 0x80
   2464a:	f7ff bfd4 	b.w	245f6 <stop>

0002464e <async_start>:
{
   2464e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24650:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   24652:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   24654:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   24656:	f04f 0540 	mov.w	r5, #64	; 0x40
   2465a:	f3ef 8611 	mrs	r6, BASEPRI
   2465e:	f385 8812 	msr	BASEPRI_MAX, r5
   24662:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   24666:	250c      	movs	r5, #12
   24668:	4369      	muls	r1, r5
   2466a:	440c      	add	r4, r1
   2466c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2466e:	f005 0c07 	and.w	ip, r5, #7
   24672:	f1bc 0f01 	cmp.w	ip, #1
   24676:	d10b      	bne.n	24690 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   24678:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2467a:	f386 8811 	msr	BASEPRI, r6
   2467e:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   24682:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   24686:	6843      	ldr	r3, [r0, #4]
   24688:	585b      	ldr	r3, [r3, r1]
   2468a:	4798      	blx	r3
	return 0;
   2468c:	2000      	movs	r0, #0
}
   2468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   24690:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   24694:	42af      	cmp	r7, r5
   24696:	f386 8811 	msr	BASEPRI, r6
   2469a:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2469e:	bf0c      	ite	eq
   246a0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   246a4:	f04f 30ff 	movne.w	r0, #4294967295
   246a8:	e7f1      	b.n	2468e <async_start+0x40>

000246aa <api_start>:
{
   246aa:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   246ac:	2480      	movs	r4, #128	; 0x80
   246ae:	9400      	str	r4, [sp, #0]
   246b0:	f7ff ffcd 	bl	2464e <async_start>
}
   246b4:	b002      	add	sp, #8
   246b6:	bd10      	pop	{r4, pc}

000246b8 <onoff_started_callback>:
{
   246b8:	b410      	push	{r4}
	return &data->mgr[type];
   246ba:	6900      	ldr	r0, [r0, #16]
   246bc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   246be:	241c      	movs	r4, #28
   246c0:	fb03 0004 	mla	r0, r3, r4, r0
   246c4:	2100      	movs	r1, #0
}
   246c6:	bc10      	pop	{r4}
	notify(mgr, 0);
   246c8:	4710      	bx	r2

000246ca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   246ca:	2000      	movs	r0, #0
   246cc:	f7f8 b870 	b.w	1c7b0 <nrfx_clock_start>

000246d0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   246d0:	2000      	movs	r0, #0
   246d2:	f000 bc2b 	b.w	24f2c <nrfx_clock_stop>

000246d6 <blocking_start_callback>:
{
   246d6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   246d8:	f7f9 b9f2 	b.w	1dac0 <z_impl_k_sem_give>

000246dc <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   246dc:	6843      	ldr	r3, [r0, #4]
   246de:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   246e0:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   246e4:	600b      	str	r3, [r1, #0]
}
   246e6:	2000      	movs	r0, #0
   246e8:	4770      	bx	lr

000246ea <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   246ea:	6843      	ldr	r3, [r0, #4]
   246ec:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   246ee:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   246f2:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   246f6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   246fa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   246fe:	2000      	movs	r0, #0
   24700:	4770      	bx	lr

00024702 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24702:	6843      	ldr	r3, [r0, #4]
   24704:	685b      	ldr	r3, [r3, #4]
}
   24706:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   24708:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2470c:	4770      	bx	lr

0002470e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2470e:	6843      	ldr	r3, [r0, #4]
   24710:	685b      	ldr	r3, [r3, #4]
}
   24712:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   24714:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   24718:	4770      	bx	lr

0002471a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2471a:	6843      	ldr	r3, [r0, #4]
   2471c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2471e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   24722:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   24726:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   24728:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2472c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   24730:	2000      	movs	r0, #0
   24732:	4770      	bx	lr

00024734 <gpio_nrfx_manage_callback>:
{
   24734:	b510      	push	{r4, lr}
	return port->data;
   24736:	6903      	ldr	r3, [r0, #16]
	return list->head;
   24738:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2473a:	b1f8      	cbz	r0, 2477c <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2473c:	4288      	cmp	r0, r1
   2473e:	d119      	bne.n	24774 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   24740:	689c      	ldr	r4, [r3, #8]
	return node->next;
   24742:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   24744:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   24746:	42a1      	cmp	r1, r4
   24748:	d100      	bne.n	2474c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   2474a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2474c:	2000      	movs	r0, #0
   2474e:	6008      	str	r0, [r1, #0]
	if (set) {
   24750:	b12a      	cbz	r2, 2475e <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   24752:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   24754:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   24756:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24758:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2475a:	b902      	cbnz	r2, 2475e <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   2475c:	6099      	str	r1, [r3, #8]
	return 0;
   2475e:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24760:	e010      	b.n	24784 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24762:	4281      	cmp	r1, r0
   24764:	d106      	bne.n	24774 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   24766:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   24768:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2476a:	6898      	ldr	r0, [r3, #8]
   2476c:	4281      	cmp	r1, r0
   2476e:	d1ed      	bne.n	2474c <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   24770:	609c      	str	r4, [r3, #8]
}
   24772:	e7eb      	b.n	2474c <gpio_nrfx_manage_callback+0x18>
	return node->next;
   24774:	4604      	mov	r4, r0
   24776:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24778:	2800      	cmp	r0, #0
   2477a:	d1f2      	bne.n	24762 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   2477c:	2a00      	cmp	r2, #0
   2477e:	d1e8      	bne.n	24752 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   24780:	f06f 0015 	mvn.w	r0, #21
}
   24784:	bd10      	pop	{r4, pc}

00024786 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   24786:	6902      	ldr	r2, [r0, #16]
{
   24788:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2478a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2478e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   24792:	2000      	movs	r0, #0
   24794:	4770      	bx	lr

00024796 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   24796:	6843      	ldr	r3, [r0, #4]
   24798:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2479a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2479e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   247a2:	4770      	bx	lr

000247a4 <tx_start>:
{
   247a4:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   247a6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   247a8:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   247aa:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   247ae:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   247b2:	2200      	movs	r2, #0
   247b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   247b8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   247bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   247c0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   247c4:	6862      	ldr	r2, [r4, #4]
   247c6:	06d2      	lsls	r2, r2, #27
   247c8:	d511      	bpl.n	247ee <tx_start+0x4a>
	if (data->async) {
   247ca:	6902      	ldr	r2, [r0, #16]
   247cc:	68d2      	ldr	r2, [r2, #12]
   247ce:	b12a      	cbz	r2, 247dc <tx_start+0x38>
		data->async->low_power_mask |= mask;
   247d0:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   247d4:	f041 0101 	orr.w	r1, r1, #1
   247d8:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   247dc:	6842      	ldr	r2, [r0, #4]
   247de:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   247e0:	2108      	movs	r1, #8
   247e2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   247e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   247ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   247ee:	2201      	movs	r2, #1
   247f0:	609a      	str	r2, [r3, #8]
}
   247f2:	bd10      	pop	{r4, pc}

000247f4 <user_callback>:
	if (data->async->user_callback) {
   247f4:	6903      	ldr	r3, [r0, #16]
   247f6:	68da      	ldr	r2, [r3, #12]
   247f8:	6813      	ldr	r3, [r2, #0]
   247fa:	b10b      	cbz	r3, 24800 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   247fc:	6852      	ldr	r2, [r2, #4]
   247fe:	4718      	bx	r3
}
   24800:	4770      	bx	lr

00024802 <notify_uart_rx_rdy>:
{
   24802:	b570      	push	{r4, r5, r6, lr}
   24804:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   24806:	6906      	ldr	r6, [r0, #16]
{
   24808:	4604      	mov	r4, r0
   2480a:	460d      	mov	r5, r1
	struct uart_event evt = {
   2480c:	2214      	movs	r2, #20
   2480e:	2100      	movs	r1, #0
   24810:	a801      	add	r0, sp, #4
   24812:	f7fe fada 	bl	22dca <memset>
   24816:	2302      	movs	r3, #2
   24818:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2481c:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   2481e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   24820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   24822:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   24824:	a901      	add	r1, sp, #4
   24826:	4620      	mov	r0, r4
	struct uart_event evt = {
   24828:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2482c:	f7ff ffe2 	bl	247f4 <user_callback>
}
   24830:	b006      	add	sp, #24
   24832:	bd70      	pop	{r4, r5, r6, pc}

00024834 <rx_buf_release>:
{
   24834:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   24836:	680e      	ldr	r6, [r1, #0]
{
   24838:	b086      	sub	sp, #24
   2483a:	4605      	mov	r5, r0
   2483c:	460c      	mov	r4, r1
	if (*buf) {
   2483e:	b17e      	cbz	r6, 24860 <rx_buf_release+0x2c>
		struct uart_event evt = {
   24840:	2214      	movs	r2, #20
   24842:	2100      	movs	r1, #0
   24844:	a801      	add	r0, sp, #4
   24846:	f7fe fac0 	bl	22dca <memset>
   2484a:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   2484c:	eb0d 0103 	add.w	r1, sp, r3
   24850:	4628      	mov	r0, r5
		struct uart_event evt = {
   24852:	f88d 3004 	strb.w	r3, [sp, #4]
   24856:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   24858:	f7ff ffcc 	bl	247f4 <user_callback>
		*buf = NULL;
   2485c:	2300      	movs	r3, #0
   2485e:	6023      	str	r3, [r4, #0]
}
   24860:	b006      	add	sp, #24
   24862:	bd70      	pop	{r4, r5, r6, pc}

00024864 <notify_rx_disable>:
{
   24864:	b510      	push	{r4, lr}
   24866:	b086      	sub	sp, #24
   24868:	4604      	mov	r4, r0
	struct uart_event evt = {
   2486a:	2214      	movs	r2, #20
   2486c:	2100      	movs	r1, #0
   2486e:	a801      	add	r0, sp, #4
   24870:	f7fe faab 	bl	22dca <memset>
   24874:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   24876:	a901      	add	r1, sp, #4
   24878:	4620      	mov	r0, r4
	struct uart_event evt = {
   2487a:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2487e:	f7ff ffb9 	bl	247f4 <user_callback>
}
   24882:	b006      	add	sp, #24
   24884:	bd10      	pop	{r4, pc}

00024886 <uarte_nrfx_rx_buf_rsp>:
{
   24886:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   24888:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2488a:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2488c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2488e:	f04f 0040 	mov.w	r0, #64	; 0x40
   24892:	f3ef 8611 	mrs	r6, BASEPRI
   24896:	f380 8812 	msr	BASEPRI_MAX, r0
   2489a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2489e:	68ec      	ldr	r4, [r5, #12]
   248a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   248a2:	b198      	cbz	r0, 248cc <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   248a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
   248a6:	b9a0      	cbnz	r0, 248d2 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   248a8:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   248aa:	68ec      	ldr	r4, [r5, #12]
   248ac:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   248ae:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   248b2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   248b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   248ba:	f042 0220 	orr.w	r2, r2, #32
   248be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   248c2:	f386 8811 	msr	BASEPRI, r6
   248c6:	f3bf 8f6f 	isb	sy
}
   248ca:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   248cc:	f06f 000c 	mvn.w	r0, #12
   248d0:	e7f7      	b.n	248c2 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   248d2:	f06f 000f 	mvn.w	r0, #15
   248d6:	e7f4      	b.n	248c2 <uarte_nrfx_rx_buf_rsp+0x3c>

000248d8 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   248d8:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   248da:	68d8      	ldr	r0, [r3, #12]
   248dc:	b120      	cbz	r0, 248e8 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   248de:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   248e0:	68db      	ldr	r3, [r3, #12]
	return 0;
   248e2:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   248e4:	605a      	str	r2, [r3, #4]
	return 0;
   248e6:	4770      	bx	lr
		return -ENOTSUP;
   248e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   248ec:	4770      	bx	lr

000248ee <uarte_nrfx_poll_in>:
{
   248ee:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   248f0:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   248f2:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   248f4:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   248f6:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   248f8:	b960      	cbnz	r0, 24914 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   248fa:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   248fe:	b164      	cbz	r4, 2491a <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   24900:	6992      	ldr	r2, [r2, #24]
   24902:	7812      	ldrb	r2, [r2, #0]
   24904:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24906:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2490a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2490e:	2201      	movs	r2, #1
   24910:	601a      	str	r2, [r3, #0]
}
   24912:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   24914:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24918:	e7fb      	b.n	24912 <uarte_nrfx_poll_in+0x24>
		return -1;
   2491a:	f04f 30ff 	mov.w	r0, #4294967295
   2491e:	e7f8      	b.n	24912 <uarte_nrfx_poll_in+0x24>

00024920 <uarte_nrfx_rx_disable>:
{
   24920:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   24922:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   24924:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   24926:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   24928:	68eb      	ldr	r3, [r5, #12]
   2492a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2492c:	b1ba      	cbz	r2, 2495e <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   2492e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   24930:	b153      	cbz	r3, 24948 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   24932:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   24936:	f023 0320 	bic.w	r3, r3, #32
   2493a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2493e:	2300      	movs	r3, #0
   24940:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   24944:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   24948:	68e8      	ldr	r0, [r5, #12]
   2494a:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   2494c:	f000 ff90 	bl	25870 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   24950:	68eb      	ldr	r3, [r5, #12]
   24952:	2000      	movs	r0, #0
   24954:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24958:	2301      	movs	r3, #1
   2495a:	6063      	str	r3, [r4, #4]
}
   2495c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2495e:	f06f 000d 	mvn.w	r0, #13
   24962:	e7fb      	b.n	2495c <uarte_nrfx_rx_disable+0x3c>

00024964 <setup_tx_cache>:
{
   24964:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   24966:	68c3      	ldr	r3, [r0, #12]
   24968:	68da      	ldr	r2, [r3, #12]
   2496a:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2496c:	1a52      	subs	r2, r2, r1
   2496e:	d00f      	beq.n	24990 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   24970:	2a08      	cmp	r2, #8
   24972:	bf28      	it	cs
   24974:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   24976:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   24978:	68c3      	ldr	r3, [r0, #12]
   2497a:	6999      	ldr	r1, [r3, #24]
   2497c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2497e:	68c3      	ldr	r3, [r0, #12]
   24980:	6898      	ldr	r0, [r3, #8]
   24982:	69d9      	ldr	r1, [r3, #28]
   24984:	4401      	add	r1, r0
   24986:	6998      	ldr	r0, [r3, #24]
   24988:	f7fe fa14 	bl	22db4 <memcpy>
	return true;
   2498c:	2001      	movs	r0, #1
}
   2498e:	bd08      	pop	{r3, pc}
		return false;
   24990:	4610      	mov	r0, r2
   24992:	e7fc      	b.n	2498e <setup_tx_cache+0x2a>

00024994 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   24994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   24996:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   24998:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   2499a:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2499e:	460c      	mov	r4, r1
   249a0:	b1e9      	cbz	r1, 249de <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   249a2:	2100      	movs	r1, #0
   249a4:	4620      	mov	r0, r4
   249a6:	f7fe fa10 	bl	22dca <memset>
		flush_len = len;
   249aa:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   249ac:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   249b0:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   249b2:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   249b6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   249b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   249bc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   249c0:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   249c2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   249c6:	2900      	cmp	r1, #0
   249c8:	d0fb      	beq.n	249c2 <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   249ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   249ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   249d2:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   249d6:	b92c      	cbnz	r4, 249e4 <rx_flush.isra.0+0x50>
			return rx_amount;
   249d8:	b2c0      	uxtb	r0, r0
}
   249da:	b003      	add	sp, #12
   249dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   249de:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   249e0:	466b      	mov	r3, sp
   249e2:	e7e3      	b.n	249ac <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   249e4:	4286      	cmp	r6, r0
   249e6:	d1f7      	bne.n	249d8 <rx_flush.isra.0+0x44>
   249e8:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   249ea:	42a2      	cmp	r2, r4
   249ec:	d101      	bne.n	249f2 <rx_flush.isra.0+0x5e>
	return 0;
   249ee:	2000      	movs	r0, #0
   249f0:	e7f3      	b.n	249da <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   249f2:	f814 3b01 	ldrb.w	r3, [r4], #1
   249f6:	2b00      	cmp	r3, #0
   249f8:	d0f7      	beq.n	249ea <rx_flush.isra.0+0x56>
   249fa:	e7ed      	b.n	249d8 <rx_flush.isra.0+0x44>

000249fc <async_uart_release>:
{
   249fc:	b570      	push	{r4, r5, r6, lr}
   249fe:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   24a00:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   24a02:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a06:	f3ef 8611 	mrs	r6, BASEPRI
   24a0a:	f383 8812 	msr	BASEPRI_MAX, r3
   24a0e:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   24a12:	68d0      	ldr	r0, [r2, #12]
   24a14:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   24a18:	ea23 0301 	bic.w	r3, r3, r1
   24a1c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   24a20:	68d5      	ldr	r5, [r2, #12]
   24a22:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   24a26:	b973      	cbnz	r3, 24a46 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   24a28:	2902      	cmp	r1, #2
   24a2a:	d107      	bne.n	24a3c <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   24a2c:	6860      	ldr	r0, [r4, #4]
   24a2e:	2205      	movs	r2, #5
   24a30:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   24a34:	f7ff ffae 	bl	24994 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   24a38:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   24a3c:	6863      	ldr	r3, [r4, #4]
   24a3e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24a40:	2200      	movs	r2, #0
   24a42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   24a46:	f386 8811 	msr	BASEPRI, r6
   24a4a:	f3bf 8f6f 	isb	sy
}
   24a4e:	bd70      	pop	{r4, r5, r6, pc}

00024a50 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   24a50:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   24a52:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24a54:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   24a58:	b940      	cbnz	r0, 24a6c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   24a5a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   24a5c:	079b      	lsls	r3, r3, #30
   24a5e:	d406      	bmi.n	24a6e <is_tx_ready.isra.0+0x1e>
   24a60:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   24a64:	3800      	subs	r0, #0
   24a66:	bf18      	it	ne
   24a68:	2001      	movne	r0, #1
   24a6a:	4770      	bx	lr
   24a6c:	2001      	movs	r0, #1
}
   24a6e:	4770      	bx	lr

00024a70 <start_tx_locked>:
{
   24a70:	b510      	push	{r4, lr}
   24a72:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   24a74:	6840      	ldr	r0, [r0, #4]
   24a76:	f7ff ffeb 	bl	24a50 <is_tx_ready.isra.0>
   24a7a:	68cb      	ldr	r3, [r1, #12]
   24a7c:	b918      	cbnz	r0, 24a86 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   24a7e:	2201      	movs	r2, #1
   24a80:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   24a84:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   24a86:	2200      	movs	r2, #0
   24a88:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   24a8c:	68cb      	ldr	r3, [r1, #12]
   24a8e:	f04f 32ff 	mov.w	r2, #4294967295
   24a92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   24a96:	68cb      	ldr	r3, [r1, #12]
   24a98:	4620      	mov	r0, r4
   24a9a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   24a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   24aa2:	f7ff be7f 	b.w	247a4 <tx_start>

00024aa6 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   24aa6:	b510      	push	{r4, lr}
   24aa8:	2200      	movs	r2, #0
   24aaa:	4604      	mov	r4, r0
   24aac:	2101      	movs	r1, #1
   24aae:	2028      	movs	r0, #40	; 0x28
   24ab0:	f7ef f902 	bl	13cb8 <z_arm_irq_priority_set>
   24ab4:	2028      	movs	r0, #40	; 0x28
   24ab6:	f7ef f8cf 	bl	13c58 <arch_irq_enable>
   24aba:	4620      	mov	r0, r4
   24abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24ac0:	f7f5 bd0c 	b.w	1a4dc <uarte_instance_init.constprop.0>

00024ac4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   24ac4:	b510      	push	{r4, lr}
   24ac6:	2200      	movs	r2, #0
   24ac8:	4604      	mov	r4, r0
   24aca:	2101      	movs	r1, #1
   24acc:	2002      	movs	r0, #2
   24ace:	f7ef f8f3 	bl	13cb8 <z_arm_irq_priority_set>
   24ad2:	2002      	movs	r0, #2
   24ad4:	f7ef f8c0 	bl	13c58 <arch_irq_enable>
   24ad8:	4620      	mov	r0, r4
   24ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24ade:	f7f5 bcfd 	b.w	1a4dc <uarte_instance_init.constprop.0>

00024ae2 <uarte_nrfx_rx_enable>:
{
   24ae2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   24ae6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   24aea:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   24aec:	f8da 9000 	ldr.w	r9, [sl]
{
   24af0:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   24af2:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   24af6:	4605      	mov	r5, r0
   24af8:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   24afa:	2a00      	cmp	r2, #0
   24afc:	d176      	bne.n	24bec <uarte_nrfx_rx_enable+0x10a>
	if (data->async->rx_enabled) {
   24afe:	68e2      	ldr	r2, [r4, #12]
   24b00:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   24b04:	2900      	cmp	r1, #0
   24b06:	d174      	bne.n	24bf2 <uarte_nrfx_rx_enable+0x110>
	data->async->rx_timeout = timeout;
   24b08:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   24b0a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   24b0e:	bfc4      	itt	gt
   24b10:	2205      	movgt	r2, #5
   24b12:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   24b16:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   24b18:	bfd8      	it	le
   24b1a:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   24b1c:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   24b1e:	68e3      	ldr	r3, [r4, #12]
   24b20:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   24b24:	68e3      	ldr	r3, [r4, #12]
   24b26:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   24b28:	68e2      	ldr	r2, [r4, #12]
   24b2a:	2300      	movs	r3, #0
   24b2c:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   24b2e:	68e2      	ldr	r2, [r4, #12]
   24b30:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   24b32:	68e2      	ldr	r2, [r4, #12]
   24b34:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24b36:	f8da 3004 	ldr.w	r3, [sl, #4]
   24b3a:	06da      	lsls	r2, r3, #27
   24b3c:	d523      	bpl.n	24b86 <uarte_nrfx_rx_enable+0xa4>
		if (data->async->rx_flush_cnt) {
   24b3e:	68e1      	ldr	r1, [r4, #12]
   24b40:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   24b44:	b1fe      	cbz	r6, 24b86 <uarte_nrfx_rx_enable+0xa4>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   24b46:	42be      	cmp	r6, r7
   24b48:	bf28      	it	cs
   24b4a:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   24b4c:	4640      	mov	r0, r8
   24b4e:	4632      	mov	r2, r6
   24b50:	31c4      	adds	r1, #196	; 0xc4
   24b52:	f7fe f92f 	bl	22db4 <memcpy>
			if (!len) {
   24b56:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   24b58:	44b0      	add	r8, r6
			if (!len) {
   24b5a:	d114      	bne.n	24b86 <uarte_nrfx_rx_enable+0xa4>
				data->async->rx_flush_cnt -= cpy_len;
   24b5c:	68e2      	ldr	r2, [r4, #12]
   24b5e:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   24b62:	1b9b      	subs	r3, r3, r6
   24b64:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   24b68:	4631      	mov	r1, r6
   24b6a:	4628      	mov	r0, r5
   24b6c:	f7ff fe49 	bl	24802 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   24b70:	68e1      	ldr	r1, [r4, #12]
   24b72:	4628      	mov	r0, r5
   24b74:	3158      	adds	r1, #88	; 0x58
   24b76:	f7ff fe5d 	bl	24834 <rx_buf_release>
				notify_rx_disable(dev);
   24b7a:	4628      	mov	r0, r5
   24b7c:	f7ff fe72 	bl	24864 <notify_rx_disable>
				return 0;
   24b80:	2000      	movs	r0, #0
}
   24b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24b86:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24b88:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24b8c:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24b90:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   24b94:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   24b98:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   24b9c:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   24ba0:	68e3      	ldr	r3, [r4, #12]
   24ba2:	2201      	movs	r2, #1
   24ba4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24ba8:	f8da 3004 	ldr.w	r3, [sl, #4]
   24bac:	06db      	lsls	r3, r3, #27
   24bae:	d519      	bpl.n	24be4 <uarte_nrfx_rx_enable+0x102>
	__asm__ volatile(
   24bb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24bb4:	f3ef 8111 	mrs	r1, BASEPRI
   24bb8:	f383 8812 	msr	BASEPRI_MAX, r3
   24bbc:	f3bf 8f6f 	isb	sy
	if (data->async) {
   24bc0:	692b      	ldr	r3, [r5, #16]
   24bc2:	68db      	ldr	r3, [r3, #12]
   24bc4:	b12b      	cbz	r3, 24bd2 <uarte_nrfx_rx_enable+0xf0>
		data->async->low_power_mask |= mask;
   24bc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   24bca:	f042 0202 	orr.w	r2, r2, #2
   24bce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   24bd2:	686b      	ldr	r3, [r5, #4]
   24bd4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24bd6:	2208      	movs	r2, #8
   24bd8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   24bdc:	f381 8811 	msr	BASEPRI, r1
   24be0:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24be4:	2301      	movs	r3, #1
   24be6:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   24bea:	e7c9      	b.n	24b80 <uarte_nrfx_rx_enable+0x9e>
		return -ENOTSUP;
   24bec:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24bf0:	e7c7      	b.n	24b82 <uarte_nrfx_rx_enable+0xa0>
		return -EBUSY;
   24bf2:	f06f 000f 	mvn.w	r0, #15
   24bf6:	e7c4      	b.n	24b82 <uarte_nrfx_rx_enable+0xa0>

00024bf8 <rx_timeout>:
{
   24bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   24bfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   24bfc:	68e3      	ldr	r3, [r4, #12]
   24bfe:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   24c02:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   24c06:	bb13      	cbnz	r3, 24c4e <rx_timeout+0x56>
	const struct device *dev = data->dev;
   24c08:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   24c0a:	6873      	ldr	r3, [r6, #4]
   24c0c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   24c0e:	2210      	movs	r2, #16
   24c10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   24c14:	68e3      	ldr	r3, [r4, #12]
   24c16:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   24c1a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   24c1c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   24c1e:	bf1f      	itttt	ne
   24c20:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   24c22:	68e3      	ldrne	r3, [r4, #12]
   24c24:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   24c26:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   24c28:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   24c2a:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   24c2e:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   24c30:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   24c32:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   24c34:	da0c      	bge.n	24c50 <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   24c36:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   24c3a:	68e3      	ldr	r3, [r4, #12]
   24c3c:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   24c40:	4281      	cmp	r1, r0
   24c42:	d80b      	bhi.n	24c5c <rx_timeout+0x64>
	return config->uarte_regs;
   24c44:	6873      	ldr	r3, [r6, #4]
   24c46:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   24c48:	2210      	movs	r2, #16
   24c4a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   24c50:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   24c54:	eb02 0c01 	add.w	ip, r2, r1
   24c58:	4584      	cmp	ip, r0
   24c5a:	d904      	bls.n	24c66 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   24c5c:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   24c5e:	2d00      	cmp	r5, #0
   24c60:	ddf0      	ble.n	24c44 <rx_timeout+0x4c>
		clipped = true;
   24c62:	2701      	movs	r7, #1
   24c64:	e005      	b.n	24c72 <rx_timeout+0x7a>
	if (len > 0) {
   24c66:	2a00      	cmp	r2, #0
   24c68:	d0ec      	beq.n	24c44 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   24c6a:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   24c6e:	428a      	cmp	r2, r1
   24c70:	da12      	bge.n	24c98 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   24c72:	4629      	mov	r1, r5
   24c74:	4630      	mov	r0, r6
   24c76:	f7ff fdc4 	bl	24802 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   24c7a:	68e2      	ldr	r2, [r4, #12]
   24c7c:	6e13      	ldr	r3, [r2, #96]	; 0x60
   24c7e:	442b      	add	r3, r5
   24c80:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   24c82:	68e2      	ldr	r2, [r4, #12]
   24c84:	6f13      	ldr	r3, [r2, #112]	; 0x70
   24c86:	442b      	add	r3, r5
   24c88:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   24c8a:	2f00      	cmp	r7, #0
   24c8c:	d0da      	beq.n	24c44 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   24c8e:	68e0      	ldr	r0, [r4, #12]
   24c90:	3080      	adds	r0, #128	; 0x80
   24c92:	f000 fded 	bl	25870 <z_impl_k_timer_stop>
}
   24c96:	e7d5      	b.n	24c44 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   24c98:	1a52      	subs	r2, r2, r1
   24c9a:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   24c9c:	e7d2      	b.n	24c44 <rx_timeout+0x4c>

00024c9e <uarte_nrfx_tx_abort>:
{
   24c9e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   24ca0:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   24ca2:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   24ca4:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   24ca6:	68da      	ldr	r2, [r3, #12]
   24ca8:	6891      	ldr	r1, [r2, #8]
   24caa:	b151      	cbz	r1, 24cc2 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   24cac:	2400      	movs	r4, #0
   24cae:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   24cb2:	68d8      	ldr	r0, [r3, #12]
   24cb4:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   24cb6:	f000 fddb 	bl	25870 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24cba:	2301      	movs	r3, #1
   24cbc:	60eb      	str	r3, [r5, #12]
	return 0;
   24cbe:	4620      	mov	r0, r4
}
   24cc0:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   24cc2:	f06f 000d 	mvn.w	r0, #13
   24cc6:	e7fb      	b.n	24cc0 <uarte_nrfx_tx_abort+0x22>

00024cc8 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   24cc8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24cca:	6818      	ldr	r0, [r3, #0]
   24ccc:	f7ff bfe7 	b.w	24c9e <uarte_nrfx_tx_abort>

00024cd0 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   24cd0:	2000      	movs	r0, #0
   24cd2:	4770      	bx	lr

00024cd4 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   24cd4:	b538      	push	{r3, r4, r5, lr}
   24cd6:	460c      	mov	r4, r1
   24cd8:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   24cda:	f7f1 fa61 	bl	161a0 <bt_is_ready>
   24cde:	b128      	cbz	r0, 24cec <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   24ce0:	4629      	mov	r1, r5
   24ce2:	4620      	mov	r0, r4
}
   24ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   24ce8:	f7f0 bbb8 	b.w	1545c <bt_hci_le_rand>
}
   24cec:	f06f 000a 	mvn.w	r0, #10
   24cf0:	bd38      	pop	{r3, r4, r5, pc}

00024cf2 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   24cf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24cf4:	460f      	mov	r7, r1
   24cf6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(buffer != NULL);
	int err = EINVAL;

	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   24cf8:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   24cfc:	2400      	movs	r4, #0
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   24cfe:	42a6      	cmp	r6, r4
   24d00:	d803      	bhi.n	24d0a <entropy_cc3xx_rng_get_entropy+0x18>
		}

		offset += chunk_size;
	}

	if (offset == length) {
   24d02:	d016      	beq.n	24d32 <entropy_cc3xx_rng_get_entropy+0x40>
	int err = EINVAL;
   24d04:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   24d06:	b003      	add	sp, #12
   24d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   24d0a:	1b33      	subs	r3, r6, r4
   24d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24d10:	bf38      	it	cc
   24d12:	461d      	movcc	r5, r3
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   24d14:	462a      	mov	r2, r5
   24d16:	ab01      	add	r3, sp, #4
   24d18:	1939      	adds	r1, r7, r4
   24d1a:	2000      	movs	r0, #0
   24d1c:	f7fa faee 	bl	1f2fc <nrf_cc3xx_platform_ctr_drbg_get>
		if (ret != 0) {
   24d20:	b920      	cbnz	r0, 24d2c <entropy_cc3xx_rng_get_entropy+0x3a>
		if (olen != chunk_size) {
   24d22:	9b01      	ldr	r3, [sp, #4]
   24d24:	42ab      	cmp	r3, r5
   24d26:	d101      	bne.n	24d2c <entropy_cc3xx_rng_get_entropy+0x3a>
		offset += chunk_size;
   24d28:	442c      	add	r4, r5
   24d2a:	e7e8      	b.n	24cfe <entropy_cc3xx_rng_get_entropy+0xc>
			return -EINVAL;
   24d2c:	f06f 0015 	mvn.w	r0, #21
   24d30:	e7e9      	b.n	24d06 <entropy_cc3xx_rng_get_entropy+0x14>
		err = 0;
   24d32:	2000      	movs	r0, #0
   24d34:	e7e7      	b.n	24d06 <entropy_cc3xx_rng_get_entropy+0x14>

00024d36 <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   24d36:	2200      	movs	r2, #0
{
   24d38:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   24d3a:	4611      	mov	r1, r2
   24d3c:	4610      	mov	r0, r2
   24d3e:	f7fa faab 	bl	1f298 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   24d42:	2800      	cmp	r0, #0
	}

	return 0;
}
   24d44:	bf18      	it	ne
   24d46:	f06f 0015 	mvnne.w	r0, #21
   24d4a:	bd08      	pop	{r3, pc}

00024d4c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   24d4c:	4770      	bx	lr

00024d4e <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   24d4e:	f100 0350 	add.w	r3, r0, #80	; 0x50
   24d52:	009b      	lsls	r3, r3, #2
   24d54:	b29b      	uxth	r3, r3
   24d56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24d5a:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   24d5e:	2200      	movs	r2, #0
   24d60:	601a      	str	r2, [r3, #0]
   24d62:	681b      	ldr	r3, [r3, #0]
}
   24d64:	4770      	bx	lr

00024d66 <sys_clock_cycle_get_32>:
{
   24d66:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   24d68:	f7f6 f86c 	bl	1ae44 <z_nrf_rtc_timer_read>
}
   24d6c:	bd08      	pop	{r3, pc}

00024d6e <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   24d6e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   24d70:	6843      	ldr	r3, [r0, #4]
   24d72:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   24d74:	7a05      	ldrb	r5, [r0, #8]
   24d76:	6844      	ldr	r4, [r0, #4]
   24d78:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   24d7c:	42a3      	cmp	r3, r4
   24d7e:	d302      	bcc.n	24d86 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   24d80:	f06f 0001 	mvn.w	r0, #1
}
   24d84:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   24d86:	795c      	ldrb	r4, [r3, #5]
   24d88:	428c      	cmp	r4, r1
   24d8a:	d001      	beq.n	24d90 <pinctrl_lookup_state+0x22>
		(*state)++;
   24d8c:	3308      	adds	r3, #8
   24d8e:	e7f0      	b.n	24d72 <pinctrl_lookup_state+0x4>
			return 0;
   24d90:	2000      	movs	r0, #0
   24d92:	e7f7      	b.n	24d84 <pinctrl_lookup_state+0x16>

00024d94 <gpio_pin_configure_dt>:
{
   24d94:	b470      	push	{r4, r5, r6}
   24d96:	4603      	mov	r3, r0
   24d98:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
   24d9a:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   24d9c:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   24d9e:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
   24da0:	4322      	orrs	r2, r4
	struct gpio_driver_data *data =
   24da2:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
   24da4:	6886      	ldr	r6, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   24da6:	682b      	ldr	r3, [r5, #0]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   24da8:	2401      	movs	r4, #1
   24daa:	408c      	lsls	r4, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   24dac:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   24db0:	bf14      	ite	ne
   24db2:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   24db4:	43a3      	biceq	r3, r4
   24db6:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
   24db8:	6833      	ldr	r3, [r6, #0]
}
   24dba:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
   24dbc:	4718      	bx	r3

00024dbe <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   24dbe:	2301      	movs	r3, #1
   24dc0:	fa03 f101 	lsl.w	r1, r3, r1
   24dc4:	6903      	ldr	r3, [r0, #16]
   24dc6:	681b      	ldr	r3, [r3, #0]
   24dc8:	4219      	tst	r1, r3
   24dca:	d003      	beq.n	24dd4 <gpio_pin_set+0x16>
	if (value != 0)	{
   24dcc:	b122      	cbz	r2, 24dd8 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   24dce:	6883      	ldr	r3, [r0, #8]
   24dd0:	691b      	ldr	r3, [r3, #16]
   24dd2:	e003      	b.n	24ddc <gpio_pin_set+0x1e>
	if (value != 0)	{
   24dd4:	2a00      	cmp	r2, #0
   24dd6:	d0fa      	beq.n	24dce <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   24dd8:	6883      	ldr	r3, [r0, #8]
   24dda:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   24ddc:	4718      	bx	r3

00024dde <z_log_msg_static_create.constprop.0>:
   24dde:	2300      	movs	r3, #0
   24de0:	f7ee b8ec 	b.w	12fbc <z_impl_z_log_msg_static_create>

00024de4 <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   24de4:	2101      	movs	r1, #1
   24de6:	f7f6 bc99 	b.w	1b71c <dk_set_led>

00024dea <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   24dea:	2100      	movs	r1, #0
   24dec:	f7f6 bc96 	b.w	1b71c <dk_set_led>

00024df0 <hci_driver_close>:
{
   24df0:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   24df2:	f7f7 fc0d 	bl	1c610 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   24df6:	f04f 30ff 	mov.w	r0, #4294967295
   24dfa:	f04f 31ff 	mov.w	r1, #4294967295
   24dfe:	f7f6 fcbf 	bl	1b780 <multithreading_lock_acquire>
	if (err) {
   24e02:	4604      	mov	r4, r0
   24e04:	b920      	cbnz	r0, 24e10 <hci_driver_close+0x20>
	err = sdc_disable();
   24e06:	f7dc f977 	bl	10f8 <sdc_disable>
	if (err) {
   24e0a:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   24e0c:	f7f6 fcc0 	bl	1b790 <multithreading_lock_release>
}
   24e10:	4620      	mov	r0, r4
   24e12:	bd10      	pop	{r4, pc}

00024e14 <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   24e14:	f7f6 bcfc 	b.w	1b810 <rand_prio_low_vector_get>

00024e18 <hci_driver_send>:
{
   24e18:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   24e1a:	8a03      	ldrh	r3, [r0, #16]
{
   24e1c:	4605      	mov	r5, r0
	if (!buf->len) {
   24e1e:	b373      	cbz	r3, 24e7e <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   24e20:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   24e22:	b1a3      	cbz	r3, 24e4e <hci_driver_send+0x36>
   24e24:	2b02      	cmp	r3, #2
   24e26:	d12a      	bne.n	24e7e <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24e28:	f04f 30ff 	mov.w	r0, #4294967295
   24e2c:	f04f 31ff 	mov.w	r1, #4294967295
   24e30:	f7f6 fca6 	bl	1b780 <multithreading_lock_acquire>
	if (!errcode) {
   24e34:	4604      	mov	r4, r0
   24e36:	b940      	cbnz	r0, 24e4a <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   24e38:	68e8      	ldr	r0, [r5, #12]
   24e3a:	f7e8 f856 	bl	ceea <sdc_hci_data_put>
   24e3e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24e40:	f7f6 fca6 	bl	1b790 <multithreading_lock_release>
		if (errcode) {
   24e44:	b1b4      	cbz	r4, 24e74 <hci_driver_send+0x5c>
			receive_signal_raise();
   24e46:	f7f6 fcf7 	bl	1b838 <receive_signal_raise>
}
   24e4a:	4620      	mov	r0, r4
   24e4c:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24e4e:	f04f 30ff 	mov.w	r0, #4294967295
   24e52:	f04f 31ff 	mov.w	r1, #4294967295
   24e56:	f7f6 fc93 	bl	1b780 <multithreading_lock_acquire>
	if (!errcode) {
   24e5a:	4604      	mov	r4, r0
   24e5c:	2800      	cmp	r0, #0
   24e5e:	d1f4      	bne.n	24e4a <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   24e60:	68e8      	ldr	r0, [r5, #12]
   24e62:	f7f6 fe6d 	bl	1bb40 <hci_internal_cmd_put>
   24e66:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24e68:	f7f6 fc92 	bl	1b790 <multithreading_lock_release>
	if (errcode) {
   24e6c:	2c00      	cmp	r4, #0
   24e6e:	d1ec      	bne.n	24e4a <hci_driver_send+0x32>
	receive_signal_raise();
   24e70:	f7f6 fce2 	bl	1b838 <receive_signal_raise>
		net_buf_unref(buf);
   24e74:	4628      	mov	r0, r5
   24e76:	f7f4 ff07 	bl	19c88 <net_buf_unref>
   24e7a:	2400      	movs	r4, #0
   24e7c:	e7e5      	b.n	24e4a <hci_driver_send+0x32>
	switch (type) {
   24e7e:	f06f 0415 	mvn.w	r4, #21
   24e82:	e7e2      	b.n	24e4a <hci_driver_send+0x32>

00024e84 <receive_work_handler>:
	hci_driver_receive_process();
   24e84:	f7f6 bde0 	b.w	1ba48 <hci_driver_receive_process>

00024e88 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   24e88:	f101 0320 	add.w	r3, r1, #32
   24e8c:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24e8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   24e92:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   24e96:	428b      	cmp	r3, r1
   24e98:	d1f9      	bne.n	24e8e <sys_memcpy_swap.constprop.0+0x6>
}
   24e9a:	4770      	bx	lr

00024e9c <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   24e9c:	2100      	movs	r1, #0
   24e9e:	f7f7 bbd9 	b.w	1c654 <cmd_le_generate_dhkey>

00024ea2 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   24ea2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   24ea6:	2901      	cmp	r1, #1
   24ea8:	d801      	bhi.n	24eae <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   24eaa:	f7f7 bbd3 	b.w	1c654 <cmd_le_generate_dhkey>
}
   24eae:	2012      	movs	r0, #18
   24eb0:	4770      	bx	lr

00024eb2 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24eb2:	4668      	mov	r0, sp
   24eb4:	f020 0107 	bic.w	r1, r0, #7
   24eb8:	468d      	mov	sp, r1
   24eba:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   24ebc:	f7e6 fa20 	bl	b300 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   24ec0:	f7ee ff14 	bl	13cec <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   24ec4:	f7ee fffc 	bl	13ec0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24ec8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24ecc:	4685      	mov	sp, r0
   24ece:	4770      	bx	lr

00024ed0 <mpsl_low_prio_work_handler>:
{
   24ed0:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   24ed2:	f04f 31ff 	mov.w	r1, #4294967295
   24ed6:	f04f 30ff 	mov.w	r0, #4294967295
   24eda:	f7f6 fc51 	bl	1b780 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   24ede:	f7eb fdd1 	bl	10a84 <mpsl_low_priority_process>
}
   24ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   24ee6:	f7f6 bc53 	b.w	1b790 <multithreading_lock_release>

00024eea <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24eea:	4668      	mov	r0, sp
   24eec:	f020 0107 	bic.w	r1, r0, #7
   24ef0:	468d      	mov	sp, r1
   24ef2:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   24ef4:	f7e6 f97a 	bl	b1ec <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   24ef8:	f7ee fef8 	bl	13cec <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   24efc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24f00:	4685      	mov	sp, r0
   24f02:	4770      	bx	lr

00024f04 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24f04:	4668      	mov	r0, sp
   24f06:	f020 0107 	bic.w	r1, r0, #7
   24f0a:	468d      	mov	sp, r1
   24f0c:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   24f0e:	f7e3 fed1 	bl	8cb4 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   24f12:	f7ee feeb 	bl	13cec <_arch_isr_direct_pm>
   24f16:	f7ee ffd3 	bl	13ec0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   24f1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24f1e:	4685      	mov	sp, r0
   24f20:	4770      	bx	lr

00024f22 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   24f22:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   24f24:	f7eb ff75 	bl	10e12 <mpsl_fem_init>

	return 0;
}
   24f28:	2000      	movs	r0, #0
   24f2a:	bd08      	pop	{r3, pc}

00024f2c <nrfx_clock_stop>:
	switch (domain) {
   24f2c:	2801      	cmp	r0, #1
   24f2e:	d101      	bne.n	24f34 <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   24f30:	f7e7 b860 	b.w	bff4 <mpsl_clock_hfclk_release>
}
   24f34:	4770      	bx	lr

00024f36 <nrfx_clock_enable>:
}
   24f36:	4770      	bx	lr

00024f38 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   24f38:	f7e6 be66 	b.w	bc08 <MPSL_IRQ_CLOCK_Handler>

00024f3c <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   24f3c:	f7fa b956 	b.w	1f1ec <nrf_cc3xx_platform_init>

00024f40 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   24f40:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   24f42:	f7ee fd17 	bl	13974 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   24f46:	f7ee fdeb 	bl	13b20 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   24f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   24f4e:	f7fa b94d 	b.w	1f1ec <nrf_cc3xx_platform_init>

00024f52 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   24f52:	4700      	bx	r0

00024f54 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   24f54:	f000 bc5a 	b.w	2580c <z_impl_k_busy_wait>

00024f58 <nrf_gpio_reconfigure>:
{
   24f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f5a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24f5c:	a801      	add	r0, sp, #4
{
   24f5e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   24f62:	4616      	mov	r6, r2
   24f64:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24f66:	f7f7 fd79 	bl	1ca5c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24f6a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24f6c:	f1b6 0c00 	subs.w	ip, r6, #0
   24f70:	bf18      	it	ne
   24f72:	f04f 0c01 	movne.w	ip, #1
   24f76:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24f7a:	1e0b      	subs	r3, r1, #0
   24f7c:	bf18      	it	ne
   24f7e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24f80:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24f82:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24f86:	bf14      	ite	ne
   24f88:	f04f 0c0c 	movne.w	ip, #12
   24f8c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24f90:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24f92:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24f96:	bf14      	ite	ne
   24f98:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   24f9c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   24fa0:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24fa2:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24fa6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   24faa:	bf14      	ite	ne
   24fac:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   24fb0:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24fb4:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   24fb8:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24fbc:	b101      	cbz	r1, 24fc0 <nrf_gpio_reconfigure+0x68>
   24fbe:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24fc0:	b10e      	cbz	r6, 24fc6 <nrf_gpio_reconfigure+0x6e>
   24fc2:	7836      	ldrb	r6, [r6, #0]
   24fc4:	0076      	lsls	r6, r6, #1
   24fc6:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24fc8:	b10d      	cbz	r5, 24fce <nrf_gpio_reconfigure+0x76>
   24fca:	782d      	ldrb	r5, [r5, #0]
   24fcc:	00ad      	lsls	r5, r5, #2
   24fce:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24fd0:	b10c      	cbz	r4, 24fd6 <nrf_gpio_reconfigure+0x7e>
   24fd2:	7824      	ldrb	r4, [r4, #0]
   24fd4:	0224      	lsls	r4, r4, #8
   24fd6:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   24fd8:	b10f      	cbz	r7, 24fde <nrf_gpio_reconfigure+0x86>
   24fda:	783f      	ldrb	r7, [r7, #0]
   24fdc:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   24fde:	430c      	orrs	r4, r1
   24fe0:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   24fe2:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   24fe6:	b003      	add	sp, #12
   24fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024fea <nrf_gpio_cfg_sense_set>:
{
   24fea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   24fec:	f10d 030f 	add.w	r3, sp, #15
   24ff0:	9301      	str	r3, [sp, #4]
   24ff2:	2300      	movs	r3, #0
{
   24ff4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   24ff8:	9300      	str	r3, [sp, #0]
   24ffa:	461a      	mov	r2, r3
   24ffc:	4619      	mov	r1, r3
   24ffe:	f7ff ffab 	bl	24f58 <nrf_gpio_reconfigure>
}
   25002:	b005      	add	sp, #20
   25004:	f85d fb04 	ldr.w	pc, [sp], #4

00025008 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   25008:	f7f8 b896 	b.w	1d138 <_DoInit>

0002500c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2500c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2500e:	f7ff fffb 	bl	25008 <SEGGER_RTT_Init>

	return 0;
}
   25012:	2000      	movs	r0, #0
   25014:	bd08      	pop	{r3, pc}

00025016 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   25016:	4770      	bx	lr

00025018 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   25018:	b140      	cbz	r0, 2502c <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2501a:	68c3      	ldr	r3, [r0, #12]
   2501c:	7858      	ldrb	r0, [r3, #1]
   2501e:	f010 0001 	ands.w	r0, r0, #1
   25022:	bf1e      	ittt	ne
   25024:	7818      	ldrbne	r0, [r3, #0]
   25026:	fab0 f080 	clzne	r0, r0
   2502a:	0940      	lsrne	r0, r0, #5
}
   2502c:	4770      	bx	lr

0002502e <z_early_memset>:
	(void) memset(dst, c, n);
   2502e:	f7fd becc 	b.w	22dca <memset>

00025032 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   25032:	f7fd bebf 	b.w	22db4 <memcpy>

00025036 <k_heap_init>:
{
   25036:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   25038:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2503c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   25040:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   25042:	f7fc bfd2 	b.w	21fea <sys_heap_init>

00025046 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   25046:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2504a:	b085      	sub	sp, #20
   2504c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   25050:	4607      	mov	r7, r0
   25052:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25054:	4650      	mov	r0, sl
   25056:	4621      	mov	r1, r4
{
   25058:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2505a:	f000 fbdb 	bl	25814 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2505e:	f1b4 3fff 	cmp.w	r4, #4294967295
   25062:	bf08      	it	eq
   25064:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   25068:	4605      	mov	r5, r0
   2506a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2506c:	bf04      	itt	eq
   2506e:	f04f 35ff 	moveq.w	r5, #4294967295
   25072:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   25076:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   2507a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2507e:	f3ef 8411 	mrs	r4, BASEPRI
   25082:	f383 8812 	msr	BASEPRI_MAX, r3
   25086:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2508a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2508e:	464a      	mov	r2, r9
   25090:	4641      	mov	r1, r8
   25092:	4638      	mov	r0, r7
   25094:	f7fc ff42 	bl	21f1c <sys_heap_aligned_alloc>
   25098:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2509a:	f7f9 fbc9 	bl	1e830 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2509e:	9b03      	ldr	r3, [sp, #12]
   250a0:	b13b      	cbz	r3, 250b2 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   250a2:	f384 8811 	msr	BASEPRI, r4
   250a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   250aa:	4618      	mov	r0, r3
   250ac:	b005      	add	sp, #20
   250ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   250b2:	1a28      	subs	r0, r5, r0
   250b4:	eb66 0101 	sbc.w	r1, r6, r1
   250b8:	2801      	cmp	r0, #1
   250ba:	f171 0200 	sbcs.w	r2, r1, #0
   250be:	dbf0      	blt.n	250a2 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   250c0:	e9cd 0100 	strd	r0, r1, [sp]
   250c4:	465a      	mov	r2, fp
   250c6:	4621      	mov	r1, r4
   250c8:	4650      	mov	r0, sl
   250ca:	f7f9 f85b 	bl	1e184 <z_pend_curr>
	__asm__ volatile(
   250ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   250d2:	f3ef 8411 	mrs	r4, BASEPRI
   250d6:	f383 8812 	msr	BASEPRI_MAX, r3
   250da:	f3bf 8f6f 	isb	sy
	return k;
   250de:	e7d6      	b.n	2508e <k_heap_aligned_alloc+0x48>

000250e0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   250e0:	b538      	push	{r3, r4, r5, lr}
   250e2:	4604      	mov	r4, r0
   250e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   250e8:	f3ef 8511 	mrs	r5, BASEPRI
   250ec:	f383 8812 	msr	BASEPRI_MAX, r3
   250f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   250f4:	f7fc feda 	bl	21eac <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   250f8:	f104 000c 	add.w	r0, r4, #12
   250fc:	f000 fb0b 	bl	25716 <z_unpend_all>
   25100:	b130      	cbz	r0, 25110 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   25102:	4629      	mov	r1, r5
   25104:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   25108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2510c:	f7f9 b89e 	b.w	1e24c <z_reschedule>
	__asm__ volatile(
   25110:	f385 8811 	msr	BASEPRI, r5
   25114:	f3bf 8f6f 	isb	sy
}
   25118:	bd38      	pop	{r3, r4, r5, pc}

0002511a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2511a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2511e:	4313      	orrs	r3, r2
   25120:	f013 0303 	ands.w	r3, r3, #3
   25124:	d10c      	bne.n	25140 <create_free_list+0x26>
	slab->free_list = NULL;
   25126:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   25128:	6881      	ldr	r1, [r0, #8]
   2512a:	4299      	cmp	r1, r3
   2512c:	d801      	bhi.n	25132 <create_free_list+0x18>
	return 0;
   2512e:	2000      	movs	r0, #0
   25130:	4770      	bx	lr
		*(char **)p = slab->free_list;
   25132:	6941      	ldr	r1, [r0, #20]
   25134:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   25136:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   25138:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2513a:	3301      	adds	r3, #1
		p += slab->block_size;
   2513c:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2513e:	e7f3      	b.n	25128 <create_free_list+0xe>
		return -EINVAL;
   25140:	f06f 0015 	mvn.w	r0, #21
}
   25144:	4770      	bx	lr

00025146 <k_mem_slab_init>:
{
   25146:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   25148:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
   2514c:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2514e:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   25150:	6183      	str	r3, [r0, #24]
{
   25152:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   25154:	f7ff ffe1 	bl	2511a <create_free_list>
	if (rc < 0) {
   25158:	2800      	cmp	r0, #0
   2515a:	bfa8      	it	ge
   2515c:	e9c4 4400 	strdge	r4, r4, [r4]
}
   25160:	bd10      	pop	{r4, pc}

00025162 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   25162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25164:	4604      	mov	r4, r0
   25166:	460d      	mov	r5, r1
	__asm__ volatile(
   25168:	f04f 0340 	mov.w	r3, #64	; 0x40
   2516c:	f3ef 8611 	mrs	r6, BASEPRI
   25170:	f383 8812 	msr	BASEPRI_MAX, r3
   25174:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   25178:	6947      	ldr	r7, [r0, #20]
   2517a:	b977      	cbnz	r7, 2519a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2517c:	f000 fa85 	bl	2568a <z_unpend_first_thread>

		if (pending_thread != NULL) {
   25180:	b158      	cbz	r0, 2519a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   25182:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   25184:	6142      	str	r2, [r0, #20]
   25186:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   25188:	f000 fa48 	bl	2561c <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2518c:	4631      	mov	r1, r6
   2518e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   25192:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   25196:	f7f9 b859 	b.w	1e24c <z_reschedule>
	**(char ***) mem = slab->free_list;
   2519a:	682b      	ldr	r3, [r5, #0]
   2519c:	6962      	ldr	r2, [r4, #20]
   2519e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   251a0:	682b      	ldr	r3, [r5, #0]
   251a2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   251a4:	69a3      	ldr	r3, [r4, #24]
   251a6:	3b01      	subs	r3, #1
   251a8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   251aa:	f386 8811 	msr	BASEPRI, r6
   251ae:	f3bf 8f6f 	isb	sy
}
   251b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000251b4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   251b4:	f3ef 8005 	mrs	r0, IPSR
}
   251b8:	3800      	subs	r0, #0
   251ba:	bf18      	it	ne
   251bc:	2001      	movne	r0, #1
   251be:	4770      	bx	lr

000251c0 <z_impl_k_thread_name_set>:
}
   251c0:	f06f 0057 	mvn.w	r0, #87	; 0x57
   251c4:	4770      	bx	lr

000251c6 <k_thread_name_get>:
}
   251c6:	2000      	movs	r0, #0
   251c8:	4770      	bx	lr

000251ca <z_impl_k_thread_start>:
	z_sched_start(thread);
   251ca:	f7f9 b851 	b.w	1e270 <z_sched_start>

000251ce <z_pm_save_idle_exit>:
{
   251ce:	b508      	push	{r3, lr}
	pm_system_resume();
   251d0:	f7ee fa68 	bl	136a4 <pm_system_resume>
}
   251d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   251d8:	f7ff bdb8 	b.w	24d4c <sys_clock_idle_exit>

000251dc <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   251dc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   251e0:	428b      	cmp	r3, r1
   251e2:	d001      	beq.n	251e8 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   251e4:	f7f8 bfec 	b.w	1e1c0 <z_set_prio>
}
   251e8:	2000      	movs	r0, #0
   251ea:	4770      	bx	lr

000251ec <z_impl_k_mutex_init>:
{
   251ec:	4603      	mov	r3, r0
	mutex->owner = NULL;
   251ee:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   251f0:	e9c3 0002 	strd	r0, r0, [r3, #8]
   251f4:	e9c3 3300 	strd	r3, r3, [r3]
}
   251f8:	4770      	bx	lr

000251fa <queue_insert>:
{
   251fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   251fe:	4699      	mov	r9, r3
   25200:	4604      	mov	r4, r0
   25202:	f89d 3020 	ldrb.w	r3, [sp, #32]
   25206:	460d      	mov	r5, r1
   25208:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2520a:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2520e:	f04f 0240 	mov.w	r2, #64	; 0x40
   25212:	f3ef 8711 	mrs	r7, BASEPRI
   25216:	f382 8812 	msr	BASEPRI_MAX, r2
   2521a:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2521e:	b103      	cbz	r3, 25222 <queue_insert+0x28>
	return list->tail;
   25220:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25222:	4630      	mov	r0, r6
   25224:	f000 fa31 	bl	2568a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   25228:	b158      	cbz	r0, 25242 <queue_insert+0x48>
   2522a:	2300      	movs	r3, #0
   2522c:	67c3      	str	r3, [r0, #124]	; 0x7c
   2522e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   25232:	f000 f9f3 	bl	2561c <z_ready_thread>
	z_reschedule(&queue->lock, key);
   25236:	4630      	mov	r0, r6
   25238:	4639      	mov	r1, r7
   2523a:	f7f9 f807 	bl	1e24c <z_reschedule>
		return 0;
   2523e:	2000      	movs	r0, #0
   25240:	e00c      	b.n	2525c <queue_insert+0x62>
	if (alloc) {
   25242:	f1b9 0f00 	cmp.w	r9, #0
   25246:	d01b      	beq.n	25280 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   25248:	2108      	movs	r1, #8
   2524a:	f7f9 fc4b 	bl	1eae4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2524e:	b938      	cbnz	r0, 25260 <queue_insert+0x66>
	__asm__ volatile(
   25250:	f387 8811 	msr	BASEPRI, r7
   25254:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25258:	f06f 000b 	mvn.w	r0, #11
}
   2525c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   25260:	2201      	movs	r2, #1
		anode->data = data;
   25262:	f8c0 8004 	str.w	r8, [r0, #4]
   25266:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25268:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2526a:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2526e:	b95d      	cbnz	r5, 25288 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25270:	6822      	ldr	r2, [r4, #0]
   25272:	430a      	orrs	r2, r1
   25274:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25276:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   25278:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2527a:	b96a      	cbnz	r2, 25298 <queue_insert+0x9e>
	list->tail = node;
   2527c:	6060      	str	r0, [r4, #4]
}
   2527e:	e00b      	b.n	25298 <queue_insert+0x9e>
	node->next_and_flags = flags;
   25280:	f8c8 9000 	str.w	r9, [r8]
}
   25284:	4640      	mov	r0, r8
   25286:	e7ef      	b.n	25268 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25288:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2528a:	2a03      	cmp	r2, #3
   2528c:	d810      	bhi.n	252b0 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2528e:	6001      	str	r1, [r0, #0]
	return list->tail;
   25290:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   25292:	b939      	cbnz	r1, 252a4 <queue_insert+0xaa>
	list->head = node;
   25294:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25298:	2104      	movs	r1, #4
   2529a:	f104 0010 	add.w	r0, r4, #16
   2529e:	f000 fc44 	bl	25b2a <z_handle_obj_poll_events>
   252a2:	e7c8      	b.n	25236 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   252a4:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   252a6:	f002 0203 	and.w	r2, r2, #3
   252aa:	4302      	orrs	r2, r0
   252ac:	600a      	str	r2, [r1, #0]
   252ae:	e7e5      	b.n	2527c <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   252b0:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   252b4:	430a      	orrs	r2, r1
   252b6:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   252b8:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   252ba:	f002 0203 	and.w	r2, r2, #3
   252be:	ea40 0302 	orr.w	r3, r0, r2
   252c2:	602b      	str	r3, [r5, #0]
}
   252c4:	e7e8      	b.n	25298 <queue_insert+0x9e>

000252c6 <z_queue_node_peek>:
{
   252c6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   252c8:	4604      	mov	r4, r0
   252ca:	b130      	cbz	r0, 252da <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   252cc:	6802      	ldr	r2, [r0, #0]
   252ce:	0793      	lsls	r3, r2, #30
   252d0:	d003      	beq.n	252da <z_queue_node_peek+0x14>
		ret = anode->data;
   252d2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   252d4:	b109      	cbz	r1, 252da <z_queue_node_peek+0x14>
			k_free(anode);
   252d6:	f000 fc51 	bl	25b7c <k_free>
}
   252da:	4620      	mov	r0, r4
   252dc:	bd10      	pop	{r4, pc}

000252de <z_impl_k_queue_init>:
	list->head = NULL;
   252de:	2300      	movs	r3, #0
	list->tail = NULL;
   252e0:	e9c0 3300 	strd	r3, r3, [r0]
   252e4:	f100 0308 	add.w	r3, r0, #8
   252e8:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   252ec:	f100 0310 	add.w	r3, r0, #16
   252f0:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   252f4:	4770      	bx	lr

000252f6 <k_queue_append>:
{
   252f6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   252f8:	2301      	movs	r3, #1
   252fa:	9300      	str	r3, [sp, #0]
   252fc:	2300      	movs	r3, #0
{
   252fe:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   25300:	4619      	mov	r1, r3
   25302:	f7ff ff7a 	bl	251fa <queue_insert>
}
   25306:	b003      	add	sp, #12
   25308:	f85d fb04 	ldr.w	pc, [sp], #4

0002530c <k_queue_prepend>:
{
   2530c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2530e:	2300      	movs	r3, #0
{
   25310:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   25312:	9300      	str	r3, [sp, #0]
   25314:	4619      	mov	r1, r3
   25316:	f7ff ff70 	bl	251fa <queue_insert>
}
   2531a:	b003      	add	sp, #12
   2531c:	f85d fb04 	ldr.w	pc, [sp], #4

00025320 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   25320:	b15a      	cbz	r2, 2533a <z_impl_k_sem_init+0x1a>
   25322:	428a      	cmp	r2, r1
   25324:	d309      	bcc.n	2533a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   25326:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2532a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2532e:	e9c0 0000 	strd	r0, r0, [r0]
   25332:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   25336:	2000      	movs	r0, #0
   25338:	4770      	bx	lr
		return -EINVAL;
   2533a:	f06f 0015 	mvn.w	r0, #21
}
   2533e:	4770      	bx	lr

00025340 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   25340:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   25342:	2301      	movs	r3, #1
   25344:	408b      	lsls	r3, r1
   25346:	ea22 0303 	bic.w	r3, r2, r3
   2534a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2534c:	fa22 f001 	lsr.w	r0, r2, r1
}
   25350:	f000 0001 	and.w	r0, r0, #1
   25354:	4770      	bx	lr

00025356 <unschedule_locked>:
{
   25356:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   25358:	2103      	movs	r1, #3
{
   2535a:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2535c:	300c      	adds	r0, #12
   2535e:	f7ff ffef 	bl	25340 <flag_test_and_clear>
   25362:	4604      	mov	r4, r0
   25364:	b118      	cbz	r0, 2536e <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   25366:	f105 0010 	add.w	r0, r5, #16
   2536a:	f000 fa07 	bl	2577c <z_abort_timeout>
}
   2536e:	4620      	mov	r0, r4
   25370:	bd38      	pop	{r3, r4, r5, pc}

00025372 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   25372:	b120      	cbz	r0, 2537e <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   25374:	2200      	movs	r2, #0
   25376:	4611      	mov	r1, r2
   25378:	3088      	adds	r0, #136	; 0x88
   2537a:	f000 b9dc 	b.w	25736 <z_sched_wake>
}
   2537e:	4770      	bx	lr

00025380 <cancel_async_locked>:
{
   25380:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   25382:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25384:	f3c3 0640 	ubfx	r6, r3, #1, #1
   25388:	079b      	lsls	r3, r3, #30
{
   2538a:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2538c:	d416      	bmi.n	253bc <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2538e:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   25390:	2102      	movs	r1, #2
   25392:	300c      	adds	r0, #12
   25394:	f7ff ffd4 	bl	25340 <flag_test_and_clear>
   25398:	b180      	cbz	r0, 253bc <cancel_async_locked+0x3c>
	return list->head;
   2539a:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2539e:	b16a      	cbz	r2, 253bc <cancel_async_locked+0x3c>
   253a0:	4294      	cmp	r4, r2
   253a2:	d11d      	bne.n	253e0 <cancel_async_locked+0x60>
	return node->next;
   253a4:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   253a6:	b99e      	cbnz	r6, 253d0 <cancel_async_locked+0x50>
   253a8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   253ac:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   253b0:	429c      	cmp	r4, r3
   253b2:	d101      	bne.n	253b8 <cancel_async_locked+0x38>
	list->tail = node;
   253b4:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   253b8:	2300      	movs	r3, #0
   253ba:	6023      	str	r3, [r4, #0]
	return *flagp;
   253bc:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   253be:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   253c2:	bf1e      	ittt	ne
   253c4:	f043 0302 	orrne.w	r3, r3, #2
   253c8:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   253ca:	f040 0002 	orrne.w	r0, r0, #2
}
   253ce:	bd70      	pop	{r4, r5, r6, pc}
   253d0:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   253d2:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   253d6:	4294      	cmp	r4, r2
	list->tail = node;
   253d8:	bf08      	it	eq
   253da:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   253de:	e7eb      	b.n	253b8 <cancel_async_locked+0x38>
	return node->next;
   253e0:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   253e2:	6812      	ldr	r2, [r2, #0]
   253e4:	e7db      	b.n	2539e <cancel_async_locked+0x1e>

000253e6 <work_timeout>:
{
   253e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   253e8:	4604      	mov	r4, r0
	__asm__ volatile(
   253ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   253ee:	f3ef 8511 	mrs	r5, BASEPRI
   253f2:	f383 8812 	msr	BASEPRI_MAX, r3
   253f6:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   253fa:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   253fc:	f1a0 0610 	sub.w	r6, r0, #16
   25400:	2103      	movs	r1, #3
   25402:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   25404:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25406:	f7ff ff9b 	bl	25340 <flag_test_and_clear>
   2540a:	b128      	cbz	r0, 25418 <work_timeout+0x32>
		queue = dw->queue;
   2540c:	69a3      	ldr	r3, [r4, #24]
   2540e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25410:	a901      	add	r1, sp, #4
   25412:	4630      	mov	r0, r6
   25414:	f7f8 fc76 	bl	1dd04 <submit_to_queue_locked>
	__asm__ volatile(
   25418:	f385 8811 	msr	BASEPRI, r5
   2541c:	f3bf 8f6f 	isb	sy
}
   25420:	b002      	add	sp, #8
   25422:	bd70      	pop	{r4, r5, r6, pc}

00025424 <k_work_init>:
{
   25424:	b538      	push	{r3, r4, r5, lr}
   25426:	4604      	mov	r4, r0
   25428:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2542a:	2210      	movs	r2, #16
   2542c:	2100      	movs	r1, #0
   2542e:	f7fd fccc 	bl	22dca <memset>
   25432:	6065      	str	r5, [r4, #4]
}
   25434:	bd38      	pop	{r3, r4, r5, pc}

00025436 <k_work_busy_get>:
	__asm__ volatile(
   25436:	f04f 0240 	mov.w	r2, #64	; 0x40
   2543a:	f3ef 8311 	mrs	r3, BASEPRI
   2543e:	f382 8812 	msr	BASEPRI_MAX, r2
   25442:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   25446:	68c0      	ldr	r0, [r0, #12]
   25448:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   2544c:	f383 8811 	msr	BASEPRI, r3
   25450:	f3bf 8f6f 	isb	sy
}
   25454:	4770      	bx	lr

00025456 <z_work_submit_to_queue>:
{
   25456:	b513      	push	{r0, r1, r4, lr}
   25458:	9001      	str	r0, [sp, #4]
   2545a:	4608      	mov	r0, r1
	__asm__ volatile(
   2545c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25460:	f3ef 8411 	mrs	r4, BASEPRI
   25464:	f383 8812 	msr	BASEPRI_MAX, r3
   25468:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2546c:	a901      	add	r1, sp, #4
   2546e:	f7f8 fc49 	bl	1dd04 <submit_to_queue_locked>
	__asm__ volatile(
   25472:	f384 8811 	msr	BASEPRI, r4
   25476:	f3bf 8f6f 	isb	sy
}
   2547a:	b002      	add	sp, #8
   2547c:	bd10      	pop	{r4, pc}

0002547e <k_work_submit_to_queue>:
{
   2547e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   25480:	f7ff ffe9 	bl	25456 <z_work_submit_to_queue>
	if (ret > 0) {
   25484:	1e04      	subs	r4, r0, #0
   25486:	dd09      	ble.n	2549c <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   25488:	f04f 0340 	mov.w	r3, #64	; 0x40
   2548c:	f3ef 8011 	mrs	r0, BASEPRI
   25490:	f383 8812 	msr	BASEPRI_MAX, r3
   25494:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25498:	f000 f927 	bl	256ea <z_reschedule_irqlock>
}
   2549c:	4620      	mov	r0, r4
   2549e:	bd10      	pop	{r4, pc}

000254a0 <k_work_queue_init>:
{
   254a0:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   254a2:	22a0      	movs	r2, #160	; 0xa0
   254a4:	2100      	movs	r1, #0
   254a6:	f7fd fc90 	bl	22dca <memset>
}
   254aa:	bd08      	pop	{r3, pc}

000254ac <k_work_init_delayable>:
{
   254ac:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   254ae:	2230      	movs	r2, #48	; 0x30
{
   254b0:	4604      	mov	r4, r0
   254b2:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   254b4:	2100      	movs	r1, #0
   254b6:	f7fd fc88 	bl	22dca <memset>
   254ba:	f44f 7380 	mov.w	r3, #256	; 0x100
   254be:	6065      	str	r5, [r4, #4]
   254c0:	60e3      	str	r3, [r4, #12]
}
   254c2:	bd38      	pop	{r3, r4, r5, pc}

000254c4 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   254c4:	f7ff bfb7 	b.w	25436 <k_work_busy_get>

000254c8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   254c8:	b538      	push	{r3, r4, r5, lr}
   254ca:	4604      	mov	r4, r0
   254cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   254d0:	f3ef 8511 	mrs	r5, BASEPRI
   254d4:	f383 8812 	msr	BASEPRI_MAX, r3
   254d8:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   254dc:	f7ff ff3b 	bl	25356 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   254e0:	4620      	mov	r0, r4
   254e2:	f7ff ff4d 	bl	25380 <cancel_async_locked>
	__asm__ volatile(
   254e6:	f385 8811 	msr	BASEPRI, r5
   254ea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   254ee:	bd38      	pop	{r3, r4, r5, pc}

000254f0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   254f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   254f2:	4604      	mov	r4, r0
   254f4:	460d      	mov	r5, r1
	__asm__ volatile(
   254f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   254fa:	f3ef 8611 	mrs	r6, BASEPRI
   254fe:	f383 8812 	msr	BASEPRI_MAX, r3
   25502:	f3bf 8f6f 	isb	sy
	return *flagp;
   25506:	68c3      	ldr	r3, [r0, #12]
   25508:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2550c:	2b00      	cmp	r3, #0
   2550e:	bf14      	ite	ne
   25510:	2701      	movne	r7, #1
   25512:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   25514:	d105      	bne.n	25522 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   25516:	f386 8811 	msr	BASEPRI, r6
   2551a:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2551e:	4638      	mov	r0, r7
   25520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   25522:	f7ff ff18 	bl	25356 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25526:	4620      	mov	r0, r4
   25528:	f7ff ff2a 	bl	25380 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2552c:	4629      	mov	r1, r5
   2552e:	4620      	mov	r0, r4
   25530:	f7f8 fbca 	bl	1dcc8 <cancel_sync_locked>
   25534:	f386 8811 	msr	BASEPRI, r6
   25538:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   2553c:	2800      	cmp	r0, #0
   2553e:	d0ee      	beq.n	2551e <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   25540:	f04f 32ff 	mov.w	r2, #4294967295
   25544:	f04f 33ff 	mov.w	r3, #4294967295
   25548:	f105 0008 	add.w	r0, r5, #8
   2554c:	f7f8 fade 	bl	1db0c <z_impl_k_sem_take>
   25550:	e7e5      	b.n	2551e <k_work_cancel_delayable_sync+0x2e>

00025552 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   25552:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25556:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25558:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2555a:	2300      	movs	r3, #0
	node->prev = NULL;
   2555c:	e9c0 3300 	strd	r3, r3, [r0]
}
   25560:	4770      	bx	lr

00025562 <unpend_thread_no_timeout>:
{
   25562:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   25564:	f7ff fff5 	bl	25552 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25568:	7b43      	ldrb	r3, [r0, #13]
   2556a:	f023 0302 	bic.w	r3, r3, #2
   2556e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   25570:	2300      	movs	r3, #0
   25572:	6083      	str	r3, [r0, #8]
}
   25574:	bd08      	pop	{r3, pc}

00025576 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   25576:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2557a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2557e:	4283      	cmp	r3, r0
		return b2 - b1;
   25580:	bf14      	ite	ne
   25582:	1ac0      	subne	r0, r0, r3
	return 0;
   25584:	2000      	moveq	r0, #0
}
   25586:	4770      	bx	lr

00025588 <z_thread_timeout>:
{
   25588:	b510      	push	{r4, lr}
   2558a:	4601      	mov	r1, r0
	__asm__ volatile(
   2558c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25590:	f3ef 8411 	mrs	r4, BASEPRI
   25594:	f383 8812 	msr	BASEPRI_MAX, r3
   25598:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2559c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   255a0:	f013 0f28 	tst.w	r3, #40	; 0x28
   255a4:	d10d      	bne.n	255c2 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   255a6:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   255aa:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   255ac:	b10b      	cbz	r3, 255b2 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   255ae:	f7ff ffd8 	bl	25562 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   255b2:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   255b6:	f023 0314 	bic.w	r3, r3, #20
   255ba:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   255be:	f7f8 fd09 	bl	1dfd4 <ready_thread>
	__asm__ volatile(
   255c2:	f384 8811 	msr	BASEPRI, r4
   255c6:	f3bf 8f6f 	isb	sy
}
   255ca:	bd10      	pop	{r4, pc}

000255cc <add_to_waitq_locked>:
{
   255cc:	b538      	push	{r3, r4, r5, lr}
   255ce:	4604      	mov	r4, r0
   255d0:	460d      	mov	r5, r1
	unready_thread(thread);
   255d2:	f7f8 fd33 	bl	1e03c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   255d6:	7b63      	ldrb	r3, [r4, #13]
   255d8:	f043 0302 	orr.w	r3, r3, #2
   255dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   255de:	b1e5      	cbz	r5, 2561a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   255e0:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   255e2:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   255e4:	429d      	cmp	r5, r3
   255e6:	d109      	bne.n	255fc <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   255e8:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   255ea:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   255ee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   255f0:	606c      	str	r4, [r5, #4]
}
   255f2:	e012      	b.n	2561a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   255f4:	686a      	ldr	r2, [r5, #4]
   255f6:	4293      	cmp	r3, r2
   255f8:	d0f6      	beq.n	255e8 <add_to_waitq_locked+0x1c>
   255fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   255fc:	2b00      	cmp	r3, #0
   255fe:	d0f3      	beq.n	255e8 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   25600:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25604:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   25608:	428a      	cmp	r2, r1
   2560a:	d0f3      	beq.n	255f4 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2560c:	4291      	cmp	r1, r2
   2560e:	ddf1      	ble.n	255f4 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   25610:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25612:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25616:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25618:	605c      	str	r4, [r3, #4]
}
   2561a:	bd38      	pop	{r3, r4, r5, pc}

0002561c <z_ready_thread>:
{
   2561c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2561e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25622:	f3ef 8411 	mrs	r4, BASEPRI
   25626:	f383 8812 	msr	BASEPRI_MAX, r3
   2562a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2562e:	f7f8 fcd1 	bl	1dfd4 <ready_thread>
	__asm__ volatile(
   25632:	f384 8811 	msr	BASEPRI, r4
   25636:	f3bf 8f6f 	isb	sy
}
   2563a:	bd10      	pop	{r4, pc}

0002563c <z_unpend_thread_no_timeout>:
{
   2563c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2563e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25642:	f3ef 8111 	mrs	r1, BASEPRI
   25646:	f383 8812 	msr	BASEPRI_MAX, r3
   2564a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2564e:	f7ff ff88 	bl	25562 <unpend_thread_no_timeout>
	__asm__ volatile(
   25652:	f381 8811 	msr	BASEPRI, r1
   25656:	f3bf 8f6f 	isb	sy
}
   2565a:	bd08      	pop	{r3, pc}

0002565c <z_unpend1_no_timeout>:
{
   2565c:	b508      	push	{r3, lr}
   2565e:	4603      	mov	r3, r0
	__asm__ volatile(
   25660:	f04f 0240 	mov.w	r2, #64	; 0x40
   25664:	f3ef 8111 	mrs	r1, BASEPRI
   25668:	f382 8812 	msr	BASEPRI_MAX, r2
   2566c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   25670:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25672:	4283      	cmp	r3, r0
   25674:	d007      	beq.n	25686 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   25676:	b108      	cbz	r0, 2567c <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   25678:	f7ff ff73 	bl	25562 <unpend_thread_no_timeout>
	__asm__ volatile(
   2567c:	f381 8811 	msr	BASEPRI, r1
   25680:	f3bf 8f6f 	isb	sy
}
   25684:	bd08      	pop	{r3, pc}
   25686:	2000      	movs	r0, #0
   25688:	e7f8      	b.n	2567c <z_unpend1_no_timeout+0x20>

0002568a <z_unpend_first_thread>:
{
   2568a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2568c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25690:	f3ef 8511 	mrs	r5, BASEPRI
   25694:	f383 8812 	msr	BASEPRI_MAX, r3
   25698:	f3bf 8f6f 	isb	sy
	return list->head == list;
   2569c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2569e:	42a0      	cmp	r0, r4
   256a0:	d00d      	beq.n	256be <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   256a2:	b134      	cbz	r4, 256b2 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   256a4:	4620      	mov	r0, r4
   256a6:	f7ff ff5c 	bl	25562 <unpend_thread_no_timeout>
   256aa:	f104 0018 	add.w	r0, r4, #24
   256ae:	f000 f865 	bl	2577c <z_abort_timeout>
	__asm__ volatile(
   256b2:	f385 8811 	msr	BASEPRI, r5
   256b6:	f3bf 8f6f 	isb	sy
}
   256ba:	4620      	mov	r0, r4
   256bc:	bd38      	pop	{r3, r4, r5, pc}
   256be:	2400      	movs	r4, #0
   256c0:	e7f7      	b.n	256b2 <z_unpend_first_thread+0x28>

000256c2 <z_unpend_thread>:
{
   256c2:	b510      	push	{r4, lr}
	__asm__ volatile(
   256c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   256c8:	f3ef 8411 	mrs	r4, BASEPRI
   256cc:	f383 8812 	msr	BASEPRI_MAX, r3
   256d0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   256d4:	f7ff ff45 	bl	25562 <unpend_thread_no_timeout>
	__asm__ volatile(
   256d8:	f384 8811 	msr	BASEPRI, r4
   256dc:	f3bf 8f6f 	isb	sy
}
   256e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   256e4:	3018      	adds	r0, #24
   256e6:	f000 b849 	b.w	2577c <z_abort_timeout>

000256ea <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   256ea:	4603      	mov	r3, r0
   256ec:	b920      	cbnz	r0, 256f8 <z_reschedule_irqlock+0xe>
   256ee:	f3ef 8205 	mrs	r2, IPSR
   256f2:	b90a      	cbnz	r2, 256f8 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   256f4:	f7ee bb28 	b.w	13d48 <arch_swap>
   256f8:	f383 8811 	msr	BASEPRI, r3
   256fc:	f3bf 8f6f 	isb	sy
}
   25700:	4770      	bx	lr

00025702 <z_reschedule_unlocked>:
	__asm__ volatile(
   25702:	f04f 0340 	mov.w	r3, #64	; 0x40
   25706:	f3ef 8011 	mrs	r0, BASEPRI
   2570a:	f383 8812 	msr	BASEPRI_MAX, r3
   2570e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   25712:	f7ff bfea 	b.w	256ea <z_reschedule_irqlock>

00025716 <z_unpend_all>:
{
   25716:	b538      	push	{r3, r4, r5, lr}
   25718:	4605      	mov	r5, r0
	int need_sched = 0;
   2571a:	2000      	movs	r0, #0
	return list->head == list;
   2571c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2571e:	42a5      	cmp	r5, r4
   25720:	d000      	beq.n	25724 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25722:	b904      	cbnz	r4, 25726 <z_unpend_all+0x10>
}
   25724:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   25726:	4620      	mov	r0, r4
   25728:	f7ff ffcb 	bl	256c2 <z_unpend_thread>
		z_ready_thread(thread);
   2572c:	4620      	mov	r0, r4
   2572e:	f7ff ff75 	bl	2561c <z_ready_thread>
		need_sched = 1;
   25732:	2001      	movs	r0, #1
   25734:	e7f2      	b.n	2571c <z_unpend_all+0x6>

00025736 <z_sched_wake>:
{
   25736:	b538      	push	{r3, r4, r5, lr}
   25738:	f04f 0340 	mov.w	r3, #64	; 0x40
   2573c:	f3ef 8511 	mrs	r5, BASEPRI
   25740:	f383 8812 	msr	BASEPRI_MAX, r3
   25744:	f3bf 8f6f 	isb	sy
	return list->head == list;
   25748:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2574a:	42a0      	cmp	r0, r4
   2574c:	d012      	beq.n	25774 <z_sched_wake+0x3e>
		if (thread != NULL) {
   2574e:	b19c      	cbz	r4, 25778 <z_sched_wake+0x42>
   25750:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   25752:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   25754:	4620      	mov	r0, r4
   25756:	f7ff ff04 	bl	25562 <unpend_thread_no_timeout>
   2575a:	f104 0018 	add.w	r0, r4, #24
   2575e:	f000 f80d 	bl	2577c <z_abort_timeout>
			ready_thread(thread);
   25762:	4620      	mov	r0, r4
   25764:	f7f8 fc36 	bl	1dfd4 <ready_thread>
			ret = true;
   25768:	2001      	movs	r0, #1
	__asm__ volatile(
   2576a:	f385 8811 	msr	BASEPRI, r5
   2576e:	f3bf 8f6f 	isb	sy
}
   25772:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   25774:	2000      	movs	r0, #0
   25776:	e7f8      	b.n	2576a <z_sched_wake+0x34>
   25778:	4620      	mov	r0, r4
   2577a:	e7f6      	b.n	2576a <z_sched_wake+0x34>

0002577c <z_abort_timeout>:
{
   2577c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2577e:	f04f 0240 	mov.w	r2, #64	; 0x40
   25782:	f3ef 8411 	mrs	r4, BASEPRI
   25786:	f382 8812 	msr	BASEPRI_MAX, r2
   2578a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2578e:	6803      	ldr	r3, [r0, #0]
   25790:	b13b      	cbz	r3, 257a2 <z_abort_timeout+0x26>
			remove_timeout(to);
   25792:	f7f8 ff59 	bl	1e648 <remove_timeout>
			ret = 0;
   25796:	2000      	movs	r0, #0
	__asm__ volatile(
   25798:	f384 8811 	msr	BASEPRI, r4
   2579c:	f3bf 8f6f 	isb	sy
}
   257a0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   257a2:	f06f 0015 	mvn.w	r0, #21
   257a6:	e7f7      	b.n	25798 <z_abort_timeout+0x1c>

000257a8 <z_get_next_timeout_expiry>:
{
   257a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   257aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   257ae:	f3ef 8411 	mrs	r4, BASEPRI
   257b2:	f383 8812 	msr	BASEPRI_MAX, r3
   257b6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   257ba:	f7f8 ff1d 	bl	1e5f8 <next_timeout>
	__asm__ volatile(
   257be:	f384 8811 	msr	BASEPRI, r4
   257c2:	f3bf 8f6f 	isb	sy
}
   257c6:	bd10      	pop	{r4, pc}

000257c8 <z_set_timeout_expiry>:
{
   257c8:	b570      	push	{r4, r5, r6, lr}
   257ca:	4604      	mov	r4, r0
   257cc:	460d      	mov	r5, r1
	__asm__ volatile(
   257ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   257d2:	f3ef 8611 	mrs	r6, BASEPRI
   257d6:	f383 8812 	msr	BASEPRI_MAX, r3
   257da:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   257de:	f7f8 ff0b 	bl	1e5f8 <next_timeout>
			      || (ticks <= next_to);
   257e2:	2801      	cmp	r0, #1
   257e4:	dd07      	ble.n	257f6 <z_set_timeout_expiry+0x2e>
   257e6:	42a0      	cmp	r0, r4
   257e8:	db05      	blt.n	257f6 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   257ea:	42a0      	cmp	r0, r4
   257ec:	4629      	mov	r1, r5
   257ee:	bfa8      	it	ge
   257f0:	4620      	movge	r0, r4
   257f2:	f7f5 fc79 	bl	1b0e8 <sys_clock_set_timeout>
	__asm__ volatile(
   257f6:	f386 8811 	msr	BASEPRI, r6
   257fa:	f3bf 8f6f 	isb	sy
}
   257fe:	bd70      	pop	{r4, r5, r6, pc}

00025800 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   25800:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   25802:	f7f9 f815 	bl	1e830 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   25806:	bd08      	pop	{r3, pc}

00025808 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   25808:	f7f9 b812 	b.w	1e830 <sys_clock_tick_get>

0002580c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2580c:	b108      	cbz	r0, 25812 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2580e:	f7ef b815 	b.w	1483c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   25812:	4770      	bx	lr

00025814 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25814:	f1b1 3fff 	cmp.w	r1, #4294967295
   25818:	bf08      	it	eq
   2581a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2581e:	b538      	push	{r3, r4, r5, lr}
   25820:	460c      	mov	r4, r1
   25822:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25824:	d014      	beq.n	25850 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25826:	4308      	orrs	r0, r1
   25828:	d103      	bne.n	25832 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2582a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2582e:	f7f8 bfff 	b.w	1e830 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   25832:	f06f 0001 	mvn.w	r0, #1
   25836:	1b40      	subs	r0, r0, r5
   25838:	f04f 33ff 	mov.w	r3, #4294967295
   2583c:	eb63 0101 	sbc.w	r1, r3, r1
   25840:	2900      	cmp	r1, #0
   25842:	da04      	bge.n	2584e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   25844:	f7f8 fff4 	bl	1e830 <sys_clock_tick_get>
   25848:	1940      	adds	r0, r0, r5
   2584a:	eb41 0104 	adc.w	r1, r1, r4
}
   2584e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   25850:	f04f 30ff 	mov.w	r0, #4294967295
   25854:	4601      	mov	r1, r0
   25856:	e7fa      	b.n	2584e <sys_clock_timeout_end_calc+0x3a>

00025858 <k_timer_init>:
	timer->status = 0U;
   25858:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2585a:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2585e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   25862:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   25866:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2586a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2586c:	6343      	str	r3, [r0, #52]	; 0x34
}
   2586e:	4770      	bx	lr

00025870 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   25870:	b510      	push	{r4, lr}
   25872:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   25874:	f7ff ff82 	bl	2577c <z_abort_timeout>

	if (inactive) {
   25878:	b9b0      	cbnz	r0, 258a8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2587a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2587c:	b10b      	cbz	r3, 25882 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2587e:	4620      	mov	r0, r4
   25880:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   25882:	f104 0018 	add.w	r0, r4, #24
   25886:	f7ff fee9 	bl	2565c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2588a:	b168      	cbz	r0, 258a8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2588c:	f7ff fec6 	bl	2561c <z_ready_thread>
	__asm__ volatile(
   25890:	f04f 0340 	mov.w	r3, #64	; 0x40
   25894:	f3ef 8011 	mrs	r0, BASEPRI
   25898:	f383 8812 	msr	BASEPRI_MAX, r3
   2589c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   258a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   258a4:	f7ff bf21 	b.w	256ea <z_reschedule_irqlock>
   258a8:	bd10      	pop	{r4, pc}

000258aa <add_event>:
{
   258aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258ac:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   258ae:	e9d0 1300 	ldrd	r1, r3, [r0]
   258b2:	4288      	cmp	r0, r1
   258b4:	4604      	mov	r4, r0
   258b6:	d105      	bne.n	258c4 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   258b8:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   258ba:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   258be:	601d      	str	r5, [r3, #0]
	list->tail = node;
   258c0:	6065      	str	r5, [r4, #4]
   258c2:	e01d      	b.n	25900 <add_event+0x56>
	if ((pending == NULL) ||
   258c4:	2b00      	cmp	r3, #0
   258c6:	d0f7      	beq.n	258b8 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   258c8:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   258ca:	b100      	cbz	r0, 258ce <add_event+0x24>
   258cc:	3860      	subs	r0, #96	; 0x60
   258ce:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   258d2:	4639      	mov	r1, r7
   258d4:	f7ff fe4f 	bl	25576 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   258d8:	2800      	cmp	r0, #0
   258da:	dced      	bgt.n	258b8 <add_event+0xe>
	return list->head == list;
   258dc:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258de:	42b4      	cmp	r4, r6
   258e0:	d0ea      	beq.n	258b8 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   258e2:	2e00      	cmp	r6, #0
   258e4:	d0e8      	beq.n	258b8 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   258e6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   258e8:	b101      	cbz	r1, 258ec <add_event+0x42>
   258ea:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   258ec:	4638      	mov	r0, r7
   258ee:	f7ff fe42 	bl	25576 <z_sched_prio_cmp>
   258f2:	2800      	cmp	r0, #0
   258f4:	dd05      	ble.n	25902 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   258f6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   258f8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   258fc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   258fe:	6075      	str	r5, [r6, #4]
}
   25900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   25902:	6863      	ldr	r3, [r4, #4]
   25904:	429e      	cmp	r6, r3
   25906:	d0d7      	beq.n	258b8 <add_event+0xe>
   25908:	6836      	ldr	r6, [r6, #0]
   2590a:	e7ea      	b.n	258e2 <add_event+0x38>

0002590c <register_events>:
{
   2590c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   25910:	2500      	movs	r5, #0
{
   25912:	468b      	mov	fp, r1
   25914:	4614      	mov	r4, r2
   25916:	461f      	mov	r7, r3
   25918:	4682      	mov	sl, r0
	int events_registered = 0;
   2591a:	462e      	mov	r6, r5
	event->poller = NULL;
   2591c:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2591e:	455d      	cmp	r5, fp
   25920:	db02      	blt.n	25928 <register_events+0x1c>
}
   25922:	4630      	mov	r0, r6
   25924:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25928:	f04f 0340 	mov.w	r3, #64	; 0x40
   2592c:	f3ef 8911 	mrs	r9, BASEPRI
   25930:	f383 8812 	msr	BASEPRI_MAX, r3
   25934:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   25938:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2593c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25940:	3b01      	subs	r3, #1
   25942:	2b07      	cmp	r3, #7
   25944:	d80f      	bhi.n	25966 <register_events+0x5a>
   25946:	e8df f003 	tbb	[pc, r3]
   2594a:	041e      	.short	0x041e
   2594c:	0e0e0a0e 	.word	0x0e0e0a0e
   25950:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   25952:	f8da 3010 	ldr.w	r3, [sl, #16]
   25956:	689b      	ldr	r3, [r3, #8]
   25958:	b12b      	cbz	r3, 25966 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2595a:	2302      	movs	r3, #2
   2595c:	e020      	b.n	259a0 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2595e:	f8da 3010 	ldr.w	r3, [sl, #16]
   25962:	681b      	ldr	r3, [r3, #0]
   25964:	bb8b      	cbnz	r3, 259ca <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   25966:	bb47      	cbnz	r7, 259ba <register_events+0xae>
   25968:	7823      	ldrb	r3, [r4, #0]
   2596a:	b333      	cbz	r3, 259ba <register_events+0xae>
	switch (event->type) {
   2596c:	f89a 300d 	ldrb.w	r3, [sl, #13]
   25970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25974:	3b01      	subs	r3, #1
   25976:	2b07      	cmp	r3, #7
   25978:	d830      	bhi.n	259dc <register_events+0xd0>
   2597a:	e8df f003 	tbb	[pc, r3]
   2597e:	2833      	.short	0x2833
   25980:	2f2f282f 	.word	0x2f2f282f
   25984:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   25986:	f8da 3010 	ldr.w	r3, [sl, #16]
   2598a:	689b      	ldr	r3, [r3, #8]
   2598c:	2b00      	cmp	r3, #0
   2598e:	d0ea      	beq.n	25966 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   25990:	2301      	movs	r3, #1
   25992:	e005      	b.n	259a0 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   25994:	f8da 3010 	ldr.w	r3, [sl, #16]
   25998:	6a1b      	ldr	r3, [r3, #32]
   2599a:	2b00      	cmp	r3, #0
   2599c:	d0e3      	beq.n	25966 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2599e:	2310      	movs	r3, #16
	event->state |= state;
   259a0:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   259a4:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   259a8:	f3c2 3186 	ubfx	r1, r2, #14, #7
   259ac:	430b      	orrs	r3, r1
   259ae:	f363 3294 	bfi	r2, r3, #14, #7
   259b2:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   259b6:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   259ba:	f389 8811 	msr	BASEPRI, r9
   259be:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   259c2:	3501      	adds	r5, #1
   259c4:	f10a 0a14 	add.w	sl, sl, #20
   259c8:	e7a9      	b.n	2591e <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   259ca:	2304      	movs	r3, #4
   259cc:	e7e8      	b.n	259a0 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   259ce:	f8da 0010 	ldr.w	r0, [sl, #16]
   259d2:	4622      	mov	r2, r4
   259d4:	4651      	mov	r1, sl
   259d6:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   259d8:	f7ff ff67 	bl	258aa <add_event>
	event->poller = poller;
   259dc:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   259e0:	3601      	adds	r6, #1
   259e2:	e7ea      	b.n	259ba <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   259e4:	f8da 0010 	ldr.w	r0, [sl, #16]
   259e8:	4622      	mov	r2, r4
   259ea:	4651      	mov	r1, sl
   259ec:	e7f4      	b.n	259d8 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   259ee:	f8da 0010 	ldr.w	r0, [sl, #16]
   259f2:	4622      	mov	r2, r4
   259f4:	4651      	mov	r1, sl
   259f6:	3024      	adds	r0, #36	; 0x24
   259f8:	e7ee      	b.n	259d8 <register_events+0xcc>

000259fa <signal_poll_event>:
{
   259fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   259fe:	6884      	ldr	r4, [r0, #8]
{
   25a00:	4605      	mov	r5, r0
   25a02:	460e      	mov	r6, r1
	if (poller != NULL) {
   25a04:	b144      	cbz	r4, 25a18 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   25a06:	7863      	ldrb	r3, [r4, #1]
   25a08:	2b01      	cmp	r3, #1
   25a0a:	d12e      	bne.n	25a6a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   25a0c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25a10:	f013 0302 	ands.w	r3, r3, #2
   25a14:	d10a      	bne.n	25a2c <signal_poll_event+0x32>
		poller->is_polling = false;
   25a16:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   25a18:	68eb      	ldr	r3, [r5, #12]
   25a1a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   25a1e:	4316      	orrs	r6, r2
	event->poller = NULL;
   25a20:	2000      	movs	r0, #0
	event->state |= state;
   25a22:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   25a26:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   25a28:	60eb      	str	r3, [r5, #12]
	return retcode;
   25a2a:	e03e      	b.n	25aaa <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   25a2c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   25a30:	f1b3 3fff 	cmp.w	r3, #4294967295
   25a34:	bf08      	it	eq
   25a36:	f112 0f02 	cmneq.w	r2, #2
   25a3a:	d032      	beq.n	25aa2 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   25a3c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   25a40:	4640      	mov	r0, r8
   25a42:	f7ff fe3e 	bl	256c2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   25a46:	2e08      	cmp	r6, #8
   25a48:	bf0c      	ite	eq
   25a4a:	f06f 0303 	mvneq.w	r3, #3
   25a4e:	2300      	movne	r3, #0
   25a50:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25a52:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   25a56:	06db      	lsls	r3, r3, #27
   25a58:	d109      	bne.n	25a6e <signal_poll_event+0x74>
   25a5a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   25a5e:	b937      	cbnz	r7, 25a6e <signal_poll_event+0x74>
	z_ready_thread(thread);
   25a60:	4640      	mov	r0, r8
   25a62:	f7ff fddb 	bl	2561c <z_ready_thread>
		poller->is_polling = false;
   25a66:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   25a68:	e7d6      	b.n	25a18 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   25a6a:	2b02      	cmp	r3, #2
   25a6c:	d001      	beq.n	25a72 <signal_poll_event+0x78>
		poller->is_polling = false;
   25a6e:	2300      	movs	r3, #0
   25a70:	e7d1      	b.n	25a16 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   25a72:	7823      	ldrb	r3, [r4, #0]
   25a74:	2b00      	cmp	r3, #0
   25a76:	d0cf      	beq.n	25a18 <signal_poll_event+0x1e>
   25a78:	f854 7c04 	ldr.w	r7, [r4, #-4]
   25a7c:	2f00      	cmp	r7, #0
   25a7e:	d0f2      	beq.n	25a66 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   25a80:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   25a84:	f1a4 0914 	sub.w	r9, r4, #20
   25a88:	f104 0014 	add.w	r0, r4, #20
   25a8c:	f7ff fe76 	bl	2577c <z_abort_timeout>
		twork->poll_result = 0;
   25a90:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   25a94:	4649      	mov	r1, r9
   25a96:	4638      	mov	r0, r7
   25a98:	f7ff fcdd 	bl	25456 <z_work_submit_to_queue>
		poller->is_polling = false;
   25a9c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   25aa0:	e7ba      	b.n	25a18 <signal_poll_event+0x1e>
		poller->is_polling = false;
   25aa2:	2300      	movs	r3, #0
   25aa4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25aa6:	f06f 000a 	mvn.w	r0, #10
}
   25aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025aae <clear_event_registrations>:
	while (num_events--) {
   25aae:	2314      	movs	r3, #20
{
   25ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25ab2:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   25ab6:	2400      	movs	r4, #0
	switch (event->type) {
   25ab8:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   25abc:	b901      	cbnz	r1, 25ac0 <clear_event_registrations+0x12>
}
   25abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   25ac0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   25ac4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   25ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   25acc:	2b08      	cmp	r3, #8
   25ace:	f1a0 0714 	sub.w	r7, r0, #20
   25ad2:	d80c      	bhi.n	25aee <clear_event_registrations+0x40>
   25ad4:	fa26 f303 	lsr.w	r3, r6, r3
   25ad8:	07db      	lsls	r3, r3, #31
   25ada:	d508      	bpl.n	25aee <clear_event_registrations+0x40>
	return node->next != NULL;
   25adc:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   25ae0:	b12b      	cbz	r3, 25aee <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   25ae2:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   25ae6:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   25ae8:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   25aea:	e940 4405 	strd	r4, r4, [r0, #-20]
   25aee:	f382 8811 	msr	BASEPRI, r2
   25af2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25af6:	f04f 0340 	mov.w	r3, #64	; 0x40
   25afa:	f3ef 8211 	mrs	r2, BASEPRI
   25afe:	f383 8812 	msr	BASEPRI_MAX, r3
   25b02:	f3bf 8f6f 	isb	sy
   25b06:	3901      	subs	r1, #1
   25b08:	4638      	mov	r0, r7
   25b0a:	e7d7      	b.n	25abc <clear_event_registrations+0xe>

00025b0c <k_poll_event_init>:
{
   25b0c:	b510      	push	{r4, lr}
	event->type = type;
   25b0e:	0552      	lsls	r2, r2, #21
   25b10:	0209      	lsls	r1, r1, #8
   25b12:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   25b16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   25b1a:	430a      	orrs	r2, r1
   25b1c:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   25b1e:	2400      	movs	r4, #0
	event->type = type;
   25b20:	430a      	orrs	r2, r1
	event->obj = obj;
   25b22:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   25b26:	6084      	str	r4, [r0, #8]
}
   25b28:	bd10      	pop	{r4, pc}

00025b2a <z_handle_obj_poll_events>:
{
   25b2a:	4603      	mov	r3, r0
	return list->head == list;
   25b2c:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   25b2e:	4283      	cmp	r3, r0
   25b30:	d008      	beq.n	25b44 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   25b32:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25b36:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25b38:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25b3a:	2300      	movs	r3, #0
	node->prev = NULL;
   25b3c:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   25b40:	f7ff bf5b 	b.w	259fa <signal_poll_event>
}
   25b44:	4770      	bx	lr

00025b46 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   25b46:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   25b48:	e9c0 0000 	strd	r0, r0, [r0]
   25b4c:	6083      	str	r3, [r0, #8]
}
   25b4e:	4770      	bx	lr

00025b50 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   25b50:	2300      	movs	r3, #0
   25b52:	6083      	str	r3, [r0, #8]
}
   25b54:	4770      	bx	lr

00025b56 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25b56:	3204      	adds	r2, #4
{
   25b58:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   25b5a:	4604      	mov	r4, r0
   25b5c:	d208      	bcs.n	25b70 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   25b5e:	2600      	movs	r6, #0
   25b60:	2700      	movs	r7, #0
   25b62:	e9cd 6700 	strd	r6, r7, [sp]
   25b66:	f041 0104 	orr.w	r1, r1, #4
   25b6a:	f7ff fa6c 	bl	25046 <k_heap_aligned_alloc>
	if (mem == NULL) {
   25b6e:	b910      	cbnz	r0, 25b76 <z_heap_aligned_alloc+0x20>
		return NULL;
   25b70:	2000      	movs	r0, #0
}
   25b72:	b002      	add	sp, #8
   25b74:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   25b76:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   25b7a:	e7fa      	b.n	25b72 <z_heap_aligned_alloc+0x1c>

00025b7c <k_free>:
	if (ptr != NULL) {
   25b7c:	b120      	cbz	r0, 25b88 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   25b7e:	1f01      	subs	r1, r0, #4
   25b80:	f850 0c04 	ldr.w	r0, [r0, #-4]
   25b84:	f7ff baac 	b.w	250e0 <k_heap_free>
}
   25b88:	4770      	bx	lr

00025b8a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   25b8a:	4770      	bx	lr
