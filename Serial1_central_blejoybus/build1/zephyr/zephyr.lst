
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	40 af 00 20 09 53 01 00 39 ae 02 00 dd 52 01 00     @.. .S..9....R..
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	dd 52 01 00 dd 52 01 00 dd 52 01 00 00 00 00 00     .R...R...R......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	85 4d 01 00 dd 52 01 00 00 00 00 00 31 4d 01 00     .M...R......1M..
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	dd 52 01 00                                         .R..

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	35 4e 01 00 d5 da 02 00 35 4e 01 00 35 4e 01 00     5N......5N..5N..
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  60:	9d da 02 00 35 4e 01 00 35 4e 01 00 bb da 02 00     ....5N..5N......
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
			switch (*fmt) {
  a0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
  b0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
  c0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
  d0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
  e0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..
  f0:	35 4e 01 00 35 4e 01 00 35 4e 01 00 35 4e 01 00     5N..5N..5N..5N..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
				align = VA_STACK_ALIGN(void *);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
			switch (*fmt) {
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c fd62 	bl	cbe8 <__udivmoddi4>
		buf = (void *) ROUND_UP(buf, align);
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
		if (is_str_arg) {
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
			int v = va_arg(ap, int);
     14a:	414d      	adcs	r5, r1

			if (buf0 != NULL) {
				*(int *)buf = v;
     14c:	eb56 060c 	adcs.w	r6, r6, ip
			}
			buf += sizeof(int);
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				arg_idx--;
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
				parsing = false;
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				continue;
     15e:	eb59 0901 	adcs.w	r9, r9, r1
				if (fmt[-1] == 'l') {
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
					if (fmt[-2] == 'l') {
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
						align = VA_STACK_ALIGN(long long);
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
				size = sizeof(void *);
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
					v.ld = va_arg(ap, long double);
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf = (void *) ROUND_UP(buf, align);
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
					if (BUF_OFFSET + size > len) {
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
						*(long double *)buf = v.ld;
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
				buf += size;
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
				parsing = false;
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
			switch (*fmt) {
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
			if (*++fmt == '\0') {
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
			if (!parsing) {
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
				if (*fmt == '%') {
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
					arg_idx++;
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
					parsing = true;
     1c6:	ea18 0802 	ands.w	r8, r8, r2
				align = VA_STACK_ALIGN(size_t);
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
			switch (*fmt) {
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
				parsing = false;
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ec:	ea18 0802 	ands.w	r8, r8, r2
				}
			}
			buf += sizeof(long long);
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
		} else if (size == sizeof(int)) {
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
			int v = va_arg(ap, int);
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
			if (buf0 != NULL) {
     200:	eb56 060a 	adcs.w	r6, r6, sl
		} else if (size == sizeof(long long)) {
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
			long long v = va_arg(ap, long long);
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
			s = va_arg(ap, char *);
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
			if (is_ro && !do_ro) {
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     232:	ea1a 0a02 	ands.w	sl, sl, r2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     236:	eb76 060a 	sbcs.w	r6, r6, sl
					__ASSERT(false, "String with too many arguments");
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
					__ASSERT(false, "str_ptr_pos[] too small");
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     250:	ea19 0902 	ands.w	r9, r9, r2
				if (buf0 != NULL) {
     254:	eb75 0509 	sbcs.w	r5, r5, r9
					str_ptr_pos[s_idx] = s_ptr_idx;
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
					str_ptr_arg[s_idx] = arg_idx;
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
					str_ptr_pos[s_idx] = s_ptr_idx;
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
						s_rw_cnt++;
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
					__ASSERT(false, "str_ptr_pos[] too small");
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
				if (buf0 != NULL) {
     288:	4013      	ands	r3, r2
					str_ptr_pos[s_idx] = s_ptr_idx;
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
					str_ptr_arg[s_idx] = arg_idx;
     29c:	4770      	bx	lr
					if (is_ro) {
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
						s_ro_cnt++;
     2ae:	b402      	push	{r1}
				s_idx++;
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
					if (BUF_OFFSET + size > len) {
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
			buf += sizeof(char *);
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
			switch (*fmt) {
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
				} else if (is_ro) {
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
					len += 1;
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
				} else if (rws_pos_en) {
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
					len += strlen(s) + 1 + 1;
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
		} else {
			__ASSERT(false, "unexpected size %u", size);
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
		__ASSERT(false, "too many format args");
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     322:	930e      	str	r3, [sp, #56]	; 0x38
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     332:	fbe9 0264 	umaal	r0, r2, r9, r4

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
		for (i = 0; i < s_idx; i++) {
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
			*buf++ = str_ptr_arg[i];
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
	for (i = 0; i < s_idx; i++) {
     364:	fba9 5408 	umull	r5, r4, r9, r8
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     368:	fbea b468 	umaal	fp, r4, sl, r8
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
			if (BUF_OFFSET + 1 > len) {
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
			if (BUF_OFFSET + 1 > len) {
     384:	fbee 6568 	umaal	r6, r5, lr, r8
			*buf++ = pos;
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
		for (i = 0; i < s_idx; i++) {
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
		if (rws_pos_en) {
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
			*buf++ = str_ptr_arg[i];
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
		if (BUF_OFFSET + 1 + size > len) {
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
		*buf++ = str_ptr_pos[i];
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
		memcpy(buf, s, size);
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
		buf += size;
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
	for (i = 0; i < s_idx; i++) {
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
			size = strlen(s) + 1;
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
		return -EFAULT;
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fd8d 	bl	72f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fd9b 	bl	7320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f fc49 	bl	1008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000ca8 	.word	0x20000ca8
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00d fa43 	bl	dce4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__data_size+0x22>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__data_size+0x14>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__data_size+0x14>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__data_size+0xe>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f010 fb45 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000ca8 	.word	0x20000ca8

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 ffd6 	bl	7914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00c f85d 	bl	ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00c f80a 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f ff68 	bl	10882 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 ff95 	bl	78e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000ca8 	.word	0x20000ca8

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <sdc_init+0x22>
     9dc:	f00b ff90 	bl	c900 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <sdc_init+0x1c>
     9e6:	f00b fe41 	bl	c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <sdc_init+0x28>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <sdc_init+0x1e>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <sdc_init+0x7c>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <sdc_init+0x80>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f010 fb11 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <sdc_init+0x84>)
     a1c:	4668      	mov	r0, sp
     a1e:	f010 fa92 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <sdc_init+0x88>)
     a28:	f010 fa8d 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <sdc_init+0x8c>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <sdc_init+0x72>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <sdc_init+0x76>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <sdc_init+0x1e>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000ca8 	.word	0x20000ca8
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 ff29 	bl	7934 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fc99 	bl	7438 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f fb98 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f fbac 	bl	1029e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000cc8 	.word	0x20000cc8

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000cc8 	.word	0x20000cc8

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000cc8 	.word	0x20000cc8

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000cc8 	.word	0x20000cc8

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f010 f973 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 ff31 	bl	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00c f941 	bl	cf08 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00c f9a1 	bl	cfd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00c f94f 	bl	cf64 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000cd4 	.word	0x20000cd4
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c bbbb 	b.w	d4be <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c bbb2 	b.w	d4be <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00f f9b1 	bl	10148 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	20000ee0 	.word	0x20000ee0

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	20000ee0 	.word	0x20000ee0

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	20000ee0 	.word	0x20000ee0

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fe82 	bl	dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	20000ee0 	.word	0x20000ee0
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fea3 	bl	dcd0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fe02 	bl	dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	20000ee0 	.word	0x20000ee0
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fe7b 	bl	dcd0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	20000ee0 	.word	0x20000ee0
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fdfc 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	20000ee0 	.word	0x20000ee0
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	20000ee0 	.word	0x20000ee0
    1074:	000002a8 	.word	0x000002a8
    1078:	0000f377 	.word	0x0000f377

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fe30 	bl	dd16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fe21 	bl	dd02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fd76 	bl	dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fce3 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fcda 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c fd9b 	bl	dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fd7a 	bl	dc5c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c fd44 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f ff3d 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fd2e 	bl	dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c fc5d 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c fc0f 	bl	dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fd2a 	bl	dd66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fd1c 	bl	dd66 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f fd03 	bl	10d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fcf3 	bl	dd84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fcf5 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fcf0 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f fd64 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fce6 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fce1 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fcdb 	bl	dd9e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fcb1 	bl	dd84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f fcb2 	bl	10d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000344 	.word	0x20000344
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f fc9e 	bl	10d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000344 	.word	0x20000344

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b faaf 	bl	ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00b fa68 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	200013f4 	.word	0x200013f4
    1528:	20000330 	.word	0x20000330

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	20000330 	.word	0x20000330

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	200013f4 	.word	0x200013f4
    1560:	20000330 	.word	0x20000330

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	200013f4 	.word	0x200013f4
    1588:	20000330 	.word	0x20000330

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	200013f4 	.word	0x200013f4
    15ac:	20000330 	.word	0x20000330

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	200013f4 	.word	0x200013f4

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	20000330 	.word	0x20000330

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	200013f4 	.word	0x200013f4
    1604:	20000330 	.word	0x20000330
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	200013f4 	.word	0x200013f4

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000346 	.word	0x20000346

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000346 	.word	0x20000346

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000346 	.word	0x20000346

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000b7a 	.word	0x20000b7a

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c ffbb 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000b58 	.word	0x20000b58
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fd2b 	bl	8174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 facb 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fda9 	bl	827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fe8c 	bl	8448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fe7f 	bl	8434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 feb5 	bl	84a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fc1a 	bl	7f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fc79 	bl	8048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 ff4e 	bl	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fcc5 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fcb4 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c fb6a 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f9ac 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00f fbf0 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000b30 	.word	0x20000b30
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00f fb4b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00c f879 	bl	d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00c f813 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b ffc3 	bl	d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000b7a 	.word	0x20000b7a

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 be6b 	b.w	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00f fadb 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000b88 	.word	0x20000b88
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00c ba58 	b.w	df1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f934 	bl	7d2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f90e 	bl	7ce4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00c f836 	bl	db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f8f3 	bl	7d20 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00c f9c7 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f006 f809 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fc3b 	bl	840c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fafb 	bl	31c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fe84 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fd58 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fd4f 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000b30 	.word	0x20000b30
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00c f934 	bl	defe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 ff76 	bl	7b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000b30 	.word	0x20000b30
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f006 f8c9 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ffed 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00f f927 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fce2 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000b7a 	.word	0x20000b7a
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000b7a 	.word	0x20000b7a
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 bb6e 	b.w	8454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fce7 	bl	d808 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f9f2 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fea2 	bl	7c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f9e4 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fede 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f006 f8aa 	bl	8058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 fa60 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000b30 	.word	0x20000b30
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_HEAP_MEM_POOL_SIZE+0xa0>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b ffd0 	bl	df2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_HEAP_MEM_POOL_SIZE+0xa4>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c fb44 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c fad9 	bl	e56e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b ffaf 	bl	df2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_HEAP_MEM_POOL_SIZE+0x18>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_HEAP_MEM_POOL_SIZE+0x14>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_HEAP_MEM_POOL_SIZE+0x1e>
    2012:	e007      	b.n	2024 <CONFIG_HEAP_MEM_POOL_SIZE+0x24>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_HEAP_MEM_POOL_SIZE+0x44>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fd06 	bl	da36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_HEAP_MEM_POOL_SIZE+0x30>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_HEAP_MEM_POOL_SIZE+0x44>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_HEAP_MEM_POOL_SIZE+0x46>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_HEAP_MEM_POOL_SIZE+0x78>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f930 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_HEAP_MEM_POOL_SIZE+0xa4>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fddf 	bl	7c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_HEAP_MEM_POOL_SIZE+0x80>
    2078:	f006 f922 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fe1c 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f9a2 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000b58 	.word	0x20000b58
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	200015ed 	.word	0x200015ed

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 fa92 	bl	861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	2000141a 	.word	0x2000141a
    2108:	20000338 	.word	0x20000338

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	2000141a 	.word	0x2000141a

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	2000141a 	.word	0x2000141a

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	2000141a 	.word	0x2000141a

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fe54 	bl	de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	2000141a 	.word	0x2000141a

000021a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    21a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21ac:	460e      	mov	r6, r1
    21ae:	4607      	mov	r7, r0
    21b0:	4615      	mov	r5, r2
    21b2:	2106      	movs	r1, #6
    21b4:	4630      	mov	r0, r6
    21b6:	f00c f8c7 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    21ba:	4c0d      	ldr	r4, [pc, #52]	; (21f0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    21bc:	b160      	cbz	r0, 21d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    21be:	2000      	movs	r0, #0
    21c0:	e004      	b.n	21cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    21c2:	1821      	adds	r1, r4, r0
    21c4:	1c40      	adds	r0, r0, #1
    21c6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    21ca:	b2c0      	uxtb	r0, r0
    21cc:	78a1      	ldrb	r1, [r4, #2]
    21ce:	4281      	cmp	r1, r0
    21d0:	d8f7      	bhi.n	21c2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    21d2:	2001      	movs	r0, #1
    21d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21d8:	4631      	mov	r1, r6
    21da:	4638      	mov	r0, r7
    21dc:	f00b feb6 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    21e0:	2808      	cmp	r0, #8
    21e2:	d003      	beq.n	21ec <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    21e4:	4420      	add	r0, r4
    21e6:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    21ea:	e7f2      	b.n	21d2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    21ec:	2000      	movs	r0, #0
    21ee:	e7f1      	b.n	21d4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    21f0:	2000141a 	.word	0x2000141a

000021f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21f4:	4904      	ldr	r1, [pc, #16]	; (2208 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21f6:	788a      	ldrb	r2, [r1, #2]
    21f8:	4282      	cmp	r2, r0
    21fa:	d903      	bls.n	2204 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21fc:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2200:	1cc0      	adds	r0, r0, #3
    2202:	4770      	bx	lr
    2204:	2000      	movs	r0, #0
    2206:	4770      	bx	lr
    2208:	2000141a 	.word	0x2000141a

0000220c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    220c:	4908      	ldr	r1, [pc, #32]	; (2230 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    220e:	788a      	ldrb	r2, [r1, #2]
    2210:	4282      	cmp	r2, r0
    2212:	d903      	bls.n	221c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    2214:	180a      	adds	r2, r1, r0
    2216:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    221a:	b10a      	cbz	r2, 2220 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    221c:	2000      	movs	r0, #0
    221e:	4770      	bx	lr
    2220:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2224:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    2228:	f200 100b 	addw	r0, r0, #267	; 0x10b
    222c:	4770      	bx	lr
    222e:	0000      	.short	0x0000
    2230:	2000141a 	.word	0x2000141a

00002234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2234:	b510      	push	{r4, lr}
    2236:	f240 12d3 	movw	r2, #467	; 0x1d3
    223a:	2100      	movs	r1, #0
    223c:	4808      	ldr	r0, [pc, #32]	; (2260 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    223e:	f00e fefc 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2242:	2208      	movs	r2, #8
    2244:	21ff      	movs	r1, #255	; 0xff
    2246:	4807      	ldr	r0, [pc, #28]	; (2264 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2248:	f00e fef7 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    224c:	4805      	ldr	r0, [pc, #20]	; (2264 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    224e:	2100      	movs	r1, #0
    2250:	1f00      	subs	r0, r0, #4
    2252:	7001      	strb	r1, [r0, #0]
    2254:	7041      	strb	r1, [r0, #1]
    2256:	f44f 7161 	mov.w	r1, #900	; 0x384
    225a:	8041      	strh	r1, [r0, #2]
    225c:	bd10      	pop	{r4, pc}
    225e:	0000      	.short	0x0000
    2260:	2000141a 	.word	0x2000141a
    2264:	20000338 	.word	0x20000338

00002268 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    2268:	4901      	ldr	r1, [pc, #4]	; (2270 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    226a:	7008      	strb	r0, [r1, #0]
    226c:	4770      	bx	lr
    226e:	0000      	.short	0x0000
    2270:	20000334 	.word	0x20000334

00002274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    2276:	7800      	ldrb	r0, [r0, #0]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000334 	.word	0x20000334

00002280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2280:	4b0b      	ldr	r3, [pc, #44]	; (22b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2282:	b510      	push	{r4, lr}
    2284:	789c      	ldrb	r4, [r3, #2]
    2286:	4284      	cmp	r4, r0
    2288:	d90f      	bls.n	22aa <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    228a:	4418      	add	r0, r3
    228c:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2290:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2294:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2298:	700b      	strb	r3, [r1, #0]
    229a:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    229e:	6011      	str	r1, [r2, #0]
    22a0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    22a4:	8090      	strh	r0, [r2, #4]
    22a6:	2001      	movs	r0, #1
    22a8:	bd10      	pop	{r4, pc}
    22aa:	2000      	movs	r0, #0
    22ac:	bd10      	pop	{r4, pc}
    22ae:	0000      	.short	0x0000
    22b0:	2000141a 	.word	0x2000141a

000022b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    22b4:	4907      	ldr	r1, [pc, #28]	; (22d4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    22b6:	788a      	ldrb	r2, [r1, #2]
    22b8:	4282      	cmp	r2, r0
    22ba:	d909      	bls.n	22d0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    22bc:	4408      	add	r0, r1
    22be:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    22c2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    22c6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    22ca:	f000 0001 	and.w	r0, r0, #1
    22ce:	4770      	bx	lr
    22d0:	2000      	movs	r0, #0
    22d2:	4770      	bx	lr
    22d4:	2000141a 	.word	0x2000141a

000022d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    22d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    22dc:	4698      	mov	r8, r3
    22de:	4691      	mov	r9, r2
    22e0:	460c      	mov	r4, r1
    22e2:	4605      	mov	r5, r0
    22e4:	f000 f962 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    22e8:	4606      	mov	r6, r0
    22ea:	2810      	cmp	r0, #16
    22ec:	d006      	beq.n	22fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    22ee:	f000 f92d 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22f2:	2810      	cmp	r0, #16
    22f4:	d002      	beq.n	22fc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    22f6:	2012      	movs	r0, #18
    22f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    22fc:	4f18      	ldr	r7, [pc, #96]	; (2360 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    22fe:	78b8      	ldrb	r0, [r7, #2]
    2300:	2808      	cmp	r0, #8
    2302:	d22a      	bcs.n	235a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    2304:	2e10      	cmp	r6, #16
    2306:	d105      	bne.n	2314 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    2308:	2200      	movs	r2, #0
    230a:	4621      	mov	r1, r4
    230c:	4628      	mov	r0, r5
    230e:	f000 f931 	bl	2574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2312:	4606      	mov	r6, r0
    2314:	78bc      	ldrb	r4, [r7, #2]
    2316:	2210      	movs	r2, #16
    2318:	1c60      	adds	r0, r4, #1
    231a:	70b8      	strb	r0, [r7, #2]
    231c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    2320:	1ce8      	adds	r0, r5, #3
    2322:	4649      	mov	r1, r9
    2324:	f00b ffd8 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2328:	f105 0083 	add.w	r0, r5, #131	; 0x83
    232c:	2210      	movs	r2, #16
    232e:	4641      	mov	r1, r8
    2330:	f00b ffd2 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    2334:	2110      	movs	r1, #16
    2336:	4640      	mov	r0, r8
    2338:	f00c f806 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    233c:	443c      	add	r4, r7
    233e:	2110      	movs	r1, #16
    2340:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    2344:	4648      	mov	r0, r9
    2346:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    234a:	f00b fffd 	bl	e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    234e:	77e0      	strb	r0, [r4, #31]
    2350:	f804 6c29 	strb.w	r6, [r4, #-41]
    2354:	2000      	movs	r0, #0
    2356:	73e0      	strb	r0, [r4, #15]
    2358:	e7ce      	b.n	22f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    235a:	2007      	movs	r0, #7
    235c:	e7cc      	b.n	22f8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    235e:	0000      	.short	0x0000
    2360:	2000141a 	.word	0x2000141a

00002364 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    2364:	4806      	ldr	r0, [pc, #24]	; (2380 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    2366:	b510      	push	{r4, lr}
    2368:	7880      	ldrb	r0, [r0, #2]
    236a:	1e40      	subs	r0, r0, #1
    236c:	b244      	sxtb	r4, r0
    236e:	e004      	b.n	237a <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    2370:	b2e0      	uxtb	r0, r4
    2372:	f000 f979 	bl	2668 <CONFIG_BT_RX_STACK_SIZE+0xe8>
    2376:	1e64      	subs	r4, r4, #1
    2378:	b264      	sxtb	r4, r4
    237a:	2c00      	cmp	r4, #0
    237c:	daf8      	bge.n	2370 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    237e:	bd10      	pop	{r4, pc}
    2380:	2000141a 	.word	0x2000141a

00002384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2384:	4801      	ldr	r0, [pc, #4]	; (238c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2386:	8840      	ldrh	r0, [r0, #2]
    2388:	4770      	bx	lr
    238a:	0000      	.short	0x0000
    238c:	20000334 	.word	0x20000334

00002390 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    2390:	b138      	cbz	r0, 23a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    2392:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    2396:	4288      	cmp	r0, r1
    2398:	d803      	bhi.n	23a2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    239a:	4903      	ldr	r1, [pc, #12]	; (23a8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    239c:	8048      	strh	r0, [r1, #2]
    239e:	2001      	movs	r0, #1
    23a0:	4770      	bx	lr
    23a2:	2000      	movs	r0, #0
    23a4:	4770      	bx	lr
    23a6:	0000      	.short	0x0000
    23a8:	20000334 	.word	0x20000334

000023ac <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    23ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23b0:	4614      	mov	r4, r2
    23b2:	2501      	movs	r5, #1
    23b4:	2200      	movs	r2, #0
    23b6:	461f      	mov	r7, r3
    23b8:	462e      	mov	r6, r5
    23ba:	7022      	strb	r2, [r4, #0]
    23bc:	f000 f8f6 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    23c0:	2810      	cmp	r0, #16
    23c2:	d024      	beq.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23c4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 241c <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    23c8:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    23cc:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    23d0:	f001 0101 	and.w	r1, r1, #1
    23d4:	7021      	strb	r1, [r4, #0]
    23d6:	f000 f8b9 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    23da:	4604      	mov	r4, r0
    23dc:	2810      	cmp	r0, #16
    23de:	d016      	beq.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23e0:	b107      	cbz	r7, 23e4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    23e2:	703c      	strb	r4, [r7, #0]
    23e4:	4620      	mov	r0, r4
    23e6:	f7ff ff05 	bl	21f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23ea:	b180      	cbz	r0, 240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    23ec:	f898 1002 	ldrb.w	r1, [r8, #2]
    23f0:	4640      	mov	r0, r8
    23f2:	42a1      	cmp	r1, r4
    23f4:	d903      	bls.n	23fe <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    23f6:	1901      	adds	r1, r0, r4
    23f8:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    23fc:	e000      	b.n	2400 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    23fe:	2600      	movs	r6, #0
    2400:	eb08 0004 	add.w	r0, r8, r4
    2404:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2408:	2801      	cmp	r0, #1
    240a:	d004      	beq.n	2416 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    240c:	2500      	movs	r5, #0
    240e:	ea45 0006 	orr.w	r0, r5, r6
    2412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2416:	2501      	movs	r5, #1
    2418:	e7f9      	b.n	240e <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    241a:	0000      	.short	0x0000
    241c:	2000141a 	.word	0x2000141a

00002420 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2420:	b570      	push	{r4, r5, r6, lr}
    2422:	460d      	mov	r5, r1
    2424:	4606      	mov	r6, r0
    2426:	f000 f8c1 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    242a:	4c10      	ldr	r4, [pc, #64]	; (246c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    242c:	2810      	cmp	r0, #16
    242e:	d007      	beq.n	2440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2430:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2434:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2438:	07c9      	lsls	r1, r1, #31
    243a:	d001      	beq.n	2440 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    243c:	2001      	movs	r0, #1
    243e:	bd70      	pop	{r4, r5, r6, pc}
    2440:	7861      	ldrb	r1, [r4, #1]
    2442:	2908      	cmp	r1, #8
    2444:	d210      	bcs.n	2468 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2446:	2810      	cmp	r0, #16
    2448:	d008      	beq.n	245c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    244a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    244e:	2101      	movs	r1, #1
    2450:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2454:	7860      	ldrb	r0, [r4, #1]
    2456:	1c40      	adds	r0, r0, #1
    2458:	7060      	strb	r0, [r4, #1]
    245a:	e7ef      	b.n	243c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    245c:	2201      	movs	r2, #1
    245e:	4629      	mov	r1, r5
    2460:	4630      	mov	r0, r6
    2462:	f000 f887 	bl	2574 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2466:	e7f5      	b.n	2454 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2468:	2000      	movs	r0, #0
    246a:	bd70      	pop	{r4, r5, r6, pc}
    246c:	2000141a 	.word	0x2000141a

00002470 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2470:	b570      	push	{r4, r5, r6, lr}
    2472:	4d0b      	ldr	r5, [pc, #44]	; (24a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2474:	7828      	ldrb	r0, [r5, #0]
    2476:	1e40      	subs	r0, r0, #1
    2478:	b244      	sxtb	r4, r0
    247a:	e00a      	b.n	2492 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    247c:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2480:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2484:	07c0      	lsls	r0, r0, #31
    2486:	d002      	beq.n	248e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2488:	b2e0      	uxtb	r0, r4
    248a:	f000 f935 	bl	26f8 <CONFIG_BT_RX_STACK_SIZE+0x178>
    248e:	1e64      	subs	r4, r4, #1
    2490:	b264      	sxtb	r4, r4
    2492:	2c00      	cmp	r4, #0
    2494:	daf2      	bge.n	247c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2496:	4903      	ldr	r1, [pc, #12]	; (24a4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2498:	2000      	movs	r0, #0
    249a:	7048      	strb	r0, [r1, #1]
    249c:	bd70      	pop	{r4, r5, r6, pc}
    249e:	0000      	.short	0x0000
    24a0:	2000141a 	.word	0x2000141a
    24a4:	20000334 	.word	0x20000334

000024a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    24a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24ac:	2400      	movs	r4, #0
    24ae:	4625      	mov	r5, r4
    24b0:	4e18      	ldr	r6, [pc, #96]	; (2514 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    24b2:	e029      	b.n	2508 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    24b4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    24b8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    24bc:	07c0      	lsls	r0, r0, #31
    24be:	d021      	beq.n	2504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    24c0:	4628      	mov	r0, r5
    24c2:	f000 f843 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24c6:	4603      	mov	r3, r0
    24c8:	f7ff fe94 	bl	21f4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    24cc:	4601      	mov	r1, r0
    24ce:	2000      	movs	r0, #0
    24d0:	2b10      	cmp	r3, #16
    24d2:	d009      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    24d4:	18f2      	adds	r2, r6, r3
    24d6:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    24da:	f1bc 0f01 	cmp.w	ip, #1
    24de:	d002      	beq.n	24e6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    24e0:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    24e4:	b102      	cbz	r2, 24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    24e6:	2001      	movs	r0, #1
    24e8:	1e40      	subs	r0, r0, #1
    24ea:	4201      	tst	r1, r0
    24ec:	d10a      	bne.n	2504 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    24ee:	480a      	ldr	r0, [pc, #40]	; (2518 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    24f0:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    24f4:	5503      	strb	r3, [r0, r4]
    24f6:	4620      	mov	r0, r4
    24f8:	1c64      	adds	r4, r4, #1
    24fa:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    24fe:	b2e4      	uxtb	r4, r4
    2500:	f006 f88c 	bl	861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2504:	1c6d      	adds	r5, r5, #1
    2506:	b2ed      	uxtb	r5, r5
    2508:	7830      	ldrb	r0, [r6, #0]
    250a:	42a8      	cmp	r0, r5
    250c:	d8d2      	bhi.n	24b4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2512:	0000      	.short	0x0000
    2514:	2000141a 	.word	0x2000141a
    2518:	20000338 	.word	0x20000338
    251c:	4602      	mov	r2, r0
    251e:	4809      	ldr	r0, [pc, #36]	; (2544 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2520:	b510      	push	{r4, lr}
    2522:	7800      	ldrb	r0, [r0, #0]
    2524:	460b      	mov	r3, r1
    2526:	b158      	cbz	r0, 2540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2528:	4807      	ldr	r0, [pc, #28]	; (2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    252a:	7881      	ldrb	r1, [r0, #2]
    252c:	b141      	cbz	r1, 2540 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    252e:	b10b      	cbz	r3, 2534 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2530:	1cc0      	adds	r0, r0, #3
    2532:	e001      	b.n	2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2534:	4804      	ldr	r0, [pc, #16]	; (2548 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2536:	3083      	adds	r0, #131	; 0x83
    2538:	f005 fa84 	bl	7a44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    253c:	2001      	movs	r0, #1
    253e:	bd10      	pop	{r4, pc}
    2540:	2000      	movs	r0, #0
    2542:	bd10      	pop	{r4, pc}
    2544:	20000334 	.word	0x20000334
    2548:	2000141a 	.word	0x2000141a
    254c:	4908      	ldr	r1, [pc, #32]	; (2570 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    254e:	b510      	push	{r4, lr}
    2550:	4603      	mov	r3, r0
    2552:	2000      	movs	r0, #0
    2554:	788a      	ldrb	r2, [r1, #2]
    2556:	e006      	b.n	2566 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2558:	180c      	adds	r4, r1, r0
    255a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    255e:	429c      	cmp	r4, r3
    2560:	d004      	beq.n	256c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2562:	1c40      	adds	r0, r0, #1
    2564:	b2c0      	uxtb	r0, r0
    2566:	4282      	cmp	r2, r0
    2568:	d8f6      	bhi.n	2558 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    256a:	2010      	movs	r0, #16
    256c:	bd10      	pop	{r4, pc}
    256e:	0000      	.short	0x0000
    2570:	2000141a 	.word	0x2000141a
    2574:	b570      	push	{r4, r5, r6, lr}
    2576:	4b0c      	ldr	r3, [pc, #48]	; (25a8 <CONFIG_BT_RX_STACK_SIZE+0x28>)
    2578:	4604      	mov	r4, r0
    257a:	7818      	ldrb	r0, [r3, #0]
    257c:	1c45      	adds	r5, r0, #1
    257e:	701d      	strb	r5, [r3, #0]
    2580:	2810      	cmp	r0, #16
    2582:	d303      	bcc.n	258c <CONFIG_BT_RX_STACK_SIZE+0xc>
    2584:	2146      	movs	r1, #70	; 0x46
    2586:	2028      	movs	r0, #40	; 0x28
    2588:	f7fe fa6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    258c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2590:	680d      	ldr	r5, [r1, #0]
    2592:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2596:	8889      	ldrh	r1, [r1, #4]
    2598:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    259c:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    25a0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    25a4:	bd70      	pop	{r4, r5, r6, pc}
    25a6:	0000      	.short	0x0000
    25a8:	2000141a 	.word	0x2000141a
    25ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ae:	4c1a      	ldr	r4, [pc, #104]	; (2618 <CONFIG_BT_RX_STACK_SIZE+0x98>)
    25b0:	4603      	mov	r3, r0
    25b2:	2000      	movs	r0, #0
    25b4:	7825      	ldrb	r5, [r4, #0]
    25b6:	e02a      	b.n	260e <CONFIG_BT_RX_STACK_SIZE+0x8e>
    25b8:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    25bc:	780f      	ldrb	r7, [r1, #0]
    25be:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    25c2:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    25c6:	ea87 070c 	eor.w	r7, r7, ip
    25ca:	405e      	eors	r6, r3
    25cc:	443e      	add	r6, r7
    25ce:	784f      	ldrb	r7, [r1, #1]
    25d0:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    25d4:	ea87 070c 	eor.w	r7, r7, ip
    25d8:	443e      	add	r6, r7
    25da:	788f      	ldrb	r7, [r1, #2]
    25dc:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    25e0:	ea87 070c 	eor.w	r7, r7, ip
    25e4:	443e      	add	r6, r7
    25e6:	78cf      	ldrb	r7, [r1, #3]
    25e8:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    25ec:	ea87 070c 	eor.w	r7, r7, ip
    25f0:	443e      	add	r6, r7
    25f2:	790f      	ldrb	r7, [r1, #4]
    25f4:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    25f8:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    25fc:	ea87 070c 	eor.w	r7, r7, ip
    2600:	443e      	add	r6, r7
    2602:	794f      	ldrb	r7, [r1, #5]
    2604:	4057      	eors	r7, r2
    2606:	42f7      	cmn	r7, r6
    2608:	d004      	beq.n	2614 <CONFIG_BT_RX_STACK_SIZE+0x94>
    260a:	1c40      	adds	r0, r0, #1
    260c:	b2c0      	uxtb	r0, r0
    260e:	4285      	cmp	r5, r0
    2610:	d8d2      	bhi.n	25b8 <CONFIG_BT_RX_STACK_SIZE+0x38>
    2612:	2010      	movs	r0, #16
    2614:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2616:	0000      	.short	0x0000
    2618:	2000141a 	.word	0x2000141a
    261c:	b570      	push	{r4, r5, r6, lr}
    261e:	4605      	mov	r5, r0
    2620:	f7ff ff94 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2624:	2810      	cmp	r0, #16
    2626:	d11c      	bne.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    2628:	4c0e      	ldr	r4, [pc, #56]	; (2664 <CONFIG_BT_RX_STACK_SIZE+0xe4>)
    262a:	7820      	ldrb	r0, [r4, #0]
    262c:	1e40      	subs	r0, r0, #1
    262e:	b2c0      	uxtb	r0, r0
    2630:	7020      	strb	r0, [r4, #0]
    2632:	42a8      	cmp	r0, r5
    2634:	d015      	beq.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    2636:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    263a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    263e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2642:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2646:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    264a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    264e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2652:	7820      	ldrb	r0, [r4, #0]
    2654:	f7ff ff7a 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2658:	2810      	cmp	r0, #16
    265a:	d002      	beq.n	2662 <CONFIG_BT_RX_STACK_SIZE+0xe2>
    265c:	4420      	add	r0, r4
    265e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2662:	bd70      	pop	{r4, r5, r6, pc}
    2664:	2000141a 	.word	0x2000141a
    2668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    266c:	4c21      	ldr	r4, [pc, #132]	; (26f4 <CONFIG_BT_RX_STACK_SIZE+0x174>)
    266e:	4606      	mov	r6, r0
    2670:	19a7      	adds	r7, r4, r6
    2672:	78a0      	ldrb	r0, [r4, #2]
    2674:	1e40      	subs	r0, r0, #1
    2676:	b2c5      	uxtb	r5, r0
    2678:	70a5      	strb	r5, [r4, #2]
    267a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    267e:	42ae      	cmp	r6, r5
    2680:	d02a      	beq.n	26d8 <CONFIG_BT_RX_STACK_SIZE+0x158>
    2682:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    2686:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    268a:	f10a 0103 	add.w	r1, sl, #3
    268e:	f109 0003 	add.w	r0, r9, #3
    2692:	2210      	movs	r2, #16
    2694:	f00e fc57 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2698:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    269c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    26a0:	2210      	movs	r2, #16
    26a2:	f00e fc50 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26a6:	1960      	adds	r0, r4, r5
    26a8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    26ac:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    26b0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    26b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    26b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    26bc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    26c0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    26c4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    26c8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    26cc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    26d0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    26d4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    26d8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    26dc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    26e0:	07c0      	lsls	r0, r0, #31
    26e2:	d104      	bne.n	26ee <CONFIG_BT_RX_STACK_SIZE+0x16e>
    26e4:	4640      	mov	r0, r8
    26e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26ea:	f7ff bf97 	b.w	261c <CONFIG_BT_RX_STACK_SIZE+0x9c>
    26ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    26f2:	0000      	.short	0x0000
    26f4:	2000141a 	.word	0x2000141a
    26f8:	4905      	ldr	r1, [pc, #20]	; (2710 <CONFIG_BT_RX_STACK_SIZE+0x190>)
    26fa:	784a      	ldrb	r2, [r1, #1]
    26fc:	1e52      	subs	r2, r2, #1
    26fe:	704a      	strb	r2, [r1, #1]
    2700:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2704:	2200      	movs	r2, #0
    2706:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    270a:	f7ff bf87 	b.w	261c <CONFIG_BT_RX_STACK_SIZE+0x9c>
    270e:	0000      	.short	0x0000
    2710:	2000141a 	.word	0x2000141a

00002714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2718:	4604      	mov	r4, r0
    271a:	f100 0788 	add.w	r7, r0, #136	; 0x88
    271e:	b171      	cbz	r1, 273e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2720:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2724:	1e75      	subs	r5, r6, #1
    2726:	2901      	cmp	r1, #1
    2728:	d016      	beq.n	2758 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    272a:	2902      	cmp	r1, #2
    272c:	d025      	beq.n	277a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    272e:	2903      	cmp	r1, #3
    2730:	d110      	bne.n	2754 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2732:	4631      	mov	r1, r6
    2734:	4628      	mov	r0, r5
    2736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    273a:	f00b be71 	b.w	e420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    273e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2742:	2100      	movs	r1, #0
    2744:	f00e fc79 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2748:	4638      	mov	r0, r7
    274a:	f000 f84d 	bl	27e8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    274e:	2020      	movs	r0, #32
    2750:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2758:	6921      	ldr	r1, [r4, #16]
    275a:	480d      	ldr	r0, [pc, #52]	; (2790 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    275c:	460a      	mov	r2, r1
    275e:	4408      	add	r0, r1
    2760:	fbb0 f0f1 	udiv	r0, r0, r1
    2764:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    2768:	f640 30b8 	movw	r0, #3000	; 0xbb8
    276c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    2770:	8b63      	ldrh	r3, [r4, #26]
    2772:	4638      	mov	r0, r7
    2774:	f000 f80e 	bl	2794 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    2778:	e7db      	b.n	2732 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    277a:	6901      	ldr	r1, [r0, #16]
    277c:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    2780:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    2784:	4638      	mov	r0, r7
    2786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    278a:	f000 b803 	b.w	2794 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    278e:	0000      	.short	0x0000
    2790:	01c9c37f 	.word	0x01c9c37f
    2794:	b510      	push	{r4, lr}
    2796:	2400      	movs	r4, #0
    2798:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    279c:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    27a0:	434c      	muls	r4, r1
    27a2:	fbb4 f4f2 	udiv	r4, r4, r2
    27a6:	f820 4912 	strh.w	r4, [r0], #-18
    27aa:	f240 2471 	movw	r4, #625	; 0x271
    27ae:	4363      	muls	r3, r4
    27b0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27b4:	1e5b      	subs	r3, r3, #1
    27b6:	fbb3 f3f2 	udiv	r3, r3, r2
    27ba:	8203      	strh	r3, [r0, #16]
    27bc:	4b09      	ldr	r3, [pc, #36]	; (27e4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    27be:	fbb3 f3f2 	udiv	r3, r3, r2
    27c2:	1c5b      	adds	r3, r3, #1
    27c4:	82c3      	strh	r3, [r0, #22]
    27c6:	8903      	ldrh	r3, [r0, #8]
    27c8:	4363      	muls	r3, r4
    27ca:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    27ce:	1e5b      	subs	r3, r3, #1
    27d0:	fbb3 f3f2 	udiv	r3, r3, r2
    27d4:	6043      	str	r3, [r0, #4]
    27d6:	6803      	ldr	r3, [r0, #0]
    27d8:	434b      	muls	r3, r1
    27da:	fbb3 f1f2 	udiv	r1, r3, r2
    27de:	6001      	str	r1, [r0, #0]
    27e0:	bd10      	pop	{r4, pc}
    27e2:	0000      	.short	0x0000
    27e4:	02625a00 	.word	0x02625a00
    27e8:	2101      	movs	r1, #1
    27ea:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    27ee:	490b      	ldr	r1, [pc, #44]	; (281c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    27f0:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    27f4:	2107      	movs	r1, #7
    27f6:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    27fa:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    27fe:	780a      	ldrb	r2, [r1, #0]
    2800:	f022 0204 	bic.w	r2, r2, #4
    2804:	700a      	strb	r2, [r1, #0]
    2806:	21fe      	movs	r1, #254	; 0xfe
    2808:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    280c:	217f      	movs	r1, #127	; 0x7f
    280e:	7641      	strb	r1, [r0, #25]
    2810:	4903      	ldr	r1, [pc, #12]	; (2820 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2812:	6081      	str	r1, [r0, #8]
    2814:	2100      	movs	r1, #0
    2816:	e9c0 1100 	strd	r1, r1, [r0]
    281a:	4770      	bx	lr
    281c:	3404492f 	.word	0x3404492f
    2820:	fffce000 	.word	0xfffce000

00002824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2824:	4902      	ldr	r1, [pc, #8]	; (2830 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2826:	f991 1000 	ldrsb.w	r1, [r1]
    282a:	f00b bdaa 	b.w	e382 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x3a>
    282e:	0000      	.short	0x0000
    2830:	20000354 	.word	0x20000354

00002834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2834:	b508      	push	{r3, lr}
    2836:	207f      	movs	r0, #127	; 0x7f
    2838:	f88d 0000 	strb.w	r0, [sp]
    283c:	4668      	mov	r0, sp
    283e:	f005 fded 	bl	841c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2842:	b140      	cbz	r0, 2856 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2844:	4805      	ldr	r0, [pc, #20]	; (285c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2846:	7840      	ldrb	r0, [r0, #1]
    2848:	4240      	negs	r0, r0
    284a:	b241      	sxtb	r1, r0
    284c:	f99d 0000 	ldrsb.w	r0, [sp]
    2850:	f00b fd97 	bl	e382 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x3a>
    2854:	bd08      	pop	{r3, pc}
    2856:	f99d 0000 	ldrsb.w	r0, [sp]
    285a:	bd08      	pop	{r3, pc}
    285c:	20000354 	.word	0x20000354

00002860 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    2860:	4909      	ldr	r1, [pc, #36]	; (2888 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    2862:	b508      	push	{r3, lr}
    2864:	7809      	ldrb	r1, [r1, #0]
    2866:	f88d 1000 	strb.w	r1, [sp]
    286a:	9900      	ldr	r1, [sp, #0]
    286c:	9100      	str	r1, [sp, #0]
    286e:	f89d 1000 	ldrb.w	r1, [sp]
    2872:	b109      	cbz	r1, 2878 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    2874:	2000      	movs	r0, #0
    2876:	bd08      	pop	{r3, pc}
    2878:	4903      	ldr	r1, [pc, #12]	; (2888 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    287a:	f8d1 2001 	ldr.w	r2, [r1, #1]
    287e:	6002      	str	r2, [r0, #0]
    2880:	7949      	ldrb	r1, [r1, #5]
    2882:	7101      	strb	r1, [r0, #4]
    2884:	2001      	movs	r0, #1
    2886:	bd08      	pop	{r3, pc}
    2888:	20000356 	.word	0x20000356

0000288c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    288c:	4905      	ldr	r1, [pc, #20]	; (28a4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    288e:	22ff      	movs	r2, #255	; 0xff
    2890:	700a      	strb	r2, [r1, #0]
    2892:	460a      	mov	r2, r1
    2894:	6803      	ldr	r3, [r0, #0]
    2896:	f8c2 3001 	str.w	r3, [r2, #1]
    289a:	7900      	ldrb	r0, [r0, #4]
    289c:	7150      	strb	r0, [r2, #5]
    289e:	2000      	movs	r0, #0
    28a0:	7008      	strb	r0, [r1, #0]
    28a2:	4770      	bx	lr
    28a4:	20000356 	.word	0x20000356
    28a8:	b570      	push	{r4, r5, r6, lr}
    28aa:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    28ae:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    28b2:	2401      	movs	r4, #1
    28b4:	fb03 2101 	mla	r1, r3, r1, r2
    28b8:	2225      	movs	r2, #37	; 0x25
    28ba:	fbb1 f3f2 	udiv	r3, r1, r2
    28be:	fb02 1113 	mls	r1, r2, r3, r1
    28c2:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    28c6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    28ca:	f001 0307 	and.w	r3, r1, #7
    28ce:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    28d2:	fa04 f303 	lsl.w	r3, r4, r3
    28d6:	421a      	tst	r2, r3
    28d8:	d004      	beq.n	28e4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    28da:	bf00      	nop
    28dc:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    28e0:	2000      	movs	r0, #0
    28e2:	bd70      	pop	{r4, r5, r6, pc}
    28e4:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    28e8:	fbb1 f3f2 	udiv	r3, r1, r2
    28ec:	fb02 1113 	mls	r1, r2, r3, r1
    28f0:	1c49      	adds	r1, r1, #1
    28f2:	b2c9      	uxtb	r1, r1
    28f4:	2300      	movs	r3, #0
    28f6:	18c5      	adds	r5, r0, r3
    28f8:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    28fc:	428a      	cmp	r2, r1
    28fe:	d312      	bcc.n	2926 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2900:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2904:	2200      	movs	r2, #0
    2906:	bf00      	nop
    2908:	fa04 f602 	lsl.w	r6, r4, r2
    290c:	4235      	tst	r5, r6
    290e:	d001      	beq.n	2914 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2910:	1e49      	subs	r1, r1, #1
    2912:	b2c9      	uxtb	r1, r1
    2914:	b121      	cbz	r1, 2920 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2916:	1c52      	adds	r2, r2, #1
    2918:	b2d2      	uxtb	r2, r2
    291a:	2a08      	cmp	r2, #8
    291c:	d3f4      	bcc.n	2908 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    291e:	e004      	b.n	292a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2920:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2924:	e7da      	b.n	28dc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2926:	1a89      	subs	r1, r1, r2
    2928:	b2c9      	uxtb	r1, r1
    292a:	1c5b      	adds	r3, r3, #1
    292c:	b2db      	uxtb	r3, r3
    292e:	2b05      	cmp	r3, #5
    2930:	d3e1      	bcc.n	28f6 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2932:	201f      	movs	r0, #31
    2934:	bd70      	pop	{r4, r5, r6, pc}
    2936:	0000      	movs	r0, r0
    2938:	b570      	push	{r4, r5, r6, lr}
    293a:	1c49      	adds	r1, r1, #1
    293c:	2300      	movs	r3, #0
    293e:	b2c9      	uxtb	r1, r1
    2940:	2401      	movs	r4, #1
    2942:	18c5      	adds	r5, r0, r3
    2944:	79aa      	ldrb	r2, [r5, #6]
    2946:	428a      	cmp	r2, r1
    2948:	d312      	bcc.n	2970 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    294a:	f895 5001 	ldrb.w	r5, [r5, #1]
    294e:	2200      	movs	r2, #0
    2950:	fa04 f602 	lsl.w	r6, r4, r2
    2954:	4235      	tst	r5, r6
    2956:	d001      	beq.n	295c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    2958:	1e49      	subs	r1, r1, #1
    295a:	b2c9      	uxtb	r1, r1
    295c:	b121      	cbz	r1, 2968 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    295e:	1c52      	adds	r2, r2, #1
    2960:	b2d2      	uxtb	r2, r2
    2962:	2a08      	cmp	r2, #8
    2964:	d3f4      	bcc.n	2950 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    2966:	e005      	b.n	2974 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    2968:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    296c:	b2c0      	uxtb	r0, r0
    296e:	bd70      	pop	{r4, r5, r6, pc}
    2970:	1a89      	subs	r1, r1, r2
    2972:	b2c9      	uxtb	r1, r1
    2974:	1c5b      	adds	r3, r3, #1
    2976:	b2db      	uxtb	r3, r3
    2978:	2b05      	cmp	r3, #5
    297a:	d3e2      	bcc.n	2942 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    297c:	219d      	movs	r1, #157	; 0x9d
    297e:	2046      	movs	r0, #70	; 0x46
    2980:	f7fe f870 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002984 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2984:	7841      	ldrb	r1, [r0, #1]
    2986:	b141      	cbz	r1, 299a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2988:	78c0      	ldrb	r0, [r0, #3]
    298a:	282b      	cmp	r0, #43	; 0x2b
    298c:	d203      	bcs.n	2996 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    298e:	4a04      	ldr	r2, [pc, #16]	; (29a0 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2990:	5c10      	ldrb	r0, [r2, r0]
    2992:	4288      	cmp	r0, r1
    2994:	d101      	bne.n	299a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2996:	2001      	movs	r0, #1
    2998:	4770      	bx	lr
    299a:	2000      	movs	r0, #0
    299c:	4770      	bx	lr
    299e:	0000      	.short	0x0000
    29a0:	00011184 	.word	0x00011184

000029a4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    29a4:	b510      	push	{r4, lr}
    29a6:	2201      	movs	r2, #1
    29a8:	70c1      	strb	r1, [r0, #3]
    29aa:	292b      	cmp	r1, #43	; 0x2b
    29ac:	d202      	bcs.n	29b4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    29ae:	4a06      	ldr	r2, [pc, #24]	; (29c8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    29b0:	5c52      	ldrb	r2, [r2, r1]
    29b2:	e006      	b.n	29c2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    29b4:	29ff      	cmp	r1, #255	; 0xff
    29b6:	d004      	beq.n	29c2 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    29b8:	f240 4175 	movw	r1, #1141	; 0x475
    29bc:	202a      	movs	r0, #42	; 0x2a
    29be:	f7fe f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29c2:	7042      	strb	r2, [r0, #1]
    29c4:	bd10      	pop	{r4, pc}
    29c6:	0000      	.short	0x0000
    29c8:	00011184 	.word	0x00011184

000029cc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    29cc:	4904      	ldr	r1, [pc, #16]	; (29e0 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    29ce:	7c89      	ldrb	r1, [r1, #18]
    29d0:	0749      	lsls	r1, r1, #29
    29d2:	d400      	bmi.n	29d6 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    29d4:	b108      	cbz	r0, 29da <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    29d6:	2000      	movs	r0, #0
    29d8:	4770      	bx	lr
    29da:	2001      	movs	r0, #1
    29dc:	4770      	bx	lr
    29de:	0000      	.short	0x0000
    29e0:	20000eec 	.word	0x20000eec

000029e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    29e4:	4803      	ldr	r0, [pc, #12]	; (29f4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    29e6:	7c80      	ldrb	r0, [r0, #18]
    29e8:	0780      	lsls	r0, r0, #30
    29ea:	d401      	bmi.n	29f0 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    29ec:	2001      	movs	r0, #1
    29ee:	4770      	bx	lr
    29f0:	2000      	movs	r0, #0
    29f2:	4770      	bx	lr
    29f4:	20000eec 	.word	0x20000eec

000029f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    29f8:	4803      	ldr	r0, [pc, #12]	; (2a08 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    29fa:	7c80      	ldrb	r0, [r0, #18]
    29fc:	07c0      	lsls	r0, r0, #31
    29fe:	d001      	beq.n	2a04 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2a00:	2000      	movs	r0, #0
    2a02:	4770      	bx	lr
    2a04:	2001      	movs	r0, #1
    2a06:	4770      	bx	lr
    2a08:	20000eec 	.word	0x20000eec
    2a0c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2a10:	4688      	mov	r8, r1
    2a12:	4699      	mov	r9, r3
    2a14:	4615      	mov	r5, r2
    2a16:	4604      	mov	r4, r0
    2a18:	a901      	add	r1, sp, #4
    2a1a:	f00b faf8 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2a1e:	bbb0      	cbnz	r0, 2a8e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2a20:	9e02      	ldr	r6, [sp, #8]
    2a22:	2001      	movs	r0, #1
    2a24:	3688      	adds	r6, #136	; 0x88
    2a26:	b17d      	cbz	r5, 2a48 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2a28:	4620      	mov	r0, r4
    2a2a:	f7fe fbfd 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a2e:	0004      	movs	r4, r0
    2a30:	d00d      	beq.n	2a4e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2a32:	4629      	mov	r1, r5
    2a34:	f00a ffd1 	bl	d9da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2a38:	b118      	cbz	r0, 2a42 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2a3a:	4918      	ldr	r1, [pc, #96]	; (2a9c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2a3c:	8849      	ldrh	r1, [r1, #2]
    2a3e:	42a9      	cmp	r1, r5
    2a40:	d207      	bcs.n	2a52 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2a42:	2000      	movs	r0, #0
    2a44:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2a48:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2a4c:	e01f      	b.n	2a8e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2a4e:	2167      	movs	r1, #103	; 0x67
    2a50:	e020      	b.n	2a94 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2a52:	4601      	mov	r1, r0
    2a54:	466a      	mov	r2, sp
    2a56:	4620      	mov	r0, r4
    2a58:	f00a ffb8 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2a5c:	9800      	ldr	r0, [sp, #0]
    2a5e:	2700      	movs	r7, #0
    2a60:	8007      	strh	r7, [r0, #0]
    2a62:	7087      	strb	r7, [r0, #2]
    2a64:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2a68:	b109      	cbz	r1, 2a6e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2a6a:	f04f 0802 	mov.w	r8, #2
    2a6e:	4641      	mov	r1, r8
    2a70:	f00b fde3 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2a74:	9800      	ldr	r0, [sp, #0]
    2a76:	462a      	mov	r2, r5
    2a78:	4649      	mov	r1, r9
    2a7a:	1cc0      	adds	r0, r0, #3
    2a7c:	f00e fa63 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a80:	4620      	mov	r0, r4
    2a82:	4629      	mov	r1, r5
    2a84:	f00a ff60 	bl	d948 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2a88:	b118      	cbz	r0, 2a92 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    2a8a:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2a8e:	2001      	movs	r0, #1
    2a90:	e7d8      	b.n	2a44 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2a92:	217c      	movs	r1, #124	; 0x7c
    2a94:	202b      	movs	r0, #43	; 0x2b
    2a96:	f7fd ffe5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a9a:	0000      	.short	0x0000
    2a9c:	20000eec 	.word	0x20000eec

00002aa0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    2aa0:	4809      	ldr	r0, [pc, #36]	; (2ac8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2aa2:	b082      	sub	sp, #8
    2aa4:	7a00      	ldrb	r0, [r0, #8]
    2aa6:	f88d 0000 	strb.w	r0, [sp]
    2aaa:	9800      	ldr	r0, [sp, #0]
    2aac:	9000      	str	r0, [sp, #0]
    2aae:	f89d 0000 	ldrb.w	r0, [sp]
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d105      	bne.n	2ac2 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    2ab6:	2202      	movs	r2, #2
    2ab8:	4904      	ldr	r1, [pc, #16]	; (2acc <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    2aba:	4803      	ldr	r0, [pc, #12]	; (2ac8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2abc:	b002      	add	sp, #8
    2abe:	f00b bdef 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ac2:	b002      	add	sp, #8
    2ac4:	4770      	bx	lr
    2ac6:	0000      	.short	0x0000
    2ac8:	20000f04 	.word	0x20000f04
    2acc:	0000e6e7 	.word	0x0000e6e7

00002ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ad4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2c94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    2ad8:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2c98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2adc:	4683      	mov	fp, r0
    2ade:	f04f 0901 	mov.w	r9, #1
    2ae2:	2600      	movs	r6, #0
    2ae4:	f8d8 0004 	ldr.w	r0, [r8, #4]
    2ae8:	7a00      	ldrb	r0, [r0, #8]
    2aea:	f88d 0000 	strb.w	r0, [sp]
    2aee:	9800      	ldr	r0, [sp, #0]
    2af0:	9000      	str	r0, [sp, #0]
    2af2:	f89d 1000 	ldrb.w	r1, [sp]
    2af6:	292a      	cmp	r1, #42	; 0x2a
    2af8:	d106      	bne.n	2b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2afa:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2afe:	b119      	cbz	r1, 2b08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2b00:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2b04:	2800      	cmp	r0, #0
    2b06:	d06f      	beq.n	2be8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2b08:	2700      	movs	r7, #0
    2b0a:	f88d 6000 	strb.w	r6, [sp]
    2b0e:	4668      	mov	r0, sp
    2b10:	f000 f924 	bl	2d5c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2b14:	f89d 1000 	ldrb.w	r1, [sp]
    2b18:	2900      	cmp	r1, #0
    2b1a:	d1f8      	bne.n	2b0e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d063      	beq.n	2be8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2b20:	4604      	mov	r4, r0
    2b22:	7a00      	ldrb	r0, [r0, #8]
    2b24:	f88d 0000 	strb.w	r0, [sp]
    2b28:	9800      	ldr	r0, [sp, #0]
    2b2a:	9000      	str	r0, [sp, #0]
    2b2c:	f89d 5000 	ldrb.w	r5, [sp]
    2b30:	1ea8      	subs	r0, r5, #2
    2b32:	2830      	cmp	r0, #48	; 0x30
    2b34:	d27b      	bcs.n	2c2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    2b36:	e8df f000 	tbb	[pc, r0]
    2b3a:	3b18      	.short	0x3b18
    2b3c:	97359727 	.word	0x97359727
    2b40:	7b977b3b 	.word	0x7b977b3b
    2b44:	7b417b7b 	.word	0x7b417b7b
    2b48:	97359797 	.word	0x97359797
    2b4c:	35977b7b 	.word	0x35977b7b
    2b50:	7b979797 	.word	0x7b979797
    2b54:	7b97975a 	.word	0x7b97975a
    2b58:	8f7b7b97 	.word	0x8f7b7b97
    2b5c:	2197977b 	.word	0x2197977b
    2b60:	97816963 	.word	0x97816963
    2b64:	97979797 	.word	0x97979797
    2b68:	6397      	.short	0x6397
    2b6a:	6862      	ldr	r2, [r4, #4]
    2b6c:	b912      	cbnz	r2, 2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2b6e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    2b72:	e076      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2b74:	4659      	mov	r1, fp
    2b76:	4620      	mov	r0, r4
    2b78:	4790      	blx	r2
    2b7a:	e050      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2b7c:	6862      	ldr	r2, [r4, #4]
    2b7e:	2a00      	cmp	r2, #0
    2b80:	d1f8      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2b82:	f240 11ad 	movw	r1, #429	; 0x1ad
    2b86:	e06c      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2b88:	f001 ff70 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    2b8c:	b128      	cbz	r0, 2b9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2b8e:	6862      	ldr	r2, [r4, #4]
    2b90:	b12a      	cbz	r2, 2b9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    2b92:	4659      	mov	r1, fp
    2b94:	4620      	mov	r0, r4
    2b96:	4790      	blx	r2
    2b98:	e07a      	b.n	2c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2b9a:	2701      	movs	r7, #1
    2b9c:	e03f      	b.n	2c1e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    2b9e:	f240 2133 	movw	r1, #563	; 0x233
    2ba2:	e05e      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ba4:	6862      	ldr	r2, [r4, #4]
    2ba6:	2a00      	cmp	r2, #0
    2ba8:	d1e4      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2baa:	f240 213f 	movw	r1, #575	; 0x23f
    2bae:	e058      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bb0:	6862      	ldr	r2, [r4, #4]
    2bb2:	2a00      	cmp	r2, #0
    2bb4:	d1de      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2bb6:	f240 214b 	movw	r1, #587	; 0x24b
    2bba:	e052      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bbc:	6860      	ldr	r0, [r4, #4]
    2bbe:	465d      	mov	r5, fp
    2bc0:	b180      	cbz	r0, 2be4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2bc2:	8804      	ldrh	r4, [r0, #0]
    2bc4:	4620      	mov	r0, r4
    2bc6:	f7fe fb2f 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2bca:	b170      	cbz	r0, 2bea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2bcc:	706e      	strb	r6, [r5, #1]
    2bce:	220f      	movs	r2, #15
    2bd0:	702a      	strb	r2, [r5, #0]
    2bd2:	80ec      	strh	r4, [r5, #6]
    2bd4:	f8a5 9008 	strh.w	r9, [r5, #8]
    2bd8:	4631      	mov	r1, r6
    2bda:	f885 9004 	strb.w	r9, [r5, #4]
    2bde:	f00a ff93 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2be2:	e055      	b.n	2c90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2be4:	21ce      	movs	r1, #206	; 0xce
    2be6:	e03c      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2be8:	e031      	b.n	2c4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2bea:	21ae      	movs	r1, #174	; 0xae
    2bec:	e039      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2bee:	6862      	ldr	r2, [r4, #4]
    2bf0:	b11a      	cbz	r2, 2bfa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2bf2:	4659      	mov	r1, fp
    2bf4:	4620      	mov	r0, r4
    2bf6:	4790      	blx	r2
    2bf8:	e7cf      	b.n	2b9a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2bfa:	f240 2163 	movw	r1, #611	; 0x263
    2bfe:	e030      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c00:	6862      	ldr	r2, [r4, #4]
    2c02:	2a00      	cmp	r2, #0
    2c04:	d1b6      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c06:	f240 216f 	movw	r1, #623	; 0x26f
    2c0a:	e02a      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c0c:	f88b 6001 	strb.w	r6, [fp, #1]
    2c10:	211a      	movs	r1, #26
    2c12:	f88b 1000 	strb.w	r1, [fp]
    2c16:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2c1a:	f8cb 1004 	str.w	r1, [fp, #4]
    2c1e:	7226      	strb	r6, [r4, #8]
    2c20:	2d21      	cmp	r5, #33	; 0x21
    2c22:	d024      	beq.n	2c6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2c24:	2d14      	cmp	r5, #20
    2c26:	d025      	beq.n	2c74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2c28:	2d22      	cmp	r5, #34	; 0x22
    2c2a:	d02a      	beq.n	2c82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2c2c:	e02e      	b.n	2c8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2c2e:	e01b      	b.n	2c68 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2c30:	6862      	ldr	r2, [r4, #4]
    2c32:	2a00      	cmp	r2, #0
    2c34:	d19e      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c36:	f240 2196 	movw	r1, #662	; 0x296
    2c3a:	e012      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c3c:	4817      	ldr	r0, [pc, #92]	; (2c9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2c3e:	6802      	ldr	r2, [r0, #0]
    2c40:	b122      	cbz	r2, 2c4c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2c42:	6860      	ldr	r0, [r4, #4]
    2c44:	b128      	cbz	r0, 2c52 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2c46:	8800      	ldrh	r0, [r0, #0]
    2c48:	4659      	mov	r1, fp
    2c4a:	4790      	blx	r2
    2c4c:	2002      	movs	r0, #2
    2c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c52:	f240 219f 	movw	r1, #671	; 0x29f
    2c56:	e004      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c58:	6862      	ldr	r2, [r4, #4]
    2c5a:	2a00      	cmp	r2, #0
    2c5c:	d18a      	bne.n	2b74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2c5e:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2c62:	2010      	movs	r0, #16
    2c64:	f7fd fefe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c68:	f240 21bd 	movw	r1, #701	; 0x2bd
    2c6c:	e7f9      	b.n	2c62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2c6e:	f7ff feb9 	bl	29e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2c72:	e008      	b.n	2c86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2c74:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2c78:	f000 0001 	and.w	r0, r0, #1
    2c7c:	f7ff fea6 	bl	29cc <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2c80:	e001      	b.n	2c86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2c82:	f7ff feb9 	bl	29f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2c86:	2800      	cmp	r0, #0
    2c88:	f47f af2c 	bne.w	2ae4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2c8c:	2f00      	cmp	r7, #0
    2c8e:	d1fb      	bne.n	2c88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2c90:	2004      	movs	r0, #4
    2c92:	e7dc      	b.n	2c4e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2c94:	20000f18 	.word	0x20000f18
    2c98:	20000eec 	.word	0x20000eec
    2c9c:	200000b0 	.word	0x200000b0

00002ca0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ca0:	4901      	ldr	r1, [pc, #4]	; (2ca8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ca2:	7008      	strb	r0, [r1, #0]
    2ca4:	f000 b8b0 	b.w	2e08 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2ca8:	2000035c 	.word	0x2000035c

00002cac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2cac:	4902      	ldr	r1, [pc, #8]	; (2cb8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2cae:	4801      	ldr	r0, [pc, #4]	; (2cb4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2cb0:	6008      	str	r0, [r1, #0]
    2cb2:	4770      	bx	lr
    2cb4:	00002cbd 	.word	0x00002cbd
    2cb8:	200000b0 	.word	0x200000b0
    2cbc:	b538      	push	{r3, r4, r5, lr}
    2cbe:	000d      	movs	r5, r1
    2cc0:	d014      	beq.n	2cec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2cc2:	80a8      	strh	r0, [r5, #4]
    2cc4:	2100      	movs	r1, #0
    2cc6:	7269      	strb	r1, [r5, #9]
    2cc8:	f7fe fa98 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2ccc:	4604      	mov	r4, r0
    2cce:	f00a fe5f 	bl	d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2cd2:	b168      	cbz	r0, 2cf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2cd4:	4601      	mov	r1, r0
    2cd6:	466a      	mov	r2, sp
    2cd8:	4620      	mov	r0, r4
    2cda:	f00a fe77 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2cde:	80e8      	strh	r0, [r5, #6]
    2ce0:	b148      	cbz	r0, 2cf6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2ce2:	28fb      	cmp	r0, #251	; 0xfb
    2ce4:	d90a      	bls.n	2cfc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2ce6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2cea:	e032      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cec:	21fc      	movs	r1, #252	; 0xfc
    2cee:	e030      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cf0:	f240 1105 	movw	r1, #261	; 0x105
    2cf4:	e02d      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cf6:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2cfa:	e02a      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2cfc:	9800      	ldr	r0, [sp, #0]
    2cfe:	f00b fc5a 	bl	e5b6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2d02:	2801      	cmp	r0, #1
    2d04:	d004      	beq.n	2d10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2d06:	2802      	cmp	r0, #2
    2d08:	d002      	beq.n	2d10 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2d0a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2d0e:	e020      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d10:	7228      	strb	r0, [r5, #8]
    2d12:	6828      	ldr	r0, [r5, #0]
    2d14:	b1a8      	cbz	r0, 2d42 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2d16:	9900      	ldr	r1, [sp, #0]
    2d18:	88ea      	ldrh	r2, [r5, #6]
    2d1a:	1cc9      	adds	r1, r1, #3
    2d1c:	f00e f913 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2d20:	4620      	mov	r0, r4
    2d22:	f00a fdfd 	bl	d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2d26:	b178      	cbz	r0, 2d48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2d28:	4620      	mov	r0, r4
    2d2a:	2100      	movs	r1, #0
    2d2c:	f00a feec 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2d30:	b168      	cbz	r0, 2d4e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2d32:	4809      	ldr	r0, [pc, #36]	; (2d58 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2d34:	7cc1      	ldrb	r1, [r0, #19]
    2d36:	2900      	cmp	r1, #0
    2d38:	d002      	beq.n	2d40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2d3a:	8a81      	ldrh	r1, [r0, #20]
    2d3c:	1e49      	subs	r1, r1, #1
    2d3e:	8281      	strh	r1, [r0, #20]
    2d40:	bd38      	pop	{r3, r4, r5, pc}
    2d42:	f240 1123 	movw	r1, #291	; 0x123
    2d46:	e004      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d48:	f44f 7194 	mov.w	r1, #296	; 0x128
    2d4c:	e001      	b.n	2d52 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2d4e:	f240 112d 	movw	r1, #301	; 0x12d
    2d52:	2010      	movs	r0, #16
    2d54:	f7fd fe86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2d58:	20000eec 	.word	0x20000eec
    2d5c:	b538      	push	{r3, r4, r5, lr}
    2d5e:	4602      	mov	r2, r0
    2d60:	4b11      	ldr	r3, [pc, #68]	; (2da8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2d62:	2000      	movs	r0, #0
    2d64:	7010      	strb	r0, [r2, #0]
    2d66:	6858      	ldr	r0, [r3, #4]
    2d68:	7a01      	ldrb	r1, [r0, #8]
    2d6a:	f88d 1000 	strb.w	r1, [sp]
    2d6e:	9900      	ldr	r1, [sp, #0]
    2d70:	9100      	str	r1, [sp, #0]
    2d72:	f89d 5000 	ldrb.w	r5, [sp]
    2d76:	2401      	movs	r4, #1
    2d78:	2d01      	cmp	r5, #1
    2d7a:	d006      	beq.n	2d8a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2d7c:	f3ef 8110 	mrs	r1, PRIMASK
    2d80:	b672      	cpsid	i
    2d82:	6805      	ldr	r5, [r0, #0]
    2d84:	605d      	str	r5, [r3, #4]
    2d86:	b111      	cbz	r1, 2d8e <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2d88:	e002      	b.n	2d90 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2d8a:	2000      	movs	r0, #0
    2d8c:	bd38      	pop	{r3, r4, r5, pc}
    2d8e:	b662      	cpsie	i
    2d90:	7a01      	ldrb	r1, [r0, #8]
    2d92:	f88d 1000 	strb.w	r1, [sp]
    2d96:	9900      	ldr	r1, [sp, #0]
    2d98:	9100      	str	r1, [sp, #0]
    2d9a:	f89d 3000 	ldrb.w	r3, [sp]
    2d9e:	2b00      	cmp	r3, #0
    2da0:	d1f4      	bne.n	2d8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2da2:	7014      	strb	r4, [r2, #0]
    2da4:	bd38      	pop	{r3, r4, r5, pc}
    2da6:	0000      	.short	0x0000
    2da8:	20000f18 	.word	0x20000f18
    2dac:	b538      	push	{r3, r4, r5, lr}
    2dae:	b1d0      	cbz	r0, 2de6 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2db0:	6041      	str	r1, [r0, #4]
    2db2:	f100 0108 	add.w	r1, r0, #8
    2db6:	700a      	strb	r2, [r1, #0]
    2db8:	f3ef 8310 	mrs	r3, PRIMASK
    2dbc:	b672      	cpsid	i
    2dbe:	4c10      	ldr	r4, [pc, #64]	; (2e00 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2dc0:	6004      	str	r4, [r0, #0]
    2dc2:	1f21      	subs	r1, r4, #4
    2dc4:	684a      	ldr	r2, [r1, #4]
    2dc6:	b14a      	cbz	r2, 2ddc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2dc8:	7a12      	ldrb	r2, [r2, #8]
    2dca:	f88d 2000 	strb.w	r2, [sp]
    2dce:	9a00      	ldr	r2, [sp, #0]
    2dd0:	9200      	str	r2, [sp, #0]
    2dd2:	f89d 5000 	ldrb.w	r5, [sp]
    2dd6:	2d01      	cmp	r5, #1
    2dd8:	d100      	bne.n	2ddc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2dda:	600c      	str	r4, [r1, #0]
    2ddc:	680a      	ldr	r2, [r1, #0]
    2dde:	6010      	str	r0, [r2, #0]
    2de0:	6008      	str	r0, [r1, #0]
    2de2:	b12b      	cbz	r3, 2df0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2de4:	e005      	b.n	2df2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2de6:	f240 21e2 	movw	r1, #738	; 0x2e2
    2dea:	2010      	movs	r0, #16
    2dec:	f7fd fe3a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2df0:	b662      	cpsie	i
    2df2:	4804      	ldr	r0, [pc, #16]	; (2e04 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2df4:	7800      	ldrb	r0, [r0, #0]
    2df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2dfa:	f009 bdf9 	b.w	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2dfe:	0000      	.short	0x0000
    2e00:	20000f1c 	.word	0x20000f1c
    2e04:	2000035c 	.word	0x2000035c
    2e08:	4808      	ldr	r0, [pc, #32]	; (2e2c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2e0a:	b510      	push	{r4, lr}
    2e0c:	2100      	movs	r1, #0
    2e0e:	6141      	str	r1, [r0, #20]
    2e10:	6181      	str	r1, [r0, #24]
    2e12:	61c1      	str	r1, [r0, #28]
    2e14:	6201      	str	r1, [r0, #32]
    2e16:	2212      	movs	r2, #18
    2e18:	f00e f90f 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2e1c:	4803      	ldr	r0, [pc, #12]	; (2e2c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2e1e:	3014      	adds	r0, #20
    2e20:	2101      	movs	r1, #1
    2e22:	7301      	strb	r1, [r0, #12]
    2e24:	1d01      	adds	r1, r0, #4
    2e26:	6041      	str	r1, [r0, #4]
    2e28:	6001      	str	r1, [r0, #0]
    2e2a:	bd10      	pop	{r4, pc}
    2e2c:	20000f04 	.word	0x20000f04

00002e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2e30:	b4f0      	push	{r4, r5, r6, r7}
    2e32:	8150      	strh	r0, [r2, #10]
    2e34:	890c      	ldrh	r4, [r1, #8]
    2e36:	4613      	mov	r3, r2
    2e38:	8194      	strh	r4, [r2, #12]
    2e3a:	898a      	ldrh	r2, [r1, #12]
    2e3c:	81da      	strh	r2, [r3, #14]
    2e3e:	8948      	ldrh	r0, [r1, #10]
    2e40:	8218      	strh	r0, [r3, #16]
    2e42:	89cd      	ldrh	r5, [r1, #14]
    2e44:	825d      	strh	r5, [r3, #18]
    2e46:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2e48:	42ae      	cmp	r6, r5
    2e4a:	d108      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e4c:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2e4e:	4285      	cmp	r5, r0
    2e50:	d105      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e52:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2e54:	4295      	cmp	r5, r2
    2e56:	d102      	bne.n	2e5e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2e58:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2e5a:	42a2      	cmp	r2, r4
    2e5c:	d001      	beq.n	2e62 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2e5e:	2201      	movs	r2, #1
    2e60:	e000      	b.n	2e64 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2e62:	2200      	movs	r2, #0
    2e64:	751a      	strb	r2, [r3, #20]
    2e66:	8548      	strh	r0, [r1, #42]	; 0x2a
    2e68:	8a58      	ldrh	r0, [r3, #18]
    2e6a:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2e6c:	8998      	ldrh	r0, [r3, #12]
    2e6e:	8588      	strh	r0, [r1, #44]	; 0x2c
    2e70:	89d8      	ldrh	r0, [r3, #14]
    2e72:	8608      	strh	r0, [r1, #48]	; 0x30
    2e74:	bcf0      	pop	{r4, r5, r6, r7}
    2e76:	2214      	movs	r2, #20
    2e78:	4901      	ldr	r1, [pc, #4]	; (2e80 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2e7a:	4618      	mov	r0, r3
    2e7c:	f00b bc24 	b.w	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2e80:	0000e8a5 	.word	0x0000e8a5

00002e84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2e84:	8150      	strh	r0, [r2, #10]
    2e86:	8a88      	ldrh	r0, [r1, #20]
    2e88:	8190      	strh	r0, [r2, #12]
    2e8a:	8ac8      	ldrh	r0, [r1, #22]
    2e8c:	81d0      	strh	r0, [r2, #14]
    2e8e:	8b08      	ldrh	r0, [r1, #24]
    2e90:	8210      	strh	r0, [r2, #16]
    2e92:	8b48      	ldrh	r0, [r1, #26]
    2e94:	4613      	mov	r3, r2
    2e96:	8250      	strh	r0, [r2, #18]
    2e98:	2221      	movs	r2, #33	; 0x21
    2e9a:	4902      	ldr	r1, [pc, #8]	; (2ea4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2e9c:	4618      	mov	r0, r3
    2e9e:	f00b bbff 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ea2:	0000      	.short	0x0000
    2ea4:	0000e8db 	.word	0x0000e8db

00002ea8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eaa:	f06f 021f 	mvn.w	r2, #31
    2eae:	0c01      	lsrs	r1, r0, #16
    2eb0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2eb4:	251f      	movs	r5, #31
    2eb6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2eba:	3854      	subs	r0, #84	; 0x54
    2ebc:	d00d      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ebe:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2ec2:	3855      	subs	r0, #85	; 0x55
    2ec4:	d009      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ec6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2eca:	38aa      	subs	r0, #170	; 0xaa
    2ecc:	d005      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ece:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2ed2:	38aa      	subs	r0, #170	; 0xaa
    2ed4:	d001      	beq.n	2eda <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2ed6:	2001      	movs	r0, #1
    2ed8:	e000      	b.n	2edc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2eda:	2000      	movs	r0, #0
    2edc:	2200      	movs	r2, #0
    2ede:	4613      	mov	r3, r2
    2ee0:	ea4f 0402 	mov.w	r4, r2
    2ee4:	ea82 0701 	eor.w	r7, r2, r1
    2ee8:	43ff      	mvns	r7, r7
    2eea:	431f      	orrs	r7, r3
    2eec:	1c7f      	adds	r7, r7, #1
    2eee:	d00f      	beq.n	2f10 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2ef0:	f006 0701 	and.w	r7, r6, #1
    2ef4:	0852      	lsrs	r2, r2, #1
    2ef6:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2efa:	f005 0701 	and.w	r7, r5, #1
    2efe:	085b      	lsrs	r3, r3, #1
    2f00:	0876      	lsrs	r6, r6, #1
    2f02:	086d      	lsrs	r5, r5, #1
    2f04:	1c64      	adds	r4, r4, #1
    2f06:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2f0a:	2c16      	cmp	r4, #22
    2f0c:	d3ea      	bcc.n	2ee4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f10:	2000      	movs	r0, #0
    2f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002f14 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2f14:	b510      	push	{r4, lr}
    2f16:	4604      	mov	r4, r0
    2f18:	f00b fd6f 	bl	e9fa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f1c:	b308      	cbz	r0, 2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f1e:	43e0      	mvns	r0, r4
    2f20:	f00b fd6b 	bl	e9fa <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2f24:	b1e8      	cbz	r0, 2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f26:	16a0      	asrs	r0, r4, #26
    2f28:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2f2c:	1e41      	subs	r1, r0, #1
    2f2e:	4208      	tst	r0, r1
    2f30:	d017      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f32:	4620      	mov	r0, r4
    2f34:	f00b fdb0 	bl	ea98 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2f38:	2818      	cmp	r0, #24
    2f3a:	d812      	bhi.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f3c:	b2a0      	uxth	r0, r4
    2f3e:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2f42:	d107      	bne.n	2f54 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2f44:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2f48:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2f4c:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2f50:	4281      	cmp	r1, r0
    2f52:	d006      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f54:	4804      	ldr	r0, [pc, #16]	; (2f68 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2f56:	4044      	eors	r4, r0
    2f58:	1e60      	subs	r0, r4, #1
    2f5a:	4204      	tst	r4, r0
    2f5c:	d001      	beq.n	2f62 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2f5e:	2001      	movs	r0, #1
    2f60:	bd10      	pop	{r4, pc}
    2f62:	2000      	movs	r0, #0
    2f64:	bd10      	pop	{r4, pc}
    2f66:	0000      	.short	0x0000
    2f68:	8e89bed6 	.word	0x8e89bed6

00002f6c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2f6c:	b510      	push	{r4, lr}
    2f6e:	4804      	ldr	r0, [pc, #16]	; (2f80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f70:	f00b fd54 	bl	ea1c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f74:	4802      	ldr	r0, [pc, #8]	; (2f80 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2f7a:	3008      	adds	r0, #8
    2f7c:	f00b bd4e 	b.w	ea1c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2f80:	200000b4 	.word	0x200000b4

00002f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2f84:	4801      	ldr	r0, [pc, #4]	; (2f8c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2f86:	f000 b803 	b.w	2f90 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2f8a:	0000      	.short	0x0000
    2f8c:	200000bc 	.word	0x200000bc
    2f90:	b510      	push	{r4, lr}
    2f92:	e9d0 2100 	ldrd	r2, r1, [r0]
    2f96:	4b09      	ldr	r3, [pc, #36]	; (2fbc <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2f98:	4c09      	ldr	r4, [pc, #36]	; (2fc0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2f9a:	4353      	muls	r3, r2
    2f9c:	4354      	muls	r4, r2
    2f9e:	4051      	eors	r1, r2
    2fa0:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2fa4:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2fa8:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2fac:	e9c0 2100 	strd	r2, r1, [r0]
    2fb0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2fb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2fb8:	4618      	mov	r0, r3
    2fba:	bd10      	pop	{r4, pc}
    2fbc:	c6ef3760 	.word	0xc6ef3760
    2fc0:	9e3779bb 	.word	0x9e3779bb

00002fc4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2fc4:	b570      	push	{r4, r5, r6, lr}
    2fc6:	6845      	ldr	r5, [r0, #4]
    2fc8:	1d0c      	adds	r4, r1, #4
    2fca:	2300      	movs	r3, #0
    2fcc:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2fd0:	3588      	adds	r5, #136	; 0x88
    2fd2:	2601      	movs	r6, #1
    2fd4:	4619      	mov	r1, r3
    2fd6:	4628      	mov	r0, r5
    2fd8:	f00b f842 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fdc:	b190      	cbz	r0, 3004 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2fde:	6820      	ldr	r0, [r4, #0]
    2fe0:	4a09      	ldr	r2, [pc, #36]	; (3008 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2fe2:	7921      	ldrb	r1, [r4, #4]
    2fe4:	4010      	ands	r0, r2
    2fe6:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2fea:	f001 0107 	and.w	r1, r1, #7
    2fee:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2ff2:	2000      	movs	r0, #0
    2ff4:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2ff8:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2ffc:	2004      	movs	r0, #4
    2ffe:	77a8      	strb	r0, [r5, #30]
    3000:	2000      	movs	r0, #0
    3002:	bd70      	pop	{r4, r5, r6, pc}
    3004:	2001      	movs	r0, #1
    3006:	bd70      	pop	{r4, r5, r6, pc}
    3008:	3704492f 	.word	0x3704492f

0000300c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    300c:	b510      	push	{r4, lr}
    300e:	1d04      	adds	r4, r0, #4
    3010:	f004 fce0 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3014:	4a03      	ldr	r2, [pc, #12]	; (3024 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    3016:	f001 0107 	and.w	r1, r1, #7
    301a:	4010      	ands	r0, r2
    301c:	6020      	str	r0, [r4, #0]
    301e:	6061      	str	r1, [r4, #4]
    3020:	bd10      	pop	{r4, pc}
    3022:	0000      	.short	0x0000
    3024:	3704492f 	.word	0x3704492f

00003028 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    302c:	4605      	mov	r5, r0
    302e:	7803      	ldrb	r3, [r0, #0]
    3030:	6840      	ldr	r0, [r0, #4]
    3032:	1d0f      	adds	r7, r1, #4
    3034:	f100 0688 	add.w	r6, r0, #136	; 0x88
    3038:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    303c:	4680      	mov	r8, r0
    303e:	7f72      	ldrb	r2, [r6, #29]
    3040:	2107      	movs	r1, #7
    3042:	4630      	mov	r0, r6
    3044:	f00b f80c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3048:	b1d0      	cbz	r0, 3080 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    304a:	6838      	ldr	r0, [r7, #0]
    304c:	4a17      	ldr	r2, [pc, #92]	; (30ac <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    304e:	7939      	ldrb	r1, [r7, #4]
    3050:	4010      	ands	r0, r2
    3052:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    3056:	f001 0107 	and.w	r1, r1, #7
    305a:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    305e:	2000      	movs	r0, #0
    3060:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    3064:	7770      	strb	r0, [r6, #29]
    3066:	6869      	ldr	r1, [r5, #4]
    3068:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    306c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3070:	f88d 1000 	strb.w	r1, [sp]
    3074:	9900      	ldr	r1, [sp, #0]
    3076:	9100      	str	r1, [sp, #0]
    3078:	f89d 1000 	ldrb.w	r1, [sp]
    307c:	b999      	cbnz	r1, 30a6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    307e:	e002      	b.n	3086 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3080:	2001      	movs	r0, #1
    3082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3086:	f8b8 1000 	ldrh.w	r1, [r8]
    308a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    308e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3092:	6839      	ldr	r1, [r7, #0]
    3094:	66e1      	str	r1, [r4, #108]	; 0x6c
    3096:	6879      	ldr	r1, [r7, #4]
    3098:	6721      	str	r1, [r4, #112]	; 0x70
    309a:	2208      	movs	r2, #8
    309c:	4904      	ldr	r1, [pc, #16]	; (30b0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    309e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    30a2:	f00b fafd 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    30a6:	2000      	movs	r0, #0
    30a8:	e7eb      	b.n	3082 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    30aa:	0000      	.short	0x0000
    30ac:	3704492f 	.word	0x3704492f
    30b0:	0000eba3 	.word	0x0000eba3

000030b4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    30b4:	b570      	push	{r4, r5, r6, lr}
    30b6:	1d0d      	adds	r5, r1, #4
    30b8:	6844      	ldr	r4, [r0, #4]
    30ba:	f004 fc8b 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    30be:	4a06      	ldr	r2, [pc, #24]	; (30d8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    30c0:	4010      	ands	r0, r2
    30c2:	f001 0207 	and.w	r2, r1, #7
    30c6:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    30ca:	4001      	ands	r1, r0
    30cc:	f361 0007 	bfi	r0, r1, #0, #8
    30d0:	6028      	str	r0, [r5, #0]
    30d2:	606a      	str	r2, [r5, #4]
    30d4:	bd70      	pop	{r4, r5, r6, pc}
    30d6:	0000      	.short	0x0000
    30d8:	3704492f 	.word	0x3704492f

000030dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    30dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30e0:	6844      	ldr	r4, [r0, #4]
    30e2:	460d      	mov	r5, r1
    30e4:	7803      	ldrb	r3, [r0, #0]
    30e6:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    30ea:	3488      	adds	r4, #136	; 0x88
    30ec:	2701      	movs	r7, #1
    30ee:	2108      	movs	r1, #8
    30f0:	4620      	mov	r0, r4
    30f2:	f00a ffb5 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    30f6:	b930      	cbnz	r0, 3106 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    30f8:	2300      	movs	r3, #0
    30fa:	7fa2      	ldrb	r2, [r4, #30]
    30fc:	4619      	mov	r1, r3
    30fe:	4620      	mov	r0, r4
    3100:	f00a ffae 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3104:	b320      	cbz	r0, 3150 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    3106:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    310a:	f04f 0600 	mov.w	r6, #0
    310e:	0780      	lsls	r0, r0, #30
    3110:	d419      	bmi.n	3146 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    3112:	4628      	mov	r0, r5
    3114:	f00b faab 	bl	e66e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    3118:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    311c:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3120:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3124:	8868      	ldrh	r0, [r5, #2]
    3126:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    312a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    312e:	f040 0002 	orr.w	r0, r0, #2
    3132:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    3136:	07c0      	lsls	r0, r0, #31
    3138:	d00d      	beq.n	3156 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    313a:	2203      	movs	r2, #3
    313c:	4912      	ldr	r1, [pc, #72]	; (3188 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    313e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3142:	f00b fac1 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3146:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    314a:	07c0      	lsls	r0, r0, #31
    314c:	d003      	beq.n	3156 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    314e:	e00e      	b.n	316e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    3150:	2001      	movs	r0, #1
    3152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3156:	2300      	movs	r3, #0
    3158:	7fa2      	ldrb	r2, [r4, #30]
    315a:	4619      	mov	r1, r3
    315c:	4620      	mov	r0, r4
    315e:	f00a ff7f 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3162:	b140      	cbz	r0, 3176 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    3164:	77a7      	strb	r7, [r4, #30]
    3166:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    316a:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    316e:	7f60      	ldrb	r0, [r4, #29]
    3170:	2801      	cmp	r0, #1
    3172:	d004      	beq.n	317e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    3174:	e006      	b.n	3184 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    3176:	2148      	movs	r1, #72	; 0x48
    3178:	2040      	movs	r0, #64	; 0x40
    317a:	f7fd fc73 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    317e:	7766      	strb	r6, [r4, #29]
    3180:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    3184:	2000      	movs	r0, #0
    3186:	e7e4      	b.n	3152 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    3188:	0000ebd1 	.word	0x0000ebd1

0000318c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    318c:	4907      	ldr	r1, [pc, #28]	; (31ac <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    318e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3192:	1300      	asrs	r0, r0, #12
    3194:	7809      	ldrb	r1, [r1, #0]
    3196:	b240      	sxtb	r0, r0
    3198:	4249      	negs	r1, r1
    319a:	b249      	sxtb	r1, r1
    319c:	4408      	add	r0, r1
    319e:	f300 0007 	ssat	r0, #8, r0
    31a2:	2800      	cmp	r0, #0
    31a4:	dc00      	bgt.n	31a8 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    31a6:	2000      	movs	r0, #0
    31a8:	b2c0      	uxtb	r0, r0
    31aa:	4770      	bx	lr
    31ac:	200000c4 	.word	0x200000c4

000031b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    31b0:	4a04      	ldr	r2, [pc, #16]	; (31c4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    31b2:	6892      	ldr	r2, [r2, #8]
    31b4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    31b8:	434b      	muls	r3, r1
    31ba:	4342      	muls	r2, r0
    31bc:	eb03 3022 	add.w	r0, r3, r2, asr #12
    31c0:	4770      	bx	lr
    31c2:	0000      	.short	0x0000
    31c4:	200000c4 	.word	0x200000c4

000031c8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ca:	6844      	ldr	r4, [r0, #4]
    31cc:	4606      	mov	r6, r0
    31ce:	f104 0588 	add.w	r5, r4, #136	; 0x88
    31d2:	f000 f87f 	bl	32d4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    31d6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    31da:	2901      	cmp	r1, #1
    31dc:	d11a      	bne.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31de:	2800      	cmp	r0, #0
    31e0:	d018      	beq.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31e2:	6870      	ldr	r0, [r6, #4]
    31e4:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    31e8:	f88d 1000 	strb.w	r1, [sp]
    31ec:	9900      	ldr	r1, [sp, #0]
    31ee:	9100      	str	r1, [sp, #0]
    31f0:	f89d 1000 	ldrb.w	r1, [sp]
    31f4:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    31f8:	2900      	cmp	r1, #0
    31fa:	d10b      	bne.n	3214 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    31fc:	8821      	ldrh	r1, [r4, #0]
    31fe:	8141      	strh	r1, [r0, #10]
    3200:	7e69      	ldrb	r1, [r5, #25]
    3202:	7301      	strb	r1, [r0, #12]
    3204:	7ea9      	ldrb	r1, [r5, #26]
    3206:	7341      	strb	r1, [r0, #13]
    3208:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    320c:	221f      	movs	r2, #31
    320e:	4902      	ldr	r1, [pc, #8]	; (3218 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3210:	f00b ba46 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3216:	0000      	.short	0x0000
    3218:	0000ec69 	.word	0x0000ec69
    321c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3220:	4a0d      	ldr	r2, [pc, #52]	; (3258 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3222:	b510      	push	{r4, lr}
    3224:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3228:	1309      	asrs	r1, r1, #12
    322a:	1300      	asrs	r0, r0, #12
    322c:	b24b      	sxtb	r3, r1
    322e:	f992 4000 	ldrsb.w	r4, [r2]
    3232:	4240      	negs	r0, r0
    3234:	2100      	movs	r1, #0
    3236:	b240      	sxtb	r0, r0
    3238:	42a3      	cmp	r3, r4
    323a:	da02      	bge.n	3242 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    323c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3240:	e005      	b.n	324e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3242:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3246:	42a3      	cmp	r3, r4
    3248:	dd04      	ble.n	3254 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    324a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    324e:	4408      	add	r0, r1
    3250:	f300 0107 	ssat	r1, #8, r0
    3254:	4608      	mov	r0, r1
    3256:	bd10      	pop	{r4, pc}
    3258:	200000c4 	.word	0x200000c4
    325c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3260:	2200      	movs	r2, #0
    3262:	704a      	strb	r2, [r1, #1]
    3264:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    3268:	700a      	strb	r2, [r1, #0]
    326a:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    326e:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3272:	f00c fb0b 	bl	f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3276:	4606      	mov	r6, r0
    3278:	68a0      	ldr	r0, [r4, #8]
    327a:	f7ff ffcf 	bl	321c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    327e:	0007      	movs	r7, r0
    3280:	d021      	beq.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3282:	4620      	mov	r0, r4
    3284:	f00b fcf8 	bl	ec78 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    3288:	2800      	cmp	r0, #0
    328a:	d01c      	beq.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    328c:	8828      	ldrh	r0, [r5, #0]
    328e:	4669      	mov	r1, sp
    3290:	f00a febd 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3294:	b118      	cbz	r0, 329e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3296:	2189      	movs	r1, #137	; 0x89
    3298:	207a      	movs	r0, #122	; 0x7a
    329a:	f7fd fbe3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    329e:	1c76      	adds	r6, r6, #1
    32a0:	b2f1      	uxtb	r1, r6
    32a2:	2302      	movs	r3, #2
    32a4:	463a      	mov	r2, r7
    32a6:	4668      	mov	r0, sp
    32a8:	f00c fb0f 	bl	f8ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    32ac:	2800      	cmp	r0, #0
    32ae:	d10a      	bne.n	32c6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    32b0:	4806      	ldr	r0, [pc, #24]	; (32cc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    32b2:	4907      	ldr	r1, [pc, #28]	; (32d0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    32b4:	7900      	ldrb	r0, [r0, #4]
    32b6:	fba0 6501 	umull	r6, r5, r0, r1
    32ba:	f008 f9e1 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    32be:	1980      	adds	r0, r0, r6
    32c0:	4169      	adcs	r1, r5
    32c2:	e9c4 0100 	strd	r0, r1, [r4]
    32c6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    32ca:	0000      	.short	0x0000
    32cc:	200000c4 	.word	0x200000c4
    32d0:	000f4240 	.word	0x000f4240
    32d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32d8:	4607      	mov	r7, r0
    32da:	f7ff faab 	bl	2834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    32de:	687c      	ldr	r4, [r7, #4]
    32e0:	4605      	mov	r5, r0
    32e2:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    32e6:	3488      	adds	r4, #136	; 0x88
    32e8:	287f      	cmp	r0, #127	; 0x7f
    32ea:	d03c      	beq.n	3366 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    32ec:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    32f0:	687e      	ldr	r6, [r7, #4]
    32f2:	76a0      	strb	r0, [r4, #26]
    32f4:	4629      	mov	r1, r5
    32f6:	68a0      	ldr	r0, [r4, #8]
    32f8:	f7ff ff5a 	bl	31b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    32fc:	60a0      	str	r0, [r4, #8]
    32fe:	481b      	ldr	r0, [pc, #108]	; (336c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3300:	7940      	ldrb	r0, [r0, #5]
    3302:	b190      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3304:	6878      	ldr	r0, [r7, #4]
    3306:	f100 0888 	add.w	r8, r0, #136	; 0x88
    330a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    330e:	f7ff ff85 	bl	321c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3312:	b150      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3314:	4640      	mov	r0, r8
    3316:	f00b fcaf 	bl	ec78 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    331a:	b130      	cbz	r0, 332a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    331c:	6878      	ldr	r0, [r7, #4]
    331e:	2231      	movs	r2, #49	; 0x31
    3320:	4913      	ldr	r1, [pc, #76]	; (3370 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3322:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    3326:	f00b f9cf 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    332a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    332e:	2100      	movs	r1, #0
    3330:	1a28      	subs	r0, r5, r0
    3332:	d500      	bpl.n	3336 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3334:	4240      	negs	r0, r0
    3336:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    333a:	4282      	cmp	r2, r0
    333c:	dc10      	bgt.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    333e:	2aff      	cmp	r2, #255	; 0xff
    3340:	d00e      	beq.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3342:	7f20      	ldrb	r0, [r4, #28]
    3344:	1c40      	adds	r0, r0, #1
    3346:	b2c0      	uxtb	r0, r0
    3348:	7720      	strb	r0, [r4, #28]
    334a:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    334e:	4290      	cmp	r0, r2
    3350:	d802      	bhi.n	3358 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3352:	7ee0      	ldrb	r0, [r4, #27]
    3354:	287f      	cmp	r0, #127	; 0x7f
    3356:	d103      	bne.n	3360 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3358:	2000      	movs	r0, #0
    335a:	76e5      	strb	r5, [r4, #27]
    335c:	7720      	strb	r0, [r4, #28]
    335e:	2101      	movs	r1, #1
    3360:	4608      	mov	r0, r1
    3362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3366:	2000      	movs	r0, #0
    3368:	e7fb      	b.n	3362 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    336a:	0000      	.short	0x0000
    336c:	200000c4 	.word	0x200000c4
    3370:	0000325d 	.word	0x0000325d

00003374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    3374:	4801      	ldr	r0, [pc, #4]	; (337c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    3376:	6840      	ldr	r0, [r0, #4]
    3378:	30a0      	adds	r0, #160	; 0xa0
    337a:	4770      	bx	lr
    337c:	200000d0 	.word	0x200000d0

00003380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    3380:	b510      	push	{r4, lr}
    3382:	4c21      	ldr	r4, [pc, #132]	; (3408 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    3384:	6860      	ldr	r0, [r4, #4]
    3386:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    338a:	f00b fc9e 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    338e:	6861      	ldr	r1, [r4, #4]
    3390:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    3394:	314a      	adds	r1, #74	; 0x4a
    3396:	f7fe f945 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    339a:	6860      	ldr	r0, [r4, #4]
    339c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    33a0:	f00b fc9a 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33a4:	6861      	ldr	r1, [r4, #4]
    33a6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    33aa:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    33ae:	314a      	adds	r1, #74	; 0x4a
    33b0:	f00b fc77 	bl	eca2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    33b4:	b930      	cbnz	r0, 33c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    33b6:	6861      	ldr	r1, [r4, #4]
    33b8:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    33bc:	314a      	adds	r1, #74	; 0x4a
    33be:	f00b fc79 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    33c2:	b108      	cbz	r0, 33c8 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    33c4:	2101      	movs	r1, #1
    33c6:	e000      	b.n	33ca <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    33c8:	2100      	movs	r1, #0
    33ca:	6860      	ldr	r0, [r4, #4]
    33cc:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    33d0:	b919      	cbnz	r1, 33da <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    33d2:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    33d6:	2800      	cmp	r0, #0
    33d8:	d014      	beq.n	3404 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    33da:	f7fe ffd3 	bl	2384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    33de:	490b      	ldr	r1, [pc, #44]	; (340c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    33e0:	fba0 2301 	umull	r2, r3, r0, r1
    33e4:	6860      	ldr	r0, [r4, #4]
    33e6:	3090      	adds	r0, #144	; 0x90
    33e8:	f00b fcc8 	bl	ed7c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    33ec:	6860      	ldr	r0, [r4, #4]
    33ee:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    33f2:	b110      	cbz	r0, 33fa <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    33f4:	2000      	movs	r0, #0
    33f6:	f7fe feaf 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    33fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    33fe:	2000      	movs	r0, #0
    3400:	f000 be38 	b.w	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    3404:	bd10      	pop	{r4, pc}
    3406:	0000      	.short	0x0000
    3408:	200000d0 	.word	0x200000d0
    340c:	000f4240 	.word	0x000f4240

00003410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3410:	4a04      	ldr	r2, [pc, #16]	; (3424 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3412:	2803      	cmp	r0, #3
    3414:	6852      	ldr	r2, [r2, #4]
    3416:	d100      	bne.n	341a <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    3418:	6551      	str	r1, [r2, #84]	; 0x54
    341a:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    341e:	2000      	movs	r0, #0
    3420:	4770      	bx	lr
    3422:	0000      	.short	0x0000
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    3428:	4806      	ldr	r0, [pc, #24]	; (3444 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    342a:	b508      	push	{r3, lr}
    342c:	6840      	ldr	r0, [r0, #4]
    342e:	7a00      	ldrb	r0, [r0, #8]
    3430:	f88d 0000 	strb.w	r0, [sp]
    3434:	9800      	ldr	r0, [sp, #0]
    3436:	9000      	str	r0, [sp, #0]
    3438:	f89d 0000 	ldrb.w	r0, [sp]
    343c:	2800      	cmp	r0, #0
    343e:	d000      	beq.n	3442 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3440:	2001      	movs	r0, #1
    3442:	bd08      	pop	{r3, pc}
    3444:	200000d0 	.word	0x200000d0

00003448 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    3448:	4902      	ldr	r1, [pc, #8]	; (3454 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    344a:	6849      	ldr	r1, [r1, #4]
    344c:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3450:	2000      	movs	r0, #0
    3452:	4770      	bx	lr
    3454:	200000d0 	.word	0x200000d0

00003458 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    3458:	480a      	ldr	r0, [pc, #40]	; (3484 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    345a:	6841      	ldr	r1, [r0, #4]
    345c:	6e88      	ldr	r0, [r1, #104]	; 0x68
    345e:	b170      	cbz	r0, 347e <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    3460:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    3464:	22ff      	movs	r2, #255	; 0xff
    3466:	7002      	strb	r2, [r0, #0]
    3468:	2200      	movs	r2, #0
    346a:	668a      	str	r2, [r1, #104]	; 0x68
    346c:	7002      	strb	r2, [r0, #0]
    346e:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    3472:	2001      	movs	r0, #1
    3474:	4088      	lsls	r0, r1
    3476:	4904      	ldr	r1, [pc, #16]	; (3488 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    3478:	6008      	str	r0, [r1, #0]
    347a:	2000      	movs	r0, #0
    347c:	4770      	bx	lr
    347e:	200c      	movs	r0, #12
    3480:	4770      	bx	lr
    3482:	0000      	.short	0x0000
    3484:	200000d0 	.word	0x200000d0
    3488:	4001f508 	.word	0x4001f508

0000348c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    348c:	4602      	mov	r2, r0
    348e:	480c      	ldr	r0, [pc, #48]	; (34c0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    3490:	b510      	push	{r4, lr}
    3492:	6082      	str	r2, [r0, #8]
    3494:	68c0      	ldr	r0, [r0, #12]
    3496:	460c      	mov	r4, r1
    3498:	b168      	cbz	r0, 34b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    349a:	f000 ffe5 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    349e:	f00b fd53 	bl	ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    34a2:	4620      	mov	r0, r4
    34a4:	f000 f8c0 	bl	3628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    34a8:	2800      	cmp	r0, #0
    34aa:	d007      	beq.n	34bc <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    34ac:	f640 119d 	movw	r1, #2461	; 0x99d
    34b0:	2032      	movs	r0, #50	; 0x32
    34b2:	f7fd fad7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34b6:	f640 1197 	movw	r1, #2455	; 0x997
    34ba:	e7f9      	b.n	34b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    34bc:	bd10      	pop	{r4, pc}
    34be:	0000      	.short	0x0000
    34c0:	200000d0 	.word	0x200000d0

000034c4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    34c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34c8:	4c0f      	ldr	r4, [pc, #60]	; (3508 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    34ca:	4605      	mov	r5, r0
    34cc:	4616      	mov	r6, r2
    34ce:	6860      	ldr	r0, [r4, #4]
    34d0:	460f      	mov	r7, r1
    34d2:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34d6:	f00b fbff 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    34da:	b158      	cbz	r0, 34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34dc:	b955      	cbnz	r5, 34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34de:	4638      	mov	r0, r7
    34e0:	f00b fbf3 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e4:	4631      	mov	r1, r6
    34e6:	f00a fd31 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    34ea:	2808      	cmp	r0, #8
    34ec:	d002      	beq.n	34f4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    34ee:	2001      	movs	r0, #1
    34f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34f4:	6860      	ldr	r0, [r4, #4]
    34f6:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34fa:	f00b fbe6 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3502:	f7fe b8bb 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    3506:	0000      	.short	0x0000
    3508:	200000d0 	.word	0x200000d0

0000350c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    350c:	b510      	push	{r4, lr}
    350e:	4c0a      	ldr	r4, [pc, #40]	; (3538 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3510:	6860      	ldr	r0, [r4, #4]
    3512:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3514:	b159      	cbz	r1, 352e <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    3516:	2202      	movs	r2, #2
    3518:	7242      	strb	r2, [r0, #9]
    351a:	8809      	ldrh	r1, [r1, #0]
    351c:	8141      	strh	r1, [r0, #10]
    351e:	2212      	movs	r2, #18
    3520:	4906      	ldr	r1, [pc, #24]	; (353c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3522:	f00b f8bd 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3526:	6861      	ldr	r1, [r4, #4]
    3528:	2000      	movs	r0, #0
    352a:	6548      	str	r0, [r1, #84]	; 0x54
    352c:	bd10      	pop	{r4, pc}
    352e:	f240 4122 	movw	r1, #1058	; 0x422
    3532:	2032      	movs	r0, #50	; 0x32
    3534:	f7fd fa96 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3538:	200000d0 	.word	0x200000d0
    353c:	00003871 	.word	0x00003871

00003540 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3540:	b570      	push	{r4, r5, r6, lr}
    3542:	4c13      	ldr	r4, [pc, #76]	; (3590 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3544:	4615      	mov	r5, r2
    3546:	460e      	mov	r6, r1
    3548:	2800      	cmp	r0, #0
    354a:	d016      	beq.n	357a <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    354c:	f04f 0200 	mov.w	r2, #0
    3550:	6861      	ldr	r1, [r4, #4]
    3552:	f801 2f51 	strb.w	r2, [r1, #81]!
    3556:	7248      	strb	r0, [r1, #9]
    3558:	f04f 0008 	mov.w	r0, #8
    355c:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    3560:	d114      	bne.n	358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    3562:	4630      	mov	r0, r6
    3564:	f00b fbb1 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3568:	4629      	mov	r1, r5
    356a:	f00a fcef 	bl	df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    356e:	6861      	ldr	r1, [r4, #4]
    3570:	2808      	cmp	r0, #8
    3572:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    3576:	d003      	beq.n	3580 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    3578:	e008      	b.n	358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    357a:	f04f 0201 	mov.w	r2, #1
    357e:	e7e7      	b.n	3550 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    3580:	4630      	mov	r0, r6
    3582:	f00b fba9 	bl	ecd8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    3586:	b108      	cbz	r0, 358c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    3588:	2012      	movs	r0, #18
    358a:	bd70      	pop	{r4, r5, r6, pc}
    358c:	2000      	movs	r0, #0
    358e:	bd70      	pop	{r4, r5, r6, pc}
    3590:	200000d0 	.word	0x200000d0

00003594 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    3594:	b510      	push	{r4, lr}
    3596:	b1b1      	cbz	r1, 35c6 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    3598:	4a0d      	ldr	r2, [pc, #52]	; (35d0 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    359a:	6852      	ldr	r2, [r2, #4]
    359c:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    35a0:	6808      	ldr	r0, [r1, #0]
    35a2:	6610      	str	r0, [r2, #96]	; 0x60
    35a4:	8888      	ldrh	r0, [r1, #4]
    35a6:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    35aa:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    35ae:	f852 1f54 	ldr.w	r1, [r2, #84]!
    35b2:	7248      	strb	r0, [r1, #9]
    35b4:	f852 0908 	ldr.w	r0, [r2], #-8
    35b8:	f852 1c02 	ldr.w	r1, [r2, #-2]
    35bc:	f8c0 100a 	str.w	r1, [r0, #10]
    35c0:	8851      	ldrh	r1, [r2, #2]
    35c2:	81c1      	strh	r1, [r0, #14]
    35c4:	bd10      	pop	{r4, pc}
    35c6:	f640 31a7 	movw	r1, #2983	; 0xba7
    35ca:	2032      	movs	r0, #50	; 0x32
    35cc:	f7fd fa4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    35d0:	200000d0 	.word	0x200000d0

000035d4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    35d4:	4902      	ldr	r1, [pc, #8]	; (35e0 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    35d6:	4801      	ldr	r0, [pc, #4]	; (35dc <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    35d8:	60c8      	str	r0, [r1, #12]
    35da:	4770      	bx	lr
    35dc:	000046a4 	.word	0x000046a4
    35e0:	200000d0 	.word	0x200000d0

000035e4 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    35e4:	4902      	ldr	r1, [pc, #8]	; (35f0 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    35e6:	6849      	ldr	r1, [r1, #4]
    35e8:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    35ec:	4770      	bx	lr
    35ee:	0000      	.short	0x0000
    35f0:	200000d0 	.word	0x200000d0

000035f4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    35f4:	b570      	push	{r4, r5, r6, lr}
    35f6:	4605      	mov	r5, r0
    35f8:	f7fd fe2e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    35fc:	4604      	mov	r4, r0
    35fe:	f7fd fe31 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3602:	4621      	mov	r1, r4
    3604:	f00b fbb8 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3608:	0001      	movs	r1, r0
    360a:	d006      	beq.n	361a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    360c:	4805      	ldr	r0, [pc, #20]	; (3624 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    360e:	68c0      	ldr	r0, [r0, #12]
    3610:	6802      	ldr	r2, [r0, #0]
    3612:	4628      	mov	r0, r5
    3614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3618:	4710      	bx	r2
    361a:	f640 21ab 	movw	r1, #2731	; 0xaab
    361e:	2032      	movs	r0, #50	; 0x32
    3620:	f7fd fa20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3624:	200000d0 	.word	0x200000d0

00003628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    3628:	b570      	push	{r4, r5, r6, lr}
    362a:	4d19      	ldr	r5, [pc, #100]	; (3690 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    362c:	4604      	mov	r4, r0
    362e:	6868      	ldr	r0, [r5, #4]
    3630:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3634:	2901      	cmp	r1, #1
    3636:	d004      	beq.n	3642 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3638:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    363c:	b108      	cbz	r0, 3642 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    363e:	200c      	movs	r0, #12
    3640:	bd70      	pop	{r4, r5, r6, pc}
    3642:	f7fd fe33 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    3646:	f00b fc7f 	bl	ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    364a:	f000 f8c1 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    364e:	2246      	movs	r2, #70	; 0x46
    3650:	2100      	movs	r1, #0
    3652:	6868      	ldr	r0, [r5, #4]
    3654:	f00d fcf1 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3658:	6869      	ldr	r1, [r5, #4]
    365a:	2200      	movs	r2, #0
    365c:	2001      	movs	r0, #1
    365e:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    3662:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    3666:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    366a:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    366e:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    3672:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    3676:	2007      	movs	r0, #7
    3678:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    367c:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    3680:	23ff      	movs	r3, #255	; 0xff
    3682:	7003      	strb	r3, [r0, #0]
    3684:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    3688:	668a      	str	r2, [r1, #104]	; 0x68
    368a:	7002      	strb	r2, [r0, #0]
    368c:	2000      	movs	r0, #0
    368e:	bd70      	pop	{r4, r5, r6, pc}
    3690:	200000d0 	.word	0x200000d0

00003694 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    3694:	4805      	ldr	r0, [pc, #20]	; (36ac <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    3696:	b510      	push	{r4, lr}
    3698:	6840      	ldr	r0, [r0, #4]
    369a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    369e:	f00b fb14 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36a6:	f7fd bfe9 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    36aa:	0000      	.short	0x0000
    36ac:	200000d0 	.word	0x200000d0

000036b0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    36b0:	b140      	cbz	r0, 36c4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    36b2:	2802      	cmp	r0, #2
    36b4:	d006      	beq.n	36c4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    36b6:	2200      	movs	r2, #0
    36b8:	4903      	ldr	r1, [pc, #12]	; (36c8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    36ba:	6849      	ldr	r1, [r1, #4]
    36bc:	f801 2f51 	strb.w	r2, [r1, #81]!
    36c0:	7208      	strb	r0, [r1, #8]
    36c2:	4770      	bx	lr
    36c4:	2201      	movs	r2, #1
    36c6:	e7f7      	b.n	36b8 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    36c8:	200000d0 	.word	0x200000d0

000036cc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    36cc:	4902      	ldr	r1, [pc, #8]	; (36d8 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    36ce:	6849      	ldr	r1, [r1, #4]
    36d0:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    36d4:	4770      	bx	lr
    36d6:	0000      	.short	0x0000
    36d8:	200000d0 	.word	0x200000d0

000036dc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    36dc:	b510      	push	{r4, lr}
    36de:	4603      	mov	r3, r0
    36e0:	7800      	ldrb	r0, [r0, #0]
    36e2:	07c0      	lsls	r0, r0, #31
    36e4:	d005      	beq.n	36f2 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    36e6:	7858      	ldrb	r0, [r3, #1]
    36e8:	2100      	movs	r1, #0
    36ea:	f7ff fe91 	bl	3410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    36ee:	2800      	cmp	r0, #0
    36f0:	d10c      	bne.n	370c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    36f2:	4c07      	ldr	r4, [pc, #28]	; (3710 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    36f4:	7898      	ldrb	r0, [r3, #2]
    36f6:	6861      	ldr	r1, [r4, #4]
    36f8:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    36fc:	78d8      	ldrb	r0, [r3, #3]
    36fe:	f7ff ffd7 	bl	36b0 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3702:	6861      	ldr	r1, [r4, #4]
    3704:	7918      	ldrb	r0, [r3, #4]
    3706:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    370a:	2000      	movs	r0, #0
    370c:	bd10      	pop	{r4, pc}
    370e:	0000      	.short	0x0000
    3710:	200000d0 	.word	0x200000d0

00003714 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3714:	4801      	ldr	r0, [pc, #4]	; (371c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    3716:	68c0      	ldr	r0, [r0, #12]
    3718:	6840      	ldr	r0, [r0, #4]
    371a:	4700      	bx	r0
    371c:	200000d0 	.word	0x200000d0

00003720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3720:	4807      	ldr	r0, [pc, #28]	; (3740 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3722:	b508      	push	{r3, lr}
    3724:	6840      	ldr	r0, [r0, #4]
    3726:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    372a:	f88d 0000 	strb.w	r0, [sp]
    372e:	9800      	ldr	r0, [sp, #0]
    3730:	9000      	str	r0, [sp, #0]
    3732:	f89d 0000 	ldrb.w	r0, [sp]
    3736:	2800      	cmp	r0, #0
    3738:	d000      	beq.n	373c <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    373a:	2001      	movs	r0, #1
    373c:	bd08      	pop	{r3, pc}
    373e:	0000      	.short	0x0000
    3740:	200000d0 	.word	0x200000d0

00003744 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3744:	b510      	push	{r4, lr}
    3746:	f000 f951 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    374a:	4b0c      	ldr	r3, [pc, #48]	; (377c <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    374c:	b140      	cbz	r0, 3760 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    374e:	6858      	ldr	r0, [r3, #4]
    3750:	2101      	movs	r1, #1
    3752:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    3756:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3758:	8809      	ldrh	r1, [r1, #0]
    375a:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    375e:	e004      	b.n	376a <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    3760:	6859      	ldr	r1, [r3, #4]
    3762:	2000      	movs	r0, #0
    3764:	f801 0f42 	strb.w	r0, [r1, #66]!
    3768:	8048      	strh	r0, [r1, #2]
    376a:	6858      	ldr	r0, [r3, #4]
    376c:	2217      	movs	r2, #23
    376e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3772:	4903      	ldr	r1, [pc, #12]	; (3780 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    3774:	3038      	adds	r0, #56	; 0x38
    3776:	f00a bf93 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	00004401 	.word	0x00004401

00003784 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    3784:	4802      	ldr	r0, [pc, #8]	; (3790 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    3786:	6840      	ldr	r0, [r0, #4]
    3788:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    378c:	4770      	bx	lr
    378e:	0000      	.short	0x0000
    3790:	200000d0 	.word	0x200000d0

00003794 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    3794:	b510      	push	{r4, lr}
    3796:	f000 f929 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    379a:	490c      	ldr	r1, [pc, #48]	; (37cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    379c:	b128      	cbz	r0, 37aa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    379e:	6848      	ldr	r0, [r1, #4]
    37a0:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    37a4:	2801      	cmp	r0, #1
    37a6:	d00e      	beq.n	37c6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    37a8:	e00c      	b.n	37c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    37aa:	6849      	ldr	r1, [r1, #4]
    37ac:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    37b0:	2801      	cmp	r0, #1
    37b2:	d001      	beq.n	37b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    37b4:	2802      	cmp	r0, #2
    37b6:	d105      	bne.n	37c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    37b8:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    37bc:	2801      	cmp	r0, #1
    37be:	d003      	beq.n	37c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    37c0:	2803      	cmp	r0, #3
    37c2:	d001      	beq.n	37c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    37c4:	2000      	movs	r0, #0
    37c6:	bd10      	pop	{r4, pc}
    37c8:	2001      	movs	r0, #1
    37ca:	bd10      	pop	{r4, pc}
    37cc:	200000d0 	.word	0x200000d0
    37d0:	b510      	push	{r4, lr}
    37d2:	4c07      	ldr	r4, [pc, #28]	; (37f0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    37d4:	6860      	ldr	r0, [r4, #4]
    37d6:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    37da:	2800      	cmp	r0, #0
    37dc:	d007      	beq.n	37ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    37de:	f004 fb23 	bl	7e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    37e2:	f004 f947 	bl	7a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    37e6:	6861      	ldr	r1, [r4, #4]
    37e8:	2000      	movs	r0, #0
    37ea:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    37ee:	bd10      	pop	{r4, pc}
    37f0:	200000d0 	.word	0x200000d0
    37f4:	b518      	push	{r3, r4, lr}
    37f6:	2300      	movs	r3, #0
    37f8:	704b      	strb	r3, [r1, #1]
    37fa:	2207      	movs	r2, #7
    37fc:	700a      	strb	r2, [r1, #0]
    37fe:	4a07      	ldr	r2, [pc, #28]	; (381c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3800:	6852      	ldr	r2, [r2, #4]
    3802:	7203      	strb	r3, [r0, #8]
    3804:	6b54      	ldr	r4, [r2, #52]	; 0x34
    3806:	604c      	str	r4, [r1, #4]
    3808:	7a04      	ldrb	r4, [r0, #8]
    380a:	f88d 4000 	strb.w	r4, [sp]
    380e:	9c00      	ldr	r4, [sp, #0]
    3810:	9400      	str	r4, [sp, #0]
    3812:	f89d 4000 	ldrb.w	r4, [sp]
    3816:	2c00      	cmp	r4, #0
    3818:	d1f3      	bne.n	3802 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    381a:	bd18      	pop	{r3, r4, pc}
    381c:	200000d0 	.word	0x200000d0
    3820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3824:	4d10      	ldr	r5, [pc, #64]	; (3868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    3826:	4606      	mov	r6, r0
    3828:	460f      	mov	r7, r1
    382a:	6868      	ldr	r0, [r5, #4]
    382c:	490f      	ldr	r1, [pc, #60]	; (386c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    382e:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3832:	5c0c      	ldrb	r4, [r1, r0]
    3834:	4620      	mov	r0, r4
    3836:	f004 fe37 	bl	84a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    383a:	6868      	ldr	r0, [r5, #4]
    383c:	2101      	movs	r1, #1
    383e:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3842:	2025      	movs	r0, #37	; 0x25
    3844:	f004 fe06 	bl	8454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    3848:	4638      	mov	r0, r7
    384a:	f004 fd39 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    384e:	f04f 0101 	mov.w	r1, #1
    3852:	4608      	mov	r0, r1
    3854:	b126      	cbz	r6, 3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    3856:	f004 fb93 	bl	7f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    385a:	b918      	cbnz	r0, 3864 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3860:	f004 fb54 	bl	7f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    3864:	2001      	movs	r0, #1
    3866:	e7f9      	b.n	385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    3868:	200000d0 	.word	0x200000d0
    386c:	000111af 	.word	0x000111af
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	4e1a      	ldr	r6, [pc, #104]	; (38dc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    3874:	460c      	mov	r4, r1
    3876:	6870      	ldr	r0, [r6, #4]
    3878:	7a41      	ldrb	r1, [r0, #9]
    387a:	b191      	cbz	r1, 38a2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    387c:	8940      	ldrh	r0, [r0, #10]
    387e:	2100      	movs	r1, #0
    3880:	f00a fa1d 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    3884:	0005      	movs	r5, r0
    3886:	d025      	beq.n	38d4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    3888:	8828      	ldrh	r0, [r5, #0]
    388a:	f00a fa9f 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    388e:	8828      	ldrh	r0, [r5, #0]
    3890:	2100      	movs	r1, #0
    3892:	f7fd fb4b 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    3896:	b188      	cbz	r0, 38bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    3898:	f240 31f2 	movw	r1, #1010	; 0x3f2
    389c:	2032      	movs	r0, #50	; 0x32
    389e:	f7fd f8e1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    38a2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38a4:	f8d0 200e 	ldr.w	r2, [r0, #14]
    38a8:	f841 2f03 	str.w	r2, [r1, #3]!
    38ac:	8a42      	ldrh	r2, [r0, #18]
    38ae:	808a      	strh	r2, [r1, #4]
    38b0:	7b40      	ldrb	r0, [r0, #13]
    38b2:	f00b fa0a 	bl	ecca <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    38b6:	6871      	ldr	r1, [r6, #4]
    38b8:	6d49      	ldr	r1, [r1, #84]	; 0x54
    38ba:	7088      	strb	r0, [r1, #2]
    38bc:	2500      	movs	r5, #0
    38be:	7065      	strb	r5, [r4, #1]
    38c0:	2015      	movs	r0, #21
    38c2:	7020      	strb	r0, [r4, #0]
    38c4:	6871      	ldr	r1, [r6, #4]
    38c6:	2221      	movs	r2, #33	; 0x21
    38c8:	1d20      	adds	r0, r4, #4
    38ca:	3109      	adds	r1, #9
    38cc:	f00d fb3b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    38d0:	71e5      	strb	r5, [r4, #7]
    38d2:	bd70      	pop	{r4, r5, r6, pc}
    38d4:	f240 31ee 	movw	r1, #1006	; 0x3ee
    38d8:	e7e0      	b.n	389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    38da:	0000      	.short	0x0000
    38dc:	200000d0 	.word	0x200000d0
    38e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38e2:	2600      	movs	r6, #0
    38e4:	460f      	mov	r7, r1
    38e6:	4605      	mov	r5, r0
    38e8:	f88d 6000 	strb.w	r6, [sp]
    38ec:	466b      	mov	r3, sp
    38ee:	f000 f895 	bl	3a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    38f2:	0001      	movs	r1, r0
    38f4:	4810      	ldr	r0, [pc, #64]	; (3938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    38f6:	d003      	beq.n	3900 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    38f8:	6840      	ldr	r0, [r0, #4]
    38fa:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    38fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3900:	6840      	ldr	r0, [r0, #4]
    3902:	f89d 1000 	ldrb.w	r1, [sp]
    3906:	2f07      	cmp	r7, #7
    3908:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    390c:	d301      	bcc.n	3912 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    390e:	4634      	mov	r4, r6
    3910:	e002      	b.n	3918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3912:	0022      	movs	r2, r4
    3914:	d100      	bne.n	3918 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3916:	460c      	mov	r4, r1
    3918:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    391c:	6869      	ldr	r1, [r5, #4]
    391e:	2900      	cmp	r1, #0
    3920:	d0ed      	beq.n	38fe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3922:	7c69      	ldrb	r1, [r5, #17]
    3924:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    3928:	6869      	ldr	r1, [r5, #4]
    392a:	680a      	ldr	r2, [r1, #0]
    392c:	f840 2f82 	str.w	r2, [r0, #130]!
    3930:	8889      	ldrh	r1, [r1, #4]
    3932:	8081      	strh	r1, [r0, #4]
    3934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3936:	0000      	.short	0x0000
    3938:	200000d0 	.word	0x200000d0
    393c:	b510      	push	{r4, lr}
    393e:	4915      	ldr	r1, [pc, #84]	; (3994 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3940:	6842      	ldr	r2, [r0, #4]
    3942:	6849      	ldr	r1, [r1, #4]
    3944:	7813      	ldrb	r3, [r2, #0]
    3946:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    394a:	42a3      	cmp	r3, r4
    394c:	d11f      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    394e:	7853      	ldrb	r3, [r2, #1]
    3950:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3954:	42a3      	cmp	r3, r4
    3956:	d11a      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3958:	7893      	ldrb	r3, [r2, #2]
    395a:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    395e:	42a3      	cmp	r3, r4
    3960:	d115      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3962:	78d3      	ldrb	r3, [r2, #3]
    3964:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    3968:	42a3      	cmp	r3, r4
    396a:	d110      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    396c:	7913      	ldrb	r3, [r2, #4]
    396e:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    3972:	42a3      	cmp	r3, r4
    3974:	d10b      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3976:	7952      	ldrb	r2, [r2, #5]
    3978:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    397c:	429a      	cmp	r2, r3
    397e:	d106      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3980:	7c40      	ldrb	r0, [r0, #17]
    3982:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    3986:	4288      	cmp	r0, r1
    3988:	d101      	bne.n	398e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    398a:	2001      	movs	r0, #1
    398c:	bd10      	pop	{r4, pc}
    398e:	2000      	movs	r0, #0
    3990:	bd10      	pop	{r4, pc}
    3992:	0000      	.short	0x0000
    3994:	200000d0 	.word	0x200000d0
    3998:	b510      	push	{r4, lr}
    399a:	7801      	ldrb	r1, [r0, #0]
    399c:	b08c      	sub	sp, #48	; 0x30
    399e:	f001 040f 	and.w	r4, r1, #15
    39a2:	4622      	mov	r2, r4
    39a4:	a901      	add	r1, sp, #4
    39a6:	f000 ff0b 	bl	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    39aa:	f004 fa5f 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    39ae:	f000 fba1 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    39b2:	2c04      	cmp	r4, #4
    39b4:	d114      	bne.n	39e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    39b6:	a801      	add	r0, sp, #4
    39b8:	f7ff ffc0 	bl	393c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    39bc:	b180      	cbz	r0, 39e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    39be:	a80b      	add	r0, sp, #44	; 0x2c
    39c0:	f000 fba0 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    39c4:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    39c8:	9000      	str	r0, [sp, #0]
    39ca:	4807      	ldr	r0, [pc, #28]	; (39e8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    39cc:	6840      	ldr	r0, [r0, #4]
    39ce:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    39d2:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    39d6:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    39da:	a801      	add	r0, sp, #4
    39dc:	f00b fa69 	bl	eeb2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    39e0:	b00c      	add	sp, #48	; 0x30
    39e2:	2005      	movs	r0, #5
    39e4:	bd10      	pop	{r4, pc}
    39e6:	0000      	.short	0x0000
    39e8:	200000d0 	.word	0x200000d0
    39ec:	4804      	ldr	r0, [pc, #16]	; (3a00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    39ee:	6840      	ldr	r0, [r0, #4]
    39f0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    39f4:	2803      	cmp	r0, #3
    39f6:	d001      	beq.n	39fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    39f8:	2000      	movs	r0, #0
    39fa:	4770      	bx	lr
    39fc:	2001      	movs	r0, #1
    39fe:	4770      	bx	lr
    3a00:	200000d0 	.word	0x200000d0
    3a04:	7c82      	ldrb	r2, [r0, #18]
    3a06:	6883      	ldr	r3, [r0, #8]
    3a08:	4803      	ldr	r0, [pc, #12]	; (3a18 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    3a0a:	6841      	ldr	r1, [r0, #4]
    3a0c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3a10:	314a      	adds	r1, #74	; 0x4a
    3a12:	f00a b9df 	b.w	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3a16:	0000      	.short	0x0000
    3a18:	200000d0 	.word	0x200000d0
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	6841      	ldr	r1, [r0, #4]
    3a20:	461e      	mov	r6, r3
    3a22:	4604      	mov	r4, r0
    3a24:	b1c1      	cbz	r1, 3a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    3a26:	7c60      	ldrb	r0, [r4, #17]
    3a28:	f00b f944 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3a2c:	4d10      	ldr	r5, [pc, #64]	; (3a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3a2e:	6869      	ldr	r1, [r5, #4]
    3a30:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3a34:	b141      	cbz	r1, 3a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    3a36:	b138      	cbz	r0, 3a48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    3a38:	f00a fa7e 	bl	df38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3a3c:	6869      	ldr	r1, [r5, #4]
    3a3e:	f801 0f78 	strb.w	r0, [r1, #120]!
    3a42:	7048      	strb	r0, [r1, #1]
    3a44:	2001      	movs	r0, #1
    3a46:	71c8      	strb	r0, [r1, #7]
    3a48:	686b      	ldr	r3, [r5, #4]
    3a4a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3a4e:	28ff      	cmp	r0, #255	; 0xff
    3a50:	d004      	beq.n	3a5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3a52:	f7fe fc2f 	bl	22b4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    3a56:	7030      	strb	r0, [r6, #0]
    3a58:	2000      	movs	r0, #0
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	7c60      	ldrb	r0, [r4, #17]
    3a5e:	4632      	mov	r2, r6
    3a60:	3378      	adds	r3, #120	; 0x78
    3a62:	6861      	ldr	r1, [r4, #4]
    3a64:	f7fe fca2 	bl	23ac <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    3a68:	f080 0001 	eor.w	r0, r0, #1
    3a6c:	bd70      	pop	{r4, r5, r6, pc}
    3a6e:	0000      	.short	0x0000
    3a70:	200000d0 	.word	0x200000d0
    3a74:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3a78:	4c40      	ldr	r4, [pc, #256]	; (3b7c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe4>)
    3a7a:	2500      	movs	r5, #0
    3a7c:	466f      	mov	r7, sp
    3a7e:	6860      	ldr	r0, [r4, #4]
    3a80:	7245      	strb	r5, [r0, #9]
    3a82:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a84:	880a      	ldrh	r2, [r1, #0]
    3a86:	8142      	strh	r2, [r0, #10]
    3a88:	6908      	ldr	r0, [r1, #16]
    3a8a:	f00a fad0 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a8e:	6861      	ldr	r1, [r4, #4]
    3a90:	f821 0f20 	strh.w	r0, [r1, #32]!
    3a94:	6b48      	ldr	r0, [r1, #52]	; 0x34
    3a96:	8b02      	ldrh	r2, [r0, #24]
    3a98:	804a      	strh	r2, [r1, #2]
    3a9a:	8b40      	ldrh	r0, [r0, #26]
    3a9c:	8088      	strh	r0, [r1, #4]
    3a9e:	718d      	strb	r5, [r1, #6]
    3aa0:	20ff      	movs	r0, #255	; 0xff
    3aa2:	71c8      	strb	r0, [r1, #7]
    3aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    3aa8:	8108      	strh	r0, [r1, #8]
    3aaa:	4669      	mov	r1, sp
    3aac:	68a0      	ldr	r0, [r4, #8]
    3aae:	f00a fd07 	bl	e4c0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    3ab2:	68a0      	ldr	r0, [r4, #8]
    3ab4:	7800      	ldrb	r0, [r0, #0]
    3ab6:	f3c0 1680 	ubfx	r6, r0, #6, #1
    3aba:	6860      	ldr	r0, [r4, #4]
    3abc:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ac0:	b120      	cbz	r0, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
    3ac2:	4639      	mov	r1, r7
    3ac4:	4630      	mov	r0, r6
    3ac6:	f00b f8f5 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3aca:	b940      	cbnz	r0, 3ade <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x46>
    3acc:	6860      	ldr	r0, [r4, #4]
    3ace:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3ad2:	b158      	cbz	r0, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ad4:	4639      	mov	r1, r7
    3ad6:	4630      	mov	r0, r6
    3ad8:	f00b f8e3 	bl	eca2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3adc:	b130      	cbz	r0, 3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
    3ade:	6860      	ldr	r0, [r4, #4]
    3ae0:	9900      	ldr	r1, [sp, #0]
    3ae2:	6141      	str	r1, [r0, #20]
    3ae4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3ae8:	8301      	strh	r1, [r0, #24]
    3aea:	e002      	b.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
    3aec:	6860      	ldr	r0, [r4, #4]
    3aee:	6145      	str	r5, [r0, #20]
    3af0:	8305      	strh	r5, [r0, #24]
    3af2:	6861      	ldr	r1, [r4, #4]
    3af4:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    3af8:	28ff      	cmp	r0, #255	; 0xff
    3afa:	d017      	beq.n	3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>
    3afc:	f101 020e 	add.w	r2, r1, #14
    3b00:	310d      	adds	r1, #13
    3b02:	f7fe fbbd 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    3b06:	b160      	cbz	r0, 3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
    3b08:	6860      	ldr	r0, [r4, #4]
    3b0a:	7b41      	ldrb	r1, [r0, #13]
    3b0c:	f041 0102 	orr.w	r1, r1, #2
    3b10:	7341      	strb	r1, [r0, #13]
    3b12:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    3b16:	f8c0 101a 	str.w	r1, [r0, #26]
    3b1a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3b1e:	83c1      	strh	r1, [r0, #30]
    3b20:	e010      	b.n	3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
    3b22:	f241 5197 	movw	r1, #5527	; 0x1597
    3b26:	2032      	movs	r0, #50	; 0x32
    3b28:	f7fc ff9c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b2c:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3b30:	7348      	strb	r0, [r1, #13]
    3b32:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    3b36:	f841 0f0e 	str.w	r0, [r1, #14]!
    3b3a:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3b3e:	8088      	strh	r0, [r1, #4]
    3b40:	60cd      	str	r5, [r1, #12]
    3b42:	820d      	strh	r5, [r1, #16]
    3b44:	6860      	ldr	r0, [r4, #4]
    3b46:	6d42      	ldr	r2, [r0, #84]	; 0x54
    3b48:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3b4c:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3b50:	2212      	movs	r2, #18
    3b52:	490b      	ldr	r1, [pc, #44]	; (3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>)
    3b54:	f00a fda4 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3b58:	6860      	ldr	r0, [r4, #4]
    3b5a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3b5c:	302a      	adds	r0, #42	; 0x2a
    3b5e:	880a      	ldrh	r2, [r1, #0]
    3b60:	4908      	ldr	r1, [pc, #32]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3b62:	868a      	strh	r2, [r1, #52]	; 0x34
    3b64:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    3b66:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    3b6a:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    3b6e:	2206      	movs	r2, #6
    3b70:	4905      	ldr	r1, [pc, #20]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3b72:	f00a fda9 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3b76:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	200000d0 	.word	0x200000d0
    3b80:	00003871 	.word	0x00003871
    3b84:	20000ba0 	.word	0x20000ba0
    3b88:	000037f5 	.word	0x000037f5
    3b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b90:	4c4c      	ldr	r4, [pc, #304]	; (3cc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x22c>)
    3b92:	4606      	mov	r6, r0
    3b94:	2100      	movs	r1, #0
    3b96:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    3b9a:	3570      	adds	r5, #112	; 0x70
    3b9c:	8001      	strh	r1, [r0, #0]
    3b9e:	2e03      	cmp	r6, #3
    3ba0:	d002      	beq.n	3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>
    3ba2:	2e05      	cmp	r6, #5
    3ba4:	d004      	beq.n	3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>
    3ba6:	e051      	b.n	3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>
    3ba8:	2103      	movs	r1, #3
    3baa:	f00a fca0 	bl	e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3bae:	e04d      	b.n	3c4c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1b4>
    3bb0:	2105      	movs	r1, #5
    3bb2:	f00a fc9c 	bl	e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3bb6:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3bba:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bbc:	6949      	ldr	r1, [r1, #20]
    3bbe:	f8c7 100f 	str.w	r1, [r7, #15]
    3bc2:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3bc4:	69c9      	ldr	r1, [r1, #28]
    3bc6:	74f9      	strb	r1, [r7, #19]
    3bc8:	0a0a      	lsrs	r2, r1, #8
    3bca:	753a      	strb	r2, [r7, #20]
    3bcc:	0c09      	lsrs	r1, r1, #16
    3bce:	7579      	strb	r1, [r7, #21]
    3bd0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3bd2:	6901      	ldr	r1, [r0, #16]
    3bd4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3bd6:	f00a fbb1 	bl	e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3bda:	75b8      	strb	r0, [r7, #22]
    3bdc:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3be0:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3be2:	6901      	ldr	r1, [r0, #16]
    3be4:	6a00      	ldr	r0, [r0, #32]
    3be6:	f00a fb92 	bl	e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3bea:	75f8      	strb	r0, [r7, #23]
    3bec:	0a00      	lsrs	r0, r0, #8
    3bee:	7638      	strb	r0, [r7, #24]
    3bf0:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3bf4:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3bf6:	6900      	ldr	r0, [r0, #16]
    3bf8:	f00a fa19 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3bfc:	7678      	strb	r0, [r7, #25]
    3bfe:	0a00      	lsrs	r0, r0, #8
    3c00:	76b8      	strb	r0, [r7, #26]
    3c02:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3c06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c08:	8b09      	ldrh	r1, [r1, #24]
    3c0a:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3c0e:	0a09      	lsrs	r1, r1, #8
    3c10:	7079      	strb	r1, [r7, #1]
    3c12:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c14:	8b49      	ldrh	r1, [r1, #26]
    3c16:	70b9      	strb	r1, [r7, #2]
    3c18:	0a09      	lsrs	r1, r1, #8
    3c1a:	70f9      	strb	r1, [r7, #3]
    3c1c:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3c1e:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3c22:	607a      	str	r2, [r7, #4]
    3c24:	7909      	ldrb	r1, [r1, #4]
    3c26:	7239      	strb	r1, [r7, #8]
    3c28:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3c2a:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3c2e:	7a78      	ldrb	r0, [r7, #9]
    3c30:	f001 011f 	and.w	r1, r1, #31
    3c34:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3c38:	4308      	orrs	r0, r1
    3c3a:	7278      	strb	r0, [r7, #9]
    3c3c:	f003 fefa 	bl	7a34 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3c40:	7a79      	ldrb	r1, [r7, #9]
    3c42:	f001 011f 	and.w	r1, r1, #31
    3c46:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3c4a:	7279      	strb	r1, [r7, #9]
    3c4c:	f105 0112 	add.w	r1, r5, #18
    3c50:	68a0      	ldr	r0, [r4, #8]
    3c52:	f00a fc67 	bl	e524 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3c56:	7e69      	ldrb	r1, [r5, #25]
    3c58:	68a0      	ldr	r0, [r4, #8]
    3c5a:	f00a fc69 	bl	e530 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3c5e:	6860      	ldr	r0, [r4, #4]
    3c60:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3c64:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3c68:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3c6c:	b188      	cbz	r0, 3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3c6e:	f7ff febd 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3c72:	b130      	cbz	r0, 3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
    3c74:	6860      	ldr	r0, [r4, #4]
    3c76:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3c7a:	b111      	cbz	r1, 3c82 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1ea>
    3c7c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3c80:	e002      	b.n	3c88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1f0>
    3c82:	6860      	ldr	r0, [r4, #4]
    3c84:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3c88:	f7fe fac0 	bl	220c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3c8c:	b108      	cbz	r0, 3c92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1fa>
    3c8e:	2701      	movs	r7, #1
    3c90:	4605      	mov	r5, r0
    3c92:	4629      	mov	r1, r5
    3c94:	68a0      	ldr	r0, [r4, #8]
    3c96:	f00a fc52 	bl	e53e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3c9a:	4639      	mov	r1, r7
    3c9c:	68a0      	ldr	r0, [r4, #8]
    3c9e:	f00a fc54 	bl	e54a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ca2:	68a0      	ldr	r0, [r4, #8]
    3ca4:	f004 fb0c 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3ca8:	2e05      	cmp	r6, #5
    3caa:	d108      	bne.n	3cbe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x226>
    3cac:	6860      	ldr	r0, [r4, #4]
    3cae:	682a      	ldr	r2, [r5, #0]
    3cb0:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3cb2:	f8c1 200a 	str.w	r2, [r1, #10]
    3cb6:	88aa      	ldrh	r2, [r5, #4]
    3cb8:	81ca      	strh	r2, [r1, #14]
    3cba:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3cbc:	7247      	strb	r7, [r0, #9]
    3cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc2:	0000      	.short	0x0000
    3cc4:	200000d0 	.word	0x200000d0
    3cc8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3ccc:	4f65      	ldr	r7, [pc, #404]	; (3e64 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3cc>)
    3cce:	4604      	mov	r4, r0
    3cd0:	6878      	ldr	r0, [r7, #4]
    3cd2:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3cd6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3cda:	b180      	cbz	r0, 3cfe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x266>
    3cdc:	2600      	movs	r6, #0
    3cde:	2500      	movs	r5, #0
    3ce0:	7ca0      	ldrb	r0, [r4, #18]
    3ce2:	68a1      	ldr	r1, [r4, #8]
    3ce4:	f00a ffe6 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3ce8:	4682      	mov	sl, r0
    3cea:	f7ff fe7f 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cee:	b140      	cbz	r0, 3d02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26a>
    3cf0:	6878      	ldr	r0, [r7, #4]
    3cf2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3cf6:	b121      	cbz	r1, 3d02 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26a>
    3cf8:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3cfc:	e004      	b.n	3d08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x270>
    3cfe:	2601      	movs	r6, #1
    3d00:	e7ed      	b.n	3cde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x246>
    3d02:	6878      	ldr	r0, [r7, #4]
    3d04:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3d08:	4683      	mov	fp, r0
    3d0a:	f7fe fa0b 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3d0e:	ea5f 0900 	movs.w	r9, r0
    3d12:	d00c      	beq.n	3d2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x296>
    3d14:	4658      	mov	r0, fp
    3d16:	f7fe f9f9 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3d1a:	b100      	cbz	r0, 3d1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x286>
    3d1c:	2601      	movs	r6, #1
    3d1e:	f1ba 0f00 	cmp.w	sl, #0
    3d22:	d004      	beq.n	3d2e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x296>
    3d24:	4648      	mov	r0, r9
    3d26:	68a1      	ldr	r1, [r4, #8]
    3d28:	f00a f8b9 	bl	de9e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3d2c:	4605      	mov	r5, r0
    3d2e:	6878      	ldr	r0, [r7, #4]
    3d30:	46b9      	mov	r9, r7
    3d32:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3d36:	b10d      	cbz	r5, 3d3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a4>
    3d38:	f047 0702 	orr.w	r7, r7, #2
    3d3c:	f7ff fe56 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3d40:	b3a0      	cbz	r0, 3dac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x314>
    3d42:	6860      	ldr	r0, [r4, #4]
    3d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3d48:	7802      	ldrb	r2, [r0, #0]
    3d4a:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3d4e:	429a      	cmp	r2, r3
    3d50:	d11f      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d52:	7842      	ldrb	r2, [r0, #1]
    3d54:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3d58:	429a      	cmp	r2, r3
    3d5a:	d11a      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d5c:	7882      	ldrb	r2, [r0, #2]
    3d5e:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3d62:	429a      	cmp	r2, r3
    3d64:	d115      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d66:	78c2      	ldrb	r2, [r0, #3]
    3d68:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3d6c:	429a      	cmp	r2, r3
    3d6e:	d110      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d70:	7902      	ldrb	r2, [r0, #4]
    3d72:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d76:	429a      	cmp	r2, r3
    3d78:	d10b      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d7a:	7940      	ldrb	r0, [r0, #5]
    3d7c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d80:	4290      	cmp	r0, r2
    3d82:	d106      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d84:	7c60      	ldrb	r0, [r4, #17]
    3d86:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3d8a:	4288      	cmp	r0, r1
    3d8c:	d101      	bne.n	3d92 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fa>
    3d8e:	2001      	movs	r0, #1
    3d90:	e000      	b.n	3d94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2fc>
    3d92:	2000      	movs	r0, #0
    3d94:	4f34      	ldr	r7, [pc, #208]	; (3e68 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d0>)
    3d96:	4682      	mov	sl, r0
    3d98:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3d9c:	2808      	cmp	r0, #8
    3d9e:	d006      	beq.n	3dae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x316>
    3da0:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3da4:	4288      	cmp	r0, r1
    3da6:	d102      	bne.n	3dae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x316>
    3da8:	2001      	movs	r0, #1
    3daa:	e001      	b.n	3db0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x318>
    3dac:	e021      	b.n	3df2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x35a>
    3dae:	2000      	movs	r0, #0
    3db0:	4681      	mov	r9, r0
    3db2:	b925      	cbnz	r5, 3dbe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x326>
    3db4:	b12e      	cbz	r6, 3dc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32a>
    3db6:	4620      	mov	r0, r4
    3db8:	f7ff fe24 	bl	3a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3dbc:	b108      	cbz	r0, 3dc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32a>
    3dbe:	2001      	movs	r0, #1
    3dc0:	e000      	b.n	3dc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x32c>
    3dc2:	2000      	movs	r0, #0
    3dc4:	f1b8 0f00 	cmp.w	r8, #0
    3dc8:	d009      	beq.n	3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dca:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3dce:	2901      	cmp	r1, #1
    3dd0:	d003      	beq.n	3dda <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x342>
    3dd2:	b921      	cbnz	r1, 3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dd4:	ea5a 0109 	orrs.w	r1, sl, r9
    3dd8:	d001      	beq.n	3dde <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x346>
    3dda:	2101      	movs	r1, #1
    3ddc:	e000      	b.n	3de0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x348>
    3dde:	2100      	movs	r1, #0
    3de0:	4208      	tst	r0, r1
    3de2:	d003      	beq.n	3dec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x354>
    3de4:	200c      	movs	r0, #12
    3de6:	b004      	add	sp, #16
    3de8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3dec:	f004 f83e 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3df0:	e036      	b.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3df2:	f004 f83b 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3df6:	f1b8 0f00 	cmp.w	r8, #0
    3dfa:	d031      	beq.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3dfc:	4620      	mov	r0, r4
    3dfe:	f7ff fe01 	bl	3a04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3e02:	b900      	cbnz	r0, 3e06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36e>
    3e04:	b175      	cbz	r5, 3e24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38c>
    3e06:	a803      	add	r0, sp, #12
    3e08:	f000 f97c 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3e0c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3e10:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e14:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e18:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e20:	463b      	mov	r3, r7
    3e22:	e018      	b.n	3e56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3be>
    3e24:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3e28:	464d      	mov	r5, r9
    3e2a:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3e2e:	2803      	cmp	r0, #3
    3e30:	d001      	beq.n	3e36 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x39e>
    3e32:	2802      	cmp	r0, #2
    3e34:	d114      	bne.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3e36:	f1ba 0f00 	cmp.w	sl, #0
    3e3a:	d011      	beq.n	3e60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c8>
    3e3c:	a803      	add	r0, sp, #12
    3e3e:	f000 f961 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3e42:	686a      	ldr	r2, [r5, #4]
    3e44:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e48:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e4c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e50:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e54:	23fe      	movs	r3, #254	; 0xfe
    3e56:	2101      	movs	r1, #1
    3e58:	4620      	mov	r0, r4
    3e5a:	324a      	adds	r2, #74	; 0x4a
    3e5c:	f00a ffb1 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e60:	2005      	movs	r0, #5
    3e62:	e7c0      	b.n	3de6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34e>
    3e64:	200000d0 	.word	0x200000d0
    3e68:	20000ba0 	.word	0x20000ba0
    3e6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e6e:	4c3f      	ldr	r4, [pc, #252]	; (3f6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d4>)
    3e70:	4605      	mov	r5, r0
    3e72:	6860      	ldr	r0, [r4, #4]
    3e74:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e78:	2900      	cmp	r1, #0
    3e7a:	d06c      	beq.n	3f56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4be>
    3e7c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e80:	2802      	cmp	r0, #2
    3e82:	d02c      	beq.n	3ede <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x446>
    3e84:	2801      	cmp	r0, #1
    3e86:	d043      	beq.n	3f10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x478>
    3e88:	f7ff fdb0 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3e8c:	2800      	cmp	r0, #0
    3e8e:	d067      	beq.n	3f60 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c8>
    3e90:	686a      	ldr	r2, [r5, #4]
    3e92:	6861      	ldr	r1, [r4, #4]
    3e94:	7810      	ldrb	r0, [r2, #0]
    3e96:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3e9a:	4298      	cmp	r0, r3
    3e9c:	d14c      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3e9e:	7850      	ldrb	r0, [r2, #1]
    3ea0:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ea4:	4298      	cmp	r0, r3
    3ea6:	d147      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ea8:	7890      	ldrb	r0, [r2, #2]
    3eaa:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3eae:	4298      	cmp	r0, r3
    3eb0:	d142      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3eb2:	78d0      	ldrb	r0, [r2, #3]
    3eb4:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3eb8:	4298      	cmp	r0, r3
    3eba:	d13d      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ebc:	7910      	ldrb	r0, [r2, #4]
    3ebe:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3ec2:	4298      	cmp	r0, r3
    3ec4:	d138      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ec6:	7950      	ldrb	r0, [r2, #5]
    3ec8:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3ecc:	4290      	cmp	r0, r2
    3ece:	d133      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3ed0:	7c68      	ldrb	r0, [r5, #17]
    3ed2:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3ed6:	4290      	cmp	r0, r2
    3ed8:	d12e      	bne.n	3f38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a0>
    3eda:	2001      	movs	r0, #1
    3edc:	e02d      	b.n	3f3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a2>
    3ede:	a803      	add	r0, sp, #12
    3ee0:	f000 f910 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3ee4:	6862      	ldr	r2, [r4, #4]
    3ee6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3eea:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3eee:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3ef2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3ef6:	23ff      	movs	r3, #255	; 0xff
    3ef8:	2100      	movs	r1, #0
    3efa:	4628      	mov	r0, r5
    3efc:	324a      	adds	r2, #74	; 0x4a
    3efe:	f00a ff60 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3f02:	6861      	ldr	r1, [r4, #4]
    3f04:	2001      	movs	r0, #1
    3f06:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3f0a:	200b      	movs	r0, #11
    3f0c:	b004      	add	sp, #16
    3f0e:	bd70      	pop	{r4, r5, r6, pc}
    3f10:	a803      	add	r0, sp, #12
    3f12:	f000 f8f7 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3f16:	6862      	ldr	r2, [r4, #4]
    3f18:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3f1c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3f20:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3f24:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3f28:	23ff      	movs	r3, #255	; 0xff
    3f2a:	2100      	movs	r1, #0
    3f2c:	4628      	mov	r0, r5
    3f2e:	324a      	adds	r2, #74	; 0x4a
    3f30:	f00a ff47 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3f34:	2005      	movs	r0, #5
    3f36:	e7e9      	b.n	3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>
    3f38:	2000      	movs	r0, #0
    3f3a:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3f3e:	2901      	cmp	r1, #1
    3f40:	d00c      	beq.n	3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f42:	b958      	cbnz	r0, 3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f44:	490a      	ldr	r1, [pc, #40]	; (3f70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4d8>)
    3f46:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3f4a:	2808      	cmp	r0, #8
    3f4c:	d003      	beq.n	3f56 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4be>
    3f4e:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3f52:	4281      	cmp	r1, r0
    3f54:	d002      	beq.n	3f5c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c4>
    3f56:	f003 ff89 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f5a:	e7eb      	b.n	3f34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x49c>
    3f5c:	200c      	movs	r0, #12
    3f5e:	e7d5      	b.n	3f0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x474>
    3f60:	f640 61df 	movw	r1, #3807	; 0xedf
    3f64:	2032      	movs	r0, #50	; 0x32
    3f66:	f7fc fd7d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f6a:	0000      	.short	0x0000
    3f6c:	200000d0 	.word	0x200000d0
    3f70:	20000ba0 	.word	0x20000ba0
    3f74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3f76:	4c1e      	ldr	r4, [pc, #120]	; (3ff0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x558>)
    3f78:	4605      	mov	r5, r0
    3f7a:	6860      	ldr	r0, [r4, #4]
    3f7c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3f80:	b129      	cbz	r1, 3f8e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4f6>
    3f82:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f86:	2802      	cmp	r0, #2
    3f88:	d004      	beq.n	3f94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4fc>
    3f8a:	2801      	cmp	r0, #1
    3f8c:	d01b      	beq.n	3fc6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52e>
    3f8e:	f003 ff6d 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f92:	e02a      	b.n	3fea <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x552>
    3f94:	a803      	add	r0, sp, #12
    3f96:	f000 f8b5 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3f9a:	6862      	ldr	r2, [r4, #4]
    3f9c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3fa0:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3fa4:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3fa8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3fac:	23ff      	movs	r3, #255	; 0xff
    3fae:	2106      	movs	r1, #6
    3fb0:	4628      	mov	r0, r5
    3fb2:	324a      	adds	r2, #74	; 0x4a
    3fb4:	f00a ff05 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3fb8:	6862      	ldr	r2, [r4, #4]
    3fba:	200b      	movs	r0, #11
    3fbc:	2100      	movs	r1, #0
    3fbe:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3fc2:	b004      	add	sp, #16
    3fc4:	bd70      	pop	{r4, r5, r6, pc}
    3fc6:	a803      	add	r0, sp, #12
    3fc8:	f000 f89c 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    3fcc:	6862      	ldr	r2, [r4, #4]
    3fce:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3fd2:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3fd6:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3fda:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3fde:	23ff      	movs	r3, #255	; 0xff
    3fe0:	2106      	movs	r1, #6
    3fe2:	4628      	mov	r0, r5
    3fe4:	324a      	adds	r2, #74	; 0x4a
    3fe6:	f00a feec 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3fea:	2005      	movs	r0, #5
    3fec:	e7e9      	b.n	3fc2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x52a>
    3fee:	0000      	.short	0x0000
    3ff0:	200000d0 	.word	0x200000d0
    3ff4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3ff6:	b389      	cbz	r1, 405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
    3ff8:	2901      	cmp	r1, #1
    3ffa:	d034      	beq.n	4066 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x66>
    3ffc:	2505      	movs	r5, #5
    3ffe:	2902      	cmp	r1, #2
    4000:	d004      	beq.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    4002:	2906      	cmp	r1, #6
    4004:	d025      	beq.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    4006:	f003 ff31 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    400a:	e01f      	b.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    400c:	4606      	mov	r6, r0
    400e:	f003 ff2d 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4012:	4c17      	ldr	r4, [pc, #92]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    4014:	6860      	ldr	r0, [r4, #4]
    4016:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    401a:	b1b9      	cbz	r1, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    401c:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    4020:	2801      	cmp	r0, #1
    4022:	d001      	beq.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4024:	2802      	cmp	r0, #2
    4026:	d111      	bne.n	404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4028:	a803      	add	r0, sp, #12
    402a:	f000 f86b 	bl	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    402e:	6862      	ldr	r2, [r4, #4]
    4030:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    4034:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    4038:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    403c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    4040:	23ff      	movs	r3, #255	; 0xff
    4042:	2102      	movs	r1, #2
    4044:	4630      	mov	r0, r6
    4046:	324a      	adds	r2, #74	; 0x4a
    4048:	f00a febb 	bl	edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    404c:	b004      	add	sp, #16
    404e:	4628      	mov	r0, r5
    4050:	bd70      	pop	{r4, r5, r6, pc}
    4052:	b004      	add	sp, #16
    4054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4058:	f7ff bf8c 	b.w	3f74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4dc>
    405c:	b004      	add	sp, #16
    405e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4062:	f7ff bf03 	b.w	3e6c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3d4>
    4066:	b004      	add	sp, #16
    4068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    406c:	f7ff be2c 	b.w	3cc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x230>
    4070:	200000d0 	.word	0x200000d0
    4074:	b570      	push	{r4, r5, r6, lr}
    4076:	4c11      	ldr	r4, [pc, #68]	; (40bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbc>)
    4078:	4605      	mov	r5, r0
    407a:	6861      	ldr	r1, [r4, #4]
    407c:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    4080:	2800      	cmp	r0, #0
    4082:	d019      	beq.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    4084:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    4088:	2800      	cmp	r0, #0
    408a:	d015      	beq.n	40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
    408c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    4090:	314a      	adds	r1, #74	; 0x4a
    4092:	f00a fe0f 	bl	ecb4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    4096:	b140      	cbz	r0, 40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
    4098:	f7fe f80e 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    409c:	6861      	ldr	r1, [r4, #4]
    409e:	462a      	mov	r2, r5
    40a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40a4:	314a      	adds	r1, #74	; 0x4a
    40a6:	f009 bec5 	b.w	de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    40aa:	6860      	ldr	r0, [r4, #4]
    40ac:	4629      	mov	r1, r5
    40ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40b2:	304a      	adds	r0, #74	; 0x4a
    40b4:	f009 bead 	b.w	de12 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    40b8:	bd70      	pop	{r4, r5, r6, pc}
    40ba:	0000      	.short	0x0000
    40bc:	200000d0 	.word	0x200000d0
    40c0:	4602      	mov	r2, r0
    40c2:	480b      	ldr	r0, [pc, #44]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    40c4:	b082      	sub	sp, #8
    40c6:	6840      	ldr	r0, [r0, #4]
    40c8:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    40cc:	f88d 1000 	strb.w	r1, [sp]
    40d0:	9900      	ldr	r1, [sp, #0]
    40d2:	9100      	str	r1, [sp, #0]
    40d4:	f89d 1000 	ldrb.w	r1, [sp]
    40d8:	2900      	cmp	r1, #0
    40da:	d107      	bne.n	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40dc:	6e81      	ldr	r1, [r0, #104]	; 0x68
    40de:	2900      	cmp	r1, #0
    40e0:	d004      	beq.n	40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>
    40e2:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    40e6:	b002      	add	sp, #8
    40e8:	f007 baac 	b.w	b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    40ec:	b002      	add	sp, #8
    40ee:	4770      	bx	lr
    40f0:	200000d0 	.word	0x200000d0
    40f4:	b510      	push	{r4, lr}
    40f6:	f7fe fb9d 	bl	2834 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    40fa:	4901      	ldr	r1, [pc, #4]	; (4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>)
    40fc:	7008      	strb	r0, [r1, #0]
    40fe:	bd10      	pop	{r4, pc}
    4100:	200000d0 	.word	0x200000d0
    4104:	4a07      	ldr	r2, [pc, #28]	; (4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>)
    4106:	b510      	push	{r4, lr}
    4108:	f992 1000 	ldrsb.w	r1, [r2]
    410c:	297f      	cmp	r1, #127	; 0x7f
    410e:	d003      	beq.n	4118 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x118>
    4110:	7001      	strb	r1, [r0, #0]
    4112:	207f      	movs	r0, #127	; 0x7f
    4114:	7010      	strb	r0, [r2, #0]
    4116:	bd10      	pop	{r4, pc}
    4118:	f44f 6189 	mov.w	r1, #1096	; 0x448
    411c:	2032      	movs	r0, #50	; 0x32
    411e:	f7fc fca1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4122:	0000      	.short	0x0000
    4124:	200000d0 	.word	0x200000d0
    4128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    412c:	4607      	mov	r7, r0
    412e:	f7fd f893 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4132:	4604      	mov	r4, r0
    4134:	f7fd f896 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4138:	4621      	mov	r1, r4
    413a:	f00a fe1d 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    413e:	0005      	movs	r5, r0
    4140:	d012      	beq.n	4168 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x168>
    4142:	4c2d      	ldr	r4, [pc, #180]	; (41f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f8>)
    4144:	6860      	ldr	r0, [r4, #4]
    4146:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    414a:	2801      	cmp	r0, #1
    414c:	d004      	beq.n	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    414e:	2802      	cmp	r0, #2
    4150:	d002      	beq.n	4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    4152:	f7ff fc4b 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4156:	b150      	cbz	r0, 416e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16e>
    4158:	f06f 0613 	mvn.w	r6, #19
    415c:	b33f      	cbz	r7, 41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
    415e:	4628      	mov	r0, r5
    4160:	f00a f996 	bl	e490 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    4164:	b950      	cbnz	r0, 417c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x17c>
    4166:	e005      	b.n	4174 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x174>
    4168:	f241 5142 	movw	r1, #5442	; 0x1542
    416c:	e03a      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    416e:	f241 5148 	movw	r1, #5448	; 0x1548
    4172:	e037      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    4174:	4628      	mov	r0, r5
    4176:	f00a f9ad 	bl	e4d4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    417a:	b1c0      	cbz	r0, 41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
    417c:	6861      	ldr	r1, [r4, #4]
    417e:	4628      	mov	r0, r5
    4180:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4184:	2a05      	cmp	r2, #5
    4186:	d202      	bcs.n	418e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18e>
    4188:	f241 41cc 	movw	r1, #5324	; 0x14cc
    418c:	e02a      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    418e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4192:	2a0b      	cmp	r2, #11
    4194:	d302      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    4196:	f241 41cd 	movw	r1, #5325	; 0x14cd
    419a:	e023      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    419c:	68e2      	ldr	r2, [r4, #12]
    419e:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    41a2:	6952      	ldr	r2, [r2, #20]
    41a4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    41a8:	5851      	ldr	r1, [r2, r1]
    41aa:	4788      	blx	r1
    41ac:	e016      	b.n	41dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1dc>
    41ae:	6860      	ldr	r0, [r4, #4]
    41b0:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    41b4:	2905      	cmp	r1, #5
    41b6:	d202      	bcs.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b8:	f241 5138 	movw	r1, #5432	; 0x1538
    41bc:	e012      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41be:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    41c2:	290b      	cmp	r1, #11
    41c4:	d302      	bcc.n	41cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1cc>
    41c6:	f241 5139 	movw	r1, #5433	; 0x1539
    41ca:	e00b      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41cc:	68e1      	ldr	r1, [r4, #12]
    41ce:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    41d2:	6989      	ldr	r1, [r1, #24]
    41d4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    41d8:	5808      	ldr	r0, [r1, r0]
    41da:	4780      	blx	r0
    41dc:	280f      	cmp	r0, #15
    41de:	d304      	bcc.n	41ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ea>
    41e0:	f241 515d 	movw	r1, #5469	; 0x155d
    41e4:	2032      	movs	r0, #50	; 0x32
    41e6:	f7fc fc3d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    41ea:	68e1      	ldr	r1, [r4, #12]
    41ec:	6909      	ldr	r1, [r1, #16]
    41ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    41f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    41f6:	4700      	bx	r0
    41f8:	200000d0 	.word	0x200000d0
    41fc:	b510      	push	{r4, lr}
    41fe:	b118      	cbz	r0, 4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>
    4200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4204:	f000 b922 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    4208:	2900      	cmp	r1, #0
    420a:	d01d      	beq.n	4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>
    420c:	480f      	ldr	r0, [pc, #60]	; (424c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24c>)
    420e:	6841      	ldr	r1, [r0, #4]
    4210:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4214:	2a0b      	cmp	r2, #11
    4216:	d202      	bcs.n	421e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x21e>
    4218:	f241 6118 	movw	r1, #5656	; 0x1618
    421c:	e005      	b.n	422a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22a>
    421e:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4222:	2a0f      	cmp	r2, #15
    4224:	d304      	bcc.n	4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>
    4226:	f241 6119 	movw	r1, #5657	; 0x1619
    422a:	2032      	movs	r0, #50	; 0x32
    422c:	f7fc fc1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4230:	68c0      	ldr	r0, [r0, #12]
    4232:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    4236:	6880      	ldr	r0, [r0, #8]
    4238:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    423c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4240:	5840      	ldr	r0, [r0, r1]
    4242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4246:	4700      	bx	r0
    4248:	bd10      	pop	{r4, pc}
    424a:	0000      	.short	0x0000
    424c:	200000d0 	.word	0x200000d0
    4250:	b510      	push	{r4, lr}
    4252:	f7ff fabd 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4256:	f000 f907 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    425a:	4805      	ldr	r0, [pc, #20]	; (4270 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x270>)
    425c:	6881      	ldr	r1, [r0, #8]
    425e:	2000      	movs	r0, #0
    4260:	f7ff fc08 	bl	3a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    4264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4268:	2002      	movs	r0, #2
    426a:	f000 bae1 	b.w	4830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    426e:	0000      	.short	0x0000
    4270:	200000d0 	.word	0x200000d0
    4274:	b510      	push	{r4, lr}
    4276:	f7fc ffef 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    427a:	4604      	mov	r4, r0
    427c:	f7fc fff2 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4280:	4621      	mov	r1, r4
    4282:	f00a fd79 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4286:	b150      	cbz	r0, 429e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x29e>
    4288:	f004 f81a 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    428c:	2000      	movs	r0, #0
    428e:	f003 fee3 	bl	8058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4292:	4905      	ldr	r1, [pc, #20]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4294:	2006      	movs	r0, #6
    4296:	6849      	ldr	r1, [r1, #4]
    4298:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    429c:	bd10      	pop	{r4, pc}
    429e:	f240 612b 	movw	r1, #1579	; 0x62b
    42a2:	2032      	movs	r0, #50	; 0x32
    42a4:	f7fc fbde 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	490f      	ldr	r1, [pc, #60]	; (42ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ec>)
    42ae:	b510      	push	{r4, lr}
    42b0:	6848      	ldr	r0, [r1, #4]
    42b2:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    42b6:	2a06      	cmp	r2, #6
    42b8:	d202      	bcs.n	42c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c0>
    42ba:	f241 6146 	movw	r1, #5702	; 0x1646
    42be:	e005      	b.n	42cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2cc>
    42c0:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    42c4:	2a0b      	cmp	r2, #11
    42c6:	d304      	bcc.n	42d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2d2>
    42c8:	f241 6147 	movw	r1, #5703	; 0x1647
    42cc:	2032      	movs	r0, #50	; 0x32
    42ce:	f7fc fbc9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42d2:	68c9      	ldr	r1, [r1, #12]
    42d4:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42d8:	68c9      	ldr	r1, [r1, #12]
    42da:	f06f 0213 	mvn.w	r2, #19
    42de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    42e2:	5808      	ldr	r0, [r1, r0]
    42e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42e8:	4700      	bx	r0
    42ea:	0000      	.short	0x0000
    42ec:	200000d0 	.word	0x200000d0
    42f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42f4:	4c31      	ldr	r4, [pc, #196]	; (43bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3bc>)
    42f6:	4605      	mov	r5, r0
    42f8:	460e      	mov	r6, r1
    42fa:	6860      	ldr	r0, [r4, #4]
    42fc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4300:	b120      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4302:	2801      	cmp	r0, #1
    4304:	d002      	beq.n	430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4306:	200c      	movs	r0, #12
    4308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    430c:	f003 ff32 	bl	8174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4310:	f003 fd8a 	bl	7e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4314:	f003 fbae 	bl	7a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4318:	f004 f9b0 	bl	867c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    431c:	4828      	ldr	r0, [pc, #160]	; (43c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c0>)
    431e:	f003 fe93 	bl	8048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4322:	4828      	ldr	r0, [pc, #160]	; (43c4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c4>)
    4324:	f004 f890 	bl	8448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4328:	4827      	ldr	r0, [pc, #156]	; (43c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c8>)
    432a:	f004 f883 	bl	8434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    432e:	4630      	mov	r0, r6
    4330:	f003 ffc6 	bl	82c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4334:	7968      	ldrb	r0, [r5, #5]
    4336:	b110      	cbz	r0, 433e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33e>
    4338:	2001      	movs	r0, #1
    433a:	f7ff fec1 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    433e:	7928      	ldrb	r0, [r5, #4]
    4340:	2803      	cmp	r0, #3
    4342:	d001      	beq.n	4348 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x348>
    4344:	b118      	cbz	r0, 434e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34e>
    4346:	e018      	b.n	437a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37a>
    4348:	f640 2141 	movw	r1, #2625	; 0xa41
    434c:	e033      	b.n	43b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b6>
    434e:	6861      	ldr	r1, [r4, #4]
    4350:	2000      	movs	r0, #0
    4352:	2503      	movs	r5, #3
    4354:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    4358:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    435c:	1c52      	adds	r2, r2, #1
    435e:	fbb2 f7f5 	udiv	r7, r2, r5
    4362:	fb05 2217 	mls	r2, r5, r7, r2
    4366:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    436a:	fa23 f202 	lsr.w	r2, r3, r2
    436e:	07d2      	lsls	r2, r2, #31
    4370:	d103      	bne.n	437a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x37a>
    4372:	1c40      	adds	r0, r0, #1
    4374:	b2c0      	uxtb	r0, r0
    4376:	2803      	cmp	r0, #3
    4378:	d3ee      	bcc.n	4358 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x358>
    437a:	6860      	ldr	r0, [r4, #4]
    437c:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    4380:	f003 ff7c 	bl	827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4384:	4631      	mov	r1, r6
    4386:	2001      	movs	r0, #1
    4388:	f7ff fa4a 	bl	3820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    438c:	2800      	cmp	r0, #0
    438e:	d0bb      	beq.n	4308 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x308>
    4390:	f000 f922 	bl	45d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d8>
    4394:	6860      	ldr	r0, [r4, #4]
    4396:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    439a:	b138      	cbz	r0, 43ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ac>
    439c:	f7fd fe90 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    43a0:	480a      	ldr	r0, [pc, #40]	; (43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>)
    43a2:	6800      	ldr	r0, [r0, #0]
    43a4:	2803      	cmp	r0, #3
    43a6:	d004      	beq.n	43b2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3b2>
    43a8:	2000      	movs	r0, #0
    43aa:	e7ad      	b.n	4308 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x308>
    43ac:	f7fe f87c 	bl	24a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    43b0:	e7f6      	b.n	43a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a0>
    43b2:	f640 2153 	movw	r1, #2643	; 0xa53
    43b6:	2032      	movs	r0, #50	; 0x32
    43b8:	f7fc fb54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43bc:	200000d0 	.word	0x200000d0
    43c0:	000046c0 	.word	0x000046c0
    43c4:	00555555 	.word	0x00555555
    43c8:	8e89bed6 	.word	0x8e89bed6
    43cc:	40001550 	.word	0x40001550
    43d0:	b510      	push	{r4, lr}
    43d2:	2000      	movs	r0, #0
    43d4:	f7ff fe74 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    43d8:	4808      	ldr	r0, [pc, #32]	; (43fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3fc>)
    43da:	6840      	ldr	r0, [r0, #4]
    43dc:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    43e0:	b128      	cbz	r0, 43ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ee>
    43e2:	2801      	cmp	r0, #1
    43e4:	d003      	beq.n	43ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3ee>
    43e6:	2802      	cmp	r0, #2
    43e8:	d004      	beq.n	43f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f4>
    43ea:	200c      	movs	r0, #12
    43ec:	bd10      	pop	{r4, pc}
    43ee:	f000 f82d 	bl	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    43f2:	e001      	b.n	43f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3f8>
    43f4:	f000 f840 	bl	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    43f8:	2000      	movs	r0, #0
    43fa:	bd10      	pop	{r4, pc}
    43fc:	200000d0 	.word	0x200000d0
    4400:	b510      	push	{r4, lr}
    4402:	2000      	movs	r0, #0
    4404:	7048      	strb	r0, [r1, #1]
    4406:	2019      	movs	r0, #25
    4408:	7008      	strb	r0, [r1, #0]
    440a:	480f      	ldr	r0, [pc, #60]	; (4448 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x448>)
    440c:	6840      	ldr	r0, [r0, #4]
    440e:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4412:	6048      	str	r0, [r1, #4]
    4414:	7908      	ldrb	r0, [r1, #4]
    4416:	2801      	cmp	r0, #1
    4418:	d114      	bne.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    441a:	88cc      	ldrh	r4, [r1, #6]
    441c:	2100      	movs	r1, #0
    441e:	4620      	mov	r0, r4
    4420:	f009 fc4d 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4424:	2800      	cmp	r0, #0
    4426:	d00d      	beq.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    4428:	4620      	mov	r0, r4
    442a:	f009 fccf 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    442e:	2100      	movs	r1, #0
    4430:	4620      	mov	r0, r4
    4432:	f7fc fd7b 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    4436:	2800      	cmp	r0, #0
    4438:	d004      	beq.n	4444 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x444>
    443a:	f44f 6182 	mov.w	r1, #1040	; 0x410
    443e:	2032      	movs	r0, #50	; 0x32
    4440:	f7fc fb10 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4444:	bd10      	pop	{r4, pc}
    4446:	0000      	.short	0x0000
    4448:	200000d0 	.word	0x200000d0
    444c:	b510      	push	{r4, lr}
    444e:	f7ff f9bf 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4452:	4904      	ldr	r1, [pc, #16]	; (4464 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x464>)
    4454:	2001      	movs	r0, #1
    4456:	6849      	ldr	r1, [r1, #4]
    4458:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4460:	f000 bb0a 	b.w	4a78 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    4464:	200000d0 	.word	0x200000d0
    4468:	4902      	ldr	r1, [pc, #8]	; (4474 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x474>)
    446a:	2000      	movs	r0, #0
    446c:	6849      	ldr	r1, [r1, #4]
    446e:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4472:	4770      	bx	lr
    4474:	200000d0 	.word	0x200000d0
    4478:	b570      	push	{r4, r5, r6, lr}
    447a:	f7fc feed 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    447e:	4604      	mov	r4, r0
    4480:	f7fc fef0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4484:	4621      	mov	r1, r4
    4486:	f00a fc77 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    448a:	0004      	movs	r4, r0
    448c:	d020      	beq.n	44d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4d0>
    448e:	f00a fc80 	bl	ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    4492:	2000      	movs	r0, #0
    4494:	f000 f9fa 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4498:	b1f8      	cbz	r0, 44da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4da>
    449a:	4d20      	ldr	r5, [pc, #128]	; (451c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x51c>)
    449c:	6868      	ldr	r0, [r5, #4]
    449e:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    44a2:	2802      	cmp	r0, #2
    44a4:	d003      	beq.n	44ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ae>
    44a6:	4621      	mov	r1, r4
    44a8:	2000      	movs	r0, #0
    44aa:	f7ff f9b9 	bl	3820 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    44ae:	1ce0      	adds	r0, r4, #3
    44b0:	f009 fd3f 	bl	df32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    44b4:	6869      	ldr	r1, [r5, #4]
    44b6:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    44ba:	b128      	cbz	r0, 44c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c8>
    44bc:	2440      	movs	r4, #64	; 0x40
    44be:	f003 faf9 	bl	7ab4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    44c2:	4620      	mov	r0, r4
    44c4:	f003 fcbe 	bl	7e44 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    44c8:	f7ff fa90 	bl	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    44cc:	b970      	cbnz	r0, 44ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4ec>
    44ce:	e008      	b.n	44e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e2>
    44d0:	f240 5119 	movw	r1, #1305	; 0x519
    44d4:	2032      	movs	r0, #50	; 0x32
    44d6:	f7fc fac5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    44de:	f7ff bfb5 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    44e2:	6868      	ldr	r0, [r5, #4]
    44e4:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    44e8:	2802      	cmp	r0, #2
    44ea:	d104      	bne.n	44f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4f6>
    44ec:	2100      	movs	r1, #0
    44ee:	2201      	movs	r2, #1
    44f0:	4608      	mov	r0, r1
    44f2:	f003 ff6d 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    44f6:	6868      	ldr	r0, [r5, #4]
    44f8:	21ff      	movs	r1, #255	; 0xff
    44fa:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    44fe:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4502:	2100      	movs	r1, #0
    4504:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    4508:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    450c:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4510:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4514:	2105      	movs	r1, #5
    4516:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    451a:	bd70      	pop	{r4, r5, r6, pc}
    451c:	200000d0 	.word	0x200000d0
    4520:	b570      	push	{r4, r5, r6, lr}
    4522:	f7fc fe99 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    4526:	4604      	mov	r4, r0
    4528:	f7fc fe9c 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    452c:	4621      	mov	r1, r4
    452e:	f00a fc23 	bl	ed78 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4532:	0005      	movs	r5, r0
    4534:	d028      	beq.n	4588 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x588>
    4536:	4e19      	ldr	r6, [pc, #100]	; (459c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x59c>)
    4538:	2004      	movs	r0, #4
    453a:	6874      	ldr	r4, [r6, #4]
    453c:	3470      	adds	r4, #112	; 0x70
    453e:	f000 f9a5 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4542:	b330      	cbz	r0, 4592 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x592>
    4544:	200c      	movs	r0, #12
    4546:	7020      	strb	r0, [r4, #0]
    4548:	2000      	movs	r0, #0
    454a:	f000 f971 	bl	4830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    454e:	7828      	ldrb	r0, [r5, #0]
    4550:	6871      	ldr	r1, [r6, #4]
    4552:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4556:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    455a:	2005      	movs	r0, #5
    455c:	f7ff fb16 	bl	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
    4560:	4a0f      	ldr	r2, [pc, #60]	; (45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>)
    4562:	68b1      	ldr	r1, [r6, #8]
    4564:	2520      	movs	r5, #32
    4566:	6d50      	ldr	r0, [r2, #84]	; 0x54
    4568:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    456c:	7808      	ldrb	r0, [r1, #0]
    456e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    4572:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    4576:	4318      	orrs	r0, r3
    4578:	7008      	strb	r0, [r1, #0]
    457a:	6d50      	ldr	r0, [r2, #84]	; 0x54
    457c:	7ea2      	ldrb	r2, [r4, #26]
    457e:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    4582:	4011      	ands	r1, r2
    4584:	7001      	strb	r1, [r0, #0]
    4586:	bd70      	pop	{r4, r5, r6, pc}
    4588:	f240 619a 	movw	r1, #1690	; 0x69a
    458c:	2032      	movs	r0, #50	; 0x32
    458e:	f7fc fa69 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4592:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4596:	f7ff bf59 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    459a:	0000      	.short	0x0000
    459c:	200000d0 	.word	0x200000d0
    45a0:	20000ba0 	.word	0x20000ba0
    45a4:	b510      	push	{r4, lr}
    45a6:	2003      	movs	r0, #3
    45a8:	f000 f970 	bl	488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    45ac:	b168      	cbz	r0, 45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ae:	2003      	movs	r0, #3
    45b0:	f7ff faec 	bl	3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>
    45b4:	2201      	movs	r2, #1
    45b6:	4611      	mov	r1, r2
    45b8:	2000      	movs	r0, #0
    45ba:	f003 ff09 	bl	83d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    45be:	4905      	ldr	r1, [pc, #20]	; (45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>)
    45c0:	200b      	movs	r0, #11
    45c2:	6849      	ldr	r1, [r1, #4]
    45c4:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    45c8:	bd10      	pop	{r4, pc}
    45ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    45ce:	f7ff bf3d 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    45d2:	0000      	.short	0x0000
    45d4:	200000d0 	.word	0x200000d0
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	4d19      	ldr	r5, [pc, #100]	; (4640 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x640>)
    45dc:	2000      	movs	r0, #0
    45de:	686c      	ldr	r4, [r5, #4]
    45e0:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    45e4:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    45e8:	b910      	cbnz	r0, 45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>
    45ea:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    45ee:	b308      	cbz	r0, 4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    45f0:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    45f4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    45f8:	4050      	eors	r0, r2
    45fa:	ea70 0101 	orns	r1, r0, r1
    45fe:	d019      	beq.n	4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    4600:	f007 f83e 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4604:	e9d4 2300 	ldrd	r2, r3, [r4]
    4608:	1a80      	subs	r0, r0, r2
    460a:	4199      	sbcs	r1, r3
    460c:	d312      	bcc.n	4634 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x634>
    460e:	f7fd feb9 	bl	2384 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4612:	490c      	ldr	r1, [pc, #48]	; (4644 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x644>)
    4614:	fba0 2301 	umull	r2, r3, r0, r1
    4618:	6868      	ldr	r0, [r5, #4]
    461a:	3090      	adds	r0, #144	; 0x90
    461c:	f00a fbae 	bl	ed7c <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4620:	6868      	ldr	r0, [r5, #4]
    4622:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    4626:	b110      	cbz	r0, 462e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62e>
    4628:	2001      	movs	r0, #1
    462a:	f7fd fd95 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    462e:	2001      	movs	r0, #1
    4630:	f7ff fd20 	bl	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    4634:	6869      	ldr	r1, [r5, #4]
    4636:	2002      	movs	r0, #2
    4638:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    463c:	bd70      	pop	{r4, r5, r6, pc}
    463e:	0000      	.short	0x0000
    4640:	200000d0 	.word	0x200000d0
    4644:	000f4240 	.word	0x000f4240
    4648:	00004469 	.word	0x00004469
    464c:	0000444d 	.word	0x0000444d
    4650:	0000ed59 	.word	0x0000ed59
    4654:	0000ed59 	.word	0x0000ed59
    4658:	0000ed59 	.word	0x0000ed59
    465c:	00004479 	.word	0x00004479
    4660:	0000ed59 	.word	0x0000ed59
    4664:	0000ed59 	.word	0x0000ed59
    4668:	0000ed59 	.word	0x0000ed59
    466c:	0000ed59 	.word	0x0000ed59
    4670:	0000ed59 	.word	0x0000ed59
    4674:	000045a5 	.word	0x000045a5
    4678:	00004521 	.word	0x00004521
    467c:	0000ed59 	.word	0x0000ed59
    4680:	0000ed59 	.word	0x0000ed59
    4684:	00004275 	.word	0x00004275
    4688:	00004251 	.word	0x00004251
    468c:	00000000 	.word	0x00000000
    4690:	0000ed63 	.word	0x0000ed63
    4694:	0000ed01 	.word	0x0000ed01
    4698:	0000ed13 	.word	0x0000ed13
    469c:	0000ed21 	.word	0x0000ed21
    46a0:	00003999 	.word	0x00003999
    46a4:	000042f1 	.word	0x000042f1
    46a8:	000043d1 	.word	0x000043d1
    46ac:	00004684 	.word	0x00004684
    46b0:	0000468c 	.word	0x0000468c
    46b4:	00004648 	.word	0x00004648
    46b8:	0000469c 	.word	0x0000469c
    46bc:	00004694 	.word	0x00004694
    46c0:	000042ad 	.word	0x000042ad
    46c4:	00004129 	.word	0x00004129
    46c8:	000041fd 	.word	0x000041fd
    46cc:	0000ed75 	.word	0x0000ed75
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4604      	mov	r4, r0
    46d4:	7800      	ldrb	r0, [r0, #0]
    46d6:	2805      	cmp	r0, #5
    46d8:	d001      	beq.n	46de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6de>
    46da:	2148      	movs	r1, #72	; 0x48
    46dc:	e058      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    46de:	7ba0      	ldrb	r0, [r4, #14]
    46e0:	06c0      	lsls	r0, r0, #27
    46e2:	d401      	bmi.n	46e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e8>
    46e4:	2149      	movs	r1, #73	; 0x49
    46e6:	e053      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    46e8:	221c      	movs	r2, #28
    46ea:	1d21      	adds	r1, r4, #4
    46ec:	482f      	ldr	r0, [pc, #188]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    46ee:	f00c fc2a 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    46f2:	482e      	ldr	r0, [pc, #184]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    46f4:	7b22      	ldrb	r2, [r4, #12]
    46f6:	f104 0120 	add.w	r1, r4, #32
    46fa:	301c      	adds	r0, #28
    46fc:	f00c fc23 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4700:	482a      	ldr	r0, [pc, #168]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    4702:	f04f 0201 	mov.w	r2, #1
    4706:	7a81      	ldrb	r1, [r0, #10]
    4708:	0749      	lsls	r1, r1, #29
    470a:	d502      	bpl.n	4712 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x712>
    470c:	7cc1      	ldrb	r1, [r0, #19]
    470e:	29fe      	cmp	r1, #254	; 0xfe
    4710:	d00c      	beq.n	472c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72c>
    4712:	2304      	movs	r3, #4
    4714:	7023      	strb	r3, [r4, #0]
    4716:	6801      	ldr	r1, [r0, #0]
    4718:	6061      	str	r1, [r4, #4]
    471a:	6841      	ldr	r1, [r0, #4]
    471c:	60a1      	str	r1, [r4, #8]
    471e:	8901      	ldrh	r1, [r0, #8]
    4720:	81a1      	strh	r1, [r4, #12]
    4722:	7a81      	ldrb	r1, [r0, #10]
    4724:	070d      	lsls	r5, r1, #28
    4726:	d519      	bpl.n	475c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x75c>
    4728:	73a3      	strb	r3, [r4, #14]
    472a:	e02d      	b.n	4788 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x788>
    472c:	2113      	movs	r1, #19
    472e:	7021      	strb	r1, [r4, #0]
    4730:	7801      	ldrb	r1, [r0, #0]
    4732:	7121      	strb	r1, [r4, #4]
    4734:	7162      	strb	r2, [r4, #5]
    4736:	7841      	ldrb	r1, [r0, #1]
    4738:	71a1      	strb	r1, [r4, #6]
    473a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    473e:	f8c4 1007 	str.w	r1, [r4, #7]
    4742:	88c1      	ldrh	r1, [r0, #6]
    4744:	f8a4 100b 	strh.w	r1, [r4, #11]
    4748:	21fe      	movs	r1, #254	; 0xfe
    474a:	7361      	strb	r1, [r4, #13]
    474c:	6941      	ldr	r1, [r0, #20]
    474e:	f8c4 100e 	str.w	r1, [r4, #14]
    4752:	8b01      	ldrh	r1, [r0, #24]
    4754:	8261      	strh	r1, [r4, #18]
    4756:	7a40      	ldrb	r0, [r0, #9]
    4758:	7520      	strb	r0, [r4, #20]
    475a:	bd70      	pop	{r4, r5, r6, pc}
    475c:	07cb      	lsls	r3, r1, #31
    475e:	d003      	beq.n	4768 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x768>
    4760:	078b      	lsls	r3, r1, #30
    4762:	d501      	bpl.n	4768 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x768>
    4764:	2100      	movs	r1, #0
    4766:	e00e      	b.n	4786 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x786>
    4768:	074b      	lsls	r3, r1, #29
    476a:	d501      	bpl.n	4770 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x770>
    476c:	73a2      	strb	r2, [r4, #14]
    476e:	e00b      	b.n	4788 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x788>
    4770:	07ca      	lsls	r2, r1, #31
    4772:	d110      	bne.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4774:	078a      	lsls	r2, r1, #30
    4776:	d501      	bpl.n	477c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x77c>
    4778:	2102      	movs	r1, #2
    477a:	e004      	b.n	4786 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x786>
    477c:	07ca      	lsls	r2, r1, #31
    477e:	d10a      	bne.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4780:	0789      	lsls	r1, r1, #30
    4782:	d408      	bmi.n	4796 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x796>
    4784:	2103      	movs	r1, #3
    4786:	73a1      	strb	r1, [r4, #14]
    4788:	7a02      	ldrb	r2, [r0, #8]
    478a:	2a1f      	cmp	r2, #31
    478c:	d905      	bls.n	479a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x79a>
    478e:	218d      	movs	r1, #141	; 0x8d
    4790:	2033      	movs	r0, #51	; 0x33
    4792:	f7fc f967 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4796:	218a      	movs	r1, #138	; 0x8a
    4798:	e7fa      	b.n	4790 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x790>
    479a:	f104 000f 	add.w	r0, r4, #15
    479e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47a2:	4902      	ldr	r1, [pc, #8]	; (47ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7ac>)
    47a4:	311c      	adds	r1, #28
    47a6:	f00c bbce 	b.w	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    47aa:	0000      	.short	0x0000
    47ac:	200015fd 	.word	0x200015fd
    47b0:	2100      	movs	r1, #0
    47b2:	7201      	strb	r1, [r0, #8]
    47b4:	2204      	movs	r2, #4
    47b6:	4901      	ldr	r1, [pc, #4]	; (47bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7bc>)
    47b8:	f009 bf72 	b.w	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    47bc:	0000ef4d 	.word	0x0000ef4d

000047c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    47c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47c4:	4616      	mov	r6, r2
    47c6:	460c      	mov	r4, r1
    47c8:	4605      	mov	r5, r0
    47ca:	f009 fe7f 	bl	e4cc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    47ce:	7460      	strb	r0, [r4, #17]
    47d0:	4628      	mov	r0, r5
    47d2:	f009 fe72 	bl	e4ba <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    47d6:	74a0      	strb	r0, [r4, #18]
    47d8:	1cea      	adds	r2, r5, #3
    47da:	4b14      	ldr	r3, [pc, #80]	; (482c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    47dc:	1d90      	adds	r0, r2, #6
    47de:	2100      	movs	r1, #0
    47e0:	2e07      	cmp	r6, #7
    47e2:	d21f      	bcs.n	4824 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    47e4:	e8df f006 	tbb	[pc, r6]
    47e8:	1e110b04 	.word	0x1e110b04
    47ec:	00041e13 	.word	0x00041e13
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	e00d      	b.n	4810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    47f4:	60e0      	str	r0, [r4, #12]
    47f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47fa:	60e1      	str	r1, [r4, #12]
    47fc:	e7fb      	b.n	47f6 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    47fe:	785b      	ldrb	r3, [r3, #1]
    4800:	7063      	strb	r3, [r4, #1]
    4802:	e9c4 2001 	strd	r2, r0, [r4, #4]
    4806:	7421      	strb	r1, [r4, #16]
    4808:	e7f7      	b.n	47fa <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    480a:	789b      	ldrb	r3, [r3, #2]
    480c:	e000      	b.n	4810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    480e:	78db      	ldrb	r3, [r3, #3]
    4810:	7063      	strb	r3, [r4, #1]
    4812:	e9c4 2101 	strd	r2, r1, [r4, #4]
    4816:	786a      	ldrb	r2, [r5, #1]
    4818:	1f92      	subs	r2, r2, #6
    481a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    481e:	7422      	strb	r2, [r4, #16]
    4820:	d0eb      	beq.n	47fa <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4822:	e7e7      	b.n	47f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4824:	7061      	strb	r1, [r4, #1]
    4826:	6061      	str	r1, [r4, #4]
    4828:	60a1      	str	r1, [r4, #8]
    482a:	e7ec      	b.n	4806 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    482c:	000111b2 	.word	0x000111b2

00004830 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4830:	b570      	push	{r4, r5, r6, lr}
    4832:	b140      	cbz	r0, 4846 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4834:	2801      	cmp	r0, #1
    4836:	d006      	beq.n	4846 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4838:	2802      	cmp	r0, #2
    483a:	d00a      	beq.n	4852 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    483c:	2803      	cmp	r0, #3
    483e:	d006      	beq.n	484e <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4840:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4844:	e015      	b.n	4872 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    4846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    484a:	f000 b97d 	b.w	4b48 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    484e:	2001      	movs	r0, #1
    4850:	e000      	b.n	4854 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4852:	2000      	movs	r0, #0
    4854:	4c0c      	ldr	r4, [pc, #48]	; (4888 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    4856:	2101      	movs	r1, #1
    4858:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    485c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    4860:	6a20      	ldr	r0, [r4, #32]
    4862:	2500      	movs	r5, #0
    4864:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    4868:	7821      	ldrb	r1, [r4, #0]
    486a:	2905      	cmp	r1, #5
    486c:	d004      	beq.n	4878 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    486e:	f640 0149 	movw	r1, #2121	; 0x849
    4872:	2021      	movs	r0, #33	; 0x21
    4874:	f7fc f8f6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4878:	f000 fd9a 	bl	53b0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    487c:	6225      	str	r5, [r4, #32]
    487e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4882:	f000 b9c5 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4886:	0000      	.short	0x0000
    4888:	20000c48 	.word	0x20000c48

0000488c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    488c:	b570      	push	{r4, r5, r6, lr}
    488e:	4605      	mov	r5, r0
    4890:	f006 fef6 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4894:	4c16      	ldr	r4, [pc, #88]	; (48f0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    4896:	6921      	ldr	r1, [r4, #16]
    4898:	1a46      	subs	r6, r0, r1
    489a:	b155      	cbz	r5, 48b2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    489c:	2d03      	cmp	r5, #3
    489e:	d00d      	beq.n	48bc <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    48a0:	2d04      	cmp	r5, #4
    48a2:	d00e      	beq.n	48c2 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    48a4:	2d06      	cmp	r5, #6
    48a6:	d01d      	beq.n	48e4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    48a8:	f240 31d6 	movw	r1, #982	; 0x3d6
    48ac:	2021      	movs	r0, #33	; 0x21
    48ae:	f7fc f8d9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48b2:	2001      	movs	r0, #1
    48b4:	f00a fbe8 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    48b8:	3098      	adds	r0, #152	; 0x98
    48ba:	e004      	b.n	48c6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    48bc:	f44f 7057 	mov.w	r0, #860	; 0x35c
    48c0:	e001      	b.n	48c6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    48c2:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    48c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    48c8:	1835      	adds	r5, r6, r0
    48ca:	39f4      	subs	r1, #244	; 0xf4
    48cc:	428d      	cmp	r5, r1
    48ce:	d307      	bcc.n	48e0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    48d0:	2600      	movs	r6, #0
    48d2:	f000 fac9 	bl	4e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    48d6:	b140      	cbz	r0, 48ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    48d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    48da:	38f4      	subs	r0, #244	; 0xf4
    48dc:	4285      	cmp	r5, r0
    48de:	d203      	bcs.n	48e8 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    48e0:	2601      	movs	r6, #1
    48e2:	e002      	b.n	48ea <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    48e4:	2001      	movs	r0, #1
    48e6:	bd70      	pop	{r4, r5, r6, pc}
    48e8:	2600      	movs	r6, #0
    48ea:	4630      	mov	r0, r6
    48ec:	bd70      	pop	{r4, r5, r6, pc}
    48ee:	0000      	.short	0x0000
    48f0:	20000c48 	.word	0x20000c48

000048f4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    48f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48f6:	4c1e      	ldr	r4, [pc, #120]	; (4970 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    48f8:	4607      	mov	r7, r0
    48fa:	b087      	sub	sp, #28
    48fc:	7820      	ldrb	r0, [r4, #0]
    48fe:	460e      	mov	r6, r1
    4900:	b110      	cbz	r0, 4908 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4902:	200c      	movs	r0, #12
    4904:	b007      	add	sp, #28
    4906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4908:	f7fe fd34 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    490c:	4605      	mov	r5, r0
    490e:	6227      	str	r7, [r4, #32]
    4910:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4914:	b110      	cbz	r0, 491c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    4916:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    491a:	e025      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    491c:	2005      	movs	r0, #5
    491e:	7020      	strb	r0, [r4, #0]
    4920:	2000      	movs	r0, #0
    4922:	7060      	strb	r0, [r4, #1]
    4924:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    4928:	f000 fae4 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    492c:	64a0      	str	r0, [r4, #72]	; 0x48
    492e:	2100      	movs	r1, #0
    4930:	4810      	ldr	r0, [pc, #64]	; (4974 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4932:	f006 fc77 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4936:	7028      	strb	r0, [r5, #0]
    4938:	2820      	cmp	r0, #32
    493a:	d00d      	beq.n	4958 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    493c:	4633      	mov	r3, r6
    493e:	2200      	movs	r2, #0
    4940:	2101      	movs	r1, #1
    4942:	4668      	mov	r0, sp
    4944:	f000 fb30 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4948:	b148      	cbz	r0, 495e <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    494a:	7828      	ldrb	r0, [r5, #0]
    494c:	4669      	mov	r1, sp
    494e:	f00a fbc6 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4952:	b138      	cbz	r0, 4964 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4954:	2000      	movs	r0, #0
    4956:	e7d5      	b.n	4904 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    4958:	f240 310a 	movw	r1, #778	; 0x30a
    495c:	e004      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    495e:	f240 310d 	movw	r1, #781	; 0x30d
    4962:	e001      	b.n	4968 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4964:	f240 310e 	movw	r1, #782	; 0x30e
    4968:	2021      	movs	r0, #33	; 0x21
    496a:	f7fc f87b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    496e:	0000      	.short	0x0000
    4970:	20000c48 	.word	0x20000c48
    4974:	00004c31 	.word	0x00004c31

00004978 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    4978:	4902      	ldr	r1, [pc, #8]	; (4984 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    497a:	6a09      	ldr	r1, [r1, #32]
    497c:	6001      	str	r1, [r0, #0]
    497e:	f000 b83d 	b.w	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4982:	0000      	.short	0x0000
    4984:	20000c48 	.word	0x20000c48

00004988 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    4988:	b570      	push	{r4, r5, r6, lr}
    498a:	b086      	sub	sp, #24
    498c:	4606      	mov	r6, r0
    498e:	b111      	cbz	r1, 4996 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    4990:	2011      	movs	r0, #17
    4992:	b006      	add	sp, #24
    4994:	bd70      	pop	{r4, r5, r6, pc}
    4996:	4c17      	ldr	r4, [pc, #92]	; (49f4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    4998:	7820      	ldrb	r0, [r4, #0]
    499a:	b108      	cbz	r0, 49a0 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    499c:	200c      	movs	r0, #12
    499e:	e7f8      	b.n	4992 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    49a0:	f7fe fce8 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    49a4:	4605      	mov	r5, r0
    49a6:	2000      	movs	r0, #0
    49a8:	7060      	strb	r0, [r4, #1]
    49aa:	2004      	movs	r0, #4
    49ac:	7020      	strb	r0, [r4, #0]
    49ae:	f000 faa1 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    49b2:	64a0      	str	r0, [r4, #72]	; 0x48
    49b4:	2100      	movs	r1, #0
    49b6:	4810      	ldr	r0, [pc, #64]	; (49f8 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    49b8:	f006 fc34 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    49bc:	7028      	strb	r0, [r5, #0]
    49be:	2820      	cmp	r0, #32
    49c0:	d00d      	beq.n	49de <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    49c2:	4633      	mov	r3, r6
    49c4:	2200      	movs	r2, #0
    49c6:	2101      	movs	r1, #1
    49c8:	4668      	mov	r0, sp
    49ca:	f000 faed 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    49ce:	b148      	cbz	r0, 49e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    49d0:	7828      	ldrb	r0, [r5, #0]
    49d2:	4669      	mov	r1, sp
    49d4:	f00a fb83 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    49d8:	b138      	cbz	r0, 49ea <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    49da:	2000      	movs	r0, #0
    49dc:	e7d9      	b.n	4992 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    49de:	f240 3162 	movw	r1, #866	; 0x362
    49e2:	e004      	b.n	49ee <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    49e4:	f44f 7159 	mov.w	r1, #868	; 0x364
    49e8:	e001      	b.n	49ee <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    49ea:	f240 3165 	movw	r1, #869	; 0x365
    49ee:	2021      	movs	r0, #33	; 0x21
    49f0:	f7fc f838 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49f4:	20000c48 	.word	0x20000c48
    49f8:	00004c31 	.word	0x00004c31

000049fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    49fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a00:	2700      	movs	r7, #0
    4a02:	f7fe fcb7 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a06:	4c18      	ldr	r4, [pc, #96]	; (4a68 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    4a08:	4605      	mov	r5, r0
    4a0a:	7820      	ldrb	r0, [r4, #0]
    4a0c:	2804      	cmp	r0, #4
    4a0e:	d005      	beq.n	4a1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4a10:	7820      	ldrb	r0, [r4, #0]
    4a12:	2805      	cmp	r0, #5
    4a14:	d002      	beq.n	4a1c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4a16:	200c      	movs	r0, #12
    4a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a1c:	2001      	movs	r0, #1
    4a1e:	7060      	strb	r0, [r4, #1]
    4a20:	7b20      	ldrb	r0, [r4, #12]
    4a22:	b160      	cbz	r0, 4a3e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4a24:	f3ef 8610 	mrs	r6, PRIMASK
    4a28:	b672      	cpsid	i
    4a2a:	7b20      	ldrb	r0, [r4, #12]
    4a2c:	b128      	cbz	r0, 4a3a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4a2e:	7b60      	ldrb	r0, [r4, #13]
    4a30:	b118      	cbz	r0, 4a3a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4a32:	f00a f95b 	bl	ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4a36:	f000 f8eb 	bl	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4a3a:	b126      	cbz	r6, 4a46 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4a3c:	e004      	b.n	4a48 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4a3e:	7828      	ldrb	r0, [r5, #0]
    4a40:	f006 f984 	bl	ad4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4a44:	e000      	b.n	4a48 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4a46:	b662      	cpsie	i
    4a48:	7828      	ldrb	r0, [r5, #0]
    4a4a:	f006 fad3 	bl	aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4a4e:	f000 fc03 	bl	5258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4a52:	2000      	movs	r0, #0
    4a54:	7060      	strb	r0, [r4, #1]
    4a56:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4a5a:	b100      	cbz	r0, 4a5e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    4a5c:	270c      	movs	r7, #12
    4a5e:	f000 fc27 	bl	52b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4a62:	4638      	mov	r0, r7
    4a64:	e7d8      	b.n	4a18 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    4a66:	0000      	.short	0x0000
    4a68:	20000c48 	.word	0x20000c48

00004a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    4a6c:	4801      	ldr	r0, [pc, #4]	; (4a74 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    4a6e:	7800      	ldrb	r0, [r0, #0]
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20000c48 	.word	0x20000c48

00004a78 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    4a78:	b510      	push	{r4, lr}
    4a7a:	4c10      	ldr	r4, [pc, #64]	; (4abc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    4a7c:	b086      	sub	sp, #24
    4a7e:	7b20      	ldrb	r0, [r4, #12]
    4a80:	b1b0      	cbz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4a82:	7860      	ldrb	r0, [r4, #1]
    4a84:	b9a0      	cbnz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4a86:	2300      	movs	r3, #0
    4a88:	461a      	mov	r2, r3
    4a8a:	4619      	mov	r1, r3
    4a8c:	4668      	mov	r0, sp
    4a8e:	f000 fa8b 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4a92:	b158      	cbz	r0, 4aac <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    4a94:	f7fe fc6e 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a98:	7800      	ldrb	r0, [r0, #0]
    4a9a:	4669      	mov	r1, sp
    4a9c:	f00a fb1f 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4aa0:	b930      	cbnz	r0, 4ab0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    4aa2:	f240 71ae 	movw	r1, #1966	; 0x7ae
    4aa6:	2021      	movs	r0, #33	; 0x21
    4aa8:	f7fb ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4aac:	2001      	movs	r0, #1
    4aae:	70a0      	strb	r0, [r4, #2]
    4ab0:	b006      	add	sp, #24
    4ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ab6:	f000 b8ab 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4aba:	0000      	.short	0x0000
    4abc:	20000c48 	.word	0x20000c48

00004ac0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4ac0:	b508      	push	{r3, lr}
    4ac2:	2260      	movs	r2, #96	; 0x60
    4ac4:	2100      	movs	r1, #0
    4ac6:	480c      	ldr	r0, [pc, #48]	; (4af8 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    4ac8:	f00c fab7 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4acc:	f7fe fc52 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4ad0:	2120      	movs	r1, #32
    4ad2:	7001      	strb	r1, [r0, #0]
    4ad4:	f000 f812 	bl	4afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    4ad8:	b120      	cbz	r0, 4ae4 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    4ada:	f240 2135 	movw	r1, #565	; 0x235
    4ade:	2021      	movs	r0, #33	; 0x21
    4ae0:	f7fb ffc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ae4:	f242 7010 	movw	r0, #10000	; 0x2710
    4ae8:	9000      	str	r0, [sp, #0]
    4aea:	2201      	movs	r2, #1
    4aec:	4669      	mov	r1, sp
    4aee:	1080      	asrs	r0, r0, #2
    4af0:	f000 f940 	bl	4d74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4af4:	bd08      	pop	{r3, pc}
    4af6:	0000      	.short	0x0000
    4af8:	20000c48 	.word	0x20000c48

00004afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4afc:	4803      	ldr	r0, [pc, #12]	; (4b0c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4afe:	b510      	push	{r4, lr}
    4b00:	7800      	ldrb	r0, [r0, #0]
    4b02:	b108      	cbz	r0, 4b08 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4b04:	f7ff ff7a 	bl	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    4b08:	2000      	movs	r0, #0
    4b0a:	bd10      	pop	{r4, pc}
    4b0c:	20000c48 	.word	0x20000c48

00004b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4b10:	490c      	ldr	r1, [pc, #48]	; (4b44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4b12:	b508      	push	{r3, lr}
    4b14:	7809      	ldrb	r1, [r1, #0]
    4b16:	b121      	cbz	r1, 4b22 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    4b18:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4b1c:	2021      	movs	r0, #33	; 0x21
    4b1e:	f7fb ffa1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b22:	2300      	movs	r3, #0
    4b24:	9300      	str	r3, [sp, #0]
    4b26:	7801      	ldrb	r1, [r0, #0]
    4b28:	461a      	mov	r2, r3
    4b2a:	07c9      	lsls	r1, r1, #31
    4b2c:	d003      	beq.n	4b36 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4b2e:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4b32:	2201      	movs	r2, #1
    4b34:	9000      	str	r0, [sp, #0]
    4b36:	4669      	mov	r1, sp
    4b38:	4618      	mov	r0, r3
    4b3a:	f000 f91b 	bl	4d74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4b3e:	2000      	movs	r0, #0
    4b40:	bd08      	pop	{r3, pc}
    4b42:	0000      	.short	0x0000
    4b44:	20000c48 	.word	0x20000c48
    4b48:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4b4c:	4c2e      	ldr	r4, [pc, #184]	; (4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4b4e:	4680      	mov	r8, r0
    4b50:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4b54:	461e      	mov	r6, r3
    4b56:	f003 fad3 	bl	8100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b5a:	4607      	mov	r7, r0
    4b5c:	6a20      	ldr	r0, [r4, #32]
    4b5e:	2101      	movs	r1, #1
    4b60:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    4b64:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    4b68:	3062      	adds	r0, #98	; 0x62
    4b6a:	21ff      	movs	r1, #255	; 0xff
    4b6c:	7281      	strb	r1, [r0, #10]
    4b6e:	6a20      	ldr	r0, [r4, #32]
    4b70:	f04f 0900 	mov.w	r9, #0
    4b74:	4649      	mov	r1, r9
    4b76:	302c      	adds	r0, #44	; 0x2c
    4b78:	f009 fe41 	bl	e7fe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4b7c:	462a      	mov	r2, r5
    4b7e:	4633      	mov	r3, r6
    4b80:	2101      	movs	r1, #1
    4b82:	4640      	mov	r0, r8
    4b84:	9700      	str	r7, [sp, #0]
    4b86:	f00a fa91 	bl	f0ac <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    4b8a:	6a27      	ldr	r7, [r4, #32]
    4b8c:	4606      	mov	r6, r0
    4b8e:	460d      	mov	r5, r1
    4b90:	f8d7 8010 	ldr.w	r8, [r7, #16]
    4b94:	f002 fa5a 	bl	704c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    4b98:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4b9c:	4288      	cmp	r0, r1
    4b9e:	d00b      	beq.n	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    4ba0:	e9cd 6500 	strd	r6, r5, [sp]
    4ba4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    4ba8:	4642      	mov	r2, r8
    4baa:	f00a fdfb 	bl	f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4bae:	4540      	cmp	r0, r8
    4bb0:	d903      	bls.n	4bba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    4bb2:	f240 410c 	movw	r1, #1036	; 0x40c
    4bb6:	e01d      	b.n	4bf4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    4bb8:	2000      	movs	r0, #0
    4bba:	4914      	ldr	r1, [pc, #80]	; (4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4bbc:	4607      	mov	r7, r0
    4bbe:	6809      	ldr	r1, [r1, #0]
    4bc0:	4288      	cmp	r0, r1
    4bc2:	6a20      	ldr	r0, [r4, #32]
    4bc4:	6901      	ldr	r1, [r0, #16]
    4bc6:	d202      	bcs.n	4bce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4bc8:	440f      	add	r7, r1
    4bca:	6201      	str	r1, [r0, #32]
    4bcc:	e004      	b.n	4bd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4bce:	4638      	mov	r0, r7
    4bd0:	f009 fba3 	bl	e31a <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4bd4:	6a21      	ldr	r1, [r4, #32]
    4bd6:	6208      	str	r0, [r1, #32]
    4bd8:	6a20      	ldr	r0, [r4, #32]
    4bda:	6901      	ldr	r1, [r0, #16]
    4bdc:	2005      	movs	r0, #5
    4bde:	f009 fba4 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4be2:	6a21      	ldr	r1, [r4, #32]
    4be4:	8488      	strh	r0, [r1, #36]	; 0x24
    4be6:	6a21      	ldr	r1, [r4, #32]
    4be8:	6a0a      	ldr	r2, [r1, #32]
    4bea:	1aba      	subs	r2, r7, r2
    4bec:	4290      	cmp	r0, r2
    4bee:	d804      	bhi.n	4bfa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4bf0:	f640 0137 	movw	r1, #2103	; 0x837
    4bf4:	2021      	movs	r0, #33	; 0x21
    4bf6:	f7fb ff35 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4bfa:	19f2      	adds	r2, r6, r7
    4bfc:	eb45 0509 	adc.w	r5, r5, r9
    4c00:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4c04:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4c08:	20000c48 	.word	0x20000c48
    4c0c:	200000e0 	.word	0x200000e0
    4c10:	b510      	push	{r4, lr}
    4c12:	4c06      	ldr	r4, [pc, #24]	; (4c2c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4c14:	7b20      	ldrb	r0, [r4, #12]
    4c16:	2800      	cmp	r0, #0
    4c18:	d006      	beq.n	4c28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4c1a:	f003 fa77 	bl	810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4c1e:	f006 fb29 	bl	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4c22:	2000      	movs	r0, #0
    4c24:	7320      	strb	r0, [r4, #12]
    4c26:	7360      	strb	r0, [r4, #13]
    4c28:	bd10      	pop	{r4, pc}
    4c2a:	0000      	.short	0x0000
    4c2c:	20000c48 	.word	0x20000c48
    4c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c32:	b087      	sub	sp, #28
    4c34:	460d      	mov	r5, r1
    4c36:	f7fe fb9d 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4c3a:	2701      	movs	r7, #1
    4c3c:	4c3f      	ldr	r4, [pc, #252]	; (4d3c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4c3e:	2d09      	cmp	r5, #9
    4c40:	d278      	bcs.n	4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4c42:	e8df f005 	tbb	[pc, r5]
    4c46:	3905      	.short	0x3905
    4c48:	774a4f4f 	.word	0x774a4f4f
    4c4c:	00726d64 	.word	0x00726d64
    4c50:	7327      	strb	r7, [r4, #12]
    4c52:	7861      	ldrb	r1, [r4, #1]
    4c54:	2900      	cmp	r1, #0
    4c56:	d12d      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4c58:	7800      	ldrb	r0, [r0, #0]
    4c5a:	f005 fc55 	bl	a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4c5e:	4605      	mov	r5, r0
    4c60:	460e      	mov	r6, r1
    4c62:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4c66:	f000 fb3f 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4c6a:	b118      	cbz	r0, 4c74 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4c6c:	2000      	movs	r0, #0
    4c6e:	f88d 0004 	strb.w	r0, [sp, #4]
    4c72:	e001      	b.n	4c78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4c74:	f88d 7004 	strb.w	r7, [sp, #4]
    4c78:	f000 f950 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4c7c:	4633      	mov	r3, r6
    4c7e:	462a      	mov	r2, r5
    4c80:	f00a fa2f 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c84:	6861      	ldr	r1, [r4, #4]
    4c86:	fbb0 f2f1 	udiv	r2, r0, r1
    4c8a:	fb01 0012 	mls	r0, r1, r2, r0
    4c8e:	b150      	cbz	r0, 4ca6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4c90:	f05f 0000 	movs.w	r0, #0
    4c94:	f88d 0005 	strb.w	r0, [sp, #5]
    4c98:	4668      	mov	r0, sp
    4c9a:	f7fe fcab 	bl	35f4 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4c9e:	b120      	cbz	r0, 4caa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ca0:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ca4:	e043      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4ca6:	2001      	movs	r0, #1
    4ca8:	e7f4      	b.n	4c94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4caa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4cac:	38e3      	subs	r0, #227	; 0xe3
    4cae:	63a0      	str	r0, [r4, #56]	; 0x38
    4cb0:	f006 fbfa 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4cb4:	b007      	add	sp, #28
    4cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cb8:	7860      	ldrb	r0, [r4, #1]
    4cba:	b130      	cbz	r0, 4cca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4cbc:	f00a f816 	bl	ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4cc0:	b007      	add	sp, #28
    4cc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4cc6:	f7ff bfa3 	b.w	4c10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4cca:	7367      	strb	r7, [r4, #13]
    4ccc:	f7fe fd22 	bl	3714 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d0ef      	beq.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4cd4:	f240 11e1 	movw	r1, #481	; 0x1e1
    4cd8:	e029      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4cda:	b007      	add	sp, #28
    4cdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4ce0:	f003 bbe8 	b.w	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4ce4:	7805      	ldrb	r5, [r0, #0]
    4ce6:	2300      	movs	r3, #0
    4ce8:	2201      	movs	r2, #1
    4cea:	4619      	mov	r1, r3
    4cec:	4668      	mov	r0, sp
    4cee:	f000 f95b 	bl	4fa8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4cf2:	b140      	cbz	r0, 4d06 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4cf4:	4669      	mov	r1, sp
    4cf6:	4628      	mov	r0, r5
    4cf8:	f00a f9f1 	bl	f0de <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d1d9      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d00:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4d04:	e013      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4d06:	70a7      	strb	r7, [r4, #2]
    4d08:	f000 f81a 	bl	4d40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4d0c:	e7d2      	b.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d0e:	f000 f8ab 	bl	4e68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4d12:	2800      	cmp	r0, #0
    4d14:	d1ce      	bne.n	4cb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4d16:	b007      	add	sp, #28
    4d18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4d1c:	f009 bfe4 	b.w	ece8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4d20:	b007      	add	sp, #28
    4d22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4d26:	f000 b80b 	b.w	4d40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4d2a:	f240 2113 	movw	r1, #531	; 0x213
    4d2e:	2021      	movs	r0, #33	; 0x21
    4d30:	f7fb fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d34:	f240 2117 	movw	r1, #535	; 0x217
    4d38:	e7f9      	b.n	4d2e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4d3a:	0000      	.short	0x0000
    4d3c:	20000c48 	.word	0x20000c48
    4d40:	b510      	push	{r4, lr}
    4d42:	4c0b      	ldr	r4, [pc, #44]	; (4d70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4d44:	7820      	ldrb	r0, [r4, #0]
    4d46:	b138      	cbz	r0, 4d58 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4d48:	f000 fa86 	bl	5258 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4d4c:	78a0      	ldrb	r0, [r4, #2]
    4d4e:	b150      	cbz	r0, 4d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4d50:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4d54:	b128      	cbz	r0, 4d62 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4d56:	e006      	b.n	4d66 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4d58:	f240 117b 	movw	r1, #379	; 0x17b
    4d5c:	2021      	movs	r0, #33	; 0x21
    4d5e:	f7fb fe81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d62:	f7fe fcef 	bl	3744 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d6a:	f000 baa1 	b.w	52b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4d6e:	0000      	.short	0x0000
    4d70:	20000c48 	.word	0x20000c48
    4d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d78:	4d11      	ldr	r5, [pc, #68]	; (4dc0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4d7a:	4616      	mov	r6, r2
    4d7c:	460f      	mov	r7, r1
    4d7e:	2400      	movs	r4, #0
    4d80:	6068      	str	r0, [r5, #4]
    4d82:	f00a f976 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d86:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4dc4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4d8a:	2100      	movs	r1, #0
    4d8c:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4d90:	4232      	tst	r2, r6
    4d92:	d007      	beq.n	4da4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4d94:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4d98:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4d9c:	1a1b      	subs	r3, r3, r0
    4d9e:	1c64      	adds	r4, r4, #1
    4da0:	b2e4      	uxtb	r4, r4
    4da2:	6093      	str	r3, [r2, #8]
    4da4:	1c49      	adds	r1, r1, #1
    4da6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4daa:	d0ef      	beq.n	4d8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4dac:	f016 0f0e 	tst.w	r6, #14
    4db0:	d004      	beq.n	4dbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4db2:	f240 7103 	movw	r1, #1795	; 0x703
    4db6:	2021      	movs	r0, #33	; 0x21
    4db8:	f7fb fe54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dc0:	20000c48 	.word	0x20000c48
    4dc4:	000111b6 	.word	0x000111b6
    4dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4dcc:	b086      	sub	sp, #24
    4dce:	4692      	mov	sl, r2
    4dd0:	4607      	mov	r7, r0
    4dd2:	4689      	mov	r9, r1
    4dd4:	f000 fa94 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4dd8:	4d22      	ldr	r5, [pc, #136]	; (4e64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4dda:	f04f 0800 	mov.w	r8, #0
    4dde:	686a      	ldr	r2, [r5, #4]
    4de0:	1886      	adds	r6, r0, r2
    4de2:	eb41 0108 	adc.w	r1, r1, r8
    4de6:	460c      	mov	r4, r1
    4de8:	460b      	mov	r3, r1
    4dea:	4632      	mov	r2, r6
    4dec:	4638      	mov	r0, r7
    4dee:	4649      	mov	r1, r9
    4df0:	f00a f977 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4df4:	4607      	mov	r7, r0
    4df6:	f00a f96b 	bl	f0d0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4dfa:	4287      	cmp	r7, r0
    4dfc:	da13      	bge.n	4e26 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4dfe:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4e02:	f000 fa7d 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4e06:	4632      	mov	r2, r6
    4e08:	4623      	mov	r3, r4
    4e0a:	f00a f96a 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4e0e:	6869      	ldr	r1, [r5, #4]
    4e10:	fbb0 f1f1 	udiv	r1, r0, r1
    4e14:	f8ca 1000 	str.w	r1, [sl]
    4e18:	6868      	ldr	r0, [r5, #4]
    4e1a:	1980      	adds	r0, r0, r6
    4e1c:	eb48 0104 	adc.w	r1, r8, r4
    4e20:	b006      	add	sp, #24
    4e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e26:	f88d 8000 	strb.w	r8, [sp]
    4e2a:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4e2c:	9001      	str	r0, [sp, #4]
    4e2e:	f00a f909 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4e32:	f8ad 0008 	strh.w	r0, [sp, #8]
    4e36:	2001      	movs	r0, #1
    4e38:	f88d 000b 	strb.w	r0, [sp, #11]
    4e3c:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4e40:	f000 fa5e 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4e48:	f000 f9ec 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4e4c:	f88d 000a 	strb.w	r0, [sp, #10]
    4e50:	4668      	mov	r0, sp
    4e52:	6869      	ldr	r1, [r5, #4]
    4e54:	f009 fa10 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4e58:	f8ca 0000 	str.w	r0, [sl]
    4e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4e60:	e7de      	b.n	4e20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4e62:	0000      	.short	0x0000
    4e64:	20000c48 	.word	0x20000c48
    4e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4e6c:	f006 fc08 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4e70:	4c1f      	ldr	r4, [pc, #124]	; (4ef0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4e72:	4606      	mov	r6, r0
    4e74:	460d      	mov	r5, r1
    4e76:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4e7a:	f000 f9d3 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4e7e:	4607      	mov	r7, r0
    4e80:	f005 fae6 	bl	a450 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4e84:	4602      	mov	r2, r0
    4e86:	2865      	cmp	r0, #101	; 0x65
    4e88:	d323      	bcc.n	4ed2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4e8a:	1c50      	adds	r0, r2, #1
    4e8c:	d024      	beq.n	4ed8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4e8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4e92:	1888      	adds	r0, r1, r2
    4e94:	4283      	cmp	r3, r0
    4e96:	d800      	bhi.n	4e9a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4e98:	1a5a      	subs	r2, r3, r1
    4e9a:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4e9e:	1830      	adds	r0, r6, r0
    4ea0:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ea4:	f000 fa42 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4ea8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4eaa:	4408      	add	r0, r1
    4eac:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4eae:	1a45      	subs	r5, r0, r1
    4eb0:	f241 3088 	movw	r0, #5000	; 0x1388
    4eb4:	4285      	cmp	r5, r0
    4eb6:	d900      	bls.n	4eba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4eb8:	4605      	mov	r5, r0
    4eba:	f006 fbe1 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4ebe:	1b80      	subs	r0, r0, r6
    4ec0:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4ec4:	4285      	cmp	r5, r0
    4ec6:	d304      	bcc.n	4ed2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4ec8:	4639      	mov	r1, r7
    4eca:	4628      	mov	r0, r5
    4ecc:	f005 f9e2 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4ed0:	b120      	cbz	r0, 4edc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4ed2:	2000      	movs	r0, #0
    4ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ed8:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4eda:	e7e7      	b.n	4eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4edc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4ede:	4428      	add	r0, r5
    4ee0:	6320      	str	r0, [r4, #48]	; 0x30
    4ee2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4ee4:	4428      	add	r0, r5
    4ee6:	63a0      	str	r0, [r4, #56]	; 0x38
    4ee8:	f006 fade 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4eec:	2001      	movs	r0, #1
    4eee:	e7f1      	b.n	4ed4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4ef0:	20000c48 	.word	0x20000c48
    4ef4:	b510      	push	{r4, lr}
    4ef6:	2400      	movs	r4, #0
    4ef8:	f00a f8bb 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4efc:	4a06      	ldr	r2, [pc, #24]	; (4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4efe:	2100      	movs	r1, #0
    4f00:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4f04:	4404      	add	r4, r0
    4f06:	689b      	ldr	r3, [r3, #8]
    4f08:	1c49      	adds	r1, r1, #1
    4f0a:	441c      	add	r4, r3
    4f0c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4f10:	d0f6      	beq.n	4f00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4f12:	4620      	mov	r0, r4
    4f14:	bd10      	pop	{r4, pc}
    4f16:	0000      	.short	0x0000
    4f18:	20000c48 	.word	0x20000c48
    4f1c:	4901      	ldr	r1, [pc, #4]	; (4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4f1e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4f22:	4770      	bx	lr
    4f24:	20000c48 	.word	0x20000c48
    4f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f2c:	4606      	mov	r6, r0
    4f2e:	481d      	ldr	r0, [pc, #116]	; (4fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4f30:	4688      	mov	r8, r1
    4f32:	4615      	mov	r5, r2
    4f34:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4f38:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4f3c:	2701      	movs	r7, #1
    4f3e:	4050      	eors	r0, r2
    4f40:	b086      	sub	sp, #24
    4f42:	ea70 0101 	orns	r1, r0, r1
    4f46:	d021      	beq.n	4f8c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4f48:	2400      	movs	r4, #0
    4f4a:	f88d 4000 	strb.w	r4, [sp]
    4f4e:	9501      	str	r5, [sp, #4]
    4f50:	f00a f878 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4f54:	f8ad 0008 	strh.w	r0, [sp, #8]
    4f58:	f88d 700b 	strb.w	r7, [sp, #11]
    4f5c:	f00a f8b8 	bl	f0d0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4f60:	1982      	adds	r2, r0, r6
    4f62:	eb44 0008 	adc.w	r0, r4, r8
    4f66:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4f6a:	2002      	movs	r0, #2
    4f6c:	f88d 000a 	strb.w	r0, [sp, #10]
    4f70:	4668      	mov	r0, sp
    4f72:	f005 fdbb 	bl	aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4f76:	b168      	cbz	r0, 4f94 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4f78:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4f7c:	194a      	adds	r2, r1, r5
    4f7e:	4909      	ldr	r1, [pc, #36]	; (4fa4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4f80:	4160      	adcs	r0, r4
    4f82:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4f86:	1a9a      	subs	r2, r3, r2
    4f88:	4181      	sbcs	r1, r0
    4f8a:	d408      	bmi.n	4f9e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4f8c:	2001      	movs	r0, #1
    4f8e:	b006      	add	sp, #24
    4f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4f94:	f240 5135 	movw	r1, #1333	; 0x535
    4f98:	2021      	movs	r0, #33	; 0x21
    4f9a:	f7fb fd63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f9e:	2000      	movs	r0, #0
    4fa0:	e7f5      	b.n	4f8e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4fa2:	0000      	.short	0x0000
    4fa4:	20000c48 	.word	0x20000c48
    4fa8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fac:	b087      	sub	sp, #28
    4fae:	4614      	mov	r4, r2
    4fb0:	4606      	mov	r6, r0
    4fb2:	f006 fb65 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4fb6:	4d99      	ldr	r5, [pc, #612]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fb8:	4680      	mov	r8, r0
    4fba:	4689      	mov	r9, r1
    4fbc:	68a8      	ldr	r0, [r5, #8]
    4fbe:	f04f 0a00 	mov.w	sl, #0
    4fc2:	9002      	str	r0, [sp, #8]
    4fc4:	f7ff ff96 	bl	4ef4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4fc8:	6869      	ldr	r1, [r5, #4]
    4fca:	4288      	cmp	r0, r1
    4fcc:	d101      	bne.n	4fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4fce:	2001      	movs	r0, #1
    4fd0:	e000      	b.n	4fd4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4fd2:	2000      	movs	r0, #0
    4fd4:	9004      	str	r0, [sp, #16]
    4fd6:	4020      	ands	r0, r4
    4fd8:	9003      	str	r0, [sp, #12]
    4fda:	9808      	ldr	r0, [sp, #32]
    4fdc:	2800      	cmp	r0, #0
    4fde:	d07f      	beq.n	50e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4fe0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4fe4:	eb18 0b02 	adds.w	fp, r8, r2
    4fe8:	f149 0400 	adc.w	r4, r9, #0
    4fec:	f002 f834 	bl	7058 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4ff0:	9000      	str	r0, [sp, #0]
    4ff2:	488a      	ldr	r0, [pc, #552]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4ff4:	7800      	ldrb	r0, [r0, #0]
    4ff6:	4f89      	ldr	r7, [pc, #548]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4ff8:	3740      	adds	r7, #64	; 0x40
    4ffa:	2805      	cmp	r0, #5
    4ffc:	d135      	bne.n	506a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ffe:	4887      	ldr	r0, [pc, #540]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5000:	6a00      	ldr	r0, [r0, #32]
    5002:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5006:	f002 f807 	bl	7018 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    500a:	9900      	ldr	r1, [sp, #0]
    500c:	4605      	mov	r5, r0
    500e:	4288      	cmp	r0, r1
    5010:	d009      	beq.n	5026 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    5012:	4882      	ldr	r0, [pc, #520]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5014:	4629      	mov	r1, r5
    5016:	6a00      	ldr	r0, [r0, #32]
    5018:	f500 700a 	add.w	r0, r0, #552	; 0x228
    501c:	f001 ffc0 	bl	6fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5020:	2000      	movs	r0, #0
    5022:	61b8      	str	r0, [r7, #24]
    5024:	e00c      	b.n	5040 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    5026:	497d      	ldr	r1, [pc, #500]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5028:	6a08      	ldr	r0, [r1, #32]
    502a:	f500 700a 	add.w	r0, r0, #552	; 0x228
    502e:	61b8      	str	r0, [r7, #24]
    5030:	6a08      	ldr	r0, [r1, #32]
    5032:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    5034:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    5038:	4282      	cmp	r2, r0
    503a:	d300      	bcc.n	503e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    503c:	4610      	mov	r0, r2
    503e:	6488      	str	r0, [r1, #72]	; 0x48
    5040:	4876      	ldr	r0, [pc, #472]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5042:	6a00      	ldr	r0, [r0, #32]
    5044:	b158      	cbz	r0, 505e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    5046:	b16d      	cbz	r5, 5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    5048:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    504c:	f8d5 c000 	ldr.w	ip, [r5]
    5050:	eb1c 0303 	adds.w	r3, ip, r3
    5054:	eb41 010a 	adc.w	r1, r1, sl
    5058:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    505c:	e005      	b.n	506a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    505e:	f240 7185 	movw	r1, #1925	; 0x785
    5062:	e01a      	b.n	509a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    5064:	2100      	movs	r1, #0
    5066:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    506a:	4638      	mov	r0, r7
    506c:	9900      	ldr	r1, [sp, #0]
    506e:	f001 ff97 	bl	6fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    5072:	486a      	ldr	r0, [pc, #424]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    5074:	9a00      	ldr	r2, [sp, #0]
    5076:	6845      	ldr	r5, [r0, #4]
    5078:	b192      	cbz	r2, 50a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    507a:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    507e:	6817      	ldr	r7, [r2, #0]
    5080:	e9cd b400 	strd	fp, r4, [sp]
    5084:	18f8      	adds	r0, r7, r3
    5086:	eb41 010a 	adc.w	r1, r1, sl
    508a:	462a      	mov	r2, r5
    508c:	f00a fb8a 	bl	f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    5090:	4601      	mov	r1, r0
    5092:	42a8      	cmp	r0, r5
    5094:	d905      	bls.n	50a2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    5096:	f240 31f9 	movw	r1, #1017	; 0x3f9
    509a:	2021      	movs	r0, #33	; 0x21
    509c:	f7fb fce2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a0:	2100      	movs	r1, #0
    50a2:	eb1b 0501 	adds.w	r5, fp, r1
    50a6:	495d      	ldr	r1, [pc, #372]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    50a8:	4650      	mov	r0, sl
    50aa:	4144      	adcs	r4, r0
    50ac:	684a      	ldr	r2, [r1, #4]
    50ae:	1aab      	subs	r3, r5, r2
    50b0:	eb64 020a 	sbc.w	r2, r4, sl
    50b4:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    50b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    50ba:	3128      	adds	r1, #40	; 0x28
    50bc:	b152      	cbz	r2, 50d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    50be:	f242 7310 	movw	r3, #10000	; 0x2710
    50c2:	435a      	muls	r2, r3
    50c4:	18aa      	adds	r2, r5, r2
    50c6:	eb44 000a 	adc.w	r0, r4, sl
    50ca:	e9c1 2000 	strd	r2, r0, [r1]
    50ce:	2001      	movs	r0, #1
    50d0:	e051      	b.n	5176 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    50d2:	e005      	b.n	50e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    50d4:	f04f 30ff 	mov.w	r0, #4294967295
    50d8:	0842      	lsrs	r2, r0, #1
    50da:	e9c1 0200 	strd	r0, r2, [r1]
    50de:	e7f6      	b.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    50e0:	9803      	ldr	r0, [sp, #12]
    50e2:	b1d8      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    50e4:	2001      	movs	r0, #1
    50e6:	f009 ffcf 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    50ea:	4604      	mov	r4, r0
    50ec:	2001      	movs	r0, #1
    50ee:	f003 f8f7 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    50f2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    50f6:	4401      	add	r1, r0
    50f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50fc:	fbb1 f0f0 	udiv	r0, r1, r0
    5100:	1822      	adds	r2, r4, r0
    5102:	4640      	mov	r0, r8
    5104:	4649      	mov	r1, r9
    5106:	32f4      	adds	r2, #244	; 0xf4
    5108:	f7ff ff0e 	bl	4f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    510c:	b908      	cbnz	r0, 5112 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    510e:	2000      	movs	r0, #0
    5110:	9002      	str	r0, [sp, #8]
    5112:	4645      	mov	r5, r8
    5114:	464c      	mov	r4, r9
    5116:	f8cd a014 	str.w	sl, [sp, #20]
    511a:	e02d      	b.n	5178 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    511c:	b13c      	cbz	r4, 512e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    511e:	aa05      	add	r2, sp, #20
    5120:	4640      	mov	r0, r8
    5122:	4649      	mov	r1, r9
    5124:	f7ff fe50 	bl	4dc8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    5128:	4605      	mov	r5, r0
    512a:	460c      	mov	r4, r1
    512c:	e024      	b.n	5178 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    512e:	4640      	mov	r0, r8
    5130:	4649      	mov	r1, r9
    5132:	f000 f8e5 	bl	5300 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    5136:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    513a:	4602      	mov	r2, r0
    513c:	4608      	mov	r0, r1
    513e:	f8db 1008 	ldr.w	r1, [fp, #8]
    5142:	9102      	str	r1, [sp, #8]
    5144:	f8db 3004 	ldr.w	r3, [fp, #4]
    5148:	4657      	mov	r7, sl
    514a:	189d      	adds	r5, r3, r2
    514c:	eb4a 0400 	adc.w	r4, sl, r0
    5150:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    5154:	f000 f8c8 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5158:	f8db 1004 	ldr.w	r1, [fp, #4]
    515c:	4348      	muls	r0, r1
    515e:	9000      	str	r0, [sp, #0]
    5160:	f7ff fedc 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	9a00      	ldr	r2, [sp, #0]
    5166:	1880      	adds	r0, r0, r2
    5168:	4179      	adcs	r1, r7
    516a:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    516e:	4621      	mov	r1, r4
    5170:	4628      	mov	r0, r5
    5172:	f000 f8b9 	bl	52e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    5176:	9005      	str	r0, [sp, #20]
    5178:	2001      	movs	r0, #1
    517a:	f009 ff85 	bl	f088 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    517e:	4607      	mov	r7, r0
    5180:	2001      	movs	r0, #1
    5182:	f003 f8ad 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5186:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    518a:	4401      	add	r1, r0
    518c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5190:	fbb1 f0f0 	udiv	r0, r1, r0
    5194:	4407      	add	r7, r0
    5196:	4628      	mov	r0, r5
    5198:	4621      	mov	r1, r4
    519a:	37f4      	adds	r7, #244	; 0xf4
    519c:	9a02      	ldr	r2, [sp, #8]
    519e:	f000 f8c5 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    51a2:	491e      	ldr	r1, [pc, #120]	; (521c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    51a4:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    51a8:	6892      	ldr	r2, [r2, #8]
    51aa:	4282      	cmp	r2, r0
    51ac:	d800      	bhi.n	51b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    51ae:	4610      	mov	r0, r2
    51b0:	6348      	str	r0, [r1, #52]	; 0x34
    51b2:	9a08      	ldr	r2, [sp, #32]
    51b4:	b10a      	cbz	r2, 51ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    51b6:	e9c1 5404 	strd	r5, r4, [r1, #16]
    51ba:	e9c1 5406 	strd	r5, r4, [r1, #24]
    51be:	468b      	mov	fp, r1
    51c0:	9904      	ldr	r1, [sp, #16]
    51c2:	b111      	cbz	r1, 51ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    51c4:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    51c8:	e001      	b.n	51ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    51ca:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    51ce:	2001      	movs	r0, #1
    51d0:	72f0      	strb	r0, [r6, #11]
    51d2:	f009 ff37 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    51d6:	8130      	strh	r0, [r6, #8]
    51d8:	4628      	mov	r0, r5
    51da:	4621      	mov	r1, r4
    51dc:	f000 f822 	bl	5224 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    51e0:	72b0      	strb	r0, [r6, #10]
    51e2:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    51e6:	6070      	str	r0, [r6, #4]
    51e8:	9803      	ldr	r0, [sp, #12]
    51ea:	b148      	cbz	r0, 5200 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    51ec:	2001      	movs	r0, #1
    51ee:	7030      	strb	r0, [r6, #0]
    51f0:	4a0b      	ldr	r2, [pc, #44]	; (5220 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    51f2:	4640      	mov	r0, r8
    51f4:	4649      	mov	r1, r9
    51f6:	f000 f899 	bl	532c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    51fa:	1bc0      	subs	r0, r0, r7
    51fc:	6130      	str	r0, [r6, #16]
    51fe:	e003      	b.n	5208 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5200:	f886 a000 	strb.w	sl, [r6]
    5204:	e9c6 5404 	strd	r5, r4, [r6, #16]
    5208:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    520c:	42b8      	cmp	r0, r7
    520e:	d303      	bcc.n	5218 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5210:	2001      	movs	r0, #1
    5212:	b00b      	add	sp, #44	; 0x2c
    5214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5218:	2000      	movs	r0, #0
    521a:	e7fa      	b.n	5212 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    521c:	20000c48 	.word	0x20000c48
    5220:	0f424000 	.word	0x0f424000
    5224:	b570      	push	{r4, r5, r6, lr}
    5226:	4604      	mov	r4, r0
    5228:	480a      	ldr	r0, [pc, #40]	; (5254 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    522a:	460d      	mov	r5, r1
    522c:	7801      	ldrb	r1, [r0, #0]
    522e:	2904      	cmp	r1, #4
    5230:	d10d      	bne.n	524e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5232:	6840      	ldr	r0, [r0, #4]
    5234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5238:	0046      	lsls	r6, r0, #1
    523a:	f7ff fe6f 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    523e:	4622      	mov	r2, r4
    5240:	462b      	mov	r3, r5
    5242:	f009 ff4e 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5246:	42b0      	cmp	r0, r6
    5248:	d201      	bcs.n	524e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    524a:	2002      	movs	r0, #2
    524c:	bd70      	pop	{r4, r5, r6, pc}
    524e:	2001      	movs	r0, #1
    5250:	bd70      	pop	{r4, r5, r6, pc}
    5252:	0000      	.short	0x0000
    5254:	20000c48 	.word	0x20000c48
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	4d14      	ldr	r5, [pc, #80]	; (52ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    525c:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5260:	f105 0440 	add.w	r4, r5, #64	; 0x40
    5264:	2800      	cmp	r0, #0
    5266:	7828      	ldrb	r0, [r5, #0]
    5268:	d00f      	beq.n	528a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    526a:	2805      	cmp	r0, #5
    526c:	d004      	beq.n	5278 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    526e:	f240 2157 	movw	r1, #599	; 0x257
    5272:	2021      	movs	r0, #33	; 0x21
    5274:	f7fb fbf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5278:	4620      	mov	r0, r4
    527a:	f009 ff00 	bl	f07e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    527e:	b178      	cbz	r0, 52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    5280:	4620      	mov	r0, r4
    5282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5286:	f001 be69 	b.w	6f5c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    528a:	2805      	cmp	r0, #5
    528c:	d108      	bne.n	52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    528e:	4620      	mov	r0, r4
    5290:	f009 fef5 	bl	f07e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    5294:	b920      	cbnz	r0, 52a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    5296:	6a28      	ldr	r0, [r5, #32]
    5298:	f500 700a 	add.w	r0, r0, #552	; 0x228
    529c:	f001 fea0 	bl	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    52a0:	4620      	mov	r0, r4
    52a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52a6:	f001 be9b 	b.w	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    52aa:	0000      	.short	0x0000
    52ac:	20000c48 	.word	0x20000c48
    52b0:	b510      	push	{r4, lr}
    52b2:	f7fe f8d1 	bl	3458 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    52b6:	490b      	ldr	r1, [pc, #44]	; (52e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    52b8:	2000      	movs	r0, #0
    52ba:	7088      	strb	r0, [r1, #2]
    52bc:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    52c0:	6208      	str	r0, [r1, #32]
    52c2:	7008      	strb	r0, [r1, #0]
    52c4:	f7fe f856 	bl	3374 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    52c8:	4604      	mov	r4, r0
    52ca:	7800      	ldrb	r0, [r0, #0]
    52cc:	f005 fe70 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    52d0:	b110      	cbz	r0, 52d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    52d2:	2020      	movs	r0, #32
    52d4:	7020      	strb	r0, [r4, #0]
    52d6:	bd10      	pop	{r4, pc}
    52d8:	f240 3192 	movw	r1, #914	; 0x392
    52dc:	2021      	movs	r0, #33	; 0x21
    52de:	f7fb fbc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52e2:	0000      	.short	0x0000
    52e4:	20000c48 	.word	0x20000c48
    52e8:	b510      	push	{r4, lr}
    52ea:	4604      	mov	r4, r0
    52ec:	f7ff fe16 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    52f0:	4902      	ldr	r1, [pc, #8]	; (52fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    52f2:	1a20      	subs	r0, r4, r0
    52f4:	6849      	ldr	r1, [r1, #4]
    52f6:	fbb0 f0f1 	udiv	r0, r0, r1
    52fa:	bd10      	pop	{r4, pc}
    52fc:	20000c48 	.word	0x20000c48
    5300:	b570      	push	{r4, r5, r6, lr}
    5302:	4604      	mov	r4, r0
    5304:	460d      	mov	r5, r1
    5306:	f7ff fe09 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    530a:	4622      	mov	r2, r4
    530c:	462b      	mov	r3, r5
    530e:	f009 fee8 	bl	f0e2 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5312:	4905      	ldr	r1, [pc, #20]	; (5328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5314:	684c      	ldr	r4, [r1, #4]
    5316:	fbb0 f0f4 	udiv	r0, r0, r4
    531a:	4344      	muls	r4, r0
    531c:	f7ff fdfe 	bl	4f1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5320:	1900      	adds	r0, r0, r4
    5322:	f141 0100 	adc.w	r1, r1, #0
    5326:	bd70      	pop	{r4, r5, r6, pc}
    5328:	20000c48 	.word	0x20000c48
    532c:	4b0a      	ldr	r3, [pc, #40]	; (5358 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    532e:	b510      	push	{r4, lr}
    5330:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5334:	1a20      	subs	r0, r4, r0
    5336:	eb63 0301 	sbc.w	r3, r3, r1
    533a:	2400      	movs	r4, #0
    533c:	4621      	mov	r1, r4
    533e:	1a24      	subs	r4, r4, r0
    5340:	4199      	sbcs	r1, r3
    5342:	da06      	bge.n	5352 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5344:	2100      	movs	r1, #0
    5346:	1a14      	subs	r4, r2, r0
    5348:	eb71 0403 	sbcs.w	r4, r1, r3
    534c:	da00      	bge.n	5350 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    534e:	4610      	mov	r0, r2
    5350:	bd10      	pop	{r4, pc}
    5352:	2000      	movs	r0, #0
    5354:	bd10      	pop	{r4, pc}
    5356:	0000      	.short	0x0000
    5358:	20000c48 	.word	0x20000c48

0000535c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	f002 fecf 	bl	8100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    5362:	4c0d      	ldr	r4, [pc, #52]	; (5398 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    5364:	4606      	mov	r6, r0
    5366:	4602      	mov	r2, r0
    5368:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    536c:	4628      	mov	r0, r5
    536e:	f008 fe64 	bl	e03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    5372:	6060      	str	r0, [r4, #4]
    5374:	42a8      	cmp	r0, r5
    5376:	d005      	beq.n	5384 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    5378:	68e1      	ldr	r1, [r4, #12]
    537a:	1b40      	subs	r0, r0, r5
    537c:	4408      	add	r0, r1
    537e:	60e0      	str	r0, [r4, #12]
    5380:	f006 f892 	bl	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5384:	6860      	ldr	r0, [r4, #4]
    5386:	42b0      	cmp	r0, r6
    5388:	d301      	bcc.n	538e <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    538a:	7820      	ldrb	r0, [r4, #0]
    538c:	b108      	cbz	r0, 5392 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    538e:	2000      	movs	r0, #0
    5390:	bd70      	pop	{r4, r5, r6, pc}
    5392:	2001      	movs	r0, #1
    5394:	bd70      	pop	{r4, r5, r6, pc}
    5396:	0000      	.short	0x0000
    5398:	20000f28 	.word	0x20000f28

0000539c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    539c:	4903      	ldr	r1, [pc, #12]	; (53ac <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    539e:	2000      	movs	r0, #0
    53a0:	6008      	str	r0, [r1, #0]
    53a2:	6048      	str	r0, [r1, #4]
    53a4:	6088      	str	r0, [r1, #8]
    53a6:	60c8      	str	r0, [r1, #12]
    53a8:	f000 b856 	b.w	5458 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    53ac:	20000f28 	.word	0x20000f28

000053b0 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    53b0:	b510      	push	{r4, lr}
    53b2:	b086      	sub	sp, #24
    53b4:	0004      	movs	r4, r0
    53b6:	d005      	beq.n	53c4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    53b8:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    53bc:	b128      	cbz	r0, 53ca <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    53be:	f240 1177 	movw	r1, #375	; 0x177
    53c2:	e025      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53c4:	f44f 71bb 	mov.w	r1, #374	; 0x176
    53c8:	e022      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53ca:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    53ce:	2820      	cmp	r0, #32
    53d0:	d002      	beq.n	53d8 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    53d2:	f240 1179 	movw	r1, #377	; 0x179
    53d6:	e01b      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    53d8:	4621      	mov	r1, r4
    53da:	480f      	ldr	r0, [pc, #60]	; (5418 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    53dc:	f005 ff22 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    53e0:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    53e4:	2820      	cmp	r0, #32
    53e6:	d00e      	beq.n	5406 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    53e8:	2300      	movs	r3, #0
    53ea:	2201      	movs	r2, #1
    53ec:	4621      	mov	r1, r4
    53ee:	4668      	mov	r0, sp
    53f0:	f009 fecb 	bl	f18a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    53f4:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    53f8:	4669      	mov	r1, sp
    53fa:	f009 ffad 	bl	f358 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    53fe:	b128      	cbz	r0, 540c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5400:	b006      	add	sp, #24
    5402:	2000      	movs	r0, #0
    5404:	bd10      	pop	{r4, pc}
    5406:	f44f 71be 	mov.w	r1, #380	; 0x17c
    540a:	e001      	b.n	5410 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    540c:	f240 117f 	movw	r1, #383	; 0x17f
    5410:	2035      	movs	r0, #53	; 0x35
    5412:	f7fb fb27 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5416:	0000      	.short	0x0000
    5418:	00005519 	.word	0x00005519

0000541c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    541c:	4901      	ldr	r1, [pc, #4]	; (5424 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    541e:	7048      	strb	r0, [r1, #1]
    5420:	4770      	bx	lr
    5422:	0000      	.short	0x0000
    5424:	20000f28 	.word	0x20000f28

00005428 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    5428:	b570      	push	{r4, r5, r6, lr}
    542a:	4605      	mov	r5, r0
    542c:	4809      	ldr	r0, [pc, #36]	; (5454 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    542e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5432:	fbb0 f4f1 	udiv	r4, r0, r1
    5436:	f009 fe1c 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    543a:	1901      	adds	r1, r0, r4
    543c:	4628      	mov	r0, r5
    543e:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5442:	f009 f9f5 	bl	e830 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    5446:	f640 0148 	movw	r1, #2120	; 0x848
    544a:	4288      	cmp	r0, r1
    544c:	d300      	bcc.n	5450 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    544e:	4608      	mov	r0, r1
    5450:	b280      	uxth	r0, r0
    5452:	bd70      	pop	{r4, r5, r6, pc}
    5454:	000122f9 	.word	0x000122f9
    5458:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    545c:	4d15      	ldr	r5, [pc, #84]	; (54b4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    545e:	2001      	movs	r0, #1
    5460:	7028      	strb	r0, [r5, #0]
    5462:	2400      	movs	r4, #0
    5464:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5468:	e00b      	b.n	5482 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    546a:	2100      	movs	r1, #0
    546c:	f008 fc27 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5470:	0007      	movs	r7, r0
    5472:	d009      	beq.n	5488 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    5474:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    5478:	f005 fdbc 	bl	aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    547c:	4638      	mov	r0, r7
    547e:	f009 ff3c 	bl	f2fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    5482:	9400      	str	r4, [sp, #0]
    5484:	9401      	str	r4, [sp, #4]
    5486:	e00d      	b.n	54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5488:	f240 1199 	movw	r1, #409	; 0x199
    548c:	2035      	movs	r0, #53	; 0x35
    548e:	f7fb fae9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5492:	9800      	ldr	r0, [sp, #0]
    5494:	b130      	cbz	r0, 54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    5496:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    549a:	b119      	cbz	r1, 54a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    549c:	8800      	ldrh	r0, [r0, #0]
    549e:	42b0      	cmp	r0, r6
    54a0:	d1e3      	bne.n	546a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    54a2:	e004      	b.n	54ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    54a4:	4668      	mov	r0, sp
    54a6:	f7fb fcfb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    54aa:	2800      	cmp	r0, #0
    54ac:	d0f1      	beq.n	5492 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    54ae:	702c      	strb	r4, [r5, #0]
    54b0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    54b4:	20000f28 	.word	0x20000f28
    54b8:	b510      	push	{r4, lr}
    54ba:	4604      	mov	r4, r0
    54bc:	2901      	cmp	r1, #1
    54be:	d102      	bne.n	54c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    54c0:	480a      	ldr	r0, [pc, #40]	; (54ec <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    54c2:	7800      	ldrb	r0, [r0, #0]
    54c4:	b140      	cbz	r0, 54d8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    54c6:	2004      	movs	r0, #4
    54c8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    54cc:	f002 fe1e 	bl	810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    54d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    54d4:	f005 bece 	b.w	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    54d8:	2200      	movs	r2, #0
    54da:	2101      	movs	r1, #1
    54dc:	4620      	mov	r0, r4
    54de:	f009 ff24 	bl	f32a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    54e2:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    54e6:	1c40      	adds	r0, r0, #1
    54e8:	8020      	strh	r0, [r4, #0]
    54ea:	e7ef      	b.n	54cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    54ec:	20000f28 	.word	0x20000f28
    54f0:	b510      	push	{r4, lr}
    54f2:	4604      	mov	r4, r0
    54f4:	4608      	mov	r0, r1
    54f6:	f002 fef3 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    54fa:	4906      	ldr	r1, [pc, #24]	; (5514 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    54fc:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5500:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5504:	4408      	add	r0, r1
    5506:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    550a:	fbb0 f0f1 	udiv	r0, r0, r1
    550e:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5512:	bd10      	pop	{r4, pc}
    5514:	0000f35c 	.word	0x0000f35c
    5518:	b570      	push	{r4, r5, r6, lr}
    551a:	0004      	movs	r4, r0
    551c:	d008      	beq.n	5530 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    551e:	2909      	cmp	r1, #9
    5520:	d25f      	bcs.n	55e2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5522:	e8df f001 	tbb	[pc, r1]
    5526:	3807      	.short	0x3807
    5528:	5e3c4040 	.word	0x5e3c4040
    552c:	00594e47 	.word	0x00594e47
    5530:	21b7      	movs	r1, #183	; 0xb7
    5532:	e053      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5534:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5538:	b358      	cbz	r0, 5592 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    553a:	4620      	mov	r0, r4
    553c:	f000 f928 	bl	5790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5540:	f009 fd97 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5544:	f200 103b 	addw	r0, r0, #315	; 0x13b
    5548:	b285      	uxth	r5, r0
    554a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    554e:	2128      	movs	r1, #40	; 0x28
    5550:	f009 fe07 	bl	f162 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5554:	182e      	adds	r6, r5, r0
    5556:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5558:	6920      	ldr	r0, [r4, #16]
    555a:	4288      	cmp	r0, r1
    555c:	d200      	bcs.n	5560 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    555e:	4601      	mov	r1, r0
    5560:	4632      	mov	r2, r6
    5562:	4620      	mov	r0, r4
    5564:	f009 f8d4 	bl	e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5568:	4d1f      	ldr	r5, [pc, #124]	; (55e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    556a:	6068      	str	r0, [r5, #4]
    556c:	7869      	ldrb	r1, [r5, #1]
    556e:	b121      	cbz	r1, 557a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    5570:	4632      	mov	r2, r6
    5572:	4620      	mov	r0, r4
    5574:	6921      	ldr	r1, [r4, #16]
    5576:	f009 f8cb 	bl	e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    557a:	60a8      	str	r0, [r5, #8]
    557c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5580:	f009 f927 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    5584:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    5588:	60e8      	str	r0, [r5, #12]
    558a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    558e:	f005 bf8b 	b.w	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    5592:	21bf      	movs	r1, #191	; 0xbf
    5594:	e022      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    559a:	f009 bef0 	b.w	f37e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    559e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55a2:	f002 bf87 	b.w	84b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    55a6:	4620      	mov	r0, r4
    55a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55ac:	2201      	movs	r2, #1
    55ae:	2100      	movs	r1, #0
    55b0:	f009 bebb 	b.w	f32a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    55b4:	2001      	movs	r0, #1
    55b6:	f004 fe5d 	bl	a274 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    55ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55be:	f008 bc9c 	b.w	defa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    55c2:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    55c6:	2804      	cmp	r0, #4
    55c8:	d001      	beq.n	55ce <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    55ca:	21fe      	movs	r1, #254	; 0xfe
    55cc:	e006      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    55ce:	4620      	mov	r0, r4
    55d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55d4:	f009 be91 	b.w	f2fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    55d8:	f44f 7183 	mov.w	r1, #262	; 0x106
    55dc:	2035      	movs	r0, #53	; 0x35
    55de:	f7fb fa41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55e2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    55e6:	e7f9      	b.n	55dc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    55e8:	20000f28 	.word	0x20000f28

000055ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    55ec:	4806      	ldr	r0, [pc, #24]	; (5608 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    55ee:	4905      	ldr	r1, [pc, #20]	; (5604 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    55f0:	6501      	str	r1, [r0, #80]	; 0x50
    55f2:	4906      	ldr	r1, [pc, #24]	; (560c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    55f4:	6541      	str	r1, [r0, #84]	; 0x54
    55f6:	4807      	ldr	r0, [pc, #28]	; (5614 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    55f8:	4905      	ldr	r1, [pc, #20]	; (5610 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    55fa:	6501      	str	r1, [r0, #80]	; 0x50
    55fc:	4906      	ldr	r1, [pc, #24]	; (5618 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    55fe:	6541      	str	r1, [r0, #84]	; 0x54
    5600:	4770      	bx	lr
    5602:	0000      	.short	0x0000
    5604:	000067b5 	.word	0x000067b5
    5608:	200000f8 	.word	0x200000f8
    560c:	0000688d 	.word	0x0000688d
    5610:	0000f551 	.word	0x0000f551
    5614:	200001a4 	.word	0x200001a4
    5618:	0000f57b 	.word	0x0000f57b

0000561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    561c:	b570      	push	{r4, r5, r6, lr}
    561e:	4605      	mov	r5, r0
    5620:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5624:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    5628:	b1c9      	cbz	r1, 565e <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    562a:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    562e:	1a0c      	subs	r4, r1, r0
    5630:	f1b4 0404 	subs.w	r4, r4, #4
    5634:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    5638:	b140      	cbz	r0, 564c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    563a:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    563e:	2300      	movs	r3, #0
    5640:	2109      	movs	r1, #9
    5642:	f105 0088 	add.w	r0, r5, #136	; 0x88
    5646:	f008 fd0b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    564a:	b160      	cbz	r0, 5666 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    564c:	4628      	mov	r0, r5
    564e:	f00a f89a 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5652:	b138      	cbz	r0, 5664 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5654:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    5658:	1a40      	subs	r0, r0, r1
    565a:	1f00      	subs	r0, r0, #4
    565c:	e003      	b.n	5666 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    565e:	f1c0 0402 	rsb	r4, r0, #2
    5662:	e7e7      	b.n	5634 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    5664:	4620      	mov	r0, r4
    5666:	42a0      	cmp	r0, r4
    5668:	da00      	bge.n	566c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    566a:	4604      	mov	r4, r0
    566c:	2c00      	cmp	r4, #0
    566e:	dc01      	bgt.n	5674 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    5670:	2000      	movs	r0, #0
    5672:	bd70      	pop	{r4, r5, r6, pc}
    5674:	b2a0      	uxth	r0, r4
    5676:	bd70      	pop	{r4, r5, r6, pc}

00005678 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    5678:	481d      	ldr	r0, [pc, #116]	; (56f0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    567a:	491c      	ldr	r1, [pc, #112]	; (56ec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    567c:	6081      	str	r1, [r0, #8]
    567e:	491d      	ldr	r1, [pc, #116]	; (56f4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    5680:	61c1      	str	r1, [r0, #28]
    5682:	491d      	ldr	r1, [pc, #116]	; (56f8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    5684:	62c1      	str	r1, [r0, #44]	; 0x2c
    5686:	491d      	ldr	r1, [pc, #116]	; (56fc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    5688:	6101      	str	r1, [r0, #16]
    568a:	491d      	ldr	r1, [pc, #116]	; (5700 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    568c:	6141      	str	r1, [r0, #20]
    568e:	491d      	ldr	r1, [pc, #116]	; (5704 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    5690:	6441      	str	r1, [r0, #68]	; 0x44
    5692:	491d      	ldr	r1, [pc, #116]	; (5708 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    5694:	6181      	str	r1, [r0, #24]
    5696:	491d      	ldr	r1, [pc, #116]	; (570c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    5698:	6301      	str	r1, [r0, #48]	; 0x30
    569a:	491d      	ldr	r1, [pc, #116]	; (5710 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    569c:	6241      	str	r1, [r0, #36]	; 0x24
    569e:	491d      	ldr	r1, [pc, #116]	; (5714 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    56a0:	64c1      	str	r1, [r0, #76]	; 0x4c
    56a2:	491d      	ldr	r1, [pc, #116]	; (5718 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    56a4:	6481      	str	r1, [r0, #72]	; 0x48
    56a6:	491d      	ldr	r1, [pc, #116]	; (571c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    56a8:	6341      	str	r1, [r0, #52]	; 0x34
    56aa:	491d      	ldr	r1, [pc, #116]	; (5720 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    56ac:	6381      	str	r1, [r0, #56]	; 0x38
    56ae:	481e      	ldr	r0, [pc, #120]	; (5728 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    56b0:	491c      	ldr	r1, [pc, #112]	; (5724 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    56b2:	6081      	str	r1, [r0, #8]
    56b4:	491d      	ldr	r1, [pc, #116]	; (572c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    56b6:	61c1      	str	r1, [r0, #28]
    56b8:	491d      	ldr	r1, [pc, #116]	; (5730 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    56ba:	6201      	str	r1, [r0, #32]
    56bc:	491d      	ldr	r1, [pc, #116]	; (5734 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    56be:	6041      	str	r1, [r0, #4]
    56c0:	491d      	ldr	r1, [pc, #116]	; (5738 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    56c2:	6001      	str	r1, [r0, #0]
    56c4:	491d      	ldr	r1, [pc, #116]	; (573c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    56c6:	6281      	str	r1, [r0, #40]	; 0x28
    56c8:	491d      	ldr	r1, [pc, #116]	; (5740 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    56ca:	62c1      	str	r1, [r0, #44]	; 0x2c
    56cc:	491d      	ldr	r1, [pc, #116]	; (5744 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    56ce:	60c1      	str	r1, [r0, #12]
    56d0:	491d      	ldr	r1, [pc, #116]	; (5748 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    56d2:	6181      	str	r1, [r0, #24]
    56d4:	491d      	ldr	r1, [pc, #116]	; (574c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    56d6:	6301      	str	r1, [r0, #48]	; 0x30
    56d8:	491d      	ldr	r1, [pc, #116]	; (5750 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    56da:	6481      	str	r1, [r0, #72]	; 0x48
    56dc:	491d      	ldr	r1, [pc, #116]	; (5754 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    56de:	64c1      	str	r1, [r0, #76]	; 0x4c
    56e0:	491d      	ldr	r1, [pc, #116]	; (5758 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    56e2:	6441      	str	r1, [r0, #68]	; 0x44
    56e4:	491d      	ldr	r1, [pc, #116]	; (575c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    56e6:	6241      	str	r1, [r0, #36]	; 0x24
    56e8:	4770      	bx	lr
    56ea:	0000      	.short	0x0000
    56ec:	00006bbd 	.word	0x00006bbd
    56f0:	200000f8 	.word	0x200000f8
    56f4:	00006c01 	.word	0x00006c01
    56f8:	0000f45f 	.word	0x0000f45f
    56fc:	000066f5 	.word	0x000066f5
    5700:	0000f47f 	.word	0x0000f47f
    5704:	00006ac1 	.word	0x00006ac1
    5708:	00006b41 	.word	0x00006b41
    570c:	00006c49 	.word	0x00006c49
    5710:	00006731 	.word	0x00006731
    5714:	0000f431 	.word	0x0000f431
    5718:	0000f3fb 	.word	0x0000f3fb
    571c:	00006af5 	.word	0x00006af5
    5720:	0000690d 	.word	0x0000690d
    5724:	0000f719 	.word	0x0000f719
    5728:	200001a4 	.word	0x200001a4
    572c:	0000f749 	.word	0x0000f749
    5730:	0000f54d 	.word	0x0000f54d
    5734:	0000f4bf 	.word	0x0000f4bf
    5738:	0000f4e9 	.word	0x0000f4e9
    573c:	0000f5dd 	.word	0x0000f5dd
    5740:	0000f60f 	.word	0x0000f60f
    5744:	0000f513 	.word	0x0000f513
    5748:	0000f6fb 	.word	0x0000f6fb
    574c:	0000f783 	.word	0x0000f783
    5750:	0000f5a9 	.word	0x0000f5a9
    5754:	0000f5d3 	.word	0x0000f5d3
    5758:	0000f6d9 	.word	0x0000f6d9
    575c:	0000f5a5 	.word	0x0000f5a5

00005760 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    5760:	4806      	ldr	r0, [pc, #24]	; (577c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    5762:	4905      	ldr	r1, [pc, #20]	; (5778 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    5764:	6581      	str	r1, [r0, #88]	; 0x58
    5766:	4906      	ldr	r1, [pc, #24]	; (5780 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    5768:	65c1      	str	r1, [r0, #92]	; 0x5c
    576a:	4807      	ldr	r0, [pc, #28]	; (5788 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    576c:	4905      	ldr	r1, [pc, #20]	; (5784 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    576e:	6581      	str	r1, [r0, #88]	; 0x58
    5770:	4906      	ldr	r1, [pc, #24]	; (578c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    5772:	6601      	str	r1, [r0, #96]	; 0x60
    5774:	4770      	bx	lr
    5776:	0000      	.short	0x0000
    5778:	00006919 	.word	0x00006919
    577c:	200000f8 	.word	0x200000f8
    5780:	00006a51 	.word	0x00006a51
    5784:	0000f635 	.word	0x0000f635
    5788:	200001a4 	.word	0x200001a4
    578c:	0000f65f 	.word	0x0000f65f

00005790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    5790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5792:	4d39      	ldr	r5, [pc, #228]	; (5878 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    5794:	2600      	movs	r6, #0
    5796:	f1a5 070c 	sub.w	r7, r5, #12
    579a:	702e      	strb	r6, [r5, #0]
    579c:	6068      	str	r0, [r5, #4]
    579e:	807e      	strh	r6, [r7, #2]
    57a0:	707e      	strb	r6, [r7, #1]
    57a2:	4604      	mov	r4, r0
    57a4:	703e      	strb	r6, [r7, #0]
    57a6:	8800      	ldrh	r0, [r0, #0]
    57a8:	f7fb ff18 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    57ac:	6868      	ldr	r0, [r5, #4]
    57ae:	8800      	ldrh	r0, [r0, #0]
    57b0:	f7fb febc 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    57b4:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    57b8:	1c40      	adds	r0, r0, #1
    57ba:	b282      	uxth	r2, r0
    57bc:	6868      	ldr	r0, [r5, #4]
    57be:	f100 0388 	add.w	r3, r0, #136	; 0x88
    57c2:	4601      	mov	r1, r0
    57c4:	4618      	mov	r0, r3
    57c6:	f008 fe09 	bl	e3dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    57ca:	b120      	cbz	r0, 57d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    57cc:	f240 11c1 	movw	r1, #449	; 0x1c1
    57d0:	2036      	movs	r0, #54	; 0x36
    57d2:	f7fb f947 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57d6:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    57da:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    57de:	2825      	cmp	r0, #37	; 0x25
    57e0:	d10a      	bne.n	57f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    57e2:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    57e6:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    57ea:	1a40      	subs	r0, r0, r1
    57ec:	b200      	sxth	r0, r0
    57ee:	2800      	cmp	r0, #0
    57f0:	db02      	blt.n	57f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    57f2:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    57f6:	e011      	b.n	581c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    57f8:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    57fc:	2825      	cmp	r0, #37	; 0x25
    57fe:	d003      	beq.n	5808 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5800:	2826      	cmp	r0, #38	; 0x26
    5802:	d001      	beq.n	5808 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5804:	2827      	cmp	r0, #39	; 0x27
    5806:	d10c      	bne.n	5822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5808:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    580c:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5810:	1a40      	subs	r0, r0, r1
    5812:	b200      	sxth	r0, r0
    5814:	2800      	cmp	r0, #0
    5816:	db04      	blt.n	5822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    5818:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    581c:	f000 febe 	bl	659c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5820:	b318      	cbz	r0, 586a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5822:	f000 fd43 	bl	62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    5826:	2800      	cmp	r0, #0
    5828:	d125      	bne.n	5876 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    582a:	6868      	ldr	r0, [r5, #4]
    582c:	3088      	adds	r0, #136	; 0x88
    582e:	f009 fdb4 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5832:	b120      	cbz	r0, 583e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5834:	6868      	ldr	r0, [r5, #4]
    5836:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    583a:	f000 fbdd 	bl	5ff8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    583e:	480f      	ldr	r0, [pc, #60]	; (587c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5840:	9000      	str	r0, [sp, #0]
    5842:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    5846:	4b0e      	ldr	r3, [pc, #56]	; (5880 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    5848:	4a0e      	ldr	r2, [pc, #56]	; (5884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    584a:	f7fb ff49 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    584e:	6868      	ldr	r0, [r5, #4]
    5850:	2300      	movs	r3, #0
    5852:	2105      	movs	r1, #5
    5854:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5858:	3088      	adds	r0, #136	; 0x88
    585a:	f008 fc01 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    585e:	2800      	cmp	r0, #0
    5860:	d009      	beq.n	5876 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    5862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5866:	f7fb bf35 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    586a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    586e:	2100      	movs	r1, #0
    5870:	4608      	mov	r0, r1
    5872:	f000 bcc3 	b.w	61fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    5876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5878:	200000f0 	.word	0x200000f0
    587c:	000061fd 	.word	0x000061fd
    5880:	00005a65 	.word	0x00005a65
    5884:	00006515 	.word	0x00006515

00005888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    588a:	460d      	mov	r5, r1
    588c:	4604      	mov	r4, r0
    588e:	2600      	movs	r6, #0
    5890:	e051      	b.n	5936 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    5892:	bf00      	nop
    5894:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5898:	1c40      	adds	r0, r0, #1
    589a:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    589e:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    58a2:	1c40      	adds	r0, r0, #1
    58a4:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    58a8:	4620      	mov	r0, r4
    58aa:	f009 ff6c 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    58ae:	b198      	cbz	r0, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    58b0:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    58b4:	1c40      	adds	r0, r0, #1
    58b6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    58ba:	4620      	mov	r0, r4
    58bc:	f009 fd8e 	bl	f3dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    58c0:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    58c4:	4288      	cmp	r0, r1
    58c6:	d307      	bcc.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    58c8:	220f      	movs	r2, #15
    58ca:	491d      	ldr	r1, [pc, #116]	; (5940 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    58cc:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    58d0:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    58d4:	f008 fef8 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    58d8:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    58dc:	b120      	cbz	r0, 58e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    58de:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    58e2:	1c40      	adds	r0, r0, #1
    58e4:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    58e8:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    58ec:	b120      	cbz	r0, 58f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    58ee:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    58f2:	1c40      	adds	r0, r0, #1
    58f4:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    58f8:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    58fc:	f88d 0000 	strb.w	r0, [sp]
    5900:	9800      	ldr	r0, [sp, #0]
    5902:	9000      	str	r0, [sp, #0]
    5904:	f89d 0000 	ldrb.w	r0, [sp]
    5908:	b940      	cbnz	r0, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    590a:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    590e:	2300      	movs	r3, #0
    5910:	2101      	movs	r1, #1
    5912:	f104 0088 	add.w	r0, r4, #136	; 0x88
    5916:	f008 fba3 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    591a:	b120      	cbz	r0, 5926 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    591c:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5920:	1c40      	adds	r0, r0, #1
    5922:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    5926:	4620      	mov	r0, r4
    5928:	f000 fa30 	bl	5d8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    592c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5930:	1c40      	adds	r0, r0, #1
    5932:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    5936:	1e6d      	subs	r5, r5, #1
    5938:	b2ad      	uxth	r5, r5
    593a:	d2ab      	bcs.n	5894 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    593c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    593e:	0000      	.short	0x0000
    5940:	0000ebbf 	.word	0x0000ebbf
    5944:	4411      	add	r1, r2
    5946:	78c2      	ldrb	r2, [r0, #3]
    5948:	480c      	ldr	r0, [pc, #48]	; (597c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    594a:	1d89      	adds	r1, r1, #6
    594c:	b289      	uxth	r1, r1
    594e:	6840      	ldr	r0, [r0, #4]
    5950:	2a01      	cmp	r2, #1
    5952:	d006      	beq.n	5962 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5954:	b142      	cbz	r2, 5968 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    5956:	2a18      	cmp	r2, #24
    5958:	d105      	bne.n	5966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    595a:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    595e:	b132      	cbz	r2, 596e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    5960:	e009      	b.n	5976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5962:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    5966:	4770      	bx	lr
    5968:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    596c:	4770      	bx	lr
    596e:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    5972:	b902      	cbnz	r2, 5976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    5974:	2100      	movs	r1, #0
    5976:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    597a:	4770      	bx	lr
    597c:	200000f0 	.word	0x200000f0
    5980:	490b      	ldr	r1, [pc, #44]	; (59b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    5982:	78c2      	ldrb	r2, [r0, #3]
    5984:	6849      	ldr	r1, [r1, #4]
    5986:	2a01      	cmp	r2, #1
    5988:	d006      	beq.n	5998 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    598a:	b15a      	cbz	r2, 59a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    598c:	2a18      	cmp	r2, #24
    598e:	d108      	bne.n	59a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    5990:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    5994:	f008 be37 	b.w	e606 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    5998:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    599c:	7241      	strb	r1, [r0, #9]
    599e:	0a09      	lsrs	r1, r1, #8
    59a0:	7281      	strb	r1, [r0, #10]
    59a2:	4770      	bx	lr
    59a4:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    59a8:	7341      	strb	r1, [r0, #13]
    59aa:	0a09      	lsrs	r1, r1, #8
    59ac:	7381      	strb	r1, [r0, #14]
    59ae:	4770      	bx	lr
    59b0:	200000f0 	.word	0x200000f0
    59b4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    59b6:	4c2a      	ldr	r4, [pc, #168]	; (5a60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    59b8:	2300      	movs	r3, #0
    59ba:	4619      	mov	r1, r3
    59bc:	6860      	ldr	r0, [r4, #4]
    59be:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    59c2:	3088      	adds	r0, #136	; 0x88
    59c4:	f008 fb4c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    59c8:	2800      	cmp	r0, #0
    59ca:	d048      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59cc:	6860      	ldr	r0, [r4, #4]
    59ce:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    59d2:	f88d 1000 	strb.w	r1, [sp]
    59d6:	9900      	ldr	r1, [sp, #0]
    59d8:	9100      	str	r1, [sp, #0]
    59da:	f89d 1000 	ldrb.w	r1, [sp]
    59de:	2500      	movs	r5, #0
    59e0:	2900      	cmp	r1, #0
    59e2:	d03c      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59e4:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    59e8:	f008 fb9d 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    59ec:	2800      	cmp	r0, #0
    59ee:	d136      	bne.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59f0:	6860      	ldr	r0, [r4, #4]
    59f2:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    59f6:	280a      	cmp	r0, #10
    59f8:	d931      	bls.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    59fa:	4668      	mov	r0, sp
    59fc:	f7fc ff30 	bl	2860 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5a00:	2800      	cmp	r0, #0
    5a02:	d02c      	beq.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a04:	6861      	ldr	r1, [r4, #4]
    5a06:	2205      	movs	r2, #5
    5a08:	4668      	mov	r0, sp
    5a0a:	31ae      	adds	r1, #174	; 0xae
    5a0c:	f00b fa89 	bl	10f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a10:	b310      	cbz	r0, 5a58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5a12:	6860      	ldr	r0, [r4, #4]
    5a14:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5a18:	7808      	ldrb	r0, [r1, #0]
    5a1a:	b158      	cbz	r0, 5a34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5a1c:	2205      	movs	r2, #5
    5a1e:	4668      	mov	r0, sp
    5a20:	1c49      	adds	r1, r1, #1
    5a22:	f00b fa7e 	bl	10f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5a26:	2800      	cmp	r0, #0
    5a28:	d119      	bne.n	5a5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5a2a:	6860      	ldr	r0, [r4, #4]
    5a2c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a30:	7800      	ldrb	r0, [r0, #0]
    5a32:	b940      	cbnz	r0, 5a46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5a34:	6860      	ldr	r0, [r4, #4]
    5a36:	9900      	ldr	r1, [sp, #0]
    5a38:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a3c:	f8c0 1001 	str.w	r1, [r0, #1]
    5a40:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5a44:	7141      	strb	r1, [r0, #5]
    5a46:	6860      	ldr	r0, [r4, #4]
    5a48:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5a4c:	7801      	ldrb	r1, [r0, #0]
    5a4e:	1c49      	adds	r1, r1, #1
    5a50:	7001      	strb	r1, [r0, #0]
    5a52:	2001      	movs	r0, #1
    5a54:	f000 fe0c 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a58:	6860      	ldr	r0, [r4, #4]
    5a5a:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    5a5e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    5a60:	200000f0 	.word	0x200000f0
    5a64:	4a0c      	ldr	r2, [pc, #48]	; (5a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    5a66:	7851      	ldrb	r1, [r2, #1]
    5a68:	b9a1      	cbnz	r1, 5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a6a:	f102 010c 	add.w	r1, r2, #12
    5a6e:	2801      	cmp	r0, #1
    5a70:	6849      	ldr	r1, [r1, #4]
    5a72:	d008      	beq.n	5a86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    5a74:	7890      	ldrb	r0, [r2, #2]
    5a76:	0740      	lsls	r0, r0, #29
    5a78:	d503      	bpl.n	5a82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    5a7a:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    5a7e:	2806      	cmp	r0, #6
    5a80:	d008      	beq.n	5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a82:	2001      	movs	r0, #1
    5a84:	4770      	bx	lr
    5a86:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    5a8a:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    5a8c:	4288      	cmp	r0, r1
    5a8e:	d801      	bhi.n	5a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    5a90:	f7ff bc64 	b.w	535c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    5a94:	2000      	movs	r0, #0
    5a96:	4770      	bx	lr
    5a98:	200000e4 	.word	0x200000e4
    5a9c:	b538      	push	{r3, r4, r5, lr}
    5a9e:	4c93      	ldr	r4, [pc, #588]	; (5cec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    5aa0:	6860      	ldr	r0, [r4, #4]
    5aa2:	3088      	adds	r0, #136	; 0x88
    5aa4:	f009 fc79 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aa8:	2800      	cmp	r0, #0
    5aaa:	d164      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5aac:	6860      	ldr	r0, [r4, #4]
    5aae:	2300      	movs	r3, #0
    5ab0:	2101      	movs	r1, #1
    5ab2:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5ab6:	3088      	adds	r0, #136	; 0x88
    5ab8:	f008 fad2 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5abc:	2800      	cmp	r0, #0
    5abe:	d15a      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5ac0:	6860      	ldr	r0, [r4, #4]
    5ac2:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    5ac6:	f88d 1000 	strb.w	r1, [sp]
    5aca:	9900      	ldr	r1, [sp, #0]
    5acc:	9100      	str	r1, [sp, #0]
    5ace:	f89d 1000 	ldrb.w	r1, [sp]
    5ad2:	b109      	cbz	r1, 5ad8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5ad4:	2002      	movs	r0, #2
    5ad6:	e03c      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5ad8:	2500      	movs	r5, #0
    5ada:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ade:	462b      	mov	r3, r5
    5ae0:	4629      	mov	r1, r5
    5ae2:	3088      	adds	r0, #136	; 0x88
    5ae4:	f008 fabc 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ae8:	b128      	cbz	r0, 5af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5aea:	6860      	ldr	r0, [r4, #4]
    5aec:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5af0:	b108      	cbz	r0, 5af6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5af2:	2012      	movs	r0, #18
    5af4:	e02d      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5af6:	6860      	ldr	r0, [r4, #4]
    5af8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5afc:	2a19      	cmp	r2, #25
    5afe:	d027      	beq.n	5b50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5b00:	dc06      	bgt.n	5b10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5b02:	2a03      	cmp	r2, #3
    5b04:	d029      	beq.n	5b5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    5b06:	2a12      	cmp	r2, #18
    5b08:	d01e      	beq.n	5b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    5b0a:	2a13      	cmp	r2, #19
    5b0c:	d104      	bne.n	5b18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5b0e:	e019      	b.n	5b44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5b10:	2a24      	cmp	r2, #36	; 0x24
    5b12:	d02a      	beq.n	5b6a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5b14:	2a2f      	cmp	r2, #47	; 0x2f
    5b16:	d02f      	beq.n	5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    5b18:	2300      	movs	r3, #0
    5b1a:	2104      	movs	r1, #4
    5b1c:	3088      	adds	r0, #136	; 0x88
    5b1e:	f008 fa9f 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b22:	2800      	cmp	r0, #0
    5b24:	d127      	bne.n	5b76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5b26:	6860      	ldr	r0, [r4, #4]
    5b28:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5b2c:	291e      	cmp	r1, #30
    5b2e:	d048      	beq.n	5bc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5b30:	dc29      	bgt.n	5b86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5b32:	2901      	cmp	r1, #1
    5b34:	d036      	beq.n	5ba4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    5b36:	2902      	cmp	r1, #2
    5b38:	d041      	beq.n	5bbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    5b3a:	2903      	cmp	r1, #3
    5b3c:	d02c      	beq.n	5b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5b3e:	2904      	cmp	r1, #4
    5b40:	d13c      	bne.n	5bbc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5b42:	e0b7      	b.n	5cb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5b44:	200b      	movs	r0, #11
    5b46:	e004      	b.n	5b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    5b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b4c:	f000 bca2 	b.w	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5b50:	2006      	movs	r0, #6
    5b52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b56:	f000 bd8b 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b5a:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    5b5e:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5b62:	2007      	movs	r0, #7
    5b64:	f000 fd84 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b68:	e009      	b.n	5b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    5b6a:	2018      	movs	r0, #24
    5b6c:	f000 fd80 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b70:	6860      	ldr	r0, [r4, #4]
    5b72:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2001      	movs	r0, #1
    5b7a:	f000 fd81 	bl	6680 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5b7e:	6860      	ldr	r0, [r4, #4]
    5b80:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    5b84:	bd38      	pop	{r3, r4, r5, pc}
    5b86:	291f      	cmp	r1, #31
    5b88:	d01b      	beq.n	5bc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5b8a:	2922      	cmp	r1, #34	; 0x22
    5b8c:	d061      	beq.n	5c52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    5b8e:	2928      	cmp	r1, #40	; 0x28
    5b90:	d071      	beq.n	5c76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    5b92:	292f      	cmp	r1, #47	; 0x2f
    5b94:	d17d      	bne.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5b96:	e089      	b.n	5cac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    5b98:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    5b9c:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    5ba0:	2007      	movs	r0, #7
    5ba2:	e08a      	b.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5ba4:	200c      	movs	r0, #12
    5ba6:	f000 fd63 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5baa:	6860      	ldr	r0, [r4, #4]
    5bac:	f820 5fe2 	strh.w	r5, [r0, #226]!
    5bb0:	7941      	ldrb	r1, [r0, #5]
    5bb2:	f041 0101 	orr.w	r1, r1, #1
    5bb6:	7141      	strb	r1, [r0, #5]
    5bb8:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5bbc:	e069      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5bbe:	2013      	movs	r0, #19
    5bc0:	e039      	b.n	5c36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5bc2:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5bc6:	f88d 2000 	strb.w	r2, [sp]
    5bca:	9a00      	ldr	r2, [sp, #0]
    5bcc:	9200      	str	r2, [sp, #0]
    5bce:	f89d 2000 	ldrb.w	r2, [sp]
    5bd2:	bbba      	cbnz	r2, 5c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5bd4:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5bd8:	f88d 2000 	strb.w	r2, [sp]
    5bdc:	9a00      	ldr	r2, [sp, #0]
    5bde:	9200      	str	r2, [sp, #0]
    5be0:	f89d 2000 	ldrb.w	r2, [sp]
    5be4:	b37a      	cbz	r2, 5c46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5be6:	2925      	cmp	r1, #37	; 0x25
    5be8:	d031      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bea:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5bee:	2925      	cmp	r1, #37	; 0x25
    5bf0:	d02d      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bf2:	2926      	cmp	r1, #38	; 0x26
    5bf4:	d02b      	beq.n	5c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5bf6:	2300      	movs	r3, #0
    5bf8:	f200 2262 	addw	r2, r0, #610	; 0x262
    5bfc:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5c00:	f008 fd78 	bl	e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5c04:	6860      	ldr	r0, [r4, #4]
    5c06:	211f      	movs	r1, #31
    5c08:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5c0c:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5c10:	6860      	ldr	r0, [r4, #4]
    5c12:	f008 fd8a 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5c16:	2104      	movs	r1, #4
    5c18:	6860      	ldr	r0, [r4, #4]
    5c1a:	f009 fa64 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c1e:	f000 f867 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5c22:	6861      	ldr	r1, [r4, #4]
    5c24:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5c28:	8bc2      	ldrh	r2, [r0, #30]
    5c2a:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5c2e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5c30:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5c34:	2015      	movs	r0, #21
    5c36:	f000 fd1b 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5c3a:	6860      	ldr	r0, [r4, #4]
    5c3c:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5c40:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5c44:	e025      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c46:	e7ff      	b.n	5c48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5c48:	291f      	cmp	r1, #31
    5c4a:	d0e1      	beq.n	5c10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5c4c:	e021      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c4e:	2301      	movs	r3, #1
    5c50:	e7d2      	b.n	5bf8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5c52:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5c56:	2901      	cmp	r1, #1
    5c58:	d108      	bne.n	5c6c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5c5a:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5c5e:	f88d 1000 	strb.w	r1, [sp]
    5c62:	9900      	ldr	r1, [sp, #0]
    5c64:	9100      	str	r1, [sp, #0]
    5c66:	f89d 1000 	ldrb.w	r1, [sp]
    5c6a:	b129      	cbz	r1, 5c78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5c6c:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5c70:	2902      	cmp	r1, #2
    5c72:	d006      	beq.n	5c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5c74:	e00d      	b.n	5c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5c76:	e01f      	b.n	5cb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5c78:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5c7c:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5c80:	e002      	b.n	5c88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5c82:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5c86:	6840      	ldr	r0, [r0, #4]
    5c88:	f000 fd04 	bl	6694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5c8c:	2018      	movs	r0, #24
    5c8e:	f000 fcef 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5c92:	6860      	ldr	r0, [r4, #4]
    5c94:	3088      	adds	r0, #136	; 0x88
    5c96:	f009 fb80 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5c9a:	2800      	cmp	r0, #0
    5c9c:	f47f af72 	bne.w	5b84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ca0:	6860      	ldr	r0, [r4, #4]
    5ca2:	3088      	adds	r0, #136	; 0x88
    5ca4:	f009 fb79 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ca8:	b158      	cbz	r0, 5cc2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5caa:	e015      	b.n	5cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5cac:	2000      	movs	r0, #0
    5cae:	f000 fce7 	bl	6680 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5cb2:	e004      	b.n	5cbe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5cb4:	2009      	movs	r0, #9
    5cb6:	e000      	b.n	5cba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5cb8:	2024      	movs	r0, #36	; 0x24
    5cba:	f000 fcd9 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5cbe:	6860      	ldr	r0, [r4, #4]
    5cc0:	e7be      	b.n	5c40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5cc2:	6860      	ldr	r0, [r4, #4]
    5cc4:	2300      	movs	r3, #0
    5cc6:	4619      	mov	r1, r3
    5cc8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ccc:	3088      	adds	r0, #136	; 0x88
    5cce:	f008 f9c7 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5cd2:	b108      	cbz	r0, 5cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5cd4:	f000 fb14 	bl	6300 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5cd8:	6860      	ldr	r0, [r4, #4]
    5cda:	3088      	adds	r0, #136	; 0x88
    5cdc:	f009 fb5d 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ce0:	2800      	cmp	r0, #0
    5ce2:	d1db      	bne.n	5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5ce8:	f7ff be64 	b.w	59b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5cec:	200000f0 	.word	0x200000f0
    5cf0:	4808      	ldr	r0, [pc, #32]	; (5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5cf2:	6843      	ldr	r3, [r0, #4]
    5cf4:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5cf8:	2801      	cmp	r0, #1
    5cfa:	d006      	beq.n	5d0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5cfc:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5d00:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5d04:	8818      	ldrh	r0, [r3, #0]
    5d06:	f7fd b893 	b.w	2e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5d0a:	2002      	movs	r0, #2
    5d0c:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5d10:	4770      	bx	lr
    5d12:	0000      	.short	0x0000
    5d14:	200000f0 	.word	0x200000f0
    5d18:	b538      	push	{r3, r4, r5, lr}
    5d1a:	4d1a      	ldr	r5, [pc, #104]	; (5d84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5d1c:	686b      	ldr	r3, [r5, #4]
    5d1e:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5d22:	2917      	cmp	r1, #23
    5d24:	d001      	beq.n	5d2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5d26:	2914      	cmp	r1, #20
    5d28:	d102      	bne.n	5d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5d2a:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5d2e:	b109      	cbz	r1, 5d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5d30:	2002      	movs	r0, #2
    5d32:	bd38      	pop	{r3, r4, r5, pc}
    5d34:	2400      	movs	r4, #0
    5d36:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5d3a:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5d3e:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5d42:	f88d 1000 	strb.w	r1, [sp]
    5d46:	9900      	ldr	r1, [sp, #0]
    5d48:	9100      	str	r1, [sp, #0]
    5d4a:	f89d 1000 	ldrb.w	r1, [sp]
    5d4e:	b121      	cbz	r1, 5d5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5d50:	f240 31df 	movw	r1, #991	; 0x3df
    5d54:	2036      	movs	r0, #54	; 0x36
    5d56:	f7fa fe85 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d5a:	8819      	ldrh	r1, [r3, #0]
    5d5c:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5d60:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5d64:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5d68:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5d6c:	f203 2012 	addw	r0, r3, #530	; 0x212
    5d70:	220c      	movs	r2, #12
    5d72:	4905      	ldr	r1, [pc, #20]	; (5d88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5d74:	f008 fc94 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d78:	6868      	ldr	r0, [r5, #4]
    5d7a:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5d7e:	2000      	movs	r0, #0
    5d80:	bd38      	pop	{r3, r4, r5, pc}
    5d82:	0000      	.short	0x0000
    5d84:	200000f0 	.word	0x200000f0
    5d88:	0000eb23 	.word	0x0000eb23
    5d8c:	b570      	push	{r4, r5, r6, lr}
    5d8e:	4604      	mov	r4, r0
    5d90:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5d94:	2500      	movs	r5, #0
    5d96:	280b      	cmp	r0, #11
    5d98:	d001      	beq.n	5d9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5d9a:	280c      	cmp	r0, #12
    5d9c:	d108      	bne.n	5db0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5d9e:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5da2:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5da6:	1a89      	subs	r1, r1, r2
    5da8:	1c49      	adds	r1, r1, #1
    5daa:	0409      	lsls	r1, r1, #16
    5dac:	0c09      	lsrs	r1, r1, #16
    5dae:	d032      	beq.n	5e16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5db0:	280d      	cmp	r0, #13
    5db2:	d001      	beq.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5db4:	280e      	cmp	r0, #14
    5db6:	d12d      	bne.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5db8:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5dbc:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5dc0:	1a40      	subs	r0, r0, r1
    5dc2:	1c40      	adds	r0, r0, #1
    5dc4:	0400      	lsls	r0, r0, #16
    5dc6:	0c00      	lsrs	r0, r0, #16
    5dc8:	d124      	bne.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5dca:	8820      	ldrh	r0, [r4, #0]
    5dcc:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5dd0:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5dd4:	f008 f92b 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5dd8:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5ddc:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5de0:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5de4:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5de8:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5dec:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5df0:	2209      	movs	r2, #9
    5df2:	4919      	ldr	r1, [pc, #100]	; (5e58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5df4:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5df8:	f008 fc66 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5dfc:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5e00:	2102      	movs	r1, #2
    5e02:	4620      	mov	r0, r4
    5e04:	f7fc fc86 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5e08:	2103      	movs	r1, #3
    5e0a:	4620      	mov	r0, r4
    5e0c:	f009 f96b 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5e10:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5e14:	bd70      	pop	{r4, r5, r6, pc}
    5e16:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5e1a:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5e1e:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5e22:	7940      	ldrb	r0, [r0, #5]
    5e24:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5e28:	2103      	movs	r1, #3
    5e2a:	4620      	mov	r0, r4
    5e2c:	f7fc fc72 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5e30:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5e34:	7800      	ldrb	r0, [r0, #0]
    5e36:	b148      	cbz	r0, 5e4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5e38:	2101      	movs	r1, #1
    5e3a:	20fe      	movs	r0, #254	; 0xfe
    5e3c:	f001 f858 	bl	6ef0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5e40:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5e44:	20ff      	movs	r0, #255	; 0xff
    5e46:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5e4a:	bd70      	pop	{r4, r5, r6, pc}
    5e4c:	f240 2152 	movw	r1, #594	; 0x252
    5e50:	2036      	movs	r0, #54	; 0x36
    5e52:	f7fa fe07 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e56:	0000      	.short	0x0000
    5e58:	0000eae5 	.word	0x0000eae5
    5e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e5e:	4d28      	ldr	r5, [pc, #160]	; (5f00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5e60:	f04f 0600 	mov.w	r6, #0
    5e64:	f105 040c 	add.w	r4, r5, #12
    5e68:	8869      	ldrh	r1, [r5, #2]
    5e6a:	0748      	lsls	r0, r1, #29
    5e6c:	d510      	bpl.n	5e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5e6e:	6860      	ldr	r0, [r4, #4]
    5e70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5e74:	2a03      	cmp	r2, #3
    5e76:	d004      	beq.n	5e82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5e78:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5e7c:	2a06      	cmp	r2, #6
    5e7e:	d107      	bne.n	5e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5e80:	e002      	b.n	5e88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5e82:	f240 7109 	movw	r1, #1801	; 0x709
    5e86:	e025      	b.n	5ed4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5e88:	2201      	movs	r2, #1
    5e8a:	702a      	strb	r2, [r5, #0]
    5e8c:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5e90:	0788      	lsls	r0, r1, #30
    5e92:	d50a      	bpl.n	5eaa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5e94:	6868      	ldr	r0, [r5, #4]
    5e96:	78c0      	ldrb	r0, [r0, #3]
    5e98:	282b      	cmp	r0, #43	; 0x2b
    5e9a:	d219      	bcs.n	5ed0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5e9c:	4919      	ldr	r1, [pc, #100]	; (5f04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5e9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ea2:	b1a9      	cbz	r1, 5ed0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ea4:	4816      	ldr	r0, [pc, #88]	; (5f00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ea6:	300c      	adds	r0, #12
    5ea8:	4788      	blx	r1
    5eaa:	f000 f86d 	bl	5f88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5eae:	f000 f82b 	bl	5f08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5eb2:	4607      	mov	r7, r0
    5eb4:	7868      	ldrb	r0, [r5, #1]
    5eb6:	0700      	lsls	r0, r0, #28
    5eb8:	d51c      	bpl.n	5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	2300      	movs	r3, #0
    5ebe:	2105      	movs	r1, #5
    5ec0:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5ec4:	3088      	adds	r0, #136	; 0x88
    5ec6:	f008 f8cb 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5eca:	b130      	cbz	r0, 5eda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5ecc:	2708      	movs	r7, #8
    5ece:	e011      	b.n	5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5ed0:	f640 0149 	movw	r1, #2121	; 0x849
    5ed4:	2036      	movs	r0, #54	; 0x36
    5ed6:	f7fa fdc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eda:	4669      	mov	r1, sp
    5edc:	2003      	movs	r0, #3
    5ede:	9600      	str	r6, [sp, #0]
    5ee0:	f7fb fcd4 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5ee4:	9800      	ldr	r0, [sp, #0]
    5ee6:	b128      	cbz	r0, 5ef4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5ee8:	7206      	strb	r6, [r0, #8]
    5eea:	222a      	movs	r2, #42	; 0x2a
    5eec:	6861      	ldr	r1, [r4, #4]
    5eee:	9800      	ldr	r0, [sp, #0]
    5ef0:	f008 fbd6 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5ef4:	6860      	ldr	r0, [r4, #4]
    5ef6:	f7ff ff49 	bl	5d8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5efa:	4638      	mov	r0, r7
    5efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5efe:	0000      	.short	0x0000
    5f00:	200000e4 	.word	0x200000e4
    5f04:	200001a4 	.word	0x200001a4
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	4c1d      	ldr	r4, [pc, #116]	; (5f80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5f0c:	2000      	movs	r0, #0
    5f0e:	78a1      	ldrb	r1, [r4, #2]
    5f10:	07c9      	lsls	r1, r1, #31
    5f12:	d01d      	beq.n	5f50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5f14:	68a0      	ldr	r0, [r4, #8]
    5f16:	2300      	movs	r3, #0
    5f18:	2105      	movs	r1, #5
    5f1a:	78c5      	ldrb	r5, [r0, #3]
    5f1c:	f104 000c 	add.w	r0, r4, #12
    5f20:	6840      	ldr	r0, [r0, #4]
    5f22:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5f26:	3088      	adds	r0, #136	; 0x88
    5f28:	f008 f89a 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5f2c:	b188      	cbz	r0, 5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f2e:	2d06      	cmp	r5, #6
    5f30:	d00f      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f32:	dc06      	bgt.n	5f42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5f34:	2d02      	cmp	r5, #2
    5f36:	d00c      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f38:	2d04      	cmp	r5, #4
    5f3a:	d00a      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f3c:	2d05      	cmp	r5, #5
    5f3e:	d106      	bne.n	5f4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5f40:	e007      	b.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f42:	2d0b      	cmp	r5, #11
    5f44:	d005      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f46:	2d0d      	cmp	r5, #13
    5f48:	d003      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f4a:	2d11      	cmp	r5, #17
    5f4c:	d001      	beq.n	5f52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5f4e:	2008      	movs	r0, #8
    5f50:	bd70      	pop	{r4, r5, r6, pc}
    5f52:	68a0      	ldr	r0, [r4, #8]
    5f54:	f7fc fd16 	bl	2984 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5f58:	b160      	cbz	r0, 5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f5a:	68a0      	ldr	r0, [r4, #8]
    5f5c:	78c0      	ldrb	r0, [r0, #3]
    5f5e:	282b      	cmp	r0, #43	; 0x2b
    5f60:	d208      	bcs.n	5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f62:	4908      	ldr	r1, [pc, #32]	; (5f84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5f64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5f68:	b121      	cbz	r1, 5f74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f6e:	4804      	ldr	r0, [pc, #16]	; (5f80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5f70:	300c      	adds	r0, #12
    5f72:	4708      	bx	r1
    5f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f78:	2000      	movs	r0, #0
    5f7a:	f000 bbdf 	b.w	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5f7e:	0000      	.short	0x0000
    5f80:	200000e4 	.word	0x200000e4
    5f84:	200000f8 	.word	0x200000f8
    5f88:	b570      	push	{r4, r5, r6, lr}
    5f8a:	4d1a      	ldr	r5, [pc, #104]	; (5ff4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5f8c:	78a8      	ldrb	r0, [r5, #2]
    5f8e:	0700      	lsls	r0, r0, #28
    5f90:	d52e      	bpl.n	5ff0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5f92:	f105 040c 	add.w	r4, r5, #12
    5f96:	2100      	movs	r1, #0
    5f98:	6860      	ldr	r0, [r4, #4]
    5f9a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5f9e:	f000 ffa7 	bl	6ef0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5fa2:	6860      	ldr	r0, [r4, #4]
    5fa4:	3088      	adds	r0, #136	; 0x88
    5fa6:	f009 f9f8 	bl	f39a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5faa:	b160      	cbz	r0, 5fc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5fac:	6860      	ldr	r0, [r4, #4]
    5fae:	21fe      	movs	r1, #254	; 0xfe
    5fb0:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5fb4:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5fb8:	290b      	cmp	r1, #11
    5fba:	d009      	beq.n	5fd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5fbc:	290d      	cmp	r1, #13
    5fbe:	d009      	beq.n	5fd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5fc0:	2925      	cmp	r1, #37	; 0x25
    5fc2:	d10c      	bne.n	5fde <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5fc4:	e008      	b.n	5fd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5fc6:	f640 0155 	movw	r1, #2133	; 0x855
    5fca:	2036      	movs	r0, #54	; 0x36
    5fcc:	f7fa fd4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fd0:	210c      	movs	r1, #12
    5fd2:	e002      	b.n	5fda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5fd4:	210e      	movs	r1, #14
    5fd6:	e000      	b.n	5fda <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5fd8:	2126      	movs	r1, #38	; 0x26
    5fda:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5fde:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5fe2:	2907      	cmp	r1, #7
    5fe4:	d104      	bne.n	5ff0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5fe6:	2102      	movs	r1, #2
    5fe8:	7029      	strb	r1, [r5, #0]
    5fea:	2100      	movs	r1, #0
    5fec:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5ff0:	bd70      	pop	{r4, r5, r6, pc}
    5ff2:	0000      	.short	0x0000
    5ff4:	200000e4 	.word	0x200000e4
    5ff8:	b538      	push	{r3, r4, r5, lr}
    5ffa:	4605      	mov	r5, r0
    5ffc:	4668      	mov	r0, sp
    5ffe:	f7fb fad7 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    6002:	b348      	cbz	r0, 6058 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    6004:	2222      	movs	r2, #34	; 0x22
    6006:	2100      	movs	r1, #0
    6008:	9800      	ldr	r0, [sp, #0]
    600a:	f00b f816 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    600e:	2103      	movs	r1, #3
    6010:	9800      	ldr	r0, [sp, #0]
    6012:	f008 fb12 	bl	e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    6016:	9800      	ldr	r0, [sp, #0]
    6018:	7801      	ldrb	r1, [r0, #0]
    601a:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    601e:	7001      	strb	r1, [r0, #0]
    6020:	4629      	mov	r1, r5
    6022:	f7fc fcbf 	bl	29a4 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    6026:	2100      	movs	r1, #0
    6028:	4c73      	ldr	r4, [pc, #460]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    602a:	2d26      	cmp	r5, #38	; 0x26
    602c:	d277      	bcs.n	611e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    602e:	e8df f005 	tbb	[pc, r5]
    6032:	222a      	.short	0x222a
    6034:	dbdb5216 	.word	0xdbdb5216
    6038:	7b771cd4 	.word	0x7b771cd4
    603c:	db6bd4d4 	.word	0xdb6bd4d4
    6040:	bcdbdbdb 	.word	0xbcdbdbdb
    6044:	8080d4d4 	.word	0x8080d4d4
    6048:	dba3db99 	.word	0xdba3db99
    604c:	dbdbdbdb 	.word	0xdbdbdbdb
    6050:	dbdbdbdb 	.word	0xdbdbdbdb
    6054:	b6b6b6db 	.word	0xb6b6b6db
    6058:	f640 217b 	movw	r1, #2683	; 0xa7b
    605c:	e0c9      	b.n	61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    605e:	6860      	ldr	r0, [r4, #4]
    6060:	9900      	ldr	r1, [sp, #0]
    6062:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    6066:	7108      	strb	r0, [r1, #4]
    6068:	e0b7      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    606a:	6861      	ldr	r1, [r4, #4]
    606c:	9800      	ldr	r0, [sp, #0]
    606e:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    6072:	7101      	strb	r1, [r0, #4]
    6074:	e0b1      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    607c:	9800      	ldr	r0, [sp, #0]
    607e:	1c49      	adds	r1, r1, #1
    6080:	f008 fa6c 	bl	e55c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    6084:	e0a9      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6086:	6860      	ldr	r0, [r4, #4]
    6088:	9d00      	ldr	r5, [sp, #0]
    608a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    608e:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    6092:	f008 f953 	bl	e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6096:	7128      	strb	r0, [r5, #4]
    6098:	6860      	ldr	r0, [r4, #4]
    609a:	9d00      	ldr	r5, [sp, #0]
    609c:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    60a0:	c803      	ldmia	r0, {r0, r1}
    60a2:	f008 f934 	bl	e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    60a6:	7168      	strb	r0, [r5, #5]
    60a8:	0a00      	lsrs	r0, r0, #8
    60aa:	71a8      	strb	r0, [r5, #6]
    60ac:	6860      	ldr	r0, [r4, #4]
    60ae:	9d00      	ldr	r5, [sp, #0]
    60b0:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    60b4:	f007 ffbb 	bl	e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    60b8:	71e8      	strb	r0, [r5, #7]
    60ba:	0a00      	lsrs	r0, r0, #8
    60bc:	7228      	strb	r0, [r5, #8]
    60be:	6862      	ldr	r2, [r4, #4]
    60c0:	9800      	ldr	r0, [sp, #0]
    60c2:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    60c6:	7241      	strb	r1, [r0, #9]
    60c8:	0a09      	lsrs	r1, r1, #8
    60ca:	7281      	strb	r1, [r0, #10]
    60cc:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    60d0:	f008 fa49 	bl	e566 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    60d4:	e081      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    60d6:	6861      	ldr	r1, [r4, #4]
    60d8:	9800      	ldr	r0, [sp, #0]
    60da:	f201 2179 	addw	r1, r1, #633	; 0x279
    60de:	f008 fa57 	bl	e590 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    60e2:	6861      	ldr	r1, [r4, #4]
    60e4:	9800      	ldr	r0, [sp, #0]
    60e6:	f201 2181 	addw	r1, r1, #641	; 0x281
    60ea:	f008 fa4a 	bl	e582 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    60ee:	6861      	ldr	r1, [r4, #4]
    60f0:	9800      	ldr	r0, [sp, #0]
    60f2:	f201 2193 	addw	r1, r1, #659	; 0x293
    60f6:	f008 fa50 	bl	e59a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    60fa:	6861      	ldr	r1, [r4, #4]
    60fc:	9800      	ldr	r0, [sp, #0]
    60fe:	f501 7190 	add.w	r1, r1, #288	; 0x120
    6102:	f008 fa41 	bl	e588 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    6106:	e068      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6108:	9800      	ldr	r0, [sp, #0]
    610a:	220c      	movs	r2, #12
    610c:	7102      	strb	r2, [r0, #4]
    610e:	2259      	movs	r2, #89	; 0x59
    6110:	7142      	strb	r2, [r0, #5]
    6112:	7181      	strb	r1, [r0, #6]
    6114:	214b      	movs	r1, #75	; 0x4b
    6116:	71c1      	strb	r1, [r0, #7]
    6118:	2112      	movs	r1, #18
    611a:	7201      	strb	r1, [r0, #8]
    611c:	e05d      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    611e:	e063      	b.n	61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    6120:	9800      	ldr	r0, [sp, #0]
    6122:	f7fc ff73 	bl	300c <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    6126:	e058      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6128:	4833      	ldr	r0, [pc, #204]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    612a:	9900      	ldr	r1, [sp, #0]
    612c:	f7fc ffc2 	bl	30b4 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    6130:	e053      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6132:	6860      	ldr	r0, [r4, #4]
    6134:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    6138:	9800      	ldr	r0, [sp, #0]
    613a:	f008 fa8e 	bl	e65a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    613e:	6860      	ldr	r0, [r4, #4]
    6140:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    6144:	9800      	ldr	r0, [sp, #0]
    6146:	f008 fa8c 	bl	e662 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    614a:	6860      	ldr	r0, [r4, #4]
    614c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    6150:	9800      	ldr	r0, [sp, #0]
    6152:	f008 fa7a 	bl	e64a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    6156:	6860      	ldr	r0, [r4, #4]
    6158:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    615c:	9800      	ldr	r0, [sp, #0]
    615e:	f008 fa78 	bl	e652 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    6162:	e03a      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6164:	6861      	ldr	r1, [r4, #4]
    6166:	9800      	ldr	r0, [sp, #0]
    6168:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    616c:	7101      	strb	r1, [r0, #4]
    616e:	6861      	ldr	r1, [r4, #4]
    6170:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    6174:	7141      	strb	r1, [r0, #5]
    6176:	e030      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    6178:	6860      	ldr	r0, [r4, #4]
    617a:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    617e:	f008 f824 	bl	e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6182:	4601      	mov	r1, r0
    6184:	9800      	ldr	r0, [sp, #0]
    6186:	f008 fa44 	bl	e612 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    618a:	6860      	ldr	r0, [r4, #4]
    618c:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    6190:	f008 f81b 	bl	e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    6194:	4601      	mov	r1, r0
    6196:	9800      	ldr	r0, [sp, #0]
    6198:	f008 fa39 	bl	e60e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    619c:	e01d      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    619e:	4a16      	ldr	r2, [pc, #88]	; (61f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    61a0:	4628      	mov	r0, r5
    61a2:	9900      	ldr	r1, [sp, #0]
    61a4:	f009 fb2a 	bl	f7fc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    61a8:	e017      	b.n	61da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    61aa:	6860      	ldr	r0, [r4, #4]
    61ac:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    61b0:	b141      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    61b2:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    61b6:	9800      	ldr	r0, [sp, #0]
    61b8:	f008 fa39 	bl	e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    61bc:	6860      	ldr	r0, [r4, #4]
    61be:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    61c2:	e007      	b.n	61d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    61c4:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    61c8:	9800      	ldr	r0, [sp, #0]
    61ca:	f008 fa30 	bl	e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    61ce:	6860      	ldr	r0, [r4, #4]
    61d0:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    61d4:	9800      	ldr	r0, [sp, #0]
    61d6:	f008 fa2e 	bl	e636 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    61da:	f7fb f9c3 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    61de:	b130      	cbz	r0, 61ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    61e0:	9800      	ldr	r0, [sp, #0]
    61e2:	f7ff fbcd 	bl	5980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    61e6:	bd38      	pop	{r3, r4, r5, pc}
    61e8:	f640 314e 	movw	r1, #2894	; 0xb4e
    61ec:	e001      	b.n	61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    61ee:	f640 3154 	movw	r1, #2900	; 0xb54
    61f2:	2036      	movs	r0, #54	; 0x36
    61f4:	f7fa fc36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61f8:	200000f0 	.word	0x200000f0
    61fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6200:	4e28      	ldr	r6, [pc, #160]	; (62a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6202:	4680      	mov	r8, r0
    6204:	460d      	mov	r5, r1
    6206:	8870      	ldrh	r0, [r6, #2]
    6208:	f106 040c 	add.w	r4, r6, #12
    620c:	05c1      	lsls	r1, r0, #23
    620e:	6860      	ldr	r0, [r4, #4]
    6210:	f04f 0700 	mov.w	r7, #0
    6214:	d502      	bpl.n	621c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    6216:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    621a:	e004      	b.n	6226 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    621c:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6220:	1c49      	adds	r1, r1, #1
    6222:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    6226:	f009 faae 	bl	f786 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    622a:	b1f0      	cbz	r0, 626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    622c:	8870      	ldrh	r0, [r6, #2]
    622e:	0500      	lsls	r0, r0, #20
    6230:	d506      	bpl.n	6240 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6232:	6860      	ldr	r0, [r4, #4]
    6234:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    6238:	b111      	cbz	r1, 6240 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    623a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    623e:	e014      	b.n	626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6240:	6860      	ldr	r0, [r4, #4]
    6242:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    6246:	1c49      	adds	r1, r1, #1
    6248:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    624c:	f009 f8c6 	bl	f3dc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    6256:	4291      	cmp	r1, r2
    6258:	d307      	bcc.n	626a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    625a:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    625e:	220f      	movs	r2, #15
    6260:	4911      	ldr	r1, [pc, #68]	; (62a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    6262:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    6266:	f008 fa2f 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    626a:	8870      	ldrh	r0, [r6, #2]
    626c:	f410 7f40 	tst.w	r0, #768	; 0x300
    6270:	d008      	beq.n	6284 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    6272:	6860      	ldr	r0, [r4, #4]
    6274:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    6278:	b921      	cbnz	r1, 6284 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    627a:	2101      	movs	r1, #1
    627c:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    6280:	f008 ff31 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6284:	ea58 0005 	orrs.w	r0, r8, r5
    6288:	d104      	bne.n	6294 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    628a:	f7ff fde7 	bl	5e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    628e:	4605      	mov	r5, r0
    6290:	f7ff fc04 	bl	5a9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    6294:	4629      	mov	r1, r5
    6296:	4640      	mov	r0, r8
    6298:	f000 fd36 	bl	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    629c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    62a0:	f7fb b94a 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    62a4:	200000e4 	.word	0x200000e4
    62a8:	0000ebbf 	.word	0x0000ebbf
    62ac:	4813      	ldr	r0, [pc, #76]	; (62fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    62ae:	6840      	ldr	r0, [r0, #4]
    62b0:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    62b4:	b129      	cbz	r1, 62c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    62b6:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    62ba:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    62be:	4291      	cmp	r1, r2
    62c0:	d215      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62c2:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    62c6:	b129      	cbz	r1, 62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    62c8:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    62cc:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    62d0:	4291      	cmp	r1, r2
    62d2:	d20c      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62d4:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    62d8:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    62dc:	428a      	cmp	r2, r1
    62de:	d206      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62e0:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    62e4:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    62e8:	b11a      	cbz	r2, 62f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    62ea:	4288      	cmp	r0, r1
    62ec:	d303      	bcc.n	62f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    62ee:	2001      	movs	r0, #1
    62f0:	4770      	bx	lr
    62f2:	2806      	cmp	r0, #6
    62f4:	d2fb      	bcs.n	62ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    62f6:	2000      	movs	r0, #0
    62f8:	4770      	bx	lr
    62fa:	0000      	.short	0x0000
    62fc:	200000f0 	.word	0x200000f0
    6300:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6302:	4c63      	ldr	r4, [pc, #396]	; (6490 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6304:	6860      	ldr	r0, [r4, #4]
    6306:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    630a:	f88d 1000 	strb.w	r1, [sp]
    630e:	9900      	ldr	r1, [sp, #0]
    6310:	9100      	str	r1, [sp, #0]
    6312:	f89d 1000 	ldrb.w	r1, [sp]
    6316:	2500      	movs	r5, #0
    6318:	b129      	cbz	r1, 6326 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    631a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    631e:	f007 ff02 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6322:	2800      	cmp	r0, #0
    6324:	d07d      	beq.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6326:	6860      	ldr	r0, [r4, #4]
    6328:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    632c:	b181      	cbz	r1, 6350 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    632e:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6332:	b149      	cbz	r1, 6348 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6334:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    6338:	b108      	cbz	r0, 633e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    633a:	200a      	movs	r0, #10
    633c:	e071      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    633e:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6342:	2036      	movs	r0, #54	; 0x36
    6344:	f7fa fb8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6348:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    634c:	f000 b8a2 	b.w	6494 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6350:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6354:	b109      	cbz	r1, 635a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    6356:	2008      	movs	r0, #8
    6358:	e063      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    635a:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    635e:	b179      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    6360:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    6364:	0780      	lsls	r0, r0, #30
    6366:	d10a      	bne.n	637e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    6368:	200c      	movs	r0, #12
    636a:	f000 f981 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    636e:	6860      	ldr	r0, [r4, #4]
    6370:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    6374:	f041 0101 	orr.w	r1, r1, #1
    6378:	7001      	strb	r1, [r0, #0]
    637a:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    637e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6380:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6384:	f88d 1004 	strb.w	r1, [sp, #4]
    6388:	9901      	ldr	r1, [sp, #4]
    638a:	9101      	str	r1, [sp, #4]
    638c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6390:	b141      	cbz	r1, 63a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    6392:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6396:	f88d 1000 	strb.w	r1, [sp]
    639a:	9900      	ldr	r1, [sp, #0]
    639c:	9100      	str	r1, [sp, #0]
    639e:	f89d 1000 	ldrb.w	r1, [sp]
    63a2:	b121      	cbz	r1, 63ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    63a4:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    63a8:	2901      	cmp	r1, #1
    63aa:	d021      	beq.n	63f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    63ac:	e02e      	b.n	640c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    63ae:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    63b2:	2925      	cmp	r1, #37	; 0x25
    63b4:	d01a      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63b6:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ba:	2925      	cmp	r1, #37	; 0x25
    63bc:	d016      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63be:	2926      	cmp	r1, #38	; 0x26
    63c0:	d014      	beq.n	63ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    63c2:	2300      	movs	r3, #0
    63c4:	f200 2262 	addw	r2, r0, #610	; 0x262
    63c8:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    63cc:	f008 f992 	bl	e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    63d0:	6860      	ldr	r0, [r4, #4]
    63d2:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    63d6:	6861      	ldr	r1, [r4, #4]
    63d8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    63dc:	8bc2      	ldrh	r2, [r0, #30]
    63de:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    63e2:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    63e4:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    63e8:	2014      	movs	r0, #20
    63ea:	e01a      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    63ec:	2301      	movs	r3, #1
    63ee:	e7e9      	b.n	63c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    63f0:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    63f4:	f88d 1000 	strb.w	r1, [sp]
    63f8:	9900      	ldr	r1, [sp, #0]
    63fa:	9100      	str	r1, [sp, #0]
    63fc:	f89d 1000 	ldrb.w	r1, [sp]
    6400:	b921      	cbnz	r1, 640c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6402:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6406:	f007 fe8e 	bl	e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    640a:	b170      	cbz	r0, 642a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    640c:	6860      	ldr	r0, [r4, #4]
    640e:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6412:	f88d 1000 	strb.w	r1, [sp]
    6416:	9900      	ldr	r1, [sp, #0]
    6418:	9100      	str	r1, [sp, #0]
    641a:	f89d 1000 	ldrb.w	r1, [sp]
    641e:	b329      	cbz	r1, 646c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6420:	2023      	movs	r0, #35	; 0x23
    6422:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6426:	f000 b923 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    642a:	6860      	ldr	r0, [r4, #4]
    642c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6430:	f008 ffbb 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6434:	4605      	mov	r5, r0
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    643c:	f008 ffb5 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6440:	4606      	mov	r6, r0
    6442:	6860      	ldr	r0, [r4, #4]
    6444:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    6448:	4628      	mov	r0, r5
    644a:	f008 ffb9 	bl	f3c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    644e:	b158      	cbz	r0, 6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6450:	6860      	ldr	r0, [r4, #4]
    6452:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    6456:	4630      	mov	r0, r6
    6458:	f008 ffb2 	bl	f3c0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    645c:	b120      	cbz	r0, 6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    645e:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6462:	2000      	movs	r0, #0
    6464:	f000 b8de 	b.w	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6468:	2016      	movs	r0, #22
    646a:	e7da      	b.n	6422 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    646c:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    6470:	f88d 0000 	strb.w	r0, [sp]
    6474:	9800      	ldr	r0, [sp, #0]
    6476:	9000      	str	r0, [sp, #0]
    6478:	f89d 0000 	ldrb.w	r0, [sp]
    647c:	2800      	cmp	r0, #0
    647e:	f43f af7e 	beq.w	637e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    6482:	2025      	movs	r0, #37	; 0x25
    6484:	f000 f8f4 	bl	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6488:	6860      	ldr	r0, [r4, #4]
    648a:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    648e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6490:	200000f0 	.word	0x200000f0
    6494:	b510      	push	{r4, lr}
    6496:	4c1e      	ldr	r4, [pc, #120]	; (6510 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    6498:	6862      	ldr	r2, [r4, #4]
    649a:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    649e:	2808      	cmp	r0, #8
    64a0:	d20d      	bcs.n	64be <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    64a2:	f1c0 0108 	rsb	r1, r0, #8
    64a6:	f200 2093 	addw	r0, r0, #659	; 0x293
    64aa:	b2c9      	uxtb	r1, r1
    64ac:	4410      	add	r0, r2
    64ae:	f7fa fb6b 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    64b2:	6861      	ldr	r1, [r4, #4]
    64b4:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    64b8:	4410      	add	r0, r2
    64ba:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    64be:	6862      	ldr	r2, [r4, #4]
    64c0:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    64c4:	3808      	subs	r0, #8
    64c6:	2804      	cmp	r0, #4
    64c8:	d20d      	bcs.n	64e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    64ca:	f1c0 0104 	rsb	r1, r0, #4
    64ce:	f500 7090 	add.w	r0, r0, #288	; 0x120
    64d2:	b2c9      	uxtb	r1, r1
    64d4:	4410      	add	r0, r2
    64d6:	f7fa fb57 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    64da:	6861      	ldr	r1, [r4, #4]
    64dc:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    64e0:	4410      	add	r0, r2
    64e2:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    64e6:	6860      	ldr	r0, [r4, #4]
    64e8:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    64ec:	290c      	cmp	r1, #12
    64ee:	d30e      	bcc.n	650e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    64f0:	d005      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    64f2:	f640 31c5 	movw	r1, #3013	; 0xbc5
    64f6:	f04f 0036 	mov.w	r0, #54	; 0x36
    64fa:	f7fa fab3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64fe:	2100      	movs	r1, #0
    6500:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6508:	2003      	movs	r0, #3
    650a:	f000 b8b1 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    650e:	bd10      	pop	{r4, pc}
    6510:	200000f0 	.word	0x200000f0
    6514:	b570      	push	{r4, r5, r6, lr}
    6516:	4b20      	ldr	r3, [pc, #128]	; (6598 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    6518:	4602      	mov	r2, r0
    651a:	460c      	mov	r4, r1
    651c:	8858      	ldrh	r0, [r3, #2]
    651e:	4310      	orrs	r0, r2
    6520:	8058      	strh	r0, [r3, #2]
    6522:	f103 000c 	add.w	r0, r3, #12
    6526:	0791      	lsls	r1, r2, #30
    6528:	6840      	ldr	r0, [r0, #4]
    652a:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    652e:	d507      	bpl.n	6540 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6530:	b121      	cbz	r1, 653c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6532:	f640 41cc 	movw	r1, #3276	; 0xccc
    6536:	2036      	movs	r0, #54	; 0x36
    6538:	f7fa fa94 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    653c:	605c      	str	r4, [r3, #4]
    653e:	e003      	b.n	6548 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6540:	b101      	cbz	r1, 6544 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6542:	609c      	str	r4, [r3, #8]
    6544:	0791      	lsls	r1, r2, #30
    6546:	d515      	bpl.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6548:	78e1      	ldrb	r1, [r4, #3]
    654a:	2906      	cmp	r1, #6
    654c:	d002      	beq.n	6554 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    654e:	290b      	cmp	r1, #11
    6550:	d110      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6552:	e008      	b.n	6566 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6554:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6558:	2919      	cmp	r1, #25
    655a:	d10b      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    655c:	2100      	movs	r1, #0
    655e:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    6562:	2101      	movs	r1, #1
    6564:	e004      	b.n	6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    6566:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    656a:	2913      	cmp	r1, #19
    656c:	d102      	bne.n	6574 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    656e:	2100      	movs	r1, #0
    6570:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    6574:	0691      	lsls	r1, r2, #26
    6576:	d501      	bpl.n	657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    6578:	2108      	movs	r1, #8
    657a:	7059      	strb	r1, [r3, #1]
    657c:	0611      	lsls	r1, r2, #24
    657e:	d50a      	bpl.n	6596 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    6580:	8b02      	ldrh	r2, [r0, #24]
    6582:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    6586:	4620      	mov	r0, r4
    6588:	f7ff f9dc 	bl	5944 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    658c:	4620      	mov	r0, r4
    658e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6592:	f7ff b9f5 	b.w	5980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    6596:	bd70      	pop	{r4, r5, r6, pc}
    6598:	200000e4 	.word	0x200000e4
    659c:	b570      	push	{r4, r5, r6, lr}
    659e:	4c20      	ldr	r4, [pc, #128]	; (6620 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    65a0:	2501      	movs	r5, #1
    65a2:	6862      	ldr	r2, [r4, #4]
    65a4:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    65a8:	b909      	cbnz	r1, 65ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    65aa:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    65ae:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    65b2:	b908      	cbnz	r0, 65b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    65b4:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    65b8:	f102 0362 	add.w	r3, r2, #98	; 0x62
    65bc:	7219      	strb	r1, [r3, #8]
    65be:	7258      	strb	r0, [r3, #9]
    65c0:	20ff      	movs	r0, #255	; 0xff
    65c2:	7298      	strb	r0, [r3, #10]
    65c4:	4610      	mov	r0, r2
    65c6:	f009 f9dd 	bl	f984 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    65ca:	2000      	movs	r0, #0
    65cc:	f000 f82a 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    65d0:	6860      	ldr	r0, [r4, #4]
    65d2:	302c      	adds	r0, #44	; 0x2c
    65d4:	f008 f8fd 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    65d8:	4606      	mov	r6, r0
    65da:	6860      	ldr	r0, [r4, #4]
    65dc:	f008 f8a5 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    65e0:	b130      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    65e2:	6861      	ldr	r1, [r4, #4]
    65e4:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    65e8:	f831 0b2c 	ldrh.w	r0, [r1], #44
    65ec:	f7fc fc20 	bl	2e30 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    65f0:	2104      	movs	r1, #4
    65f2:	6860      	ldr	r0, [r4, #4]
    65f4:	f008 fd77 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    65f8:	6860      	ldr	r0, [r4, #4]
    65fa:	302c      	adds	r0, #44	; 0x2c
    65fc:	f008 f8e9 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6600:	4604      	mov	r4, r0
    6602:	42a6      	cmp	r6, r4
    6604:	d20a      	bcs.n	661c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    6606:	f003 ff6f 	bl	a4e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    660a:	4601      	mov	r1, r0
    660c:	1ba0      	subs	r0, r4, r6
    660e:	2865      	cmp	r0, #101	; 0x65
    6610:	d200      	bcs.n	6614 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6612:	2065      	movs	r0, #101	; 0x65
    6614:	f003 fe3e 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6618:	b100      	cbz	r0, 661c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    661a:	2500      	movs	r5, #0
    661c:	4628      	mov	r0, r5
    661e:	bd70      	pop	{r4, r5, r6, pc}
    6620:	200000f0 	.word	0x200000f0
    6624:	b510      	push	{r4, lr}
    6626:	4c10      	ldr	r4, [pc, #64]	; (6668 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    6628:	6861      	ldr	r1, [r4, #4]
    662a:	880a      	ldrh	r2, [r1, #0]
    662c:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6630:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6634:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    6638:	f008 feb7 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    663c:	6861      	ldr	r1, [r4, #4]
    663e:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6642:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    6646:	f008 feb0 	bl	f3aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    664a:	6863      	ldr	r3, [r4, #4]
    664c:	2215      	movs	r2, #21
    664e:	4907      	ldr	r1, [pc, #28]	; (666c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6650:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6654:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    6658:	f008 f836 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    665c:	6861      	ldr	r1, [r4, #4]
    665e:	2000      	movs	r0, #0
    6660:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    6664:	bd10      	pop	{r4, pc}
    6666:	0000      	.short	0x0000
    6668:	200000f0 	.word	0x200000f0
    666c:	000107fd 	.word	0x000107fd
    6670:	4902      	ldr	r1, [pc, #8]	; (667c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    6672:	6849      	ldr	r1, [r1, #4]
    6674:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    6678:	f000 bb10 	b.w	6c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    667c:	200000f0 	.word	0x200000f0
    6680:	4903      	ldr	r1, [pc, #12]	; (6690 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    6682:	6849      	ldr	r1, [r1, #4]
    6684:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    6688:	2011      	movs	r0, #17
    668a:	f7ff bff1 	b.w	6670 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    668e:	0000      	.short	0x0000
    6690:	200000f0 	.word	0x200000f0
    6694:	b538      	push	{r3, r4, r5, lr}
    6696:	4c11      	ldr	r4, [pc, #68]	; (66dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    6698:	6862      	ldr	r2, [r4, #4]
    669a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    669e:	f8ad 2000 	strh.w	r2, [sp]
    66a2:	f007 fdb9 	bl	e218 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    66a6:	f89d 3000 	ldrb.w	r3, [sp]
    66aa:	b2c2      	uxtb	r2, r0
    66ac:	2100      	movs	r1, #0
    66ae:	4293      	cmp	r3, r2
    66b0:	d003      	beq.n	66ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    66b2:	6863      	ldr	r3, [r4, #4]
    66b4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    66b8:	e002      	b.n	66c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    66ba:	6862      	ldr	r2, [r4, #4]
    66bc:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    66c0:	f89d 2001 	ldrb.w	r2, [sp, #1]
    66c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
    66c8:	4282      	cmp	r2, r0
    66ca:	d003      	beq.n	66d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    66cc:	6861      	ldr	r1, [r4, #4]
    66ce:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    66d2:	bd38      	pop	{r3, r4, r5, pc}
    66d4:	6860      	ldr	r0, [r4, #4]
    66d6:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    66da:	bd38      	pop	{r3, r4, r5, pc}
    66dc:	200000f0 	.word	0x200000f0
    66e0:	4a03      	ldr	r2, [pc, #12]	; (66f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    66e2:	6852      	ldr	r2, [r2, #4]
    66e4:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    66e8:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    66ec:	4770      	bx	lr
    66ee:	0000      	.short	0x0000
    66f0:	200000f0 	.word	0x200000f0
    66f4:	b570      	push	{r4, r5, r6, lr}
    66f6:	6841      	ldr	r1, [r0, #4]
    66f8:	4604      	mov	r4, r0
    66fa:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    66fe:	2814      	cmp	r0, #20
    6700:	d001      	beq.n	6706 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6702:	2002      	movs	r0, #2
    6704:	bd70      	pop	{r4, r5, r6, pc}
    6706:	4d09      	ldr	r5, [pc, #36]	; (672c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    6708:	f201 219b 	addw	r1, r1, #667	; 0x29b
    670c:	68a8      	ldr	r0, [r5, #8]
    670e:	f007 ff4d 	bl	e5ac <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6712:	6861      	ldr	r1, [r4, #4]
    6714:	68a8      	ldr	r0, [r5, #8]
    6716:	f501 7192 	add.w	r1, r1, #292	; 0x124
    671a:	f007 ff44 	bl	e5a6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    671e:	6861      	ldr	r1, [r4, #4]
    6720:	2017      	movs	r0, #23
    6722:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6726:	2000      	movs	r0, #0
    6728:	bd70      	pop	{r4, r5, r6, pc}
    672a:	0000      	.short	0x0000
    672c:	200000e4 	.word	0x200000e4
    6730:	4901      	ldr	r1, [pc, #4]	; (6738 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6732:	6889      	ldr	r1, [r1, #8]
    6734:	f7fc bc78 	b.w	3028 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6738:	200000e4 	.word	0x200000e4
    673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6740:	4e1b      	ldr	r6, [pc, #108]	; (67b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6742:	2500      	movs	r5, #0
    6744:	f106 010c 	add.w	r1, r6, #12
    6748:	2703      	movs	r7, #3
    674a:	f8d1 c004 	ldr.w	ip, [r1, #4]
    674e:	2401      	movs	r4, #1
    6750:	b1a0      	cbz	r0, 677c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6752:	68b0      	ldr	r0, [r6, #8]
    6754:	78c0      	ldrb	r0, [r0, #3]
    6756:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    675a:	fa04 f000 	lsl.w	r0, r4, r0
    675e:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    6762:	b130      	cbz	r0, 6772 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    6764:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    6768:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    676c:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    6770:	e019      	b.n	67a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    6772:	f240 6195 	movw	r1, #1685	; 0x695
    6776:	2036      	movs	r0, #54	; 0x36
    6778:	f7fa f974 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    677c:	4688      	mov	r8, r1
    677e:	2300      	movs	r3, #0
    6780:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    6784:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    6788:	4619      	mov	r1, r3
    678a:	f007 fc69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    678e:	b168      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    6790:	68b0      	ldr	r0, [r6, #8]
    6792:	78c1      	ldrb	r1, [r0, #3]
    6794:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6798:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    679c:	f800 7fa6 	strb.w	r7, [r0, #166]!
    67a0:	8785      	strh	r5, [r0, #60]	; 0x3c
    67a2:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    67a6:	2000      	movs	r0, #0
    67a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67ac:	2001      	movs	r0, #1
    67ae:	e7fb      	b.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    67b0:	200000e4 	.word	0x200000e4
    67b4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67b8:	4604      	mov	r4, r0
    67ba:	6840      	ldr	r0, [r0, #4]
    67bc:	2300      	movs	r3, #0
    67be:	4619      	mov	r1, r3
    67c0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    67c4:	3088      	adds	r0, #136	; 0x88
    67c6:	f007 fc4b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    67ca:	b310      	cbz	r0, 6812 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    67cc:	4d2e      	ldr	r5, [pc, #184]	; (6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    67ce:	68a8      	ldr	r0, [r5, #8]
    67d0:	f007 fefd 	bl	e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    67d4:	b300      	cbz	r0, 6818 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    67d6:	68a8      	ldr	r0, [r5, #8]
    67d8:	f007 fef3 	bl	e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67dc:	4607      	mov	r7, r0
    67de:	68a8      	ldr	r0, [r5, #8]
    67e0:	f007 fef3 	bl	e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67e4:	4680      	mov	r8, r0
    67e6:	68a8      	ldr	r0, [r5, #8]
    67e8:	f007 fee9 	bl	e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67ec:	4606      	mov	r6, r0
    67ee:	68a8      	ldr	r0, [r5, #8]
    67f0:	f007 fee9 	bl	e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67f4:	4601      	mov	r1, r0
    67f6:	9700      	str	r7, [sp, #0]
    67f8:	6860      	ldr	r0, [r4, #4]
    67fa:	4643      	mov	r3, r8
    67fc:	4632      	mov	r2, r6
    67fe:	302c      	adds	r0, #44	; 0x2c
    6800:	f008 f821 	bl	e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6804:	6860      	ldr	r0, [r4, #4]
    6806:	2501      	movs	r5, #1
    6808:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    680c:	291d      	cmp	r1, #29
    680e:	d008      	beq.n	6822 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6810:	e009      	b.n	6826 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6812:	2001      	movs	r0, #1
    6814:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6818:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    681c:	2000      	movs	r0, #0
    681e:	f7ff bf8d 	b.w	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6822:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    6826:	6860      	ldr	r0, [r4, #4]
    6828:	2600      	movs	r6, #0
    682a:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    682e:	2901      	cmp	r1, #1
    6830:	d011      	beq.n	6856 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6832:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    6836:	f88d 1004 	strb.w	r1, [sp, #4]
    683a:	9901      	ldr	r1, [sp, #4]
    683c:	9101      	str	r1, [sp, #4]
    683e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6842:	b941      	cbnz	r1, 6856 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6844:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    6848:	f88d 1000 	strb.w	r1, [sp]
    684c:	9900      	ldr	r1, [sp, #0]
    684e:	9100      	str	r1, [sp, #0]
    6850:	f89d 1000 	ldrb.w	r1, [sp]
    6854:	b151      	cbz	r1, 686c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    6856:	211f      	movs	r1, #31
    6858:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    685c:	6860      	ldr	r0, [r4, #4]
    685e:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6862:	6860      	ldr	r0, [r4, #4]
    6864:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6868:	2000      	movs	r0, #0
    686a:	e7d3      	b.n	6814 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    686c:	211e      	movs	r1, #30
    686e:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    6872:	4805      	ldr	r0, [pc, #20]	; (6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6874:	300c      	adds	r0, #12
    6876:	6843      	ldr	r3, [r0, #4]
    6878:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    687c:	8818      	ldrh	r0, [r3, #0]
    687e:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    6882:	f7fc faff 	bl	2e84 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    6886:	e7e9      	b.n	685c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    6888:	200000e4 	.word	0x200000e4
    688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6890:	4604      	mov	r4, r0
    6892:	6840      	ldr	r0, [r0, #4]
    6894:	2300      	movs	r3, #0
    6896:	210a      	movs	r1, #10
    6898:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    689c:	3088      	adds	r0, #136	; 0x88
    689e:	f007 fbdf 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68a2:	b370      	cbz	r0, 6902 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    68a4:	4d18      	ldr	r5, [pc, #96]	; (6908 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    68a6:	68a8      	ldr	r0, [r5, #8]
    68a8:	f007 fe91 	bl	e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    68ac:	b1e8      	cbz	r0, 68ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    68ae:	68a8      	ldr	r0, [r5, #8]
    68b0:	f007 fe87 	bl	e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    68b4:	4607      	mov	r7, r0
    68b6:	68a8      	ldr	r0, [r5, #8]
    68b8:	f007 fe87 	bl	e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    68bc:	4680      	mov	r8, r0
    68be:	68a8      	ldr	r0, [r5, #8]
    68c0:	f007 fe7d 	bl	e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    68c4:	4606      	mov	r6, r0
    68c6:	68a8      	ldr	r0, [r5, #8]
    68c8:	f007 fe7d 	bl	e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    68cc:	4601      	mov	r1, r0
    68ce:	9700      	str	r7, [sp, #0]
    68d0:	6860      	ldr	r0, [r4, #4]
    68d2:	4643      	mov	r3, r8
    68d4:	4632      	mov	r2, r6
    68d6:	302c      	adds	r0, #44	; 0x2c
    68d8:	f007 ffb5 	bl	e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    68dc:	6860      	ldr	r0, [r4, #4]
    68de:	f007 ff24 	bl	e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    68e2:	2104      	movs	r1, #4
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f008 fbfe 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    68ea:	6861      	ldr	r1, [r4, #4]
    68ec:	2000      	movs	r0, #0
    68ee:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    68f2:	6861      	ldr	r1, [r4, #4]
    68f4:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    68f8:	f7ff f9fa 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    68fc:	2000      	movs	r0, #0
    68fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6902:	e7ff      	b.n	6904 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6904:	2001      	movs	r0, #1
    6906:	e7fa      	b.n	68fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    6908:	200000e4 	.word	0x200000e4
    690c:	4901      	ldr	r1, [pc, #4]	; (6914 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    690e:	6889      	ldr	r1, [r1, #8]
    6910:	f7fc bb58 	b.w	2fc4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6914:	200000e4 	.word	0x200000e4
    6918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691c:	4604      	mov	r4, r0
    691e:	6840      	ldr	r0, [r0, #4]
    6920:	f04f 0800 	mov.w	r8, #0
    6924:	b086      	sub	sp, #24
    6926:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    692a:	4643      	mov	r3, r8
    692c:	4641      	mov	r1, r8
    692e:	3088      	adds	r0, #136	; 0x88
    6930:	f007 fb96 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6934:	b190      	cbz	r0, 695c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    6936:	6860      	ldr	r0, [r4, #4]
    6938:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    693c:	2824      	cmp	r0, #36	; 0x24
    693e:	d011      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6940:	2825      	cmp	r0, #37	; 0x25
    6942:	d00f      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6944:	2826      	cmp	r0, #38	; 0x26
    6946:	d00d      	beq.n	6964 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6948:	4668      	mov	r0, sp
    694a:	f7fa fe1f 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    694e:	b158      	cbz	r0, 6968 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6950:	9800      	ldr	r0, [sp, #0]
    6952:	a903      	add	r1, sp, #12
    6954:	78c0      	ldrb	r0, [r0, #3]
    6956:	f88d 000c 	strb.w	r0, [sp, #12]
    695a:	e006      	b.n	696a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    695c:	2001      	movs	r0, #1
    695e:	b006      	add	sp, #24
    6960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6964:	2020      	movs	r0, #32
    6966:	e7fa      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    6968:	2100      	movs	r1, #0
    696a:	6860      	ldr	r0, [r4, #4]
    696c:	ab02      	add	r3, sp, #8
    696e:	2216      	movs	r2, #22
    6970:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6974:	f007 fc2f 	bl	e1d6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    6978:	2501      	movs	r5, #1
    697a:	2600      	movs	r6, #0
    697c:	b180      	cbz	r0, 69a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    697e:	2116      	movs	r1, #22
    6980:	f89d 0008 	ldrb.w	r0, [sp, #8]
    6984:	f7ff feac 	bl	66e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    6988:	6861      	ldr	r1, [r4, #4]
    698a:	202f      	movs	r0, #47	; 0x2f
    698c:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6990:	6860      	ldr	r0, [r4, #4]
    6992:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6996:	6860      	ldr	r0, [r4, #4]
    6998:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    699c:	2000      	movs	r0, #0
    699e:	e7de      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    69a0:	4f29      	ldr	r7, [pc, #164]	; (6a48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    69a2:	68b8      	ldr	r0, [r7, #8]
    69a4:	f007 fe25 	bl	e5f2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    69a8:	b1b8      	cbz	r0, 69da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    69aa:	68b8      	ldr	r0, [r7, #8]
    69ac:	6862      	ldr	r2, [r4, #4]
    69ae:	7901      	ldrb	r1, [r0, #4]
    69b0:	f001 0107 	and.w	r1, r1, #7
    69b4:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    69b8:	7940      	ldrb	r0, [r0, #5]
    69ba:	f000 0107 	and.w	r1, r0, #7
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    69c4:	6860      	ldr	r0, [r4, #4]
    69c6:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    69ca:	f88d 200c 	strb.w	r2, [sp, #12]
    69ce:	9a03      	ldr	r2, [sp, #12]
    69d0:	9203      	str	r2, [sp, #12]
    69d2:	f89d 200c 	ldrb.w	r2, [sp, #12]
    69d6:	bb5a      	cbnz	r2, 6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    69d8:	e004      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    69da:	2000      	movs	r0, #0
    69dc:	f7ff feae 	bl	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    69e0:	4680      	mov	r8, r0
    69e2:	e02f      	b.n	6a44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    69e4:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    69e8:	2a01      	cmp	r2, #1
    69ea:	d021      	beq.n	6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    69ec:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    69f0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    69f4:	7857      	ldrb	r7, [r2, #1]
    69f6:	429f      	cmp	r7, r3
    69f8:	d106      	bne.n	6a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    69fa:	7812      	ldrb	r2, [r2, #0]
    69fc:	428a      	cmp	r2, r1
    69fe:	d103      	bne.n	6a08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6a00:	2102      	movs	r1, #2
    6a02:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    6a06:	e013      	b.n	6a30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6a08:	480f      	ldr	r0, [pc, #60]	; (6a48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    6a0a:	300c      	adds	r0, #12
    6a0c:	6841      	ldr	r1, [r0, #4]
    6a0e:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6a12:	880a      	ldrh	r2, [r1, #0]
    6a14:	f820 2b02 	strh.w	r2, [r0], #2
    6a18:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6a1c:	f800 2b01 	strb.w	r2, [r0], #1
    6a20:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6a24:	f800 190d 	strb.w	r1, [r0], #-13
    6a28:	2222      	movs	r2, #34	; 0x22
    6a2a:	4908      	ldr	r1, [pc, #32]	; (6a4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6a2c:	f007 fe38 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2022      	movs	r0, #34	; 0x22
    6a34:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    6a38:	6860      	ldr	r0, [r4, #4]
    6a3a:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6a3e:	6860      	ldr	r0, [r4, #4]
    6a40:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6a44:	4640      	mov	r0, r8
    6a46:	e78a      	b.n	695e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    6a48:	200000e4 	.word	0x200000e4
    6a4c:	00010827 	.word	0x00010827
    6a50:	b570      	push	{r4, r5, r6, lr}
    6a52:	4604      	mov	r4, r0
    6a54:	6840      	ldr	r0, [r0, #4]
    6a56:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6a5a:	2820      	cmp	r0, #32
    6a5c:	d001      	beq.n	6a62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    6a5e:	2001      	movs	r0, #1
    6a60:	bd70      	pop	{r4, r5, r6, pc}
    6a62:	4e16      	ldr	r6, [pc, #88]	; (6abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    6a64:	68b0      	ldr	r0, [r6, #8]
    6a66:	f007 fdd6 	bl	e616 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    6a6a:	b1f0      	cbz	r0, 6aaa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    6a6c:	68b0      	ldr	r0, [r6, #8]
    6a6e:	6862      	ldr	r2, [r4, #4]
    6a70:	7901      	ldrb	r1, [r0, #4]
    6a72:	7940      	ldrb	r0, [r0, #5]
    6a74:	f001 0107 	and.w	r1, r1, #7
    6a78:	f361 0507 	bfi	r5, r1, #0, #8
    6a7c:	4629      	mov	r1, r5
    6a7e:	f000 0007 	and.w	r0, r0, #7
    6a82:	f360 210f 	bfi	r1, r0, #8, #8
    6a86:	2001      	movs	r0, #1
    6a88:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    6a8c:	6862      	ldr	r2, [r4, #4]
    6a8e:	2000      	movs	r0, #0
    6a90:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    6a94:	6862      	ldr	r2, [r4, #4]
    6a96:	2024      	movs	r0, #36	; 0x24
    6a98:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    6a9c:	6860      	ldr	r0, [r4, #4]
    6a9e:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    6aa2:	f7ff fdf7 	bl	6694 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    6aa6:	2000      	movs	r0, #0
    6aa8:	bd70      	pop	{r4, r5, r6, pc}
    6aaa:	2001      	movs	r0, #1
    6aac:	f7ff fe46 	bl	673c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6ab0:	4604      	mov	r4, r0
    6ab2:	201e      	movs	r0, #30
    6ab4:	f7ff fdb6 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6ab8:	4620      	mov	r0, r4
    6aba:	bd70      	pop	{r4, r5, r6, pc}
    6abc:	200000e4 	.word	0x200000e4
    6ac0:	b570      	push	{r4, r5, r6, lr}
    6ac2:	4604      	mov	r4, r0
    6ac4:	6840      	ldr	r0, [r0, #4]
    6ac6:	4d0a      	ldr	r5, [pc, #40]	; (6af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    6ac8:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6acc:	f041 0104 	orr.w	r1, r1, #4
    6ad0:	7001      	strb	r1, [r0, #0]
    6ad2:	68a8      	ldr	r0, [r5, #8]
    6ad4:	f007 fda9 	bl	e62a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6ad8:	4606      	mov	r6, r0
    6ada:	68a8      	ldr	r0, [r5, #8]
    6adc:	f007 fda9 	bl	e632 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6ae0:	4601      	mov	r1, r0
    6ae2:	4622      	mov	r2, r4
    6ae4:	4630      	mov	r0, r6
    6ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6aea:	f000 b8b3 	b.w	6c54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6aee:	0000      	.short	0x0000
    6af0:	200000e4 	.word	0x200000e4
    6af4:	4a11      	ldr	r2, [pc, #68]	; (6b3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6af6:	4911      	ldr	r1, [pc, #68]	; (6b3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    6af8:	320c      	adds	r2, #12
    6afa:	6852      	ldr	r2, [r2, #4]
    6afc:	6889      	ldr	r1, [r1, #8]
    6afe:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6b02:	7909      	ldrb	r1, [r1, #4]
    6b04:	f1a3 0210 	sub.w	r2, r3, #16
    6b08:	2a0c      	cmp	r2, #12
    6b0a:	d801      	bhi.n	6b10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6b0c:	2303      	movs	r3, #3
    6b0e:	e008      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b10:	2b28      	cmp	r3, #40	; 0x28
    6b12:	d00a      	beq.n	6b2a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6b14:	2b1d      	cmp	r3, #29
    6b16:	d00a      	beq.n	6b2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    6b18:	2b05      	cmp	r3, #5
    6b1a:	d00a      	beq.n	6b32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6b1c:	2b20      	cmp	r3, #32
    6b1e:	d00a      	beq.n	6b36 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6b20:	23fe      	movs	r3, #254	; 0xfe
    6b22:	4602      	mov	r2, r0
    6b24:	4618      	mov	r0, r3
    6b26:	f000 b895 	b.w	6c54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6b2a:	2323      	movs	r3, #35	; 0x23
    6b2c:	e7f9      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b2e:	2314      	movs	r3, #20
    6b30:	e7f7      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b32:	2312      	movs	r3, #18
    6b34:	e7f5      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b36:	2316      	movs	r3, #22
    6b38:	e7f3      	b.n	6b22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6b3a:	0000      	.short	0x0000
    6b3c:	200000e4 	.word	0x200000e4
    6b40:	b570      	push	{r4, r5, r6, lr}
    6b42:	4604      	mov	r4, r0
    6b44:	6840      	ldr	r0, [r0, #4]
    6b46:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6b4a:	291b      	cmp	r1, #27
    6b4c:	d001      	beq.n	6b52 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6b4e:	2002      	movs	r0, #2
    6b50:	bd70      	pop	{r4, r5, r6, pc}
    6b52:	2500      	movs	r5, #0
    6b54:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    6b58:	6860      	ldr	r0, [r4, #4]
    6b5a:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    6b5e:	6860      	ldr	r0, [r4, #4]
    6b60:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    6b64:	6860      	ldr	r0, [r4, #4]
    6b66:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    6b6a:	b161      	cbz	r1, 6b86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    6b6c:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    6b70:	6860      	ldr	r0, [r4, #4]
    6b72:	220d      	movs	r2, #13
    6b74:	8801      	ldrh	r1, [r0, #0]
    6b76:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b7a:	6860      	ldr	r0, [r4, #4]
    6b7c:	490d      	ldr	r1, [pc, #52]	; (6bb4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    6b7e:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b82:	6860      	ldr	r0, [r4, #4]
    6b84:	e00c      	b.n	6ba0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    6b86:	8801      	ldrh	r1, [r0, #0]
    6b88:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    6b8c:	6860      	ldr	r0, [r4, #4]
    6b8e:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    6b92:	6861      	ldr	r1, [r4, #4]
    6b94:	2001      	movs	r0, #1
    6b96:	220c      	movs	r2, #12
    6b98:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    6b9c:	4906      	ldr	r1, [pc, #24]	; (6bb8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    6b9e:	6860      	ldr	r0, [r4, #4]
    6ba0:	f200 2012 	addw	r0, r0, #530	; 0x212
    6ba4:	f007 fd7c 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6ba8:	6860      	ldr	r0, [r4, #4]
    6baa:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    6bae:	2000      	movs	r0, #0
    6bb0:	bd70      	pop	{r4, r5, r6, pc}
    6bb2:	0000      	.short	0x0000
    6bb4:	0000eb41 	.word	0x0000eb41
    6bb8:	0000eb23 	.word	0x0000eb23
    6bbc:	b510      	push	{r4, lr}
    6bbe:	4604      	mov	r4, r0
    6bc0:	6840      	ldr	r0, [r0, #4]
    6bc2:	2300      	movs	r3, #0
    6bc4:	2101      	movs	r1, #1
    6bc6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6bca:	3088      	adds	r0, #136	; 0x88
    6bcc:	f007 fa48 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6bd0:	b108      	cbz	r0, 6bd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6bd2:	2000      	movs	r0, #0
    6bd4:	bd10      	pop	{r4, pc}
    6bd6:	4809      	ldr	r0, [pc, #36]	; (6bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6bd8:	6880      	ldr	r0, [r0, #8]
    6bda:	f007 fd46 	bl	e66a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6bde:	6861      	ldr	r1, [r4, #4]
    6be0:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6be4:	6861      	ldr	r1, [r4, #4]
    6be6:	2006      	movs	r0, #6
    6be8:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6bec:	6861      	ldr	r1, [r4, #4]
    6bee:	2000      	movs	r0, #0
    6bf0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6bf4:	6861      	ldr	r1, [r4, #4]
    6bf6:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6bfa:	e7ea      	b.n	6bd2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6bfc:	200000e4 	.word	0x200000e4
    6c00:	4602      	mov	r2, r0
    6c02:	480f      	ldr	r0, [pc, #60]	; (6c40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6c04:	b510      	push	{r4, lr}
    6c06:	6880      	ldr	r0, [r0, #8]
    6c08:	6851      	ldr	r1, [r2, #4]
    6c0a:	2400      	movs	r4, #0
    6c0c:	7900      	ldrb	r0, [r0, #4]
    6c0e:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6c12:	2812      	cmp	r0, #18
    6c14:	d006      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c16:	2814      	cmp	r0, #20
    6c18:	d004      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c1a:	2816      	cmp	r0, #22
    6c1c:	d002      	beq.n	6c24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6c1e:	2823      	cmp	r0, #35	; 0x23
    6c20:	d10c      	bne.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c22:	e004      	b.n	6c2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6c24:	2101      	movs	r1, #1
    6c26:	f000 f91d 	bl	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6c2a:	4604      	mov	r4, r0
    6c2c:	e006      	b.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c2e:	2928      	cmp	r1, #40	; 0x28
    6c30:	d104      	bne.n	6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c32:	4804      	ldr	r0, [pc, #16]	; (6c44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6c34:	6801      	ldr	r1, [r0, #0]
    6c36:	b109      	cbz	r1, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6c38:	4610      	mov	r0, r2
    6c3a:	4788      	blx	r1
    6c3c:	4620      	mov	r0, r4
    6c3e:	bd10      	pop	{r4, pc}
    6c40:	200000e4 	.word	0x200000e4
    6c44:	20000254 	.word	0x20000254
    6c48:	4901      	ldr	r1, [pc, #4]	; (6c50 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6c4a:	6889      	ldr	r1, [r1, #8]
    6c4c:	f7fc ba46 	b.w	30dc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c50:	200000e4 	.word	0x200000e4
    6c54:	4603      	mov	r3, r0
    6c56:	2000      	movs	r0, #0
    6c58:	2b23      	cmp	r3, #35	; 0x23
    6c5a:	d017      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c5c:	dc0b      	bgt.n	6c76 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6c5e:	2b03      	cmp	r3, #3
    6c60:	d011      	beq.n	6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6c62:	2b12      	cmp	r3, #18
    6c64:	d003      	beq.n	6c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6c66:	2b14      	cmp	r3, #20
    6c68:	d001      	beq.n	6c6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6c6a:	2b16      	cmp	r3, #22
    6c6c:	d10a      	bne.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c6e:	2100      	movs	r1, #0
    6c70:	4618      	mov	r0, r3
    6c72:	f000 b8f7 	b.w	6e64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6c76:	2b24      	cmp	r3, #36	; 0x24
    6c78:	d008      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c7a:	2b25      	cmp	r3, #37	; 0x25
    6c7c:	d006      	beq.n	6c8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6c7e:	2bfe      	cmp	r3, #254	; 0xfe
    6c80:	d100      	bne.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c82:	2002      	movs	r0, #2
    6c84:	4770      	bx	lr
    6c86:	4608      	mov	r0, r1
    6c88:	f7ff b846 	b.w	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6c8c:	4a02      	ldr	r2, [pc, #8]	; (6c98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6c8e:	6812      	ldr	r2, [r2, #0]
    6c90:	2a00      	cmp	r2, #0
    6c92:	d0f7      	beq.n	6c84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6c94:	4618      	mov	r0, r3
    6c96:	4710      	bx	r2
    6c98:	20000250 	.word	0x20000250
    6c9c:	280c      	cmp	r0, #12
    6c9e:	d01a      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca0:	2813      	cmp	r0, #19
    6ca2:	d018      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca4:	2818      	cmp	r0, #24
    6ca6:	d016      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ca8:	4910      	ldr	r1, [pc, #64]	; (6cec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6caa:	2200      	movs	r2, #0
    6cac:	2811      	cmp	r0, #17
    6cae:	6849      	ldr	r1, [r1, #4]
    6cb0:	d012      	beq.n	6cd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6cb2:	2807      	cmp	r0, #7
    6cb4:	d00f      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cb6:	2809      	cmp	r0, #9
    6cb8:	d00d      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cba:	2815      	cmp	r0, #21
    6cbc:	d012      	beq.n	6ce4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6cbe:	2824      	cmp	r0, #36	; 0x24
    6cc0:	d009      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cc2:	2801      	cmp	r0, #1
    6cc4:	d007      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cc6:	2800      	cmp	r0, #0
    6cc8:	d005      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cca:	2802      	cmp	r0, #2
    6ccc:	d003      	beq.n	6cd6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6cce:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6cd2:	2001      	movs	r0, #1
    6cd4:	7108      	strb	r0, [r1, #4]
    6cd6:	4770      	bx	lr
    6cd8:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6cdc:	b110      	cbz	r0, 6ce4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6cde:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6ce2:	4770      	bx	lr
    6ce4:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6ce8:	4770      	bx	lr
    6cea:	0000      	.short	0x0000
    6cec:	200000f0 	.word	0x200000f0
    6cf0:	4904      	ldr	r1, [pc, #16]	; (6d04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6cf2:	2000      	movs	r0, #0
    6cf4:	6849      	ldr	r1, [r1, #4]
    6cf6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6cfa:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6cfe:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6d02:	4770      	bx	lr
    6d04:	200000f0 	.word	0x200000f0
    6d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d0c:	4d53      	ldr	r5, [pc, #332]	; (6e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6d0e:	4680      	mov	r8, r0
    6d10:	460f      	mov	r7, r1
    6d12:	6868      	ldr	r0, [r5, #4]
    6d14:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6d18:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6d1c:	f88d 0000 	strb.w	r0, [sp]
    6d20:	9800      	ldr	r0, [sp, #0]
    6d22:	9000      	str	r0, [sp, #0]
    6d24:	f89d 0000 	ldrb.w	r0, [sp]
    6d28:	2600      	movs	r6, #0
    6d2a:	b930      	cbnz	r0, 6d3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6d2c:	7fe2      	ldrb	r2, [r4, #31]
    6d2e:	2300      	movs	r3, #0
    6d30:	2101      	movs	r1, #1
    6d32:	4620      	mov	r0, r4
    6d34:	f007 f994 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6d38:	b120      	cbz	r0, 6d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6d3a:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6d3e:	1c40      	adds	r0, r0, #1
    6d40:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6d44:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6d48:	b121      	cbz	r1, 6d54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6d4a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6d4e:	1c40      	adds	r0, r0, #1
    6d50:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6d54:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6d58:	b120      	cbz	r0, 6d64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6d5a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6d5e:	1c52      	adds	r2, r2, #1
    6d60:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6d64:	f1b8 0f00 	cmp.w	r8, #0
    6d68:	d114      	bne.n	6d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6d6a:	4a3c      	ldr	r2, [pc, #240]	; (6e5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6d6c:	3a0c      	subs	r2, #12
    6d6e:	7812      	ldrb	r2, [r2, #0]
    6d70:	2a02      	cmp	r2, #2
    6d72:	d006      	beq.n	6d82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6d74:	2a01      	cmp	r2, #1
    6d76:	d006      	beq.n	6d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6d78:	b1df      	cbz	r7, 6db2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6d7a:	06f8      	lsls	r0, r7, #27
    6d7c:	d508      	bpl.n	6d90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6d7e:	201e      	movs	r0, #30
    6d80:	e043      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d82:	2016      	movs	r0, #22
    6d84:	e041      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d86:	6868      	ldr	r0, [r5, #4]
    6d88:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6d8c:	bba0      	cbnz	r0, 6df8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6d8e:	e05e      	b.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6d90:	0738      	lsls	r0, r7, #28
    6d92:	d501      	bpl.n	6d98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6d94:	203d      	movs	r0, #61	; 0x3d
    6d96:	e038      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6d98:	07b8      	lsls	r0, r7, #30
    6d9a:	d001      	beq.n	6da0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6d9c:	202a      	movs	r0, #42	; 0x2a
    6d9e:	e034      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6da0:	06b8      	lsls	r0, r7, #26
    6da2:	d404      	bmi.n	6dae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6da4:	f640 515f 	movw	r1, #3423	; 0xd5f
    6da8:	2036      	movs	r0, #54	; 0x36
    6daa:	f7f9 fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dae:	2023      	movs	r0, #35	; 0x23
    6db0:	e02b      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6db2:	b129      	cbz	r1, 6dc0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6db4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6db8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6dbc:	4291      	cmp	r1, r2
    6dbe:	d81a      	bhi.n	6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dc0:	b128      	cbz	r0, 6dce <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6dc2:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6dc6:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6dca:	4288      	cmp	r0, r1
    6dcc:	d813      	bhi.n	6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dce:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6dd2:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6dd6:	4281      	cmp	r1, r0
    6dd8:	d309      	bcc.n	6dee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6dda:	686a      	ldr	r2, [r5, #4]
    6ddc:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6de0:	f88d 2000 	strb.w	r2, [sp]
    6de4:	9a00      	ldr	r2, [sp, #0]
    6de6:	9200      	str	r2, [sp, #0]
    6de8:	f89d 2000 	ldrb.w	r2, [sp]
    6dec:	b91a      	cbnz	r2, 6df6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6dee:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6df2:	4291      	cmp	r1, r2
    6df4:	d301      	bcc.n	6dfa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6df6:	2022      	movs	r0, #34	; 0x22
    6df8:	e007      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6dfa:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6dfe:	b301      	cbz	r1, 6e42 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6e00:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6e04:	4281      	cmp	r1, r0
    6e06:	d322      	bcc.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6e08:	2008      	movs	r0, #8
    6e0a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6e0e:	220b      	movs	r2, #11
    6e10:	4913      	ldr	r1, [pc, #76]	; (6e60 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6e12:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6e16:	f007 fc43 	bl	e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6e1a:	7766      	strb	r6, [r4, #29]
    6e1c:	77a6      	strb	r6, [r4, #30]
    6e1e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6e22:	2102      	movs	r1, #2
    6e24:	6868      	ldr	r0, [r5, #4]
    6e26:	f008 f95e 	bl	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6e2a:	6868      	ldr	r0, [r5, #4]
    6e2c:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6e30:	2901      	cmp	r1, #1
    6e32:	d104      	bne.n	6e3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6e34:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6e38:	7801      	ldrb	r1, [r0, #0]
    6e3a:	1e49      	subs	r1, r1, #1
    6e3c:	7001      	strb	r1, [r0, #0]
    6e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e42:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6e46:	2806      	cmp	r0, #6
    6e48:	d301      	bcc.n	6e4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6e4a:	203e      	movs	r0, #62	; 0x3e
    6e4c:	e7dd      	b.n	6e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6e4e:	6868      	ldr	r0, [r5, #4]
    6e50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e54:	2100      	movs	r1, #0
    6e56:	f008 b946 	b.w	f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6e5a:	0000      	.short	0x0000
    6e5c:	200000f0 	.word	0x200000f0
    6e60:	0000eaa1 	.word	0x0000eaa1
    6e64:	b570      	push	{r4, r5, r6, lr}
    6e66:	460e      	mov	r6, r1
    6e68:	4601      	mov	r1, r0
    6e6a:	6850      	ldr	r0, [r2, #4]
    6e6c:	4614      	mov	r4, r2
    6e6e:	2500      	movs	r5, #0
    6e70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6e74:	481d      	ldr	r0, [pc, #116]	; (6eec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6e76:	6840      	ldr	r0, [r0, #4]
    6e78:	3088      	adds	r0, #136	; 0x88
    6e7a:	2912      	cmp	r1, #18
    6e7c:	d008      	beq.n	6e90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6e7e:	2914      	cmp	r1, #20
    6e80:	d010      	beq.n	6ea4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6e82:	2916      	cmp	r1, #22
    6e84:	d01e      	beq.n	6ec4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6e86:	f240 613e 	movw	r1, #1598	; 0x63e
    6e8a:	2036      	movs	r0, #54	; 0x36
    6e8c:	f7f9 fdea 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e90:	2109      	movs	r1, #9
    6e92:	2300      	movs	r3, #0
    6e94:	f007 f8e4 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e98:	b330      	cbz	r0, 6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6e9a:	4620      	mov	r0, r4
    6e9c:	f008 fac8 	bl	f430 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ea0:	4605      	mov	r5, r0
    6ea2:	e021      	b.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ea4:	210a      	movs	r1, #10
    6ea6:	2300      	movs	r3, #0
    6ea8:	f007 f8da 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6eac:	b1e0      	cbz	r0, 6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6eae:	f7ff ff1f 	bl	6cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6eb2:	b126      	cbz	r6, 6ebe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6eb4:	6860      	ldr	r0, [r4, #4]
    6eb6:	2105      	movs	r1, #5
    6eb8:	30f6      	adds	r0, #246	; 0xf6
    6eba:	f008 fa52 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ebe:	f7fe ff17 	bl	5cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6ec2:	e011      	b.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ec4:	2a20      	cmp	r2, #32
    6ec6:	d10f      	bne.n	6ee8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ec8:	f7ff ff12 	bl	6cf0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6ecc:	b14e      	cbz	r6, 6ee2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6ece:	6860      	ldr	r0, [r4, #4]
    6ed0:	2108      	movs	r1, #8
    6ed2:	30f6      	adds	r0, #246	; 0xf6
    6ed4:	f008 fa45 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ed8:	6860      	ldr	r0, [r4, #4]
    6eda:	210b      	movs	r1, #11
    6edc:	30f6      	adds	r0, #246	; 0xf6
    6ede:	f008 fa40 	bl	f362 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6ee2:	201a      	movs	r0, #26
    6ee4:	f7ff fb9e 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6ee8:	4628      	mov	r0, r5
    6eea:	bd70      	pop	{r4, r5, r6, pc}
    6eec:	200000f0 	.word	0x200000f0
    6ef0:	4a19      	ldr	r2, [pc, #100]	; (6f58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6ef2:	2901      	cmp	r1, #1
    6ef4:	6852      	ldr	r2, [r2, #4]
    6ef6:	d010      	beq.n	6f1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6ef8:	2100      	movs	r1, #0
    6efa:	b1c8      	cbz	r0, 6f30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6efc:	2801      	cmp	r0, #1
    6efe:	d022      	beq.n	6f46 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6f00:	2803      	cmp	r0, #3
    6f02:	d109      	bne.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f04:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6f08:	2814      	cmp	r0, #20
    6f0a:	d005      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f0c:	2817      	cmp	r0, #23
    6f0e:	d003      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f10:	2819      	cmp	r0, #25
    6f12:	d001      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f14:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6f18:	4770      	bx	lr
    6f1a:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6f1e:	2801      	cmp	r0, #1
    6f20:	d0fa      	beq.n	6f18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6f22:	bf00      	nop
    6f24:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6f28:	7801      	ldrb	r1, [r0, #0]
    6f2a:	1e49      	subs	r1, r1, #1
    6f2c:	7001      	strb	r1, [r0, #0]
    6f2e:	4770      	bx	lr
    6f30:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6f34:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6f38:	1ac0      	subs	r0, r0, r3
    6f3a:	b200      	sxth	r0, r0
    6f3c:	2800      	cmp	r0, #0
    6f3e:	dbf6      	blt.n	6f2e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6f40:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6f44:	4770      	bx	lr
    6f46:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6f4a:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6f4e:	1a40      	subs	r0, r0, r1
    6f50:	b200      	sxth	r0, r0
    6f52:	2800      	cmp	r0, #0
    6f54:	dae6      	bge.n	6f24 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6f56:	4770      	bx	lr
    6f58:	200000f0 	.word	0x200000f0

00006f5c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6f5c:	b510      	push	{r4, lr}
    6f5e:	6981      	ldr	r1, [r0, #24]
    6f60:	b119      	cbz	r1, 6f6a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6f62:	6882      	ldr	r2, [r0, #8]
    6f64:	688b      	ldr	r3, [r1, #8]
    6f66:	429a      	cmp	r2, r3
    6f68:	d203      	bcs.n	6f72 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6f6a:	21c0      	movs	r1, #192	; 0xc0
    6f6c:	2037      	movs	r0, #55	; 0x37
    6f6e:	f7f9 fd79 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f72:	6942      	ldr	r2, [r0, #20]
    6f74:	614a      	str	r2, [r1, #20]
    6f76:	6903      	ldr	r3, [r0, #16]
    6f78:	610b      	str	r3, [r1, #16]
    6f7a:	b10a      	cbz	r2, 6f80 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6f7c:	6111      	str	r1, [r2, #16]
    6f7e:	e001      	b.n	6f84 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6f80:	4a06      	ldr	r2, [pc, #24]	; (6f9c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6f82:	6011      	str	r1, [r2, #0]
    6f84:	690a      	ldr	r2, [r1, #16]
    6f86:	b132      	cbz	r2, 6f96 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6f88:	6151      	str	r1, [r2, #20]
    6f8a:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6f8e:	4410      	add	r0, r2
    6f90:	688a      	ldr	r2, [r1, #8]
    6f92:	1a80      	subs	r0, r0, r2
    6f94:	e000      	b.n	6f98 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6f96:	2000      	movs	r0, #0
    6f98:	60c8      	str	r0, [r1, #12]
    6f9a:	bd10      	pop	{r4, pc}
    6f9c:	20000258 	.word	0x20000258

00006fa0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6fa0:	b510      	push	{r4, lr}
    6fa2:	2200      	movs	r2, #0
    6fa4:	6141      	str	r1, [r0, #20]
    6fa6:	b189      	cbz	r1, 6fcc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6fa8:	690b      	ldr	r3, [r1, #16]
    6faa:	6108      	str	r0, [r1, #16]
    6fac:	6103      	str	r3, [r0, #16]
    6fae:	b103      	cbz	r3, 6fb2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6fb0:	6158      	str	r0, [r3, #20]
    6fb2:	6941      	ldr	r1, [r0, #20]
    6fb4:	60c2      	str	r2, [r0, #12]
    6fb6:	2900      	cmp	r1, #0
    6fb8:	d00f      	beq.n	6fda <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6fba:	68cb      	ldr	r3, [r1, #12]
    6fbc:	b163      	cbz	r3, 6fd8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6fbe:	6884      	ldr	r4, [r0, #8]
    6fc0:	42a3      	cmp	r3, r4
    6fc2:	d207      	bcs.n	6fd4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6fc4:	212b      	movs	r1, #43	; 0x2b
    6fc6:	2037      	movs	r0, #55	; 0x37
    6fc8:	f7f9 fd4c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fcc:	4903      	ldr	r1, [pc, #12]	; (6fdc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6fce:	6102      	str	r2, [r0, #16]
    6fd0:	6008      	str	r0, [r1, #0]
    6fd2:	e7ee      	b.n	6fb2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6fd4:	1b1b      	subs	r3, r3, r4
    6fd6:	60c3      	str	r3, [r0, #12]
    6fd8:	60ca      	str	r2, [r1, #12]
    6fda:	bd10      	pop	{r4, pc}
    6fdc:	20000258 	.word	0x20000258

00006fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6fe0:	6941      	ldr	r1, [r0, #20]
    6fe2:	b149      	cbz	r1, 6ff8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6fe4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6fe8:	441a      	add	r2, r3
    6fea:	68cb      	ldr	r3, [r1, #12]
    6fec:	441a      	add	r2, r3
    6fee:	60ca      	str	r2, [r1, #12]
    6ff0:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6ff4:	6111      	str	r1, [r2, #16]
    6ff6:	e002      	b.n	6ffe <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6ff8:	4a06      	ldr	r2, [pc, #24]	; (7014 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6ffa:	6901      	ldr	r1, [r0, #16]
    6ffc:	6011      	str	r1, [r2, #0]
    6ffe:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    7002:	b109      	cbz	r1, 7008 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    7004:	6148      	str	r0, [r1, #20]
    7006:	4770      	bx	lr
    7008:	2800      	cmp	r0, #0
    700a:	d0fc      	beq.n	7006 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    700c:	2100      	movs	r1, #0
    700e:	60c1      	str	r1, [r0, #12]
    7010:	4770      	bx	lr
    7012:	0000      	.short	0x0000
    7014:	20000258 	.word	0x20000258

00007018 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    7018:	b510      	push	{r4, lr}
    701a:	4604      	mov	r4, r0
    701c:	490a      	ldr	r1, [pc, #40]	; (7048 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    701e:	2000      	movs	r0, #0
    7020:	4602      	mov	r2, r0
    7022:	6809      	ldr	r1, [r1, #0]
    7024:	1e43      	subs	r3, r0, #1
    7026:	e008      	b.n	703a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    7028:	68ca      	ldr	r2, [r1, #12]
    702a:	42a2      	cmp	r2, r4
    702c:	d303      	bcc.n	7036 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    702e:	429a      	cmp	r2, r3
    7030:	d201      	bcs.n	7036 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    7032:	4613      	mov	r3, r2
    7034:	4608      	mov	r0, r1
    7036:	460a      	mov	r2, r1
    7038:	6909      	ldr	r1, [r1, #16]
    703a:	2900      	cmp	r1, #0
    703c:	d1f4      	bne.n	7028 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    703e:	2800      	cmp	r0, #0
    7040:	d100      	bne.n	7044 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    7042:	4610      	mov	r0, r2
    7044:	bd10      	pop	{r4, pc}
    7046:	0000      	.short	0x0000
    7048:	20000258 	.word	0x20000258

0000704c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    704c:	4801      	ldr	r0, [pc, #4]	; (7054 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    704e:	6800      	ldr	r0, [r0, #0]
    7050:	4770      	bx	lr
    7052:	0000      	.short	0x0000
    7054:	20000258 	.word	0x20000258

00007058 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    7058:	4804      	ldr	r0, [pc, #16]	; (706c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    705a:	6801      	ldr	r1, [r0, #0]
    705c:	2000      	movs	r0, #0
    705e:	e001      	b.n	7064 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    7060:	4608      	mov	r0, r1
    7062:	6909      	ldr	r1, [r1, #16]
    7064:	2900      	cmp	r1, #0
    7066:	d1fb      	bne.n	7060 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    7068:	4770      	bx	lr
    706a:	0000      	.short	0x0000
    706c:	20000258 	.word	0x20000258

00007070 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    7070:	4801      	ldr	r0, [pc, #4]	; (7078 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    7072:	2100      	movs	r1, #0
    7074:	6001      	str	r1, [r0, #0]
    7076:	4770      	bx	lr
    7078:	20000258 	.word	0x20000258

0000707c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    707c:	4903      	ldr	r1, [pc, #12]	; (708c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    707e:	2000      	movs	r0, #0
    7080:	6809      	ldr	r1, [r1, #0]
    7082:	2900      	cmp	r1, #0
    7084:	d000      	beq.n	7088 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    7086:	200c      	movs	r0, #12
    7088:	4770      	bx	lr
    708a:	0000      	.short	0x0000
    708c:	20000258 	.word	0x20000258

00007090 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7090:	b570      	push	{r4, r5, r6, lr}
    7092:	6844      	ldr	r4, [r0, #4]
    7094:	220d      	movs	r2, #13
    7096:	f504 759c 	add.w	r5, r4, #312	; 0x138
    709a:	2100      	movs	r1, #0
    709c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    70a0:	f009 ffcb 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70a4:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    70a8:	2100      	movs	r1, #0
    70aa:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    70ae:	5501      	strb	r1, [r0, r4]
    70b0:	f8a5 1017 	strh.w	r1, [r5, #23]
    70b4:	7669      	strb	r1, [r5, #25]
    70b6:	4608      	mov	r0, r1
    70b8:	f05f 017f 	movs.w	r1, #127	; 0x7f
    70bc:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    70c0:	1c40      	adds	r0, r0, #1
    70c2:	b2c0      	uxtb	r0, r0
    70c4:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    70c8:	2802      	cmp	r0, #2
    70ca:	d3f7      	bcc.n	70bc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    70cc:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    70d0:	4620      	mov	r0, r4
    70d2:	f008 fc31 	bl	f938 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    70d6:	2000      	movs	r0, #0
    70d8:	21ff      	movs	r1, #255	; 0xff
    70da:	1822      	adds	r2, r4, r0
    70dc:	1c40      	adds	r0, r0, #1
    70de:	b2c0      	uxtb	r0, r0
    70e0:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    70e4:	2802      	cmp	r0, #2
    70e6:	d3f8      	bcc.n	70da <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    70e8:	bd70      	pop	{r4, r5, r6, pc}
	...

000070ec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    70ec:	b500      	push	{lr}
    70ee:	7941      	ldrb	r1, [r0, #5]
    70f0:	b095      	sub	sp, #84	; 0x54
    70f2:	b141      	cbz	r1, 7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70f4:	2901      	cmp	r1, #1
    70f6:	d006      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70f8:	2902      	cmp	r1, #2
    70fa:	d004      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    70fc:	2903      	cmp	r1, #3
    70fe:	d002      	beq.n	7106 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    7100:	2012      	movs	r0, #18
    7102:	b015      	add	sp, #84	; 0x54
    7104:	bd00      	pop	{pc}
    7106:	7901      	ldrb	r1, [r0, #4]
    7108:	f88d 1000 	strb.w	r1, [sp]
    710c:	7b01      	ldrb	r1, [r0, #12]
    710e:	f88d 1001 	strb.w	r1, [sp, #1]
    7112:	7942      	ldrb	r2, [r0, #5]
    7114:	2100      	movs	r1, #0
    7116:	2301      	movs	r3, #1
    7118:	b3f2      	cbz	r2, 7198 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    711a:	2a02      	cmp	r2, #2
    711c:	d03d      	beq.n	719a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    711e:	f88d 3002 	strb.w	r3, [sp, #2]
    7122:	bf00      	nop
    7124:	f8d0 2006 	ldr.w	r2, [r0, #6]
    7128:	f8cd 2003 	str.w	r2, [sp, #3]
    712c:	8942      	ldrh	r2, [r0, #10]
    712e:	f8ad 2007 	strh.w	r2, [sp, #7]
    7132:	f88d 3009 	strb.w	r3, [sp, #9]
    7136:	f830 2b01 	ldrh.w	r2, [r0], #1
    713a:	f240 2371 	movw	r3, #625	; 0x271
    713e:	435a      	muls	r2, r3
    7140:	9203      	str	r2, [sp, #12]
    7142:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    7146:	435a      	muls	r2, r3
    7148:	9206      	str	r2, [sp, #24]
    714a:	8982      	ldrh	r2, [r0, #12]
    714c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    7150:	89c2      	ldrh	r2, [r0, #14]
    7152:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    7156:	8a02      	ldrh	r2, [r0, #16]
    7158:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    715c:	8a42      	ldrh	r2, [r0, #18]
    715e:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    7162:	8a82      	ldrh	r2, [r0, #20]
    7164:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    7168:	8ac0      	ldrh	r0, [r0, #22]
    716a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    716e:	2007      	movs	r0, #7
    7170:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    7174:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    7178:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    717c:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    7180:	9806      	ldr	r0, [sp, #24]
    7182:	f000 fa0d 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    7186:	b158      	cbz	r0, 71a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7188:	9803      	ldr	r0, [sp, #12]
    718a:	f000 f9fd 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    718e:	b138      	cbz	r0, 71a0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    7190:	4668      	mov	r0, sp
    7192:	f008 feb0 	bl	fef6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    7196:	e7b4      	b.n	7102 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    7198:	e7ff      	b.n	719a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    719a:	f88d 1002 	strb.w	r1, [sp, #2]
    719e:	e7c1      	b.n	7124 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    71a0:	2030      	movs	r0, #48	; 0x30
    71a2:	e7ae      	b.n	7102 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

000071a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    71a4:	4903      	ldr	r1, [pc, #12]	; (71b4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    71a6:	884a      	ldrh	r2, [r1, #2]
    71a8:	8002      	strh	r2, [r0, #0]
    71aa:	7809      	ldrb	r1, [r1, #0]
    71ac:	7081      	strb	r1, [r0, #2]
    71ae:	2000      	movs	r0, #0
    71b0:	4770      	bx	lr
    71b2:	0000      	.short	0x0000
    71b4:	20000eec 	.word	0x20000eec

000071b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    71b8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    71ba:	460c      	mov	r4, r1
    71bc:	4605      	mov	r5, r0
    71be:	8800      	ldrh	r0, [r0, #0]
    71c0:	4669      	mov	r1, sp
    71c2:	f006 ff24 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71c6:	2200      	movs	r2, #0
    71c8:	b128      	cbz	r0, 71d6 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    71ca:	f8c4 2002 	str.w	r2, [r4, #2]
    71ce:	71a2      	strb	r2, [r4, #6]
    71d0:	8022      	strh	r2, [r4, #0]
    71d2:	2002      	movs	r0, #2
    71d4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    71d6:	9901      	ldr	r1, [sp, #4]
    71d8:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    71dc:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    71e0:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    71e4:	f8c4 0002 	str.w	r0, [r4, #2]
    71e8:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    71ec:	71a0      	strb	r0, [r4, #6]
    71ee:	8828      	ldrh	r0, [r5, #0]
    71f0:	8020      	strh	r0, [r4, #0]
    71f2:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    71f6:	f88d 0008 	strb.w	r0, [sp, #8]
    71fa:	9802      	ldr	r0, [sp, #8]
    71fc:	9002      	str	r0, [sp, #8]
    71fe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7202:	2800      	cmp	r0, #0
    7204:	d1ea      	bne.n	71dc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    7206:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00007208 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    7208:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    720a:	460d      	mov	r5, r1
    720c:	4606      	mov	r6, r0
    720e:	8800      	ldrh	r0, [r0, #0]
    7210:	4669      	mov	r1, sp
    7212:	f006 fefc 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7216:	2800      	cmp	r0, #0
    7218:	d11a      	bne.n	7250 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    721a:	f8dd 4004 	ldr.w	r4, [sp, #4]
    721e:	2700      	movs	r7, #0
    7220:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7224:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7228:	f009 f85d 	bl	102e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    722c:	70a8      	strb	r0, [r5, #2]
    722e:	7860      	ldrb	r0, [r4, #1]
    7230:	f009 f859 	bl	102e6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7234:	70e8      	strb	r0, [r5, #3]
    7236:	78a0      	ldrb	r0, [r4, #2]
    7238:	f88d 0008 	strb.w	r0, [sp, #8]
    723c:	9802      	ldr	r0, [sp, #8]
    723e:	9002      	str	r0, [sp, #8]
    7240:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7244:	3c6a      	subs	r4, #106	; 0x6a
    7246:	2800      	cmp	r0, #0
    7248:	d1ea      	bne.n	7220 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    724a:	8830      	ldrh	r0, [r6, #0]
    724c:	8028      	strh	r0, [r5, #0]
    724e:	2000      	movs	r0, #0
    7250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007254 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7254:	4903      	ldr	r1, [pc, #12]	; (7264 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7256:	888a      	ldrh	r2, [r1, #4]
    7258:	8002      	strh	r2, [r0, #0]
    725a:	88c9      	ldrh	r1, [r1, #6]
    725c:	8041      	strh	r1, [r0, #2]
    725e:	2000      	movs	r0, #0
    7260:	4770      	bx	lr
    7262:	0000      	.short	0x0000
    7264:	2000026a 	.word	0x2000026a

00007268 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7268:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    726a:	2400      	movs	r4, #0
    726c:	a902      	add	r1, sp, #8
    726e:	f88d 4004 	strb.w	r4, [sp, #4]
    7272:	f88d 4008 	strb.w	r4, [sp, #8]
    7276:	9100      	str	r1, [sp, #0]
    7278:	7882      	ldrb	r2, [r0, #2]
    727a:	7841      	ldrb	r1, [r0, #1]
    727c:	7800      	ldrb	r0, [r0, #0]
    727e:	ab01      	add	r3, sp, #4
    7280:	f009 fa37 	bl	106f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
    7284:	2800      	cmp	r0, #0
    7286:	d112      	bne.n	72ae <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7288:	f89d 0004 	ldrb.w	r0, [sp, #4]
    728c:	f009 f842 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    7290:	b170      	cbz	r0, 72b0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7292:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7296:	f009 f83d 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    729a:	b148      	cbz	r0, 72b0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    729c:	4805      	ldr	r0, [pc, #20]	; (72b4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    729e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    72a2:	7381      	strb	r1, [r0, #14]
    72a4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    72a8:	73c1      	strb	r1, [r0, #15]
    72aa:	8204      	strh	r4, [r0, #16]
    72ac:	2000      	movs	r0, #0
    72ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    72b0:	2011      	movs	r0, #17
    72b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    72b4:	20000eec 	.word	0x20000eec

000072b8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    72b8:	b51c      	push	{r2, r3, r4, lr}
    72ba:	4604      	mov	r4, r0
    72bc:	f006 fe91 	bl	dfe2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    72c0:	b148      	cbz	r0, 72d6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    72c2:	4620      	mov	r0, r4
    72c4:	f7fb fae2 	bl	288c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    72c8:	4909      	ldr	r1, [pc, #36]	; (72f0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    72ca:	24ff      	movs	r4, #255	; 0xff
    72cc:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    72d0:	e9cd 0100 	strd	r0, r1, [sp]
    72d4:	e004      	b.n	72e0 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    72d6:	2012      	movs	r0, #18
    72d8:	bd1c      	pop	{r2, r3, r4, pc}
    72da:	9800      	ldr	r0, [sp, #0]
    72dc:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    72e0:	4668      	mov	r0, sp
    72e2:	f7f9 fddd 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    72e6:	2800      	cmp	r0, #0
    72e8:	d0f7      	beq.n	72da <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    72ea:	2000      	movs	r0, #0
    72ec:	bd1c      	pop	{r2, r3, r4, pc}
    72ee:	0000      	.short	0x0000
    72f0:	000078d4 	.word	0x000078d4

000072f4 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    72f4:	7801      	ldrb	r1, [r0, #0]
    72f6:	b171      	cbz	r1, 7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72f8:	7841      	ldrb	r1, [r0, #1]
    72fa:	b161      	cbz	r1, 7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72fc:	8841      	ldrh	r1, [r0, #2]
    72fe:	291b      	cmp	r1, #27
    7300:	d309      	bcc.n	7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7302:	8881      	ldrh	r1, [r0, #4]
    7304:	291b      	cmp	r1, #27
    7306:	d306      	bcc.n	7316 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7308:	4904      	ldr	r1, [pc, #16]	; (731c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    730a:	6802      	ldr	r2, [r0, #0]
    730c:	600a      	str	r2, [r1, #0]
    730e:	8880      	ldrh	r0, [r0, #4]
    7310:	8088      	strh	r0, [r1, #4]
    7312:	2000      	movs	r0, #0
    7314:	4770      	bx	lr
    7316:	2012      	movs	r0, #18
    7318:	4770      	bx	lr
    731a:	0000      	.short	0x0000
    731c:	20000eec 	.word	0x20000eec

00007320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7320:	6800      	ldr	r0, [r0, #0]
    7322:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7326:	4288      	cmp	r0, r1
    7328:	d303      	bcc.n	7332 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    732a:	4903      	ldr	r1, [pc, #12]	; (7338 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    732c:	6088      	str	r0, [r1, #8]
    732e:	2000      	movs	r0, #0
    7330:	4770      	bx	lr
    7332:	2012      	movs	r0, #18
    7334:	4770      	bx	lr
    7336:	0000      	.short	0x0000
    7338:	20000eec 	.word	0x20000eec

0000733c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    733c:	b510      	push	{r4, lr}
    733e:	b086      	sub	sp, #24
    7340:	4604      	mov	r4, r0
    7342:	f009 f8c2 	bl	104ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    7346:	2800      	cmp	r0, #0
    7348:	d103      	bne.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    734a:	f009 f9bf 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
    734e:	b110      	cbz	r0, 7356 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7350:	200c      	movs	r0, #12
    7352:	b006      	add	sp, #24
    7354:	bd10      	pop	{r4, pc}
    7356:	2102      	movs	r1, #2
    7358:	f104 0010 	add.w	r0, r4, #16
    735c:	f000 f92c 	bl	75b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    7360:	78a0      	ldrb	r0, [r4, #2]
    7362:	f88d 0008 	strb.w	r0, [sp, #8]
    7366:	78a0      	ldrb	r0, [r4, #2]
    7368:	f88d 0000 	strb.w	r0, [sp]
    736c:	7860      	ldrb	r0, [r4, #1]
    736e:	f88d 0003 	strb.w	r0, [sp, #3]
    7372:	7820      	ldrb	r0, [r4, #0]
    7374:	f88d 0002 	strb.w	r0, [sp, #2]
    7378:	7e20      	ldrb	r0, [r4, #24]
    737a:	f88d 0004 	strb.w	r0, [sp, #4]
    737e:	78a0      	ldrb	r0, [r4, #2]
    7380:	07c0      	lsls	r0, r0, #31
    7382:	d00b      	beq.n	739c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    7384:	78e0      	ldrb	r0, [r4, #3]
    7386:	2801      	cmp	r0, #1
    7388:	d011      	beq.n	73ae <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    738a:	b190      	cbz	r0, 73b2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    738c:	f05f 0000 	movs.w	r0, #0
    7390:	f88d 0001 	strb.w	r0, [sp, #1]
    7394:	68a0      	ldr	r0, [r4, #8]
    7396:	9003      	str	r0, [sp, #12]
    7398:	6920      	ldr	r0, [r4, #16]
    739a:	9004      	str	r0, [sp, #16]
    739c:	a802      	add	r0, sp, #8
    739e:	f7fd fbb7 	bl	4b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    73a2:	2800      	cmp	r0, #0
    73a4:	d1d5      	bne.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    73a6:	4668      	mov	r0, sp
    73a8:	f7fc f998 	bl	36dc <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    73ac:	e7d1      	b.n	7352 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    73ae:	2002      	movs	r0, #2
    73b0:	e7ee      	b.n	7390 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    73b2:	2001      	movs	r0, #1
    73b4:	e7ec      	b.n	7390 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000073b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    73b8:	4801      	ldr	r0, [pc, #4]	; (73c0 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    73ba:	f990 0000 	ldrsb.w	r0, [r0]
    73be:	4770      	bx	lr
    73c0:	2000025c 	.word	0x2000025c

000073c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    73c4:	4a03      	ldr	r2, [pc, #12]	; (73d4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    73c6:	e9d2 1200 	ldrd	r1, r2, [r2]
    73ca:	6001      	str	r1, [r0, #0]
    73cc:	6042      	str	r2, [r0, #4]
    73ce:	2000      	movs	r0, #0
    73d0:	4770      	bx	lr
    73d2:	0000      	.short	0x0000
    73d4:	000078d4 	.word	0x000078d4

000073d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    73d8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    73da:	8800      	ldrh	r0, [r0, #0]
    73dc:	4669      	mov	r1, sp
    73de:	f006 fe16 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    73e2:	b968      	cbnz	r0, 7400 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73e4:	2401      	movs	r4, #1
    73e6:	9801      	ldr	r0, [sp, #4]
    73e8:	f009 f953 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    73ec:	b140      	cbz	r0, 7400 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    73ee:	9801      	ldr	r0, [sp, #4]
    73f0:	4601      	mov	r1, r0
    73f2:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    73f6:	3088      	adds	r0, #136	; 0x88
    73f8:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    73fc:	b95a      	cbnz	r2, 7416 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    73fe:	e001      	b.n	7404 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7400:	2002      	movs	r0, #2
    7402:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7404:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    7408:	f88d 2008 	strb.w	r2, [sp, #8]
    740c:	9a02      	ldr	r2, [sp, #8]
    740e:	9202      	str	r2, [sp, #8]
    7410:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7414:	b10a      	cbz	r2, 741a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    7416:	203a      	movs	r0, #58	; 0x3a
    7418:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    741a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    741e:	0792      	lsls	r2, r2, #30
    7420:	d006      	beq.n	7430 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7422:	2203      	movs	r2, #3
    7424:	4903      	ldr	r1, [pc, #12]	; (7434 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    7426:	3060      	adds	r0, #96	; 0x60
    7428:	f007 f94e 	bl	e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    742c:	2000      	movs	r0, #0
    742e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7430:	700c      	strb	r4, [r1, #0]
    7432:	e7fb      	b.n	742c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7434:	0000ebd1 	.word	0x0000ebd1

00007438 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    7438:	b510      	push	{r4, lr}
    743a:	2005      	movs	r0, #5
    743c:	f000 fabe 	bl	79bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7440:	f7fe f8d4 	bl	55ec <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7444:	4902      	ldr	r1, [pc, #8]	; (7450 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    7446:	4801      	ldr	r0, [pc, #4]	; (744c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    7448:	6048      	str	r0, [r1, #4]
    744a:	bd10      	pop	{r4, pc}
    744c:	00007455 	.word	0x00007455
    7450:	2000025c 	.word	0x2000025c
    7454:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    7458:	4613      	mov	r3, r2
    745a:	4a33      	ldr	r2, [pc, #204]	; (7528 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    745c:	460f      	mov	r7, r1
    745e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    7462:	8814      	ldrh	r4, [r2, #0]
    7464:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    7468:	428c      	cmp	r4, r1
    746a:	d200      	bcs.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    746c:	4621      	mov	r1, r4
    746e:	4688      	mov	r8, r1
    7470:	8891      	ldrh	r1, [r2, #4]
    7472:	42b1      	cmp	r1, r6
    7474:	d200      	bcs.n	7478 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    7476:	460e      	mov	r6, r1
    7478:	8851      	ldrh	r1, [r2, #2]
    747a:	f640 0448 	movw	r4, #2120	; 0x848
    747e:	42a1      	cmp	r1, r4
    7480:	d300      	bcc.n	7484 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    7482:	4621      	mov	r1, r4
    7484:	88d5      	ldrh	r5, [r2, #6]
    7486:	42a5      	cmp	r5, r4
    7488:	d300      	bcc.n	748c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    748a:	4625      	mov	r5, r4
    748c:	42a1      	cmp	r1, r4
    748e:	d200      	bcs.n	7492 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    7490:	460c      	mov	r4, r1
    7492:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7496:	2e1b      	cmp	r6, #27
    7498:	d001      	beq.n	749e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    749a:	4295      	cmp	r5, r2
    749c:	d104      	bne.n	74a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    749e:	f1b8 0f1b 	cmp.w	r8, #27
    74a2:	d03e      	beq.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    74a4:	4294      	cmp	r4, r2
    74a6:	d03c      	beq.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    74a8:	466a      	mov	r2, sp
    74aa:	4619      	mov	r1, r3
    74ac:	f009 f898 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    74b0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    74b4:	4641      	mov	r1, r8
    74b6:	4540      	cmp	r0, r8
    74b8:	d900      	bls.n	74bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    74ba:	4608      	mov	r0, r1
    74bc:	80f8      	strh	r0, [r7, #6]
    74be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    74c2:	42a1      	cmp	r1, r4
    74c4:	d800      	bhi.n	74c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    74c6:	460c      	mov	r4, r1
    74c8:	813c      	strh	r4, [r7, #8]
    74ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    74ce:	42b1      	cmp	r1, r6
    74d0:	d800      	bhi.n	74d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    74d2:	460e      	mov	r6, r1
    74d4:	807e      	strh	r6, [r7, #2]
    74d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    74da:	42a9      	cmp	r1, r5
    74dc:	d800      	bhi.n	74e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    74de:	460d      	mov	r5, r1
    74e0:	80bd      	strh	r5, [r7, #4]
    74e2:	21ff      	movs	r1, #255	; 0xff
    74e4:	7039      	strb	r1, [r7, #0]
    74e6:	381b      	subs	r0, #27
    74e8:	28e0      	cmp	r0, #224	; 0xe0
    74ea:	d902      	bls.n	74f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    74ec:	f640 516e 	movw	r1, #3438	; 0xd6e
    74f0:	e014      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    74f2:	3e1b      	subs	r6, #27
    74f4:	2ee0      	cmp	r6, #224	; 0xe0
    74f6:	d902      	bls.n	74fe <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    74f8:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    74fc:	e00e      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    74fe:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7502:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7506:	4284      	cmp	r4, r0
    7508:	d902      	bls.n	7510 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    750a:	f640 5172 	movw	r1, #3442	; 0xd72
    750e:	e005      	b.n	751c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7510:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7514:	4285      	cmp	r5, r0
    7516:	d904      	bls.n	7522 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    7518:	f640 5174 	movw	r1, #3444	; 0xd74
    751c:	2039      	movs	r0, #57	; 0x39
    751e:	f7f9 faa1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7522:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    7526:	0000      	.short	0x0000
    7528:	2000026a 	.word	0x2000026a
    752c:	b510      	push	{r4, lr}
    752e:	480e      	ldr	r0, [pc, #56]	; (7568 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7530:	2100      	movs	r1, #0
    7532:	4b0e      	ldr	r3, [pc, #56]	; (756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7534:	74c1      	strb	r1, [r0, #19]
    7536:	8281      	strh	r1, [r0, #20]
    7538:	221b      	movs	r2, #27
    753a:	801a      	strh	r2, [r3, #0]
    753c:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7540:	805c      	strh	r4, [r3, #2]
    7542:	809a      	strh	r2, [r3, #4]
    7544:	80dc      	strh	r4, [r3, #6]
    7546:	7381      	strb	r1, [r0, #14]
    7548:	73c1      	strb	r1, [r0, #15]
    754a:	2303      	movs	r3, #3
    754c:	7003      	strb	r3, [r0, #0]
    754e:	2302      	movs	r3, #2
    7550:	7043      	strb	r3, [r0, #1]
    7552:	8042      	strh	r2, [r0, #2]
    7554:	8082      	strh	r2, [r0, #4]
    7556:	f640 62a6 	movw	r2, #3750	; 0xea6
    755a:	6082      	str	r2, [r0, #8]
    755c:	7481      	strb	r1, [r0, #18]
    755e:	7301      	strb	r1, [r0, #12]
    7560:	4802      	ldr	r0, [pc, #8]	; (756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7562:	1f80      	subs	r0, r0, #6
    7564:	7001      	strb	r1, [r0, #0]
    7566:	bd10      	pop	{r4, pc}
    7568:	20000eec 	.word	0x20000eec
    756c:	2000026a 	.word	0x2000026a
    7570:	4904      	ldr	r1, [pc, #16]	; (7584 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    7572:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    7576:	4288      	cmp	r0, r1
    7578:	d301      	bcc.n	757e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    757a:	2000      	movs	r0, #0
    757c:	4770      	bx	lr
    757e:	2001      	movs	r0, #1
    7580:	4770      	bx	lr
    7582:	0000      	.short	0x0000
    7584:	0270f3cc 	.word	0x0270f3cc
    7588:	4904      	ldr	r1, [pc, #16]	; (759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    758a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    758e:	4288      	cmp	r0, r1
    7590:	d301      	bcc.n	7596 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    7592:	2000      	movs	r0, #0
    7594:	4770      	bx	lr
    7596:	2001      	movs	r0, #1
    7598:	4770      	bx	lr
    759a:	0000      	.short	0x0000
    759c:	009c363d 	.word	0x009c363d
    75a0:	4904      	ldr	r1, [pc, #16]	; (75b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    75a2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    75a6:	4288      	cmp	r0, r1
    75a8:	d301      	bcc.n	75ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    75aa:	2000      	movs	r0, #0
    75ac:	4770      	bx	lr
    75ae:	2001      	movs	r0, #1
    75b0:	4770      	bx	lr
    75b2:	0000      	.short	0x0000
    75b4:	009c363d 	.word	0x009c363d
    75b8:	b530      	push	{r4, r5, lr}
    75ba:	2200      	movs	r2, #0
    75bc:	4d07      	ldr	r5, [pc, #28]	; (75dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    75be:	e009      	b.n	75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    75c0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    75c4:	462b      	mov	r3, r5
    75c6:	429c      	cmp	r4, r3
    75c8:	d800      	bhi.n	75cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    75ca:	4623      	mov	r3, r4
    75cc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    75d0:	1c52      	adds	r2, r2, #1
    75d2:	b2d2      	uxtb	r2, r2
    75d4:	428a      	cmp	r2, r1
    75d6:	d3f3      	bcc.n	75c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    75d8:	bd30      	pop	{r4, r5, pc}
    75da:	0000      	.short	0x0000
    75dc:	00f42400 	.word	0x00f42400
    75e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75e4:	4604      	mov	r4, r0
    75e6:	a05c      	add	r0, pc, #368	; (adr r0, 7758 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    75e8:	4688      	mov	r8, r1
    75ea:	e9d0 7600 	ldrd	r7, r6, [r0]
    75ee:	b087      	sub	sp, #28
    75f0:	4699      	mov	r9, r3
    75f2:	4615      	mov	r5, r2
    75f4:	2100      	movs	r1, #0
    75f6:	4620      	mov	r0, r4
    75f8:	f7fb f88c 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    75fc:	f8a4 8000 	strh.w	r8, [r4]
    7600:	4857      	ldr	r0, [pc, #348]	; (7760 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7602:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    7606:	f000 f9e5 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    760a:	0940      	lsrs	r0, r0, #5
    760c:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7610:	07c1      	lsls	r1, r0, #31
    7612:	f8df 8150 	ldr.w	r8, [pc, #336]	; 7764 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    7616:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    761a:	d006      	beq.n	762a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    761c:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7620:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7624:	84c2      	strh	r2, [r0, #38]	; 0x26
    7626:	8501      	strh	r1, [r0, #40]	; 0x28
    7628:	e002      	b.n	7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    762a:	211b      	movs	r1, #27
    762c:	84c1      	strh	r1, [r0, #38]	; 0x26
    762e:	8501      	strh	r1, [r0, #40]	; 0x28
    7630:	f000 f9d0 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7634:	0788      	lsls	r0, r1, #30
    7636:	d506      	bpl.n	7646 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    7638:	2000      	movs	r0, #0
    763a:	f88d 0000 	strb.w	r0, [sp]
    763e:	4668      	mov	r0, sp
    7640:	9401      	str	r4, [sp, #4]
    7642:	f7ff fd25 	bl	7090 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    7646:	f898 1001 	ldrb.w	r1, [r8, #1]
    764a:	9100      	str	r1, [sp, #0]
    764c:	f898 3000 	ldrb.w	r3, [r8]
    7650:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7654:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    7658:	8820      	ldrh	r0, [r4, #0]
    765a:	f7f9 fd0f 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    765e:	b120      	cbz	r0, 766a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    7660:	f640 7106 	movw	r1, #3846	; 0xf06
    7664:	2039      	movs	r0, #57	; 0x39
    7666:	f7f9 f9fd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    766a:	f007 f99a 	bl	e9a2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    766e:	6160      	str	r0, [r4, #20]
    7670:	f1b9 0f00 	cmp.w	r9, #0
    7674:	d004      	beq.n	7680 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    7676:	f7fb fc85 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    767a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    767e:	61e0      	str	r0, [r4, #28]
    7680:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7684:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7688:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    768a:	f006 fccc 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    768e:	6120      	str	r0, [r4, #16]
    7690:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    7694:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    7698:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    769a:	8320      	strh	r0, [r4, #24]
    769c:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    76a0:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    76a4:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    76a6:	8360      	strh	r0, [r4, #26]
    76a8:	7a68      	ldrb	r0, [r5, #9]
    76aa:	f008 fe12 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    76ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
    76b2:	4645      	mov	r5, r8
    76b4:	4620      	mov	r0, r4
    76b6:	62e1      	str	r1, [r4, #44]	; 0x2c
    76b8:	f007 fd50 	bl	f15c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    76bc:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    76c0:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    76c4:	20ff      	movs	r0, #255	; 0xff
    76c6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    76ca:	4825      	ldr	r0, [pc, #148]	; (7760 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    76cc:	3808      	subs	r0, #8
    76ce:	6843      	ldr	r3, [r0, #4]
    76d0:	b123      	cbz	r3, 76dc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    76d2:	2201      	movs	r2, #1
    76d4:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    76d8:	4620      	mov	r0, r4
    76da:	4798      	blx	r3
    76dc:	8821      	ldrh	r1, [r4, #0]
    76de:	f8ad 1004 	strh.w	r1, [sp, #4]
    76e2:	7ba9      	ldrb	r1, [r5, #14]
    76e4:	f88d 1006 	strb.w	r1, [sp, #6]
    76e8:	7be9      	ldrb	r1, [r5, #15]
    76ea:	f88d 1007 	strb.w	r1, [sp, #7]
    76ee:	8a29      	ldrh	r1, [r5, #16]
    76f0:	f8ad 1008 	strh.w	r1, [sp, #8]
    76f4:	a904      	add	r1, sp, #16
    76f6:	9100      	str	r1, [sp, #0]
    76f8:	2000      	movs	r0, #0
    76fa:	ab03      	add	r3, sp, #12
    76fc:	aa01      	add	r2, sp, #4
    76fe:	4621      	mov	r1, r4
    7700:	f008 ffa4 	bl	1064c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7704:	0005      	movs	r5, r0
    7706:	d10f      	bne.n	7728 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    7708:	f89d 000c 	ldrb.w	r0, [sp, #12]
    770c:	f88d 0014 	strb.w	r0, [sp, #20]
    7710:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7714:	f88d 0015 	strb.w	r0, [sp, #21]
    7718:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    771c:	f8ad 0016 	strh.w	r0, [sp, #22]
    7720:	a905      	add	r1, sp, #20
    7722:	4620      	mov	r0, r4
    7724:	f006 fd4d 	bl	e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7728:	f7fb fc2c 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    772c:	210c      	movs	r1, #12
    772e:	fbb0 f2f1 	udiv	r2, r0, r1
    7732:	fb01 0012 	mls	r0, r1, r2, r0
    7736:	1d40      	adds	r0, r0, #5
    7738:	b2c0      	uxtb	r0, r0
    773a:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    773e:	2809      	cmp	r0, #9
    7740:	d202      	bcs.n	7748 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7742:	3008      	adds	r0, #8
    7744:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7748:	2101      	movs	r1, #1
    774a:	4620      	mov	r0, r4
    774c:	f7fa ffe2 	bl	2714 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7750:	b007      	add	sp, #28
    7752:	4628      	mov	r0, r5
    7754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7758:	ffffffff 	.word	0xffffffff
    775c:	0000001f 	.word	0x0000001f
    7760:	20000264 	.word	0x20000264
    7764:	20000eec 	.word	0x20000eec
    7768:	4a09      	ldr	r2, [pc, #36]	; (7790 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    776a:	4290      	cmp	r0, r2
    776c:	d80b      	bhi.n	7786 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    776e:	2901      	cmp	r1, #1
    7770:	d002      	beq.n	7778 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    7772:	2904      	cmp	r1, #4
    7774:	d003      	beq.n	777e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    7776:	e008      	b.n	778a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    7778:	f240 7153 	movw	r1, #1875	; 0x753
    777c:	e001      	b.n	7782 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    777e:	f640 11c4 	movw	r1, #2500	; 0x9c4
    7782:	4288      	cmp	r0, r1
    7784:	d201      	bcs.n	778a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    7786:	2000      	movs	r0, #0
    7788:	4770      	bx	lr
    778a:	2001      	movs	r0, #1
    778c:	4770      	bx	lr
    778e:	0000      	.short	0x0000
    7790:	0270fd8f 	.word	0x0270fd8f
    7794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7798:	b088      	sub	sp, #32
    779a:	4604      	mov	r4, r0
    779c:	8800      	ldrh	r0, [r0, #0]
    779e:	a906      	add	r1, sp, #24
    77a0:	f006 fc35 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    77a4:	2800      	cmp	r0, #0
    77a6:	d147      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    77a8:	9807      	ldr	r0, [sp, #28]
    77aa:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    77ae:	f88d 1008 	strb.w	r1, [sp, #8]
    77b2:	9902      	ldr	r1, [sp, #8]
    77b4:	9102      	str	r1, [sp, #8]
    77b6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    77ba:	3088      	adds	r0, #136	; 0x88
    77bc:	b101      	cbz	r1, 77c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    77be:	2101      	movs	r1, #1
    77c0:	f88d 100c 	strb.w	r1, [sp, #12]
    77c4:	7f81      	ldrb	r1, [r0, #30]
    77c6:	f04f 0801 	mov.w	r8, #1
    77ca:	291e      	cmp	r1, #30
    77cc:	d102      	bne.n	77d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    77ce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77d2:	b149      	cbz	r1, 77e8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    77d4:	f05f 0100 	movs.w	r1, #0
    77d8:	f88d 1004 	strb.w	r1, [sp, #4]
    77dc:	2105      	movs	r1, #5
    77de:	306e      	adds	r0, #110	; 0x6e
    77e0:	f008 f91a 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    77e4:	b110      	cbz	r0, 77ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    77e6:	e004      	b.n	77f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    77e8:	2101      	movs	r1, #1
    77ea:	e7f5      	b.n	77d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    77ec:	f89d 0004 	ldrb.w	r0, [sp, #4]
    77f0:	b308      	cbz	r0, 7836 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    77f2:	8921      	ldrh	r1, [r4, #8]
    77f4:	88e0      	ldrh	r0, [r4, #6]
    77f6:	f008 fda2 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    77fa:	2800      	cmp	r0, #0
    77fc:	d11c      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    77fe:	88a1      	ldrh	r1, [r4, #4]
    7800:	8860      	ldrh	r0, [r4, #2]
    7802:	f008 fd9c 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    7806:	2800      	cmp	r0, #0
    7808:	d116      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    780a:	8921      	ldrh	r1, [r4, #8]
    780c:	88e0      	ldrh	r0, [r4, #6]
    780e:	f008 fd8c 	bl	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7812:	2800      	cmp	r0, #0
    7814:	d110      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7816:	88a1      	ldrh	r1, [r4, #4]
    7818:	8860      	ldrh	r0, [r4, #2]
    781a:	f008 fd86 	bl	1032a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    781e:	0006      	movs	r6, r0
    7820:	d10a      	bne.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7822:	9807      	ldr	r0, [sp, #28]
    7824:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    7828:	27ff      	movs	r7, #255	; 0xff
    782a:	706f      	strb	r7, [r5, #1]
    782c:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7830:	b129      	cbz	r1, 783e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7832:	263a      	movs	r6, #58	; 0x3a
    7834:	e02e      	b.n	7894 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    7836:	201a      	movs	r0, #26
    7838:	b008      	add	sp, #32
    783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    783e:	4641      	mov	r1, r8
    7840:	aa03      	add	r2, sp, #12
    7842:	f008 fecd 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    7846:	8861      	ldrh	r1, [r4, #2]
    7848:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    784c:	4281      	cmp	r1, r0
    784e:	d200      	bcs.n	7852 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7850:	4608      	mov	r0, r1
    7852:	80e8      	strh	r0, [r5, #6]
    7854:	88a1      	ldrh	r1, [r4, #4]
    7856:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    785a:	4281      	cmp	r1, r0
    785c:	d200      	bcs.n	7860 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    785e:	4608      	mov	r0, r1
    7860:	8128      	strh	r0, [r5, #8]
    7862:	88e2      	ldrh	r2, [r4, #6]
    7864:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7868:	428a      	cmp	r2, r1
    786a:	d200      	bcs.n	786e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    786c:	4611      	mov	r1, r2
    786e:	8069      	strh	r1, [r5, #2]
    7870:	8922      	ldrh	r2, [r4, #8]
    7872:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7876:	428a      	cmp	r2, r1
    7878:	d200      	bcs.n	787c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    787a:	4611      	mov	r1, r2
    787c:	f640 0248 	movw	r2, #2120	; 0x848
    7880:	80a9      	strh	r1, [r5, #4]
    7882:	4291      	cmp	r1, r2
    7884:	d300      	bcc.n	7888 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    7886:	4611      	mov	r1, r2
    7888:	80a9      	strh	r1, [r5, #4]
    788a:	4290      	cmp	r0, r2
    788c:	d200      	bcs.n	7890 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    788e:	4602      	mov	r2, r0
    7890:	812a      	strh	r2, [r5, #8]
    7892:	702f      	strb	r7, [r5, #0]
    7894:	2000      	movs	r0, #0
    7896:	7068      	strb	r0, [r5, #1]
    7898:	4630      	mov	r0, r6
    789a:	e7cd      	b.n	7838 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    789c:	b510      	push	{r4, lr}
    789e:	4604      	mov	r4, r0
    78a0:	88c1      	ldrh	r1, [r0, #6]
    78a2:	8880      	ldrh	r0, [r0, #4]
    78a4:	f008 fd4b 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    78a8:	2800      	cmp	r0, #0
    78aa:	d10f      	bne.n	78cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    78ac:	8861      	ldrh	r1, [r4, #2]
    78ae:	8820      	ldrh	r0, [r4, #0]
    78b0:	f008 fd45 	bl	1033e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    78b4:	2800      	cmp	r0, #0
    78b6:	d109      	bne.n	78cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    78b8:	4805      	ldr	r0, [pc, #20]	; (78d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    78ba:	88a1      	ldrh	r1, [r4, #4]
    78bc:	8081      	strh	r1, [r0, #4]
    78be:	8821      	ldrh	r1, [r4, #0]
    78c0:	8001      	strh	r1, [r0, #0]
    78c2:	88e1      	ldrh	r1, [r4, #6]
    78c4:	80c1      	strh	r1, [r0, #6]
    78c6:	8861      	ldrh	r1, [r4, #2]
    78c8:	8041      	strh	r1, [r0, #2]
    78ca:	2000      	movs	r0, #0
    78cc:	bd10      	pop	{r4, pc}
    78ce:	0000      	.short	0x0000
    78d0:	2000026a 	.word	0x2000026a
    78d4:	0c124b0c 	.word	0x0c124b0c
    78d8:	124b0059 	.word	0x124b0059
	...

000078e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78e4:	b570      	push	{r4, r5, r6, lr}
    78e6:	460d      	mov	r5, r1
    78e8:	f7fb f9da 	bl	2ca0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78ec:	4c05      	ldr	r4, [pc, #20]	; (7904 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    78ee:	6065      	str	r5, [r4, #4]
    78f0:	68a0      	ldr	r0, [r4, #8]
    78f2:	f008 ff2d 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    78f6:	f008 fc4c 	bl	10192 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78fa:	f7fb fb37 	bl	2f6c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78fe:	2001      	movs	r0, #1
    7900:	7020      	strb	r0, [r4, #0]
    7902:	bd70      	pop	{r4, r5, r6, pc}
    7904:	20000274 	.word	0x20000274

00007908 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7908:	4801      	ldr	r0, [pc, #4]	; (7910 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    790a:	7800      	ldrb	r0, [r0, #0]
    790c:	4770      	bx	lr
    790e:	0000      	.short	0x0000
    7910:	20000274 	.word	0x20000274

00007914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7914:	b510      	push	{r4, lr}
    7916:	4c06      	ldr	r4, [pc, #24]	; (7930 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7918:	68e0      	ldr	r0, [r4, #12]
    791a:	f008 ff19 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    791e:	6920      	ldr	r0, [r4, #16]
    7920:	f008 ff16 	bl	10750 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ae>
    7924:	f008 fcbd 	bl	102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7928:	2000      	movs	r0, #0
    792a:	7020      	strb	r0, [r4, #0]
    792c:	bd10      	pop	{r4, pc}
    792e:	0000      	.short	0x0000
    7930:	20000274 	.word	0x20000274

00007934 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7934:	b510      	push	{r4, lr}
    7936:	4908      	ldr	r1, [pc, #32]	; (7958 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    7938:	4808      	ldr	r0, [pc, #32]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    793a:	f008 fefc 	bl	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    793e:	4807      	ldr	r0, [pc, #28]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7940:	4907      	ldr	r1, [pc, #28]	; (7960 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7942:	1d00      	adds	r0, r0, #4
    7944:	f008 fef7 	bl	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7948:	4804      	ldr	r0, [pc, #16]	; (795c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    794e:	4905      	ldr	r1, [pc, #20]	; (7964 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7950:	3008      	adds	r0, #8
    7952:	f008 bef0 	b.w	10736 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x494>
    7956:	0000      	.short	0x0000
    7958:	20000290 	.word	0x20000290
    795c:	2000027c 	.word	0x2000027c
    7960:	20000298 	.word	0x20000298
    7964:	20000288 	.word	0x20000288
    7968:	b510      	push	{r4, lr}
    796a:	f7fb fe33 	bl	35d4 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    796e:	f000 f813 	bl	7998 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    7972:	f006 fa2d 	bl	ddd0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7976:	4907      	ldr	r1, [pc, #28]	; (7994 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    7978:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    797c:	f7f9 fe94 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    7980:	2000      	movs	r0, #0
    7982:	f006 f983 	bl	dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    7986:	f7fd fe77 	bl	5678 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    798a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    798e:	f7fb b98d 	b.w	2cac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    7992:	0000      	.short	0x0000
    7994:	2000173a 	.word	0x2000173a
    7998:	b510      	push	{r4, lr}
    799a:	f7ff fb69 	bl	7070 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    799e:	f7fd f88f 	bl	4ac0 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    79a2:	f7fd fcfb 	bl	539c <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    79a6:	f7ff fd07 	bl	73b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    79aa:	4601      	mov	r1, r0
    79ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79b0:	4801      	ldr	r0, [pc, #4]	; (79b8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    79b2:	f7fb bd6b 	b.w	348c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    79b6:	0000      	.short	0x0000
    79b8:	20001638 	.word	0x20001638

000079bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79bc:	4a04      	ldr	r2, [pc, #16]	; (79d0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79be:	08c1      	lsrs	r1, r0, #3
    79c0:	f000 0307 	and.w	r3, r0, #7
    79c4:	2001      	movs	r0, #1
    79c6:	4098      	lsls	r0, r3
    79c8:	5c53      	ldrb	r3, [r2, r1]
    79ca:	4303      	orrs	r3, r0
    79cc:	5453      	strb	r3, [r2, r1]
    79ce:	4770      	bx	lr
    79d0:	20000020 	.word	0x20000020

000079d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79d4:	4901      	ldr	r1, [pc, #4]	; (79dc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79d6:	e9d1 0100 	ldrd	r0, r1, [r1]
    79da:	4770      	bx	lr
    79dc:	20000020 	.word	0x20000020

000079e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79e0:	4806      	ldr	r0, [pc, #24]	; (79fc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79e2:	8801      	ldrh	r1, [r0, #0]
    79e4:	7900      	ldrb	r0, [r0, #4]
    79e6:	0602      	lsls	r2, r0, #24
    79e8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79ec:	f000 0001 	and.w	r0, r0, #1
    79f0:	1800      	adds	r0, r0, r0
    79f2:	b2c0      	uxtb	r0, r0
    79f4:	f040 0001 	orr.w	r0, r0, #1
    79f8:	4770      	bx	lr
    79fa:	0000      	.short	0x0000
    79fc:	20000020 	.word	0x20000020

00007a00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7a00:	b510      	push	{r4, lr}
    7a02:	f004 fe33 	bl	c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7a06:	2200      	movs	r2, #0
    7a08:	4b08      	ldr	r3, [pc, #32]	; (7a2c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7a0a:	4611      	mov	r1, r2
    7a0c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7a10:	4284      	cmp	r4, r0
    7a12:	d303      	bcc.n	7a1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7a14:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a18:	7882      	ldrb	r2, [r0, #2]
    7a1a:	e003      	b.n	7a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a1c:	1c49      	adds	r1, r1, #1
    7a1e:	b2c9      	uxtb	r1, r1
    7a20:	290c      	cmp	r1, #12
    7a22:	d3f3      	bcc.n	7a0c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a24:	4802      	ldr	r0, [pc, #8]	; (7a30 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a26:	7002      	strb	r2, [r0, #0]
    7a28:	bd10      	pop	{r4, pc}
    7a2a:	0000      	.short	0x0000
    7a2c:	000107cc 	.word	0x000107cc
    7a30:	2000035d 	.word	0x2000035d

00007a34 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7a34:	4802      	ldr	r0, [pc, #8]	; (7a40 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    7a36:	7800      	ldrb	r0, [r0, #0]
    7a38:	f000 0007 	and.w	r0, r0, #7
    7a3c:	4770      	bx	lr
    7a3e:	0000      	.short	0x0000
    7a40:	2000035d 	.word	0x2000035d

00007a44 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7a44:	b570      	push	{r4, r5, r6, lr}
    7a46:	4605      	mov	r5, r0
    7a48:	4616      	mov	r6, r2
    7a4a:	460c      	mov	r4, r1
    7a4c:	2002      	movs	r0, #2
    7a4e:	f000 f9b7 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a52:	4906      	ldr	r1, [pc, #24]	; (7a6c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7a54:	2001      	movs	r0, #1
    7a56:	1ef6      	subs	r6, r6, #3
    7a58:	7008      	strb	r0, [r1, #0]
    7a5a:	4805      	ldr	r0, [pc, #20]	; (7a70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a5c:	6006      	str	r6, [r0, #0]
    7a5e:	4804      	ldr	r0, [pc, #16]	; (7a70 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a60:	3808      	subs	r0, #8
    7a62:	6005      	str	r5, [r0, #0]
    7a64:	1f00      	subs	r0, r0, #4
    7a66:	6004      	str	r4, [r0, #0]
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	0000      	.short	0x0000
    7a6c:	2000035e 	.word	0x2000035e
    7a70:	4000f510 	.word	0x4000f510

00007a74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7a74:	b510      	push	{r4, lr}
    7a76:	4c0c      	ldr	r4, [pc, #48]	; (7aa8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7a78:	7820      	ldrb	r0, [r4, #0]
    7a7a:	b180      	cbz	r0, 7a9e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7a7c:	490b      	ldr	r1, [pc, #44]	; (7aac <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7a7e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a82:	6008      	str	r0, [r1, #0]
    7a84:	f000 f86a 	bl	7b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7a88:	2100      	movs	r1, #0
    7a8a:	b120      	cbz	r0, 7a96 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7a8c:	2001      	movs	r0, #1
    7a8e:	7060      	strb	r0, [r4, #1]
    7a90:	4807      	ldr	r0, [pc, #28]	; (7ab0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7a92:	6800      	ldr	r0, [r0, #0]
    7a94:	e001      	b.n	7a9a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7a96:	7061      	strb	r1, [r4, #1]
    7a98:	2010      	movs	r0, #16
    7a9a:	70a0      	strb	r0, [r4, #2]
    7a9c:	7021      	strb	r1, [r4, #0]
    7a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7aa2:	2000      	movs	r0, #0
    7aa4:	f000 b98c 	b.w	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7aa8:	2000035e 	.word	0x2000035e
    7aac:	4001f508 	.word	0x4001f508
    7ab0:	4000f400 	.word	0x4000f400

00007ab4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7ab4:	b510      	push	{r4, lr}
    7ab6:	2002      	movs	r0, #2
    7ab8:	f000 f982 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7abc:	4904      	ldr	r1, [pc, #16]	; (7ad0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7abe:	2001      	movs	r0, #1
    7ac0:	7008      	strb	r0, [r1, #0]
    7ac2:	f000 f859 	bl	7b78 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7ac6:	4903      	ldr	r1, [pc, #12]	; (7ad4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7ac8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7acc:	6008      	str	r0, [r1, #0]
    7ace:	bd10      	pop	{r4, pc}
    7ad0:	2000035e 	.word	0x2000035e
    7ad4:	4001f504 	.word	0x4001f504

00007ad8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7ad8:	4803      	ldr	r0, [pc, #12]	; (7ae8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7ada:	2100      	movs	r1, #0
    7adc:	7001      	strb	r1, [r0, #0]
    7ade:	7041      	strb	r1, [r0, #1]
    7ae0:	2110      	movs	r1, #16
    7ae2:	7081      	strb	r1, [r0, #2]
    7ae4:	4770      	bx	lr
    7ae6:	0000      	.short	0x0000
    7ae8:	2000035e 	.word	0x2000035e

00007aec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7aec:	4807      	ldr	r0, [pc, #28]	; (7b0c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7aee:	b510      	push	{r4, lr}
    7af0:	7801      	ldrb	r1, [r0, #0]
    7af2:	b141      	cbz	r1, 7b06 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7af4:	f000 f832 	bl	7b5c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7af8:	b118      	cbz	r0, 7b02 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7afa:	4805      	ldr	r0, [pc, #20]	; (7b10 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7afc:	6800      	ldr	r0, [r0, #0]
    7afe:	b2c0      	uxtb	r0, r0
    7b00:	bd10      	pop	{r4, pc}
    7b02:	2010      	movs	r0, #16
    7b04:	bd10      	pop	{r4, pc}
    7b06:	7880      	ldrb	r0, [r0, #2]
    7b08:	bd10      	pop	{r4, pc}
    7b0a:	0000      	.short	0x0000
    7b0c:	2000035e 	.word	0x2000035e
    7b10:	4000f400 	.word	0x4000f400

00007b14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7b14:	4808      	ldr	r0, [pc, #32]	; (7b38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7b16:	b510      	push	{r4, lr}
    7b18:	7801      	ldrb	r1, [r0, #0]
    7b1a:	b159      	cbz	r1, 7b34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7b1c:	4807      	ldr	r0, [pc, #28]	; (7b3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7b1e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b22:	b128      	cbz	r0, 7b30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7b24:	f000 f80c 	bl	7b40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b28:	2800      	cmp	r0, #0
    7b2a:	d000      	beq.n	7b2e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7b2c:	2001      	movs	r0, #1
    7b2e:	bd10      	pop	{r4, pc}
    7b30:	2002      	movs	r0, #2
    7b32:	bd10      	pop	{r4, pc}
    7b34:	7840      	ldrb	r0, [r0, #1]
    7b36:	bd10      	pop	{r4, pc}
    7b38:	2000035e 	.word	0x2000035e
    7b3c:	4000f000 	.word	0x4000f000
    7b40:	4805      	ldr	r0, [pc, #20]	; (7b58 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7b42:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7b46:	b111      	cbz	r1, 7b4e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7b48:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7b4c:	b108      	cbz	r0, 7b52 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7b4e:	2000      	movs	r0, #0
    7b50:	4770      	bx	lr
    7b52:	2001      	movs	r0, #1
    7b54:	4770      	bx	lr
    7b56:	0000      	.short	0x0000
    7b58:	4000f000 	.word	0x4000f000
    7b5c:	4805      	ldr	r0, [pc, #20]	; (7b74 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7b5e:	b510      	push	{r4, lr}
    7b60:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b64:	b120      	cbz	r0, 7b70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b66:	f7ff ffeb 	bl	7b40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b6a:	b108      	cbz	r0, 7b70 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b6c:	2001      	movs	r0, #1
    7b6e:	bd10      	pop	{r4, pc}
    7b70:	2000      	movs	r0, #0
    7b72:	bd10      	pop	{r4, pc}
    7b74:	4000f000 	.word	0x4000f000
    7b78:	4804      	ldr	r0, [pc, #16]	; (7b8c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7b7a:	2100      	movs	r1, #0
    7b7c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7b80:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7b84:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7b88:	4770      	bx	lr
    7b8a:	0000      	.short	0x0000
    7b8c:	4000f000 	.word	0x4000f000

00007b90 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b94:	4604      	mov	r4, r0
    7b96:	461e      	mov	r6, r3
    7b98:	4690      	mov	r8, r2
    7b9a:	460f      	mov	r7, r1
    7b9c:	2001      	movs	r0, #1
    7b9e:	f000 f90f 	bl	7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7ba2:	4d1e      	ldr	r5, [pc, #120]	; (7c1c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7ba4:	481e      	ldr	r0, [pc, #120]	; (7c20 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7ba6:	f004 0103 	and.w	r1, r4, #3
    7baa:	712e      	strb	r6, [r5, #4]
    7bac:	6800      	ldr	r0, [r0, #0]
    7bae:	0432      	lsls	r2, r6, #16
    7bb0:	f361 0007 	bfi	r0, r1, #0, #8
    7bb4:	f366 200f 	bfi	r0, r6, #8, #8
    7bb8:	0c00      	lsrs	r0, r0, #16
    7bba:	4e1a      	ldr	r6, [pc, #104]	; (7c24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7bbc:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7bc0:	4308      	orrs	r0, r1
    7bc2:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7bc6:	4818      	ldr	r0, [pc, #96]	; (7c28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7bc8:	6007      	str	r7, [r0, #0]
    7bca:	f009 f91f 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7bce:	b938      	cbnz	r0, 7be0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7bd0:	4815      	ldr	r0, [pc, #84]	; (7c28 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7bd2:	3010      	adds	r0, #16
    7bd4:	6801      	ldr	r1, [r0, #0]
    7bd6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7bda:	ea41 0108 	orr.w	r1, r1, r8
    7bde:	6001      	str	r1, [r0, #0]
    7be0:	f000 f8e4 	bl	7dac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7be4:	b10c      	cbz	r4, 7bea <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7be6:	2c04      	cmp	r4, #4
    7be8:	d107      	bne.n	7bfa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7bea:	4811      	ldr	r0, [pc, #68]	; (7c30 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7bec:	490d      	ldr	r1, [pc, #52]	; (7c24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7bee:	4a0f      	ldr	r2, [pc, #60]	; (7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7bf0:	1d09      	adds	r1, r1, #4
    7bf2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7bf6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7bfa:	2001      	movs	r0, #1
    7bfc:	7068      	strb	r0, [r5, #1]
    7bfe:	70ec      	strb	r4, [r5, #3]
    7c00:	b11c      	cbz	r4, 7c0a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c02:	2c01      	cmp	r4, #1
    7c04:	d001      	beq.n	7c0a <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c06:	2c02      	cmp	r4, #2
    7c08:	d106      	bne.n	7c18 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7c0a:	7028      	strb	r0, [r5, #0]
    7c0c:	2100      	movs	r1, #0
    7c0e:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7c12:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7c16:	6030      	str	r0, [r6, #0]
    7c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c1c:	20000361 	.word	0x20000361
    7c20:	00007dbc 	.word	0x00007dbc
    7c24:	4000f000 	.word	0x4000f000
    7c28:	4000f508 	.word	0x4000f508
    7c2c:	4000f100 	.word	0x4000f100
    7c30:	4001f088 	.word	0x4001f088

00007c34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7c34:	b570      	push	{r4, r5, r6, lr}
    7c36:	4a1c      	ldr	r2, [pc, #112]	; (7ca8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7c38:	7853      	ldrb	r3, [r2, #1]
    7c3a:	b1a3      	cbz	r3, 7c66 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7c3c:	4b1b      	ldr	r3, [pc, #108]	; (7cac <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7c3e:	6019      	str	r1, [r3, #0]
    7c40:	1d19      	adds	r1, r3, #4
    7c42:	6008      	str	r0, [r1, #0]
    7c44:	2501      	movs	r5, #1
    7c46:	7095      	strb	r5, [r2, #2]
    7c48:	4610      	mov	r0, r2
    7c4a:	78d6      	ldrb	r6, [r2, #3]
    7c4c:	4b18      	ldr	r3, [pc, #96]	; (7cb0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c4e:	7800      	ldrb	r0, [r0, #0]
    7c50:	4c18      	ldr	r4, [pc, #96]	; (7cb4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7c52:	2100      	movs	r1, #0
    7c54:	b156      	cbz	r6, 7c6c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7c56:	2e04      	cmp	r6, #4
    7c58:	d01b      	beq.n	7c92 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7c5a:	b308      	cbz	r0, 7ca0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7c5c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c60:	0668      	lsls	r0, r5, #25
    7c62:	6018      	str	r0, [r3, #0]
    7c64:	bd70      	pop	{r4, r5, r6, pc}
    7c66:	f240 11bd 	movw	r1, #445	; 0x1bd
    7c6a:	e01a      	b.n	7ca2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c6c:	b178      	cbz	r0, 7c8e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7c6e:	4620      	mov	r0, r4
    7c70:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c74:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7c78:	601e      	str	r6, [r3, #0]
    7c7a:	1271      	asrs	r1, r6, #9
    7c7c:	f008 fe1e 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c80:	2800      	cmp	r0, #0
    7c82:	d0ef      	beq.n	7c64 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7c84:	6065      	str	r5, [r4, #4]
    7c86:	480a      	ldr	r0, [pc, #40]	; (7cb0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c88:	1d00      	adds	r0, r0, #4
    7c8a:	6006      	str	r6, [r0, #0]
    7c8c:	bd70      	pop	{r4, r5, r6, pc}
    7c8e:	21b3      	movs	r1, #179	; 0xb3
    7c90:	e007      	b.n	7ca2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c92:	7015      	strb	r5, [r2, #0]
    7c94:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c98:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7c9c:	6025      	str	r5, [r4, #0]
    7c9e:	bd70      	pop	{r4, r5, r6, pc}
    7ca0:	21c6      	movs	r1, #198	; 0xc6
    7ca2:	203c      	movs	r0, #60	; 0x3c
    7ca4:	f7f8 fede 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ca8:	20000361 	.word	0x20000361
    7cac:	4000f50c 	.word	0x4000f50c
    7cb0:	4001f504 	.word	0x4001f504
    7cb4:	4000f000 	.word	0x4000f000

00007cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7cb8:	b570      	push	{r4, r5, r6, lr}
    7cba:	4d05      	ldr	r5, [pc, #20]	; (7cd0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7cbc:	2400      	movs	r4, #0
    7cbe:	7828      	ldrb	r0, [r5, #0]
    7cc0:	b110      	cbz	r0, 7cc8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7cc2:	f000 f873 	bl	7dac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7cc6:	702c      	strb	r4, [r5, #0]
    7cc8:	706c      	strb	r4, [r5, #1]
    7cca:	70ac      	strb	r4, [r5, #2]
    7ccc:	bd70      	pop	{r4, r5, r6, pc}
    7cce:	0000      	.short	0x0000
    7cd0:	20000361 	.word	0x20000361

00007cd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7cd4:	4802      	ldr	r0, [pc, #8]	; (7ce0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7cd6:	2100      	movs	r1, #0
    7cd8:	7001      	strb	r1, [r0, #0]
    7cda:	7041      	strb	r1, [r0, #1]
    7cdc:	7081      	strb	r1, [r0, #2]
    7cde:	4770      	bx	lr
    7ce0:	20000361 	.word	0x20000361

00007ce4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7ce4:	480b      	ldr	r0, [pc, #44]	; (7d14 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7ce6:	b510      	push	{r4, lr}
    7ce8:	7800      	ldrb	r0, [r0, #0]
    7cea:	b158      	cbz	r0, 7d04 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7cec:	f44f 7182 	mov.w	r1, #260	; 0x104
    7cf0:	4809      	ldr	r0, [pc, #36]	; (7d18 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7cf2:	f008 fde3 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cf6:	b140      	cbz	r0, 7d0a <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7cf8:	4808      	ldr	r0, [pc, #32]	; (7d1c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7cfa:	6800      	ldr	r0, [r0, #0]
    7cfc:	2800      	cmp	r0, #0
    7cfe:	d000      	beq.n	7d02 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7d00:	2001      	movs	r0, #1
    7d02:	bd10      	pop	{r4, pc}
    7d04:	f240 2123 	movw	r1, #547	; 0x223
    7d08:	e001      	b.n	7d0e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7d0a:	f44f 7109 	mov.w	r1, #548	; 0x224
    7d0e:	203c      	movs	r0, #60	; 0x3c
    7d10:	f7f8 fea8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d14:	20000361 	.word	0x20000361
    7d18:	4000f000 	.word	0x4000f000
    7d1c:	4000f400 	.word	0x4000f400

00007d20 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7d20:	4801      	ldr	r0, [pc, #4]	; (7d28 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7d22:	2101      	movs	r1, #1
    7d24:	6081      	str	r1, [r0, #8]
    7d26:	4770      	bx	lr
    7d28:	4000f000 	.word	0x4000f000

00007d2c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d30:	481b      	ldr	r0, [pc, #108]	; (7da0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7d32:	7800      	ldrb	r0, [r0, #0]
    7d34:	b1d8      	cbz	r0, 7d6e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7d36:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7da4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7d3a:	f44f 7682 	mov.w	r6, #260	; 0x104
    7d3e:	4631      	mov	r1, r6
    7d40:	4640      	mov	r0, r8
    7d42:	f008 fdbb 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d46:	2800      	cmp	r0, #0
    7d48:	d128      	bne.n	7d9c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7d4a:	2002      	movs	r0, #2
    7d4c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7d50:	4c15      	ldr	r4, [pc, #84]	; (7da8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7d52:	6820      	ldr	r0, [r4, #0]
    7d54:	43c0      	mvns	r0, r0
    7d56:	f340 1500 	sbfx	r5, r0, #4, #1
    7d5a:	6820      	ldr	r0, [r4, #0]
    7d5c:	f040 0010 	orr.w	r0, r0, #16
    7d60:	6020      	str	r0, [r4, #0]
    7d62:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7d66:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7d6a:	1c6d      	adds	r5, r5, #1
    7d6c:	e008      	b.n	7d80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7d6e:	f240 212f 	movw	r1, #559	; 0x22f
    7d72:	203c      	movs	r0, #60	; 0x3c
    7d74:	f7f8 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d78:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7d7c:	f009 f886 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7d80:	4631      	mov	r1, r6
    7d82:	4640      	mov	r0, r8
    7d84:	f008 fd9a 	bl	108bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d88:	2800      	cmp	r0, #0
    7d8a:	d0f5      	beq.n	7d78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7d8c:	b91d      	cbnz	r5, 7d96 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7d8e:	6820      	ldr	r0, [r4, #0]
    7d90:	f020 0010 	bic.w	r0, r0, #16
    7d94:	6020      	str	r0, [r4, #0]
    7d96:	2002      	movs	r0, #2
    7d98:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7da0:	20000361 	.word	0x20000361
    7da4:	4000f000 	.word	0x4000f000
    7da8:	e000ed10 	.word	0xe000ed10
    7dac:	4902      	ldr	r1, [pc, #8]	; (7db8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7dae:	4801      	ldr	r0, [pc, #4]	; (7db4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7db0:	6008      	str	r0, [r1, #0]
    7db2:	4770      	bx	lr
    7db4:	02020000 	.word	0x02020000
    7db8:	4001f508 	.word	0x4001f508
    7dbc:	00010000 	.word	0x00010000

00007dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7dc0:	b510      	push	{r4, lr}
    7dc2:	4604      	mov	r4, r0
    7dc4:	f000 f820 	bl	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7dc8:	2c00      	cmp	r4, #0
    7dca:	d00e      	beq.n	7dea <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7dcc:	4a0b      	ldr	r2, [pc, #44]	; (7dfc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7dce:	480b      	ldr	r0, [pc, #44]	; (7dfc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7dd0:	490b      	ldr	r1, [pc, #44]	; (7e00 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7dd2:	3214      	adds	r2, #20
    7dd4:	2c01      	cmp	r4, #1
    7dd6:	d005      	beq.n	7de4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7dd8:	2c02      	cmp	r4, #2
    7dda:	d007      	beq.n	7dec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7ddc:	2182      	movs	r1, #130	; 0x82
    7dde:	203d      	movs	r0, #61	; 0x3d
    7de0:	f7f8 fe40 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7de4:	2302      	movs	r3, #2
    7de6:	6003      	str	r3, [r0, #0]
    7de8:	6011      	str	r1, [r2, #0]
    7dea:	bd10      	pop	{r4, pc}
    7dec:	2303      	movs	r3, #3
    7dee:	6003      	str	r3, [r0, #0]
    7df0:	6011      	str	r1, [r2, #0]
    7df2:	4904      	ldr	r1, [pc, #16]	; (7e04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7df4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7df8:	6008      	str	r0, [r1, #0]
    7dfa:	bd10      	pop	{r4, pc}
    7dfc:	4000f500 	.word	0x4000f500
    7e00:	2000183c 	.word	0x2000183c
    7e04:	4001f504 	.word	0x4001f504
    7e08:	4805      	ldr	r0, [pc, #20]	; (7e20 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7e0a:	b510      	push	{r4, lr}
    7e0c:	2100      	movs	r1, #0
    7e0e:	6001      	str	r1, [r0, #0]
    7e10:	6001      	str	r1, [r0, #0]
    7e12:	f7ff ff51 	bl	7cb8 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7e16:	4903      	ldr	r1, [pc, #12]	; (7e24 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7e18:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e1c:	6008      	str	r0, [r1, #0]
    7e1e:	bd10      	pop	{r4, pc}
    7e20:	4000f500 	.word	0x4000f500
    7e24:	4001f508 	.word	0x4001f508

00007e28 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7e28:	4805      	ldr	r0, [pc, #20]	; (7e40 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7e2a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7e2e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7e32:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7e36:	2100      	movs	r1, #0
    7e38:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7e3c:	4770      	bx	lr
    7e3e:	0000      	.short	0x0000
    7e40:	40001000 	.word	0x40001000

00007e44 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7e44:	4904      	ldr	r1, [pc, #16]	; (7e58 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7e46:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7e4a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7e4e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7e52:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7e56:	4770      	bx	lr
    7e58:	40001000 	.word	0x40001000

00007e5c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7e5c:	4902      	ldr	r1, [pc, #8]	; (7e68 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7e5e:	5c08      	ldrb	r0, [r1, r0]
    7e60:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7e64:	4770      	bx	lr
    7e66:	0000      	.short	0x0000
    7e68:	00008b2e 	.word	0x00008b2e

00007e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e6e:	4c24      	ldr	r4, [pc, #144]	; (7f00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7e70:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7e74:	f010 0f10 	tst.w	r0, #16
    7e78:	d001      	beq.n	7e7e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7e7a:	2701      	movs	r7, #1
    7e7c:	e000      	b.n	7e80 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7e7e:	2700      	movs	r7, #0
    7e80:	2010      	movs	r0, #16
    7e82:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7e86:	2002      	movs	r0, #2
    7e88:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7e8c:	481d      	ldr	r0, [pc, #116]	; (7f04 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7e8e:	2500      	movs	r5, #0
    7e90:	491d      	ldr	r1, [pc, #116]	; (7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7e92:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7e96:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7e9a:	6008      	str	r0, [r1, #0]
    7e9c:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ea0:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ea4:	f010 0fff 	tst.w	r0, #255	; 0xff
    7ea8:	d019      	beq.n	7ede <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7eaa:	20ff      	movs	r0, #255	; 0xff
    7eac:	f88d 0000 	strb.w	r0, [sp]
    7eb0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7eb4:	2001      	movs	r0, #1
    7eb6:	6120      	str	r0, [r4, #16]
    7eb8:	e005      	b.n	7ec6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7eba:	bf00      	nop
    7ebc:	f89d 0000 	ldrb.w	r0, [sp]
    7ec0:	1e40      	subs	r0, r0, #1
    7ec2:	f88d 0000 	strb.w	r0, [sp]
    7ec6:	f89d 0000 	ldrb.w	r0, [sp]
    7eca:	b128      	cbz	r0, 7ed8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7ecc:	4631      	mov	r1, r6
    7ece:	4620      	mov	r0, r4
    7ed0:	f008 fd23 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7ed4:	2800      	cmp	r0, #0
    7ed6:	d0f1      	beq.n	7ebc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7ed8:	f89d 0000 	ldrb.w	r0, [sp]
    7edc:	b158      	cbz	r0, 7ef6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7ede:	f000 fc15 	bl	870c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7ee2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7ee6:	f000 fda3 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7eea:	2f00      	cmp	r7, #0
    7eec:	d002      	beq.n	7ef4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7eee:	2010      	movs	r0, #16
    7ef0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ef6:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7efa:	203e      	movs	r0, #62	; 0x3e
    7efc:	f7f8 fdb2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f00:	40001000 	.word	0x40001000
    7f04:	20000f48 	.word	0x20000f48
    7f08:	4001f508 	.word	0x4001f508

00007f0c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f10:	4d18      	ldr	r5, [pc, #96]	; (7f74 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7f12:	4607      	mov	r7, r0
    7f14:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7f18:	07c2      	lsls	r2, r0, #31
    7f1a:	d00f      	beq.n	7f3c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7f1c:	4c16      	ldr	r4, [pc, #88]	; (7f78 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7f1e:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7f22:	f042 0201 	orr.w	r2, r2, #1
    7f26:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7f2a:	f040 0002 	orr.w	r0, r0, #2
    7f2e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7f32:	2601      	movs	r6, #1
    7f34:	b13f      	cbz	r7, 7f46 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7f36:	2f01      	cmp	r7, #1
    7f38:	d00b      	beq.n	7f52 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7f3a:	e010      	b.n	7f5e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f3c:	f240 7185 	movw	r1, #1925	; 0x785
    7f40:	203e      	movs	r0, #62	; 0x3e
    7f42:	f7f8 fd8f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f46:	4608      	mov	r0, r1
    7f48:	f000 fdcc 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7f4c:	726e      	strb	r6, [r5, #9]
    7f4e:	6026      	str	r6, [r4, #0]
    7f50:	e005      	b.n	7f5e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f52:	4608      	mov	r0, r1
    7f54:	f000 fdac 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7f58:	2002      	movs	r0, #2
    7f5a:	7268      	strb	r0, [r5, #9]
    7f5c:	6066      	str	r6, [r4, #4]
    7f5e:	4807      	ldr	r0, [pc, #28]	; (7f7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f60:	64c6      	str	r6, [r0, #76]	; 0x4c
    7f62:	4806      	ldr	r0, [pc, #24]	; (7f7c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f64:	300c      	adds	r0, #12
    7f66:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7f6a:	4638      	mov	r0, r7
    7f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f70:	f000 bd30 	b.w	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7f74:	20000f48 	.word	0x20000f48
    7f78:	40001000 	.word	0x40001000
    7f7c:	40008000 	.word	0x40008000

00007f80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f84:	4c2c      	ldr	r4, [pc, #176]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7f86:	0006      	movs	r6, r0
    7f88:	4d2c      	ldr	r5, [pc, #176]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7f8a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7f8e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>
    7f92:	f040 0002 	orr.w	r0, r0, #2
    7f96:	4689      	mov	r9, r1
    7f98:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7f9c:	f04f 0700 	mov.w	r7, #0
    7fa0:	d002      	beq.n	7fa8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7fa2:	2e01      	cmp	r6, #1
    7fa4:	d020      	beq.n	7fe8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7fa6:	e036      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fa8:	4608      	mov	r0, r1
    7faa:	f000 fd9b 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7fae:	2001      	movs	r0, #1
    7fb0:	7260      	strb	r0, [r4, #9]
    7fb2:	79e0      	ldrb	r0, [r4, #7]
    7fb4:	2801      	cmp	r0, #1
    7fb6:	d105      	bne.n	7fc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7fb8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7fbc:	f040 0008 	orr.w	r0, r0, #8
    7fc0:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7fc4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7fc6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7fca:	62a0      	str	r0, [r4, #40]	; 0x28
    7fcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7fd0:	f8c8 0000 	str.w	r0, [r8]
    7fd4:	491b      	ldr	r1, [pc, #108]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    7fd6:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7fda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7fde:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7fe2:	fbb0 f7f1 	udiv	r7, r0, r1
    7fe6:	e016      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fe8:	4608      	mov	r0, r1
    7fea:	f000 fd61 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7fee:	2002      	movs	r0, #2
    7ff0:	7260      	strb	r0, [r4, #9]
    7ff2:	79e0      	ldrb	r0, [r4, #7]
    7ff4:	2801      	cmp	r0, #1
    7ff6:	d105      	bne.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7ff8:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7ffc:	f040 0004 	orr.w	r0, r0, #4
    8000:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8004:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8006:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    800a:	62a0      	str	r0, [r4, #40]	; 0x28
    800c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    8010:	f8c8 0000 	str.w	r0, [r8]
    8014:	2729      	movs	r7, #41	; 0x29
    8016:	f000 fbe5 	bl	87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    801a:	f008 fdf8 	bl	10c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    801e:	b120      	cbz	r0, 802a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a>
    8020:	f7ff ff24 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8024:	2000      	movs	r0, #0
    8026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    802a:	2100      	movs	r1, #0
    802c:	4630      	mov	r0, r6
    802e:	f000 fcd1 	bl	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8032:	4638      	mov	r0, r7
    8034:	e7f7      	b.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    8036:	0000      	.short	0x0000
    8038:	20000f48 	.word	0x20000f48
    803c:	40001000 	.word	0x40001000
    8040:	4001f504 	.word	0x4001f504
    8044:	00008b28 	.word	0x00008b28

00008048 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8048:	b510      	push	{r4, lr}
    804a:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    804c:	4901      	ldr	r1, [pc, #4]	; (8054 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    804e:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    8052:	bd10      	pop	{r4, pc}
    8054:	20000f38 	.word	0x20000f38

00008058 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	4c0f      	ldr	r4, [pc, #60]	; (8098 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    805c:	4603      	mov	r3, r0
    805e:	2002      	movs	r0, #2
    8060:	7320      	strb	r0, [r4, #12]
    8062:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8066:	2096      	movs	r0, #150	; 0x96
    8068:	f894 1020 	ldrb.w	r1, [r4, #32]
    806c:	7d22      	ldrb	r2, [r4, #20]
    806e:	2d01      	cmp	r5, #1
    8070:	d00e      	beq.n	8090 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8072:	f000 fd95 	bl	8ba0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8076:	6120      	str	r0, [r4, #16]
    8078:	4808      	ldr	r0, [pc, #32]	; (809c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    807a:	2100      	movs	r1, #0
    807c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8080:	6921      	ldr	r1, [r4, #16]
    8082:	69e0      	ldr	r0, [r4, #28]
    8084:	4408      	add	r0, r1
    8086:	4905      	ldr	r1, [pc, #20]	; (809c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    8088:	1d09      	adds	r1, r1, #4
    808a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    808e:	bd70      	pop	{r4, r5, r6, pc}
    8090:	f000 fda4 	bl	8bdc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8094:	e7ef      	b.n	8076 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    8096:	0000      	.short	0x0000
    8098:	20000f48 	.word	0x20000f48
    809c:	40008000 	.word	0x40008000

000080a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    80a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a4:	2238      	movs	r2, #56	; 0x38
    80a6:	2100      	movs	r1, #0
    80a8:	4813      	ldr	r0, [pc, #76]	; (80f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    80aa:	f008 ffc6 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ae:	f000 fcbf 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    80b2:	f008 fe80 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    80b6:	4d11      	ldr	r5, [pc, #68]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80b8:	4e10      	ldr	r6, [pc, #64]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80ba:	2400      	movs	r4, #0
    80bc:	4f0f      	ldr	r7, [pc, #60]	; (80fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80be:	3508      	adds	r5, #8
    80c0:	3610      	adds	r6, #16
    80c2:	b928      	cbnz	r0, 80d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    80c4:	f008 fe8e 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    80c8:	b910      	cbnz	r0, 80d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    80ca:	f008 fe95 	bl	10df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    80ce:	b108      	cbz	r0, 80d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    80d0:	2224      	movs	r2, #36	; 0x24
    80d2:	e006      	b.n	80e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80d4:	f008 fed0 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    80d8:	b910      	cbnz	r0, 80e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    80da:	f008 fec3 	bl	10e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    80de:	b140      	cbz	r0, 80f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    80e0:	2240      	movs	r2, #64	; 0x40
    80e2:	21ff      	movs	r1, #255	; 0xff
    80e4:	4638      	mov	r0, r7
    80e6:	f008 ffa8 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80ea:	602c      	str	r4, [r5, #0]
    80ec:	6034      	str	r4, [r6, #0]
    80ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80f2:	2238      	movs	r2, #56	; 0x38
    80f4:	e7f5      	b.n	80e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    80f6:	0000      	.short	0x0000
    80f8:	20000f48 	.word	0x20000f48
    80fc:	40000e00 	.word	0x40000e00

00008100 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8100:	4801      	ldr	r0, [pc, #4]	; (8108 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8102:	69c0      	ldr	r0, [r0, #28]
    8104:	4770      	bx	lr
    8106:	0000      	.short	0x0000
    8108:	20000f48 	.word	0x20000f48

0000810c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    810c:	b510      	push	{r4, lr}
    810e:	f000 fc43 	bl	8998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8112:	f7ff feab 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8116:	f004 fd27 	bl	cb68 <mpsl_fem_disable>
    811a:	b130      	cbz	r0, 812a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    811c:	1c40      	adds	r0, r0, #1
    811e:	d004      	beq.n	812a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8120:	f240 516d 	movw	r1, #1389	; 0x56d
    8124:	203e      	movs	r0, #62	; 0x3e
    8126:	f7f8 fc9d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    812a:	480f      	ldr	r0, [pc, #60]	; (8168 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    812c:	4a0f      	ldr	r2, [pc, #60]	; (816c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    812e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8130:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8134:	6011      	str	r1, [r2, #0]
    8136:	2400      	movs	r4, #0
    8138:	6284      	str	r4, [r0, #40]	; 0x28
    813a:	7304      	strb	r4, [r0, #12]
    813c:	61c4      	str	r4, [r0, #28]
    813e:	6184      	str	r4, [r0, #24]
    8140:	f000 fc2a 	bl	8998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8144:	480a      	ldr	r0, [pc, #40]	; (8170 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8146:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    814a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    814e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    8152:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8156:	2001      	movs	r0, #1
    8158:	f008 fbce 	bl	108f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    815c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8160:	2001      	movs	r0, #1
    8162:	f008 bbbc 	b.w	108de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8166:	0000      	.short	0x0000
    8168:	20000f48 	.word	0x20000f48
    816c:	4001f508 	.word	0x4001f508
    8170:	40008000 	.word	0x40008000

00008174 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    8174:	b570      	push	{r4, r5, r6, lr}
    8176:	2001      	movs	r0, #1
    8178:	f008 fbbe 	bl	108f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    817c:	4c37      	ldr	r4, [pc, #220]	; (825c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    817e:	2000      	movs	r0, #0
    8180:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    8184:	2001      	movs	r0, #1
    8186:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    818a:	f008 fe4b 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    818e:	4d34      	ldr	r5, [pc, #208]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8190:	b118      	cbz	r0, 819a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    8192:	6828      	ldr	r0, [r5, #0]
    8194:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    8198:	6028      	str	r0, [r5, #0]
    819a:	f008 fe37 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    819e:	b128      	cbz	r0, 81ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    81a0:	6828      	ldr	r0, [r5, #0]
    81a2:	4930      	ldr	r1, [pc, #192]	; (8264 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    81a4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    81a8:	4308      	orrs	r0, r1
    81aa:	6028      	str	r0, [r5, #0]
    81ac:	f008 fe4a 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    81b0:	b138      	cbz	r0, 81c2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    81b2:	482b      	ldr	r0, [pc, #172]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81b4:	1d00      	adds	r0, r0, #4
    81b6:	6801      	ldr	r1, [r0, #0]
    81b8:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    81bc:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    81c0:	6001      	str	r1, [r0, #0]
    81c2:	4927      	ldr	r1, [pc, #156]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81c4:	4828      	ldr	r0, [pc, #160]	; (8268 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    81c6:	313c      	adds	r1, #60	; 0x3c
    81c8:	6008      	str	r0, [r1, #0]
    81ca:	f004 fd07 	bl	cbdc <mpsl_fem_device_config_254_apply_get>
    81ce:	b140      	cbz	r0, 81e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81d0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    81d4:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    81d8:	1c41      	adds	r1, r0, #1
    81da:	d002      	beq.n	81e2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    81dc:	4920      	ldr	r1, [pc, #128]	; (8260 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81de:	3110      	adds	r1, #16
    81e0:	6008      	str	r0, [r1, #0]
    81e2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    81e6:	6e00      	ldr	r0, [r0, #96]	; 0x60
    81e8:	1c41      	adds	r1, r0, #1
    81ea:	d004      	beq.n	81f6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    81ec:	491f      	ldr	r1, [pc, #124]	; (826c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    81ee:	680a      	ldr	r2, [r1, #0]
    81f0:	f360 4217 	bfi	r2, r0, #16, #8
    81f4:	600a      	str	r2, [r1, #0]
    81f6:	f240 1103 	movw	r1, #259	; 0x103
    81fa:	f240 605b 	movw	r0, #1627	; 0x65b
    81fe:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8202:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8206:	2001      	movs	r0, #1
    8208:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    820c:	f000 f842 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8210:	f240 2001 	movw	r0, #513	; 0x201
    8214:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8218:	2002      	movs	r0, #2
    821a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    821e:	4914      	ldr	r1, [pc, #80]	; (8270 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8220:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8224:	6008      	str	r0, [r1, #0]
    8226:	4913      	ldr	r1, [pc, #76]	; (8274 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8228:	2000      	movs	r0, #0
    822a:	4d13      	ldr	r5, [pc, #76]	; (8278 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    822c:	8608      	strh	r0, [r1, #48]	; 0x30
    822e:	3110      	adds	r1, #16
    8230:	61c8      	str	r0, [r1, #28]
    8232:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8236:	7028      	strb	r0, [r5, #0]
    8238:	2001      	movs	r0, #1
    823a:	f008 fb50 	bl	108de <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    823e:	2010      	movs	r0, #16
    8240:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8244:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8248:	2002      	movs	r0, #2
    824a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    824e:	6868      	ldr	r0, [r5, #4]
    8250:	2800      	cmp	r0, #0
    8252:	d002      	beq.n	825a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    8254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8258:	4700      	bx	r0
    825a:	bd70      	pop	{r4, r5, r6, pc}
    825c:	40001000 	.word	0x40001000
    8260:	4000173c 	.word	0x4000173c
    8264:	80000096 	.word	0x80000096
    8268:	8900002c 	.word	0x8900002c
    826c:	4000158c 	.word	0x4000158c
    8270:	4001f504 	.word	0x4001f504
    8274:	20000f38 	.word	0x20000f38
    8278:	200002a0 	.word	0x200002a0

0000827c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    827c:	4901      	ldr	r1, [pc, #4]	; (8284 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    827e:	7548      	strb	r0, [r1, #21]
    8280:	4770      	bx	lr
    8282:	0000      	.short	0x0000
    8284:	20000f48 	.word	0x20000f48

00008288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    8288:	4901      	ldr	r1, [pc, #4]	; (8290 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    828a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    828e:	4770      	bx	lr
    8290:	00008b7c 	.word	0x00008b7c

00008294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    8294:	4908      	ldr	r1, [pc, #32]	; (82b8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    8296:	b510      	push	{r4, lr}
    8298:	7508      	strb	r0, [r1, #20]
    829a:	4908      	ldr	r1, [pc, #32]	; (82bc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    829c:	2801      	cmp	r0, #1
    829e:	d006      	beq.n	82ae <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    82a0:	2802      	cmp	r0, #2
    82a2:	d006      	beq.n	82b2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    82a4:	f640 5186 	movw	r1, #3462	; 0xd86
    82a8:	203e      	movs	r0, #62	; 0x3e
    82aa:	f7f8 fbdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82ae:	2003      	movs	r0, #3
    82b0:	e000      	b.n	82b4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    82b2:	2004      	movs	r0, #4
    82b4:	6008      	str	r0, [r1, #0]
    82b6:	bd10      	pop	{r4, pc}
    82b8:	20000f48 	.word	0x20000f48
    82bc:	40001510 	.word	0x40001510

000082c0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    82c0:	4905      	ldr	r1, [pc, #20]	; (82d8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    82c2:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    82c6:	4805      	ldr	r0, [pc, #20]	; (82dc <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    82c8:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    82cc:	f041 0101 	orr.w	r1, r1, #1
    82d0:	7001      	strb	r1, [r0, #0]
    82d2:	f000 ba4d 	b.w	8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    82d6:	0000      	.short	0x0000
    82d8:	40001000 	.word	0x40001000
    82dc:	20000f48 	.word	0x20000f48

000082e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    82e0:	4901      	ldr	r1, [pc, #4]	; (82e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    82e2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82e6:	4770      	bx	lr
    82e8:	00008b88 	.word	0x00008b88

000082ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    82ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82f0:	4e30      	ldr	r6, [pc, #192]	; (83b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    82f2:	4c31      	ldr	r4, [pc, #196]	; (83b8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    82f4:	4688      	mov	r8, r1
    82f6:	0007      	movs	r7, r0
    82f8:	4615      	mov	r5, r2
    82fa:	f04f 0901 	mov.w	r9, #1
    82fe:	d006      	beq.n	830e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8300:	2f01      	cmp	r7, #1
    8302:	d012      	beq.n	832a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8304:	f640 012d 	movw	r1, #2093	; 0x82d
    8308:	203e      	movs	r0, #62	; 0x3e
    830a:	f7f8 fbab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    830e:	4610      	mov	r0, r2
    8310:	f000 fbe8 	bl	8ae4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8314:	4829      	ldr	r0, [pc, #164]	; (83bc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8316:	f884 9009 	strb.w	r9, [r4, #9]
    831a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    831e:	4640      	mov	r0, r8
    8320:	f000 fb8e 	bl	8a40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8324:	4605      	mov	r5, r0
    8326:	4630      	mov	r0, r6
    8328:	e00c      	b.n	8344 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    832a:	4610      	mov	r0, r2
    832c:	f000 fbc0 	bl	8ab0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8330:	2002      	movs	r0, #2
    8332:	7260      	strb	r0, [r4, #9]
    8334:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8338:	4640      	mov	r0, r8
    833a:	f000 fb81 	bl	8a40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    833e:	4605      	mov	r5, r0
    8340:	481c      	ldr	r0, [pc, #112]	; (83b4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8342:	1d00      	adds	r0, r0, #4
    8344:	f000 fb3a 	bl	89bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8348:	f8df 8074 	ldr.w	r8, [pc, #116]	; 83c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    834c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8350:	f8df a074 	ldr.w	sl, [pc, #116]	; 83c8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8354:	481b      	ldr	r0, [pc, #108]	; (83c4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8356:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    835a:	2010      	movs	r0, #16
    835c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8360:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8362:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8366:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    836a:	62a0      	str	r0, [r4, #40]	; 0x28
    836c:	4817      	ldr	r0, [pc, #92]	; (83cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    836e:	6006      	str	r6, [r0, #0]
    8370:	f000 fa38 	bl	87e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    8374:	4641      	mov	r1, r8
    8376:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    837a:	4811      	ldr	r0, [pc, #68]	; (83c0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    837c:	300c      	adds	r0, #12
    837e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8382:	42a8      	cmp	r0, r5
    8384:	d310      	bcc.n	83a8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    8386:	2000      	movs	r0, #0
    8388:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    838c:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    8390:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8392:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    8396:	62a0      	str	r0, [r4, #40]	; 0x28
    8398:	480c      	ldr	r0, [pc, #48]	; (83cc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    839a:	1d00      	adds	r0, r0, #4
    839c:	6006      	str	r6, [r0, #0]
    839e:	f7ff fd65 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    83a2:	2000      	movs	r0, #0
    83a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83a8:	4629      	mov	r1, r5
    83aa:	4638      	mov	r0, r7
    83ac:	f000 fb12 	bl	89d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    83b0:	2001      	movs	r0, #1
    83b2:	e7f7      	b.n	83a4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    83b4:	40001000 	.word	0x40001000
    83b8:	20000f48 	.word	0x20000f48
    83bc:	00008b28 	.word	0x00008b28
    83c0:	40008000 	.word	0x40008000
    83c4:	40008140 	.word	0x40008140
    83c8:	4001f098 	.word	0x4001f098
    83cc:	4001f504 	.word	0x4001f504

000083d0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    83d0:	4b0d      	ldr	r3, [pc, #52]	; (8408 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    83d2:	b510      	push	{r4, lr}
    83d4:	71d8      	strb	r0, [r3, #7]
    83d6:	729a      	strb	r2, [r3, #10]
    83d8:	b151      	cbz	r1, 83f0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    83da:	2002      	movs	r0, #2
    83dc:	7218      	strb	r0, [r3, #8]
    83de:	2801      	cmp	r0, #1
    83e0:	d008      	beq.n	83f4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    83e2:	2802      	cmp	r0, #2
    83e4:	d00f      	beq.n	8406 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83e6:	f640 2163 	movw	r1, #2659	; 0xa63
    83ea:	203e      	movs	r0, #62	; 0x3e
    83ec:	f7f8 fb3a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83f0:	2001      	movs	r0, #1
    83f2:	e7f3      	b.n	83dc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    83f4:	7a58      	ldrb	r0, [r3, #9]
    83f6:	2802      	cmp	r0, #2
    83f8:	d105      	bne.n	8406 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    83fa:	f000 f97d 	bl	86f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    83fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8402:	f000 bab1 	b.w	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8406:	bd10      	pop	{r4, pc}
    8408:	20000f48 	.word	0x20000f48

0000840c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    840c:	4902      	ldr	r1, [pc, #8]	; (8418 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    840e:	2000      	movs	r0, #0
    8410:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8414:	4770      	bx	lr
    8416:	0000      	.short	0x0000
    8418:	40008000 	.word	0x40008000

0000841c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    841c:	4904      	ldr	r1, [pc, #16]	; (8430 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    841e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8422:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8426:	4249      	negs	r1, r1
    8428:	7001      	strb	r1, [r0, #0]
    842a:	2001      	movs	r0, #1
    842c:	4770      	bx	lr
    842e:	0000      	.short	0x0000
    8430:	40001000 	.word	0x40001000

00008434 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8434:	4903      	ldr	r1, [pc, #12]	; (8444 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8436:	0e02      	lsrs	r2, r0, #24
    8438:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    843c:	0200      	lsls	r0, r0, #8
    843e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8442:	4770      	bx	lr
    8444:	40001000 	.word	0x40001000

00008448 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8448:	4901      	ldr	r1, [pc, #4]	; (8450 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    844a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    844e:	4770      	bx	lr
    8450:	40001000 	.word	0x40001000

00008454 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8454:	b510      	push	{r4, lr}
    8456:	2200      	movs	r2, #0
    8458:	2901      	cmp	r1, #1
    845a:	d006      	beq.n	846a <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    845c:	2902      	cmp	r1, #2
    845e:	d002      	beq.n	8466 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    8460:	f240 21d9 	movw	r1, #729	; 0x2d9
    8464:	e014      	b.n	8490 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    8466:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    846a:	490b      	ldr	r1, [pc, #44]	; (8498 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    846c:	430a      	orrs	r2, r1
    846e:	490b      	ldr	r1, [pc, #44]	; (849c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8470:	600a      	str	r2, [r1, #0]
    8472:	490b      	ldr	r1, [pc, #44]	; (84a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8474:	4308      	orrs	r0, r1
    8476:	4909      	ldr	r1, [pc, #36]	; (849c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    8478:	1d09      	adds	r1, r1, #4
    847a:	6008      	str	r0, [r1, #0]
    847c:	4809      	ldr	r0, [pc, #36]	; (84a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    847e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8482:	b2c0      	uxtb	r0, r0
    8484:	2803      	cmp	r0, #3
    8486:	d001      	beq.n	848c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    8488:	280b      	cmp	r0, #11
    848a:	d104      	bne.n	8496 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    848c:	f240 21f1 	movw	r1, #753	; 0x2f1
    8490:	203e      	movs	r0, #62	; 0x3e
    8492:	f7f8 fae7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8496:	bd10      	pop	{r4, pc}
    8498:	00100108 	.word	0x00100108
    849c:	40001514 	.word	0x40001514
    84a0:	02030000 	.word	0x02030000
    84a4:	40001000 	.word	0x40001000

000084a8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    84a8:	4901      	ldr	r1, [pc, #4]	; (84b0 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    84aa:	7588      	strb	r0, [r1, #22]
    84ac:	4770      	bx	lr
    84ae:	0000      	.short	0x0000
    84b0:	20000f48 	.word	0x20000f48

000084b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    84b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84b8:	4853      	ldr	r0, [pc, #332]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84ba:	f04f 0a01 	mov.w	sl, #1
    84be:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    84c2:	4851      	ldr	r0, [pc, #324]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    84c4:	300c      	adds	r0, #12
    84c6:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    84ca:	f008 fb9e 	bl	10c0a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    84ce:	4c4f      	ldr	r4, [pc, #316]	; (860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    84d0:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    84d4:	f000 f91a 	bl	870c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    84d8:	494d      	ldr	r1, [pc, #308]	; (8610 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    84da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84dc:	6008      	str	r0, [r1, #0]
    84de:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8614 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    84e2:	2000      	movs	r0, #0
    84e4:	62a0      	str	r0, [r4, #40]	; 0x28
    84e6:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    84ea:	f240 131d 	movw	r3, #285	; 0x11d
    84ee:	439a      	bics	r2, r3
    84f0:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    84f4:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    84f8:	f000 f988 	bl	880c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    84fc:	4605      	mov	r5, r0
    84fe:	4842      	ldr	r0, [pc, #264]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8500:	3008      	adds	r0, #8
    8502:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8506:	4e40      	ldr	r6, [pc, #256]	; (8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8508:	61e0      	str	r0, [r4, #28]
    850a:	1d36      	adds	r6, r6, #4
    850c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8510:	61a0      	str	r0, [r4, #24]
    8512:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    8516:	7d21      	ldrb	r1, [r4, #20]
    8518:	f884 1020 	strb.w	r1, [r4, #32]
    851c:	7a61      	ldrb	r1, [r4, #9]
    851e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8522:	46a1      	mov	r9, r4
    8524:	2400      	movs	r4, #0
    8526:	4639      	mov	r1, r7
    8528:	4628      	mov	r0, r5
    852a:	f000 f9e3 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    852e:	b910      	cbnz	r0, 8536 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8530:	f8c8 a010 	str.w	sl, [r8, #16]
    8534:	2401      	movs	r4, #1
    8536:	4f35      	ldr	r7, [pc, #212]	; (860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8538:	07e8      	lsls	r0, r5, #31
    853a:	f1a7 0710 	sub.w	r7, r7, #16
    853e:	d002      	beq.n	8546 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8540:	6838      	ldr	r0, [r7, #0]
    8542:	4780      	blx	r0
    8544:	e034      	b.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8546:	07a8      	lsls	r0, r5, #30
    8548:	d529      	bpl.n	859e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    854a:	0768      	lsls	r0, r5, #29
    854c:	d421      	bmi.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    854e:	f008 fc79 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8552:	b9f0      	cbnz	r0, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8554:	f008 fc66 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8558:	b9d8      	cbnz	r0, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    855a:	482f      	ldr	r0, [pc, #188]	; (8618 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    855c:	6800      	ldr	r0, [r0, #0]
    855e:	f3c0 5242 	ubfx	r2, r0, #21, #3
    8562:	f3c0 6100 	ubfx	r1, r0, #24, #1
    8566:	f000 0c0f 	and.w	ip, r0, #15
    856a:	f3c0 1303 	ubfx	r3, r0, #4, #4
    856e:	f3c0 2803 	ubfx	r8, r0, #8, #4
    8572:	b171      	cbz	r1, 8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8574:	f1bc 0f00 	cmp.w	ip, #0
    8578:	d003      	beq.n	8582 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    857a:	b113      	cbz	r3, 8582 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    857c:	f1b8 0f00 	cmp.w	r8, #0
    8580:	d107      	bne.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8582:	f3c0 4004 	ubfx	r0, r0, #16, #5
    8586:	2801      	cmp	r0, #1
    8588:	d103      	bne.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    858a:	2a03      	cmp	r2, #3
    858c:	d201      	bcs.n	8592 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    858e:	f045 0504 	orr.w	r5, r5, #4
    8592:	f345 0080 	sbfx	r0, r5, #2, #1
    8596:	4621      	mov	r1, r4
    8598:	1c40      	adds	r0, r0, #1
    859a:	687a      	ldr	r2, [r7, #4]
    859c:	e007      	b.n	85ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    859e:	f015 0f28 	tst.w	r5, #40	; 0x28
    85a2:	d005      	beq.n	85b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    85a4:	f345 1140 	sbfx	r1, r5, #5, #1
    85a8:	68ba      	ldr	r2, [r7, #8]
    85aa:	4620      	mov	r0, r4
    85ac:	1c49      	adds	r1, r1, #1
    85ae:	4790      	blx	r2
    85b0:	06e8      	lsls	r0, r5, #27
    85b2:	d501      	bpl.n	85b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    85b4:	68f8      	ldr	r0, [r7, #12]
    85b6:	4780      	blx	r0
    85b8:	f899 1009 	ldrb.w	r1, [r9, #9]
    85bc:	4648      	mov	r0, r9
    85be:	2902      	cmp	r1, #2
    85c0:	d120      	bne.n	8604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    85c2:	7b01      	ldrb	r1, [r0, #12]
    85c4:	2900      	cmp	r1, #0
    85c6:	d01d      	beq.n	8604 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    85c8:	2902      	cmp	r1, #2
    85ca:	d004      	beq.n	85d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    85cc:	2901      	cmp	r1, #1
    85ce:	d009      	beq.n	85e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    85d0:	f640 4166 	movw	r1, #3174	; 0xc66
    85d4:	e00d      	b.n	85f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    85d6:	69c1      	ldr	r1, [r0, #28]
    85d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
    85dc:	4408      	add	r0, r1
    85de:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    85e2:	e00b      	b.n	85fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    85e4:	6901      	ldr	r1, [r0, #16]
    85e6:	f8d9 001c 	ldr.w	r0, [r9, #28]
    85ea:	4281      	cmp	r1, r0
    85ec:	d804      	bhi.n	85f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    85ee:	f640 4167 	movw	r1, #3175	; 0xc67
    85f2:	203e      	movs	r0, #62	; 0x3e
    85f4:	f7f8 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85f8:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    85fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8600:	f000 b9bc 	b.w	897c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8608:	40008000 	.word	0x40008000
    860c:	20000f48 	.word	0x20000f48
    8610:	4001f508 	.word	0x4001f508
    8614:	40001000 	.word	0x40001000
    8618:	40001450 	.word	0x40001450

0000861c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    861c:	b570      	push	{r4, r5, r6, lr}
    861e:	4b16      	ldr	r3, [pc, #88]	; (8678 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8620:	888c      	ldrh	r4, [r1, #4]
    8622:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    8626:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    862a:	780c      	ldrb	r4, [r1, #0]
    862c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8630:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8634:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8638:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    863c:	2401      	movs	r4, #1
    863e:	4084      	lsls	r4, r0
    8640:	b2c9      	uxtb	r1, r1
    8642:	b2e5      	uxtb	r5, r4
    8644:	4329      	orrs	r1, r5
    8646:	b132      	cbz	r2, 8656 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8648:	2a01      	cmp	r2, #1
    864a:	d00a      	beq.n	8662 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    864c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8650:	203e      	movs	r0, #62	; 0x3e
    8652:	f7f8 fa07 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8656:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    865a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    865e:	43a0      	bics	r0, r4
    8660:	e004      	b.n	866c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    8662:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    8666:	f3c0 2007 	ubfx	r0, r0, #8, #8
    866a:	4328      	orrs	r0, r5
    866c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8670:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    8674:	bd70      	pop	{r4, r5, r6, pc}
    8676:	0000      	.short	0x0000
    8678:	40001000 	.word	0x40001000

0000867c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    867c:	4901      	ldr	r1, [pc, #4]	; (8684 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    867e:	2001      	movs	r0, #1
    8680:	7008      	strb	r0, [r1, #0]
    8682:	4770      	bx	lr
    8684:	200002a0 	.word	0x200002a0
    8688:	480b      	ldr	r0, [pc, #44]	; (86b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    868a:	7d81      	ldrb	r1, [r0, #22]
    868c:	480b      	ldr	r0, [pc, #44]	; (86bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    868e:	5c40      	ldrb	r0, [r0, r1]
    8690:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8694:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8698:	d204      	bcs.n	86a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    869a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    869e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    86a2:	e001      	b.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    86a4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    86a8:	4a05      	ldr	r2, [pc, #20]	; (86c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    86aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    86ae:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    86b2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    86b6:	4770      	bx	lr
    86b8:	20000f48 	.word	0x20000f48
    86bc:	00008b2e 	.word	0x00008b2e
    86c0:	40001000 	.word	0x40001000
    86c4:	b508      	push	{r3, lr}
    86c6:	490b      	ldr	r1, [pc, #44]	; (86f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    86c8:	466b      	mov	r3, sp
    86ca:	f991 2015 	ldrsb.w	r2, [r1, #21]
    86ce:	7d89      	ldrb	r1, [r1, #22]
    86d0:	f000 fad0 	bl	8c74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    86d4:	f99d 0000 	ldrsb.w	r0, [sp]
    86d8:	f000 faa0 	bl	8c1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    86dc:	f10d 0001 	add.w	r0, sp, #1
    86e0:	f004 fa66 	bl	cbb0 <mpsl_fem_pa_gain_set>
    86e4:	2800      	cmp	r0, #0
    86e6:	d004      	beq.n	86f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    86e8:	f240 6115 	movw	r1, #1557	; 0x615
    86ec:	203e      	movs	r0, #62	; 0x3e
    86ee:	f7f8 f9b9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86f2:	bd08      	pop	{r3, pc}
    86f4:	20000f48 	.word	0x20000f48
    86f8:	4803      	ldr	r0, [pc, #12]	; (8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    86fa:	7a01      	ldrb	r1, [r0, #8]
    86fc:	2901      	cmp	r1, #1
    86fe:	d102      	bne.n	8706 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8700:	7a80      	ldrb	r0, [r0, #10]
    8702:	f7ff bfdf 	b.w	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8706:	4770      	bx	lr
    8708:	20000f48 	.word	0x20000f48
    870c:	480d      	ldr	r0, [pc, #52]	; (8744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    870e:	b510      	push	{r4, lr}
    8710:	7a40      	ldrb	r0, [r0, #9]
    8712:	2801      	cmp	r0, #1
    8714:	d00c      	beq.n	8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8716:	2802      	cmp	r0, #2
    8718:	d113      	bne.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    871a:	f004 fa2b 	bl	cb74 <mpsl_fem_lna_configuration_clear>
    871e:	2800      	cmp	r0, #0
    8720:	d00f      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8722:	1c40      	adds	r0, r0, #1
    8724:	d00d      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8726:	f640 01c1 	movw	r1, #2241	; 0x8c1
    872a:	203e      	movs	r0, #62	; 0x3e
    872c:	f7f8 f99a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8730:	f004 fa32 	bl	cb98 <mpsl_fem_pa_configuration_clear>
    8734:	2800      	cmp	r0, #0
    8736:	d004      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8738:	1c40      	adds	r0, r0, #1
    873a:	d002      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    873c:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8740:	e7f3      	b.n	872a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8742:	bd10      	pop	{r4, pc}
    8744:	20000f48 	.word	0x20000f48
    8748:	4808      	ldr	r0, [pc, #32]	; (876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    874a:	2100      	movs	r1, #0
    874c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8750:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8754:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8758:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    875c:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8760:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8764:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8768:	4770      	bx	lr
    876a:	0000      	.short	0x0000
    876c:	40001000 	.word	0x40001000
    8770:	4818      	ldr	r0, [pc, #96]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    8772:	b510      	push	{r4, lr}
    8774:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    8778:	07c1      	lsls	r1, r0, #31
    877a:	d029      	beq.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    877c:	0781      	lsls	r1, r0, #30
    877e:	d514      	bpl.n	87aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    8780:	4815      	ldr	r0, [pc, #84]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8782:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8786:	f041 0101 	orr.w	r1, r1, #1
    878a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    878e:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8792:	b2c0      	uxtb	r0, r0
    8794:	280b      	cmp	r0, #11
    8796:	d005      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    8798:	280a      	cmp	r0, #10
    879a:	d003      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    879c:	2803      	cmp	r0, #3
    879e:	d001      	beq.n	87a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    87a0:	2802      	cmp	r0, #2
    87a2:	d115      	bne.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87a4:	f240 613e 	movw	r1, #1598	; 0x63e
    87a8:	e00f      	b.n	87ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    87aa:	0740      	lsls	r0, r0, #29
    87ac:	d510      	bpl.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87ae:	480a      	ldr	r0, [pc, #40]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    87b0:	490a      	ldr	r1, [pc, #40]	; (87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    87b2:	3008      	adds	r0, #8
    87b4:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    87b8:	f44f 71a0 	mov.w	r1, #320	; 0x140
    87bc:	4808      	ldr	r0, [pc, #32]	; (87e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    87be:	f008 f8b1 	bl	10924 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    87c2:	2800      	cmp	r0, #0
    87c4:	d004      	beq.n	87d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87c6:	f240 6146 	movw	r1, #1606	; 0x646
    87ca:	203e      	movs	r0, #62	; 0x3e
    87cc:	f7f8 f94a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87d0:	bd10      	pop	{r4, pc}
    87d2:	0000      	.short	0x0000
    87d4:	20000f48 	.word	0x20000f48
    87d8:	40001000 	.word	0x40001000
    87dc:	4001f098 	.word	0x4001f098
    87e0:	40008000 	.word	0x40008000
    87e4:	4808      	ldr	r0, [pc, #32]	; (8808 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    87e6:	4601      	mov	r1, r0
    87e8:	79c2      	ldrb	r2, [r0, #7]
    87ea:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    87ee:	b112      	cbz	r2, 87f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    87f0:	2a01      	cmp	r2, #1
    87f2:	d003      	beq.n	87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    87f4:	e006      	b.n	8804 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    87f6:	f041 0102 	orr.w	r1, r1, #2
    87fa:	e001      	b.n	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    87fc:	f041 0104 	orr.w	r1, r1, #4
    8800:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8804:	f7ff bfb4 	b.w	8770 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8808:	20000f48 	.word	0x20000f48
    880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8810:	4d34      	ldr	r5, [pc, #208]	; (88e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8812:	2400      	movs	r4, #0
    8814:	7b28      	ldrb	r0, [r5, #12]
    8816:	b138      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8818:	f44f 71a2 	mov.w	r1, #324	; 0x144
    881c:	4832      	ldr	r0, [pc, #200]	; (88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    881e:	f008 f881 	bl	10924 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8822:	b108      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8824:	2601      	movs	r6, #1
    8826:	e000      	b.n	882a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    8828:	2600      	movs	r6, #0
    882a:	7a68      	ldrb	r0, [r5, #9]
    882c:	4f2f      	ldr	r7, [pc, #188]	; (88ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    882e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8832:	2801      	cmp	r0, #1
    8834:	d002      	beq.n	883c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8836:	2802      	cmp	r0, #2
    8838:	d006      	beq.n	8848 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    883a:	e016      	b.n	886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    883c:	4638      	mov	r0, r7
    883e:	f008 f86c 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8842:	b190      	cbz	r0, 886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8844:	2408      	movs	r4, #8
    8846:	e010      	b.n	886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8848:	4638      	mov	r0, r7
    884a:	f008 f866 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    884e:	b100      	cbz	r0, 8852 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8850:	2402      	movs	r4, #2
    8852:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    8856:	43c0      	mvns	r0, r0
    8858:	f340 0000 	sbfx	r0, r0, #0, #1
    885c:	1c40      	adds	r0, r0, #1
    885e:	d101      	bne.n	8864 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    8860:	f044 0404 	orr.w	r4, r4, #4
    8864:	b10e      	cbz	r6, 886a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8866:	f044 0401 	orr.w	r4, r4, #1
    886a:	f014 0f0b 	tst.w	r4, #11
    886e:	d107      	bne.n	8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    8870:	f44f 7188 	mov.w	r1, #272	; 0x110
    8874:	4638      	mov	r0, r7
    8876:	f008 f850 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    887a:	b108      	cbz	r0, 8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    887c:	f044 0410 	orr.w	r4, r4, #16
    8880:	481b      	ldr	r0, [pc, #108]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    8882:	7800      	ldrb	r0, [r0, #0]
    8884:	b1f8      	cbz	r0, 88c6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    8886:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    888a:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    888e:	d007      	beq.n	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    8890:	f44f 718a 	mov.w	r1, #276	; 0x114
    8894:	4638      	mov	r0, r7
    8896:	f008 f840 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    889a:	b108      	cbz	r0, 88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    889c:	2001      	movs	r0, #1
    889e:	e000      	b.n	88a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    88a0:	2000      	movs	r0, #0
    88a2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    88a6:	b13e      	cbz	r6, 88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    88a8:	f44f 718c 	mov.w	r1, #280	; 0x118
    88ac:	4638      	mov	r0, r7
    88ae:	f008 f834 	bl	1091a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    88b2:	b108      	cbz	r0, 88b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    88b4:	2001      	movs	r0, #1
    88b6:	e000      	b.n	88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    88b8:	2000      	movs	r0, #0
    88ba:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    88be:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    88c2:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    88c6:	f7ff ff3f 	bl	8748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    88ca:	06e0      	lsls	r0, r4, #27
    88cc:	d506      	bpl.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88ce:	0720      	lsls	r0, r4, #28
    88d0:	d404      	bmi.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88d2:	7a68      	ldrb	r0, [r5, #9]
    88d4:	2801      	cmp	r0, #1
    88d6:	d101      	bne.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    88d8:	f044 0420 	orr.w	r4, r4, #32
    88dc:	4620      	mov	r0, r4
    88de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    88e2:	0000      	.short	0x0000
    88e4:	20000f48 	.word	0x20000f48
    88e8:	40008000 	.word	0x40008000
    88ec:	40001000 	.word	0x40001000
    88f0:	200002a0 	.word	0x200002a0
    88f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88f8:	4c1a      	ldr	r4, [pc, #104]	; (8964 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    88fa:	460d      	mov	r5, r1
    88fc:	7a21      	ldrb	r1, [r4, #8]
    88fe:	b129      	cbz	r1, 890c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8900:	f010 0f11 	tst.w	r0, #17
    8904:	d007      	beq.n	8916 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    8906:	f7ff fab1 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    890a:	e024      	b.n	8956 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    890c:	f000 f890 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8910:	2000      	movs	r0, #0
    8912:	7320      	strb	r0, [r4, #12]
    8914:	e01f      	b.n	8956 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8916:	2901      	cmp	r1, #1
    8918:	d001      	beq.n	891e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    891a:	2601      	movs	r6, #1
    891c:	e000      	b.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    891e:	2600      	movs	r6, #0
    8920:	79e0      	ldrb	r0, [r4, #7]
    8922:	2801      	cmp	r0, #1
    8924:	d00e      	beq.n	8944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    8926:	2700      	movs	r7, #0
    8928:	f000 f882 	bl	8a30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    892c:	2196      	movs	r1, #150	; 0x96
    892e:	4630      	mov	r0, r6
    8930:	f000 f894 	bl	8a5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8934:	4601      	mov	r1, r0
    8936:	b14f      	cbz	r7, 894c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8938:	353b      	adds	r5, #59	; 0x3b
    893a:	428d      	cmp	r5, r1
    893c:	d904      	bls.n	8948 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    893e:	2000      	movs	r0, #0
    8940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8944:	2701      	movs	r7, #1
    8946:	e7ef      	b.n	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8948:	2001      	movs	r0, #1
    894a:	71e0      	strb	r0, [r4, #7]
    894c:	7aa2      	ldrb	r2, [r4, #10]
    894e:	4630      	mov	r0, r6
    8950:	f7ff fccc 	bl	82ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8954:	b108      	cbz	r0, 895a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    8956:	2001      	movs	r0, #1
    8958:	e7f2      	b.n	8940 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    895a:	f640 21c4 	movw	r1, #2756	; 0xac4
    895e:	203e      	movs	r0, #62	; 0x3e
    8960:	f7f8 f880 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8964:	20000f48 	.word	0x20000f48
    8968:	4803      	ldr	r0, [pc, #12]	; (8978 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    896a:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    896e:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8972:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8976:	4770      	bx	lr
    8978:	40001000 	.word	0x40001000
    897c:	4804      	ldr	r0, [pc, #16]	; (8990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    897e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8980:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8984:	6281      	str	r1, [r0, #40]	; 0x28
    8986:	4903      	ldr	r1, [pc, #12]	; (8994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    8988:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    898c:	6008      	str	r0, [r1, #0]
    898e:	4770      	bx	lr
    8990:	20000f48 	.word	0x20000f48
    8994:	4001f504 	.word	0x4001f504
    8998:	4a07      	ldr	r2, [pc, #28]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    899a:	2000      	movs	r0, #0
    899c:	3208      	adds	r2, #8
    899e:	4906      	ldr	r1, [pc, #24]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89a0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89a4:	1d0a      	adds	r2, r1, #4
    89a6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    89ae:	4902      	ldr	r1, [pc, #8]	; (89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89b0:	310c      	adds	r1, #12
    89b2:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    89b6:	4770      	bx	lr
    89b8:	40008000 	.word	0x40008000
    89bc:	4903      	ldr	r1, [pc, #12]	; (89cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    89be:	79c9      	ldrb	r1, [r1, #7]
    89c0:	2900      	cmp	r1, #0
    89c2:	d102      	bne.n	89ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    89c4:	4902      	ldr	r1, [pc, #8]	; (89d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    89c6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    89ca:	4770      	bx	lr
    89cc:	20000f48 	.word	0x20000f48
    89d0:	4001f098 	.word	0x4001f098
    89d4:	b510      	push	{r4, lr}
    89d6:	4a14      	ldr	r2, [pc, #80]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89d8:	b120      	cbz	r0, 89e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    89da:	2801      	cmp	r0, #1
    89dc:	d011      	beq.n	8a02 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    89de:	f240 7169 	movw	r1, #1897	; 0x769
    89e2:	e01c      	b.n	8a1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    89e4:	f101 0028 	add.w	r0, r1, #40	; 0x28
    89e8:	e9c2 1002 	strd	r1, r0, [r2, #8]
    89ec:	490f      	ldr	r1, [pc, #60]	; (8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    89ee:	480e      	ldr	r0, [pc, #56]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    89f0:	f004 f8d8 	bl	cba4 <mpsl_fem_pa_configuration_set>
    89f4:	2800      	cmp	r0, #0
    89f6:	d015      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89f8:	1c40      	adds	r0, r0, #1
    89fa:	d013      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    89fc:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8a00:	e00d      	b.n	8a1e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8a02:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a06:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a0a:	4908      	ldr	r1, [pc, #32]	; (8a2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8a0c:	4806      	ldr	r0, [pc, #24]	; (8a28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8a0e:	f004 f8b7 	bl	cb80 <mpsl_fem_lna_configuration_set>
    8a12:	2800      	cmp	r0, #0
    8a14:	d006      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a16:	1c40      	adds	r0, r0, #1
    8a18:	d004      	beq.n	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a1a:	f240 7165 	movw	r1, #1893	; 0x765
    8a1e:	203e      	movs	r0, #62	; 0x3e
    8a20:	f7f8 f820 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a24:	bd10      	pop	{r4, pc}
    8a26:	0000      	.short	0x0000
    8a28:	200002a8 	.word	0x200002a8
    8a2c:	00008b58 	.word	0x00008b58
    8a30:	4802      	ldr	r0, [pc, #8]	; (8a3c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8a32:	2100      	movs	r1, #0
    8a34:	71c1      	strb	r1, [r0, #7]
    8a36:	7201      	strb	r1, [r0, #8]
    8a38:	7241      	strb	r1, [r0, #9]
    8a3a:	4770      	bx	lr
    8a3c:	20000f48 	.word	0x20000f48
    8a40:	4a05      	ldr	r2, [pc, #20]	; (8a58 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8a42:	79d2      	ldrb	r2, [r2, #7]
    8a44:	2a01      	cmp	r2, #1
    8a46:	d006      	beq.n	8a56 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a4c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8a50:	fbb1 f1f2 	udiv	r1, r1, r2
    8a54:	1a40      	subs	r0, r0, r1
    8a56:	4770      	bx	lr
    8a58:	20000f48 	.word	0x20000f48
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	4c13      	ldr	r4, [pc, #76]	; (8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    8a60:	4603      	mov	r3, r0
    8a62:	460d      	mov	r5, r1
    8a64:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8a68:	2000      	movs	r0, #0
    8a6a:	b15a      	cbz	r2, 8a84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8a6c:	4621      	mov	r1, r4
    8a6e:	f891 1020 	ldrb.w	r1, [r1, #32]
    8a72:	b163      	cbz	r3, 8a8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    8a74:	2b01      	cmp	r3, #1
    8a76:	d111      	bne.n	8a9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    8a78:	2a01      	cmp	r2, #1
    8a7a:	4628      	mov	r0, r5
    8a7c:	d012      	beq.n	8aa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8a7e:	f007 ff56 	bl	1092e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8a82:	e009      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8a84:	f640 016e 	movw	r1, #2158	; 0x86e
    8a88:	203e      	movs	r0, #62	; 0x3e
    8a8a:	f7f7 ffeb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a8e:	2a01      	cmp	r2, #1
    8a90:	4628      	mov	r0, r5
    8a92:	d004      	beq.n	8a9e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8a94:	f007 ff59 	bl	1094a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8a98:	69e1      	ldr	r1, [r4, #28]
    8a9a:	4408      	add	r0, r1
    8a9c:	bd70      	pop	{r4, r5, r6, pc}
    8a9e:	f000 f8d1 	bl	8c44 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8aa2:	e7f9      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8aa4:	f000 f8c0 	bl	8c28 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8aa8:	e7f6      	b.n	8a98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8aaa:	0000      	.short	0x0000
    8aac:	20000f48 	.word	0x20000f48
    8ab0:	b510      	push	{r4, lr}
    8ab2:	f7ff fbef 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8ab6:	f7ff fde7 	bl	8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8aba:	f7ff fe1d 	bl	86f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8abe:	f7ff ff53 	bl	8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8ac2:	f008 f9bf 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8ac6:	2800      	cmp	r0, #0
    8ac8:	d108      	bne.n	8adc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8aca:	f008 f9ab 	bl	10e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8ace:	2800      	cmp	r0, #0
    8ad0:	d104      	bne.n	8adc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8ad2:	4803      	ldr	r0, [pc, #12]	; (8ae0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8ad4:	6801      	ldr	r1, [r0, #0]
    8ad6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8ada:	6001      	str	r1, [r0, #0]
    8adc:	bd10      	pop	{r4, pc}
    8ade:	0000      	.short	0x0000
    8ae0:	40001568 	.word	0x40001568
    8ae4:	b510      	push	{r4, lr}
    8ae6:	4604      	mov	r4, r0
    8ae8:	f7ff fbd4 	bl	8294 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8aec:	f7ff fdcc 	bl	8688 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8af0:	4620      	mov	r0, r4
    8af2:	f7ff fde7 	bl	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8af6:	f008 f9a5 	bl	10e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8afa:	2800      	cmp	r0, #0
    8afc:	d00d      	beq.n	8b1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8afe:	4a09      	ldr	r2, [pc, #36]	; (8b24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8b00:	6811      	ldr	r1, [r2, #0]
    8b02:	0650      	lsls	r0, r2, #25
    8b04:	2c02      	cmp	r4, #2
    8b06:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8b0a:	d007      	beq.n	8b1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8b0c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8b10:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b14:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b18:	6010      	str	r0, [r2, #0]
    8b1a:	bd10      	pop	{r4, pc}
    8b1c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8b20:	e7f6      	b.n	8b10 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8b22:	0000      	.short	0x0000
    8b24:	40001588 	.word	0x40001588
    8b28:	a62c0000 	.word	0xa62c0000
    8b2c:	0604a1e0 	.word	0x0604a1e0
    8b30:	0e0c0a08 	.word	0x0e0c0a08
    8b34:	16141210 	.word	0x16141210
    8b38:	201e1c18 	.word	0x201e1c18
    8b3c:	28262422 	.word	0x28262422
    8b40:	302e2c2a 	.word	0x302e2c2a
    8b44:	38363432 	.word	0x38363432
    8b48:	403e3c3a 	.word	0x403e3c3a
    8b4c:	48464442 	.word	0x48464442
    8b50:	024e4c4a 	.word	0x024e4c4a
    8b54:	0000501a 	.word	0x0000501a
    8b58:	00000001 	.word	0x00000001
    8b5c:	40001110 	.word	0x40001110
	...
    8b74:	00001e14 	.word	0x00001e14
    8b78:	00001130 	.word	0x00001130
    8b7c:	00000000 	.word	0x00000000
    8b80:	00000028 	.word	0x00000028
    8b84:	00000018 	.word	0x00000018
    8b88:	00000000 	.word	0x00000000
    8b8c:	00001e14 	.word	0x00001e14
    8b90:	00001130 	.word	0x00001130
    8b94:	00000000 	.word	0x00000000
    8b98:	00001770 	.word	0x00001770
    8b9c:	00000fa0 	.word	0x00000fa0

00008ba0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8ba0:	b570      	push	{r4, r5, r6, lr}
    8ba2:	4605      	mov	r5, r0
    8ba4:	4614      	mov	r4, r2
    8ba6:	4608      	mov	r0, r1
    8ba8:	f7ff fb9a 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8bac:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8bb0:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8bb4:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8bb8:	4807      	ldr	r0, [pc, #28]	; (8bd8 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8bba:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8bbe:	4408      	add	r0, r1
    8bc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8bc4:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8bc8:	fbb0 f5f1 	udiv	r5, r0, r1
    8bcc:	4620      	mov	r0, r4
    8bce:	f7ff fb5b 	bl	8288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8bd2:	4428      	add	r0, r5
    8bd4:	1d40      	adds	r0, r0, #5
    8bd6:	bd70      	pop	{r4, r5, r6, pc}
    8bd8:	00008c68 	.word	0x00008c68

00008bdc <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8bdc:	b570      	push	{r4, r5, r6, lr}
    8bde:	4d0e      	ldr	r5, [pc, #56]	; (8c18 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8be0:	461c      	mov	r4, r3
    8be2:	3d08      	subs	r5, #8
    8be4:	4b0c      	ldr	r3, [pc, #48]	; (8c18 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8be6:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8bea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8bf2:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8bf6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8bfa:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8bfe:	4418      	add	r0, r3
    8c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c04:	fbb0 f5f1 	udiv	r5, r0, r1
    8c08:	4610      	mov	r0, r2
    8c0a:	f7ff fb3d 	bl	8288 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c0e:	4428      	add	r0, r5
    8c10:	4420      	add	r0, r4
    8c12:	1d40      	adds	r0, r0, #5
    8c14:	bd70      	pop	{r4, r5, r6, pc}
    8c16:	0000      	.short	0x0000
    8c18:	00008c68 	.word	0x00008c68

00008c1c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c1c:	4901      	ldr	r1, [pc, #4]	; (8c24 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c1e:	b2c0      	uxtb	r0, r0
    8c20:	6008      	str	r0, [r1, #0]
    8c22:	4770      	bx	lr
    8c24:	4000150c 	.word	0x4000150c

00008c28 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8c28:	4a05      	ldr	r2, [pc, #20]	; (8c40 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8c2a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c32:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c36:	fbb1 f1f2 	udiv	r1, r1, r2
    8c3a:	4408      	add	r0, r1
    8c3c:	1e80      	subs	r0, r0, #2
    8c3e:	4770      	bx	lr
    8c40:	00008c60 	.word	0x00008c60

00008c44 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c44:	4a05      	ldr	r2, [pc, #20]	; (8c5c <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c46:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c4e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8c52:	fbb1 f1f2 	udiv	r1, r1, r2
    8c56:	4408      	add	r0, r1
    8c58:	4770      	bx	lr
    8c5a:	0000      	.short	0x0000
    8c5c:	00008c60 	.word	0x00008c60
    8c60:	05dc0000 	.word	0x05dc0000
    8c64:	000003e8 	.word	0x000003e8
    8c68:	00000000 	.word	0x00000000
    8c6c:	00001e14 	.word	0x00001e14
    8c70:	00001130 	.word	0x00001130

00008c74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8c78:	461e      	mov	r6, r3
    8c7a:	4617      	mov	r7, r2
    8c7c:	460c      	mov	r4, r1
    8c7e:	4605      	mov	r5, r0
    8c80:	f000 f856 	bl	8d30 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8c84:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8c88:	4680      	mov	r8, r0
    8c8a:	f899 0000 	ldrb.w	r0, [r9]
    8c8e:	42a8      	cmp	r0, r5
    8c90:	d110      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c92:	f899 1001 	ldrb.w	r1, [r9, #1]
    8c96:	4648      	mov	r0, r9
    8c98:	42a1      	cmp	r1, r4
    8c9a:	d10b      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8c9c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ca0:	42b9      	cmp	r1, r7
    8ca2:	d107      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ca4:	78c2      	ldrb	r2, [r0, #3]
    8ca6:	4542      	cmp	r2, r8
    8ca8:	d104      	bne.n	8cb4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8caa:	8881      	ldrh	r1, [r0, #4]
    8cac:	8031      	strh	r1, [r6, #0]
    8cae:	7980      	ldrb	r0, [r0, #6]
    8cb0:	70b0      	strb	r0, [r6, #2]
    8cb2:	e037      	b.n	8d24 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8cb4:	463a      	mov	r2, r7
    8cb6:	4621      	mov	r1, r4
    8cb8:	2d01      	cmp	r5, #1
    8cba:	d009      	beq.n	8cd0 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8cbc:	2d02      	cmp	r5, #2
    8cbe:	d009      	beq.n	8cd4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8cc0:	2d04      	cmp	r5, #4
    8cc2:	d009      	beq.n	8cd8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8cc4:	2d08      	cmp	r5, #8
    8cc6:	d009      	beq.n	8cdc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8cc8:	f240 4162 	movw	r1, #1122	; 0x462
    8ccc:	2006      	movs	r0, #6
    8cce:	e00c      	b.n	8cea <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8cd0:	2000      	movs	r0, #0
    8cd2:	e004      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cd4:	2001      	movs	r0, #1
    8cd6:	e002      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cd8:	2003      	movs	r0, #3
    8cda:	e000      	b.n	8cde <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8cdc:	2002      	movs	r0, #2
    8cde:	466b      	mov	r3, sp
    8ce0:	f000 f89e 	bl	8e20 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8ce4:	b118      	cbz	r0, 8cee <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8ce6:	213d      	movs	r1, #61	; 0x3d
    8ce8:	2075      	movs	r0, #117	; 0x75
    8cea:	f7f7 febb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cee:	4620      	mov	r0, r4
    8cf0:	f7ff f8b4 	bl	7e5c <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8cf4:	4602      	mov	r2, r0
    8cf6:	2300      	movs	r3, #0
    8cf8:	4631      	mov	r1, r6
    8cfa:	f99d 0000 	ldrsb.w	r0, [sp]
    8cfe:	f003 ff63 	bl	cbc8 <mpsl_fem_tx_power_split>
    8d02:	4601      	mov	r1, r0
    8d04:	f889 1007 	strb.w	r1, [r9, #7]
    8d08:	8831      	ldrh	r1, [r6, #0]
    8d0a:	f8a9 1004 	strh.w	r1, [r9, #4]
    8d0e:	78b1      	ldrb	r1, [r6, #2]
    8d10:	f889 1006 	strb.w	r1, [r9, #6]
    8d14:	f889 5000 	strb.w	r5, [r9]
    8d18:	f889 4001 	strb.w	r4, [r9, #1]
    8d1c:	f889 7002 	strb.w	r7, [r9, #2]
    8d20:	f889 8003 	strb.w	r8, [r9, #3]
    8d24:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d2c:	20000366 	.word	0x20000366

00008d30 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d30:	4801      	ldr	r0, [pc, #4]	; (8d38 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d32:	7800      	ldrb	r0, [r0, #0]
    8d34:	4770      	bx	lr
    8d36:	0000      	.short	0x0000
    8d38:	200002c0 	.word	0x200002c0

00008d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d3c:	b570      	push	{r4, r5, r6, lr}
    8d3e:	4c17      	ldr	r4, [pc, #92]	; (8d9c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d40:	7860      	ldrb	r0, [r4, #1]
    8d42:	2800      	cmp	r0, #0
    8d44:	d123      	bne.n	8d8e <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d46:	2001      	movs	r0, #1
    8d48:	7060      	strb	r0, [r4, #1]
    8d4a:	f008 f855 	bl	10df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d4e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8d52:	b928      	cbnz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d54:	f008 f886 	bl	10e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8d58:	b910      	cbnz	r0, 8d60 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8d5a:	f008 f88d 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8d5e:	b120      	cbz	r0, 8d6a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8d60:	480f      	ldr	r0, [pc, #60]	; (8da0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d62:	6060      	str	r0, [r4, #4]
    8d64:	70a5      	strb	r5, [r4, #2]
    8d66:	2008      	movs	r0, #8
    8d68:	e010      	b.n	8d8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8d6a:	f008 f81a 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8d6e:	b940      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d70:	f008 f821 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8d74:	b928      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d76:	f008 f835 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8d7a:	b910      	cbnz	r0, 8d82 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8d7c:	f008 f846 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8d80:	b130      	cbz	r0, 8d90 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8d82:	4807      	ldr	r0, [pc, #28]	; (8da0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8d84:	3031      	adds	r0, #49	; 0x31
    8d86:	6060      	str	r0, [r4, #4]
    8d88:	70a5      	strb	r5, [r4, #2]
    8d8a:	2004      	movs	r0, #4
    8d8c:	70e0      	strb	r0, [r4, #3]
    8d8e:	bd70      	pop	{r4, r5, r6, pc}
    8d90:	f240 113f 	movw	r1, #319	; 0x13f
    8d94:	2074      	movs	r0, #116	; 0x74
    8d96:	f003 fd57 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d9a:	0000      	.short	0x0000
    8d9c:	200002c0 	.word	0x200002c0
    8da0:	000111c5 	.word	0x000111c5

00008da4 <mpsl_tx_power_radio_supported_power_adjust>:
    8da4:	4a06      	ldr	r2, [pc, #24]	; (8dc0 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8da6:	b500      	push	{lr}
    8da8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8dac:	4290      	cmp	r0, r2
    8dae:	db01      	blt.n	8db4 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8db0:	4610      	mov	r0, r2
    8db2:	bd00      	pop	{pc}
    8db4:	f000 f808 	bl	8dc8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8db8:	4902      	ldr	r1, [pc, #8]	; (8dc4 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8dba:	5608      	ldrsb	r0, [r1, r0]
    8dbc:	bd00      	pop	{pc}
    8dbe:	0000      	.short	0x0000
    8dc0:	200002c0 	.word	0x200002c0
    8dc4:	000111b7 	.word	0x000111b7

00008dc8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8dc8:	4602      	mov	r2, r0
    8dca:	4813      	ldr	r0, [pc, #76]	; (8e18 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8dcc:	b510      	push	{r4, lr}
    8dce:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8dd2:	429a      	cmp	r2, r3
    8dd4:	db01      	blt.n	8dda <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8dd6:	200d      	movs	r0, #13
    8dd8:	bd10      	pop	{r4, pc}
    8dda:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8dde:	429a      	cmp	r2, r3
    8de0:	dc01      	bgt.n	8de6 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8de2:	2000      	movs	r0, #0
    8de4:	bd10      	pop	{r4, pc}
    8de6:	b101      	cbz	r1, 8dea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8de8:	2101      	movs	r1, #1
    8dea:	1ad4      	subs	r4, r2, r3
    8dec:	6843      	ldr	r3, [r0, #4]
    8dee:	5d18      	ldrb	r0, [r3, r4]
    8df0:	4c0a      	ldr	r4, [pc, #40]	; (8e1c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8df2:	5624      	ldrsb	r4, [r4, r0]
    8df4:	4294      	cmp	r4, r2
    8df6:	d0f5      	beq.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8df8:	4c08      	ldr	r4, [pc, #32]	; (8e1c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8dfa:	4408      	add	r0, r1
    8dfc:	343f      	adds	r4, #63	; 0x3f
    8dfe:	b2c0      	uxtb	r0, r0
    8e00:	b2d2      	uxtb	r2, r2
    8e02:	42a3      	cmp	r3, r4
    8e04:	d1ee      	bne.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e06:	2900      	cmp	r1, #0
    8e08:	d0ec      	beq.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e0a:	2a01      	cmp	r2, #1
    8e0c:	d001      	beq.n	8e12 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8e0e:	2a02      	cmp	r2, #2
    8e10:	d1e8      	bne.n	8de4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e12:	1c40      	adds	r0, r0, #1
    8e14:	b2c0      	uxtb	r0, r0
    8e16:	bd10      	pop	{r4, pc}
    8e18:	200002c0 	.word	0x200002c0
    8e1c:	000111b7 	.word	0x000111b7

00008e20 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e24:	461c      	mov	r4, r3
    8e26:	4690      	mov	r8, r2
    8e28:	460d      	mov	r5, r1
    8e2a:	4606      	mov	r6, r0
    8e2c:	f06f 0715 	mvn.w	r7, #21
    8e30:	2804      	cmp	r0, #4
    8e32:	d804      	bhi.n	8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e34:	b11c      	cbz	r4, 8e3e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e36:	f007 fd93 	bl	10960 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e3a:	42a8      	cmp	r0, r5
    8e3c:	d802      	bhi.n	8e44 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e3e:	4638      	mov	r0, r7
    8e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e44:	4805      	ldr	r0, [pc, #20]	; (8e5c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e46:	4642      	mov	r2, r8
    8e48:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e4c:	b118      	cbz	r0, 8e56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e4e:	5740      	ldrsb	r0, [r0, r5]
    8e50:	4282      	cmp	r2, r0
    8e52:	dd00      	ble.n	8e56 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e54:	4602      	mov	r2, r0
    8e56:	7022      	strb	r2, [r4, #0]
    8e58:	2000      	movs	r0, #0
    8e5a:	e7f1      	b.n	8e40 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8e5c:	20000f80 	.word	0x20000f80
    8e60:	b570      	push	{r4, r5, r6, lr}
    8e62:	460d      	mov	r5, r1
    8e64:	0004      	movs	r4, r0
    8e66:	d00c      	beq.n	8e82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x62>
    8e68:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
    8e6c:	2100      	movs	r1, #0
    8e6e:	2002      	movs	r0, #2
    8e70:	2d09      	cmp	r5, #9
    8e72:	d26e      	bcs.n	8f52 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x132>
    8e74:	e8df f005 	tbb	[pc, r5]
    8e78:	36361108 	.word	0x36361108
    8e7c:	a6897166 	.word	0xa6897166
    8e80:	0094      	.short	0x0094
    8e82:	f44f 71cb 	mov.w	r1, #406	; 0x196
    8e86:	e0f7      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e88:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e8c:	2804      	cmp	r0, #4
    8e8e:	d07b      	beq.n	8f88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x168>
    8e90:	2803      	cmp	r0, #3
    8e92:	d0fc      	beq.n	8e8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x6e>
    8e94:	f240 11a1 	movw	r1, #417	; 0x1a1
    8e98:	e0ee      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8e9a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8e9e:	2804      	cmp	r0, #4
    8ea0:	d004      	beq.n	8eac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8ea2:	2803      	cmp	r0, #3
    8ea4:	d002      	beq.n	8eac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x8c>
    8ea6:	f240 11a5 	movw	r1, #421	; 0x1a5
    8eaa:	e0e5      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8eac:	2005      	movs	r0, #5
    8eae:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8eb2:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8eb6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    8eba:	bbb8      	cbnz	r0, 8f2c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10c>
    8ebc:	2100      	movs	r1, #0
    8ebe:	4620      	mov	r0, r4
    8ec0:	f007 fdaf 	bl	10a22 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
    8ec4:	7820      	ldrb	r0, [r4, #0]
    8ec6:	2801      	cmp	r0, #1
    8ec8:	d007      	beq.n	8eda <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xba>
    8eca:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    8ece:	bf00      	nop
    8ed0:	e9c4 0106 	strd	r0, r1, [r4, #24]
    8ed4:	2100      	movs	r1, #0
    8ed6:	6a22      	ldr	r2, [r4, #32]
    8ed8:	e048      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8eda:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    8ede:	f001 fb13 	bl	a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8ee2:	e7f5      	b.n	8ed0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xb0>
    8ee4:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
    8ee8:	2904      	cmp	r1, #4
    8eea:	d004      	beq.n	8ef6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8eec:	2903      	cmp	r1, #3
    8eee:	d002      	beq.n	8ef6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xd6>
    8ef0:	f240 11c3 	movw	r1, #451	; 0x1c3
    8ef4:	e0c0      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8ef6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8efa:	b122      	cbz	r2, 8f06 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xe6>
    8efc:	4621      	mov	r1, r4
    8efe:	4630      	mov	r0, r6
    8f00:	f007 fdcf 	bl	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8f04:	e0b0      	b.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8f06:	2904      	cmp	r1, #4
    8f08:	d000      	beq.n	8f0c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0xec>
    8f0a:	2001      	movs	r0, #1
    8f0c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    8f10:	6a22      	ldr	r2, [r4, #32]
    8f12:	2d02      	cmp	r5, #2
    8f14:	d00b      	beq.n	8f2e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x10e>
    8f16:	2106      	movs	r1, #6
    8f18:	4630      	mov	r0, r6
    8f1a:	4790      	blx	r2
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d06d      	beq.n	8ffc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f20:	7800      	ldrb	r0, [r0, #0]
    8f22:	2800      	cmp	r0, #0
    8f24:	d06a      	beq.n	8ffc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1dc>
    8f26:	f240 11dd 	movw	r1, #477	; 0x1dd
    8f2a:	e0a5      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f2c:	e034      	b.n	8f98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f2e:	2105      	movs	r1, #5
    8f30:	4630      	mov	r0, r6
    8f32:	4790      	blx	r2
    8f34:	2800      	cmp	r0, #0
    8f36:	d070      	beq.n	901a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f38:	7800      	ldrb	r0, [r0, #0]
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d06d      	beq.n	901a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fa>
    8f3e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
    8f42:	e099      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f44:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f48:	2805      	cmp	r0, #5
    8f4a:	d003      	beq.n	8f54 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x134>
    8f4c:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    8f50:	e092      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f52:	e080      	b.n	9056 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x236>
    8f54:	2102      	movs	r1, #2
    8f56:	6a22      	ldr	r2, [r4, #32]
    8f58:	e008      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    8f5a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f5e:	2805      	cmp	r0, #5
    8f60:	d002      	beq.n	8f68 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x148>
    8f62:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    8f66:	e087      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f68:	6a22      	ldr	r2, [r4, #32]
    8f6a:	2101      	movs	r1, #1
    8f6c:	4630      	mov	r0, r6
    8f6e:	4790      	blx	r2
    8f70:	4601      	mov	r1, r0
    8f72:	4620      	mov	r0, r4
    8f74:	f007 fd00 	bl	10978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8f78:	2802      	cmp	r0, #2
    8f7a:	d075      	beq.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8f7c:	b3e8      	cbz	r0, 8ffa <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1da>
    8f7e:	2801      	cmp	r0, #1
    8f80:	d06c      	beq.n	905c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x23c>
    8f82:	f240 212a 	movw	r1, #554	; 0x22a
    8f86:	e077      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f88:	e070      	b.n	906c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24c>
    8f8a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8f8e:	2805      	cmp	r0, #5
    8f90:	d002      	beq.n	8f98 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x178>
    8f92:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    8f96:	e06f      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8f98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8f9c:	f000 b89e 	b.w	90dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
    8fa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
    8fa4:	2805      	cmp	r0, #5
    8fa6:	d002      	beq.n	8fae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x18e>
    8fa8:	f240 11f5 	movw	r1, #501	; 0x1f5
    8fac:	e064      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fae:	6a22      	ldr	r2, [r4, #32]
    8fb0:	210a      	movs	r1, #10
    8fb2:	4630      	mov	r0, r6
    8fb4:	4790      	blx	r2
    8fb6:	4601      	mov	r1, r0
    8fb8:	4620      	mov	r0, r4
    8fba:	f007 fcdd 	bl	10978 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
    8fbe:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    8fc2:	e059      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fc4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
    8fc8:	2a05      	cmp	r2, #5
    8fca:	d007      	beq.n	8fdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fcc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    8fd0:	b10b      	cbz	r3, 8fd6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1b6>
    8fd2:	2a03      	cmp	r2, #3
    8fd4:	d002      	beq.n	8fdc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1bc>
    8fd6:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
    8fda:	e04d      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    8fdc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    8fe0:	b12a      	cbz	r2, 8fee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1ce>
    8fe2:	4621      	mov	r1, r4
    8fe4:	4630      	mov	r0, r6
    8fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8fea:	f007 bd5a 	b.w	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
    8fee:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
    8ff2:	b19a      	cbz	r2, 901c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1fc>
    8ff4:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    8ff8:	e001      	b.n	8ffe <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1de>
    8ffa:	e032      	b.n	9062 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x242>
    8ffc:	e034      	b.n	9068 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x248>
    8ffe:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    9002:	6a22      	ldr	r2, [r4, #32]
    9004:	2108      	movs	r1, #8
    9006:	4630      	mov	r0, r6
    9008:	4790      	blx	r2
    900a:	2800      	cmp	r0, #0
    900c:	d037      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    900e:	7800      	ldrb	r0, [r0, #0]
    9010:	2800      	cmp	r0, #0
    9012:	d034      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9014:	f44f 7102 	mov.w	r1, #520	; 0x208
    9018:	e02e      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    901a:	e030      	b.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    901c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    9020:	b15a      	cbz	r2, 903a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x21a>
    9022:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    9026:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    902a:	4621      	mov	r1, r4
    902c:	f007 fcf7 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
    9030:	2800      	cmp	r0, #0
    9032:	d124      	bne.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9034:	f240 210d 	movw	r1, #525	; 0x20d
    9038:	e01e      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    903a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    903e:	6a22      	ldr	r2, [r4, #32]
    9040:	2107      	movs	r1, #7
    9042:	4630      	mov	r0, r6
    9044:	4790      	blx	r2
    9046:	2800      	cmp	r0, #0
    9048:	d019      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    904a:	7800      	ldrb	r0, [r0, #0]
    904c:	2800      	cmp	r0, #0
    904e:	d016      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9050:	f44f 7105 	mov.w	r1, #532	; 0x214
    9054:	e010      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    9056:	f240 2119 	movw	r1, #537	; 0x219
    905a:	e00d      	b.n	9078 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x258>
    905c:	2104      	movs	r1, #4
    905e:	6a22      	ldr	r2, [r4, #32]
    9060:	e784      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9062:	2103      	movs	r1, #3
    9064:	6a22      	ldr	r2, [r4, #32]
    9066:	e781      	b.n	8f6c <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x14c>
    9068:	2d00      	cmp	r5, #0
    906a:	d108      	bne.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    906c:	f007 fdcf 	bl	10c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    9070:	2800      	cmp	r0, #0
    9072:	d004      	beq.n	907e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x25e>
    9074:	f240 2133 	movw	r1, #563	; 0x233
    9078:	206a      	movs	r0, #106	; 0x6a
    907a:	f003 fbe5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    907e:	bd70      	pop	{r4, r5, r6, pc}
    9080:	2800      	cmp	r0, #0
    9082:	d019      	beq.n	90b8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x298>
    9084:	7803      	ldrb	r3, [r0, #0]
    9086:	4913      	ldr	r1, [pc, #76]	; (90d4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b4>)
    9088:	4a13      	ldr	r2, [pc, #76]	; (90d8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2b8>)
    908a:	b113      	cbz	r3, 9092 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x272>
    908c:	2b01      	cmp	r3, #1
    908e:	d00e      	beq.n	90ae <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x28e>
    9090:	e011      	b.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    9092:	7903      	ldrb	r3, [r0, #4]
    9094:	2b01      	cmp	r3, #1
    9096:	d000      	beq.n	909a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x27a>
    9098:	b96b      	cbnz	r3, 90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    909a:	7943      	ldrb	r3, [r0, #5]
    909c:	b10b      	cbz	r3, 90a2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x282>
    909e:	2b01      	cmp	r3, #1
    90a0:	d109      	bne.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90a2:	6883      	ldr	r3, [r0, #8]
    90a4:	3b64      	subs	r3, #100	; 0x64
    90a6:	428b      	cmp	r3, r1
    90a8:	d205      	bcs.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90aa:	68c0      	ldr	r0, [r0, #12]
    90ac:	e00e      	b.n	90cc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ac>
    90ae:	7903      	ldrb	r3, [r0, #4]
    90b0:	2b01      	cmp	r3, #1
    90b2:	d002      	beq.n	90ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    90b4:	b10b      	cbz	r3, 90ba <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x29a>
    90b6:	2000      	movs	r0, #0
    90b8:	4770      	bx	lr
    90ba:	7943      	ldrb	r3, [r0, #5]
    90bc:	b10b      	cbz	r3, 90c2 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2a2>
    90be:	2b01      	cmp	r3, #1
    90c0:	d1f9      	bne.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90c2:	68c3      	ldr	r3, [r0, #12]
    90c4:	3b64      	subs	r3, #100	; 0x64
    90c6:	428b      	cmp	r3, r1
    90c8:	d2f5      	bcs.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90ca:	6880      	ldr	r0, [r0, #8]
    90cc:	4290      	cmp	r0, r2
    90ce:	d8f2      	bhi.n	90b6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x296>
    90d0:	2001      	movs	r0, #1
    90d2:	4770      	bx	lr
    90d4:	0001863d 	.word	0x0001863d
    90d8:	0f423fff 	.word	0x0f423fff
    90dc:	b510      	push	{r4, lr}
    90de:	4c05      	ldr	r4, [pc, #20]	; (90f4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2d4>)
    90e0:	6820      	ldr	r0, [r4, #0]
    90e2:	b110      	cbz	r0, 90ea <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2ca>
    90e4:	4780      	blx	r0
    90e6:	2000      	movs	r0, #0
    90e8:	6020      	str	r0, [r4, #0]
    90ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90ee:	f002 b8c1 	b.w	b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    90f2:	0000      	.short	0x0000
    90f4:	200002c8 	.word	0x200002c8

000090f8 <mpsl_timeslot_session_open>:
    90f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90fc:	460e      	mov	r6, r1
    90fe:	0005      	movs	r5, r0
    9100:	d004      	beq.n	910c <mpsl_timeslot_session_open+0x14>
    9102:	f000 f847 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    9106:	4607      	mov	r7, r0
    9108:	2400      	movs	r4, #0
    910a:	e00b      	b.n	9124 <mpsl_timeslot_session_open+0x2c>
    910c:	f06f 0015 	mvn.w	r0, #21
    9110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9114:	4620      	mov	r0, r4
    9116:	f000 f843 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    911a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
    911e:	b130      	cbz	r0, 912e <mpsl_timeslot_session_open+0x36>
    9120:	1c64      	adds	r4, r4, #1
    9122:	b2e4      	uxtb	r4, r4
    9124:	42bc      	cmp	r4, r7
    9126:	d3f5      	bcc.n	9114 <mpsl_timeslot_session_open+0x1c>
    9128:	f06f 000b 	mvn.w	r0, #11
    912c:	e7f0      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    912e:	4627      	mov	r7, r4
    9130:	2cff      	cmp	r4, #255	; 0xff
    9132:	d0f9      	beq.n	9128 <mpsl_timeslot_session_open+0x30>
    9134:	4620      	mov	r0, r4
    9136:	f000 f833 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    913a:	4604      	mov	r4, r0
    913c:	f007 fccc 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
    9140:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
    9144:	4621      	mov	r1, r4
    9146:	4808      	ldr	r0, [pc, #32]	; (9168 <mpsl_timeslot_session_open+0x70>)
    9148:	f002 f86c 	bl	b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    914c:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    9150:	2820      	cmp	r0, #32
    9152:	d006      	beq.n	9162 <mpsl_timeslot_session_open+0x6a>
    9154:	2001      	movs	r0, #1
    9156:	6225      	str	r5, [r4, #32]
    9158:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    915c:	7037      	strb	r7, [r6, #0]
    915e:	2000      	movs	r0, #0
    9160:	e7d6      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    9162:	f06f 0022 	mvn.w	r0, #34	; 0x22
    9166:	e7d3      	b.n	9110 <mpsl_timeslot_session_open+0x18>
    9168:	00008e61 	.word	0x00008e61

0000916c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>:
    916c:	b510      	push	{r4, lr}
    916e:	0782      	lsls	r2, r0, #30
    9170:	d002      	beq.n	9178 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0xc>
    9172:	f06f 000d 	mvn.w	r0, #13
    9176:	bd10      	pop	{r4, pc}
    9178:	4a05      	ldr	r2, [pc, #20]	; (9190 <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x24>)
    917a:	7011      	strb	r1, [r2, #0]
    917c:	6050      	str	r0, [r2, #4]
    917e:	b128      	cbz	r0, 918c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q+0x20>
    9180:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9184:	010a      	lsls	r2, r1, #4
    9186:	2100      	movs	r1, #0
    9188:	f007 ff57 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    918c:	2000      	movs	r0, #0
    918e:	bd10      	pop	{r4, pc}
    9190:	200002cc 	.word	0x200002cc

00009194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    9194:	4801      	ldr	r0, [pc, #4]	; (919c <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    9196:	7800      	ldrb	r0, [r0, #0]
    9198:	4770      	bx	lr
    919a:	0000      	.short	0x0000
    919c:	200002cc 	.word	0x200002cc

000091a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    91a0:	4905      	ldr	r1, [pc, #20]	; (91b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    91a2:	780a      	ldrb	r2, [r1, #0]
    91a4:	4290      	cmp	r0, r2
    91a6:	d301      	bcc.n	91ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    91a8:	2000      	movs	r0, #0
    91aa:	4770      	bx	lr
    91ac:	6849      	ldr	r1, [r1, #4]
    91ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    91b2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    91b6:	4770      	bx	lr
    91b8:	200002cc 	.word	0x200002cc

000091bc <MPSL_IRQ_RADIO_Handler>:
    91bc:	490e      	ldr	r1, [pc, #56]	; (91f8 <MPSL_IRQ_RADIO_Handler+0x3c>)
    91be:	b510      	push	{r4, lr}
    91c0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    91c4:	2820      	cmp	r0, #32
    91c6:	d012      	beq.n	91ee <MPSL_IRQ_RADIO_Handler+0x32>
    91c8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    91cc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    91d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    91d4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    91d8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    91dc:	6840      	ldr	r0, [r0, #4]
    91de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    91e2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    91e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91ea:	2104      	movs	r1, #4
    91ec:	4710      	bx	r2
    91ee:	f640 01bc 	movw	r1, #2236	; 0x8bc
    91f2:	2070      	movs	r0, #112	; 0x70
    91f4:	f003 fb28 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    91f8:	20001394 	.word	0x20001394
    91fc:	b570      	push	{r4, r5, r6, lr}
    91fe:	4605      	mov	r5, r0
    9200:	2a20      	cmp	r2, #32
    9202:	d028      	beq.n	9256 <MPSL_IRQ_RADIO_Handler+0x9a>
    9204:	4819      	ldr	r0, [pc, #100]	; (926c <MPSL_IRQ_RADIO_Handler+0xb0>)
    9206:	4c1a      	ldr	r4, [pc, #104]	; (9270 <MPSL_IRQ_RADIO_Handler+0xb4>)
    9208:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    920c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9210:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    9214:	4423      	add	r3, r4
    9216:	2920      	cmp	r1, #32
    9218:	d022      	beq.n	9260 <MPSL_IRQ_RADIO_Handler+0xa4>
    921a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    921e:	7840      	ldrb	r0, [r0, #1]
    9220:	784c      	ldrb	r4, [r1, #1]
    9222:	7048      	strb	r0, [r1, #1]
    9224:	4620      	mov	r0, r4
    9226:	4601      	mov	r1, r0
    9228:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    922c:	4291      	cmp	r1, r2
    922e:	7005      	strb	r5, [r0, #0]
    9230:	7840      	ldrb	r0, [r0, #1]
    9232:	d1f8      	bne.n	9226 <MPSL_IRQ_RADIO_Handler+0x6a>
    9234:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    9238:	2a20      	cmp	r2, #32
    923a:	bf1a      	itte	ne
    923c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    9240:	7054      	strbne	r4, [r2, #1]
    9242:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    9246:	2220      	movs	r2, #32
    9248:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    924c:	f88c 2001 	strb.w	r2, [ip, #1]
    9250:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    9254:	bd70      	pop	{r4, r5, r6, pc}
    9256:	f44f 7126 	mov.w	r1, #664	; 0x298
    925a:	2070      	movs	r0, #112	; 0x70
    925c:	f003 faf4 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9260:	f893 4020 	ldrb.w	r4, [r3, #32]
    9264:	7840      	ldrb	r0, [r0, #1]
    9266:	f883 0020 	strb.w	r0, [r3, #32]
    926a:	e7db      	b.n	9224 <MPSL_IRQ_RADIO_Handler+0x68>
    926c:	20001314 	.word	0x20001314
    9270:	20001394 	.word	0x20001394
    9274:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9278:	b08d      	sub	sp, #52	; 0x34
    927a:	4615      	mov	r5, r2
    927c:	460c      	mov	r4, r1
    927e:	f002 fa11 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9282:	4428      	add	r0, r5
    9284:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9288:	9008      	str	r0, [sp, #32]
    928a:	6821      	ldr	r1, [r4, #0]
    928c:	1a08      	subs	r0, r1, r0
    928e:	0200      	lsls	r0, r0, #8
    9290:	17c1      	asrs	r1, r0, #31
    9292:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9296:	1200      	asrs	r0, r0, #8
    9298:	2800      	cmp	r0, #0
    929a:	f300 80f0 	bgt.w	947e <MPSL_IRQ_RADIO_Handler+0x2c2>
    929e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    92a2:	48cd      	ldr	r0, [pc, #820]	; (95d8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    92a4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    92a8:	4408      	add	r0, r1
    92aa:	9009      	str	r0, [sp, #36]	; 0x24
    92ac:	f890 5020 	ldrb.w	r5, [r0, #32]
    92b0:	2020      	movs	r0, #32
    92b2:	4eca      	ldr	r6, [pc, #808]	; (95dc <MPSL_IRQ_RADIO_Handler+0x420>)
    92b4:	f10d 0a18 	add.w	sl, sp, #24
    92b8:	f10d 091c 	add.w	r9, sp, #28
    92bc:	f88d 0018 	strb.w	r0, [sp, #24]
    92c0:	2d20      	cmp	r5, #32
    92c2:	bf1c      	itt	ne
    92c4:	48c6      	ldrne	r0, [pc, #792]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    92c6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    92ca:	d038      	beq.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    92cc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    92d0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    92d4:	f100 0108 	add.w	r1, r0, #8
    92d8:	68c0      	ldr	r0, [r0, #12]
    92da:	6827      	ldr	r7, [r4, #0]
    92dc:	1a38      	subs	r0, r7, r0
    92de:	0200      	lsls	r0, r0, #8
    92e0:	17c2      	asrs	r2, r0, #31
    92e2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92e6:	1200      	asrs	r0, r0, #8
    92e8:	d429      	bmi.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    92ea:	89e0      	ldrh	r0, [r4, #14]
    92ec:	b300      	cbz	r0, 9330 <MPSL_IRQ_RADIO_Handler+0x174>
    92ee:	89c8      	ldrh	r0, [r1, #14]
    92f0:	b9f0      	cbnz	r0, 9330 <MPSL_IRQ_RADIO_Handler+0x174>
    92f2:	6808      	ldr	r0, [r1, #0]
    92f4:	9003      	str	r0, [sp, #12]
    92f6:	f003 f907 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92fa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92fe:	bf08      	it	eq
    9300:	200d      	moveq	r0, #13
    9302:	d00b      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x160>
    9304:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9308:	3856      	subs	r0, #86	; 0x56
    930a:	bf08      	it	eq
    930c:	201c      	moveq	r0, #28
    930e:	d005      	beq.n	931c <MPSL_IRQ_RADIO_Handler+0x160>
    9310:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9314:	389f      	subs	r0, #159	; 0x9f
    9316:	bf14      	ite	ne
    9318:	2000      	movne	r0, #0
    931a:	2032      	moveq	r0, #50	; 0x32
    931c:	1c41      	adds	r1, r0, #1
    931e:	9803      	ldr	r0, [sp, #12]
    9320:	1a38      	subs	r0, r7, r0
    9322:	0200      	lsls	r0, r0, #8
    9324:	17c2      	asrs	r2, r0, #31
    9326:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    932a:	1200      	asrs	r0, r0, #8
    932c:	4288      	cmp	r0, r1
    932e:	db06      	blt.n	933e <MPSL_IRQ_RADIO_Handler+0x182>
    9330:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9334:	f88a 5000 	strb.w	r5, [sl]
    9338:	7845      	ldrb	r5, [r0, #1]
    933a:	2d20      	cmp	r5, #32
    933c:	d1c6      	bne.n	92cc <MPSL_IRQ_RADIO_Handler+0x110>
    933e:	f89a 0000 	ldrb.w	r0, [sl]
    9342:	f889 0000 	strb.w	r0, [r9]
    9346:	2d20      	cmp	r5, #32
    9348:	bf1c      	itt	ne
    934a:	48a5      	ldrne	r0, [pc, #660]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    934c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    9350:	f000 813e 	beq.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9354:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9358:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    935c:	6861      	ldr	r1, [r4, #4]
    935e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    9362:	f107 0008 	add.w	r0, r7, #8
    9366:	eba8 0101 	sub.w	r1, r8, r1
    936a:	0209      	lsls	r1, r1, #8
    936c:	17ca      	asrs	r2, r1, #31
    936e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9372:	1209      	asrs	r1, r1, #8
    9374:	d427      	bmi.n	93c6 <MPSL_IRQ_RADIO_Handler+0x20a>
    9376:	89c0      	ldrh	r0, [r0, #14]
    9378:	2800      	cmp	r0, #0
    937a:	f000 8129 	beq.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    937e:	89e0      	ldrh	r0, [r4, #14]
    9380:	2800      	cmp	r0, #0
    9382:	f040 8125 	bne.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9386:	f8d4 a000 	ldr.w	sl, [r4]
    938a:	f003 f8bd 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    938e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9392:	bf08      	it	eq
    9394:	200d      	moveq	r0, #13
    9396:	d00b      	beq.n	93b0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    9398:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    939c:	3856      	subs	r0, #86	; 0x56
    939e:	bf08      	it	eq
    93a0:	201c      	moveq	r0, #28
    93a2:	d005      	beq.n	93b0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    93a4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    93a8:	389f      	subs	r0, #159	; 0x9f
    93aa:	bf14      	ite	ne
    93ac:	2000      	movne	r0, #0
    93ae:	2032      	moveq	r0, #50	; 0x32
    93b0:	1c41      	adds	r1, r0, #1
    93b2:	eba8 000a 	sub.w	r0, r8, sl
    93b6:	0200      	lsls	r0, r0, #8
    93b8:	17c2      	asrs	r2, r0, #31
    93ba:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    93be:	1200      	asrs	r0, r0, #8
    93c0:	4288      	cmp	r0, r1
    93c2:	f280 8105 	bge.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    93c6:	f889 5000 	strb.w	r5, [r9]
    93ca:	7e38      	ldrb	r0, [r7, #24]
    93cc:	7c21      	ldrb	r1, [r4, #16]
    93ce:	4288      	cmp	r0, r1
    93d0:	d906      	bls.n	93e0 <MPSL_IRQ_RADIO_Handler+0x224>
    93d2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    93d6:	7845      	ldrb	r5, [r0, #1]
    93d8:	2d20      	cmp	r5, #32
    93da:	d1bb      	bne.n	9354 <MPSL_IRQ_RADIO_Handler+0x198>
    93dc:	f000 b8f8 	b.w	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    93e0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    93e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    93e8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    93ec:	8ac1      	ldrh	r1, [r0, #22]
    93ee:	68c5      	ldr	r5, [r0, #12]
    93f0:	bbe1      	cbnz	r1, 946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    93f2:	89e1      	ldrh	r1, [r4, #14]
    93f4:	b3d1      	cbz	r1, 946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    93f6:	6887      	ldr	r7, [r0, #8]
    93f8:	f003 f886 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93fc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9400:	bf08      	it	eq
    9402:	200d      	moveq	r0, #13
    9404:	d00b      	beq.n	941e <MPSL_IRQ_RADIO_Handler+0x262>
    9406:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    940a:	3856      	subs	r0, #86	; 0x56
    940c:	bf08      	it	eq
    940e:	201c      	moveq	r0, #28
    9410:	d005      	beq.n	941e <MPSL_IRQ_RADIO_Handler+0x262>
    9412:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9416:	389f      	subs	r0, #159	; 0x9f
    9418:	bf14      	ite	ne
    941a:	2000      	movne	r0, #0
    941c:	2032      	moveq	r0, #50	; 0x32
    941e:	1c41      	adds	r1, r0, #1
    9420:	1be8      	subs	r0, r5, r7
    9422:	0200      	lsls	r0, r0, #8
    9424:	17c2      	asrs	r2, r0, #31
    9426:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    942a:	1200      	asrs	r0, r0, #8
    942c:	4288      	cmp	r0, r1
    942e:	da1d      	bge.n	946c <MPSL_IRQ_RADIO_Handler+0x2b0>
    9430:	f003 f86a 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9434:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9438:	bf08      	it	eq
    943a:	200d      	moveq	r0, #13
    943c:	d00b      	beq.n	9456 <MPSL_IRQ_RADIO_Handler+0x29a>
    943e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9442:	3856      	subs	r0, #86	; 0x56
    9444:	bf08      	it	eq
    9446:	201c      	moveq	r0, #28
    9448:	d005      	beq.n	9456 <MPSL_IRQ_RADIO_Handler+0x29a>
    944a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    944e:	389f      	subs	r0, #159	; 0x9f
    9450:	bf14      	ite	ne
    9452:	2000      	movne	r0, #0
    9454:	2032      	moveq	r0, #50	; 0x32
    9456:	f89d 101c 	ldrb.w	r1, [sp, #28]
    945a:	1c40      	adds	r0, r0, #1
    945c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9460:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9464:	6889      	ldr	r1, [r1, #8]
    9466:	4408      	add	r0, r1
    9468:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    946c:	9808      	ldr	r0, [sp, #32]
    946e:	1a28      	subs	r0, r5, r0
    9470:	0200      	lsls	r0, r0, #8
    9472:	17c1      	asrs	r1, r0, #31
    9474:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9478:	1200      	asrs	r0, r0, #8
    947a:	2800      	cmp	r0, #0
    947c:	dd03      	ble.n	9486 <MPSL_IRQ_RADIO_Handler+0x2ca>
    947e:	b011      	add	sp, #68	; 0x44
    9480:	2000      	movs	r0, #0
    9482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9486:	6820      	ldr	r0, [r4, #0]
    9488:	42a8      	cmp	r0, r5
    948a:	d902      	bls.n	9492 <MPSL_IRQ_RADIO_Handler+0x2d6>
    948c:	68a1      	ldr	r1, [r4, #8]
    948e:	1c49      	adds	r1, r1, #1
    9490:	60a1      	str	r1, [r4, #8]
    9492:	6861      	ldr	r1, [r4, #4]
    9494:	f10d 0a18 	add.w	sl, sp, #24
    9498:	1a08      	subs	r0, r1, r0
    949a:	4428      	add	r0, r5
    949c:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    94a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    94a4:	e9c4 1000 	strd	r1, r0, [r4]
    94a8:	9810      	ldr	r0, [sp, #64]	; 0x40
    94aa:	900b      	str	r0, [sp, #44]	; 0x2c
    94ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    94ae:	f10d 081c 	add.w	r8, sp, #28
    94b2:	f890 5020 	ldrb.w	r5, [r0, #32]
    94b6:	2020      	movs	r0, #32
    94b8:	f88d 0018 	strb.w	r0, [sp, #24]
    94bc:	2d20      	cmp	r5, #32
    94be:	d03c      	beq.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    94c0:	4947      	ldr	r1, [pc, #284]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    94c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    94c4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    94c8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    94cc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    94d0:	f100 0108 	add.w	r1, r0, #8
    94d4:	68c0      	ldr	r0, [r0, #12]
    94d6:	6827      	ldr	r7, [r4, #0]
    94d8:	1a38      	subs	r0, r7, r0
    94da:	0200      	lsls	r0, r0, #8
    94dc:	17c2      	asrs	r2, r0, #31
    94de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    94e2:	1200      	asrs	r0, r0, #8
    94e4:	d429      	bmi.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    94e6:	89e0      	ldrh	r0, [r4, #14]
    94e8:	b300      	cbz	r0, 952c <MPSL_IRQ_RADIO_Handler+0x370>
    94ea:	89c8      	ldrh	r0, [r1, #14]
    94ec:	b9f0      	cbnz	r0, 952c <MPSL_IRQ_RADIO_Handler+0x370>
    94ee:	f8d1 9000 	ldr.w	r9, [r1]
    94f2:	f003 f809 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94f6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94fa:	bf08      	it	eq
    94fc:	200d      	moveq	r0, #13
    94fe:	d00b      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x35c>
    9500:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9504:	3856      	subs	r0, #86	; 0x56
    9506:	bf08      	it	eq
    9508:	201c      	moveq	r0, #28
    950a:	d005      	beq.n	9518 <MPSL_IRQ_RADIO_Handler+0x35c>
    950c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9510:	389f      	subs	r0, #159	; 0x9f
    9512:	bf14      	ite	ne
    9514:	2000      	movne	r0, #0
    9516:	2032      	moveq	r0, #50	; 0x32
    9518:	1c41      	adds	r1, r0, #1
    951a:	eba7 0009 	sub.w	r0, r7, r9
    951e:	0200      	lsls	r0, r0, #8
    9520:	17c2      	asrs	r2, r0, #31
    9522:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9526:	1200      	asrs	r0, r0, #8
    9528:	4288      	cmp	r0, r1
    952a:	db06      	blt.n	953a <MPSL_IRQ_RADIO_Handler+0x37e>
    952c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9530:	f88a 5000 	strb.w	r5, [sl]
    9534:	7845      	ldrb	r5, [r0, #1]
    9536:	2d20      	cmp	r5, #32
    9538:	d1c6      	bne.n	94c8 <MPSL_IRQ_RADIO_Handler+0x30c>
    953a:	f89a 0000 	ldrb.w	r0, [sl]
    953e:	f888 0000 	strb.w	r0, [r8]
    9542:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9544:	2d20      	cmp	r5, #32
    9546:	bf1c      	itt	ne
    9548:	4925      	ldrne	r1, [pc, #148]	; (95e0 <MPSL_IRQ_RADIO_Handler+0x424>)
    954a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    954e:	d03f      	beq.n	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9550:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9554:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9558:	6860      	ldr	r0, [r4, #4]
    955a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    955e:	f107 0108 	add.w	r1, r7, #8
    9562:	eba9 0000 	sub.w	r0, r9, r0
    9566:	0200      	lsls	r0, r0, #8
    9568:	17c2      	asrs	r2, r0, #31
    956a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    956e:	1200      	asrs	r0, r0, #8
    9570:	d422      	bmi.n	95b8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9572:	89c8      	ldrh	r0, [r1, #14]
    9574:	b360      	cbz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    9576:	89e0      	ldrh	r0, [r4, #14]
    9578:	bb50      	cbnz	r0, 95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    957a:	f8d4 a000 	ldr.w	sl, [r4]
    957e:	f002 ffc3 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9582:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9586:	bf08      	it	eq
    9588:	200d      	moveq	r0, #13
    958a:	d00b      	beq.n	95a4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    958c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9590:	3856      	subs	r0, #86	; 0x56
    9592:	bf08      	it	eq
    9594:	201c      	moveq	r0, #28
    9596:	d005      	beq.n	95a4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9598:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    959c:	389f      	subs	r0, #159	; 0x9f
    959e:	bf14      	ite	ne
    95a0:	2000      	movne	r0, #0
    95a2:	2032      	moveq	r0, #50	; 0x32
    95a4:	1c41      	adds	r1, r0, #1
    95a6:	eba9 000a 	sub.w	r0, r9, sl
    95aa:	0200      	lsls	r0, r0, #8
    95ac:	17c2      	asrs	r2, r0, #31
    95ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    95b2:	1200      	asrs	r0, r0, #8
    95b4:	4288      	cmp	r0, r1
    95b6:	da0b      	bge.n	95d0 <MPSL_IRQ_RADIO_Handler+0x414>
    95b8:	f888 5000 	strb.w	r5, [r8]
    95bc:	7e38      	ldrb	r0, [r7, #24]
    95be:	7c21      	ldrb	r1, [r4, #16]
    95c0:	4288      	cmp	r0, r1
    95c2:	f67f af0d 	bls.w	93e0 <MPSL_IRQ_RADIO_Handler+0x224>
    95c6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    95ca:	7845      	ldrb	r5, [r0, #1]
    95cc:	2d20      	cmp	r5, #32
    95ce:	d1bf      	bne.n	9550 <MPSL_IRQ_RADIO_Handler+0x394>
    95d0:	b011      	add	sp, #68	; 0x44
    95d2:	2001      	movs	r0, #1
    95d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95d8:	20001394 	.word	0x20001394
    95dc:	20000f94 	.word	0x20000f94
    95e0:	20001314 	.word	0x20001314
    95e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95e8:	460f      	mov	r7, r1
    95ea:	4606      	mov	r6, r0
    95ec:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    95f0:	494b      	ldr	r1, [pc, #300]	; (9720 <MPSL_IRQ_RADIO_Handler+0x564>)
    95f2:	4699      	mov	r9, r3
    95f4:	4408      	add	r0, r1
    95f6:	4692      	mov	sl, r2
    95f8:	f890 4020 	ldrb.w	r4, [r0, #32]
    95fc:	2020      	movs	r0, #32
    95fe:	7010      	strb	r0, [r2, #0]
    9600:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9604:	2c20      	cmp	r4, #32
    9606:	bf1c      	itt	ne
    9608:	4846      	ldrne	r0, [pc, #280]	; (9724 <MPSL_IRQ_RADIO_Handler+0x568>)
    960a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    960e:	d038      	beq.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9610:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9614:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9618:	f100 0108 	add.w	r1, r0, #8
    961c:	68c0      	ldr	r0, [r0, #12]
    961e:	6835      	ldr	r5, [r6, #0]
    9620:	1a28      	subs	r0, r5, r0
    9622:	0200      	lsls	r0, r0, #8
    9624:	17c2      	asrs	r2, r0, #31
    9626:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    962a:	1200      	asrs	r0, r0, #8
    962c:	d429      	bmi.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    962e:	89f0      	ldrh	r0, [r6, #14]
    9630:	b300      	cbz	r0, 9674 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9632:	89c8      	ldrh	r0, [r1, #14]
    9634:	b9f0      	cbnz	r0, 9674 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9636:	6808      	ldr	r0, [r1, #0]
    9638:	9000      	str	r0, [sp, #0]
    963a:	f002 ff65 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    963e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9642:	bf08      	it	eq
    9644:	200d      	moveq	r0, #13
    9646:	d00b      	beq.n	9660 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9648:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    964c:	3856      	subs	r0, #86	; 0x56
    964e:	bf08      	it	eq
    9650:	201c      	moveq	r0, #28
    9652:	d005      	beq.n	9660 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9654:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9658:	389f      	subs	r0, #159	; 0x9f
    965a:	bf14      	ite	ne
    965c:	2000      	movne	r0, #0
    965e:	2032      	moveq	r0, #50	; 0x32
    9660:	1c41      	adds	r1, r0, #1
    9662:	9800      	ldr	r0, [sp, #0]
    9664:	1a28      	subs	r0, r5, r0
    9666:	0200      	lsls	r0, r0, #8
    9668:	17c2      	asrs	r2, r0, #31
    966a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    966e:	1200      	asrs	r0, r0, #8
    9670:	4288      	cmp	r0, r1
    9672:	db06      	blt.n	9682 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9674:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9678:	f88a 4000 	strb.w	r4, [sl]
    967c:	7844      	ldrb	r4, [r0, #1]
    967e:	2c20      	cmp	r4, #32
    9680:	d1c6      	bne.n	9610 <MPSL_IRQ_RADIO_Handler+0x454>
    9682:	f89a 0000 	ldrb.w	r0, [sl]
    9686:	f889 0000 	strb.w	r0, [r9]
    968a:	2c20      	cmp	r4, #32
    968c:	bf1c      	itt	ne
    968e:	4825      	ldrne	r0, [pc, #148]	; (9724 <MPSL_IRQ_RADIO_Handler+0x568>)
    9690:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    9694:	d040      	beq.n	9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    9696:	bf00      	nop
    9698:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    969c:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    96a0:	6870      	ldr	r0, [r6, #4]
    96a2:	68bd      	ldr	r5, [r7, #8]
    96a4:	f107 0108 	add.w	r1, r7, #8
    96a8:	1a28      	subs	r0, r5, r0
    96aa:	0200      	lsls	r0, r0, #8
    96ac:	17c2      	asrs	r2, r0, #31
    96ae:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    96b2:	1200      	asrs	r0, r0, #8
    96b4:	d422      	bmi.n	96fc <MPSL_IRQ_RADIO_Handler+0x540>
    96b6:	89c8      	ldrh	r0, [r1, #14]
    96b8:	b370      	cbz	r0, 9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96ba:	89f0      	ldrh	r0, [r6, #14]
    96bc:	bb60      	cbnz	r0, 9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96be:	f8d6 b000 	ldr.w	fp, [r6]
    96c2:	f002 ff21 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    96c6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    96ca:	bf08      	it	eq
    96cc:	200d      	moveq	r0, #13
    96ce:	d00b      	beq.n	96e8 <MPSL_IRQ_RADIO_Handler+0x52c>
    96d0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    96d4:	3856      	subs	r0, #86	; 0x56
    96d6:	bf08      	it	eq
    96d8:	201c      	moveq	r0, #28
    96da:	d005      	beq.n	96e8 <MPSL_IRQ_RADIO_Handler+0x52c>
    96dc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    96e0:	389f      	subs	r0, #159	; 0x9f
    96e2:	bf14      	ite	ne
    96e4:	2000      	movne	r0, #0
    96e6:	2032      	moveq	r0, #50	; 0x32
    96e8:	1c41      	adds	r1, r0, #1
    96ea:	eba5 000b 	sub.w	r0, r5, fp
    96ee:	0200      	lsls	r0, r0, #8
    96f0:	17c2      	asrs	r2, r0, #31
    96f2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    96f6:	1200      	asrs	r0, r0, #8
    96f8:	4288      	cmp	r0, r1
    96fa:	da0d      	bge.n	9718 <MPSL_IRQ_RADIO_Handler+0x55c>
    96fc:	f889 4000 	strb.w	r4, [r9]
    9700:	7e38      	ldrb	r0, [r7, #24]
    9702:	7c31      	ldrb	r1, [r6, #16]
    9704:	4288      	cmp	r0, r1
    9706:	d802      	bhi.n	970e <MPSL_IRQ_RADIO_Handler+0x552>
    9708:	2000      	movs	r0, #0
    970a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    970e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9712:	7844      	ldrb	r4, [r0, #1]
    9714:	2c20      	cmp	r4, #32
    9716:	d1bf      	bne.n	9698 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9718:	2001      	movs	r0, #1
    971a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    971e:	0000      	.short	0x0000
    9720:	20001394 	.word	0x20001394
    9724:	20001314 	.word	0x20001314
    9728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    972c:	b098      	sub	sp, #96	; 0x60
    972e:	4615      	mov	r5, r2
    9730:	f002 fa7a 	bl	bc28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9734:	4604      	mov	r4, r0
    9736:	f002 fd0f 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    973a:	4606      	mov	r6, r0
    973c:	9819      	ldr	r0, [sp, #100]	; 0x64
    973e:	2801      	cmp	r0, #1
    9740:	bf18      	it	ne
    9742:	2802      	cmpne	r0, #2
    9744:	d005      	beq.n	9752 <MPSL_IRQ_RADIO_Handler+0x596>
    9746:	f640 1192 	movw	r1, #2450	; 0x992
    974a:	f04f 0070 	mov.w	r0, #112	; 0x70
    974e:	f003 f87b 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9752:	49fa      	ldr	r1, [pc, #1000]	; (9b3c <MPSL_IRQ_RADIO_Handler+0x980>)
    9754:	2001      	movs	r0, #1
    9756:	6008      	str	r0, [r1, #0]
    9758:	49f9      	ldr	r1, [pc, #996]	; (9b40 <MPSL_IRQ_RADIO_Handler+0x984>)
    975a:	6889      	ldr	r1, [r1, #8]
    975c:	6008      	str	r0, [r1, #0]
    975e:	2000      	movs	r0, #0
    9760:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9764:	900a      	str	r0, [sp, #40]	; 0x28
    9766:	1e40      	subs	r0, r0, #1
    9768:	900b      	str	r0, [sp, #44]	; 0x2c
    976a:	49f6      	ldr	r1, [pc, #984]	; (9b44 <MPSL_IRQ_RADIO_Handler+0x988>)
    976c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9770:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9774:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9778:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    977c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9780:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9784:	6989      	ldr	r1, [r1, #24]
    9786:	9110      	str	r1, [sp, #64]	; 0x40
    9788:	f007 fa4a 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    978c:	4602      	mov	r2, r0
    978e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    9792:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    9796:	4bec      	ldr	r3, [pc, #944]	; (9b48 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9798:	4440      	add	r0, r8
    979a:	1c41      	adds	r1, r0, #1
    979c:	1850      	adds	r0, r2, r1
    979e:	429a      	cmp	r2, r3
    97a0:	d854      	bhi.n	984c <MPSL_IRQ_RADIO_Handler+0x690>
    97a2:	4dea      	ldr	r5, [pc, #936]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    97a4:	42a9      	cmp	r1, r5
    97a6:	dc58      	bgt.n	985a <MPSL_IRQ_RADIO_Handler+0x69e>
    97a8:	426a      	negs	r2, r5
    97aa:	4291      	cmp	r1, r2
    97ac:	db5d      	blt.n	986a <MPSL_IRQ_RADIO_Handler+0x6ae>
    97ae:	1c59      	adds	r1, r3, #1
    97b0:	4281      	cmp	r1, r0
    97b2:	bfdc      	itt	le
    97b4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    97b8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    97bc:	dd05      	ble.n	97ca <MPSL_IRQ_RADIO_Handler+0x60e>
    97be:	2800      	cmp	r0, #0
    97c0:	bfbc      	itt	lt
    97c2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    97c6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    97ca:	9014      	str	r0, [sp, #80]	; 0x50
    97cc:	48e0      	ldr	r0, [pc, #896]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    97ce:	f1b8 0f00 	cmp.w	r8, #0
    97d2:	8b80      	ldrh	r0, [r0, #28]
    97d4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    97d8:	bf14      	ite	ne
    97da:	f04f 0a01 	movne.w	sl, #1
    97de:	f04f 0a00 	moveq.w	sl, #0
    97e2:	f002 ffb9 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    97e6:	9016      	str	r0, [sp, #88]	; 0x58
    97e8:	f1ba 0f00 	cmp.w	sl, #0
    97ec:	d008      	beq.n	9800 <MPSL_IRQ_RADIO_Handler+0x644>
    97ee:	48d8      	ldr	r0, [pc, #864]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    97f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    97f2:	f1b0 3fff 	cmp.w	r0, #4294967295
    97f6:	bf02      	ittt	eq
    97f8:	9816      	ldreq	r0, [sp, #88]	; 0x58
    97fa:	2800      	cmpeq	r0, #0
    97fc:	2701      	moveq	r7, #1
    97fe:	d001      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x648>
    9800:	f04f 0700 	mov.w	r7, #0
    9804:	f002 fe80 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9808:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    980c:	bf08      	it	eq
    980e:	200d      	moveq	r0, #13
    9810:	d00b      	beq.n	982a <MPSL_IRQ_RADIO_Handler+0x66e>
    9812:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9816:	3856      	subs	r0, #86	; 0x56
    9818:	bf08      	it	eq
    981a:	201c      	moveq	r0, #28
    981c:	d005      	beq.n	982a <MPSL_IRQ_RADIO_Handler+0x66e>
    981e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9822:	389f      	subs	r0, #159	; 0x9f
    9824:	bf14      	ite	ne
    9826:	2000      	movne	r0, #0
    9828:	2032      	moveq	r0, #50	; 0x32
    982a:	f04f 0900 	mov.w	r9, #0
    982e:	46cb      	mov	fp, r9
    9830:	9013      	str	r0, [sp, #76]	; 0x4c
    9832:	4546      	cmp	r6, r8
    9834:	d936      	bls.n	98a4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9836:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9838:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9b48 <MPSL_IRQ_RADIO_Handler+0x98c>
    983c:	ea6f 0c06 	mvn.w	ip, r6
    9840:	4669      	mov	r1, sp
    9842:	aa17      	add	r2, sp, #92	; 0x5c
    9844:	eb03 000c 	add.w	r0, r3, ip
    9848:	454b      	cmp	r3, r9
    984a:	d904      	bls.n	9856 <MPSL_IRQ_RADIO_Handler+0x69a>
    984c:	f240 519e 	movw	r1, #1438	; 0x59e
    9850:	2070      	movs	r0, #112	; 0x70
    9852:	f002 fff9 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9856:	45ac      	cmp	ip, r5
    9858:	dd04      	ble.n	9864 <MPSL_IRQ_RADIO_Handler+0x6a8>
    985a:	f240 519f 	movw	r1, #1439	; 0x59f
    985e:	2070      	movs	r0, #112	; 0x70
    9860:	f002 fff2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9864:	4bbb      	ldr	r3, [pc, #748]	; (9b54 <MPSL_IRQ_RADIO_Handler+0x998>)
    9866:	459c      	cmp	ip, r3
    9868:	da04      	bge.n	9874 <MPSL_IRQ_RADIO_Handler+0x6b8>
    986a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    986e:	2070      	movs	r0, #112	; 0x70
    9870:	f002 ffea 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9874:	4bb8      	ldr	r3, [pc, #736]	; (9b58 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9876:	4283      	cmp	r3, r0
    9878:	bfdc      	itt	le
    987a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    987e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9882:	dd05      	ble.n	9890 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9884:	2800      	cmp	r0, #0
    9886:	bfbc      	itt	lt
    9888:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    988c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9890:	f001 ff24 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9894:	9800      	ldr	r0, [sp, #0]
    9896:	990c      	ldr	r1, [sp, #48]	; 0x30
    9898:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    989c:	9000      	str	r0, [sp, #0]
    989e:	1a08      	subs	r0, r1, r0
    98a0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    98a4:	2f00      	cmp	r7, #0
    98a6:	bf18      	it	ne
    98a8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    98ac:	d105      	bne.n	98ba <MPSL_IRQ_RADIO_Handler+0x6fe>
    98ae:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    98b2:	2800      	cmp	r0, #0
    98b4:	bf18      	it	ne
    98b6:	f04f 0b02 	movne.w	fp, #2
    98ba:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    98be:	d008      	beq.n	98d2 <MPSL_IRQ_RADIO_Handler+0x716>
    98c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    98c2:	1b00      	subs	r0, r0, r4
    98c4:	0200      	lsls	r0, r0, #8
    98c6:	17c1      	asrs	r1, r0, #31
    98c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    98cc:	1200      	asrs	r0, r0, #8
    98ce:	2801      	cmp	r0, #1
    98d0:	da02      	bge.n	98d8 <MPSL_IRQ_RADIO_Handler+0x71c>
    98d2:	2003      	movs	r0, #3
    98d4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    98d6:	e00d      	b.n	98f4 <MPSL_IRQ_RADIO_Handler+0x738>
    98d8:	b157      	cbz	r7, 98f0 <MPSL_IRQ_RADIO_Handler+0x734>
    98da:	489d      	ldr	r0, [pc, #628]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    98dc:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    98e0:	b130      	cbz	r0, 98f0 <MPSL_IRQ_RADIO_Handler+0x734>
    98e2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    98e6:	f110 0b00 	adds.w	fp, r0, #0
    98ea:	bf18      	it	ne
    98ec:	f04f 0b02 	movne.w	fp, #2
    98f0:	4625      	mov	r5, r4
    98f2:	2000      	movs	r0, #0
    98f4:	4483      	add	fp, r0
    98f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    98f8:	eba0 0009 	sub.w	r0, r0, r9
    98fc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9900:	1e48      	subs	r0, r1, #1
    9902:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9906:	1b42      	subs	r2, r0, r5
    9908:	0212      	lsls	r2, r2, #8
    990a:	17d3      	asrs	r3, r2, #31
    990c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9910:	1212      	asrs	r2, r2, #8
    9912:	455a      	cmp	r2, fp
    9914:	db04      	blt.n	9920 <MPSL_IRQ_RADIO_Handler+0x764>
    9916:	f1b9 0f00 	cmp.w	r9, #0
    991a:	bf18      	it	ne
    991c:	910c      	strne	r1, [sp, #48]	; 0x30
    991e:	e02d      	b.n	997c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9920:	f1b9 0f00 	cmp.w	r9, #0
    9924:	d005      	beq.n	9932 <MPSL_IRQ_RADIO_Handler+0x776>
    9926:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    992a:	b920      	cbnz	r0, 9936 <MPSL_IRQ_RADIO_Handler+0x77a>
    992c:	f002 fc0a 	bl	c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9930:	b108      	cbz	r0, 9936 <MPSL_IRQ_RADIO_Handler+0x77a>
    9932:	b9af      	cbnz	r7, 9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9934:	e00c      	b.n	9950 <MPSL_IRQ_RADIO_Handler+0x794>
    9936:	b92f      	cbnz	r7, 9944 <MPSL_IRQ_RADIO_Handler+0x788>
    9938:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    993c:	2800      	cmp	r0, #0
    993e:	bf18      	it	ne
    9940:	f1ab 0b02 	subne.w	fp, fp, #2
    9944:	f04f 0900 	mov.w	r9, #0
    9948:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    994c:	464e      	mov	r6, r9
    994e:	e007      	b.n	9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9950:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9954:	b120      	cbz	r0, 9960 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9956:	2000      	movs	r0, #0
    9958:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    995c:	f1ab 0b02 	sub.w	fp, fp, #2
    9960:	980c      	ldr	r0, [sp, #48]	; 0x30
    9962:	eba0 0109 	sub.w	r1, r0, r9
    9966:	1e48      	subs	r0, r1, #1
    9968:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    996c:	1b42      	subs	r2, r0, r5
    996e:	0212      	lsls	r2, r2, #8
    9970:	17d3      	asrs	r3, r2, #31
    9972:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9976:	1212      	asrs	r2, r2, #8
    9978:	455a      	cmp	r2, fp
    997a:	db7d      	blt.n	9a78 <MPSL_IRQ_RADIO_Handler+0x8bc>
    997c:	4a74      	ldr	r2, [pc, #464]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    997e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9980:	1a89      	subs	r1, r1, r2
    9982:	0209      	lsls	r1, r1, #8
    9984:	17cb      	asrs	r3, r1, #31
    9986:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    998a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    998c:	1209      	asrs	r1, r1, #8
    998e:	b93b      	cbnz	r3, 99a0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    9990:	f1b2 3fff 	cmp.w	r2, #4294967295
    9994:	bf1c      	itt	ne
    9996:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    9998:	4291      	cmpne	r1, r2
    999a:	bfb8      	it	lt
    999c:	2100      	movlt	r1, #0
    999e:	db00      	blt.n	99a2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    99a0:	2101      	movs	r1, #1
    99a2:	ea3a 0101 	bics.w	r1, sl, r1
    99a6:	d167      	bne.n	9a78 <MPSL_IRQ_RADIO_Handler+0x8bc>
    99a8:	9919      	ldr	r1, [sp, #100]	; 0x64
    99aa:	4605      	mov	r5, r0
    99ac:	f04f 0900 	mov.w	r9, #0
    99b0:	9105      	str	r1, [sp, #20]
    99b2:	f001 fffd 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    99b6:	1a28      	subs	r0, r5, r0
    99b8:	0200      	lsls	r0, r0, #8
    99ba:	17c1      	asrs	r1, r0, #31
    99bc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    99c0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    99c4:	f002 fda0 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99c8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99cc:	bf08      	it	eq
    99ce:	200d      	moveq	r0, #13
    99d0:	d00b      	beq.n	99ea <MPSL_IRQ_RADIO_Handler+0x82e>
    99d2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    99d6:	3856      	subs	r0, #86	; 0x56
    99d8:	bf08      	it	eq
    99da:	201c      	moveq	r0, #28
    99dc:	d005      	beq.n	99ea <MPSL_IRQ_RADIO_Handler+0x82e>
    99de:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    99e2:	389f      	subs	r0, #159	; 0x9f
    99e4:	bf14      	ite	ne
    99e6:	2000      	movne	r0, #0
    99e8:	2032      	moveq	r0, #50	; 0x32
    99ea:	300b      	adds	r0, #11
    99ec:	4558      	cmp	r0, fp
    99ee:	dd1f      	ble.n	9a30 <MPSL_IRQ_RADIO_Handler+0x874>
    99f0:	9805      	ldr	r0, [sp, #20]
    99f2:	2801      	cmp	r0, #1
    99f4:	d001      	beq.n	99fa <MPSL_IRQ_RADIO_Handler+0x83e>
    99f6:	b147      	cbz	r7, 9a0a <MPSL_IRQ_RADIO_Handler+0x84e>
    99f8:	e012      	b.n	9a20 <MPSL_IRQ_RADIO_Handler+0x864>
    99fa:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    99fe:	d11c      	bne.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a00:	f640 1113 	movw	r1, #2323	; 0x913
    9a04:	2070      	movs	r0, #112	; 0x70
    9a06:	f002 ff1f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a0a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9a0e:	d007      	beq.n	9a20 <MPSL_IRQ_RADIO_Handler+0x864>
    9a10:	1b60      	subs	r0, r4, r5
    9a12:	0200      	lsls	r0, r0, #8
    9a14:	17c1      	asrs	r1, r0, #31
    9a16:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9a1a:	1200      	asrs	r0, r0, #8
    9a1c:	2804      	cmp	r0, #4
    9a1e:	dd04      	ble.n	9a2a <MPSL_IRQ_RADIO_Handler+0x86e>
    9a20:	462c      	mov	r4, r5
    9a22:	4620      	mov	r0, r4
    9a24:	f001 ffea 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9a28:	e007      	b.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a2a:	2800      	cmp	r0, #0
    9a2c:	dc63      	bgt.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a2e:	e004      	b.n	9a3a <MPSL_IRQ_RADIO_Handler+0x87e>
    9a30:	462c      	mov	r4, r5
    9a32:	4620      	mov	r0, r4
    9a34:	f001 ffe2 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9a38:	46d1      	mov	r9, sl
    9a3a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9a3e:	d055      	beq.n	9aec <MPSL_IRQ_RADIO_Handler+0x930>
    9a40:	980c      	ldr	r0, [sp, #48]	; 0x30
    9a42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9a44:	1b00      	subs	r0, r0, r4
    9a46:	1b12      	subs	r2, r2, r4
    9a48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9a4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9a50:	2801      	cmp	r0, #1
    9a52:	d350      	bcc.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9a58:	bf98      	it	ls
    9a5a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9a5e:	d84a      	bhi.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a60:	4620      	mov	r0, r4
    9a62:	f007 f8dd 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9a66:	9914      	ldr	r1, [sp, #80]	; 0x50
    9a68:	4a38      	ldr	r2, [pc, #224]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    9a6a:	1a0d      	subs	r5, r1, r0
    9a6c:	f04f 0b00 	mov.w	fp, #0
    9a70:	1aaa      	subs	r2, r5, r2
    9a72:	f17b 0200 	sbcs.w	r2, fp, #0
    9a76:	e000      	b.n	9a7a <MPSL_IRQ_RADIO_Handler+0x8be>
    9a78:	e03d      	b.n	9af6 <MPSL_IRQ_RADIO_Handler+0x93a>
    9a7a:	d316      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a7c:	4a33      	ldr	r2, [pc, #204]	; (9b4c <MPSL_IRQ_RADIO_Handler+0x990>)
    9a7e:	1a43      	subs	r3, r0, r1
    9a80:	1a9a      	subs	r2, r3, r2
    9a82:	f17b 0200 	sbcs.w	r2, fp, #0
    9a86:	d310      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a88:	4a2f      	ldr	r2, [pc, #188]	; (9b48 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9a8a:	42aa      	cmp	r2, r5
    9a8c:	bf3e      	ittt	cc
    9a8e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    9a92:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    9a96:	1845      	addcc	r5, r0, r1
    9a98:	d307      	bcc.n	9aaa <MPSL_IRQ_RADIO_Handler+0x8ee>
    9a9a:	429a      	cmp	r2, r3
    9a9c:	d22f      	bcs.n	9afe <MPSL_IRQ_RADIO_Handler+0x942>
    9a9e:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    9aa2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    9aa6:	4408      	add	r0, r1
    9aa8:	4245      	negs	r5, r0
    9aaa:	4f29      	ldr	r7, [pc, #164]	; (9b50 <MPSL_IRQ_RADIO_Handler+0x994>)
    9aac:	7fb8      	ldrb	r0, [r7, #30]
    9aae:	b358      	cbz	r0, 9b08 <MPSL_IRQ_RADIO_Handler+0x94c>
    9ab0:	9819      	ldr	r0, [sp, #100]	; 0x64
    9ab2:	2801      	cmp	r0, #1
    9ab4:	d005      	beq.n	9ac2 <MPSL_IRQ_RADIO_Handler+0x906>
    9ab6:	2002      	movs	r0, #2
    9ab8:	f002 f9f0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9abc:	2001      	movs	r0, #1
    9abe:	f002 f9ed 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ac2:	45b0      	cmp	r8, r6
    9ac4:	d22c      	bcs.n	9b20 <MPSL_IRQ_RADIO_Handler+0x964>
    9ac6:	eba5 0106 	sub.w	r1, r5, r6
    9aca:	f04f 0002 	mov.w	r0, #2
    9ace:	f002 f92f 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ad2:	b390      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9ad4:	f1b8 0f00 	cmp.w	r8, #0
    9ad8:	bf1c      	itt	ne
    9ada:	eba5 0108 	subne.w	r1, r5, r8
    9ade:	2001      	movne	r0, #1
    9ae0:	d044      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9ae2:	bf00      	nop
    9ae4:	f002 f924 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ae8:	b338      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9aea:	e03f      	b.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9aec:	f640 2131 	movw	r1, #2609	; 0xa31
    9af0:	2070      	movs	r0, #112	; 0x70
    9af2:	f002 fea9 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9af6:	b01b      	add	sp, #108	; 0x6c
    9af8:	2000      	movs	r0, #0
    9afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9afe:	f640 3105 	movw	r1, #2821	; 0xb05
    9b02:	2070      	movs	r0, #112	; 0x70
    9b04:	f002 fea0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b08:	45b0      	cmp	r8, r6
    9b0a:	bf34      	ite	cc
    9b0c:	4630      	movcc	r0, r6
    9b0e:	4640      	movcs	r0, r8
    9b10:	301e      	adds	r0, #30
    9b12:	42a8      	cmp	r0, r5
    9b14:	dbcc      	blt.n	9ab0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9b16:	f640 2145 	movw	r1, #2629	; 0xa45
    9b1a:	2070      	movs	r0, #112	; 0x70
    9b1c:	f002 fe94 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b20:	d91c      	bls.n	9b5c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9b22:	eba5 0108 	sub.w	r1, r5, r8
    9b26:	2001      	movs	r0, #1
    9b28:	f002 f902 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b2c:	b128      	cbz	r0, 9b3a <MPSL_IRQ_RADIO_Handler+0x97e>
    9b2e:	2e00      	cmp	r6, #0
    9b30:	bf1c      	itt	ne
    9b32:	1ba9      	subne	r1, r5, r6
    9b34:	2002      	movne	r0, #2
    9b36:	d019      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9b38:	e7d4      	b.n	9ae4 <MPSL_IRQ_RADIO_Handler+0x928>
    9b3a:	e042      	b.n	9bc2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9b3c:	40000508 	.word	0x40000508
    9b40:	200002d4 	.word	0x200002d4
    9b44:	20000f94 	.word	0x20000f94
    9b48:	1e847fff 	.word	0x1e847fff
    9b4c:	0f424000 	.word	0x0f424000
    9b50:	20001394 	.word	0x20001394
    9b54:	f0bdc000 	.word	0xf0bdc000
    9b58:	1e848000 	.word	0x1e848000
    9b5c:	ea56 0008 	orrs.w	r0, r6, r8
    9b60:	d004      	beq.n	9b6c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9b62:	f640 1176 	movw	r1, #2422	; 0x976
    9b66:	2070      	movs	r0, #112	; 0x70
    9b68:	f002 fe6e 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b6c:	4629      	mov	r1, r5
    9b6e:	2000      	movs	r0, #0
    9b70:	f002 f8de 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b74:	b328      	cbz	r0, 9bc2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9b76:	2601      	movs	r6, #1
    9b78:	f1ba 0f00 	cmp.w	sl, #0
    9b7c:	bf04      	itt	eq
    9b7e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9b82:	2800      	cmpeq	r0, #0
    9b84:	d002      	beq.n	9b8c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9b86:	f1b9 0f00 	cmp.w	r9, #0
    9b8a:	d024      	beq.n	9bd6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    9b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9b8e:	f1b0 3fff 	cmp.w	r0, #4294967295
    9b92:	d004      	beq.n	9b9e <MPSL_IRQ_RADIO_Handler+0x9e2>
    9b94:	f002 fcbe 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9b98:	f04f 30ff 	mov.w	r0, #4294967295
    9b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
    9b9e:	f1b9 0f00 	cmp.w	r9, #0
    9ba2:	d01c      	beq.n	9bde <MPSL_IRQ_RADIO_Handler+0xa22>
    9ba4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9ba6:	1a20      	subs	r0, r4, r0
    9ba8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9bac:	2005      	movs	r0, #5
    9bae:	f002 f8bf 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9bb2:	b360      	cbz	r0, 9c0e <MPSL_IRQ_RADIO_Handler+0xa52>
    9bb4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9bb8:	2800      	cmp	r0, #0
    9bba:	bf08      	it	eq
    9bbc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    9bc0:	e015      	b.n	9bee <MPSL_IRQ_RADIO_Handler+0xa32>
    9bc2:	2002      	movs	r0, #2
    9bc4:	f002 f96a 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bc8:	2001      	movs	r0, #1
    9bca:	f002 f967 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bce:	b01b      	add	sp, #108	; 0x6c
    9bd0:	2000      	movs	r0, #0
    9bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    9bd8:	f1b0 3fff 	cmp.w	r0, #4294967295
    9bdc:	d012      	beq.n	9c04 <MPSL_IRQ_RADIO_Handler+0xa48>
    9bde:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    9be2:	b120      	cbz	r0, 9bee <MPSL_IRQ_RADIO_Handler+0xa32>
    9be4:	2005      	movs	r0, #5
    9be6:	f002 f959 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9bea:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    9bee:	eba5 0008 	sub.w	r0, r5, r8
    9bf2:	f1a0 0119 	sub.w	r1, r0, #25
    9bf6:	2900      	cmp	r1, #0
    9bf8:	dc0e      	bgt.n	9c18 <MPSL_IRQ_RADIO_Handler+0xa5c>
    9bfa:	f640 216e 	movw	r1, #2670	; 0xa6e
    9bfe:	2070      	movs	r0, #112	; 0x70
    9c00:	f002 fe22 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c04:	f002 fca2 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9c08:	f001 fed2 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c0c:	e7c6      	b.n	9b9c <MPSL_IRQ_RADIO_Handler+0x9e0>
    9c0e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9c12:	2070      	movs	r0, #112	; 0x70
    9c14:	f002 fe18 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c18:	2003      	movs	r0, #3
    9c1a:	f002 f889 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9c1e:	b1c0      	cbz	r0, 9c52 <MPSL_IRQ_RADIO_Handler+0xa96>
    9c20:	480e      	ldr	r0, [pc, #56]	; (9c5c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9c22:	6880      	ldr	r0, [r0, #8]
    9c24:	f8c0 b000 	str.w	fp, [r0]
    9c28:	480d      	ldr	r0, [pc, #52]	; (9c60 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    9c2a:	f8c0 b000 	str.w	fp, [r0]
    9c2e:	ac0a      	add	r4, sp, #40	; 0x28
    9c30:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9c34:	6038      	str	r0, [r7, #0]
    9c36:	6079      	str	r1, [r7, #4]
    9c38:	60ba      	str	r2, [r7, #8]
    9c3a:	60fb      	str	r3, [r7, #12]
    9c3c:	ac0e      	add	r4, sp, #56	; 0x38
    9c3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9c42:	6138      	str	r0, [r7, #16]
    9c44:	6179      	str	r1, [r7, #20]
    9c46:	61ba      	str	r2, [r7, #24]
    9c48:	61fb      	str	r3, [r7, #28]
    9c4a:	b01b      	add	sp, #108	; 0x6c
    9c4c:	2001      	movs	r0, #1
    9c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9c52:	f640 2176 	movw	r1, #2678	; 0xa76
    9c56:	2070      	movs	r0, #112	; 0x70
    9c58:	f002 fdf6 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c5c:	200002d4 	.word	0x200002d4
    9c60:	40000508 	.word	0x40000508
    9c64:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c68:	4614      	mov	r4, r2
    9c6a:	460d      	mov	r5, r1
    9c6c:	f04f 0a00 	mov.w	sl, #0
    9c70:	890a      	ldrh	r2, [r1, #8]
    9c72:	4651      	mov	r1, sl
    9c74:	f362 411f 	bfi	r1, r2, #16, #16
    9c78:	7aaa      	ldrb	r2, [r5, #10]
    9c7a:	46d1      	mov	r9, sl
    9c7c:	f362 0907 	bfi	r9, r2, #0, #8
    9c80:	7aea      	ldrb	r2, [r5, #11]
    9c82:	4606      	mov	r6, r0
    9c84:	f362 290f 	bfi	r9, r2, #8, #8
    9c88:	782a      	ldrb	r2, [r5, #0]
    9c8a:	b083      	sub	sp, #12
    9c8c:	6840      	ldr	r0, [r0, #4]
    9c8e:	f8c4 a000 	str.w	sl, [r4]
    9c92:	f362 4917 	bfi	r9, r2, #16, #8
    9c96:	f8c4 a004 	str.w	sl, [r4, #4]
    9c9a:	f8c4 9010 	str.w	r9, [r4, #16]
    9c9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
    9ca2:	4f9d      	ldr	r7, [pc, #628]	; (9f18 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    9ca4:	6870      	ldr	r0, [r6, #4]
    9ca6:	fba0 8907 	umull	r8, r9, r0, r7
    9caa:	6830      	ldr	r0, [r6, #0]
    9cac:	f006 ffb8 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9cb0:	eb10 0108 	adds.w	r1, r0, r8
    9cb4:	eb4a 0209 	adc.w	r2, sl, r9
    9cb8:	7828      	ldrb	r0, [r5, #0]
    9cba:	ea4f 0967 	mov.w	r9, r7, asr #1
    9cbe:	f1c9 0b00 	rsb	fp, r9, #0
    9cc2:	b170      	cbz	r0, 9ce2 <MPSL_IRQ_RADIO_Handler+0xb26>
    9cc4:	89e0      	ldrh	r0, [r4, #14]
    9cc6:	f894 8011 	ldrb.w	r8, [r4, #17]
    9cca:	43c0      	mvns	r0, r0
    9ccc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    9cd0:	f104 020c 	add.w	r2, r4, #12
    9cd4:	4548      	cmp	r0, r9
    9cd6:	dd7c      	ble.n	9dd2 <MPSL_IRQ_RADIO_Handler+0xc16>
    9cd8:	f240 519f 	movw	r1, #1439	; 0x59f
    9cdc:	2070      	movs	r0, #112	; 0x70
    9cde:	f002 fdb3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ce2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9f1c <MPSL_IRQ_RADIO_Handler+0xd60>
    9ce6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9cea:	eb11 0a0c 	adds.w	sl, r1, ip
    9cee:	f142 0c00 	adc.w	ip, r2, #0
    9cf2:	ebb0 0a0a 	subs.w	sl, r0, sl
    9cf6:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9cfa:	d272      	bcs.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9cfc:	1a41      	subs	r1, r0, r1
    9cfe:	eb73 0102 	sbcs.w	r1, r3, r2
    9d02:	d36e      	bcc.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9d04:	ebb0 0608 	subs.w	r6, r0, r8
    9d08:	42b7      	cmp	r7, r6
    9d0a:	d82b      	bhi.n	9d64 <MPSL_IRQ_RADIO_Handler+0xba8>
    9d0c:	89e0      	ldrh	r0, [r4, #14]
    9d0e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9d12:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9d16:	43c1      	mvns	r1, r0
    9d18:	4a81      	ldr	r2, [pc, #516]	; (9f20 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9d1a:	eb08 0001 	add.w	r0, r8, r1
    9d1e:	4542      	cmp	r2, r8
    9d20:	d32b      	bcc.n	9d7a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9d22:	4549      	cmp	r1, r9
    9d24:	dcd8      	bgt.n	9cd8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9d26:	4559      	cmp	r1, fp
    9d28:	db66      	blt.n	9df8 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9d2a:	4287      	cmp	r7, r0
    9d2c:	bfdc      	itt	le
    9d2e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9d32:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9d36:	dd05      	ble.n	9d44 <MPSL_IRQ_RADIO_Handler+0xb88>
    9d38:	2800      	cmp	r0, #0
    9d3a:	bfbc      	itt	lt
    9d3c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9d40:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9d44:	466a      	mov	r2, sp
    9d46:	a901      	add	r1, sp, #4
    9d48:	f001 fcc8 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9d4c:	89e0      	ldrh	r0, [r4, #14]
    9d4e:	f89d 1000 	ldrb.w	r1, [sp]
    9d52:	1a30      	subs	r0, r6, r0
    9d54:	1a40      	subs	r0, r0, r1
    9d56:	1e40      	subs	r0, r0, #1
    9d58:	42b8      	cmp	r0, r7
    9d5a:	d302      	bcc.n	9d62 <MPSL_IRQ_RADIO_Handler+0xba6>
    9d5c:	68a0      	ldr	r0, [r4, #8]
    9d5e:	1c40      	adds	r0, r0, #1
    9d60:	60a0      	str	r0, [r4, #8]
    9d62:	4646      	mov	r6, r8
    9d64:	89e0      	ldrh	r0, [r4, #14]
    9d66:	4b6e      	ldr	r3, [pc, #440]	; (9f20 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9d68:	43c1      	mvns	r1, r0
    9d6a:	686d      	ldr	r5, [r5, #4]
    9d6c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9d70:	1870      	adds	r0, r6, r1
    9d72:	f104 020c 	add.w	r2, r4, #12
    9d76:	429e      	cmp	r6, r3
    9d78:	d904      	bls.n	9d84 <MPSL_IRQ_RADIO_Handler+0xbc8>
    9d7a:	f240 519e 	movw	r1, #1438	; 0x59e
    9d7e:	2070      	movs	r0, #112	; 0x70
    9d80:	f002 fd62 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d84:	4549      	cmp	r1, r9
    9d86:	dca7      	bgt.n	9cd8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9d88:	4559      	cmp	r1, fp
    9d8a:	db35      	blt.n	9df8 <MPSL_IRQ_RADIO_Handler+0xc3c>
    9d8c:	4287      	cmp	r7, r0
    9d8e:	bfdc      	itt	le
    9d90:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9d94:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9d98:	dd05      	ble.n	9da6 <MPSL_IRQ_RADIO_Handler+0xbea>
    9d9a:	2800      	cmp	r0, #0
    9d9c:	bfbc      	itt	lt
    9d9e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9da2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9da6:	4621      	mov	r1, r4
    9da8:	f001 fc98 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9dac:	6820      	ldr	r0, [r4, #0]
    9dae:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9db2:	1970      	adds	r0, r6, r5
    9db4:	1c40      	adds	r0, r0, #1
    9db6:	6021      	str	r1, [r4, #0]
    9db8:	f1b8 0f00 	cmp.w	r8, #0
    9dbc:	bf08      	it	eq
    9dbe:	307a      	addeq	r0, #122	; 0x7a
    9dc0:	d004      	beq.n	9dcc <MPSL_IRQ_RADIO_Handler+0xc10>
    9dc2:	f1b8 0f01 	cmp.w	r8, #1
    9dc6:	bf08      	it	eq
    9dc8:	3048      	addeq	r0, #72	; 0x48
    9dca:	d13a      	bne.n	9e42 <MPSL_IRQ_RADIO_Handler+0xc86>
    9dcc:	f001 fc6a 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9dd0:	e001      	b.n	9dd6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9dd2:	e00e      	b.n	9df2 <MPSL_IRQ_RADIO_Handler+0xc36>
    9dd4:	e005      	b.n	9de2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9dd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9dda:	6060      	str	r0, [r4, #4]
    9ddc:	b007      	add	sp, #28
    9dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9de2:	6830      	ldr	r0, [r6, #0]
    9de4:	1e40      	subs	r0, r0, #1
    9de6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9dea:	6020      	str	r0, [r4, #0]
    9dec:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9df0:	e7f3      	b.n	9dda <MPSL_IRQ_RADIO_Handler+0xc1e>
    9df2:	4601      	mov	r1, r0
    9df4:	4558      	cmp	r0, fp
    9df6:	da04      	bge.n	9e02 <MPSL_IRQ_RADIO_Handler+0xc46>
    9df8:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9dfc:	2070      	movs	r0, #112	; 0x70
    9dfe:	f002 fd23 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e02:	4287      	cmp	r7, r0
    9e04:	bfdc      	itt	le
    9e06:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9e0a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9e0e:	dd05      	ble.n	9e1c <MPSL_IRQ_RADIO_Handler+0xc60>
    9e10:	2800      	cmp	r0, #0
    9e12:	bfbc      	itt	lt
    9e14:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9e18:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9e1c:	4621      	mov	r1, r4
    9e1e:	f001 fc5d 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e22:	6820      	ldr	r0, [r4, #0]
    9e24:	f1b8 0f00 	cmp.w	r8, #0
    9e28:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9e2c:	f10a 0001 	add.w	r0, sl, #1
    9e30:	6021      	str	r1, [r4, #0]
    9e32:	bf08      	it	eq
    9e34:	307a      	addeq	r0, #122	; 0x7a
    9e36:	d009      	beq.n	9e4c <MPSL_IRQ_RADIO_Handler+0xc90>
    9e38:	f1b8 0f01 	cmp.w	r8, #1
    9e3c:	bf08      	it	eq
    9e3e:	3048      	addeq	r0, #72	; 0x48
    9e40:	d004      	beq.n	9e4c <MPSL_IRQ_RADIO_Handler+0xc90>
    9e42:	f240 6139 	movw	r1, #1593	; 0x639
    9e46:	2070      	movs	r0, #112	; 0x70
    9e48:	f002 fcfe 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e4c:	f001 fc2a 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9e50:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9e54:	6061      	str	r1, [r4, #4]
    9e56:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9e5a:	aa01      	add	r2, sp, #4
    9e5c:	4669      	mov	r1, sp
    9e5e:	4648      	mov	r0, r9
    9e60:	6837      	ldr	r7, [r6, #0]
    9e62:	f001 fc3b 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e66:	f002 f977 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9e6a:	f001 fc1b 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9e6e:	4680      	mov	r8, r0
    9e70:	482c      	ldr	r0, [pc, #176]	; (9f24 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9e72:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9e76:	2920      	cmp	r1, #32
    9e78:	d02a      	beq.n	9ed0 <MPSL_IRQ_RADIO_Handler+0xd14>
    9e7a:	68c0      	ldr	r0, [r0, #12]
    9e7c:	1d40      	adds	r0, r0, #5
    9e7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e82:	bf00      	nop
    9e84:	e9d4 2100 	ldrd	r2, r1, [r4]
    9e88:	1a89      	subs	r1, r1, r2
    9e8a:	4401      	add	r1, r0
    9e8c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e90:	e9c4 0100 	strd	r0, r1, [r4]
    9e94:	6831      	ldr	r1, [r6, #0]
    9e96:	4281      	cmp	r1, r0
    9e98:	d902      	bls.n	9ea0 <MPSL_IRQ_RADIO_Handler+0xce4>
    9e9a:	68a0      	ldr	r0, [r4, #8]
    9e9c:	1c40      	adds	r0, r0, #1
    9e9e:	60a0      	str	r0, [r4, #8]
    9ea0:	6832      	ldr	r2, [r6, #0]
    9ea2:	6928      	ldr	r0, [r5, #16]
    9ea4:	4621      	mov	r1, r4
    9ea6:	9b06      	ldr	r3, [sp, #24]
    9ea8:	f7ff f9e4 	bl	9274 <MPSL_IRQ_RADIO_Handler+0xb8>
    9eac:	2800      	cmp	r0, #0
    9eae:	bf1c      	itt	ne
    9eb0:	b007      	addne	sp, #28
    9eb2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eb6:	e9d4 1000 	ldrd	r1, r0, [r4]
    9eba:	1a40      	subs	r0, r0, r1
    9ebc:	6831      	ldr	r1, [r6, #0]
    9ebe:	6021      	str	r1, [r4, #0]
    9ec0:	6831      	ldr	r1, [r6, #0]
    9ec2:	4408      	add	r0, r1
    9ec4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9ec8:	6060      	str	r0, [r4, #4]
    9eca:	b007      	add	sp, #28
    9ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ed0:	3709      	adds	r7, #9
    9ed2:	f1b9 0f00 	cmp.w	r9, #0
    9ed6:	d016      	beq.n	9f06 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9ed8:	f002 fc3e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9edc:	b998      	cbnz	r0, 9f06 <MPSL_IRQ_RADIO_Handler+0xd4a>
    9ede:	f002 fb13 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ee2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9ee6:	bf08      	it	eq
    9ee8:	200d      	moveq	r0, #13
    9eea:	d00b      	beq.n	9f04 <MPSL_IRQ_RADIO_Handler+0xd48>
    9eec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9ef0:	3856      	subs	r0, #86	; 0x56
    9ef2:	bf08      	it	eq
    9ef4:	201c      	moveq	r0, #28
    9ef6:	d005      	beq.n	9f04 <MPSL_IRQ_RADIO_Handler+0xd48>
    9ef8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9efc:	389f      	subs	r0, #159	; 0x9f
    9efe:	bf14      	ite	ne
    9f00:	2000      	movne	r0, #0
    9f02:	2032      	moveq	r0, #50	; 0x32
    9f04:	4407      	add	r7, r0
    9f06:	9800      	ldr	r0, [sp, #0]
    9f08:	4580      	cmp	r8, r0
    9f0a:	bf84      	itt	hi
    9f0c:	eba8 0000 	subhi.w	r0, r8, r0
    9f10:	4407      	addhi	r7, r0
    9f12:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9f16:	e7b5      	b.n	9e84 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9f18:	1e848000 	.word	0x1e848000
    9f1c:	0f424000 	.word	0x0f424000
    9f20:	1e847fff 	.word	0x1e847fff
    9f24:	20001394 	.word	0x20001394
    9f28:	b570      	push	{r4, r5, r6, lr}
    9f2a:	4d1e      	ldr	r5, [pc, #120]	; (9fa4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9f2c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9f30:	2820      	cmp	r0, #32
    9f32:	bf18      	it	ne
    9f34:	bd70      	popne	{r4, r5, r6, pc}
    9f36:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9f3a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9f3e:	4428      	add	r0, r5
    9f40:	f890 4020 	ldrb.w	r4, [r0, #32]
    9f44:	2c20      	cmp	r4, #32
    9f46:	d027      	beq.n	9f98 <MPSL_IRQ_RADIO_Handler+0xddc>
    9f48:	4b17      	ldr	r3, [pc, #92]	; (9fa8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9f4a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9f4e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9f52:	7849      	ldrb	r1, [r1, #1]
    9f54:	f880 1020 	strb.w	r1, [r0, #32]
    9f58:	20ff      	movs	r0, #255	; 0xff
    9f5a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9f5e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9f62:	4621      	mov	r1, r4
    9f64:	2002      	movs	r0, #2
    9f66:	f000 f891 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    9f6a:	2000      	movs	r0, #0
    9f6c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9f70:	77a8      	strb	r0, [r5, #30]
    9f72:	490e      	ldr	r1, [pc, #56]	; (9fac <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9f74:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9f78:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9f7c:	7e00      	ldrb	r0, [r0, #24]
    9f7e:	2800      	cmp	r0, #0
    9f80:	bf08      	it	eq
    9f82:	f002 fdcb 	bleq	cb1c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9f86:	2000      	movs	r0, #0
    9f88:	4909      	ldr	r1, [pc, #36]	; (9fb0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9f8a:	6849      	ldr	r1, [r1, #4]
    9f8c:	2900      	cmp	r1, #0
    9f8e:	bf08      	it	eq
    9f90:	bd70      	popeq	{r4, r5, r6, pc}
    9f92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9f96:	4708      	bx	r1
    9f98:	f240 3132 	movw	r1, #818	; 0x332
    9f9c:	2070      	movs	r0, #112	; 0x70
    9f9e:	f002 fc53 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fa2:	0000      	.short	0x0000
    9fa4:	20001394 	.word	0x20001394
    9fa8:	20001314 	.word	0x20001314
    9fac:	20000f94 	.word	0x20000f94
    9fb0:	200002d4 	.word	0x200002d4
    9fb4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9fb8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a07c <MPSL_IRQ_RADIO_Handler+0xec0>
    9fbc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9fc0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9fc4:	4440      	add	r0, r8
    9fc6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9fca:	2c20      	cmp	r4, #32
    9fcc:	bf08      	it	eq
    9fce:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9fd2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; a080 <MPSL_IRQ_RADIO_Handler+0xec4>
    9fd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; a084 <MPSL_IRQ_RADIO_Handler+0xec8>
    9fda:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9fde:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9fe2:	2607      	movs	r6, #7
    9fe4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9fe8:	2801      	cmp	r0, #1
    9fea:	d00e      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9fec:	2804      	cmp	r0, #4
    9fee:	bf08      	it	eq
    9ff0:	2602      	moveq	r6, #2
    9ff2:	d00a      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9ff4:	2805      	cmp	r0, #5
    9ff6:	bf0c      	ite	eq
    9ff8:	2603      	moveq	r6, #3
    9ffa:	2806      	cmpne	r0, #6
    9ffc:	d005      	beq.n	a00a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9ffe:	f640 01dd 	movw	r1, #2269	; 0x8dd
    a002:	f04f 0070 	mov.w	r0, #112	; 0x70
    a006:	f002 fc1f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a00a:	f1bb 0f00 	cmp.w	fp, #0
    a00e:	bf18      	it	ne
    a010:	f3af 8000 	nopne.w
    a014:	f3ef 8010 	mrs	r0, PRIMASK
    a018:	b672      	cpsid	i
    a01a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    a01e:	784a      	ldrb	r2, [r1, #1]
    a020:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    a024:	4441      	add	r1, r8
    a026:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    a02a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    a02e:	42a2      	cmp	r2, r4
    a030:	bf04      	itt	eq
    a032:	2220      	moveq	r2, #32
    a034:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    a038:	b1c0      	cbz	r0, a06c <MPSL_IRQ_RADIO_Handler+0xeb0>
    a03a:	462a      	mov	r2, r5
    a03c:	4621      	mov	r1, r4
    a03e:	2001      	movs	r0, #1
    a040:	f000 f824 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a044:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a048:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    a04c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    a050:	6840      	ldr	r0, [r0, #4]
    a052:	4631      	mov	r1, r6
    a054:	4790      	blx	r2
    a056:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    a05a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    a05e:	4440      	add	r0, r8
    a060:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    a064:	2c20      	cmp	r4, #32
    a066:	d1ba      	bne.n	9fde <MPSL_IRQ_RADIO_Handler+0xe22>
    a068:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a06c:	4806      	ldr	r0, [pc, #24]	; (a088 <MPSL_IRQ_RADIO_Handler+0xecc>)
    a06e:	2800      	cmp	r0, #0
    a070:	bf18      	it	ne
    a072:	f3af 8000 	nopne.w
    a076:	b662      	cpsie	i
    a078:	e7df      	b.n	a03a <MPSL_IRQ_RADIO_Handler+0xe7e>
    a07a:	0000      	.short	0x0000
    a07c:	20001394 	.word	0x20001394
    a080:	00000000 	.word	0x00000000
    a084:	20001314 	.word	0x20001314
    a088:	00000000 	.word	0x00000000
    a08c:	f8df c058 	ldr.w	ip, [pc, #88]	; a0e8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    a090:	b510      	push	{r4, lr}
    a092:	2300      	movs	r3, #0
    a094:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    a098:	2807      	cmp	r0, #7
    a09a:	d21f      	bcs.n	a0dc <MPSL_IRQ_RADIO_Handler+0xf20>
    a09c:	e8df f000 	tbb	[pc, r0]
    a0a0:	05050505 	.word	0x05050505
    a0a4:	00040404 	.word	0x00040404
    a0a8:	2301      	movs	r3, #1
    a0aa:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	bf08      	it	eq
    a0b2:	bd10      	popeq	{r4, pc}
    a0b4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a0b8:	480c      	ldr	r0, [pc, #48]	; (a0ec <MPSL_IRQ_RADIO_Handler+0xf30>)
    a0ba:	4402      	add	r2, r0
    a0bc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    a0c0:	2820      	cmp	r0, #32
    a0c2:	bf0e      	itee	eq
    a0c4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    a0c8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    a0cc:	7041      	strbne	r1, [r0, #1]
    a0ce:	2020      	movs	r0, #32
    a0d0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    a0d4:	7058      	strb	r0, [r3, #1]
    a0d6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    a0da:	bd10      	pop	{r4, pc}
    a0dc:	f240 216e 	movw	r1, #622	; 0x26e
    a0e0:	2070      	movs	r0, #112	; 0x70
    a0e2:	f002 fbb1 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0e6:	0000      	.short	0x0000
    a0e8:	20001314 	.word	0x20001314
    a0ec:	20001394 	.word	0x20001394
    a0f0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    a0f4:	460f      	mov	r7, r1
    a0f6:	4680      	mov	r8, r0
    a0f8:	f8df a160 	ldr.w	sl, [pc, #352]	; a25c <MPSL_IRQ_RADIO_Handler+0x10a0>
    a0fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    a100:	4450      	add	r0, sl
    a102:	f1b8 0f01 	cmp.w	r8, #1
    a106:	f890 4020 	ldrb.w	r4, [r0, #32]
    a10a:	4625      	mov	r5, r4
    a10c:	bf18      	it	ne
    a10e:	f1b8 0f02 	cmpne.w	r8, #2
    a112:	d005      	beq.n	a120 <MPSL_IRQ_RADIO_Handler+0xf64>
    a114:	f640 21ac 	movw	r1, #2732	; 0xaac
    a118:	f04f 0070 	mov.w	r0, #112	; 0x70
    a11c:	f002 fb94 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a120:	f04f 0b00 	mov.w	fp, #0
    a124:	2d20      	cmp	r5, #32
    a126:	d042      	beq.n	a1ae <MPSL_IRQ_RADIO_Handler+0xff2>
    a128:	f89a 001e 	ldrb.w	r0, [sl, #30]
    a12c:	2600      	movs	r6, #0
    a12e:	2800      	cmp	r0, #0
    a130:	bf08      	it	eq
    a132:	2602      	moveq	r6, #2
    a134:	f001 fc3c 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a138:	f8df c124 	ldr.w	ip, [pc, #292]	; a260 <MPSL_IRQ_RADIO_Handler+0x10a4>
    a13c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a140:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    a144:	688a      	ldr	r2, [r1, #8]
    a146:	68c9      	ldr	r1, [r1, #12]
    a148:	1a12      	subs	r2, r2, r0
    a14a:	1a09      	subs	r1, r1, r0
    a14c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a150:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a154:	4296      	cmp	r6, r2
    a156:	bf99      	ittee	ls
    a158:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    a15c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a160:	4a40      	ldrhi	r2, [pc, #256]	; (a264 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    a162:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    a166:	d920      	bls.n	a1aa <MPSL_IRQ_RADIO_Handler+0xfee>
    a168:	4622      	mov	r2, r4
    a16a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    a16e:	784c      	ldrb	r4, [r1, #1]
    a170:	2c20      	cmp	r4, #32
    a172:	d012      	beq.n	a19a <MPSL_IRQ_RADIO_Handler+0xfde>
    a174:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    a178:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    a17c:	688b      	ldr	r3, [r1, #8]
    a17e:	68c9      	ldr	r1, [r1, #12]
    a180:	1a1b      	subs	r3, r3, r0
    a182:	1a09      	subs	r1, r1, r0
    a184:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a188:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a18c:	429e      	cmp	r6, r3
    a18e:	bf9c      	itt	ls
    a190:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    a194:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a198:	d8e6      	bhi.n	a168 <MPSL_IRQ_RADIO_Handler+0xfac>
    a19a:	2a20      	cmp	r2, #32
    a19c:	d005      	beq.n	a1aa <MPSL_IRQ_RADIO_Handler+0xfee>
    a19e:	463b      	mov	r3, r7
    a1a0:	2120      	movs	r1, #32
    a1a2:	2004      	movs	r0, #4
    a1a4:	f7ff f82a 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a1a8:	4604      	mov	r4, r0
    a1aa:	42ac      	cmp	r4, r5
    a1ac:	d116      	bne.n	a1dc <MPSL_IRQ_RADIO_Handler+0x1020>
    a1ae:	482e      	ldr	r0, [pc, #184]	; (a268 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    a1b0:	2800      	cmp	r0, #0
    a1b2:	bf18      	it	ne
    a1b4:	f3af 8000 	nopne.w
    a1b8:	f001 fbfa 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1bc:	4603      	mov	r3, r0
    a1be:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    a1c2:	2820      	cmp	r0, #32
    a1c4:	d00d      	beq.n	a1e2 <MPSL_IRQ_RADIO_Handler+0x1026>
    a1c6:	f8da 0008 	ldr.w	r0, [sl, #8]
    a1ca:	1c99      	adds	r1, r3, #2
    a1cc:	1a08      	subs	r0, r1, r0
    a1ce:	0200      	lsls	r0, r0, #8
    a1d0:	17c1      	asrs	r1, r0, #31
    a1d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a1d6:	1200      	asrs	r0, r0, #8
    a1d8:	2800      	cmp	r0, #0
    a1da:	dd02      	ble.n	a1e2 <MPSL_IRQ_RADIO_Handler+0x1026>
    a1dc:	2000      	movs	r0, #0
    a1de:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a1e2:	2d20      	cmp	r5, #32
    a1e4:	d014      	beq.n	a210 <MPSL_IRQ_RADIO_Handler+0x1054>
    a1e6:	462a      	mov	r2, r5
    a1e8:	4641      	mov	r1, r8
    a1ea:	4618      	mov	r0, r3
    a1ec:	f7ff fa9c 	bl	9728 <MPSL_IRQ_RADIO_Handler+0x56c>
    a1f0:	2800      	cmp	r0, #0
    a1f2:	bf1e      	ittt	ne
    a1f4:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    a1f8:	2002      	movne	r0, #2
    a1fa:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a1fe:	463b      	mov	r3, r7
    a200:	462a      	mov	r2, r5
    a202:	2120      	movs	r1, #32
    a204:	2004      	movs	r0, #4
    a206:	f7fe fff9 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a20a:	2000      	movs	r0, #0
    a20c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a210:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    a214:	f1b0 3fff 	cmp.w	r0, #4294967295
    a218:	d005      	beq.n	a226 <MPSL_IRQ_RADIO_Handler+0x106a>
    a21a:	f002 f97b 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    a21e:	f04f 30ff 	mov.w	r0, #4294967295
    a222:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    a226:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    a22a:	b120      	cbz	r0, a236 <MPSL_IRQ_RADIO_Handler+0x107a>
    a22c:	2005      	movs	r0, #5
    a22e:	f001 fe35 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a232:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    a236:	2004      	movs	r0, #4
    a238:	f001 fe30 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a23c:	f001 fe9e 	bl	bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    a240:	2020      	movs	r0, #32
    a242:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    a246:	4809      	ldr	r0, [pc, #36]	; (a26c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    a248:	6880      	ldr	r0, [r0, #8]
    a24a:	f8c0 b000 	str.w	fp, [r0]
    a24e:	4808      	ldr	r0, [pc, #32]	; (a270 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    a250:	f8c0 b000 	str.w	fp, [r0]
    a254:	2001      	movs	r0, #1
    a256:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    a25a:	0000      	.short	0x0000
    a25c:	20001394 	.word	0x20001394
    a260:	20000f94 	.word	0x20000f94
    a264:	20001314 	.word	0x20001314
    a268:	00000000 	.word	0x00000000
    a26c:	200002d4 	.word	0x200002d4
    a270:	40000508 	.word	0x40000508

0000a274 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    a274:	4906      	ldr	r1, [pc, #24]	; (a290 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    a276:	b510      	push	{r4, lr}
    a278:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    a27c:	2a20      	cmp	r2, #32
    a27e:	bf1c      	itt	ne
    a280:	7788      	strbne	r0, [r1, #30]
    a282:	bd10      	popne	{r4, pc}
    a284:	f240 319a 	movw	r1, #922	; 0x39a
    a288:	2070      	movs	r0, #112	; 0x70
    a28a:	f002 fadd 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28e:	0000      	.short	0x0000
    a290:	20001394 	.word	0x20001394

0000a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    a294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a298:	4e69      	ldr	r6, [pc, #420]	; (a440 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a29a:	4607      	mov	r7, r0
    a29c:	b08d      	sub	sp, #52	; 0x34
    a29e:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a2a2:	4688      	mov	r8, r1
    a2a4:	2820      	cmp	r0, #32
    a2a6:	d055      	beq.n	a354 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    a2a8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    a2ac:	f106 0408 	add.w	r4, r6, #8
    a2b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a2b4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    a2b8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    a2bc:	2020      	movs	r0, #32
    a2be:	f88d 0020 	strb.w	r0, [sp, #32]
    a2c2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    a2c6:	aa0a      	add	r2, sp, #40	; 0x28
    a2c8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a2cc:	4430      	add	r0, r6
    a2ce:	a909      	add	r1, sp, #36	; 0x24
    a2d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    a2d4:	68f0      	ldr	r0, [r6, #12]
    a2d6:	9002      	str	r0, [sp, #8]
    a2d8:	6830      	ldr	r0, [r6, #0]
    a2da:	4438      	add	r0, r7
    a2dc:	f001 f9fe 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a2e0:	f8da 000c 	ldr.w	r0, [sl, #12]
    a2e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    a2e6:	2f65      	cmp	r7, #101	; 0x65
    a2e8:	4408      	add	r0, r1
    a2ea:	d338      	bcc.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a2ec:	4a55      	ldr	r2, [pc, #340]	; (a444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    a2ee:	2100      	movs	r1, #0
    a2f0:	1bd2      	subs	r2, r2, r7
    a2f2:	eb71 0201 	sbcs.w	r2, r1, r1
    a2f6:	d332      	bcc.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a2f8:	6822      	ldr	r2, [r4, #0]
    a2fa:	1a82      	subs	r2, r0, r2
    a2fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a300:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a304:	d82b      	bhi.n	a35e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a306:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a30a:	6060      	str	r0, [r4, #4]
    a30c:	4630      	mov	r0, r6
    a30e:	f884 8010 	strb.w	r8, [r4, #16]
    a312:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    a316:	f10d 0a20 	add.w	sl, sp, #32
    a31a:	2d20      	cmp	r5, #32
    a31c:	bf1c      	itt	ne
    a31e:	494a      	ldrne	r1, [pc, #296]	; (a448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a320:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    a324:	d050      	beq.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a326:	bf00      	nop
    a328:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    a32c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    a330:	6861      	ldr	r1, [r4, #4]
    a332:	f8d8 6008 	ldr.w	r6, [r8, #8]
    a336:	f108 0008 	add.w	r0, r8, #8
    a33a:	1a71      	subs	r1, r6, r1
    a33c:	0209      	lsls	r1, r1, #8
    a33e:	17ca      	asrs	r2, r1, #31
    a340:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a344:	1209      	asrs	r1, r1, #8
    a346:	d42d      	bmi.n	a3a4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a348:	89c0      	ldrh	r0, [r0, #14]
    a34a:	2800      	cmp	r0, #0
    a34c:	d03c      	beq.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a34e:	89e0      	ldrh	r0, [r4, #14]
    a350:	b148      	cbz	r0, a366 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    a352:	e039      	b.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a354:	f640 3173 	movw	r1, #2931	; 0xb73
    a358:	2070      	movs	r0, #112	; 0x70
    a35a:	f002 fa75 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a35e:	b00d      	add	sp, #52	; 0x34
    a360:	2001      	movs	r0, #1
    a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a366:	6820      	ldr	r0, [r4, #0]
    a368:	900c      	str	r0, [sp, #48]	; 0x30
    a36a:	f002 f8cd 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a36e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a372:	bf08      	it	eq
    a374:	200d      	moveq	r0, #13
    a376:	d00b      	beq.n	a390 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a378:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a37c:	3856      	subs	r0, #86	; 0x56
    a37e:	bf08      	it	eq
    a380:	201c      	moveq	r0, #28
    a382:	d005      	beq.n	a390 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a384:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a388:	389f      	subs	r0, #159	; 0x9f
    a38a:	bf14      	ite	ne
    a38c:	2000      	movne	r0, #0
    a38e:	2032      	moveq	r0, #50	; 0x32
    a390:	1c41      	adds	r1, r0, #1
    a392:	980c      	ldr	r0, [sp, #48]	; 0x30
    a394:	1a30      	subs	r0, r6, r0
    a396:	0200      	lsls	r0, r0, #8
    a398:	17c2      	asrs	r2, r0, #31
    a39a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a39e:	1200      	asrs	r0, r0, #8
    a3a0:	4288      	cmp	r0, r1
    a3a2:	da11      	bge.n	a3c8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a3a4:	f88a 5000 	strb.w	r5, [sl]
    a3a8:	f898 1018 	ldrb.w	r1, [r8, #24]
    a3ac:	7c20      	ldrb	r0, [r4, #16]
    a3ae:	4281      	cmp	r1, r0
    a3b0:	d805      	bhi.n	a3be <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a3b2:	9802      	ldr	r0, [sp, #8]
    a3b4:	6060      	str	r0, [r4, #4]
    a3b6:	b00d      	add	sp, #52	; 0x34
    a3b8:	2002      	movs	r0, #2
    a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3be:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a3c2:	7845      	ldrb	r5, [r0, #1]
    a3c4:	2d20      	cmp	r5, #32
    a3c6:	d1af      	bne.n	a328 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a3c8:	2005      	movs	r0, #5
    a3ca:	f001 fd67 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a3ce:	4c1c      	ldr	r4, [pc, #112]	; (a440 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a3d0:	f04f 30ff 	mov.w	r0, #4294967295
    a3d4:	6060      	str	r0, [r4, #4]
    a3d6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a3da:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a3de:	2120      	movs	r1, #32
    a3e0:	2a20      	cmp	r2, #32
    a3e2:	d003      	beq.n	a3ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a3e4:	2005      	movs	r0, #5
    a3e6:	f7fe ff09 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a3ea:	e004      	b.n	a3f6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a3ec:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a3f0:	4420      	add	r0, r4
    a3f2:	f890 0020 	ldrb.w	r0, [r0, #32]
    a3f6:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a3fa:	4913      	ldr	r1, [pc, #76]	; (a448 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a3fc:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a400:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a404:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a408:	7048      	strb	r0, [r1, #1]
    a40a:	6820      	ldr	r0, [r4, #0]
    a40c:	4438      	add	r0, r7
    a40e:	6020      	str	r0, [r4, #0]
    a410:	20ff      	movs	r0, #255	; 0xff
    a412:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a416:	7e60      	ldrb	r0, [r4, #25]
    a418:	2801      	cmp	r0, #1
    a41a:	d105      	bne.n	a428 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a41c:	68e0      	ldr	r0, [r4, #12]
    a41e:	1e40      	subs	r0, r0, #1
    a420:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a424:	f001 fb9e 	bl	bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a428:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a42c:	2820      	cmp	r0, #32
    a42e:	d003      	beq.n	a438 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a430:	4806      	ldr	r0, [pc, #24]	; (a44c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a432:	7840      	ldrb	r0, [r0, #1]
    a434:	f002 fadc 	bl	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a438:	b00d      	add	sp, #52	; 0x34
    a43a:	2000      	movs	r0, #0
    a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a440:	20001394 	.word	0x20001394
    a444:	0f424000 	.word	0x0f424000
    a448:	20001314 	.word	0x20001314
    a44c:	200002d4 	.word	0x200002d4

0000a450 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a450:	b570      	push	{r4, r5, r6, lr}
    a452:	4a24      	ldr	r2, [pc, #144]	; (a4e4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    a454:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a458:	2920      	cmp	r1, #32
    a45a:	d03a      	beq.n	a4d2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    a45c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a460:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    a464:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a468:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    a46c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    a470:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    a474:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a478:	4411      	add	r1, r2
    a47a:	f891 1020 	ldrb.w	r1, [r1, #32]
    a47e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a482:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a486:	2920      	cmp	r1, #32
    a488:	d028      	beq.n	a4dc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    a48a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    a48e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    a492:	7e2d      	ldrb	r5, [r5, #24]
    a494:	4285      	cmp	r5, r0
    a496:	bf84      	itt	hi
    a498:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    a49c:	7849      	ldrbhi	r1, [r1, #1]
    a49e:	d8f2      	bhi.n	a486 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    a4a0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a4a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    a4a8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    a4ac:	6889      	ldr	r1, [r1, #8]
    a4ae:	6814      	ldr	r4, [r2, #0]
    a4b0:	1a08      	subs	r0, r1, r0
    a4b2:	0200      	lsls	r0, r0, #8
    a4b4:	17c1      	asrs	r1, r0, #31
    a4b6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    a4ba:	1200      	asrs	r0, r0, #8
    a4bc:	d407      	bmi.n	a4ce <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    a4be:	f006 fbaf 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a4c2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    a4c6:	4288      	cmp	r0, r1
    a4c8:	bf24      	itt	cs
    a4ca:	1b00      	subcs	r0, r0, r4
    a4cc:	bd70      	popcs	{r4, r5, r6, pc}
    a4ce:	2000      	movs	r0, #0
    a4d0:	bd70      	pop	{r4, r5, r6, pc}
    a4d2:	f640 3145 	movw	r1, #2885	; 0xb45
    a4d6:	2070      	movs	r0, #112	; 0x70
    a4d8:	f002 f9b6 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a4dc:	f04f 30ff 	mov.w	r0, #4294967295
    a4e0:	bd70      	pop	{r4, r5, r6, pc}
    a4e2:	0000      	.short	0x0000
    a4e4:	20001394 	.word	0x20001394

0000a4e8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a4e8:	4806      	ldr	r0, [pc, #24]	; (a504 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a4ea:	b510      	push	{r4, lr}
    a4ec:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a4f0:	2920      	cmp	r1, #32
    a4f2:	bf1c      	itt	ne
    a4f4:	7e00      	ldrbne	r0, [r0, #24]
    a4f6:	bd10      	popne	{r4, pc}
    a4f8:	f640 316d 	movw	r1, #2925	; 0xb6d
    a4fc:	2070      	movs	r0, #112	; 0x70
    a4fe:	f002 f9a3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a502:	0000      	.short	0x0000
    a504:	20001394 	.word	0x20001394

0000a508 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a508:	b570      	push	{r4, r5, r6, lr}
    a50a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a50e:	4809      	ldr	r0, [pc, #36]	; (a534 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a510:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a514:	4908      	ldr	r1, [pc, #32]	; (a538 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a516:	6920      	ldr	r0, [r4, #16]
    a518:	fba0 5601 	umull	r5, r6, r0, r1
    a51c:	68a0      	ldr	r0, [r4, #8]
    a51e:	f006 fb7f 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a522:	8ae1      	ldrh	r1, [r4, #22]
    a524:	7d22      	ldrb	r2, [r4, #20]
    a526:	1c40      	adds	r0, r0, #1
    a528:	4411      	add	r1, r2
    a52a:	4408      	add	r0, r1
    a52c:	1940      	adds	r0, r0, r5
    a52e:	f146 0100 	adc.w	r1, r6, #0
    a532:	bd70      	pop	{r4, r5, r6, pc}
    a534:	20000f94 	.word	0x20000f94
    a538:	1e848000 	.word	0x1e848000

0000a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a53e:	4d6f      	ldr	r5, [pc, #444]	; (a6fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a540:	2601      	movs	r6, #1
    a542:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a546:	4a6e      	ldr	r2, [pc, #440]	; (a700 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a548:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a54a:	2808      	cmp	r0, #8
    a54c:	d272      	bcs.n	a634 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a54e:	e8df f000 	tbb	[pc, r0]
    a552:	7704      	.short	0x7704
    a554:	44cfb19f 	.word	0x44cfb19f
    a558:	bbb6      	.short	0xbbb6
    a55a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a55e:	d104      	bne.n	a56a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a560:	f001 fff4 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a564:	f001 fa24 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a568:	62e0      	str	r0, [r4, #44]	; 0x2c
    a56a:	8ae0      	ldrh	r0, [r4, #22]
    a56c:	b110      	cbz	r0, a574 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a56e:	f002 f8f3 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a572:	b180      	cbz	r0, a596 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a574:	f7ff fcd8 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a578:	20ff      	movs	r0, #255	; 0xff
    a57a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a57e:	6861      	ldr	r1, [r4, #4]
    a580:	f1b1 3fff 	cmp.w	r1, #4294967295
    a584:	d003      	beq.n	a58e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a586:	2005      	movs	r0, #5
    a588:	f001 fbd2 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a58c:	b140      	cbz	r0, a5a0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a58e:	7e60      	ldrb	r0, [r4, #25]
    a590:	2801      	cmp	r0, #1
    a592:	d110      	bne.n	a5b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a594:	e009      	b.n	a5aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a596:	f640 0169 	movw	r1, #2153	; 0x869
    a59a:	2070      	movs	r0, #112	; 0x70
    a59c:	f002 f954 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5a0:	f640 016e 	movw	r1, #2158	; 0x86e
    a5a4:	2070      	movs	r0, #112	; 0x70
    a5a6:	f002 f94f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a5aa:	68e0      	ldr	r0, [r4, #12]
    a5ac:	1e40      	subs	r0, r0, #1
    a5ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a5b2:	f001 fad7 	bl	bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a5b6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a5ba:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a5be:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a5c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a5c6:	6840      	ldr	r0, [r0, #4]
    a5c8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a5cc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a5d0:	b001      	add	sp, #4
    a5d2:	2101      	movs	r1, #1
    a5d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a5d8:	4710      	bx	r2
    a5da:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a5de:	b158      	cbz	r0, a5f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a5e0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a5e4:	d104      	bne.n	a5f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a5e6:	f001 ffb1 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a5ea:	f001 f9e1 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a5ee:	62e0      	str	r0, [r4, #44]	; 0x2c
    a5f0:	2000      	movs	r0, #0
    a5f2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5f8:	f7ff fc96 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a5fc:	f04f 30ff 	mov.w	r0, #4294967295
    a600:	6060      	str	r0, [r4, #4]
    a602:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a606:	f88d 0000 	strb.w	r0, [sp]
    a60a:	f89d 0000 	ldrb.w	r0, [sp]
    a60e:	b190      	cbz	r0, a636 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a610:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a614:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a618:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a61c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a620:	6840      	ldr	r0, [r0, #4]
    a622:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a626:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a62a:	b001      	add	sp, #4
    a62c:	2106      	movs	r1, #6
    a62e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a632:	4710      	bx	r2
    a634:	e05c      	b.n	a6f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a636:	f640 0185 	movw	r1, #2181	; 0x885
    a63a:	2070      	movs	r0, #112	; 0x70
    a63c:	f002 f904 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a640:	f7ff fc72 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a644:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a648:	f002 f886 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a64c:	b120      	cbz	r0, a658 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a64e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a650:	f1b0 3fff 	cmp.w	r0, #4294967295
    a654:	d005      	beq.n	a662 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a656:	e009      	b.n	a66c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a658:	f640 0193 	movw	r1, #2195	; 0x893
    a65c:	2070      	movs	r0, #112	; 0x70
    a65e:	f002 f8f3 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a662:	f001 ff73 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a666:	f001 f9a3 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a66a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a66c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a670:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a674:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a678:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a67c:	6840      	ldr	r0, [r0, #4]
    a67e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a682:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a686:	b001      	add	sp, #4
    a688:	2100      	movs	r1, #0
    a68a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a68e:	4710      	bx	r2
    a690:	f001 fd44 	bl	c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a694:	8ae0      	ldrh	r0, [r4, #22]
    a696:	b110      	cbz	r0, a69e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a698:	f002 f85e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a69c:	b128      	cbz	r0, a6aa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a69e:	f001 fd51 	bl	c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a6a2:	2800      	cmp	r0, #0
    a6a4:	bf18      	it	ne
    a6a6:	7766      	strbne	r6, [r4, #29]
    a6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6aa:	f640 019d 	movw	r1, #2205	; 0x89d
    a6ae:	2070      	movs	r0, #112	; 0x70
    a6b0:	f002 f8ca 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6b4:	4813      	ldr	r0, [pc, #76]	; (a704 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a6b6:	6006      	str	r6, [r0, #0]
    a6b8:	6890      	ldr	r0, [r2, #8]
    a6ba:	6006      	str	r6, [r0, #0]
    a6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a6be:	7810      	ldrb	r0, [r2, #0]
    a6c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a6c4:	f002 b994 	b.w	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a6c8:	f7ff fc2e 	bl	9f28 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a6cc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6d0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a6d4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a6d8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a6dc:	6840      	ldr	r0, [r0, #4]
    a6de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a6e2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a6e6:	b001      	add	sp, #4
    a6e8:	2105      	movs	r1, #5
    a6ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a6ee:	4710      	bx	r2
    a6f0:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a6f4:	2070      	movs	r0, #112	; 0x70
    a6f6:	f002 f8a7 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a6fa:	0000      	.short	0x0000
    a6fc:	20000f94 	.word	0x20000f94
    a700:	200002d4 	.word	0x200002d4
    a704:	40000508 	.word	0x40000508

0000a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a708:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a70c:	4682      	mov	sl, r0
    a70e:	48ef      	ldr	r0, [pc, #956]	; (aacc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a710:	b095      	sub	sp, #84	; 0x54
    a712:	6800      	ldr	r0, [r0, #0]
    a714:	4dee      	ldr	r5, [pc, #952]	; (aad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a716:	05c0      	lsls	r0, r0, #23
    a718:	0dc0      	lsrs	r0, r0, #23
    a71a:	d00e      	beq.n	a73a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a71c:	3810      	subs	r0, #16
    a71e:	b240      	sxtb	r0, r0
    a720:	2800      	cmp	r0, #0
    a722:	bfb8      	it	lt
    a724:	f000 000f 	andlt.w	r0, r0, #15
    a728:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a72c:	bfac      	ite	ge
    a72e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a732:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a736:	0940      	lsrs	r0, r0, #5
    a738:	d00d      	beq.n	a756 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a73a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a73c:	f04f 0b00 	mov.w	fp, #0
    a740:	7800      	ldrb	r0, [r0, #0]
    a742:	2800      	cmp	r0, #0
    a744:	bf18      	it	ne
    a746:	2801      	cmpne	r0, #1
    a748:	d018      	beq.n	a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a74a:	f240 713b 	movw	r1, #1851	; 0x73b
    a74e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a752:	f002 f879 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a756:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a75a:	f04f 0b01 	mov.w	fp, #1
    a75e:	2820      	cmp	r0, #32
    a760:	d007      	beq.n	a772 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a762:	9816      	ldr	r0, [sp, #88]	; 0x58
    a764:	7800      	ldrb	r0, [r0, #0]
    a766:	b148      	cbz	r0, a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a768:	f240 7137 	movw	r1, #1847	; 0x737
    a76c:	2070      	movs	r0, #112	; 0x70
    a76e:	f002 f86b 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a772:	f240 7134 	movw	r1, #1844	; 0x734
    a776:	2070      	movs	r0, #112	; 0x70
    a778:	f002 f866 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a77c:	4cd5      	ldr	r4, [pc, #852]	; (aad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a77e:	b124      	cbz	r4, a78a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a780:	2100      	movs	r1, #0
    a782:	f240 703e 	movw	r0, #1854	; 0x73e
    a786:	f3af 8000 	nop.w
    a78a:	2000      	movs	r0, #0
    a78c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a790:	49d1      	ldr	r1, [pc, #836]	; (aad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a792:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a796:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a79a:	f04f 0901 	mov.w	r9, #1
    a79e:	9000      	str	r0, [sp, #0]
    a7a0:	b124      	cbz	r4, a7ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a7a2:	2100      	movs	r1, #0
    a7a4:	f240 7049 	movw	r0, #1865	; 0x749
    a7a8:	f3af 8000 	nop.w
    a7ac:	f1b9 0f00 	cmp.w	r9, #0
    a7b0:	d00a      	beq.n	a7c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a7b2:	bf00      	nop
    a7b4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a7b8:	f04f 0800 	mov.w	r8, #0
    a7bc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a7c0:	f1bb 0f00 	cmp.w	fp, #0
    a7c4:	d007      	beq.n	a7d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a7c6:	e038      	b.n	a83a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a7c8:	48c4      	ldr	r0, [pc, #784]	; (aadc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a7ca:	2800      	cmp	r0, #0
    a7cc:	bf18      	it	ne
    a7ce:	f3af 8000 	nopne.w
    a7d2:	b662      	cpsie	i
    a7d4:	e7ee      	b.n	a7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a7d6:	4637      	mov	r7, r6
    a7d8:	2001      	movs	r0, #1
    a7da:	ea20 0607 	bic.w	r6, r0, r7
    a7de:	48c0      	ldr	r0, [pc, #768]	; (aae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a7e0:	2240      	movs	r2, #64	; 0x40
    a7e2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a7e6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a7ea:	f006 fbac 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a7ee:	b124      	cbz	r4, a7fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a7f0:	2100      	movs	r1, #0
    a7f2:	f240 505e 	movw	r0, #1374	; 0x55e
    a7f6:	f3af 8000 	nop.w
    a7fa:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a7fe:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a802:	4429      	add	r1, r5
    a804:	4428      	add	r0, r5
    a806:	8c0a      	ldrh	r2, [r1, #32]
    a808:	8402      	strh	r2, [r0, #32]
    a80a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a80e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a812:	b124      	cbz	r4, a81e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a814:	2100      	movs	r1, #0
    a816:	f240 5062 	movw	r0, #1378	; 0x562
    a81a:	f3af 8000 	nop.w
    a81e:	b124      	cbz	r4, a82a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a820:	2100      	movs	r1, #0
    a822:	f240 7053 	movw	r0, #1875	; 0x753
    a826:	f3af 8000 	nop.w
    a82a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a82e:	f88d 0008 	strb.w	r0, [sp, #8]
    a832:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a836:	2800      	cmp	r0, #0
    a838:	d1b2      	bne.n	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a83a:	b124      	cbz	r4, a846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a83c:	2100      	movs	r1, #0
    a83e:	f240 705d 	movw	r0, #1885	; 0x75d
    a842:	f3af 8000 	nop.w
    a846:	a802      	add	r0, sp, #8
    a848:	f001 f8b8 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a84c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a850:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a854:	4633      	mov	r3, r6
    a856:	aa09      	add	r2, sp, #36	; 0x24
    a858:	a80e      	add	r0, sp, #56	; 0x38
    a85a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a85c:	f7ff fa02 	bl	9c64 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a860:	b124      	cbz	r4, a86c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a862:	2100      	movs	r1, #0
    a864:	f240 7064 	movw	r0, #1892	; 0x764
    a868:	f3af 8000 	nop.w
    a86c:	4a9c      	ldr	r2, [pc, #624]	; (aae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a86e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a870:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a874:	a809      	add	r0, sp, #36	; 0x24
    a876:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a87a:	2a01      	cmp	r2, #1
    a87c:	bf18      	it	ne
    a87e:	2a02      	cmpne	r2, #2
    a880:	d138      	bne.n	a8f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a882:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a886:	eba2 0201 	sub.w	r2, r2, r1
    a88a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a88e:	eba3 0101 	sub.w	r1, r3, r1
    a892:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a896:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a89a:	2a02      	cmp	r2, #2
    a89c:	d364      	bcc.n	a968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a89e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a8a2:	bf98      	it	ls
    a8a4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a8a8:	d85e      	bhi.n	a968 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a8aa:	f04f 0801 	mov.w	r8, #1
    a8ae:	ab14      	add	r3, sp, #80	; 0x50
    a8b0:	aa13      	add	r2, sp, #76	; 0x4c
    a8b2:	4631      	mov	r1, r6
    a8b4:	f7fe fe96 	bl	95e4 <MPSL_IRQ_RADIO_Handler+0x428>
    a8b8:	2800      	cmp	r0, #0
    a8ba:	d05d      	beq.n	a978 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a8bc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a8c0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a8c4:	4633      	mov	r3, r6
    a8c6:	428a      	cmp	r2, r1
    a8c8:	d05a      	beq.n	a980 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a8ca:	2005      	movs	r0, #5
    a8cc:	f7fe fc96 	bl	91fc <MPSL_IRQ_RADIO_Handler+0x40>
    a8d0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a8d4:	7048      	strb	r0, [r1, #1]
    a8d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a8da:	2820      	cmp	r0, #32
    a8dc:	bf1c      	itt	ne
    a8de:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a8e2:	f880 a001 	strbne.w	sl, [r0, #1]
    a8e6:	d057      	beq.n	a998 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a8e8:	4632      	mov	r2, r6
    a8ea:	4651      	mov	r1, sl
    a8ec:	f05f 0003 	movs.w	r0, #3
    a8f0:	f7ff fbcc 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a8f4:	b124      	cbz	r4, a900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a8f6:	2100      	movs	r1, #0
    a8f8:	f240 7069 	movw	r0, #1897	; 0x769
    a8fc:	f3af 8000 	nop.w
    a900:	4878      	ldr	r0, [pc, #480]	; (aae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a902:	2800      	cmp	r0, #0
    a904:	bf18      	it	ne
    a906:	f3af 8000 	nopne.w
    a90a:	f3ef 8910 	mrs	r9, PRIMASK
    a90e:	b672      	cpsid	i
    a910:	b124      	cbz	r4, a91c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a912:	2100      	movs	r1, #0
    a914:	f240 706f 	movw	r0, #1903	; 0x76f
    a918:	f3af 8000 	nop.w
    a91c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a920:	f88d 0008 	strb.w	r0, [sp, #8]
    a924:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a928:	2800      	cmp	r0, #0
    a92a:	f47f af39 	bne.w	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a92e:	b124      	cbz	r4, a93a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a930:	2100      	movs	r1, #0
    a932:	f240 7077 	movw	r0, #1911	; 0x777
    a936:	f3af 8000 	nop.w
    a93a:	af09      	add	r7, sp, #36	; 0x24
    a93c:	9800      	ldr	r0, [sp, #0]
    a93e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a942:	f100 0708 	add.w	r7, r0, #8
    a946:	f1b8 0f00 	cmp.w	r8, #0
    a94a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a94e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a950:	6181      	str	r1, [r0, #24]
    a952:	d051      	beq.n	a9f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a954:	b124      	cbz	r4, a960 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a956:	2100      	movs	r1, #0
    a958:	f240 7084 	movw	r0, #1924	; 0x784
    a95c:	f3af 8000 	nop.w
    a960:	f1bb 0f00 	cmp.w	fp, #0
    a964:	d139      	bne.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a966:	e01f      	b.n	a9a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a968:	4632      	mov	r2, r6
    a96a:	4651      	mov	r1, sl
    a96c:	2004      	movs	r0, #4
    a96e:	f7ff fb8d 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    a972:	f04f 0801 	mov.w	r8, #1
    a976:	e7bd      	b.n	a8f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a978:	4632      	mov	r2, r6
    a97a:	4651      	mov	r1, sl
    a97c:	2004      	movs	r0, #4
    a97e:	e7b7      	b.n	a8f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a980:	2920      	cmp	r1, #32
    a982:	bf19      	ittee	ne
    a984:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a988:	7840      	ldrbne	r0, [r0, #1]
    a98a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a98e:	4428      	addeq	r0, r5
    a990:	bf08      	it	eq
    a992:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a996:	e79b      	b.n	a8d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a998:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a99c:	4429      	add	r1, r5
    a99e:	f881 a020 	strb.w	sl, [r1, #32]
    a9a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a9a6:	e79f      	b.n	a8e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a9a8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a9aa:	f010 0fff 	tst.w	r0, #255	; 0xff
    a9ae:	d014      	beq.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9b0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a9b4:	2820      	cmp	r0, #32
    a9b6:	d110      	bne.n	a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9b8:	b124      	cbz	r4, a9c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f240 7089 	movw	r0, #1929	; 0x789
    a9c0:	f3af 8000 	nop.w
    a9c4:	4631      	mov	r1, r6
    a9c6:	2002      	movs	r0, #2
    a9c8:	f7ff fb92 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    a9cc:	9010      	str	r0, [sp, #64]	; 0x40
    a9ce:	b920      	cbnz	r0, a9da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a9d0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a9d2:	7800      	ldrb	r0, [r0, #0]
    a9d4:	b1e8      	cbz	r0, aa12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a9d6:	2801      	cmp	r0, #1
    a9d8:	d02a      	beq.n	aa30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a9da:	b124      	cbz	r4, a9e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a9dc:	2100      	movs	r1, #0
    a9de:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a9e2:	f3af 8000 	nop.w
    a9e6:	20ff      	movs	r0, #255	; 0xff
    a9e8:	f1bb 0f00 	cmp.w	fp, #0
    a9ec:	bf18      	it	ne
    a9ee:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a9f2:	d026      	beq.n	aa42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a9f4:	f04f 0801 	mov.w	r8, #1
    a9f8:	b124      	cbz	r4, aa04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a9fa:	2100      	movs	r1, #0
    a9fc:	f240 70b7 	movw	r0, #1975	; 0x7b7
    aa00:	f3af 8000 	nop.w
    aa04:	9810      	ldr	r0, [sp, #64]	; 0x40
    aa06:	4e38      	ldr	r6, [pc, #224]	; (aae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    aa08:	2802      	cmp	r0, #2
    aa0a:	d023      	beq.n	aa54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    aa0c:	2801      	cmp	r0, #1
    aa0e:	d029      	beq.n	aa64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    aa10:	e02d      	b.n	aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa12:	b124      	cbz	r4, aa1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    aa14:	2100      	movs	r1, #0
    aa16:	f240 7091 	movw	r0, #1937	; 0x791
    aa1a:	f3af 8000 	nop.w
    aa1e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    aa22:	4651      	mov	r1, sl
    aa24:	2004      	movs	r0, #4
    aa26:	f7ff fb31 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    aa2a:	f04f 0801 	mov.w	r8, #1
    aa2e:	e7e3      	b.n	a9f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    aa30:	2c00      	cmp	r4, #0
    aa32:	f43f aeb5 	beq.w	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    aa36:	2100      	movs	r1, #0
    aa38:	f240 709c 	movw	r0, #1948	; 0x79c
    aa3c:	f3af 8000 	nop.w
    aa40:	e6ae      	b.n	a7a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    aa42:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    aa46:	2101      	movs	r1, #1
    aa48:	4391      	bics	r1, r2
    aa4a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    aa4e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa52:	e7cf      	b.n	a9f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    aa54:	68a8      	ldr	r0, [r5, #8]
    aa56:	990e      	ldr	r1, [sp, #56]	; 0x38
    aa58:	1a40      	subs	r0, r0, r1
    aa5a:	f006 f8e1 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa5e:	6871      	ldr	r1, [r6, #4]
    aa60:	b921      	cbnz	r1, aa6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    aa62:	e004      	b.n	aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa64:	6871      	ldr	r1, [r6, #4]
    aa66:	f04f 30ff 	mov.w	r0, #4294967295
    aa6a:	b101      	cbz	r1, aa6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    aa6c:	4788      	blx	r1
    aa6e:	f1b9 0f00 	cmp.w	r9, #0
    aa72:	d024      	beq.n	aabe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    aa74:	b124      	cbz	r4, aa80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    aa76:	2100      	movs	r1, #0
    aa78:	f240 70c7 	movw	r0, #1991	; 0x7c7
    aa7c:	f3af 8000 	nop.w
    aa80:	f1b8 0f00 	cmp.w	r8, #0
    aa84:	d011      	beq.n	aaaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    aa86:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa8a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    aa8e:	4428      	add	r0, r5
    aa90:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    aa94:	2820      	cmp	r0, #32
    aa96:	d008      	beq.n	aaaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    aa98:	b124      	cbz	r4, aaa4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    aa9a:	2100      	movs	r1, #0
    aa9c:	f240 70ce 	movw	r0, #1998	; 0x7ce
    aaa0:	f3af 8000 	nop.w
    aaa4:	7870      	ldrb	r0, [r6, #1]
    aaa6:	f001 ffa3 	bl	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    aaaa:	b124      	cbz	r4, aab6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    aaac:	2100      	movs	r1, #0
    aaae:	f240 70d3 	movw	r0, #2003	; 0x7d3
    aab2:	f3af 8000 	nop.w
    aab6:	b017      	add	sp, #92	; 0x5c
    aab8:	4640      	mov	r0, r8
    aaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aabe:	4807      	ldr	r0, [pc, #28]	; (aadc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    aac0:	2800      	cmp	r0, #0
    aac2:	bf18      	it	ne
    aac4:	f3af 8000 	nopne.w
    aac8:	b662      	cpsie	i
    aaca:	e7d3      	b.n	aa74 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    aacc:	e000ed04 	.word	0xe000ed04
    aad0:	20001394 	.word	0x20001394
    aad4:	00000000 	.word	0x00000000
    aad8:	20000f94 	.word	0x20000f94
    aadc:	00000000 	.word	0x00000000
    aae0:	20001314 	.word	0x20001314
    aae4:	00000000 	.word	0x00000000
    aae8:	200002d4 	.word	0x200002d4

0000aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaf0:	4606      	mov	r6, r0
    aaf2:	7800      	ldrb	r0, [r0, #0]
    aaf4:	b08d      	sub	sp, #52	; 0x34
    aaf6:	b118      	cbz	r0, ab00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    aaf8:	b00d      	add	sp, #52	; 0x34
    aafa:	2000      	movs	r0, #0
    aafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab00:	488c      	ldr	r0, [pc, #560]	; (ad34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    ab02:	6800      	ldr	r0, [r0, #0]
    ab04:	05c0      	lsls	r0, r0, #23
    ab06:	0dc0      	lsrs	r0, r0, #23
    ab08:	d00e      	beq.n	ab28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    ab0a:	3810      	subs	r0, #16
    ab0c:	b240      	sxtb	r0, r0
    ab0e:	2800      	cmp	r0, #0
    ab10:	bfb8      	it	lt
    ab12:	f000 000f 	andlt.w	r0, r0, #15
    ab16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    ab1a:	bfac      	ite	ge
    ab1c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    ab20:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    ab24:	0940      	lsrs	r0, r0, #5
    ab26:	d0e7      	beq.n	aaf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    ab28:	4d83      	ldr	r5, [pc, #524]	; (ad38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    ab2a:	4c84      	ldr	r4, [pc, #528]	; (ad3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    ab2c:	f04f 0b01 	mov.w	fp, #1
    ab30:	2700      	movs	r7, #0
    ab32:	b125      	cbz	r5, ab3e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    ab34:	2100      	movs	r1, #0
    ab36:	f240 50e5 	movw	r0, #1509	; 0x5e5
    ab3a:	f3af 8000 	nop.w
    ab3e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    ab42:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    ab46:	f04f 0900 	mov.w	r9, #0
    ab4a:	b125      	cbz	r5, ab56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    ab4c:	2100      	movs	r1, #0
    ab4e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    ab52:	f3af 8000 	nop.w
    ab56:	487a      	ldr	r0, [pc, #488]	; (ad40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    ab58:	ea2b 080a 	bic.w	r8, fp, sl
    ab5c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    ab60:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    ab64:	2240      	movs	r2, #64	; 0x40
    ab66:	f006 f9ee 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab6a:	b125      	cbz	r5, ab76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    ab6c:	2100      	movs	r1, #0
    ab6e:	f240 505e 	movw	r0, #1374	; 0x55e
    ab72:	f3af 8000 	nop.w
    ab76:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    ab7a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    ab7e:	4421      	add	r1, r4
    ab80:	4420      	add	r0, r4
    ab82:	8c0a      	ldrh	r2, [r1, #32]
    ab84:	8402      	strh	r2, [r0, #32]
    ab86:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    ab8a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    ab8e:	b125      	cbz	r5, ab9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    ab90:	2100      	movs	r1, #0
    ab92:	f240 5062 	movw	r0, #1378	; 0x562
    ab96:	f3af 8000 	nop.w
    ab9a:	b125      	cbz	r5, aba6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    ab9c:	2100      	movs	r1, #0
    ab9e:	f240 50ef 	movw	r0, #1519	; 0x5ef
    aba2:	f3af 8000 	nop.w
    aba6:	a808      	add	r0, sp, #32
    aba8:	f000 ff08 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    abac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    abb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    abb4:	4643      	mov	r3, r8
    abb6:	466a      	mov	r2, sp
    abb8:	4631      	mov	r1, r6
    abba:	a80a      	add	r0, sp, #40	; 0x28
    abbc:	f7ff f852 	bl	9c64 <MPSL_IRQ_RADIO_Handler+0xaa8>
    abc0:	b125      	cbz	r5, abcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    abc2:	2100      	movs	r1, #0
    abc4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    abc8:	f3af 8000 	nop.w
    abcc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    abd0:	2820      	cmp	r0, #32
    abd2:	d01a      	beq.n	ac0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    abd4:	68e0      	ldr	r0, [r4, #12]
    abd6:	9900      	ldr	r1, [sp, #0]
    abd8:	1a09      	subs	r1, r1, r0
    abda:	0209      	lsls	r1, r1, #8
    abdc:	17ca      	asrs	r2, r1, #31
    abde:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    abe2:	1209      	asrs	r1, r1, #8
    abe4:	d511      	bpl.n	ac0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    abe6:	9900      	ldr	r1, [sp, #0]
    abe8:	4281      	cmp	r1, r0
    abea:	d902      	bls.n	abf2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    abec:	9902      	ldr	r1, [sp, #8]
    abee:	1c49      	adds	r1, r1, #1
    abf0:	9102      	str	r1, [sp, #8]
    abf2:	e9dd 2100 	ldrd	r2, r1, [sp]
    abf6:	1a89      	subs	r1, r1, r2
    abf8:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    abfc:	4408      	add	r0, r1
    abfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac02:	e9cd 2000 	strd	r2, r0, [sp]
    ac06:	f04f 0901 	mov.w	r9, #1
    ac0a:	b125      	cbz	r5, ac16 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    ac0c:	2100      	movs	r1, #0
    ac0e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    ac12:	f3af 8000 	nop.w
    ac16:	9900      	ldr	r1, [sp, #0]
    ac18:	980a      	ldr	r0, [sp, #40]	; 0x28
    ac1a:	9a01      	ldr	r2, [sp, #4]
    ac1c:	1a09      	subs	r1, r1, r0
    ac1e:	1a10      	subs	r0, r2, r0
    ac20:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ac24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac28:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ac2c:	bf98      	it	ls
    ac2e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    ac32:	d809      	bhi.n	ac48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    ac34:	4643      	mov	r3, r8
    ac36:	4669      	mov	r1, sp
    ac38:	4842      	ldr	r0, [pc, #264]	; (ad44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    ac3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ac3c:	f7fe fb1a 	bl	9274 <MPSL_IRQ_RADIO_Handler+0xb8>
    ac40:	ea59 0000 	orrs.w	r0, r9, r0
    ac44:	d129      	bne.n	ac9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    ac46:	e042      	b.n	acce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    ac48:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ac4a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    ac4e:	9002      	str	r0, [sp, #8]
    ac50:	aa09      	add	r2, sp, #36	; 0x24
    ac52:	a907      	add	r1, sp, #28
    ac54:	4650      	mov	r0, sl
    ac56:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    ac5a:	f000 fd3f 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ac5e:	f001 fa7b 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ac62:	f000 fd1f 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ac66:	4681      	mov	r9, r0
    ac68:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ac6c:	2820      	cmp	r0, #32
    ac6e:	d03b      	beq.n	ace8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    ac70:	68e0      	ldr	r0, [r4, #12]
    ac72:	1d40      	adds	r0, r0, #5
    ac74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac78:	9900      	ldr	r1, [sp, #0]
    ac7a:	4281      	cmp	r1, r0
    ac7c:	d902      	bls.n	ac84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    ac7e:	9902      	ldr	r1, [sp, #8]
    ac80:	1c49      	adds	r1, r1, #1
    ac82:	9102      	str	r1, [sp, #8]
    ac84:	e9dd 2100 	ldrd	r2, r1, [sp]
    ac88:	1a89      	subs	r1, r1, r2
    ac8a:	9000      	str	r0, [sp, #0]
    ac8c:	4408      	add	r0, r1
    ac8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ac92:	9001      	str	r0, [sp, #4]
    ac94:	201f      	movs	r0, #31
    ac96:	f88d 000c 	strb.w	r0, [sp, #12]
    ac9a:	9800      	ldr	r0, [sp, #0]
    ac9c:	f005 ffc0 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aca0:	1c41      	adds	r1, r0, #1
    aca2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    aca6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    acaa:	4410      	add	r0, r2
    acac:	4408      	add	r0, r1
    acae:	e9c6 0704 	strd	r0, r7, [r6, #16]
    acb2:	b125      	cbz	r5, acbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    acb4:	2100      	movs	r1, #0
    acb6:	f240 601a 	movw	r0, #1562	; 0x61a
    acba:	f3af 8000 	nop.w
    acbe:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    acc2:	4a21      	ldr	r2, [pc, #132]	; (ad48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    acc4:	9b02      	ldr	r3, [sp, #8]
    acc6:	fbe3 1002 	umlal	r1, r0, r3, r2
    acca:	e9c6 1004 	strd	r1, r0, [r6, #16]
    acce:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    acd2:	f88d 0014 	strb.w	r0, [sp, #20]
    acd6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    acda:	2800      	cmp	r0, #0
    acdc:	f47f af29 	bne.w	ab32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    ace0:	b00d      	add	sp, #52	; 0x34
    ace2:	2001      	movs	r0, #1
    ace4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ace8:	f108 0809 	add.w	r8, r8, #9
    acec:	f1ba 0f00 	cmp.w	sl, #0
    acf0:	d016      	beq.n	ad20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    acf2:	f001 fd31 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    acf6:	b998      	cbnz	r0, ad20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    acf8:	f001 fc06 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    acfc:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ad00:	bf08      	it	eq
    ad02:	200d      	moveq	r0, #13
    ad04:	d00b      	beq.n	ad1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    ad06:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    ad0a:	3856      	subs	r0, #86	; 0x56
    ad0c:	bf08      	it	eq
    ad0e:	201c      	moveq	r0, #28
    ad10:	d005      	beq.n	ad1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    ad12:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    ad16:	389f      	subs	r0, #159	; 0x9f
    ad18:	bf14      	ite	ne
    ad1a:	4638      	movne	r0, r7
    ad1c:	2032      	moveq	r0, #50	; 0x32
    ad1e:	4480      	add	r8, r0
    ad20:	9807      	ldr	r0, [sp, #28]
    ad22:	4581      	cmp	r9, r0
    ad24:	bf84      	itt	hi
    ad26:	eba9 0000 	subhi.w	r0, r9, r0
    ad2a:	4480      	addhi	r8, r0
    ad2c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    ad30:	e7a2      	b.n	ac78 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    ad32:	0000      	.short	0x0000
    ad34:	e000ed04 	.word	0xe000ed04
    ad38:	00000000 	.word	0x00000000
    ad3c:	20001394 	.word	0x20001394
    ad40:	20001314 	.word	0x20001314
    ad44:	0f424000 	.word	0x0f424000
    ad48:	1e848000 	.word	0x1e848000

0000ad4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ad4c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad50:	4d92      	ldr	r5, [pc, #584]	; (af9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    ad52:	b08c      	sub	sp, #48	; 0x30
    ad54:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ad58:	2000      	movs	r0, #0
    ad5a:	9008      	str	r0, [sp, #32]
    ad5c:	9006      	str	r0, [sp, #24]
    ad5e:	2001      	movs	r0, #1
    ad60:	4c8f      	ldr	r4, [pc, #572]	; (afa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    ad62:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ad66:	f04f 0800 	mov.w	r8, #0
    ad6a:	4607      	mov	r7, r0
    ad6c:	9007      	str	r0, [sp, #28]
    ad6e:	b124      	cbz	r4, ad7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ad70:	2100      	movs	r1, #0
    ad72:	f240 70e4 	movw	r0, #2020	; 0x7e4
    ad76:	f3af 8000 	nop.w
    ad7a:	9807      	ldr	r0, [sp, #28]
    ad7c:	2800      	cmp	r0, #0
    ad7e:	d03c      	beq.n	adfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ad80:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    ad84:	b124      	cbz	r4, ad90 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ad86:	2100      	movs	r1, #0
    ad88:	f240 70e9 	movw	r0, #2025	; 0x7e9
    ad8c:	f3af 8000 	nop.w
    ad90:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    ad94:	2240      	movs	r2, #64	; 0x40
    ad96:	ea27 060a 	bic.w	r6, r7, sl
    ad9a:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ad9e:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ada2:	4683      	mov	fp, r0
    ada4:	f006 f8cf 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ada8:	b124      	cbz	r4, adb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    adaa:	2100      	movs	r1, #0
    adac:	f240 505e 	movw	r0, #1374	; 0x55e
    adb0:	f3af 8000 	nop.w
    adb4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    adb8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    adbc:	4428      	add	r0, r5
    adbe:	4429      	add	r1, r5
    adc0:	9000      	str	r0, [sp, #0]
    adc2:	8c0a      	ldrh	r2, [r1, #32]
    adc4:	8402      	strh	r2, [r0, #32]
    adc6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    adca:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    adce:	b124      	cbz	r4, adda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    add0:	2100      	movs	r1, #0
    add2:	f240 5062 	movw	r0, #1378	; 0x562
    add6:	f3af 8000 	nop.w
    adda:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    adde:	f88d 0008 	strb.w	r0, [sp, #8]
    ade2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ade6:	b178      	cbz	r0, ae08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    ade8:	2c00      	cmp	r4, #0
    adea:	bf1c      	itt	ne
    adec:	2100      	movne	r1, #0
    adee:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    adf2:	d0bc      	beq.n	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    adf4:	f3af 8000 	nop.w
    adf8:	e7b9      	b.n	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    adfa:	486a      	ldr	r0, [pc, #424]	; (afa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    adfc:	2800      	cmp	r0, #0
    adfe:	bf18      	it	ne
    ae00:	f3af 8000 	nopne.w
    ae04:	b662      	cpsie	i
    ae06:	e7bb      	b.n	ad80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    ae08:	b124      	cbz	r4, ae14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    ae0a:	2100      	movs	r1, #0
    ae0c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    ae10:	f3af 8000 	nop.w
    ae14:	980c      	ldr	r0, [sp, #48]	; 0x30
    ae16:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ae1a:	2803      	cmp	r0, #3
    ae1c:	d17e      	bne.n	af1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ae1e:	9a00      	ldr	r2, [sp, #0]
    ae20:	990c      	ldr	r1, [sp, #48]	; 0x30
    ae22:	f892 0020 	ldrb.w	r0, [r2, #32]
    ae26:	4288      	cmp	r0, r1
    ae28:	bf14      	ite	ne
    ae2a:	f04f 0a00 	movne.w	sl, #0
    ae2e:	f04f 0a01 	moveq.w	sl, #1
    ae32:	f102 0c20 	add.w	ip, r2, #32
    ae36:	4683      	mov	fp, r0
    ae38:	2220      	movs	r2, #32
    ae3a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ae3e:	e003      	b.n	ae48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ae40:	4602      	mov	r2, r0
    ae42:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ae46:	7840      	ldrb	r0, [r0, #1]
    ae48:	4288      	cmp	r0, r1
    ae4a:	d002      	beq.n	ae52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ae4c:	2820      	cmp	r0, #32
    ae4e:	d00a      	beq.n	ae66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ae50:	e7f6      	b.n	ae40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ae52:	2820      	cmp	r0, #32
    ae54:	d007      	beq.n	ae66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ae56:	4583      	cmp	fp, r0
    ae58:	d107      	bne.n	ae6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ae5a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ae5e:	7840      	ldrb	r0, [r0, #1]
    ae60:	f88c 0000 	strb.w	r0, [ip]
    ae64:	e007      	b.n	ae76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ae66:	4640      	mov	r0, r8
    ae68:	e00c      	b.n	ae84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ae6a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ae6e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ae72:	7840      	ldrb	r0, [r0, #1]
    ae74:	7048      	strb	r0, [r1, #1]
    ae76:	b124      	cbz	r4, ae82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ae78:	2100      	movs	r1, #0
    ae7a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    ae7e:	f3af 8000 	nop.w
    ae82:	4638      	mov	r0, r7
    ae84:	46c3      	mov	fp, r8
    ae86:	ea10 0f0a 	tst.w	r0, sl
    ae8a:	bf18      	it	ne
    ae8c:	46bb      	movne	fp, r7
    ae8e:	2800      	cmp	r0, #0
    ae90:	d04e      	beq.n	af30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ae92:	b124      	cbz	r4, ae9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ae94:	2100      	movs	r1, #0
    ae96:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    ae9a:	f3af 8000 	nop.w
    ae9e:	4632      	mov	r2, r6
    aea0:	2001      	movs	r0, #1
    aea2:	990c      	ldr	r1, [sp, #48]	; 0x30
    aea4:	f7ff f8f2 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    aea8:	b124      	cbz	r4, aeb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aeaa:	2100      	movs	r1, #0
    aeac:	f640 0001 	movw	r0, #2049	; 0x801
    aeb0:	f3af 8000 	nop.w
    aeb4:	483c      	ldr	r0, [pc, #240]	; (afa8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aeb6:	2800      	cmp	r0, #0
    aeb8:	bf18      	it	ne
    aeba:	f3af 8000 	nopne.w
    aebe:	f3ef 8010 	mrs	r0, PRIMASK
    aec2:	b672      	cpsid	i
    aec4:	9007      	str	r0, [sp, #28]
    aec6:	b124      	cbz	r4, aed2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    aec8:	2100      	movs	r1, #0
    aeca:	f640 0006 	movw	r0, #2054	; 0x806
    aece:	f3af 8000 	nop.w
    aed2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aed6:	f88d 0008 	strb.w	r0, [sp, #8]
    aeda:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aede:	b138      	cbz	r0, aef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    aee0:	2c00      	cmp	r4, #0
    aee2:	bf1c      	itt	ne
    aee4:	2100      	movne	r1, #0
    aee6:	f640 000a 	movwne	r0, #2058	; 0x80a
    aeea:	f43f af40 	beq.w	ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aeee:	e781      	b.n	adf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aef0:	f1bb 0f00 	cmp.w	fp, #0
    aef4:	d009      	beq.n	af0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aef6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aefa:	2820      	cmp	r0, #32
    aefc:	d105      	bne.n	af0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aefe:	4631      	mov	r1, r6
    af00:	2002      	movs	r0, #2
    af02:	f7ff f8f5 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    af06:	9006      	str	r0, [sp, #24]
    af08:	b1f8      	cbz	r0, af4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    af0a:	b124      	cbz	r4, af16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    af0c:	2100      	movs	r1, #0
    af0e:	f640 001e 	movw	r0, #2078	; 0x81e
    af12:	f3af 8000 	nop.w
    af16:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    af1a:	e000      	b.n	af1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    af1c:	e008      	b.n	af30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    af1e:	ea27 0000 	bic.w	r0, r7, r0
    af22:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    af26:	20ff      	movs	r0, #255	; 0xff
    af28:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    af2c:	2001      	movs	r0, #1
    af2e:	9008      	str	r0, [sp, #32]
    af30:	b124      	cbz	r4, af3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    af32:	2100      	movs	r1, #0
    af34:	f640 0027 	movw	r0, #2087	; 0x827
    af38:	f3af 8000 	nop.w
    af3c:	9806      	ldr	r0, [sp, #24]
    af3e:	4e1b      	ldr	r6, [pc, #108]	; (afac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    af40:	2802      	cmp	r0, #2
    af42:	d009      	beq.n	af58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    af44:	2801      	cmp	r0, #1
    af46:	d010      	beq.n	af6a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    af48:	e014      	b.n	af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af4a:	b19c      	cbz	r4, af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af4c:	2100      	movs	r1, #0
    af4e:	f640 0019 	movw	r0, #2073	; 0x819
    af52:	f3af 8000 	nop.w
    af56:	e7ec      	b.n	af32 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    af58:	f000 fd2a 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    af5c:	68a9      	ldr	r1, [r5, #8]
    af5e:	1a08      	subs	r0, r1, r0
    af60:	f005 fe5e 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af64:	6871      	ldr	r1, [r6, #4]
    af66:	b921      	cbnz	r1, af72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    af68:	e004      	b.n	af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af6a:	6871      	ldr	r1, [r6, #4]
    af6c:	f04f 30ff 	mov.w	r0, #4294967295
    af70:	b101      	cbz	r1, af74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    af72:	4788      	blx	r1
    af74:	9807      	ldr	r0, [sp, #28]
    af76:	b148      	cbz	r0, af8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    af78:	b124      	cbz	r4, af84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    af7a:	2100      	movs	r1, #0
    af7c:	f640 003c 	movw	r0, #2108	; 0x83c
    af80:	f3af 8000 	nop.w
    af84:	9808      	ldr	r0, [sp, #32]
    af86:	b00d      	add	sp, #52	; 0x34
    af88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8c:	4805      	ldr	r0, [pc, #20]	; (afa4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    af8e:	2800      	cmp	r0, #0
    af90:	bf18      	it	ne
    af92:	f3af 8000 	nopne.w
    af96:	b662      	cpsie	i
    af98:	e7ee      	b.n	af78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    af9a:	0000      	.short	0x0000
    af9c:	20001394 	.word	0x20001394
	...
    afac:	200002d4 	.word	0x200002d4

0000afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    afb0:	b510      	push	{r4, lr}
    afb2:	2820      	cmp	r0, #32
    afb4:	d211      	bcs.n	afda <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    afb6:	490e      	ldr	r1, [pc, #56]	; (aff0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    afb8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    afbc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    afc0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    afc4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    afc8:	b13b      	cbz	r3, afda <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    afca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    afce:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    afd2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    afd6:	2a01      	cmp	r2, #1
    afd8:	d001      	beq.n	afde <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    afda:	2000      	movs	r0, #0
    afdc:	bd10      	pop	{r4, pc}
    afde:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    afe2:	4601      	mov	r1, r0
    afe4:	2000      	movs	r0, #0
    afe6:	f7ff f851 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    afea:	2001      	movs	r0, #1
    afec:	bd10      	pop	{r4, pc}
    afee:	0000      	.short	0x0000
    aff0:	20001394 	.word	0x20001394

0000aff4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    aff4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aff8:	4e86      	ldr	r6, [pc, #536]	; (b214 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    affa:	4680      	mov	r8, r0
    affc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    b000:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    b004:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    b008:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b00c:	2800      	cmp	r0, #0
    b00e:	d071      	beq.n	b0f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b010:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    b014:	4d80      	ldr	r5, [pc, #512]	; (b218 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    b016:	b125      	cbz	r5, b022 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    b018:	2100      	movs	r1, #0
    b01a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    b01e:	f3af 8000 	nop.w
    b022:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    b026:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b02a:	2801      	cmp	r0, #1
    b02c:	d018      	beq.n	b060 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    b02e:	b2c0      	uxtb	r0, r0
    b030:	2804      	cmp	r0, #4
    b032:	bf1c      	itt	ne
    b034:	2805      	cmpne	r0, #5
    b036:	2806      	cmpne	r0, #6
    b038:	d061      	beq.n	b0fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    b03a:	b12d      	cbz	r5, b048 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    b03c:	f04f 0100 	mov.w	r1, #0
    b040:	f640 30c5 	movw	r0, #3013	; 0xbc5
    b044:	f3af 8000 	nop.w
    b048:	f005 ff20 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b04c:	b125      	cbz	r5, b058 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    b04e:	2100      	movs	r1, #0
    b050:	f640 30c9 	movw	r0, #3017	; 0xbc9
    b054:	f3af 8000 	nop.w
    b058:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    b05c:	2801      	cmp	r0, #1
    b05e:	d1e6      	bne.n	b02e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    b060:	2401      	movs	r4, #1
    b062:	b125      	cbz	r5, b06e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    b064:	2100      	movs	r1, #0
    b066:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    b06a:	f3af 8000 	nop.w
    b06e:	2c00      	cmp	r4, #0
    b070:	d04b      	beq.n	b10a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    b072:	2000      	movs	r0, #0
    b074:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    b078:	b125      	cbz	r5, b084 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    b07a:	2100      	movs	r1, #0
    b07c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    b080:	f3af 8000 	nop.w
    b084:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    b088:	2001      	movs	r0, #1
    b08a:	ea20 090b 	bic.w	r9, r0, fp
    b08e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    b092:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    b096:	2240      	movs	r2, #64	; 0x40
    b098:	f005 ff55 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    b09c:	b125      	cbz	r5, b0a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    b09e:	2100      	movs	r1, #0
    b0a0:	f240 505e 	movw	r0, #1374	; 0x55e
    b0a4:	f3af 8000 	nop.w
    b0a8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    b0ac:	eb00 0a06 	add.w	sl, r0, r6
    b0b0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    b0b4:	4430      	add	r0, r6
    b0b6:	8c01      	ldrh	r1, [r0, #32]
    b0b8:	f8aa 1020 	strh.w	r1, [sl, #32]
    b0bc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b0c0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    b0c4:	b125      	cbz	r5, b0d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    b0c6:	2100      	movs	r1, #0
    b0c8:	f240 5062 	movw	r0, #1378	; 0x562
    b0cc:	f3af 8000 	nop.w
    b0d0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    b0d4:	f88d 0000 	strb.w	r0, [sp]
    b0d8:	f89d 0000 	ldrb.w	r0, [sp]
    b0dc:	b1e0      	cbz	r0, b118 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    b0de:	2d00      	cmp	r5, #0
    b0e0:	bf1c      	itt	ne
    b0e2:	2100      	movne	r1, #0
    b0e4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    b0e8:	d0bb      	beq.n	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b0ea:	bf00      	nop
    b0ec:	f3af 8000 	nop.w
    b0f0:	e7b7      	b.n	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b0f2:	e7ff      	b.n	b0f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b0f4:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    b0f8:	2070      	movs	r0, #112	; 0x70
    b0fa:	f001 fba5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0fe:	464a      	mov	r2, r9
    b100:	4641      	mov	r1, r8
    b102:	2001      	movs	r0, #1
    b104:	f7fe ffc2 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b108:	e7a0      	b.n	b04c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    b10a:	4844      	ldr	r0, [pc, #272]	; (b21c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b10c:	2800      	cmp	r0, #0
    b10e:	bf18      	it	ne
    b110:	f3af 8000 	nopne.w
    b114:	b662      	cpsie	i
    b116:	e7ac      	b.n	b072 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    b118:	b125      	cbz	r5, b124 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    b11a:	2100      	movs	r1, #0
    b11c:	f640 30df 	movw	r0, #3039	; 0xbdf
    b120:	f3af 8000 	nop.w
    b124:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    b128:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    b12c:	4640      	mov	r0, r8
    b12e:	461c      	mov	r4, r3
    b130:	f04f 0b20 	mov.w	fp, #32
    b134:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    b138:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    b13c:	e004      	b.n	b148 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    b13e:	46a3      	mov	fp, r4
    b140:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    b144:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b148:	4284      	cmp	r4, r0
    b14a:	d002      	beq.n	b152 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    b14c:	2c20      	cmp	r4, #32
    b14e:	d02b      	beq.n	b1a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b150:	e7f5      	b.n	b13e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    b152:	2c20      	cmp	r4, #32
    b154:	d028      	beq.n	b1a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b156:	42a3      	cmp	r3, r4
    b158:	d104      	bne.n	b164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    b15a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    b15e:	7840      	ldrb	r0, [r0, #1]
    b160:	7008      	strb	r0, [r1, #0]
    b162:	e005      	b.n	b170 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    b164:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    b168:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    b16c:	7840      	ldrb	r0, [r0, #1]
    b16e:	7048      	strb	r0, [r1, #1]
    b170:	f1ba 0f00 	cmp.w	sl, #0
    b174:	d011      	beq.n	b19a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b176:	b125      	cbz	r5, b182 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    b178:	2100      	movs	r1, #0
    b17a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    b17e:	f3af 8000 	nop.w
    b182:	f89a 0000 	ldrb.w	r0, [sl]
    b186:	42a0      	cmp	r0, r4
    b188:	d107      	bne.n	b19a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b18a:	b125      	cbz	r5, b196 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    b18c:	2100      	movs	r1, #0
    b18e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    b192:	f3af 8000 	nop.w
    b196:	f88a b000 	strb.w	fp, [sl]
    b19a:	b15d      	cbz	r5, b1b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b19c:	2100      	movs	r1, #0
    b19e:	f240 40c9 	movw	r0, #1225	; 0x4c9
    b1a2:	f3af 8000 	nop.w
    b1a6:	e000      	b.n	b1aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    b1a8:	b125      	cbz	r5, b1b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b1aa:	2100      	movs	r1, #0
    b1ac:	f640 30e3 	movw	r0, #3043	; 0xbe3
    b1b0:	f3af 8000 	nop.w
    b1b4:	481a      	ldr	r0, [pc, #104]	; (b220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    b1b6:	2800      	cmp	r0, #0
    b1b8:	bf18      	it	ne
    b1ba:	f3af 8000 	nopne.w
    b1be:	f3ef 8410 	mrs	r4, PRIMASK
    b1c2:	b672      	cpsid	i
    b1c4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    b1c8:	f88d 0000 	strb.w	r0, [sp]
    b1cc:	f89d 0000 	ldrb.w	r0, [sp]
    b1d0:	b138      	cbz	r0, b1e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	bf1c      	itt	ne
    b1d6:	2100      	movne	r1, #0
    b1d8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    b1dc:	f43f af41 	beq.w	b062 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b1e0:	e784      	b.n	b0ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    b1e2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    b1e6:	20ff      	movs	r0, #255	; 0xff
    b1e8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    b1ec:	b154      	cbz	r4, b204 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    b1ee:	2d00      	cmp	r5, #0
    b1f0:	bf08      	it	eq
    b1f2:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1f6:	2100      	movs	r1, #0
    b1f8:	f640 30f6 	movw	r0, #3062	; 0xbf6
    b1fc:	f3af 8000 	nop.w
    b200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b204:	4805      	ldr	r0, [pc, #20]	; (b21c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b206:	2800      	cmp	r0, #0
    b208:	bf18      	it	ne
    b20a:	f3af 8000 	nopne.w
    b20e:	b662      	cpsie	i
    b210:	e7ed      	b.n	b1ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b212:	0000      	.short	0x0000
    b214:	20001394 	.word	0x20001394
	...

0000b224 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	460d      	mov	r5, r1
    b228:	4606      	mov	r6, r0
    b22a:	f001 fa83 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b22e:	480f      	ldr	r0, [pc, #60]	; (b26c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    b230:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    b234:	2400      	movs	r4, #0
    b236:	3880      	subs	r0, #128	; 0x80
    b238:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b23c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b240:	b129      	cbz	r1, b24e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b242:	1c61      	adds	r1, r4, #1
    b244:	b2cc      	uxtb	r4, r1
    b246:	2c20      	cmp	r4, #32
    b248:	d3f8      	bcc.n	b23c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b24a:	2020      	movs	r0, #32
    b24c:	bd70      	pop	{r4, r5, r6, pc}
    b24e:	4808      	ldr	r0, [pc, #32]	; (b270 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    b250:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    b254:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    b258:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    b25c:	4621      	mov	r1, r4
    b25e:	6045      	str	r5, [r0, #4]
    b260:	2001      	movs	r0, #1
    b262:	f7fe ff13 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b266:	4620      	mov	r0, r4
    b268:	bd70      	pop	{r4, r5, r6, pc}
    b26a:	0000      	.short	0x0000
    b26c:	20001394 	.word	0x20001394
    b270:	20000f94 	.word	0x20000f94

0000b274 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b278:	b083      	sub	sp, #12
    b27a:	f000 fb99 	bl	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b27e:	4605      	mov	r5, r0
    b280:	f000 fe7c 	bl	bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b284:	4c84      	ldr	r4, [pc, #528]	; (b498 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    b286:	6860      	ldr	r0, [r4, #4]
    b288:	f1b0 3fff 	cmp.w	r0, #4294967295
    b28c:	bf1c      	itt	ne
    b28e:	f04f 30ff 	movne.w	r0, #4294967295
    b292:	6060      	strne	r0, [r4, #4]
    b294:	7fa0      	ldrb	r0, [r4, #30]
    b296:	f8df 9204 	ldr.w	r9, [pc, #516]	; b49c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    b29a:	b990      	cbnz	r0, b2c2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    b29c:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    b2a0:	1a40      	subs	r0, r0, r1
    b2a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2a6:	f44f 710c 	mov.w	r1, #560	; 0x230
    b2aa:	f001 fa2f 	bl	c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b2ae:	68e1      	ldr	r1, [r4, #12]
    b2b0:	4408      	add	r0, r1
    b2b2:	1a28      	subs	r0, r5, r0
    b2b4:	0200      	lsls	r0, r0, #8
    b2b6:	17c1      	asrs	r1, r0, #31
    b2b8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    b2bc:	1200      	asrs	r0, r0, #8
    b2be:	0fc0      	lsrs	r0, r0, #31
    b2c0:	d012      	beq.n	b2e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    b2c2:	7e60      	ldrb	r0, [r4, #25]
    b2c4:	b320      	cbz	r0, b310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b2c6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b2ca:	f88d 0000 	strb.w	r0, [sp]
    b2ce:	f89d 0000 	ldrb.w	r0, [sp]
    b2d2:	b1e8      	cbz	r0, b310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    b2d4:	f000 fcae 	bl	bc34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b2d8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    b2dc:	b1f0      	cbz	r0, b31c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    b2de:	f240 31f5 	movw	r1, #1013	; 0x3f5
    b2e2:	2070      	movs	r0, #112	; 0x70
    b2e4:	f001 fab0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2e8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b2ec:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    b2f0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b2f4:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    b2f8:	6840      	ldr	r0, [r0, #4]
    b2fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    b2fe:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    b302:	2108      	movs	r1, #8
    b304:	4790      	blx	r2
    b306:	f240 31dd 	movw	r1, #989	; 0x3dd
    b30a:	2070      	movs	r0, #112	; 0x70
    b30c:	f001 fa9c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b310:	1ce8      	adds	r0, r5, #3
    b312:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b316:	f000 fb71 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b31a:	e7dd      	b.n	b2d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    b31c:	2001      	movs	r0, #1
    b31e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b322:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b326:	2820      	cmp	r0, #32
    b328:	d021      	beq.n	b36e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    b32a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    b32e:	2020      	movs	r0, #32
    b330:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    b334:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    b338:	2000      	movs	r0, #0
    b33a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b33e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b342:	6020      	str	r0, [r4, #0]
    b344:	f000 ff0e 	bl	c164 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b348:	7720      	strb	r0, [r4, #28]
    b34a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    b34e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    b352:	1907      	adds	r7, r0, r4
    b354:	f897 0020 	ldrb.w	r0, [r7, #32]
    b358:	2820      	cmp	r0, #32
    b35a:	d058      	beq.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b35c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b360:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    b364:	f899 001a 	ldrb.w	r0, [r9, #26]
    b368:	2801      	cmp	r0, #1
    b36a:	d005      	beq.n	b378 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    b36c:	e04f      	b.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b36e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    b372:	2070      	movs	r0, #112	; 0x70
    b374:	f001 fa68 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b378:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    b37c:	aa01      	add	r2, sp, #4
    b37e:	4669      	mov	r1, sp
    b380:	4658      	mov	r0, fp
    b382:	f000 f9ab 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b386:	f000 fee7 	bl	c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    b38a:	f000 f98b 	bl	b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    b38e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b392:	2820      	cmp	r0, #32
    b394:	d004      	beq.n	b3a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    b396:	68e0      	ldr	r0, [r4, #12]
    b398:	1d40      	adds	r0, r0, #5
    b39a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b39e:	e01d      	b.n	b3dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    b3a0:	f105 0a09 	add.w	sl, r5, #9
    b3a4:	f1bb 0f00 	cmp.w	fp, #0
    b3a8:	d016      	beq.n	b3d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b3aa:	f001 f9d5 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b3ae:	b998      	cbnz	r0, b3d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b3b0:	f001 f8aa 	bl	c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    b3b4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    b3b8:	bf08      	it	eq
    b3ba:	200d      	moveq	r0, #13
    b3bc:	d00b      	beq.n	b3d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b3be:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    b3c2:	3856      	subs	r0, #86	; 0x56
    b3c4:	bf08      	it	eq
    b3c6:	201c      	moveq	r0, #28
    b3c8:	d005      	beq.n	b3d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b3ca:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    b3ce:	389f      	subs	r0, #159	; 0x9f
    b3d0:	bf14      	ite	ne
    b3d2:	2000      	movne	r0, #0
    b3d4:	2032      	moveq	r0, #50	; 0x32
    b3d6:	4482      	add	sl, r0
    b3d8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    b3dc:	f8d9 2008 	ldr.w	r2, [r9, #8]
    b3e0:	1a81      	subs	r1, r0, r2
    b3e2:	0209      	lsls	r1, r1, #8
    b3e4:	17cb      	asrs	r3, r1, #31
    b3e6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    b3ea:	1209      	asrs	r1, r1, #8
    b3ec:	2900      	cmp	r1, #0
    b3ee:	dc0e      	bgt.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b3f0:	f109 0308 	add.w	r3, r9, #8
    b3f4:	4282      	cmp	r2, r0
    b3f6:	d202      	bcs.n	b3fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    b3f8:	6899      	ldr	r1, [r3, #8]
    b3fa:	1e49      	subs	r1, r1, #1
    b3fc:	6099      	str	r1, [r3, #8]
    b3fe:	e9d3 2100 	ldrd	r2, r1, [r3]
    b402:	1a89      	subs	r1, r1, r2
    b404:	6018      	str	r0, [r3, #0]
    b406:	4408      	add	r0, r1
    b408:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b40c:	6058      	str	r0, [r3, #4]
    b40e:	4631      	mov	r1, r6
    b410:	2001      	movs	r0, #1
    b412:	f7fe fe6d 	bl	a0f0 <MPSL_IRQ_RADIO_Handler+0xf34>
    b416:	ea5f 0900 	movs.w	r9, r0
    b41a:	d0f8      	beq.n	b40e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b41c:	4820      	ldr	r0, [pc, #128]	; (b4a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b41e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b422:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b426:	2802      	cmp	r0, #2
    b428:	d104      	bne.n	b434 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b42a:	4632      	mov	r2, r6
    b42c:	4641      	mov	r1, r8
    b42e:	2006      	movs	r0, #6
    b430:	f7fe fe2c 	bl	a08c <MPSL_IRQ_RADIO_Handler+0xed0>
    b434:	20ff      	movs	r0, #255	; 0xff
    b436:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b43a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b43e:	4e19      	ldr	r6, [pc, #100]	; (b4a4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b440:	2820      	cmp	r0, #32
    b442:	bf1c      	itt	ne
    b444:	7870      	ldrbne	r0, [r6, #1]
    b446:	f001 fad3 	blne	c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b44a:	7f20      	ldrb	r0, [r4, #28]
    b44c:	b120      	cbz	r0, b458 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b44e:	f000 fe65 	bl	c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b452:	2000      	movs	r0, #0
    b454:	7720      	strb	r0, [r4, #28]
    b456:	7760      	strb	r0, [r4, #29]
    b458:	f1b9 0f02 	cmp.w	r9, #2
    b45c:	d011      	beq.n	b482 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b45e:	f1b9 0f01 	cmp.w	r9, #1
    b462:	bf1c      	itt	ne
    b464:	b003      	addne	sp, #12
    b466:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b46a:	f04f 30ff 	mov.w	r0, #4294967295
    b46e:	6871      	ldr	r1, [r6, #4]
    b470:	2900      	cmp	r1, #0
    b472:	bf04      	itt	eq
    b474:	b003      	addeq	sp, #12
    b476:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b47a:	b003      	add	sp, #12
    b47c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b480:	4708      	bx	r1
    b482:	68a0      	ldr	r0, [r4, #8]
    b484:	1b40      	subs	r0, r0, r5
    b486:	f005 fbcb 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b48a:	6871      	ldr	r1, [r6, #4]
    b48c:	2900      	cmp	r1, #0
    b48e:	d1f4      	bne.n	b47a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b490:	b003      	add	sp, #12
    b492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b496:	0000      	.short	0x0000
    b498:	20001394 	.word	0x20001394
    b49c:	20000f94 	.word	0x20000f94
    b4a0:	20001314 	.word	0x20001314
    b4a4:	200002d4 	.word	0x200002d4

0000b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b4a8:	b570      	push	{r4, r5, r6, lr}
    b4aa:	4c42      	ldr	r4, [pc, #264]	; (b5b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b4ac:	4605      	mov	r5, r0
    b4ae:	b082      	sub	sp, #8
    b4b0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b4b4:	2820      	cmp	r0, #32
    b4b6:	d008      	beq.n	b4ca <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b4b8:	6860      	ldr	r0, [r4, #4]
    b4ba:	f1b0 3fff 	cmp.w	r0, #4294967295
    b4be:	d009      	beq.n	b4d4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b4c0:	f640 21e4 	movw	r1, #2788	; 0xae4
    b4c4:	2070      	movs	r0, #112	; 0x70
    b4c6:	f001 f9bf 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4ca:	f640 21e3 	movw	r1, #2787	; 0xae3
    b4ce:	2070      	movs	r0, #112	; 0x70
    b4d0:	f001 f9ba 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b4d4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b4d8:	4937      	ldr	r1, [pc, #220]	; (b5b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b4da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b4de:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b4e2:	68b0      	ldr	r0, [r6, #8]
    b4e4:	f005 fb9c 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b4e8:	4602      	mov	r2, r0
    b4ea:	8af0      	ldrh	r0, [r6, #22]
    b4ec:	7d31      	ldrb	r1, [r6, #20]
    b4ee:	4b33      	ldr	r3, [pc, #204]	; (b5bc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b4f0:	4408      	add	r0, r1
    b4f2:	1c40      	adds	r0, r0, #1
    b4f4:	1811      	adds	r1, r2, r0
    b4f6:	429a      	cmp	r2, r3
    b4f8:	d817      	bhi.n	b52a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b4fa:	4a31      	ldr	r2, [pc, #196]	; (b5c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b4fc:	4290      	cmp	r0, r2
    b4fe:	dc1b      	bgt.n	b538 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b500:	f1c2 0c00 	rsb	ip, r2, #0
    b504:	4560      	cmp	r0, ip
    b506:	db1e      	blt.n	b546 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b508:	0056      	lsls	r6, r2, #1
    b50a:	428e      	cmp	r6, r1
    b50c:	bfdc      	itt	le
    b50e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b512:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b516:	dd05      	ble.n	b524 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b518:	2900      	cmp	r1, #0
    b51a:	bfbc      	itt	lt
    b51c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b520:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b524:	1948      	adds	r0, r1, r5
    b526:	4299      	cmp	r1, r3
    b528:	d904      	bls.n	b534 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b52a:	f240 519e 	movw	r1, #1438	; 0x59e
    b52e:	2070      	movs	r0, #112	; 0x70
    b530:	f001 f98a 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b534:	4295      	cmp	r5, r2
    b536:	dd04      	ble.n	b542 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b538:	f240 519f 	movw	r1, #1439	; 0x59f
    b53c:	2070      	movs	r0, #112	; 0x70
    b53e:	f001 f983 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b542:	4565      	cmp	r5, ip
    b544:	da04      	bge.n	b550 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b546:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b54a:	2070      	movs	r0, #112	; 0x70
    b54c:	f001 f97c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b550:	4286      	cmp	r6, r0
    b552:	bfdc      	itt	le
    b554:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b558:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b55c:	dd05      	ble.n	b56a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b55e:	2800      	cmp	r0, #0
    b560:	bfbc      	itt	lt
    b562:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b566:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b56a:	aa01      	add	r2, sp, #4
    b56c:	4669      	mov	r1, sp
    b56e:	f000 f8b5 	bl	b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b572:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b576:	280f      	cmp	r0, #15
    b578:	bf8c      	ite	hi
    b57a:	2001      	movhi	r0, #1
    b57c:	2000      	movls	r0, #0
    b57e:	9900      	ldr	r1, [sp, #0]
    b580:	4408      	add	r0, r1
    b582:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b586:	6061      	str	r1, [r4, #4]
    b588:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b58c:	f88d 0000 	strb.w	r0, [sp]
    b590:	f89d 0000 	ldrb.w	r0, [sp]
    b594:	2800      	cmp	r0, #0
    b596:	bf04      	itt	eq
    b598:	b002      	addeq	sp, #8
    b59a:	bd70      	popeq	{r4, r5, r6, pc}
    b59c:	2005      	movs	r0, #5
    b59e:	f000 fbc7 	bl	bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b5a2:	2800      	cmp	r0, #0
    b5a4:	bf1c      	itt	ne
    b5a6:	b002      	addne	sp, #8
    b5a8:	bd70      	popne	{r4, r5, r6, pc}
    b5aa:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b5ae:	2070      	movs	r0, #112	; 0x70
    b5b0:	f001 f94a 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5b4:	20001394 	.word	0x20001394
    b5b8:	20000f94 	.word	0x20000f94
    b5bc:	1e847fff 	.word	0x1e847fff
    b5c0:	0f424000 	.word	0x0f424000

0000b5c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b5c4:	b570      	push	{r4, r5, r6, lr}
    b5c6:	4c1c      	ldr	r4, [pc, #112]	; (b638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b5c8:	2120      	movs	r1, #32
    b5ca:	f884 1020 	strb.w	r1, [r4, #32]
    b5ce:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b5d2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b5d6:	2000      	movs	r0, #0
    b5d8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b5dc:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b5e0:	1e42      	subs	r2, r0, #1
    b5e2:	e9c4 0200 	strd	r0, r2, [r4]
    b5e6:	77a0      	strb	r0, [r4, #30]
    b5e8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b5ec:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b5f0:	7720      	strb	r0, [r4, #28]
    b5f2:	7760      	strb	r0, [r4, #29]
    b5f4:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b5f8:	62e2      	str	r2, [r4, #44]	; 0x2c
    b5fa:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b5fe:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b602:	2210      	movs	r2, #16
    b604:	7088      	strb	r0, [r1, #2]
    b606:	f801 0f04 	strb.w	r0, [r1, #4]!
    b60a:	1e52      	subs	r2, r2, #1
    b60c:	d1fa      	bne.n	b604 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b60e:	f000 fdb3 	bl	c178 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b612:	4d0a      	ldr	r5, [pc, #40]	; (b63c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b614:	2601      	movs	r6, #1
    b616:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b61a:	20ff      	movs	r0, #255	; 0xff
    b61c:	7028      	strb	r0, [r5, #0]
    b61e:	4808      	ldr	r0, [pc, #32]	; (b640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b620:	f001 f9c8 	bl	c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b624:	7068      	strb	r0, [r5, #1]
    b626:	f001 fa33 	bl	ca90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b62a:	60a8      	str	r0, [r5, #8]
    b62c:	f000 fd2e 	bl	c08c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b630:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b634:	bd70      	pop	{r4, r5, r6, pc}
    b636:	0000      	.short	0x0000
    b638:	20001394 	.word	0x20001394
    b63c:	200002d4 	.word	0x200002d4
    b640:	00009fb5 	.word	0x00009fb5

0000b644 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b644:	b570      	push	{r4, r5, r6, lr}
    b646:	4605      	mov	r5, r0
    b648:	2001      	movs	r0, #1
    b64a:	fa00 f405 	lsl.w	r4, r0, r5
    b64e:	460e      	mov	r6, r1
    b650:	2a00      	cmp	r2, #0
    b652:	bf08      	it	eq
    b654:	4808      	ldreq	r0, [pc, #32]	; (b678 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b656:	d00c      	beq.n	b672 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b658:	2000      	movs	r0, #0
    b65a:	f000 fcfd 	bl	c058 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b65e:	00e9      	lsls	r1, r5, #3
    b660:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b664:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b668:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b66c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b670:	4802      	ldr	r0, [pc, #8]	; (b67c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b672:	6004      	str	r4, [r0, #0]
    b674:	bd70      	pop	{r4, r5, r6, pc}
    b676:	0000      	.short	0x0000
    b678:	4001f508 	.word	0x4001f508
    b67c:	4001f504 	.word	0x4001f504

0000b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b680:	b500      	push	{lr}
    b682:	b083      	sub	sp, #12
    b684:	4668      	mov	r0, sp
    b686:	f000 f999 	bl	b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b68a:	9800      	ldr	r0, [sp, #0]
    b68c:	f005 fac8 	bl	10c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b690:	9a01      	ldr	r2, [sp, #4]
    b692:	4b03      	ldr	r3, [pc, #12]	; (b6a0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b694:	2100      	movs	r1, #0
    b696:	fbe2 0103 	umlal	r0, r1, r2, r3
    b69a:	b003      	add	sp, #12
    b69c:	bd00      	pop	{pc}
    b69e:	0000      	.short	0x0000
    b6a0:	1e848000 	.word	0x1e848000

0000b6a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b6a4:	0b41      	lsrs	r1, r0, #13
    b6a6:	f248 6237 	movw	r2, #34359	; 0x8637
    b6aa:	4351      	muls	r1, r2
    b6ac:	0c0a      	lsrs	r2, r1, #16
    b6ae:	4b09      	ldr	r3, [pc, #36]	; (b6d4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b6b0:	0251      	lsls	r1, r2, #9
    b6b2:	fb02 0203 	mla	r2, r2, r3, r0
    b6b6:	4808      	ldr	r0, [pc, #32]	; (b6d8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b6b8:	4350      	muls	r0, r2
    b6ba:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b6be:	306e      	adds	r0, #110	; 0x6e
    b6c0:	0d40      	lsrs	r0, r0, #21
    b6c2:	425b      	negs	r3, r3
    b6c4:	fb10 f303 	smulbb	r3, r0, r3
    b6c8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b6cc:	bf88      	it	hi
    b6ce:	1c49      	addhi	r1, r1, #1
    b6d0:	4408      	add	r0, r1
    b6d2:	4770      	bx	lr
    b6d4:	ffffc2f7 	.word	0xffffc2f7
    b6d8:	00010c6f 	.word	0x00010c6f

0000b6dc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b6dc:	0b43      	lsrs	r3, r0, #13
    b6de:	f248 6c37 	movw	ip, #34359	; 0x8637
    b6e2:	fb03 f30c 	mul.w	r3, r3, ip
    b6e6:	b430      	push	{r4, r5}
    b6e8:	0c1b      	lsrs	r3, r3, #16
    b6ea:	f8df c044 	ldr.w	ip, [pc, #68]	; b730 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b6ee:	025c      	lsls	r4, r3, #9
    b6f0:	fb03 030c 	mla	r3, r3, ip, r0
    b6f4:	480f      	ldr	r0, [pc, #60]	; (b734 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b6f6:	4358      	muls	r0, r3
    b6f8:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b6fc:	eb04 000c 	add.w	r0, r4, ip
    b700:	f643 5409 	movw	r4, #15625	; 0x3d09
    b704:	fb1c f404 	smulbb	r4, ip, r4
    b708:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b70c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b710:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b714:	442c      	add	r4, r5
    b716:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b71a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b71e:	bf84      	itt	hi
    b720:	f04f 0c00 	movhi.w	ip, #0
    b724:	1c40      	addhi	r0, r0, #1
    b726:	6008      	str	r0, [r1, #0]
    b728:	f882 c000 	strb.w	ip, [r2]
    b72c:	bc30      	pop	{r4, r5}
    b72e:	4770      	bx	lr
    b730:	ffffc2f7 	.word	0xffffc2f7
    b734:	00010c6f 	.word	0x00010c6f

0000b738 <MPSL_IRQ_RTC0_Handler>:
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73c:	4d3b      	ldr	r5, [pc, #236]	; (b82c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b73e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b742:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b830 <MPSL_IRQ_RTC0_Handler+0xf8>
    b746:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b74a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b74e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b752:	f04f 0400 	mov.w	r4, #0
    b756:	d019      	beq.n	b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b758:	4836      	ldr	r0, [pc, #216]	; (b834 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b75a:	6800      	ldr	r0, [r0, #0]
    b75c:	b1b0      	cbz	r0, b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b75e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b762:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b766:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b76a:	f8d8 1000 	ldr.w	r1, [r8]
    b76e:	1a40      	subs	r0, r0, r1
    b770:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b774:	2802      	cmp	r0, #2
    b776:	d302      	bcc.n	b77e <MPSL_IRQ_RTC0_Handler+0x46>
    b778:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b77c:	d906      	bls.n	b78c <MPSL_IRQ_RTC0_Handler+0x54>
    b77e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b782:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b786:	2004      	movs	r0, #4
    b788:	f7fe fed8 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b78c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b790:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b794:	d01a      	beq.n	b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b796:	4828      	ldr	r0, [pc, #160]	; (b838 <MPSL_IRQ_RTC0_Handler+0x100>)
    b798:	6800      	ldr	r0, [r0, #0]
    b79a:	b1b8      	cbz	r0, b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b79c:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b7a0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b7a4:	4825      	ldr	r0, [pc, #148]	; (b83c <MPSL_IRQ_RTC0_Handler+0x104>)
    b7a6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7aa:	f8d8 1000 	ldr.w	r1, [r8]
    b7ae:	1a40      	subs	r0, r0, r1
    b7b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7b4:	2802      	cmp	r0, #2
    b7b6:	d302      	bcc.n	b7be <MPSL_IRQ_RTC0_Handler+0x86>
    b7b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7bc:	d906      	bls.n	b7cc <MPSL_IRQ_RTC0_Handler+0x94>
    b7be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b7c2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b7c6:	2005      	movs	r0, #5
    b7c8:	f7fe feb8 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b7cc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b7d0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b7d4:	d01a      	beq.n	b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7d6:	481a      	ldr	r0, [pc, #104]	; (b840 <MPSL_IRQ_RTC0_Handler+0x108>)
    b7d8:	6800      	ldr	r0, [r0, #0]
    b7da:	b1b8      	cbz	r0, b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b7e0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b7e4:	4817      	ldr	r0, [pc, #92]	; (b844 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b7e6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b7ea:	f8d8 1000 	ldr.w	r1, [r8]
    b7ee:	1a40      	subs	r0, r0, r1
    b7f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7f4:	2802      	cmp	r0, #2
    b7f6:	d302      	bcc.n	b7fe <MPSL_IRQ_RTC0_Handler+0xc6>
    b7f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7fc:	d906      	bls.n	b80c <MPSL_IRQ_RTC0_Handler+0xd4>
    b7fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b802:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b806:	2006      	movs	r0, #6
    b808:	f7fe fe98 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b80c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b810:	2800      	cmp	r0, #0
    b812:	bf08      	it	eq
    b814:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b818:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b81c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b820:	4809      	ldr	r0, [pc, #36]	; (b848 <MPSL_IRQ_RTC0_Handler+0x110>)
    b822:	68c1      	ldr	r1, [r0, #12]
    b824:	1c49      	adds	r1, r1, #1
    b826:	60c1      	str	r1, [r0, #12]
    b828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b82c:	4000b000 	.word	0x4000b000
    b830:	4000b504 	.word	0x4000b504
    b834:	4000b140 	.word	0x4000b140
    b838:	4000b144 	.word	0x4000b144
    b83c:	4000b004 	.word	0x4000b004
    b840:	4000b148 	.word	0x4000b148
    b844:	4000b008 	.word	0x4000b008
    b848:	200002e0 	.word	0x200002e0

0000b84c <MPSL_IRQ_TIMER0_Handler>:
    b84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b850:	4d38      	ldr	r5, [pc, #224]	; (b934 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b852:	7828      	ldrb	r0, [r5, #0]
    b854:	2804      	cmp	r0, #4
    b856:	d068      	beq.n	b92a <MPSL_IRQ_TIMER0_Handler+0xde>
    b858:	1ca8      	adds	r0, r5, #2
    b85a:	2201      	movs	r2, #1
    b85c:	7801      	ldrb	r1, [r0, #0]
    b85e:	b159      	cbz	r1, b878 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b860:	2901      	cmp	r1, #1
    b862:	bf08      	it	eq
    b864:	706a      	strbeq	r2, [r5, #1]
    b866:	d002      	beq.n	b86e <MPSL_IRQ_TIMER0_Handler+0x22>
    b868:	7869      	ldrb	r1, [r5, #1]
    b86a:	2900      	cmp	r1, #0
    b86c:	d058      	beq.n	b920 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b86e:	2102      	movs	r1, #2
    b870:	7001      	strb	r1, [r0, #0]
    b872:	7840      	ldrb	r0, [r0, #1]
    b874:	f000 fb12 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b878:	4c2f      	ldr	r4, [pc, #188]	; (b938 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b87a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b87e:	f04f 0800 	mov.w	r8, #0
    b882:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b886:	f44f 7780 	mov.w	r7, #256	; 0x100
    b88a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b88e:	d00a      	beq.n	b8a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b890:	482a      	ldr	r0, [pc, #168]	; (b93c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b892:	6800      	ldr	r0, [r0, #0]
    b894:	b138      	cbz	r0, b8a6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b896:	2003      	movs	r0, #3
    b898:	f000 fb00 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b89c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8a0:	2003      	movs	r0, #3
    b8a2:	f7fe fe4b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8aa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b8ae:	d00a      	beq.n	b8c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b8b0:	4823      	ldr	r0, [pc, #140]	; (b940 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b8b2:	6800      	ldr	r0, [r0, #0]
    b8b4:	b138      	cbz	r0, b8c6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b8b6:	2002      	movs	r0, #2
    b8b8:	f000 faf0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b8bc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8c0:	2002      	movs	r0, #2
    b8c2:	f7fe fe3b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8ca:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b8ce:	d00a      	beq.n	b8e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b8d0:	481c      	ldr	r0, [pc, #112]	; (b944 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b8d2:	6800      	ldr	r0, [r0, #0]
    b8d4:	b138      	cbz	r0, b8e6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b8d6:	2001      	movs	r0, #1
    b8d8:	f000 fae0 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b8dc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b8e0:	2001      	movs	r0, #1
    b8e2:	f7fe fe2b 	bl	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b8e6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b8ea:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b8ee:	bf08      	it	eq
    b8f0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8f4:	4814      	ldr	r0, [pc, #80]	; (b948 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b8f6:	6800      	ldr	r0, [r0, #0]
    b8f8:	2800      	cmp	r0, #0
    b8fa:	bf08      	it	eq
    b8fc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b900:	2000      	movs	r0, #0
    b902:	f000 facb 	bl	be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b906:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b90a:	2004      	movs	r0, #4
    b90c:	7028      	strb	r0, [r5, #0]
    b90e:	f8c5 8004 	str.w	r8, [r5, #4]
    b912:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b91a:	2000      	movs	r0, #0
    b91c:	f7fe be0e 	b.w	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b920:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b924:	206c      	movs	r0, #108	; 0x6c
    b926:	f000 ff8f 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b92e:	2007      	movs	r0, #7
    b930:	f7fe be04 	b.w	a53c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b934:	200002e0 	.word	0x200002e0
    b938:	40008000 	.word	0x40008000
    b93c:	4000814c 	.word	0x4000814c
    b940:	40008148 	.word	0x40008148
    b944:	40008144 	.word	0x40008144
    b948:	40008140 	.word	0x40008140
    b94c:	2201      	movs	r2, #1
    b94e:	0211      	lsls	r1, r2, #8
    b950:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b954:	2000      	movs	r0, #0
    b956:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b95a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b95e:	f3bf 8f4f 	dsb	sy
    b962:	f3bf 8f6f 	isb	sy
    b966:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b96a:	490e      	ldr	r1, [pc, #56]	; (b9a4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b96c:	f841 2f04 	str.w	r2, [r1, #4]!
    b970:	1e43      	subs	r3, r0, #1
    b972:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b976:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b97a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b97e:	4b0a      	ldr	r3, [pc, #40]	; (b9a8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b980:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b984:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b988:	1d1b      	adds	r3, r3, #4
    b98a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b98e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b992:	1d1b      	adds	r3, r3, #4
    b994:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b998:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b99c:	60ca      	str	r2, [r1, #12]
    b99e:	4903      	ldr	r1, [pc, #12]	; (b9ac <MPSL_IRQ_TIMER0_Handler+0x160>)
    b9a0:	7048      	strb	r0, [r1, #1]
    b9a2:	4770      	bx	lr
    b9a4:	40008000 	.word	0x40008000
    b9a8:	40008004 	.word	0x40008004
    b9ac:	200002e0 	.word	0x200002e0

0000b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b9b0:	4801      	ldr	r0, [pc, #4]	; (b9b8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b9b2:	6800      	ldr	r0, [r0, #0]
    b9b4:	4770      	bx	lr
    b9b6:	0000      	.short	0x0000
    b9b8:	4000b504 	.word	0x4000b504

0000b9bc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b9bc:	b430      	push	{r4, r5}
    b9be:	f3ef 8c10 	mrs	ip, PRIMASK
    b9c2:	b672      	cpsid	i
    b9c4:	2500      	movs	r5, #0
    b9c6:	4b0b      	ldr	r3, [pc, #44]	; (b9f4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b9c8:	4a0b      	ldr	r2, [pc, #44]	; (b9f8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b9ca:	bf00      	nop
    b9cc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b9d0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b9d4:	b12c      	cbz	r4, b9e2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b9d6:	68d1      	ldr	r1, [r2, #12]
    b9d8:	1c49      	adds	r1, r1, #1
    b9da:	60d1      	str	r1, [r2, #12]
    b9dc:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b9e0:	e7f4      	b.n	b9cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b9e2:	68d2      	ldr	r2, [r2, #12]
    b9e4:	f1bc 0f00 	cmp.w	ip, #0
    b9e8:	d100      	bne.n	b9ec <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b9ea:	b662      	cpsie	i
    b9ec:	e9c0 1200 	strd	r1, r2, [r0]
    b9f0:	bc30      	pop	{r4, r5}
    b9f2:	4770      	bx	lr
    b9f4:	4000b000 	.word	0x4000b000
    b9f8:	200002e0 	.word	0x200002e0

0000b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba00:	f8df 8134 	ldr.w	r8, [pc, #308]	; bb38 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    ba04:	4605      	mov	r5, r0
    ba06:	f1a8 0602 	sub.w	r6, r8, #2
    ba0a:	f898 3000 	ldrb.w	r3, [r8]
    ba0e:	68b0      	ldr	r0, [r6, #8]
    ba10:	2b01      	cmp	r3, #1
    ba12:	bf04      	itt	eq
    ba14:	42a8      	cmpeq	r0, r5
    ba16:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba1a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    ba1e:	4a47      	ldr	r2, [pc, #284]	; (bb3c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    ba20:	6011      	str	r1, [r2, #0]
    ba22:	4948      	ldr	r1, [pc, #288]	; (bb44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    ba24:	4a46      	ldr	r2, [pc, #280]	; (bb40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    ba26:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    ba2a:	f101 0c04 	add.w	ip, r1, #4
    ba2e:	f04f 0400 	mov.w	r4, #0
    ba32:	2b00      	cmp	r3, #0
    ba34:	d055      	beq.n	bae2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    ba36:	4a44      	ldr	r2, [pc, #272]	; (bb48 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    ba38:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    ba3c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    ba40:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    ba44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    ba48:	2701      	movs	r7, #1
    ba4a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    ba4e:	2a00      	cmp	r2, #0
    ba50:	bf01      	itttt	eq
    ba52:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    ba56:	2a00      	cmpeq	r2, #0
    ba58:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    ba5c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    ba60:	f04f 0a10 	mov.w	sl, #16
    ba64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    ba68:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    ba6c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    ba70:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    ba74:	4a35      	ldr	r2, [pc, #212]	; (bb4c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    ba76:	f8d2 c000 	ldr.w	ip, [r2]
    ba7a:	eba5 0c0c 	sub.w	ip, r5, ip
    ba7e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    ba82:	f1bc 0f02 	cmp.w	ip, #2
    ba86:	d337      	bcc.n	baf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ba88:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    ba8c:	d834      	bhi.n	baf8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    ba8e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    ba92:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    ba96:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    ba9a:	b12b      	cbz	r3, baa8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    ba9c:	6811      	ldr	r1, [r2, #0]
    ba9e:	1a41      	subs	r1, r0, r1
    baa0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    baa4:	2902      	cmp	r1, #2
    baa6:	d3f9      	bcc.n	ba9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    baa8:	6077      	str	r7, [r6, #4]
    baaa:	7034      	strb	r4, [r6, #0]
    baac:	f7ff ff4e 	bl	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    bab0:	4827      	ldr	r0, [pc, #156]	; (bb50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    bab2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    bab6:	f364 0101 	bfi	r1, r4, #0, #2
    baba:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    babe:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    bac2:	2102      	movs	r1, #2
    bac4:	f361 0201 	bfi	r2, r1, #0, #2
    bac8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    bacc:	fa9a f1aa 	rbit	r1, sl
    bad0:	fab1 f181 	clz	r1, r1
    bad4:	2909      	cmp	r1, #9
    bad6:	d917      	bls.n	bb08 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    bad8:	f240 3155 	movw	r1, #853	; 0x355
    badc:	a01d      	add	r0, pc, #116	; (adr r0, bb54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    bade:	f000 fe87 	bl	c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    bae2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    bae6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    baea:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    baee:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    baf2:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    baf6:	e7a5      	b.n	ba44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    baf8:	2000      	movs	r0, #0
    bafa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bafe:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bb02:	206c      	movs	r0, #108	; 0x6c
    bb04:	f000 fea0 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb08:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    bb0c:	60c7      	str	r7, [r0, #12]
    bb0e:	6871      	ldr	r1, [r6, #4]
    bb10:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bb14:	f44f 7080 	mov.w	r0, #256	; 0x100
    bb18:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    bb1c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    bb20:	490f      	ldr	r1, [pc, #60]	; (bb60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    bb22:	05c0      	lsls	r0, r0, #23
    bb24:	6008      	str	r0, [r1, #0]
    bb26:	2004      	movs	r0, #4
    bb28:	60b5      	str	r5, [r6, #8]
    bb2a:	f888 0001 	strb.w	r0, [r8, #1]
    bb2e:	f888 7000 	strb.w	r7, [r8]
    bb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb36:	0000      	.short	0x0000
    bb38:	200002e2 	.word	0x200002e2
    bb3c:	4001f508 	.word	0x4001f508
    bb40:	fffbfffd 	.word	0xfffbfffd
    bb44:	4000b000 	.word	0x4000b000
    bb48:	fffafffd 	.word	0xfffafffd
    bb4c:	4000b504 	.word	0x4000b504
    bb50:	40008000 	.word	0x40008000
    bb54:	5f66726e 	.word	0x5f66726e
    bb58:	656d6974 	.word	0x656d6974
    bb5c:	00682e72 	.word	0x00682e72
    bb60:	4001f504 	.word	0x4001f504

0000bb64 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    bb64:	b570      	push	{r4, r5, r6, lr}
    bb66:	4c2a      	ldr	r4, [pc, #168]	; (bc10 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    bb68:	68a1      	ldr	r1, [r4, #8]
    bb6a:	4281      	cmp	r1, r0
    bb6c:	bf14      	ite	ne
    bb6e:	2201      	movne	r2, #1
    bb70:	2200      	moveq	r2, #0
    bb72:	f8df c0a0 	ldr.w	ip, [pc, #160]	; bc14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    bb76:	f89c 5000 	ldrb.w	r5, [ip]
    bb7a:	2d02      	cmp	r5, #2
    bb7c:	d002      	beq.n	bb84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    bb7e:	2a00      	cmp	r2, #0
    bb80:	d034      	beq.n	bbec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    bb82:	e002      	b.n	bb8a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    bb84:	2a00      	cmp	r2, #0
    bb86:	bf08      	it	eq
    bb88:	bd70      	popeq	{r4, r5, r6, pc}
    bb8a:	7862      	ldrb	r2, [r4, #1]
    bb8c:	b39a      	cbz	r2, bbf6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    bb8e:	4b22      	ldr	r3, [pc, #136]	; (bc18 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    bb90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bb94:	601a      	str	r2, [r3, #0]
    bb96:	4b21      	ldr	r3, [pc, #132]	; (bc1c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    bb98:	1392      	asrs	r2, r2, #14
    bb9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    bb9e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    bba2:	2200      	movs	r2, #0
    bba4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    bba8:	4a1d      	ldr	r2, [pc, #116]	; (bc20 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    bbaa:	6816      	ldr	r6, [r2, #0]
    bbac:	1b86      	subs	r6, r0, r6
    bbae:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    bbb2:	2e02      	cmp	r6, #2
    bbb4:	d324      	bcc.n	bc00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    bbb6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    bbba:	d821      	bhi.n	bc00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    bbbc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bbc0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    bbc4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    bbc8:	b12d      	cbz	r5, bbd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    bbca:	6813      	ldr	r3, [r2, #0]
    bbcc:	1acb      	subs	r3, r1, r3
    bbce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bbd2:	2b02      	cmp	r3, #2
    bbd4:	d3f9      	bcc.n	bbca <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    bbd6:	4b13      	ldr	r3, [pc, #76]	; (bc24 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    bbd8:	2102      	movs	r1, #2
    bbda:	074a      	lsls	r2, r1, #29
    bbdc:	601a      	str	r2, [r3, #0]
    bbde:	60a0      	str	r0, [r4, #8]
    bbe0:	2004      	movs	r0, #4
    bbe2:	f88c 0001 	strb.w	r0, [ip, #1]
    bbe6:	f88c 1000 	strb.w	r1, [ip]
    bbea:	bd70      	pop	{r4, r5, r6, pc}
    bbec:	f240 21aa 	movw	r1, #682	; 0x2aa
    bbf0:	206c      	movs	r0, #108	; 0x6c
    bbf2:	f000 fe29 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbf6:	f240 21ae 	movw	r1, #686	; 0x2ae
    bbfa:	206c      	movs	r0, #108	; 0x6c
    bbfc:	f000 fe24 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc00:	2000      	movs	r0, #0
    bc02:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bc06:	f240 21ba 	movw	r1, #698	; 0x2ba
    bc0a:	206c      	movs	r0, #108	; 0x6c
    bc0c:	f000 fe1c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc10:	200002e0 	.word	0x200002e0
    bc14:	200002e2 	.word	0x200002e2
    bc18:	4001f508 	.word	0x4001f508
    bc1c:	4000b000 	.word	0x4000b000
    bc20:	4000b504 	.word	0x4000b504
    bc24:	4001f504 	.word	0x4001f504

0000bc28 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    bc28:	4801      	ldr	r0, [pc, #4]	; (bc30 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    bc2a:	6880      	ldr	r0, [r0, #8]
    bc2c:	4770      	bx	lr
    bc2e:	0000      	.short	0x0000
    bc30:	200002e0 	.word	0x200002e0

0000bc34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc38:	4836      	ldr	r0, [pc, #216]	; (bd14 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    bc3a:	4a35      	ldr	r2, [pc, #212]	; (bd10 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    bc3c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bc40:	f8df c0d4 	ldr.w	ip, [pc, #212]	; bd18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    bc44:	1d03      	adds	r3, r0, #4
    bc46:	2100      	movs	r1, #0
    bc48:	f89c 4000 	ldrb.w	r4, [ip]
    bc4c:	b184      	cbz	r4, bc70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    bc4e:	4a33      	ldr	r2, [pc, #204]	; (bd1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    bc50:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc54:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc58:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc5c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bc60:	2301      	movs	r3, #1
    bc62:	2a00      	cmp	r2, #0
    bc64:	bf04      	itt	eq
    bc66:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bc6a:	2800      	cmpeq	r0, #0
    bc6c:	d111      	bne.n	bc92 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    bc6e:	e00a      	b.n	bc86 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    bc70:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc74:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc78:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc7c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc80:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc84:	e7ea      	b.n	bc5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    bc86:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bc8e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bc92:	2c02      	cmp	r4, #2
    bc94:	d004      	beq.n	bca0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    bc96:	f240 21c6 	movw	r1, #710	; 0x2c6
    bc9a:	206c      	movs	r0, #108	; 0x6c
    bc9c:	f000 fdd4 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bca0:	4e1f      	ldr	r6, [pc, #124]	; (bd20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    bca2:	6830      	ldr	r0, [r6, #0]
    bca4:	4c1f      	ldr	r4, [pc, #124]	; (bd24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    bca6:	1cc0      	adds	r0, r0, #3
    bca8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bcac:	68a2      	ldr	r2, [r4, #8]
    bcae:	4d1e      	ldr	r5, [pc, #120]	; (bd28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    bcb0:	4290      	cmp	r0, r2
    bcb2:	d00b      	beq.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcb4:	6837      	ldr	r7, [r6, #0]
    bcb6:	1bd7      	subs	r7, r2, r7
    bcb8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    bcbc:	2f04      	cmp	r7, #4
    bcbe:	d305      	bcc.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcc0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    bcc4:	d802      	bhi.n	bccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    bcc6:	f7ff fe99 	bl	b9fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bcca:	e01b      	b.n	bd04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    bccc:	6830      	ldr	r0, [r6, #0]
    bcce:	1a10      	subs	r0, r2, r0
    bcd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bcd4:	2802      	cmp	r0, #2
    bcd6:	d313      	bcc.n	bd00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    bcd8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bcdc:	d810      	bhi.n	bd00 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    bcde:	4a13      	ldr	r2, [pc, #76]	; (bd2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    bce0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bce4:	6010      	str	r0, [r2, #0]
    bce6:	6063      	str	r3, [r4, #4]
    bce8:	7021      	strb	r1, [r4, #0]
    bcea:	606b      	str	r3, [r5, #4]
    bcec:	60eb      	str	r3, [r5, #12]
    bcee:	0040      	lsls	r0, r0, #1
    bcf0:	1f11      	subs	r1, r2, #4
    bcf2:	6008      	str	r0, [r1, #0]
    bcf4:	2004      	movs	r0, #4
    bcf6:	f88c 0001 	strb.w	r0, [ip, #1]
    bcfa:	f88c 3000 	strb.w	r3, [ip]
    bcfe:	e001      	b.n	bd04 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    bd00:	6063      	str	r3, [r4, #4]
    bd02:	7021      	strb	r1, [r4, #0]
    bd04:	6860      	ldr	r0, [r4, #4]
    bd06:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bd0e:	0000      	.short	0x0000
    bd10:	fffbfffd 	.word	0xfffbfffd
    bd14:	4000b000 	.word	0x4000b000
    bd18:	200002e2 	.word	0x200002e2
    bd1c:	fffafffd 	.word	0xfffafffd
    bd20:	4000b504 	.word	0x4000b504
    bd24:	200002e0 	.word	0x200002e0
    bd28:	40008000 	.word	0x40008000
    bd2c:	4001f508 	.word	0x4001f508

0000bd30 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd34:	4a54      	ldr	r2, [pc, #336]	; (be88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    bd36:	2500      	movs	r5, #0
    bd38:	2401      	movs	r4, #1
    bd3a:	f892 c000 	ldrb.w	ip, [r2]
    bd3e:	7853      	ldrb	r3, [r2, #1]
    bd40:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bd44:	2807      	cmp	r0, #7
    bd46:	d27d      	bcs.n	be44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bd48:	e8df f000 	tbb	[pc, r0]
    bd4c:	04040404 	.word	0x04040404
    bd50:	00585858 	.word	0x00585858
    bd54:	4a4d      	ldr	r2, [pc, #308]	; (be8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    bd56:	6897      	ldr	r7, [r2, #8]
    bd58:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    bd5c:	bf04      	itt	eq
    bd5e:	7852      	ldrbeq	r2, [r2, #1]
    bd60:	2a00      	cmpeq	r2, #0
    bd62:	d003      	beq.n	bd6c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    bd64:	f1bc 0f02 	cmp.w	ip, #2
    bd68:	d005      	beq.n	bd76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    bd6a:	e026      	b.n	bdba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    bd6c:	f240 3156 	movw	r1, #854	; 0x356
    bd70:	206c      	movs	r0, #108	; 0x6c
    bd72:	f000 fd69 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd76:	1f1a      	subs	r2, r3, #4
    bd78:	b2d2      	uxtb	r2, r2
    bd7a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    bd7e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    bd82:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    bd86:	2200      	movs	r2, #0
    bd88:	f1bc 0f01 	cmp.w	ip, #1
    bd8c:	d003      	beq.n	bd96 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    bd8e:	f1bc 0f02 	cmp.w	ip, #2
    bd92:	d008      	beq.n	bda6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    bd94:	e00e      	b.n	bdb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bd96:	2b04      	cmp	r3, #4
    bd98:	bf24      	itt	cs
    bd9a:	6837      	ldrcs	r7, [r6, #0]
    bd9c:	2f00      	cmpcs	r7, #0
    bd9e:	bf08      	it	eq
    bda0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    bda4:	e006      	b.n	bdb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    bda6:	2b04      	cmp	r3, #4
    bda8:	bf24      	itt	cs
    bdaa:	6837      	ldrcs	r7, [r6, #0]
    bdac:	2f00      	cmpcs	r7, #0
    bdae:	bf08      	it	eq
    bdb0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    bdb4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    bdb8:	d1e5      	bne.n	bd86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    bdba:	f8df c0d4 	ldr.w	ip, [pc, #212]	; be90 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    bdbe:	f100 0210 	add.w	r2, r0, #16
    bdc2:	fa04 f202 	lsl.w	r2, r4, r2
    bdc6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    bdca:	f04f 0340 	mov.w	r3, #64	; 0x40
    bdce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    bdd2:	b2db      	uxtb	r3, r3
    bdd4:	4463      	add	r3, ip
    bdd6:	601c      	str	r4, [r3, #0]
    bdd8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    bddc:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    bde0:	eba1 0303 	sub.w	r3, r1, r3
    bde4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bde8:	2b03      	cmp	r3, #3
    bdea:	bf26      	itte	cs
    bdec:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    bdf0:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    bdf4:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    bdf8:	d237      	bcs.n	be6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    bdfa:	e03c      	b.n	be76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    bdfc:	f1bc 0f00 	cmp.w	ip, #0
    be00:	d006      	beq.n	be10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    be02:	4283      	cmp	r3, r0
    be04:	d104      	bne.n	be10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    be06:	f240 3176 	movw	r1, #886	; 0x376
    be0a:	206c      	movs	r0, #108	; 0x6c
    be0c:	f000 fd1c 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be10:	1f02      	subs	r2, r0, #4
    be12:	b2d3      	uxtb	r3, r2
    be14:	2b03      	cmp	r3, #3
    be16:	d304      	bcc.n	be22 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    be18:	f240 11d1 	movw	r1, #465	; 0x1d1
    be1c:	206c      	movs	r0, #108	; 0x6c
    be1e:	f000 fd13 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be22:	f8df c070 	ldr.w	ip, [pc, #112]	; be94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    be26:	f103 0210 	add.w	r2, r3, #16
    be2a:	fa04 f202 	lsl.w	r2, r4, r2
    be2e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    be32:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    be36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    be3a:	f84c 5003 	str.w	r5, [ip, r3]
    be3e:	4b16      	ldr	r3, [pc, #88]	; (be98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    be40:	681b      	ldr	r3, [r3, #0]
    be42:	e000      	b.n	be46 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    be44:	e01a      	b.n	be7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    be46:	1f00      	subs	r0, r0, #4
    be48:	1acb      	subs	r3, r1, r3
    be4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    be4e:	b2c0      	uxtb	r0, r0
    be50:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    be54:	2b02      	cmp	r3, #2
    be56:	d30b      	bcc.n	be70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    be58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    be5c:	d808      	bhi.n	be70 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    be5e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    be62:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    be66:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    be6a:	2001      	movs	r0, #1
    be6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be70:	2100      	movs	r1, #0
    be72:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    be76:	2000      	movs	r0, #0
    be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be7c:	f240 317a 	movw	r1, #890	; 0x37a
    be80:	206c      	movs	r0, #108	; 0x6c
    be82:	f000 fce1 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be86:	0000      	.short	0x0000
    be88:	200002e2 	.word	0x200002e2
    be8c:	200002e0 	.word	0x200002e0
    be90:	40008000 	.word	0x40008000
    be94:	4000b000 	.word	0x4000b000
    be98:	4000b504 	.word	0x4000b504

0000be9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    be9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bea0:	2601      	movs	r6, #1
    bea2:	2700      	movs	r7, #0
    bea4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    bea8:	2807      	cmp	r0, #7
    beaa:	d251      	bcs.n	bf50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    beac:	e8df f000 	tbb	[pc, r0]
    beb0:	04040404 	.word	0x04040404
    beb4:	00191919 	.word	0x00191919
    beb8:	f100 0110 	add.w	r1, r0, #16
    bebc:	fa06 f201 	lsl.w	r2, r6, r1
    bec0:	4926      	ldr	r1, [pc, #152]	; (bf5c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bec2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bec6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    beca:	2200      	movs	r2, #0
    becc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bed0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bed4:	508f      	str	r7, [r1, r2]
    bed6:	4922      	ldr	r1, [pc, #136]	; (bf60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bed8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bedc:	9000      	str	r0, [sp, #0]
    bede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bee2:	4d20      	ldr	r5, [pc, #128]	; (bf64 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bee4:	1f01      	subs	r1, r0, #4
    bee6:	b2cc      	uxtb	r4, r1
    bee8:	7829      	ldrb	r1, [r5, #0]
    beea:	b179      	cbz	r1, bf0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    beec:	786a      	ldrb	r2, [r5, #1]
    beee:	4282      	cmp	r2, r0
    bef0:	d10c      	bne.n	bf0c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bef2:	4a1d      	ldr	r2, [pc, #116]	; (bf68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bef4:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bef8:	6010      	str	r0, [r2, #0]
    befa:	2901      	cmp	r1, #1
    befc:	bf08      	it	eq
    befe:	f7ff fd25 	bleq	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    bf02:	702f      	strb	r7, [r5, #0]
    bf04:	4919      	ldr	r1, [pc, #100]	; (bf6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bf06:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bf0a:	6088      	str	r0, [r1, #8]
    bf0c:	4918      	ldr	r1, [pc, #96]	; (bf70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bf0e:	f104 0010 	add.w	r0, r4, #16
    bf12:	fa06 f000 	lsl.w	r0, r6, r0
    bf16:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bf1a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bf1e:	00a0      	lsls	r0, r4, #2
    bf20:	4408      	add	r0, r1
    bf22:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bf26:	4a13      	ldr	r2, [pc, #76]	; (bf74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bf28:	6812      	ldr	r2, [r2, #0]
    bf2a:	1a80      	subs	r0, r0, r2
    bf2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf30:	2802      	cmp	r0, #2
    bf32:	d307      	bcc.n	bf44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bf34:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bf38:	2000      	movs	r0, #0
    bf3a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bf3e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bf42:	500f      	str	r7, [r1, r0]
    bf44:	480c      	ldr	r0, [pc, #48]	; (bf78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bf46:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bf4a:	9000      	str	r0, [sp, #0]
    bf4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bf50:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bf54:	206c      	movs	r0, #108	; 0x6c
    bf56:	f000 fc77 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf5a:	0000      	.short	0x0000
    bf5c:	40008000 	.word	0x40008000
    bf60:	40008140 	.word	0x40008140
    bf64:	200002e2 	.word	0x200002e2
    bf68:	4001f508 	.word	0x4001f508
    bf6c:	200002e0 	.word	0x200002e0
    bf70:	4000b000 	.word	0x4000b000
    bf74:	4000b504 	.word	0x4000b504
    bf78:	4000b140 	.word	0x4000b140

0000bf7c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bf7c:	4825      	ldr	r0, [pc, #148]	; (c014 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bf7e:	4a24      	ldr	r2, [pc, #144]	; (c010 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bf80:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bf84:	4924      	ldr	r1, [pc, #144]	; (c018 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bf86:	1d03      	adds	r3, r0, #4
    bf88:	f891 c000 	ldrb.w	ip, [r1]
    bf8c:	2100      	movs	r1, #0
    bf8e:	f1bc 0f00 	cmp.w	ip, #0
    bf92:	d010      	beq.n	bfb6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bf94:	4a21      	ldr	r2, [pc, #132]	; (c01c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bf96:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bf9a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bf9e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bfa2:	bf00      	nop
    bfa4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bfa8:	2a00      	cmp	r2, #0
    bfaa:	bf04      	itt	eq
    bfac:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bfb0:	2800      	cmpeq	r0, #0
    bfb2:	d111      	bne.n	bfd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bfb4:	e00a      	b.n	bfcc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bfb6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bfba:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bfbe:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bfc2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bfc6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bfca:	e7eb      	b.n	bfa4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bfcc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bfd0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bfd4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bfd8:	4811      	ldr	r0, [pc, #68]	; (c020 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bfda:	f04f 32ff 	mov.w	r2, #4294967295
    bfde:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bfe2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bfe6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bfea:	f100 0204 	add.w	r2, r0, #4
    bfee:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bff2:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bff6:	f102 0204 	add.w	r2, r2, #4
    bffa:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bffe:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    c002:	f102 0204 	add.w	r2, r2, #4
    c006:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    c00a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    c00e:	4770      	bx	lr
    c010:	fffbfffd 	.word	0xfffbfffd
    c014:	4000b000 	.word	0x4000b000
    c018:	200002e2 	.word	0x200002e2
    c01c:	fffafffd 	.word	0xfffafffd
    c020:	40008000 	.word	0x40008000

0000c024 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    c024:	b510      	push	{r4, lr}
    c026:	2807      	cmp	r0, #7
    c028:	d20d      	bcs.n	c046 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    c02a:	e8df f000 	tbb	[pc, r0]
    c02e:	0404      	.short	0x0404
    c030:	06060404 	.word	0x06060404
    c034:	0006      	.short	0x0006
    c036:	4906      	ldr	r1, [pc, #24]	; (c050 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    c038:	e002      	b.n	c040 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    c03a:	1f00      	subs	r0, r0, #4
    c03c:	4905      	ldr	r1, [pc, #20]	; (c054 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    c03e:	b2c0      	uxtb	r0, r0
    c040:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c044:	bd10      	pop	{r4, pc}
    c046:	f240 319e 	movw	r1, #926	; 0x39e
    c04a:	206c      	movs	r0, #108	; 0x6c
    c04c:	f000 fbfc 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c050:	40008140 	.word	0x40008140
    c054:	4000b140 	.word	0x4000b140

0000c058 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    c058:	b510      	push	{r4, lr}
    c05a:	2807      	cmp	r0, #7
    c05c:	d20d      	bcs.n	c07a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    c05e:	e8df f000 	tbb	[pc, r0]
    c062:	0404      	.short	0x0404
    c064:	06060404 	.word	0x06060404
    c068:	0006      	.short	0x0006
    c06a:	4906      	ldr	r1, [pc, #24]	; (c084 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    c06c:	e002      	b.n	c074 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    c06e:	1f00      	subs	r0, r0, #4
    c070:	4905      	ldr	r1, [pc, #20]	; (c088 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    c072:	b2c0      	uxtb	r0, r0
    c074:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c078:	bd10      	pop	{r4, pc}
    c07a:	f240 319e 	movw	r1, #926	; 0x39e
    c07e:	206c      	movs	r0, #108	; 0x6c
    c080:	f000 fbe2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c084:	40008140 	.word	0x40008140
    c088:	4000b140 	.word	0x4000b140

0000c08c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    c08c:	b570      	push	{r4, r5, r6, lr}
    c08e:	481f      	ldr	r0, [pc, #124]	; (c10c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    c090:	2400      	movs	r4, #0
    c092:	2104      	movs	r1, #4
    c094:	7004      	strb	r4, [r0, #0]
    c096:	1e80      	subs	r0, r0, #2
    c098:	7001      	strb	r1, [r0, #0]
    c09a:	0589      	lsls	r1, r1, #22
    c09c:	60c4      	str	r4, [r0, #12]
    c09e:	6081      	str	r1, [r0, #8]
    c0a0:	f7ff fc54 	bl	b94c <MPSL_IRQ_TIMER0_Handler+0x100>
    c0a4:	2501      	movs	r5, #1
    c0a6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c0aa:	02eb      	lsls	r3, r5, #11
    c0ac:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    c0b0:	f3bf 8f4f 	dsb	sy
    c0b4:	f3bf 8f6f 	isb	sy
    c0b8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    c0bc:	4814      	ldr	r0, [pc, #80]	; (c110 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    c0be:	6045      	str	r5, [r0, #4]
    c0c0:	6085      	str	r5, [r0, #8]
    c0c2:	4914      	ldr	r1, [pc, #80]	; (c114 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    c0c4:	680a      	ldr	r2, [r1, #0]
    c0c6:	2a00      	cmp	r2, #0
    c0c8:	d1fc      	bne.n	c0c4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    c0ca:	1e51      	subs	r1, r2, #1
    c0cc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c0d0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    c0d4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    c0d8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c0dc:	490e      	ldr	r1, [pc, #56]	; (c118 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    c0de:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    c0e2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c0e6:	1d09      	adds	r1, r1, #4
    c0e8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    c0ec:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c0f0:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    c0f4:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    c0f8:	6005      	str	r5, [r0, #0]
    c0fa:	f44f 7182 	mov.w	r1, #260	; 0x104
    c0fe:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    c102:	2102      	movs	r1, #2
    c104:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    c108:	bd70      	pop	{r4, r5, r6, pc}
    c10a:	0000      	.short	0x0000
    c10c:	200002e2 	.word	0x200002e2
    c110:	4000b000 	.word	0x4000b000
    c114:	4000b504 	.word	0x4000b504
    c118:	4000b004 	.word	0x4000b004

0000c11c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    c11c:	4808      	ldr	r0, [pc, #32]	; (c140 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    c11e:	f990 0000 	ldrsb.w	r0, [r0]
    c122:	2800      	cmp	r0, #0
    c124:	bfb8      	it	lt
    c126:	4770      	bxlt	lr
    c128:	f000 011f 	and.w	r1, r0, #31
    c12c:	2201      	movs	r2, #1
    c12e:	fa02 f101 	lsl.w	r1, r2, r1
    c132:	0940      	lsrs	r0, r0, #5
    c134:	0080      	lsls	r0, r0, #2
    c136:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c13a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c13e:	4770      	bx	lr
    c140:	2000036e 	.word	0x2000036e

0000c144 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    c144:	4803      	ldr	r0, [pc, #12]	; (c154 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    c146:	7800      	ldrb	r0, [r0, #0]
    c148:	2803      	cmp	r0, #3
    c14a:	bf0c      	ite	eq
    c14c:	2001      	moveq	r0, #1
    c14e:	2000      	movne	r0, #0
    c150:	4770      	bx	lr
    c152:	0000      	.short	0x0000
    c154:	20000340 	.word	0x20000340

0000c158 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    c158:	4801      	ldr	r0, [pc, #4]	; (c160 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    c15a:	8840      	ldrh	r0, [r0, #2]
    c15c:	4770      	bx	lr
    c15e:	0000      	.short	0x0000
    c160:	20000340 	.word	0x20000340

0000c164 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    c164:	4803      	ldr	r0, [pc, #12]	; (c174 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    c166:	7800      	ldrb	r0, [r0, #0]
    c168:	2802      	cmp	r0, #2
    c16a:	bf16      	itet	ne
    c16c:	2803      	cmpne	r0, #3
    c16e:	2001      	moveq	r0, #1
    c170:	2000      	movne	r0, #0
    c172:	4770      	bx	lr
    c174:	20000340 	.word	0x20000340

0000c178 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    c178:	4802      	ldr	r0, [pc, #8]	; (c184 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    c17a:	2100      	movs	r1, #0
    c17c:	7001      	strb	r1, [r0, #0]
    c17e:	8041      	strh	r1, [r0, #2]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	20000340 	.word	0x20000340

0000c188 <MPSL_IRQ_CLOCK_Handler>:
    c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c18c:	4c16      	ldr	r4, [pc, #88]	; (c1e8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    c18e:	7a60      	ldrb	r0, [r4, #9]
    c190:	2800      	cmp	r0, #0
    c192:	d027      	beq.n	c1e4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    c194:	f44f 7180 	mov.w	r1, #256	; 0x100
    c198:	058d      	lsls	r5, r1, #22
    c19a:	4628      	mov	r0, r5
    c19c:	f004 fd6b 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c1a0:	4680      	mov	r8, r0
    c1a2:	f44f 7182 	mov.w	r1, #260	; 0x104
    c1a6:	4628      	mov	r0, r5
    c1a8:	f004 fd65 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c1ac:	2600      	movs	r6, #0
    c1ae:	4607      	mov	r7, r0
    c1b0:	f1b8 0f00 	cmp.w	r8, #0
    c1b4:	d009      	beq.n	c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1b6:	2001      	movs	r0, #1
    c1b8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c1bc:	7920      	ldrb	r0, [r4, #4]
    c1be:	b120      	cbz	r0, c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1c0:	7126      	strb	r6, [r4, #4]
    c1c2:	69e0      	ldr	r0, [r4, #28]
    c1c4:	b108      	cbz	r0, c1ca <MPSL_IRQ_CLOCK_Handler+0x42>
    c1c6:	4780      	blx	r0
    c1c8:	61e6      	str	r6, [r4, #28]
    c1ca:	b137      	cbz	r7, c1da <MPSL_IRQ_CLOCK_Handler+0x52>
    c1cc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    c1d0:	2002      	movs	r0, #2
    c1d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c1d6:	f000 fa57 	bl	c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c1da:	4640      	mov	r0, r8
    c1dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c1e0:	f000 b858 	b.w	c294 <MPSL_IRQ_CLOCK_Handler+0x10c>
    c1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c1e8:	200002f0 	.word	0x200002f0
    c1ec:	b510      	push	{r4, lr}
    c1ee:	f004 fdec 	bl	10dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c1f2:	b930      	cbnz	r0, c202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c1f4:	f004 fe0a 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c1f8:	b918      	cbnz	r0, c202 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c1fa:	f004 fe3d 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c1fe:	2800      	cmp	r0, #0
    c200:	d002      	beq.n	c208 <MPSL_IRQ_CLOCK_Handler+0x80>
    c202:	4902      	ldr	r1, [pc, #8]	; (c20c <MPSL_IRQ_CLOCK_Handler+0x84>)
    c204:	2002      	movs	r0, #2
    c206:	6008      	str	r0, [r1, #0]
    c208:	bd10      	pop	{r4, pc}
    c20a:	0000      	.short	0x0000
    c20c:	40000c34 	.word	0x40000c34
    c210:	b570      	push	{r4, r5, r6, lr}
    c212:	f000 f99b 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c216:	f000 fa9f 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c21a:	4c09      	ldr	r4, [pc, #36]	; (c240 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    c21c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c220:	b130      	cbz	r0, c230 <MPSL_IRQ_CLOCK_Handler+0xa8>
    c222:	f7ff ffe3 	bl	c1ec <MPSL_IRQ_CLOCK_Handler+0x64>
    c226:	2001      	movs	r0, #1
    c228:	6128      	str	r0, [r5, #16]
    c22a:	2004      	movs	r0, #4
    c22c:	72a0      	strb	r0, [r4, #10]
    c22e:	e004      	b.n	c23a <MPSL_IRQ_CLOCK_Handler+0xb2>
    c230:	2003      	movs	r0, #3
    c232:	72a0      	strb	r0, [r4, #10]
    c234:	2001      	movs	r0, #1
    c236:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c23a:	2000      	movs	r0, #0
    c23c:	71e0      	strb	r0, [r4, #7]
    c23e:	bd70      	pop	{r4, r5, r6, pc}
    c240:	200002f0 	.word	0x200002f0
    c244:	b570      	push	{r4, r5, r6, lr}
    c246:	4c12      	ldr	r4, [pc, #72]	; (c290 <MPSL_IRQ_CLOCK_Handler+0x108>)
    c248:	79a0      	ldrb	r0, [r4, #6]
    c24a:	b1e0      	cbz	r0, c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c24c:	79e1      	ldrb	r1, [r4, #7]
    c24e:	1e40      	subs	r0, r0, #1
    c250:	4281      	cmp	r1, r0
    c252:	da18      	bge.n	c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c254:	f000 fa80 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c258:	4605      	mov	r5, r0
    c25a:	f000 fb69 	bl	c930 <mpsl_temperature_get>
    c25e:	79a1      	ldrb	r1, [r4, #6]
    c260:	2901      	cmp	r1, #1
    c262:	d902      	bls.n	c26a <MPSL_IRQ_CLOCK_Handler+0xe2>
    c264:	79e1      	ldrb	r1, [r4, #7]
    c266:	1c49      	adds	r1, r1, #1
    c268:	71e1      	strb	r1, [r4, #7]
    c26a:	b10d      	cbz	r5, c270 <MPSL_IRQ_CLOCK_Handler+0xe8>
    c26c:	6961      	ldr	r1, [r4, #20]
    c26e:	e000      	b.n	c272 <MPSL_IRQ_CLOCK_Handler+0xea>
    c270:	6921      	ldr	r1, [r4, #16]
    c272:	1a41      	subs	r1, r0, r1
    c274:	2902      	cmp	r1, #2
    c276:	da02      	bge.n	c27e <MPSL_IRQ_CLOCK_Handler+0xf6>
    c278:	f111 0f02 	cmn.w	r1, #2
    c27c:	dc07      	bgt.n	c28e <MPSL_IRQ_CLOCK_Handler+0x106>
    c27e:	b10d      	cbz	r5, c284 <MPSL_IRQ_CLOCK_Handler+0xfc>
    c280:	6160      	str	r0, [r4, #20]
    c282:	e000      	b.n	c286 <MPSL_IRQ_CLOCK_Handler+0xfe>
    c284:	6120      	str	r0, [r4, #16]
    c286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c28a:	f7ff bfc1 	b.w	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c28e:	bd70      	pop	{r4, r5, r6, pc}
    c290:	200002f0 	.word	0x200002f0
    c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c298:	4606      	mov	r6, r0
    c29a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c29e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c2a2:	4628      	mov	r0, r5
    c2a4:	f004 fce7 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2a8:	4680      	mov	r8, r0
    c2aa:	f44f 7188 	mov.w	r1, #272	; 0x110
    c2ae:	4628      	mov	r0, r5
    c2b0:	f004 fce1 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2b4:	4c27      	ldr	r4, [pc, #156]	; (c354 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c2b6:	4682      	mov	sl, r0
    c2b8:	7827      	ldrb	r7, [r4, #0]
    c2ba:	f104 0008 	add.w	r0, r4, #8
    c2be:	f004 fd4e 	bl	10d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c2c2:	b110      	cbz	r0, c2ca <MPSL_IRQ_CLOCK_Handler+0x142>
    c2c4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c2c8:	e016      	b.n	c2f8 <MPSL_IRQ_CLOCK_Handler+0x170>
    c2ca:	f04f 0901 	mov.w	r9, #1
    c2ce:	b146      	cbz	r6, c2e2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c2d0:	7aa0      	ldrb	r0, [r4, #10]
    c2d2:	2803      	cmp	r0, #3
    c2d4:	d105      	bne.n	c2e2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c2d6:	2004      	movs	r0, #4
    c2d8:	72a0      	strb	r0, [r4, #10]
    c2da:	f7ff ff87 	bl	c1ec <MPSL_IRQ_CLOCK_Handler+0x64>
    c2de:	f8c5 9010 	str.w	r9, [r5, #16]
    c2e2:	2600      	movs	r6, #0
    c2e4:	f1b8 0f00 	cmp.w	r8, #0
    c2e8:	d018      	beq.n	c31c <MPSL_IRQ_CLOCK_Handler+0x194>
    c2ea:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c2ee:	7aa0      	ldrb	r0, [r4, #10]
    c2f0:	2804      	cmp	r0, #4
    c2f2:	d004      	beq.n	c2fe <MPSL_IRQ_CLOCK_Handler+0x176>
    c2f4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c2f8:	206d      	movs	r0, #109	; 0x6d
    c2fa:	f000 faa5 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2fe:	f004 fd64 	bl	10dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c302:	b928      	cbnz	r0, c310 <MPSL_IRQ_CLOCK_Handler+0x188>
    c304:	f004 fd82 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c308:	b910      	cbnz	r0, c310 <MPSL_IRQ_CLOCK_Handler+0x188>
    c30a:	f004 fdb5 	bl	10e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c30e:	b108      	cbz	r0, c314 <MPSL_IRQ_CLOCK_Handler+0x18c>
    c310:	4811      	ldr	r0, [pc, #68]	; (c358 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c312:	6006      	str	r6, [r0, #0]
    c314:	2002      	movs	r0, #2
    c316:	72a0      	strb	r0, [r4, #10]
    c318:	f000 f8fc 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c31c:	f1ba 0f00 	cmp.w	sl, #0
    c320:	d008      	beq.n	c334 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c322:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c326:	7aa0      	ldrb	r0, [r4, #10]
    c328:	2802      	cmp	r0, #2
    c32a:	d101      	bne.n	c330 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c32c:	f7ff ff8a 	bl	c244 <MPSL_IRQ_CLOCK_Handler+0xbc>
    c330:	f8c5 9014 	str.w	r9, [r5, #20]
    c334:	b13f      	cbz	r7, c346 <MPSL_IRQ_CLOCK_Handler+0x1be>
    c336:	7026      	strb	r6, [r4, #0]
    c338:	7aa0      	ldrb	r0, [r4, #10]
    c33a:	2802      	cmp	r0, #2
    c33c:	d101      	bne.n	c342 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c33e:	f7ff ff67 	bl	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c342:	f000 f8e7 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c346:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c34a:	4802      	ldr	r0, [pc, #8]	; (c354 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c34c:	3008      	adds	r0, #8
    c34e:	f004 bd1d 	b.w	10d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c352:	0000      	.short	0x0000
    c354:	200002f0 	.word	0x200002f0
    c358:	40000c34 	.word	0x40000c34
    c35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c360:	4c49      	ldr	r4, [pc, #292]	; (c488 <MPSL_IRQ_CLOCK_Handler+0x300>)
    c362:	2700      	movs	r7, #0
    c364:	4606      	mov	r6, r0
    c366:	61a7      	str	r7, [r4, #24]
    c368:	7842      	ldrb	r2, [r0, #1]
    c36a:	7881      	ldrb	r1, [r0, #2]
    c36c:	7800      	ldrb	r0, [r0, #0]
    c36e:	72e0      	strb	r0, [r4, #11]
    c370:	7162      	strb	r2, [r4, #5]
    c372:	71a1      	strb	r1, [r4, #6]
    c374:	71e7      	strb	r7, [r4, #7]
    c376:	f04f 0801 	mov.w	r8, #1
    c37a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c37e:	2805      	cmp	r0, #5
    c380:	d225      	bcs.n	c3ce <MPSL_IRQ_CLOCK_Handler+0x246>
    c382:	e8df f000 	tbb	[pc, r0]
    c386:	0310      	.short	0x0310
    c388:	00222006 	.word	0x00222006
    c38c:	f8c4 8018 	str.w	r8, [r4, #24]
    c390:	e009      	b.n	c3a6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    c392:	f000 f8db 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c396:	2101      	movs	r1, #1
    c398:	4628      	mov	r0, r5
    c39a:	f004 fc71 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c39e:	2800      	cmp	r0, #0
    c3a0:	d0f9      	beq.n	c396 <MPSL_IRQ_CLOCK_Handler+0x20e>
    c3a2:	2002      	movs	r0, #2
    c3a4:	61a0      	str	r0, [r4, #24]
    c3a6:	f004 fc97 	bl	10cd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c3aa:	b1c0      	cbz	r0, c3de <MPSL_IRQ_CLOCK_Handler+0x256>
    c3ac:	f000 f9ee 	bl	c78c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c3b0:	7e21      	ldrb	r1, [r4, #24]
    c3b2:	f001 0103 	and.w	r1, r1, #3
    c3b6:	4288      	cmp	r0, r1
    c3b8:	d111      	bne.n	c3de <MPSL_IRQ_CLOCK_Handler+0x256>
    c3ba:	79b0      	ldrb	r0, [r6, #6]
    c3bc:	b160      	cbz	r0, c3d8 <MPSL_IRQ_CLOCK_Handler+0x250>
    c3be:	2002      	movs	r0, #2
    c3c0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c3c4:	e044      	b.n	c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c3c6:	4831      	ldr	r0, [pc, #196]	; (c48c <MPSL_IRQ_CLOCK_Handler+0x304>)
    c3c8:	e7ec      	b.n	c3a4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c3ca:	4831      	ldr	r0, [pc, #196]	; (c490 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c3cc:	e7ea      	b.n	c3a4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c3ce:	f240 313d 	movw	r1, #829	; 0x33d
    c3d2:	206d      	movs	r0, #109	; 0x6d
    c3d4:	f000 fa38 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c3d8:	f000 f9ac 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c3dc:	e038      	b.n	c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c3de:	f8c5 800c 	str.w	r8, [r5, #12]
    c3e2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c3e6:	69a0      	ldr	r0, [r4, #24]
    c3e8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c3ec:	f004 fcd9 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c3f0:	b940      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3f2:	f004 fce0 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c3f6:	b928      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3f8:	f004 fcf4 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c3fc:	b910      	cbnz	r0, c404 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c3fe:	f004 fd05 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c402:	b138      	cbz	r0, c414 <MPSL_IRQ_CLOCK_Handler+0x28c>
    c404:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c408:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c40c:	4921      	ldr	r1, [pc, #132]	; (c494 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c40e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c412:	6008      	str	r0, [r1, #0]
    c414:	f004 fcc5 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c418:	b940      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c41a:	f004 fccc 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c41e:	b928      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c420:	f004 fce0 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c424:	b910      	cbnz	r0, c42c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c426:	f004 fcf1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c42a:	b118      	cbz	r0, c434 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c42c:	4919      	ldr	r1, [pc, #100]	; (c494 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c42e:	3110      	adds	r1, #16
    c430:	f8c1 8000 	str.w	r8, [r1]
    c434:	f8c5 8008 	str.w	r8, [r5, #8]
    c438:	2002      	movs	r0, #2
    c43a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c43e:	79b0      	ldrb	r0, [r6, #6]
    c440:	b930      	cbnz	r0, c450 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c442:	f000 f829 	bl	c498 <MPSL_IRQ_CLOCK_Handler+0x310>
    c446:	2002      	movs	r0, #2
    c448:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c44c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c450:	79a0      	ldrb	r0, [r4, #6]
    c452:	b170      	cbz	r0, c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c454:	7830      	ldrb	r0, [r6, #0]
    c456:	b960      	cbnz	r0, c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c458:	f000 f97e 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c45c:	4606      	mov	r6, r0
    c45e:	f000 fa67 	bl	c930 <mpsl_temperature_get>
    c462:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c466:	b116      	cbz	r6, c46e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c468:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c46c:	e001      	b.n	c472 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c46e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c472:	2101      	movs	r1, #1
    c474:	4628      	mov	r0, r5
    c476:	f004 fc03 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c47a:	b108      	cbz	r0, c480 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c47c:	f000 f966 	bl	c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c480:	72a7      	strb	r7, [r4, #10]
    c482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c486:	0000      	.short	0x0000
    c488:	200002f0 	.word	0x200002f0
    c48c:	00020001 	.word	0x00020001
    c490:	00030001 	.word	0x00030001
    c494:	4000053c 	.word	0x4000053c
    c498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c49c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c4a0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c4a4:	f010 0f02 	tst.w	r0, #2
    c4a8:	d011      	beq.n	c4ce <MPSL_IRQ_CLOCK_Handler+0x346>
    c4aa:	4c16      	ldr	r4, [pc, #88]	; (c504 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c4ac:	6820      	ldr	r0, [r4, #0]
    c4ae:	43c0      	mvns	r0, r0
    c4b0:	f340 1600 	sbfx	r6, r0, #4, #1
    c4b4:	6820      	ldr	r0, [r4, #0]
    c4b6:	f040 0010 	orr.w	r0, r0, #16
    c4ba:	6020      	str	r0, [r4, #0]
    c4bc:	f44f 7782 	mov.w	r7, #260	; 0x104
    c4c0:	4639      	mov	r1, r7
    c4c2:	4628      	mov	r0, r5
    c4c4:	1c76      	adds	r6, r6, #1
    c4c6:	f004 fbd6 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c4ca:	b128      	cbz	r0, c4d8 <MPSL_IRQ_CLOCK_Handler+0x350>
    c4cc:	e00a      	b.n	c4e4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c4ce:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c4d2:	206d      	movs	r0, #109	; 0x6d
    c4d4:	f000 f9b8 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4d8:	f004 fcda 	bl	10e90 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c4dc:	e002      	b.n	c4e4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c4de:	bf00      	nop
    c4e0:	f004 fcd4 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c4e4:	4639      	mov	r1, r7
    c4e6:	4628      	mov	r0, r5
    c4e8:	f004 fbc5 	bl	10c76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c4ec:	2800      	cmp	r0, #0
    c4ee:	d0f7      	beq.n	c4e0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c4f0:	f000 f920 	bl	c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c4f4:	2e00      	cmp	r6, #0
    c4f6:	d103      	bne.n	c500 <MPSL_IRQ_CLOCK_Handler+0x378>
    c4f8:	6820      	ldr	r0, [r4, #0]
    c4fa:	f020 0010 	bic.w	r0, r0, #16
    c4fe:	6020      	str	r0, [r4, #0]
    c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c504:	e000ed10 	.word	0xe000ed10

0000c508 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c508:	4801      	ldr	r0, [pc, #4]	; (c510 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c50a:	89c0      	ldrh	r0, [r0, #14]
    c50c:	4770      	bx	lr
    c50e:	0000      	.short	0x0000
    c510:	200002f0 	.word	0x200002f0

0000c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c514:	b510      	push	{r4, lr}
    c516:	f3ef 8410 	mrs	r4, PRIMASK
    c51a:	b672      	cpsid	i
    c51c:	480a      	ldr	r0, [pc, #40]	; (c548 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c51e:	7841      	ldrb	r1, [r0, #1]
    c520:	b129      	cbz	r1, c52e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c522:	7841      	ldrb	r1, [r0, #1]
    c524:	1e49      	subs	r1, r1, #1
    c526:	7041      	strb	r1, [r0, #1]
    c528:	7841      	ldrb	r1, [r0, #1]
    c52a:	b129      	cbz	r1, c538 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c52c:	e008      	b.n	c540 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c52e:	f240 1119 	movw	r1, #281	; 0x119
    c532:	206d      	movs	r0, #109	; 0x6d
    c534:	f000 f988 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c538:	7880      	ldrb	r0, [r0, #2]
    c53a:	b908      	cbnz	r0, c540 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c53c:	f000 f91a 	bl	c774 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c540:	2c00      	cmp	r4, #0
    c542:	d100      	bne.n	c546 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c544:	b662      	cpsie	i
    c546:	bd10      	pop	{r4, pc}
    c548:	200002f0 	.word	0x200002f0

0000c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c54c:	b510      	push	{r4, lr}
    c54e:	f3ef 8410 	mrs	r4, PRIMASK
    c552:	b672      	cpsid	i
    c554:	4806      	ldr	r0, [pc, #24]	; (c570 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c556:	7841      	ldrb	r1, [r0, #1]
    c558:	1c49      	adds	r1, r1, #1
    c55a:	7041      	strb	r1, [r0, #1]
    c55c:	7840      	ldrb	r0, [r0, #1]
    c55e:	2801      	cmp	r0, #1
    c560:	d101      	bne.n	c566 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c562:	f004 fba4 	bl	10cae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c566:	2c00      	cmp	r4, #0
    c568:	d100      	bne.n	c56c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c56a:	b662      	cpsie	i
    c56c:	bd10      	pop	{r4, pc}
    c56e:	0000      	.short	0x0000
    c570:	200002f0 	.word	0x200002f0

0000c574 <mpsl_clock_hfclk_release>:
    c574:	4805      	ldr	r0, [pc, #20]	; (c58c <mpsl_clock_hfclk_release+0x18>)
    c576:	b510      	push	{r4, lr}
    c578:	78c1      	ldrb	r1, [r0, #3]
    c57a:	b121      	cbz	r1, c586 <mpsl_clock_hfclk_release+0x12>
    c57c:	2100      	movs	r1, #0
    c57e:	7101      	strb	r1, [r0, #4]
    c580:	70c1      	strb	r1, [r0, #3]
    c582:	f7ff ffc7 	bl	c514 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c586:	2000      	movs	r0, #0
    c588:	bd10      	pop	{r4, pc}
    c58a:	0000      	.short	0x0000
    c58c:	200002f0 	.word	0x200002f0

0000c590 <mpsl_clock_hfclk_request>:
    c590:	b570      	push	{r4, r5, r6, lr}
    c592:	4c0c      	ldr	r4, [pc, #48]	; (c5c4 <mpsl_clock_hfclk_request+0x34>)
    c594:	78e1      	ldrb	r1, [r4, #3]
    c596:	b961      	cbnz	r1, c5b2 <mpsl_clock_hfclk_request+0x22>
    c598:	2501      	movs	r5, #1
    c59a:	70e5      	strb	r5, [r4, #3]
    c59c:	61e0      	str	r0, [r4, #28]
    c59e:	f7ff ffd5 	bl	c54c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c5a2:	f000 f8d9 	bl	c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c5a6:	b130      	cbz	r0, c5b6 <mpsl_clock_hfclk_request+0x26>
    c5a8:	69e0      	ldr	r0, [r4, #28]
    c5aa:	b110      	cbz	r0, c5b2 <mpsl_clock_hfclk_request+0x22>
    c5ac:	4780      	blx	r0
    c5ae:	2000      	movs	r0, #0
    c5b0:	61e0      	str	r0, [r4, #28]
    c5b2:	2000      	movs	r0, #0
    c5b4:	bd70      	pop	{r4, r5, r6, pc}
    c5b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5ba:	7125      	strb	r5, [r4, #4]
    c5bc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c5c0:	e7f7      	b.n	c5b2 <mpsl_clock_hfclk_request+0x22>
    c5c2:	0000      	.short	0x0000
    c5c4:	200002f0 	.word	0x200002f0

0000c5c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5cc:	0005      	movs	r5, r0
    c5ce:	f06f 0015 	mvn.w	r0, #21
    c5d2:	d03f      	beq.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5d4:	7829      	ldrb	r1, [r5, #0]
    c5d6:	2904      	cmp	r1, #4
    c5d8:	d83c      	bhi.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5da:	2900      	cmp	r1, #0
    c5dc:	7869      	ldrb	r1, [r5, #1]
    c5de:	d03b      	beq.n	c658 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c5e0:	2900      	cmp	r1, #0
    c5e2:	d137      	bne.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5e4:	78a9      	ldrb	r1, [r5, #2]
    c5e6:	2900      	cmp	r1, #0
    c5e8:	d134      	bne.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c5ea:	2000      	movs	r0, #0
    c5ec:	f004 fb32 	bl	10c54 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c5f0:	2000      	movs	r0, #0
    c5f2:	f004 fb22 	bl	10c3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c5f6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c5fa:	f04f 31ff 	mov.w	r1, #4294967295
    c5fe:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c602:	2600      	movs	r6, #0
    c604:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c608:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c60c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c610:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c614:	4c14      	ldr	r4, [pc, #80]	; (c668 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c616:	7066      	strb	r6, [r4, #1]
    c618:	88a8      	ldrh	r0, [r5, #4]
    c61a:	81a0      	strh	r0, [r4, #12]
    c61c:	f004 fb3e 	bl	10c9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c620:	2701      	movs	r7, #1
    c622:	b108      	cbz	r0, c628 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c624:	70e7      	strb	r7, [r4, #3]
    c626:	7067      	strb	r7, [r4, #1]
    c628:	2101      	movs	r1, #1
    c62a:	4640      	mov	r0, r8
    c62c:	f004 fb28 	bl	10c80 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c630:	b108      	cbz	r0, c636 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c632:	f000 f88b 	bl	c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c636:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c63a:	81e0      	strh	r0, [r4, #14]
    c63c:	4628      	mov	r0, r5
    c63e:	f7ff fe8d 	bl	c35c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c642:	7267      	strb	r7, [r4, #9]
    c644:	2000      	movs	r0, #0
    c646:	f004 faf8 	bl	10c3a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c64a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c64e:	4630      	mov	r0, r6
    c650:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c658:	2900      	cmp	r1, #0
    c65a:	d0fb      	beq.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c65c:	2920      	cmp	r1, #32
    c65e:	d8f9      	bhi.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c660:	78a9      	ldrb	r1, [r5, #2]
    c662:	2921      	cmp	r1, #33	; 0x21
    c664:	d9c1      	bls.n	c5ea <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c666:	e7f5      	b.n	c654 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c668:	200002f0 	.word	0x200002f0

0000c66c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c66c:	4801      	ldr	r0, [pc, #4]	; (c674 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c66e:	8980      	ldrh	r0, [r0, #12]
    c670:	4770      	bx	lr
    c672:	0000      	.short	0x0000
    c674:	200002f0 	.word	0x200002f0

0000c678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c678:	4802      	ldr	r0, [pc, #8]	; (c684 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c67a:	7a80      	ldrb	r0, [r0, #10]
    c67c:	2800      	cmp	r0, #0
    c67e:	d000      	beq.n	c682 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c680:	2001      	movs	r0, #1
    c682:	4770      	bx	lr
    c684:	200002f0 	.word	0x200002f0

0000c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c68a:	4d1f      	ldr	r5, [pc, #124]	; (c708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c68c:	7ae8      	ldrb	r0, [r5, #11]
    c68e:	2800      	cmp	r0, #0
    c690:	d10f      	bne.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c692:	7e28      	ldrb	r0, [r5, #24]
    c694:	f000 0003 	and.w	r0, r0, #3
    c698:	f004 fb0e 	bl	10cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c69c:	2800      	cmp	r0, #0
    c69e:	d008      	beq.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c6a0:	f3ef 8110 	mrs	r1, PRIMASK
    c6a4:	b672      	cpsid	i
    c6a6:	f7ff ffe7 	bl	c678 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c6aa:	b118      	cbz	r0, c6b4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c6ac:	2900      	cmp	r1, #0
    c6ae:	d100      	bne.n	c6b2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c6b0:	b662      	cpsie	i
    c6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6b4:	2601      	movs	r6, #1
    c6b6:	72ae      	strb	r6, [r5, #10]
    c6b8:	b901      	cbnz	r1, c6bc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c6ba:	b662      	cpsie	i
    c6bc:	2018      	movs	r0, #24
    c6be:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c6c2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c6c6:	61a6      	str	r6, [r4, #24]
    c6c8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c6cc:	f8ad 0000 	strh.w	r0, [sp]
    c6d0:	f8bd 0000 	ldrh.w	r0, [sp]
    c6d4:	1e41      	subs	r1, r0, #1
    c6d6:	f8ad 1000 	strh.w	r1, [sp]
    c6da:	d2f9      	bcs.n	c6d0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c6dc:	2700      	movs	r7, #0
    c6de:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c6e2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c6e6:	4808      	ldr	r0, [pc, #32]	; (c708 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c6e8:	3008      	adds	r0, #8
    c6ea:	f004 fb4b 	bl	10d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c6ee:	702f      	strb	r7, [r5, #0]
    c6f0:	f7ff fd8e 	bl	c210 <MPSL_IRQ_CLOCK_Handler+0x88>
    c6f4:	6166      	str	r6, [r4, #20]
    c6f6:	7968      	ldrb	r0, [r5, #5]
    c6f8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c6fc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c700:	2018      	movs	r0, #24
    c702:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c708:	200002f0 	.word	0x200002f0

0000c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c70c:	4602      	mov	r2, r0
    c70e:	b510      	push	{r4, lr}
    c710:	2000      	movs	r0, #0
    c712:	2900      	cmp	r1, #0
    c714:	d00a      	beq.n	c72c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c716:	2a00      	cmp	r2, #0
    c718:	d008      	beq.n	c72c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c71a:	fba2 0101 	umull	r0, r1, r2, r1
    c71e:	1e40      	subs	r0, r0, #1
    c720:	4a03      	ldr	r2, [pc, #12]	; (c730 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c722:	f141 31ff 	adc.w	r1, r1, #4294967295
    c726:	f004 fbb5 	bl	10e94 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c72a:	1c40      	adds	r0, r0, #1
    c72c:	bd10      	pop	{r4, pc}
    c72e:	0000      	.short	0x0000
    c730:	000f4240 	.word	0x000f4240

0000c734 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c734:	b510      	push	{r4, lr}
    c736:	4c04      	ldr	r4, [pc, #16]	; (c748 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c738:	7e20      	ldrb	r0, [r4, #24]
    c73a:	f000 0003 	and.w	r0, r0, #3
    c73e:	f004 fabb 	bl	10cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c742:	2800      	cmp	r0, #0
    c744:	d0f8      	beq.n	c738 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c746:	bd10      	pop	{r4, pc}
    c748:	200002f0 	.word	0x200002f0

0000c74c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c74c:	4901      	ldr	r1, [pc, #4]	; (c754 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c74e:	2001      	movs	r0, #1
    c750:	7008      	strb	r0, [r1, #0]
    c752:	4770      	bx	lr
    c754:	2000036f 	.word	0x2000036f

0000c758 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c758:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c75c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c760:	b918      	cbnz	r0, c76a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c762:	4803      	ldr	r0, [pc, #12]	; (c770 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c764:	7800      	ldrb	r0, [r0, #0]
    c766:	2800      	cmp	r0, #0
    c768:	d000      	beq.n	c76c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c76a:	2001      	movs	r0, #1
    c76c:	4770      	bx	lr
    c76e:	0000      	.short	0x0000
    c770:	2000036f 	.word	0x2000036f

0000c774 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c774:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c778:	2101      	movs	r1, #1
    c77a:	6041      	str	r1, [r0, #4]
    c77c:	2100      	movs	r1, #0
    c77e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c782:	4801      	ldr	r0, [pc, #4]	; (c788 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c784:	7001      	strb	r1, [r0, #0]
    c786:	4770      	bx	lr
    c788:	2000036f 	.word	0x2000036f

0000c78c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c78c:	4802      	ldr	r0, [pc, #8]	; (c798 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c78e:	6800      	ldr	r0, [r0, #0]
    c790:	f000 0003 	and.w	r0, r0, #3
    c794:	4770      	bx	lr
    c796:	0000      	.short	0x0000
    c798:	4000041c 	.word	0x4000041c
    c79c:	b510      	push	{r4, lr}
    c79e:	b131      	cbz	r1, c7ae <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c7a0:	2901      	cmp	r1, #1
    c7a2:	d007      	beq.n	c7b4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c7a4:	f240 3102 	movw	r1, #770	; 0x302
    c7a8:	a005      	add	r0, pc, #20	; (adr r0, c7c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c7aa:	f000 f821 	bl	c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c7ae:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c7b2:	e001      	b.n	c7b8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c7b4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c7b8:	f000 0001 	and.w	r0, r0, #1
    c7bc:	bd10      	pop	{r4, pc}
    c7be:	0000      	.short	0x0000
    c7c0:	5f66726e 	.word	0x5f66726e
    c7c4:	636f6c63 	.word	0x636f6c63
    c7c8:	00682e6b 	.word	0x00682e6b
    c7cc:	f3bf 8f4f 	dsb	sy
    c7d0:	4805      	ldr	r0, [pc, #20]	; (c7e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c7d2:	6801      	ldr	r1, [r0, #0]
    c7d4:	4a05      	ldr	r2, [pc, #20]	; (c7ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c7d6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c7da:	4311      	orrs	r1, r2
    c7dc:	6001      	str	r1, [r0, #0]
    c7de:	f3bf 8f4f 	dsb	sy
    c7e2:	bf00      	nop
    c7e4:	e7fd      	b.n	c7e2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c7e6:	0000      	.short	0x0000
    c7e8:	e000ed0c 	.word	0xe000ed0c
    c7ec:	05fa0004 	.word	0x05fa0004

0000c7f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c7f0:	b672      	cpsid	i
    c7f2:	4a03      	ldr	r2, [pc, #12]	; (c800 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c7f4:	6852      	ldr	r2, [r2, #4]
    c7f6:	b102      	cbz	r2, c7fa <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c7f8:	4790      	blx	r2
    c7fa:	f7ff ffe7 	bl	c7cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c7fe:	0000      	.short	0x0000
    c800:	20000310 	.word	0x20000310
    c804:	4806      	ldr	r0, [pc, #24]	; (c820 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c806:	b510      	push	{r4, lr}
    c808:	2100      	movs	r1, #0
    c80a:	6001      	str	r1, [r0, #0]
    c80c:	2101      	movs	r1, #1
    c80e:	6001      	str	r1, [r0, #0]
    c810:	4608      	mov	r0, r1
    c812:	f004 fa78 	bl	10d06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c81a:	2001      	movs	r0, #1
    c81c:	f004 ba66 	b.w	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c820:	40001ffc 	.word	0x40001ffc
    c824:	4807      	ldr	r0, [pc, #28]	; (c844 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c826:	b510      	push	{r4, lr}
    c828:	2101      	movs	r1, #1
    c82a:	6041      	str	r1, [r0, #4]
    c82c:	1e89      	subs	r1, r1, #2
    c82e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c832:	200c      	movs	r0, #12
    c834:	f004 fa67 	bl	10d06 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c83c:	200c      	movs	r0, #12
    c83e:	f004 ba55 	b.w	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c842:	0000      	.short	0x0000
    c844:	4000c000 	.word	0x4000c000

0000c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c848:	b50e      	push	{r1, r2, r3, lr}
    c84a:	b672      	cpsid	i
    c84c:	4a0f      	ldr	r2, [pc, #60]	; (c88c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c84e:	6855      	ldr	r5, [r2, #4]
    c850:	b1d5      	cbz	r5, c888 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c852:	2200      	movs	r2, #0
    c854:	4603      	mov	r3, r0
    c856:	466e      	mov	r6, sp
    c858:	240a      	movs	r4, #10
    c85a:	e003      	b.n	c864 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c85c:	fbb0 f0f4 	udiv	r0, r0, r4
    c860:	1c52      	adds	r2, r2, #1
    c862:	b2d2      	uxtb	r2, r2
    c864:	2800      	cmp	r0, #0
    c866:	d1f9      	bne.n	c85c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c868:	54b0      	strb	r0, [r6, r2]
    c86a:	e009      	b.n	c880 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c86c:	fbb3 f0f4 	udiv	r0, r3, r4
    c870:	fb04 3010 	mls	r0, r4, r0, r3
    c874:	fbb3 f3f4 	udiv	r3, r3, r4
    c878:	1e52      	subs	r2, r2, #1
    c87a:	b2d2      	uxtb	r2, r2
    c87c:	3030      	adds	r0, #48	; 0x30
    c87e:	54b0      	strb	r0, [r6, r2]
    c880:	2a00      	cmp	r2, #0
    c882:	d1f3      	bne.n	c86c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c884:	4630      	mov	r0, r6
    c886:	47a8      	blx	r5
    c888:	f7ff ffa0 	bl	c7cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c88c:	20000310 	.word	0x20000310

0000c890 <mpsl_init>:
    c890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c894:	4c18      	ldr	r4, [pc, #96]	; (c8f8 <mpsl_init+0x68>)
    c896:	4606      	mov	r6, r0
    c898:	4617      	mov	r7, r2
    c89a:	7860      	ldrb	r0, [r4, #1]
    c89c:	460d      	mov	r5, r1
    c89e:	b118      	cbz	r0, c8a8 <mpsl_init+0x18>
    c8a0:	f04f 30ff 	mov.w	r0, #4294967295
    c8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8a8:	f7fc fa48 	bl	8d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c8ac:	b906      	cbnz	r6, c8b0 <mpsl_init+0x20>
    c8ae:	4e13      	ldr	r6, [pc, #76]	; (c8fc <mpsl_init+0x6c>)
    c8b0:	6067      	str	r7, [r4, #4]
    c8b2:	7025      	strb	r5, [r4, #0]
    c8b4:	f7ff ffa6 	bl	c804 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c8b8:	f7ff ffb4 	bl	c824 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c8bc:	4630      	mov	r0, r6
    c8be:	f7ff fe83 	bl	c5c8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c8c2:	0006      	movs	r6, r0
    c8c4:	d1ee      	bne.n	c8a4 <mpsl_init+0x14>
    c8c6:	f7fe fe7d 	bl	b5c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c8ca:	f7ff fedd 	bl	c688 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c8ce:	f004 f90a 	bl	10ae6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c8d2:	4628      	mov	r0, r5
    c8d4:	f004 fa0a 	bl	10cec <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c8d8:	2001      	movs	r0, #1
    c8da:	2d00      	cmp	r5, #0
    c8dc:	db09      	blt.n	c8f2 <mpsl_init+0x62>
    c8de:	f005 011f 	and.w	r1, r5, #31
    c8e2:	fa00 f101 	lsl.w	r1, r0, r1
    c8e6:	096a      	lsrs	r2, r5, #5
    c8e8:	0092      	lsls	r2, r2, #2
    c8ea:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c8ee:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c8f2:	7060      	strb	r0, [r4, #1]
    c8f4:	4630      	mov	r0, r6
    c8f6:	e7d5      	b.n	c8a4 <mpsl_init+0x14>
    c8f8:	20000310 	.word	0x20000310
    c8fc:	00010d28 	.word	0x00010d28

0000c900 <mpsl_is_initialized>:
    c900:	4801      	ldr	r0, [pc, #4]	; (c908 <mpsl_is_initialized+0x8>)
    c902:	7840      	ldrb	r0, [r0, #1]
    c904:	4770      	bx	lr
    c906:	0000      	.short	0x0000
    c908:	20000310 	.word	0x20000310

0000c90c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c90c:	4807      	ldr	r0, [pc, #28]	; (c92c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c90e:	f990 0000 	ldrsb.w	r0, [r0]
    c912:	2800      	cmp	r0, #0
    c914:	db09      	blt.n	c92a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c916:	f000 021f 	and.w	r2, r0, #31
    c91a:	2101      	movs	r1, #1
    c91c:	4091      	lsls	r1, r2
    c91e:	0940      	lsrs	r0, r0, #5
    c920:	0080      	lsls	r0, r0, #2
    c922:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c926:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c92a:	4770      	bx	lr
    c92c:	20000310 	.word	0x20000310

0000c930 <mpsl_temperature_get>:
    c930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c934:	2601      	movs	r6, #1
    c936:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c93a:	0331      	lsls	r1, r6, #12
    c93c:	f04f 0800 	mov.w	r8, #0
    c940:	4640      	mov	r0, r8
    c942:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c946:	f3bf 8f4f 	dsb	sy
    c94a:	f3bf 8f6f 	isb	sy
    c94e:	4c16      	ldr	r4, [pc, #88]	; (c9a8 <mpsl_temperature_get+0x78>)
    c950:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c954:	200c      	movs	r0, #12
    c956:	f004 f9f5 	bl	10d44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c95a:	4d14      	ldr	r5, [pc, #80]	; (c9ac <mpsl_temperature_get+0x7c>)
    c95c:	6828      	ldr	r0, [r5, #0]
    c95e:	43c0      	mvns	r0, r0
    c960:	f340 1700 	sbfx	r7, r0, #4, #1
    c964:	6828      	ldr	r0, [r5, #0]
    c966:	f040 0010 	orr.w	r0, r0, #16
    c96a:	6028      	str	r0, [r5, #0]
    c96c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c970:	6026      	str	r6, [r4, #0]
    c972:	1c7f      	adds	r7, r7, #1
    c974:	e002      	b.n	c97c <mpsl_temperature_get+0x4c>
    c976:	bf00      	nop
    c978:	f004 fa88 	bl	10e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c97c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c980:	2800      	cmp	r0, #0
    c982:	d0f9      	beq.n	c978 <mpsl_temperature_get+0x48>
    c984:	b91f      	cbnz	r7, c98e <mpsl_temperature_get+0x5e>
    c986:	6828      	ldr	r0, [r5, #0]
    c988:	f020 0010 	bic.w	r0, r0, #16
    c98c:	6028      	str	r0, [r5, #0]
    c98e:	4808      	ldr	r0, [pc, #32]	; (c9b0 <mpsl_temperature_get+0x80>)
    c990:	6805      	ldr	r5, [r0, #0]
    c992:	6066      	str	r6, [r4, #4]
    c994:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c998:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c99c:	200c      	movs	r0, #12
    c99e:	f004 f9d1 	bl	10d44 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c9a2:	4628      	mov	r0, r5
    c9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9a8:	4000c000 	.word	0x4000c000
    c9ac:	e000ed10 	.word	0xe000ed10
    c9b0:	4000c508 	.word	0x4000c508

0000c9b4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c9b4:	b510      	push	{r4, lr}
    c9b6:	4602      	mov	r2, r0
    c9b8:	2005      	movs	r0, #5
    c9ba:	490c      	ldr	r1, [pc, #48]	; (c9ec <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c9bc:	e004      	b.n	c9c8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c9be:	bf00      	nop
    c9c0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c9c4:	791b      	ldrb	r3, [r3, #4]
    c9c6:	b133      	cbz	r3, c9d6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c9c8:	1e40      	subs	r0, r0, #1
    c9ca:	b2c0      	uxtb	r0, r0
    c9cc:	d2f8      	bcs.n	c9c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c9ce:	2148      	movs	r1, #72	; 0x48
    c9d0:	2069      	movs	r0, #105	; 0x69
    c9d2:	f7ff ff39 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c9d6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c9da:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c9de:	2200      	movs	r2, #0
    c9e0:	714a      	strb	r2, [r1, #5]
    c9e2:	718a      	strb	r2, [r1, #6]
    c9e4:	2201      	movs	r2, #1
    c9e6:	710a      	strb	r2, [r1, #4]
    c9e8:	bd10      	pop	{r4, pc}
    c9ea:	0000      	.short	0x0000
    c9ec:	200013cc 	.word	0x200013cc

0000c9f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c9f0:	b510      	push	{r4, lr}
    c9f2:	2805      	cmp	r0, #5
    c9f4:	d301      	bcc.n	c9fa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c9f6:	2158      	movs	r1, #88	; 0x58
    c9f8:	e006      	b.n	ca08 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c9fa:	490a      	ldr	r1, [pc, #40]	; (ca24 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c9fc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    ca00:	7901      	ldrb	r1, [r0, #4]
    ca02:	2901      	cmp	r1, #1
    ca04:	d003      	beq.n	ca0e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    ca06:	2159      	movs	r1, #89	; 0x59
    ca08:	2069      	movs	r0, #105	; 0x69
    ca0a:	f7ff ff1d 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca0e:	7941      	ldrb	r1, [r0, #5]
    ca10:	7982      	ldrb	r2, [r0, #6]
    ca12:	1c49      	adds	r1, r1, #1
    ca14:	b2c9      	uxtb	r1, r1
    ca16:	428a      	cmp	r2, r1
    ca18:	d000      	beq.n	ca1c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    ca1a:	7141      	strb	r1, [r0, #5]
    ca1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca20:	f7ff bf74 	b.w	c90c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    ca24:	200013cc 	.word	0x200013cc

0000ca28 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    ca28:	b510      	push	{r4, lr}
    ca2a:	2805      	cmp	r0, #5
    ca2c:	d303      	bcc.n	ca36 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    ca2e:	214f      	movs	r1, #79	; 0x4f
    ca30:	2069      	movs	r0, #105	; 0x69
    ca32:	f7ff ff09 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ca36:	4a03      	ldr	r2, [pc, #12]	; (ca44 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    ca38:	2100      	movs	r1, #0
    ca3a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    ca3e:	7101      	strb	r1, [r0, #4]
    ca40:	bd10      	pop	{r4, pc}
    ca42:	0000      	.short	0x0000
    ca44:	200013cc 	.word	0x200013cc

0000ca48 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    ca48:	b570      	push	{r4, r5, r6, lr}
    ca4a:	2505      	movs	r5, #5
    ca4c:	4e0e      	ldr	r6, [pc, #56]	; (ca88 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    ca4e:	4c0f      	ldr	r4, [pc, #60]	; (ca8c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    ca50:	e016      	b.n	ca80 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    ca52:	7821      	ldrb	r1, [r4, #0]
    ca54:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    ca58:	7902      	ldrb	r2, [r0, #4]
    ca5a:	2a01      	cmp	r2, #1
    ca5c:	d108      	bne.n	ca70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    ca5e:	7942      	ldrb	r2, [r0, #5]
    ca60:	7983      	ldrb	r3, [r0, #6]
    ca62:	429a      	cmp	r2, r3
    ca64:	d004      	beq.n	ca70 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    ca66:	7942      	ldrb	r2, [r0, #5]
    ca68:	7182      	strb	r2, [r0, #6]
    ca6a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    ca6e:	4780      	blx	r0
    ca70:	7820      	ldrb	r0, [r4, #0]
    ca72:	1c40      	adds	r0, r0, #1
    ca74:	b2c0      	uxtb	r0, r0
    ca76:	7020      	strb	r0, [r4, #0]
    ca78:	2805      	cmp	r0, #5
    ca7a:	d301      	bcc.n	ca80 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    ca7c:	2000      	movs	r0, #0
    ca7e:	7020      	strb	r0, [r4, #0]
    ca80:	1e6d      	subs	r5, r5, #1
    ca82:	b2ed      	uxtb	r5, r5
    ca84:	d2e5      	bcs.n	ca52 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    ca86:	bd70      	pop	{r4, r5, r6, pc}
    ca88:	200013cc 	.word	0x200013cc
    ca8c:	20000370 	.word	0x20000370

0000ca90 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    ca90:	b500      	push	{lr}
    ca92:	f004 f986 	bl	10da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    ca96:	b940      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    ca98:	f004 f98d 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ca9c:	b928      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    ca9e:	f004 f9a1 	bl	10de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    caa2:	b910      	cbnz	r0, caaa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    caa4:	f004 f9b2 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    caa8:	b108      	cbz	r0, caae <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    caaa:	4802      	ldr	r0, [pc, #8]	; (cab4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    caac:	bd00      	pop	{pc}
    caae:	4802      	ldr	r0, [pc, #8]	; (cab8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    cab0:	bd00      	pop	{pc}
    cab2:	0000      	.short	0x0000
    cab4:	4000050c 	.word	0x4000050c
    cab8:	4001e700 	.word	0x4001e700
    cabc:	b510      	push	{r4, lr}
    cabe:	f004 f9a5 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    cac2:	b330      	cbz	r0, cb12 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    cac4:	f3ef 8010 	mrs	r0, PRIMASK
    cac8:	b1c8      	cbz	r0, cafe <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    caca:	2100      	movs	r1, #0
    cacc:	b672      	cpsid	i
    cace:	4812      	ldr	r0, [pc, #72]	; (cb18 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    cad0:	6802      	ldr	r2, [r0, #0]
    cad2:	6803      	ldr	r3, [r0, #0]
    cad4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    cad8:	f043 0310 	orr.w	r3, r3, #16
    cadc:	6003      	str	r3, [r0, #0]
    cade:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    cae2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    cae6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    caea:	431c      	orrs	r4, r3
    caec:	d000      	beq.n	caf0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    caee:	bf40      	sev
    caf0:	bf20      	wfe
    caf2:	bf00      	nop
    caf4:	bf00      	nop
    caf6:	bf00      	nop
    caf8:	bf00      	nop
    cafa:	b112      	cbz	r2, cb02 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    cafc:	e005      	b.n	cb0a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    cafe:	2101      	movs	r1, #1
    cb00:	e7e4      	b.n	cacc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    cb02:	6802      	ldr	r2, [r0, #0]
    cb04:	f022 0210 	bic.w	r2, r2, #16
    cb08:	6002      	str	r2, [r0, #0]
    cb0a:	2900      	cmp	r1, #0
    cb0c:	d000      	beq.n	cb10 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    cb0e:	b662      	cpsie	i
    cb10:	bd10      	pop	{r4, pc}
    cb12:	bf20      	wfe
    cb14:	bd10      	pop	{r4, pc}
    cb16:	0000      	.short	0x0000
    cb18:	e000ed10 	.word	0xe000ed10

0000cb1c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    cb1c:	4901      	ldr	r1, [pc, #4]	; (cb24 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    cb1e:	2001      	movs	r0, #1
    cb20:	7088      	strb	r0, [r1, #2]
    cb22:	4770      	bx	lr
    cb24:	20000318 	.word	0x20000318

0000cb28 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    cb28:	00011113 0001114b 00011135 00011123     ....K...5...#...
    cb38:	0001112f 0001111d 00011111 0001110f     /...............
    cb48:	00011147 0001113b 00011129 00011117     G...;...).......
    cb58:	00011109 00011101 00011105 000110fb     ................

0000cb68 <mpsl_fem_disable>:
    cb68:	4801      	ldr	r0, [pc, #4]	; (cb70 <mpsl_fem_disable+0x8>)
    cb6a:	6800      	ldr	r0, [r0, #0]
    cb6c:	6800      	ldr	r0, [r0, #0]
    cb6e:	4700      	bx	r0
    cb70:	2000032c 	.word	0x2000032c

0000cb74 <mpsl_fem_lna_configuration_clear>:
    cb74:	4801      	ldr	r0, [pc, #4]	; (cb7c <mpsl_fem_lna_configuration_clear+0x8>)
    cb76:	6800      	ldr	r0, [r0, #0]
    cb78:	6940      	ldr	r0, [r0, #20]
    cb7a:	4700      	bx	r0
    cb7c:	2000032c 	.word	0x2000032c

0000cb80 <mpsl_fem_lna_configuration_set>:
    cb80:	4a01      	ldr	r2, [pc, #4]	; (cb88 <mpsl_fem_lna_configuration_set+0x8>)
    cb82:	6812      	ldr	r2, [r2, #0]
    cb84:	68d2      	ldr	r2, [r2, #12]
    cb86:	4710      	bx	r2
    cb88:	2000032c 	.word	0x2000032c

0000cb8c <mpsl_fem_lna_is_configured>:
    cb8c:	4901      	ldr	r1, [pc, #4]	; (cb94 <mpsl_fem_lna_is_configured+0x8>)
    cb8e:	6809      	ldr	r1, [r1, #0]
    cb90:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    cb92:	4708      	bx	r1
    cb94:	2000032c 	.word	0x2000032c

0000cb98 <mpsl_fem_pa_configuration_clear>:
    cb98:	4801      	ldr	r0, [pc, #4]	; (cba0 <mpsl_fem_pa_configuration_clear+0x8>)
    cb9a:	6800      	ldr	r0, [r0, #0]
    cb9c:	6900      	ldr	r0, [r0, #16]
    cb9e:	4700      	bx	r0
    cba0:	2000032c 	.word	0x2000032c

0000cba4 <mpsl_fem_pa_configuration_set>:
    cba4:	4a01      	ldr	r2, [pc, #4]	; (cbac <mpsl_fem_pa_configuration_set+0x8>)
    cba6:	6812      	ldr	r2, [r2, #0]
    cba8:	6892      	ldr	r2, [r2, #8]
    cbaa:	4710      	bx	r2
    cbac:	2000032c 	.word	0x2000032c

0000cbb0 <mpsl_fem_pa_gain_set>:
    cbb0:	4901      	ldr	r1, [pc, #4]	; (cbb8 <mpsl_fem_pa_gain_set+0x8>)
    cbb2:	6809      	ldr	r1, [r1, #0]
    cbb4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    cbb6:	4708      	bx	r1
    cbb8:	2000032c 	.word	0x2000032c

0000cbbc <mpsl_fem_pa_is_configured>:
    cbbc:	4901      	ldr	r1, [pc, #4]	; (cbc4 <mpsl_fem_pa_is_configured+0x8>)
    cbbe:	6809      	ldr	r1, [r1, #0]
    cbc0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    cbc2:	4708      	bx	r1
    cbc4:	2000032c 	.word	0x2000032c

0000cbc8 <mpsl_fem_tx_power_split>:
    cbc8:	b430      	push	{r4, r5}
    cbca:	4c03      	ldr	r4, [pc, #12]	; (cbd8 <mpsl_fem_tx_power_split+0x10>)
    cbcc:	6824      	ldr	r4, [r4, #0]
    cbce:	6864      	ldr	r4, [r4, #4]
    cbd0:	46a4      	mov	ip, r4
    cbd2:	bc30      	pop	{r4, r5}
    cbd4:	4760      	bx	ip
    cbd6:	0000      	.short	0x0000
    cbd8:	2000032c 	.word	0x2000032c

0000cbdc <mpsl_fem_device_config_254_apply_get>:
    cbdc:	4801      	ldr	r0, [pc, #4]	; (cbe4 <mpsl_fem_device_config_254_apply_get+0x8>)
    cbde:	7800      	ldrb	r0, [r0, #0]
    cbe0:	4770      	bx	lr
    cbe2:	0000      	.short	0x0000
    cbe4:	20000371 	.word	0x20000371

0000cbe8 <__udivmoddi4>:
    cbe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbec:	4686      	mov	lr, r0
    cbee:	468c      	mov	ip, r1
    cbf0:	4608      	mov	r0, r1
    cbf2:	9e08      	ldr	r6, [sp, #32]
    cbf4:	4615      	mov	r5, r2
    cbf6:	4674      	mov	r4, lr
    cbf8:	4619      	mov	r1, r3
    cbfa:	2b00      	cmp	r3, #0
    cbfc:	f040 80c2 	bne.w	cd84 <__udivmoddi4+0x19c>
    cc00:	4285      	cmp	r5, r0
    cc02:	fab2 f282 	clz	r2, r2
    cc06:	d945      	bls.n	cc94 <__udivmoddi4+0xac>
    cc08:	b14a      	cbz	r2, cc1e <__udivmoddi4+0x36>
    cc0a:	f1c2 0320 	rsb	r3, r2, #32
    cc0e:	fa00 fc02 	lsl.w	ip, r0, r2
    cc12:	fa2e f303 	lsr.w	r3, lr, r3
    cc16:	4095      	lsls	r5, r2
    cc18:	ea43 0c0c 	orr.w	ip, r3, ip
    cc1c:	4094      	lsls	r4, r2
    cc1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc22:	b2a8      	uxth	r0, r5
    cc24:	fbbc f8fe 	udiv	r8, ip, lr
    cc28:	0c23      	lsrs	r3, r4, #16
    cc2a:	fb0e cc18 	mls	ip, lr, r8, ip
    cc2e:	fb08 f900 	mul.w	r9, r8, r0
    cc32:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    cc36:	4599      	cmp	r9, r3
    cc38:	d928      	bls.n	cc8c <__udivmoddi4+0xa4>
    cc3a:	18eb      	adds	r3, r5, r3
    cc3c:	f108 37ff 	add.w	r7, r8, #4294967295
    cc40:	d204      	bcs.n	cc4c <__udivmoddi4+0x64>
    cc42:	4599      	cmp	r9, r3
    cc44:	d902      	bls.n	cc4c <__udivmoddi4+0x64>
    cc46:	f1a8 0702 	sub.w	r7, r8, #2
    cc4a:	442b      	add	r3, r5
    cc4c:	eba3 0309 	sub.w	r3, r3, r9
    cc50:	b2a4      	uxth	r4, r4
    cc52:	fbb3 fcfe 	udiv	ip, r3, lr
    cc56:	fb0e 331c 	mls	r3, lr, ip, r3
    cc5a:	fb0c f000 	mul.w	r0, ip, r0
    cc5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cc62:	42a0      	cmp	r0, r4
    cc64:	d914      	bls.n	cc90 <__udivmoddi4+0xa8>
    cc66:	192c      	adds	r4, r5, r4
    cc68:	f10c 33ff 	add.w	r3, ip, #4294967295
    cc6c:	d204      	bcs.n	cc78 <__udivmoddi4+0x90>
    cc6e:	42a0      	cmp	r0, r4
    cc70:	d902      	bls.n	cc78 <__udivmoddi4+0x90>
    cc72:	f1ac 0302 	sub.w	r3, ip, #2
    cc76:	442c      	add	r4, r5
    cc78:	1a24      	subs	r4, r4, r0
    cc7a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    cc7e:	b11e      	cbz	r6, cc88 <__udivmoddi4+0xa0>
    cc80:	40d4      	lsrs	r4, r2
    cc82:	2300      	movs	r3, #0
    cc84:	6034      	str	r4, [r6, #0]
    cc86:	6073      	str	r3, [r6, #4]
    cc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cc8c:	4647      	mov	r7, r8
    cc8e:	e7dd      	b.n	cc4c <__udivmoddi4+0x64>
    cc90:	4663      	mov	r3, ip
    cc92:	e7f1      	b.n	cc78 <__udivmoddi4+0x90>
    cc94:	bb92      	cbnz	r2, ccfc <__udivmoddi4+0x114>
    cc96:	1b43      	subs	r3, r0, r5
    cc98:	2101      	movs	r1, #1
    cc9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cc9e:	b2af      	uxth	r7, r5
    cca0:	fbb3 fcfe 	udiv	ip, r3, lr
    cca4:	0c20      	lsrs	r0, r4, #16
    cca6:	fb0e 331c 	mls	r3, lr, ip, r3
    ccaa:	fb0c f807 	mul.w	r8, ip, r7
    ccae:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    ccb2:	4598      	cmp	r8, r3
    ccb4:	d962      	bls.n	cd7c <__udivmoddi4+0x194>
    ccb6:	18eb      	adds	r3, r5, r3
    ccb8:	f10c 30ff 	add.w	r0, ip, #4294967295
    ccbc:	d204      	bcs.n	ccc8 <__udivmoddi4+0xe0>
    ccbe:	4598      	cmp	r8, r3
    ccc0:	d902      	bls.n	ccc8 <__udivmoddi4+0xe0>
    ccc2:	f1ac 0002 	sub.w	r0, ip, #2
    ccc6:	442b      	add	r3, r5
    ccc8:	eba3 0308 	sub.w	r3, r3, r8
    cccc:	b2a4      	uxth	r4, r4
    ccce:	fbb3 fcfe 	udiv	ip, r3, lr
    ccd2:	fb0e 331c 	mls	r3, lr, ip, r3
    ccd6:	fb0c f707 	mul.w	r7, ip, r7
    ccda:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ccde:	42a7      	cmp	r7, r4
    cce0:	d94e      	bls.n	cd80 <__udivmoddi4+0x198>
    cce2:	192c      	adds	r4, r5, r4
    cce4:	f10c 33ff 	add.w	r3, ip, #4294967295
    cce8:	d204      	bcs.n	ccf4 <__udivmoddi4+0x10c>
    ccea:	42a7      	cmp	r7, r4
    ccec:	d902      	bls.n	ccf4 <__udivmoddi4+0x10c>
    ccee:	f1ac 0302 	sub.w	r3, ip, #2
    ccf2:	442c      	add	r4, r5
    ccf4:	1be4      	subs	r4, r4, r7
    ccf6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ccfa:	e7c0      	b.n	cc7e <__udivmoddi4+0x96>
    ccfc:	f1c2 0320 	rsb	r3, r2, #32
    cd00:	fa20 f103 	lsr.w	r1, r0, r3
    cd04:	4095      	lsls	r5, r2
    cd06:	4090      	lsls	r0, r2
    cd08:	fa2e f303 	lsr.w	r3, lr, r3
    cd0c:	4303      	orrs	r3, r0
    cd0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cd12:	b2af      	uxth	r7, r5
    cd14:	fbb1 fcfe 	udiv	ip, r1, lr
    cd18:	fb0e 101c 	mls	r0, lr, ip, r1
    cd1c:	0c19      	lsrs	r1, r3, #16
    cd1e:	fb0c f807 	mul.w	r8, ip, r7
    cd22:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cd26:	4588      	cmp	r8, r1
    cd28:	fa04 f402 	lsl.w	r4, r4, r2
    cd2c:	d922      	bls.n	cd74 <__udivmoddi4+0x18c>
    cd2e:	1869      	adds	r1, r5, r1
    cd30:	f10c 30ff 	add.w	r0, ip, #4294967295
    cd34:	d204      	bcs.n	cd40 <__udivmoddi4+0x158>
    cd36:	4588      	cmp	r8, r1
    cd38:	d902      	bls.n	cd40 <__udivmoddi4+0x158>
    cd3a:	f1ac 0002 	sub.w	r0, ip, #2
    cd3e:	4429      	add	r1, r5
    cd40:	eba1 0108 	sub.w	r1, r1, r8
    cd44:	b29b      	uxth	r3, r3
    cd46:	fbb1 fcfe 	udiv	ip, r1, lr
    cd4a:	fb0e 111c 	mls	r1, lr, ip, r1
    cd4e:	fb0c f707 	mul.w	r7, ip, r7
    cd52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cd56:	429f      	cmp	r7, r3
    cd58:	d90e      	bls.n	cd78 <__udivmoddi4+0x190>
    cd5a:	18eb      	adds	r3, r5, r3
    cd5c:	f10c 31ff 	add.w	r1, ip, #4294967295
    cd60:	d204      	bcs.n	cd6c <__udivmoddi4+0x184>
    cd62:	429f      	cmp	r7, r3
    cd64:	d902      	bls.n	cd6c <__udivmoddi4+0x184>
    cd66:	f1ac 0102 	sub.w	r1, ip, #2
    cd6a:	442b      	add	r3, r5
    cd6c:	1bdb      	subs	r3, r3, r7
    cd6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cd72:	e792      	b.n	cc9a <__udivmoddi4+0xb2>
    cd74:	4660      	mov	r0, ip
    cd76:	e7e3      	b.n	cd40 <__udivmoddi4+0x158>
    cd78:	4661      	mov	r1, ip
    cd7a:	e7f7      	b.n	cd6c <__udivmoddi4+0x184>
    cd7c:	4660      	mov	r0, ip
    cd7e:	e7a3      	b.n	ccc8 <__udivmoddi4+0xe0>
    cd80:	4663      	mov	r3, ip
    cd82:	e7b7      	b.n	ccf4 <__udivmoddi4+0x10c>
    cd84:	4283      	cmp	r3, r0
    cd86:	d906      	bls.n	cd96 <__udivmoddi4+0x1ae>
    cd88:	b916      	cbnz	r6, cd90 <__udivmoddi4+0x1a8>
    cd8a:	2100      	movs	r1, #0
    cd8c:	4608      	mov	r0, r1
    cd8e:	e77b      	b.n	cc88 <__udivmoddi4+0xa0>
    cd90:	e9c6 e000 	strd	lr, r0, [r6]
    cd94:	e7f9      	b.n	cd8a <__udivmoddi4+0x1a2>
    cd96:	fab3 f783 	clz	r7, r3
    cd9a:	b98f      	cbnz	r7, cdc0 <__udivmoddi4+0x1d8>
    cd9c:	4283      	cmp	r3, r0
    cd9e:	d301      	bcc.n	cda4 <__udivmoddi4+0x1bc>
    cda0:	4572      	cmp	r2, lr
    cda2:	d808      	bhi.n	cdb6 <__udivmoddi4+0x1ce>
    cda4:	ebbe 0402 	subs.w	r4, lr, r2
    cda8:	eb60 0303 	sbc.w	r3, r0, r3
    cdac:	2001      	movs	r0, #1
    cdae:	469c      	mov	ip, r3
    cdb0:	b91e      	cbnz	r6, cdba <__udivmoddi4+0x1d2>
    cdb2:	2100      	movs	r1, #0
    cdb4:	e768      	b.n	cc88 <__udivmoddi4+0xa0>
    cdb6:	4638      	mov	r0, r7
    cdb8:	e7fa      	b.n	cdb0 <__udivmoddi4+0x1c8>
    cdba:	e9c6 4c00 	strd	r4, ip, [r6]
    cdbe:	e7f8      	b.n	cdb2 <__udivmoddi4+0x1ca>
    cdc0:	f1c7 0c20 	rsb	ip, r7, #32
    cdc4:	40bb      	lsls	r3, r7
    cdc6:	fa22 f40c 	lsr.w	r4, r2, ip
    cdca:	431c      	orrs	r4, r3
    cdcc:	fa2e f10c 	lsr.w	r1, lr, ip
    cdd0:	fa20 f30c 	lsr.w	r3, r0, ip
    cdd4:	40b8      	lsls	r0, r7
    cdd6:	4301      	orrs	r1, r0
    cdd8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cddc:	fa0e f507 	lsl.w	r5, lr, r7
    cde0:	fbb3 f8f9 	udiv	r8, r3, r9
    cde4:	fa1f fe84 	uxth.w	lr, r4
    cde8:	fb09 3018 	mls	r0, r9, r8, r3
    cdec:	0c0b      	lsrs	r3, r1, #16
    cdee:	fb08 fa0e 	mul.w	sl, r8, lr
    cdf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cdf6:	459a      	cmp	sl, r3
    cdf8:	fa02 f207 	lsl.w	r2, r2, r7
    cdfc:	d940      	bls.n	ce80 <__udivmoddi4+0x298>
    cdfe:	18e3      	adds	r3, r4, r3
    ce00:	f108 30ff 	add.w	r0, r8, #4294967295
    ce04:	d204      	bcs.n	ce10 <__udivmoddi4+0x228>
    ce06:	459a      	cmp	sl, r3
    ce08:	d902      	bls.n	ce10 <__udivmoddi4+0x228>
    ce0a:	f1a8 0002 	sub.w	r0, r8, #2
    ce0e:	4423      	add	r3, r4
    ce10:	eba3 030a 	sub.w	r3, r3, sl
    ce14:	b289      	uxth	r1, r1
    ce16:	fbb3 f8f9 	udiv	r8, r3, r9
    ce1a:	fb09 3318 	mls	r3, r9, r8, r3
    ce1e:	fb08 fe0e 	mul.w	lr, r8, lr
    ce22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    ce26:	458e      	cmp	lr, r1
    ce28:	d92c      	bls.n	ce84 <__udivmoddi4+0x29c>
    ce2a:	1861      	adds	r1, r4, r1
    ce2c:	f108 33ff 	add.w	r3, r8, #4294967295
    ce30:	d204      	bcs.n	ce3c <__udivmoddi4+0x254>
    ce32:	458e      	cmp	lr, r1
    ce34:	d902      	bls.n	ce3c <__udivmoddi4+0x254>
    ce36:	f1a8 0302 	sub.w	r3, r8, #2
    ce3a:	4421      	add	r1, r4
    ce3c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    ce40:	fba0 9802 	umull	r9, r8, r0, r2
    ce44:	eba1 010e 	sub.w	r1, r1, lr
    ce48:	4541      	cmp	r1, r8
    ce4a:	46ce      	mov	lr, r9
    ce4c:	4643      	mov	r3, r8
    ce4e:	d302      	bcc.n	ce56 <__udivmoddi4+0x26e>
    ce50:	d106      	bne.n	ce60 <__udivmoddi4+0x278>
    ce52:	454d      	cmp	r5, r9
    ce54:	d204      	bcs.n	ce60 <__udivmoddi4+0x278>
    ce56:	ebb9 0e02 	subs.w	lr, r9, r2
    ce5a:	eb68 0304 	sbc.w	r3, r8, r4
    ce5e:	3801      	subs	r0, #1
    ce60:	2e00      	cmp	r6, #0
    ce62:	d0a6      	beq.n	cdb2 <__udivmoddi4+0x1ca>
    ce64:	ebb5 020e 	subs.w	r2, r5, lr
    ce68:	eb61 0103 	sbc.w	r1, r1, r3
    ce6c:	fa01 fc0c 	lsl.w	ip, r1, ip
    ce70:	fa22 f307 	lsr.w	r3, r2, r7
    ce74:	ea4c 0303 	orr.w	r3, ip, r3
    ce78:	40f9      	lsrs	r1, r7
    ce7a:	e9c6 3100 	strd	r3, r1, [r6]
    ce7e:	e798      	b.n	cdb2 <__udivmoddi4+0x1ca>
    ce80:	4640      	mov	r0, r8
    ce82:	e7c5      	b.n	ce10 <__udivmoddi4+0x228>
    ce84:	4643      	mov	r3, r8
    ce86:	e7d9      	b.n	ce3c <__udivmoddi4+0x254>

0000ce88 <sdc_soc_ecb_block_encrypt>:
    ce88:	b530      	push	{r4, r5, lr}
    ce8a:	460d      	mov	r5, r1
    ce8c:	b08d      	sub	sp, #52	; 0x34
    ce8e:	4614      	mov	r4, r2
    ce90:	4601      	mov	r1, r0
    ce92:	2210      	movs	r2, #16
    ce94:	4668      	mov	r0, sp
    ce96:	f004 f856 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce9a:	2210      	movs	r2, #16
    ce9c:	4629      	mov	r1, r5
    ce9e:	a804      	add	r0, sp, #16
    cea0:	f004 f851 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cea4:	4668      	mov	r0, sp
    cea6:	f000 ff7f 	bl	dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ceaa:	b118      	cbz	r0, ceb4 <sdc_soc_ecb_block_encrypt+0x2c>
    ceac:	f06f 0015 	mvn.w	r0, #21
    ceb0:	b00d      	add	sp, #52	; 0x34
    ceb2:	bd30      	pop	{r4, r5, pc}
    ceb4:	2210      	movs	r2, #16
    ceb6:	4620      	mov	r0, r4
    ceb8:	a908      	add	r1, sp, #32
    ceba:	f004 f844 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cebe:	2000      	movs	r0, #0
    cec0:	e7f6      	b.n	ceb0 <sdc_soc_ecb_block_encrypt+0x28>

0000cec2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cec2:	b50e      	push	{r1, r2, r3, lr}
    cec4:	4601      	mov	r1, r0
    cec6:	4668      	mov	r0, sp
    cec8:	f000 f804 	bl	ced4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cecc:	4668      	mov	r0, sp
    cece:	f001 fbd0 	bl	e672 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    ced2:	bd0e      	pop	{r1, r2, r3, pc}

0000ced4 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    ced4:	880a      	ldrh	r2, [r1, #0]
    ced6:	f3c2 020b 	ubfx	r2, r2, #0, #12
    ceda:	8082      	strh	r2, [r0, #4]
    cedc:	884a      	ldrh	r2, [r1, #2]
    cede:	80c2      	strh	r2, [r0, #6]
    cee0:	784a      	ldrb	r2, [r1, #1]
    cee2:	0993      	lsrs	r3, r2, #6
    cee4:	2200      	movs	r2, #0
    cee6:	7242      	strb	r2, [r0, #9]
    cee8:	784b      	ldrb	r3, [r1, #1]
    ceea:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ceee:	b11b      	cbz	r3, cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cef0:	2b01      	cmp	r3, #1
    cef2:	d005      	beq.n	cf00 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cef4:	2b02      	cmp	r3, #2
    cef6:	d005      	beq.n	cf04 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cef8:	7202      	strb	r2, [r0, #8]
    cefa:	1d09      	adds	r1, r1, #4
    cefc:	6001      	str	r1, [r0, #0]
    cefe:	4770      	bx	lr
    cf00:	2201      	movs	r2, #1
    cf02:	e7f9      	b.n	cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cf04:	2202      	movs	r2, #2
    cf06:	e7f7      	b.n	cef8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cf08 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cf08:	b510      	push	{r4, lr}
    cf0a:	460c      	mov	r4, r1
    cf0c:	7909      	ldrb	r1, [r1, #4]
    cf0e:	7001      	strb	r1, [r0, #0]
    cf10:	7841      	ldrb	r1, [r0, #1]
    cf12:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cf16:	7041      	strb	r1, [r0, #1]
    cf18:	88a2      	ldrh	r2, [r4, #4]
    cf1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cf1e:	4311      	orrs	r1, r2
    cf20:	7041      	strb	r1, [r0, #1]
    cf22:	79a2      	ldrb	r2, [r4, #6]
    cf24:	7082      	strb	r2, [r0, #2]
    cf26:	88e2      	ldrh	r2, [r4, #6]
    cf28:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    cf2c:	0a12      	lsrs	r2, r2, #8
    cf2e:	70c2      	strb	r2, [r0, #3]
    cf30:	7041      	strb	r1, [r0, #1]
    cf32:	7a22      	ldrb	r2, [r4, #8]
    cf34:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cf38:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    cf3c:	7041      	strb	r1, [r0, #1]
    cf3e:	7a62      	ldrb	r2, [r4, #9]
    cf40:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    cf44:	7041      	strb	r1, [r0, #1]
    cf46:	6821      	ldr	r1, [r4, #0]
    cf48:	1d02      	adds	r2, r0, #4
    cf4a:	4291      	cmp	r1, r2
    cf4c:	d006      	beq.n	cf5c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cf4e:	88e2      	ldrh	r2, [r4, #6]
    cf50:	2afb      	cmp	r2, #251	; 0xfb
    cf52:	d300      	bcc.n	cf56 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    cf54:	22fb      	movs	r2, #251	; 0xfb
    cf56:	1d00      	adds	r0, r0, #4
    cf58:	f003 fff5 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf5c:	79a0      	ldrb	r0, [r4, #6]
    cf5e:	1d00      	adds	r0, r0, #4
    cf60:	b2c0      	uxtb	r0, r0
    cf62:	bd10      	pop	{r4, pc}

0000cf64 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cf64:	b430      	push	{r4, r5}
    cf66:	790a      	ldrb	r2, [r1, #4]
    cf68:	7002      	strb	r2, [r0, #0]
    cf6a:	7842      	ldrb	r2, [r0, #1]
    cf6c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    cf70:	7042      	strb	r2, [r0, #1]
    cf72:	888b      	ldrh	r3, [r1, #4]
    cf74:	f3c3 2303 	ubfx	r3, r3, #8, #4
    cf78:	431a      	orrs	r2, r3
    cf7a:	7042      	strb	r2, [r0, #1]
    cf7c:	798b      	ldrb	r3, [r1, #6]
    cf7e:	7083      	strb	r3, [r0, #2]
    cf80:	78c3      	ldrb	r3, [r0, #3]
    cf82:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cf86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cf8a:	70c3      	strb	r3, [r0, #3]
    cf8c:	88cc      	ldrh	r4, [r1, #6]
    cf8e:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cf92:	4323      	orrs	r3, r4
    cf94:	70c3      	strb	r3, [r0, #3]
    cf96:	7042      	strb	r2, [r0, #1]
    cf98:	7a0c      	ldrb	r4, [r1, #8]
    cf9a:	f004 0403 	and.w	r4, r4, #3
    cf9e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cfa2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cfa6:	7042      	strb	r2, [r0, #1]
    cfa8:	7a4c      	ldrb	r4, [r1, #9]
    cfaa:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cfae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cfb2:	7042      	strb	r2, [r0, #1]
    cfb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cfb8:	70c2      	strb	r2, [r0, #3]
    cfba:	680b      	ldr	r3, [r1, #0]
    cfbc:	1d02      	adds	r2, r0, #4
    cfbe:	4293      	cmp	r3, r2
    cfc0:	d005      	beq.n	cfce <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cfc2:	88ca      	ldrh	r2, [r1, #6]
    cfc4:	bc30      	pop	{r4, r5}
    cfc6:	4619      	mov	r1, r3
    cfc8:	1d00      	adds	r0, r0, #4
    cfca:	f003 bfbc 	b.w	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfce:	bc30      	pop	{r4, r5}
    cfd0:	4770      	bx	lr

0000cfd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cfd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cfd6:	4604      	mov	r4, r0
    cfd8:	f891 c000 	ldrb.w	ip, [r1]
    cfdc:	460d      	mov	r5, r1
    cfde:	2000      	movs	r0, #0
    cfe0:	270c      	movs	r7, #12
    cfe2:	263e      	movs	r6, #62	; 0x3e
    cfe4:	2312      	movs	r3, #18
    cfe6:	22ff      	movs	r2, #255	; 0xff
    cfe8:	f04f 0b10 	mov.w	fp, #16
    cfec:	f04f 0905 	mov.w	r9, #5
    cff0:	f104 010d 	add.w	r1, r4, #13
    cff4:	f04f 0e14 	mov.w	lr, #20
    cff8:	f04f 0a11 	mov.w	sl, #17
    cffc:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    d000:	d271      	bcs.n	d0e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d002:	e8df f00c 	tbb	[pc, ip]
    d006:	1270      	.short	0x1270
    d008:	f4312c29 	.word	0xf4312c29
    d00c:	a7968c70 	.word	0xa7968c70
    d010:	f5d8d5c1 	.word	0xf5d8d5c1
    d014:	70f0f1f2 	.word	0x70f0f1f2
    d018:	71705370 	.word	0x71705370
    d01c:	ecedeeef 	.word	0xecedeeef
    d020:	e8e9eaeb 	.word	0xe8e9eaeb
    d024:	70e5e6e7 	.word	0x70e5e6e7
    d028:	00e4      	.short	0x00e4
    d02a:	7027      	strb	r7, [r4, #0]
    d02c:	7928      	ldrb	r0, [r5, #4]
    d02e:	70a0      	strb	r0, [r4, #2]
    d030:	7968      	ldrb	r0, [r5, #5]
    d032:	70e0      	strb	r0, [r4, #3]
    d034:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d038:	0a00      	lsrs	r0, r0, #8
    d03a:	7120      	strb	r0, [r4, #4]
    d03c:	79e8      	ldrb	r0, [r5, #7]
    d03e:	7160      	strb	r0, [r4, #5]
    d040:	7a28      	ldrb	r0, [r5, #8]
    d042:	71a0      	strb	r0, [r4, #6]
    d044:	8928      	ldrh	r0, [r5, #8]
    d046:	0a00      	lsrs	r0, r0, #8
    d048:	71e0      	strb	r0, [r4, #7]
    d04a:	7aa8      	ldrb	r0, [r5, #10]
    d04c:	7220      	strb	r0, [r4, #8]
    d04e:	8968      	ldrh	r0, [r5, #10]
    d050:	0a00      	lsrs	r0, r0, #8
    d052:	7260      	strb	r0, [r4, #9]
    d054:	2008      	movs	r0, #8
    d056:	e137      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d058:	f884 b000 	strb.w	fp, [r4]
    d05c:	e001      	b.n	d062 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    d05e:	201a      	movs	r0, #26
    d060:	7020      	strb	r0, [r4, #0]
    d062:	7928      	ldrb	r0, [r5, #4]
    d064:	70a0      	strb	r0, [r4, #2]
    d066:	e136      	b.n	d2d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    d068:	7026      	strb	r6, [r4, #0]
    d06a:	2002      	movs	r0, #2
    d06c:	70a0      	strb	r0, [r4, #2]
    d06e:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    d072:	70e0      	strb	r0, [r4, #3]
    d074:	7aa8      	ldrb	r0, [r5, #10]
    d076:	7120      	strb	r0, [r4, #4]
    d078:	7868      	ldrb	r0, [r5, #1]
    d07a:	7160      	strb	r0, [r4, #5]
    d07c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    d080:	f8c4 0006 	str.w	r0, [r4, #6]
    d084:	88e8      	ldrh	r0, [r5, #6]
    d086:	8160      	strh	r0, [r4, #10]
    d088:	7a28      	ldrb	r0, [r5, #8]
    d08a:	7320      	strb	r0, [r4, #12]
    d08c:	7a2e      	ldrb	r6, [r5, #8]
    d08e:	2e1f      	cmp	r6, #31
    d090:	d300      	bcc.n	d094 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    d092:	261f      	movs	r6, #31
    d094:	4608      	mov	r0, r1
    d096:	4632      	mov	r2, r6
    d098:	f105 010b 	add.w	r1, r5, #11
    d09c:	f003 ff53 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d0a0:	360d      	adds	r6, #13
    d0a2:	7a69      	ldrb	r1, [r5, #9]
    d0a4:	55a1      	strb	r1, [r4, r6]
    d0a6:	1e76      	subs	r6, r6, #1
    d0a8:	b2f0      	uxtb	r0, r6
    d0aa:	e10b      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d0ac:	7026      	strb	r6, [r4, #0]
    d0ae:	200b      	movs	r0, #11
    d0b0:	70a0      	strb	r0, [r4, #2]
    d0b2:	7928      	ldrb	r0, [r5, #4]
    d0b4:	70e0      	strb	r0, [r4, #3]
    d0b6:	7968      	ldrb	r0, [r5, #5]
    d0b8:	7120      	strb	r0, [r4, #4]
    d0ba:	79a8      	ldrb	r0, [r5, #6]
    d0bc:	7160      	strb	r0, [r4, #5]
    d0be:	f8d5 0007 	ldr.w	r0, [r5, #7]
    d0c2:	f8c4 0006 	str.w	r0, [r4, #6]
    d0c6:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    d0ca:	8160      	strh	r0, [r4, #10]
    d0cc:	7b68      	ldrb	r0, [r5, #13]
    d0ce:	7320      	strb	r0, [r4, #12]
    d0d0:	f8d5 000e 	ldr.w	r0, [r5, #14]
    d0d4:	f8c4 000d 	str.w	r0, [r4, #13]
    d0d8:	8a68      	ldrh	r0, [r5, #18]
    d0da:	f8a4 0011 	strh.w	r0, [r4, #17]
    d0de:	7d28      	ldrb	r0, [r5, #20]
    d0e0:	74e0      	strb	r0, [r4, #19]
    d0e2:	4618      	mov	r0, r3
    d0e4:	e0f0      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d0e6:	e0f1      	b.n	d2cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d0e8:	2029      	movs	r0, #41	; 0x29
    d0ea:	f7f3 fe31 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d0ee:	b148      	cbz	r0, d104 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    d0f0:	7026      	strb	r6, [r4, #0]
    d0f2:	2029      	movs	r0, #41	; 0x29
    d0f4:	70a0      	strb	r0, [r4, #2]
    d0f6:	2221      	movs	r2, #33	; 0x21
    d0f8:	1d29      	adds	r1, r5, #4
    d0fa:	1ce0      	adds	r0, r4, #3
    d0fc:	f003 ff23 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d100:	2022      	movs	r0, #34	; 0x22
    d102:	e0e1      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d104:	200a      	movs	r0, #10
    d106:	f7f3 fe23 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d10a:	2800      	cmp	r0, #0
    d10c:	4629      	mov	r1, r5
    d10e:	4620      	mov	r0, r4
    d110:	d002      	beq.n	d118 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    d112:	f000 f9a0 	bl	d456 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    d116:	e0d5      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d118:	f000 f974 	bl	d404 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    d11c:	e0d2      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d11e:	7026      	strb	r6, [r4, #0]
    d120:	f884 e002 	strb.w	lr, [r4, #2]
    d124:	7928      	ldrb	r0, [r5, #4]
    d126:	70e0      	strb	r0, [r4, #3]
    d128:	88a8      	ldrh	r0, [r5, #4]
    d12a:	0a00      	lsrs	r0, r0, #8
    d12c:	7120      	strb	r0, [r4, #4]
    d12e:	79a8      	ldrb	r0, [r5, #6]
    d130:	e104      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d132:	223e      	movs	r2, #62	; 0x3e
    d134:	7022      	strb	r2, [r4, #0]
    d136:	2204      	movs	r2, #4
    d138:	70a2      	strb	r2, [r4, #2]
    d13a:	6868      	ldr	r0, [r5, #4]
    d13c:	f8c4 0003 	str.w	r0, [r4, #3]
    d140:	68a8      	ldr	r0, [r5, #8]
    d142:	f8c4 0007 	str.w	r0, [r4, #7]
    d146:	89a8      	ldrh	r0, [r5, #12]
    d148:	f8a4 000b 	strh.w	r0, [r4, #11]
    d14c:	7ba8      	ldrb	r0, [r5, #14]
    d14e:	7360      	strb	r0, [r4, #13]
    d150:	200c      	movs	r0, #12
    d152:	e0b9      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d154:	7026      	strb	r6, [r4, #0]
    d156:	2003      	movs	r0, #3
    d158:	70a0      	strb	r0, [r4, #2]
    d15a:	7928      	ldrb	r0, [r5, #4]
    d15c:	70e0      	strb	r0, [r4, #3]
    d15e:	79a8      	ldrb	r0, [r5, #6]
    d160:	7120      	strb	r0, [r4, #4]
    d162:	88e8      	ldrh	r0, [r5, #6]
    d164:	0a00      	lsrs	r0, r0, #8
    d166:	7160      	strb	r0, [r4, #5]
    d168:	7a28      	ldrb	r0, [r5, #8]
    d16a:	71a0      	strb	r0, [r4, #6]
    d16c:	8928      	ldrh	r0, [r5, #8]
    d16e:	0a00      	lsrs	r0, r0, #8
    d170:	71e0      	strb	r0, [r4, #7]
    d172:	7aa8      	ldrb	r0, [r5, #10]
    d174:	7220      	strb	r0, [r4, #8]
    d176:	8968      	ldrh	r0, [r5, #10]
    d178:	0a00      	lsrs	r0, r0, #8
    d17a:	7260      	strb	r0, [r4, #9]
    d17c:	7b28      	ldrb	r0, [r5, #12]
    d17e:	72a0      	strb	r0, [r4, #10]
    d180:	89a8      	ldrh	r0, [r5, #12]
    d182:	0a00      	lsrs	r0, r0, #8
    d184:	72e0      	strb	r0, [r4, #11]
    d186:	e116      	b.n	d3b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    d188:	7026      	strb	r6, [r4, #0]
    d18a:	f884 9002 	strb.w	r9, [r4, #2]
    d18e:	7928      	ldrb	r0, [r5, #4]
    d190:	70e0      	strb	r0, [r4, #3]
    d192:	88a8      	ldrh	r0, [r5, #4]
    d194:	0a00      	lsrs	r0, r0, #8
    d196:	7120      	strb	r0, [r4, #4]
    d198:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d19c:	f8c4 0005 	str.w	r0, [r4, #5]
    d1a0:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d1a4:	f8c4 0009 	str.w	r0, [r4, #9]
    d1a8:	89e8      	ldrh	r0, [r5, #14]
    d1aa:	f8a4 000d 	strh.w	r0, [r4, #13]
    d1ae:	e127      	b.n	d400 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    d1b0:	f884 a000 	strb.w	sl, [r4]
    d1b4:	e049      	b.n	d24a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    d1b6:	f884 9000 	strb.w	r9, [r4]
    d1ba:	7928      	ldrb	r0, [r5, #4]
    d1bc:	70a0      	strb	r0, [r4, #2]
    d1be:	7968      	ldrb	r0, [r5, #5]
    d1c0:	70e0      	strb	r0, [r4, #3]
    d1c2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d1c6:	0a00      	lsrs	r0, r0, #8
    d1c8:	7120      	strb	r0, [r4, #4]
    d1ca:	79e8      	ldrb	r0, [r5, #7]
    d1cc:	e0b6      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d1ce:	e102      	b.n	d3d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    d1d0:	e0d5      	b.n	d37e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    d1d2:	e0b6      	b.n	d342 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    d1d4:	e0e1      	b.n	d39a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    d1d6:	e0f0      	b.n	d3ba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    d1d8:	e0a8      	b.n	d32c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    d1da:	e090      	b.n	d2fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    d1dc:	e08c      	b.n	d2f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d1de:	e077      	b.n	d2d0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    d1e0:	e07b      	b.n	d2da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d1e2:	e01e      	b.n	d222 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d1e4:	e01a      	b.n	d21c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    d1e6:	e02e      	b.n	d246 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    d1e8:	e028      	b.n	d23c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    d1ea:	e00c      	b.n	d206 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d1ec:	e000      	b.n	d1f0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    d1ee:	e033      	b.n	d258 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    d1f0:	2008      	movs	r0, #8
    d1f2:	7020      	strb	r0, [r4, #0]
    d1f4:	7928      	ldrb	r0, [r5, #4]
    d1f6:	70a0      	strb	r0, [r4, #2]
    d1f8:	79a8      	ldrb	r0, [r5, #6]
    d1fa:	70e0      	strb	r0, [r4, #3]
    d1fc:	88e8      	ldrh	r0, [r5, #6]
    d1fe:	0a00      	lsrs	r0, r0, #8
    d200:	7120      	strb	r0, [r4, #4]
    d202:	7a28      	ldrb	r0, [r5, #8]
    d204:	e09a      	b.n	d33c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d206:	2030      	movs	r0, #48	; 0x30
    d208:	7020      	strb	r0, [r4, #0]
    d20a:	7928      	ldrb	r0, [r5, #4]
    d20c:	70a0      	strb	r0, [r4, #2]
    d20e:	79a8      	ldrb	r0, [r5, #6]
    d210:	70e0      	strb	r0, [r4, #3]
    d212:	88e8      	ldrh	r0, [r5, #6]
    d214:	0a00      	lsrs	r0, r0, #8
    d216:	7120      	strb	r0, [r4, #4]
    d218:	2003      	movs	r0, #3
    d21a:	e055      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d21c:	7026      	strb	r6, [r4, #0]
    d21e:	2007      	movs	r0, #7
    d220:	e091      	b.n	d346 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    d222:	7026      	strb	r6, [r4, #0]
    d224:	70a7      	strb	r7, [r4, #2]
    d226:	7928      	ldrb	r0, [r5, #4]
    d228:	70e0      	strb	r0, [r4, #3]
    d22a:	79a8      	ldrb	r0, [r5, #6]
    d22c:	7120      	strb	r0, [r4, #4]
    d22e:	88e8      	ldrh	r0, [r5, #6]
    d230:	0a00      	lsrs	r0, r0, #8
    d232:	7160      	strb	r0, [r4, #5]
    d234:	7a28      	ldrb	r0, [r5, #8]
    d236:	71a0      	strb	r0, [r4, #6]
    d238:	7a68      	ldrb	r0, [r5, #9]
    d23a:	e05a      	b.n	d2f2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    d23c:	1d29      	adds	r1, r5, #4
    d23e:	4620      	mov	r0, r4
    d240:	f7f3 fd46 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    d244:	e03e      	b.n	d2c4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    d246:	2057      	movs	r0, #87	; 0x57
    d248:	7020      	strb	r0, [r4, #0]
    d24a:	7928      	ldrb	r0, [r5, #4]
    d24c:	70a0      	strb	r0, [r4, #2]
    d24e:	88a8      	ldrh	r0, [r5, #4]
    d250:	0a00      	lsrs	r0, r0, #8
    d252:	70e0      	strb	r0, [r4, #3]
    d254:	2002      	movs	r0, #2
    d256:	e037      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d258:	7026      	strb	r6, [r4, #0]
    d25a:	220d      	movs	r2, #13
    d25c:	70a2      	strb	r2, [r4, #2]
    d25e:	792a      	ldrb	r2, [r5, #4]
    d260:	70e2      	strb	r2, [r4, #3]
    d262:	89ea      	ldrh	r2, [r5, #14]
    d264:	80a2      	strh	r2, [r4, #4]
    d266:	796a      	ldrb	r2, [r5, #5]
    d268:	71a2      	strb	r2, [r4, #6]
    d26a:	f8d5 2006 	ldr.w	r2, [r5, #6]
    d26e:	f8c4 2007 	str.w	r2, [r4, #7]
    d272:	896a      	ldrh	r2, [r5, #10]
    d274:	f8a4 200b 	strh.w	r2, [r4, #11]
    d278:	7c2a      	ldrb	r2, [r5, #16]
    d27a:	4620      	mov	r0, r4
    d27c:	7362      	strb	r2, [r4, #13]
    d27e:	1d29      	adds	r1, r5, #4
    d280:	7c6a      	ldrb	r2, [r5, #17]
    d282:	7382      	strb	r2, [r0, #14]
    d284:	7b8a      	ldrb	r2, [r1, #14]
    d286:	73c2      	strb	r2, [r0, #15]
    d288:	7e8a      	ldrb	r2, [r1, #26]
    d28a:	7402      	strb	r2, [r0, #16]
    d28c:	7a4a      	ldrb	r2, [r1, #9]
    d28e:	7442      	strb	r2, [r0, #17]
    d290:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    d294:	f8ad 2000 	strh.w	r2, [sp]
    d298:	8242      	strh	r2, [r0, #18]
    d29a:	7cca      	ldrb	r2, [r1, #19]
    d29c:	7502      	strb	r2, [r0, #20]
    d29e:	694a      	ldr	r2, [r1, #20]
    d2a0:	f8c0 2015 	str.w	r2, [r0, #21]
    d2a4:	8b0a      	ldrh	r2, [r1, #24]
    d2a6:	f8a0 2019 	strh.w	r2, [r0, #25]
    d2aa:	7a0a      	ldrb	r2, [r1, #8]
    d2ac:	76c2      	strb	r2, [r0, #27]
    d2ae:	7a0d      	ldrb	r5, [r1, #8]
    d2b0:	2de5      	cmp	r5, #229	; 0xe5
    d2b2:	d300      	bcc.n	d2b6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    d2b4:	25e5      	movs	r5, #229	; 0xe5
    d2b6:	462a      	mov	r2, r5
    d2b8:	301c      	adds	r0, #28
    d2ba:	311c      	adds	r1, #28
    d2bc:	f003 fe43 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d2c0:	351a      	adds	r5, #26
    d2c2:	b2e8      	uxtb	r0, r5
    d2c4:	2800      	cmp	r0, #0
    d2c6:	d001      	beq.n	d2cc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    d2c8:	7060      	strb	r0, [r4, #1]
    d2ca:	1c80      	adds	r0, r0, #2
    d2cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2d0:	7026      	strb	r6, [r4, #0]
    d2d2:	f884 a002 	strb.w	sl, [r4, #2]
    d2d6:	2001      	movs	r0, #1
    d2d8:	e7f6      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d2da:	7026      	strb	r6, [r4, #0]
    d2dc:	70a3      	strb	r3, [r4, #2]
    d2de:	7928      	ldrb	r0, [r5, #4]
    d2e0:	70e0      	strb	r0, [r4, #3]
    d2e2:	7968      	ldrb	r0, [r5, #5]
    d2e4:	7120      	strb	r0, [r4, #4]
    d2e6:	79a8      	ldrb	r0, [r5, #6]
    d2e8:	7160      	strb	r0, [r4, #5]
    d2ea:	88e8      	ldrh	r0, [r5, #6]
    d2ec:	0a00      	lsrs	r0, r0, #8
    d2ee:	71a0      	strb	r0, [r4, #6]
    d2f0:	7a28      	ldrb	r0, [r5, #8]
    d2f2:	71e0      	strb	r0, [r4, #7]
    d2f4:	2006      	movs	r0, #6
    d2f6:	e7e7      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d2f8:	7026      	strb	r6, [r4, #0]
    d2fa:	2020      	movs	r0, #32
    d2fc:	e041      	b.n	d382 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    d2fe:	7026      	strb	r6, [r4, #0]
    d300:	2021      	movs	r0, #33	; 0x21
    d302:	70a0      	strb	r0, [r4, #2]
    d304:	7928      	ldrb	r0, [r5, #4]
    d306:	70e0      	strb	r0, [r4, #3]
    d308:	7968      	ldrb	r0, [r5, #5]
    d30a:	7120      	strb	r0, [r4, #4]
    d30c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d310:	0a00      	lsrs	r0, r0, #8
    d312:	7160      	strb	r0, [r4, #5]
    d314:	79e8      	ldrb	r0, [r5, #7]
    d316:	71a0      	strb	r0, [r4, #6]
    d318:	7a28      	ldrb	r0, [r5, #8]
    d31a:	71e0      	strb	r0, [r4, #7]
    d31c:	7a68      	ldrb	r0, [r5, #9]
    d31e:	7220      	strb	r0, [r4, #8]
    d320:	7aa8      	ldrb	r0, [r5, #10]
    d322:	7260      	strb	r0, [r4, #9]
    d324:	7ae8      	ldrb	r0, [r5, #11]
    d326:	72a0      	strb	r0, [r4, #10]
    d328:	2009      	movs	r0, #9
    d32a:	e7cd      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d32c:	7022      	strb	r2, [r4, #0]
    d32e:	20a1      	movs	r0, #161	; 0xa1
    d330:	70a0      	strb	r0, [r4, #2]
    d332:	7928      	ldrb	r0, [r5, #4]
    d334:	70e0      	strb	r0, [r4, #3]
    d336:	7968      	ldrb	r0, [r5, #5]
    d338:	7120      	strb	r0, [r4, #4]
    d33a:	2000      	movs	r0, #0
    d33c:	7160      	strb	r0, [r4, #5]
    d33e:	2004      	movs	r0, #4
    d340:	e7c2      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d342:	7022      	strb	r2, [r4, #0]
    d344:	20a2      	movs	r0, #162	; 0xa2
    d346:	70a0      	strb	r0, [r4, #2]
    d348:	7928      	ldrb	r0, [r5, #4]
    d34a:	70e0      	strb	r0, [r4, #3]
    d34c:	88a8      	ldrh	r0, [r5, #4]
    d34e:	0a00      	lsrs	r0, r0, #8
    d350:	7120      	strb	r0, [r4, #4]
    d352:	79a8      	ldrb	r0, [r5, #6]
    d354:	7160      	strb	r0, [r4, #5]
    d356:	88e8      	ldrh	r0, [r5, #6]
    d358:	0a00      	lsrs	r0, r0, #8
    d35a:	71a0      	strb	r0, [r4, #6]
    d35c:	7a28      	ldrb	r0, [r5, #8]
    d35e:	71e0      	strb	r0, [r4, #7]
    d360:	8928      	ldrh	r0, [r5, #8]
    d362:	0a00      	lsrs	r0, r0, #8
    d364:	7220      	strb	r0, [r4, #8]
    d366:	7aa8      	ldrb	r0, [r5, #10]
    d368:	7260      	strb	r0, [r4, #9]
    d36a:	8968      	ldrh	r0, [r5, #10]
    d36c:	0a00      	lsrs	r0, r0, #8
    d36e:	72a0      	strb	r0, [r4, #10]
    d370:	7b28      	ldrb	r0, [r5, #12]
    d372:	72e0      	strb	r0, [r4, #11]
    d374:	89a8      	ldrh	r0, [r5, #12]
    d376:	0a00      	lsrs	r0, r0, #8
    d378:	7320      	strb	r0, [r4, #12]
    d37a:	200b      	movs	r0, #11
    d37c:	e7a4      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d37e:	7022      	strb	r2, [r4, #0]
    d380:	20a3      	movs	r0, #163	; 0xa3
    d382:	70a0      	strb	r0, [r4, #2]
    d384:	7928      	ldrb	r0, [r5, #4]
    d386:	70e0      	strb	r0, [r4, #3]
    d388:	88a8      	ldrh	r0, [r5, #4]
    d38a:	0a00      	lsrs	r0, r0, #8
    d38c:	7120      	strb	r0, [r4, #4]
    d38e:	79a8      	ldrb	r0, [r5, #6]
    d390:	7160      	strb	r0, [r4, #5]
    d392:	79e8      	ldrb	r0, [r5, #7]
    d394:	71a0      	strb	r0, [r4, #6]
    d396:	2005      	movs	r0, #5
    d398:	e796      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d39a:	7026      	strb	r6, [r4, #0]
    d39c:	2013      	movs	r0, #19
    d39e:	70a0      	strb	r0, [r4, #2]
    d3a0:	7928      	ldrb	r0, [r5, #4]
    d3a2:	70e0      	strb	r0, [r4, #3]
    d3a4:	7968      	ldrb	r0, [r5, #5]
    d3a6:	7120      	strb	r0, [r4, #4]
    d3a8:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d3ac:	f8c4 0005 	str.w	r0, [r4, #5]
    d3b0:	8968      	ldrh	r0, [r5, #10]
    d3b2:	f8a4 0009 	strh.w	r0, [r4, #9]
    d3b6:	200a      	movs	r0, #10
    d3b8:	e786      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d3ba:	7022      	strb	r2, [r4, #0]
    d3bc:	20a4      	movs	r0, #164	; 0xa4
    d3be:	70a0      	strb	r0, [r4, #2]
    d3c0:	7928      	ldrb	r0, [r5, #4]
    d3c2:	70e0      	strb	r0, [r4, #3]
    d3c4:	88a8      	ldrh	r0, [r5, #4]
    d3c6:	0a00      	lsrs	r0, r0, #8
    d3c8:	7120      	strb	r0, [r4, #4]
    d3ca:	79a8      	ldrb	r0, [r5, #6]
    d3cc:	7160      	strb	r0, [r4, #5]
    d3ce:	79e8      	ldrb	r0, [r5, #7]
    d3d0:	71a0      	strb	r0, [r4, #6]
    d3d2:	2007      	movs	r0, #7
    d3d4:	e778      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    d3d6:	7022      	strb	r2, [r4, #0]
    d3d8:	2080      	movs	r0, #128	; 0x80
    d3da:	70a0      	strb	r0, [r4, #2]
    d3dc:	88a9      	ldrh	r1, [r5, #4]
    d3de:	f8a4 1003 	strh.w	r1, [r4, #3]
    d3e2:	88e9      	ldrh	r1, [r5, #6]
    d3e4:	f8a4 1005 	strh.w	r1, [r4, #5]
    d3e8:	7a29      	ldrb	r1, [r5, #8]
    d3ea:	71e1      	strb	r1, [r4, #7]
    d3ec:	8969      	ldrh	r1, [r5, #10]
    d3ee:	8121      	strh	r1, [r4, #8]
    d3f0:	89a9      	ldrh	r1, [r5, #12]
    d3f2:	8161      	strh	r1, [r4, #10]
    d3f4:	89e9      	ldrh	r1, [r5, #14]
    d3f6:	81a1      	strh	r1, [r4, #12]
    d3f8:	7c29      	ldrb	r1, [r5, #16]
    d3fa:	f001 0101 	and.w	r1, r1, #1
    d3fe:	73a1      	strb	r1, [r4, #14]
    d400:	200d      	movs	r0, #13
    d402:	e761      	b.n	d2c8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000d404 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d404:	223e      	movs	r2, #62	; 0x3e
    d406:	7002      	strb	r2, [r0, #0]
    d408:	2201      	movs	r2, #1
    d40a:	7082      	strb	r2, [r0, #2]
    d40c:	790a      	ldrb	r2, [r1, #4]
    d40e:	70c2      	strb	r2, [r0, #3]
    d410:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d414:	7102      	strb	r2, [r0, #4]
    d416:	880a      	ldrh	r2, [r1, #0]
    d418:	0a12      	lsrs	r2, r2, #8
    d41a:	7142      	strb	r2, [r0, #5]
    d41c:	788a      	ldrb	r2, [r1, #2]
    d41e:	7182      	strb	r2, [r0, #6]
    d420:	78ca      	ldrb	r2, [r1, #3]
    d422:	71c2      	strb	r2, [r0, #7]
    d424:	684a      	ldr	r2, [r1, #4]
    d426:	6082      	str	r2, [r0, #8]
    d428:	890a      	ldrh	r2, [r1, #8]
    d42a:	8182      	strh	r2, [r0, #12]
    d42c:	7d8a      	ldrb	r2, [r1, #22]
    d42e:	7382      	strb	r2, [r0, #14]
    d430:	8aca      	ldrh	r2, [r1, #22]
    d432:	0a12      	lsrs	r2, r2, #8
    d434:	73c2      	strb	r2, [r0, #15]
    d436:	7e0a      	ldrb	r2, [r1, #24]
    d438:	7402      	strb	r2, [r0, #16]
    d43a:	8b0a      	ldrh	r2, [r1, #24]
    d43c:	0a12      	lsrs	r2, r2, #8
    d43e:	7442      	strb	r2, [r0, #17]
    d440:	7e8a      	ldrb	r2, [r1, #26]
    d442:	7482      	strb	r2, [r0, #18]
    d444:	8b4a      	ldrh	r2, [r1, #26]
    d446:	0a12      	lsrs	r2, r2, #8
    d448:	74c2      	strb	r2, [r0, #19]
    d44a:	7f09      	ldrb	r1, [r1, #28]
    d44c:	7501      	strb	r1, [r0, #20]
    d44e:	2113      	movs	r1, #19
    d450:	7041      	strb	r1, [r0, #1]
    d452:	4608      	mov	r0, r1
    d454:	4770      	bx	lr
    d456:	223e      	movs	r2, #62	; 0x3e
    d458:	7002      	strb	r2, [r0, #0]
    d45a:	220a      	movs	r2, #10
    d45c:	7082      	strb	r2, [r0, #2]
    d45e:	790a      	ldrb	r2, [r1, #4]
    d460:	70c2      	strb	r2, [r0, #3]
    d462:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d466:	7102      	strb	r2, [r0, #4]
    d468:	880a      	ldrh	r2, [r1, #0]
    d46a:	0a12      	lsrs	r2, r2, #8
    d46c:	7142      	strb	r2, [r0, #5]
    d46e:	788a      	ldrb	r2, [r1, #2]
    d470:	7182      	strb	r2, [r0, #6]
    d472:	78ca      	ldrb	r2, [r1, #3]
    d474:	71c2      	strb	r2, [r0, #7]
    d476:	684a      	ldr	r2, [r1, #4]
    d478:	6082      	str	r2, [r0, #8]
    d47a:	890a      	ldrh	r2, [r1, #8]
    d47c:	8182      	strh	r2, [r0, #12]
    d47e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d482:	f8c0 200e 	str.w	r2, [r0, #14]
    d486:	89ca      	ldrh	r2, [r1, #14]
    d488:	8242      	strh	r2, [r0, #18]
    d48a:	690a      	ldr	r2, [r1, #16]
    d48c:	6142      	str	r2, [r0, #20]
    d48e:	8a8a      	ldrh	r2, [r1, #20]
    d490:	8302      	strh	r2, [r0, #24]
    d492:	7d8a      	ldrb	r2, [r1, #22]
    d494:	7682      	strb	r2, [r0, #26]
    d496:	8aca      	ldrh	r2, [r1, #22]
    d498:	0a12      	lsrs	r2, r2, #8
    d49a:	76c2      	strb	r2, [r0, #27]
    d49c:	7e0a      	ldrb	r2, [r1, #24]
    d49e:	7702      	strb	r2, [r0, #28]
    d4a0:	8b0a      	ldrh	r2, [r1, #24]
    d4a2:	0a12      	lsrs	r2, r2, #8
    d4a4:	7742      	strb	r2, [r0, #29]
    d4a6:	7e8a      	ldrb	r2, [r1, #26]
    d4a8:	7782      	strb	r2, [r0, #30]
    d4aa:	8b4a      	ldrh	r2, [r1, #26]
    d4ac:	0a12      	lsrs	r2, r2, #8
    d4ae:	77c2      	strb	r2, [r0, #31]
    d4b0:	7f09      	ldrb	r1, [r1, #28]
    d4b2:	f880 1020 	strb.w	r1, [r0, #32]
    d4b6:	211f      	movs	r1, #31
    d4b8:	7041      	strb	r1, [r0, #1]
    d4ba:	4608      	mov	r0, r1
    d4bc:	4770      	bx	lr
    d4be:	094a      	lsrs	r2, r1, #5
    d4c0:	f001 011f 	and.w	r1, r1, #31
    d4c4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d4c8:	40c8      	lsrs	r0, r1
    d4ca:	f000 0001 	and.w	r0, r0, #1
    d4ce:	4770      	bx	lr

0000d4d0 <sdc_hci_data_put>:
    d4d0:	b510      	push	{r4, lr}
    d4d2:	f06f 0415 	mvn.w	r4, #21
    d4d6:	b120      	cbz	r0, d4e2 <sdc_hci_data_put+0x12>
    d4d8:	f7ff fcf3 	bl	cec2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d4dc:	b108      	cbz	r0, d4e2 <sdc_hci_data_put+0x12>
    d4de:	2000      	movs	r0, #0
    d4e0:	bd10      	pop	{r4, pc}
    d4e2:	4620      	mov	r0, r4
    d4e4:	bd10      	pop	{r4, pc}

0000d4e6 <sdc_hci_get>:
    d4e6:	b510      	push	{r4, lr}
    d4e8:	460c      	mov	r4, r1
    d4ea:	b130      	cbz	r0, d4fa <sdc_hci_get+0x14>
    d4ec:	b12c      	cbz	r4, d4fa <sdc_hci_get+0x14>
    d4ee:	f7f3 fba5 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d4f2:	b128      	cbz	r0, d500 <sdc_hci_get+0x1a>
    d4f4:	7020      	strb	r0, [r4, #0]
    d4f6:	2000      	movs	r0, #0
    d4f8:	bd10      	pop	{r4, pc}
    d4fa:	f06f 0015 	mvn.w	r0, #21
    d4fe:	bd10      	pop	{r4, pc}
    d500:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d504:	bd10      	pop	{r4, pc}

0000d506 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d506:	f002 bde6 	b.w	100d6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d50a <sdc_hci_cmd_cb_read_transmit_power_level>:
    d50a:	f002 be01 	b.w	10110 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d50e <sdc_hci_cmd_cb_set_event_mask>:
    d50e:	b510      	push	{r4, lr}
    d510:	f7f3 fc38 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d514:	2000      	movs	r0, #0
    d516:	bd10      	pop	{r4, pc}

0000d518 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d518:	b510      	push	{r4, lr}
    d51a:	f7f3 fc45 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d51e:	2000      	movs	r0, #0
    d520:	bd10      	pop	{r4, pc}

0000d522 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d522:	f002 be16 	b.w	10152 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d526 <sdc_hci_cmd_vs_conn_event_extend>:
    d526:	b508      	push	{r3, lr}
    d528:	7800      	ldrb	r0, [r0, #0]
    d52a:	f88d 0000 	strb.w	r0, [sp]
    d52e:	4668      	mov	r0, sp
    d530:	f002 fdad 	bl	1008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d534:	bd08      	pop	{r3, pc}

0000d536 <sdc_hci_cmd_vs_conn_update>:
    d536:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d538:	2100      	movs	r1, #0
    d53a:	9100      	str	r1, [sp, #0]
    d53c:	9101      	str	r1, [sp, #4]
    d53e:	9102      	str	r1, [sp, #8]
    d540:	9103      	str	r1, [sp, #12]
    d542:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d546:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d54a:	4291      	cmp	r1, r2
    d54c:	d304      	bcc.n	d558 <sdc_hci_cmd_vs_conn_update+0x22>
    d54e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d552:	fbb1 f1f2 	udiv	r1, r1, r2
    d556:	e005      	b.n	d564 <sdc_hci_cmd_vs_conn_update+0x2e>
    d558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d55c:	fbb1 f1f2 	udiv	r1, r1, r2
    d560:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d564:	8802      	ldrh	r2, [r0, #0]
    d566:	b289      	uxth	r1, r1
    d568:	f8ad 2000 	strh.w	r2, [sp]
    d56c:	f8ad 1002 	strh.w	r1, [sp, #2]
    d570:	f8ad 1004 	strh.w	r1, [sp, #4]
    d574:	88c1      	ldrh	r1, [r0, #6]
    d576:	f8ad 1006 	strh.w	r1, [sp, #6]
    d57a:	8900      	ldrh	r0, [r0, #8]
    d57c:	f8ad 0008 	strh.w	r0, [sp, #8]
    d580:	4668      	mov	r0, sp
    d582:	f002 faed 	bl	fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d586:	b004      	add	sp, #16
    d588:	bd10      	pop	{r4, pc}

0000d58a <sdc_hci_cmd_vs_event_length_set>:
    d58a:	f7f9 bec9 	b.w	7320 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d58e <sdc_hci_cmd_vs_llpm_mode_set>:
    d58e:	2001      	movs	r0, #1
    d590:	4770      	bx	lr

0000d592 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d592:	7800      	ldrb	r0, [r0, #0]
    d594:	b100      	cbz	r0, d598 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d596:	2001      	movs	r0, #1
    d598:	f002 bca8 	b.w	feec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d59c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d59c:	b510      	push	{r4, lr}
    d59e:	4604      	mov	r4, r0
    d5a0:	f7ff f9c6 	bl	c930 <mpsl_temperature_get>
    d5a4:	17c1      	asrs	r1, r0, #31
    d5a6:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d5aa:	1080      	asrs	r0, r0, #2
    d5ac:	287f      	cmp	r0, #127	; 0x7f
    d5ae:	dd01      	ble.n	d5b4 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d5b0:	207f      	movs	r0, #127	; 0x7f
    d5b2:	e004      	b.n	d5be <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d5b4:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d5b8:	4288      	cmp	r0, r1
    d5ba:	da00      	bge.n	d5be <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d5bc:	4608      	mov	r0, r1
    d5be:	7020      	strb	r0, [r4, #0]
    d5c0:	2000      	movs	r0, #0
    d5c2:	bd10      	pop	{r4, pc}

0000d5c4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d5c4:	b570      	push	{r4, r5, r6, lr}
    d5c6:	4605      	mov	r5, r0
    d5c8:	2210      	movs	r2, #16
    d5ca:	2100      	movs	r1, #0
    d5cc:	f003 fd35 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5d0:	2210      	movs	r2, #16
    d5d2:	2100      	movs	r1, #0
    d5d4:	f105 0010 	add.w	r0, r5, #16
    d5d8:	f003 fd2f 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5dc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d5e0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d5e4:	1c40      	adds	r0, r0, #1
    d5e6:	d10b      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5e8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d5ec:	1c40      	adds	r0, r0, #1
    d5ee:	d107      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d5f4:	1c40      	adds	r0, r0, #1
    d5f6:	d103      	bne.n	d600 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d5f8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d5fc:	1c40      	adds	r0, r0, #1
    d5fe:	d00b      	beq.n	d618 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d600:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d604:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d608:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d60c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d610:	612a      	str	r2, [r5, #16]
    d612:	6168      	str	r0, [r5, #20]
    d614:	61a9      	str	r1, [r5, #24]
    d616:	61eb      	str	r3, [r5, #28]
    d618:	2000      	movs	r0, #0
    d61a:	f7f4 f82f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d61e:	b918      	cbnz	r0, d628 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d620:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d624:	07c0      	lsls	r0, r0, #31
    d626:	d118      	bne.n	d65a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d628:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d62c:	1c40      	adds	r0, r0, #1
    d62e:	d10b      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d630:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d634:	1c40      	adds	r0, r0, #1
    d636:	d107      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d638:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d63c:	1c40      	adds	r0, r0, #1
    d63e:	d103      	bne.n	d648 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d640:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d644:	1c40      	adds	r0, r0, #1
    d646:	d008      	beq.n	d65a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d648:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d64c:	6861      	ldr	r1, [r4, #4]
    d64e:	68a2      	ldr	r2, [r4, #8]
    d650:	68e3      	ldr	r3, [r4, #12]
    d652:	6028      	str	r0, [r5, #0]
    d654:	6069      	str	r1, [r5, #4]
    d656:	60aa      	str	r2, [r5, #8]
    d658:	60eb      	str	r3, [r5, #12]
    d65a:	2000      	movs	r0, #0
    d65c:	bd70      	pop	{r4, r5, r6, pc}

0000d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d65e:	b538      	push	{r3, r4, r5, lr}
    d660:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d664:	4604      	mov	r4, r0
    d666:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d66a:	1c40      	adds	r0, r0, #1
    d66c:	d105      	bne.n	d67a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d66e:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d672:	43c0      	mvns	r0, r0
    d674:	0400      	lsls	r0, r0, #16
    d676:	0c00      	lsrs	r0, r0, #16
    d678:	d03e      	beq.n	d6f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d67a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d67e:	07c0      	lsls	r0, r0, #31
    d680:	d03a      	beq.n	d6f8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d682:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d686:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d68a:	f8ad 1000 	strh.w	r1, [sp]
    d68e:	f8c4 0001 	str.w	r0, [r4, #1]
    d692:	f8bd 0000 	ldrh.w	r0, [sp]
    d696:	f8a4 0005 	strh.w	r0, [r4, #5]
    d69a:	79a0      	ldrb	r0, [r4, #6]
    d69c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d6a0:	71a0      	strb	r0, [r4, #6]
    d6a2:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d6a6:	1c40      	adds	r0, r0, #1
    d6a8:	d00f      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6aa:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d6ae:	1c40      	adds	r0, r0, #1
    d6b0:	d00b      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6b2:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d6b6:	1c40      	adds	r0, r0, #1
    d6b8:	d007      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6ba:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d6be:	1c40      	adds	r0, r0, #1
    d6c0:	d003      	beq.n	d6ca <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d6c2:	2000      	movs	r0, #0
    d6c4:	f7f3 ffda 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d6c8:	b140      	cbz	r0, d6dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d6ca:	2210      	movs	r2, #16
    d6cc:	2100      	movs	r1, #0
    d6ce:	1de0      	adds	r0, r4, #7
    d6d0:	f003 fcb3 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6d4:	2001      	movs	r0, #1
    d6d6:	7020      	strb	r0, [r4, #0]
    d6d8:	2000      	movs	r0, #0
    d6da:	bd38      	pop	{r3, r4, r5, pc}
    d6dc:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d6e0:	6869      	ldr	r1, [r5, #4]
    d6e2:	68a8      	ldr	r0, [r5, #8]
    d6e4:	68eb      	ldr	r3, [r5, #12]
    d6e6:	f8c4 2007 	str.w	r2, [r4, #7]
    d6ea:	f8c4 100b 	str.w	r1, [r4, #11]
    d6ee:	f8c4 000f 	str.w	r0, [r4, #15]
    d6f2:	f8c4 3013 	str.w	r3, [r4, #19]
    d6f6:	e7ed      	b.n	d6d4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d6f8:	2000      	movs	r0, #0
    d6fa:	e7ec      	b.n	d6d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d6fc <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d6fc:	f002 bcb6 	b.w	1006c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d700 <sdc_hci_cmd_ip_read_bd_addr>:
    d700:	f002 bcfa 	b.w	100f8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d704 <sdc_hci_cmd_ip_read_local_version_information>:
    d704:	f7f9 be5e 	b.w	73c4 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d708 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d708:	f002 b9fc 	b.w	fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d70c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d70c:	f002 b9df 	b.w	face <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d710 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d710:	f002 ba1c 	b.w	fb4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d714 <sdc_hci_cmd_le_clear_resolving_list>:
    d714:	f002 ba0d 	b.w	fb32 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d718 <sdc_hci_cmd_le_conn_update>:
    d718:	f002 ba22 	b.w	fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d71c <sdc_hci_cmd_le_create_conn>:
    d71c:	f7f9 bce6 	b.w	70ec <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d720 <sdc_hci_cmd_le_create_conn_cancel>:
    d720:	f002 ba61 	b.w	fbe6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d724 <sdc_hci_cmd_le_enable_encryption>:
    d724:	f002 bb9f 	b.w	fe66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d728 <sdc_hci_cmd_le_encrypt>:
    d728:	f002 ba6d 	b.w	fc06 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d72c <sdc_hci_cmd_le_rand>:
    d72c:	f002 ba74 	b.w	fc18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d730 <sdc_hci_cmd_le_read_buffer_size>:
    d730:	f7f9 bd38 	b.w	71a4 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d734 <sdc_hci_cmd_le_read_channel_map>:
    d734:	f7f9 bd40 	b.w	71b8 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d738 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d738:	f002 baac 	b.w	fc94 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d73c <sdc_hci_cmd_le_read_max_data_length>:
    d73c:	f002 ba72 	b.w	fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d740 <sdc_hci_cmd_le_read_phy>:
    d740:	f7f9 bd62 	b.w	7208 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d744 <sdc_hci_cmd_le_read_remote_features>:
    d744:	f002 ba77 	b.w	fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d748 <sdc_hci_cmd_le_read_resolving_list_size>:
    d748:	f002 ba90 	b.w	fc6c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d74c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d74c:	f7f9 bd82 	b.w	7254 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d750 <sdc_hci_cmd_le_read_transmit_power>:
    d750:	f002 ba90 	b.w	fc74 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d754 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d754:	f002 babb 	b.w	fcce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d758 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d758:	f002 baa0 	b.w	fc9c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d75c <sdc_hci_cmd_le_set_address_resolution_enable>:
    d75c:	f002 bacc 	b.w	fcf8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d760 <sdc_hci_cmd_le_set_data_length>:
    d760:	f002 bad8 	b.w	fd14 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d764 <sdc_hci_cmd_le_set_default_phy>:
    d764:	f7f9 bd80 	b.w	7268 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d768 <sdc_hci_cmd_le_set_event_mask>:
    d768:	b510      	push	{r4, lr}
    d76a:	f7f3 faf9 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d76e:	2000      	movs	r0, #0
    d770:	bd10      	pop	{r4, pc}

0000d772 <sdc_hci_cmd_le_set_host_channel_classification>:
    d772:	f7f9 bda1 	b.w	72b8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d776 <sdc_hci_cmd_le_set_phy>:
    d776:	f002 baed 	b.w	fd54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d77a <sdc_hci_cmd_le_set_privacy_mode>:
    d77a:	f002 bb04 	b.w	fd86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d77e <sdc_hci_cmd_le_set_random_address>:
    d77e:	f002 bb18 	b.w	fdb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d782 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d782:	f002 bb24 	b.w	fdce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d786 <sdc_hci_cmd_le_set_scan_enable>:
    d786:	f002 bb2b 	b.w	fde0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d78a <sdc_hci_cmd_le_set_scan_params>:
    d78a:	f002 bb3f 	b.w	fe0c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d78e <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d78e:	f002 bb9c 	b.w	feca <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d792 <sdc_hci_cmd_lc_disconnect>:
    d792:	f002 b951 	b.w	fa38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d796 <sdc_hci_cmd_lc_read_remote_version_information>:
    d796:	f7f9 be1f 	b.w	73d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d79a:	b570      	push	{r4, r5, r6, lr}
    d79c:	880b      	ldrh	r3, [r1, #0]
    d79e:	7cc4      	ldrb	r4, [r0, #19]
    d7a0:	f100 0518 	add.w	r5, r0, #24
    d7a4:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d7a8:	8802      	ldrh	r2, [r0, #0]
    d7aa:	4435      	add	r5, r6
    d7ac:	1d64      	adds	r4, r4, #5
    d7ae:	882d      	ldrh	r5, [r5, #0]
    d7b0:	4422      	add	r2, r4
    d7b2:	b292      	uxth	r2, r2
    d7b4:	4425      	add	r5, r4
    d7b6:	1e54      	subs	r4, r2, #1
    d7b8:	442c      	add	r4, r5
    d7ba:	fb94 f4f2 	sdiv	r4, r4, r2
    d7be:	fb02 6204 	mla	r2, r2, r4, r6
    d7c2:	8840      	ldrh	r0, [r0, #2]
    d7c4:	b292      	uxth	r2, r2
    d7c6:	4290      	cmp	r0, r2
    d7c8:	d903      	bls.n	d7d2 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d7ca:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d7ce:	4310      	orrs	r0, r2
    d7d0:	e002      	b.n	d7d8 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d7d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d7d6:	4398      	bics	r0, r3
    d7d8:	8008      	strh	r0, [r1, #0]
    d7da:	bd70      	pop	{r4, r5, r6, pc}
    d7dc:	0442      	lsls	r2, r0, #17
    d7de:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d7e2:	d107      	bne.n	d7f4 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d7e4:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d7e8:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d7ec:	4288      	cmp	r0, r1
    d7ee:	d001      	beq.n	d7f4 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d7f0:	2001      	movs	r0, #1
    d7f2:	4770      	bx	lr
    d7f4:	2000      	movs	r0, #0
    d7f6:	4770      	bx	lr

0000d7f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d7f8:	8881      	ldrh	r1, [r0, #4]
    d7fa:	88c0      	ldrh	r0, [r0, #6]
    d7fc:	4288      	cmp	r0, r1
    d7fe:	d101      	bne.n	d804 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d800:	2001      	movs	r0, #1
    d802:	4770      	bx	lr
    d804:	2000      	movs	r0, #0
    d806:	4770      	bx	lr

0000d808 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d80c:	460f      	mov	r7, r1
    d80e:	4604      	mov	r4, r0
    d810:	f100 0118 	add.w	r1, r0, #24
    d814:	8880      	ldrh	r0, [r0, #4]
    d816:	2600      	movs	r6, #0
    d818:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d81c:	1845      	adds	r5, r0, r1
    d81e:	603e      	str	r6, [r7, #0]
    d820:	89e0      	ldrh	r0, [r4, #14]
    d822:	2800      	cmp	r0, #0
    d824:	d016      	beq.n	d854 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d826:	8961      	ldrh	r1, [r4, #10]
    d828:	4408      	add	r0, r1
    d82a:	b280      	uxth	r0, r0
    d82c:	8160      	strh	r0, [r4, #10]
    d82e:	8829      	ldrh	r1, [r5, #0]
    d830:	4288      	cmp	r0, r1
    d832:	d905      	bls.n	d840 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d834:	f240 1151 	movw	r1, #337	; 0x151
    d838:	f04f 0014 	mov.w	r0, #20
    d83c:	f7f3 f912 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d840:	d106      	bne.n	d850 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d842:	f104 0104 	add.w	r1, r4, #4
    d846:	4620      	mov	r0, r4
    d848:	f7ff ffa7 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d84c:	8166      	strh	r6, [r4, #10]
    d84e:	603d      	str	r5, [r7, #0]
    d850:	81e6      	strh	r6, [r4, #14]
    d852:	2001      	movs	r0, #1
    d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d85c:	4604      	mov	r4, r0
    d85e:	f100 0318 	add.w	r3, r0, #24
    d862:	88c0      	ldrh	r0, [r0, #6]
    d864:	460e      	mov	r6, r1
    d866:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d86a:	8a20      	ldrh	r0, [r4, #16]
    d86c:	19d9      	adds	r1, r3, r7
    d86e:	b108      	cbz	r0, d874 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d870:	42b0      	cmp	r0, r6
    d872:	d202      	bcs.n	d87a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d874:	2000      	movs	r0, #0
    d876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d87a:	89a0      	ldrh	r0, [r4, #12]
    d87c:	2500      	movs	r5, #0
    d87e:	b140      	cbz	r0, d892 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d880:	f8b1 c000 	ldrh.w	ip, [r1]
    d884:	4560      	cmp	r0, ip
    d886:	d006      	beq.n	d896 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d888:	f44f 7101 	mov.w	r1, #516	; 0x204
    d88c:	2014      	movs	r0, #20
    d88e:	f7f3 f8e9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d892:	800d      	strh	r5, [r1, #0]
    d894:	e00e      	b.n	d8b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d896:	f894 c013 	ldrb.w	ip, [r4, #19]
    d89a:	4418      	add	r0, r3
    d89c:	f10c 0c05 	add.w	ip, ip, #5
    d8a0:	44bc      	add	ip, r7
    d8a2:	4460      	add	r0, ip
    d8a4:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d8a8:	f820 cc03 	strh.w	ip, [r0, #-3]
    d8ac:	f894 c016 	ldrb.w	ip, [r4, #22]
    d8b0:	f800 cc01 	strb.w	ip, [r0, #-1]
    d8b4:	89a0      	ldrh	r0, [r4, #12]
    d8b6:	4430      	add	r0, r6
    d8b8:	81a0      	strh	r0, [r4, #12]
    d8ba:	8808      	ldrh	r0, [r1, #0]
    d8bc:	4430      	add	r0, r6
    d8be:	8008      	strh	r0, [r1, #0]
    d8c0:	b12a      	cbz	r2, d8ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d8c2:	1da1      	adds	r1, r4, #6
    d8c4:	4620      	mov	r0, r4
    d8c6:	f7ff ff68 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d8ca:	81a5      	strh	r5, [r4, #12]
    d8cc:	e00a      	b.n	d8e4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d8ce:	7ce0      	ldrb	r0, [r4, #19]
    d8d0:	89a1      	ldrh	r1, [r4, #12]
    d8d2:	1d40      	adds	r0, r0, #5
    d8d4:	4438      	add	r0, r7
    d8d6:	4419      	add	r1, r3
    d8d8:	4408      	add	r0, r1
    d8da:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d8de:	82a1      	strh	r1, [r4, #20]
    d8e0:	7880      	ldrb	r0, [r0, #2]
    d8e2:	75a0      	strb	r0, [r4, #22]
    d8e4:	8225      	strh	r5, [r4, #16]
    d8e6:	2001      	movs	r0, #1
    d8e8:	e7c5      	b.n	d876 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d8ea:	1c80      	adds	r0, r0, #2
    d8ec:	4770      	bx	lr

0000d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d8ee:	b510      	push	{r4, lr}
    d8f0:	88c2      	ldrh	r2, [r0, #6]
    d8f2:	8903      	ldrh	r3, [r0, #8]
    d8f4:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d8f8:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d8fc:	1a61      	subs	r1, r4, r1
    d8fe:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d906:	429a      	cmp	r2, r3
    d908:	d101      	bne.n	d90e <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d90a:	8842      	ldrh	r2, [r0, #2]
    d90c:	4411      	add	r1, r2
    d90e:	7cc2      	ldrb	r2, [r0, #19]
    d910:	8800      	ldrh	r0, [r0, #0]
    d912:	4410      	add	r0, r2
    d914:	1d40      	adds	r0, r0, #5
    d916:	b280      	uxth	r0, r0
    d918:	fb91 f0f0 	sdiv	r0, r1, r0
    d91c:	b280      	uxth	r0, r0
    d91e:	bd10      	pop	{r4, pc}

0000d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d920:	b510      	push	{r4, lr}
    d922:	4604      	mov	r4, r0
    d924:	88c0      	ldrh	r0, [r0, #6]
    d926:	88a1      	ldrh	r1, [r4, #4]
    d928:	4281      	cmp	r1, r0
    d92a:	d003      	beq.n	d934 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d92c:	8960      	ldrh	r0, [r4, #10]
    d92e:	b908      	cbnz	r0, d934 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d930:	89e0      	ldrh	r0, [r4, #14]
    d932:	b108      	cbz	r0, d938 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d934:	2000      	movs	r0, #0
    d936:	bd10      	pop	{r4, pc}
    d938:	1d21      	adds	r1, r4, #4
    d93a:	4620      	mov	r0, r4
    d93c:	f7ff ff2d 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d940:	2000      	movs	r0, #0
    d942:	81e0      	strh	r0, [r4, #14]
    d944:	2001      	movs	r0, #1
    d946:	bd10      	pop	{r4, pc}

0000d948 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d948:	b510      	push	{r4, lr}
    d94a:	4604      	mov	r4, r0
    d94c:	f100 0218 	add.w	r2, r0, #24
    d950:	88c0      	ldrh	r0, [r0, #6]
    d952:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d956:	4402      	add	r2, r0
    d958:	8820      	ldrh	r0, [r4, #0]
    d95a:	2845      	cmp	r0, #69	; 0x45
    d95c:	d200      	bcs.n	d960 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d95e:	2045      	movs	r0, #69	; 0x45
    d960:	4288      	cmp	r0, r1
    d962:	d204      	bcs.n	d96e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d964:	f44f 7182 	mov.w	r1, #260	; 0x104
    d968:	2014      	movs	r0, #20
    d96a:	f7f3 f87b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d96e:	7ca0      	ldrb	r0, [r4, #18]
    d970:	2800      	cmp	r0, #0
    d972:	d003      	beq.n	d97c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d974:	8810      	ldrh	r0, [r2, #0]
    d976:	4288      	cmp	r0, r1
    d978:	d201      	bcs.n	d97e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d97a:	2000      	movs	r0, #0
    d97c:	bd10      	pop	{r4, pc}
    d97e:	8011      	strh	r1, [r2, #0]
    d980:	1da1      	adds	r1, r4, #6
    d982:	4620      	mov	r0, r4
    d984:	f7ff ff09 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d988:	2000      	movs	r0, #0
    d98a:	74a0      	strb	r0, [r4, #18]
    d98c:	2001      	movs	r0, #1
    d98e:	bd10      	pop	{r4, pc}

0000d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d990:	b510      	push	{r4, lr}
    d992:	88c4      	ldrh	r4, [r0, #6]
    d994:	8883      	ldrh	r3, [r0, #4]
    d996:	4601      	mov	r1, r0
    d998:	f100 0218 	add.w	r2, r0, #24
    d99c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d9a0:	4410      	add	r0, r2
    d9a2:	42a3      	cmp	r3, r4
    d9a4:	d002      	beq.n	d9ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d9a6:	8949      	ldrh	r1, [r1, #10]
    d9a8:	2900      	cmp	r1, #0
    d9aa:	d000      	beq.n	d9ae <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d9ac:	2000      	movs	r0, #0
    d9ae:	bd10      	pop	{r4, pc}

0000d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d9b0:	8803      	ldrh	r3, [r0, #0]
    d9b2:	2b45      	cmp	r3, #69	; 0x45
    d9b4:	d200      	bcs.n	d9b8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d9b6:	2345      	movs	r3, #69	; 0x45
    d9b8:	8013      	strh	r3, [r2, #0]
    d9ba:	88c2      	ldrh	r2, [r0, #6]
    d9bc:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d9c0:	f100 0218 	add.w	r2, r0, #24
    d9c4:	441a      	add	r2, r3
    d9c6:	600a      	str	r2, [r1, #0]
    d9c8:	8980      	ldrh	r0, [r0, #12]
    d9ca:	4770      	bx	lr

0000d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d9cc:	7cc0      	ldrb	r0, [r0, #19]
    d9ce:	1d40      	adds	r0, r0, #5
    d9d0:	4408      	add	r0, r1
    d9d2:	1ec0      	subs	r0, r0, #3
    d9d4:	6010      	str	r0, [r2, #0]
    d9d6:	8808      	ldrh	r0, [r1, #0]
    d9d8:	4770      	bx	lr

0000d9da <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9de:	460e      	mov	r6, r1
    d9e0:	88c1      	ldrh	r1, [r0, #6]
    d9e2:	8902      	ldrh	r2, [r0, #8]
    d9e4:	4604      	mov	r4, r0
    d9e6:	f100 0818 	add.w	r8, r0, #24
    d9ea:	8800      	ldrh	r0, [r0, #0]
    d9ec:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d9f0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d9f4:	2845      	cmp	r0, #69	; 0x45
    d9f6:	d200      	bcs.n	d9fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d9f8:	2045      	movs	r0, #69	; 0x45
    d9fa:	42b0      	cmp	r0, r6
    d9fc:	d203      	bcs.n	da06 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d9fe:	21c6      	movs	r1, #198	; 0xc6
    da00:	2014      	movs	r0, #20
    da02:	f7f3 f82f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    da06:	4610      	mov	r0, r2
    da08:	f7ff fee8 	bl	d7dc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    da0c:	b110      	cbz	r0, da14 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    da0e:	2000      	movs	r0, #0
    da10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da14:	42af      	cmp	r7, r5
    da16:	d908      	bls.n	da2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da18:	7ce1      	ldrb	r1, [r4, #19]
    da1a:	1b78      	subs	r0, r7, r5
    da1c:	1a40      	subs	r0, r0, r1
    da1e:	1f40      	subs	r0, r0, #5
    da20:	4286      	cmp	r6, r0
    da22:	dd02      	ble.n	da2a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    da24:	2000      	movs	r0, #0
    da26:	74a0      	strb	r0, [r4, #18]
    da28:	e7f1      	b.n	da0e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    da2a:	eb08 0005 	add.w	r0, r8, r5
    da2e:	2101      	movs	r1, #1
    da30:	8006      	strh	r6, [r0, #0]
    da32:	74a1      	strb	r1, [r4, #18]
    da34:	e7ec      	b.n	da10 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000da36 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    da36:	b538      	push	{r3, r4, r5, lr}
    da38:	88c4      	ldrh	r4, [r0, #6]
    da3a:	8881      	ldrh	r1, [r0, #4]
    da3c:	f100 0218 	add.w	r2, r0, #24
    da40:	f3c1 030e 	ubfx	r3, r1, #0, #15
    da44:	441a      	add	r2, r3
    da46:	42a1      	cmp	r1, r4
    da48:	d010      	beq.n	da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da4a:	8943      	ldrh	r3, [r0, #10]
    da4c:	89c5      	ldrh	r5, [r0, #14]
    da4e:	8812      	ldrh	r2, [r2, #0]
    da50:	442b      	add	r3, r5
    da52:	4293      	cmp	r3, r2
    da54:	d308      	bcc.n	da68 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    da56:	f8ad 1000 	strh.w	r1, [sp]
    da5a:	4669      	mov	r1, sp
    da5c:	f7ff fe9d 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    da60:	f8bd 0000 	ldrh.w	r0, [sp]
    da64:	42a0      	cmp	r0, r4
    da66:	d001      	beq.n	da6c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    da68:	2001      	movs	r0, #1
    da6a:	bd38      	pop	{r3, r4, r5, pc}
    da6c:	2000      	movs	r0, #0
    da6e:	bd38      	pop	{r3, r4, r5, pc}

0000da70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    da70:	b570      	push	{r4, r5, r6, lr}
    da72:	88c6      	ldrh	r6, [r0, #6]
    da74:	8885      	ldrh	r5, [r0, #4]
    da76:	4603      	mov	r3, r0
    da78:	f100 0418 	add.w	r4, r0, #24
    da7c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    da80:	4420      	add	r0, r4
    da82:	42b5      	cmp	r5, r6
    da84:	d102      	bne.n	da8c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    da86:	2000      	movs	r0, #0
    da88:	81d8      	strh	r0, [r3, #14]
    da8a:	bd70      	pop	{r4, r5, r6, pc}
    da8c:	8804      	ldrh	r4, [r0, #0]
    da8e:	895d      	ldrh	r5, [r3, #10]
    da90:	7cde      	ldrb	r6, [r3, #19]
    da92:	1b64      	subs	r4, r4, r5
    da94:	4435      	add	r5, r6
    da96:	4428      	add	r0, r5
    da98:	880d      	ldrh	r5, [r1, #0]
    da9a:	b2a4      	uxth	r4, r4
    da9c:	1c80      	adds	r0, r0, #2
    da9e:	42a5      	cmp	r5, r4
    daa0:	d900      	bls.n	daa4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    daa2:	800c      	strh	r4, [r1, #0]
    daa4:	895c      	ldrh	r4, [r3, #10]
    daa6:	b124      	cbz	r4, dab2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    daa8:	2400      	movs	r4, #0
    daaa:	7014      	strb	r4, [r2, #0]
    daac:	8809      	ldrh	r1, [r1, #0]
    daae:	81d9      	strh	r1, [r3, #14]
    dab0:	bd70      	pop	{r4, r5, r6, pc}
    dab2:	2401      	movs	r4, #1
    dab4:	e7f9      	b.n	daaa <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000dab6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    dab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    daba:	461d      	mov	r5, r3
    dabc:	4616      	mov	r6, r2
    dabe:	9f06      	ldr	r7, [sp, #24]
    dac0:	460b      	mov	r3, r1
    dac2:	4604      	mov	r4, r0
    dac4:	463a      	mov	r2, r7
    dac6:	4629      	mov	r1, r5
    dac8:	4630      	mov	r0, r6
    daca:	f000 f839 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dace:	4283      	cmp	r3, r0
    dad0:	d201      	bcs.n	dad6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    dad2:	219e      	movs	r1, #158	; 0x9e
    dad4:	e012      	b.n	dafc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    dad6:	07a0      	lsls	r0, r4, #30
    dad8:	d001      	beq.n	dade <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    dada:	219f      	movs	r1, #159	; 0x9f
    dadc:	e00e      	b.n	dafc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    dade:	2218      	movs	r2, #24
    dae0:	2100      	movs	r1, #0
    dae2:	4620      	mov	r0, r4
    dae4:	f003 faa9 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dae8:	19a8      	adds	r0, r5, r6
    daea:	1d40      	adds	r0, r0, #5
    daec:	4378      	muls	r0, r7
    daee:	b280      	uxth	r0, r0
    daf0:	74e5      	strb	r5, [r4, #19]
    daf2:	8060      	strh	r0, [r4, #2]
    daf4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    daf8:	d903      	bls.n	db02 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    dafa:	21a4      	movs	r1, #164	; 0xa4
    dafc:	2014      	movs	r0, #20
    dafe:	f7f2 ffb1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db02:	8026      	strh	r6, [r4, #0]
    db04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    db08:	b570      	push	{r4, r5, r6, lr}
    db0a:	460b      	mov	r3, r1
    db0c:	4604      	mov	r4, r0
    db0e:	f100 0118 	add.w	r1, r0, #24
    db12:	8902      	ldrh	r2, [r0, #8]
    db14:	8880      	ldrh	r0, [r0, #4]
    db16:	f3c2 050e 	ubfx	r5, r2, #0, #15
    db1a:	440d      	add	r5, r1
    db1c:	4282      	cmp	r2, r0
    db1e:	d101      	bne.n	db24 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    db20:	2000      	movs	r0, #0
    db22:	bd70      	pop	{r4, r5, r6, pc}
    db24:	b123      	cbz	r3, db30 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    db26:	7ce2      	ldrb	r2, [r4, #19]
    db28:	1ca9      	adds	r1, r5, #2
    db2a:	4618      	mov	r0, r3
    db2c:	f003 fa0b 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db30:	882d      	ldrh	r5, [r5, #0]
    db32:	f104 0108 	add.w	r1, r4, #8
    db36:	4620      	mov	r0, r4
    db38:	f7ff fe2f 	bl	d79a <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    db3c:	4628      	mov	r0, r5
    db3e:	bd70      	pop	{r4, r5, r6, pc}

0000db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    db40:	4401      	add	r1, r0
    db42:	1d49      	adds	r1, r1, #5
    db44:	4351      	muls	r1, r2
    db46:	b28a      	uxth	r2, r1
    db48:	2100      	movs	r1, #0
    db4a:	2845      	cmp	r0, #69	; 0x45
    db4c:	d202      	bcs.n	db54 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    db4e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    db52:	b281      	uxth	r1, r0
    db54:	3218      	adds	r2, #24
    db56:	1850      	adds	r0, r2, r1
    db58:	b280      	uxth	r0, r0
    db5a:	4770      	bx	lr

0000db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    db5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db60:	4688      	mov	r8, r1
    db62:	88c1      	ldrh	r1, [r0, #6]
    db64:	4604      	mov	r4, r0
    db66:	8900      	ldrh	r0, [r0, #8]
    db68:	f3c1 060e 	ubfx	r6, r1, #0, #15
    db6c:	f104 0518 	add.w	r5, r4, #24
    db70:	f3c0 070e 	ubfx	r7, r0, #0, #15
    db74:	eb05 0906 	add.w	r9, r5, r6
    db78:	f7ff fe30 	bl	d7dc <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    db7c:	2200      	movs	r2, #0
    db7e:	b998      	cbnz	r0, dba8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    db80:	8820      	ldrh	r0, [r4, #0]
    db82:	2845      	cmp	r0, #69	; 0x45
    db84:	d200      	bcs.n	db88 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    db86:	2045      	movs	r0, #69	; 0x45
    db88:	42b7      	cmp	r7, r6
    db8a:	d906      	bls.n	db9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db8c:	7ce3      	ldrb	r3, [r4, #19]
    db8e:	1bb9      	subs	r1, r7, r6
    db90:	1ac9      	subs	r1, r1, r3
    db92:	1f49      	subs	r1, r1, #5
    db94:	4281      	cmp	r1, r0
    db96:	da00      	bge.n	db9a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    db98:	4608      	mov	r0, r1
    db9a:	89a1      	ldrh	r1, [r4, #12]
    db9c:	b111      	cbz	r1, dba4 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    db9e:	f8b9 3000 	ldrh.w	r3, [r9]
    dba2:	1ac0      	subs	r0, r0, r3
    dba4:	4540      	cmp	r0, r8
    dba6:	da03      	bge.n	dbb0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    dba8:	8222      	strh	r2, [r4, #16]
    dbaa:	2000      	movs	r0, #0
    dbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dbb0:	7ce0      	ldrb	r0, [r4, #19]
    dbb2:	4429      	add	r1, r5
    dbb4:	1d40      	adds	r0, r0, #5
    dbb6:	4430      	add	r0, r6
    dbb8:	4408      	add	r0, r1
    dbba:	f8a4 8010 	strh.w	r8, [r4, #16]
    dbbe:	1ec0      	subs	r0, r0, #3
    dbc0:	e7f4      	b.n	dbac <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000dbc2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    dbc2:	b570      	push	{r4, r5, r6, lr}
    dbc4:	2300      	movs	r3, #0
    dbc6:	f1a1 0208 	sub.w	r2, r1, #8
    dbca:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    dbce:	42a2      	cmp	r2, r4
    dbd0:	d304      	bcc.n	dbdc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    dbd2:	f240 11cd 	movw	r1, #461	; 0x1cd
    dbd6:	2015      	movs	r0, #21
    dbd8:	f7f2 ff44 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbdc:	6802      	ldr	r2, [r0, #0]
    dbde:	b90a      	cbnz	r2, dbe4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    dbe0:	e01e      	b.n	dc20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dbe2:	4610      	mov	r0, r2
    dbe4:	6802      	ldr	r2, [r0, #0]
    dbe6:	8893      	ldrh	r3, [r2, #4]
    dbe8:	428b      	cmp	r3, r1
    dbea:	d002      	beq.n	dbf2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    dbec:	6813      	ldr	r3, [r2, #0]
    dbee:	2b00      	cmp	r3, #0
    dbf0:	d1f7      	bne.n	dbe2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    dbf2:	8894      	ldrh	r4, [r2, #4]
    dbf4:	4613      	mov	r3, r2
    dbf6:	428c      	cmp	r4, r1
    dbf8:	d101      	bne.n	dbfe <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    dbfa:	6811      	ldr	r1, [r2, #0]
    dbfc:	e00d      	b.n	dc1a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    dbfe:	f101 0508 	add.w	r5, r1, #8
    dc02:	b2ae      	uxth	r6, r5
    dc04:	2500      	movs	r5, #0
    dc06:	42b4      	cmp	r4, r6
    dc08:	d309      	bcc.n	dc1e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    dc0a:	1a64      	subs	r4, r4, r1
    dc0c:	4411      	add	r1, r2
    dc0e:	600d      	str	r5, [r1, #0]
    dc10:	808c      	strh	r4, [r1, #4]
    dc12:	6802      	ldr	r2, [r0, #0]
    dc14:	6812      	ldr	r2, [r2, #0]
    dc16:	6002      	str	r2, [r0, #0]
    dc18:	600a      	str	r2, [r1, #0]
    dc1a:	6001      	str	r1, [r0, #0]
    dc1c:	e000      	b.n	dc20 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    dc1e:	2300      	movs	r3, #0
    dc20:	4618      	mov	r0, r3
    dc22:	bd70      	pop	{r4, r5, r6, pc}

0000dc24 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    dc24:	b510      	push	{r4, lr}
    dc26:	000c      	movs	r4, r1
    dc28:	d004      	beq.n	dc34 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    dc2a:	2c08      	cmp	r4, #8
    dc2c:	d207      	bcs.n	dc3e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    dc2e:	f240 1195 	movw	r1, #405	; 0x195
    dc32:	e00a      	b.n	dc4a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    dc34:	b108      	cbz	r0, dc3a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    dc36:	2100      	movs	r1, #0
    dc38:	6001      	str	r1, [r0, #0]
    dc3a:	2000      	movs	r0, #0
    dc3c:	bd10      	pop	{r4, pc}
    dc3e:	b158      	cbz	r0, dc58 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    dc40:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    dc44:	d304      	bcc.n	dc50 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    dc46:	f240 11a7 	movw	r1, #423	; 0x1a7
    dc4a:	2015      	movs	r0, #21
    dc4c:	f7f2 ff0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc50:	b2a1      	uxth	r1, r4
    dc52:	6800      	ldr	r0, [r0, #0]
    dc54:	f000 f814 	bl	dc80 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    dc58:	1d20      	adds	r0, r4, #4
    dc5a:	bd10      	pop	{r4, pc}

0000dc5c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    dc5c:	2100      	movs	r1, #0
    dc5e:	6802      	ldr	r2, [r0, #0]
    dc60:	e003      	b.n	dc6a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    dc62:	8893      	ldrh	r3, [r2, #4]
    dc64:	6812      	ldr	r2, [r2, #0]
    dc66:	4419      	add	r1, r3
    dc68:	b289      	uxth	r1, r1
    dc6a:	2a00      	cmp	r2, #0
    dc6c:	d1f9      	bne.n	dc62 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    dc6e:	f000 b807 	b.w	dc80 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000dc72 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    dc72:	2300      	movs	r3, #0
    dc74:	600b      	str	r3, [r1, #0]
    dc76:	808a      	strh	r2, [r1, #4]
    dc78:	6802      	ldr	r2, [r0, #0]
    dc7a:	600a      	str	r2, [r1, #0]
    dc7c:	6001      	str	r1, [r0, #0]
    dc7e:	4770      	bx	lr
    dc80:	2300      	movs	r3, #0
    dc82:	6043      	str	r3, [r0, #4]
    dc84:	1d02      	adds	r2, r0, #4
    dc86:	8101      	strh	r1, [r0, #8]
    dc88:	6002      	str	r2, [r0, #0]
    dc8a:	4770      	bx	lr

0000dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    dc8c:	b51c      	push	{r2, r3, r4, lr}
    dc8e:	4604      	mov	r4, r0
    dc90:	2000      	movs	r0, #0
    dc92:	9001      	str	r0, [sp, #4]
    dc94:	9000      	str	r0, [sp, #0]
    dc96:	f88d 4006 	strb.w	r4, [sp, #6]
    dc9a:	e00a      	b.n	dcb2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dc9c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    dca0:	4621      	mov	r1, r4
    dca2:	f7f3 f943 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    dca6:	b120      	cbz	r0, dcb2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    dca8:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    dcac:	2017      	movs	r0, #23
    dcae:	f7f2 fed9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcb2:	4668      	mov	r0, sp
    dcb4:	f7f3 f8f4 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    dcb8:	2800      	cmp	r0, #0
    dcba:	d0ef      	beq.n	dc9c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    dcbc:	bd1c      	pop	{r2, r3, r4, pc}

0000dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    dcbe:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    dcc2:	3aff      	subs	r2, #255	; 0xff
    dcc4:	d000      	beq.n	dcc8 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    dcc6:	b109      	cbz	r1, dccc <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    dcc8:	2000      	movs	r0, #0
    dcca:	4770      	bx	lr
    dccc:	f7f3 b980 	b.w	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
    dcd0:	b510      	push	{r4, lr}
    dcd2:	4604      	mov	r4, r0
    dcd4:	f7f3 f9c8 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    dcd8:	42a0      	cmp	r0, r4
    dcda:	d901      	bls.n	dce0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    dcdc:	2001      	movs	r0, #1
    dcde:	bd10      	pop	{r4, pc}
    dce0:	2000      	movs	r0, #0
    dce2:	bd10      	pop	{r4, pc}

0000dce4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    dce4:	b570      	push	{r4, r5, r6, lr}
    dce6:	460e      	mov	r6, r1
    dce8:	461d      	mov	r5, r3
    dcea:	4611      	mov	r1, r2
    dcec:	f000 f813 	bl	dd16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    dcf0:	4604      	mov	r4, r0
    dcf2:	4629      	mov	r1, r5
    dcf4:	4630      	mov	r0, r6
    dcf6:	f000 f804 	bl	dd02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    dcfa:	4420      	add	r0, r4
    dcfc:	1d00      	adds	r0, r0, #4
    dcfe:	b280      	uxth	r0, r0
    dd00:	bd70      	pop	{r4, r5, r6, pc}
    dd02:	b510      	push	{r4, lr}
    dd04:	460a      	mov	r2, r1
    dd06:	2109      	movs	r1, #9
    dd08:	f7ff ff1a 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd0c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd10:	1cc0      	adds	r0, r0, #3
    dd12:	4008      	ands	r0, r1
    dd14:	bd10      	pop	{r4, pc}
    dd16:	b510      	push	{r4, lr}
    dd18:	460a      	mov	r2, r1
    dd1a:	210a      	movs	r1, #10
    dd1c:	f7ff ff10 	bl	db40 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    dd20:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    dd24:	1cc0      	adds	r0, r0, #3
    dd26:	4008      	ands	r0, r1
    dd28:	bd10      	pop	{r4, pc}
    dd2a:	2800      	cmp	r0, #0
    dd2c:	db09      	blt.n	dd42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    dd2e:	f000 021f 	and.w	r2, r0, #31
    dd32:	2101      	movs	r1, #1
    dd34:	4091      	lsls	r1, r2
    dd36:	0940      	lsrs	r0, r0, #5
    dd38:	0080      	lsls	r0, r0, #2
    dd3a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd3e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dd42:	4770      	bx	lr
    dd44:	2800      	cmp	r0, #0
    dd46:	db0d      	blt.n	dd64 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    dd48:	f000 021f 	and.w	r2, r0, #31
    dd4c:	2101      	movs	r1, #1
    dd4e:	4091      	lsls	r1, r2
    dd50:	0940      	lsrs	r0, r0, #5
    dd52:	0080      	lsls	r0, r0, #2
    dd54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd58:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dd5c:	f3bf 8f4f 	dsb	sy
    dd60:	f3bf 8f6f 	isb	sy
    dd64:	4770      	bx	lr
    dd66:	b510      	push	{r4, lr}
    dd68:	200e      	movs	r0, #14
    dd6a:	f7ff ffeb 	bl	dd44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    dd6e:	200e      	movs	r0, #14
    dd70:	f7ff ffdb 	bl	dd2a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dd74:	200f      	movs	r0, #15
    dd76:	f7ff ffe5 	bl	dd44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    dd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd7e:	200f      	movs	r0, #15
    dd80:	f7ff bfd3 	b.w	dd2a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dd84:	2800      	cmp	r0, #0
    dd86:	db09      	blt.n	dd9c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    dd88:	f000 021f 	and.w	r2, r0, #31
    dd8c:	2101      	movs	r1, #1
    dd8e:	4091      	lsls	r1, r2
    dd90:	0940      	lsrs	r0, r0, #5
    dd92:	0080      	lsls	r0, r0, #2
    dd94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dd98:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dd9c:	4770      	bx	lr
    dd9e:	5840      	ldr	r0, [r0, r1]
    dda0:	2800      	cmp	r0, #0
    dda2:	d000      	beq.n	dda6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    dda4:	2001      	movs	r0, #1
    dda6:	4770      	bx	lr

0000dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dda8:	b510      	push	{r4, lr}
    ddaa:	4604      	mov	r4, r0
    ddac:	4620      	mov	r0, r4
    ddae:	f7f3 facd 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    ddb2:	2811      	cmp	r0, #17
    ddb4:	d0fa      	beq.n	ddac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    ddb6:	bd10      	pop	{r4, pc}

0000ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    ddb8:	b510      	push	{r4, lr}
    ddba:	f7ff fff5 	bl	dda8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    ddbe:	2800      	cmp	r0, #0
    ddc0:	d003      	beq.n	ddca <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    ddc2:	21a0      	movs	r1, #160	; 0xa0
    ddc4:	201d      	movs	r0, #29
    ddc6:	f7f2 fe4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddca:	bd10      	pop	{r4, pc}

0000ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    ddcc:	f7f3 bc1c 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000ddd0 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    ddd0:	f7f3 bc0a 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    ddd4:	b510      	push	{r4, lr}
    ddd6:	4050      	eors	r0, r2
    ddd8:	780a      	ldrb	r2, [r1, #0]
    ddda:	781c      	ldrb	r4, [r3, #0]
    dddc:	4062      	eors	r2, r4
    ddde:	4410      	add	r0, r2
    dde0:	784a      	ldrb	r2, [r1, #1]
    dde2:	785c      	ldrb	r4, [r3, #1]
    dde4:	4062      	eors	r2, r4
    dde6:	4410      	add	r0, r2
    dde8:	788a      	ldrb	r2, [r1, #2]
    ddea:	789c      	ldrb	r4, [r3, #2]
    ddec:	4062      	eors	r2, r4
    ddee:	4410      	add	r0, r2
    ddf0:	78ca      	ldrb	r2, [r1, #3]
    ddf2:	78dc      	ldrb	r4, [r3, #3]
    ddf4:	4062      	eors	r2, r4
    ddf6:	4410      	add	r0, r2
    ddf8:	790a      	ldrb	r2, [r1, #4]
    ddfa:	791c      	ldrb	r4, [r3, #4]
    ddfc:	7949      	ldrb	r1, [r1, #5]
    ddfe:	4062      	eors	r2, r4
    de00:	4410      	add	r0, r2
    de02:	795a      	ldrb	r2, [r3, #5]
    de04:	4051      	eors	r1, r2
    de06:	42c1      	cmn	r1, r0
    de08:	d101      	bne.n	de0e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    de0a:	2001      	movs	r0, #1
    de0c:	bd10      	pop	{r4, pc}
    de0e:	2000      	movs	r0, #0
    de10:	bd10      	pop	{r4, pc}

0000de12 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    de12:	b510      	push	{r4, lr}
    de14:	2900      	cmp	r1, #0
    de16:	4604      	mov	r4, r0
    de18:	f04f 0106 	mov.w	r1, #6
    de1c:	d002      	beq.n	de24 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    de1e:	f7f2 feb3 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de22:	e001      	b.n	de28 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    de24:	f7f2 febe 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de28:	7960      	ldrb	r0, [r4, #5]
    de2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    de2e:	7160      	strb	r0, [r4, #5]
    de30:	bd10      	pop	{r4, pc}

0000de32 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    de32:	4770      	bx	lr

0000de34 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    de34:	b530      	push	{r4, r5, lr}
    de36:	460c      	mov	r4, r1
    de38:	4605      	mov	r5, r0
    de3a:	b08d      	sub	sp, #52	; 0x34
    de3c:	f04f 0103 	mov.w	r1, #3
    de40:	f104 0003 	add.w	r0, r4, #3
    de44:	b112      	cbz	r2, de4c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    de46:	f7f2 fe9f 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    de4a:	e001      	b.n	de50 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    de4c:	f7f2 feaa 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    de50:	7960      	ldrb	r0, [r4, #5]
    de52:	220d      	movs	r2, #13
    de54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    de58:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    de5c:	7160      	strb	r0, [r4, #5]
    de5e:	2100      	movs	r1, #0
    de60:	a804      	add	r0, sp, #16
    de62:	f003 f8ea 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de66:	78e0      	ldrb	r0, [r4, #3]
    de68:	f88d 001f 	strb.w	r0, [sp, #31]
    de6c:	7920      	ldrb	r0, [r4, #4]
    de6e:	f88d 001e 	strb.w	r0, [sp, #30]
    de72:	7960      	ldrb	r0, [r4, #5]
    de74:	f88d 001d 	strb.w	r0, [sp, #29]
    de78:	2210      	movs	r2, #16
    de7a:	4629      	mov	r1, r5
    de7c:	4668      	mov	r0, sp
    de7e:	f003 f862 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de82:	4668      	mov	r0, sp
    de84:	f7ff ff98 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    de88:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    de8c:	7020      	strb	r0, [r4, #0]
    de8e:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    de92:	7060      	strb	r0, [r4, #1]
    de94:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    de98:	70a0      	strb	r0, [r4, #2]
    de9a:	b00d      	add	sp, #52	; 0x34
    de9c:	bd30      	pop	{r4, r5, pc}

0000de9e <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    de9e:	b530      	push	{r4, r5, lr}
    dea0:	b08d      	sub	sp, #52	; 0x34
    dea2:	460c      	mov	r4, r1
    dea4:	4605      	mov	r5, r0
    dea6:	220d      	movs	r2, #13
    dea8:	2100      	movs	r1, #0
    deaa:	a804      	add	r0, sp, #16
    deac:	f003 f8c5 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    deb0:	78e0      	ldrb	r0, [r4, #3]
    deb2:	f88d 001f 	strb.w	r0, [sp, #31]
    deb6:	7920      	ldrb	r0, [r4, #4]
    deb8:	f88d 001e 	strb.w	r0, [sp, #30]
    debc:	7960      	ldrb	r0, [r4, #5]
    debe:	f88d 001d 	strb.w	r0, [sp, #29]
    dec2:	2210      	movs	r2, #16
    dec4:	4629      	mov	r1, r5
    dec6:	4668      	mov	r0, sp
    dec8:	f003 f83d 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    decc:	4668      	mov	r0, sp
    dece:	f7ff ff73 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ded2:	7820      	ldrb	r0, [r4, #0]
    ded4:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    ded8:	4288      	cmp	r0, r1
    deda:	d10c      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dedc:	7860      	ldrb	r0, [r4, #1]
    dede:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    dee2:	4288      	cmp	r0, r1
    dee4:	d107      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    dee6:	78a0      	ldrb	r0, [r4, #2]
    dee8:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    deec:	4288      	cmp	r0, r1
    deee:	d102      	bne.n	def6 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    def0:	2001      	movs	r0, #1
    def2:	b00d      	add	sp, #52	; 0x34
    def4:	bd30      	pop	{r4, r5, pc}
    def6:	2000      	movs	r0, #0
    def8:	e7fb      	b.n	def2 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000defa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    defa:	f7f3 beeb 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    defe:	b510      	push	{r4, lr}
    df00:	2801      	cmp	r0, #1
    df02:	d008      	beq.n	df16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    df04:	2802      	cmp	r0, #2
    df06:	d004      	beq.n	df12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    df08:	f240 4122 	movw	r1, #1058	; 0x422
    df0c:	2006      	movs	r0, #6
    df0e:	f7f2 fda9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df12:	2001      	movs	r0, #1
    df14:	bd10      	pop	{r4, pc}
    df16:	2000      	movs	r0, #0
    df18:	bd10      	pop	{r4, pc}
    df1a:	2900      	cmp	r1, #0
    df1c:	d004      	beq.n	df28 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    df1e:	2801      	cmp	r0, #1
    df20:	d003      	beq.n	df2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    df22:	2901      	cmp	r1, #1
    df24:	d001      	beq.n	df2a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    df26:	2002      	movs	r0, #2
    df28:	4770      	bx	lr
    df2a:	2001      	movs	r0, #1
    df2c:	4770      	bx	lr
    df2e:	f7ff bd9f 	b.w	da70 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000df32 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    df32:	2101      	movs	r1, #1
    df34:	f7f4 baf2 	b.w	251c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000df38 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    df38:	b510      	push	{r4, lr}
    df3a:	f002 fcad 	bl	10898 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    df3e:	b118      	cbz	r0, df48 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    df40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df44:	f7f9 bdd2 	b.w	7aec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    df48:	20ff      	movs	r0, #255	; 0xff
    df4a:	bd10      	pop	{r4, pc}

0000df4c <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    df4c:	b510      	push	{r4, lr}
    df4e:	f7f4 fb2d 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df52:	2810      	cmp	r0, #16
    df54:	d003      	beq.n	df5e <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    df56:	f7f4 faf9 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    df5a:	2810      	cmp	r0, #16
    df5c:	d100      	bne.n	df60 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    df5e:	2008      	movs	r0, #8
    df60:	bd10      	pop	{r4, pc}

0000df62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    df62:	b510      	push	{r4, lr}
    df64:	f7f4 fb22 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df68:	2810      	cmp	r0, #16
    df6a:	d007      	beq.n	df7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    df6c:	f7f4 faee 	bl	254c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    df70:	2810      	cmp	r0, #16
    df72:	d003      	beq.n	df7c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    df74:	f7f4 fb78 	bl	2668 <CONFIG_BT_RX_STACK_SIZE+0xe8>
    df78:	2001      	movs	r0, #1
    df7a:	bd10      	pop	{r4, pc}
    df7c:	2000      	movs	r0, #0
    df7e:	bd10      	pop	{r4, pc}

0000df80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    df80:	b510      	push	{r4, lr}
    df82:	f7f4 fb13 	bl	25ac <CONFIG_BT_RX_STACK_SIZE+0x2c>
    df86:	2810      	cmp	r0, #16
    df88:	d003      	beq.n	df92 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    df8a:	f7f4 fbb5 	bl	26f8 <CONFIG_BT_RX_STACK_SIZE+0x178>
    df8e:	2001      	movs	r0, #1
    df90:	bd10      	pop	{r4, pc}
    df92:	2000      	movs	r0, #0
    df94:	bd10      	pop	{r4, pc}

0000df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    df96:	b570      	push	{r4, r5, r6, lr}
    df98:	460e      	mov	r6, r1
    df9a:	b08c      	sub	sp, #48	; 0x30
    df9c:	4614      	mov	r4, r2
    df9e:	4601      	mov	r1, r0
    dfa0:	461d      	mov	r5, r3
    dfa2:	2210      	movs	r2, #16
    dfa4:	4668      	mov	r0, sp
    dfa6:	f000 f997 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfaa:	2210      	movs	r2, #16
    dfac:	4631      	mov	r1, r6
    dfae:	a804      	add	r0, sp, #16
    dfb0:	f000 f992 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfb4:	4668      	mov	r0, sp
    dfb6:	f7ff feff 	bl	ddb8 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dfba:	a908      	add	r1, sp, #32
    dfbc:	f04f 0210 	mov.w	r2, #16
    dfc0:	4628      	mov	r0, r5
    dfc2:	b11c      	cbz	r4, dfcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dfc4:	f000 f988 	bl	e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dfc8:	b00c      	add	sp, #48	; 0x30
    dfca:	bd70      	pop	{r4, r5, r6, pc}
    dfcc:	f002 ffbb 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dfd0:	e7fa      	b.n	dfc8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    dfd2:	0781      	lsls	r1, r0, #30
    dfd4:	d501      	bpl.n	dfda <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    dfd6:	2002      	movs	r0, #2
    dfd8:	4770      	bx	lr
    dfda:	07c0      	lsls	r0, r0, #31
    dfdc:	d0fc      	beq.n	dfd8 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    dfde:	2001      	movs	r0, #1
    dfe0:	4770      	bx	lr

0000dfe2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    dfe2:	b570      	push	{r4, r5, r6, lr}
    dfe4:	4606      	mov	r6, r0
    dfe6:	7900      	ldrb	r0, [r0, #4]
    dfe8:	0940      	lsrs	r0, r0, #5
    dfea:	d10e      	bne.n	e00a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dfec:	2500      	movs	r5, #0
    dfee:	462c      	mov	r4, r5
    dff0:	5d30      	ldrb	r0, [r6, r4]
    dff2:	f000 fd40 	bl	ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dff6:	1c64      	adds	r4, r4, #1
    dff8:	4428      	add	r0, r5
    dffa:	b2e4      	uxtb	r4, r4
    dffc:	b2c5      	uxtb	r5, r0
    dffe:	2c05      	cmp	r4, #5
    e000:	d3f6      	bcc.n	dff0 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    e002:	2d01      	cmp	r5, #1
    e004:	d901      	bls.n	e00a <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    e006:	2001      	movs	r0, #1
    e008:	bd70      	pop	{r4, r5, r6, pc}
    e00a:	2000      	movs	r0, #0
    e00c:	bd70      	pop	{r4, r5, r6, pc}

0000e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e00e:	b510      	push	{r4, lr}
    e010:	460c      	mov	r4, r1
    e012:	2100      	movs	r1, #0
    e014:	f7ff fe53 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e018:	6060      	str	r0, [r4, #4]
    e01a:	b110      	cbz	r0, e022 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e01c:	2000      	movs	r0, #0
    e01e:	7020      	strb	r0, [r4, #0]
    e020:	bd10      	pop	{r4, pc}
    e022:	2002      	movs	r0, #2
    e024:	bd10      	pop	{r4, pc}

0000e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e026:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e02a:	4348      	muls	r0, r1
    e02c:	4770      	bx	lr

0000e02e <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e02e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e032:	fbb0 f0f1 	udiv	r0, r0, r1
    e036:	b280      	uxth	r0, r0
    e038:	4770      	bx	lr

0000e03a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e03a:	b570      	push	{r4, r5, r6, lr}
    e03c:	4604      	mov	r4, r0
    e03e:	4290      	cmp	r0, r2
    e040:	d20b      	bcs.n	e05a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e042:	1b10      	subs	r0, r2, r4
    e044:	2865      	cmp	r0, #101	; 0x65
    e046:	d200      	bcs.n	e04a <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e048:	2065      	movs	r0, #101	; 0x65
    e04a:	1825      	adds	r5, r4, r0
    e04c:	428d      	cmp	r5, r1
    e04e:	d803      	bhi.n	e058 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e050:	2103      	movs	r1, #3
    e052:	f7fc f91f 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e056:	b108      	cbz	r0, e05c <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e058:	4620      	mov	r0, r4
    e05a:	bd70      	pop	{r4, r5, r6, pc}
    e05c:	4628      	mov	r0, r5
    e05e:	bd70      	pop	{r4, r5, r6, pc}

0000e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e060:	b510      	push	{r4, lr}
    e062:	f1a2 0310 	sub.w	r3, r2, #16
    e066:	290d      	cmp	r1, #13
    e068:	d258      	bcs.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e06a:	e8df f001 	tbb	[pc, r1]
    e06e:	0907      	.short	0x0907
    e070:	1d1a150e 	.word	0x1d1a150e
    e074:	5937342c 	.word	0x5937342c
    e078:	0053423b 	.word	0x0053423b
    e07c:	b38a      	cbz	r2, e0e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    e07e:	e04d      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e080:	2a06      	cmp	r2, #6
    e082:	d049      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e084:	2a07      	cmp	r2, #7
    e086:	d047      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e088:	e048      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e08a:	2a0b      	cmp	r2, #11
    e08c:	d044      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e08e:	2a0c      	cmp	r2, #12
    e090:	d042      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e092:	2a0a      	cmp	r2, #10
    e094:	d040      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e096:	e041      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e098:	2a0d      	cmp	r2, #13
    e09a:	d03d      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e09c:	2a0e      	cmp	r2, #14
    e09e:	d03b      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a0:	e03c      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0a2:	2b0c      	cmp	r3, #12
    e0a4:	d938      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0a6:	e039      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0a8:	2a13      	cmp	r2, #19
    e0aa:	d035      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ac:	2a12      	cmp	r2, #18
    e0ae:	d033      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0b0:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0b4:	b120      	cbz	r0, e0c0 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    e0b6:	2a13      	cmp	r2, #19
    e0b8:	d330      	bcc.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0ba:	2a1b      	cmp	r2, #27
    e0bc:	d92c      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0be:	e02d      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0c0:	2a17      	cmp	r2, #23
    e0c2:	d2fa      	bcs.n	e0ba <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    e0c4:	e02a      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0c6:	2b03      	cmp	r3, #3
    e0c8:	d926      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ca:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    e0ce:	b300      	cbz	r0, e112 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    e0d0:	2a1c      	cmp	r2, #28
    e0d2:	d921      	bls.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0d4:	e022      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0d6:	2a04      	cmp	r2, #4
    e0d8:	d01e      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0da:	e01f      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0dc:	2a01      	cmp	r2, #1
    e0de:	d01b      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e0:	e01c      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0e2:	e019      	b.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e4:	2a1d      	cmp	r2, #29
    e0e6:	d017      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0e8:	2a1e      	cmp	r2, #30
    e0ea:	d015      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0ec:	2a1f      	cmp	r2, #31
    e0ee:	d013      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f0:	e014      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e0f2:	2a20      	cmp	r2, #32
    e0f4:	d010      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0f6:	2a21      	cmp	r2, #33	; 0x21
    e0f8:	d00e      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0fa:	2a22      	cmp	r2, #34	; 0x22
    e0fc:	d00c      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e0fe:	2a23      	cmp	r2, #35	; 0x23
    e100:	d00a      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e102:	2a24      	cmp	r2, #36	; 0x24
    e104:	d008      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e106:	2a25      	cmp	r2, #37	; 0x25
    e108:	d006      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10a:	2a26      	cmp	r2, #38	; 0x26
    e10c:	d004      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e10e:	2a2e      	cmp	r2, #46	; 0x2e
    e110:	d002      	beq.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    e112:	e003      	b.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e114:	2a28      	cmp	r2, #40	; 0x28
    e116:	d101      	bne.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e118:	2001      	movs	r0, #1
    e11a:	bd10      	pop	{r4, pc}
    e11c:	2000      	movs	r0, #0
    e11e:	bd10      	pop	{r4, pc}
    e120:	2a05      	cmp	r2, #5
    e122:	d1fb      	bne.n	e11c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    e124:	e7f8      	b.n	e118 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000e126 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    e126:	280b      	cmp	r0, #11
    e128:	d019      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e12a:	280c      	cmp	r0, #12
    e12c:	d017      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e12e:	280a      	cmp	r0, #10
    e130:	d015      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e132:	280d      	cmp	r0, #13
    e134:	d013      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e136:	280e      	cmp	r0, #14
    e138:	d011      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13a:	2820      	cmp	r0, #32
    e13c:	d00f      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e13e:	2821      	cmp	r0, #33	; 0x21
    e140:	d00d      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e142:	2822      	cmp	r0, #34	; 0x22
    e144:	d00b      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e146:	2823      	cmp	r0, #35	; 0x23
    e148:	d009      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14a:	2824      	cmp	r0, #36	; 0x24
    e14c:	d007      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e14e:	2825      	cmp	r0, #37	; 0x25
    e150:	d005      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e152:	2826      	cmp	r0, #38	; 0x26
    e154:	d003      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e156:	282e      	cmp	r0, #46	; 0x2e
    e158:	d001      	beq.n	e15e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    e15a:	2000      	movs	r0, #0
    e15c:	4770      	bx	lr
    e15e:	2001      	movs	r0, #1
    e160:	4770      	bx	lr

0000e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    e162:	f011 0f0c 	tst.w	r1, #12
    e166:	d018      	beq.n	e19a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    e168:	074a      	lsls	r2, r1, #29
    e16a:	f44f 7116 	mov.w	r1, #600	; 0x258
    e16e:	2a00      	cmp	r2, #0
    e170:	da02      	bge.n	e178 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    e172:	f04f 0210 	mov.w	r2, #16
    e176:	e001      	b.n	e17c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    e178:	f04f 0240 	mov.w	r2, #64	; 0x40
    e17c:	da01      	bge.n	e182 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    e17e:	f04f 0196 	mov.w	r1, #150	; 0x96
    e182:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    e186:	eba0 0301 	sub.w	r3, r0, r1
    e18a:	4288      	cmp	r0, r1
    e18c:	d903      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e18e:	fb93 f0f2 	sdiv	r0, r3, r2
    e192:	b280      	uxth	r0, r0
    e194:	4770      	bx	lr
    e196:	2000      	movs	r0, #0
    e198:	4770      	bx	lr
    e19a:	2902      	cmp	r1, #2
    e19c:	d008      	beq.n	e1b0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    e19e:	2870      	cmp	r0, #112	; 0x70
    e1a0:	d9f9      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1a2:	3870      	subs	r0, #112	; 0x70
    e1a4:	17c1      	asrs	r1, r0, #31
    e1a6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    e1aa:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    e1ae:	4770      	bx	lr
    e1b0:	283c      	cmp	r0, #60	; 0x3c
    e1b2:	d9f0      	bls.n	e196 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    e1b4:	383c      	subs	r0, #60	; 0x3c
    e1b6:	17c1      	asrs	r1, r0, #31
    e1b8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    e1bc:	f3c0 008f 	ubfx	r0, r0, #2, #16
    e1c0:	4770      	bx	lr

0000e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    e1c2:	6809      	ldr	r1, [r1, #0]
    e1c4:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    e1c8:	4770      	bx	lr

0000e1ca <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    e1ca:	2801      	cmp	r0, #1
    e1cc:	d002      	beq.n	e1d4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1ce:	2802      	cmp	r0, #2
    e1d0:	d000      	beq.n	e1d4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    e1d2:	2000      	movs	r0, #0
    e1d4:	4770      	bx	lr

0000e1d6 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    e1d6:	b530      	push	{r4, r5, lr}
    e1d8:	242a      	movs	r4, #42	; 0x2a
    e1da:	2523      	movs	r5, #35	; 0x23
    e1dc:	2a16      	cmp	r2, #22
    e1de:	d109      	bne.n	e1f4 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    e1e0:	280b      	cmp	r0, #11
    e1e2:	d00b      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1e4:	280c      	cmp	r0, #12
    e1e6:	d009      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1e8:	280d      	cmp	r0, #13
    e1ea:	d007      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1ec:	280e      	cmp	r0, #14
    e1ee:	d005      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e1f0:	2820      	cmp	r0, #32
    e1f2:	d005      	beq.n	e200 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e1f4:	b171      	cbz	r1, e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e1f6:	2a16      	cmp	r2, #22
    e1f8:	d10c      	bne.n	e214 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    e1fa:	e004      	b.n	e206 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    e1fc:	701c      	strb	r4, [r3, #0]
    e1fe:	e000      	b.n	e202 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    e200:	701d      	strb	r5, [r3, #0]
    e202:	2001      	movs	r0, #1
    e204:	bd30      	pop	{r4, r5, pc}
    e206:	7808      	ldrb	r0, [r1, #0]
    e208:	2801      	cmp	r0, #1
    e20a:	d0f7      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e20c:	2800      	cmp	r0, #0
    e20e:	d0f5      	beq.n	e1fc <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    e210:	2816      	cmp	r0, #22
    e212:	d0f5      	beq.n	e200 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    e214:	2000      	movs	r0, #0
    e216:	bd30      	pop	{r4, r5, pc}

0000e218 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e21a:	b2cf      	uxtb	r7, r1
    e21c:	4606      	mov	r6, r0
    e21e:	f3c1 2407 	ubfx	r4, r1, #8, #8
    e222:	4621      	mov	r1, r4
    e224:	4638      	mov	r0, r7
    e226:	f000 f89e 	bl	e366 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e22a:	b2f5      	uxtb	r5, r6
    e22c:	f3c6 2607 	ubfx	r6, r6, #8, #8
    e230:	b920      	cbnz	r0, e23c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    e232:	4631      	mov	r1, r6
    e234:	4628      	mov	r0, r5
    e236:	f000 f896 	bl	e366 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    e23a:	b140      	cbz	r0, e24e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    e23c:	4027      	ands	r7, r4
    e23e:	4035      	ands	r5, r6
    e240:	403d      	ands	r5, r7
    e242:	4644      	mov	r4, r8
    e244:	f365 0407 	bfi	r4, r5, #0, #8
    e248:	f365 240f 	bfi	r4, r5, #8, #8
    e24c:	e006      	b.n	e25c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    e24e:	4025      	ands	r5, r4
    e250:	4644      	mov	r4, r8
    e252:	f365 0407 	bfi	r4, r5, #0, #8
    e256:	403e      	ands	r6, r7
    e258:	f366 240f 	bfi	r4, r6, #8, #8
    e25c:	b2e0      	uxtb	r0, r4
    e25e:	f7ff feb8 	bl	dfd2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e262:	f88d 0000 	strb.w	r0, [sp]
    e266:	f3c4 2007 	ubfx	r0, r4, #8, #8
    e26a:	f7ff feb2 	bl	dfd2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    e26e:	f88d 0001 	strb.w	r0, [sp, #1]
    e272:	f8bd 0000 	ldrh.w	r0, [sp]
    e276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    e278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e27c:	4607      	mov	r7, r0
    e27e:	460e      	mov	r6, r1
    e280:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e284:	f7fc fc32 	bl	aaec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e288:	b198      	cbz	r0, e2b2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e28a:	b31e      	cbz	r6, e2d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e28c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e290:	1b40      	subs	r0, r0, r5
    e292:	2300      	movs	r3, #0
    e294:	eb61 0104 	sbc.w	r1, r1, r4
    e298:	461a      	mov	r2, r3
    e29a:	1a1b      	subs	r3, r3, r0
    e29c:	418a      	sbcs	r2, r1
    e29e:	da19      	bge.n	e2d4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e2a0:	1c42      	adds	r2, r0, #1
    e2a2:	f171 0100 	sbcs.w	r1, r1, #0
    e2a6:	db07      	blt.n	e2b8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e2a8:	f240 211b 	movw	r1, #539	; 0x21b
    e2ac:	2029      	movs	r0, #41	; 0x29
    e2ae:	f7f2 fbd9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2b2:	f240 2111 	movw	r1, #529	; 0x211
    e2b6:	e7f9      	b.n	e2ac <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e2b8:	4430      	add	r0, r6
    e2ba:	1e40      	subs	r0, r0, #1
    e2bc:	fbb0 f1f6 	udiv	r1, r0, r6
    e2c0:	fb01 f006 	mul.w	r0, r1, r6
    e2c4:	1828      	adds	r0, r5, r0
    e2c6:	f144 0400 	adc.w	r4, r4, #0
    e2ca:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e2ce:	4608      	mov	r0, r1
    e2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e2d4:	2000      	movs	r0, #0
    e2d6:	e7fb      	b.n	e2d0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e2d8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e2d8:	b530      	push	{r4, r5, lr}
    e2da:	4613      	mov	r3, r2
    e2dc:	e006      	b.n	e2ec <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e2de:	18cc      	adds	r4, r1, r3
    e2e0:	1ad5      	subs	r5, r2, r3
    e2e2:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e2e6:	1e5b      	subs	r3, r3, #1
    e2e8:	5544      	strb	r4, [r0, r5]
    e2ea:	b2db      	uxtb	r3, r3
    e2ec:	2b00      	cmp	r3, #0
    e2ee:	d1f6      	bne.n	e2de <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e2f0:	bd30      	pop	{r4, r5, pc}

0000e2f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e2f2:	2300      	movs	r3, #0
    e2f4:	6403      	str	r3, [r0, #64]	; 0x40
    e2f6:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e2fa:	f240 2371 	movw	r3, #625	; 0x271
    e2fe:	435a      	muls	r2, r3
    e300:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e304:	1e52      	subs	r2, r2, #1
    e306:	fbb2 f1f1 	udiv	r1, r2, r1
    e30a:	6441      	str	r1, [r0, #68]	; 0x44
    e30c:	4770      	bx	lr

0000e30e <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    e30e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e312:	fbb0 f0f1 	udiv	r0, r0, r1
    e316:	b280      	uxth	r0, r0
    e318:	4770      	bx	lr

0000e31a <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    e31a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e31e:	fbb0 f2f1 	udiv	r2, r0, r1
    e322:	fb01 0112 	mls	r1, r1, r2, r0
    e326:	1a40      	subs	r0, r0, r1
    e328:	4770      	bx	lr

0000e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e32a:	f240 2171 	movw	r1, #625	; 0x271
    e32e:	fb10 f001 	smulbb	r0, r0, r1
    e332:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e336:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e33a:	4770      	bx	lr

0000e33c <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    e33c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e340:	fbb0 f0f1 	udiv	r0, r0, r1
    e344:	b2c0      	uxtb	r0, r0
    e346:	4770      	bx	lr

0000e348 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e348:	b510      	push	{r4, lr}
    e34a:	2300      	movs	r3, #0
    e34c:	461a      	mov	r2, r3
    e34e:	e003      	b.n	e358 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e350:	5c84      	ldrb	r4, [r0, r2]
    e352:	4323      	orrs	r3, r4
    e354:	1c52      	adds	r2, r2, #1
    e356:	b2d2      	uxtb	r2, r2
    e358:	428a      	cmp	r2, r1
    e35a:	d3f9      	bcc.n	e350 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e35c:	b10b      	cbz	r3, e362 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e35e:	2000      	movs	r0, #0
    e360:	bd10      	pop	{r4, pc}
    e362:	2001      	movs	r0, #1
    e364:	bd10      	pop	{r4, pc}
    e366:	2801      	cmp	r0, #1
    e368:	d002      	beq.n	e370 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e36a:	2802      	cmp	r0, #2
    e36c:	d003      	beq.n	e376 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x2e>
    e36e:	e004      	b.n	e37a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e370:	2901      	cmp	r1, #1
    e372:	d004      	beq.n	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e374:	e001      	b.n	e37a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x32>
    e376:	2902      	cmp	r1, #2
    e378:	d001      	beq.n	e37e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x36>
    e37a:	2000      	movs	r0, #0
    e37c:	4770      	bx	lr
    e37e:	2001      	movs	r0, #1
    e380:	4770      	bx	lr
    e382:	4401      	add	r1, r0
    e384:	2914      	cmp	r1, #20
    e386:	dd01      	ble.n	e38c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x44>
    e388:	2014      	movs	r0, #20
    e38a:	4770      	bx	lr
    e38c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e390:	4281      	cmp	r1, r0
    e392:	dbfa      	blt.n	e38a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x42>
    e394:	b248      	sxtb	r0, r1
    e396:	4770      	bx	lr

0000e398 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e398:	b570      	push	{r4, r5, r6, lr}
    e39a:	4605      	mov	r5, r0
    e39c:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e3a0:	b286      	uxth	r6, r0
    e3a2:	4610      	mov	r0, r2
    e3a4:	7aec      	ldrb	r4, [r5, #11]
    e3a6:	4631      	mov	r1, r6
    e3a8:	f000 f863 	bl	e472 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e3ac:	4070      	eors	r0, r6
    e3ae:	2125      	movs	r1, #37	; 0x25
    e3b0:	fbb0 f2f1 	udiv	r2, r0, r1
    e3b4:	fb01 0112 	mls	r1, r1, r2, r0
    e3b8:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e3bc:	f001 0307 	and.w	r3, r1, #7
    e3c0:	7852      	ldrb	r2, [r2, #1]
    e3c2:	2601      	movs	r6, #1
    e3c4:	409e      	lsls	r6, r3
    e3c6:	4232      	tst	r2, r6
    e3c8:	d001      	beq.n	e3ce <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e3ca:	4608      	mov	r0, r1
    e3cc:	bd70      	pop	{r4, r5, r6, pc}
    e3ce:	4344      	muls	r4, r0
    e3d0:	0c21      	lsrs	r1, r4, #16
    e3d2:	4628      	mov	r0, r5
    e3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e3d8:	f7f4 baae 	b.w	2938 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000e3dc <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e3dc:	b510      	push	{r4, lr}
    e3de:	4604      	mov	r4, r0
    e3e0:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e3e4:	b108      	cbz	r0, e3ea <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e3e6:	2825      	cmp	r0, #37	; 0x25
    e3e8:	d901      	bls.n	e3ee <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e3ea:	2012      	movs	r0, #18
    e3ec:	bd10      	pop	{r4, pc}
    e3ee:	b132      	cbz	r2, e3fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e3f0:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e3f4:	b128      	cbz	r0, e402 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e3f6:	2801      	cmp	r0, #1
    e3f8:	d009      	beq.n	e40e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e3fa:	201f      	movs	r0, #31
    e3fc:	bd10      	pop	{r4, pc}
    e3fe:	2000      	movs	r0, #0
    e400:	bd10      	pop	{r4, pc}
    e402:	4620      	mov	r0, r4
    e404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e408:	4611      	mov	r1, r2
    e40a:	f7f4 ba4d 	b.w	28a8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    e40e:	8aa2      	ldrh	r2, [r4, #20]
    e410:	6949      	ldr	r1, [r1, #20]
    e412:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e416:	f7ff ffbf 	bl	e398 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e41a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e41e:	e7ee      	b.n	e3fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e420 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e420:	b570      	push	{r4, r5, r6, lr}
    e422:	4604      	mov	r4, r0
    e424:	1c40      	adds	r0, r0, #1
    e426:	4288      	cmp	r0, r1
    e428:	d004      	beq.n	e434 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e42a:	6808      	ldr	r0, [r1, #0]
    e42c:	f8c4 0001 	str.w	r0, [r4, #1]
    e430:	7908      	ldrb	r0, [r1, #4]
    e432:	7160      	strb	r0, [r4, #5]
    e434:	7960      	ldrb	r0, [r4, #5]
    e436:	f000 001f 	and.w	r0, r0, #31
    e43a:	7160      	strb	r0, [r4, #5]
    e43c:	2000      	movs	r0, #0
    e43e:	72e0      	strb	r0, [r4, #11]
    e440:	4605      	mov	r5, r0
    e442:	1966      	adds	r6, r4, r5
    e444:	7870      	ldrb	r0, [r6, #1]
    e446:	f000 fb16 	bl	ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e44a:	71b0      	strb	r0, [r6, #6]
    e44c:	7ae1      	ldrb	r1, [r4, #11]
    e44e:	1c6d      	adds	r5, r5, #1
    e450:	4408      	add	r0, r1
    e452:	b2ed      	uxtb	r5, r5
    e454:	72e0      	strb	r0, [r4, #11]
    e456:	2d05      	cmp	r5, #5
    e458:	d3f3      	bcc.n	e442 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e45a:	bd70      	pop	{r4, r5, r6, pc}
    e45c:	b2c1      	uxtb	r1, r0
    e45e:	fa91 f1a1 	rbit	r1, r1
    e462:	0a00      	lsrs	r0, r0, #8
    e464:	0e09      	lsrs	r1, r1, #24
    e466:	fa90 f0a0 	rbit	r0, r0
    e46a:	0e00      	lsrs	r0, r0, #24
    e46c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e470:	4770      	bx	lr
    e472:	b570      	push	{r4, r5, r6, lr}
    e474:	460d      	mov	r5, r1
    e476:	4048      	eors	r0, r1
    e478:	2400      	movs	r4, #0
    e47a:	f7ff ffef 	bl	e45c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e47e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e482:	1c64      	adds	r4, r4, #1
    e484:	4428      	add	r0, r5
    e486:	b2e4      	uxtb	r4, r4
    e488:	b280      	uxth	r0, r0
    e48a:	2c03      	cmp	r4, #3
    e48c:	d3f5      	bcc.n	e47a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e48e:	bd70      	pop	{r4, r5, r6, pc}

0000e490 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    e490:	7841      	ldrb	r1, [r0, #1]
    e492:	7800      	ldrb	r0, [r0, #0]
    e494:	f010 000f 	ands.w	r0, r0, #15
    e498:	d005      	beq.n	e4a6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e49a:	2801      	cmp	r0, #1
    e49c:	d007      	beq.n	e4ae <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    e49e:	2802      	cmp	r0, #2
    e4a0:	d001      	beq.n	e4a6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    e4a2:	2806      	cmp	r0, #6
    e4a4:	d105      	bne.n	e4b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4a6:	1f89      	subs	r1, r1, #6
    e4a8:	291f      	cmp	r1, #31
    e4aa:	d904      	bls.n	e4b6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4ac:	e001      	b.n	e4b2 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    e4ae:	290c      	cmp	r1, #12
    e4b0:	d001      	beq.n	e4b6 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    e4b2:	2000      	movs	r0, #0
    e4b4:	4770      	bx	lr
    e4b6:	2001      	movs	r0, #1
    e4b8:	4770      	bx	lr

0000e4ba <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    e4ba:	7800      	ldrb	r0, [r0, #0]
    e4bc:	09c0      	lsrs	r0, r0, #7
    e4be:	4770      	bx	lr

0000e4c0 <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    e4c0:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e4c4:	600a      	str	r2, [r1, #0]
    e4c6:	8880      	ldrh	r0, [r0, #4]
    e4c8:	8088      	strh	r0, [r1, #4]
    e4ca:	4770      	bx	lr

0000e4cc <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    e4cc:	7800      	ldrb	r0, [r0, #0]
    e4ce:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e4d2:	4770      	bx	lr

0000e4d4 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    e4d4:	7801      	ldrb	r1, [r0, #0]
    e4d6:	f001 010f 	and.w	r1, r1, #15
    e4da:	2904      	cmp	r1, #4
    e4dc:	d105      	bne.n	e4ea <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e4de:	7840      	ldrb	r0, [r0, #1]
    e4e0:	1f80      	subs	r0, r0, #6
    e4e2:	281f      	cmp	r0, #31
    e4e4:	d801      	bhi.n	e4ea <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    e4e6:	2001      	movs	r0, #1
    e4e8:	4770      	bx	lr
    e4ea:	2000      	movs	r0, #0
    e4ec:	4770      	bx	lr

0000e4ee <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e4ee:	b510      	push	{r4, lr}
    e4f0:	7802      	ldrb	r2, [r0, #0]
    e4f2:	f001 030f 	and.w	r3, r1, #15
    e4f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e4fa:	431a      	orrs	r2, r3
    e4fc:	7002      	strb	r2, [r0, #0]
    e4fe:	2907      	cmp	r1, #7
    e500:	d20c      	bcs.n	e51c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e502:	e8df f001 	tbb	[pc, r1]
    e506:	0604      	.short	0x0604
    e508:	08040604 	.word	0x08040604
    e50c:	0004      	.short	0x0004
    e50e:	2106      	movs	r1, #6
    e510:	e002      	b.n	e518 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e512:	210c      	movs	r1, #12
    e514:	e000      	b.n	e518 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e516:	2122      	movs	r1, #34	; 0x22
    e518:	7041      	strb	r1, [r0, #1]
    e51a:	bd10      	pop	{r4, pc}
    e51c:	21a8      	movs	r1, #168	; 0xa8
    e51e:	202a      	movs	r0, #42	; 0x2a
    e520:	f7f2 faa0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e524 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e524:	680a      	ldr	r2, [r1, #0]
    e526:	f840 2f09 	str.w	r2, [r0, #9]!
    e52a:	8889      	ldrh	r1, [r1, #4]
    e52c:	8081      	strh	r1, [r0, #4]
    e52e:	4770      	bx	lr

0000e530 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e530:	7802      	ldrb	r2, [r0, #0]
    e532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e536:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e53a:	7002      	strb	r2, [r0, #0]
    e53c:	4770      	bx	lr

0000e53e <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e53e:	680a      	ldr	r2, [r1, #0]
    e540:	f840 2f03 	str.w	r2, [r0, #3]!
    e544:	8889      	ldrh	r1, [r1, #4]
    e546:	8081      	strh	r1, [r0, #4]
    e548:	4770      	bx	lr

0000e54a <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e54a:	7802      	ldrb	r2, [r0, #0]
    e54c:	2340      	movs	r3, #64	; 0x40
    e54e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e552:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e556:	430a      	orrs	r2, r1
    e558:	7002      	strb	r2, [r0, #0]
    e55a:	4770      	bx	lr

0000e55c <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    e55c:	680a      	ldr	r2, [r1, #0]
    e55e:	6042      	str	r2, [r0, #4]
    e560:	7909      	ldrb	r1, [r1, #4]
    e562:	7201      	strb	r1, [r0, #8]
    e564:	4770      	bx	lr

0000e566 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    e566:	72c1      	strb	r1, [r0, #11]
    e568:	0a09      	lsrs	r1, r1, #8
    e56a:	7301      	strb	r1, [r0, #12]
    e56c:	4770      	bx	lr

0000e56e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e56e:	b510      	push	{r4, lr}
    e570:	29fb      	cmp	r1, #251	; 0xfb
    e572:	d904      	bls.n	e57e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e574:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e578:	202a      	movs	r0, #42	; 0x2a
    e57a:	f7f2 fa73 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e57e:	7041      	strb	r1, [r0, #1]
    e580:	bd10      	pop	{r4, pc}

0000e582 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e582:	8809      	ldrh	r1, [r1, #0]
    e584:	8181      	strh	r1, [r0, #12]
    e586:	4770      	bx	lr

0000e588 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e588:	6809      	ldr	r1, [r1, #0]
    e58a:	f8c0 1016 	str.w	r1, [r0, #22]
    e58e:	4770      	bx	lr

0000e590 <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e590:	680a      	ldr	r2, [r1, #0]
    e592:	6042      	str	r2, [r0, #4]
    e594:	6849      	ldr	r1, [r1, #4]
    e596:	6081      	str	r1, [r0, #8]
    e598:	4770      	bx	lr

0000e59a <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e59a:	680a      	ldr	r2, [r1, #0]
    e59c:	f840 2f0e 	str.w	r2, [r0, #14]!
    e5a0:	6849      	ldr	r1, [r1, #4]
    e5a2:	6041      	str	r1, [r0, #4]
    e5a4:	4770      	bx	lr

0000e5a6 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e5a6:	68c0      	ldr	r0, [r0, #12]
    e5a8:	6008      	str	r0, [r1, #0]
    e5aa:	4770      	bx	lr

0000e5ac <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e5ac:	6842      	ldr	r2, [r0, #4]
    e5ae:	600a      	str	r2, [r1, #0]
    e5b0:	6880      	ldr	r0, [r0, #8]
    e5b2:	6048      	str	r0, [r1, #4]
    e5b4:	4770      	bx	lr

0000e5b6 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e5b6:	7800      	ldrb	r0, [r0, #0]
    e5b8:	f000 0003 	and.w	r0, r0, #3
    e5bc:	4770      	bx	lr

0000e5be <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e5be:	8880      	ldrh	r0, [r0, #4]
    e5c0:	4770      	bx	lr

0000e5c2 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e5c2:	88c0      	ldrh	r0, [r0, #6]
    e5c4:	4770      	bx	lr

0000e5c6 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e5c6:	8900      	ldrh	r0, [r0, #8]
    e5c8:	4770      	bx	lr

0000e5ca <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e5ca:	8940      	ldrh	r0, [r0, #10]
    e5cc:	4770      	bx	lr

0000e5ce <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e5ce:	8901      	ldrh	r1, [r0, #8]
    e5d0:	291b      	cmp	r1, #27
    e5d2:	d30c      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5d4:	8941      	ldrh	r1, [r0, #10]
    e5d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e5da:	4291      	cmp	r1, r2
    e5dc:	d307      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5de:	8881      	ldrh	r1, [r0, #4]
    e5e0:	291b      	cmp	r1, #27
    e5e2:	d304      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5e4:	88c0      	ldrh	r0, [r0, #6]
    e5e6:	4290      	cmp	r0, r2
    e5e8:	d301      	bcc.n	e5ee <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e5ea:	2001      	movs	r0, #1
    e5ec:	4770      	bx	lr
    e5ee:	2000      	movs	r0, #0
    e5f0:	4770      	bx	lr

0000e5f2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e5f2:	7901      	ldrb	r1, [r0, #4]
    e5f4:	0749      	lsls	r1, r1, #29
    e5f6:	d004      	beq.n	e602 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e5f8:	7940      	ldrb	r0, [r0, #5]
    e5fa:	0740      	lsls	r0, r0, #29
    e5fc:	d001      	beq.n	e602 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e5fe:	2001      	movs	r0, #1
    e600:	4770      	bx	lr
    e602:	2000      	movs	r0, #0
    e604:	4770      	bx	lr

0000e606 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e606:	7181      	strb	r1, [r0, #6]
    e608:	0a09      	lsrs	r1, r1, #8
    e60a:	71c1      	strb	r1, [r0, #7]
    e60c:	4770      	bx	lr

0000e60e <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e60e:	7101      	strb	r1, [r0, #4]
    e610:	4770      	bx	lr

0000e612 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e612:	7141      	strb	r1, [r0, #5]
    e614:	4770      	bx	lr

0000e616 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e616:	7901      	ldrb	r1, [r0, #4]
    e618:	0749      	lsls	r1, r1, #29
    e61a:	d004      	beq.n	e626 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e61c:	7940      	ldrb	r0, [r0, #5]
    e61e:	0740      	lsls	r0, r0, #29
    e620:	d001      	beq.n	e626 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e622:	2001      	movs	r0, #1
    e624:	4770      	bx	lr
    e626:	2000      	movs	r0, #0
    e628:	4770      	bx	lr

0000e62a <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e62a:	7900      	ldrb	r0, [r0, #4]
    e62c:	4770      	bx	lr

0000e62e <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e62e:	7101      	strb	r1, [r0, #4]
    e630:	4770      	bx	lr

0000e632 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e632:	7940      	ldrb	r0, [r0, #5]
    e634:	4770      	bx	lr

0000e636 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e636:	7141      	strb	r1, [r0, #5]
    e638:	4770      	bx	lr

0000e63a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e63a:	7802      	ldrb	r2, [r0, #0]
    e63c:	f001 0103 	and.w	r1, r1, #3
    e640:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e644:	430a      	orrs	r2, r1
    e646:	7002      	strb	r2, [r0, #0]
    e648:	4770      	bx	lr

0000e64a <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e64a:	7101      	strb	r1, [r0, #4]
    e64c:	0a09      	lsrs	r1, r1, #8
    e64e:	7141      	strb	r1, [r0, #5]
    e650:	4770      	bx	lr

0000e652 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e652:	7181      	strb	r1, [r0, #6]
    e654:	0a09      	lsrs	r1, r1, #8
    e656:	71c1      	strb	r1, [r0, #7]
    e658:	4770      	bx	lr

0000e65a <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e65a:	7201      	strb	r1, [r0, #8]
    e65c:	0a09      	lsrs	r1, r1, #8
    e65e:	7241      	strb	r1, [r0, #9]
    e660:	4770      	bx	lr

0000e662 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e662:	7281      	strb	r1, [r0, #10]
    e664:	0a09      	lsrs	r1, r1, #8
    e666:	72c1      	strb	r1, [r0, #11]
    e668:	4770      	bx	lr

0000e66a <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e66a:	7900      	ldrb	r0, [r0, #4]
    e66c:	4770      	bx	lr

0000e66e <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e66e:	7900      	ldrb	r0, [r0, #4]
    e670:	4770      	bx	lr

0000e672 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e672:	b510      	push	{r4, lr}
    e674:	7a01      	ldrb	r1, [r0, #8]
    e676:	b119      	cbz	r1, e680 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e678:	2901      	cmp	r1, #1
    e67a:	d006      	beq.n	e68a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e67c:	2000      	movs	r0, #0
    e67e:	bd10      	pop	{r4, pc}
    e680:	88c2      	ldrh	r2, [r0, #6]
    e682:	6803      	ldr	r3, [r0, #0]
    e684:	8880      	ldrh	r0, [r0, #4]
    e686:	2102      	movs	r1, #2
    e688:	e003      	b.n	e692 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e68a:	88c2      	ldrh	r2, [r0, #6]
    e68c:	6803      	ldr	r3, [r0, #0]
    e68e:	8880      	ldrh	r0, [r0, #4]
    e690:	2101      	movs	r1, #1
    e692:	f7f4 f9bb 	bl	2a0c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e696:	b908      	cbnz	r0, e69c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e698:	f7f4 fa02 	bl	2aa0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e69c:	2001      	movs	r0, #1
    e69e:	bd10      	pop	{r4, pc}

0000e6a0 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e6a0:	b508      	push	{r3, lr}
    e6a2:	7a03      	ldrb	r3, [r0, #8]
    e6a4:	f88d 3000 	strb.w	r3, [sp]
    e6a8:	9b00      	ldr	r3, [sp, #0]
    e6aa:	9300      	str	r3, [sp, #0]
    e6ac:	f89d 3000 	ldrb.w	r3, [sp]
    e6b0:	b123      	cbz	r3, e6bc <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e6b2:	f240 3117 	movw	r1, #791	; 0x317
    e6b6:	2010      	movs	r0, #16
    e6b8:	f7f2 f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e6c0:	f7f4 bb74 	b.w	2dac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e6c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e6c4:	f7f4 bba0 	b.w	2e08 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e6c8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e6c8:	7a03      	ldrb	r3, [r0, #8]
    e6ca:	b082      	sub	sp, #8
    e6cc:	f88d 3000 	strb.w	r3, [sp]
    e6d0:	9b00      	ldr	r3, [sp, #0]
    e6d2:	9300      	str	r3, [sp, #0]
    e6d4:	f89d 3000 	ldrb.w	r3, [sp]
    e6d8:	2b00      	cmp	r3, #0
    e6da:	d102      	bne.n	e6e2 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e6dc:	b002      	add	sp, #8
    e6de:	f7f4 bb65 	b.w	2dac <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e6e2:	b002      	add	sp, #8
    e6e4:	4770      	bx	lr
    e6e6:	2000      	movs	r0, #0
    e6e8:	7048      	strb	r0, [r1, #1]
    e6ea:	2003      	movs	r0, #3
    e6ec:	7008      	strb	r0, [r1, #0]
    e6ee:	2001      	movs	r0, #1
    e6f0:	7108      	strb	r0, [r1, #4]
    e6f2:	4770      	bx	lr

0000e6f4 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e6f4:	b510      	push	{r4, lr}
    e6f6:	888c      	ldrh	r4, [r1, #4]
    e6f8:	890a      	ldrh	r2, [r1, #8]
    e6fa:	884b      	ldrh	r3, [r1, #2]
    e6fc:	88c9      	ldrh	r1, [r1, #6]
    e6fe:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e702:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e706:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e70a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e70e:	bd10      	pop	{r4, pc}

0000e710 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e710:	b570      	push	{r4, r5, r6, lr}
    e712:	4615      	mov	r5, r2
    e714:	460c      	mov	r4, r1
    e716:	f000 f91a 	bl	e94e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e71a:	3096      	adds	r0, #150	; 0x96
    e71c:	4428      	add	r0, r5
    e71e:	42a0      	cmp	r0, r4
    e720:	d801      	bhi.n	e726 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e722:	1a20      	subs	r0, r4, r0
    e724:	bd70      	pop	{r4, r5, r6, pc}
    e726:	2000      	movs	r0, #0
    e728:	bd70      	pop	{r4, r5, r6, pc}

0000e72a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e72e:	4604      	mov	r4, r0
    e730:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e732:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e734:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e738:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e73c:	4285      	cmp	r5, r0
    e73e:	d300      	bcc.n	e742 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e740:	4605      	mov	r5, r0
    e742:	4620      	mov	r0, r4
    e744:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e748:	f000 f89c 	bl	e884 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e74c:	4601      	mov	r1, r0
    e74e:	86e5      	strh	r5, [r4, #54]	; 0x36
    e750:	8761      	strh	r1, [r4, #58]	; 0x3a
    e752:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e754:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e75a:	4680      	mov	r8, r0
    e75c:	42aa      	cmp	r2, r5
    e75e:	d200      	bcs.n	e762 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e760:	462a      	mov	r2, r5
    e762:	428b      	cmp	r3, r1
    e764:	d200      	bcs.n	e768 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e766:	460b      	mov	r3, r1
    e768:	8202      	strh	r2, [r0, #16]
    e76a:	f8a8 3012 	strh.w	r3, [r8, #18]
    e76e:	42bd      	cmp	r5, r7
    e770:	d101      	bne.n	e776 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e772:	42b1      	cmp	r1, r6
    e774:	d001      	beq.n	e77a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e776:	2001      	movs	r0, #1
    e778:	e000      	b.n	e77c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e77a:	2000      	movs	r0, #0
    e77c:	4681      	mov	r9, r0
    e77e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e782:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e786:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e788:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e78a:	4285      	cmp	r5, r0
    e78c:	d300      	bcc.n	e790 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e78e:	4605      	mov	r5, r0
    e790:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e794:	4620      	mov	r0, r4
    e796:	f000 f87d 	bl	e894 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e79a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e79e:	2902      	cmp	r1, #2
    e7a0:	d108      	bne.n	e7b4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e7a2:	42af      	cmp	r7, r5
    e7a4:	d200      	bcs.n	e7a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e7a6:	463d      	mov	r5, r7
    e7a8:	4286      	cmp	r6, r0
    e7aa:	d200      	bcs.n	e7ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e7ac:	4630      	mov	r0, r6
    e7ae:	2100      	movs	r1, #0
    e7b0:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e7b4:	f8a8 5008 	strh.w	r5, [r8, #8]
    e7b8:	f8a8 000c 	strh.w	r0, [r8, #12]
    e7bc:	42bd      	cmp	r5, r7
    e7be:	d101      	bne.n	e7c4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e7c0:	42b0      	cmp	r0, r6
    e7c2:	d001      	beq.n	e7c8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e7c4:	2001      	movs	r0, #1
    e7c6:	e000      	b.n	e7ca <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e7c8:	2000      	movs	r0, #0
    e7ca:	ea40 0009 	orr.w	r0, r0, r9
    e7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e7d2:	6840      	ldr	r0, [r0, #4]
    e7d4:	4770      	bx	lr

0000e7d6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7da:	4616      	mov	r6, r2
    e7dc:	460f      	mov	r7, r1
    e7de:	4604      	mov	r4, r0
    e7e0:	f000 f8b5 	bl	e94e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e7e4:	4605      	mov	r5, r0
    e7e6:	463a      	mov	r2, r7
    e7e8:	6921      	ldr	r1, [r4, #16]
    e7ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e7ec:	f000 f845 	bl	e87a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e7f0:	19a9      	adds	r1, r5, r6
    e7f2:	4281      	cmp	r1, r0
    e7f4:	d300      	bcc.n	e7f8 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e7f6:	4608      	mov	r0, r1
    e7f8:	6320      	str	r0, [r4, #48]	; 0x30
    e7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e7fe <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e7fe:	221b      	movs	r2, #27
    e800:	8402      	strh	r2, [r0, #32]
    e802:	8382      	strh	r2, [r0, #28]
    e804:	82c2      	strh	r2, [r0, #22]
    e806:	8282      	strh	r2, [r0, #20]
    e808:	8142      	strh	r2, [r0, #10]
    e80a:	8202      	strh	r2, [r0, #16]
    e80c:	8102      	strh	r2, [r0, #8]
    e80e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e810:	8582      	strh	r2, [r0, #44]	; 0x2c
    e812:	8482      	strh	r2, [r0, #36]	; 0x24
    e814:	2900      	cmp	r1, #0
    e816:	d10a      	bne.n	e82e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e818:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e81c:	8441      	strh	r1, [r0, #34]	; 0x22
    e81e:	83c1      	strh	r1, [r0, #30]
    e820:	8341      	strh	r1, [r0, #26]
    e822:	8301      	strh	r1, [r0, #24]
    e824:	81c1      	strh	r1, [r0, #14]
    e826:	8241      	strh	r1, [r0, #18]
    e828:	8181      	strh	r1, [r0, #12]
    e82a:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e82c:	8601      	strh	r1, [r0, #48]	; 0x30
    e82e:	4770      	bx	lr

0000e830 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e830:	6800      	ldr	r0, [r0, #0]
    e832:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e836:	4290      	cmp	r0, r2
    e838:	d903      	bls.n	e842 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e83a:	1a40      	subs	r0, r0, r1
    e83c:	389c      	subs	r0, #156	; 0x9c
    e83e:	0840      	lsrs	r0, r0, #1
    e840:	4770      	bx	lr
    e842:	2000      	movs	r0, #0
    e844:	4770      	bx	lr

0000e846 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e846:	b510      	push	{r4, lr}
    e848:	9c02      	ldr	r4, [sp, #8]
    e84a:	8281      	strh	r1, [r0, #20]
    e84c:	82c2      	strh	r2, [r0, #22]
    e84e:	8303      	strh	r3, [r0, #24]
    e850:	8344      	strh	r4, [r0, #26]
    e852:	bd10      	pop	{r4, pc}
    e854:	1d00      	adds	r0, r0, #4
    e856:	b510      	push	{r4, lr}
    e858:	b280      	uxth	r0, r0
    e85a:	2901      	cmp	r1, #1
    e85c:	d006      	beq.n	e86c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e85e:	2902      	cmp	r1, #2
    e860:	d007      	beq.n	e872 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e862:	f240 2126 	movw	r1, #550	; 0x226
    e866:	2006      	movs	r0, #6
    e868:	f7f2 f8fc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e86c:	00c0      	lsls	r0, r0, #3
    e86e:	3050      	adds	r0, #80	; 0x50
    e870:	e001      	b.n	e876 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e872:	0080      	lsls	r0, r0, #2
    e874:	302c      	adds	r0, #44	; 0x2c
    e876:	b280      	uxth	r0, r0
    e878:	bd10      	pop	{r4, pc}
    e87a:	4288      	cmp	r0, r1
    e87c:	d300      	bcc.n	e880 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e87e:	4608      	mov	r0, r1
    e880:	1a80      	subs	r0, r0, r2
    e882:	4770      	bx	lr
    e884:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e888:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e88c:	4281      	cmp	r1, r0
    e88e:	d200      	bcs.n	e892 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e890:	4608      	mov	r0, r1
    e892:	4770      	bx	lr
    e894:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e898:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e89c:	4281      	cmp	r1, r0
    e89e:	d200      	bcs.n	e8a2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e8a0:	4608      	mov	r0, r1
    e8a2:	4770      	bx	lr
    e8a4:	b538      	push	{r3, r4, r5, lr}
    e8a6:	2200      	movs	r2, #0
    e8a8:	f1a0 0318 	sub.w	r3, r0, #24
    e8ac:	2416      	movs	r4, #22
    e8ae:	7202      	strb	r2, [r0, #8]
    e8b0:	704a      	strb	r2, [r1, #1]
    e8b2:	700c      	strb	r4, [r1, #0]
    e8b4:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e8b8:	604d      	str	r5, [r1, #4]
    e8ba:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e8be:	608d      	str	r5, [r1, #8]
    e8c0:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e8c4:	60cd      	str	r5, [r1, #12]
    e8c6:	7a05      	ldrb	r5, [r0, #8]
    e8c8:	f88d 5000 	strb.w	r5, [sp]
    e8cc:	9d00      	ldr	r5, [sp, #0]
    e8ce:	9500      	str	r5, [sp, #0]
    e8d0:	f89d 5000 	ldrb.w	r5, [sp]
    e8d4:	2d00      	cmp	r5, #0
    e8d6:	d1ea      	bne.n	e8ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e8d8:	bd38      	pop	{r3, r4, r5, pc}
    e8da:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8dc:	b087      	sub	sp, #28
    e8de:	460d      	mov	r5, r1
    e8e0:	4604      	mov	r4, r0
    e8e2:	f7f4 f87f 	bl	29e4 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e8e6:	2600      	movs	r6, #0
    e8e8:	b328      	cbz	r0, e936 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e8ea:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e8ee:	7226      	strb	r6, [r4, #8]
    e8f0:	8807      	ldrh	r7, [r0, #0]
    e8f2:	a903      	add	r1, sp, #12
    e8f4:	4638      	mov	r0, r7
    e8f6:	f001 fbab 	bl	10050 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e8fa:	b108      	cbz	r0, e900 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e8fc:	21fd      	movs	r1, #253	; 0xfd
    e8fe:	e017      	b.n	e930 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e900:	f8ad 7000 	strh.w	r7, [sp]
    e904:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e908:	f8ad 0002 	strh.w	r0, [sp, #2]
    e90c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e910:	f8ad 0004 	strh.w	r0, [sp, #4]
    e914:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e918:	f8ad 0006 	strh.w	r0, [sp, #6]
    e91c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e920:	f8ad 0008 	strh.w	r0, [sp, #8]
    e924:	4668      	mov	r0, sp
    e926:	f001 fbba 	bl	1009e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e92a:	b120      	cbz	r0, e936 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e92c:	f44f 7183 	mov.w	r1, #262	; 0x106
    e930:	202c      	movs	r0, #44	; 0x2c
    e932:	f7f2 f897 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e936:	201f      	movs	r0, #31
    e938:	7028      	strb	r0, [r5, #0]
    e93a:	706e      	strb	r6, [r5, #1]
    e93c:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e940:	6068      	str	r0, [r5, #4]
    e942:	6860      	ldr	r0, [r4, #4]
    e944:	60a8      	str	r0, [r5, #8]
    e946:	8920      	ldrh	r0, [r4, #8]
    e948:	81a8      	strh	r0, [r5, #12]
    e94a:	b007      	add	sp, #28
    e94c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e94e:	2196      	movs	r1, #150	; 0x96
    e950:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e954:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e958:	f000 b800 	b.w	e95c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e960:	460d      	mov	r5, r1
    e962:	4606      	mov	r6, r0
    e964:	4698      	mov	r8, r3
    e966:	4617      	mov	r7, r2
    e968:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e96a:	4611      	mov	r1, r2
    e96c:	f7ff ff72 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e970:	4604      	mov	r4, r0
    e972:	4639      	mov	r1, r7
    e974:	4630      	mov	r0, r6
    e976:	f7ff ff8d 	bl	e894 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e97a:	42a0      	cmp	r0, r4
    e97c:	d200      	bcs.n	e980 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e97e:	4604      	mov	r4, r0
    e980:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e982:	4641      	mov	r1, r8
    e984:	f7ff ff66 	bl	e854 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e988:	4607      	mov	r7, r0
    e98a:	4641      	mov	r1, r8
    e98c:	4630      	mov	r0, r6
    e98e:	f7ff ff79 	bl	e884 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e992:	42b8      	cmp	r0, r7
    e994:	d300      	bcc.n	e998 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e996:	4638      	mov	r0, r7
    e998:	4420      	add	r0, r4
    e99a:	4428      	add	r0, r5
    e99c:	1d80      	adds	r0, r0, #6
    e99e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e9a2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e9a2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e9a6:	2700      	movs	r7, #0
    e9a8:	463d      	mov	r5, r7
    e9aa:	2623      	movs	r6, #35	; 0x23
    e9ac:	46b8      	mov	r8, r7
    e9ae:	f7f4 fae9 	bl	2f84 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e9b2:	4604      	mov	r4, r0
    e9b4:	f7f4 faae 	bl	2f14 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e9b8:	b190      	cbz	r0, e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e9ba:	f8cd 8000 	str.w	r8, [sp]
    e9be:	f8cd 8004 	str.w	r8, [sp, #4]
    e9c2:	e003      	b.n	e9cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e9c4:	9800      	ldr	r0, [sp, #0]
    e9c6:	6941      	ldr	r1, [r0, #20]
    e9c8:	42a1      	cmp	r1, r4
    e9ca:	d009      	beq.n	e9e0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e9cc:	4668      	mov	r0, sp
    e9ce:	f7f2 fa67 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e9d2:	2800      	cmp	r0, #0
    e9d4:	d0f6      	beq.n	e9c4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e9d6:	4625      	mov	r5, r4
    e9d8:	4620      	mov	r0, r4
    e9da:	f7f4 fa65 	bl	2ea8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e9de:	4607      	mov	r7, r0
    e9e0:	1e76      	subs	r6, r6, #1
    e9e2:	d001      	beq.n	e9e8 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e9e4:	2f00      	cmp	r7, #0
    e9e6:	d0e2      	beq.n	e9ae <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e9e8:	b115      	cbz	r5, e9f0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e9ea:	4628      	mov	r0, r5
    e9ec:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e9f0:	f240 1167 	movw	r1, #359	; 0x167
    e9f4:	200f      	movs	r0, #15
    e9f6:	f7f2 f835 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9fa:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e9fe:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea02:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea06:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea0a:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    ea0e:	ea10 0f40 	tst.w	r0, r0, lsl #1
    ea12:	d001      	beq.n	ea18 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    ea14:	2000      	movs	r0, #0
    ea16:	4770      	bx	lr
    ea18:	2001      	movs	r0, #1
    ea1a:	4770      	bx	lr
    ea1c:	b510      	push	{r4, lr}
    ea1e:	4604      	mov	r4, r0
    ea20:	2108      	movs	r1, #8
    ea22:	4620      	mov	r0, r4
    ea24:	f7f2 f8be 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ea28:	6820      	ldr	r0, [r4, #0]
    ea2a:	2800      	cmp	r0, #0
    ea2c:	d102      	bne.n	ea34 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    ea2e:	6860      	ldr	r0, [r4, #4]
    ea30:	2800      	cmp	r0, #0
    ea32:	d0f5      	beq.n	ea20 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    ea34:	bd10      	pop	{r4, pc}

0000ea36 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    ea36:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    ea3a:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    ea3e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ea42:	4408      	add	r0, r1
    ea44:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    ea48:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    ea4c:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    ea50:	4408      	add	r0, r1
    ea52:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    ea56:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    ea5a:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    ea5e:	4408      	add	r0, r1
    ea60:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    ea64:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    ea68:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    ea6c:	4408      	add	r0, r1
    ea6e:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    ea72:	b2c0      	uxtb	r0, r0
    ea74:	4770      	bx	lr

0000ea76 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    ea76:	f000 0155 	and.w	r1, r0, #85	; 0x55
    ea7a:	2255      	movs	r2, #85	; 0x55
    ea7c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    ea80:	4408      	add	r0, r1
    ea82:	f000 0133 	and.w	r1, r0, #51	; 0x33
    ea86:	2233      	movs	r2, #51	; 0x33
    ea88:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    ea8c:	4408      	add	r0, r1
    ea8e:	f000 010f 	and.w	r1, r0, #15
    ea92:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    ea96:	4770      	bx	lr

0000ea98 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    ea98:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    ea9c:	f7ff bfcb 	b.w	ea36 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000eaa0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    eaa0:	b510      	push	{r4, lr}
    eaa2:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    eaa6:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    eaaa:	2000      	movs	r0, #0
    eaac:	7048      	strb	r0, [r1, #1]
    eaae:	230c      	movs	r3, #12
    eab0:	700b      	strb	r3, [r1, #0]
    eab2:	7108      	strb	r0, [r1, #4]
    eab4:	f8a1 4005 	strh.w	r4, [r1, #5]
    eab8:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    eabc:	71c8      	strb	r0, [r1, #7]
    eabe:	4620      	mov	r0, r4
    eac0:	f7f2 fb9c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    eac4:	f7fe fe98 	bl	d7f8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    eac8:	b140      	cbz	r0, eadc <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    eaca:	4620      	mov	r0, r4
    eacc:	f7ff f97e 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ead0:	4620      	mov	r0, r4
    ead2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ead6:	2100      	movs	r1, #0
    ead8:	f7f2 ba28 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    eadc:	2160      	movs	r1, #96	; 0x60
    eade:	2063      	movs	r0, #99	; 0x63
    eae0:	f7f1 ffc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eae4 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    eae4:	b538      	push	{r3, r4, r5, lr}
    eae6:	2200      	movs	r2, #0
    eae8:	704a      	strb	r2, [r1, #1]
    eaea:	2309      	movs	r3, #9
    eaec:	700b      	strb	r3, [r1, #0]
    eaee:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    eaf2:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    eaf6:	7202      	strb	r2, [r0, #8]
    eaf8:	84da      	strh	r2, [r3, #38]	; 0x26
    eafa:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    eafe:	604d      	str	r5, [r1, #4]
    eb00:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    eb04:	608d      	str	r5, [r1, #8]
    eb06:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    eb0a:	818d      	strh	r5, [r1, #12]
    eb0c:	710a      	strb	r2, [r1, #4]
    eb0e:	7a05      	ldrb	r5, [r0, #8]
    eb10:	f88d 5000 	strb.w	r5, [sp]
    eb14:	9d00      	ldr	r5, [sp, #0]
    eb16:	9500      	str	r5, [sp, #0]
    eb18:	f89d 5000 	ldrb.w	r5, [sp]
    eb1c:	2d00      	cmp	r5, #0
    eb1e:	d1ea      	bne.n	eaf6 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    eb20:	bd38      	pop	{r3, r4, r5, pc}

0000eb22 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    eb22:	2200      	movs	r2, #0
    eb24:	704a      	strb	r2, [r1, #1]
    eb26:	220d      	movs	r2, #13
    eb28:	700a      	strb	r2, [r1, #0]
    eb2a:	f100 020a 	add.w	r2, r0, #10
    eb2e:	7a83      	ldrb	r3, [r0, #10]
    eb30:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    eb34:	710b      	strb	r3, [r1, #4]
    eb36:	8800      	ldrh	r0, [r0, #0]
    eb38:	80c8      	strh	r0, [r1, #6]
    eb3a:	7910      	ldrb	r0, [r2, #4]
    eb3c:	7208      	strb	r0, [r1, #8]
    eb3e:	4770      	bx	lr

0000eb40 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    eb40:	2200      	movs	r2, #0
    eb42:	704a      	strb	r2, [r1, #1]
    eb44:	220e      	movs	r2, #14
    eb46:	700a      	strb	r2, [r1, #0]
    eb48:	7a82      	ldrb	r2, [r0, #10]
    eb4a:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    eb4e:	710a      	strb	r2, [r1, #4]
    eb50:	8800      	ldrh	r0, [r0, #0]
    eb52:	80c8      	strh	r0, [r1, #6]
    eb54:	4770      	bx	lr

0000eb56 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    eb56:	b510      	push	{r4, lr}
    eb58:	6844      	ldr	r4, [r0, #4]
    eb5a:	7803      	ldrb	r3, [r0, #0]
    eb5c:	2100      	movs	r1, #0
    eb5e:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    eb62:	3488      	adds	r4, #136	; 0x88
    eb64:	4620      	mov	r0, r4
    eb66:	f7ff fa7b 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb6a:	b110      	cbz	r0, eb72 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    eb6c:	2004      	movs	r0, #4
    eb6e:	7760      	strb	r0, [r4, #29]
    eb70:	bd10      	pop	{r4, pc}
    eb72:	21aa      	movs	r1, #170	; 0xaa
    eb74:	201c      	movs	r0, #28
    eb76:	f7f1 ff75 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb7a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    eb7a:	b510      	push	{r4, lr}
    eb7c:	4604      	mov	r4, r0
    eb7e:	6840      	ldr	r0, [r0, #4]
    eb80:	2300      	movs	r3, #0
    eb82:	4619      	mov	r1, r3
    eb84:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    eb88:	3088      	adds	r0, #136	; 0x88
    eb8a:	f7ff fa69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb8e:	b120      	cbz	r0, eb9a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    eb90:	6861      	ldr	r1, [r4, #4]
    eb92:	2000      	movs	r0, #0
    eb94:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    eb98:	bd10      	pop	{r4, pc}
    eb9a:	21b2      	movs	r1, #178	; 0xb2
    eb9c:	201c      	movs	r0, #28
    eb9e:	f7f1 ff61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eba2:	2200      	movs	r2, #0
    eba4:	704a      	strb	r2, [r1, #1]
    eba6:	2208      	movs	r2, #8
    eba8:	700a      	strb	r2, [r1, #0]
    ebaa:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ebae:	604a      	str	r2, [r1, #4]
    ebb0:	6842      	ldr	r2, [r0, #4]
    ebb2:	608a      	str	r2, [r1, #8]
    ebb4:	8902      	ldrh	r2, [r0, #8]
    ebb6:	818a      	strh	r2, [r1, #12]
    ebb8:	7a80      	ldrb	r0, [r0, #10]
    ebba:	7388      	strb	r0, [r1, #14]
    ebbc:	4770      	bx	lr

0000ebbe <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    ebbe:	2200      	movs	r2, #0
    ebc0:	704a      	strb	r2, [r1, #1]
    ebc2:	2210      	movs	r2, #16
    ebc4:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    ebc8:	700a      	strb	r2, [r1, #0]
    ebca:	8800      	ldrh	r0, [r0, #0]
    ebcc:	8088      	strh	r0, [r1, #4]
    ebce:	4770      	bx	lr

0000ebd0 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    ebd0:	b538      	push	{r3, r4, r5, lr}
    ebd2:	2400      	movs	r4, #0
    ebd4:	704c      	strb	r4, [r1, #1]
    ebd6:	2501      	movs	r5, #1
    ebd8:	700d      	strb	r5, [r1, #0]
    ebda:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    ebde:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    ebe2:	710c      	strb	r4, [r1, #4]
    ebe4:	7204      	strb	r4, [r0, #8]
    ebe6:	881d      	ldrh	r5, [r3, #0]
    ebe8:	f8a1 5005 	strh.w	r5, [r1, #5]
    ebec:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    ebf0:	71cd      	strb	r5, [r1, #7]
    ebf2:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    ebf6:	810d      	strh	r5, [r1, #8]
    ebf8:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    ebfc:	814d      	strh	r5, [r1, #10]
    ebfe:	7a05      	ldrb	r5, [r0, #8]
    ec00:	f88d 5000 	strb.w	r5, [sp]
    ec04:	9d00      	ldr	r5, [sp, #0]
    ec06:	9500      	str	r5, [sp, #0]
    ec08:	f89d 5000 	ldrb.w	r5, [sp]
    ec0c:	2d00      	cmp	r5, #0
    ec0e:	d1e9      	bne.n	ebe4 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    ec10:	bd38      	pop	{r3, r4, r5, pc}

0000ec12 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    ec12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec16:	7803      	ldrb	r3, [r0, #0]
    ec18:	6840      	ldr	r0, [r0, #4]
    ec1a:	2501      	movs	r5, #1
    ec1c:	f100 0488 	add.w	r4, r0, #136	; 0x88
    ec20:	f500 779c 	add.w	r7, r0, #312	; 0x138
    ec24:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    ec28:	f04f 0600 	mov.w	r6, #0
    ec2c:	0780      	lsls	r0, r0, #30
    ec2e:	d410      	bmi.n	ec52 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    ec30:	7f62      	ldrb	r2, [r4, #29]
    ec32:	2100      	movs	r1, #0
    ec34:	4620      	mov	r0, r4
    ec36:	f7ff fa13 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec3a:	b130      	cbz	r0, ec4a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    ec3c:	7765      	strb	r5, [r4, #29]
    ec3e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    ec42:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec4a:	216e      	movs	r1, #110	; 0x6e
    ec4c:	2040      	movs	r0, #64	; 0x40
    ec4e:	f7f1 ff09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec52:	2300      	movs	r3, #0
    ec54:	7fa2      	ldrb	r2, [r4, #30]
    ec56:	4619      	mov	r1, r3
    ec58:	4620      	mov	r0, r4
    ec5a:	f7ff fa01 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec5e:	b108      	cbz	r0, ec64 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    ec60:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    ec64:	74be      	strb	r6, [r7, #18]
    ec66:	e7ee      	b.n	ec46 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    ec68:	2200      	movs	r2, #0
    ec6a:	704a      	strb	r2, [r1, #1]
    ec6c:	221d      	movs	r2, #29
    ec6e:	700a      	strb	r2, [r1, #0]
    ec70:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ec74:	6048      	str	r0, [r1, #4]
    ec76:	4770      	bx	lr
    ec78:	b510      	push	{r4, lr}
    ec7a:	4604      	mov	r4, r0
    ec7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ec80:	e9d4 1000 	ldrd	r1, r0, [r4]
    ec84:	4050      	eors	r0, r2
    ec86:	ea70 0101 	orns	r1, r0, r1
    ec8a:	d008      	beq.n	ec9e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ec8c:	f7fc fcf8 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ec90:	e9d4 2300 	ldrd	r2, r3, [r4]
    ec94:	1a80      	subs	r0, r0, r2
    ec96:	4199      	sbcs	r1, r3
    ec98:	d301      	bcc.n	ec9e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    ec9a:	2001      	movs	r0, #1
    ec9c:	bd10      	pop	{r4, pc}
    ec9e:	2000      	movs	r0, #0
    eca0:	bd10      	pop	{r4, pc}
    eca2:	2801      	cmp	r0, #1
    eca4:	d102      	bne.n	ecac <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    eca6:	7948      	ldrb	r0, [r1, #5]
    eca8:	0980      	lsrs	r0, r0, #6
    ecaa:	d001      	beq.n	ecb0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    ecac:	2000      	movs	r0, #0
    ecae:	4770      	bx	lr
    ecb0:	2001      	movs	r0, #1
    ecb2:	4770      	bx	lr
    ecb4:	2801      	cmp	r0, #1
    ecb6:	d106      	bne.n	ecc6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    ecb8:	7948      	ldrb	r0, [r1, #5]
    ecba:	2101      	movs	r1, #1
    ecbc:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ecc0:	d101      	bne.n	ecc6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    ecc2:	2001      	movs	r0, #1
    ecc4:	4770      	bx	lr
    ecc6:	2000      	movs	r0, #0
    ecc8:	4770      	bx	lr
    ecca:	b118      	cbz	r0, ecd4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    eccc:	2802      	cmp	r0, #2
    ecce:	d001      	beq.n	ecd4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    ecd0:	2001      	movs	r0, #1
    ecd2:	4770      	bx	lr
    ecd4:	2000      	movs	r0, #0
    ecd6:	4770      	bx	lr
    ecd8:	2802      	cmp	r0, #2
    ecda:	d003      	beq.n	ece4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    ecdc:	2803      	cmp	r0, #3
    ecde:	d001      	beq.n	ece4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    ece0:	2000      	movs	r0, #0
    ece2:	4770      	bx	lr
    ece4:	2001      	movs	r0, #1
    ece6:	4770      	bx	lr

0000ece8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    ece8:	f7f5 bbb0 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>

0000ecec <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    ecec:	b510      	push	{r4, lr}
    ecee:	2000      	movs	r0, #0
    ecf0:	f7f5 f9e6 	bl	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
    ecf4:	f7f4 fd6c 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ecf8:	f7f5 fbb6 	bl	4468 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x468>
    ecfc:	2000      	movs	r0, #0
    ecfe:	bd10      	pop	{r4, pc}
    ed00:	b510      	push	{r4, lr}
    ed02:	f7f5 f9f7 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed06:	f7f4 fd63 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ed0a:	f7f9 f8af 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed0e:	2005      	movs	r0, #5
    ed10:	bd10      	pop	{r4, pc}
    ed12:	b510      	push	{r4, lr}
    ed14:	f7f5 f9ee 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed18:	f7f9 f8a8 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed1c:	2005      	movs	r0, #5
    ed1e:	bd10      	pop	{r4, pc}
    ed20:	b530      	push	{r4, r5, lr}
    ed22:	b08b      	sub	sp, #44	; 0x2c
    ed24:	4605      	mov	r5, r0
    ed26:	f7f5 f9e5 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed2a:	7828      	ldrb	r0, [r5, #0]
    ed2c:	4669      	mov	r1, sp
    ed2e:	f000 040f 	and.w	r4, r0, #15
    ed32:	4622      	mov	r2, r4
    ed34:	4628      	mov	r0, r5
    ed36:	f7f5 fd43 	bl	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    ed3a:	2200      	movs	r2, #0
    ed3c:	4621      	mov	r1, r4
    ed3e:	4668      	mov	r0, sp
    ed40:	f7f4 fdce 	bl	38e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    ed44:	4621      	mov	r1, r4
    ed46:	4668      	mov	r0, sp
    ed48:	f7f5 f954 	bl	3ff4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x55c>
    ed4c:	4604      	mov	r4, r0
    ed4e:	f7f4 fd3f 	bl	37d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    ed52:	b00b      	add	sp, #44	; 0x2c
    ed54:	4620      	mov	r0, r4
    ed56:	bd30      	pop	{r4, r5, pc}
    ed58:	f240 31a7 	movw	r1, #935	; 0x3a7
    ed5c:	2032      	movs	r0, #50	; 0x32
    ed5e:	f7f1 fe81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed62:	b510      	push	{r4, lr}
    ed64:	f7f5 f9c6 	bl	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
    ed68:	f7f9 f880 	bl	7e6c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ed6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed70:	f7f5 bb82 	b.w	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    ed74:	f7f5 bb6a 	b.w	444c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44c>
    ed78:	f7fe bef0 	b.w	db5c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    ed7c:	b570      	push	{r4, r5, r6, lr}
    ed7e:	4614      	mov	r4, r2
    ed80:	461d      	mov	r5, r3
    ed82:	4606      	mov	r6, r0
    ed84:	f7fc fc7c 	bl	b680 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ed88:	1900      	adds	r0, r0, r4
    ed8a:	4169      	adcs	r1, r5
    ed8c:	e9c6 0100 	strd	r0, r1, [r6]
    ed90:	bd70      	pop	{r4, r5, r6, pc}

0000ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    ed92:	b510      	push	{r4, lr}
    ed94:	f7f2 fa66 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ed98:	f000 f944 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    ed9c:	4604      	mov	r4, r0
    ed9e:	221c      	movs	r2, #28
    eda0:	2100      	movs	r1, #0
    eda2:	3009      	adds	r0, #9
    eda4:	f002 f949 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eda8:	207f      	movs	r0, #127	; 0x7f
    edaa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    edae:	21ff      	movs	r1, #255	; 0xff
    edb0:	75e1      	strb	r1, [r4, #23]
    edb2:	72a1      	strb	r1, [r4, #10]
    edb4:	7721      	strb	r1, [r4, #28]
    edb6:	7ce0      	ldrb	r0, [r4, #19]
    edb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    edbc:	3020      	adds	r0, #32
    edbe:	74e0      	strb	r0, [r4, #19]
    edc0:	bd10      	pop	{r4, pc}

0000edc2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    edc2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    edc6:	461d      	mov	r5, r3
    edc8:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    edcc:	4616      	mov	r6, r2
    edce:	4688      	mov	r8, r1
    edd0:	4681      	mov	r9, r0
    edd2:	f7f2 fa47 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    edd6:	4604      	mov	r4, r0
    edd8:	f7fe fd89 	bl	d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    eddc:	2801      	cmp	r0, #1
    edde:	d066      	beq.n	eeae <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    ede0:	4620      	mov	r0, r4
    ede2:	f000 f91f 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    ede6:	4604      	mov	r4, r0
    ede8:	221c      	movs	r2, #28
    edea:	2100      	movs	r1, #0
    edec:	3009      	adds	r0, #9
    edee:	f002 f924 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    edf2:	2701      	movs	r7, #1
    edf4:	7267      	strb	r7, [r4, #9]
    edf6:	ea5f 0008 	movs.w	r0, r8
    edfa:	d009      	beq.n	ee10 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    edfc:	2801      	cmp	r0, #1
    edfe:	d00b      	beq.n	ee18 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    ee00:	2802      	cmp	r0, #2
    ee02:	d02d      	beq.n	ee60 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    ee04:	f1b8 0f06 	cmp.w	r8, #6
    ee08:	d02c      	beq.n	ee64 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    ee0a:	f240 310b 	movw	r1, #779	; 0x30b
    ee0e:	e04b      	b.n	eea8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    ee10:	7ce0      	ldrb	r0, [r4, #19]
    ee12:	f040 0001 	orr.w	r0, r0, #1
    ee16:	e026      	b.n	ee66 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    ee18:	7ce0      	ldrb	r0, [r4, #19]
    ee1a:	f040 0005 	orr.w	r0, r0, #5
    ee1e:	f040 0010 	orr.w	r0, r0, #16
    ee22:	74e0      	strb	r0, [r4, #19]
    ee24:	f104 030a 	add.w	r3, r4, #10
    ee28:	1c5a      	adds	r2, r3, #1
    ee2a:	4648      	mov	r0, r9
    ee2c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ee2e:	f000 f8de 	bl	efee <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    ee32:	f884 a012 	strb.w	sl, [r4, #18]
    ee36:	7567      	strb	r7, [r4, #21]
    ee38:	2000      	movs	r0, #0
    ee3a:	75a0      	strb	r0, [r4, #22]
    ee3c:	20ff      	movs	r0, #255	; 0xff
    ee3e:	75e0      	strb	r0, [r4, #23]
    ee40:	7ce1      	ldrb	r1, [r4, #19]
    ee42:	0749      	lsls	r1, r1, #29
    ee44:	d518      	bpl.n	ee78 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    ee46:	f104 001d 	add.w	r0, r4, #29
    ee4a:	1e41      	subs	r1, r0, #1
    ee4c:	2d02      	cmp	r5, #2
    ee4e:	d00d      	beq.n	ee6c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ee50:	2d03      	cmp	r5, #3
    ee52:	d00b      	beq.n	ee6c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    ee54:	f8d9 2008 	ldr.w	r2, [r9, #8]
    ee58:	6813      	ldr	r3, [r2, #0]
    ee5a:	6003      	str	r3, [r0, #0]
    ee5c:	8892      	ldrh	r2, [r2, #4]
    ee5e:	e008      	b.n	ee72 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    ee60:	7ce0      	ldrb	r0, [r4, #19]
    ee62:	e7dc      	b.n	ee1e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ee64:	7ce0      	ldrb	r0, [r4, #19]
    ee66:	f040 0002 	orr.w	r0, r0, #2
    ee6a:	e7d8      	b.n	ee1e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    ee6c:	6832      	ldr	r2, [r6, #0]
    ee6e:	6002      	str	r2, [r0, #0]
    ee70:	88b2      	ldrh	r2, [r6, #4]
    ee72:	8082      	strh	r2, [r0, #4]
    ee74:	700d      	strb	r5, [r1, #0]
    ee76:	e000      	b.n	ee7a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    ee78:	7720      	strb	r0, [r4, #28]
    ee7a:	207f      	movs	r0, #127	; 0x7f
    ee7c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ee80:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    ee84:	f7f2 f9e8 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ee88:	4605      	mov	r5, r0
    ee8a:	f7f2 f9eb 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ee8e:	2201      	movs	r2, #1
    ee90:	4629      	mov	r1, r5
    ee92:	f000 f8d0 	bl	f036 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ee96:	b128      	cbz	r0, eea4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    ee98:	4620      	mov	r0, r4
    ee9a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ee9e:	2100      	movs	r1, #0
    eea0:	f7f5 bc86 	b.w	47b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7b0>
    eea4:	f240 312b 	movw	r1, #811	; 0x32b
    eea8:	2033      	movs	r0, #51	; 0x33
    eeaa:	f7f1 fddb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeae:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000eeb2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    eeb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eeb6:	461e      	mov	r6, r3
    eeb8:	4617      	mov	r7, r2
    eeba:	4689      	mov	r9, r1
    eebc:	4682      	mov	sl, r0
    eebe:	f8dd 8020 	ldr.w	r8, [sp, #32]
    eec2:	f7f2 f9cf 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    eec6:	4604      	mov	r4, r0
    eec8:	f7fe fd11 	bl	d8ee <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    eecc:	2801      	cmp	r0, #1
    eece:	d039      	beq.n	ef44 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    eed0:	4620      	mov	r0, r4
    eed2:	f000 f8a7 	bl	f024 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    eed6:	4604      	mov	r4, r0
    eed8:	221c      	movs	r2, #28
    eeda:	2100      	movs	r1, #0
    eedc:	3009      	adds	r0, #9
    eede:	f002 f8ac 	bl	1103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eee2:	2501      	movs	r5, #1
    eee4:	f104 030a 	add.w	r3, r4, #10
    eee8:	7265      	strb	r5, [r4, #9]
    eeea:	1c5a      	adds	r2, r3, #1
    eeec:	4649      	mov	r1, r9
    eeee:	4650      	mov	r0, sl
    eef0:	f000 f87d 	bl	efee <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    eef4:	f884 8012 	strb.w	r8, [r4, #18]
    eef8:	7ce0      	ldrb	r0, [r4, #19]
    eefa:	21ff      	movs	r1, #255	; 0xff
    eefc:	f367 0000 	bfi	r0, r7, #0, #1
    ef00:	f040 001a 	orr.w	r0, r0, #26
    ef04:	74e0      	strb	r0, [r4, #19]
    ef06:	7565      	strb	r5, [r4, #21]
    ef08:	2000      	movs	r0, #0
    ef0a:	75a0      	strb	r0, [r4, #22]
    ef0c:	75e1      	strb	r1, [r4, #23]
    ef0e:	7721      	strb	r1, [r4, #28]
    ef10:	207f      	movs	r0, #127	; 0x7f
    ef12:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ef16:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    ef1a:	f7f2 f99d 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ef1e:	4605      	mov	r5, r0
    ef20:	f7f2 f9a0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef24:	2201      	movs	r2, #1
    ef26:	4629      	mov	r1, r5
    ef28:	f000 f885 	bl	f036 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    ef2c:	b128      	cbz	r0, ef3a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    ef2e:	4620      	mov	r0, r4
    ef30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ef34:	2100      	movs	r1, #0
    ef36:	f7f5 bc3b 	b.w	47b0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7b0>
    ef3a:	f44f 7156 	mov.w	r1, #856	; 0x358
    ef3e:	2033      	movs	r0, #51	; 0x33
    ef40:	f7f1 fd90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ef48 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    ef48:	f7ff bf23 	b.w	ed92 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    ef4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef4e:	b08b      	sub	sp, #44	; 0x2c
    ef50:	460f      	mov	r7, r1
    ef52:	f7f2 f987 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    ef56:	4604      	mov	r4, r0
    ef58:	f7fe fd1a 	bl	d990 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    ef5c:	0005      	movs	r5, r0
    ef5e:	d00c      	beq.n	ef7a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    ef60:	4620      	mov	r0, r4
    ef62:	4629      	mov	r1, r5
    ef64:	aa0a      	add	r2, sp, #40	; 0x28
    ef66:	f7fe fd31 	bl	d9cc <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    ef6a:	4606      	mov	r6, r0
    ef6c:	f7f2 f974 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    ef70:	42b0      	cmp	r0, r6
    ef72:	d005      	beq.n	ef80 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    ef74:	f240 11ab 	movw	r1, #427	; 0x1ab
    ef78:	e036      	b.n	efe8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ef7a:	f240 11a1 	movw	r1, #417	; 0x1a1
    ef7e:	e033      	b.n	efe8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    ef80:	4669      	mov	r1, sp
    ef82:	980a      	ldr	r0, [sp, #40]	; 0x28
    ef84:	f000 f859 	bl	f03a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ef88:	1d3e      	adds	r6, r7, #4
    ef8a:	4628      	mov	r0, r5
    ef8c:	f7fe fcad 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ef90:	4605      	mov	r5, r0
    ef92:	f100 0109 	add.w	r1, r0, #9
    ef96:	221c      	movs	r2, #28
    ef98:	4630      	mov	r0, r6
    ef9a:	f001 ffd4 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ef9e:	7ce8      	ldrb	r0, [r5, #19]
    efa0:	f04f 0500 	mov.w	r5, #0
    efa4:	06c1      	lsls	r1, r0, #27
    efa6:	d50d      	bpl.n	efc4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    efa8:	0740      	lsls	r0, r0, #29
    efaa:	d40a      	bmi.n	efc2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    efac:	f89d 2010 	ldrb.w	r2, [sp, #16]
    efb0:	f106 001c 	add.w	r0, r6, #28
    efb4:	9903      	ldr	r1, [sp, #12]
    efb6:	f001 ffc6 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    efba:	f89d 0010 	ldrb.w	r0, [sp, #16]
    efbe:	7230      	strb	r0, [r6, #8]
    efc0:	e000      	b.n	efc4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    efc2:	7235      	strb	r5, [r6, #8]
    efc4:	707d      	strb	r5, [r7, #1]
    efc6:	2005      	movs	r0, #5
    efc8:	7038      	strb	r0, [r7, #0]
    efca:	4638      	mov	r0, r7
    efcc:	f7f5 fb80 	bl	46d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6d0>
    efd0:	4620      	mov	r0, r4
    efd2:	f7fe fca5 	bl	d920 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    efd6:	b128      	cbz	r0, efe4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    efd8:	4620      	mov	r0, r4
    efda:	2100      	movs	r1, #0
    efdc:	f7fe fd94 	bl	db08 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    efe0:	b00b      	add	sp, #44	; 0x2c
    efe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efe4:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    efe8:	2033      	movs	r0, #51	; 0x33
    efea:	f7f1 fd3b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efee:	b510      	push	{r4, lr}
    eff0:	461c      	mov	r4, r3
    eff2:	460b      	mov	r3, r1
    eff4:	29ff      	cmp	r1, #255	; 0xff
    eff6:	d00d      	beq.n	f014 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    eff8:	4621      	mov	r1, r4
    effa:	4618      	mov	r0, r3
    effc:	f7f3 f940 	bl	2280 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f000:	b120      	cbz	r0, f00c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    f002:	7820      	ldrb	r0, [r4, #0]
    f004:	f040 0002 	orr.w	r0, r0, #2
    f008:	7020      	strb	r0, [r4, #0]
    f00a:	bd10      	pop	{r4, pc}
    f00c:	21dc      	movs	r1, #220	; 0xdc
    f00e:	2033      	movs	r0, #51	; 0x33
    f010:	f7f1 fd28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f014:	7c41      	ldrb	r1, [r0, #17]
    f016:	7021      	strb	r1, [r4, #0]
    f018:	6840      	ldr	r0, [r0, #4]
    f01a:	6801      	ldr	r1, [r0, #0]
    f01c:	6011      	str	r1, [r2, #0]
    f01e:	8880      	ldrh	r0, [r0, #4]
    f020:	8090      	strh	r0, [r2, #4]
    f022:	bd10      	pop	{r4, pc}
    f024:	b51c      	push	{r2, r3, r4, lr}
    f026:	4669      	mov	r1, sp
    f028:	aa01      	add	r2, sp, #4
    f02a:	f7fe fcc1 	bl	d9b0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f02e:	9800      	ldr	r0, [sp, #0]
    f030:	f7fe fc5b 	bl	d8ea <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f034:	bd1c      	pop	{r2, r3, r4, pc}
    f036:	f7fe bc0f 	b.w	d858 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f03a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f03a:	7802      	ldrb	r2, [r0, #0]
    f03c:	f002 020f 	and.w	r2, r2, #15
    f040:	f7f5 bbbe 	b.w	47c0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    f044:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f046:	255e      	movs	r5, #94	; 0x5e
    f048:	4668      	mov	r0, sp
    f04a:	f7fd fdb7 	bl	cbbc <mpsl_fem_pa_is_configured>
    f04e:	f89d 0000 	ldrb.w	r0, [sp]
    f052:	b108      	cbz	r0, f058 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    f054:	2401      	movs	r4, #1
    f056:	e000      	b.n	f05a <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    f058:	2400      	movs	r4, #0
    f05a:	a801      	add	r0, sp, #4
    f05c:	f7fd fd96 	bl	cb8c <mpsl_fem_lna_is_configured>
    f060:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f064:	b100      	cbz	r0, f068 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    f066:	2001      	movs	r0, #1
    f068:	4304      	orrs	r4, r0
    f06a:	d000      	beq.n	f06e <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    f06c:	2568      	movs	r5, #104	; 0x68
    f06e:	4628      	mov	r0, r5
    f070:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    f072:	b510      	push	{r4, lr}
    f074:	f7ff ffe6 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f078:	3069      	adds	r0, #105	; 0x69
    f07a:	b280      	uxth	r0, r0
    f07c:	bd10      	pop	{r4, pc}
    f07e:	6980      	ldr	r0, [r0, #24]
    f080:	2800      	cmp	r0, #0
    f082:	d000      	beq.n	f086 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    f084:	2001      	movs	r0, #1
    f086:	4770      	bx	lr
    f088:	b510      	push	{r4, lr}
    f08a:	2802      	cmp	r0, #2
    f08c:	d006      	beq.n	f09c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    f08e:	2108      	movs	r1, #8
    f090:	2801      	cmp	r0, #1
    f092:	d005      	beq.n	f0a0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    f094:	21f5      	movs	r1, #245	; 0xf5
    f096:	2005      	movs	r0, #5
    f098:	f7f1 fce4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f09c:	2104      	movs	r1, #4
    f09e:	e7f7      	b.n	f090 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    f0a0:	202a      	movs	r0, #42	; 0x2a
    f0a2:	2228      	movs	r2, #40	; 0x28
    f0a4:	fb11 2000 	smlabb	r0, r1, r0, r2
    f0a8:	b280      	uxth	r0, r0
    f0aa:	bd10      	pop	{r4, pc}
    f0ac:	9800      	ldr	r0, [sp, #0]
    f0ae:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    f0b2:	1810      	adds	r0, r2, r0
    f0b4:	f143 0300 	adc.w	r3, r3, #0
    f0b8:	1840      	adds	r0, r0, r1
    f0ba:	f143 0100 	adc.w	r1, r3, #0
    f0be:	3833      	subs	r0, #51	; 0x33
    f0c0:	f161 0100 	sbc.w	r1, r1, #0
    f0c4:	f240 42e2 	movw	r2, #1250	; 0x4e2
    f0c8:	1880      	adds	r0, r0, r2
    f0ca:	f141 0100 	adc.w	r1, r1, #0
    f0ce:	4770      	bx	lr
    f0d0:	b510      	push	{r4, lr}
    f0d2:	f7ff ffb7 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f0d6:	f500 7081 	add.w	r0, r0, #258	; 0x102
    f0da:	b280      	uxth	r0, r0
    f0dc:	bd10      	pop	{r4, pc}
    f0de:	f7fb bb13 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f0e2:	1a10      	subs	r0, r2, r0
    f0e4:	4770      	bx	lr

0000f0e6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    f0e6:	b510      	push	{r4, lr}
    f0e8:	2905      	cmp	r1, #5
    f0ea:	d22d      	bcs.n	f148 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    f0ec:	e8df f001 	tbb	[pc, r1]
    f0f0:	0e030a05 	.word	0x0e030a05
    f0f4:	0028      	.short	0x0028
    f0f6:	2100      	movs	r1, #0
    f0f8:	e000      	b.n	f0fc <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    f0fa:	2101      	movs	r1, #1
    f0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f100:	f7f6 b9da 	b.w	54b8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    f104:	2103      	movs	r1, #3
    f106:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    f10a:	bd10      	pop	{r4, pc}
    f10c:	4604      	mov	r4, r0
    f10e:	6900      	ldr	r0, [r0, #16]
    f110:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    f114:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    f118:	6220      	str	r0, [r4, #32]
    f11a:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    f11e:	84a0      	strh	r0, [r4, #36]	; 0x24
    f120:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    f124:	6120      	str	r0, [r4, #16]
    f126:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    f12a:	8320      	strh	r0, [r4, #24]
    f12c:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    f130:	8360      	strh	r0, [r4, #26]
    f132:	4620      	mov	r0, r4
    f134:	f000 f817 	bl	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f138:	2002      	movs	r0, #2
    f13a:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f13e:	bd10      	pop	{r4, pc}
    f140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f144:	f000 b80f 	b.w	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f148:	f240 21fd 	movw	r1, #765	; 0x2fd
    f14c:	2035      	movs	r0, #53	; 0x35
    f14e:	f7f1 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f152 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    f152:	b510      	push	{r4, lr}
    f154:	f7f6 f980 	bl	5458 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    f158:	2000      	movs	r0, #0
    f15a:	bd10      	pop	{r4, pc}

0000f15c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    f15c:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    f160:	4770      	bx	lr
    f162:	2000      	movs	r0, #0
    f164:	4770      	bx	lr
    f166:	b570      	push	{r4, r5, r6, lr}
    f168:	4604      	mov	r4, r0
    f16a:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f16e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f172:	f7f6 f9bd 	bl	54f0 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    f176:	4605      	mov	r5, r0
    f178:	f7ff ff7b 	bl	f072 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    f17c:	4601      	mov	r1, r0
    f17e:	462a      	mov	r2, r5
    f180:	4620      	mov	r0, r4
    f182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f186:	f7ff bb26 	b.w	e7d6 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f18a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    f18e:	469a      	mov	sl, r3
    f190:	4691      	mov	r9, r2
    f192:	460c      	mov	r4, r1
    f194:	4606      	mov	r6, r0
    f196:	2500      	movs	r5, #0
    f198:	f7ff ff54 	bl	f044 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    f19c:	4680      	mov	r8, r0
    f19e:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f1a2:	280d      	cmp	r0, #13
    f1a4:	d017      	beq.n	f1d6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    f1a6:	280e      	cmp	r0, #14
    f1a8:	d015      	beq.n	f1d6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    f1aa:	2000      	movs	r0, #0
    f1ac:	4683      	mov	fp, r0
    f1ae:	f1ba 0f00 	cmp.w	sl, #0
    f1b2:	d003      	beq.n	f1bc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    f1b4:	2101      	movs	r1, #1
    f1b6:	4620      	mov	r0, r4
    f1b8:	f7f6 fb66 	bl	5888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f1bc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f1c0:	2701      	movs	r7, #1
    f1c2:	b150      	cbz	r0, f1da <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    f1c4:	2801      	cmp	r0, #1
    f1c6:	d01a      	beq.n	f1fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    f1c8:	2802      	cmp	r0, #2
    f1ca:	d012      	beq.n	f1f2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    f1cc:	2803      	cmp	r0, #3
    f1ce:	d016      	beq.n	f1fe <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    f1d0:	f240 2136 	movw	r1, #566	; 0x236
    f1d4:	e08e      	b.n	f2f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    f1d6:	2001      	movs	r0, #1
    f1d8:	e7e8      	b.n	f1ac <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    f1da:	f1b9 0f00 	cmp.w	r9, #0
    f1de:	d005      	beq.n	f1ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    f1e0:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    f1e4:	4620      	mov	r0, r4
    f1e6:	f7ff ffbe 	bl	f166 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    f1ea:	e009      	b.n	f200 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    f1ec:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    f1f0:	e080      	b.n	f2f4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    f1f2:	2003      	movs	r0, #3
    f1f4:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    f1f8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f1fc:	e000      	b.n	f200 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    f1fe:	6925      	ldr	r5, [r4, #16]
    f200:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    f204:	f04f 0900 	mov.w	r9, #0
    f208:	1949      	adds	r1, r1, r5
    f20a:	eb40 0009 	adc.w	r0, r0, r9
    f20e:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    f212:	e9c6 1004 	strd	r1, r0, [r6, #16]
    f216:	f886 9000 	strb.w	r9, [r6]
    f21a:	f8a6 8008 	strh.w	r8, [r6, #8]
    f21e:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    f222:	280d      	cmp	r0, #13
    f224:	d02b      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f226:	280b      	cmp	r0, #11
    f228:	d029      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f22a:	2825      	cmp	r0, #37	; 0x25
    f22c:	d027      	beq.n	f27e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    f22e:	2000      	movs	r0, #0
    f230:	4680      	mov	r8, r0
    f232:	4620      	mov	r0, r4
    f234:	f7f6 f9f2 	bl	561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f238:	4601      	mov	r1, r0
    f23a:	f1a8 0001 	sub.w	r0, r8, #1
    f23e:	4201      	tst	r1, r0
    f240:	d102      	bne.n	f248 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f242:	f886 900a 	strb.w	r9, [r6, #10]
    f246:	e005      	b.n	f254 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    f248:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    f24c:	2801      	cmp	r0, #1
    f24e:	d018      	beq.n	f282 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    f250:	2002      	movs	r0, #2
    f252:	72b0      	strb	r0, [r6, #10]
    f254:	72f7      	strb	r7, [r6, #11]
    f256:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f25a:	f7ff faba 	bl	e7d2 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    f25e:	6070      	str	r0, [r6, #4]
    f260:	ea3a 000b 	bics.w	r0, sl, fp
    f264:	d042      	beq.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f266:	4629      	mov	r1, r5
    f268:	4630      	mov	r0, r6
    f26a:	f7ff f805 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f26e:	b287      	uxth	r7, r0
    f270:	4620      	mov	r0, r4
    f272:	f7f6 f9d3 	bl	561c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    f276:	f1b8 0f00 	cmp.w	r8, #0
    f27a:	d004      	beq.n	f286 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    f27c:	e018      	b.n	f2b0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    f27e:	2001      	movs	r0, #1
    f280:	e7d6      	b.n	f230 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    f282:	72b7      	strb	r7, [r6, #10]
    f284:	e7e6      	b.n	f254 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    f286:	42b8      	cmp	r0, r7
    f288:	d812      	bhi.n	f2b0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    f28a:	f886 900a 	strb.w	r9, [r6, #10]
    f28e:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    f292:	4607      	mov	r7, r0
    f294:	fb05 f107 	mul.w	r1, r5, r7
    f298:	1859      	adds	r1, r3, r1
    f29a:	eb42 0209 	adc.w	r2, r2, r9
    f29e:	e9c6 1204 	strd	r1, r2, [r6, #16]
    f2a2:	b32d      	cbz	r5, f2f0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    f2a4:	4629      	mov	r1, r5
    f2a6:	4630      	mov	r0, r6
    f2a8:	f7fe ffe6 	bl	e278 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f2ac:	4438      	add	r0, r7
    f2ae:	b287      	uxth	r7, r0
    f2b0:	4639      	mov	r1, r7
    f2b2:	4620      	mov	r0, r4
    f2b4:	f7f6 fae8 	bl	5888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    f2b8:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    f2bc:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    f2c0:	6f20      	ldr	r0, [r4, #112]	; 0x70
    f2c2:	2800      	cmp	r0, #0
    f2c4:	d012      	beq.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f2c6:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    f2ca:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    f2ce:	1a80      	subs	r0, r0, r2
    f2d0:	b201      	sxth	r1, r0
    f2d2:	2900      	cmp	r1, #0
    f2d4:	dd0a      	ble.n	f2ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    f2d6:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    f2da:	4401      	add	r1, r0
    f2dc:	1e49      	subs	r1, r1, #1
    f2de:	fb91 f1f0 	sdiv	r1, r1, r0
    f2e2:	b289      	uxth	r1, r1
    f2e4:	fb01 2000 	mla	r0, r1, r0, r2
    f2e8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    f2ec:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    f2f0:	f44f 711e 	mov.w	r1, #632	; 0x278
    f2f4:	2035      	movs	r0, #53	; 0x35
    f2f6:	f7f1 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2fa:	b510      	push	{r4, lr}
    f2fc:	4604      	mov	r4, r0
    f2fe:	2000      	movs	r0, #0
    f300:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    f304:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f308:	f7fb fe52 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f30c:	b140      	cbz	r0, f320 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    f30e:	2020      	movs	r0, #32
    f310:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    f314:	f504 700a 	add.w	r0, r4, #552	; 0x228
    f318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f31c:	f7f7 be60 	b.w	6fe0 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f320:	f44f 71c4 	mov.w	r1, #392	; 0x188
    f324:	2035      	movs	r0, #53	; 0x35
    f326:	f7f1 fb9d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f32a:	b510      	push	{r4, lr}
    f32c:	4613      	mov	r3, r2
    f32e:	460a      	mov	r2, r1
    f330:	b086      	sub	sp, #24
    f332:	4604      	mov	r4, r0
    f334:	4601      	mov	r1, r0
    f336:	4668      	mov	r0, sp
    f338:	f7ff ff27 	bl	f18a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    f33c:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    f340:	4669      	mov	r1, sp
    f342:	f000 f809 	bl	f358 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    f346:	2800      	cmp	r0, #0
    f348:	d104      	bne.n	f354 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    f34a:	f240 21a6 	movw	r1, #678	; 0x2a6
    f34e:	2035      	movs	r0, #53	; 0x35
    f350:	f7f1 fb88 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f354:	b006      	add	sp, #24
    f356:	bd10      	pop	{r4, pc}
    f358:	f7fb b9d6 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f35c:	a62c0000 	.word	0xa62c0000
    f360:	a1e0      	.short	0xa1e0
    f362:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f366:	f001 0307 	and.w	r3, r1, #7
    f36a:	7802      	ldrb	r2, [r0, #0]
    f36c:	2101      	movs	r1, #1
    f36e:	4099      	lsls	r1, r3
    f370:	438a      	bics	r2, r1
    f372:	7002      	strb	r2, [r0, #0]
    f374:	4770      	bx	lr

0000f376 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f376:	f7f1 becf 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f37a <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f37a:	2000      	movs	r0, #0
    f37c:	4770      	bx	lr

0000f37e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f37e:	b510      	push	{r4, lr}
    f380:	f7f6 ff94 	bl	62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    f384:	b128      	cbz	r0, f392 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f386:	2000      	movs	r0, #0
    f388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f38c:	4601      	mov	r1, r0
    f38e:	f7f6 bf35 	b.w	61fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    f392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f396:	f7f2 bac5 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f39a:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f39e:	28fe      	cmp	r0, #254	; 0xfe
    f3a0:	d001      	beq.n	f3a6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f3a2:	2001      	movs	r0, #1
    f3a4:	4770      	bx	lr
    f3a6:	2000      	movs	r0, #0
    f3a8:	4770      	bx	lr
    f3aa:	b510      	push	{r4, lr}
    f3ac:	2801      	cmp	r0, #1
    f3ae:	d006      	beq.n	f3be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f3b0:	2802      	cmp	r0, #2
    f3b2:	d004      	beq.n	f3be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f3b4:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f3b8:	2006      	movs	r0, #6
    f3ba:	f7f1 fb53 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3be:	bd10      	pop	{r4, pc}
    f3c0:	2801      	cmp	r0, #1
    f3c2:	d002      	beq.n	f3ca <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f3c4:	2802      	cmp	r0, #2
    f3c6:	d105      	bne.n	f3d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f3c8:	e002      	b.n	f3d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f3ca:	2901      	cmp	r1, #1
    f3cc:	d004      	beq.n	f3d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f3ce:	e001      	b.n	f3d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f3d0:	2902      	cmp	r1, #2
    f3d2:	d001      	beq.n	f3d8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f3d4:	2000      	movs	r0, #0
    f3d6:	4770      	bx	lr
    f3d8:	2001      	movs	r0, #1
    f3da:	4770      	bx	lr
    f3dc:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    f3e0:	428a      	cmp	r2, r1
    f3e2:	d301      	bcc.n	f3e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f3e4:	1a51      	subs	r1, r2, r1
    f3e6:	e000      	b.n	f3ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f3e8:	2100      	movs	r1, #0
    f3ea:	8b02      	ldrh	r2, [r0, #24]
    f3ec:	1d52      	adds	r2, r2, #5
    f3ee:	428a      	cmp	r2, r1
    f3f0:	d302      	bcc.n	f3f8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f3f2:	2101      	movs	r1, #1
    f3f4:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    f3f8:	4770      	bx	lr
    f3fa:	b510      	push	{r4, lr}
    f3fc:	4604      	mov	r4, r0
    f3fe:	6840      	ldr	r0, [r0, #4]
    f400:	2300      	movs	r3, #0
    f402:	4619      	mov	r1, r3
    f404:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f408:	3088      	adds	r0, #136	; 0x88
    f40a:	f7fe fe29 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f40e:	b168      	cbz	r0, f42c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    f410:	6861      	ldr	r1, [r4, #4]
    f412:	2000      	movs	r0, #0
    f414:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    f418:	6861      	ldr	r1, [r4, #4]
    f41a:	2001      	movs	r0, #1
    f41c:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f420:	6861      	ldr	r1, [r4, #4]
    f422:	2002      	movs	r0, #2
    f424:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    f428:	2000      	movs	r0, #0
    f42a:	bd10      	pop	{r4, pc}
    f42c:	2001      	movs	r0, #1
    f42e:	bd10      	pop	{r4, pc}
    f430:	b510      	push	{r4, lr}
    f432:	4604      	mov	r4, r0
    f434:	6840      	ldr	r0, [r0, #4]
    f436:	2300      	movs	r3, #0
    f438:	2109      	movs	r1, #9
    f43a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f43e:	3088      	adds	r0, #136	; 0x88
    f440:	f7fe fe0e 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f444:	2800      	cmp	r0, #0
    f446:	d009      	beq.n	f45c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    f448:	6861      	ldr	r1, [r4, #4]
    f44a:	2000      	movs	r0, #0
    f44c:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    f450:	6861      	ldr	r1, [r4, #4]
    f452:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f456:	6861      	ldr	r1, [r4, #4]
    f458:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f45c:	bd10      	pop	{r4, pc}
    f45e:	6841      	ldr	r1, [r0, #4]
    f460:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f464:	2a10      	cmp	r2, #16
    f466:	d001      	beq.n	f46c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    f468:	2002      	movs	r0, #2
    f46a:	4770      	bx	lr
    f46c:	2200      	movs	r2, #0
    f46e:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    f472:	6840      	ldr	r0, [r0, #4]
    f474:	2113      	movs	r1, #19
    f476:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f47a:	4610      	mov	r0, r2
    f47c:	4770      	bx	lr
    f47e:	b510      	push	{r4, lr}
    f480:	4604      	mov	r4, r0
    f482:	6840      	ldr	r0, [r0, #4]
    f484:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f488:	2917      	cmp	r1, #23
    f48a:	d001      	beq.n	f490 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    f48c:	2002      	movs	r0, #2
    f48e:	bd10      	pop	{r4, pc}
    f490:	f500 7388 	add.w	r3, r0, #272	; 0x110
    f494:	f200 2193 	addw	r1, r0, #659	; 0x293
    f498:	2200      	movs	r2, #0
    f49a:	f200 2083 	addw	r0, r0, #643	; 0x283
    f49e:	f7fe fd7a 	bl	df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f4a2:	6862      	ldr	r2, [r4, #4]
    f4a4:	2000      	movs	r0, #0
    f4a6:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    f4aa:	6861      	ldr	r1, [r4, #4]
    f4ac:	2001      	movs	r0, #1
    f4ae:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    f4b2:	6861      	ldr	r1, [r4, #4]
    f4b4:	2019      	movs	r0, #25
    f4b6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f4ba:	2000      	movs	r0, #0
    f4bc:	bd10      	pop	{r4, pc}
    f4be:	b510      	push	{r4, lr}
    f4c0:	4604      	mov	r4, r0
    f4c2:	6840      	ldr	r0, [r0, #4]
    f4c4:	2300      	movs	r3, #0
    f4c6:	4619      	mov	r1, r3
    f4c8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f4cc:	3088      	adds	r0, #136	; 0x88
    f4ce:	f7fe fdc7 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4d2:	b120      	cbz	r0, f4de <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    f4d4:	6861      	ldr	r1, [r4, #4]
    f4d6:	200b      	movs	r0, #11
    f4d8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f4dc:	bd10      	pop	{r4, pc}
    f4de:	f240 7156 	movw	r1, #1878	; 0x756
    f4e2:	2036      	movs	r0, #54	; 0x36
    f4e4:	f7f1 fabe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4e8:	b510      	push	{r4, lr}
    f4ea:	4604      	mov	r4, r0
    f4ec:	6840      	ldr	r0, [r0, #4]
    f4ee:	2300      	movs	r3, #0
    f4f0:	4619      	mov	r1, r3
    f4f2:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f4f6:	3088      	adds	r0, #136	; 0x88
    f4f8:	f7fe fdb2 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f4fc:	b120      	cbz	r0, f508 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    f4fe:	6861      	ldr	r1, [r4, #4]
    f500:	200d      	movs	r0, #13
    f502:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f506:	bd10      	pop	{r4, pc}
    f508:	f240 715c 	movw	r1, #1884	; 0x75c
    f50c:	2036      	movs	r0, #54	; 0x36
    f50e:	f7f1 faa9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f512:	b510      	push	{r4, lr}
    f514:	4604      	mov	r4, r0
    f516:	6840      	ldr	r0, [r0, #4]
    f518:	2300      	movs	r3, #0
    f51a:	4619      	mov	r1, r3
    f51c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f520:	3088      	adds	r0, #136	; 0x88
    f522:	f7fe fd9d 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f526:	b918      	cbnz	r0, f530 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    f528:	6860      	ldr	r0, [r4, #4]
    f52a:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    f52e:	b140      	cbz	r0, f542 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    f530:	6861      	ldr	r1, [r4, #4]
    f532:	2001      	movs	r0, #1
    f534:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f538:	6861      	ldr	r1, [r4, #4]
    f53a:	2014      	movs	r0, #20
    f53c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f540:	bd10      	pop	{r4, pc}
    f542:	f240 7171 	movw	r1, #1905	; 0x771
    f546:	2036      	movs	r0, #54	; 0x36
    f548:	f7f1 fa8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f54c:	f7ff bb03 	b.w	eb56 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f550:	b510      	push	{r4, lr}
    f552:	4604      	mov	r4, r0
    f554:	6840      	ldr	r0, [r0, #4]
    f556:	2300      	movs	r3, #0
    f558:	4619      	mov	r1, r3
    f55a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f55e:	3088      	adds	r0, #136	; 0x88
    f560:	f7fe fd7e 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f564:	b120      	cbz	r0, f570 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    f566:	6861      	ldr	r1, [r4, #4]
    f568:	201d      	movs	r0, #29
    f56a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f56e:	bd10      	pop	{r4, pc}
    f570:	f240 7192 	movw	r1, #1938	; 0x792
    f574:	2036      	movs	r0, #54	; 0x36
    f576:	f7f1 fa75 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f57a:	b510      	push	{r4, lr}
    f57c:	4604      	mov	r4, r0
    f57e:	6840      	ldr	r0, [r0, #4]
    f580:	2300      	movs	r3, #0
    f582:	4619      	mov	r1, r3
    f584:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f588:	3088      	adds	r0, #136	; 0x88
    f58a:	f7fe fd69 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f58e:	b120      	cbz	r0, f59a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f590:	6861      	ldr	r1, [r4, #4]
    f592:	2000      	movs	r0, #0
    f594:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f598:	bd10      	pop	{r4, pc}
    f59a:	f240 7199 	movw	r1, #1945	; 0x799
    f59e:	2036      	movs	r0, #54	; 0x36
    f5a0:	f7f1 fa60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a4:	f7ff bae9 	b.w	eb7a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f5a8:	b510      	push	{r4, lr}
    f5aa:	4604      	mov	r4, r0
    f5ac:	6840      	ldr	r0, [r0, #4]
    f5ae:	2300      	movs	r3, #0
    f5b0:	4619      	mov	r1, r3
    f5b2:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f5b6:	3088      	adds	r0, #136	; 0x88
    f5b8:	f7fe fd52 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5bc:	b120      	cbz	r0, f5c8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f5be:	6861      	ldr	r1, [r4, #4]
    f5c0:	2005      	movs	r0, #5
    f5c2:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f5c6:	bd10      	pop	{r4, pc}
    f5c8:	f240 7185 	movw	r1, #1925	; 0x785
    f5cc:	2036      	movs	r0, #54	; 0x36
    f5ce:	f7f1 fa49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5d2:	6840      	ldr	r0, [r0, #4]
    f5d4:	2100      	movs	r1, #0
    f5d6:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f5da:	4770      	bx	lr
    f5dc:	b510      	push	{r4, lr}
    f5de:	4604      	mov	r4, r0
    f5e0:	6840      	ldr	r0, [r0, #4]
    f5e2:	2300      	movs	r3, #0
    f5e4:	4619      	mov	r1, r3
    f5e6:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f5ea:	3088      	adds	r0, #136	; 0x88
    f5ec:	f7fe fd38 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f5f0:	b140      	cbz	r0, f604 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f5f2:	6861      	ldr	r1, [r4, #4]
    f5f4:	2001      	movs	r0, #1
    f5f6:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f5fa:	6861      	ldr	r1, [r4, #4]
    f5fc:	2010      	movs	r0, #16
    f5fe:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f602:	bd10      	pop	{r4, pc}
    f604:	f240 7162 	movw	r1, #1890	; 0x762
    f608:	2036      	movs	r0, #54	; 0x36
    f60a:	f7f1 fa2b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f60e:	b510      	push	{r4, lr}
    f610:	6841      	ldr	r1, [r0, #4]
    f612:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f616:	2a13      	cmp	r2, #19
    f618:	d004      	beq.n	f624 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f61a:	f240 716a 	movw	r1, #1898	; 0x76a
    f61e:	2036      	movs	r0, #54	; 0x36
    f620:	f7f1 fa20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f624:	2201      	movs	r2, #1
    f626:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f62a:	6840      	ldr	r0, [r0, #4]
    f62c:	2112      	movs	r1, #18
    f62e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f632:	bd10      	pop	{r4, pc}
    f634:	b510      	push	{r4, lr}
    f636:	4604      	mov	r4, r0
    f638:	6840      	ldr	r0, [r0, #4]
    f63a:	2300      	movs	r3, #0
    f63c:	4619      	mov	r1, r3
    f63e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f642:	3088      	adds	r0, #136	; 0x88
    f644:	f7fe fd0c 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f648:	b120      	cbz	r0, f654 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f64a:	6861      	ldr	r1, [r4, #4]
    f64c:	2020      	movs	r0, #32
    f64e:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f652:	bd10      	pop	{r4, pc}
    f654:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f658:	2036      	movs	r0, #54	; 0x36
    f65a:	f7f1 fa03 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f65e:	b570      	push	{r4, r5, r6, lr}
    f660:	6841      	ldr	r1, [r0, #4]
    f662:	4604      	mov	r4, r0
    f664:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f668:	b910      	cbnz	r0, f670 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f66a:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f66e:	b178      	cbz	r0, f690 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f670:	2000      	movs	r0, #0
    f672:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f676:	2225      	movs	r2, #37	; 0x25
    f678:	2500      	movs	r5, #0
    f67a:	2b22      	cmp	r3, #34	; 0x22
    f67c:	d00a      	beq.n	f694 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f67e:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f682:	2b24      	cmp	r3, #36	; 0x24
    f684:	d01b      	beq.n	f6be <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f686:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f68a:	2036      	movs	r0, #54	; 0x36
    f68c:	f7f1 f9ea 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f690:	2001      	movs	r0, #1
    f692:	e7ee      	b.n	f672 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f694:	b168      	cbz	r0, f6b2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f696:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f69a:	6860      	ldr	r0, [r4, #4]
    f69c:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f6a0:	2801      	cmp	r0, #1
    f6a2:	d102      	bne.n	f6aa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f6a4:	2000      	movs	r0, #0
    f6a6:	f7f6 ffbd 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f6aa:	6860      	ldr	r0, [r4, #4]
    f6ac:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f6b0:	e001      	b.n	f6b6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f6b2:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f6b6:	6860      	ldr	r0, [r4, #4]
    f6b8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f6bc:	bd70      	pop	{r4, r5, r6, pc}
    f6be:	b128      	cbz	r0, f6cc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f6c0:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f6c4:	2000      	movs	r0, #0
    f6c6:	f7f6 ffad 	bl	6624 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f6ca:	e001      	b.n	f6d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f6cc:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f6d0:	6860      	ldr	r0, [r4, #4]
    f6d2:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f6d6:	bd70      	pop	{r4, r5, r6, pc}
    f6d8:	6842      	ldr	r2, [r0, #4]
    f6da:	2100      	movs	r1, #0
    f6dc:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f6e0:	b12b      	cbz	r3, f6ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f6e2:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f6e6:	6840      	ldr	r0, [r0, #4]
    f6e8:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f6ec:	4770      	bx	lr
    f6ee:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f6f2:	6840      	ldr	r0, [r0, #4]
    f6f4:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f6f8:	4770      	bx	lr
    f6fa:	b510      	push	{r4, lr}
    f6fc:	6840      	ldr	r0, [r0, #4]
    f6fe:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f702:	2919      	cmp	r1, #25
    f704:	d004      	beq.n	f710 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f706:	f240 717a 	movw	r1, #1914	; 0x77a
    f70a:	2036      	movs	r0, #54	; 0x36
    f70c:	f7f1 f9aa 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f710:	211b      	movs	r1, #27
    f712:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f716:	bd10      	pop	{r4, pc}
    f718:	b510      	push	{r4, lr}
    f71a:	4604      	mov	r4, r0
    f71c:	6840      	ldr	r0, [r0, #4]
    f71e:	2300      	movs	r3, #0
    f720:	2101      	movs	r1, #1
    f722:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f726:	3088      	adds	r0, #136	; 0x88
    f728:	f7fe fc9a 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f72c:	2800      	cmp	r0, #0
    f72e:	d10a      	bne.n	f746 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f730:	6861      	ldr	r1, [r4, #4]
    f732:	2007      	movs	r0, #7
    f734:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f738:	6861      	ldr	r1, [r4, #4]
    f73a:	2000      	movs	r0, #0
    f73c:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f740:	6861      	ldr	r1, [r4, #4]
    f742:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f746:	bd10      	pop	{r4, pc}
    f748:	b570      	push	{r4, r5, r6, lr}
    f74a:	4604      	mov	r4, r0
    f74c:	6840      	ldr	r0, [r0, #4]
    f74e:	2300      	movs	r3, #0
    f750:	4619      	mov	r1, r3
    f752:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f756:	3088      	adds	r0, #136	; 0x88
    f758:	f7fe fc82 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f75c:	2500      	movs	r5, #0
    f75e:	b110      	cbz	r0, f766 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f760:	6860      	ldr	r0, [r4, #4]
    f762:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f766:	6860      	ldr	r0, [r4, #4]
    f768:	2300      	movs	r3, #0
    f76a:	4619      	mov	r1, r3
    f76c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f770:	3088      	adds	r0, #136	; 0x88
    f772:	f7fe fc75 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f776:	2800      	cmp	r0, #0
    f778:	d002      	beq.n	f780 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f77a:	6860      	ldr	r0, [r4, #4]
    f77c:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f780:	bd70      	pop	{r4, r5, r6, pc}
    f782:	f7ff ba46 	b.w	ec12 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f786:	b510      	push	{r4, lr}
    f788:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f78c:	b941      	cbnz	r1, f7a0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f78e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f792:	2300      	movs	r3, #0
    f794:	2106      	movs	r1, #6
    f796:	3088      	adds	r0, #136	; 0x88
    f798:	f7fe fc62 	bl	e060 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f79c:	2800      	cmp	r0, #0
    f79e:	d000      	beq.n	f7a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f7a0:	2001      	movs	r0, #1
    f7a2:	bd10      	pop	{r4, pc}

0000f7a4 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f7a4:	b510      	push	{r4, lr}
    f7a6:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f7aa:	1ac3      	subs	r3, r0, r3
    f7ac:	eb61 0104 	sbc.w	r1, r1, r4
    f7b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f7b4:	17e0      	asrs	r0, r4, #31
    f7b6:	1ae4      	subs	r4, r4, r3
    f7b8:	4188      	sbcs	r0, r1
    f7ba:	da05      	bge.n	f7c8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f7bc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f7c0:	1a18      	subs	r0, r3, r0
    f7c2:	f171 0000 	sbcs.w	r0, r1, #0
    f7c6:	db03      	blt.n	f7d0 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f7c8:	21b0      	movs	r1, #176	; 0xb0
    f7ca:	2037      	movs	r0, #55	; 0x37
    f7cc:	f7f1 f94a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7d0:	2900      	cmp	r1, #0
    f7d2:	da00      	bge.n	f7d6 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f7d4:	425b      	negs	r3, r3
    f7d6:	fbb3 f0f2 	udiv	r0, r3, r2
    f7da:	fb02 3010 	mls	r0, r2, r0, r3
    f7de:	2900      	cmp	r1, #0
    f7e0:	da02      	bge.n	f7e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f7e2:	2800      	cmp	r0, #0
    f7e4:	d000      	beq.n	f7e8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f7e6:	1a10      	subs	r0, r2, r0
    f7e8:	bd10      	pop	{r4, pc}
    f7ea:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f7ee:	f001 0107 	and.w	r1, r1, #7
    f7f2:	7800      	ldrb	r0, [r0, #0]
    f7f4:	40c8      	lsrs	r0, r1
    f7f6:	f000 0001 	and.w	r0, r0, #1
    f7fa:	4770      	bx	lr

0000f7fc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f800:	6856      	ldr	r6, [r2, #4]
    f802:	460c      	mov	r4, r1
    f804:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f808:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f80c:	2823      	cmp	r0, #35	; 0x23
    f80e:	d008      	beq.n	f822 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f810:	2824      	cmp	r0, #36	; 0x24
    f812:	d014      	beq.n	f83e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f814:	2825      	cmp	r0, #37	; 0x25
    f816:	d02a      	beq.n	f86e <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f818:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f81c:	2078      	movs	r0, #120	; 0x78
    f81e:	f7f1 f921 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f822:	7de8      	ldrb	r0, [r5, #23]
    f824:	f000 f8d6 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f828:	7de9      	ldrb	r1, [r5, #23]
    f82a:	7121      	strb	r1, [r4, #4]
    f82c:	7e29      	ldrb	r1, [r5, #24]
    f82e:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f832:	7161      	strb	r1, [r4, #5]
    f834:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f838:	71a0      	strb	r0, [r4, #6]
    f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f83e:	7d28      	ldrb	r0, [r5, #20]
    f840:	f000 f8c8 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f844:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f848:	7f78      	ldrb	r0, [r7, #29]
    f84a:	3678      	adds	r6, #120	; 0x78
    f84c:	2828      	cmp	r0, #40	; 0x28
    f84e:	d00c      	beq.n	f86a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f850:	68b8      	ldr	r0, [r7, #8]
    f852:	f7f3 fc9b 	bl	318c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f856:	7831      	ldrb	r1, [r6, #0]
    f858:	7121      	strb	r1, [r4, #4]
    f85a:	7d69      	ldrb	r1, [r5, #21]
    f85c:	7161      	strb	r1, [r4, #5]
    f85e:	7871      	ldrb	r1, [r6, #1]
    f860:	71a1      	strb	r1, [r4, #6]
    f862:	71e0      	strb	r0, [r4, #7]
    f864:	2000      	movs	r0, #0
    f866:	75a8      	strb	r0, [r5, #22]
    f868:	e7e7      	b.n	f83a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f86a:	20ff      	movs	r0, #255	; 0xff
    f86c:	e7f3      	b.n	f856 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f86e:	7d28      	ldrb	r0, [r5, #20]
    f870:	f000 f8b0 	bl	f9d4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f874:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f878:	7d29      	ldrb	r1, [r5, #20]
    f87a:	7121      	strb	r1, [r4, #4]
    f87c:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f880:	7161      	strb	r1, [r4, #5]
    f882:	7d69      	ldrb	r1, [r5, #21]
    f884:	71a1      	strb	r1, [r4, #6]
    f886:	7840      	ldrb	r0, [r0, #1]
    f888:	71e0      	strb	r0, [r4, #7]
    f88a:	e7d6      	b.n	f83a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f88c:	b510      	push	{r4, lr}
    f88e:	2801      	cmp	r0, #1
    f890:	d006      	beq.n	f8a0 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f892:	2802      	cmp	r0, #2
    f894:	d006      	beq.n	f8a4 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f896:	f240 2162 	movw	r1, #610	; 0x262
    f89a:	2078      	movs	r0, #120	; 0x78
    f89c:	f7f1 f8e2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8a0:	2000      	movs	r0, #0
    f8a2:	bd10      	pop	{r4, pc}
    f8a4:	2001      	movs	r0, #1
    f8a6:	bd10      	pop	{r4, pc}

0000f8a8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f8a8:	207f      	movs	r0, #127	; 0x7f
    f8aa:	f000 b8ad 	b.w	fa08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f8ae <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f8ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f8b2:	f000 b8a9 	b.w	fa08 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f8b6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f8b6:	b510      	push	{r4, lr}
    f8b8:	4604      	mov	r4, r0
    f8ba:	f7f8 f88b 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f8be:	1e64      	subs	r4, r4, #1
    f8c0:	b2e2      	uxtb	r2, r4
    f8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8c6:	f000 b86b 	b.w	f9a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f8ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f8ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f8ce:	4607      	mov	r7, r0
    f8d0:	461e      	mov	r6, r3
    f8d2:	4690      	mov	r8, r2
    f8d4:	460c      	mov	r4, r1
    f8d6:	4608      	mov	r0, r1
    f8d8:	f7ff ffed 	bl	f8b6 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f8dc:	b1f8      	cbz	r0, f91e <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f8de:	687d      	ldr	r5, [r7, #4]
    f8e0:	2121      	movs	r1, #33	; 0x21
    f8e2:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f8e6:	3588      	adds	r5, #136	; 0x88
    f8e8:	f7ff ff7f 	bl	f7ea <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f8ec:	b1c8      	cbz	r0, f922 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f8ee:	1e64      	subs	r4, r4, #1
    f8f0:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f8f4:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f8f8:	b2e2      	uxtb	r2, r4
    f8fa:	f000 f851 	bl	f9a0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f8fe:	b180      	cbz	r0, f922 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f900:	6878      	ldr	r0, [r7, #4]
    f902:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f906:	f88d 1000 	strb.w	r1, [sp]
    f90a:	9900      	ldr	r1, [sp, #0]
    f90c:	9100      	str	r1, [sp, #0]
    f90e:	f89d 1000 	ldrb.w	r1, [sp]
    f912:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f916:	b131      	cbz	r1, f926 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f918:	203a      	movs	r0, #58	; 0x3a
    f91a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f91e:	2011      	movs	r0, #17
    f920:	e7fb      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f922:	201a      	movs	r0, #26
    f924:	e7f9      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f926:	1c81      	adds	r1, r0, #2
    f928:	700e      	strb	r6, [r1, #0]
    f92a:	2101      	movs	r1, #1
    f92c:	40a1      	lsls	r1, r4
    f92e:	7001      	strb	r1, [r0, #0]
    f930:	f880 8001 	strb.w	r8, [r0, #1]
    f934:	2000      	movs	r0, #0
    f936:	e7f0      	b.n	f91a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f938 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f93c:	460d      	mov	r5, r1
    f93e:	4606      	mov	r6, r0
    f940:	f7ff ffb2 	bl	f8a8 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f944:	4607      	mov	r7, r0
    f946:	f7ff ffb2 	bl	f8ae <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f94a:	2400      	movs	r4, #0
    f94c:	4285      	cmp	r5, r0
    f94e:	d100      	bne.n	f952 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f950:	2401      	movs	r4, #1
    f952:	42bd      	cmp	r5, r7
    f954:	d101      	bne.n	f95a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f956:	f044 0402 	orr.w	r4, r4, #2
    f95a:	f000 f834 	bl	f9c6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f95e:	2200      	movs	r2, #0
    f960:	4601      	mov	r1, r0
    f962:	2301      	movs	r3, #1
    f964:	fa03 f002 	lsl.w	r0, r3, r2
    f968:	4208      	tst	r0, r1
    f96a:	d005      	beq.n	f978 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f96c:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f970:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f974:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f978:	1c52      	adds	r2, r2, #1
    f97a:	b2d2      	uxtb	r2, r2
    f97c:	2a02      	cmp	r2, #2
    f97e:	d3f1      	bcc.n	f964 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f984 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f984:	b510      	push	{r4, lr}
    f986:	4604      	mov	r4, r0
    f988:	4608      	mov	r0, r1
    f98a:	f7ff ff7f 	bl	f88c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f98e:	2802      	cmp	r0, #2
    f990:	d205      	bcs.n	f99e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f992:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f996:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f99a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f99e:	bd10      	pop	{r4, pc}
    f9a0:	b510      	push	{r4, lr}
    f9a2:	4614      	mov	r4, r2
    f9a4:	4602      	mov	r2, r0
    f9a6:	2000      	movs	r0, #0
    f9a8:	4603      	mov	r3, r0
    f9aa:	2c02      	cmp	r4, #2
    f9ac:	d205      	bcs.n	f9ba <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f9ae:	4610      	mov	r0, r2
    f9b0:	f000 f821 	bl	f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f9b4:	2101      	movs	r1, #1
    f9b6:	40a1      	lsls	r1, r4
    f9b8:	b2cb      	uxtb	r3, r1
    f9ba:	4203      	tst	r3, r0
    f9bc:	d001      	beq.n	f9c2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f9be:	2001      	movs	r0, #1
    f9c0:	bd10      	pop	{r4, pc}
    f9c2:	2000      	movs	r0, #0
    f9c4:	bd10      	pop	{r4, pc}
    f9c6:	b510      	push	{r4, lr}
    f9c8:	f7f8 f804 	bl	79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9d0:	f000 b811 	b.w	f9f6 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f9d4:	4601      	mov	r1, r0
    f9d6:	b510      	push	{r4, lr}
    f9d8:	2000      	movs	r0, #0
    f9da:	2301      	movs	r3, #1
    f9dc:	fa03 f200 	lsl.w	r2, r3, r0
    f9e0:	420a      	tst	r2, r1
    f9e2:	d107      	bne.n	f9f4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f9e4:	1c40      	adds	r0, r0, #1
    f9e6:	b2c0      	uxtb	r0, r0
    f9e8:	2802      	cmp	r0, #2
    f9ea:	d3f7      	bcc.n	f9dc <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f9ec:	213c      	movs	r1, #60	; 0x3c
    f9ee:	2078      	movs	r0, #120	; 0x78
    f9f0:	f7f1 f838 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9f4:	bd10      	pop	{r4, pc}
    f9f6:	0a00      	lsrs	r0, r0, #8
    f9f8:	2201      	movs	r2, #1
    f9fa:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f9fe:	07c0      	lsls	r0, r0, #31
    fa00:	d000      	beq.n	fa04 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    fa02:	2203      	movs	r2, #3
    fa04:	4610      	mov	r0, r2
    fa06:	4770      	bx	lr
    fa08:	b508      	push	{r3, lr}
    fa0a:	2301      	movs	r3, #1
    fa0c:	f640 1288 	movw	r2, #2440	; 0x988
    fa10:	4669      	mov	r1, sp
    fa12:	f7fd f8d9 	bl	cbc8 <mpsl_fem_tx_power_split>
    fa16:	bd08      	pop	{r3, pc}
    fa18:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fa1c:	f001 0107 	and.w	r1, r1, #7
    fa20:	7800      	ldrb	r0, [r0, #0]
    fa22:	40c8      	lsrs	r0, r1
    fa24:	f000 0001 	and.w	r0, r0, #1
    fa28:	4770      	bx	lr
    fa2a:	b118      	cbz	r0, fa34 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fa2c:	2802      	cmp	r0, #2
    fa2e:	d001      	beq.n	fa34 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fa30:	2001      	movs	r0, #1
    fa32:	4770      	bx	lr
    fa34:	2000      	movs	r0, #0
    fa36:	4770      	bx	lr

0000fa38 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fa38:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fa3a:	7881      	ldrb	r1, [r0, #2]
    fa3c:	2500      	movs	r5, #0
    fa3e:	4604      	mov	r4, r0
    fa40:	291a      	cmp	r1, #26
    fa42:	d024      	beq.n	fa8e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fa44:	dc0e      	bgt.n	fa64 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fa46:	2916      	cmp	r1, #22
    fa48:	d22b      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa4a:	e8df f001 	tbb	[pc, r1]
    fa4e:	2a2a      	.short	0x2a2a
    fa50:	202a2a2a 	.word	0x202a2a2a
    fa54:	2a2a2a2a 	.word	0x2a2a2a2a
    fa58:	2a2a2a2a 	.word	0x2a2a2a2a
    fa5c:	2a2a2a2a 	.word	0x2a2a2a2a
    fa60:	2020202a 	.word	0x2020202a
    fa64:	292a      	cmp	r1, #42	; 0x2a
    fa66:	d01c      	beq.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa68:	dc0b      	bgt.n	fa82 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fa6a:	f1a1 011e 	sub.w	r1, r1, #30
    fa6e:	290c      	cmp	r1, #12
    fa70:	d217      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa72:	e8df f001 	tbb	[pc, r1]
    fa76:	1616      	.short	0x1616
    fa78:	16161616 	.word	0x16161616
    fa7c:	16161616 	.word	0x16161616
    fa80:	0c16      	.short	0x0c16
    fa82:	393a      	subs	r1, #58	; 0x3a
    fa84:	2902      	cmp	r1, #2
    fa86:	d20c      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa88:	e8df f001 	tbb	[pc, r1]
    fa8c:	010b      	.short	0x010b
    fa8e:	8820      	ldrh	r0, [r4, #0]
    fa90:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fa94:	d205      	bcs.n	faa2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fa96:	4669      	mov	r1, sp
    fa98:	f7fe fab9 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa9c:	b118      	cbz	r0, faa6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fa9e:	2002      	movs	r0, #2
    faa0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faa2:	2012      	movs	r0, #18
    faa4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faa6:	9901      	ldr	r1, [sp, #4]
    faa8:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    faac:	f88d 0008 	strb.w	r0, [sp, #8]
    fab0:	9802      	ldr	r0, [sp, #8]
    fab2:	9002      	str	r0, [sp, #8]
    fab4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fab8:	f501 719c 	add.w	r1, r1, #312	; 0x138
    fabc:	b108      	cbz	r0, fac2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    fabe:	200c      	movs	r0, #12
    fac0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fac2:	78a0      	ldrb	r0, [r4, #2]
    fac4:	7048      	strb	r0, [r1, #1]
    fac6:	20ff      	movs	r0, #255	; 0xff
    fac8:	7008      	strb	r0, [r1, #0]
    faca:	4628      	mov	r0, r5
    facc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000face <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    face:	b510      	push	{r4, lr}
    fad0:	4604      	mov	r4, r0
    fad2:	7800      	ldrb	r0, [r0, #0]
    fad4:	b118      	cbz	r0, fade <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fad6:	2801      	cmp	r0, #1
    fad8:	d001      	beq.n	fade <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fada:	2012      	movs	r0, #18
    fadc:	bd10      	pop	{r4, pc}
    fade:	f000 fdee 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fae2:	b120      	cbz	r0, faee <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fae4:	f7f2 fbc6 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fae8:	b108      	cbz	r0, faee <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    faea:	200c      	movs	r0, #12
    faec:	bd10      	pop	{r4, pc}
    faee:	7820      	ldrb	r0, [r4, #0]
    faf0:	f7ff ff9b 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    faf4:	1de2      	adds	r2, r4, #7
    faf6:	f104 0317 	add.w	r3, r4, #23
    fafa:	1c61      	adds	r1, r4, #1
    fafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb00:	f7f2 bbea 	b.w	22d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fb04 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fb04:	b510      	push	{r4, lr}
    fb06:	4604      	mov	r4, r0
    fb08:	f000 fe0a 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fb0c:	b108      	cbz	r0, fb12 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fb0e:	200c      	movs	r0, #12
    fb10:	bd10      	pop	{r4, pc}
    fb12:	7820      	ldrb	r0, [r4, #0]
    fb14:	b118      	cbz	r0, fb1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb16:	2801      	cmp	r0, #1
    fb18:	d001      	beq.n	fb1e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb1a:	2012      	movs	r0, #18
    fb1c:	bd10      	pop	{r4, pc}
    fb1e:	f7ff ff84 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fb22:	1c61      	adds	r1, r4, #1
    fb24:	f7f2 fc7c 	bl	2420 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fb28:	b108      	cbz	r0, fb2e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fb2a:	2000      	movs	r0, #0
    fb2c:	bd10      	pop	{r4, pc}
    fb2e:	2007      	movs	r0, #7
    fb30:	bd10      	pop	{r4, pc}

0000fb32 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fb32:	b510      	push	{r4, lr}
    fb34:	f000 fdc3 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fb38:	b120      	cbz	r0, fb44 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb3a:	f7f2 fb9b 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb3e:	b108      	cbz	r0, fb44 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fb40:	200c      	movs	r0, #12
    fb42:	bd10      	pop	{r4, pc}
    fb44:	f7f2 fc0e 	bl	2364 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fb48:	2000      	movs	r0, #0
    fb4a:	bd10      	pop	{r4, pc}

0000fb4c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fb4c:	b510      	push	{r4, lr}
    fb4e:	f000 fde7 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fb52:	b108      	cbz	r0, fb58 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fb54:	200c      	movs	r0, #12
    fb56:	bd10      	pop	{r4, pc}
    fb58:	f7f2 fc8a 	bl	2470 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fb5c:	2000      	movs	r0, #0
    fb5e:	bd10      	pop	{r4, pc}

0000fb60 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fb64:	4605      	mov	r5, r0
    fb66:	f000 fb79 	bl	1025c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fb6a:	2800      	cmp	r0, #0
    fb6c:	d112      	bne.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fb6e:	8828      	ldrh	r0, [r5, #0]
    fb70:	2100      	movs	r1, #0
    fb72:	f7fe f8a4 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fb76:	0004      	movs	r4, r0
    fb78:	d00e      	beq.n	fb98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fb7a:	f000 fd8a 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fb7e:	b158      	cbz	r0, fb98 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fb80:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    fb84:	f88d 0000 	strb.w	r0, [sp]
    fb88:	9800      	ldr	r0, [sp, #0]
    fb8a:	9000      	str	r0, [sp, #0]
    fb8c:	f89d 0000 	ldrb.w	r0, [sp]
    fb90:	b120      	cbz	r0, fb9c <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    fb92:	203a      	movs	r0, #58	; 0x3a
    fb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb98:	2002      	movs	r0, #2
    fb9a:	e7fb      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fb9c:	f04f 0800 	mov.w	r8, #0
    fba0:	88a8      	ldrh	r0, [r5, #4]
    fba2:	f7fe fa40 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fba6:	4607      	mov	r7, r0
    fba8:	4601      	mov	r1, r0
    fbaa:	2005      	movs	r0, #5
    fbac:	f7fe fbbd 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fbb0:	4606      	mov	r6, r0
    fbb2:	4639      	mov	r1, r7
    fbb4:	2008      	movs	r0, #8
    fbb6:	f7fe fbb8 	bl	e32a <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fbba:	42b0      	cmp	r0, r6
    fbbc:	d301      	bcc.n	fbc2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    fbbe:	42be      	cmp	r6, r7
    fbc0:	d301      	bcc.n	fbc6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    fbc2:	2012      	movs	r0, #18
    fbc4:	e7e6      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fbc6:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    fbca:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    fbce:	88e8      	ldrh	r0, [r5, #6]
    fbd0:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    fbd4:	8928      	ldrh	r0, [r5, #8]
    fbd6:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    fbda:	f504 7419 	add.w	r4, r4, #612	; 0x264
    fbde:	20ff      	movs	r0, #255	; 0xff
    fbe0:	7020      	strb	r0, [r4, #0]
    fbe2:	2000      	movs	r0, #0
    fbe4:	e7d6      	b.n	fb94 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000fbe6 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    fbe6:	b508      	push	{r3, lr}
    fbe8:	f7f4 ff40 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fbec:	2805      	cmp	r0, #5
    fbee:	d001      	beq.n	fbf4 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    fbf0:	200c      	movs	r0, #12
    fbf2:	bd08      	pop	{r3, pc}
    fbf4:	4668      	mov	r0, sp
    fbf6:	f7f4 febf 	bl	4978 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    fbfa:	2800      	cmp	r0, #0
    fbfc:	d1f9      	bne.n	fbf2 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    fbfe:	f7f3 fc85 	bl	350c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    fc02:	2000      	movs	r0, #0
    fc04:	bd08      	pop	{r3, pc}

0000fc06 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fc06:	b510      	push	{r4, lr}
    fc08:	460b      	mov	r3, r1
    fc0a:	2201      	movs	r2, #1
    fc0c:	f100 0110 	add.w	r1, r0, #16
    fc10:	f7fe f9c1 	bl	df96 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fc14:	2000      	movs	r0, #0
    fc16:	bd10      	pop	{r4, pc}

0000fc18 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fc18:	b510      	push	{r4, lr}
    fc1a:	2108      	movs	r1, #8
    fc1c:	f7f0 ffc2 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fc20:	2000      	movs	r0, #0
    fc22:	bd10      	pop	{r4, pc}

0000fc24 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fc24:	21fb      	movs	r1, #251	; 0xfb
    fc26:	8001      	strh	r1, [r0, #0]
    fc28:	f640 0248 	movw	r2, #2120	; 0x848
    fc2c:	8042      	strh	r2, [r0, #2]
    fc2e:	8081      	strh	r1, [r0, #4]
    fc30:	80c2      	strh	r2, [r0, #6]
    fc32:	2000      	movs	r0, #0
    fc34:	4770      	bx	lr

0000fc36 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc36:	b51c      	push	{r2, r3, r4, lr}
    fc38:	8800      	ldrh	r0, [r0, #0]
    fc3a:	4669      	mov	r1, sp
    fc3c:	f7fe f9e7 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc40:	2800      	cmp	r0, #0
    fc42:	d10c      	bne.n	fc5e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    fc44:	9c01      	ldr	r4, [sp, #4]
    fc46:	f89d 0000 	ldrb.w	r0, [sp]
    fc4a:	f504 749c 	add.w	r4, r4, #312	; 0x138
    fc4e:	b918      	cbnz	r0, fc58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    fc50:	9801      	ldr	r0, [sp, #4]
    fc52:	f000 fd1e 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fc56:	b118      	cbz	r0, fc60 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc58:	7ce0      	ldrb	r0, [r4, #19]
    fc5a:	b118      	cbz	r0, fc64 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    fc5c:	203a      	movs	r0, #58	; 0x3a
    fc5e:	bd1c      	pop	{r2, r3, r4, pc}
    fc60:	2002      	movs	r0, #2
    fc62:	bd1c      	pop	{r2, r3, r4, pc}
    fc64:	2001      	movs	r0, #1
    fc66:	74e0      	strb	r0, [r4, #19]
    fc68:	2000      	movs	r0, #0
    fc6a:	bd1c      	pop	{r2, r3, r4, pc}

0000fc6c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fc6c:	2108      	movs	r1, #8
    fc6e:	7001      	strb	r1, [r0, #0]
    fc70:	2000      	movs	r0, #0
    fc72:	4770      	bx	lr

0000fc74 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fc74:	b510      	push	{r4, lr}
    fc76:	4604      	mov	r4, r0
    fc78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fc7c:	f000 fd31 	bl	106e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x440>
    fc80:	f7f2 fdd0 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc84:	7020      	strb	r0, [r4, #0]
    fc86:	f000 fd01 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fc8a:	f7f2 fdcb 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc8e:	7060      	strb	r0, [r4, #1]
    fc90:	2000      	movs	r0, #0
    fc92:	bd10      	pop	{r4, pc}

0000fc94 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fc94:	2108      	movs	r1, #8
    fc96:	7001      	strb	r1, [r0, #0]
    fc98:	2000      	movs	r0, #0
    fc9a:	4770      	bx	lr

0000fc9c <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fc9c:	b510      	push	{r4, lr}
    fc9e:	4604      	mov	r4, r0
    fca0:	7800      	ldrb	r0, [r0, #0]
    fca2:	b108      	cbz	r0, fca8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fca4:	2801      	cmp	r0, #1
    fca6:	d110      	bne.n	fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fca8:	f000 fd09 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fcac:	b120      	cbz	r0, fcb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fcae:	f7f2 fae1 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fcb2:	b108      	cbz	r0, fcb8 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fcb4:	200c      	movs	r0, #12
    fcb6:	bd10      	pop	{r4, pc}
    fcb8:	7820      	ldrb	r0, [r4, #0]
    fcba:	f7ff feb6 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fcbe:	1c61      	adds	r1, r4, #1
    fcc0:	f7fe f94f 	bl	df62 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fcc4:	b108      	cbz	r0, fcca <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fcc6:	2000      	movs	r0, #0
    fcc8:	bd10      	pop	{r4, pc}
    fcca:	2012      	movs	r0, #18
    fccc:	bd10      	pop	{r4, pc}

0000fcce <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fcce:	b510      	push	{r4, lr}
    fcd0:	4604      	mov	r4, r0
    fcd2:	f000 fd25 	bl	10720 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x47e>
    fcd6:	b108      	cbz	r0, fcdc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fcd8:	200c      	movs	r0, #12
    fcda:	bd10      	pop	{r4, pc}
    fcdc:	7820      	ldrb	r0, [r4, #0]
    fcde:	b108      	cbz	r0, fce4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fce0:	2801      	cmp	r0, #1
    fce2:	d107      	bne.n	fcf4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fce4:	f7ff fea1 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fce8:	1c61      	adds	r1, r4, #1
    fcea:	f7fe f949 	bl	df80 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fcee:	b108      	cbz	r0, fcf4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcf0:	2000      	movs	r0, #0
    fcf2:	bd10      	pop	{r4, pc}
    fcf4:	2012      	movs	r0, #18
    fcf6:	bd10      	pop	{r4, pc}

0000fcf8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fcf8:	b510      	push	{r4, lr}
    fcfa:	4604      	mov	r4, r0
    fcfc:	f000 fcdf 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fd00:	b108      	cbz	r0, fd06 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fd02:	200c      	movs	r0, #12
    fd04:	bd10      	pop	{r4, pc}
    fd06:	7820      	ldrb	r0, [r4, #0]
    fd08:	b100      	cbz	r0, fd0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0x14>
    fd0a:	2001      	movs	r0, #1
    fd0c:	f7f2 faac 	bl	2268 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fd10:	2000      	movs	r0, #0
    fd12:	bd10      	pop	{r4, pc}

0000fd14 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fd14:	b50e      	push	{r1, r2, r3, lr}
    fd16:	8882      	ldrh	r2, [r0, #4]
    fd18:	f244 2390 	movw	r3, #17040	; 0x4290
    fd1c:	429a      	cmp	r2, r3
    fd1e:	d901      	bls.n	fd24 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fd20:	2012      	movs	r0, #18
    fd22:	bd0e      	pop	{r1, r2, r3, pc}
    fd24:	f640 0348 	movw	r3, #2120	; 0x848
    fd28:	429a      	cmp	r2, r3
    fd2a:	d300      	bcc.n	fd2e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fd2c:	461a      	mov	r2, r3
    fd2e:	8803      	ldrh	r3, [r0, #0]
    fd30:	f8ad 3000 	strh.w	r3, [sp]
    fd34:	8843      	ldrh	r3, [r0, #2]
    fd36:	f8ad 3002 	strh.w	r3, [sp, #2]
    fd3a:	f8ad 2004 	strh.w	r2, [sp, #4]
    fd3e:	8843      	ldrh	r3, [r0, #2]
    fd40:	f8ad 3006 	strh.w	r3, [sp, #6]
    fd44:	f8ad 2008 	strh.w	r2, [sp, #8]
    fd48:	8800      	ldrh	r0, [r0, #0]
    fd4a:	8008      	strh	r0, [r1, #0]
    fd4c:	4668      	mov	r0, sp
    fd4e:	f7f7 fd21 	bl	7794 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    fd52:	bd0e      	pop	{r1, r2, r3, pc}

0000fd54 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fd54:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fd56:	4604      	mov	r4, r0
    fd58:	f10d 0007 	add.w	r0, sp, #7
    fd5c:	9000      	str	r0, [sp, #0]
    fd5e:	7922      	ldrb	r2, [r4, #4]
    fd60:	78e1      	ldrb	r1, [r4, #3]
    fd62:	78a0      	ldrb	r0, [r4, #2]
    fd64:	f10d 0306 	add.w	r3, sp, #6
    fd68:	f000 fcc3 	bl	106f2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x450>
    fd6c:	2800      	cmp	r0, #0
    fd6e:	d109      	bne.n	fd84 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fd70:	8820      	ldrh	r0, [r4, #0]
    fd72:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd76:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fd7a:	f8ad 0008 	strh.w	r0, [sp, #8]
    fd7e:	a801      	add	r0, sp, #4
    fd80:	f000 f98f 	bl	100a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fd84:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fd86 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fd86:	b510      	push	{r4, lr}
    fd88:	4604      	mov	r4, r0
    fd8a:	f000 fc98 	bl	106be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fd8e:	b120      	cbz	r0, fd9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd90:	f7f2 fa70 	bl	2274 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd94:	b108      	cbz	r0, fd9a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd96:	200c      	movs	r0, #12
    fd98:	bd10      	pop	{r4, pc}
    fd9a:	7820      	ldrb	r0, [r4, #0]
    fd9c:	f7ff fe45 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fda0:	79e2      	ldrb	r2, [r4, #7]
    fda2:	1c61      	adds	r1, r4, #1
    fda4:	f7f2 fa00 	bl	21a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fda8:	b108      	cbz	r0, fdae <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fdaa:	2000      	movs	r0, #0
    fdac:	bd10      	pop	{r4, pc}
    fdae:	2002      	movs	r0, #2
    fdb0:	bd10      	pop	{r4, pc}

0000fdb2 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fdb2:	b510      	push	{r4, lr}
    fdb4:	4604      	mov	r4, r0
    fdb6:	2001      	movs	r0, #1
    fdb8:	f000 faa0 	bl	102fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fdbc:	b128      	cbz	r0, fdca <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fdbe:	4621      	mov	r1, r4
    fdc0:	2001      	movs	r0, #1
    fdc2:	f7f1 fc47 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fdc6:	2000      	movs	r0, #0
    fdc8:	bd10      	pop	{r4, pc}
    fdca:	200c      	movs	r0, #12
    fdcc:	bd10      	pop	{r4, pc}

0000fdce <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fdce:	b510      	push	{r4, lr}
    fdd0:	8800      	ldrh	r0, [r0, #0]
    fdd2:	f7f2 fadd 	bl	2390 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fdd6:	b108      	cbz	r0, fddc <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fdd8:	2000      	movs	r0, #0
    fdda:	bd10      	pop	{r4, pc}
    fddc:	2030      	movs	r0, #48	; 0x30
    fdde:	bd10      	pop	{r4, pc}

0000fde0 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fde0:	b51c      	push	{r2, r3, r4, lr}
    fde2:	7801      	ldrb	r1, [r0, #0]
    fde4:	f88d 1000 	strb.w	r1, [sp]
    fde8:	7840      	ldrb	r0, [r0, #1]
    fdea:	f88d 0001 	strb.w	r0, [sp, #1]
    fdee:	2000      	movs	r0, #0
    fdf0:	f8ad 0002 	strh.w	r0, [sp, #2]
    fdf4:	f8ad 0004 	strh.w	r0, [sp, #4]
    fdf8:	4601      	mov	r1, r0
    fdfa:	4668      	mov	r0, sp
    fdfc:	f000 face 	bl	1039c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    fe00:	2800      	cmp	r0, #0
    fe02:	d102      	bne.n	fe0a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fe04:	4668      	mov	r0, sp
    fe06:	f000 faa8 	bl	1035a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    fe0a:	bd1c      	pop	{r2, r3, r4, pc}

0000fe0c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fe0c:	b500      	push	{lr}
    fe0e:	b087      	sub	sp, #28
    fe10:	7941      	ldrb	r1, [r0, #5]
    fe12:	f88d 1000 	strb.w	r1, [sp]
    fe16:	7981      	ldrb	r1, [r0, #6]
    fe18:	f88d 1001 	strb.w	r1, [sp, #1]
    fe1c:	2101      	movs	r1, #1
    fe1e:	f88d 1002 	strb.w	r1, [sp, #2]
    fe22:	7801      	ldrb	r1, [r0, #0]
    fe24:	f88d 1003 	strb.w	r1, [sp, #3]
    fe28:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fe2c:	f240 2271 	movw	r2, #625	; 0x271
    fe30:	4351      	muls	r1, r2
    fe32:	9102      	str	r1, [sp, #8]
    fe34:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fe38:	4350      	muls	r0, r2
    fe3a:	9004      	str	r0, [sp, #16]
    fe3c:	2007      	movs	r0, #7
    fe3e:	f88d 0018 	strb.w	r0, [sp, #24]
    fe42:	2000      	movs	r0, #0
    fe44:	f88d 0019 	strb.w	r0, [sp, #25]
    fe48:	9804      	ldr	r0, [sp, #16]
    fe4a:	f7f7 fba9 	bl	75a0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    fe4e:	b140      	cbz	r0, fe62 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fe50:	9802      	ldr	r0, [sp, #8]
    fe52:	f7f7 fb99 	bl	7588 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    fe56:	b120      	cbz	r0, fe62 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fe58:	4668      	mov	r0, sp
    fe5a:	f7f7 fa6f 	bl	733c <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fe5e:	b007      	add	sp, #28
    fe60:	bd00      	pop	{pc}
    fe62:	2030      	movs	r0, #48	; 0x30
    fe64:	e7fb      	b.n	fe5e <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fe66 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fe66:	b570      	push	{r4, r5, r6, lr}
    fe68:	4605      	mov	r5, r0
    fe6a:	8800      	ldrh	r0, [r0, #0]
    fe6c:	2100      	movs	r1, #0
    fe6e:	f7fd ff26 	bl	dcbe <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe72:	0004      	movs	r4, r0
    fe74:	d007      	beq.n	fe86 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe76:	f000 fc0c 	bl	10692 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    fe7a:	b120      	cbz	r0, fe86 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fe7c:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    fe80:	b118      	cbz	r0, fe8a <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fe82:	203a      	movs	r0, #58	; 0x3a
    fe84:	bd70      	pop	{r4, r5, r6, pc}
    fe86:	2002      	movs	r0, #2
    fe88:	bd70      	pop	{r4, r5, r6, pc}
    fe8a:	2100      	movs	r1, #0
    fe8c:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    fe90:	f7ff fdc2 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fe94:	2801      	cmp	r0, #1
    fe96:	d001      	beq.n	fe9c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fe98:	201a      	movs	r0, #26
    fe9a:	bd70      	pop	{r4, r5, r6, pc}
    fe9c:	f8d5 0002 	ldr.w	r0, [r5, #2]
    fea0:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    fea4:	f8d5 0006 	ldr.w	r0, [r5, #6]
    fea8:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    feac:	8968      	ldrh	r0, [r5, #10]
    feae:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    feb2:	2210      	movs	r2, #16
    feb4:	f105 010c 	add.w	r1, r5, #12
    feb8:	f204 2083 	addw	r0, r4, #643	; 0x283
    febc:	f001 f843 	bl	10f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fec0:	2001      	movs	r0, #1
    fec2:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    fec6:	2000      	movs	r0, #0
    fec8:	bd70      	pop	{r4, r5, r6, pc}

0000feca <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    feca:	b51c      	push	{r2, r3, r4, lr}
    fecc:	8801      	ldrh	r1, [r0, #0]
    fece:	f8ad 1000 	strh.w	r1, [sp]
    fed2:	8841      	ldrh	r1, [r0, #2]
    fed4:	f8ad 1002 	strh.w	r1, [sp, #2]
    fed8:	8801      	ldrh	r1, [r0, #0]
    feda:	f8ad 1004 	strh.w	r1, [sp, #4]
    fede:	8840      	ldrh	r0, [r0, #2]
    fee0:	f8ad 0006 	strh.w	r0, [sp, #6]
    fee4:	4668      	mov	r0, sp
    fee6:	f7f7 fcd9 	bl	789c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    feea:	bd1c      	pop	{r2, r3, r4, pc}

0000feec <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    feec:	b510      	push	{r4, lr}
    feee:	f7f1 fbd5 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fef2:	2000      	movs	r0, #0
    fef4:	bd10      	pop	{r4, pc}

0000fef6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    fef6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    fefa:	4604      	mov	r4, r0
    fefc:	7a40      	ldrb	r0, [r0, #9]
    fefe:	0781      	lsls	r1, r0, #30
    ff00:	d502      	bpl.n	ff08 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    ff02:	f040 0001 	orr.w	r0, r0, #1
    ff06:	7260      	strb	r0, [r4, #9]
    ff08:	4620      	mov	r0, r4
    ff0a:	f000 fa67 	bl	103dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    ff0e:	2800      	cmp	r0, #0
    ff10:	d103      	bne.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff12:	f000 fbdb 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
    ff16:	b118      	cbz	r0, ff20 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    ff18:	200c      	movs	r0, #12
    ff1a:	b004      	add	sp, #16
    ff1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff20:	f7f3 fa82 	bl	3428 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    ff24:	b910      	cbnz	r0, ff2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    ff26:	f7f3 fbfb 	bl	3720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    ff2a:	b108      	cbz	r0, ff30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    ff2c:	203a      	movs	r0, #58	; 0x3a
    ff2e:	e7f4      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff30:	2103      	movs	r1, #3
    ff32:	f104 0018 	add.w	r0, r4, #24
    ff36:	f7f7 fb3f 	bl	75b8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    ff3a:	2100      	movs	r1, #0
    ff3c:	4668      	mov	r0, sp
    ff3e:	f7f0 ffcf 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ff42:	0006      	movs	r6, r0
    ff44:	d008      	beq.n	ff58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    ff46:	2301      	movs	r3, #1
    ff48:	4622      	mov	r2, r4
    ff4a:	f8bd 1000 	ldrh.w	r1, [sp]
    ff4e:	f7f7 fb47 	bl	75e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    ff52:	0005      	movs	r5, r0
    ff54:	d002      	beq.n	ff5c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    ff56:	e06c      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff58:	2009      	movs	r0, #9
    ff5a:	e7de      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    ff5c:	7860      	ldrb	r0, [r4, #1]
    ff5e:	f7f3 fb41 	bl	35e4 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    ff62:	78a1      	ldrb	r1, [r4, #2]
    ff64:	7820      	ldrb	r0, [r4, #0]
    ff66:	1ce2      	adds	r2, r4, #3
    ff68:	f7f3 faac 	bl	34c4 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    ff6c:	b148      	cbz	r0, ff82 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    ff6e:	f7f3 fa07 	bl	3380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    ff72:	78a1      	ldrb	r1, [r4, #2]
    ff74:	7820      	ldrb	r0, [r4, #0]
    ff76:	1ce2      	adds	r2, r4, #3
    ff78:	f7f3 fae2 	bl	3540 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    ff7c:	0005      	movs	r5, r0
    ff7e:	d002      	beq.n	ff86 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    ff80:	e057      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff82:	2512      	movs	r5, #18
    ff84:	e055      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ff86:	4631      	mov	r1, r6
    ff88:	2003      	movs	r0, #3
    ff8a:	f7f3 fa41 	bl	3410 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    ff8e:	4605      	mov	r5, r0
    ff90:	78a0      	ldrb	r0, [r4, #2]
    ff92:	f7ff fd4a 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    ff96:	1ce1      	adds	r1, r4, #3
    ff98:	f7f3 fafc 	bl	3594 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    ff9c:	bb1d      	cbnz	r5, ffe6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    ff9e:	7820      	ldrb	r0, [r4, #0]
    ffa0:	f04f 0800 	mov.w	r8, #0
    ffa4:	2701      	movs	r7, #1
    ffa6:	bb20      	cbnz	r0, fff2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    ffa8:	f894 a002 	ldrb.w	sl, [r4, #2]
    ffac:	f104 0903 	add.w	r9, r4, #3
    ffb0:	f8cd 8004 	str.w	r8, [sp, #4]
    ffb4:	f8cd 8008 	str.w	r8, [sp, #8]
    ffb8:	e016      	b.n	ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffba:	9d01      	ldr	r5, [sp, #4]
    ffbc:	42ae      	cmp	r6, r5
    ffbe:	d013      	beq.n	ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffc0:	4650      	mov	r0, sl
    ffc2:	f7ff fd32 	bl	fa2a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    ffc6:	78aa      	ldrb	r2, [r5, #2]
    ffc8:	1ceb      	adds	r3, r5, #3
    ffca:	4649      	mov	r1, r9
    ffcc:	f7fd ff02 	bl	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    ffd0:	b150      	cbz	r0, ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffd2:	7a6a      	ldrb	r2, [r5, #9]
    ffd4:	7a70      	ldrb	r0, [r6, #9]
    ffd6:	f105 030a 	add.w	r3, r5, #10
    ffda:	f106 010a 	add.w	r1, r6, #10
    ffde:	f7fd fef9 	bl	ddd4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    ffe2:	b108      	cbz	r0, ffe8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    ffe4:	250b      	movs	r5, #11
    ffe6:	e024      	b.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    ffe8:	a801      	add	r0, sp, #4
    ffea:	f7f0 ff59 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ffee:	2800      	cmp	r0, #0
    fff0:	d0e3      	beq.n	ffba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    fff2:	4638      	mov	r0, r7
    fff4:	f7f3 fa28 	bl	3448 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    fff8:	0005      	movs	r5, r0
    fffa:	d11a      	bne.n	10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    fffc:	f88d 8004 	strb.w	r8, [sp, #4]
   10000:	7a60      	ldrb	r0, [r4, #9]
   10002:	07c0      	lsls	r0, r0, #31
   10004:	d005      	beq.n	10012 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
   10006:	68e0      	ldr	r0, [r4, #12]
   10008:	9002      	str	r0, [sp, #8]
   1000a:	69a0      	ldr	r0, [r4, #24]
   1000c:	9003      	str	r0, [sp, #12]
   1000e:	f88d 7004 	strb.w	r7, [sp, #4]
   10012:	a801      	add	r0, sp, #4
   10014:	f7f4 fd7c 	bl	4b10 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
   10018:	4605      	mov	r5, r0
   1001a:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   1001e:	f7f3 fb55 	bl	36cc <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
   10022:	b935      	cbnz	r5, 10032 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
   10024:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   10028:	4630      	mov	r0, r6
   1002a:	f7f4 fc63 	bl	48f4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
   1002e:	0005      	movs	r5, r0
   10030:	d00c      	beq.n	1004c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
   10032:	8830      	ldrh	r0, [r6, #0]
   10034:	f7fd feca 	bl	ddcc <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10038:	8830      	ldrh	r0, [r6, #0]
   1003a:	2100      	movs	r1, #0
   1003c:	f7f0 ff76 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10040:	b120      	cbz	r0, 1004c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
   10042:	f241 1139 	movw	r1, #4409	; 0x1139
   10046:	2039      	movs	r0, #57	; 0x39
   10048:	f7f0 fd0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1004c:	4628      	mov	r0, r5
   1004e:	e764      	b.n	ff1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

00010050 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   10050:	b51c      	push	{r2, r3, r4, lr}
   10052:	460c      	mov	r4, r1
   10054:	4669      	mov	r1, sp
   10056:	f7fd ffda 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1005a:	2800      	cmp	r0, #0
   1005c:	d105      	bne.n	1006a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   1005e:	2101      	movs	r1, #1
   10060:	4622      	mov	r2, r4
   10062:	9801      	ldr	r0, [sp, #4]
   10064:	f000 fabc 	bl	105e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
   10068:	2000      	movs	r0, #0
   1006a:	bd1c      	pop	{r2, r3, r4, pc}

0001006c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1006c:	b510      	push	{r4, lr}
   1006e:	4604      	mov	r4, r0
   10070:	f7f7 fc4a 	bl	7908 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10074:	b118      	cbz	r0, 1007e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10076:	2000      	movs	r0, #0
   10078:	f000 f940 	bl	102fc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
   1007c:	b128      	cbz	r0, 1008a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   1007e:	4621      	mov	r1, r4
   10080:	2000      	movs	r0, #0
   10082:	f7f1 fae7 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10086:	2000      	movs	r0, #0
   10088:	bd10      	pop	{r4, pc}
   1008a:	200c      	movs	r0, #12
   1008c:	bd10      	pop	{r4, pc}

0001008e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1008e:	b510      	push	{r4, lr}
   10090:	7800      	ldrb	r0, [r0, #0]
   10092:	b100      	cbz	r0, 10096 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10094:	2001      	movs	r0, #1
   10096:	f7f5 f9c1 	bl	541c <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   1009a:	2000      	movs	r0, #0
   1009c:	bd10      	pop	{r4, pc}

0001009e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1009e:	f7f7 bb79 	b.w	7794 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

000100a2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   100a2:	b510      	push	{r4, lr}
   100a4:	4604      	mov	r4, r0
   100a6:	8880      	ldrh	r0, [r0, #4]
   100a8:	b128      	cbz	r0, 100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100aa:	2801      	cmp	r0, #1
   100ac:	d003      	beq.n	100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100ae:	2802      	cmp	r0, #2
   100b0:	d001      	beq.n	100b6 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   100b2:	2012      	movs	r0, #18
   100b4:	bd10      	pop	{r4, pc}
   100b6:	78e0      	ldrb	r0, [r4, #3]
   100b8:	f000 f92c 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   100bc:	b148      	cbz	r0, 100d2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   100be:	78a0      	ldrb	r0, [r4, #2]
   100c0:	f000 f928 	bl	10314 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
   100c4:	b128      	cbz	r0, 100d2 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   100c6:	4620      	mov	r0, r4
   100c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100cc:	2101      	movs	r1, #1
   100ce:	f000 b862 	b.w	10196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   100d2:	2011      	movs	r0, #17
   100d4:	bd10      	pop	{r4, pc}

000100d6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   100d6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   100d8:	460c      	mov	r4, r1
   100da:	4605      	mov	r5, r0
   100dc:	8800      	ldrh	r0, [r0, #0]
   100de:	4669      	mov	r1, sp
   100e0:	f7fd ff95 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100e4:	2800      	cmp	r0, #0
   100e6:	d106      	bne.n	100f6 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   100e8:	9801      	ldr	r0, [sp, #4]
   100ea:	8829      	ldrh	r1, [r5, #0]
   100ec:	8021      	strh	r1, [r4, #0]
   100ee:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
   100f2:	8060      	strh	r0, [r4, #2]
   100f4:	2000      	movs	r0, #0
   100f6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000100f8 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   100f8:	b510      	push	{r4, lr}
   100fa:	4604      	mov	r4, r0
   100fc:	4601      	mov	r1, r0
   100fe:	2000      	movs	r0, #0
   10100:	f7f1 fa90 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   10104:	b910      	cbnz	r0, 1010c <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   10106:	2000      	movs	r0, #0
   10108:	6020      	str	r0, [r4, #0]
   1010a:	80a0      	strh	r0, [r4, #4]
   1010c:	2000      	movs	r0, #0
   1010e:	bd10      	pop	{r4, pc}

00010110 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10110:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10112:	460c      	mov	r4, r1
   10114:	4605      	mov	r5, r0
   10116:	8800      	ldrh	r0, [r0, #0]
   10118:	4669      	mov	r1, sp
   1011a:	f7fd ff78 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1011e:	b108      	cbz	r0, 10124 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10120:	2002      	movs	r0, #2
   10122:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10124:	78a8      	ldrb	r0, [r5, #2]
   10126:	b158      	cbz	r0, 10140 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   10128:	f000 fab0 	bl	1068c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
   1012c:	70a0      	strb	r0, [r4, #2]
   1012e:	8828      	ldrh	r0, [r5, #0]
   10130:	8020      	strh	r0, [r4, #0]
   10132:	f994 0002 	ldrsb.w	r0, [r4, #2]
   10136:	f7f2 fb75 	bl	2824 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   1013a:	70a0      	strb	r0, [r4, #2]
   1013c:	2000      	movs	r0, #0
   1013e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10140:	9801      	ldr	r0, [sp, #4]
   10142:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   10146:	e7f1      	b.n	1012c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010148 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10148:	b510      	push	{r4, lr}
   1014a:	f7f7 fbe3 	bl	7914 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1014e:	2000      	movs	r0, #0
   10150:	bd10      	pop	{r4, pc}

00010152 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10152:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10156:	4604      	mov	r4, r0
   10158:	8840      	ldrh	r0, [r0, #2]
   1015a:	460d      	mov	r5, r1
   1015c:	b1b8      	cbz	r0, 1018e <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1015e:	8820      	ldrh	r0, [r4, #0]
   10160:	4669      	mov	r1, sp
   10162:	f7fd ff54 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10166:	2800      	cmp	r0, #0
   10168:	d10f      	bne.n	1018a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   1016a:	8820      	ldrh	r0, [r4, #0]
   1016c:	8028      	strh	r0, [r5, #0]
   1016e:	9e01      	ldr	r6, [sp, #4]
   10170:	f106 0510 	add.w	r5, r6, #16
   10174:	3688      	adds	r6, #136	; 0x88
   10176:	682f      	ldr	r7, [r5, #0]
   10178:	8862      	ldrh	r2, [r4, #2]
   1017a:	4639      	mov	r1, r7
   1017c:	4630      	mov	r0, r6
   1017e:	f7fe f8b8 	bl	e2f2 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10182:	6828      	ldr	r0, [r5, #0]
   10184:	42b8      	cmp	r0, r7
   10186:	d1f6      	bne.n	10176 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10188:	2000      	movs	r0, #0
   1018a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1018e:	2012      	movs	r0, #18
   10190:	e7fb      	b.n	1018a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010192 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10192:	f000 b886 	b.w	102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1019a:	b086      	sub	sp, #24
   1019c:	4689      	mov	r9, r1
   1019e:	4607      	mov	r7, r0
   101a0:	8800      	ldrh	r0, [r0, #0]
   101a2:	a901      	add	r1, sp, #4
   101a4:	f7fd ff33 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101a8:	2800      	cmp	r0, #0
   101aa:	d136      	bne.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   101ac:	9802      	ldr	r0, [sp, #8]
   101ae:	4601      	mov	r1, r0
   101b0:	4688      	mov	r8, r1
   101b2:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
   101b6:	f500 749c 	add.w	r4, r0, #312	; 0x138
   101ba:	f88d 1000 	strb.w	r1, [sp]
   101be:	9900      	ldr	r1, [sp, #0]
   101c0:	9100      	str	r1, [sp, #0]
   101c2:	f89d 1000 	ldrb.w	r1, [sp]
   101c6:	3088      	adds	r0, #136	; 0x88
   101c8:	b109      	cbz	r1, 101ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   101ca:	2601      	movs	r6, #1
   101cc:	e000      	b.n	101d0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   101ce:	2600      	movs	r6, #0
   101d0:	7f81      	ldrb	r1, [r0, #30]
   101d2:	2922      	cmp	r1, #34	; 0x22
   101d4:	d100      	bne.n	101d8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   101d6:	b13e      	cbz	r6, 101e8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   101d8:	2500      	movs	r5, #0
   101da:	306e      	adds	r0, #110	; 0x6e
   101dc:	2108      	movs	r1, #8
   101de:	4682      	mov	sl, r0
   101e0:	f7ff fc1a 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   101e4:	b110      	cbz	r0, 101ec <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   101e6:	e007      	b.n	101f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101e8:	2501      	movs	r5, #1
   101ea:	e7f6      	b.n	101da <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   101ec:	210b      	movs	r1, #11
   101ee:	4650      	mov	r0, sl
   101f0:	f7ff fc12 	bl	fa18 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   101f4:	b900      	cbnz	r0, 101f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   101f6:	b17d      	cbz	r5, 10218 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   101f8:	a804      	add	r0, sp, #16
   101fa:	9000      	str	r0, [sp, #0]
   101fc:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10200:	ab03      	add	r3, sp, #12
   10202:	463a      	mov	r2, r7
   10204:	4641      	mov	r1, r8
   10206:	f000 fa21 	bl	1064c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
   1020a:	0005      	movs	r5, r0
   1020c:	d105      	bne.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   1020e:	340c      	adds	r4, #12
   10210:	20ff      	movs	r0, #255	; 0xff
   10212:	7060      	strb	r0, [r4, #1]
   10214:	b936      	cbnz	r6, 10224 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10216:	e003      	b.n	10220 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   10218:	201a      	movs	r0, #26
   1021a:	b006      	add	sp, #24
   1021c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10220:	7820      	ldrb	r0, [r4, #0]
   10222:	b108      	cbz	r0, 10228 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   10224:	253a      	movs	r5, #58	; 0x3a
   10226:	e012      	b.n	1024e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   10228:	f884 9000 	strb.w	r9, [r4]
   1022c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10230:	70a0      	strb	r0, [r4, #2]
   10232:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10236:	70e1      	strb	r1, [r4, #3]
   10238:	f88d 0000 	strb.w	r0, [sp]
   1023c:	f88d 1001 	strb.w	r1, [sp, #1]
   10240:	88b8      	ldrh	r0, [r7, #4]
   10242:	f8ad 0002 	strh.w	r0, [sp, #2]
   10246:	4669      	mov	r1, sp
   10248:	4640      	mov	r0, r8
   1024a:	f7fd ffba 	bl	e1c2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1024e:	2000      	movs	r0, #0
   10250:	7060      	strb	r0, [r4, #1]
   10252:	4628      	mov	r0, r5
   10254:	e7e1      	b.n	1021a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10256:	2008      	movs	r0, #8
   10258:	f7f7 bbb0 	b.w	79bc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001025c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   1025c:	b510      	push	{r4, lr}
   1025e:	4604      	mov	r4, r0
   10260:	2000      	movs	r0, #0
   10262:	8822      	ldrh	r2, [r4, #0]
   10264:	b086      	sub	sp, #24
   10266:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   1026a:	39ff      	subs	r1, #255	; 0xff
   1026c:	d008      	beq.n	10280 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   1026e:	a903      	add	r1, sp, #12
   10270:	4610      	mov	r0, r2
   10272:	f7fd fecc 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10276:	b110      	cbz	r0, 1027e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   10278:	2002      	movs	r0, #2
   1027a:	b006      	add	sp, #24
   1027c:	bd10      	pop	{r4, pc}
   1027e:	9804      	ldr	r0, [sp, #16]
   10280:	8921      	ldrh	r1, [r4, #8]
   10282:	89a3      	ldrh	r3, [r4, #12]
   10284:	8962      	ldrh	r2, [r4, #10]
   10286:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   1028a:	88e3      	ldrh	r3, [r4, #6]
   1028c:	88a2      	ldrh	r2, [r4, #4]
   1028e:	8861      	ldrh	r1, [r4, #2]
   10290:	f000 f97b 	bl	1058a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   10294:	b108      	cbz	r0, 1029a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   10296:	2000      	movs	r0, #0
   10298:	e7ef      	b.n	1027a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   1029a:	2030      	movs	r0, #48	; 0x30
   1029c:	e7ed      	b.n	1027a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0001029e <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
   1029e:	f7f5 ba5f 	b.w	5760 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

000102a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   102a2:	b510      	push	{r4, lr}
   102a4:	f7fd fdc5 	bl	de32 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   102a8:	f7f1 ffc4 	bl	2234 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   102ac:	f7f7 fba8 	bl	7a00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   102b0:	f7fe fa08 	bl	e6c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   102b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   102b8:	f7f7 b938 	b.w	752c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
   102bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
   102c0:	4288      	cmp	r0, r1
   102c2:	d303      	bcc.n	102cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
   102c4:	f640 0148 	movw	r1, #2120	; 0x848
   102c8:	4288      	cmp	r0, r1
   102ca:	d300      	bcc.n	102ce <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
   102cc:	4608      	mov	r0, r1
   102ce:	b280      	uxth	r0, r0
   102d0:	4770      	bx	lr
   102d2:	07c1      	lsls	r1, r0, #31
   102d4:	d001      	beq.n	102da <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
   102d6:	2001      	movs	r0, #1
   102d8:	4770      	bx	lr
   102da:	0780      	lsls	r0, r0, #30
   102dc:	d501      	bpl.n	102e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
   102de:	2002      	movs	r0, #2
   102e0:	4770      	bx	lr
   102e2:	2000      	movs	r0, #0
   102e4:	4770      	bx	lr
   102e6:	b510      	push	{r4, lr}
   102e8:	2801      	cmp	r0, #1
   102ea:	d006      	beq.n	102fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   102ec:	2802      	cmp	r0, #2
   102ee:	d004      	beq.n	102fa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
   102f0:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   102f4:	2006      	movs	r0, #6
   102f6:	f7f0 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102fa:	bd10      	pop	{r4, pc}
   102fc:	b510      	push	{r4, lr}
   102fe:	f000 f9e5 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   10302:	b128      	cbz	r0, 10310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   10304:	f7f3 fa3e 	bl	3784 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   10308:	2801      	cmp	r0, #1
   1030a:	d001      	beq.n	10310 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
   1030c:	2000      	movs	r0, #0
   1030e:	bd10      	pop	{r4, pc}
   10310:	2001      	movs	r0, #1
   10312:	bd10      	pop	{r4, pc}
   10314:	b510      	push	{r4, lr}
   10316:	0004      	movs	r4, r0
   10318:	d005      	beq.n	10326 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   1031a:	f7f7 fb61 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1031e:	4384      	bics	r4, r0
   10320:	d001      	beq.n	10326 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
   10322:	2000      	movs	r0, #0
   10324:	bd10      	pop	{r4, pc}
   10326:	2001      	movs	r0, #1
   10328:	bd10      	pop	{r4, pc}
   1032a:	28fb      	cmp	r0, #251	; 0xfb
   1032c:	d803      	bhi.n	10336 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
   1032e:	f640 0048 	movw	r0, #2120	; 0x848
   10332:	4281      	cmp	r1, r0
   10334:	d901      	bls.n	1033a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
   10336:	2011      	movs	r0, #17
   10338:	4770      	bx	lr
   1033a:	2000      	movs	r0, #0
   1033c:	4770      	bx	lr
   1033e:	381b      	subs	r0, #27
   10340:	28e1      	cmp	r0, #225	; 0xe1
   10342:	d206      	bcs.n	10352 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   10344:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10348:	d303      	bcc.n	10352 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
   1034a:	f244 2090 	movw	r0, #17040	; 0x4290
   1034e:	4281      	cmp	r1, r0
   10350:	d901      	bls.n	10356 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
   10352:	2012      	movs	r0, #18
   10354:	4770      	bx	lr
   10356:	2000      	movs	r0, #0
   10358:	4770      	bx	lr
   1035a:	b510      	push	{r4, lr}
   1035c:	4604      	mov	r4, r0
   1035e:	7800      	ldrb	r0, [r0, #0]
   10360:	2801      	cmp	r0, #1
   10362:	d009      	beq.n	10378 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
   10364:	f7f4 fb82 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10368:	2805      	cmp	r0, #5
   1036a:	d003      	beq.n	10374 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
   1036c:	f7f4 fb46 	bl	49fc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   10370:	2800      	cmp	r0, #0
   10372:	d000      	beq.n	10376 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
   10374:	200c      	movs	r0, #12
   10376:	bd10      	pop	{r4, pc}
   10378:	f7f3 f9d2 	bl	3720 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
   1037c:	b108      	cbz	r0, 10382 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
   1037e:	203a      	movs	r0, #58	; 0x3a
   10380:	bd10      	pop	{r4, pc}
   10382:	f7f3 f987 	bl	3694 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10386:	b138      	cbz	r0, 10398 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
   10388:	f7f2 fffa 	bl	3380 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1038c:	88a1      	ldrh	r1, [r4, #4]
   1038e:	8860      	ldrh	r0, [r4, #2]
   10390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10394:	f7f4 baf8 	b.w	4988 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   10398:	2012      	movs	r0, #18
   1039a:	bd10      	pop	{r4, pc}
   1039c:	7802      	ldrb	r2, [r0, #0]
   1039e:	2a01      	cmp	r2, #1
   103a0:	d001      	beq.n	103a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
   103a2:	b1ba      	cbz	r2, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103a4:	e018      	b.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103a6:	7842      	ldrb	r2, [r0, #1]
   103a8:	b13a      	cbz	r2, 103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
   103aa:	2a01      	cmp	r2, #1
   103ac:	d005      	beq.n	103ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
   103ae:	2a02      	cmp	r2, #2
   103b0:	d112      	bne.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b2:	b189      	cbz	r1, 103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b4:	8881      	ldrh	r1, [r0, #4]
   103b6:	b179      	cbz	r1, 103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103b8:	e000      	b.n	103bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
   103ba:	b159      	cbz	r1, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103bc:	8841      	ldrh	r1, [r0, #2]
   103be:	b149      	cbz	r1, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103c0:	8880      	ldrh	r0, [r0, #4]
   103c2:	b138      	cbz	r0, 103d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
   103c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   103c8:	0049      	lsls	r1, r1, #1
   103ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   103ce:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   103d2:	d201      	bcs.n	103d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
   103d4:	2000      	movs	r0, #0
   103d6:	4770      	bx	lr
   103d8:	2012      	movs	r0, #18
   103da:	4770      	bx	lr
   103dc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   103e0:	7a45      	ldrb	r5, [r0, #9]
   103e2:	4604      	mov	r4, r0
   103e4:	0768      	lsls	r0, r5, #29
   103e6:	d06c      	beq.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103e8:	08e8      	lsrs	r0, r5, #3
   103ea:	d16a      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103ec:	2d02      	cmp	r5, #2
   103ee:	d068      	beq.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   103f0:	f7f7 faf6 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   103f4:	ea25 0000 	bic.w	r0, r5, r0
   103f8:	0740      	lsls	r0, r0, #29
   103fa:	d102      	bne.n	10402 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
   103fc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   10400:	b110      	cbz	r0, 10408 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
   10402:	2011      	movs	r0, #17
   10404:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   10408:	2d01      	cmp	r5, #1
   1040a:	d15a      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1040c:	27ff      	movs	r7, #255	; 0xff
   1040e:	2101      	movs	r1, #1
   10410:	69a0      	ldr	r0, [r4, #24]
   10412:	f7f7 f9a9 	bl	7768 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
   10416:	b3e8      	cbz	r0, 10494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
   10418:	46a8      	mov	r8, r5
   1041a:	2600      	movs	r6, #0
   1041c:	4635      	mov	r5, r6
   1041e:	42bd      	cmp	r5, r7
   10420:	d02f      	beq.n	10482 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
   10422:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10426:	6988      	ldr	r0, [r1, #24]
   10428:	68c9      	ldr	r1, [r1, #12]
   1042a:	4288      	cmp	r0, r1
   1042c:	d849      	bhi.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1042e:	4406      	add	r6, r0
   10430:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   10434:	4681      	mov	r9, r0
   10436:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   10438:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1043c:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1043e:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10442:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10444:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10446:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10448:	2000      	movs	r0, #0
   1044a:	f000 f89e 	bl	1058a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
   1044e:	b308      	cbz	r0, 10494 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
   10450:	b1bd      	cbz	r5, 10482 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
   10452:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10456:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   1045a:	4281      	cmp	r1, r0
   1045c:	d131      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1045e:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   10462:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10466:	4281      	cmp	r1, r0
   10468:	d12b      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1046a:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1046e:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   10472:	4281      	cmp	r1, r0
   10474:	d125      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10476:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   1047a:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1047e:	4281      	cmp	r1, r0
   10480:	d11f      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10482:	1c6d      	adds	r5, r5, #1
   10484:	b2ed      	uxtb	r5, r5
   10486:	4545      	cmp	r5, r8
   10488:	d3c9      	bcc.n	1041e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
   1048a:	68e0      	ldr	r0, [r4, #12]
   1048c:	42b0      	cmp	r0, r6
   1048e:	d318      	bcc.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   10490:	7820      	ldrb	r0, [r4, #0]
   10492:	e000      	b.n	10496 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
   10494:	e003      	b.n	1049e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
   10496:	b120      	cbz	r0, 104a2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
   10498:	2801      	cmp	r0, #1
   1049a:	d112      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   1049c:	e004      	b.n	104a8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
   1049e:	2030      	movs	r0, #48	; 0x30
   104a0:	e7b0      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104a2:	78a0      	ldrb	r0, [r4, #2]
   104a4:	2800      	cmp	r0, #0
   104a6:	d1f7      	bne.n	10498 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
   104a8:	7860      	ldrb	r0, [r4, #1]
   104aa:	b128      	cbz	r0, 104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104ac:	2801      	cmp	r0, #1
   104ae:	d003      	beq.n	104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104b0:	2802      	cmp	r0, #2
   104b2:	d001      	beq.n	104b8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
   104b4:	2803      	cmp	r0, #3
   104b6:	d104      	bne.n	104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   104b8:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   104bc:	b108      	cbz	r0, 104c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
   104be:	2807      	cmp	r0, #7
   104c0:	d901      	bls.n	104c6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
   104c2:	2012      	movs	r0, #18
   104c4:	e79e      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104c6:	2000      	movs	r0, #0
   104c8:	e79c      	b.n	10404 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
   104ca:	b570      	push	{r4, r5, r6, lr}
   104cc:	4604      	mov	r4, r0
   104ce:	7800      	ldrb	r0, [r0, #0]
   104d0:	2500      	movs	r5, #0
   104d2:	2801      	cmp	r0, #1
   104d4:	d004      	beq.n	104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104d6:	b118      	cbz	r0, 104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104d8:	2802      	cmp	r0, #2
   104da:	d001      	beq.n	104e0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
   104dc:	2803      	cmp	r0, #3
   104de:	d139      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104e0:	7860      	ldrb	r0, [r4, #1]
   104e2:	b128      	cbz	r0, 104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104e4:	2801      	cmp	r0, #1
   104e6:	d003      	beq.n	104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104e8:	2802      	cmp	r0, #2
   104ea:	d001      	beq.n	104f0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
   104ec:	2803      	cmp	r0, #3
   104ee:	d131      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104f0:	7e60      	ldrb	r0, [r4, #25]
   104f2:	b948      	cbnz	r0, 10508 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
   104f4:	78a0      	ldrb	r0, [r4, #2]
   104f6:	2801      	cmp	r0, #1
   104f8:	d12c      	bne.n	10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   104fa:	f7f7 fa71 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104fe:	4601      	mov	r1, r0
   10500:	78a0      	ldrb	r0, [r4, #2]
   10502:	ea30 0101 	bics.w	r1, r0, r1
   10506:	d001      	beq.n	1050c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
   10508:	2011      	movs	r0, #17
   1050a:	bd70      	pop	{r4, r5, r6, pc}
   1050c:	07c0      	lsls	r0, r0, #31
   1050e:	d006      	beq.n	1051e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
   10510:	78e0      	ldrb	r0, [r4, #3]
   10512:	2301      	movs	r3, #1
   10514:	6922      	ldr	r2, [r4, #16]
   10516:	68a1      	ldr	r1, [r4, #8]
   10518:	f000 f820 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   1051c:	4605      	mov	r5, r0
   1051e:	78a0      	ldrb	r0, [r4, #2]
   10520:	0780      	lsls	r0, r0, #30
   10522:	d506      	bpl.n	10532 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
   10524:	78e0      	ldrb	r0, [r4, #3]
   10526:	2302      	movs	r3, #2
   10528:	6922      	ldr	r2, [r4, #16]
   1052a:	68a1      	ldr	r1, [r4, #8]
   1052c:	f000 f816 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   10530:	4305      	orrs	r5, r0
   10532:	78a0      	ldrb	r0, [r4, #2]
   10534:	0740      	lsls	r0, r0, #29
   10536:	d506      	bpl.n	10546 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
   10538:	78e0      	ldrb	r0, [r4, #3]
   1053a:	2304      	movs	r3, #4
   1053c:	6922      	ldr	r2, [r4, #16]
   1053e:	68a1      	ldr	r1, [r4, #8]
   10540:	f000 f80c 	bl	1055c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
   10544:	4305      	orrs	r5, r0
   10546:	b10d      	cbz	r5, 1054c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
   10548:	4628      	mov	r0, r5
   1054a:	bd70      	pop	{r4, r5, r6, pc}
   1054c:	7e20      	ldrb	r0, [r4, #24]
   1054e:	b108      	cbz	r0, 10554 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
   10550:	2807      	cmp	r0, #7
   10552:	d901      	bls.n	10558 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
   10554:	2012      	movs	r0, #18
   10556:	bd70      	pop	{r4, r5, r6, pc}
   10558:	2000      	movs	r0, #0
   1055a:	bd70      	pop	{r4, r5, r6, pc}
   1055c:	b570      	push	{r4, r5, r6, lr}
   1055e:	4614      	mov	r4, r2
   10560:	460d      	mov	r5, r1
   10562:	b108      	cbz	r0, 10568 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
   10564:	2801      	cmp	r0, #1
   10566:	d10a      	bne.n	1057e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
   10568:	4619      	mov	r1, r3
   1056a:	4610      	mov	r0, r2
   1056c:	f7f7 f8fc 	bl	7768 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
   10570:	b138      	cbz	r0, 10582 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
   10572:	4628      	mov	r0, r5
   10574:	f7f6 fffc 	bl	7570 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
   10578:	b118      	cbz	r0, 10582 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
   1057a:	42ac      	cmp	r4, r5
   1057c:	d903      	bls.n	10586 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
   1057e:	2012      	movs	r0, #18
   10580:	bd70      	pop	{r4, r5, r6, pc}
   10582:	2030      	movs	r0, #48	; 0x30
   10584:	bd70      	pop	{r4, r5, r6, pc}
   10586:	2000      	movs	r0, #0
   10588:	bd70      	pop	{r4, r5, r6, pc}
   1058a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1058e:	461d      	mov	r5, r3
   10590:	4610      	mov	r0, r2
   10592:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10596:	1f8b      	subs	r3, r1, #6
   10598:	f640 427a 	movw	r2, #3194	; 0xc7a
   1059c:	9e08      	ldr	r6, [sp, #32]
   1059e:	4293      	cmp	r3, r2
   105a0:	d81c      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105a2:	1f83      	subs	r3, r0, #6
   105a4:	4293      	cmp	r3, r2
   105a6:	d819      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105a8:	4281      	cmp	r1, r0
   105aa:	d817      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105ac:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   105b0:	d214      	bcs.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105b2:	f1a4 010a 	sub.w	r1, r4, #10
   105b6:	1f12      	subs	r2, r2, #4
   105b8:	4291      	cmp	r1, r2
   105ba:	d80f      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105bc:	f7fd fd33 	bl	e026 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   105c0:	1c6d      	adds	r5, r5, #1
   105c2:	4368      	muls	r0, r5
   105c4:	f240 2171 	movw	r1, #625	; 0x271
   105c8:	0040      	lsls	r0, r0, #1
   105ca:	434c      	muls	r4, r1
   105cc:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   105d0:	d204      	bcs.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105d2:	42b7      	cmp	r7, r6
   105d4:	d802      	bhi.n	105dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
   105d6:	2001      	movs	r0, #1
   105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105dc:	2000      	movs	r0, #0
   105de:	e7fb      	b.n	105d8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
   105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105e4:	4606      	mov	r6, r0
   105e6:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   105ea:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   105ee:	4615      	mov	r5, r2
   105f0:	302c      	adds	r0, #44	; 0x2c
   105f2:	f7f4 ff19 	bl	5428 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   105f6:	4680      	mov	r8, r0
   105f8:	2102      	movs	r1, #2
   105fa:	f7fd fdb2 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   105fe:	4287      	cmp	r7, r0
   10600:	d200      	bcs.n	10604 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
   10602:	4638      	mov	r0, r7
   10604:	4607      	mov	r7, r0
   10606:	2102      	movs	r1, #2
   10608:	4640      	mov	r0, r8
   1060a:	f7fd fdaa 	bl	e162 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1060e:	4284      	cmp	r4, r0
   10610:	d200      	bcs.n	10614 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
   10612:	4620      	mov	r0, r4
   10614:	8831      	ldrh	r1, [r6, #0]
   10616:	8029      	strh	r1, [r5, #0]
   10618:	2f1b      	cmp	r7, #27
   1061a:	d913      	bls.n	10644 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
   1061c:	2ffb      	cmp	r7, #251	; 0xfb
   1061e:	d300      	bcc.n	10622 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
   10620:	27fb      	movs	r7, #251	; 0xfb
   10622:	806f      	strh	r7, [r5, #2]
   10624:	281b      	cmp	r0, #27
   10626:	d90f      	bls.n	10648 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
   10628:	28fb      	cmp	r0, #251	; 0xfb
   1062a:	d300      	bcc.n	1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   1062c:	20fb      	movs	r0, #251	; 0xfb
   1062e:	80e8      	strh	r0, [r5, #6]
   10630:	4640      	mov	r0, r8
   10632:	f7ff fe43 	bl	102bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   10636:	80a8      	strh	r0, [r5, #4]
   10638:	4640      	mov	r0, r8
   1063a:	f7ff fe3f 	bl	102bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
   1063e:	8128      	strh	r0, [r5, #8]
   10640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10644:	271b      	movs	r7, #27
   10646:	e7ec      	b.n	10622 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
   10648:	201b      	movs	r0, #27
   1064a:	e7f0      	b.n	1062e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
   1064c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10650:	7890      	ldrb	r0, [r2, #2]
   10652:	9e06      	ldr	r6, [sp, #24]
   10654:	461d      	mov	r5, r3
   10656:	4614      	mov	r4, r2
   10658:	b908      	cbnz	r0, 1065e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
   1065a:	f7f7 f9c1 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1065e:	78e4      	ldrb	r4, [r4, #3]
   10660:	4607      	mov	r7, r0
   10662:	b914      	cbnz	r4, 1066a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
   10664:	f7f7 f9bc 	bl	79e0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10668:	4604      	mov	r4, r0
   1066a:	b16f      	cbz	r7, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1066c:	b164      	cbz	r4, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1066e:	4638      	mov	r0, r7
   10670:	f7ff fe2f 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10674:	4620      	mov	r0, r4
   10676:	f7ff fe2c 	bl	102d2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1067a:	b12f      	cbz	r7, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1067c:	b124      	cbz	r4, 10688 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   1067e:	702f      	strb	r7, [r5, #0]
   10680:	7034      	strb	r4, [r6, #0]
   10682:	2000      	movs	r0, #0
   10684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10688:	2009      	movs	r0, #9
   1068a:	e7fb      	b.n	10684 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   1068c:	207f      	movs	r0, #127	; 0x7f
   1068e:	f000 b828 	b.w	106e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x440>
   10692:	b508      	push	{r3, lr}
   10694:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10698:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   1069c:	f88d 0000 	strb.w	r0, [sp]
   106a0:	9800      	ldr	r0, [sp, #0]
   106a2:	9000      	str	r0, [sp, #0]
   106a4:	f89d 0000 	ldrb.w	r0, [sp]
   106a8:	b100      	cbz	r0, 106ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   106aa:	2001      	movs	r0, #1
   106ac:	1e40      	subs	r0, r0, #1
   106ae:	4208      	tst	r0, r1
   106b0:	d003      	beq.n	106ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   106b2:	2904      	cmp	r1, #4
   106b4:	d001      	beq.n	106ba <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   106b6:	2001      	movs	r0, #1
   106b8:	bd08      	pop	{r3, pc}
   106ba:	2000      	movs	r0, #0
   106bc:	bd08      	pop	{r3, pc}
   106be:	b510      	push	{r4, lr}
   106c0:	f000 f804 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   106c4:	2800      	cmp	r0, #0
   106c6:	d000      	beq.n	106ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x428>
   106c8:	2001      	movs	r0, #1
   106ca:	bd10      	pop	{r4, pc}
   106cc:	b510      	push	{r4, lr}
   106ce:	f7f4 f9cd 	bl	4a6c <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   106d2:	2804      	cmp	r0, #4
   106d4:	d003      	beq.n	106de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x43c>
   106d6:	2805      	cmp	r0, #5
   106d8:	d001      	beq.n	106de <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x43c>
   106da:	2000      	movs	r0, #0
   106dc:	bd10      	pop	{r4, pc}
   106de:	2001      	movs	r0, #1
   106e0:	bd10      	pop	{r4, pc}
   106e2:	b508      	push	{r3, lr}
   106e4:	f640 1288 	movw	r2, #2440	; 0x988
   106e8:	2300      	movs	r3, #0
   106ea:	4669      	mov	r1, sp
   106ec:	f7fc fa6c 	bl	cbc8 <mpsl_fem_tx_power_split>
   106f0:	bd08      	pop	{r3, pc}
   106f2:	b530      	push	{r4, r5, lr}
   106f4:	f340 0400 	sbfx	r4, r0, #0, #1
   106f8:	f340 0040 	sbfx	r0, r0, #1, #1
   106fc:	1c40      	adds	r0, r0, #1
   106fe:	9d03      	ldr	r5, [sp, #12]
   10700:	1c64      	adds	r4, r4, #1
   10702:	d000      	beq.n	10706 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10704:	b119      	cbz	r1, 1070e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   10706:	b100      	cbz	r0, 1070a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x468>
   10708:	b10a      	cbz	r2, 1070e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46c>
   1070a:	b91c      	cbnz	r4, 10714 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x472>
   1070c:	e001      	b.n	10712 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
   1070e:	2011      	movs	r0, #17
   10710:	bd30      	pop	{r4, r5, pc}
   10712:	2100      	movs	r1, #0
   10714:	7019      	strb	r1, [r3, #0]
   10716:	b900      	cbnz	r0, 1071a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x478>
   10718:	2200      	movs	r2, #0
   1071a:	702a      	strb	r2, [r5, #0]
   1071c:	2000      	movs	r0, #0
   1071e:	bd30      	pop	{r4, r5, pc}
   10720:	b510      	push	{r4, lr}
   10722:	f7ff ffd3 	bl	106cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42a>
   10726:	b120      	cbz	r0, 10732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   10728:	f7f3 f834 	bl	3794 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1072c:	b108      	cbz	r0, 10732 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   1072e:	2001      	movs	r0, #1
   10730:	bd10      	pop	{r4, pc}
   10732:	2000      	movs	r0, #0
   10734:	bd10      	pop	{r4, pc}
   10736:	6802      	ldr	r2, [r0, #0]
   10738:	b912      	cbnz	r2, 10740 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49e>
   1073a:	6001      	str	r1, [r0, #0]
   1073c:	4770      	bx	lr
   1073e:	4602      	mov	r2, r0
   10740:	6850      	ldr	r0, [r2, #4]
   10742:	b108      	cbz	r0, 10748 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   10744:	428a      	cmp	r2, r1
   10746:	d1fa      	bne.n	1073e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49c>
   10748:	428a      	cmp	r2, r1
   1074a:	d0f7      	beq.n	1073c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x49a>
   1074c:	6051      	str	r1, [r2, #4]
   1074e:	4770      	bx	lr
   10750:	b510      	push	{r4, lr}
   10752:	4604      	mov	r4, r0
   10754:	e002      	b.n	1075c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ba>
   10756:	6820      	ldr	r0, [r4, #0]
   10758:	4780      	blx	r0
   1075a:	6864      	ldr	r4, [r4, #4]
   1075c:	2c00      	cmp	r4, #0
   1075e:	d1fa      	bne.n	10756 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4b4>
   10760:	bd10      	pop	{r4, pc}
   10762:	b510      	push	{r4, lr}
   10764:	2000      	movs	r0, #0
   10766:	f7fd fa91 	bl	dc8c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1076a:	f7f0 fd33 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1076e:	f7f0 ff3b 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10772:	f7f1 f8c9 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10776:	2800      	cmp	r0, #0
   10778:	d003      	beq.n	10782 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4e0>
   1077a:	21df      	movs	r1, #223	; 0xdf
   1077c:	2001      	movs	r0, #1
   1077e:	f7f0 f971 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10782:	bd10      	pop	{r4, pc}
   10784:	b510      	push	{r4, lr}
   10786:	f000 f80a 	bl	1079e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   1078a:	f7fe fdf6 	bl	f37a <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1078e:	2800      	cmp	r0, #0
   10790:	d004      	beq.n	1079c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fa>
   10792:	f240 1161 	movw	r1, #353	; 0x161
   10796:	2001      	movs	r0, #1
   10798:	f7f0 f964 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1079c:	bd10      	pop	{r4, pc}
   1079e:	b510      	push	{r4, lr}
   107a0:	f7f4 f9ac 	bl	4afc <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   107a4:	b110      	cbz	r0, 107ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50a>
   107a6:	f240 113b 	movw	r1, #315	; 0x13b
   107aa:	e004      	b.n	107b6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x514>
   107ac:	f7fe fcd1 	bl	f152 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   107b0:	b120      	cbz	r0, 107bc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x51a>
   107b2:	f44f 719e 	mov.w	r1, #316	; 0x13c
   107b6:	2001      	movs	r0, #1
   107b8:	f7f0 f954 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107bc:	f7f6 fdfc 	bl	73b8 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   107c0:	f7f2 ff32 	bl	3628 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   107c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107c8:	f7f6 bc58 	b.w	707c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   107cc:	000b0001 	.word	0x000b0001
   107d0:	000a0002 	.word	0x000a0002
   107d4:	00090005 	.word	0x00090005
   107d8:	0008000a 	.word	0x0008000a
   107dc:	00070014 	.word	0x00070014
   107e0:	0006001e 	.word	0x0006001e
   107e4:	00050032 	.word	0x00050032
   107e8:	0004004b 	.word	0x0004004b
   107ec:	00030064 	.word	0x00030064
   107f0:	00020096 	.word	0x00020096
   107f4:	000100fa 	.word	0x000100fa
   107f8:	000001f4 	.word	0x000001f4

000107fc <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   107fc:	b518      	push	{r3, r4, lr}
   107fe:	2200      	movs	r2, #0
   10800:	704a      	strb	r2, [r1, #1]
   10802:	2317      	movs	r3, #23
   10804:	700b      	strb	r3, [r1, #0]
   10806:	7202      	strb	r2, [r0, #8]
   10808:	f8d0 400a 	ldr.w	r4, [r0, #10]
   1080c:	604c      	str	r4, [r1, #4]
   1080e:	89c3      	ldrh	r3, [r0, #14]
   10810:	810b      	strh	r3, [r1, #8]
   10812:	7a03      	ldrb	r3, [r0, #8]
   10814:	f88d 3000 	strb.w	r3, [sp]
   10818:	9b00      	ldr	r3, [sp, #0]
   1081a:	9300      	str	r3, [sp, #0]
   1081c:	f89d 3000 	ldrb.w	r3, [sp]
   10820:	2b00      	cmp	r3, #0
   10822:	d1f0      	bne.n	10806 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   10824:	bd18      	pop	{r3, r4, pc}

00010826 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   10826:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10828:	460d      	mov	r5, r1
   1082a:	4604      	mov	r4, r0
   1082c:	f7f2 f8e4 	bl	29f8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   10830:	2600      	movs	r6, #0
   10832:	b1f8      	cbz	r0, 10874 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   10834:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   10838:	7226      	strb	r6, [r4, #8]
   1083a:	8800      	ldrh	r0, [r0, #0]
   1083c:	f8ad 0000 	strh.w	r0, [sp]
   10840:	a902      	add	r1, sp, #8
   10842:	f7fd fbe4 	bl	e00e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10846:	b108      	cbz	r0, 1084c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   10848:	2124      	movs	r1, #36	; 0x24
   1084a:	e010      	b.n	1086e <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   1084c:	9803      	ldr	r0, [sp, #12]
   1084e:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   10852:	f88d 1002 	strb.w	r1, [sp, #2]
   10856:	7841      	ldrb	r1, [r0, #1]
   10858:	f88d 1003 	strb.w	r1, [sp, #3]
   1085c:	8840      	ldrh	r0, [r0, #2]
   1085e:	f8ad 0004 	strh.w	r0, [sp, #4]
   10862:	2102      	movs	r1, #2
   10864:	4668      	mov	r0, sp
   10866:	f7ff fc96 	bl	10196 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1086a:	b118      	cbz	r0, 10874 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   1086c:	213a      	movs	r1, #58	; 0x3a
   1086e:	207e      	movs	r0, #126	; 0x7e
   10870:	f7f0 f8f8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10874:	2020      	movs	r0, #32
   10876:	7028      	strb	r0, [r5, #0]
   10878:	706e      	strb	r6, [r5, #1]
   1087a:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1087e:	6068      	str	r0, [r5, #4]
   10880:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

00010882 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10882:	b510      	push	{r4, lr}
   10884:	f7f7 fc0c 	bl	80a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10888:	f000 f81d 	bl	108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   1088c:	f7f7 f924 	bl	7ad8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10894:	f7f7 ba1e 	b.w	7cd4 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010898 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10898:	b510      	push	{r4, lr}
   1089a:	24c8      	movs	r4, #200	; 0xc8
   1089c:	1e64      	subs	r4, r4, #1
   1089e:	b2e4      	uxtb	r4, r4
   108a0:	f7f7 f938 	bl	7b14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   108a4:	2802      	cmp	r0, #2
   108a6:	d003      	beq.n	108b0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   108a8:	2801      	cmp	r0, #1
   108aa:	d000      	beq.n	108ae <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   108ac:	2000      	movs	r0, #0
   108ae:	bd10      	pop	{r4, pc}
   108b0:	2c00      	cmp	r4, #0
   108b2:	d1f3      	bne.n	1089c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   108b4:	21ca      	movs	r1, #202	; 0xca
   108b6:	203b      	movs	r0, #59	; 0x3b
   108b8:	f7f0 f8d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108bc:	5840      	ldr	r0, [r0, r1]
   108be:	2800      	cmp	r0, #0
   108c0:	d000      	beq.n	108c4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   108c2:	2001      	movs	r0, #1
   108c4:	4770      	bx	lr

000108c6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   108c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   108ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   108ce:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   108d2:	f3bf 8f4f 	dsb	sy
   108d6:	f3bf 8f6f 	isb	sy
   108da:	f7f7 ba95 	b.w	7e08 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   108de:	2800      	cmp	r0, #0
   108e0:	db09      	blt.n	108f6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   108e2:	f000 021f 	and.w	r2, r0, #31
   108e6:	2101      	movs	r1, #1
   108e8:	4091      	lsls	r1, r2
   108ea:	0940      	lsrs	r0, r0, #5
   108ec:	0080      	lsls	r0, r0, #2
   108ee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   108f2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   108f6:	4770      	bx	lr
   108f8:	2800      	cmp	r0, #0
   108fa:	db0d      	blt.n	10918 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   108fc:	f000 021f 	and.w	r2, r0, #31
   10900:	2101      	movs	r1, #1
   10902:	4091      	lsls	r1, r2
   10904:	0940      	lsrs	r0, r0, #5
   10906:	0080      	lsls	r0, r0, #2
   10908:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1090c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10910:	f3bf 8f4f 	dsb	sy
   10914:	f3bf 8f6f 	isb	sy
   10918:	4770      	bx	lr
   1091a:	5840      	ldr	r0, [r0, r1]
   1091c:	2800      	cmp	r0, #0
   1091e:	d000      	beq.n	10922 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10920:	2001      	movs	r0, #1
   10922:	4770      	bx	lr
   10924:	5840      	ldr	r0, [r0, r1]
   10926:	2800      	cmp	r0, #0
   10928:	d000      	beq.n	1092c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1092a:	2001      	movs	r0, #1
   1092c:	4770      	bx	lr

0001092e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   1092e:	b510      	push	{r4, lr}
   10930:	4604      	mov	r4, r0
   10932:	4608      	mov	r0, r1
   10934:	f7f7 fcd4 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1093c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10940:	fbb0 f0f1 	udiv	r0, r0, r1
   10944:	1a20      	subs	r0, r4, r0
   10946:	1e80      	subs	r0, r0, #2
   10948:	bd10      	pop	{r4, pc}

0001094a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1094a:	b510      	push	{r4, lr}
   1094c:	4604      	mov	r4, r0
   1094e:	4608      	mov	r0, r1
   10950:	f7f7 fcc6 	bl	82e0 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10954:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10958:	fbb0 f0f1 	udiv	r0, r0, r1
   1095c:	1a20      	subs	r0, r4, r0
   1095e:	bd10      	pop	{r4, pc}
   10960:	2804      	cmp	r0, #4
   10962:	d202      	bcs.n	1096a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10964:	f04f 0028 	mov.w	r0, #40	; 0x28
   10968:	4770      	bx	lr
   1096a:	d102      	bne.n	10972 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   1096c:	f04f 0010 	mov.w	r0, #16
   10970:	4770      	bx	lr
   10972:	f04f 0000 	mov.w	r0, #0
   10976:	4770      	bx	lr
   10978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1097c:	000d      	movs	r5, r1
   1097e:	4604      	mov	r4, r0
   10980:	f04f 0602 	mov.w	r6, #2
   10984:	f04f 0701 	mov.w	r7, #1
   10988:	d008      	beq.n	1099c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x52>
   1098a:	7828      	ldrb	r0, [r5, #0]
   1098c:	b1d0      	cbz	r0, 109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   1098e:	2801      	cmp	r0, #1
   10990:	d007      	beq.n	109a2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x58>
   10992:	2802      	cmp	r0, #2
   10994:	d014      	beq.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10996:	2803      	cmp	r0, #3
   10998:	d13e      	bne.n	10a18 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   1099a:	e016      	b.n	109ca <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x80>
   1099c:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
   109a0:	e00e      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109a2:	6868      	ldr	r0, [r5, #4]
   109a4:	28c8      	cmp	r0, #200	; 0xc8
   109a6:	d303      	bcc.n	109b0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x66>
   109a8:	2103      	movs	r1, #3
   109aa:	f7f9 fc73 	bl	a294 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
   109ae:	b108      	cbz	r0, 109b4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x6a>
   109b0:	2600      	movs	r6, #0
   109b2:	e007      	b.n	109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   109b4:	4620      	mov	r0, r4
   109b6:	6869      	ldr	r1, [r5, #4]
   109b8:	f000 f833 	bl	10a22 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd8>
   109bc:	2601      	movs	r6, #1
   109be:	e001      	b.n	109c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x7a>
   109c0:	f7f8 fb8c 	bl	90dc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x2bc>
   109c4:	4630      	mov	r0, r6
   109c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   109ca:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   109ce:	2800      	cmp	r0, #0
   109d0:	d1f6      	bne.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109d2:	6868      	ldr	r0, [r5, #4]
   109d4:	f7f8 fb54 	bl	9080 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   109d8:	b1f0      	cbz	r0, 10a18 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xce>
   109da:	6869      	ldr	r1, [r5, #4]
   109dc:	7808      	ldrb	r0, [r1, #0]
   109de:	b130      	cbz	r0, 109ee <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xa4>
   109e0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   109e4:	2805      	cmp	r0, #5
   109e6:	d008      	beq.n	109fa <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xb0>
   109e8:	f44f 71be 	mov.w	r1, #380	; 0x17c
   109ec:	e011      	b.n	10a12 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xc8>
   109ee:	4620      	mov	r0, r4
   109f0:	f000 f81f 	bl	10a32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   109f4:	f884 7025 	strb.w	r7, [r4, #37]	; 0x25
   109f8:	e7e2      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   109fa:	4620      	mov	r0, r4
   109fc:	f000 f832 	bl	10a64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10a00:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10a04:	4621      	mov	r1, r4
   10a06:	f000 f80a 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10a0a:	2800      	cmp	r0, #0
   10a0c:	d1d8      	bne.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a0e:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   10a12:	206a      	movs	r0, #106	; 0x6a
   10a14:	f7fb ff18 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10a18:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
   10a1c:	e7d0      	b.n	109c0 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x76>
   10a1e:	f7f9 be73 	b.w	a708 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
   10a22:	4602      	mov	r2, r0
   10a24:	7803      	ldrb	r3, [r0, #0]
   10a26:	6840      	ldr	r0, [r0, #4]
   10a28:	4408      	add	r0, r1
   10a2a:	6050      	str	r0, [r2, #4]
   10a2c:	3859      	subs	r0, #89	; 0x59
   10a2e:	f7fa bd3b 	b.w	b4a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
   10a32:	2201      	movs	r2, #1
   10a34:	7002      	strb	r2, [r0, #0]
   10a36:	2200      	movs	r2, #0
   10a38:	72c2      	strb	r2, [r0, #11]
   10a3a:	790a      	ldrb	r2, [r1, #4]
   10a3c:	b172      	cbz	r2, 10a5c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x112>
   10a3e:	2200      	movs	r2, #0
   10a40:	8102      	strh	r2, [r0, #8]
   10a42:	794a      	ldrb	r2, [r1, #5]
   10a44:	b162      	cbz	r2, 10a60 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x116>
   10a46:	2203      	movs	r2, #3
   10a48:	7282      	strb	r2, [r0, #10]
   10a4a:	688a      	ldr	r2, [r1, #8]
   10a4c:	326a      	adds	r2, #106	; 0x6a
   10a4e:	6042      	str	r2, [r0, #4]
   10a50:	68c9      	ldr	r1, [r1, #12]
   10a52:	6101      	str	r1, [r0, #16]
   10a54:	2103      	movs	r1, #3
   10a56:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a5a:	4770      	bx	lr
   10a5c:	222b      	movs	r2, #43	; 0x2b
   10a5e:	e7ef      	b.n	10a40 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xf6>
   10a60:	2202      	movs	r2, #2
   10a62:	e7f1      	b.n	10a48 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xfe>
   10a64:	b510      	push	{r4, lr}
   10a66:	2200      	movs	r2, #0
   10a68:	7002      	strb	r2, [r0, #0]
   10a6a:	72c2      	strb	r2, [r0, #11]
   10a6c:	790a      	ldrb	r2, [r1, #4]
   10a6e:	b1a2      	cbz	r2, 10a9a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x150>
   10a70:	2200      	movs	r2, #0
   10a72:	8102      	strh	r2, [r0, #8]
   10a74:	794a      	ldrb	r2, [r1, #5]
   10a76:	b192      	cbz	r2, 10a9e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x154>
   10a78:	2203      	movs	r2, #3
   10a7a:	7282      	strb	r2, [r0, #10]
   10a7c:	68ca      	ldr	r2, [r1, #12]
   10a7e:	326a      	adds	r2, #106	; 0x6a
   10a80:	6042      	str	r2, [r0, #4]
   10a82:	e9d0 4206 	ldrd	r4, r2, [r0, #24]
   10a86:	6889      	ldr	r1, [r1, #8]
   10a88:	17cb      	asrs	r3, r1, #31
   10a8a:	1861      	adds	r1, r4, r1
   10a8c:	415a      	adcs	r2, r3
   10a8e:	e9c0 1204 	strd	r1, r2, [r0, #16]
   10a92:	2104      	movs	r1, #4
   10a94:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10a98:	bd10      	pop	{r4, pc}
   10a9a:	222b      	movs	r2, #43	; 0x2b
   10a9c:	e7e9      	b.n	10a72 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x128>
   10a9e:	2202      	movs	r2, #2
   10aa0:	e7eb      	b.n	10a7a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x130>
   10aa2:	b570      	push	{r4, r5, r6, lr}
   10aa4:	4605      	mov	r5, r0
   10aa6:	460c      	mov	r4, r1
   10aa8:	f891 0027 	ldrb.w	r0, [r1, #39]	; 0x27
   10aac:	f7fa fa80 	bl	afb0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
   10ab0:	b178      	cbz	r0, 10ad2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x188>
   10ab2:	4620      	mov	r0, r4
   10ab4:	f000 f810 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10ab8:	6a22      	ldr	r2, [r4, #32]
   10aba:	2109      	movs	r1, #9
   10abc:	4628      	mov	r0, r5
   10abe:	4790      	blx	r2
   10ac0:	2800      	cmp	r0, #0
   10ac2:	d008      	beq.n	10ad6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   10ac4:	7800      	ldrb	r0, [r0, #0]
   10ac6:	2800      	cmp	r0, #0
   10ac8:	d005      	beq.n	10ad6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18c>
   10aca:	21dc      	movs	r1, #220	; 0xdc
   10acc:	206a      	movs	r0, #106	; 0x6a
   10ace:	f7fb febb 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10ad2:	21d8      	movs	r1, #216	; 0xd8
   10ad4:	e7fa      	b.n	10acc <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x182>
   10ad6:	bd70      	pop	{r4, r5, r6, pc}
   10ad8:	2100      	movs	r1, #0
   10ada:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10ade:	f800 1f24 	strb.w	r1, [r0, #36]!
   10ae2:	7041      	strb	r1, [r0, #1]
   10ae4:	4770      	bx	lr

00010ae6 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10ae6:	b570      	push	{r4, r5, r6, lr}
   10ae8:	f7f8 fb54 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10aec:	4605      	mov	r5, r0
   10aee:	2400      	movs	r4, #0
   10af0:	e006      	b.n	10b00 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10af2:	4620      	mov	r0, r4
   10af4:	f7f8 fb54 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10af8:	f7ff ffee 	bl	10ad8 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x18e>
   10afc:	1c64      	adds	r4, r4, #1
   10afe:	b2e4      	uxtb	r4, r4
   10b00:	42ac      	cmp	r4, r5
   10b02:	d3f6      	bcc.n	10af2 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10b04:	bd70      	pop	{r4, r5, r6, pc}

00010b06 <mpsl_timeslot_request>:
   10b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b0a:	460d      	mov	r5, r1
   10b0c:	f7f8 fb48 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b10:	0004      	movs	r4, r0
   10b12:	d008      	beq.n	10b26 <mpsl_timeslot_request+0x20>
   10b14:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10b18:	f06f 0622 	mvn.w	r6, #34	; 0x22
   10b1c:	2801      	cmp	r0, #1
   10b1e:	d006      	beq.n	10b2e <mpsl_timeslot_request+0x28>
   10b20:	2802      	cmp	r0, #2
   10b22:	d111      	bne.n	10b48 <mpsl_timeslot_request+0x42>
   10b24:	e003      	b.n	10b2e <mpsl_timeslot_request+0x28>
   10b26:	f06f 0001 	mvn.w	r0, #1
   10b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b2e:	f06f 0715 	mvn.w	r7, #21
   10b32:	b15d      	cbz	r5, 10b4c <mpsl_timeslot_request+0x46>
   10b34:	4628      	mov	r0, r5
   10b36:	f7f8 faa3 	bl	9080 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x260>
   10b3a:	b138      	cbz	r0, 10b4c <mpsl_timeslot_request+0x46>
   10b3c:	7828      	ldrb	r0, [r5, #0]
   10b3e:	b138      	cbz	r0, 10b50 <mpsl_timeslot_request+0x4a>
   10b40:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   10b44:	2802      	cmp	r0, #2
   10b46:	d008      	beq.n	10b5a <mpsl_timeslot_request+0x54>
   10b48:	4630      	mov	r0, r6
   10b4a:	e7ee      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b4c:	4638      	mov	r0, r7
   10b4e:	e7ec      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b50:	4629      	mov	r1, r5
   10b52:	4620      	mov	r0, r4
   10b54:	f7ff ff6d 	bl	10a32 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xe8>
   10b58:	e003      	b.n	10b62 <mpsl_timeslot_request+0x5c>
   10b5a:	4629      	mov	r1, r5
   10b5c:	4620      	mov	r0, r4
   10b5e:	f7ff ff81 	bl	10a64 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x11a>
   10b62:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
   10b66:	4621      	mov	r1, r4
   10b68:	f7ff ff59 	bl	10a1e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0xd4>
   10b6c:	b108      	cbz	r0, 10b72 <mpsl_timeslot_request+0x6c>
   10b6e:	2000      	movs	r0, #0
   10b70:	e7db      	b.n	10b2a <mpsl_timeslot_request+0x24>
   10b72:	f240 21b1 	movw	r1, #689	; 0x2b1
   10b76:	206a      	movs	r0, #106	; 0x6a
   10b78:	f7fb fe66 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>

00010b7c <mpsl_timeslot_session_close>:
   10b7c:	b510      	push	{r4, lr}
   10b7e:	4604      	mov	r4, r0
   10b80:	f7f8 fb0e 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b84:	0001      	movs	r1, r0
   10b86:	d005      	beq.n	10b94 <mpsl_timeslot_session_close+0x18>
   10b88:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   10b8c:	f06f 0222 	mvn.w	r2, #34	; 0x22
   10b90:	b978      	cbnz	r0, 10bb2 <mpsl_timeslot_session_close+0x36>
   10b92:	e002      	b.n	10b9a <mpsl_timeslot_session_close+0x1e>
   10b94:	f06f 0001 	mvn.w	r0, #1
   10b98:	bd10      	pop	{r4, pc}
   10b9a:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
   10b9e:	b140      	cbz	r0, 10bb2 <mpsl_timeslot_session_close+0x36>
   10ba0:	2802      	cmp	r0, #2
   10ba2:	d008      	beq.n	10bb6 <mpsl_timeslot_session_close+0x3a>
   10ba4:	2801      	cmp	r0, #1
   10ba6:	d006      	beq.n	10bb6 <mpsl_timeslot_session_close+0x3a>
   10ba8:	2001      	movs	r0, #1
   10baa:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
   10bae:	2000      	movs	r0, #0
   10bb0:	bd10      	pop	{r4, pc}
   10bb2:	4610      	mov	r0, r2
   10bb4:	bd10      	pop	{r4, pc}
   10bb6:	4620      	mov	r0, r4
   10bb8:	f7ff ff73 	bl	10aa2 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x158>
   10bbc:	e7f7      	b.n	10bae <mpsl_timeslot_session_close+0x32>

00010bbe <mpsl_timeslot_session_count_set>:
   10bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bc2:	460e      	mov	r6, r1
   10bc4:	4607      	mov	r7, r0
   10bc6:	f7f8 fae5 	bl	9194 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10bca:	4605      	mov	r5, r0
   10bcc:	2400      	movs	r4, #0
   10bce:	e00b      	b.n	10be8 <mpsl_timeslot_session_count_set+0x2a>
   10bd0:	4620      	mov	r0, r4
   10bd2:	f7f8 fae5 	bl	91a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10bd6:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   10bda:	b118      	cbz	r0, 10be4 <mpsl_timeslot_session_count_set+0x26>
   10bdc:	f04f 30ff 	mov.w	r0, #4294967295
   10be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10be4:	1c64      	adds	r4, r4, #1
   10be6:	b2e4      	uxtb	r4, r4
   10be8:	42ac      	cmp	r4, r5
   10bea:	d3f1      	bcc.n	10bd0 <mpsl_timeslot_session_count_set+0x12>
   10bec:	2e08      	cmp	r6, #8
   10bee:	d902      	bls.n	10bf6 <mpsl_timeslot_session_count_set+0x38>
   10bf0:	f06f 0015 	mvn.w	r0, #21
   10bf4:	e7f4      	b.n	10be0 <mpsl_timeslot_session_count_set+0x22>
   10bf6:	b117      	cbz	r7, 10bfe <mpsl_timeslot_session_count_set+0x40>
   10bf8:	4631      	mov	r1, r6
   10bfa:	4638      	mov	r0, r7
   10bfc:	e001      	b.n	10c02 <mpsl_timeslot_session_count_set+0x44>
   10bfe:	2100      	movs	r1, #0
   10c00:	4608      	mov	r0, r1
   10c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   10c06:	f7f8 bab1 	b.w	916c <sym_WTOZYVN52TSAPXLTHQQLG45KSAFDDSBJMHMFM6Q>

00010c0a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10c0a:	f7fa bed1 	b.w	b9b0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010c0e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10c0e:	b510      	push	{r4, lr}
   10c10:	2000      	movs	r0, #0
   10c12:	f7fb fa07 	bl	c024 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10c16:	6800      	ldr	r0, [r0, #0]
   10c18:	2800      	cmp	r0, #0
   10c1a:	bf18      	it	ne
   10c1c:	2001      	movne	r0, #1
   10c1e:	bd10      	pop	{r4, pc}

00010c20 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10c20:	0a41      	lsrs	r1, r0, #9
   10c22:	f643 5209 	movw	r2, #15625	; 0x3d09
   10c26:	4351      	muls	r1, r2
   10c28:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10c2c:	fb10 f002 	smulbb	r0, r0, r2
   10c30:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10c34:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10c38:	4770      	bx	lr
   10c3a:	2800      	cmp	r0, #0
   10c3c:	db09      	blt.n	10c52 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10c3e:	f000 021f 	and.w	r2, r0, #31
   10c42:	2101      	movs	r1, #1
   10c44:	4091      	lsls	r1, r2
   10c46:	0940      	lsrs	r0, r0, #5
   10c48:	0080      	lsls	r0, r0, #2
   10c4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c4e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c52:	4770      	bx	lr
   10c54:	2800      	cmp	r0, #0
   10c56:	db0d      	blt.n	10c74 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10c58:	f000 021f 	and.w	r2, r0, #31
   10c5c:	2101      	movs	r1, #1
   10c5e:	4091      	lsls	r1, r2
   10c60:	0940      	lsrs	r0, r0, #5
   10c62:	0080      	lsls	r0, r0, #2
   10c64:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c68:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c6c:	f3bf 8f4f 	dsb	sy
   10c70:	f3bf 8f6f 	isb	sy
   10c74:	4770      	bx	lr
   10c76:	5840      	ldr	r0, [r0, r1]
   10c78:	2800      	cmp	r0, #0
   10c7a:	d000      	beq.n	10c7e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10c7c:	2001      	movs	r0, #1
   10c7e:	4770      	bx	lr
   10c80:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10c84:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10c88:	f002 0201 	and.w	r2, r2, #1
   10c8c:	03c0      	lsls	r0, r0, #15
   10c8e:	d503      	bpl.n	10c98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10c90:	428a      	cmp	r2, r1
   10c92:	d101      	bne.n	10c98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10c94:	2001      	movs	r0, #1
   10c96:	4770      	bx	lr
   10c98:	2000      	movs	r0, #0
   10c9a:	4770      	bx	lr

00010c9c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10c9c:	b510      	push	{r4, lr}
   10c9e:	2101      	movs	r1, #1
   10ca0:	0788      	lsls	r0, r1, #30
   10ca2:	f7fb fd7b 	bl	c79c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10ca6:	2800      	cmp	r0, #0
   10ca8:	d000      	beq.n	10cac <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10caa:	2001      	movs	r0, #1
   10cac:	bd10      	pop	{r4, pc}

00010cae <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10cae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10cb2:	2101      	movs	r1, #1
   10cb4:	6001      	str	r1, [r0, #0]
   10cb6:	4770      	bx	lr

00010cb8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10cb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10cbc:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10cc0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10cc4:	f002 0203 	and.w	r2, r2, #3
   10cc8:	03c9      	lsls	r1, r1, #15
   10cca:	d503      	bpl.n	10cd4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10ccc:	4282      	cmp	r2, r0
   10cce:	d101      	bne.n	10cd4 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10cd0:	2001      	movs	r0, #1
   10cd2:	4770      	bx	lr
   10cd4:	2000      	movs	r0, #0
   10cd6:	4770      	bx	lr

00010cd8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10cd8:	b510      	push	{r4, lr}
   10cda:	2100      	movs	r1, #0
   10cdc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10ce0:	f7fb fd5c 	bl	c79c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10ce4:	2800      	cmp	r0, #0
   10ce6:	d000      	beq.n	10cea <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10ce8:	2001      	movs	r0, #1
   10cea:	bd10      	pop	{r4, pc}
   10cec:	2800      	cmp	r0, #0
   10cee:	db09      	blt.n	10d04 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10cf0:	f000 021f 	and.w	r2, r0, #31
   10cf4:	2101      	movs	r1, #1
   10cf6:	4091      	lsls	r1, r2
   10cf8:	0940      	lsrs	r0, r0, #5
   10cfa:	0080      	lsls	r0, r0, #2
   10cfc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d00:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d04:	4770      	bx	lr
   10d06:	2800      	cmp	r0, #0
   10d08:	db0d      	blt.n	10d26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10d0a:	f000 021f 	and.w	r2, r0, #31
   10d0e:	2101      	movs	r1, #1
   10d10:	4091      	lsls	r1, r2
   10d12:	0940      	lsrs	r0, r0, #5
   10d14:	0080      	lsls	r0, r0, #2
   10d16:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d1a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10d1e:	f3bf 8f4f 	dsb	sy
   10d22:	f3bf 8f6f 	isb	sy
   10d26:	4770      	bx	lr
   10d28:	00021000 	.word	0x00021000
   10d2c:	000000fa 	.word	0x000000fa
   10d30:	cc9ef18c 	.word	0xcc9ef18c
   10d34:	a7d74134 	.word	0xa7d74134
   10d38:	1459f70e 	.word	0x1459f70e
   10d3c:	67d72bbb 	.word	0x67d72bbb
   10d40:	ebbebb7f 	.word	0xebbebb7f
   10d44:	2800      	cmp	r0, #0
   10d46:	db09      	blt.n	10d5c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10d48:	f000 021f 	and.w	r2, r0, #31
   10d4c:	2101      	movs	r1, #1
   10d4e:	4091      	lsls	r1, r2
   10d50:	0940      	lsrs	r0, r0, #5
   10d52:	0080      	lsls	r0, r0, #2
   10d54:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10d58:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10d5c:	4770      	bx	lr

00010d5e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10d5e:	f3ef 8110 	mrs	r1, PRIMASK
   10d62:	b672      	cpsid	i
   10d64:	7802      	ldrb	r2, [r0, #0]
   10d66:	2a01      	cmp	r2, #1
   10d68:	d001      	beq.n	10d6e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10d6a:	2201      	movs	r2, #1
   10d6c:	e000      	b.n	10d70 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10d6e:	2200      	movs	r2, #0
   10d70:	2301      	movs	r3, #1
   10d72:	7003      	strb	r3, [r0, #0]
   10d74:	b901      	cbnz	r1, 10d78 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10d76:	b662      	cpsie	i
   10d78:	b10a      	cbz	r2, 10d7e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10d7a:	2000      	movs	r0, #0
   10d7c:	4770      	bx	lr
   10d7e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10d82:	4770      	bx	lr

00010d84 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10d84:	2100      	movs	r1, #0
   10d86:	7001      	strb	r1, [r0, #0]
   10d88:	4608      	mov	r0, r1
   10d8a:	4770      	bx	lr

00010d8c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10d8c:	f3ef 8110 	mrs	r1, PRIMASK
   10d90:	b672      	cpsid	i
   10d92:	2200      	movs	r2, #0
   10d94:	7002      	strb	r2, [r0, #0]
   10d96:	b901      	cbnz	r1, 10d9a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10d98:	b662      	cpsie	i
   10d9a:	2000      	movs	r0, #0
   10d9c:	4770      	bx	lr

00010d9e <mpsl_low_priority_process>:
   10d9e:	f7fb be53 	b.w	ca48 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010da2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10da2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10da6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10daa:	280f      	cmp	r0, #15
   10dac:	d001      	beq.n	10db2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10dae:	2000      	movs	r0, #0
   10db0:	4770      	bx	lr
   10db2:	2001      	movs	r0, #1
   10db4:	4770      	bx	lr

00010db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10db6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dba:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dbe:	280a      	cmp	r0, #10
   10dc0:	d001      	beq.n	10dc6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10dc2:	2000      	movs	r0, #0
   10dc4:	4770      	bx	lr
   10dc6:	2001      	movs	r0, #1
   10dc8:	4770      	bx	lr

00010dca <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10dca:	b500      	push	{lr}
   10dcc:	f7ff fff3 	bl	10db6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10dd0:	b120      	cbz	r0, 10ddc <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10dd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dd6:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10dda:	b108      	cbz	r0, 10de0 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10ddc:	2000      	movs	r0, #0
   10dde:	bd00      	pop	{pc}
   10de0:	2001      	movs	r0, #1
   10de2:	bd00      	pop	{pc}

00010de4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10de4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10de8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10dec:	280e      	cmp	r0, #14
   10dee:	d001      	beq.n	10df4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10df0:	2000      	movs	r0, #0
   10df2:	4770      	bx	lr
   10df4:	2001      	movs	r0, #1
   10df6:	4770      	bx	lr

00010df8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10df8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10dfc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e00:	2810      	cmp	r0, #16
   10e02:	d001      	beq.n	10e08 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10e04:	2000      	movs	r0, #0
   10e06:	4770      	bx	lr
   10e08:	2001      	movs	r0, #1
   10e0a:	4770      	bx	lr

00010e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10e0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e10:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e14:	2806      	cmp	r0, #6
   10e16:	d003      	beq.n	10e20 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e18:	1c40      	adds	r0, r0, #1
   10e1a:	d001      	beq.n	10e20 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10e1c:	2000      	movs	r0, #0
   10e1e:	4770      	bx	lr
   10e20:	2001      	movs	r0, #1
   10e22:	4770      	bx	lr

00010e24 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10e24:	b500      	push	{lr}
   10e26:	f7ff fff1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e2a:	b148      	cbz	r0, 10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e30:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e34:	2806      	cmp	r0, #6
   10e36:	d303      	bcc.n	10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e38:	1c40      	adds	r0, r0, #1
   10e3a:	d001      	beq.n	10e40 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10e3c:	2001      	movs	r0, #1
   10e3e:	bd00      	pop	{pc}
   10e40:	2000      	movs	r0, #0
   10e42:	bd00      	pop	{pc}

00010e44 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10e44:	b500      	push	{lr}
   10e46:	f7ff ffe1 	bl	10e0c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10e4a:	b138      	cbz	r0, 10e5c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10e4c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e50:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10e54:	2806      	cmp	r0, #6
   10e56:	d303      	bcc.n	10e60 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e58:	1c40      	adds	r0, r0, #1
   10e5a:	d001      	beq.n	10e60 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10e5c:	2000      	movs	r0, #0
   10e5e:	bd00      	pop	{pc}
   10e60:	2001      	movs	r0, #1
   10e62:	bd00      	pop	{pc}

00010e64 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10e64:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e68:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e6c:	280d      	cmp	r0, #13
   10e6e:	d001      	beq.n	10e74 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10e70:	2000      	movs	r0, #0
   10e72:	4770      	bx	lr
   10e74:	2001      	movs	r0, #1
   10e76:	4770      	bx	lr

00010e78 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10e78:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10e7c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10e80:	2808      	cmp	r0, #8
   10e82:	d001      	beq.n	10e88 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10e84:	2000      	movs	r0, #0
   10e86:	4770      	bx	lr
   10e88:	2001      	movs	r0, #1
   10e8a:	4770      	bx	lr

00010e8c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10e8c:	f7fb be16 	b.w	cabc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010e90 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10e90:	f7fb be14 	b.w	cabc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010e94 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e98:	428a      	cmp	r2, r1
   10e9a:	d803      	bhi.n	10ea4 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10e9c:	2179      	movs	r1, #121	; 0x79
   10e9e:	2096      	movs	r0, #150	; 0x96
   10ea0:	f7fb fcd2 	bl	c848 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10ea4:	fab2 f382 	clz	r3, r2
   10ea8:	b13b      	cbz	r3, 10eba <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10eaa:	4099      	lsls	r1, r3
   10eac:	f1c3 0420 	rsb	r4, r3, #32
   10eb0:	fa20 f404 	lsr.w	r4, r0, r4
   10eb4:	4321      	orrs	r1, r4
   10eb6:	4098      	lsls	r0, r3
   10eb8:	409a      	lsls	r2, r3
   10eba:	0c14      	lsrs	r4, r2, #16
   10ebc:	0c07      	lsrs	r7, r0, #16
   10ebe:	b286      	uxth	r6, r0
   10ec0:	fbb1 f0f4 	udiv	r0, r1, r4
   10ec4:	fbb1 f3f4 	udiv	r3, r1, r4
   10ec8:	fb04 1c10 	mls	ip, r4, r0, r1
   10ecc:	b295      	uxth	r5, r2
   10ece:	fb03 f005 	mul.w	r0, r3, r5
   10ed2:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10ed6:	4560      	cmp	r0, ip
   10ed8:	d907      	bls.n	10eea <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10eda:	eba0 000c 	sub.w	r0, r0, ip
   10ede:	4290      	cmp	r0, r2
   10ee0:	d901      	bls.n	10ee6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10ee2:	2002      	movs	r0, #2
   10ee4:	e000      	b.n	10ee8 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10ee6:	2001      	movs	r0, #1
   10ee8:	1a1b      	subs	r3, r3, r0
   10eea:	0409      	lsls	r1, r1, #16
   10eec:	0418      	lsls	r0, r3, #16
   10eee:	19c9      	adds	r1, r1, r7
   10ef0:	fba3 3702 	umull	r3, r7, r3, r2
   10ef4:	1acf      	subs	r7, r1, r3
   10ef6:	fbb7 f1f4 	udiv	r1, r7, r4
   10efa:	fbb7 f3f4 	udiv	r3, r7, r4
   10efe:	fb04 7413 	mls	r4, r4, r3, r7
   10f02:	fb01 f305 	mul.w	r3, r1, r5
   10f06:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10f0a:	42a3      	cmp	r3, r4
   10f0c:	d906      	bls.n	10f1c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10f0e:	1b1b      	subs	r3, r3, r4
   10f10:	4293      	cmp	r3, r2
   10f12:	d901      	bls.n	10f18 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10f14:	2202      	movs	r2, #2
   10f16:	e000      	b.n	10f1a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10f18:	2201      	movs	r2, #1
   10f1a:	1a89      	subs	r1, r1, r2
   10f1c:	4308      	orrs	r0, r1
   10f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010f22 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   10f22:	2a00      	cmp	r2, #0
   10f24:	bf04      	itt	eq
   10f26:	2000      	moveq	r0, #0
   10f28:	4770      	bxeq	lr
   10f2a:	1e52      	subs	r2, r2, #1
   10f2c:	d007      	beq.n	10f3e <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10f2e:	7803      	ldrb	r3, [r0, #0]
   10f30:	f891 c000 	ldrb.w	ip, [r1]
   10f34:	4563      	cmp	r3, ip
   10f36:	bf04      	itt	eq
   10f38:	1c40      	addeq	r0, r0, #1
   10f3a:	1c49      	addeq	r1, r1, #1
   10f3c:	d0f5      	beq.n	10f2a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10f3e:	7800      	ldrb	r0, [r0, #0]
   10f40:	7809      	ldrb	r1, [r1, #0]
   10f42:	1a40      	subs	r0, r0, r1
   10f44:	4770      	bx	lr

00010f46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10f46:	b4f0      	push	{r4, r5, r6, r7}
   10f48:	ea80 0c01 	eor.w	ip, r0, r1
   10f4c:	4603      	mov	r3, r0
   10f4e:	f01c 0f03 	tst.w	ip, #3
   10f52:	d13c      	bne.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f54:	f013 0f03 	tst.w	r3, #3
   10f58:	d00b      	beq.n	10f72 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10f5a:	2a00      	cmp	r2, #0
   10f5c:	bf04      	itt	eq
   10f5e:	bcf0      	popeq	{r4, r5, r6, r7}
   10f60:	4770      	bxeq	lr
   10f62:	f811 cb01 	ldrb.w	ip, [r1], #1
   10f66:	f803 cb01 	strb.w	ip, [r3], #1
   10f6a:	1e52      	subs	r2, r2, #1
   10f6c:	f013 0f03 	tst.w	r3, #3
   10f70:	d1f3      	bne.n	10f5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10f72:	2a03      	cmp	r2, #3
   10f74:	d94f      	bls.n	11016 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10f76:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f7a:	d24c      	bcs.n	11016 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10f7c:	f1c2 0c00 	rsb	ip, r2, #0
   10f80:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10f84:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10f88:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10f8c:	f1cc 0c00 	rsb	ip, ip, #0
   10f90:	f1bc 0f00 	cmp.w	ip, #0
   10f94:	dd1b      	ble.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f96:	1f0d      	subs	r5, r1, #4
   10f98:	1f1c      	subs	r4, r3, #4
   10f9a:	f01c 0f01 	tst.w	ip, #1
   10f9e:	d003      	beq.n	10fa8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10fa0:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10fa4:	f844 6f04 	str.w	r6, [r4, #4]!
   10fa8:	ea5f 066c 	movs.w	r6, ip, asr #1
   10fac:	d007      	beq.n	10fbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10fae:	686f      	ldr	r7, [r5, #4]
   10fb0:	6067      	str	r7, [r4, #4]
   10fb2:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10fb6:	f844 7f08 	str.w	r7, [r4, #8]!
   10fba:	1e76      	subs	r6, r6, #1
   10fbc:	d1f7      	bne.n	10fae <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10fbe:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10fc2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10fc6:	f1cc 0c00 	rsb	ip, ip, #0
   10fca:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10fce:	2a00      	cmp	r2, #0
   10fd0:	bf04      	itt	eq
   10fd2:	bcf0      	popeq	{r4, r5, r6, r7}
   10fd4:	4770      	bxeq	lr
   10fd6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fda:	d226      	bcs.n	1102a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10fdc:	2a00      	cmp	r2, #0
   10fde:	bfdc      	itt	le
   10fe0:	bcf0      	pople	{r4, r5, r6, r7}
   10fe2:	4770      	bxle	lr
   10fe4:	1e49      	subs	r1, r1, #1
   10fe6:	1e5b      	subs	r3, r3, #1
   10fe8:	f012 0f01 	tst.w	r2, #1
   10fec:	d003      	beq.n	10ff6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10fee:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ff2:	f803 cf01 	strb.w	ip, [r3, #1]!
   10ff6:	1052      	asrs	r2, r2, #1
   10ff8:	bf04      	itt	eq
   10ffa:	bcf0      	popeq	{r4, r5, r6, r7}
   10ffc:	4770      	bxeq	lr
   10ffe:	f891 c001 	ldrb.w	ip, [r1, #1]
   11002:	f883 c001 	strb.w	ip, [r3, #1]
   11006:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   1100a:	f803 cf02 	strb.w	ip, [r3, #2]!
   1100e:	1e52      	subs	r2, r2, #1
   11010:	d1f5      	bne.n	10ffe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   11012:	bcf0      	pop	{r4, r5, r6, r7}
   11014:	4770      	bx	lr
   11016:	2a04      	cmp	r2, #4
   11018:	d3d9      	bcc.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1101a:	f851 cb04 	ldr.w	ip, [r1], #4
   1101e:	1f12      	subs	r2, r2, #4
   11020:	f843 cb04 	str.w	ip, [r3], #4
   11024:	2a04      	cmp	r2, #4
   11026:	d2f8      	bcs.n	1101a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   11028:	e7d1      	b.n	10fce <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1102a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1102e:	f803 cb01 	strb.w	ip, [r3], #1
   11032:	1e52      	subs	r2, r2, #1
   11034:	d1f9      	bne.n	1102a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   11036:	bcf0      	pop	{r4, r5, r6, r7}
   11038:	4770      	bx	lr

0001103a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   1103a:	b470      	push	{r4, r5, r6}
   1103c:	4603      	mov	r3, r0
   1103e:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   11042:	f010 0f03 	tst.w	r0, #3
   11046:	d009      	beq.n	1105c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   11048:	2a00      	cmp	r2, #0
   1104a:	bf04      	itt	eq
   1104c:	bc70      	popeq	{r4, r5, r6}
   1104e:	4770      	bxeq	lr
   11050:	f803 cb01 	strb.w	ip, [r3], #1
   11054:	1e52      	subs	r2, r2, #1
   11056:	f013 0f03 	tst.w	r3, #3
   1105a:	d1f5      	bne.n	11048 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   1105c:	b2c9      	uxtb	r1, r1
   1105e:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   11062:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   11066:	2a03      	cmp	r2, #3
   11068:	d939      	bls.n	110de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   1106a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1106e:	d236      	bcs.n	110de <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   11070:	4251      	negs	r1, r2
   11072:	17cc      	asrs	r4, r1, #31
   11074:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   11078:	1089      	asrs	r1, r1, #2
   1107a:	424e      	negs	r6, r1
   1107c:	2e00      	cmp	r6, #0
   1107e:	dd11      	ble.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   11080:	1f19      	subs	r1, r3, #4
   11082:	f016 0f01 	tst.w	r6, #1
   11086:	bf18      	it	ne
   11088:	f841 5f04 	strne.w	r5, [r1, #4]!
   1108c:	1074      	asrs	r4, r6, #1
   1108e:	d004      	beq.n	1109a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   11090:	604d      	str	r5, [r1, #4]
   11092:	f841 5f08 	str.w	r5, [r1, #8]!
   11096:	1e64      	subs	r4, r4, #1
   11098:	d1fa      	bne.n	11090 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   1109a:	4271      	negs	r1, r6
   1109c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   110a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   110a4:	2a00      	cmp	r2, #0
   110a6:	bf04      	itt	eq
   110a8:	bc70      	popeq	{r4, r5, r6}
   110aa:	4770      	bxeq	lr
   110ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   110b0:	d21d      	bcs.n	110ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   110b2:	2a00      	cmp	r2, #0
   110b4:	bfdc      	itt	le
   110b6:	bc70      	pople	{r4, r5, r6}
   110b8:	4770      	bxle	lr
   110ba:	1e59      	subs	r1, r3, #1
   110bc:	f012 0f01 	tst.w	r2, #1
   110c0:	bf18      	it	ne
   110c2:	f801 cf01 	strbne.w	ip, [r1, #1]!
   110c6:	1052      	asrs	r2, r2, #1
   110c8:	bf04      	itt	eq
   110ca:	bc70      	popeq	{r4, r5, r6}
   110cc:	4770      	bxeq	lr
   110ce:	f881 c001 	strb.w	ip, [r1, #1]
   110d2:	f801 cf02 	strb.w	ip, [r1, #2]!
   110d6:	1e52      	subs	r2, r2, #1
   110d8:	d1f9      	bne.n	110ce <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   110da:	bc70      	pop	{r4, r5, r6}
   110dc:	4770      	bx	lr
   110de:	2a04      	cmp	r2, #4
   110e0:	d3e0      	bcc.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   110e2:	1f12      	subs	r2, r2, #4
   110e4:	f843 5b04 	str.w	r5, [r3], #4
   110e8:	2a04      	cmp	r2, #4
   110ea:	d2fa      	bcs.n	110e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   110ec:	e7da      	b.n	110a4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   110ee:	f803 cb01 	strb.w	ip, [r3], #1
   110f2:	1e52      	subs	r2, r2, #1
   110f4:	d1fb      	bne.n	110ee <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   110f6:	bc70      	pop	{r4, r5, r6}
   110f8:	4770      	bx	lr
   110fa:	f04f 30ff 	mov.w	r0, #4294967295
   110fe:	4770      	bx	lr
   11100:	2000      	movs	r0, #0
   11102:	4770      	bx	lr
   11104:	2000      	movs	r0, #0
   11106:	4770      	bx	lr
   11108:	f04f 30ff 	mov.w	r0, #4294967295
   1110c:	4770      	bx	lr
   1110e:	4770      	bx	lr
   11110:	4770      	bx	lr
   11112:	2000      	movs	r0, #0
   11114:	4770      	bx	lr
   11116:	2100      	movs	r1, #0
   11118:	7001      	strb	r1, [r0, #0]
   1111a:	4770      	bx	lr
   1111c:	f04f 30ff 	mov.w	r0, #4294967295
   11120:	4770      	bx	lr
   11122:	f04f 30ff 	mov.w	r0, #4294967295
   11126:	4770      	bx	lr
   11128:	2100      	movs	r1, #0
   1112a:	7001      	strb	r1, [r0, #0]
   1112c:	4770      	bx	lr
   1112e:	f04f 30ff 	mov.w	r0, #4294967295
   11132:	4770      	bx	lr
   11134:	f04f 30ff 	mov.w	r0, #4294967295
   11138:	4770      	bx	lr
   1113a:	7800      	ldrb	r0, [r0, #0]
   1113c:	2800      	cmp	r0, #0
   1113e:	d001      	beq.n	11144 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   11140:	f06f 0015 	mvn.w	r0, #21
   11144:	4770      	bx	lr
   11146:	2000      	movs	r0, #0
   11148:	4770      	bx	lr
   1114a:	2200      	movs	r2, #0
   1114c:	f000 b802 	b.w	11154 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00011150 <mpsl_fem_init>:
   11150:	f7f7 bdf4 	b.w	8d3c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00011154 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   11154:	b570      	push	{r4, r5, r6, lr}
   11156:	4614      	mov	r4, r2
   11158:	460d      	mov	r5, r1
   1115a:	1b00      	subs	r0, r0, r4
   1115c:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   11160:	4288      	cmp	r0, r1
   11162:	da01      	bge.n	11168 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   11164:	4608      	mov	r0, r1
   11166:	e002      	b.n	1116e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11168:	287f      	cmp	r0, #127	; 0x7f
   1116a:	dd00      	ble.n	1116e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1116c:	207f      	movs	r0, #127	; 0x7f
   1116e:	4619      	mov	r1, r3
   11170:	b240      	sxtb	r0, r0
   11172:	f7f7 fe17 	bl	8da4 <mpsl_tx_power_radio_supported_power_adjust>
   11176:	7028      	strb	r0, [r5, #0]
   11178:	706c      	strb	r4, [r5, #1]
   1117a:	2100      	movs	r1, #0
   1117c:	4420      	add	r0, r4
   1117e:	70a9      	strb	r1, [r5, #2]
   11180:	b240      	sxtb	r0, r0
   11182:	bd70      	pop	{r4, r5, r6, pc}
   11184:	1702080c 	.word	0x1702080c
   11188:	0201010d 	.word	0x0201010d
   1118c:	01010909 	.word	0x01010909
   11190:	18090206 	.word	0x18090206
   11194:	01010318 	.word	0x01010318
   11198:	03030909 	.word	0x03030909
   1119c:	01020305 	.word	0x01020305
   111a0:	24020223 	.word	0x24020223
   111a4:	04041009 	.word	0x04041009
   111a8:	0b0b0505 	.word	0x0b0b0505
   111ac:	0b04      	.short	0x0b04
   111ae:	2b          	.byte	0x2b
   111af:	25          	.byte	0x25
   111b0:	2726      	.short	0x2726
   111b2:	0301      	.short	0x0301
   111b4:	0101      	.short	0x0101
   111b6:	01          	.byte	0x01
   111b7:	d8          	.byte	0xd8
   111b8:	f8f4f0ec 	.word	0xf8f4f0ec
   111bc:	030200fc 	.word	0x030200fc
   111c0:	07060504 	.word	0x07060504
   111c4:	00000008 	.word	0x00000008
	...
   111d8:	01010100 	.word	0x01010100
   111dc:	02020201 	.word	0x02020201
   111e0:	03030302 	.word	0x03030302
   111e4:	04040403 	.word	0x04040403
   111e8:	05050504 	.word	0x05050504
   111ec:	07060605 	.word	0x07060605
   111f0:	0b0a0908 	.word	0x0b0a0908
   111f4:	00000d0c 	.word	0x00000d0c
	...
   11208:	01010000 	.word	0x01010000
   1120c:	02020101 	.word	0x02020101
   11210:	03030202 	.word	0x03030202
   11214:	04040303 	.word	0x04040303
   11218:	05050404 	.word	0x05050404
   1121c:	06060505 	.word	0x06060505
   11220:	00090806 	.word	0x00090806
   11224:	00000000 	.word	0x00000000

00011228 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
   11228:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1122a:	4d3e      	ldr	r5, [pc, #248]	; (11324 <bt_init+0xfc>)
   1122c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   11230:	6899      	ldr	r1, [r3, #8]
   11232:	f011 0101 	ands.w	r1, r1, #1
{
   11236:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   11238:	d124      	bne.n	11284 <bt_init+0x5c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1123a:	aa05      	add	r2, sp, #20
   1123c:	f640 4003 	movw	r0, #3075	; 0xc03
   11240:	f005 f826 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11244:	4604      	mov	r4, r0
   11246:	2800      	cmp	r0, #0
   11248:	d168      	bne.n	1131c <bt_init+0xf4>
		hci_reset_complete(rsp);
   1124a:	9c05      	ldr	r4, [sp, #20]
	uint8_t status = buf->data[0];
   1124c:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   1124e:	781b      	ldrb	r3, [r3, #0]
   11250:	b9ab      	cbnz	r3, 1127e <bt_init+0x56>
		bt_scan_reset();
   11252:	f006 fc43 	bl	17adc <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11256:	f3bf 8f5b 	dmb	ish
   1125a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1125e:	f3bf 8f5b 	dmb	ish
   11262:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11266:	f003 0309 	and.w	r3, r3, #9
   1126a:	f3bf 8f5b 	dmb	ish
   1126e:	e852 1f00 	ldrex	r1, [r2]
   11272:	e842 3000 	strex	r0, r3, [r2]
   11276:	2800      	cmp	r0, #0
   11278:	d1f9      	bne.n	1126e <bt_init+0x46>
   1127a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1127e:	4620      	mov	r0, r4
   11280:	f00d fdee 	bl	1ee60 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   11284:	aa05      	add	r2, sp, #20
   11286:	2100      	movs	r1, #0
   11288:	f241 0003 	movw	r0, #4099	; 0x1003
   1128c:	f005 f800 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   11290:	4604      	mov	r4, r0
   11292:	2800      	cmp	r0, #0
   11294:	d142      	bne.n	1131c <bt_init+0xf4>
	read_local_features_complete(rsp);
   11296:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   11298:	4823      	ldr	r0, [pc, #140]	; (11328 <bt_init+0x100>)
   1129a:	68f1      	ldr	r1, [r6, #12]
   1129c:	2208      	movs	r2, #8
   1129e:	3101      	adds	r1, #1
   112a0:	f019 fea9 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   112a4:	4630      	mov	r0, r6
   112a6:	f00d fddb 	bl	1ee60 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   112aa:	4621      	mov	r1, r4
   112ac:	aa05      	add	r2, sp, #20
   112ae:	f241 0001 	movw	r0, #4097	; 0x1001
   112b2:	f004 ffed 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   112b6:	4604      	mov	r4, r0
   112b8:	bb80      	cbnz	r0, 1131c <bt_init+0xf4>
	read_local_ver_complete(rsp);
   112ba:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   112bc:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   112be:	785a      	ldrb	r2, [r3, #1]
   112c0:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   112c4:	885a      	ldrh	r2, [r3, #2]
   112c6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   112ca:	791a      	ldrb	r2, [r3, #4]
   112cc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   112d0:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   112d4:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   112d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   112dc:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   112e0:	f00d fdbe 	bl	1ee60 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   112e4:	4621      	mov	r1, r4
   112e6:	aa05      	add	r2, sp, #20
   112e8:	f241 0002 	movw	r0, #4098	; 0x1002
   112ec:	f004 ffd0 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   112f0:	4604      	mov	r4, r0
   112f2:	b998      	cbnz	r0, 1131c <bt_init+0xf4>
	read_supported_commands_complete(rsp);
   112f4:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
   112f6:	480d      	ldr	r0, [pc, #52]	; (1132c <bt_init+0x104>)
   112f8:	68f1      	ldr	r1, [r6, #12]
   112fa:	2240      	movs	r2, #64	; 0x40
   112fc:	3101      	adds	r1, #1
   112fe:	f019 fe7a 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   11302:	4630      	mov	r0, r6
   11304:	f00d fdac 	bl	1ee60 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   11308:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   1130c:	065a      	lsls	r2, r3, #25
   1130e:	d411      	bmi.n	11334 <bt_init+0x10c>
		LOG_ERR("Non-LE capable controller detected!");
   11310:	4807      	ldr	r0, [pc, #28]	; (11330 <bt_init+0x108>)
   11312:	2145      	movs	r1, #69	; 0x45
   11314:	f018 fea7 	bl	2a066 <z_log_minimal_printk>
		return -ENODEV;
   11318:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   1131c:	4620      	mov	r0, r4
   1131e:	b006      	add	sp, #24
   11320:	bd70      	pop	{r4, r5, r6, pc}
   11322:	bf00      	nop
   11324:	20000378 	.word	0x20000378
   11328:	200003e8 	.word	0x200003e8
   1132c:	200003f0 	.word	0x200003f0
   11330:	00030c70 	.word	0x00030c70
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   11334:	4621      	mov	r1, r4
   11336:	aa05      	add	r2, sp, #20
   11338:	f242 0003 	movw	r0, #8195	; 0x2003
   1133c:	f004 ffa8 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   11340:	4604      	mov	r4, r0
   11342:	2800      	cmp	r0, #0
   11344:	d1ea      	bne.n	1131c <bt_init+0xf4>
	read_le_features_complete(rsp);
   11346:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   11348:	48b1      	ldr	r0, [pc, #708]	; (11610 <bt_init+0x3e8>)
   1134a:	68f1      	ldr	r1, [r6, #12]
   1134c:	2208      	movs	r2, #8
   1134e:	3101      	adds	r1, #1
   11350:	f019 fe51 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   11354:	4630      	mov	r0, r6
   11356:	f00d fd83 	bl	1ee60 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1135a:	4621      	mov	r1, r4
   1135c:	aa05      	add	r2, sp, #20
   1135e:	f242 0002 	movw	r0, #8194	; 0x2002
   11362:	f004 ff95 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11366:	4604      	mov	r4, r0
   11368:	2800      	cmp	r0, #0
   1136a:	d1d7      	bne.n	1131c <bt_init+0xf4>
		le_read_buffer_size_complete(rsp);
   1136c:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1136e:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   11370:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11374:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   11378:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1137a:	b121      	cbz	r1, 11386 <bt_init+0x15e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1137c:	78da      	ldrb	r2, [r3, #3]
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   1137e:	48a5      	ldr	r0, [pc, #660]	; (11614 <bt_init+0x3ec>)
   11380:	4611      	mov	r1, r2
   11382:	f01c fd16 	bl	2ddb2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   11386:	4620      	mov	r0, r4
   11388:	f00d fd6a 	bl	1ee60 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1138c:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   11390:	f016 0620 	ands.w	r6, r6, #32
   11394:	d118      	bne.n	113c8 <bt_init+0x1a0>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   11396:	2102      	movs	r1, #2
   11398:	f640 406d 	movw	r0, #3181	; 0xc6d
   1139c:	f004 ff2e 	bl	161fc <bt_hci_cmd_create>
		if (!buf) {
   113a0:	4604      	mov	r4, r0
   113a2:	2800      	cmp	r0, #0
   113a4:	f000 80e6 	beq.w	11574 <bt_init+0x34c>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   113a8:	2102      	movs	r1, #2
   113aa:	300c      	adds	r0, #12
   113ac:	f00d fe5e 	bl	1f06c <net_buf_simple_add>
		cp_le->le = 0x01;
   113b0:	2301      	movs	r3, #1
   113b2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   113b4:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   113b6:	4621      	mov	r1, r4
   113b8:	4632      	mov	r2, r6
   113ba:	f640 406d 	movw	r0, #3181	; 0xc6d
   113be:	f004 ff67 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   113c2:	4604      	mov	r4, r0
   113c4:	2800      	cmp	r0, #0
   113c6:	d1a9      	bne.n	1131c <bt_init+0xf4>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   113c8:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   113cc:	071b      	lsls	r3, r3, #28
   113ce:	d512      	bpl.n	113f6 <bt_init+0x1ce>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   113d0:	aa05      	add	r2, sp, #20
   113d2:	2100      	movs	r1, #0
   113d4:	f242 001c 	movw	r0, #8220	; 0x201c
   113d8:	f004 ff5a 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   113dc:	4604      	mov	r4, r0
   113de:	2800      	cmp	r0, #0
   113e0:	d19c      	bne.n	1131c <bt_init+0xf4>
		le_read_supp_states_complete(rsp);
   113e2:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   113e4:	68c3      	ldr	r3, [r0, #12]
   113e6:	f8d3 2001 	ldr.w	r2, [r3, #1]
   113ea:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   113ee:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   113f2:	f00d fd35 	bl	1ee60 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   113f6:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   113fa:	069e      	lsls	r6, r3, #26
   113fc:	d524      	bpl.n	11448 <bt_init+0x220>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   113fe:	f10d 0112 	add.w	r1, sp, #18
   11402:	a804      	add	r0, sp, #16
   11404:	f004 ffa4 	bl	16350 <hci_le_read_max_data_len>
		if (err) {
   11408:	4604      	mov	r4, r0
   1140a:	2800      	cmp	r0, #0
   1140c:	d186      	bne.n	1131c <bt_init+0xf4>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1140e:	2104      	movs	r1, #4
   11410:	f242 0024 	movw	r0, #8228	; 0x2024
   11414:	f004 fef2 	bl	161fc <bt_hci_cmd_create>
		if (!buf) {
   11418:	4606      	mov	r6, r0
   1141a:	2800      	cmp	r0, #0
   1141c:	f000 80aa 	beq.w	11574 <bt_init+0x34c>
   11420:	2104      	movs	r1, #4
   11422:	300c      	adds	r0, #12
   11424:	f00d fe22 	bl	1f06c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   11428:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1142c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1142e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   11432:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   11434:	4622      	mov	r2, r4
   11436:	4631      	mov	r1, r6
   11438:	f242 0024 	movw	r0, #8228	; 0x2024
   1143c:	f004 ff28 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11440:	4604      	mov	r4, r0
   11442:	2800      	cmp	r0, #0
   11444:	f47f af6a 	bne.w	1131c <bt_init+0xf4>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   11448:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1144c:	065c      	lsls	r4, r3, #25
   1144e:	d52a      	bpl.n	114a6 <bt_init+0x27e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
   11450:	2102      	movs	r1, #2
   11452:	f242 002e 	movw	r0, #8238	; 0x202e
   11456:	f004 fed1 	bl	161fc <bt_hci_cmd_create>
		if (!buf) {
   1145a:	4604      	mov	r4, r0
   1145c:	2800      	cmp	r0, #0
   1145e:	f000 8089 	beq.w	11574 <bt_init+0x34c>
   11462:	2102      	movs	r1, #2
   11464:	300c      	adds	r0, #12
   11466:	f00d fe01 	bl	1f06c <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(bt_dev.rpa_timeout);
   1146a:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   1146e:	8003      	strh	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
   11470:	4621      	mov	r1, r4
   11472:	2200      	movs	r2, #0
   11474:	f242 002e 	movw	r0, #8238	; 0x202e
   11478:	f004 ff0a 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   1147c:	4604      	mov	r4, r0
   1147e:	2800      	cmp	r0, #0
   11480:	f47f af4c 	bne.w	1131c <bt_init+0xf4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   11484:	4601      	mov	r1, r0
   11486:	aa05      	add	r2, sp, #20
   11488:	f242 002a 	movw	r0, #8234	; 0x202a
   1148c:	f004 ff00 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   11490:	4604      	mov	r4, r0
   11492:	2800      	cmp	r0, #0
   11494:	f47f af42 	bne.w	1131c <bt_init+0xf4>
		le_read_resolving_list_size_complete(rsp);
   11498:	9805      	ldr	r0, [sp, #20]
	bt_dev.le.rl_size = rp->rl_size;
   1149a:	68c3      	ldr	r3, [r0, #12]
   1149c:	785b      	ldrb	r3, [r3, #1]
   1149e:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
   114a2:	f00d fcdd 	bl	1ee60 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   114a6:	2108      	movs	r1, #8
   114a8:	f242 0001 	movw	r0, #8193	; 0x2001
   114ac:	f004 fea6 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   114b0:	4604      	mov	r4, r0
   114b2:	2800      	cmp	r0, #0
   114b4:	d05e      	beq.n	11574 <bt_init+0x34c>
   114b6:	2108      	movs	r1, #8
   114b8:	300c      	adds	r0, #12
   114ba:	f00d fdd7 	bl	1f06c <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   114be:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   114c2:	f011 0f40 	tst.w	r1, #64	; 0x40
   114c6:	4602      	mov	r2, r0
   114c8:	f240 2302 	movw	r3, #514	; 0x202
   114cc:	bf08      	it	eq
   114ce:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   114d0:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   114d2:	bf4c      	ite	mi
   114d4:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   114d8:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   114dc:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   114de:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   114e2:	bf48      	it	mi
   114e4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   114e8:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   114ec:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   114f0:	bf18      	it	ne
   114f2:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   114f6:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   114fa:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   114fc:	bf48      	it	mi
   114fe:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   11502:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   11504:	bf08      	it	eq
   11506:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
   1150a:	2100      	movs	r1, #0
   1150c:	f019 fea7 	bl	2b25e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   11510:	4621      	mov	r1, r4
   11512:	2200      	movs	r2, #0
   11514:	f242 0001 	movw	r0, #8193	; 0x2001
   11518:	f004 feba 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1151c:	4604      	mov	r4, r0
   1151e:	2800      	cmp	r0, #0
   11520:	f47f aefc 	bne.w	1131c <bt_init+0xf4>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   11524:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   11528:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1152c:	0698      	lsls	r0, r3, #26
   1152e:	d424      	bmi.n	1157a <bt_init+0x352>
	if (bt_dev.le.acl_mtu) {
   11530:	b9c9      	cbnz	r1, 11566 <bt_init+0x33e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   11532:	aa05      	add	r2, sp, #20
   11534:	f241 0005 	movw	r0, #4101	; 0x1005
   11538:	f004 feaa 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1153c:	4604      	mov	r4, r0
   1153e:	2800      	cmp	r0, #0
   11540:	f47f aeec 	bne.w	1131c <bt_init+0xf4>
	if (bt_dev.le.acl_mtu) {
   11544:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   11548:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
   1154a:	b94b      	cbnz	r3, 11560 <bt_init+0x338>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1154c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1154e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   11552:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   11556:	889a      	ldrh	r2, [r3, #4]
   11558:	482e      	ldr	r0, [pc, #184]	; (11614 <bt_init+0x3ec>)
   1155a:	4611      	mov	r1, r2
   1155c:	f01c fc29 	bl	2ddb2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   11560:	4620      	mov	r0, r4
   11562:	f00d fc7d 	bl	1ee60 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   11566:	2108      	movs	r1, #8
   11568:	f640 4001 	movw	r0, #3073	; 0xc01
   1156c:	f004 fe46 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   11570:	4604      	mov	r4, r0
   11572:	b958      	cbnz	r0, 1158c <bt_init+0x364>
		return -ENOBUFS;
   11574:	f06f 0468 	mvn.w	r4, #104	; 0x68
   11578:	e6d0      	b.n	1131c <bt_init+0xf4>
	else if (!bt_dev.le.acl_mtu) {
   1157a:	2900      	cmp	r1, #0
   1157c:	d1f3      	bne.n	11566 <bt_init+0x33e>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1157e:	4826      	ldr	r0, [pc, #152]	; (11618 <bt_init+0x3f0>)
   11580:	2145      	movs	r1, #69	; 0x45
   11582:	f018 fd70 	bl	2a066 <z_log_minimal_printk>
		return -EIO;
   11586:	f06f 0404 	mvn.w	r4, #4
   1158a:	e6c7      	b.n	1131c <bt_init+0xf4>
   1158c:	2108      	movs	r1, #8
   1158e:	300c      	adds	r0, #12
   11590:	f00d fd6c 	bl	1f06c <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   11594:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   11598:	07d9      	lsls	r1, r3, #31
   1159a:	4602      	mov	r2, r0
   1159c:	d42d      	bmi.n	115fa <bt_init+0x3d2>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1159e:	481f      	ldr	r0, [pc, #124]	; (1161c <bt_init+0x3f4>)
   115a0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	sys_put_le64(mask, ev->events);
   115a4:	f019 fe5b 	bl	2b25e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   115a8:	4621      	mov	r1, r4
   115aa:	2200      	movs	r2, #0
   115ac:	f640 4001 	movw	r0, #3073	; 0xc01
   115b0:	f004 fe6e 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   115b4:	4604      	mov	r4, r0
   115b6:	2800      	cmp	r0, #0
   115b8:	f47f aeb0 	bne.w	1131c <bt_init+0xf4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   115bc:	4601      	mov	r1, r0
   115be:	aa05      	add	r2, sp, #20
   115c0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   115c4:	f004 fe64 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   115c8:	b370      	cbz	r0, 11628 <bt_init+0x400>
		LOG_WRN("Vendor HCI extensions not available");
   115ca:	4815      	ldr	r0, [pc, #84]	; (11620 <bt_init+0x3f8>)
   115cc:	2157      	movs	r1, #87	; 0x57
			LOG_WRN("Failed to read supported vendor features");
   115ce:	f018 fd4a 	bl	2a066 <z_log_minimal_printk>
	err = bt_id_init();
   115d2:	f006 f9f1 	bl	179b8 <bt_id_init>
	if (err) {
   115d6:	4604      	mov	r4, r0
   115d8:	2800      	cmp	r0, #0
   115da:	f47f ae9f 	bne.w	1131c <bt_init+0xf4>
		err = bt_conn_init();
   115de:	f007 fdc7 	bl	19170 <bt_conn_init>
		if (err) {
   115e2:	4604      	mov	r4, r0
   115e4:	2800      	cmp	r0, #0
   115e6:	f47f ae99 	bne.w	1131c <bt_init+0xf4>
		if (!bt_dev.id_count) {
   115ea:	79eb      	ldrb	r3, [r5, #7]
   115ec:	2b00      	cmp	r3, #0
   115ee:	d17f      	bne.n	116f0 <bt_init+0x4c8>
			LOG_INF("No ID address. App must call settings_load()");
   115f0:	480c      	ldr	r0, [pc, #48]	; (11624 <bt_init+0x3fc>)
   115f2:	2149      	movs	r1, #73	; 0x49
   115f4:	f018 fd37 	bl	2a066 <z_log_minimal_printk>
			return 0;
   115f8:	e690      	b.n	1131c <bt_init+0xf4>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   115fa:	a103      	add	r1, pc, #12	; (adr r1, 11608 <bt_init+0x3e0>)
   115fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   11600:	e7d0      	b.n	115a4 <bt_init+0x37c>
   11602:	bf00      	nop
   11604:	f3af 8000 	nop.w
   11608:	02008890 	.word	0x02008890
   1160c:	20008000 	.word	0x20008000
   11610:	20000448 	.word	0x20000448
   11614:	20000478 	.word	0x20000478
   11618:	00030c99 	.word	0x00030c99
   1161c:	02008810 	.word	0x02008810
   11620:	00030cc1 	.word	0x00030cc1
   11624:	00030db3 	.word	0x00030db3
	rp.info = (void *)rsp->data;
   11628:	9e05      	ldr	r6, [sp, #20]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1162a:	4835      	ldr	r0, [pc, #212]	; (11700 <bt_init+0x4d8>)
	rp.info = (void *)rsp->data;
   1162c:	68f4      	ldr	r4, [r6, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1162e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   11632:	2b03      	cmp	r3, #3
		return plat_str[platform];
   11634:	bf96      	itet	ls
   11636:	4a33      	ldrls	r2, [pc, #204]	; (11704 <bt_init+0x4dc>)
	return "unknown";
   11638:	4a33      	ldrhi	r2, [pc, #204]	; (11708 <bt_init+0x4e0>)
		return plat_str[platform];
   1163a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   1163e:	2149      	movs	r1, #73	; 0x49
   11640:	f018 fd11 	bl	2a066 <z_log_minimal_printk>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   11644:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   11648:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1164c:	2a02      	cmp	r2, #2
   1164e:	d12a      	bne.n	116a6 <bt_init+0x47e>
	if (variant < ARRAY_SIZE(nordic_str)) {
   11650:	2b03      	cmp	r3, #3
   11652:	d828      	bhi.n	116a6 <bt_init+0x47e>
		return nordic_str[variant];
   11654:	4a2d      	ldr	r2, [pc, #180]	; (1170c <bt_init+0x4e4>)
   11656:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   1165a:	482d      	ldr	r0, [pc, #180]	; (11710 <bt_init+0x4e8>)
   1165c:	2149      	movs	r1, #73	; 0x49
   1165e:	f018 fd02 	bl	2a066 <z_log_minimal_printk>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11662:	7963      	ldrb	r3, [r4, #5]
   11664:	f8d4 1009 	ldr.w	r1, [r4, #9]
   11668:	9102      	str	r1, [sp, #8]
	if (variant < ARRAY_SIZE(var_str)) {
   1166a:	2b03      	cmp	r3, #3
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   1166c:	f8b4 1007 	ldrh.w	r1, [r4, #7]
		return var_str[variant];
   11670:	bf98      	it	ls
   11672:	4a28      	ldrls	r2, [pc, #160]	; (11714 <bt_init+0x4ec>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11674:	9101      	str	r1, [sp, #4]
   11676:	79a1      	ldrb	r1, [r4, #6]
		return var_str[variant];
   11678:	bf94      	ite	ls
   1167a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	return "unknown";
   1167e:	4a22      	ldrhi	r2, [pc, #136]	; (11708 <bt_init+0x4e0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   11680:	4825      	ldr	r0, [pc, #148]	; (11718 <bt_init+0x4f0>)
   11682:	9100      	str	r1, [sp, #0]
   11684:	2149      	movs	r1, #73	; 0x49
   11686:	f018 fcee 	bl	2a066 <z_log_minimal_printk>
	net_buf_unref(rsp);
   1168a:	4630      	mov	r0, r6
   1168c:	f00d fbe8 	bl	1ee60 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   11690:	aa05      	add	r2, sp, #20
   11692:	2100      	movs	r1, #0
   11694:	f64f 4002 	movw	r0, #64514	; 0xfc02
   11698:	f004 fdfa 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1169c:	4604      	mov	r4, r0
   1169e:	b120      	cbz	r0, 116aa <bt_init+0x482>
		LOG_WRN("Failed to read supported vendor commands");
   116a0:	481e      	ldr	r0, [pc, #120]	; (1171c <bt_init+0x4f4>)
   116a2:	2157      	movs	r1, #87	; 0x57
   116a4:	e793      	b.n	115ce <bt_init+0x3a6>
		return "unknown";
   116a6:	4a18      	ldr	r2, [pc, #96]	; (11708 <bt_init+0x4e0>)
   116a8:	e7d7      	b.n	1165a <bt_init+0x432>
	rp.cmds = (void *)rsp->data;
   116aa:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   116ac:	481c      	ldr	r0, [pc, #112]	; (11720 <bt_init+0x4f8>)
   116ae:	68f1      	ldr	r1, [r6, #12]
   116b0:	2202      	movs	r2, #2
   116b2:	3101      	adds	r1, #1
   116b4:	f019 fc9f 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   116b8:	4630      	mov	r0, r6
   116ba:	f00d fbd1 	bl	1ee60 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   116be:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   116c2:	075b      	lsls	r3, r3, #29
   116c4:	d585      	bpl.n	115d2 <bt_init+0x3aa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   116c6:	aa05      	add	r2, sp, #20
   116c8:	4621      	mov	r1, r4
   116ca:	f64f 4003 	movw	r0, #64515	; 0xfc03
   116ce:	f004 fddf 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   116d2:	b110      	cbz	r0, 116da <bt_init+0x4b2>
			LOG_WRN("Failed to read supported vendor features");
   116d4:	4813      	ldr	r0, [pc, #76]	; (11724 <bt_init+0x4fc>)
   116d6:	2157      	movs	r1, #87	; 0x57
   116d8:	e779      	b.n	115ce <bt_init+0x3a6>
		rp.feat = (void *)rsp->data;
   116da:	9c05      	ldr	r4, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
   116dc:	4812      	ldr	r0, [pc, #72]	; (11728 <bt_init+0x500>)
   116de:	68e1      	ldr	r1, [r4, #12]
   116e0:	2201      	movs	r2, #1
   116e2:	4411      	add	r1, r2
   116e4:	f019 fc87 	bl	2aff6 <memcpy>
		net_buf_unref(rsp);
   116e8:	4620      	mov	r0, r4
   116ea:	f00d fbb9 	bl	1ee60 <net_buf_unref>
   116ee:	e770      	b.n	115d2 <bt_init+0x3aa>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   116f0:	2108      	movs	r1, #8
   116f2:	480e      	ldr	r0, [pc, #56]	; (1172c <bt_init+0x504>)
   116f4:	f019 fd98 	bl	2b228 <atomic_or>
	bt_finalize_init();
   116f8:	f005 fb22 	bl	16d40 <bt_finalize_init>
	return 0;
   116fc:	e60e      	b.n	1131c <bt_init+0xf4>
   116fe:	bf00      	nop
   11700:	00030cea 	.word	0x00030cea
   11704:	0002e894 	.word	0x0002e894
   11708:	00030770 	.word	0x00030770
   1170c:	0002e884 	.word	0x0002e884
   11710:	00030d08 	.word	0x00030d08
   11714:	0002e874 	.word	0x0002e874
   11718:	00030d25 	.word	0x00030d25
   1171c:	00030d57 	.word	0x00030d57
   11720:	20000431 	.word	0x20000431
   11724:	00030d85 	.word	0x00030d85
   11728:	20000430 	.word	0x20000430
   1172c:	20000444 	.word	0x20000444

00011730 <notify_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t notify_process(struct bt_conn *conn,
			   struct bt_gatt_subscribe_params *params,
			   const void *data, uint16_t length)
{
   11730:	b538      	push	{r3, r4, r5, lr}
   11732:	460c      	mov	r4, r1
	struct bt_joybus_client *joy;
	uint32_t input_response;
	const uint32_t* rsp_data = data;
	

	joy = CONTAINER_OF(params, struct bt_joybus_client, input_rsp_notify_params);
   11734:	1f0d      	subs	r5, r1, #4
	if (!data || !length) {
   11736:	b102      	cbz	r2, 1173a <notify_process+0xa>
   11738:	b95b      	cbnz	r3, 11752 <notify_process+0x22>
		LOG_INF("Notifications disabled.");
   1173a:	480d      	ldr	r0, [pc, #52]	; (11770 <notify_process+0x40>)
   1173c:	2149      	movs	r1, #73	; 0x49
			joy->input_rsp_notify_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
		}
		return BT_GATT_ITER_STOP;
	}
	if (length != 4) {
		LOG_ERR("Unexpected notification value size.");
   1173e:	f018 fc92 	bl	2a066 <z_log_minimal_printk>
		if (joy->input_rsp_notify_cb) {
   11742:	6f63      	ldr	r3, [r4, #116]	; 0x74
   11744:	b11b      	cbz	r3, 1174e <notify_process+0x1e>
			joy->input_rsp_notify_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
   11746:	f04f 31ff 	mov.w	r1, #4294967295
   1174a:	4628      	mov	r0, r5
   1174c:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   1174e:	2000      	movs	r0, #0
	if (joy->input_rsp_notify_cb) {
		joy->input_rsp_notify_cb(joy, input_response);
	}

	return BT_GATT_ITER_CONTINUE;
}
   11750:	bd38      	pop	{r3, r4, r5, pc}
	if (length != 4) {
   11752:	2b04      	cmp	r3, #4
   11754:	d002      	beq.n	1175c <notify_process+0x2c>
		LOG_ERR("Unexpected notification value size.");
   11756:	4807      	ldr	r0, [pc, #28]	; (11774 <notify_process+0x44>)
   11758:	2145      	movs	r1, #69	; 0x45
   1175a:	e7f0      	b.n	1173e <notify_process+0xe>
	if (joy->input_rsp_notify_cb) {
   1175c:	6f63      	ldr	r3, [r4, #116]	; 0x74
	input_response = *rsp_data;
   1175e:	6811      	ldr	r1, [r2, #0]
	joy->input_response = input_response;
   11760:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	if (joy->input_rsp_notify_cb) {
   11764:	b90b      	cbnz	r3, 1176a <notify_process+0x3a>
	return BT_GATT_ITER_CONTINUE;
   11766:	2001      	movs	r0, #1
   11768:	e7f2      	b.n	11750 <notify_process+0x20>
		joy->input_rsp_notify_cb(joy, input_response);
   1176a:	4628      	mov	r0, r5
   1176c:	4798      	blx	r3
   1176e:	e7fa      	b.n	11766 <notify_process+0x36>
   11770:	0002f156 	.word	0x0002f156
   11774:	0002f173 	.word	0x0002f173

00011778 <button_indicate_process>:
 * @retval BT_GATT_ITER_CONTINUE Continue notification
 */
static uint8_t button_indicate_process(struct bt_conn *conn,
				      struct bt_gatt_subscribe_params *params,
				      const void *data, uint16_t length)
{
   11778:	b570      	push	{r4, r5, r6, lr}
   1177a:	460d      	mov	r5, r1
   1177c:	461c      	mov	r4, r3
	struct bt_joybus_client *joy;
	uint8_t button_state;
	const uint8_t* button_state_p = data;
	joy = CONTAINER_OF(params, struct bt_joybus_client, button_indicate_params);
   1177e:	f1a1 068c 	sub.w	r6, r1, #140	; 0x8c

	if (!data || !length) {
   11782:	b102      	cbz	r2, 11786 <button_indicate_process+0xe>
   11784:	b953      	cbnz	r3, 1179c <button_indicate_process+0x24>
		LOG_INF("Notifications disabled.");
   11786:	480d      	ldr	r0, [pc, #52]	; (117bc <button_indicate_process+0x44>)
   11788:	2149      	movs	r1, #73	; 0x49
			joy->button_indicate_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
		}
		return BT_GATT_ITER_STOP;
	}
	if (length != 1) {
		LOG_ERR("Unexpected notification value size.");
   1178a:	f018 fc6c 	bl	2a066 <z_log_minimal_printk>
		if (joy->button_indicate_cb) {
   1178e:	69eb      	ldr	r3, [r5, #28]
   11790:	b113      	cbz	r3, 11798 <button_indicate_process+0x20>
			joy->button_indicate_cb(joy, BT_INPUT_RESPONSE_VAL_INVALID);
   11792:	21ff      	movs	r1, #255	; 0xff
   11794:	4630      	mov	r0, r6
   11796:	4798      	blx	r3
		return BT_GATT_ITER_STOP;
   11798:	2000      	movs	r0, #0
		return BT_GATT_ITER_STOP;
	}

	return BT_GATT_ITER_CONTINUE;

}
   1179a:	bd70      	pop	{r4, r5, r6, pc}
	if (length != 1) {
   1179c:	2b01      	cmp	r3, #1
   1179e:	d002      	beq.n	117a6 <button_indicate_process+0x2e>
		LOG_ERR("Unexpected notification value size.");
   117a0:	4807      	ldr	r0, [pc, #28]	; (117c0 <button_indicate_process+0x48>)
   117a2:	2145      	movs	r1, #69	; 0x45
   117a4:	e7f1      	b.n	1178a <button_indicate_process+0x12>
	if (joy->button_indicate_cb) {
   117a6:	69eb      	ldr	r3, [r5, #28]
	button_state = *button_state_p;
   117a8:	7811      	ldrb	r1, [r2, #0]
	joy->button_state = button_state;
   117aa:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	if (joy->button_indicate_cb) {
   117ae:	2b00      	cmp	r3, #0
   117b0:	d0f2      	beq.n	11798 <button_indicate_process+0x20>
		joy->button_indicate_cb(joy, button_state);
   117b2:	4630      	mov	r0, r6
   117b4:	4798      	blx	r3
	return BT_GATT_ITER_CONTINUE;
   117b6:	4620      	mov	r0, r4
   117b8:	e7ef      	b.n	1179a <button_indicate_process+0x22>
   117ba:	bf00      	nop
   117bc:	0002f156 	.word	0x0002f156
   117c0:	0002f173 	.word	0x0002f173

000117c4 <periodic_read_process>:
{
   117c4:	b570      	push	{r4, r5, r6, lr}
   117c6:	4614      	mov	r4, r2
	if (!joy->input_rsp_notify_cb) {
   117c8:	6992      	ldr	r2, [r2, #24]
   117ca:	b922      	cbnz	r2, 117d6 <periodic_read_process+0x12>
		LOG_ERR("No notification callback present");
   117cc:	481b      	ldr	r0, [pc, #108]	; (1183c <periodic_read_process+0x78>)
   117ce:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unexpected read value size.");
   117d0:	f018 fc49 	bl	2a066 <z_log_minimal_printk>
   117d4:	e005      	b.n	117e2 <periodic_read_process+0x1e>
	} else  if (err) {
   117d6:	b301      	cbz	r1, 1181a <periodic_read_process+0x56>
		LOG_ERR("Read value error: %d", err);
   117d8:	460a      	mov	r2, r1
   117da:	4819      	ldr	r0, [pc, #100]	; (11840 <periodic_read_process+0x7c>)
   117dc:	2145      	movs	r1, #69	; 0x45
   117de:	f018 fc42 	bl	2a066 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   117e2:	f3bf 8f5b 	dmb	ish
   117e6:	6925      	ldr	r5, [r4, #16]
   117e8:	f3bf 8f5b 	dmb	ish
	if (interval) {
   117ec:	b19d      	cbz	r5, 11816 <periodic_read_process+0x52>
				K_MSEC(interval));
   117ee:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   117f2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   117f6:	f240 30e7 	movw	r0, #999	; 0x3e7
   117fa:	2100      	movs	r1, #0
   117fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11800:	2300      	movs	r3, #0
   11802:	fbc5 0106 	smlal	r0, r1, r5, r6
   11806:	f7ee fc7b 	bl	100 <__aeabi_uldivmod>
   1180a:	4602      	mov	r2, r0
   1180c:	460b      	mov	r3, r1
		k_work_schedule(&joy->input_rsp_periodic_read.read_work,
   1180e:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
   11812:	f013 fa77 	bl	24d04 <k_work_schedule>
}
   11816:	2000      	movs	r0, #0
   11818:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!data || length != 1) {
   1181a:	b11b      	cbz	r3, 11824 <periodic_read_process+0x60>
   1181c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   11820:	2901      	cmp	r1, #1
   11822:	d002      	beq.n	1182a <periodic_read_process+0x66>
		LOG_ERR("Unexpected read value size.");
   11824:	4807      	ldr	r0, [pc, #28]	; (11844 <periodic_read_process+0x80>)
   11826:	2145      	movs	r1, #69	; 0x45
   11828:	e7d2      	b.n	117d0 <periodic_read_process+0xc>
		input_response = *rsp_data;
   1182a:	6819      	ldr	r1, [r3, #0]
		if (joy->input_response != input_response) {
   1182c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1182e:	4299      	cmp	r1, r3
   11830:	d0d7      	beq.n	117e2 <periodic_read_process+0x1e>
			joy->input_response = input_response;
   11832:	6261      	str	r1, [r4, #36]	; 0x24
			joy->input_rsp_notify_cb(joy, input_response);
   11834:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
   11838:	4790      	blx	r2
   1183a:	e7d2      	b.n	117e2 <periodic_read_process+0x1e>
   1183c:	0002f1d4 	.word	0x0002f1d4
   11840:	0002f1ba 	.word	0x0002f1ba
   11844:	0002f1fa 	.word	0x0002f1fa

00011848 <joybus_input_rsp_value_handler>:
 * @brief Periodic read workqueue handler.
 *
 * @param work Work instance.
 */
static void joybus_input_rsp_value_handler(struct k_work *work)
{
   11848:	b508      	push	{r3, lr}
   1184a:	f3bf 8f5b 	dmb	ish
   1184e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   11850:	f3bf 8f5b 	dmb	ish
   11854:	4601      	mov	r1, r0
	struct bt_joybus_client *joy;

	joy = CONTAINER_OF(work, struct bt_joybus_client,
			     input_rsp_periodic_read.read_work);

	if (!atomic_get(&joy->input_rsp_periodic_read.interval)) {
   11856:	b1e3      	cbz	r3, 11892 <joybus_input_rsp_value_handler+0x4a>
		/* disabled */
		return;
	}

	if (!joy->conn) {
   11858:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1185c:	b928      	cbnz	r0, 1186a <joybus_input_rsp_value_handler+0x22>
	 */
	if (err) {
		LOG_ERR("Periodic Imput Response characteristic read error: %d",
			err);
	}
}
   1185e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("No connection object.");
   11862:	480c      	ldr	r0, [pc, #48]	; (11894 <joybus_input_rsp_value_handler+0x4c>)
   11864:	2145      	movs	r1, #69	; 0x45
   11866:	f018 bbfe 	b.w	2a066 <z_log_minimal_printk>
	joy->input_rsp_periodic_read.params.func = periodic_read_process;
   1186a:	4b0b      	ldr	r3, [pc, #44]	; (11898 <joybus_input_rsp_value_handler+0x50>)
   1186c:	630b      	str	r3, [r1, #48]	; 0x30
	joy->input_rsp_periodic_read.params.handle_count  = 1;
   1186e:	2301      	movs	r3, #1
   11870:	634b      	str	r3, [r1, #52]	; 0x34
	joy->input_rsp_periodic_read.params.single.handle = joy->input_rsp_val_handle;
   11872:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
   11876:	870b      	strh	r3, [r1, #56]	; 0x38
	joy->input_rsp_periodic_read.params.single.offset = 0;
   11878:	2300      	movs	r3, #0
   1187a:	874b      	strh	r3, [r1, #58]	; 0x3a
	err = bt_gatt_read(joy->conn, &joy->input_rsp_periodic_read.params);
   1187c:	3130      	adds	r1, #48	; 0x30
   1187e:	f00a fd93 	bl	1c3a8 <bt_gatt_read>
	if (err) {
   11882:	4602      	mov	r2, r0
   11884:	b128      	cbz	r0, 11892 <joybus_input_rsp_value_handler+0x4a>
}
   11886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Periodic Imput Response characteristic read error: %d",
   1188a:	4804      	ldr	r0, [pc, #16]	; (1189c <joybus_input_rsp_value_handler+0x54>)
   1188c:	2145      	movs	r1, #69	; 0x45
   1188e:	f018 bbea 	b.w	2a066 <z_log_minimal_printk>
}
   11892:	bd08      	pop	{r3, pc}
   11894:	0002f21b 	.word	0x0002f21b
   11898:	000117c5 	.word	0x000117c5
   1189c:	0002f236 	.word	0x0002f236

000118a0 <bt_joybus_client_init>:
	joy->led_state_handle = 0;
}


void bt_joybus_client_init(struct bt_joybus_client *joy)
{
   118a0:	b510      	push	{r4, lr}
	memset(joy, 0, sizeof(*joy));
   118a2:	2100      	movs	r1, #0
{
   118a4:	4604      	mov	r4, r0
	memset(joy, 0, sizeof(*joy));
   118a6:	22c8      	movs	r2, #200	; 0xc8
   118a8:	f019 fbb0 	bl	2b00c <memset>
	joy->input_response = 0;
   118ac:	2300      	movs	r3, #0
   118ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	k_work_init_delayable(&joy->input_rsp_periodic_read.read_work,
   118b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   118b6:	4902      	ldr	r1, [pc, #8]	; (118c0 <bt_joybus_client_init+0x20>)
			      joybus_input_rsp_value_handler);
}
   118b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&joy->input_rsp_periodic_read.read_work,
   118bc:	f013 b99c 	b.w	24bf8 <k_work_init_delayable>
   118c0:	00011849 	.word	0x00011849

000118c4 <bt_joybus_handles_assign>:


int bt_joybus_handles_assign(struct bt_gatt_dm *dm,
				 struct bt_joybus_client *joy)
{
   118c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   118c8:	b0a1      	sub	sp, #132	; 0x84
   118ca:	460c      	mov	r4, r1
   118cc:	4606      	mov	r6, r0
	const struct bt_gatt_dm_attr *gatt_service_attr =
			bt_gatt_dm_service_get(dm);
   118ce:	f018 ffe9 	bl	2a8a4 <bt_gatt_dm_service_get>
	const struct bt_gatt_service_val *gatt_service =
			bt_gatt_dm_attr_service_val(gatt_service_attr);
   118d2:	f018 ffb1 	bl	2a838 <bt_gatt_dm_attr_service_val>
	const struct bt_gatt_dm_attr *gatt_chrc;
	const struct bt_gatt_dm_attr *gatt_desc;
	const struct bt_gatt_chrc *chrc_val;

	if (bt_uuid_cmp(gatt_service->uuid, BT_UUID_JOYBUS)) {
   118d6:	4b9c      	ldr	r3, [pc, #624]	; (11b48 <bt_joybus_handles_assign+0x284>)
   118d8:	f8d0 c000 	ldr.w	ip, [r0]
   118dc:	aa1b      	add	r2, sp, #108	; 0x6c
   118de:	f103 0e10 	add.w	lr, r3, #16
   118e2:	4617      	mov	r7, r2
   118e4:	6818      	ldr	r0, [r3, #0]
   118e6:	6859      	ldr	r1, [r3, #4]
   118e8:	4615      	mov	r5, r2
   118ea:	c503      	stmia	r5!, {r0, r1}
   118ec:	3308      	adds	r3, #8
   118ee:	4573      	cmp	r3, lr
   118f0:	462a      	mov	r2, r5
   118f2:	d1f7      	bne.n	118e4 <bt_joybus_handles_assign+0x20>
   118f4:	781b      	ldrb	r3, [r3, #0]
   118f6:	702b      	strb	r3, [r5, #0]
   118f8:	4639      	mov	r1, r7
   118fa:	4660      	mov	r0, ip
   118fc:	f019 fc0f 	bl	2b11e <bt_uuid_cmp>
   11900:	4605      	mov	r5, r0
   11902:	b128      	cbz	r0, 11910 <bt_joybus_handles_assign+0x4c>
		return -ENOTSUP;
   11904:	f06f 0585 	mvn.w	r5, #133	; 0x85
	joy->led_state_handle = gatt_desc->handle;

	/* Finally - save connection object */
	joy->conn = bt_gatt_dm_conn_get(dm);
	return 0;
}
   11908:	4628      	mov	r0, r5
   1190a:	b021      	add	sp, #132	; 0x84
   1190c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_work_cancel_delayable(&joy->input_rsp_periodic_read.read_work);
   11910:	f104 0030 	add.w	r0, r4, #48	; 0x30
   11914:	f013 fa60 	bl	24dd8 <k_work_cancel_delayable>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11918:	4b8c      	ldr	r3, [pc, #560]	; (11b4c <bt_joybus_handles_assign+0x288>)
	joy->conn = NULL;
   1191a:	6025      	str	r5, [r4, #0]
	joy->input_rsp_read_cb = NULL;
   1191c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
	joy->input_response = 0;
   11920:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
	joy->button_state_handle = 0;
   11924:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11928:	aa02      	add	r2, sp, #8
	joy->input_rsp_notify = false;
   1192a:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
	joy->button_state = 0;
   1192e:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
	joy->led_state_handle = 0;
   11932:	f8a4 50b4 	strh.w	r5, [r4, #180]	; 0xb4
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_INPUT_RESP);
   11936:	f103 0910 	add.w	r9, r3, #16
   1193a:	4696      	mov	lr, r2
   1193c:	6818      	ldr	r0, [r3, #0]
   1193e:	6859      	ldr	r1, [r3, #4]
   11940:	4694      	mov	ip, r2
   11942:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11946:	3308      	adds	r3, #8
   11948:	454b      	cmp	r3, r9
   1194a:	4662      	mov	r2, ip
   1194c:	d1f6      	bne.n	1193c <bt_joybus_handles_assign+0x78>
   1194e:	781b      	ldrb	r3, [r3, #0]
   11950:	f88c 3000 	strb.w	r3, [ip]
   11954:	4671      	mov	r1, lr
   11956:	4630      	mov	r0, r6
   11958:	f002 fd1e 	bl	14398 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   1195c:	4680      	mov	r8, r0
   1195e:	b930      	cbnz	r0, 1196e <bt_joybus_handles_assign+0xaa>
		LOG_ERR("No Input Response characteristic found.");
   11960:	487b      	ldr	r0, [pc, #492]	; (11b50 <bt_joybus_handles_assign+0x28c>)
   11962:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No Input Response characteristic value found.");
   11964:	f018 fb7f 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   11968:	f06f 0515 	mvn.w	r5, #21
   1196c:	e7cc      	b.n	11908 <bt_joybus_handles_assign+0x44>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   1196e:	f018 ff83 	bl	2a878 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11972:	b950      	cbnz	r0, 1198a <bt_joybus_handles_assign+0xc6>
   11974:	4977      	ldr	r1, [pc, #476]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11976:	4878      	ldr	r0, [pc, #480]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11978:	f240 1241 	movw	r2, #321	; 0x141
   1197c:	f018 fb65 	bl	2a04a <assert_print>
   11980:	f240 1141 	movw	r1, #321	; 0x141
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11984:	4873      	ldr	r0, [pc, #460]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11986:	f018 fb59 	bl	2a03c <assert_post_action>
	joy->input_rsp_properties = chrc_val->properties;
   1198a:	7983      	ldrb	r3, [r0, #6]
   1198c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
					    BT_UUID_JOYBUS_INPUT_RESP);
   11990:	f10d 0c1c 	add.w	ip, sp, #28
   11994:	4b6d      	ldr	r3, [pc, #436]	; (11b4c <bt_joybus_handles_assign+0x288>)
   11996:	4662      	mov	r2, ip
   11998:	6818      	ldr	r0, [r3, #0]
   1199a:	6859      	ldr	r1, [r3, #4]
   1199c:	46e6      	mov	lr, ip
   1199e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   119a2:	3308      	adds	r3, #8
   119a4:	454b      	cmp	r3, r9
   119a6:	46f4      	mov	ip, lr
   119a8:	d1f6      	bne.n	11998 <bt_joybus_handles_assign+0xd4>
   119aa:	781b      	ldrb	r3, [r3, #0]
   119ac:	f88e 3000 	strb.w	r3, [lr]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   119b0:	4641      	mov	r1, r8
   119b2:	4630      	mov	r0, r6
   119b4:	f018 ffc5 	bl	2a942 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   119b8:	b910      	cbnz	r0, 119c0 <bt_joybus_handles_assign+0xfc>
		LOG_ERR("No Input Response characteristic value found.");
   119ba:	4868      	ldr	r0, [pc, #416]	; (11b5c <bt_joybus_handles_assign+0x298>)
   119bc:	2145      	movs	r1, #69	; 0x45
   119be:	e7d1      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->input_rsp_val_handle = gatt_desc->handle;
   119c0:	8883      	ldrh	r3, [r0, #4]
   119c2:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   119c6:	2300      	movs	r3, #0
   119c8:	f88d 3000 	strb.w	r3, [sp]
   119cc:	466a      	mov	r2, sp
   119ce:	f642 1302 	movw	r3, #10498	; 0x2902
   119d2:	4641      	mov	r1, r8
   119d4:	4630      	mov	r0, r6
   119d6:	f8ad 3002 	strh.w	r3, [sp, #2]
   119da:	f018 ffb2 	bl	2a942 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   119de:	b9e8      	cbnz	r0, 11a1c <bt_joybus_handles_assign+0x158>
		LOG_INF("No battery CCC descriptor found. Battery service do not supported notification.");
   119e0:	485f      	ldr	r0, [pc, #380]	; (11b60 <bt_joybus_handles_assign+0x29c>)
   119e2:	2149      	movs	r1, #73	; 0x49
   119e4:	f018 fb3f 	bl	2a066 <z_log_minimal_printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_BUTTON);
   119e8:	4b5e      	ldr	r3, [pc, #376]	; (11b64 <bt_joybus_handles_assign+0x2a0>)
   119ea:	aa0c      	add	r2, sp, #48	; 0x30
   119ec:	f103 0910 	add.w	r9, r3, #16
   119f0:	4696      	mov	lr, r2
   119f2:	6818      	ldr	r0, [r3, #0]
   119f4:	6859      	ldr	r1, [r3, #4]
   119f6:	4694      	mov	ip, r2
   119f8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   119fc:	3308      	adds	r3, #8
   119fe:	454b      	cmp	r3, r9
   11a00:	4662      	mov	r2, ip
   11a02:	d1f6      	bne.n	119f2 <bt_joybus_handles_assign+0x12e>
   11a04:	781b      	ldrb	r3, [r3, #0]
   11a06:	f88c 3000 	strb.w	r3, [ip]
   11a0a:	4671      	mov	r1, lr
   11a0c:	4630      	mov	r0, r6
   11a0e:	f002 fcc3 	bl	14398 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11a12:	4680      	mov	r8, r0
   11a14:	b948      	cbnz	r0, 11a2a <bt_joybus_handles_assign+0x166>
		LOG_ERR("No Button characteristic found.");
   11a16:	4854      	ldr	r0, [pc, #336]	; (11b68 <bt_joybus_handles_assign+0x2a4>)
   11a18:	2145      	movs	r1, #69	; 0x45
   11a1a:	e7a3      	b.n	11964 <bt_joybus_handles_assign+0xa0>
		joy->input_rsp_notify = true;
   11a1c:	2301      	movs	r3, #1
   11a1e:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
		joy->input_rsp_ccc_handle = gatt_desc->handle;
   11a22:	8883      	ldrh	r3, [r0, #4]
   11a24:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
   11a28:	e7de      	b.n	119e8 <bt_joybus_handles_assign+0x124>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   11a2a:	f018 ff25 	bl	2a878 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11a2e:	b940      	cbnz	r0, 11a42 <bt_joybus_handles_assign+0x17e>
   11a30:	4948      	ldr	r1, [pc, #288]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11a32:	4849      	ldr	r0, [pc, #292]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11a34:	f240 125d 	movw	r2, #349	; 0x15d
   11a38:	f018 fb07 	bl	2a04a <assert_print>
   11a3c:	f240 115d 	movw	r1, #349	; 0x15d
   11a40:	e7a0      	b.n	11984 <bt_joybus_handles_assign+0xc0>
	joy->button_properties = chrc_val->properties;
   11a42:	7983      	ldrb	r3, [r0, #6]
   11a44:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
					    BT_UUID_JOYBUS_BUTTON);
   11a48:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
   11a4c:	4b45      	ldr	r3, [pc, #276]	; (11b64 <bt_joybus_handles_assign+0x2a0>)
   11a4e:	4662      	mov	r2, ip
   11a50:	6818      	ldr	r0, [r3, #0]
   11a52:	6859      	ldr	r1, [r3, #4]
   11a54:	46e6      	mov	lr, ip
   11a56:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   11a5a:	3308      	adds	r3, #8
   11a5c:	454b      	cmp	r3, r9
   11a5e:	46f4      	mov	ip, lr
   11a60:	d1f6      	bne.n	11a50 <bt_joybus_handles_assign+0x18c>
   11a62:	781b      	ldrb	r3, [r3, #0]
   11a64:	f88e 3000 	strb.w	r3, [lr]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   11a68:	4641      	mov	r1, r8
   11a6a:	4630      	mov	r0, r6
   11a6c:	f018 ff69 	bl	2a942 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11a70:	b910      	cbnz	r0, 11a78 <bt_joybus_handles_assign+0x1b4>
		LOG_ERR("No Button characteristic value found.");
   11a72:	483e      	ldr	r0, [pc, #248]	; (11b6c <bt_joybus_handles_assign+0x2a8>)
   11a74:	2145      	movs	r1, #69	; 0x45
   11a76:	e775      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->button_state_handle = gatt_desc->handle;
   11a78:	8883      	ldrh	r3, [r0, #4]
   11a7a:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	joy->button_indicate_params.value_handle = gatt_desc->handle;
   11a7e:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc, BT_UUID_GATT_CCC);
   11a82:	2300      	movs	r3, #0
   11a84:	f88d 3004 	strb.w	r3, [sp, #4]
   11a88:	aa01      	add	r2, sp, #4
   11a8a:	f642 1302 	movw	r3, #10498	; 0x2902
   11a8e:	4641      	mov	r1, r8
   11a90:	4630      	mov	r0, r6
   11a92:	f8ad 3006 	strh.w	r3, [sp, #6]
   11a96:	f018 ff54 	bl	2a942 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11a9a:	b9e8      	cbnz	r0, 11ad8 <bt_joybus_handles_assign+0x214>
		LOG_INF("No Button CCC descriptor found.");
   11a9c:	4834      	ldr	r0, [pc, #208]	; (11b70 <bt_joybus_handles_assign+0x2ac>)
   11a9e:	2149      	movs	r1, #73	; 0x49
   11aa0:	f018 fae1 	bl	2a066 <z_log_minimal_printk>
	gatt_chrc = bt_gatt_dm_char_by_uuid(dm, BT_UUID_JOYBUS_LED);
   11aa4:	4b33      	ldr	r3, [pc, #204]	; (11b74 <bt_joybus_handles_assign+0x2b0>)
   11aa6:	aa16      	add	r2, sp, #88	; 0x58
   11aa8:	f103 0810 	add.w	r8, r3, #16
   11aac:	4696      	mov	lr, r2
   11aae:	6818      	ldr	r0, [r3, #0]
   11ab0:	6859      	ldr	r1, [r3, #4]
   11ab2:	4694      	mov	ip, r2
   11ab4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11ab8:	3308      	adds	r3, #8
   11aba:	4543      	cmp	r3, r8
   11abc:	4662      	mov	r2, ip
   11abe:	d1f6      	bne.n	11aae <bt_joybus_handles_assign+0x1ea>
   11ac0:	781b      	ldrb	r3, [r3, #0]
   11ac2:	f88c 3000 	strb.w	r3, [ip]
   11ac6:	4671      	mov	r1, lr
   11ac8:	4630      	mov	r0, r6
   11aca:	f002 fc65 	bl	14398 <bt_gatt_dm_char_by_uuid>
	if (!gatt_chrc) {
   11ace:	4681      	mov	r9, r0
   11ad0:	b958      	cbnz	r0, 11aea <bt_joybus_handles_assign+0x226>
		LOG_ERR("No LED characteristic found.");
   11ad2:	4829      	ldr	r0, [pc, #164]	; (11b78 <bt_joybus_handles_assign+0x2b4>)
   11ad4:	2145      	movs	r1, #69	; 0x45
   11ad6:	e745      	b.n	11964 <bt_joybus_handles_assign+0xa0>
		joy->button_indicate = true;
   11ad8:	2301      	movs	r3, #1
   11ada:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		joy->button_ccc_handle = gatt_desc->handle;
   11ade:	8883      	ldrh	r3, [r0, #4]
   11ae0:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		joy->button_indicate_params.ccc_handle = gatt_desc->handle;
   11ae4:	f8a4 309a 	strh.w	r3, [r4, #154]	; 0x9a
   11ae8:	e7dc      	b.n	11aa4 <bt_joybus_handles_assign+0x1e0>
	chrc_val = bt_gatt_dm_attr_chrc_val(gatt_chrc);
   11aea:	f018 fec5 	bl	2a878 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(chrc_val); /* This is internal function and it has to
   11aee:	b940      	cbnz	r0, 11b02 <bt_joybus_handles_assign+0x23e>
   11af0:	4918      	ldr	r1, [pc, #96]	; (11b54 <bt_joybus_handles_assign+0x290>)
   11af2:	4819      	ldr	r0, [pc, #100]	; (11b58 <bt_joybus_handles_assign+0x294>)
   11af4:	f44f 72be 	mov.w	r2, #380	; 0x17c
   11af8:	f018 faa7 	bl	2a04a <assert_print>
   11afc:	f44f 71be 	mov.w	r1, #380	; 0x17c
   11b00:	e740      	b.n	11984 <bt_joybus_handles_assign+0xc0>
	joy->led_properties = chrc_val->properties;
   11b02:	7983      	ldrb	r3, [r0, #6]
   11b04:	f884 30b6 	strb.w	r3, [r4, #182]	; 0xb6
					    BT_UUID_JOYBUS_LED);
   11b08:	4b1a      	ldr	r3, [pc, #104]	; (11b74 <bt_joybus_handles_assign+0x2b0>)
   11b0a:	463a      	mov	r2, r7
   11b0c:	6818      	ldr	r0, [r3, #0]
   11b0e:	6859      	ldr	r1, [r3, #4]
   11b10:	4694      	mov	ip, r2
   11b12:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   11b16:	3308      	adds	r3, #8
   11b18:	4543      	cmp	r3, r8
   11b1a:	4662      	mov	r2, ip
   11b1c:	d1f6      	bne.n	11b0c <bt_joybus_handles_assign+0x248>
   11b1e:	781b      	ldrb	r3, [r3, #0]
   11b20:	f88c 3000 	strb.w	r3, [ip]
	gatt_desc = bt_gatt_dm_desc_by_uuid(dm, gatt_chrc,
   11b24:	463a      	mov	r2, r7
   11b26:	4649      	mov	r1, r9
   11b28:	4630      	mov	r0, r6
   11b2a:	f018 ff0a 	bl	2a942 <bt_gatt_dm_desc_by_uuid>
	if (!gatt_desc) {
   11b2e:	b910      	cbnz	r0, 11b36 <bt_joybus_handles_assign+0x272>
		LOG_ERR("No LED characteristic value found.");
   11b30:	4812      	ldr	r0, [pc, #72]	; (11b7c <bt_joybus_handles_assign+0x2b8>)
   11b32:	2145      	movs	r1, #69	; 0x45
   11b34:	e716      	b.n	11964 <bt_joybus_handles_assign+0xa0>
	joy->led_state_handle = gatt_desc->handle;
   11b36:	8883      	ldrh	r3, [r0, #4]
   11b38:	f8a4 30b4 	strh.w	r3, [r4, #180]	; 0xb4
	joy->conn = bt_gatt_dm_conn_get(dm);
   11b3c:	4630      	mov	r0, r6
   11b3e:	f018 feaf 	bl	2a8a0 <bt_gatt_dm_conn_get>
   11b42:	6020      	str	r0, [r4, #0]
	return 0;
   11b44:	e6e0      	b.n	11908 <bt_joybus_handles_assign+0x44>
   11b46:	bf00      	nop
   11b48:	0002e6fc 	.word	0x0002e6fc
   11b4c:	0002e70d 	.word	0x0002e70d
   11b50:	0002f271 	.word	0x0002f271
   11b54:	0002f29e 	.word	0x0002f29e
   11b58:	0002f2b5 	.word	0x0002f2b5
   11b5c:	0002f2cd 	.word	0x0002f2cd
   11b60:	0002f300 	.word	0x0002f300
   11b64:	0002e71e 	.word	0x0002e71e
   11b68:	0002f355 	.word	0x0002f355
   11b6c:	0002f37a 	.word	0x0002f37a
   11b70:	0002f3a5 	.word	0x0002f3a5
   11b74:	0002e72f 	.word	0x0002e72f
   11b78:	0002f3ca 	.word	0x0002f3ca
   11b7c:	0002f3ec 	.word	0x0002f3ec

00011b80 <bt_joybus_subscribe_input_rsp>:

int bt_joybus_subscribe_input_rsp(struct bt_joybus_client *joy,
				   bt_input_rsp_notify_cb func)
{
   11b80:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!joy || !func) {
   11b82:	4604      	mov	r4, r0
   11b84:	b360      	cbz	r0, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
   11b86:	b359      	cbz	r1, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
		return -EINVAL;
	}
	if (!joy->conn) {
   11b88:	6803      	ldr	r3, [r0, #0]
   11b8a:	b34b      	cbz	r3, 11be0 <bt_joybus_subscribe_input_rsp+0x60>
		return -EINVAL;
	}
	if (!(joy->input_rsp_properties & BT_GATT_CHRC_NOTIFY)) {
   11b8c:	f890 3089 	ldrb.w	r3, [r0, #137]	; 0x89
   11b90:	06db      	lsls	r3, r3, #27
   11b92:	d528      	bpl.n	11be6 <bt_joybus_subscribe_input_rsp+0x66>
		return -ENOTSUP;
	}
	if (joy->input_rsp_notify_cb) {
   11b94:	6f86      	ldr	r6, [r0, #120]	; 0x78
   11b96:	bb4e      	cbnz	r6, 11bec <bt_joybus_subscribe_input_rsp+0x6c>
		return -EALREADY;
	}

	joy->input_rsp_notify_cb = func;

	joy->input_rsp_notify_params.notify = notify_process;
   11b98:	4b16      	ldr	r3, [pc, #88]	; (11bf4 <bt_joybus_subscribe_input_rsp+0x74>)
   11b9a:	6043      	str	r3, [r0, #4]
	joy->input_rsp_notify_params.value = BT_GATT_CCC_NOTIFY;
   11b9c:	2301      	movs	r3, #1
   11b9e:	8283      	strh	r3, [r0, #20]
	joy->input_rsp_notify_params.value_handle = joy->input_rsp_val_handle;
   11ba0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   11ba4:	6103      	str	r3, [r0, #16]
	joy->input_rsp_notify_cb = func;
   11ba6:	6781      	str	r1, [r0, #120]	; 0x78
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11ba8:	f100 0318 	add.w	r3, r0, #24
   11bac:	f3bf 8f5b 	dmb	ish
   11bb0:	e853 1f00 	ldrex	r1, [r3]
   11bb4:	f041 0101 	orr.w	r1, r1, #1
   11bb8:	e843 1200 	strex	r2, r1, [r3]
   11bbc:	2a00      	cmp	r2, #0
   11bbe:	d1f7      	bne.n	11bb0 <bt_joybus_subscribe_input_rsp+0x30>
   11bc0:	f3bf 8f5b 	dmb	ish
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		joy->input_rsp_notify_params.value_handle,
		joy->input_rsp_notify_params.ccc_handle);
	err = bt_gatt_subscribe(joy->conn, &joy->input_rsp_notify_params);
   11bc4:	1d21      	adds	r1, r4, #4
   11bc6:	6820      	ldr	r0, [r4, #0]
   11bc8:	f00a fd7e 	bl	1c6c8 <bt_gatt_subscribe>
	if (err) {
   11bcc:	4605      	mov	r5, r0
   11bce:	b128      	cbz	r0, 11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		LOG_ERR("Report notification subscribe error: %d.", err);
   11bd0:	4602      	mov	r2, r0
   11bd2:	2145      	movs	r1, #69	; 0x45
   11bd4:	4808      	ldr	r0, [pc, #32]	; (11bf8 <bt_joybus_subscribe_input_rsp+0x78>)
   11bd6:	f018 fa46 	bl	2a066 <z_log_minimal_printk>
		joy->input_rsp_notify_cb = NULL;
   11bda:	67a6      	str	r6, [r4, #120]	; 0x78
		return err;
	}
	LOG_DBG("Report subscribed.");
	return err;
}
   11bdc:	4628      	mov	r0, r5
   11bde:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11be0:	f06f 0515 	mvn.w	r5, #21
   11be4:	e7fa      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		return -ENOTSUP;
   11be6:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11bea:	e7f7      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
		return -EALREADY;
   11bec:	f06f 0577 	mvn.w	r5, #119	; 0x77
   11bf0:	e7f4      	b.n	11bdc <bt_joybus_subscribe_input_rsp+0x5c>
   11bf2:	bf00      	nop
   11bf4:	00011731 	.word	0x00011731
   11bf8:	0002f414 	.word	0x0002f414

00011bfc <bt_joy_button_enable_indicate>:
	joy->input_rsp_notify_cb = NULL;
	return err;
}

int bt_joy_button_enable_indicate(struct bt_joybus_client *joy, bt_button_indicate_cb func)
{
   11bfc:	b570      	push	{r4, r5, r6, lr}
	
	int err;

	if (!joy || !func) {
   11bfe:	4604      	mov	r4, r0
   11c00:	b398      	cbz	r0, 11c6a <bt_joy_button_enable_indicate+0x6e>
   11c02:	b391      	cbz	r1, 11c6a <bt_joy_button_enable_indicate+0x6e>
		return -EINVAL;
	}
	if (!joy->conn) {
   11c04:	6803      	ldr	r3, [r0, #0]
   11c06:	b383      	cbz	r3, 11c6a <bt_joy_button_enable_indicate+0x6e>
		return -EINVAL;
	}
	if (!(joy->button_properties & BT_GATT_CHRC_INDICATE)) {
   11c08:	f890 30b2 	ldrb.w	r3, [r0, #178]	; 0xb2
   11c0c:	069b      	lsls	r3, r3, #26
   11c0e:	d52f      	bpl.n	11c70 <bt_joy_button_enable_indicate+0x74>
		return -ENOTSUP;
	}
	if (joy->button_indicate_cb) {
   11c10:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
   11c14:	bb7e      	cbnz	r6, 11c76 <bt_joy_button_enable_indicate+0x7a>
		return -EALREADY;
	}

	joy->button_indicate_cb = func;
	joy->button_indicate_params.value = BT_GATT_CCC_INDICATE;
   11c16:	2302      	movs	r3, #2
   11c18:	f8a0 309c 	strh.w	r3, [r0, #156]	; 0x9c
	joy->button_indicate_params.value_handle = joy->button_state_handle;
   11c1c:	f8d0 30ac 	ldr.w	r3, [r0, #172]	; 0xac
   11c20:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
	joy->button_indicate_params.ccc_handle = joy->button_ccc_handle;
	joy->button_indicate_params.notify = button_indicate_process;
   11c24:	4b15      	ldr	r3, [pc, #84]	; (11c7c <bt_joy_button_enable_indicate+0x80>)
   11c26:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
	joy->button_indicate_cb = func;
   11c2a:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
   11c2e:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
   11c32:	f3bf 8f5b 	dmb	ish
   11c36:	e853 1f00 	ldrex	r1, [r3]
   11c3a:	f041 0101 	orr.w	r1, r1, #1
   11c3e:	e843 1200 	strex	r2, r1, [r3]
   11c42:	2a00      	cmp	r2, #0
   11c44:	d1f7      	bne.n	11c36 <bt_joy_button_enable_indicate+0x3a>
   11c46:	f3bf 8f5b 	dmb	ish
		       BT_GATT_SUBSCRIBE_FLAG_VOLATILE);

	LOG_DBG("Subscribe: val: %u, ccc: %u",
		joy->button_indicate_params.value_handle,
		joy->button_indicate_params.ccc_handle);
	err = bt_gatt_subscribe(joy->conn, &joy->button_indicate_params);
   11c4a:	f104 018c 	add.w	r1, r4, #140	; 0x8c
   11c4e:	6820      	ldr	r0, [r4, #0]
   11c50:	f00a fd3a 	bl	1c6c8 <bt_gatt_subscribe>
	if (err) {
   11c54:	4605      	mov	r5, r0
   11c56:	b130      	cbz	r0, 11c66 <bt_joy_button_enable_indicate+0x6a>
		LOG_ERR("Report indication subscribe error: %d.", err);
   11c58:	4602      	mov	r2, r0
   11c5a:	2145      	movs	r1, #69	; 0x45
   11c5c:	4808      	ldr	r0, [pc, #32]	; (11c80 <bt_joy_button_enable_indicate+0x84>)
   11c5e:	f018 fa02 	bl	2a066 <z_log_minimal_printk>
		joy->button_indicate_cb = NULL;
   11c62:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
	}
	LOG_DBG("Report subscribed.");
	return err;


}
   11c66:	4628      	mov	r0, r5
   11c68:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   11c6a:	f06f 0515 	mvn.w	r5, #21
   11c6e:	e7fa      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
		return -ENOTSUP;
   11c70:	f06f 0585 	mvn.w	r5, #133	; 0x85
   11c74:	e7f7      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
		return -EALREADY;
   11c76:	f06f 0577 	mvn.w	r5, #119	; 0x77
   11c7a:	e7f4      	b.n	11c66 <bt_joy_button_enable_indicate+0x6a>
   11c7c:	00011779 	.word	0x00011779
   11c80:	0002f442 	.word	0x0002f442

00011c84 <joybus_led_write>:
void led_write_cb(struct bt_conn *conn, uint8_t err,
				     struct bt_gatt_write_params *params){
	//Do nothing
}

void joybus_led_write(struct bt_joybus_client *joy, uint32_t led_state){
   11c84:	b507      	push	{r0, r1, r2, lr}
	
	int err;

	joy->led_write_params.func = led_write_cb;
   11c86:	4b11      	ldr	r3, [pc, #68]	; (11ccc <joybus_led_write+0x48>)
   11c88:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	joy->led_write_params.handle = joy->led_state_handle;
   11c8c:	f8b0 30b4 	ldrh.w	r3, [r0, #180]	; 0xb4
   11c90:	f8a0 30bc 	strh.w	r3, [r0, #188]	; 0xbc
	joy->led_write_params.data = &led_state;
   11c94:	ab01      	add	r3, sp, #4
   11c96:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	joy->led_write_params.length = 1;
   11c9a:	2301      	movs	r3, #1
   11c9c:	f8a0 30c4 	strh.w	r3, [r0, #196]	; 0xc4
	joy->led_write_params.offset = 0;
   11ca0:	2300      	movs	r3, #0
void joybus_led_write(struct bt_joybus_client *joy, uint32_t led_state){
   11ca2:	9101      	str	r1, [sp, #4]
	joy->led_write_params.offset = 0;
   11ca4:	f8a0 30be 	strh.w	r3, [r0, #190]	; 0xbe

	err = bt_gatt_write(joy->conn, &joy->led_write_params);
   11ca8:	f100 01b8 	add.w	r1, r0, #184	; 0xb8
   11cac:	6800      	ldr	r0, [r0, #0]
   11cae:	f00a fc5b 	bl	1c568 <bt_gatt_write>
	if(err){
   11cb2:	4602      	mov	r2, r0
   11cb4:	b130      	cbz	r0, 11cc4 <joybus_led_write+0x40>
		LOG_ERR("Failed to write to LED Characteristic (err %d)", err);
   11cb6:	4806      	ldr	r0, [pc, #24]	; (11cd0 <joybus_led_write+0x4c>)
   11cb8:	2145      	movs	r1, #69	; 0x45
	}
	else {
		LOG_INF("Sent LED GATT write: %d", led_state);
   11cba:	f018 f9d4 	bl	2a066 <z_log_minimal_printk>
	}
}
   11cbe:	b003      	add	sp, #12
   11cc0:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("Sent LED GATT write: %d", led_state);
   11cc4:	9a01      	ldr	r2, [sp, #4]
   11cc6:	4803      	ldr	r0, [pc, #12]	; (11cd4 <joybus_led_write+0x50>)
   11cc8:	2149      	movs	r1, #73	; 0x49
   11cca:	e7f6      	b.n	11cba <joybus_led_write+0x36>
   11ccc:	00029ab5 	.word	0x00029ab5
   11cd0:	0002f46e 	.word	0x0002f46e
   11cd4:	0002f4a2 	.word	0x0002f4a2

00011cd8 <discovery_error_found_cb>:

static void discovery_error_found_cb(struct bt_conn *conn,
				     int err,
				     void *context)
{
	printk("The discovery procedure failed with %d\n", err);
   11cd8:	4801      	ldr	r0, [pc, #4]	; (11ce0 <discovery_error_found_cb+0x8>)
   11cda:	f017 bfae 	b.w	29c3a <printk>
   11cde:	bf00      	nop
   11ce0:	0002f4cd 	.word	0x0002f4cd

00011ce4 <discovery_service_not_found_cb>:
	printk("The service could not be found during the discovery\n");
   11ce4:	4801      	ldr	r0, [pc, #4]	; (11cec <discovery_service_not_found_cb+0x8>)
   11ce6:	f017 bfa8 	b.w	29c3a <printk>
   11cea:	bf00      	nop
   11cec:	0002f4f5 	.word	0x0002f4f5

00011cf0 <scan_connecting_error>:
	printk("Connecting failed\n");
   11cf0:	4801      	ldr	r0, [pc, #4]	; (11cf8 <scan_connecting_error+0x8>)
   11cf2:	f017 bfa2 	b.w	29c3a <printk>
   11cf6:	bf00      	nop
   11cf8:	0002f52a 	.word	0x0002f52a

00011cfc <discovery_completed_cb>:
{
   11cfc:	b510      	push	{r4, lr}
   11cfe:	4604      	mov	r4, r0
	printk("The discovery procedure succeeded\n");
   11d00:	481b      	ldr	r0, [pc, #108]	; (11d70 <discovery_completed_cb+0x74>)
   11d02:	f017 ff9a 	bl	29c3a <printk>
	err = bt_joybus_handles_assign(dm, &joy);
   11d06:	491b      	ldr	r1, [pc, #108]	; (11d74 <discovery_completed_cb+0x78>)
   11d08:	4620      	mov	r0, r4
   11d0a:	f7ff fddb 	bl	118c4 <bt_joybus_handles_assign>
	if (err) {
   11d0e:	4601      	mov	r1, r0
   11d10:	b110      	cbz	r0, 11d18 <discovery_completed_cb+0x1c>
		printk("Could not init JOY client object, error: %d\n", err);
   11d12:	4819      	ldr	r0, [pc, #100]	; (11d78 <discovery_completed_cb+0x7c>)
   11d14:	f017 ff91 	bl	29c3a <printk>
 * @retval true If notifications are supported.
 *              Otherwise, @c false is returned.
 */
static inline bool bt_joy_input_rsp_notify_supported(struct bt_joybus_client *joy)
{
	return joy->input_rsp_notify;
   11d18:	4816      	ldr	r0, [pc, #88]	; (11d74 <discovery_completed_cb+0x78>)
	if (bt_joy_input_rsp_notify_supported(&joy)) {
   11d1a:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
   11d1e:	b1d3      	cbz	r3, 11d56 <discovery_completed_cb+0x5a>
		err = bt_joybus_subscribe_input_rsp(&joy,
   11d20:	4916      	ldr	r1, [pc, #88]	; (11d7c <discovery_completed_cb+0x80>)
   11d22:	f7ff ff2d 	bl	11b80 <bt_joybus_subscribe_input_rsp>
		if (err) {
   11d26:	4601      	mov	r1, r0
   11d28:	b110      	cbz	r0, 11d30 <discovery_completed_cb+0x34>
			printk("Cannot subscribe to input_response notification "
   11d2a:	4815      	ldr	r0, [pc, #84]	; (11d80 <discovery_completed_cb+0x84>)
   11d2c:	f017 ff85 	bl	29c3a <printk>
	err = bt_joy_button_enable_indicate(&joy, app_button_indicated_cb);
   11d30:	4914      	ldr	r1, [pc, #80]	; (11d84 <discovery_completed_cb+0x88>)
   11d32:	4810      	ldr	r0, [pc, #64]	; (11d74 <discovery_completed_cb+0x78>)
   11d34:	f7ff ff62 	bl	11bfc <bt_joy_button_enable_indicate>
	if (err) {
   11d38:	4601      	mov	r1, r0
   11d3a:	b110      	cbz	r0, 11d42 <discovery_completed_cb+0x46>
		printk("Cannot subscribe to button indications (err: %d)\n", err);
   11d3c:	4812      	ldr	r0, [pc, #72]	; (11d88 <discovery_completed_cb+0x8c>)
   11d3e:	f017 ff7c 	bl	29c3a <printk>
	err = bt_gatt_dm_data_release(dm);
   11d42:	4620      	mov	r0, r4
   11d44:	f018 fe0f 	bl	2a966 <bt_gatt_dm_data_release>
	if (err) {
   11d48:	4601      	mov	r1, r0
   11d4a:	b178      	cbz	r0, 11d6c <discovery_completed_cb+0x70>
}
   11d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Could not release the discovery data, error "
   11d50:	480e      	ldr	r0, [pc, #56]	; (11d8c <discovery_completed_cb+0x90>)
   11d52:	f017 bf72 	b.w	29c3a <printk>
		err = input_rsp_start_periodic_read(
   11d56:	4a0e      	ldr	r2, [pc, #56]	; (11d90 <discovery_completed_cb+0x94>)
   11d58:	f242 7110 	movw	r1, #10000	; 0x2710
   11d5c:	f017 fead 	bl	29aba <input_rsp_start_periodic_read>
		if (err) {
   11d60:	2800      	cmp	r0, #0
   11d62:	d0e5      	beq.n	11d30 <discovery_completed_cb+0x34>
			printk("Could not start periodic read of JOY value\n");
   11d64:	480b      	ldr	r0, [pc, #44]	; (11d94 <discovery_completed_cb+0x98>)
   11d66:	f017 ff68 	bl	29c3a <printk>
   11d6a:	e7e1      	b.n	11d30 <discovery_completed_cb+0x34>
}
   11d6c:	bd10      	pop	{r4, pc}
   11d6e:	bf00      	nop
   11d70:	0002f53d 	.word	0x0002f53d
   11d74:	20001948 	.word	0x20001948
   11d78:	0002f560 	.word	0x0002f560
   11d7c:	00012019 	.word	0x00012019
   11d80:	0002f58d 	.word	0x0002f58d
   11d84:	00011fa9 	.word	0x00011fa9
   11d88:	0002f5f4 	.word	0x0002f5f4
   11d8c:	0002f626 	.word	0x0002f626
   11d90:	00011fe1 	.word	0x00011fe1
   11d94:	0002f5c8 	.word	0x0002f5c8

00011d98 <scan_connecting>:
{
   11d98:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   11d9a:	4608      	mov	r0, r1
   11d9c:	f006 fc4c 	bl	18638 <bt_conn_ref>
   11da0:	4b01      	ldr	r3, [pc, #4]	; (11da8 <scan_connecting+0x10>)
   11da2:	6018      	str	r0, [r3, #0]
}
   11da4:	bd08      	pop	{r3, pc}
   11da6:	bf00      	nop
   11da8:	200029b4 	.word	0x200029b4

00011dac <offload_function>:
		if (led_write_state & KEY_READVAL_MASK) {
   11dac:	4b04      	ldr	r3, [pc, #16]	; (11dc0 <offload_function+0x14>)
			joybus_led_write(&joy, 0);
   11dae:	4805      	ldr	r0, [pc, #20]	; (11dc4 <offload_function+0x18>)
		if (led_write_state & KEY_READVAL_MASK) {
   11db0:	6819      	ldr	r1, [r3, #0]
   11db2:	f011 0101 	ands.w	r1, r1, #1
			joybus_led_write(&joy, 0x0001);
   11db6:	bf18      	it	ne
   11db8:	2101      	movne	r1, #1
			joybus_led_write(&joy, 0);
   11dba:	f7ff bf63 	b.w	11c84 <joybus_led_write>
   11dbe:	bf00      	nop
   11dc0:	2000053c 	.word	0x2000053c
   11dc4:	20001948 	.word	0x20001948

00011dc8 <button_handler>:
	}
}


static void button_handler(uint32_t button_state, uint32_t has_changed)
{
   11dc8:	b538      	push	{r3, r4, r5, lr}
   11dca:	4604      	mov	r4, r0
	if(bt_joybus_conn(&joy) != default_conn){
   11dcc:	480a      	ldr	r0, [pc, #40]	; (11df8 <button_handler+0x30>)
{
   11dce:	460d      	mov	r5, r1
	if(bt_joybus_conn(&joy) != default_conn){
   11dd0:	f017 fe71 	bl	29ab6 <bt_joybus_conn>
   11dd4:	4b09      	ldr	r3, [pc, #36]	; (11dfc <button_handler+0x34>)
   11dd6:	681b      	ldr	r3, [r3, #0]
   11dd8:	4283      	cmp	r3, r0
   11dda:	d004      	beq.n	11de6 <button_handler+0x1e>
	}
	
	led_write_state = button_state & has_changed;

	k_work_submit_to_queue(&offload_work_q, &my_work.work);
}
   11ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printk("Not connected, cannot write to LED.\n");
   11de0:	4807      	ldr	r0, [pc, #28]	; (11e00 <button_handler+0x38>)
   11de2:	f017 bf2a 	b.w	29c3a <printk>
	led_write_state = button_state & has_changed;
   11de6:	4b07      	ldr	r3, [pc, #28]	; (11e04 <button_handler+0x3c>)
	k_work_submit_to_queue(&offload_work_q, &my_work.work);
   11de8:	4907      	ldr	r1, [pc, #28]	; (11e08 <button_handler+0x40>)
   11dea:	4808      	ldr	r0, [pc, #32]	; (11e0c <button_handler+0x44>)
	led_write_state = button_state & has_changed;
   11dec:	402c      	ands	r4, r5
   11dee:	601c      	str	r4, [r3, #0]
}
   11df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_submit_to_queue(&offload_work_q, &my_work.work);
   11df4:	f01c b840 	b.w	2de78 <k_work_submit_to_queue>
   11df8:	20001948 	.word	0x20001948
   11dfc:	200029b4 	.word	0x200029b4
   11e00:	0002f65c 	.word	0x0002f65c
   11e04:	2000053c 	.word	0x2000053c
   11e08:	20002988 	.word	0x20002988
   11e0c:	20001a10 	.word	0x20001a10

00011e10 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11e10:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11e12:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11e14:	b08a      	sub	sp, #40	; 0x28
   11e16:	4604      	mov	r4, r0
   11e18:	460e      	mov	r6, r1
   11e1a:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11e1c:	2b03      	cmp	r3, #3
   11e1e:	d820      	bhi.n	11e62 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11e20:	e8df f003 	tbb	[pc, r3]
   11e24:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11e28:	4911      	ldr	r1, [pc, #68]	; (11e70 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11e2a:	4628      	mov	r0, r5
   11e2c:	f019 f882 	bl	2af34 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11e30:	9505      	str	r5, [sp, #20]
   11e32:	7863      	ldrb	r3, [r4, #1]
   11e34:	9304      	str	r3, [sp, #16]
   11e36:	78a3      	ldrb	r3, [r4, #2]
   11e38:	9303      	str	r3, [sp, #12]
   11e3a:	78e3      	ldrb	r3, [r4, #3]
   11e3c:	9302      	str	r3, [sp, #8]
   11e3e:	7923      	ldrb	r3, [r4, #4]
   11e40:	9301      	str	r3, [sp, #4]
   11e42:	7963      	ldrb	r3, [r4, #5]
   11e44:	9300      	str	r3, [sp, #0]
   11e46:	79a3      	ldrb	r3, [r4, #6]
   11e48:	4a0a      	ldr	r2, [pc, #40]	; (11e74 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11e4a:	211e      	movs	r1, #30
   11e4c:	4630      	mov	r0, r6
   11e4e:	f017 ff01 	bl	29c54 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11e52:	b00a      	add	sp, #40	; 0x28
   11e54:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11e56:	4908      	ldr	r1, [pc, #32]	; (11e78 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11e58:	e7e7      	b.n	11e2a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11e5a:	4908      	ldr	r1, [pc, #32]	; (11e7c <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11e5c:	e7e5      	b.n	11e2a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11e5e:	4908      	ldr	r1, [pc, #32]	; (11e80 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11e60:	e7e3      	b.n	11e2a <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11e62:	4a08      	ldr	r2, [pc, #32]	; (11e84 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11e64:	210a      	movs	r1, #10
   11e66:	4628      	mov	r0, r5
   11e68:	f017 fef4 	bl	29c54 <snprintk>
		break;
   11e6c:	e7e0      	b.n	11e30 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11e6e:	bf00      	nop
   11e70:	0002f681 	.word	0x0002f681
   11e74:	0002f6aa 	.word	0x0002f6aa
   11e78:	0002f688 	.word	0x0002f688
   11e7c:	0002f68f 	.word	0x0002f68f
   11e80:	0002f699 	.word	0x0002f699
   11e84:	0002f6a3 	.word	0x0002f6a3

00011e88 <disconnected>:
{
   11e88:	b530      	push	{r4, r5, lr}
   11e8a:	b089      	sub	sp, #36	; 0x24
   11e8c:	460d      	mov	r5, r1
   11e8e:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11e90:	f019 fbd6 	bl	2b640 <bt_conn_get_dst>
   11e94:	4669      	mov	r1, sp
   11e96:	f7ff ffbb 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11e9a:	462a      	mov	r2, r5
	if (default_conn != conn) {
   11e9c:	4d0a      	ldr	r5, [pc, #40]	; (11ec8 <disconnected+0x40>)
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   11e9e:	480b      	ldr	r0, [pc, #44]	; (11ecc <disconnected+0x44>)
   11ea0:	4669      	mov	r1, sp
   11ea2:	f017 feca 	bl	29c3a <printk>
	if (default_conn != conn) {
   11ea6:	6828      	ldr	r0, [r5, #0]
   11ea8:	42a0      	cmp	r0, r4
   11eaa:	d10b      	bne.n	11ec4 <disconnected+0x3c>
	bt_conn_unref(default_conn);
   11eac:	f006 fbf0 	bl	18690 <bt_conn_unref>
	default_conn = NULL;
   11eb0:	2300      	movs	r3, #0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11eb2:	2001      	movs	r0, #1
	default_conn = NULL;
   11eb4:	602b      	str	r3, [r5, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11eb6:	f002 fcf1 	bl	1489c <bt_scan_start>
	if (err) {
   11eba:	4601      	mov	r1, r0
   11ebc:	b110      	cbz	r0, 11ec4 <disconnected+0x3c>
		printk("Scanning failed to start (err %d)\n", err);
   11ebe:	4804      	ldr	r0, [pc, #16]	; (11ed0 <disconnected+0x48>)
   11ec0:	f017 febb 	bl	29c3a <printk>
}
   11ec4:	b009      	add	sp, #36	; 0x24
   11ec6:	bd30      	pop	{r4, r5, pc}
   11ec8:	200029b4 	.word	0x200029b4
   11ecc:	0002f6cd 	.word	0x0002f6cd
   11ed0:	0002f6eb 	.word	0x0002f6eb

00011ed4 <scan_filter_match>:
{
   11ed4:	b510      	push	{r4, lr}
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11ed6:	6803      	ldr	r3, [r0, #0]
{
   11ed8:	b088      	sub	sp, #32
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11eda:	6818      	ldr	r0, [r3, #0]
   11edc:	4669      	mov	r1, sp
{
   11ede:	4614      	mov	r4, r2
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   11ee0:	f7ff ff96 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Filters matched. Address: %s connectable: %s\n",
   11ee4:	4b05      	ldr	r3, [pc, #20]	; (11efc <scan_filter_match+0x28>)
   11ee6:	4a06      	ldr	r2, [pc, #24]	; (11f00 <scan_filter_match+0x2c>)
   11ee8:	4806      	ldr	r0, [pc, #24]	; (11f04 <scan_filter_match+0x30>)
   11eea:	2c00      	cmp	r4, #0
   11eec:	bf18      	it	ne
   11eee:	461a      	movne	r2, r3
   11ef0:	4669      	mov	r1, sp
   11ef2:	f017 fea2 	bl	29c3a <printk>
}
   11ef6:	b008      	add	sp, #32
   11ef8:	bd10      	pop	{r4, pc}
   11efa:	bf00      	nop
   11efc:	0002f70e 	.word	0x0002f70e
   11f00:	0002f712 	.word	0x0002f712
   11f04:	0002f715 	.word	0x0002f715

00011f08 <connected>:
{
   11f08:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f0a:	b08f      	sub	sp, #60	; 0x3c
   11f0c:	460d      	mov	r5, r1
   11f0e:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11f10:	f019 fb96 	bl	2b640 <bt_conn_get_dst>
   11f14:	a906      	add	r1, sp, #24
   11f16:	f7ff ff7b 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
	if (conn_err) {
   11f1a:	4e1c      	ldr	r6, [pc, #112]	; (11f8c <connected+0x84>)
   11f1c:	b1ad      	cbz	r5, 11f4a <connected+0x42>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   11f1e:	481c      	ldr	r0, [pc, #112]	; (11f90 <connected+0x88>)
   11f20:	462a      	mov	r2, r5
   11f22:	a906      	add	r1, sp, #24
   11f24:	f017 fe89 	bl	29c3a <printk>
		if (conn == default_conn) {
   11f28:	6830      	ldr	r0, [r6, #0]
   11f2a:	42a0      	cmp	r0, r4
   11f2c:	d10b      	bne.n	11f46 <connected+0x3e>
			bt_conn_unref(default_conn);
   11f2e:	f006 fbaf 	bl	18690 <bt_conn_unref>
			default_conn = NULL;
   11f32:	2300      	movs	r3, #0
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11f34:	2001      	movs	r0, #1
			default_conn = NULL;
   11f36:	6033      	str	r3, [r6, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11f38:	f002 fcb0 	bl	1489c <bt_scan_start>
			if (err) {
   11f3c:	4601      	mov	r1, r0
   11f3e:	b110      	cbz	r0, 11f46 <connected+0x3e>
				printk("Scanning failed to start (err %d)\n",
   11f40:	4814      	ldr	r0, [pc, #80]	; (11f94 <connected+0x8c>)
		printk("Could not start the discovery procedure, error "
   11f42:	f017 fe7a 	bl	29c3a <printk>
}
   11f46:	b00f      	add	sp, #60	; 0x3c
   11f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Connected: %s - starting discovery...\n", addr);
   11f4a:	4813      	ldr	r0, [pc, #76]	; (11f98 <connected+0x90>)
   11f4c:	a906      	add	r1, sp, #24
   11f4e:	f017 fe74 	bl	29c3a <printk>
	if (conn != default_conn) {
   11f52:	6833      	ldr	r3, [r6, #0]
   11f54:	429c      	cmp	r4, r3
   11f56:	d1f6      	bne.n	11f46 <connected+0x3e>
	err = bt_gatt_dm_start(conn, BT_UUID_JOYBUS, &discovery_cb, NULL);
   11f58:	4b10      	ldr	r3, [pc, #64]	; (11f9c <connected+0x94>)
   11f5a:	aa01      	add	r2, sp, #4
   11f5c:	f103 0710 	add.w	r7, r3, #16
   11f60:	4616      	mov	r6, r2
   11f62:	6818      	ldr	r0, [r3, #0]
   11f64:	6859      	ldr	r1, [r3, #4]
   11f66:	4615      	mov	r5, r2
   11f68:	c503      	stmia	r5!, {r0, r1}
   11f6a:	3308      	adds	r3, #8
   11f6c:	42bb      	cmp	r3, r7
   11f6e:	462a      	mov	r2, r5
   11f70:	d1f7      	bne.n	11f62 <connected+0x5a>
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	702b      	strb	r3, [r5, #0]
   11f76:	4631      	mov	r1, r6
   11f78:	4a09      	ldr	r2, [pc, #36]	; (11fa0 <connected+0x98>)
   11f7a:	2300      	movs	r3, #0
   11f7c:	4620      	mov	r0, r4
   11f7e:	f002 fa2f 	bl	143e0 <bt_gatt_dm_start>
	if (err) {
   11f82:	4601      	mov	r1, r0
   11f84:	2800      	cmp	r0, #0
   11f86:	d0de      	beq.n	11f46 <connected+0x3e>
		printk("Could not start the discovery procedure, error "
   11f88:	4806      	ldr	r0, [pc, #24]	; (11fa4 <connected+0x9c>)
   11f8a:	e7da      	b.n	11f42 <connected+0x3a>
   11f8c:	200029b4 	.word	0x200029b4
   11f90:	0002f743 	.word	0x0002f743
   11f94:	0002f6eb 	.word	0x0002f6eb
   11f98:	0002f761 	.word	0x0002f761
   11f9c:	0002e640 	.word	0x0002e640
   11fa0:	20000528 	.word	0x20000528
   11fa4:	0002f788 	.word	0x0002f788

00011fa8 <app_button_indicated_cb>:
{
   11fa8:	b510      	push	{r4, lr}
   11faa:	b088      	sub	sp, #32
   11fac:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_joybus_conn(joy)), addr, sizeof(addr));
   11fae:	f017 fd82 	bl	29ab6 <bt_joybus_conn>
   11fb2:	f019 fb45 	bl	2b640 <bt_conn_get_dst>
   11fb6:	4669      	mov	r1, sp
   11fb8:	f7ff ff2a 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("[%s] Button %s \n", addr, (button_state ? "Pressed" : "Released"));
   11fbc:	4b05      	ldr	r3, [pc, #20]	; (11fd4 <app_button_indicated_cb+0x2c>)
   11fbe:	4a06      	ldr	r2, [pc, #24]	; (11fd8 <app_button_indicated_cb+0x30>)
   11fc0:	4806      	ldr	r0, [pc, #24]	; (11fdc <app_button_indicated_cb+0x34>)
   11fc2:	2c00      	cmp	r4, #0
   11fc4:	bf18      	it	ne
   11fc6:	461a      	movne	r2, r3
   11fc8:	4669      	mov	r1, sp
   11fca:	f017 fe36 	bl	29c3a <printk>
}
   11fce:	b008      	add	sp, #32
   11fd0:	bd10      	pop	{r4, pc}
   11fd2:	bf00      	nop
   11fd4:	0002f7c1 	.word	0x0002f7c1
   11fd8:	0002f7c9 	.word	0x0002f7c9
   11fdc:	0002f7d2 	.word	0x0002f7d2

00011fe0 <read_input_response_cb>:
{
   11fe0:	b530      	push	{r4, r5, lr}
   11fe2:	b089      	sub	sp, #36	; 0x24
   11fe4:	460d      	mov	r5, r1
   11fe6:	4614      	mov	r4, r2
	bt_addr_le_to_str(bt_conn_get_dst(bt_joybus_conn(joy)),
   11fe8:	f017 fd65 	bl	29ab6 <bt_joybus_conn>
   11fec:	f019 fb28 	bl	2b640 <bt_conn_get_dst>
   11ff0:	4669      	mov	r1, sp
   11ff2:	f7ff ff0d 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
   11ff6:	b134      	cbz	r4, 12006 <read_input_response_cb+0x26>
		printk("[%s] Input Response read ERROR: %d\n", addr, err);
   11ff8:	4805      	ldr	r0, [pc, #20]	; (12010 <read_input_response_cb+0x30>)
   11ffa:	4622      	mov	r2, r4
   11ffc:	4669      	mov	r1, sp
	printk("[%s] Input Response read: %x \n", addr, input_response);
   11ffe:	f017 fe1c 	bl	29c3a <printk>
}
   12002:	b009      	add	sp, #36	; 0x24
   12004:	bd30      	pop	{r4, r5, pc}
	printk("[%s] Input Response read: %x \n", addr, input_response);
   12006:	4803      	ldr	r0, [pc, #12]	; (12014 <read_input_response_cb+0x34>)
   12008:	462a      	mov	r2, r5
   1200a:	4669      	mov	r1, sp
   1200c:	e7f7      	b.n	11ffe <read_input_response_cb+0x1e>
   1200e:	bf00      	nop
   12010:	0002f7e3 	.word	0x0002f7e3
   12014:	0002f807 	.word	0x0002f807

00012018 <notify_input_rsp_cb>:
{
   12018:	b510      	push	{r4, lr}
   1201a:	b088      	sub	sp, #32
   1201c:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(bt_joybus_conn(joy)),
   1201e:	f017 fd4a 	bl	29ab6 <bt_joybus_conn>
   12022:	f019 fb0d 	bl	2b640 <bt_conn_get_dst>
   12026:	4669      	mov	r1, sp
   12028:	f7ff fef2 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
	if (input_response == BT_INPUT_RESPONSE_VAL_INVALID) {
   1202c:	1c63      	adds	r3, r4, #1
   1202e:	d105      	bne.n	1203c <notify_input_rsp_cb+0x24>
		printk("[%s] Input Response notification aborted\n", addr);
   12030:	4805      	ldr	r0, [pc, #20]	; (12048 <notify_input_rsp_cb+0x30>)
   12032:	4669      	mov	r1, sp
   12034:	f017 fe01 	bl	29c3a <printk>
}
   12038:	b008      	add	sp, #32
   1203a:	bd10      	pop	{r4, pc}
		printk("[%s] Input Response notification: %x \n", addr, input_response);
   1203c:	4803      	ldr	r0, [pc, #12]	; (1204c <notify_input_rsp_cb+0x34>)
   1203e:	4622      	mov	r2, r4
   12040:	4669      	mov	r1, sp
   12042:	f017 fdfa 	bl	29c3a <printk>
}
   12046:	e7f7      	b.n	12038 <notify_input_rsp_cb+0x20>
   12048:	0002f826 	.word	0x0002f826
   1204c:	0002f850 	.word	0x0002f850

00012050 <scan_filter_no_match>:
{
   12050:	b570      	push	{r4, r5, r6, lr}
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   12052:	6803      	ldr	r3, [r0, #0]
   12054:	79da      	ldrb	r2, [r3, #7]
   12056:	2a01      	cmp	r2, #1
{
   12058:	b08e      	sub	sp, #56	; 0x38
   1205a:	4605      	mov	r5, r0
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   1205c:	d11f      	bne.n	1209e <scan_filter_no_match+0x4e>
		bt_addr_le_to_str(device_info->recv_info->addr, addr,
   1205e:	6818      	ldr	r0, [r3, #0]
   12060:	a906      	add	r1, sp, #24
   12062:	f7ff fed5 	bl	11e10 <bt_addr_le_to_str.constprop.0.isra.0>
		printk("Direct advertising received from %s\n", addr);
   12066:	a906      	add	r1, sp, #24
   12068:	480e      	ldr	r0, [pc, #56]	; (120a4 <scan_filter_no_match+0x54>)
   1206a:	f017 fde6 	bl	29c3a <printk>
		bt_scan_stop();
   1206e:	f018 fcab 	bl	2a9c8 <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
   12072:	682b      	ldr	r3, [r5, #0]
   12074:	681e      	ldr	r6, [r3, #0]
					BT_CONN_LE_CREATE_CONN,
   12076:	4b0c      	ldr	r3, [pc, #48]	; (120a8 <scan_filter_no_match+0x58>)
   12078:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1207a:	ac02      	add	r4, sp, #8
   1207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		err = bt_conn_le_create(device_info->recv_info->addr,
   12080:	686a      	ldr	r2, [r5, #4]
   12082:	ab01      	add	r3, sp, #4
   12084:	4621      	mov	r1, r4
   12086:	4630      	mov	r0, r6
   12088:	f006 fe04 	bl	18c94 <bt_conn_le_create>
		if (!err) {
   1208c:	b938      	cbnz	r0, 1209e <scan_filter_no_match+0x4e>
			default_conn = bt_conn_ref(conn);
   1208e:	9801      	ldr	r0, [sp, #4]
   12090:	f006 fad2 	bl	18638 <bt_conn_ref>
   12094:	4b05      	ldr	r3, [pc, #20]	; (120ac <scan_filter_no_match+0x5c>)
   12096:	6018      	str	r0, [r3, #0]
			bt_conn_unref(conn);
   12098:	9801      	ldr	r0, [sp, #4]
   1209a:	f006 faf9 	bl	18690 <bt_conn_unref>
}
   1209e:	b00e      	add	sp, #56	; 0x38
   120a0:	bd70      	pop	{r4, r5, r6, pc}
   120a2:	bf00      	nop
   120a4:	0002f877 	.word	0x0002f877
   120a8:	0002e654 	.word	0x0002e654
   120ac:	200029b4 	.word	0x200029b4

000120b0 <main>:


void main(void)
{
   120b0:	b570      	push	{r4, r5, r6, lr}
	int err;

	printk("Starting Bluetooth Central JOY example\n");
   120b2:	4836      	ldr	r0, [pc, #216]	; (1218c <main+0xdc>)
{
   120b4:	b08c      	sub	sp, #48	; 0x30
	printk("Starting Bluetooth Central JOY example\n");
   120b6:	f017 fdc0 	bl	29c3a <printk>

	bt_joybus_client_init(&joy);
   120ba:	4835      	ldr	r0, [pc, #212]	; (12190 <main+0xe0>)
   120bc:	f7ff fbf0 	bl	118a0 <bt_joybus_client_init>

	err = bt_enable(NULL);
   120c0:	2000      	movs	r0, #0
   120c2:	f004 fea5 	bl	16e10 <bt_enable>
	if (err) {
   120c6:	4604      	mov	r4, r0
   120c8:	b130      	cbz	r0, 120d8 <main+0x28>
		printk("Bluetooth init failed (err %d)\n", err);
   120ca:	4601      	mov	r1, r0
   120cc:	4831      	ldr	r0, [pc, #196]	; (12194 <main+0xe4>)
		printk("Scanning failed to start (err %d)\n", err);
		return;
	}

	printk("Scanning successfully started\n");
}
   120ce:	b00c      	add	sp, #48	; 0x30
   120d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Failed to initialize buttons (err %d)\n", err);
   120d4:	f017 bdb1 	b.w	29c3a <printk>
	printk("Bluetooth initialized\n");
   120d8:	482f      	ldr	r0, [pc, #188]	; (12198 <main+0xe8>)
   120da:	f017 fdae 	bl	29c3a <printk>
		settings_load();
   120de:	f018 fa43 	bl	2a568 <settings_load>
	struct bt_scan_init_param scan_init = {
   120e2:	9404      	str	r4, [sp, #16]
		.conn_param = BT_LE_JOYBUS_CONN_PARAMS,
   120e4:	4c2d      	ldr	r4, [pc, #180]	; (1219c <main+0xec>)
	struct bt_scan_init_param scan_init = {
   120e6:	2301      	movs	r3, #1
		.conn_param = BT_LE_JOYBUS_CONN_PARAMS,
   120e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   120ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	struct bt_scan_init_param scan_init = {
   120ec:	f88d 3014 	strb.w	r3, [sp, #20]
		.conn_param = BT_LE_JOYBUS_CONN_PARAMS,
   120f0:	ab02      	add	r3, sp, #8
   120f2:	c303      	stmia	r3!, {r0, r1}
	struct bt_scan_init_param scan_init = {
   120f4:	ab02      	add	r3, sp, #8
	bt_scan_init(&scan_init);
   120f6:	a804      	add	r0, sp, #16
	struct bt_scan_init_param scan_init = {
   120f8:	9306      	str	r3, [sp, #24]
	bt_scan_init(&scan_init);
   120fa:	f002 fb9d 	bl	14838 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   120fe:	4828      	ldr	r0, [pc, #160]	; (121a0 <main+0xf0>)
   12100:	f002 fa62 	bl	145c8 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_JOYBUS);
   12104:	aa07      	add	r2, sp, #28
   12106:	4623      	mov	r3, r4
   12108:	f104 0610 	add.w	r6, r4, #16
   1210c:	4615      	mov	r5, r2
   1210e:	6818      	ldr	r0, [r3, #0]
   12110:	6859      	ldr	r1, [r3, #4]
   12112:	4614      	mov	r4, r2
   12114:	c403      	stmia	r4!, {r0, r1}
   12116:	3308      	adds	r3, #8
   12118:	42b3      	cmp	r3, r6
   1211a:	4622      	mov	r2, r4
   1211c:	d1f7      	bne.n	1210e <main+0x5e>
   1211e:	781b      	ldrb	r3, [r3, #0]
   12120:	7023      	strb	r3, [r4, #0]
   12122:	4629      	mov	r1, r5
   12124:	2003      	movs	r0, #3
   12126:	f002 fa5f 	bl	145e8 <bt_scan_filter_add>
	if (err) {
   1212a:	4601      	mov	r1, r0
   1212c:	b148      	cbz	r0, 12142 <main+0x92>
		printk("Scanning filters cannot be set (err %d)\n", err);
   1212e:	481d      	ldr	r0, [pc, #116]	; (121a4 <main+0xf4>)
		printk("Filters cannot be turned on (err %d)\n", err);
   12130:	f017 fd83 	bl	29c3a <printk>
	err = dk_buttons_init(button_handler);
   12134:	481c      	ldr	r0, [pc, #112]	; (121a8 <main+0xf8>)
   12136:	f00f f83d 	bl	211b4 <dk_buttons_init>
	if (err) {
   1213a:	4601      	mov	r1, r0
   1213c:	b148      	cbz	r0, 12152 <main+0xa2>
		printk("Failed to initialize buttons (err %d)\n", err);
   1213e:	481b      	ldr	r0, [pc, #108]	; (121ac <main+0xfc>)
   12140:	e7c5      	b.n	120ce <main+0x1e>
	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   12142:	2004      	movs	r0, #4
   12144:	f002 fab2 	bl	146ac <bt_scan_filter_enable>
	if (err) {
   12148:	4601      	mov	r1, r0
   1214a:	2800      	cmp	r0, #0
   1214c:	d0f2      	beq.n	12134 <main+0x84>
		printk("Filters cannot be turned on (err %d)\n", err);
   1214e:	4818      	ldr	r0, [pc, #96]	; (121b0 <main+0x100>)
   12150:	e7ee      	b.n	12130 <main+0x80>
	k_work_queue_start(&offload_work_q, my_stack_area,
   12152:	2304      	movs	r3, #4
   12154:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12158:	4916      	ldr	r1, [pc, #88]	; (121b4 <main+0x104>)
   1215a:	9000      	str	r0, [sp, #0]
   1215c:	4816      	ldr	r0, [pc, #88]	; (121b8 <main+0x108>)
   1215e:	f012 fceb 	bl	24b38 <k_work_queue_start>
	strcpy(my_work.name, "Thread0 emulate_work()");
   12162:	4916      	ldr	r1, [pc, #88]	; (121bc <main+0x10c>)
   12164:	4816      	ldr	r0, [pc, #88]	; (121c0 <main+0x110>)
   12166:	f018 fee5 	bl	2af34 <strcpy>
	k_work_init(&my_work.work, offload_function);
   1216a:	4916      	ldr	r1, [pc, #88]	; (121c4 <main+0x114>)
   1216c:	4816      	ldr	r0, [pc, #88]	; (121c8 <main+0x118>)
   1216e:	f012 fc2d 	bl	249cc <k_work_init>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   12172:	2001      	movs	r0, #1
   12174:	f002 fb92 	bl	1489c <bt_scan_start>
	if (err) {
   12178:	4601      	mov	r1, r0
   1217a:	b108      	cbz	r0, 12180 <main+0xd0>
		printk("Scanning failed to start (err %d)\n", err);
   1217c:	4813      	ldr	r0, [pc, #76]	; (121cc <main+0x11c>)
   1217e:	e7a6      	b.n	120ce <main+0x1e>
	printk("Scanning successfully started\n");
   12180:	4813      	ldr	r0, [pc, #76]	; (121d0 <main+0x120>)
}
   12182:	b00c      	add	sp, #48	; 0x30
   12184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("Scanning successfully started\n");
   12188:	f017 bd57 	b.w	29c3a <printk>
   1218c:	0002f89c 	.word	0x0002f89c
   12190:	20001948 	.word	0x20001948
   12194:	0002f8c4 	.word	0x0002f8c4
   12198:	0002f8e4 	.word	0x0002f8e4
   1219c:	0002e640 	.word	0x0002e640
   121a0:	20000534 	.word	0x20000534
   121a4:	0002f8fb 	.word	0x0002f8fb
   121a8:	00011dc9 	.word	0x00011dc9
   121ac:	0002f94a 	.word	0x0002f94a
   121b0:	0002f924 	.word	0x0002f924
   121b4:	20004780 	.word	0x20004780
   121b8:	20001a10 	.word	0x20001a10
   121bc:	0002f971 	.word	0x0002f971
   121c0:	20002998 	.word	0x20002998
   121c4:	00011dad 	.word	0x00011dad
   121c8:	20002988 	.word	0x20002988
   121cc:	0002f6eb 	.word	0x0002f6eb
   121d0:	0002f988 	.word	0x0002f988

000121d4 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   121d4:	4b01      	ldr	r3, [pc, #4]	; (121dc <char_out+0x8>)
   121d6:	681b      	ldr	r3, [r3, #0]
   121d8:	4718      	bx	r3
   121da:	bf00      	nop
   121dc:	20000540 	.word	0x20000540

000121e0 <__printk_hook_install>:
	_char_out = fn;
   121e0:	4b01      	ldr	r3, [pc, #4]	; (121e8 <__printk_hook_install+0x8>)
   121e2:	6018      	str	r0, [r3, #0]
}
   121e4:	4770      	bx	lr
   121e6:	bf00      	nop
   121e8:	20000540 	.word	0x20000540

000121ec <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   121ec:	b507      	push	{r0, r1, r2, lr}
   121ee:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   121f0:	2100      	movs	r1, #0
   121f2:	4602      	mov	r2, r0
   121f4:	9100      	str	r1, [sp, #0]
   121f6:	4803      	ldr	r0, [pc, #12]	; (12204 <vprintk+0x18>)
   121f8:	f000 fbbe 	bl	12978 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   121fc:	b003      	add	sp, #12
   121fe:	f85d fb04 	ldr.w	pc, [sp], #4
   12202:	bf00      	nop
   12204:	000121d5 	.word	0x000121d5

00012208 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12208:	b530      	push	{r4, r5, lr}
   1220a:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   1220c:	2500      	movs	r5, #0
   1220e:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12212:	4604      	mov	r4, r0
   12214:	9500      	str	r5, [sp, #0]
   12216:	a903      	add	r1, sp, #12
   12218:	4805      	ldr	r0, [pc, #20]	; (12230 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   1221a:	9505      	str	r5, [sp, #20]
   1221c:	f000 fbac 	bl	12978 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12220:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12224:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12226:	bfb8      	it	lt
   12228:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   1222a:	b007      	add	sp, #28
   1222c:	bd30      	pop	{r4, r5, pc}
   1222e:	bf00      	nop
   12230:	00029c15 	.word	0x00029c15

00012234 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12234:	b538      	push	{r3, r4, r5, lr}
	if (mem == NULL) {
   12236:	b351      	cbz	r1, 1228e <sys_heap_free+0x5a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12238:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1223a:	1f0b      	subs	r3, r1, #4
   1223c:	1a9b      	subs	r3, r3, r2
   1223e:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12240:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12244:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12246:	885c      	ldrh	r4, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12248:	07e0      	lsls	r0, r4, #31
   1224a:	d408      	bmi.n	1225e <sys_heap_free+0x2a>
   1224c:	4910      	ldr	r1, [pc, #64]	; (12290 <sys_heap_free+0x5c>)
   1224e:	4811      	ldr	r0, [pc, #68]	; (12294 <sys_heap_free+0x60>)
   12250:	22af      	movs	r2, #175	; 0xaf
   12252:	f017 fefa 	bl	2a04a <assert_print>
   12256:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12258:	480d      	ldr	r0, [pc, #52]	; (12290 <sys_heap_free+0x5c>)
   1225a:	f017 feef 	bl	2a03c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1225e:	4610      	mov	r0, r2
   12260:	f017 fd0f 	bl	29c82 <chunk_size>
   12264:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   12266:	f832 5030 	ldrh.w	r5, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1226a:	1b40      	subs	r0, r0, r5
   1226c:	4281      	cmp	r1, r0
   1226e:	d006      	beq.n	1227e <sys_heap_free+0x4a>
   12270:	4907      	ldr	r1, [pc, #28]	; (12290 <sys_heap_free+0x5c>)
   12272:	4808      	ldr	r0, [pc, #32]	; (12294 <sys_heap_free+0x60>)
   12274:	22b7      	movs	r2, #183	; 0xb7
   12276:	f017 fee8 	bl	2a04a <assert_print>
   1227a:	21b7      	movs	r1, #183	; 0xb7
   1227c:	e7ec      	b.n	12258 <sys_heap_free+0x24>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1227e:	f024 0401 	bic.w	r4, r4, #1
   12282:	805c      	strh	r4, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   12284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_chunk(h, c);
   12288:	4610      	mov	r0, r2
   1228a:	f017 bdb7 	b.w	29dfc <free_chunk>
}
   1228e:	bd38      	pop	{r3, r4, r5, pc}
   12290:	0002f9b8 	.word	0x0002f9b8
   12294:	0002f2b5 	.word	0x0002f2b5

00012298 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1229c:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1229e:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   122a0:	6806      	ldr	r6, [r0, #0]
{
   122a2:	460f      	mov	r7, r1
   122a4:	4614      	mov	r4, r2
	if (align != rew) {
   122a6:	d011      	beq.n	122cc <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   122a8:	f1c1 0900 	rsb	r9, r1, #0
   122ac:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   122b0:	464a      	mov	r2, r9
   122b2:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   122b4:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   122b8:	bf28      	it	cs
   122ba:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   122bc:	4219      	tst	r1, r3
   122be:	d10c      	bne.n	122da <sys_heap_aligned_alloc+0x42>
   122c0:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   122c2:	b9c4      	cbnz	r4, 122f6 <sys_heap_aligned_alloc+0x5e>
		return NULL;
   122c4:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   122c6:	4628      	mov	r0, r5
   122c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   122cc:	2904      	cmp	r1, #4
   122ce:	d80f      	bhi.n	122f0 <sys_heap_aligned_alloc+0x58>
}
   122d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   122d4:	4611      	mov	r1, r2
   122d6:	f017 bdc2 	b.w	29e5e <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   122da:	492a      	ldr	r1, [pc, #168]	; (12384 <sys_heap_aligned_alloc+0xec>)
   122dc:	482a      	ldr	r0, [pc, #168]	; (12388 <sys_heap_aligned_alloc+0xf0>)
   122de:	f44f 72a2 	mov.w	r2, #324	; 0x144
   122e2:	f017 feb2 	bl	2a04a <assert_print>
   122e6:	4827      	ldr	r0, [pc, #156]	; (12384 <sys_heap_aligned_alloc+0xec>)
   122e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
   122ec:	f017 fea6 	bl	2a03c <assert_post_action>
		rew = 0;
   122f0:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   122f2:	2204      	movs	r2, #4
   122f4:	e7e5      	b.n	122c2 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   122f6:	68b3      	ldr	r3, [r6, #8]
   122f8:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   122fc:	d9e2      	bls.n	122c4 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   122fe:	f104 010b 	add.w	r1, r4, #11
   12302:	4439      	add	r1, r7
   12304:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12306:	08c9      	lsrs	r1, r1, #3
   12308:	4630      	mov	r0, r6
   1230a:	f017 fd10 	bl	29d2e <alloc_chunk>
	if (c0 == 0) {
   1230e:	4680      	mov	r8, r0
   12310:	2800      	cmp	r0, #0
   12312:	d0d7      	beq.n	122c4 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12314:	f109 0504 	add.w	r5, r9, #4
   12318:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1231c:	1e7b      	subs	r3, r7, #1
   1231e:	4435      	add	r5, r6
   12320:	441d      	add	r5, r3
   12322:	427f      	negs	r7, r7
   12324:	403d      	ands	r5, r7
   12326:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1232a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1232c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1232e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12330:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12332:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12336:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12338:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1233c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12340:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12344:	d208      	bcs.n	12358 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c0, c);
   12346:	4601      	mov	r1, r0
   12348:	463a      	mov	r2, r7
   1234a:	4630      	mov	r0, r6
   1234c:	f017 fd3c 	bl	29dc8 <split_chunks>
		free_list_add(h, c0);
   12350:	4641      	mov	r1, r8
   12352:	4630      	mov	r0, r6
   12354:	f017 fc9a 	bl	29c8c <free_list_add>
	return c + chunk_size(h, c);
   12358:	4639      	mov	r1, r7
   1235a:	4630      	mov	r0, r6
   1235c:	f017 fc91 	bl	29c82 <chunk_size>
   12360:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12362:	4284      	cmp	r4, r0
   12364:	d207      	bcs.n	12376 <sys_heap_aligned_alloc+0xde>
		split_chunks(h, c, c_end);
   12366:	4630      	mov	r0, r6
   12368:	4622      	mov	r2, r4
   1236a:	f017 fd2d 	bl	29dc8 <split_chunks>
		free_list_add(h, c_end);
   1236e:	4621      	mov	r1, r4
   12370:	4630      	mov	r0, r6
   12372:	f017 fc8b 	bl	29c8c <free_list_add>
	void *cmem = &buf[c];
   12376:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1237a:	8873      	ldrh	r3, [r6, #2]
   1237c:	f043 0301 	orr.w	r3, r3, #1
   12380:	8073      	strh	r3, [r6, #2]
   12382:	e7a0      	b.n	122c6 <sys_heap_aligned_alloc+0x2e>
   12384:	0002f9b8 	.word	0x0002f9b8
   12388:	0002f2b5 	.word	0x0002f2b5

0001238c <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   1238c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12392:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12394:	d30a      	bcc.n	123ac <sys_heap_init+0x20>
   12396:	4933      	ldr	r1, [pc, #204]	; (12464 <sys_heap_init+0xd8>)
   12398:	4833      	ldr	r0, [pc, #204]	; (12468 <sys_heap_init+0xdc>)
   1239a:	f240 12eb 	movw	r2, #491	; 0x1eb
   1239e:	f017 fe54 	bl	2a04a <assert_print>
   123a2:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   123a6:	482f      	ldr	r0, [pc, #188]	; (12464 <sys_heap_init+0xd8>)
   123a8:	f017 fe48 	bl	2a03c <assert_post_action>
   123ac:	2a04      	cmp	r2, #4
   123ae:	d808      	bhi.n	123c2 <sys_heap_init+0x36>
   123b0:	492c      	ldr	r1, [pc, #176]	; (12464 <sys_heap_init+0xd8>)
   123b2:	482d      	ldr	r0, [pc, #180]	; (12468 <sys_heap_init+0xdc>)
   123b4:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
   123b8:	f017 fe47 	bl	2a04a <assert_print>
   123bc:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   123c0:	e7f1      	b.n	123a6 <sys_heap_init+0x1a>
	bytes -= heap_footer_bytes(bytes);
   123c2:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   123c4:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   123c6:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   123c8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   123cc:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   123d0:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   123d2:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   123d4:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   123d8:	d808      	bhi.n	123ec <sys_heap_init+0x60>
   123da:	4922      	ldr	r1, [pc, #136]	; (12464 <sys_heap_init+0xd8>)
   123dc:	4822      	ldr	r0, [pc, #136]	; (12468 <sys_heap_init+0xdc>)
   123de:	f240 12fb 	movw	r2, #507	; 0x1fb
   123e2:	f017 fe32 	bl	2a04a <assert_print>
   123e6:	f240 11fb 	movw	r1, #507	; 0x1fb
   123ea:	e7dc      	b.n	123a6 <sys_heap_init+0x1a>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   123ec:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   123f0:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   123f4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   123f8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   123fa:	3107      	adds	r1, #7
   123fc:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   123fe:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   12400:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12402:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   12404:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   12408:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   1240a:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1240c:	d908      	bls.n	12420 <sys_heap_init+0x94>
   1240e:	4915      	ldr	r1, [pc, #84]	; (12464 <sys_heap_init+0xd8>)
   12410:	4815      	ldr	r0, [pc, #84]	; (12468 <sys_heap_init+0xdc>)
   12412:	f44f 7203 	mov.w	r2, #524	; 0x20c
   12416:	f017 fe18 	bl	2a04a <assert_print>
   1241a:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1241e:	e7c2      	b.n	123a6 <sys_heap_init+0x1a>
   12420:	f100 050c 	add.w	r5, r0, #12
   12424:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12428:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1242c:	42b5      	cmp	r5, r6
   1242e:	d1fb      	bne.n	12428 <sys_heap_init+0x9c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12430:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12432:	f045 0501 	orr.w	r5, r5, #1
   12436:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   12438:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1243c:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1243e:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   12440:	8004      	strh	r4, [r0, #0]
   12442:	8077      	strh	r7, [r6, #2]
   12444:	1886      	adds	r6, r0, r2
   12446:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1244a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1244e:	8074      	strh	r4, [r6, #2]
   12450:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12452:	885a      	ldrh	r2, [r3, #2]
   12454:	f042 0201 	orr.w	r2, r2, #1
   12458:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1245a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1245e:	f017 bc15 	b.w	29c8c <free_list_add>
   12462:	bf00      	nop
   12464:	0002f9b8 	.word	0x0002f9b8
   12468:	0002f2b5 	.word	0x0002f2b5

0001246c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1246c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	4604      	mov	r4, r0
   12472:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12474:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12476:	0719      	lsls	r1, r3, #28
{
   12478:	4616      	mov	r6, r2
	if (processing) {
   1247a:	d412      	bmi.n	124a2 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1247c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1247e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   12482:	d162      	bne.n	1254a <process_event+0xde>
			evt = process_recheck(mgr);
   12484:	4620      	mov	r0, r4
   12486:	f017 fd13 	bl	29eb0 <process_recheck>
		}

		if (evt == EVT_NOP) {
   1248a:	b188      	cbz	r0, 124b0 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   1248c:	3801      	subs	r0, #1
   1248e:	2804      	cmp	r0, #4
   12490:	f200 8121 	bhi.w	126d6 <process_event+0x26a>
   12494:	e8df f010 	tbh	[pc, r0, lsl #1]
   12498:	011f0059 	.word	0x011f0059
   1249c:	00c4007e 	.word	0x00c4007e
   124a0:	00f1      	.short	0x00f1
		if (evt == EVT_COMPLETE) {
   124a2:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   124a4:	bf0c      	ite	eq
   124a6:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   124aa:	f043 0120 	orrne.w	r1, r3, #32
   124ae:	83a1      	strh	r1, [r4, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   124b0:	f104 0014 	add.w	r0, r4, #20
   124b4:	f011 fdae 	bl	24014 <z_spin_unlock_valid>
   124b8:	2800      	cmp	r0, #0
   124ba:	f000 80a9 	beq.w	12610 <process_event+0x1a4>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   124be:	f386 8811 	msr	BASEPRI, r6
   124c2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   124c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ca:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   124ce:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   124d0:	2801      	cmp	r0, #1
   124d2:	d81e      	bhi.n	12512 <process_event+0xa6>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   124d4:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   124d6:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   124d8:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   124da:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   124de:	d114      	bne.n	1250a <process_event+0x9e>
		*clients = mgr->clients;
   124e0:	463a      	mov	r2, r7
   124e2:	e003      	b.n	124ec <process_event+0x80>
				mgr->refs += 1U;
   124e4:	8be0      	ldrh	r0, [r4, #30]
   124e6:	3001      	adds	r0, #1
   124e8:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   124ea:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   124ec:	2a00      	cmp	r2, #0
   124ee:	d1f9      	bne.n	124e4 <process_event+0x78>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   124f0:	f023 0307 	bic.w	r3, r3, #7
   124f4:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   124f8:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   124fa:	4620      	mov	r0, r4
   124fc:	f017 fcd8 	bl	29eb0 <process_recheck>
   12500:	b390      	cbz	r0, 12568 <process_event+0xfc>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12502:	f042 0220 	orr.w	r2, r2, #32
   12506:	83a2      	strh	r2, [r4, #28]
   12508:	e02e      	b.n	12568 <process_event+0xfc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1250a:	f023 0307 	bic.w	r3, r3, #7
   1250e:	b29a      	uxth	r2, r3
}
   12510:	e7f2      	b.n	124f8 <process_event+0x8c>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12512:	2a04      	cmp	r2, #4
   12514:	d133      	bne.n	1257e <process_event+0x112>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12516:	f023 0307 	bic.w	r3, r3, #7
   1251a:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1251c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1251e:	4620      	mov	r0, r4
   12520:	f017 fcc6 	bl	29eb0 <process_recheck>
   12524:	b110      	cbz	r0, 1252c <process_event+0xc0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12526:	f042 0220 	orr.w	r2, r2, #32
   1252a:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1252c:	8ba3      	ldrh	r3, [r4, #28]
   1252e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12532:	4589      	cmp	r9, r1
   12534:	f040 80d8 	bne.w	126e8 <process_event+0x27c>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12538:	8ba1      	ldrh	r1, [r4, #28]
   1253a:	06ca      	lsls	r2, r1, #27
   1253c:	f140 811e 	bpl.w	1277c <process_event+0x310>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12540:	f021 0310 	bic.w	r3, r1, #16
   12544:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   12546:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   1254a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1254e:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12550:	f1b8 0f00 	cmp.w	r8, #0
   12554:	dab9      	bge.n	124ca <process_event+0x5e>
	list->head = NULL;
   12556:	2200      	movs	r2, #0
		*clients = mgr->clients;
   12558:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1255a:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1255e:	e9c4 2200 	strd	r2, r2, [r4]
   12562:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12566:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12568:	8ba3      	ldrh	r3, [r4, #28]
   1256a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1256e:	4589      	cmp	r9, r1
   12570:	f040 80bb 	bne.w	126ea <process_event+0x27e>
		    || !sys_slist_is_empty(&clients)
   12574:	2f00      	cmp	r7, #0
   12576:	d0df      	beq.n	12538 <process_event+0xcc>
   12578:	2500      	movs	r5, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1257a:	46aa      	mov	sl, r5
   1257c:	e03e      	b.n	125fc <process_event+0x190>
		__ASSERT_NO_MSG(false);
   1257e:	4984      	ldr	r1, [pc, #528]	; (12790 <process_event+0x324>)
   12580:	4884      	ldr	r0, [pc, #528]	; (12794 <process_event+0x328>)
   12582:	f240 121b 	movw	r2, #283	; 0x11b
   12586:	f017 fd60 	bl	2a04a <assert_print>
   1258a:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1258e:	4880      	ldr	r0, [pc, #512]	; (12790 <process_event+0x324>)
   12590:	f017 fd54 	bl	2a03c <assert_post_action>
   12594:	b141      	cbz	r1, 125a8 <process_event+0x13c>
   12596:	497e      	ldr	r1, [pc, #504]	; (12790 <process_event+0x324>)
   12598:	487e      	ldr	r0, [pc, #504]	; (12794 <process_event+0x328>)
   1259a:	f44f 72ab 	mov.w	r2, #342	; 0x156
   1259e:	f017 fd54 	bl	2a04a <assert_print>
   125a2:	f44f 71ab 	mov.w	r1, #342	; 0x156
   125a6:	e7f2      	b.n	1258e <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   125a8:	6823      	ldr	r3, [r4, #0]
   125aa:	b943      	cbnz	r3, 125be <process_event+0x152>
   125ac:	4978      	ldr	r1, [pc, #480]	; (12790 <process_event+0x324>)
   125ae:	4879      	ldr	r0, [pc, #484]	; (12794 <process_event+0x328>)
   125b0:	f240 1257 	movw	r2, #343	; 0x157
   125b4:	f017 fd49 	bl	2a04a <assert_print>
   125b8:	f240 1157 	movw	r1, #343	; 0x157
   125bc:	e7e7      	b.n	1258e <process_event+0x122>
			transit = mgr->transitions->start;
   125be:	6923      	ldr	r3, [r4, #16]
   125c0:	681d      	ldr	r5, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   125c2:	b945      	cbnz	r5, 125d6 <process_event+0x16a>
   125c4:	4972      	ldr	r1, [pc, #456]	; (12790 <process_event+0x324>)
   125c6:	4873      	ldr	r0, [pc, #460]	; (12794 <process_event+0x328>)
   125c8:	f44f 72ad 	mov.w	r2, #346	; 0x15a
   125cc:	f017 fd3d 	bl	2a04a <assert_print>
   125d0:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   125d4:	e7db      	b.n	1258e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   125d6:	8ba3      	ldrh	r3, [r4, #28]
   125d8:	f023 0307 	bic.w	r3, r3, #7
   125dc:	f043 0306 	orr.w	r3, r3, #6
   125e0:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   125e2:	83a3      	strh	r3, [r4, #28]
   125e4:	460f      	mov	r7, r1
		res = 0;
   125e6:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   125e8:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   125ec:	68a2      	ldr	r2, [r4, #8]
   125ee:	2a00      	cmp	r2, #0
   125f0:	d17d      	bne.n	126ee <process_event+0x282>
		    || !sys_slist_is_empty(&clients)
   125f2:	2f00      	cmp	r7, #0
   125f4:	d17e      	bne.n	126f4 <process_event+0x288>
		    || (transit != NULL)) {
   125f6:	2d00      	cmp	r5, #0
   125f8:	d09e      	beq.n	12538 <process_event+0xcc>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   125fa:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   125fc:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   12600:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   12604:	83a3      	strh	r3, [r4, #28]
   12606:	4658      	mov	r0, fp
   12608:	f011 fd04 	bl	24014 <z_spin_unlock_valid>
   1260c:	2800      	cmp	r0, #0
   1260e:	d173      	bne.n	126f8 <process_event+0x28c>
   12610:	4961      	ldr	r1, [pc, #388]	; (12798 <process_event+0x32c>)
   12612:	4860      	ldr	r0, [pc, #384]	; (12794 <process_event+0x328>)
   12614:	22c2      	movs	r2, #194	; 0xc2
   12616:	f017 fd18 	bl	2a04a <assert_print>
   1261a:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1261c:	485e      	ldr	r0, [pc, #376]	; (12798 <process_event+0x32c>)
   1261e:	e7b7      	b.n	12590 <process_event+0x124>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   12620:	2902      	cmp	r1, #2
   12622:	d008      	beq.n	12636 <process_event+0x1ca>
   12624:	495a      	ldr	r1, [pc, #360]	; (12790 <process_event+0x324>)
   12626:	485b      	ldr	r0, [pc, #364]	; (12794 <process_event+0x328>)
   12628:	f240 125d 	movw	r2, #349	; 0x15d
   1262c:	f017 fd0d 	bl	2a04a <assert_print>
   12630:	f240 115d 	movw	r1, #349	; 0x15d
   12634:	e7ab      	b.n	1258e <process_event+0x122>
			__ASSERT_NO_MSG(mgr->refs == 0);
   12636:	8be7      	ldrh	r7, [r4, #30]
   12638:	b147      	cbz	r7, 1264c <process_event+0x1e0>
   1263a:	4955      	ldr	r1, [pc, #340]	; (12790 <process_event+0x324>)
   1263c:	4855      	ldr	r0, [pc, #340]	; (12794 <process_event+0x328>)
   1263e:	f44f 72af 	mov.w	r2, #350	; 0x15e
   12642:	f017 fd02 	bl	2a04a <assert_print>
   12646:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1264a:	e7a0      	b.n	1258e <process_event+0x122>
			transit = mgr->transitions->stop;
   1264c:	6923      	ldr	r3, [r4, #16]
   1264e:	685d      	ldr	r5, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   12650:	b945      	cbnz	r5, 12664 <process_event+0x1f8>
   12652:	494f      	ldr	r1, [pc, #316]	; (12790 <process_event+0x324>)
   12654:	484f      	ldr	r0, [pc, #316]	; (12794 <process_event+0x328>)
   12656:	f240 1261 	movw	r2, #353	; 0x161
   1265a:	f017 fcf6 	bl	2a04a <assert_print>
   1265e:	f240 1161 	movw	r1, #353	; 0x161
   12662:	e794      	b.n	1258e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12664:	8ba3      	ldrh	r3, [r4, #28]
   12666:	f023 0307 	bic.w	r3, r3, #7
   1266a:	f043 0304 	orr.w	r3, r3, #4
   1266e:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   12670:	83a3      	strh	r3, [r4, #28]
		res = 0;
   12672:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12674:	f04f 0904 	mov.w	r9, #4
   12678:	e7b8      	b.n	125ec <process_event+0x180>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1267a:	2901      	cmp	r1, #1
   1267c:	d008      	beq.n	12690 <process_event+0x224>
   1267e:	4944      	ldr	r1, [pc, #272]	; (12790 <process_event+0x324>)
   12680:	4844      	ldr	r0, [pc, #272]	; (12794 <process_event+0x328>)
   12682:	f44f 72b2 	mov.w	r2, #356	; 0x164
   12686:	f017 fce0 	bl	2a04a <assert_print>
   1268a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1268e:	e77e      	b.n	1258e <process_event+0x122>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12690:	6823      	ldr	r3, [r4, #0]
   12692:	b943      	cbnz	r3, 126a6 <process_event+0x23a>
   12694:	493e      	ldr	r1, [pc, #248]	; (12790 <process_event+0x324>)
   12696:	483f      	ldr	r0, [pc, #252]	; (12794 <process_event+0x328>)
   12698:	f240 1265 	movw	r2, #357	; 0x165
   1269c:	f017 fcd5 	bl	2a04a <assert_print>
   126a0:	f240 1165 	movw	r1, #357	; 0x165
   126a4:	e773      	b.n	1258e <process_event+0x122>
			transit = mgr->transitions->reset;
   126a6:	6923      	ldr	r3, [r4, #16]
   126a8:	689d      	ldr	r5, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   126aa:	b945      	cbnz	r5, 126be <process_event+0x252>
   126ac:	4938      	ldr	r1, [pc, #224]	; (12790 <process_event+0x324>)
   126ae:	4839      	ldr	r0, [pc, #228]	; (12794 <process_event+0x328>)
   126b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
   126b4:	f017 fcc9 	bl	2a04a <assert_print>
   126b8:	f44f 71b4 	mov.w	r1, #360	; 0x168
   126bc:	e767      	b.n	1258e <process_event+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   126be:	8ba3      	ldrh	r3, [r4, #28]
   126c0:	f023 0307 	bic.w	r3, r3, #7
   126c4:	f043 0305 	orr.w	r3, r3, #5
   126c8:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   126ca:	2700      	movs	r7, #0
   126cc:	83a3      	strh	r3, [r4, #28]
		res = 0;
   126ce:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   126d0:	f04f 0905 	mov.w	r9, #5
   126d4:	e78a      	b.n	125ec <process_event+0x180>
			__ASSERT_NO_MSG(false);
   126d6:	492e      	ldr	r1, [pc, #184]	; (12790 <process_event+0x324>)
   126d8:	482e      	ldr	r0, [pc, #184]	; (12794 <process_event+0x328>)
   126da:	f240 126b 	movw	r2, #363	; 0x16b
   126de:	f017 fcb4 	bl	2a04a <assert_print>
   126e2:	f240 116b 	movw	r1, #363	; 0x16b
   126e6:	e752      	b.n	1258e <process_event+0x122>
				   && !sys_slist_is_empty(&mgr->monitors);
   126e8:	2700      	movs	r7, #0
   126ea:	2500      	movs	r5, #0
   126ec:	e77e      	b.n	125ec <process_event+0x180>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   126ee:	f04f 0a01 	mov.w	sl, #1
   126f2:	e783      	b.n	125fc <process_event+0x190>
   126f4:	4692      	mov	sl, r2
   126f6:	e781      	b.n	125fc <process_event+0x190>
   126f8:	f386 8811 	msr	BASEPRI, r6
   126fc:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   12700:	f1ba 0f00 	cmp.w	sl, #0
   12704:	d117      	bne.n	12736 <process_event+0x2ca>
	while (!sys_slist_is_empty(list)) {
   12706:	bb4f      	cbnz	r7, 1275c <process_event+0x2f0>
			if (transit != NULL) {
   12708:	b115      	cbz	r5, 12710 <process_event+0x2a4>
				transit(mgr, transition_complete);
   1270a:	4924      	ldr	r1, [pc, #144]	; (1279c <process_event+0x330>)
   1270c:	4620      	mov	r0, r4
   1270e:	47a8      	blx	r5
	__asm__ volatile(
   12710:	f04f 0340 	mov.w	r3, #64	; 0x40
   12714:	f3ef 8611 	mrs	r6, BASEPRI
   12718:	f383 8812 	msr	BASEPRI_MAX, r3
   1271c:	f3bf 8f6f 	isb	sy
   12720:	4658      	mov	r0, fp
   12722:	f011 fc69 	bl	23ff8 <z_spin_lock_valid>
   12726:	bb08      	cbnz	r0, 1276c <process_event+0x300>
   12728:	491b      	ldr	r1, [pc, #108]	; (12798 <process_event+0x32c>)
   1272a:	481a      	ldr	r0, [pc, #104]	; (12794 <process_event+0x328>)
   1272c:	2294      	movs	r2, #148	; 0x94
   1272e:	f017 fc8c 	bl	2a04a <assert_print>
   12732:	2194      	movs	r1, #148	; 0x94
   12734:	e772      	b.n	1261c <process_event+0x1b0>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   12736:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   12738:	2900      	cmp	r1, #0
   1273a:	d0e4      	beq.n	12706 <process_event+0x29a>
	return node->next;
   1273c:	680e      	ldr	r6, [r1, #0]
   1273e:	2900      	cmp	r1, #0
   12740:	d0e1      	beq.n	12706 <process_event+0x29a>
		mon->callback(mgr, mon, state, res);
   12742:	f8d1 a004 	ldr.w	sl, [r1, #4]
   12746:	4643      	mov	r3, r8
   12748:	464a      	mov	r2, r9
   1274a:	4620      	mov	r0, r4
   1274c:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1274e:	b11e      	cbz	r6, 12758 <process_event+0x2ec>
   12750:	6833      	ldr	r3, [r6, #0]
   12752:	4631      	mov	r1, r6
   12754:	461e      	mov	r6, r3
   12756:	e7f2      	b.n	1273e <process_event+0x2d2>
   12758:	4633      	mov	r3, r6
   1275a:	e7fa      	b.n	12752 <process_event+0x2e6>
   1275c:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   1275e:	4643      	mov	r3, r8
   12760:	464a      	mov	r2, r9
   12762:	4620      	mov	r0, r4
   12764:	683f      	ldr	r7, [r7, #0]
   12766:	f017 fbcf 	bl	29f08 <notify_one>
   1276a:	e7cc      	b.n	12706 <process_event+0x29a>
	z_spin_lock_set_owner(l);
   1276c:	4658      	mov	r0, fp
   1276e:	f011 fc61 	bl	24034 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   12772:	8ba3      	ldrh	r3, [r4, #28]
   12774:	f023 0308 	bic.w	r3, r3, #8
   12778:	83a3      	strh	r3, [r4, #28]
   1277a:	e6dd      	b.n	12538 <process_event+0xcc>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1277c:	068b      	lsls	r3, r1, #26
   1277e:	f57f ae97 	bpl.w	124b0 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   12782:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12786:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   12788:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   1278c:	e67a      	b.n	12484 <process_event+0x18>
   1278e:	bf00      	nop
   12790:	0002f9d9 	.word	0x0002f9d9
   12794:	0002f2b5 	.word	0x0002f2b5
   12798:	0002f9fb 	.word	0x0002f9fb
   1279c:	000127a1 	.word	0x000127a1

000127a0 <transition_complete>:
{
   127a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127a2:	4604      	mov	r4, r0
   127a4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   127a6:	f100 0614 	add.w	r6, r0, #20
   127aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   127ae:	f3ef 8711 	mrs	r7, BASEPRI
   127b2:	f383 8812 	msr	BASEPRI_MAX, r3
   127b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   127ba:	4630      	mov	r0, r6
   127bc:	f011 fc1c 	bl	23ff8 <z_spin_lock_valid>
   127c0:	b940      	cbnz	r0, 127d4 <transition_complete+0x34>
   127c2:	490a      	ldr	r1, [pc, #40]	; (127ec <transition_complete+0x4c>)
   127c4:	480a      	ldr	r0, [pc, #40]	; (127f0 <transition_complete+0x50>)
   127c6:	2294      	movs	r2, #148	; 0x94
   127c8:	f017 fc3f 	bl	2a04a <assert_print>
   127cc:	4807      	ldr	r0, [pc, #28]	; (127ec <transition_complete+0x4c>)
   127ce:	2194      	movs	r1, #148	; 0x94
   127d0:	f017 fc34 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   127d4:	4630      	mov	r0, r6
   127d6:	f011 fc2d 	bl	24034 <z_spin_lock_set_owner>
	mgr->last_res = res;
   127da:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   127dc:	463a      	mov	r2, r7
   127de:	4620      	mov	r0, r4
   127e0:	2101      	movs	r1, #1
}
   127e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   127e6:	f7ff be41 	b.w	1246c <process_event>
   127ea:	bf00      	nop
   127ec:	0002f9fb 	.word	0x0002f9fb
   127f0:	0002f2b5 	.word	0x0002f2b5

000127f4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   127f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   127f8:	4604      	mov	r4, r0
   127fa:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   127fc:	f017 fb74 	bl	29ee8 <validate_args>

	if (rv < 0) {
   12800:	1e05      	subs	r5, r0, #0
   12802:	db5c      	blt.n	128be <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   12804:	f104 0914 	add.w	r9, r4, #20
   12808:	f04f 0340 	mov.w	r3, #64	; 0x40
   1280c:	f3ef 8a11 	mrs	sl, BASEPRI
   12810:	f383 8812 	msr	BASEPRI_MAX, r3
   12814:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   12818:	4648      	mov	r0, r9
   1281a:	f011 fbed 	bl	23ff8 <z_spin_lock_valid>
   1281e:	4680      	mov	r8, r0
   12820:	b938      	cbnz	r0, 12832 <onoff_request+0x3e>
   12822:	4932      	ldr	r1, [pc, #200]	; (128ec <onoff_request+0xf8>)
   12824:	4832      	ldr	r0, [pc, #200]	; (128f0 <onoff_request+0xfc>)
   12826:	2294      	movs	r2, #148	; 0x94
   12828:	f017 fc0f 	bl	2a04a <assert_print>
   1282c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1282e:	482f      	ldr	r0, [pc, #188]	; (128ec <onoff_request+0xf8>)
   12830:	e03a      	b.n	128a8 <onoff_request+0xb4>
	z_spin_lock_set_owner(l);
   12832:	4648      	mov	r0, r9
   12834:	f011 fbfe 	bl	24034 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   12838:	8be3      	ldrh	r3, [r4, #30]
   1283a:	8ba6      	ldrh	r6, [r4, #28]
   1283c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12840:	4293      	cmp	r3, r2
   12842:	f006 0607 	and.w	r6, r6, #7
   12846:	d03d      	beq.n	128c4 <onoff_request+0xd0>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   12848:	2e02      	cmp	r6, #2
   1284a:	d10e      	bne.n	1286a <onoff_request+0x76>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1284c:	3301      	adds	r3, #1
   1284e:	83e3      	strh	r3, [r4, #30]
	rv = state;
   12850:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12852:	4648      	mov	r0, r9
   12854:	f011 fbde 	bl	24014 <z_spin_unlock_valid>
   12858:	2800      	cmp	r0, #0
   1285a:	d139      	bne.n	128d0 <onoff_request+0xdc>
   1285c:	4923      	ldr	r1, [pc, #140]	; (128ec <onoff_request+0xf8>)
   1285e:	4824      	ldr	r0, [pc, #144]	; (128f0 <onoff_request+0xfc>)
   12860:	22c2      	movs	r2, #194	; 0xc2
   12862:	f017 fbf2 	bl	2a04a <assert_print>
   12866:	21c2      	movs	r1, #194	; 0xc2
   12868:	e7e1      	b.n	1282e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1286a:	2e06      	cmp	r6, #6
   1286c:	d813      	bhi.n	12896 <onoff_request+0xa2>
   1286e:	e8df f006 	tbb	[pc, r6]
   12872:	2c09      	.short	0x2c09
   12874:	04091212 	.word	0x04091212
   12878:	09          	.byte	0x09
   12879:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   1287a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1287e:	f04f 0800 	mov.w	r8, #0
   12882:	e7e6      	b.n	12852 <onoff_request+0x5e>
	parent->next = child;
   12884:	2300      	movs	r3, #0
   12886:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   12888:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1288a:	b97b      	cbnz	r3, 128ac <onoff_request+0xb8>
	list->head = node;
   1288c:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   12890:	b17e      	cbz	r6, 128b2 <onoff_request+0xbe>
	rv = state;
   12892:	4635      	mov	r5, r6
   12894:	e7f3      	b.n	1287e <onoff_request+0x8a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   12896:	4917      	ldr	r1, [pc, #92]	; (128f4 <onoff_request+0x100>)
   12898:	4815      	ldr	r0, [pc, #84]	; (128f0 <onoff_request+0xfc>)
   1289a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1289e:	f017 fbd4 	bl	2a04a <assert_print>
   128a2:	4814      	ldr	r0, [pc, #80]	; (128f4 <onoff_request+0x100>)
   128a4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   128a8:	f017 fbc8 	bl	2a03c <assert_post_action>
	parent->next = child;
   128ac:	601f      	str	r7, [r3, #0]
	list->tail = node;
   128ae:	6067      	str	r7, [r4, #4]
}
   128b0:	e7ee      	b.n	12890 <onoff_request+0x9c>
		process_event(mgr, EVT_RECHECK, key);
   128b2:	4652      	mov	r2, sl
   128b4:	2102      	movs	r1, #2
   128b6:	4620      	mov	r0, r4
   128b8:	f7ff fdd8 	bl	1246c <process_event>
   128bc:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   128be:	4628      	mov	r0, r5
   128c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   128c4:	f06f 050a 	mvn.w	r5, #10
   128c8:	e7d9      	b.n	1287e <onoff_request+0x8a>
	if (state == ONOFF_STATE_ON) {
   128ca:	f06f 0504 	mvn.w	r5, #4
   128ce:	e7d6      	b.n	1287e <onoff_request+0x8a>
	__asm__ volatile(
   128d0:	f38a 8811 	msr	BASEPRI, sl
   128d4:	f3bf 8f6f 	isb	sy
		if (notify) {
   128d8:	f1b8 0f00 	cmp.w	r8, #0
   128dc:	d0ef      	beq.n	128be <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   128de:	2300      	movs	r3, #0
   128e0:	4632      	mov	r2, r6
   128e2:	4639      	mov	r1, r7
   128e4:	4620      	mov	r0, r4
   128e6:	f017 fb0f 	bl	29f08 <notify_one>
   128ea:	e7e8      	b.n	128be <onoff_request+0xca>
   128ec:	0002f9fb 	.word	0x0002f9fb
   128f0:	0002f2b5 	.word	0x0002f2b5
   128f4:	0002f9d9 	.word	0x0002f9d9

000128f8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   128f8:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   128fa:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   128fc:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   128fe:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   12902:	2a02      	cmp	r2, #2
{
   12904:	4603      	mov	r3, r0
	switch (method) {
   12906:	d00a      	beq.n	1291e <sys_notify_finalize+0x26>
   12908:	2a03      	cmp	r2, #3
   1290a:	f04f 0100 	mov.w	r1, #0
   1290e:	d003      	beq.n	12918 <sys_notify_finalize+0x20>
   12910:	2a01      	cmp	r2, #1
   12912:	d10a      	bne.n	1292a <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12914:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12916:	e006      	b.n	12926 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   12918:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1291a:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1291c:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   1291e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   12920:	2200      	movs	r2, #0
   12922:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   12924:	b950      	cbnz	r0, 1293c <sys_notify_finalize+0x44>
	sys_notify_generic_callback rv = NULL;
   12926:	2000      	movs	r0, #0
   12928:	e7f8      	b.n	1291c <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   1292a:	4906      	ldr	r1, [pc, #24]	; (12944 <sys_notify_finalize+0x4c>)
   1292c:	4806      	ldr	r0, [pc, #24]	; (12948 <sys_notify_finalize+0x50>)
   1292e:	2245      	movs	r2, #69	; 0x45
   12930:	f017 fb8b 	bl	2a04a <assert_print>
   12934:	4803      	ldr	r0, [pc, #12]	; (12944 <sys_notify_finalize+0x4c>)
   12936:	2145      	movs	r1, #69	; 0x45
   12938:	f017 fb80 	bl	2a03c <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1293c:	f013 ffca 	bl	268d4 <z_impl_k_poll_signal_raise>
   12940:	e7f1      	b.n	12926 <sys_notify_finalize+0x2e>
   12942:	bf00      	nop
   12944:	0002fa28 	.word	0x0002fa28
   12948:	0002f2b5 	.word	0x0002f2b5

0001294c <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   1294c:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1294e:	4c09      	ldr	r4, [pc, #36]	; (12974 <crc8_ccitt+0x28>)
   12950:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   12952:	4291      	cmp	r1, r2
   12954:	d100      	bne.n	12958 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   12956:	bd10      	pop	{r4, pc}
		val ^= p[i];
   12958:	f811 3b01 	ldrb.w	r3, [r1], #1
   1295c:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   1295e:	0903      	lsrs	r3, r0, #4
   12960:	0100      	lsls	r0, r0, #4
   12962:	5ce3      	ldrb	r3, [r4, r3]
   12964:	b2c0      	uxtb	r0, r0
   12966:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   12968:	0918      	lsrs	r0, r3, #4
   1296a:	011b      	lsls	r3, r3, #4
   1296c:	5c20      	ldrb	r0, [r4, r0]
   1296e:	b2db      	uxtb	r3, r3
   12970:	4058      	eors	r0, r3
	for (i = 0; i < cnt; i++) {
   12972:	e7ee      	b.n	12952 <crc8_ccitt+0x6>
   12974:	0002fa4b 	.word	0x0002fa4b

00012978 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   12978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1297c:	4681      	mov	r9, r0
   1297e:	b095      	sub	sp, #84	; 0x54
   12980:	468b      	mov	fp, r1
   12982:	4617      	mov	r7, r2
   12984:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   12986:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   12988:	7838      	ldrb	r0, [r7, #0]
   1298a:	b908      	cbnz	r0, 12990 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1298c:	4628      	mov	r0, r5
   1298e:	e358      	b.n	13042 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   12990:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   12992:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   12994:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   12996:	d006      	beq.n	129a6 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   12998:	4659      	mov	r1, fp
   1299a:	47c8      	blx	r9
   1299c:	2800      	cmp	r0, #0
   1299e:	f2c0 8350 	blt.w	13042 <z_cbvprintf_impl+0x6ca>
   129a2:	3501      	adds	r5, #1
		if (bps == NULL) {
   129a4:	e1fb      	b.n	12d9e <z_cbvprintf_impl+0x426>
		} state = {
   129a6:	2218      	movs	r2, #24
   129a8:	2100      	movs	r1, #0
   129aa:	a80e      	add	r0, sp, #56	; 0x38
   129ac:	f018 fb2e 	bl	2b00c <memset>
	if (*sp == '%') {
   129b0:	787b      	ldrb	r3, [r7, #1]
   129b2:	2b25      	cmp	r3, #37	; 0x25
   129b4:	d07d      	beq.n	12ab2 <z_cbvprintf_impl+0x13a>
   129b6:	2300      	movs	r3, #0
   129b8:	1c78      	adds	r0, r7, #1
   129ba:	4698      	mov	r8, r3
   129bc:	469e      	mov	lr, r3
   129be:	469c      	mov	ip, r3
   129c0:	461e      	mov	r6, r3
   129c2:	4601      	mov	r1, r0
		switch (*sp) {
   129c4:	f810 2b01 	ldrb.w	r2, [r0], #1
   129c8:	2a2b      	cmp	r2, #43	; 0x2b
   129ca:	f000 80a1 	beq.w	12b10 <z_cbvprintf_impl+0x198>
   129ce:	f200 8098 	bhi.w	12b02 <z_cbvprintf_impl+0x18a>
   129d2:	2a20      	cmp	r2, #32
   129d4:	f000 809f 	beq.w	12b16 <z_cbvprintf_impl+0x19e>
   129d8:	2a23      	cmp	r2, #35	; 0x23
   129da:	f000 809f 	beq.w	12b1c <z_cbvprintf_impl+0x1a4>
   129de:	b12b      	cbz	r3, 129ec <z_cbvprintf_impl+0x74>
   129e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   129e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   129e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   129ec:	f1b8 0f00 	cmp.w	r8, #0
   129f0:	d005      	beq.n	129fe <z_cbvprintf_impl+0x86>
   129f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   129f6:	f043 0320 	orr.w	r3, r3, #32
   129fa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   129fe:	f1be 0f00 	cmp.w	lr, #0
   12a02:	d005      	beq.n	12a10 <z_cbvprintf_impl+0x98>
   12a04:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a08:	f043 0310 	orr.w	r3, r3, #16
   12a0c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a10:	f1bc 0f00 	cmp.w	ip, #0
   12a14:	d005      	beq.n	12a22 <z_cbvprintf_impl+0xaa>
   12a16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a1a:	f043 0308 	orr.w	r3, r3, #8
   12a1e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   12a22:	b12e      	cbz	r6, 12a30 <z_cbvprintf_impl+0xb8>
   12a24:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a28:	f043 0304 	orr.w	r3, r3, #4
   12a2c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   12a30:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12a34:	f003 0044 	and.w	r0, r3, #68	; 0x44
   12a38:	2844      	cmp	r0, #68	; 0x44
   12a3a:	d103      	bne.n	12a44 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   12a3c:	f36f 1386 	bfc	r3, #6, #1
   12a40:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   12a44:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12a48:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   12a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12a4e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   12a52:	d17f      	bne.n	12b54 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   12a54:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12a58:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   12a5c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   12a5e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   12a62:	781a      	ldrb	r2, [r3, #0]
   12a64:	2a2e      	cmp	r2, #46	; 0x2e
   12a66:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12a6a:	bf0c      	ite	eq
   12a6c:	2101      	moveq	r1, #1
   12a6e:	2100      	movne	r1, #0
   12a70:	f361 0241 	bfi	r2, r1, #1, #1
   12a74:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   12a78:	d178      	bne.n	12b6c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   12a7a:	785a      	ldrb	r2, [r3, #1]
   12a7c:	2a2a      	cmp	r2, #42	; 0x2a
   12a7e:	d06e      	beq.n	12b5e <z_cbvprintf_impl+0x1e6>
	++sp;
   12a80:	3301      	adds	r3, #1
	size_t val = 0;
   12a82:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12a84:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   12a88:	4619      	mov	r1, r3
   12a8a:	f811 0b01 	ldrb.w	r0, [r1], #1
   12a8e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12a92:	2e09      	cmp	r6, #9
   12a94:	f240 8095 	bls.w	12bc2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   12a98:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   12a9c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   12a9e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   12aa2:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   12aa6:	460a      	mov	r2, r1
   12aa8:	f360 0241 	bfi	r2, r0, #1, #1
   12aac:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12ab0:	e05c      	b.n	12b6c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   12ab2:	1cba      	adds	r2, r7, #2
   12ab4:	9203      	str	r2, [sp, #12]
   12ab6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   12aba:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12abe:	07da      	lsls	r2, r3, #31
   12ac0:	f140 812e 	bpl.w	12d20 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   12ac4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   12ac8:	f1b8 0f00 	cmp.w	r8, #0
   12acc:	da07      	bge.n	12ade <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   12ace:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12ad2:	f042 0204 	orr.w	r2, r2, #4
   12ad6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   12ada:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   12ade:	075e      	lsls	r6, r3, #29
   12ae0:	f140 8127 	bpl.w	12d32 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   12ae4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   12ae8:	f1ba 0f00 	cmp.w	sl, #0
   12aec:	f280 8126 	bge.w	12d3c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   12af0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   12af4:	f36f 0341 	bfc	r3, #1, #1
   12af8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   12afc:	f04f 3aff 	mov.w	sl, #4294967295
   12b00:	e11c      	b.n	12d3c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   12b02:	2a2d      	cmp	r2, #45	; 0x2d
   12b04:	d00d      	beq.n	12b22 <z_cbvprintf_impl+0x1aa>
   12b06:	2a30      	cmp	r2, #48	; 0x30
   12b08:	f47f af69 	bne.w	129de <z_cbvprintf_impl+0x66>
   12b0c:	2301      	movs	r3, #1
	} while (loop);
   12b0e:	e758      	b.n	129c2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   12b10:	f04f 0c01 	mov.w	ip, #1
   12b14:	e755      	b.n	129c2 <z_cbvprintf_impl+0x4a>
   12b16:	f04f 0e01 	mov.w	lr, #1
   12b1a:	e752      	b.n	129c2 <z_cbvprintf_impl+0x4a>
   12b1c:	f04f 0801 	mov.w	r8, #1
   12b20:	e74f      	b.n	129c2 <z_cbvprintf_impl+0x4a>
   12b22:	2601      	movs	r6, #1
   12b24:	e74d      	b.n	129c2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   12b26:	fb0e 6202 	mla	r2, lr, r2, r6
   12b2a:	3a30      	subs	r2, #48	; 0x30
   12b2c:	4603      	mov	r3, r0
   12b2e:	4618      	mov	r0, r3
   12b30:	f810 6b01 	ldrb.w	r6, [r0], #1
   12b34:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   12b38:	f1bc 0f09 	cmp.w	ip, #9
   12b3c:	d9f3      	bls.n	12b26 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   12b3e:	4299      	cmp	r1, r3
   12b40:	d08f      	beq.n	12a62 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   12b42:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   12b46:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   12b48:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   12b4a:	f362 0141 	bfi	r1, r2, #1, #1
   12b4e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   12b52:	e786      	b.n	12a62 <z_cbvprintf_impl+0xea>
   12b54:	460b      	mov	r3, r1
	size_t val = 0;
   12b56:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   12b58:	f04f 0e0a 	mov.w	lr, #10
   12b5c:	e7e7      	b.n	12b2e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   12b5e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12b62:	f042 0204 	orr.w	r2, r2, #4
   12b66:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   12b6a:	3302      	adds	r3, #2
	switch (*sp) {
   12b6c:	781a      	ldrb	r2, [r3, #0]
   12b6e:	2a6c      	cmp	r2, #108	; 0x6c
   12b70:	d047      	beq.n	12c02 <z_cbvprintf_impl+0x28a>
   12b72:	d82b      	bhi.n	12bcc <z_cbvprintf_impl+0x254>
   12b74:	2a68      	cmp	r2, #104	; 0x68
   12b76:	d031      	beq.n	12bdc <z_cbvprintf_impl+0x264>
   12b78:	2a6a      	cmp	r2, #106	; 0x6a
   12b7a:	d04b      	beq.n	12c14 <z_cbvprintf_impl+0x29c>
   12b7c:	2a4c      	cmp	r2, #76	; 0x4c
   12b7e:	d051      	beq.n	12c24 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   12b80:	461a      	mov	r2, r3
   12b82:	f812 3b01 	ldrb.w	r3, [r2], #1
   12b86:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   12b88:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   12b8a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   12b8e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   12b92:	f200 80be 	bhi.w	12d12 <z_cbvprintf_impl+0x39a>
   12b96:	2b6d      	cmp	r3, #109	; 0x6d
   12b98:	d851      	bhi.n	12c3e <z_cbvprintf_impl+0x2c6>
   12b9a:	2b69      	cmp	r3, #105	; 0x69
   12b9c:	f200 80b9 	bhi.w	12d12 <z_cbvprintf_impl+0x39a>
   12ba0:	2b57      	cmp	r3, #87	; 0x57
   12ba2:	d867      	bhi.n	12c74 <z_cbvprintf_impl+0x2fc>
   12ba4:	2b41      	cmp	r3, #65	; 0x41
   12ba6:	d003      	beq.n	12bb0 <z_cbvprintf_impl+0x238>
   12ba8:	3b45      	subs	r3, #69	; 0x45
   12baa:	2b02      	cmp	r3, #2
   12bac:	f200 80b1 	bhi.w	12d12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   12bb0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12bb4:	2204      	movs	r2, #4
   12bb6:	f362 0302 	bfi	r3, r2, #0, #3
   12bba:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   12bbe:	2301      	movs	r3, #1
			break;
   12bc0:	e073      	b.n	12caa <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   12bc2:	fb0c 0202 	mla	r2, ip, r2, r0
   12bc6:	3a30      	subs	r2, #48	; 0x30
   12bc8:	460b      	mov	r3, r1
   12bca:	e75d      	b.n	12a88 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   12bcc:	2a74      	cmp	r2, #116	; 0x74
   12bce:	d025      	beq.n	12c1c <z_cbvprintf_impl+0x2a4>
   12bd0:	2a7a      	cmp	r2, #122	; 0x7a
   12bd2:	d1d5      	bne.n	12b80 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   12bd4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12bd8:	2106      	movs	r1, #6
   12bda:	e00c      	b.n	12bf6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   12bdc:	785a      	ldrb	r2, [r3, #1]
   12bde:	2a68      	cmp	r2, #104	; 0x68
   12be0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12be4:	d106      	bne.n	12bf4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   12be6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12be8:	f361 02c6 	bfi	r2, r1, #3, #4
   12bec:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   12bf0:	3302      	adds	r3, #2
   12bf2:	e7c5      	b.n	12b80 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   12bf4:	2102      	movs	r1, #2
   12bf6:	f361 02c6 	bfi	r2, r1, #3, #4
   12bfa:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   12bfe:	3301      	adds	r3, #1
   12c00:	e7be      	b.n	12b80 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   12c02:	785a      	ldrb	r2, [r3, #1]
   12c04:	2a6c      	cmp	r2, #108	; 0x6c
   12c06:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c0a:	d101      	bne.n	12c10 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   12c0c:	2104      	movs	r1, #4
   12c0e:	e7eb      	b.n	12be8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   12c10:	2103      	movs	r1, #3
   12c12:	e7f0      	b.n	12bf6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   12c14:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c18:	2105      	movs	r1, #5
   12c1a:	e7ec      	b.n	12bf6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   12c1c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   12c20:	2107      	movs	r1, #7
   12c22:	e7e8      	b.n	12bf6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   12c24:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   12c28:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12c2c:	f022 0202 	bic.w	r2, r2, #2
   12c30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12c34:	f042 0202 	orr.w	r2, r2, #2
   12c38:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   12c3c:	e7df      	b.n	12bfe <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   12c3e:	3b6e      	subs	r3, #110	; 0x6e
   12c40:	b2d9      	uxtb	r1, r3
   12c42:	2301      	movs	r3, #1
   12c44:	408b      	lsls	r3, r1
   12c46:	f240 4182 	movw	r1, #1154	; 0x482
   12c4a:	420b      	tst	r3, r1
   12c4c:	d137      	bne.n	12cbe <z_cbvprintf_impl+0x346>
   12c4e:	f013 0f24 	tst.w	r3, #36	; 0x24
   12c52:	d151      	bne.n	12cf8 <z_cbvprintf_impl+0x380>
   12c54:	07d8      	lsls	r0, r3, #31
   12c56:	d55c      	bpl.n	12d12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   12c58:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12c5c:	2103      	movs	r1, #3
   12c5e:	f361 0302 	bfi	r3, r1, #0, #3
   12c62:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c66:	f002 0378 	and.w	r3, r2, #120	; 0x78
   12c6a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   12c6e:	424b      	negs	r3, r1
   12c70:	414b      	adcs	r3, r1
   12c72:	e01a      	b.n	12caa <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   12c74:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   12c78:	b2c9      	uxtb	r1, r1
   12c7a:	2001      	movs	r0, #1
   12c7c:	fa00 f101 	lsl.w	r1, r0, r1
   12c80:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12c84:	d194      	bne.n	12bb0 <z_cbvprintf_impl+0x238>
   12c86:	f640 0601 	movw	r6, #2049	; 0x801
   12c8a:	4231      	tst	r1, r6
   12c8c:	d11d      	bne.n	12cca <z_cbvprintf_impl+0x352>
   12c8e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12c92:	d03e      	beq.n	12d12 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   12c94:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12c98:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c9c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12ca0:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   12ca2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   12ca6:	d034      	beq.n	12d12 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   12ca8:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   12caa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   12cae:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12cb2:	430b      	orrs	r3, r1
   12cb4:	f363 0241 	bfi	r2, r3, #1, #1
   12cb8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   12cbc:	e6fd      	b.n	12aba <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   12cbe:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12cc2:	2102      	movs	r1, #2
   12cc4:	f361 0302 	bfi	r3, r1, #0, #3
   12cc8:	e7e8      	b.n	12c9c <z_cbvprintf_impl+0x324>
   12cca:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   12cce:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12cd0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12cd4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12cd8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12cda:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   12cde:	bf02      	ittt	eq
   12ce0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   12ce4:	f041 0101 	orreq.w	r1, r1, #1
   12ce8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   12cec:	2b63      	cmp	r3, #99	; 0x63
   12cee:	d1db      	bne.n	12ca8 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12cf0:	1e13      	subs	r3, r2, #0
   12cf2:	bf18      	it	ne
   12cf4:	2301      	movne	r3, #1
   12cf6:	e7d8      	b.n	12caa <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   12cf8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12cfc:	2103      	movs	r1, #3
   12cfe:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   12d02:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12d06:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   12d0a:	bf14      	ite	ne
   12d0c:	2301      	movne	r3, #1
   12d0e:	2300      	moveq	r3, #0
   12d10:	e7cb      	b.n	12caa <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   12d12:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12d16:	f043 0301 	orr.w	r3, r3, #1
   12d1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   12d1e:	e7c3      	b.n	12ca8 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   12d20:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   12d24:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12d26:	bfb4      	ite	lt
   12d28:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   12d2c:	f04f 38ff 	movge.w	r8, #4294967295
   12d30:	e6d5      	b.n	12ade <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   12d32:	0798      	lsls	r0, r3, #30
   12d34:	f57f aee2 	bpl.w	12afc <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   12d38:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   12d3c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   12d40:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12d42:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   12d46:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   12d4a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12d4e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12d50:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12d54:	d133      	bne.n	12dbe <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   12d56:	1ecb      	subs	r3, r1, #3
   12d58:	2b04      	cmp	r3, #4
   12d5a:	d804      	bhi.n	12d66 <z_cbvprintf_impl+0x3ee>
   12d5c:	e8df f003 	tbb	[pc, r3]
   12d60:	21464621 	.word	0x21464621
   12d64:	21          	.byte	0x21
   12d65:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12d66:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   12d68:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   12d6a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   12d6e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12d72:	d11c      	bne.n	12dae <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   12d74:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   12d78:	17da      	asrs	r2, r3, #31
   12d7a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   12d7e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   12d80:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   12d84:	f013 0603 	ands.w	r6, r3, #3
   12d88:	d050      	beq.n	12e2c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   12d8a:	9b03      	ldr	r3, [sp, #12]
   12d8c:	463a      	mov	r2, r7
   12d8e:	4659      	mov	r1, fp
   12d90:	4648      	mov	r0, r9
   12d92:	f017 f93c 	bl	2a00e <outs>
   12d96:	2800      	cmp	r0, #0
   12d98:	f2c0 8153 	blt.w	13042 <z_cbvprintf_impl+0x6ca>
   12d9c:	4405      	add	r5, r0
			continue;
   12d9e:	9f03      	ldr	r7, [sp, #12]
   12da0:	e5f2      	b.n	12988 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12da2:	f854 3b04 	ldr.w	r3, [r4], #4
   12da6:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   12da8:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   12dac:	e7e8      	b.n	12d80 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   12dae:	2902      	cmp	r1, #2
   12db0:	d1e5      	bne.n	12d7e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   12db2:	b21a      	sxth	r2, r3
   12db4:	f343 33c0 	sbfx	r3, r3, #15, #1
   12db8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12dbc:	e7df      	b.n	12d7e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12dbe:	2b02      	cmp	r3, #2
   12dc0:	d124      	bne.n	12e0c <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   12dc2:	1ecb      	subs	r3, r1, #3
   12dc4:	2b04      	cmp	r3, #4
   12dc6:	d804      	bhi.n	12dd2 <z_cbvprintf_impl+0x45a>
   12dc8:	e8df f003 	tbb	[pc, r3]
   12dcc:	18101018 	.word	0x18101018
   12dd0:	18          	.byte	0x18
   12dd1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   12dd2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   12dd4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12dd8:	f04f 0200 	mov.w	r2, #0
   12ddc:	d014      	beq.n	12e08 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   12dde:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   12de0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   12de4:	d1cc      	bne.n	12d80 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   12de6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12de8:	930e      	str	r3, [sp, #56]	; 0x38
   12dea:	e7c9      	b.n	12d80 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   12dec:	3407      	adds	r4, #7
   12dee:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   12df2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   12df6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   12dfa:	e7c1      	b.n	12d80 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   12dfc:	f854 3b04 	ldr.w	r3, [r4], #4
   12e00:	930e      	str	r3, [sp, #56]	; 0x38
   12e02:	2300      	movs	r3, #0
   12e04:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   12e06:	e7bb      	b.n	12d80 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   12e08:	b2db      	uxtb	r3, r3
   12e0a:	e7cd      	b.n	12da8 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   12e0c:	2b04      	cmp	r3, #4
   12e0e:	d108      	bne.n	12e22 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   12e10:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12e12:	f024 0407 	bic.w	r4, r4, #7
   12e16:	e9d4 2300 	ldrd	r2, r3, [r4]
   12e1a:	3408      	adds	r4, #8
   12e1c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   12e20:	e7ae      	b.n	12d80 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12e22:	2b03      	cmp	r3, #3
   12e24:	d1ac      	bne.n	12d80 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   12e26:	f854 3b04 	ldr.w	r3, [r4], #4
   12e2a:	e7dd      	b.n	12de8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   12e2c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12e30:	2878      	cmp	r0, #120	; 0x78
   12e32:	d8b4      	bhi.n	12d9e <z_cbvprintf_impl+0x426>
   12e34:	2862      	cmp	r0, #98	; 0x62
   12e36:	d81c      	bhi.n	12e72 <z_cbvprintf_impl+0x4fa>
   12e38:	2825      	cmp	r0, #37	; 0x25
   12e3a:	f43f adad 	beq.w	12998 <z_cbvprintf_impl+0x20>
   12e3e:	2858      	cmp	r0, #88	; 0x58
   12e40:	d1ad      	bne.n	12d9e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12e42:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12e46:	9300      	str	r3, [sp, #0]
   12e48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   12e4c:	ab08      	add	r3, sp, #32
   12e4e:	aa10      	add	r2, sp, #64	; 0x40
   12e50:	f017 f897 	bl	29f82 <encode_uint>
			if (precision >= 0) {
   12e54:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   12e58:	4607      	mov	r7, r0
			if (precision >= 0) {
   12e5a:	f280 809a 	bge.w	12f92 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   12e5e:	2f00      	cmp	r7, #0
   12e60:	d09d      	beq.n	12d9e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12e62:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12e66:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   12e68:	2e00      	cmp	r6, #0
   12e6a:	f000 80c1 	beq.w	12ff0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   12e6e:	3001      	adds	r0, #1
   12e70:	e0be      	b.n	12ff0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   12e72:	3863      	subs	r0, #99	; 0x63
   12e74:	2815      	cmp	r0, #21
   12e76:	d892      	bhi.n	12d9e <z_cbvprintf_impl+0x426>
   12e78:	a201      	add	r2, pc, #4	; (adr r2, 12e80 <z_cbvprintf_impl+0x508>)
   12e7a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   12e7e:	bf00      	nop
   12e80:	00012f55 	.word	0x00012f55
   12e84:	00012f67 	.word	0x00012f67
   12e88:	00012d9f 	.word	0x00012d9f
   12e8c:	00012d9f 	.word	0x00012d9f
   12e90:	00012d9f 	.word	0x00012d9f
   12e94:	00012d9f 	.word	0x00012d9f
   12e98:	00012f67 	.word	0x00012f67
   12e9c:	00012d9f 	.word	0x00012d9f
   12ea0:	00012d9f 	.word	0x00012d9f
   12ea4:	00012d9f 	.word	0x00012d9f
   12ea8:	00012d9f 	.word	0x00012d9f
   12eac:	00012ff5 	.word	0x00012ff5
   12eb0:	00012f8d 	.word	0x00012f8d
   12eb4:	00012fb3 	.word	0x00012fb3
   12eb8:	00012d9f 	.word	0x00012d9f
   12ebc:	00012d9f 	.word	0x00012d9f
   12ec0:	00012ed9 	.word	0x00012ed9
   12ec4:	00012d9f 	.word	0x00012d9f
   12ec8:	00012f8d 	.word	0x00012f8d
   12ecc:	00012d9f 	.word	0x00012d9f
   12ed0:	00012d9f 	.word	0x00012d9f
   12ed4:	00012f8d 	.word	0x00012f8d
			if (precision >= 0) {
   12ed8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   12edc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   12ede:	db35      	blt.n	12f4c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   12ee0:	4651      	mov	r1, sl
   12ee2:	4638      	mov	r0, r7
   12ee4:	f018 f837 	bl	2af56 <strnlen>
			bpe = bps + len;
   12ee8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   12eec:	2f00      	cmp	r7, #0
   12eee:	f43f af56 	beq.w	12d9e <z_cbvprintf_impl+0x426>
		char sign = 0;
   12ef2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   12ef4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   12ef8:	f013 0210 	ands.w	r2, r3, #16
   12efc:	9205      	str	r2, [sp, #20]
   12efe:	f000 8093 	beq.w	13028 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   12f02:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12f04:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   12f06:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   12f08:	bf48      	it	mi
   12f0a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   12f0c:	9204      	str	r2, [sp, #16]
   12f0e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   12f10:	bf48      	it	mi
   12f12:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   12f14:	f1b8 0f00 	cmp.w	r8, #0
   12f18:	f340 80a0 	ble.w	1305c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   12f1c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   12f20:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   12f24:	f3c2 0380 	ubfx	r3, r2, #2, #1
   12f28:	0750      	lsls	r0, r2, #29
   12f2a:	9306      	str	r3, [sp, #24]
   12f2c:	f100 8096 	bmi.w	1305c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   12f30:	0651      	lsls	r1, r2, #25
   12f32:	f140 8089 	bpl.w	13048 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   12f36:	b13e      	cbz	r6, 12f48 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   12f38:	4659      	mov	r1, fp
   12f3a:	4630      	mov	r0, r6
   12f3c:	47c8      	blx	r9
   12f3e:	2800      	cmp	r0, #0
   12f40:	db7f      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   12f42:	9b06      	ldr	r3, [sp, #24]
   12f44:	3501      	adds	r5, #1
   12f46:	461e      	mov	r6, r3
					pad = '0';
   12f48:	2230      	movs	r2, #48	; 0x30
   12f4a:	e07e      	b.n	1304a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   12f4c:	4638      	mov	r0, r7
   12f4e:	f017 fffb 	bl	2af48 <strlen>
   12f52:	e7c9      	b.n	12ee8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12f54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f56:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   12f5a:	2600      	movs	r6, #0
			bps = buf;
   12f5c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   12f5e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   12f62:	2001      	movs	r0, #1
   12f64:	e7c6      	b.n	12ef4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   12f66:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   12f68:	bf5c      	itt	pl
   12f6a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   12f6e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   12f70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   12f74:	bf48      	it	mi
   12f76:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   12f78:	2b00      	cmp	r3, #0
   12f7a:	f6bf af62 	bge.w	12e42 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   12f7e:	4252      	negs	r2, r2
   12f80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12f84:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   12f88:	262d      	movs	r6, #45	; 0x2d
   12f8a:	e75a      	b.n	12e42 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   12f8c:	2600      	movs	r6, #0
   12f8e:	e758      	b.n	12e42 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   12f90:	2600      	movs	r6, #0
				conv->flag_zero = false;
   12f92:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   12f96:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12f9a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   12f9c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12fa0:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   12fa2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   12fa6:	f67f af5a 	bls.w	12e5e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   12faa:	ebaa 0303 	sub.w	r3, sl, r3
   12fae:	9311      	str	r3, [sp, #68]	; 0x44
   12fb0:	e755      	b.n	12e5e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   12fb2:	980e      	ldr	r0, [sp, #56]	; 0x38
   12fb4:	b390      	cbz	r0, 1301c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12fb6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12fba:	9300      	str	r3, [sp, #0]
   12fbc:	aa10      	add	r2, sp, #64	; 0x40
   12fbe:	ab08      	add	r3, sp, #32
   12fc0:	2100      	movs	r1, #0
   12fc2:	f016 ffde 	bl	29f82 <encode_uint>
				conv->altform_0c = true;
   12fc6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   12fca:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12fce:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   12fd2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   12fd6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12fda:	4607      	mov	r7, r0
				conv->altform_0c = true;
   12fdc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   12fe0:	dad6      	bge.n	12f90 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   12fe2:	2800      	cmp	r0, #0
   12fe4:	f43f aedb 	beq.w	12d9e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   12fe8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   12fec:	1a18      	subs	r0, r3, r0
		char sign = 0;
   12fee:	2600      	movs	r6, #0
   12ff0:	469a      	mov	sl, r3
   12ff2:	e77f      	b.n	12ef4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   12ff4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   12ff6:	2907      	cmp	r1, #7
   12ff8:	f63f aed1 	bhi.w	12d9e <z_cbvprintf_impl+0x426>
   12ffc:	e8df f001 	tbb	[pc, r1]
   13000:	0c06040c 	.word	0x0c06040c
   13004:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   13008:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   1300a:	e6c8      	b.n	12d9e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   1300c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   1300e:	e6c6      	b.n	12d9e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   13010:	17ea      	asrs	r2, r5, #31
   13012:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   13016:	e6c2      	b.n	12d9e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13018:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   1301a:	e6c0      	b.n	12d9e <z_cbvprintf_impl+0x426>
   1301c:	4f2e      	ldr	r7, [pc, #184]	; (130d8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   1301e:	4606      	mov	r6, r0
			bpe = bps + 5;
   13020:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   13024:	2005      	movs	r0, #5
   13026:	e765      	b.n	12ef4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   13028:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   1302a:	bf48      	it	mi
   1302c:	3001      	addmi	r0, #1
   1302e:	e769      	b.n	12f04 <z_cbvprintf_impl+0x58c>
   13030:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   13032:	4610      	mov	r0, r2
   13034:	9206      	str	r2, [sp, #24]
   13036:	4659      	mov	r1, fp
   13038:	47c8      	blx	r9
   1303a:	2800      	cmp	r0, #0
   1303c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13040:	da04      	bge.n	1304c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   13042:	b015      	add	sp, #84	; 0x54
   13044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   13048:	2220      	movs	r2, #32
					pad = '0';
   1304a:	4643      	mov	r3, r8
				while (width-- > 0) {
   1304c:	4619      	mov	r1, r3
   1304e:	2900      	cmp	r1, #0
   13050:	f103 33ff 	add.w	r3, r3, #4294967295
   13054:	dcec      	bgt.n	13030 <z_cbvprintf_impl+0x6b8>
   13056:	4445      	add	r5, r8
   13058:	1a6d      	subs	r5, r5, r1
   1305a:	4698      	mov	r8, r3
		if (sign != 0) {
   1305c:	b12e      	cbz	r6, 1306a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   1305e:	4659      	mov	r1, fp
   13060:	4630      	mov	r0, r6
   13062:	47c8      	blx	r9
   13064:	2800      	cmp	r0, #0
   13066:	dbec      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   13068:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1306a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1306e:	06da      	lsls	r2, r3, #27
   13070:	d401      	bmi.n	13076 <z_cbvprintf_impl+0x6fe>
   13072:	071b      	lsls	r3, r3, #28
   13074:	d505      	bpl.n	13082 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   13076:	4659      	mov	r1, fp
   13078:	2030      	movs	r0, #48	; 0x30
   1307a:	47c8      	blx	r9
   1307c:	2800      	cmp	r0, #0
   1307e:	dbe0      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   13080:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   13082:	9b05      	ldr	r3, [sp, #20]
   13084:	b133      	cbz	r3, 13094 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   13086:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   1308a:	4659      	mov	r1, fp
   1308c:	47c8      	blx	r9
   1308e:	2800      	cmp	r0, #0
   13090:	dbd7      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   13092:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13094:	9e04      	ldr	r6, [sp, #16]
   13096:	442e      	add	r6, r5
   13098:	e005      	b.n	130a6 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   1309a:	4659      	mov	r1, fp
   1309c:	2030      	movs	r0, #48	; 0x30
   1309e:	47c8      	blx	r9
   130a0:	2800      	cmp	r0, #0
   130a2:	dbce      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   130a4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   130a6:	1b73      	subs	r3, r6, r5
   130a8:	2b00      	cmp	r3, #0
   130aa:	dcf6      	bgt.n	1309a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   130ac:	4653      	mov	r3, sl
   130ae:	463a      	mov	r2, r7
   130b0:	4659      	mov	r1, fp
   130b2:	4648      	mov	r0, r9
   130b4:	f016 ffab 	bl	2a00e <outs>
   130b8:	2800      	cmp	r0, #0
   130ba:	dbc2      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   130bc:	4405      	add	r5, r0
		while (width > 0) {
   130be:	44a8      	add	r8, r5
   130c0:	eba8 0305 	sub.w	r3, r8, r5
   130c4:	2b00      	cmp	r3, #0
   130c6:	f77f ae6a 	ble.w	12d9e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   130ca:	4659      	mov	r1, fp
   130cc:	2020      	movs	r0, #32
   130ce:	47c8      	blx	r9
   130d0:	2800      	cmp	r0, #0
   130d2:	dbb6      	blt.n	13042 <z_cbvprintf_impl+0x6ca>
   130d4:	3501      	adds	r5, #1
			--width;
   130d6:	e7f3      	b.n	130c0 <z_cbvprintf_impl+0x748>
   130d8:	0002fa5b 	.word	0x0002fa5b

000130dc <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   130dc:	b508      	push	{r3, lr}
	__asm__ volatile(
   130de:	f04f 0240 	mov.w	r2, #64	; 0x40
   130e2:	f3ef 8311 	mrs	r3, BASEPRI
   130e6:	f382 8812 	msr	BASEPRI_MAX, r2
   130ea:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   130ee:	f002 fad7 	bl	156a0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   130f2:	4803      	ldr	r0, [pc, #12]	; (13100 <sys_reboot+0x24>)
   130f4:	f016 fda1 	bl	29c3a <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   130f8:	f001 fd30 	bl	14b5c <arch_cpu_idle>
   130fc:	e7fc      	b.n	130f8 <sys_reboot+0x1c>
   130fe:	bf00      	nop
   13100:	0002fa61 	.word	0x0002fa61

00013104 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13104:	f00f ba3c 	b.w	22580 <SystemInit>

00013108 <z_log_minimal_hexdump_print>:
	}
	printk("\n");
}

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
   13108:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1310c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 131a8 <z_log_minimal_hexdump_print+0xa0>
   13110:	4680      	mov	r8, r0
   13112:	460f      	mov	r7, r1
   13114:	4616      	mov	r6, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
   13116:	4614      	mov	r4, r2
   13118:	19bd      	adds	r5, r7, r6
   1311a:	1b2d      	subs	r5, r5, r4
   1311c:	b90c      	cbnz	r4, 13122 <z_log_minimal_hexdump_print+0x1a>
		}

		size -= HEXDUMP_BYTES_IN_LINE;
		data_buffer += HEXDUMP_BYTES_IN_LINE;
	}
}
   1311e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
   13122:	f108 33ff 	add.w	r3, r8, #4294967295
   13126:	2b03      	cmp	r3, #3
   13128:	bf98      	it	ls
   1312a:	f819 1003 	ldrbls.w	r1, [r9, r3]
		printk("%c: ", z_log_minimal_level_to_char(level));
   1312e:	481f      	ldr	r0, [pc, #124]	; (131ac <z_log_minimal_hexdump_print+0xa4>)
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13130:	f8df a07c 	ldr.w	sl, [pc, #124]	; 131b0 <z_log_minimal_hexdump_print+0xa8>
   13134:	bf88      	it	hi
   13136:	213f      	movhi	r1, #63	; 0x3f
		printk("%c: ", z_log_minimal_level_to_char(level));
   13138:	f016 fd7f 	bl	29c3a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1313c:	f04f 0b00 	mov.w	fp, #0
		if (i < length) {
   13140:	455c      	cmp	r4, fp
   13142:	d928      	bls.n	13196 <z_log_minimal_hexdump_print+0x8e>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
   13144:	f815 100b 	ldrb.w	r1, [r5, fp]
   13148:	4650      	mov	r0, sl
   1314a:	f016 fd76 	bl	29c3a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1314e:	f10b 0b01 	add.w	fp, fp, #1
   13152:	f1bb 0f08 	cmp.w	fp, #8
   13156:	d1f3      	bne.n	13140 <z_log_minimal_hexdump_print+0x38>
	printk("|");
   13158:	4816      	ldr	r0, [pc, #88]	; (131b4 <z_log_minimal_hexdump_print+0xac>)
			printk("%c", isprint((int)c) != 0 ? c : '.');
   1315a:	f8df b05c 	ldr.w	fp, [pc, #92]	; 131b8 <z_log_minimal_hexdump_print+0xb0>
	printk("|");
   1315e:	f016 fd6c 	bl	29c3a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13162:	f04f 0a00 	mov.w	sl, #0
		if (i < length) {
   13166:	4554      	cmp	r4, sl
   13168:	d919      	bls.n	1319e <z_log_minimal_hexdump_print+0x96>
			unsigned char c = data[i];
   1316a:	f815 100a 	ldrb.w	r1, [r5, sl]
	return (int)((((unsigned)c) >= ' ') &&
   1316e:	f1a1 0220 	sub.w	r2, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
   13172:	2a5f      	cmp	r2, #95	; 0x5f
   13174:	bf28      	it	cs
   13176:	212e      	movcs	r1, #46	; 0x2e
   13178:	4658      	mov	r0, fp
   1317a:	f016 fd5e 	bl	29c3a <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1317e:	f10a 0a01 	add.w	sl, sl, #1
   13182:	f1ba 0f08 	cmp.w	sl, #8
   13186:	d1ee      	bne.n	13166 <z_log_minimal_hexdump_print+0x5e>
	printk("\n");
   13188:	480c      	ldr	r0, [pc, #48]	; (131bc <z_log_minimal_hexdump_print+0xb4>)
   1318a:	f016 fd56 	bl	29c3a <printk>
		if (size < HEXDUMP_BYTES_IN_LINE) {
   1318e:	2c07      	cmp	r4, #7
   13190:	d9c5      	bls.n	1311e <z_log_minimal_hexdump_print+0x16>
		size -= HEXDUMP_BYTES_IN_LINE;
   13192:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
   13194:	e7c0      	b.n	13118 <z_log_minimal_hexdump_print+0x10>
			printk("   ");
   13196:	480a      	ldr	r0, [pc, #40]	; (131c0 <z_log_minimal_hexdump_print+0xb8>)
   13198:	f016 fd4f 	bl	29c3a <printk>
   1319c:	e7d7      	b.n	1314e <z_log_minimal_hexdump_print+0x46>
			printk(" ");
   1319e:	4809      	ldr	r0, [pc, #36]	; (131c4 <z_log_minimal_hexdump_print+0xbc>)
   131a0:	f016 fd4b 	bl	29c3a <printk>
   131a4:	e7eb      	b.n	1317e <z_log_minimal_hexdump_print+0x76>
   131a6:	bf00      	nop
   131a8:	0002fa9e 	.word	0x0002fa9e
   131ac:	0002fa8a 	.word	0x0002fa8a
   131b0:	0002fa8f 	.word	0x0002fa8f
   131b4:	0002fa99 	.word	0x0002fa99
   131b8:	0002fa9b 	.word	0x0002fa9b
   131bc:	00033069 	.word	0x00033069
   131c0:	0002fa95 	.word	0x0002fa95
   131c4:	0002fa97 	.word	0x0002fa97

000131c8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
   131c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   131cc:	460f      	mov	r7, r1
   131ce:	4606      	mov	r6, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   131d0:	2108      	movs	r1, #8
   131d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
   131d4:	f8df 9050 	ldr.w	r9, [pc, #80]	; 13228 <nvs_recover_last_ate+0x60>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   131d8:	f016 ffdf 	bl	2a19a <nvs_al_size.isra.0>
	*addr -= ate_size;
   131dc:	683c      	ldr	r4, [r7, #0]
   131de:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   131e0:	4680      	mov	r8, r0
	*addr -= ate_size;
   131e2:	603c      	str	r4, [r7, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
   131e4:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
   131e8:	42ac      	cmp	r4, r5
   131ea:	d803      	bhi.n	131f4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
   131ec:	2000      	movs	r0, #0
}
   131ee:	b003      	add	sp, #12
   131f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   131f4:	2308      	movs	r3, #8
   131f6:	466a      	mov	r2, sp
   131f8:	4621      	mov	r1, r4
   131fa:	4630      	mov	r0, r6
   131fc:	f016 ff40 	bl	2a080 <nvs_flash_rd>
		if (rc) {
   13200:	2800      	cmp	r0, #0
   13202:	d1f4      	bne.n	131ee <nvs_recover_last_ate+0x26>
		if (nvs_ate_valid(fs, &end_ate)) {
   13204:	4669      	mov	r1, sp
   13206:	4630      	mov	r0, r6
   13208:	f016 ffd1 	bl	2a1ae <nvs_ate_valid>
   1320c:	b140      	cbz	r0, 13220 <nvs_recover_last_ate+0x58>
			data_end_addr += end_ate.offset + end_ate.len;
   1320e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13212:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
   13216:	603c      	str	r4, [r7, #0]
			data_end_addr &= ADDR_SECT_MASK;
   13218:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
   1321c:	4413      	add	r3, r2
   1321e:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
   13220:	eba4 0408 	sub.w	r4, r4, r8
   13224:	e7e0      	b.n	131e8 <nvs_recover_last_ate+0x20>
   13226:	bf00      	nop
   13228:	ffff0000 	.word	0xffff0000

0001322c <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   1322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13230:	4604      	mov	r4, r0
   13232:	b088      	sub	sp, #32

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   13234:	f100 0714 	add.w	r7, r0, #20
	return z_impl_k_mutex_init(mutex);
   13238:	4638      	mov	r0, r7
   1323a:	f01a fd85 	bl	2dd48 <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1323e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   13240:	6883      	ldr	r3, [r0, #8]
   13242:	68db      	ldr	r3, [r3, #12]
   13244:	4798      	blx	r3
   13246:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   13248:	b948      	cbnz	r0, 1325e <nvs_mount+0x32>
		LOG_ERR("Could not obtain flash parameters");
   1324a:	48ac      	ldr	r0, [pc, #688]	; (134fc <nvs_mount+0x2d0>)
   1324c:	2145      	movs	r1, #69	; 0x45

	write_block_size = flash_get_write_block_size(fs->flash_device);

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
		LOG_ERR("Unsupported write block size");
   1324e:	f016 ff0a 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   13252:	f06f 0515 	mvn.w	r5, #21
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   13256:	4628      	mov	r0, r5
   13258:	b008      	add	sp, #32
   1325a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	write_block_size = flash_get_write_block_size(fs->flash_device);
   1325e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
   13260:	6883      	ldr	r3, [r0, #8]
   13262:	68db      	ldr	r3, [r3, #12]
   13264:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   13266:	6803      	ldr	r3, [r0, #0]
   13268:	3b01      	subs	r3, #1
   1326a:	2b1f      	cmp	r3, #31
   1326c:	d902      	bls.n	13274 <nvs_mount+0x48>
		LOG_ERR("Unsupported write block size");
   1326e:	48a4      	ldr	r0, [pc, #656]	; (13500 <nvs_mount+0x2d4>)
   13270:	2145      	movs	r1, #69	; 0x45
   13272:	e7ec      	b.n	1324e <nvs_mount+0x22>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   13274:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   13276:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   13278:	aa05      	add	r2, sp, #20
   1327a:	f01a f9fd 	bl	2d678 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1327e:	b110      	cbz	r0, 13286 <nvs_mount+0x5a>
		LOG_ERR("Unable to get page info");
   13280:	48a0      	ldr	r0, [pc, #640]	; (13504 <nvs_mount+0x2d8>)
   13282:	2145      	movs	r1, #69	; 0x45
   13284:	e7e3      	b.n	1324e <nvs_mount+0x22>
	if (!fs->sector_size || fs->sector_size % info.size) {
   13286:	89a5      	ldrh	r5, [r4, #12]
   13288:	b12d      	cbz	r5, 13296 <nvs_mount+0x6a>
   1328a:	9b06      	ldr	r3, [sp, #24]
   1328c:	fbb5 f2f3 	udiv	r2, r5, r3
   13290:	fb03 5512 	mls	r5, r3, r2, r5
   13294:	b115      	cbz	r5, 1329c <nvs_mount+0x70>
		LOG_ERR("Invalid sector size");
   13296:	489c      	ldr	r0, [pc, #624]	; (13508 <nvs_mount+0x2dc>)
   13298:	2145      	movs	r1, #69	; 0x45
   1329a:	e7d8      	b.n	1324e <nvs_mount+0x22>
	if (fs->sector_count < 2) {
   1329c:	89e3      	ldrh	r3, [r4, #14]
   1329e:	2b01      	cmp	r3, #1
   132a0:	d802      	bhi.n	132a8 <nvs_mount+0x7c>
		LOG_ERR("Configuration error - sector count");
   132a2:	489a      	ldr	r0, [pc, #616]	; (1350c <nvs_mount+0x2e0>)
   132a4:	2145      	movs	r1, #69	; 0x45
   132a6:	e7d2      	b.n	1324e <nvs_mount+0x22>
	uint8_t erase_value = fs->flash_parameters->erase_value;
   132a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
   132aa:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
   132ac:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   132b0:	f04f 33ff 	mov.w	r3, #4294967295
   132b4:	f04f 32ff 	mov.w	r2, #4294967295
   132b8:	4638      	mov	r0, r7
   132ba:	f010 fef1 	bl	240a0 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132be:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   132c0:	2108      	movs	r1, #8
   132c2:	f016 ff6a 	bl	2a19a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
   132c6:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   132c8:	4606      	mov	r6, r0
	for (i = 0; i < fs->sector_count; i++) {
   132ca:	89e3      	ldrh	r3, [r4, #14]
   132cc:	fa1f fa85 	uxth.w	sl, r5
   132d0:	4553      	cmp	r3, sl
   132d2:	d808      	bhi.n	132e6 <nvs_mount+0xba>
	if (closed_sectors == fs->sector_count) {
   132d4:	89e3      	ldrh	r3, [r4, #14]
   132d6:	4543      	cmp	r3, r8
   132d8:	d123      	bne.n	13322 <nvs_mount+0xf6>
	return z_impl_k_mutex_unlock(mutex);
   132da:	4638      	mov	r0, r7
   132dc:	f010 ff96 	bl	2420c <z_impl_k_mutex_unlock>
		rc = -EDEADLK;
   132e0:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   132e4:	e7b7      	b.n	13256 <nvs_mount+0x2a>
		       (uint16_t)(fs->sector_size - ate_size);
   132e6:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
   132e8:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
   132ea:	1b89      	subs	r1, r1, r6
		addr = (i << ADDR_SECT_SHIFT) +
   132ec:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   132f0:	464a      	mov	r2, r9
   132f2:	2308      	movs	r3, #8
   132f4:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
   132f6:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   132f8:	f016 ff07 	bl	2a10a <nvs_flash_cmp_const>
		if (rc) {
   132fc:	b178      	cbz	r0, 1331e <nvs_mount+0xf2>
			nvs_sector_advance(fs, &addr);
   132fe:	4669      	mov	r1, sp
   13300:	4620      	mov	r0, r4
   13302:	f016 fecb 	bl	2a09c <nvs_sector_advance>
			closed_sectors++;
   13306:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1330a:	9900      	ldr	r1, [sp, #0]
   1330c:	2308      	movs	r3, #8
   1330e:	464a      	mov	r2, r9
   13310:	4620      	mov	r0, r4
			closed_sectors++;
   13312:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   13316:	f016 fef8 	bl	2a10a <nvs_flash_cmp_const>
			if (!rc) {
   1331a:	2800      	cmp	r0, #0
   1331c:	d0da      	beq.n	132d4 <nvs_mount+0xa8>
	for (i = 0; i < fs->sector_count; i++) {
   1331e:	3501      	adds	r5, #1
   13320:	e7d3      	b.n	132ca <nvs_mount+0x9e>
	if (i == fs->sector_count) {
   13322:	4553      	cmp	r3, sl
   13324:	d10b      	bne.n	1333e <nvs_mount+0x112>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   13326:	9900      	ldr	r1, [sp, #0]
   13328:	2308      	movs	r3, #8
   1332a:	464a      	mov	r2, r9
   1332c:	1b89      	subs	r1, r1, r6
   1332e:	4620      	mov	r0, r4
   13330:	f016 feeb 	bl	2a10a <nvs_flash_cmp_const>
		if (!rc) {
   13334:	b918      	cbnz	r0, 1333e <nvs_mount+0x112>
			nvs_sector_advance(fs, &addr);
   13336:	4669      	mov	r1, sp
   13338:	4620      	mov	r0, r4
   1333a:	f016 feaf 	bl	2a09c <nvs_sector_advance>
	rc = nvs_recover_last_ate(fs, &addr);
   1333e:	4669      	mov	r1, sp
   13340:	4620      	mov	r0, r4
   13342:	f7ff ff41 	bl	131c8 <nvs_recover_last_ate>
	if (rc) {
   13346:	4605      	mov	r5, r0
   13348:	b118      	cbz	r0, 13352 <nvs_mount+0x126>
   1334a:	4638      	mov	r0, r7
   1334c:	f010 ff5e 	bl	2420c <z_impl_k_mutex_unlock>
	if (rc) {
   13350:	e781      	b.n	13256 <nvs_mount+0x2a>
	fs->ate_wra = addr;
   13352:	9b00      	ldr	r3, [sp, #0]
   13354:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   13356:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1335a:	ea4f 4808 	mov.w	r8, r8, lsl #16
   1335e:	f8c4 8008 	str.w	r8, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
   13362:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   13366:	4299      	cmp	r1, r3
   13368:	d30f      	bcc.n	1338a <nvs_mount+0x15e>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1336a:	2308      	movs	r3, #8
   1336c:	aa01      	add	r2, sp, #4
   1336e:	4620      	mov	r0, r4
   13370:	f016 fe86 	bl	2a080 <nvs_flash_rd>
		if (rc) {
   13374:	4605      	mov	r5, r0
   13376:	2800      	cmp	r0, #0
   13378:	d1e7      	bne.n	1334a <nvs_mount+0x11e>
   1337a:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
   1337c:	f813 2b01 	ldrb.w	r2, [r3], #1
   13380:	4591      	cmp	r9, r2
   13382:	d13c      	bne.n	133fe <nvs_mount+0x1d2>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   13384:	3501      	adds	r5, #1
   13386:	2d08      	cmp	r5, #8
   13388:	d1f8      	bne.n	1337c <nvs_mount+0x150>
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1338a:	6863      	ldr	r3, [r4, #4]
   1338c:	0c1b      	lsrs	r3, r3, #16
   1338e:	041b      	lsls	r3, r3, #16
	nvs_sector_advance(fs, &addr);
   13390:	4669      	mov	r1, sp
   13392:	4620      	mov	r0, r4
	addr = fs->ate_wra & ADDR_SECT_MASK;
   13394:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
   13396:	f016 fe81 	bl	2a09c <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1339a:	89a3      	ldrh	r3, [r4, #12]
   1339c:	9900      	ldr	r1, [sp, #0]
   1339e:	464a      	mov	r2, r9
   133a0:	4620      	mov	r0, r4
   133a2:	f016 feb2 	bl	2a10a <nvs_flash_cmp_const>
	if (rc < 0) {
   133a6:	1e05      	subs	r5, r0, #0
   133a8:	dbcf      	blt.n	1334a <nvs_mount+0x11e>
		addr = fs->ate_wra + ate_size;
   133aa:	6863      	ldr	r3, [r4, #4]
	if (rc) {
   133ac:	d069      	beq.n	13482 <nvs_mount+0x256>
		addr = fs->ate_wra + ate_size;
   133ae:	eb06 0803 	add.w	r8, r6, r3
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   133b2:	f64f 79ff 	movw	r9, #65535	; 0xffff
   133b6:	89a3      	ldrh	r3, [r4, #12]
		addr = fs->ate_wra + ate_size;
   133b8:	f8cd 8000 	str.w	r8, [sp]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   133bc:	fa1f f288 	uxth.w	r2, r8
   133c0:	1b9b      	subs	r3, r3, r6
   133c2:	429a      	cmp	r2, r3
   133c4:	d337      	bcc.n	13436 <nvs_mount+0x20a>
		LOG_INF("No GC Done marker found: restarting gc");
   133c6:	4852      	ldr	r0, [pc, #328]	; (13510 <nvs_mount+0x2e4>)
   133c8:	2149      	movs	r1, #73	; 0x49
   133ca:	f016 fe4c 	bl	2a066 <z_log_minimal_printk>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   133ce:	6861      	ldr	r1, [r4, #4]
   133d0:	4620      	mov	r0, r4
   133d2:	f016 febf 	bl	2a154 <nvs_flash_erase_sector>
		if (rc) {
   133d6:	4605      	mov	r5, r0
   133d8:	2800      	cmp	r0, #0
   133da:	d1b6      	bne.n	1334a <nvs_mount+0x11e>
		fs->ate_wra &= ADDR_SECT_MASK;
   133dc:	6863      	ldr	r3, [r4, #4]
   133de:	4a4d      	ldr	r2, [pc, #308]	; (13514 <nvs_mount+0x2e8>)
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   133e0:	89a1      	ldrh	r1, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
   133e2:	4013      	ands	r3, r2
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   133e4:	440b      	add	r3, r1
   133e6:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   133ea:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   133ec:	4013      	ands	r3, r2
   133ee:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   133f0:	4620      	mov	r0, r4
   133f2:	f016 ffbe 	bl	2a372 <nvs_gc>
			rc = nvs_flash_erase_sector(fs, addr);
   133f6:	4605      	mov	r5, r0
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   133f8:	2d00      	cmp	r5, #0
   133fa:	d05e      	beq.n	134ba <nvs_mount+0x28e>
   133fc:	e7a5      	b.n	1334a <nvs_mount+0x11e>
		if (nvs_ate_valid(fs, &last_ate)) {
   133fe:	a901      	add	r1, sp, #4
   13400:	4620      	mov	r0, r4
   13402:	f016 fed4 	bl	2a1ae <nvs_ate_valid>
   13406:	6862      	ldr	r2, [r4, #4]
   13408:	b910      	cbnz	r0, 13410 <nvs_mount+0x1e4>
		fs->ate_wra -= ate_size;
   1340a:	1b92      	subs	r2, r2, r6
   1340c:	6062      	str	r2, [r4, #4]
   1340e:	e7a8      	b.n	13362 <nvs_mount+0x136>
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13410:	f8bd 5008 	ldrh.w	r5, [sp, #8]
   13414:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   13418:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
   1341a:	f8c4 8008 	str.w	r8, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1341e:	4429      	add	r1, r5
   13420:	f016 febb 	bl	2a19a <nvs_al_size.isra.0>
   13424:	4440      	add	r0, r8
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   13426:	4290      	cmp	r0, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   13428:	60a0      	str	r0, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1342a:	d1ee      	bne.n	1340a <nvs_mount+0x1de>
   1342c:	2d00      	cmp	r5, #0
   1342e:	d0ec      	beq.n	1340a <nvs_mount+0x1de>
				rc = -ESPIPE;
   13430:	f06f 051c 	mvn.w	r5, #28
   13434:	e07a      	b.n	1352c <nvs_mount+0x300>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   13436:	2308      	movs	r3, #8
   13438:	aa03      	add	r2, sp, #12
   1343a:	4641      	mov	r1, r8
   1343c:	4620      	mov	r0, r4
   1343e:	f016 fe1f 	bl	2a080 <nvs_flash_rd>
			if (rc) {
   13442:	4605      	mov	r5, r0
   13444:	2800      	cmp	r0, #0
   13446:	d180      	bne.n	1334a <nvs_mount+0x11e>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   13448:	a903      	add	r1, sp, #12
   1344a:	4620      	mov	r0, r4
   1344c:	f016 feaf 	bl	2a1ae <nvs_ate_valid>
   13450:	b138      	cbz	r0, 13462 <nvs_mount+0x236>
   13452:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   13456:	454b      	cmp	r3, r9
   13458:	d103      	bne.n	13462 <nvs_mount+0x236>
			    (gc_done_ate.id == 0xffff) &&
   1345a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1345e:	2b00      	cmp	r3, #0
   13460:	d06a      	beq.n	13538 <nvs_mount+0x30c>
			addr += ate_size;
   13462:	44b0      	add	r8, r6
   13464:	e7a7      	b.n	133b6 <nvs_mount+0x18a>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   13466:	1a5b      	subs	r3, r3, r1
   13468:	464a      	mov	r2, r9
   1346a:	4620      	mov	r0, r4
   1346c:	f016 fe4d 	bl	2a10a <nvs_flash_cmp_const>
		if (rc < 0) {
   13470:	1e05      	subs	r5, r0, #0
   13472:	f6ff af6a 	blt.w	1334a <nvs_mount+0x11e>
		if (!rc) {
   13476:	d008      	beq.n	1348a <nvs_mount+0x25e>
		fs->data_wra += fs->flash_parameters->write_block_size;
   13478:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1347a:	68a3      	ldr	r3, [r4, #8]
   1347c:	6812      	ldr	r2, [r2, #0]
   1347e:	4413      	add	r3, r2
   13480:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   13482:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   13486:	428b      	cmp	r3, r1
   13488:	d8ed      	bhi.n	13466 <nvs_mount+0x23a>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1348a:	6861      	ldr	r1, [r4, #4]
   1348c:	89a3      	ldrh	r3, [r4, #12]
   1348e:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   13492:	429a      	cmp	r2, r3
   13494:	d1b0      	bne.n	133f8 <nvs_mount+0x1cc>
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   13496:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13514 <nvs_mount+0x2e8>
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1349a:	68a2      	ldr	r2, [r4, #8]
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1349c:	ea01 0308 	and.w	r3, r1, r8
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   134a0:	429a      	cmp	r2, r3
   134a2:	d0a9      	beq.n	133f8 <nvs_mount+0x1cc>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   134a4:	4620      	mov	r0, r4
   134a6:	f016 fe55 	bl	2a154 <nvs_flash_erase_sector>
		if (rc) {
   134aa:	4605      	mov	r5, r0
   134ac:	2800      	cmp	r0, #0
   134ae:	f47f af4c 	bne.w	1334a <nvs_mount+0x11e>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   134b2:	6863      	ldr	r3, [r4, #4]
   134b4:	ea03 0308 	and.w	r3, r3, r8
   134b8:	60a3      	str	r3, [r4, #8]
		      (fs->sector_size - 2 * ate_size))) {
   134ba:	89a3      	ldrh	r3, [r4, #12]
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   134bc:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   134be:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   134c2:	429a      	cmp	r2, r3
   134c4:	d02e      	beq.n	13524 <nvs_mount+0x2f8>
   134c6:	4638      	mov	r0, r7
   134c8:	f010 fea0 	bl	2420c <z_impl_k_mutex_unlock>
	fs->ready = true;
   134cc:	2301      	movs	r3, #1
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   134ce:	89e2      	ldrh	r2, [r4, #14]
   134d0:	4811      	ldr	r0, [pc, #68]	; (13518 <nvs_mount+0x2ec>)
	fs->ready = true;
   134d2:	7423      	strb	r3, [r4, #16]
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   134d4:	2149      	movs	r1, #73	; 0x49
   134d6:	89a3      	ldrh	r3, [r4, #12]
   134d8:	f016 fdc5 	bl	2a066 <z_log_minimal_printk>
	LOG_INF("alloc wra: %d, %x",
   134dc:	6862      	ldr	r2, [r4, #4]
   134de:	480f      	ldr	r0, [pc, #60]	; (1351c <nvs_mount+0x2f0>)
   134e0:	b293      	uxth	r3, r2
   134e2:	2149      	movs	r1, #73	; 0x49
   134e4:	0c12      	lsrs	r2, r2, #16
   134e6:	f016 fdbe 	bl	2a066 <z_log_minimal_printk>
	LOG_INF("data wra: %d, %x",
   134ea:	68a2      	ldr	r2, [r4, #8]
   134ec:	480c      	ldr	r0, [pc, #48]	; (13520 <nvs_mount+0x2f4>)
   134ee:	b293      	uxth	r3, r2
   134f0:	2149      	movs	r1, #73	; 0x49
   134f2:	0c12      	lsrs	r2, r2, #16
   134f4:	f016 fdb7 	bl	2a066 <z_log_minimal_printk>
	return 0;
   134f8:	2500      	movs	r5, #0
   134fa:	e6ac      	b.n	13256 <nvs_mount+0x2a>
   134fc:	0002fabb 	.word	0x0002fabb
   13500:	0002fae2 	.word	0x0002fae2
   13504:	0002fb04 	.word	0x0002fb04
   13508:	0002fb21 	.word	0x0002fb21
   1350c:	0002fb3a 	.word	0x0002fb3a
   13510:	0002fbab 	.word	0x0002fbab
   13514:	ffff0000 	.word	0xffff0000
   13518:	0002fb62 	.word	0x0002fb62
   1351c:	0002fb7e 	.word	0x0002fb7e
   13520:	0002fb95 	.word	0x0002fb95
		rc = nvs_add_gc_done_ate(fs);
   13524:	4620      	mov	r0, r4
   13526:	f016 ff0f 	bl	2a348 <nvs_add_gc_done_ate>
   1352a:	4605      	mov	r5, r0
   1352c:	4638      	mov	r0, r7
   1352e:	f010 fe6d 	bl	2420c <z_impl_k_mutex_unlock>
	if (rc) {
   13532:	2d00      	cmp	r5, #0
   13534:	d0ca      	beq.n	134cc <nvs_mount+0x2a0>
   13536:	e68e      	b.n	13256 <nvs_mount+0x2a>
			LOG_INF("GC Done marker found");
   13538:	4808      	ldr	r0, [pc, #32]	; (1355c <nvs_mount+0x330>)
   1353a:	2149      	movs	r1, #73	; 0x49
   1353c:	f016 fd93 	bl	2a066 <z_log_minimal_printk>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   13540:	6863      	ldr	r3, [r4, #4]
   13542:	0c1b      	lsrs	r3, r3, #16
   13544:	041b      	lsls	r3, r3, #16
			nvs_sector_advance(fs, &addr);
   13546:	4669      	mov	r1, sp
   13548:	4620      	mov	r0, r4
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1354a:	9300      	str	r3, [sp, #0]
			nvs_sector_advance(fs, &addr);
   1354c:	f016 fda6 	bl	2a09c <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   13550:	9900      	ldr	r1, [sp, #0]
   13552:	4620      	mov	r0, r4
   13554:	f016 fdfe 	bl	2a154 <nvs_flash_erase_sector>
   13558:	e74d      	b.n	133f6 <nvs_mount+0x1ca>
   1355a:	bf00      	nop
   1355c:	0002fbd7 	.word	0x0002fbd7

00013560 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   13560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13564:	461d      	mov	r5, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   13566:	7c03      	ldrb	r3, [r0, #16]
{
   13568:	b089      	sub	sp, #36	; 0x24
   1356a:	4604      	mov	r4, r0
   1356c:	4689      	mov	r9, r1
   1356e:	4690      	mov	r8, r2
	if (!fs->ready) {
   13570:	b94b      	cbnz	r3, 13586 <nvs_write+0x26>
		LOG_ERR("NVS not initialized");
   13572:	4863      	ldr	r0, [pc, #396]	; (13700 <nvs_write+0x1a0>)
   13574:	2145      	movs	r1, #69	; 0x45
   13576:	f016 fd76 	bl	2a066 <z_log_minimal_printk>
		return -EACCES;
   1357a:	f06f 060c 	mvn.w	r6, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1357e:	4630      	mov	r0, r6
   13580:	b009      	add	sp, #36	; 0x24
   13582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13586:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   13588:	2108      	movs	r1, #8
   1358a:	4610      	mov	r0, r2
   1358c:	f016 fe05 	bl	2a19a <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
   13590:	4629      	mov	r1, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   13592:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
   13594:	4610      	mov	r0, r2
   13596:	f016 fe00 	bl	2a19a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1359a:	89a3      	ldrh	r3, [r4, #12]
   1359c:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   135a0:	429d      	cmp	r5, r3
	data_size = nvs_al_size(fs, len);
   135a2:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   135a4:	f200 80a9 	bhi.w	136fa <nvs_write+0x19a>
   135a8:	b11d      	cbz	r5, 135b2 <nvs_write+0x52>
	    ((len > 0) && (data == NULL))) {
   135aa:	f1b8 0f00 	cmp.w	r8, #0
   135ae:	f000 80a4 	beq.w	136fa <nvs_write+0x19a>
	wlk_addr = fs->ate_wra;
   135b2:	6863      	ldr	r3, [r4, #4]
   135b4:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   135b6:	aa04      	add	r2, sp, #16
   135b8:	a903      	add	r1, sp, #12
   135ba:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
   135bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   135c0:	f016 fe2d 	bl	2a21e <nvs_prev_ate>
		if (rc) {
   135c4:	4606      	mov	r6, r0
   135c6:	2800      	cmp	r0, #0
   135c8:	d1d9      	bne.n	1357e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   135ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   135ce:	454b      	cmp	r3, r9
   135d0:	d005      	beq.n	135de <nvs_write+0x7e>
		if (wlk_addr == fs->ate_wra) {
   135d2:	6862      	ldr	r2, [r4, #4]
   135d4:	9b03      	ldr	r3, [sp, #12]
   135d6:	429a      	cmp	r2, r3
   135d8:	d1ed      	bne.n	135b6 <nvs_write+0x56>
		if (len == 0) {
   135da:	b9e5      	cbnz	r5, 13616 <nvs_write+0xb6>
   135dc:	e7cf      	b.n	1357e <nvs_write+0x1e>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   135de:	a904      	add	r1, sp, #16
   135e0:	4620      	mov	r0, r4
   135e2:	f016 fde4 	bl	2a1ae <nvs_ate_valid>
   135e6:	2800      	cmp	r0, #0
   135e8:	d0f3      	beq.n	135d2 <nvs_write+0x72>
		rd_addr += wlk_ate.offset;
   135ea:	f8bd 0012 	ldrh.w	r0, [sp, #18]
			if (wlk_ate.len == 0U) {
   135ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
   135f2:	b175      	cbz	r5, 13612 <nvs_write+0xb2>
		} else if (len == wlk_ate.len) {
   135f4:	429d      	cmp	r5, r3
   135f6:	d10e      	bne.n	13616 <nvs_write+0xb6>
		rd_addr &= ADDR_SECT_MASK;
   135f8:	ea4f 411b 	mov.w	r1, fp, lsr #16
   135fc:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   135fe:	4401      	add	r1, r0
   13600:	462b      	mov	r3, r5
   13602:	4642      	mov	r2, r8
   13604:	4620      	mov	r0, r4
   13606:	f016 fd56 	bl	2a0b6 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1360a:	2800      	cmp	r0, #0
   1360c:	dc03      	bgt.n	13616 <nvs_write+0xb6>
   1360e:	4606      	mov	r6, r0
   13610:	e7b5      	b.n	1357e <nvs_write+0x1e>
			if (wlk_ate.len == 0U) {
   13612:	2b00      	cmp	r3, #0
   13614:	d0b3      	beq.n	1357e <nvs_write+0x1e>
	if (data_size) {
   13616:	2f00      	cmp	r7, #0
   13618:	d13e      	bne.n	13698 <nvs_write+0x138>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1361a:	f104 0314 	add.w	r3, r4, #20
   1361e:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13620:	f04f 32ff 	mov.w	r2, #4294967295
   13624:	f04f 33ff 	mov.w	r3, #4294967295
   13628:	f104 0014 	add.w	r0, r4, #20
   1362c:	f010 fd38 	bl	240a0 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
   13630:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 13704 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
   13634:	89e3      	ldrh	r3, [r4, #14]
   13636:	429e      	cmp	r6, r3
   13638:	d05c      	beq.n	136f4 <nvs_write+0x194>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1363a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1363e:	18f9      	adds	r1, r7, r3
   13640:	428a      	cmp	r2, r1
   13642:	d32c      	bcc.n	1369e <nvs_write+0x13e>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   13644:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
   13648:	a806      	add	r0, sp, #24
	entry.part = 0xff;
   1364a:	23ff      	movs	r3, #255	; 0xff
   1364c:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
   13650:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
   13654:	f8ad 501c 	strh.w	r5, [sp, #28]
	nvs_ate_crc8_update(&entry);
   13658:	f016 fd96 	bl	2a188 <nvs_ate_crc8_update>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1365c:	68a1      	ldr	r1, [r4, #8]
   1365e:	462b      	mov	r3, r5
   13660:	4642      	mov	r2, r8
   13662:	4620      	mov	r0, r4
   13664:	f016 fe25 	bl	2a2b2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   13668:	4629      	mov	r1, r5
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1366a:	4682      	mov	sl, r0
	fs->data_wra += nvs_al_size(fs, len);
   1366c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1366e:	f016 fd94 	bl	2a19a <nvs_al_size.isra.0>
   13672:	68a2      	ldr	r2, [r4, #8]
   13674:	4402      	add	r2, r0
   13676:	60a2      	str	r2, [r4, #8]
	if (rc) {
   13678:	f1ba 0f00 	cmp.w	sl, #0
   1367c:	d107      	bne.n	1368e <nvs_write+0x12e>
	rc = nvs_flash_ate_wrt(fs, &entry);
   1367e:	a906      	add	r1, sp, #24
   13680:	4620      	mov	r0, r4
   13682:	f016 fe50 	bl	2a326 <nvs_flash_ate_wrt>
	rc = len;
   13686:	2800      	cmp	r0, #0
   13688:	bf14      	ite	ne
   1368a:	4682      	movne	sl, r0
   1368c:	46aa      	moveq	sl, r5
	return z_impl_k_mutex_unlock(mutex);
   1368e:	9801      	ldr	r0, [sp, #4]
   13690:	f010 fdbc 	bl	2420c <z_impl_k_mutex_unlock>
	return rc;
   13694:	4656      	mov	r6, sl
   13696:	e772      	b.n	1357e <nvs_write+0x1e>
		required_space = data_size + ate_size;
   13698:	4457      	add	r7, sl
   1369a:	b2bf      	uxth	r7, r7
   1369c:	e7bd      	b.n	1361a <nvs_write+0xba>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1369e:	2108      	movs	r1, #8
   136a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   136a2:	f016 fd7a 	bl	2a19a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
   136a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   136aa:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
   136ae:	2300      	movs	r3, #0
   136b0:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   136b4:	1813      	adds	r3, r2, r0
   136b6:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
   136ba:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
   136bc:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
   136c0:	441a      	add	r2, r3
   136c2:	1a10      	subs	r0, r2, r0
   136c4:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   136c6:	a806      	add	r0, sp, #24
   136c8:	f016 fd5e 	bl	2a188 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   136cc:	a906      	add	r1, sp, #24
   136ce:	4620      	mov	r0, r4
   136d0:	f016 fe29 	bl	2a326 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   136d4:	1d21      	adds	r1, r4, #4
   136d6:	4620      	mov	r0, r4
   136d8:	f016 fce0 	bl	2a09c <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   136dc:	6863      	ldr	r3, [r4, #4]
   136de:	ea03 030b 	and.w	r3, r3, fp
   136e2:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   136e4:	4620      	mov	r0, r4
   136e6:	f016 fe44 	bl	2a372 <nvs_gc>
		if (rc) {
   136ea:	4682      	mov	sl, r0
   136ec:	2800      	cmp	r0, #0
   136ee:	d1ce      	bne.n	1368e <nvs_write+0x12e>
		gc_count++;
   136f0:	3601      	adds	r6, #1
		if (gc_count == fs->sector_count) {
   136f2:	e79f      	b.n	13634 <nvs_write+0xd4>
			rc = -ENOSPC;
   136f4:	f06f 0a1b 	mvn.w	sl, #27
   136f8:	e7c9      	b.n	1368e <nvs_write+0x12e>
		return -EINVAL;
   136fa:	f06f 0615 	mvn.w	r6, #21
   136fe:	e73e      	b.n	1357e <nvs_write+0x1e>
   13700:	0002faa2 	.word	0x0002faa2
   13704:	ffff0000 	.word	0xffff0000

00013708 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   13708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1370c:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1370e:	7c03      	ldrb	r3, [r0, #16]
{
   13710:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
   13714:	4604      	mov	r4, r0
   13716:	460f      	mov	r7, r1
   13718:	4690      	mov	r8, r2
	if (!fs->ready) {
   1371a:	b943      	cbnz	r3, 1372e <nvs_read_hist+0x26>
		LOG_ERR("NVS not initialized");
   1371c:	482c      	ldr	r0, [pc, #176]	; (137d0 <nvs_read_hist+0xc8>)
   1371e:	2145      	movs	r1, #69	; 0x45
   13720:	f016 fca1 	bl	2a066 <z_log_minimal_printk>
		return -EACCES;
   13724:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
   13728:	b004      	add	sp, #16
   1372a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1372e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   13730:	2108      	movs	r1, #8
   13732:	f016 fd32 	bl	2a19a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
   13736:	89a3      	ldrh	r3, [r4, #12]
   13738:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
   1373c:	429e      	cmp	r6, r3
   1373e:	d843      	bhi.n	137c8 <nvs_read_hist+0xc0>
	wlk_addr = fs->ate_wra;
   13740:	f8d4 a004 	ldr.w	sl, [r4, #4]
   13744:	f8cd a004 	str.w	sl, [sp, #4]
	cnt_his = 0U;
   13748:	2500      	movs	r5, #0
	while (cnt_his <= cnt) {
   1374a:	45a9      	cmp	r9, r5
   1374c:	4651      	mov	r1, sl
		rd_addr = wlk_addr;
   1374e:	f8dd a004 	ldr.w	sl, [sp, #4]
	while (cnt_his <= cnt) {
   13752:	d209      	bcs.n	13768 <nvs_read_hist+0x60>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   13754:	6863      	ldr	r3, [r4, #4]
   13756:	4553      	cmp	r3, sl
   13758:	d11e      	bne.n	13798 <nvs_read_hist+0x90>
   1375a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1375e:	42bb      	cmp	r3, r7
   13760:	d01a      	beq.n	13798 <nvs_read_hist+0x90>
		return -ENOENT;
   13762:	f06f 0001 	mvn.w	r0, #1
   13766:	e7df      	b.n	13728 <nvs_read_hist+0x20>
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   13768:	aa02      	add	r2, sp, #8
   1376a:	a901      	add	r1, sp, #4
   1376c:	4620      	mov	r0, r4
   1376e:	f016 fd56 	bl	2a21e <nvs_prev_ate>
		if (rc) {
   13772:	2800      	cmp	r0, #0
   13774:	d1d8      	bne.n	13728 <nvs_read_hist+0x20>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   13776:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1377a:	42bb      	cmp	r3, r7
   1377c:	d106      	bne.n	1378c <nvs_read_hist+0x84>
   1377e:	a902      	add	r1, sp, #8
   13780:	4620      	mov	r0, r4
   13782:	f016 fd14 	bl	2a1ae <nvs_ate_valid>
   13786:	b108      	cbz	r0, 1378c <nvs_read_hist+0x84>
			cnt_his++;
   13788:	3501      	adds	r5, #1
   1378a:	b2ad      	uxth	r5, r5
		if (wlk_addr == fs->ate_wra) {
   1378c:	6862      	ldr	r2, [r4, #4]
   1378e:	9b01      	ldr	r3, [sp, #4]
   13790:	429a      	cmp	r2, r3
   13792:	d1da      	bne.n	1374a <nvs_read_hist+0x42>
		rd_addr = wlk_addr;
   13794:	4651      	mov	r1, sl
   13796:	e7e0      	b.n	1375a <nvs_read_hist+0x52>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   13798:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1379c:	2b00      	cmp	r3, #0
   1379e:	d0e0      	beq.n	13762 <nvs_read_hist+0x5a>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   137a0:	45a9      	cmp	r9, r5
   137a2:	d8de      	bhi.n	13762 <nvs_read_hist+0x5a>
	rd_addr += wlk_ate.offset;
   137a4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
   137a8:	0c09      	lsrs	r1, r1, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   137aa:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
   137ac:	ea4f 4101 	mov.w	r1, r1, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   137b0:	bf28      	it	cs
   137b2:	4633      	movcs	r3, r6
   137b4:	4401      	add	r1, r0
   137b6:	4642      	mov	r2, r8
   137b8:	4620      	mov	r0, r4
   137ba:	f016 fc61 	bl	2a080 <nvs_flash_rd>
	if (rc) {
   137be:	2800      	cmp	r0, #0
   137c0:	d1b2      	bne.n	13728 <nvs_read_hist+0x20>
	return wlk_ate.len;
   137c2:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   137c6:	e7af      	b.n	13728 <nvs_read_hist+0x20>
		return -EINVAL;
   137c8:	f06f 0015 	mvn.w	r0, #21
   137cc:	e7ac      	b.n	13728 <nvs_read_hist+0x20>
   137ce:	bf00      	nop
   137d0:	0002faa2 	.word	0x0002faa2

000137d4 <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   137d4:	b570      	push	{r4, r5, r6, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   137d6:	4b11      	ldr	r3, [pc, #68]	; (1381c <flash_area_open+0x48>)
   137d8:	681c      	ldr	r4, [r3, #0]
{
   137da:	460d      	mov	r5, r1
	if (flash_map == NULL) {
   137dc:	b1dc      	cbz	r4, 13816 <flash_area_open+0x42>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   137de:	4b10      	ldr	r3, [pc, #64]	; (13820 <flash_area_open+0x4c>)
   137e0:	6819      	ldr	r1, [r3, #0]
   137e2:	2300      	movs	r3, #0
   137e4:	428b      	cmp	r3, r1
   137e6:	db02      	blt.n	137ee <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   137e8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   137ec:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   137ee:	4622      	mov	r2, r4
   137f0:	f812 6b10 	ldrb.w	r6, [r2], #16
   137f4:	4286      	cmp	r6, r0
   137f6:	d002      	beq.n	137fe <flash_area_open+0x2a>
	for (int i = 0; i < flash_map_entries; i++) {
   137f8:	3301      	adds	r3, #1
   137fa:	4614      	mov	r4, r2
   137fc:	e7f2      	b.n	137e4 <flash_area_open+0x10>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   137fe:	68e0      	ldr	r0, [r4, #12]
   13800:	b910      	cbnz	r0, 13808 <flash_area_open+0x34>
		return -ENODEV;
   13802:	f06f 0012 	mvn.w	r0, #18
   13806:	e7f1      	b.n	137ec <flash_area_open+0x18>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   13808:	f01a fa46 	bl	2dc98 <z_device_is_ready>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   1380c:	2800      	cmp	r0, #0
   1380e:	d0f8      	beq.n	13802 <flash_area_open+0x2e>
	*fap = area;
   13810:	602c      	str	r4, [r5, #0]
	return 0;
   13812:	2000      	movs	r0, #0
   13814:	e7ea      	b.n	137ec <flash_area_open+0x18>
		return -EACCES;
   13816:	f06f 000c 	mvn.w	r0, #12
   1381a:	e7e7      	b.n	137ec <flash_area_open+0x18>
   1381c:	20000544 	.word	0x20000544
   13820:	0002e798 	.word	0x0002e798

00013824 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   13824:	b570      	push	{r4, r5, r6, lr}
   13826:	b088      	sub	sp, #32
   13828:	4605      	mov	r5, r0
   1382a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   1382c:	b2c0      	uxtb	r0, r0
   1382e:	4669      	mov	r1, sp
{
   13830:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   13832:	f7ff ffcf 	bl	137d4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
   13836:	2800      	cmp	r0, #0
   13838:	db1b      	blt.n	13872 <flash_area_get_sectors+0x4e>
   1383a:	9800      	ldr	r0, [sp, #0]
   1383c:	b1c8      	cbz	r0, 13872 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   1383e:	6843      	ldr	r3, [r0, #4]
   13840:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   13842:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
   13844:	6822      	ldr	r2, [r4, #0]
	cb_data->area_idx = idx;
   13846:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   13848:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   1384c:	2300      	movs	r3, #0
	cb_data->status = 0;
   1384e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   13852:	9305      	str	r3, [sp, #20]
	flash_dev = fa->fa_dev;
   13854:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   13856:	f016 fe64 	bl	2a522 <flash_area_close>
	if (flash_dev == NULL) {
   1385a:	b16d      	cbz	r5, 13878 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   1385c:	4628      	mov	r0, r5
   1385e:	4908      	ldr	r1, [pc, #32]	; (13880 <flash_area_get_sectors+0x5c>)
   13860:	aa01      	add	r2, sp, #4
   13862:	f019 ff0d 	bl	2d680 <flash_page_foreach>
	if (cb_data->status == 0) {
   13866:	9807      	ldr	r0, [sp, #28]
   13868:	b908      	cbnz	r0, 1386e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   1386a:	9b05      	ldr	r3, [sp, #20]
   1386c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   1386e:	b008      	add	sp, #32
   13870:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   13872:	f06f 0015 	mvn.w	r0, #21
   13876:	e7fa      	b.n	1386e <flash_area_get_sectors+0x4a>
		return -ENODEV;
   13878:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   1387c:	e7f7      	b.n	1386e <flash_area_get_sectors+0x4a>
   1387e:	bf00      	nop
   13880:	0002a525 	.word	0x0002a525

00013884 <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   13884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   13888:	4b0f      	ldr	r3, [pc, #60]	; (138c8 <settings_save_one+0x44>)
   1388a:	681c      	ldr	r4, [r3, #0]
{
   1388c:	4605      	mov	r5, r0
   1388e:	460e      	mov	r6, r1
   13890:	4617      	mov	r7, r2
	if (!cs) {
   13892:	b1ac      	cbz	r4, 138c0 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   13894:	f04f 32ff 	mov.w	r2, #4294967295
   13898:	f04f 33ff 	mov.w	r3, #4294967295
   1389c:	480b      	ldr	r0, [pc, #44]	; (138cc <settings_save_one+0x48>)
   1389e:	f010 fbff 	bl	240a0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   138a2:	6863      	ldr	r3, [r4, #4]
   138a4:	4632      	mov	r2, r6
   138a6:	f8d3 8008 	ldr.w	r8, [r3, #8]
   138aa:	4629      	mov	r1, r5
   138ac:	463b      	mov	r3, r7
   138ae:	4620      	mov	r0, r4
   138b0:	47c0      	blx	r8
   138b2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   138b4:	4805      	ldr	r0, [pc, #20]	; (138cc <settings_save_one+0x48>)
   138b6:	f010 fca9 	bl	2420c <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   138ba:	4620      	mov	r0, r4
   138bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   138c0:	f06f 0401 	mvn.w	r4, #1
   138c4:	e7f9      	b.n	138ba <settings_save_one+0x36>
   138c6:	bf00      	nop
   138c8:	200029b8 	.word	0x200029b8
   138cc:	2000097c 	.word	0x2000097c

000138d0 <settings_src_register>:
	parent->next = child;
   138d0:	2300      	movs	r3, #0
   138d2:	6003      	str	r3, [r0, #0]
	return list->tail;
   138d4:	4b04      	ldr	r3, [pc, #16]	; (138e8 <settings_src_register+0x18>)
   138d6:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   138d8:	b912      	cbnz	r2, 138e0 <settings_src_register+0x10>
	list->head = node;
   138da:	e9c3 0000 	strd	r0, r0, [r3]
}
   138de:	4770      	bx	lr
	parent->next = child;
   138e0:	6010      	str	r0, [r2, #0]
	list->tail = node;
   138e2:	6058      	str	r0, [r3, #4]
}
   138e4:	4770      	bx	lr
   138e6:	bf00      	nop
   138e8:	200029bc 	.word	0x200029bc

000138ec <settings_dst_register>:
	settings_save_dst = cs;
   138ec:	4b01      	ldr	r3, [pc, #4]	; (138f4 <settings_dst_register+0x8>)
   138ee:	6018      	str	r0, [r3, #0]
}
   138f0:	4770      	bx	lr
   138f2:	bf00      	nop
   138f4:	200029b8 	.word	0x200029b8

000138f8 <settings_load_subtree>:
{
   138f8:	b530      	push	{r4, r5, lr}
   138fa:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
   138fc:	2300      	movs	r3, #0
{
   138fe:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   13900:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13904:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   13906:	f04f 33ff 	mov.w	r3, #4294967295
   1390a:	480c      	ldr	r0, [pc, #48]	; (1393c <settings_load_subtree+0x44>)
   1390c:	f04f 32ff 	mov.w	r2, #4294967295
   13910:	f010 fbc6 	bl	240a0 <z_impl_k_mutex_lock>
	return list->head;
   13914:	4b0a      	ldr	r3, [pc, #40]	; (13940 <settings_load_subtree+0x48>)
   13916:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   13918:	b94c      	cbnz	r4, 1392e <settings_load_subtree+0x36>
	rc = settings_commit_subtree(subtree);
   1391a:	4628      	mov	r0, r5
   1391c:	f000 f8dc 	bl	13ad8 <settings_commit_subtree>
   13920:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13922:	4806      	ldr	r0, [pc, #24]	; (1393c <settings_load_subtree+0x44>)
   13924:	f010 fc72 	bl	2420c <z_impl_k_mutex_unlock>
}
   13928:	4620      	mov	r0, r4
   1392a:	b005      	add	sp, #20
   1392c:	bd30      	pop	{r4, r5, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1392e:	6863      	ldr	r3, [r4, #4]
   13930:	4620      	mov	r0, r4
   13932:	681b      	ldr	r3, [r3, #0]
   13934:	a901      	add	r1, sp, #4
   13936:	4798      	blx	r3
	return node->next;
   13938:	6824      	ldr	r4, [r4, #0]
   1393a:	e7ed      	b.n	13918 <settings_load_subtree+0x20>
   1393c:	2000097c 	.word	0x2000097c
   13940:	200029bc 	.word	0x200029bc

00013944 <settings_load_subtree_direct>:
{
   13944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
   13946:	e9cd 0101 	strd	r0, r1, [sp, #4]
   1394a:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1394c:	f04f 33ff 	mov.w	r3, #4294967295
   13950:	480a      	ldr	r0, [pc, #40]	; (1397c <settings_load_subtree_direct+0x38>)
   13952:	f04f 32ff 	mov.w	r2, #4294967295
   13956:	f010 fba3 	bl	240a0 <z_impl_k_mutex_lock>
	return list->head;
   1395a:	4b09      	ldr	r3, [pc, #36]	; (13980 <settings_load_subtree_direct+0x3c>)
   1395c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1395e:	b92c      	cbnz	r4, 1396c <settings_load_subtree_direct+0x28>
	return z_impl_k_mutex_unlock(mutex);
   13960:	4806      	ldr	r0, [pc, #24]	; (1397c <settings_load_subtree_direct+0x38>)
   13962:	f010 fc53 	bl	2420c <z_impl_k_mutex_unlock>
}
   13966:	4620      	mov	r0, r4
   13968:	b004      	add	sp, #16
   1396a:	bd10      	pop	{r4, pc}
		cs->cs_itf->csi_load(cs, &arg);
   1396c:	6863      	ldr	r3, [r4, #4]
   1396e:	4620      	mov	r0, r4
   13970:	681b      	ldr	r3, [r3, #0]
   13972:	a901      	add	r1, sp, #4
   13974:	4798      	blx	r3
	return node->next;
   13976:	6824      	ldr	r4, [r4, #0]
   13978:	e7f1      	b.n	1395e <settings_load_subtree_direct+0x1a>
   1397a:	bf00      	nop
   1397c:	2000097c 	.word	0x2000097c
   13980:	200029bc 	.word	0x200029bc

00013984 <settings_store_init>:
	list->head = NULL;
   13984:	4b02      	ldr	r3, [pc, #8]	; (13990 <settings_store_init+0xc>)
   13986:	2200      	movs	r2, #0
	list->tail = NULL;
   13988:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   1398c:	4770      	bx	lr
   1398e:	bf00      	nop
   13990:	200029bc 	.word	0x200029bc

00013994 <settings_init>:
	list->head = NULL;
   13994:	4b02      	ldr	r3, [pc, #8]	; (139a0 <settings_init+0xc>)
   13996:	2200      	movs	r2, #0
	list->tail = NULL;
   13998:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   1399c:	f7ff bff2 	b.w	13984 <settings_store_init>
   139a0:	200029c4 	.word	0x200029c4

000139a4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   139a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   139a8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   139aa:	460c      	mov	r4, r1
   139ac:	b109      	cbz	r1, 139b2 <settings_parse_and_lookup+0xe>
		*next = NULL;
   139ae:	2300      	movs	r3, #0
   139b0:	600b      	str	r3, [r1, #0]
{
   139b2:	4d24      	ldr	r5, [pc, #144]	; (13a44 <settings_parse_and_lookup+0xa0>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   139b4:	f8df 9090 	ldr.w	r9, [pc, #144]	; 13a48 <settings_parse_and_lookup+0xa4>
{
   139b8:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   139ba:	454d      	cmp	r5, r9
   139bc:	d920      	bls.n	13a00 <settings_parse_and_lookup+0x5c>
   139be:	4923      	ldr	r1, [pc, #140]	; (13a4c <settings_parse_and_lookup+0xa8>)
   139c0:	4823      	ldr	r0, [pc, #140]	; (13a50 <settings_parse_and_lookup+0xac>)
   139c2:	2294      	movs	r2, #148	; 0x94
   139c4:	f016 fb41 	bl	2a04a <assert_print>
   139c8:	4820      	ldr	r0, [pc, #128]	; (13a4c <settings_parse_and_lookup+0xa8>)
   139ca:	2194      	movs	r1, #148	; 0x94
   139cc:	f016 fb36 	bl	2a03c <assert_post_action>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   139d0:	f8d5 8000 	ldr.w	r8, [r5]
   139d4:	aa01      	add	r2, sp, #4
   139d6:	4641      	mov	r1, r8
   139d8:	4638      	mov	r0, r7
   139da:	f016 fdcc 	bl	2a576 <settings_name_steq>
   139de:	b150      	cbz	r0, 139f6 <settings_parse_and_lookup+0x52>
			continue;
		}
		if (!bestmatch) {
   139e0:	b916      	cbnz	r6, 139e8 <settings_parse_and_lookup+0x44>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
			if (next) {
   139e2:	b954      	cbnz	r4, 139fa <settings_parse_and_lookup+0x56>
{
   139e4:	462e      	mov	r6, r5
   139e6:	e006      	b.n	139f6 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   139e8:	6831      	ldr	r1, [r6, #0]
   139ea:	2200      	movs	r2, #0
   139ec:	4640      	mov	r0, r8
   139ee:	f016 fdc2 	bl	2a576 <settings_name_steq>
   139f2:	2800      	cmp	r0, #0
   139f4:	d1f5      	bne.n	139e2 <settings_parse_and_lookup+0x3e>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   139f6:	3514      	adds	r5, #20
   139f8:	e7df      	b.n	139ba <settings_parse_and_lookup+0x16>
				*next = tmpnext;
   139fa:	9b01      	ldr	r3, [sp, #4]
   139fc:	6023      	str	r3, [r4, #0]
   139fe:	e7f1      	b.n	139e4 <settings_parse_and_lookup+0x40>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13a00:	d3e6      	bcc.n	139d0 <settings_parse_and_lookup+0x2c>
	return list->head;
   13a02:	4b14      	ldr	r3, [pc, #80]	; (13a54 <settings_parse_and_lookup+0xb0>)
   13a04:	681d      	ldr	r5, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a06:	b1c5      	cbz	r5, 13a3a <settings_parse_and_lookup+0x96>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a08:	f855 8c14 	ldr.w	r8, [r5, #-20]
   13a0c:	aa01      	add	r2, sp, #4
   13a0e:	4641      	mov	r1, r8
   13a10:	4638      	mov	r0, r7
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13a12:	3d14      	subs	r5, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   13a14:	f016 fdaf 	bl	2a576 <settings_name_steq>
   13a18:	b150      	cbz	r0, 13a30 <settings_parse_and_lookup+0x8c>
			continue;
		}
		if (!bestmatch) {
   13a1a:	b916      	cbnz	r6, 13a22 <settings_parse_and_lookup+0x7e>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   13a1c:	b954      	cbnz	r4, 13a34 <settings_parse_and_lookup+0x90>
{
   13a1e:	462e      	mov	r6, r5
   13a20:	e006      	b.n	13a30 <settings_parse_and_lookup+0x8c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   13a22:	6831      	ldr	r1, [r6, #0]
   13a24:	2200      	movs	r2, #0
   13a26:	4640      	mov	r0, r8
   13a28:	f016 fda5 	bl	2a576 <settings_name_steq>
   13a2c:	2800      	cmp	r0, #0
   13a2e:	d1f5      	bne.n	13a1c <settings_parse_and_lookup+0x78>
	return node->next;
   13a30:	696d      	ldr	r5, [r5, #20]
   13a32:	e7e8      	b.n	13a06 <settings_parse_and_lookup+0x62>
				*next = tmpnext;
   13a34:	9b01      	ldr	r3, [sp, #4]
   13a36:	6023      	str	r3, [r4, #0]
   13a38:	e7f1      	b.n	13a1e <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   13a3a:	4630      	mov	r0, r6
   13a3c:	b003      	add	sp, #12
   13a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13a42:	bf00      	nop
   13a44:	0002e5c0 	.word	0x0002e5c0
   13a48:	0002e638 	.word	0x0002e638
   13a4c:	0002fbf8 	.word	0x0002fbf8
   13a50:	0002f2b5 	.word	0x0002f2b5
   13a54:	200029c4 	.word	0x200029c4

00013a58 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   13a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
	int rc;
	const char *name_key = name;
   13a60:	9001      	str	r0, [sp, #4]
{
   13a62:	4604      	mov	r4, r0
   13a64:	460d      	mov	r5, r1
   13a66:	4616      	mov	r6, r2
   13a68:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
   13a6a:	f1b8 0f00 	cmp.w	r8, #0
   13a6e:	d007      	beq.n	13a80 <settings_call_set_handler+0x28>
   13a70:	f8d8 1000 	ldr.w	r1, [r8]
   13a74:	b9c1      	cbnz	r1, 13aa8 <settings_call_set_handler+0x50>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
		return 0;
	}

	if (load_arg && load_arg->cb) {
   13a76:	f8d8 e004 	ldr.w	lr, [r8, #4]
   13a7a:	f1be 0f00 	cmp.w	lr, #0
   13a7e:	d11c      	bne.n	13aba <settings_call_set_handler+0x62>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
	} else {
		struct settings_handler_static *ch;

		ch = settings_parse_and_lookup(name, &name_key);
   13a80:	a901      	add	r1, sp, #4
   13a82:	4620      	mov	r0, r4
   13a84:	f7ff ff8e 	bl	139a4 <settings_parse_and_lookup>
		if (!ch) {
   13a88:	b198      	cbz	r0, 13ab2 <settings_call_set_handler+0x5a>
			return 0;
		}

		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   13a8a:	f8d0 8008 	ldr.w	r8, [r0, #8]
   13a8e:	9801      	ldr	r0, [sp, #4]
   13a90:	463b      	mov	r3, r7
   13a92:	4632      	mov	r2, r6
   13a94:	4629      	mov	r1, r5
   13a96:	47c0      	blx	r8

		if (rc != 0) {
   13a98:	4603      	mov	r3, r0
   13a9a:	b150      	cbz	r0, 13ab2 <settings_call_set_handler+0x5a>
			LOG_ERR("set-value failure. key: %s error(%d)",
   13a9c:	480d      	ldr	r0, [pc, #52]	; (13ad4 <settings_call_set_handler+0x7c>)
   13a9e:	4622      	mov	r2, r4
   13aa0:	2145      	movs	r1, #69	; 0x45
   13aa2:	f016 fae0 	bl	2a066 <z_log_minimal_printk>
				name, rc);
			/* Ignoring the error */
			rc = 0;
   13aa6:	e004      	b.n	13ab2 <settings_call_set_handler+0x5a>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   13aa8:	aa01      	add	r2, sp, #4
   13aaa:	f016 fd64 	bl	2a576 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   13aae:	2800      	cmp	r0, #0
   13ab0:	d1e1      	bne.n	13a76 <settings_call_set_handler+0x1e>
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   13ab2:	2000      	movs	r0, #0
   13ab4:	b002      	add	sp, #8
   13ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13aba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   13abe:	9801      	ldr	r0, [sp, #4]
   13ac0:	9308      	str	r3, [sp, #32]
   13ac2:	4632      	mov	r2, r6
   13ac4:	463b      	mov	r3, r7
   13ac6:	4629      	mov	r1, r5
   13ac8:	46f4      	mov	ip, lr
}
   13aca:	b002      	add	sp, #8
   13acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   13ad0:	4760      	bx	ip
   13ad2:	bf00      	nop
   13ad4:	0002fc2a 	.word	0x0002fc2a

00013ad8 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   13ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13ada:	4c1d      	ldr	r4, [pc, #116]	; (13b50 <settings_commit_subtree+0x78>)
   13adc:	4f1d      	ldr	r7, [pc, #116]	; (13b54 <settings_commit_subtree+0x7c>)
{
   13ade:	4606      	mov	r6, r0
	rc = 0;
   13ae0:	2500      	movs	r5, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13ae2:	42bc      	cmp	r4, r7
   13ae4:	d91b      	bls.n	13b1e <settings_commit_subtree+0x46>
   13ae6:	491c      	ldr	r1, [pc, #112]	; (13b58 <settings_commit_subtree+0x80>)
   13ae8:	481c      	ldr	r0, [pc, #112]	; (13b5c <settings_commit_subtree+0x84>)
   13aea:	22f4      	movs	r2, #244	; 0xf4
   13aec:	f016 faad 	bl	2a04a <assert_print>
   13af0:	4819      	ldr	r0, [pc, #100]	; (13b58 <settings_commit_subtree+0x80>)
   13af2:	21f4      	movs	r1, #244	; 0xf4
   13af4:	f016 faa2 	bl	2a03c <assert_post_action>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13af8:	b92e      	cbnz	r6, 13b06 <settings_commit_subtree+0x2e>
			continue;
		}
		if (ch->h_commit) {
   13afa:	68e3      	ldr	r3, [r4, #12]
   13afc:	b95b      	cbnz	r3, 13b16 <settings_commit_subtree+0x3e>
{
   13afe:	4628      	mov	r0, r5
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b00:	3414      	adds	r4, #20
   13b02:	4605      	mov	r5, r0
   13b04:	e7ed      	b.n	13ae2 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b06:	6820      	ldr	r0, [r4, #0]
   13b08:	2200      	movs	r2, #0
   13b0a:	4631      	mov	r1, r6
   13b0c:	f016 fd33 	bl	2a576 <settings_name_steq>
   13b10:	2800      	cmp	r0, #0
   13b12:	d1f2      	bne.n	13afa <settings_commit_subtree+0x22>
   13b14:	e7f3      	b.n	13afe <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   13b16:	4798      	blx	r3
			if (!rc) {
   13b18:	2d00      	cmp	r5, #0
   13b1a:	d1f0      	bne.n	13afe <settings_commit_subtree+0x26>
   13b1c:	e7f0      	b.n	13b00 <settings_commit_subtree+0x28>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   13b1e:	d3eb      	bcc.n	13af8 <settings_commit_subtree+0x20>
	return list->head;
   13b20:	4b0f      	ldr	r3, [pc, #60]	; (13b60 <settings_commit_subtree+0x88>)
   13b22:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   13b24:	b194      	cbz	r4, 13b4c <settings_commit_subtree+0x74>
   13b26:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b28:	b91e      	cbnz	r6, 13b32 <settings_commit_subtree+0x5a>
			continue;
		}
		if (ch->h_commit) {
   13b2a:	68e3      	ldr	r3, [r4, #12]
   13b2c:	b94b      	cbnz	r3, 13b42 <settings_commit_subtree+0x6a>
	return node->next;
   13b2e:	6964      	ldr	r4, [r4, #20]
   13b30:	e7f8      	b.n	13b24 <settings_commit_subtree+0x4c>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   13b32:	6820      	ldr	r0, [r4, #0]
   13b34:	2200      	movs	r2, #0
   13b36:	4631      	mov	r1, r6
   13b38:	f016 fd1d 	bl	2a576 <settings_name_steq>
   13b3c:	2800      	cmp	r0, #0
   13b3e:	d1f4      	bne.n	13b2a <settings_commit_subtree+0x52>
   13b40:	e7f5      	b.n	13b2e <settings_commit_subtree+0x56>
			rc2 = ch->h_commit();
   13b42:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   13b44:	2d00      	cmp	r5, #0
   13b46:	bf08      	it	eq
   13b48:	4605      	moveq	r5, r0
   13b4a:	e7f0      	b.n	13b2e <settings_commit_subtree+0x56>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   13b4c:	4628      	mov	r0, r5
   13b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b50:	0002e5c0 	.word	0x0002e5c0
   13b54:	0002e638 	.word	0x0002e638
   13b58:	0002fbf8 	.word	0x0002fbf8
   13b5c:	0002f2b5 	.word	0x0002f2b5
   13b60:	200029c4 	.word	0x200029c4

00013b64 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   13b64:	b538      	push	{r3, r4, r5, lr}

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   13b66:	4d0c      	ldr	r5, [pc, #48]	; (13b98 <settings_subsys_init+0x34>)
	return z_impl_k_mutex_lock(mutex, timeout);
   13b68:	480c      	ldr	r0, [pc, #48]	; (13b9c <settings_subsys_init+0x38>)
   13b6a:	f04f 33ff 	mov.w	r3, #4294967295
   13b6e:	f04f 32ff 	mov.w	r2, #4294967295
   13b72:	f010 fa95 	bl	240a0 <z_impl_k_mutex_lock>
   13b76:	782b      	ldrb	r3, [r5, #0]
   13b78:	b93b      	cbnz	r3, 13b8a <settings_subsys_init+0x26>
		settings_init();
   13b7a:	f7ff ff0b 	bl	13994 <settings_init>

		err = settings_backend_init(); /* func rises kernel panic once error */
   13b7e:	f000 f86d 	bl	13c5c <settings_backend_init>

		if (!err) {
   13b82:	4604      	mov	r4, r0
   13b84:	b910      	cbnz	r0, 13b8c <settings_subsys_init+0x28>
			settings_subsys_initialized = true;
   13b86:	2301      	movs	r3, #1
   13b88:	702b      	strb	r3, [r5, #0]
	int err = 0;
   13b8a:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   13b8c:	4803      	ldr	r0, [pc, #12]	; (13b9c <settings_subsys_init+0x38>)
   13b8e:	f010 fb3d 	bl	2420c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   13b92:	4620      	mov	r0, r4
   13b94:	bd38      	pop	{r3, r4, r5, pc}
   13b96:	bf00      	nop
   13b98:	20004158 	.word	0x20004158
   13b9c:	2000097c 	.word	0x2000097c

00013ba0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   13ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   13ba4:	8f04      	ldrh	r4, [r0, #56]	; 0x38

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   13ba6:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13c58 <settings_nvs_load+0xb8>
	name_id = cf->last_name_id + 1;
   13baa:	3401      	adds	r4, #1
{
   13bac:	b098      	sub	sp, #96	; 0x60
   13bae:	4680      	mov	r8, r0
   13bb0:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
   13bb2:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13bb4:	f100 0608 	add.w	r6, r0, #8
		name_id--;
   13bb8:	1e65      	subs	r5, r4, #1
   13bba:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   13bbc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   13bc0:	d047      	beq.n	13c52 <settings_nvs_load+0xb2>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13bc2:	234a      	movs	r3, #74	; 0x4a
   13bc4:	aa05      	add	r2, sp, #20
   13bc6:	4629      	mov	r1, r5
   13bc8:	4630      	mov	r0, r6
   13bca:	f016 fca3 	bl	2a514 <nvs_read>
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13bce:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   13bd2:	343f      	adds	r4, #63	; 0x3f
   13bd4:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   13bd6:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13bd8:	4621      	mov	r1, r4
   13bda:	2301      	movs	r3, #1
   13bdc:	f10d 020b 	add.w	r2, sp, #11
   13be0:	4630      	mov	r0, r6
   13be2:	f016 fc97 	bl	2a514 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13be6:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   13be8:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
   13bea:	dc03      	bgt.n	13bf4 <settings_nvs_load+0x54>
   13bec:	2800      	cmp	r0, #0
   13bee:	dc03      	bgt.n	13bf8 <settings_nvs_load+0x58>
{
   13bf0:	462c      	mov	r4, r5
   13bf2:	e7e1      	b.n	13bb8 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   13bf4:	2800      	cmp	r0, #0
   13bf6:	dc16      	bgt.n	13c26 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
   13bf8:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   13bfc:	42ab      	cmp	r3, r5
   13bfe:	d109      	bne.n	13c14 <settings_nvs_load+0x74>
				cf->last_name_id--;
   13c00:	4642      	mov	r2, r8
   13c02:	1e6b      	subs	r3, r5, #1
   13c04:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   13c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   13c0c:	2302      	movs	r3, #2
   13c0e:	4630      	mov	r0, r6
   13c10:	f7ff fca6 	bl	13560 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
   13c14:	4629      	mov	r1, r5
   13c16:	4630      	mov	r0, r6
   13c18:	f016 fc78 	bl	2a50c <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   13c1c:	4621      	mov	r1, r4
   13c1e:	4630      	mov	r0, r6
   13c20:	f016 fc74 	bl	2a50c <nvs_delete>
			continue;
   13c24:	e7e4      	b.n	13bf0 <settings_nvs_load+0x50>
		name[rc1] = '\0';
   13c26:	f107 0360 	add.w	r3, r7, #96	; 0x60
   13c2a:	eb0d 0703 	add.w	r7, sp, r3
   13c2e:	2300      	movs	r3, #0
   13c30:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
   13c34:	4652      	mov	r2, sl
   13c36:	f8cd 9000 	str.w	r9, [sp]
   13c3a:	ab03      	add	r3, sp, #12
   13c3c:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
   13c3e:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   13c40:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
   13c44:	f7ff ff08 	bl	13a58 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   13c48:	2800      	cmp	r0, #0
   13c4a:	d0d1      	beq.n	13bf0 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
   13c4c:	b018      	add	sp, #96	; 0x60
   13c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13c52:	2000      	movs	r0, #0
	return ret;
   13c54:	e7fa      	b.n	13c4c <settings_nvs_load+0xac>
   13c56:	bf00      	nop
   13c58:	0002a5e7 	.word	0x0002a5e7

00013c5c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   13c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   13c5e:	2301      	movs	r3, #1

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13c60:	4669      	mov	r1, sp
   13c62:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
   13c64:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   13c66:	f7ff fdb5 	bl	137d4 <flash_area_open>
	if (rc) {
   13c6a:	4604      	mov	r4, r0
   13c6c:	2800      	cmp	r0, #0
   13c6e:	d134      	bne.n	13cda <settings_backend_init+0x7e>
		return rc;
	}

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13c70:	aa02      	add	r2, sp, #8
   13c72:	a901      	add	r1, sp, #4
   13c74:	2004      	movs	r0, #4
   13c76:	f7ff fdd5 	bl	13824 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
   13c7a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   13c7e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
   13c80:	d02b      	beq.n	13cda <settings_backend_init+0x7e>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   13c82:	b138      	cbz	r0, 13c94 <settings_backend_init+0x38>
   13c84:	340c      	adds	r4, #12
   13c86:	d005      	beq.n	13c94 <settings_backend_init+0x38>
		k_panic();
   13c88:	4040      	eors	r0, r0
   13c8a:	f380 8811 	msr	BASEPRI, r0
   13c8e:	f04f 0004 	mov.w	r0, #4
   13c92:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   13c94:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
   13c96:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   13c9a:	d223      	bcs.n	13ce4 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
   13c9c:	9a00      	ldr	r2, [sp, #0]
   13c9e:	2300      	movs	r3, #0
   13ca0:	6894      	ldr	r4, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
   13ca2:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
   13ca4:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
   13ca6:	4284      	cmp	r4, r0
   13ca8:	d31a      	bcc.n	13ce0 <settings_backend_init+0x84>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   13caa:	3301      	adds	r3, #1
   13cac:	2b08      	cmp	r3, #8
   13cae:	d1f9      	bne.n	13ca4 <settings_backend_init+0x48>
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   13cb0:	4d0e      	ldr	r5, [pc, #56]	; (13cec <settings_backend_init+0x90>)
   13cb2:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   13cb4:	82eb      	strh	r3, [r5, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   13cb6:	6853      	ldr	r3, [r2, #4]
   13cb8:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;

	rc = settings_nvs_backend_init(&default_settings_nvs);
   13cba:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev = fa->fa_dev;
   13cbc:	68d3      	ldr	r3, [r2, #12]
   13cbe:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   13cc0:	f016 fd2b 	bl	2a71a <settings_nvs_backend_init>
	if (rc) {
   13cc4:	4604      	mov	r4, r0
   13cc6:	b940      	cbnz	r0, 13cda <settings_backend_init+0x7e>
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13cc8:	4e09      	ldr	r6, [pc, #36]	; (13cf0 <settings_backend_init+0x94>)
   13cca:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
   13ccc:	4628      	mov	r0, r5
   13cce:	f7ff fdff 	bl	138d0 <settings_src_register>
	settings_dst_register(&cf->cf_store);
   13cd2:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
   13cd4:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
   13cd6:	f7ff fe09 	bl	138ec <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   13cda:	4620      	mov	r0, r4
   13cdc:	b004      	add	sp, #16
   13cde:	bd70      	pop	{r4, r5, r6, pc}
   13ce0:	b29b      	uxth	r3, r3
   13ce2:	e7e5      	b.n	13cb0 <settings_backend_init+0x54>
		return -EDOM;
   13ce4:	f06f 0420 	mvn.w	r4, #32
   13ce8:	e7f7      	b.n	13cda <settings_backend_init+0x7e>
   13cea:	bf00      	nop
   13cec:	200029cc 	.word	0x200029cc
   13cf0:	20000548 	.word	0x20000548

00013cf4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   13cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13cf8:	4605      	mov	r5, r0
   13cfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   13cfe:	f3ef 8611 	mrs	r6, BASEPRI
   13d02:	f383 8812 	msr	BASEPRI_MAX, r3
   13d06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13d0a:	481b      	ldr	r0, [pc, #108]	; (13d78 <pm_state_notify+0x84>)
   13d0c:	f010 f974 	bl	23ff8 <z_spin_lock_valid>
   13d10:	b940      	cbnz	r0, 13d24 <pm_state_notify+0x30>
   13d12:	491a      	ldr	r1, [pc, #104]	; (13d7c <pm_state_notify+0x88>)
   13d14:	481a      	ldr	r0, [pc, #104]	; (13d80 <pm_state_notify+0x8c>)
   13d16:	2294      	movs	r2, #148	; 0x94
   13d18:	f016 f997 	bl	2a04a <assert_print>
   13d1c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d1e:	4817      	ldr	r0, [pc, #92]	; (13d7c <pm_state_notify+0x88>)
   13d20:	f016 f98c 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   13d24:	4814      	ldr	r0, [pc, #80]	; (13d78 <pm_state_notify+0x84>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13d26:	4f17      	ldr	r7, [pc, #92]	; (13d84 <pm_state_notify+0x90>)
   13d28:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13d88 <pm_state_notify+0x94>
   13d2c:	f010 f982 	bl	24034 <z_spin_lock_set_owner>
	return list->head;
   13d30:	4b16      	ldr	r3, [pc, #88]	; (13d8c <pm_state_notify+0x98>)
   13d32:	681c      	ldr	r4, [r3, #0]
   13d34:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13d38:	b954      	cbnz	r4, 13d50 <pm_state_notify+0x5c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13d3a:	480f      	ldr	r0, [pc, #60]	; (13d78 <pm_state_notify+0x84>)
   13d3c:	f010 f96a 	bl	24014 <z_spin_unlock_valid>
   13d40:	b9a0      	cbnz	r0, 13d6c <pm_state_notify+0x78>
   13d42:	490e      	ldr	r1, [pc, #56]	; (13d7c <pm_state_notify+0x88>)
   13d44:	480e      	ldr	r0, [pc, #56]	; (13d80 <pm_state_notify+0x8c>)
   13d46:	22c2      	movs	r2, #194	; 0xc2
   13d48:	f016 f97f 	bl	2a04a <assert_print>
   13d4c:	21c2      	movs	r1, #194	; 0xc2
   13d4e:	e7e6      	b.n	13d1e <pm_state_notify+0x2a>
			callback = notifier->state_exit;
   13d50:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   13d54:	2d00      	cmp	r5, #0
   13d56:	bf18      	it	ne
   13d58:	4613      	movne	r3, r2
		if (callback) {
   13d5a:	b12b      	cbz	r3, 13d68 <pm_state_notify+0x74>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   13d5c:	f898 2014 	ldrb.w	r2, [r8, #20]
   13d60:	fb09 f202 	mul.w	r2, r9, r2
   13d64:	5cb8      	ldrb	r0, [r7, r2]
   13d66:	4798      	blx	r3
	return node->next;
   13d68:	6824      	ldr	r4, [r4, #0]
   13d6a:	e7e5      	b.n	13d38 <pm_state_notify+0x44>
	__asm__ volatile(
   13d6c:	f386 8811 	msr	BASEPRI, r6
   13d70:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   13d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13d78:	20002a0c 	.word	0x20002a0c
   13d7c:	0002f9fb 	.word	0x0002f9fb
   13d80:	0002f2b5 	.word	0x0002f2b5
   13d84:	20002a20 	.word	0x20002a20
   13d88:	2000361c 	.word	0x2000361c
   13d8c:	20002a2c 	.word	0x20002a2c

00013d90 <pm_system_resume>:

void pm_system_resume(void)
{
   13d90:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   13d92:	4b19      	ldr	r3, [pc, #100]	; (13df8 <pm_system_resume+0x68>)
   13d94:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13d96:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   13d9a:	f004 031f 	and.w	r3, r4, #31
   13d9e:	2201      	movs	r2, #1
   13da0:	409a      	lsls	r2, r3
   13da2:	4b16      	ldr	r3, [pc, #88]	; (13dfc <pm_system_resume+0x6c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13da4:	0961      	lsrs	r1, r4, #5
   13da6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13daa:	43d0      	mvns	r0, r2
   13dac:	e853 1f00 	ldrex	r1, [r3]
   13db0:	ea01 0500 	and.w	r5, r1, r0
   13db4:	e843 5600 	strex	r6, r5, [r3]
   13db8:	2e00      	cmp	r6, #0
   13dba:	d1f7      	bne.n	13dac <pm_system_resume+0x1c>
   13dbc:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   13dc0:	420a      	tst	r2, r1
   13dc2:	d013      	beq.n	13dec <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   13dc4:	4b0e      	ldr	r3, [pc, #56]	; (13e00 <pm_system_resume+0x70>)
   13dc6:	4d0f      	ldr	r5, [pc, #60]	; (13e04 <pm_system_resume+0x74>)
   13dc8:	b18b      	cbz	r3, 13dee <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   13dca:	230c      	movs	r3, #12
   13dcc:	4363      	muls	r3, r4
   13dce:	18ea      	adds	r2, r5, r3
   13dd0:	5ce8      	ldrb	r0, [r5, r3]
   13dd2:	7851      	ldrb	r1, [r2, #1]
   13dd4:	f017 f932 	bl	2b03c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   13dd8:	2000      	movs	r0, #0
   13dda:	f7ff ff8b 	bl	13cf4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   13dde:	230c      	movs	r3, #12
   13de0:	435c      	muls	r4, r3
   13de2:	192a      	adds	r2, r5, r4
   13de4:	2300      	movs	r3, #0
   13de6:	512b      	str	r3, [r5, r4]
   13de8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   13dec:	bd70      	pop	{r4, r5, r6, pc}
   13dee:	f383 8811 	msr	BASEPRI, r3
   13df2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   13df6:	e7ef      	b.n	13dd8 <pm_system_resume+0x48>
   13df8:	2000361c 	.word	0x2000361c
   13dfc:	20002a34 	.word	0x20002a34
   13e00:	0002b03d 	.word	0x0002b03d
   13e04:	20002a20 	.word	0x20002a20

00013e08 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   13e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   13e0c:	4b42      	ldr	r3, [pc, #264]	; (13f18 <pm_system_suspend+0x110>)
{
   13e0e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   13e10:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   13e12:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e16:	f3ef 8811 	mrs	r8, BASEPRI
   13e1a:	f383 8812 	msr	BASEPRI_MAX, r3
   13e1e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e22:	483e      	ldr	r0, [pc, #248]	; (13f1c <pm_system_suspend+0x114>)
   13e24:	f010 f8e8 	bl	23ff8 <z_spin_lock_valid>
   13e28:	b940      	cbnz	r0, 13e3c <pm_system_suspend+0x34>
   13e2a:	493d      	ldr	r1, [pc, #244]	; (13f20 <pm_system_suspend+0x118>)
   13e2c:	483d      	ldr	r0, [pc, #244]	; (13f24 <pm_system_suspend+0x11c>)
   13e2e:	2294      	movs	r2, #148	; 0x94
   13e30:	f016 f90b 	bl	2a04a <assert_print>
   13e34:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e36:	483a      	ldr	r0, [pc, #232]	; (13f20 <pm_system_suspend+0x118>)
   13e38:	f016 f900 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   13e3c:	4837      	ldr	r0, [pc, #220]	; (13f1c <pm_system_suspend+0x114>)
   13e3e:	4e3a      	ldr	r6, [pc, #232]	; (13f28 <pm_system_suspend+0x120>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   13e40:	240c      	movs	r4, #12
   13e42:	f010 f8f7 	bl	24034 <z_spin_lock_set_owner>
   13e46:	436c      	muls	r4, r5
   13e48:	4b38      	ldr	r3, [pc, #224]	; (13f2c <pm_system_suspend+0x124>)
   13e4a:	5d19      	ldrb	r1, [r3, r4]
   13e4c:	191a      	adds	r2, r3, r4
   13e4e:	b191      	cbz	r1, 13e76 <pm_system_suspend+0x6e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   13e50:	ca07      	ldmia	r2, {r0, r1, r2}
   13e52:	eb06 0c04 	add.w	ip, r6, r4
   13e56:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   13e5a:	2200      	movs	r2, #0
   13e5c:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e5e:	482f      	ldr	r0, [pc, #188]	; (13f1c <pm_system_suspend+0x114>)
   13e60:	f010 f8d8 	bl	24014 <z_spin_unlock_valid>
   13e64:	4604      	mov	r4, r0
   13e66:	b988      	cbnz	r0, 13e8c <pm_system_suspend+0x84>
   13e68:	492d      	ldr	r1, [pc, #180]	; (13f20 <pm_system_suspend+0x118>)
   13e6a:	482e      	ldr	r0, [pc, #184]	; (13f24 <pm_system_suspend+0x11c>)
   13e6c:	22c2      	movs	r2, #194	; 0xc2
   13e6e:	f016 f8ec 	bl	2a04a <assert_print>
   13e72:	21c2      	movs	r1, #194	; 0xc2
   13e74:	e7df      	b.n	13e36 <pm_system_suspend+0x2e>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   13e76:	4639      	mov	r1, r7
   13e78:	4628      	mov	r0, r5
   13e7a:	f000 f861 	bl	13f40 <pm_policy_next_state>
		if (info != NULL) {
   13e7e:	2800      	cmp	r0, #0
   13e80:	d0ed      	beq.n	13e5e <pm_system_suspend+0x56>
			z_cpus_pm_state[id] = *info;
   13e82:	c807      	ldmia	r0, {r0, r1, r2}
   13e84:	4434      	add	r4, r6
   13e86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   13e8a:	e7e8      	b.n	13e5e <pm_system_suspend+0x56>
	__asm__ volatile(
   13e8c:	f388 8811 	msr	BASEPRI, r8
   13e90:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   13e94:	230c      	movs	r3, #12
   13e96:	436b      	muls	r3, r5
   13e98:	18f2      	adds	r2, r6, r3
   13e9a:	5cf3      	ldrb	r3, [r6, r3]
   13e9c:	2b00      	cmp	r3, #0
   13e9e:	d039      	beq.n	13f14 <pm_system_suspend+0x10c>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   13ea0:	1c7b      	adds	r3, r7, #1
   13ea2:	d00f      	beq.n	13ec4 <pm_system_suspend+0xbc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13ea4:	f8d2 e008 	ldr.w	lr, [r2, #8]
   13ea8:	4821      	ldr	r0, [pc, #132]	; (13f30 <pm_system_suspend+0x128>)
   13eaa:	4a22      	ldr	r2, [pc, #136]	; (13f34 <pm_system_suspend+0x12c>)
   13eac:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   13eb0:	2100      	movs	r1, #0
   13eb2:	2300      	movs	r3, #0
   13eb4:	fbee 010c 	umlal	r0, r1, lr, ip
   13eb8:	f7ec f922 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   13ebc:	2101      	movs	r1, #1
   13ebe:	1a38      	subs	r0, r7, r0
   13ec0:	f012 f9c6 	bl	26250 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13ec4:	f011 f9c4 	bl	25250 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   13ec8:	2001      	movs	r0, #1
   13eca:	f7ff ff13 	bl	13cf4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13ece:	f3bf 8f5b 	dmb	ish
   13ed2:	4b19      	ldr	r3, [pc, #100]	; (13f38 <pm_system_suspend+0x130>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13ed4:	096a      	lsrs	r2, r5, #5
   13ed6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   13eda:	f005 011f 	and.w	r1, r5, #31
   13ede:	2201      	movs	r2, #1
   13ee0:	408a      	lsls	r2, r1
   13ee2:	e853 0f00 	ldrex	r0, [r3]
   13ee6:	4310      	orrs	r0, r2
   13ee8:	e843 0100 	strex	r1, r0, [r3]
   13eec:	2900      	cmp	r1, #0
   13eee:	d1f8      	bne.n	13ee2 <pm_system_suspend+0xda>
   13ef0:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   13ef4:	4b11      	ldr	r3, [pc, #68]	; (13f3c <pm_system_suspend+0x134>)
   13ef6:	b133      	cbz	r3, 13f06 <pm_system_suspend+0xfe>
		pm_state_set(info->state, info->substate_id);
   13ef8:	230c      	movs	r3, #12
   13efa:	436b      	muls	r3, r5
   13efc:	18f2      	adds	r2, r6, r3
   13efe:	5cf0      	ldrb	r0, [r6, r3]
   13f00:	7851      	ldrb	r1, [r2, #1]
   13f02:	f017 f88f 	bl	2b024 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   13f06:	f7ff ff43 	bl	13d90 <pm_system_resume>
	k_sched_unlock();
   13f0a:	f011 f9ed 	bl	252e8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   13f0e:	4620      	mov	r0, r4
   13f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   13f14:	461c      	mov	r4, r3
   13f16:	e7fa      	b.n	13f0e <pm_system_suspend+0x106>
   13f18:	2000361c 	.word	0x2000361c
   13f1c:	20002a10 	.word	0x20002a10
   13f20:	0002f9fb 	.word	0x0002f9fb
   13f24:	0002f2b5 	.word	0x0002f2b5
   13f28:	20002a20 	.word	0x20002a20
   13f2c:	20002a14 	.word	0x20002a14
   13f30:	000f423f 	.word	0x000f423f
   13f34:	000f4240 	.word	0x000f4240
   13f38:	20002a34 	.word	0x20002a34
   13f3c:	0002b025 	.word	0x0002b025

00013f40 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   13f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f44:	b085      	sub	sp, #20
   13f46:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13f48:	a903      	add	r1, sp, #12
   13f4a:	f000 f843 	bl	13fd4 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13f4e:	4b1e      	ldr	r3, [pc, #120]	; (13fc8 <pm_policy_next_state+0x88>)
   13f50:	9d03      	ldr	r5, [sp, #12]
   13f52:	f8d3 a000 	ldr.w	sl, [r3]
   13f56:	f8df 8074 	ldr.w	r8, [pc, #116]	; 13fcc <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13f5a:	1e43      	subs	r3, r0, #1
   13f5c:	b21b      	sxth	r3, r3
   13f5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   13f62:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13f64:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   13f68:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   13f6c:	f04f 0b00 	mov.w	fp, #0
   13f70:	b924      	cbnz	r4, 13f7c <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   13f72:	46a1      	mov	r9, r4
}
   13f74:	4648      	mov	r0, r9
   13f76:	b005      	add	sp, #20
   13f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f7c:	6868      	ldr	r0, [r5, #4]
   13f7e:	4a14      	ldr	r2, [pc, #80]	; (13fd0 <pm_policy_next_state+0x90>)
   13f80:	46c4      	mov	ip, r8
   13f82:	4659      	mov	r1, fp
   13f84:	fbe0 c107 	umlal	ip, r1, r0, r7
   13f88:	2300      	movs	r3, #0
   13f8a:	4660      	mov	r0, ip
   13f8c:	f7ec f8b8 	bl	100 <__aeabi_uldivmod>
   13f90:	9001      	str	r0, [sp, #4]
   13f92:	68a8      	ldr	r0, [r5, #8]
   13f94:	4a0e      	ldr	r2, [pc, #56]	; (13fd0 <pm_policy_next_state+0x90>)
   13f96:	46c4      	mov	ip, r8
   13f98:	4659      	mov	r1, fp
   13f9a:	fbe0 c107 	umlal	ip, r1, r0, r7
   13f9e:	2300      	movs	r3, #0
   13fa0:	4660      	mov	r0, ip
   13fa2:	f7ec f8ad 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13fa6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   13faa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   13fac:	d001      	beq.n	13fb2 <pm_policy_next_state+0x72>
   13fae:	4582      	cmp	sl, r0
   13fb0:	d905      	bls.n	13fbe <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   13fb2:	1c73      	adds	r3, r6, #1
   13fb4:	d0de      	beq.n	13f74 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   13fb6:	9b01      	ldr	r3, [sp, #4]
   13fb8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   13fba:	42b0      	cmp	r0, r6
   13fbc:	d9da      	bls.n	13f74 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   13fbe:	3c01      	subs	r4, #1
   13fc0:	b2a4      	uxth	r4, r4
   13fc2:	3d0c      	subs	r5, #12
   13fc4:	e7d4      	b.n	13f70 <pm_policy_next_state+0x30>
   13fc6:	bf00      	nop
   13fc8:	2000055c 	.word	0x2000055c
   13fcc:	000f423f 	.word	0x000f423f
   13fd0:	000f4240 	.word	0x000f4240

00013fd4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   13fd4:	b908      	cbnz	r0, 13fda <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   13fd6:	4b02      	ldr	r3, [pc, #8]	; (13fe0 <pm_state_cpu_get_all+0xc>)
   13fd8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   13fda:	2000      	movs	r0, #0
   13fdc:	4770      	bx	lr
   13fde:	bf00      	nop
   13fe0:	0002e7ec 	.word	0x0002e7ec

00013fe4 <user_data_alloc.constprop.0>:

/* Currently only one instance is supported */
static struct bt_gatt_dm bt_gatt_dm_inst;

/* Returns pointer to newly allocated space in a dm->data_chunk */
static void *user_data_alloc(struct bt_gatt_dm *dm,
   13fe4:	b538      	push	{r3, r4, r5, lr}
	struct data_chunk_item *item;

	/* Round up len to 32 bits to make sure that return pointers are always
	 * correctly aligned.
	 */
	len = ROUND_UP(len, DATA_ALIGN);
   13fe6:	1cc5      	adds	r5, r0, #3
   13fe8:	f025 0503 	bic.w	r5, r5, #3

	__ASSERT_NO_MSG(len <= CHUNK_DATA_SIZE);
   13fec:	2d74      	cmp	r5, #116	; 0x74
   13fee:	d908      	bls.n	14002 <user_data_alloc.constprop.0+0x1e>
   13ff0:	4917      	ldr	r1, [pc, #92]	; (14050 <user_data_alloc.constprop.0+0x6c>)
   13ff2:	4818      	ldr	r0, [pc, #96]	; (14054 <user_data_alloc.constprop.0+0x70>)
   13ff4:	225b      	movs	r2, #91	; 0x5b
   13ff6:	f016 f828 	bl	2a04a <assert_print>
   13ffa:	4815      	ldr	r0, [pc, #84]	; (14050 <user_data_alloc.constprop.0+0x6c>)
   13ffc:	215b      	movs	r1, #91	; 0x5b
   13ffe:	f016 f81d 	bl	2a03c <assert_post_action>
	return list->head;
   14002:	4c15      	ldr	r4, [pc, #84]	; (14058 <user_data_alloc.constprop.0+0x74>)

	if (sys_slist_is_empty(&dm->chunk_list) ||
   14004:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
   14008:	b123      	cbz	r3, 14014 <user_data_alloc.constprop.0+0x30>
	    dm->cur_chunk_len + len > CHUNK_DATA_SIZE) {
   1400a:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   1400e:	442b      	add	r3, r5
	if (sys_slist_is_empty(&dm->chunk_list) ||
   14010:	2b74      	cmp	r3, #116	; 0x74
   14012:	d919      	bls.n	14048 <user_data_alloc.constprop.0+0x64>

		item = k_calloc(1, sizeof(struct data_chunk_item));
   14014:	2178      	movs	r1, #120	; 0x78
   14016:	2001      	movs	r0, #1
   14018:	f01a f846 	bl	2e0a8 <k_calloc>

		if (!item) {
   1401c:	b178      	cbz	r0, 1403e <user_data_alloc.constprop.0+0x5a>
	parent->next = child;
   1401e:	2300      	movs	r3, #0
   14020:	6003      	str	r3, [r0, #0]
	return list->tail;
   14022:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
Z_GENLIST_APPEND(slist, snode)
   14026:	b95a      	cbnz	r2, 14040 <user_data_alloc.constprop.0+0x5c>
	list->head = node;
   14028:	e9c4 0054 	strd	r0, r0, [r4, #336]	; 0x150
			return NULL;
		}

		sys_slist_append(&dm->chunk_list, &item->node);
		dm->cur_chunk_len = 0;
   1402c:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
		item = SYS_SLIST_PEEK_TAIL_CONTAINER(&dm->chunk_list, item,
						     node);

	}

	user_data_loc = &item->data[dm->cur_chunk_len];
   14030:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
   14034:	1d1a      	adds	r2, r3, #4
	dm->cur_chunk_len += len;
   14036:	441d      	add	r5, r3
	user_data_loc = &item->data[dm->cur_chunk_len];
   14038:	4410      	add	r0, r2
	dm->cur_chunk_len += len;
   1403a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

	return user_data_loc;
}
   1403e:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   14040:	6010      	str	r0, [r2, #0]
	list->tail = node;
   14042:	f8c4 0154 	str.w	r0, [r4, #340]	; 0x154
}
   14046:	e7f1      	b.n	1402c <user_data_alloc.constprop.0+0x48>
	return list->tail;
   14048:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
   1404c:	e7f0      	b.n	14030 <user_data_alloc.constprop.0+0x4c>
   1404e:	bf00      	nop
   14050:	0002fc57 	.word	0x0002fc57
   14054:	0002f2b5 	.word	0x0002f2b5
   14058:	20002a38 	.word	0x20002a38

0001405c <discovery_complete.constprop.0>:
   1405c:	480a      	ldr	r0, [pc, #40]	; (14088 <discovery_complete.constprop.0+0x2c>)
   1405e:	f3bf 8f5b 	dmb	ish
   14062:	e850 3f00 	ldrex	r3, [r0]
   14066:	f043 0302 	orr.w	r3, r3, #2
   1406a:	e840 3200 	strex	r2, r3, [r0]
   1406e:	2a00      	cmp	r2, #0
   14070:	d1f7      	bne.n	14062 <discovery_complete.constprop.0+0x6>
   14072:	f3bf 8f5b 	dmb	ish

static void discovery_complete(struct bt_gatt_dm *dm)
{
	LOG_DBG("Discovery complete.");
	atomic_set_bit(dm->state_flags, STATE_ATTRS_RELEASE_PENDING);
	if (dm->callback->completed) {
   14076:	6a43      	ldr	r3, [r0, #36]	; 0x24
   14078:	681b      	ldr	r3, [r3, #0]
   1407a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
   1407e:	b10b      	cbz	r3, 14084 <discovery_complete.constprop.0+0x28>
		dm->callback->completed(dm, dm->context);
   14080:	6841      	ldr	r1, [r0, #4]
   14082:	4718      	bx	r3
	}
}
   14084:	4770      	bx	lr
   14086:	bf00      	nop
   14088:	20002b70 	.word	0x20002b70

0001408c <get_uuid_size.isra.0>:
	switch (uuid->type) {
   1408c:	2802      	cmp	r0, #2
static size_t get_uuid_size(const struct bt_uuid *uuid)
   1408e:	b508      	push	{r3, lr}
   14090:	d802      	bhi.n	14098 <get_uuid_size.isra.0+0xc>
   14092:	4b04      	ldr	r3, [pc, #16]	; (140a4 <get_uuid_size.isra.0+0x18>)
   14094:	5c18      	ldrb	r0, [r3, r0]
}
   14096:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported UUID type.");
   14098:	4803      	ldr	r0, [pc, #12]	; (140a8 <get_uuid_size.isra.0+0x1c>)
   1409a:	2145      	movs	r1, #69	; 0x45
   1409c:	f015 ffe3 	bl	2a066 <z_log_minimal_printk>
   140a0:	2000      	movs	r0, #0
   140a2:	e7f8      	b.n	14096 <get_uuid_size.isra.0+0xa>
   140a4:	0002fe5c 	.word	0x0002fe5c
   140a8:	0002fc82 	.word	0x0002fc82

000140ac <attr_store.constprop.0>:
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   140ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   140b0:	4c18      	ldr	r4, [pc, #96]	; (14114 <attr_store.constprop.0+0x68>)
   140b2:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   140b6:	2b22      	cmp	r3, #34	; 0x22
static struct bt_gatt_dm_attr *attr_store(struct bt_gatt_dm *dm,
   140b8:	4605      	mov	r5, r0
   140ba:	460e      	mov	r6, r1
	if (dm->cur_attr_id >= ARRAY_SIZE(dm->attrs)) {
   140bc:	d908      	bls.n	140d0 <attr_store.constprop.0+0x24>
		LOG_ERR("No space for new attribute.");
   140be:	4816      	ldr	r0, [pc, #88]	; (14118 <attr_store.constprop.0+0x6c>)
   140c0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No space for attribute data.");
   140c2:	f015 ffd0 	bl	2a066 <z_log_minimal_printk>
		return NULL;
   140c6:	f04f 0800 	mov.w	r8, #0
}
   140ca:	4640      	mov	r0, r8
   140cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t uuid_size = get_uuid_size(attr->uuid);
   140d0:	6803      	ldr	r3, [r0, #0]
   140d2:	7818      	ldrb	r0, [r3, #0]
   140d4:	f7ff ffda 	bl	1408c <get_uuid_size.isra.0>
   140d8:	4607      	mov	r7, r0
	uint8_t *attr_data = user_data_alloc(dm, additional_len + uuid_size);
   140da:	4430      	add	r0, r6
   140dc:	f7ff ff82 	bl	13fe4 <user_data_alloc.constprop.0>
	if (!attr_data) {
   140e0:	b910      	cbnz	r0, 140e8 <attr_store.constprop.0+0x3c>
		LOG_ERR("No space for attribute data.");
   140e2:	480e      	ldr	r0, [pc, #56]	; (1411c <attr_store.constprop.0+0x70>)
   140e4:	2145      	movs	r1, #69	; 0x45
   140e6:	e7ec      	b.n	140c2 <attr_store.constprop.0+0x16>
	cur_attr = &dm->attrs[(dm->cur_attr_id)++];
   140e8:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   140ec:	1c5a      	adds	r2, r3, #1
   140ee:	3303      	adds	r3, #3
   140f0:	00db      	lsls	r3, r3, #3
   140f2:	f103 0804 	add.w	r8, r3, #4
   140f6:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
   140fa:	44a0      	add	r8, r4
	cur_attr->handle = attr->handle;
   140fc:	441c      	add	r4, r3
   140fe:	8a2a      	ldrh	r2, [r5, #16]
   14100:	8122      	strh	r2, [r4, #8]
	cur_attr->perm = attr->perm;
   14102:	8a6b      	ldrh	r3, [r5, #18]
   14104:	72a3      	strb	r3, [r4, #10]
	cur_attr->uuid = (struct bt_uuid *)&attr_data[additional_len];
   14106:	4430      	add	r0, r6
   14108:	6060      	str	r0, [r4, #4]
	memcpy(cur_attr->uuid, attr->uuid, uuid_size);
   1410a:	6829      	ldr	r1, [r5, #0]
   1410c:	463a      	mov	r2, r7
   1410e:	f016 ff72 	bl	2aff6 <memcpy>
	return cur_attr;
   14112:	e7da      	b.n	140ca <attr_store.constprop.0+0x1e>
   14114:	20002a38 	.word	0x20002a38
   14118:	0002fc9e 	.word	0x0002fc9e
   1411c:	0002fcbf 	.word	0x0002fcbf

00014120 <uuid_store.constprop.0>:
static struct bt_uuid *uuid_store(struct bt_gatt_dm *dm,
   14120:	b570      	push	{r4, r5, r6, lr}
	if (!uuid) {
   14122:	4605      	mov	r5, r0
   14124:	b930      	cbnz	r0, 14134 <uuid_store.constprop.0+0x14>
		LOG_ERR("Uninitialized UUID.");
   14126:	480b      	ldr	r0, [pc, #44]	; (14154 <uuid_store.constprop.0+0x34>)
   14128:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No space for a UUID.");
   1412a:	f015 ff9c 	bl	2a066 <z_log_minimal_printk>
		return NULL;
   1412e:	2400      	movs	r4, #0
}
   14130:	4620      	mov	r0, r4
   14132:	bd70      	pop	{r4, r5, r6, pc}
	size_t size = get_uuid_size(uuid);
   14134:	7800      	ldrb	r0, [r0, #0]
   14136:	f7ff ffa9 	bl	1408c <get_uuid_size.isra.0>
   1413a:	4606      	mov	r6, r0
	void *buffer = user_data_alloc(dm, size);
   1413c:	f7ff ff52 	bl	13fe4 <user_data_alloc.constprop.0>
   14140:	4604      	mov	r4, r0
	if (!buffer) {
   14142:	b910      	cbnz	r0, 1414a <uuid_store.constprop.0+0x2a>
		LOG_ERR("No space for a UUID.");
   14144:	4804      	ldr	r0, [pc, #16]	; (14158 <uuid_store.constprop.0+0x38>)
   14146:	2145      	movs	r1, #69	; 0x45
   14148:	e7ef      	b.n	1412a <uuid_store.constprop.0+0xa>
	memcpy(buffer, uuid, size);
   1414a:	4632      	mov	r2, r6
   1414c:	4629      	mov	r1, r5
   1414e:	f016 ff52 	bl	2aff6 <memcpy>
	return (struct bt_uuid *)buffer;
   14152:	e7ed      	b.n	14130 <uuid_store.constprop.0+0x10>
   14154:	0002fce1 	.word	0x0002fce1
   14158:	0002fcfa 	.word	0x0002fcfa

0001415c <discovery_callback>:
}

static uint8_t discovery_callback(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr,
			       struct bt_gatt_discover_params *params)
{
   1415c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		LOG_DBG("NULL attribute");
	} else {
		LOG_DBG("Attr: handle %u", attr->handle);
	}

	if (conn != bt_gatt_dm_inst.conn) {
   14160:	4c83      	ldr	r4, [pc, #524]	; (14370 <discovery_callback+0x214>)
   14162:	6823      	ldr	r3, [r4, #0]
   14164:	4283      	cmp	r3, r0
{
   14166:	460d      	mov	r5, r1
	if (conn != bt_gatt_dm_inst.conn) {
   14168:	d00c      	beq.n	14184 <discovery_callback+0x28>
		LOG_ERR("Unexpected conn object. Aborting.");
   1416a:	2145      	movs	r1, #69	; 0x45
   1416c:	4881      	ldr	r0, [pc, #516]	; (14374 <discovery_callback+0x218>)
   1416e:	f015 ff7a 	bl	2a066 <z_log_minimal_printk>
		discovery_complete_error(&bt_gatt_dm_inst, -EFAULT);
   14172:	f06f 010d 	mvn.w	r1, #13
   14176:	4620      	mov	r0, r4
   14178:	f016 fb34 	bl	2a7e4 <discovery_complete_error>
		return BT_GATT_ITER_STOP;
   1417c:	2000      	movs	r0, #0

		break;
	}

	return BT_GATT_ITER_STOP;
}
   1417e:	b002      	add	sp, #8
   14180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14184:	7c13      	ldrb	r3, [r2, #16]
	switch (params->type) {
   14186:	2b03      	cmp	r3, #3
   14188:	f000 80ba 	beq.w	14300 <discovery_callback+0x1a4>
   1418c:	d80a      	bhi.n	141a4 <discovery_callback+0x48>
   1418e:	2b02      	cmp	r3, #2
   14190:	d124      	bne.n	141dc <discovery_callback+0x80>
		__ASSERT(false, "Unknown param type.");
   14192:	4979      	ldr	r1, [pc, #484]	; (14378 <discovery_callback+0x21c>)
   14194:	4879      	ldr	r0, [pc, #484]	; (1437c <discovery_callback+0x220>)
   14196:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1419a:	f015 ff56 	bl	2a04a <assert_print>
   1419e:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   141a2:	e046      	b.n	14232 <discovery_callback+0xd6>
	switch (params->type) {
   141a4:	2b05      	cmp	r3, #5
   141a6:	d1f4      	bne.n	14192 <discovery_callback+0x36>
	if (!attr) {
   141a8:	2900      	cmp	r1, #0
   141aa:	f040 8084 	bne.w	142b6 <discovery_callback+0x15a>
		if (dm->cur_attr_id > 1) {
   141ae:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   141b2:	2b01      	cmp	r3, #1
   141b4:	d968      	bls.n	14288 <discovery_callback+0x12c>
				dm->attrs[0].handle + 1;
   141b6:	8c23      	ldrh	r3, [r4, #32]
   141b8:	3301      	adds	r3, #1
			dm->discover_params.start_handle =
   141ba:	8223      	strh	r3, [r4, #16]
			int err = bt_gatt_discover(dm->conn,
   141bc:	f104 0108 	add.w	r1, r4, #8
			dm->discover_params.type =
   141c0:	2303      	movs	r3, #3
   141c2:	7623      	strb	r3, [r4, #24]
			int err = bt_gatt_discover(dm->conn,
   141c4:	f007 fd2e 	bl	1bc24 <bt_gatt_discover>
			if (err) {
   141c8:	4605      	mov	r5, r0
   141ca:	2800      	cmp	r0, #0
   141cc:	d0d6      	beq.n	1417c <discovery_callback+0x20>
				LOG_ERR("Characteristic discover failed,"
   141ce:	4602      	mov	r2, r0
   141d0:	2145      	movs	r1, #69	; 0x45
   141d2:	486b      	ldr	r0, [pc, #428]	; (14380 <discovery_callback+0x224>)
   141d4:	f015 ff47 	bl	2a066 <z_log_minimal_printk>
				discovery_complete_error(dm, err);
   141d8:	4629      	mov	r1, r5
   141da:	e7cc      	b.n	14176 <discovery_callback+0x1a>
	if (!attr) {
   141dc:	b919      	cbnz	r1, 141e6 <discovery_callback+0x8a>
		discovery_complete_not_found(dm);
   141de:	4620      	mov	r0, r4
   141e0:	f016 fb16 	bl	2a810 <discovery_complete_not_found>
		return BT_GATT_ITER_STOP;
   141e4:	e7ca      	b.n	1417c <discovery_callback+0x20>
	struct bt_gatt_service_val *service_val = attr->user_data;
   141e6:	f8d1 800c 	ldr.w	r8, [r1, #12]
		attr_store(dm, attr, sizeof(*service_val));
   141ea:	4628      	mov	r0, r5
   141ec:	2108      	movs	r1, #8
   141ee:	f7ff ff5d 	bl	140ac <attr_store.constprop.0>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   141f2:	2700      	movs	r7, #0
		attr_store(dm, attr, sizeof(*service_val));
   141f4:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) == 0 ||
   141f6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   141fa:	6828      	ldr	r0, [r5, #0]
   141fc:	f88d 7000 	strb.w	r7, [sp]
   14200:	4669      	mov	r1, sp
   14202:	f8ad 3002 	strh.w	r3, [sp, #2]
   14206:	f016 ff8a 	bl	2b11e <bt_uuid_cmp>
   1420a:	b1a8      	cbz	r0, 14238 <discovery_callback+0xdc>
   1420c:	f642 0301 	movw	r3, #10241	; 0x2801
   14210:	6828      	ldr	r0, [r5, #0]
   14212:	f88d 7004 	strb.w	r7, [sp, #4]
   14216:	a901      	add	r1, sp, #4
   14218:	f8ad 3006 	strh.w	r3, [sp, #6]
   1421c:	f016 ff7f 	bl	2b11e <bt_uuid_cmp>
   14220:	b150      	cbz	r0, 14238 <discovery_callback+0xdc>
   14222:	4955      	ldr	r1, [pc, #340]	; (14378 <discovery_callback+0x21c>)
   14224:	4855      	ldr	r0, [pc, #340]	; (1437c <discovery_callback+0x220>)
   14226:	f240 1227 	movw	r2, #295	; 0x127
   1422a:	f015 ff0e 	bl	2a04a <assert_print>
   1422e:	f240 1127 	movw	r1, #295	; 0x127
	__ASSERT_NO_MSG(cur_service_val != NULL);
   14232:	4851      	ldr	r0, [pc, #324]	; (14378 <discovery_callback+0x21c>)
   14234:	f015 ff02 	bl	2a03c <assert_post_action>
	if (!cur_attr) {
   14238:	b93e      	cbnz	r6, 1424a <discovery_callback+0xee>
		LOG_ERR("Not enough memory for service attribute.");
   1423a:	4852      	ldr	r0, [pc, #328]	; (14384 <discovery_callback+0x228>)
   1423c:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Not enough memory for service attribute data.");
   1423e:	f015 ff12 	bl	2a066 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   14242:	484b      	ldr	r0, [pc, #300]	; (14370 <discovery_callback+0x214>)
   14244:	f06f 010b 	mvn.w	r1, #11
   14248:	e796      	b.n	14178 <discovery_callback+0x1c>
		bt_gatt_dm_attr_service_val(cur_attr);
   1424a:	4630      	mov	r0, r6
   1424c:	f016 faf4 	bl	2a838 <bt_gatt_dm_attr_service_val>
	__ASSERT_NO_MSG(cur_service_val != NULL);
   14250:	4605      	mov	r5, r0
   14252:	b940      	cbnz	r0, 14266 <discovery_callback+0x10a>
   14254:	4948      	ldr	r1, [pc, #288]	; (14378 <discovery_callback+0x21c>)
   14256:	4849      	ldr	r0, [pc, #292]	; (1437c <discovery_callback+0x220>)
   14258:	f240 123b 	movw	r2, #315	; 0x13b
   1425c:	f015 fef5 	bl	2a04a <assert_print>
   14260:	f240 113b 	movw	r1, #315	; 0x13b
   14264:	e7e5      	b.n	14232 <discovery_callback+0xd6>
	memcpy(cur_service_val, service_val, sizeof(*cur_service_val));
   14266:	2208      	movs	r2, #8
   14268:	4641      	mov	r1, r8
   1426a:	f016 fec4 	bl	2aff6 <memcpy>
	cur_service_val->uuid = uuid_store(dm, cur_service_val->uuid);
   1426e:	6828      	ldr	r0, [r5, #0]
   14270:	f7ff ff56 	bl	14120 <uuid_store.constprop.0>
   14274:	6028      	str	r0, [r5, #0]
	if (!cur_service_val->uuid) {
   14276:	b910      	cbnz	r0, 1427e <discovery_callback+0x122>
		LOG_ERR("Not enough memory for service attribute data.");
   14278:	4843      	ldr	r0, [pc, #268]	; (14388 <discovery_callback+0x22c>)
   1427a:	2145      	movs	r1, #69	; 0x45
   1427c:	e7df      	b.n	1423e <discovery_callback+0xe2>
	dm->discover_params.end_handle = cur_service_val->end_handle;
   1427e:	88ab      	ldrh	r3, [r5, #4]
   14280:	82e3      	strh	r3, [r4, #22]
	if (cur_attr->handle == cur_service_val->end_handle) {
   14282:	88b2      	ldrh	r2, [r6, #4]
   14284:	429a      	cmp	r2, r3
   14286:	d102      	bne.n	1428e <discovery_callback+0x132>
		discovery_complete(dm);
   14288:	f7ff fee8 	bl	1405c <discovery_complete.constprop.0>
		return BT_GATT_ITER_STOP;
   1428c:	e776      	b.n	1417c <discovery_callback+0x20>
	dm->discover_params.uuid         = NULL;
   1428e:	2300      	movs	r3, #0
   14290:	60a3      	str	r3, [r4, #8]
	dm->discover_params.type         = BT_GATT_DISCOVER_ATTRIBUTE;
   14292:	2305      	movs	r3, #5
   14294:	7623      	strb	r3, [r4, #24]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   14296:	88b3      	ldrh	r3, [r6, #4]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   14298:	493c      	ldr	r1, [pc, #240]	; (1438c <discovery_callback+0x230>)
   1429a:	6820      	ldr	r0, [r4, #0]
	dm->discover_params.start_handle = cur_attr->handle + 1;
   1429c:	3301      	adds	r3, #1
   1429e:	8223      	strh	r3, [r4, #16]
	err = bt_gatt_discover(dm->conn, &(dm->discover_params));
   142a0:	f007 fcc0 	bl	1bc24 <bt_gatt_discover>
	if (err) {
   142a4:	4602      	mov	r2, r0
   142a6:	2800      	cmp	r0, #0
   142a8:	f43f af68 	beq.w	1417c <discovery_callback+0x20>
		LOG_ERR("Descriptor discover failed, error: %d.", err);
   142ac:	4838      	ldr	r0, [pc, #224]	; (14390 <discovery_callback+0x234>)
   142ae:	2145      	movs	r1, #69	; 0x45
   142b0:	f015 fed9 	bl	2a066 <z_log_minimal_printk>
   142b4:	e7c5      	b.n	14242 <discovery_callback+0xe6>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   142b6:	2600      	movs	r6, #0
   142b8:	f642 0303 	movw	r3, #10243	; 0x2803
   142bc:	6828      	ldr	r0, [r5, #0]
   142be:	f88d 6004 	strb.w	r6, [sp, #4]
   142c2:	a901      	add	r1, sp, #4
   142c4:	f8ad 3006 	strh.w	r3, [sp, #6]
   142c8:	f016 ff29 	bl	2b11e <bt_uuid_cmp>
   142cc:	b950      	cbnz	r0, 142e4 <discovery_callback+0x188>
		cur_attr = attr_store(dm, attr, sizeof(struct bt_gatt_chrc));
   142ce:	2108      	movs	r1, #8
   142d0:	4628      	mov	r0, r5
   142d2:	f7ff feeb 	bl	140ac <attr_store.constprop.0>
   142d6:	4604      	mov	r4, r0
		struct bt_gatt_chrc *cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   142d8:	f016 face 	bl	2a878 <bt_gatt_dm_attr_chrc_val>
		cur_gatt_chrc->uuid = cur_attr->uuid;
   142dc:	6823      	ldr	r3, [r4, #0]
   142de:	6003      	str	r3, [r0, #0]
	return BT_GATT_ITER_CONTINUE;
   142e0:	2001      	movs	r0, #1
   142e2:	e74c      	b.n	1417e <discovery_callback+0x22>
		cur_attr = attr_store(dm, attr, 0);
   142e4:	4631      	mov	r1, r6
   142e6:	4628      	mov	r0, r5
   142e8:	f7ff fee0 	bl	140ac <attr_store.constprop.0>
	if (!cur_attr) {
   142ec:	2800      	cmp	r0, #0
   142ee:	d1f7      	bne.n	142e0 <discovery_callback+0x184>
		LOG_ERR("Not enough memory for next attribute descriptor"
   142f0:	8a2a      	ldrh	r2, [r5, #16]
   142f2:	4828      	ldr	r0, [pc, #160]	; (14394 <discovery_callback+0x238>)
   142f4:	2145      	movs	r1, #69	; 0x45
   142f6:	f015 feb6 	bl	2a066 <z_log_minimal_printk>
		discovery_complete_error(dm, -ENOMEM);
   142fa:	f06f 010b 	mvn.w	r1, #11
   142fe:	e73a      	b.n	14176 <discovery_callback+0x1a>
	if (!attr) {
   14300:	2900      	cmp	r1, #0
   14302:	d0c1      	beq.n	14288 <discovery_callback+0x12c>
	__ASSERT_NO_MSG(bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0);
   14304:	2300      	movs	r3, #0
   14306:	f88d 3004 	strb.w	r3, [sp, #4]
   1430a:	6828      	ldr	r0, [r5, #0]
   1430c:	f642 0303 	movw	r3, #10243	; 0x2803
   14310:	a901      	add	r1, sp, #4
   14312:	f8ad 3006 	strh.w	r3, [sp, #6]
   14316:	f016 ff02 	bl	2b11e <bt_uuid_cmp>
   1431a:	b140      	cbz	r0, 1432e <discovery_callback+0x1d2>
   1431c:	4916      	ldr	r1, [pc, #88]	; (14378 <discovery_callback+0x21c>)
   1431e:	4817      	ldr	r0, [pc, #92]	; (1437c <discovery_callback+0x220>)
   14320:	f44f 72ce 	mov.w	r2, #412	; 0x19c
   14324:	f015 fe91 	bl	2a04a <assert_print>
   14328:	f44f 71ce 	mov.w	r1, #412	; 0x19c
   1432c:	e781      	b.n	14232 <discovery_callback+0xd6>
	cur_attr = attr_find_by_handle(dm, attr->handle);
   1432e:	8a29      	ldrh	r1, [r5, #16]
   14330:	4620      	mov	r0, r4
   14332:	f016 fa13 	bl	2a75c <attr_find_by_handle>
	if (!cur_attr) {
   14336:	b910      	cbnz	r0, 1433e <discovery_callback+0x1e2>
		discovery_complete_error(dm, -ESRCH);
   14338:	f06f 0102 	mvn.w	r1, #2
   1433c:	e71b      	b.n	14176 <discovery_callback+0x1a>
	gatt_chrc = attr->user_data;
   1433e:	68ee      	ldr	r6, [r5, #12]
	cur_gatt_chrc = bt_gatt_dm_attr_chrc_val(cur_attr);
   14340:	f016 fa9a 	bl	2a878 <bt_gatt_dm_attr_chrc_val>
	__ASSERT_NO_MSG(cur_gatt_chrc != NULL);
   14344:	4605      	mov	r5, r0
   14346:	b940      	cbnz	r0, 1435a <discovery_callback+0x1fe>
   14348:	490b      	ldr	r1, [pc, #44]	; (14378 <discovery_callback+0x21c>)
   1434a:	480c      	ldr	r0, [pc, #48]	; (1437c <discovery_callback+0x220>)
   1434c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
   14350:	f015 fe7b 	bl	2a04a <assert_print>
   14354:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   14358:	e76b      	b.n	14232 <discovery_callback+0xd6>
	memcpy(cur_gatt_chrc, gatt_chrc, sizeof(*cur_gatt_chrc));
   1435a:	2208      	movs	r2, #8
   1435c:	4631      	mov	r1, r6
   1435e:	f016 fe4a 	bl	2aff6 <memcpy>
	cur_gatt_chrc->uuid = uuid_store(dm, cur_gatt_chrc->uuid);
   14362:	6828      	ldr	r0, [r5, #0]
   14364:	f7ff fedc 	bl	14120 <uuid_store.constprop.0>
   14368:	6028      	str	r0, [r5, #0]
	if (!cur_gatt_chrc->uuid) {
   1436a:	2800      	cmp	r0, #0
   1436c:	d1b8      	bne.n	142e0 <discovery_callback+0x184>
   1436e:	e7c4      	b.n	142fa <discovery_callback+0x19e>
   14370:	20002a38 	.word	0x20002a38
   14374:	0002fd14 	.word	0x0002fd14
   14378:	0002fc57 	.word	0x0002fc57
   1437c:	0002f2b5 	.word	0x0002f2b5
   14380:	0002fdc8 	.word	0x0002fdc8
   14384:	0002fd3b 	.word	0x0002fd3b
   14388:	0002fd69 	.word	0x0002fd69
   1438c:	20002a40 	.word	0x20002a40
   14390:	0002fd9c 	.word	0x0002fd9c
   14394:	0002fdf8 	.word	0x0002fdf8

00014398 <bt_gatt_dm_char_by_uuid>:
}

const struct bt_gatt_dm_attr *bt_gatt_dm_char_by_uuid(
	const struct bt_gatt_dm *dm,
	const struct bt_uuid *uuid)
{
   14398:	b570      	push	{r4, r5, r6, lr}
   1439a:	4605      	mov	r5, r0
   1439c:	460e      	mov	r6, r1
	const struct bt_gatt_dm_attr *curr = NULL;
   1439e:	2400      	movs	r4, #0

	while ((curr = bt_gatt_dm_char_next(dm, curr)) != NULL) {
   143a0:	4621      	mov	r1, r4
   143a2:	4628      	mov	r0, r5
   143a4:	f016 fa80 	bl	2a8a8 <bt_gatt_dm_char_next>
   143a8:	4604      	mov	r4, r0
   143aa:	b198      	cbz	r0, 143d4 <bt_gatt_dm_char_by_uuid+0x3c>
		struct bt_gatt_chrc *chrc = bt_gatt_dm_attr_chrc_val(curr);
   143ac:	f016 fa64 	bl	2a878 <bt_gatt_dm_attr_chrc_val>

		__ASSERT_NO_MSG(chrc != NULL);
   143b0:	b950      	cbnz	r0, 143c8 <bt_gatt_dm_char_by_uuid+0x30>
   143b2:	4909      	ldr	r1, [pc, #36]	; (143d8 <bt_gatt_dm_char_by_uuid+0x40>)
   143b4:	4809      	ldr	r0, [pc, #36]	; (143dc <bt_gatt_dm_char_by_uuid+0x44>)
   143b6:	f44f 7207 	mov.w	r2, #540	; 0x21c
   143ba:	f015 fe46 	bl	2a04a <assert_print>
   143be:	4806      	ldr	r0, [pc, #24]	; (143d8 <bt_gatt_dm_char_by_uuid+0x40>)
   143c0:	f44f 7107 	mov.w	r1, #540	; 0x21c
   143c4:	f015 fe3a 	bl	2a03c <assert_post_action>
		if (!bt_uuid_cmp(uuid, chrc->uuid)) {
   143c8:	6801      	ldr	r1, [r0, #0]
   143ca:	4630      	mov	r0, r6
   143cc:	f016 fea7 	bl	2b11e <bt_uuid_cmp>
   143d0:	2800      	cmp	r0, #0
   143d2:	d1e5      	bne.n	143a0 <bt_gatt_dm_char_by_uuid+0x8>
			return curr;
		}
	}

	return NULL;
}
   143d4:	4620      	mov	r0, r4
   143d6:	bd70      	pop	{r4, r5, r6, pc}
   143d8:	0002fc57 	.word	0x0002fc57
   143dc:	0002f2b5 	.word	0x0002f2b5

000143e0 <bt_gatt_dm_start>:

int bt_gatt_dm_start(struct bt_conn *conn,
		     const struct bt_uuid *svc_uuid,
		     const struct bt_gatt_dm_cb *cb,
		     void *context)
{
   143e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   143e2:	4606      	mov	r6, r0
	int err;
	struct bt_gatt_dm *dm;

	if (svc_uuid &&
   143e4:	460d      	mov	r5, r1
   143e6:	b119      	cbz	r1, 143f0 <bt_gatt_dm_start+0x10>
   143e8:	7809      	ldrb	r1, [r1, #0]
   143ea:	f011 0ffd 	tst.w	r1, #253	; 0xfd
   143ee:	d14b      	bne.n	14488 <bt_gatt_dm_start+0xa8>
	    (svc_uuid->type != BT_UUID_TYPE_16) &&
	    (svc_uuid->type != BT_UUID_TYPE_128)) {
		return -EINVAL;
	}

	if (!cb) {
   143f0:	2a00      	cmp	r2, #0
   143f2:	d049      	beq.n	14488 <bt_gatt_dm_start+0xa8>
   143f4:	f3bf 8f5b 	dmb	ish
   143f8:	4c26      	ldr	r4, [pc, #152]	; (14494 <bt_gatt_dm_start+0xb4>)
   143fa:	e854 1f00 	ldrex	r1, [r4]
   143fe:	f041 0001 	orr.w	r0, r1, #1
   14402:	e844 0700 	strex	r7, r0, [r4]
   14406:	2f00      	cmp	r7, #0
   14408:	d1f7      	bne.n	143fa <bt_gatt_dm_start+0x1a>
   1440a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	dm = &bt_gatt_dm_inst;

	if (atomic_test_and_set_bit(dm->state_flags, STATE_ATTRS_LOCKED)) {
   1440e:	f011 0101 	ands.w	r1, r1, #1
   14412:	d13c      	bne.n	1448e <bt_gatt_dm_start+0xae>
		return -EALREADY;
	}

	dm->conn = conn;
   14414:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
	dm->context = context;
	dm->callback = cb;
	dm->cur_attr_id = 0;
	sys_slist_init(&dm->chunk_list);
	dm->cur_chunk_len = 0;
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   14418:	2d00      	cmp	r5, #0
	dm->context = context;
   1441a:	e9c4 6300 	strd	r6, r3, [r4]
	dm->search_svc_by_uuid = (svc_uuid != NULL);
   1441e:	bf14      	ite	ne
   14420:	2301      	movne	r3, #1
   14422:	2300      	moveq	r3, #0
	list->tail = NULL;
   14424:	e9c4 1154 	strd	r1, r1, [r4, #336]	; 0x150
   14428:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	dm->callback = cb;
   1442c:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	dm->cur_attr_id = 0;
   14430:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
	dm->cur_chunk_len = 0;
   14434:	f8c4 1158 	str.w	r1, [r4, #344]	; 0x158

	if (svc_uuid) {
   14438:	d00a      	beq.n	14450 <bt_gatt_dm_start+0x70>
		size_t uuid_size;

		uuid_size = get_uuid_size(svc_uuid);
   1443a:	7828      	ldrb	r0, [r5, #0]
   1443c:	f7ff fe26 	bl	1408c <get_uuid_size.isra.0>
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   14440:	4629      	mov	r1, r5
		uuid_size = get_uuid_size(svc_uuid);
   14442:	4602      	mov	r2, r0
		memcpy(&dm->svc_uuid.uuid, svc_uuid, uuid_size);
   14444:	f504 709e 	add.w	r0, r4, #316	; 0x13c
   14448:	f016 fdd5 	bl	2aff6 <memcpy>
	}

	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   1444c:	f504 759e 	add.w	r5, r4, #316	; 0x13c
	dm->discover_params.func = discovery_callback;
   14450:	4b11      	ldr	r3, [pc, #68]	; (14498 <bt_gatt_dm_start+0xb8>)
   14452:	60e3      	str	r3, [r4, #12]
	dm->discover_params.start_handle = 0x0001;
   14454:	2301      	movs	r3, #1
   14456:	8223      	strh	r3, [r4, #16]
	dm->discover_params.end_handle = 0xffff;
   14458:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1445c:	82e3      	strh	r3, [r4, #22]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;

	err = bt_gatt_discover(conn, &dm->discover_params);
   1445e:	490f      	ldr	r1, [pc, #60]	; (1449c <bt_gatt_dm_start+0xbc>)
	dm->discover_params.uuid = svc_uuid ? &dm->svc_uuid.uuid : NULL;
   14460:	60a5      	str	r5, [r4, #8]
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   14462:	2300      	movs	r3, #0
	err = bt_gatt_discover(conn, &dm->discover_params);
   14464:	4630      	mov	r0, r6
	dm->discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   14466:	7623      	strb	r3, [r4, #24]
	err = bt_gatt_discover(conn, &dm->discover_params);
   14468:	f007 fbdc 	bl	1bc24 <bt_gatt_discover>
	if (err) {
   1446c:	4604      	mov	r4, r0
   1446e:	b148      	cbz	r0, 14484 <bt_gatt_dm_start+0xa4>
		LOG_ERR("Discover failed, error: %d.", err);
   14470:	4602      	mov	r2, r0
   14472:	2145      	movs	r1, #69	; 0x45
   14474:	480a      	ldr	r0, [pc, #40]	; (144a0 <bt_gatt_dm_start+0xc0>)
   14476:	f015 fdf6 	bl	2a066 <z_log_minimal_printk>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1447a:	4806      	ldr	r0, [pc, #24]	; (14494 <bt_gatt_dm_start+0xb4>)
   1447c:	f06f 0101 	mvn.w	r1, #1
   14480:	f016 f9a1 	bl	2a7c6 <atomic_and>
		atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);
	}

	return err;
}
   14484:	4620      	mov	r0, r4
   14486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   14488:	f06f 0415 	mvn.w	r4, #21
   1448c:	e7fa      	b.n	14484 <bt_gatt_dm_start+0xa4>
		return -EALREADY;
   1448e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14492:	e7f7      	b.n	14484 <bt_gatt_dm_start+0xa4>
   14494:	20002b70 	.word	0x20002b70
   14498:	0001415d 	.word	0x0001415d
   1449c:	20002a40 	.word	0x20002a40
   144a0:	0002fe3b 	.word	0x0002fe3b

000144a4 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   144a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144a6:	4c06      	ldr	r4, [pc, #24]	; (144c0 <scan_default_param_set+0x1c>)
   144a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
{
   144aa:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144ac:	ad01      	add	r5, sp, #4
   144ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   144b0:	ad01      	add	r5, sp, #4
   144b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   144b4:	6826      	ldr	r6, [r4, #0]
	bt_scan.scan_param = *scan_param;
   144b6:	4c03      	ldr	r4, [pc, #12]	; (144c4 <scan_default_param_set+0x20>)
   144b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   144ba:	6026      	str	r6, [r4, #0]
}
   144bc:	b006      	add	sp, #24
   144be:	bd70      	pop	{r4, r5, r6, pc}
   144c0:	0002e66c 	.word	0x0002e66c
   144c4:	20002bd4 	.word	0x20002bd4

000144c8 <scan_default_conn_param_set>:
static void scan_default_conn_param_set(void)
{
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   144c8:	4b03      	ldr	r3, [pc, #12]	; (144d8 <scan_default_conn_param_set+0x10>)
   144ca:	4904      	ldr	r1, [pc, #16]	; (144dc <scan_default_conn_param_set+0x14>)
   144cc:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   144d0:	e9c3 1211 	strd	r1, r2, [r3, #68]	; 0x44
}
   144d4:	4770      	bx	lr
   144d6:	bf00      	nop
   144d8:	20002ba4 	.word	0x20002ba4
   144dc:	00280018 	.word	0x00280018

000144e0 <uuid_check>:
{
   144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   144e4:	4e2b      	ldr	r6, [pc, #172]	; (14594 <uuid_check+0xb4>)
{
   144e6:	b08b      	sub	sp, #44	; 0x2c
	if (is_uuid_filter_enabled()) {
   144e8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
{
   144ec:	9203      	str	r2, [sp, #12]
   144ee:	4604      	mov	r4, r0
   144f0:	4688      	mov	r8, r1
	if (is_uuid_filter_enabled()) {
   144f2:	b313      	cbz	r3, 1453a <uuid_check+0x5a>
	uint8_t data_len = data->data_len;
   144f4:	784b      	ldrb	r3, [r1, #1]
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   144f6:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   144fa:	f896 a020 	ldrb.w	sl, [r6, #32]
	uint8_t data_len = data->data_len;
   144fe:	9301      	str	r3, [sp, #4]
	for (size_t i = 0; i < counter; i++) {
   14500:	2700      	movs	r7, #0
	uint8_t uuid_match_cnt = 0;
   14502:	463d      	mov	r5, r7
	for (size_t i = 0; i < counter; i++) {
   14504:	4557      	cmp	r7, sl
   14506:	d305      	bcc.n	14514 <uuid_check+0x34>
	control->filter_status.uuid.count = uuid_match_cnt;
   14508:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   1450c:	f1bb 0f00 	cmp.w	fp, #0
   14510:	d111      	bne.n	14536 <uuid_check+0x56>
   14512:	e031      	b.n	14578 <uuid_check+0x98>
		if (find_uuid(data->data, data_len, uuid_type,
   14514:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14518:	9a03      	ldr	r2, [sp, #12]
   1451a:	9302      	str	r3, [sp, #8]
	switch (uuid_type) {
   1451c:	4b1e      	ldr	r3, [pc, #120]	; (14598 <uuid_check+0xb8>)
   1451e:	5c9b      	ldrb	r3, [r3, r2]
   14520:	9300      	str	r3, [sp, #0]
	for (size_t i = 0; i < data_len; i += uuid_len) {
   14522:	f04f 0900 	mov.w	r9, #0
   14526:	9b01      	ldr	r3, [sp, #4]
   14528:	4599      	cmp	r9, r3
   1452a:	d309      	bcc.n	14540 <uuid_check+0x60>
		} else if (all_filters_mode) {
   1452c:	f1bb 0f00 	cmp.w	fp, #0
   14530:	d02c      	beq.n	1458c <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   14532:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   14536:	45aa      	cmp	sl, r5
   14538:	d020      	beq.n	1457c <uuid_check+0x9c>
}
   1453a:	b00b      	add	sp, #44	; 0x2c
   1453c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   14540:	9b02      	ldr	r3, [sp, #8]
   14542:	9a00      	ldr	r2, [sp, #0]
   14544:	eb03 0109 	add.w	r1, r3, r9
   14548:	a805      	add	r0, sp, #20
   1454a:	f016 fe16 	bl	2b17a <bt_uuid_create>
   1454e:	2800      	cmp	r0, #0
   14550:	d0ec      	beq.n	1452c <uuid_check+0x4c>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   14552:	68b1      	ldr	r1, [r6, #8]
   14554:	a805      	add	r0, sp, #20
   14556:	f016 fde2 	bl	2b11e <bt_uuid_cmp>
   1455a:	b110      	cbz	r0, 14562 <uuid_check+0x82>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   1455c:	9b00      	ldr	r3, [sp, #0]
   1455e:	4499      	add	r9, r3
   14560:	e7e1      	b.n	14526 <uuid_check+0x46>
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   14562:	eb04 0285 	add.w	r2, r4, r5, lsl #2
				uuid_filter->uuid[i].uuid;
   14566:	68b1      	ldr	r1, [r6, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   14568:	6391      	str	r1, [r2, #56]	; 0x38
			uuid_match_cnt++;
   1456a:	3501      	adds	r5, #1
   1456c:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   1456e:	f1bb 0f00 	cmp.w	fp, #0
   14572:	d10b      	bne.n	1458c <uuid_check+0xac>
	control->filter_status.uuid.count = uuid_match_cnt;
   14574:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   14578:	2d00      	cmp	r5, #0
   1457a:	d0de      	beq.n	1453a <uuid_check+0x5a>
			control->filter_match_cnt++;
   1457c:	7863      	ldrb	r3, [r4, #1]
   1457e:	3301      	adds	r3, #1
   14580:	7063      	strb	r3, [r4, #1]
			control->filter_status.uuid.match = true;
   14582:	2301      	movs	r3, #1
   14584:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			control->filter_match = true;
   14588:	70a3      	strb	r3, [r4, #2]
}
   1458a:	e7d6      	b.n	1453a <uuid_check+0x5a>
	for (size_t i = 0; i < counter; i++) {
   1458c:	3701      	adds	r7, #1
   1458e:	3618      	adds	r6, #24
   14590:	e7b8      	b.n	14504 <uuid_check+0x24>
   14592:	bf00      	nop
   14594:	20002ba4 	.word	0x20002ba4
   14598:	0002fe6a 	.word	0x0002fe6a

0001459c <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   1459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1459e:	4b09      	ldr	r3, [pc, #36]	; (145c4 <notify_filter_matched.constprop.0+0x28>)
   145a0:	681c      	ldr	r4, [r3, #0]
   145a2:	4605      	mov	r5, r0
   145a4:	460e      	mov	r6, r1
   145a6:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   145a8:	b154      	cbz	r4, 145c0 <notify_filter_matched.constprop.0+0x24>
		if (cb->cb_addr->filter_match) {
   145aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   145ae:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   145b0:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_match) {
   145b2:	b11b      	cbz	r3, 145bc <notify_filter_matched.constprop.0+0x20>
			cb->cb_addr->filter_match(device_info, filter_match,
   145b4:	463a      	mov	r2, r7
   145b6:	4631      	mov	r1, r6
   145b8:	4628      	mov	r0, r5
   145ba:	4798      	blx	r3
	return node->next;
   145bc:	6864      	ldr	r4, [r4, #4]
   145be:	e7f3      	b.n	145a8 <notify_filter_matched.constprop.0+0xc>
}
   145c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   145c2:	bf00      	nop
   145c4:	20002b9c 	.word	0x20002b9c

000145c8 <bt_scan_cb_register>:
	if (!cb) {
   145c8:	b150      	cbz	r0, 145e0 <bt_scan_cb_register+0x18>
	parent->next = child;
   145ca:	2300      	movs	r3, #0
   145cc:	6043      	str	r3, [r0, #4]
	return list->tail;
   145ce:	4b05      	ldr	r3, [pc, #20]	; (145e4 <bt_scan_cb_register+0x1c>)
   145d0:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   145d2:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
   145d4:	b911      	cbnz	r1, 145dc <bt_scan_cb_register+0x14>
	list->head = node;
   145d6:	e9c3 2200 	strd	r2, r2, [r3]
}
   145da:	4770      	bx	lr
	parent->next = child;
   145dc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   145de:	605a      	str	r2, [r3, #4]
}
   145e0:	4770      	bx	lr
   145e2:	bf00      	nop
   145e4:	20002b9c 	.word	0x20002b9c

000145e8 <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   145e8:	b570      	push	{r4, r5, r6, lr}
   145ea:	4605      	mov	r5, r0
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   145ec:	460c      	mov	r4, r1
   145ee:	2900      	cmp	r1, #0
   145f0:	d045      	beq.n	1467e <bt_scan_filter_add+0x96>
	return z_impl_k_mutex_lock(mutex, timeout);
   145f2:	4824      	ldr	r0, [pc, #144]	; (14684 <bt_scan_filter_add+0x9c>)
   145f4:	f04f 32ff 	mov.w	r2, #4294967295
   145f8:	f04f 33ff 	mov.w	r3, #4294967295
   145fc:	f00f fd50 	bl	240a0 <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   14600:	2d03      	cmp	r5, #3
   14602:	d00c      	beq.n	1461e <bt_scan_filter_add+0x36>
   14604:	d935      	bls.n	14672 <bt_scan_filter_add+0x8a>
   14606:	3d04      	subs	r5, #4
   14608:	2d01      	cmp	r5, #1
   1460a:	bf8c      	ite	hi
   1460c:	f06f 0415 	mvnhi.w	r4, #21
   14610:	f06f 040b 	mvnls.w	r4, #11
	return z_impl_k_mutex_unlock(mutex);
   14614:	481b      	ldr	r0, [pc, #108]	; (14684 <bt_scan_filter_add+0x9c>)
   14616:	f00f fdf9 	bl	2420c <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   1461a:	4620      	mov	r0, r4
   1461c:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   1461e:	4a1a      	ldr	r2, [pc, #104]	; (14688 <bt_scan_filter_add+0xa0>)
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   14620:	f892 3020 	ldrb.w	r3, [r2, #32]
   14624:	bb2b      	cbnz	r3, 14672 <bt_scan_filter_add+0x8a>
	switch (uuid->type) {
   14626:	7823      	ldrb	r3, [r4, #0]
   14628:	2b01      	cmp	r3, #1
   1462a:	d00b      	beq.n	14644 <bt_scan_filter_add+0x5c>
   1462c:	2b02      	cmp	r3, #2
   1462e:	d010      	beq.n	14652 <bt_scan_filter_add+0x6a>
   14630:	bb13      	cbnz	r3, 14678 <bt_scan_filter_add+0x90>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   14632:	6820      	ldr	r0, [r4, #0]
   14634:	60d0      	str	r0, [r2, #12]
		uuid_filter[counter].uuid =
   14636:	4b15      	ldr	r3, [pc, #84]	; (1468c <bt_scan_filter_add+0xa4>)
   14638:	6093      	str	r3, [r2, #8]
	bt_scan.scan_filters.uuid.cnt++;
   1463a:	2301      	movs	r3, #1
   1463c:	f882 3020 	strb.w	r3, [r2, #32]
	return 0;
   14640:	2400      	movs	r4, #0
   14642:	e7e7      	b.n	14614 <bt_scan_filter_add+0x2c>
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   14644:	e894 0003 	ldmia.w	r4, {r0, r1}
   14648:	f102 030c 	add.w	r3, r2, #12
   1464c:	e883 0003 	stmia.w	r3, {r0, r1}
		break;
   14650:	e7f1      	b.n	14636 <bt_scan_filter_add+0x4e>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   14652:	4623      	mov	r3, r4
   14654:	f103 0610 	add.w	r6, r3, #16
   14658:	f102 040c 	add.w	r4, r2, #12
   1465c:	6818      	ldr	r0, [r3, #0]
   1465e:	6859      	ldr	r1, [r3, #4]
   14660:	4625      	mov	r5, r4
   14662:	c503      	stmia	r5!, {r0, r1}
   14664:	3308      	adds	r3, #8
   14666:	42b3      	cmp	r3, r6
   14668:	462c      	mov	r4, r5
   1466a:	d1f7      	bne.n	1465c <bt_scan_filter_add+0x74>
   1466c:	781b      	ldrb	r3, [r3, #0]
   1466e:	702b      	strb	r3, [r5, #0]
		break;
   14670:	e7e1      	b.n	14636 <bt_scan_filter_add+0x4e>
   14672:	f06f 040b 	mvn.w	r4, #11
   14676:	e7cd      	b.n	14614 <bt_scan_filter_add+0x2c>
	switch (uuid->type) {
   14678:	f06f 0415 	mvn.w	r4, #21
   1467c:	e7ca      	b.n	14614 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   1467e:	f06f 0415 	mvn.w	r4, #21
   14682:	e7ca      	b.n	1461a <bt_scan_filter_add+0x32>
   14684:	20000968 	.word	0x20000968
   14688:	20002ba4 	.word	0x20002ba4
   1468c:	20002bb0 	.word	0x20002bb0

00014690 <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   14690:	4b05      	ldr	r3, [pc, #20]	; (146a8 <bt_scan_filter_disable+0x18>)
   14692:	2200      	movs	r2, #0
   14694:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   14696:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   14698:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   1469a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	bt_scan.scan_filters.appearance.enabled = false;
   1469e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   146a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
   146a6:	4770      	bx	lr
   146a8:	20002ba4 	.word	0x20002ba4

000146ac <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   146ac:	b508      	push	{r3, lr}
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   146ae:	0683      	lsls	r3, r0, #26
   146b0:	d022      	beq.n	146f8 <bt_scan_filter_enable+0x4c>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   146b2:	f7ff ffed 	bl	14690 <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   146b6:	4b12      	ldr	r3, [pc, #72]	; (14700 <bt_scan_filter_enable+0x54>)
   146b8:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   146bc:	bf1c      	itt	ne
   146be:	2201      	movne	r2, #1
   146c0:	715a      	strbne	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   146c2:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   146c4:	bf44      	itt	mi
   146c6:	2201      	movmi	r2, #1
   146c8:	705a      	strbmi	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   146ca:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   146cc:	bf44      	itt	mi
   146ce:	2201      	movmi	r2, #1
   146d0:	70da      	strbmi	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   146d2:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   146d4:	bf44      	itt	mi
   146d6:	2201      	movmi	r2, #1
   146d8:	f883 2021 	strbmi.w	r2, [r3, #33]	; 0x21
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   146dc:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   146de:	bf44      	itt	mi
   146e0:	2201      	movmi	r2, #1
   146e2:	f883 2025 	strbmi.w	r2, [r3, #37]	; 0x25
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   146e6:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   146e8:	bf44      	itt	mi
   146ea:	2201      	movmi	r2, #1
   146ec:	f883 2027 	strbmi.w	r2, [r3, #39]	; 0x27
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   146f0:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28

	return 0;
   146f4:	2000      	movs	r0, #0
}
   146f6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   146f8:	f06f 0015 	mvn.w	r0, #21
   146fc:	e7fb      	b.n	146f6 <bt_scan_filter_enable+0x4a>
   146fe:	bf00      	nop
   14700:	20002ba4 	.word	0x20002ba4

00014704 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   14704:	b570      	push	{r4, r5, r6, lr}
   14706:	b086      	sub	sp, #24
   14708:	460e      	mov	r6, r1
   1470a:	4605      	mov	r5, r0
	bt_scan_stop();
   1470c:	f016 f95c 	bl	2a9c8 <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   14710:	4b15      	ldr	r3, [pc, #84]	; (14768 <scan_connect_with_target.part.0+0x64>)
   14712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14714:	ac02      	add	r4, sp, #8
   14716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   1471a:	ab01      	add	r3, sp, #4
   1471c:	4a13      	ldr	r2, [pc, #76]	; (1476c <scan_connect_with_target.part.0+0x68>)
   1471e:	4621      	mov	r1, r4
   14720:	4630      	mov	r0, r6
   14722:	f004 fab7 	bl	18c94 <bt_conn_le_create>
		notify_connecting_error(&control->device_info);
   14726:	3508      	adds	r5, #8
   14728:	4b11      	ldr	r3, [pc, #68]	; (14770 <scan_connect_with_target.part.0+0x6c>)
	if (err) {
   1472a:	b150      	cbz	r0, 14742 <scan_connect_with_target.part.0+0x3e>
	return list->head;
   1472c:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1472e:	b1c4      	cbz	r4, 14762 <scan_connect_with_target.part.0+0x5e>
		if (cb->cb_addr->connecting_error) {
   14730:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14734:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14736:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting_error) {
   14738:	b10b      	cbz	r3, 1473e <scan_connect_with_target.part.0+0x3a>
			cb->cb_addr->connecting_error(device_info);
   1473a:	4628      	mov	r0, r5
   1473c:	4798      	blx	r3
	return node->next;
   1473e:	6864      	ldr	r4, [r4, #4]
   14740:	e7f5      	b.n	1472e <scan_connect_with_target.part.0+0x2a>
		notify_connecting(&control->device_info, conn);
   14742:	9e01      	ldr	r6, [sp, #4]
	return list->head;
   14744:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14746:	b14c      	cbz	r4, 1475c <scan_connect_with_target.part.0+0x58>
		if (cb->cb_addr->connecting) {
   14748:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1474c:	68db      	ldr	r3, [r3, #12]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1474e:	3c04      	subs	r4, #4
		if (cb->cb_addr->connecting) {
   14750:	b113      	cbz	r3, 14758 <scan_connect_with_target.part.0+0x54>
			cb->cb_addr->connecting(device_info, conn);
   14752:	4631      	mov	r1, r6
   14754:	4628      	mov	r0, r5
   14756:	4798      	blx	r3
	return node->next;
   14758:	6864      	ldr	r4, [r4, #4]
   1475a:	e7f4      	b.n	14746 <scan_connect_with_target.part.0+0x42>
		bt_conn_unref(conn);
   1475c:	9801      	ldr	r0, [sp, #4]
   1475e:	f003 ff97 	bl	18690 <bt_conn_unref>
}
   14762:	b006      	add	sp, #24
   14764:	bd70      	pop	{r4, r5, r6, pc}
   14766:	bf00      	nop
   14768:	0002e680 	.word	0x0002e680
   1476c:	20002be8 	.word	0x20002be8
   14770:	20002b9c 	.word	0x20002b9c

00014774 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   14774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   14778:	4d2c      	ldr	r5, [pc, #176]	; (1482c <scan_recv+0xb8>)
{
   1477a:	b096      	sub	sp, #88	; 0x58
   1477c:	460c      	mov	r4, r1
   1477e:	4606      	mov	r6, r0
	memset(&scan_control, 0, sizeof(scan_control));
   14780:	2254      	movs	r2, #84	; 0x54
   14782:	2100      	movs	r1, #0
   14784:	a801      	add	r0, sp, #4
   14786:	f016 fc41 	bl	2b00c <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   1478a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1478e:	f88d 3007 	strb.w	r3, [sp, #7]
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
   14792:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   14796:	f88d 3004 	strb.w	r3, [sp, #4]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   1479a:	7a33      	ldrb	r3, [r6, #8]
	state->offset = net_buf_simple_headroom(buf);
   1479c:	4620      	mov	r0, r4
   1479e:	f003 0301 	and.w	r3, r3, #1
   147a2:	f88d 3008 	strb.w	r3, [sp, #8]
   147a6:	f018 fe32 	bl	2d40e <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   147aa:	4921      	ldr	r1, [pc, #132]	; (14830 <scan_recv+0xbc>)
	state->len = buf->len;
   147ac:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   147b0:	4607      	mov	r7, r0
   147b2:	aa01      	add	r2, sp, #4
   147b4:	4620      	mov	r0, r4
   147b6:	f002 fbbd 	bl	16f34 <bt_data_parse>
	buf->data = buf->__buf + state->offset;
   147ba:	68a3      	ldr	r3, [r4, #8]
	buf->len = state->len;
   147bc:	f8a4 8004 	strh.w	r8, [r4, #4]
	buf->data = buf->__buf + state->offset;
   147c0:	fa13 f787 	uxtah	r7, r3, r7
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   147c4:	f105 0344 	add.w	r3, r5, #68	; 0x44
	scan_control.device_info.adv_data = ad;
   147c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
	if (control->all_mode &&
   147cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   147d0:	6027      	str	r7, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   147d2:	6834      	ldr	r4, [r6, #0]
	scan_control.device_info.recv_info = info;
   147d4:	9603      	str	r6, [sp, #12]
	if (control->all_mode &&
   147d6:	f89d 6008 	ldrb.w	r6, [sp, #8]
   147da:	b1a3      	cbz	r3, 14806 <scan_recv+0x92>
   147dc:	f89d 2005 	ldrb.w	r2, [sp, #5]
   147e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   147e4:	429a      	cmp	r2, r3
   147e6:	d112      	bne.n	1480e <scan_recv+0x9a>
		notify_filter_matched(&control->device_info,
   147e8:	4632      	mov	r2, r6
   147ea:	a906      	add	r1, sp, #24
   147ec:	a803      	add	r0, sp, #12
   147ee:	f7ff fed5 	bl	1459c <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   147f2:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   147f6:	b11b      	cbz	r3, 14800 <scan_recv+0x8c>
   147f8:	4621      	mov	r1, r4
   147fa:	a801      	add	r0, sp, #4
   147fc:	f7ff ff82 	bl	14704 <scan_connect_with_target.part.0>
}
   14800:	b016      	add	sp, #88	; 0x58
   14802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   14806:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1480a:	2b00      	cmp	r3, #0
   1480c:	d1ec      	bne.n	147e8 <scan_recv+0x74>
	return list->head;
   1480e:	4b09      	ldr	r3, [pc, #36]	; (14834 <scan_recv+0xc0>)
   14810:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14812:	2c00      	cmp	r4, #0
   14814:	d0f4      	beq.n	14800 <scan_recv+0x8c>
		if (cb->cb_addr->filter_no_match) {
   14816:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1481a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1481c:	3c04      	subs	r4, #4
		if (cb->cb_addr->filter_no_match) {
   1481e:	b113      	cbz	r3, 14826 <scan_recv+0xb2>
			cb->cb_addr->filter_no_match(device_info, connectable);
   14820:	4631      	mov	r1, r6
   14822:	a803      	add	r0, sp, #12
   14824:	4798      	blx	r3
	return node->next;
   14826:	6864      	ldr	r4, [r4, #4]
   14828:	e7f3      	b.n	14812 <scan_recv+0x9e>
   1482a:	bf00      	nop
   1482c:	20002ba4 	.word	0x20002ba4
   14830:	0002a997 	.word	0x0002a997
   14834:	20002b9c 	.word	0x20002b9c

00014838 <bt_scan_init>:
{
   14838:	b570      	push	{r4, r5, r6, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   1483a:	4c15      	ldr	r4, [pc, #84]	; (14890 <bt_scan_init+0x58>)
{
   1483c:	4606      	mov	r6, r0
	bt_le_scan_cb_register(&scan_cb);
   1483e:	4815      	ldr	r0, [pc, #84]	; (14894 <bt_scan_init+0x5c>)
   14840:	f003 fb2a 	bl	17e98 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   14844:	222c      	movs	r2, #44	; 0x2c
   14846:	2100      	movs	r1, #0
   14848:	4620      	mov	r0, r4
   1484a:	f016 fbdf 	bl	2b00c <memset>
	if (init) {
   1484e:	b1be      	cbz	r6, 14880 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   14850:	7933      	ldrb	r3, [r6, #4]
   14852:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (init->scan_param) {
   14856:	6835      	ldr	r5, [r6, #0]
   14858:	b15d      	cbz	r5, 14872 <bt_scan_init+0x3a>
			bt_scan.scan_param = *init->scan_param;
   1485a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1485c:	3430      	adds	r4, #48	; 0x30
   1485e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14860:	682b      	ldr	r3, [r5, #0]
   14862:	6023      	str	r3, [r4, #0]
		if (init->conn_param) {
   14864:	68b2      	ldr	r2, [r6, #8]
   14866:	b13a      	cbz	r2, 14878 <bt_scan_init+0x40>
			bt_scan.conn_param = *init->conn_param;
   14868:	4b0b      	ldr	r3, [pc, #44]	; (14898 <bt_scan_init+0x60>)
   1486a:	6810      	ldr	r0, [r2, #0]
   1486c:	6851      	ldr	r1, [r2, #4]
   1486e:	c303      	stmia	r3!, {r0, r1}
}
   14870:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   14872:	f7ff fe17 	bl	144a4 <scan_default_param_set>
   14876:	e7f5      	b.n	14864 <bt_scan_init+0x2c>
}
   14878:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			scan_default_conn_param_set();
   1487c:	f7ff be24 	b.w	144c8 <scan_default_conn_param_set>
		scan_default_param_set();
   14880:	f7ff fe10 	bl	144a4 <scan_default_param_set>
		scan_default_conn_param_set();
   14884:	f7ff fe20 	bl	144c8 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   14888:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
   1488c:	e7f0      	b.n	14870 <bt_scan_init+0x38>
   1488e:	bf00      	nop
   14890:	20002ba4 	.word	0x20002ba4
   14894:	20000560 	.word	0x20000560
   14898:	20002be8 	.word	0x20002be8

0001489c <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   1489c:	4603      	mov	r3, r0
   1489e:	b108      	cbz	r0, 148a4 <bt_scan_start+0x8>
   148a0:	2801      	cmp	r0, #1
   148a2:	d105      	bne.n	148b0 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   148a4:	4804      	ldr	r0, [pc, #16]	; (148b8 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   148a6:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   148a8:	f800 3f30 	strb.w	r3, [r0, #48]!
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   148ac:	f003 ba5e 	b.w	17d6c <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   148b0:	f06f 0015 	mvn.w	r0, #21
   148b4:	4770      	bx	lr
   148b6:	bf00      	nop
   148b8:	20002ba4 	.word	0x20002ba4

000148bc <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   148bc:	4904      	ldr	r1, [pc, #16]	; (148d0 <sub_bytes+0x14>)
   148be:	1e43      	subs	r3, r0, #1
   148c0:	300f      	adds	r0, #15
   148c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   148c6:	5c8a      	ldrb	r2, [r1, r2]
   148c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   148ca:	4283      	cmp	r3, r0
   148cc:	d1f9      	bne.n	148c2 <sub_bytes+0x6>
	}
}
   148ce:	4770      	bx	lr
   148d0:	0002fe79 	.word	0x0002fe79

000148d4 <tc_aes128_set_encrypt_key>:
{
   148d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   148d6:	4e26      	ldr	r6, [pc, #152]	; (14970 <tc_aes128_set_encrypt_key+0x9c>)
{
   148d8:	4607      	mov	r7, r0
   148da:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   148dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   148de:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   148e0:	ad01      	add	r5, sp, #4
   148e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   148e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   148e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   148e8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   148ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   148f0:	4638      	mov	r0, r7
   148f2:	2f00      	cmp	r7, #0
   148f4:	d038      	beq.n	14968 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   148f6:	2c00      	cmp	r4, #0
   148f8:	d038      	beq.n	1496c <tc_aes128_set_encrypt_key+0x98>
   148fa:	1f38      	subs	r0, r7, #4
   148fc:	4621      	mov	r1, r4
   148fe:	4602      	mov	r2, r0
   14900:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14902:	784b      	ldrb	r3, [r1, #1]
   14904:	780d      	ldrb	r5, [r1, #0]
   14906:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14908:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   1490c:	78cd      	ldrb	r5, [r1, #3]
   1490e:	432b      	orrs	r3, r5
   14910:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14912:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14914:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14918:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1491a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   1491e:	d1f0      	bne.n	14902 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14920:	4c14      	ldr	r4, [pc, #80]	; (14974 <tc_aes128_set_encrypt_key+0xa0>)
   14922:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14924:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14926:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14928:	d116      	bne.n	14958 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1492a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1492e:	5ca5      	ldrb	r5, [r4, r2]
   14930:	0e1a      	lsrs	r2, r3, #24
   14932:	5ca2      	ldrb	r2, [r4, r2]
   14934:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14938:	f3c3 2507 	ubfx	r5, r3, #8, #8
   1493c:	b2db      	uxtb	r3, r3
   1493e:	5d65      	ldrb	r5, [r4, r5]
   14940:	5ce3      	ldrb	r3, [r4, r3]
   14942:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14946:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1494a:	f021 0303 	bic.w	r3, r1, #3
   1494e:	3330      	adds	r3, #48	; 0x30
   14950:	446b      	add	r3, sp
   14952:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14956:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14958:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   1495c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   1495e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14960:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14962:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14964:	d1de      	bne.n	14924 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14966:	2001      	movs	r0, #1
}
   14968:	b00d      	add	sp, #52	; 0x34
   1496a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   1496c:	4620      	mov	r0, r4
   1496e:	e7fb      	b.n	14968 <tc_aes128_set_encrypt_key+0x94>
   14970:	0002e690 	.word	0x0002e690
   14974:	0002fe79 	.word	0x0002fe79

00014978 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14978:	4801      	ldr	r0, [pc, #4]	; (14980 <nrf_cc3xx_platform_abort_init+0x8>)
   1497a:	f012 bc15 	b.w	271a8 <nrf_cc3xx_platform_set_abort>
   1497e:	bf00      	nop
   14980:	0002e7ec 	.word	0x0002e7ec

00014984 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14984:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   14986:	4604      	mov	r4, r0
   14988:	b918      	cbnz	r0, 14992 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   1498a:	4b0f      	ldr	r3, [pc, #60]	; (149c8 <mutex_free_platform+0x44>)
   1498c:	480f      	ldr	r0, [pc, #60]	; (149cc <mutex_free_platform+0x48>)
   1498e:	685b      	ldr	r3, [r3, #4]
   14990:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14992:	6861      	ldr	r1, [r4, #4]
   14994:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   14998:	d00f      	beq.n	149ba <mutex_free_platform+0x36>
   1499a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   1499e:	d00c      	beq.n	149ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   149a0:	4d0b      	ldr	r5, [pc, #44]	; (149d0 <mutex_free_platform+0x4c>)
   149a2:	42a9      	cmp	r1, r5
   149a4:	d009      	beq.n	149ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   149a6:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   149aa:	d007      	beq.n	149bc <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   149ac:	4809      	ldr	r0, [pc, #36]	; (149d4 <mutex_free_platform+0x50>)
   149ae:	4621      	mov	r1, r4
   149b0:	f00f f9d0 	bl	23d54 <k_mem_slab_free>
        mutex->mutex = NULL;
   149b4:	2300      	movs	r3, #0
   149b6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   149b8:	6065      	str	r5, [r4, #4]
}
   149ba:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   149bc:	6820      	ldr	r0, [r4, #0]
   149be:	2214      	movs	r2, #20
   149c0:	f016 fb24 	bl	2b00c <memset>
   149c4:	e7f8      	b.n	149b8 <mutex_free_platform+0x34>
   149c6:	bf00      	nop
   149c8:	200007bc 	.word	0x200007bc
   149cc:	0002ff79 	.word	0x0002ff79
   149d0:	a95c5f2c 	.word	0xa95c5f2c
   149d4:	200030f0 	.word	0x200030f0

000149d8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   149d8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   149da:	b320      	cbz	r0, 14a26 <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   149dc:	6843      	ldr	r3, [r0, #4]
   149de:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   149e2:	d110      	bne.n	14a06 <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   149e4:	2201      	movs	r2, #1
   149e6:	6803      	ldr	r3, [r0, #0]
   149e8:	f3bf 8f5b 	dmb	ish
   149ec:	e853 1f00 	ldrex	r1, [r3]
   149f0:	2900      	cmp	r1, #0
   149f2:	d103      	bne.n	149fc <mutex_lock_platform+0x24>
   149f4:	e843 2000 	strex	r0, r2, [r3]
   149f8:	2800      	cmp	r0, #0
   149fa:	d1f7      	bne.n	149ec <mutex_lock_platform+0x14>
   149fc:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a00:	d10d      	bne.n	14a1e <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   14a02:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14a04:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14a06:	4a09      	ldr	r2, [pc, #36]	; (14a2c <mutex_lock_platform+0x54>)
   14a08:	4293      	cmp	r3, r2
   14a0a:	d00a      	beq.n	14a22 <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14a0c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14a0e:	f04f 32ff 	mov.w	r2, #4294967295
   14a12:	f04f 33ff 	mov.w	r3, #4294967295
   14a16:	f00f fb43 	bl	240a0 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14a1a:	2800      	cmp	r0, #0
   14a1c:	d0f1      	beq.n	14a02 <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a1e:	4804      	ldr	r0, [pc, #16]	; (14a30 <mutex_lock_platform+0x58>)
   14a20:	e7f0      	b.n	14a04 <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14a22:	4804      	ldr	r0, [pc, #16]	; (14a34 <mutex_lock_platform+0x5c>)
   14a24:	e7ee      	b.n	14a04 <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14a26:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14a2a:	e7eb      	b.n	14a04 <mutex_lock_platform+0x2c>
   14a2c:	a95c5f2c 	.word	0xa95c5f2c
   14a30:	ffff8fe9 	.word	0xffff8fe9
   14a34:	ffff8fea 	.word	0xffff8fea

00014a38 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14a38:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14a3a:	b1d8      	cbz	r0, 14a74 <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14a3c:	6843      	ldr	r3, [r0, #4]
   14a3e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14a42:	d110      	bne.n	14a66 <mutex_unlock_platform+0x2e>
   14a44:	2200      	movs	r2, #0
   14a46:	6803      	ldr	r3, [r0, #0]
   14a48:	f3bf 8f5b 	dmb	ish
   14a4c:	e853 1f00 	ldrex	r1, [r3]
   14a50:	2901      	cmp	r1, #1
   14a52:	d103      	bne.n	14a5c <mutex_unlock_platform+0x24>
   14a54:	e843 2000 	strex	r0, r2, [r3]
   14a58:	2800      	cmp	r0, #0
   14a5a:	d1f7      	bne.n	14a4c <mutex_unlock_platform+0x14>
   14a5c:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a60:	d10b      	bne.n	14a7a <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14a62:	2000      	movs	r0, #0
    }
}
   14a64:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14a66:	4a07      	ldr	r2, [pc, #28]	; (14a84 <mutex_unlock_platform+0x4c>)
   14a68:	4293      	cmp	r3, r2
   14a6a:	d008      	beq.n	14a7e <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14a6c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14a6e:	f00f fbcd 	bl	2420c <z_impl_k_mutex_unlock>
   14a72:	e7f6      	b.n	14a62 <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14a74:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14a78:	e7f4      	b.n	14a64 <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14a7a:	4803      	ldr	r0, [pc, #12]	; (14a88 <mutex_unlock_platform+0x50>)
   14a7c:	e7f2      	b.n	14a64 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14a7e:	4803      	ldr	r0, [pc, #12]	; (14a8c <mutex_unlock_platform+0x54>)
   14a80:	e7f0      	b.n	14a64 <mutex_unlock_platform+0x2c>
   14a82:	bf00      	nop
   14a84:	a95c5f2c 	.word	0xa95c5f2c
   14a88:	ffff8fe9 	.word	0xffff8fe9
   14a8c:	ffff8fea 	.word	0xffff8fea

00014a90 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14a90:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14a92:	4604      	mov	r4, r0
   14a94:	b918      	cbnz	r0, 14a9e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14a96:	4b1d      	ldr	r3, [pc, #116]	; (14b0c <mutex_init_platform+0x7c>)
   14a98:	481d      	ldr	r0, [pc, #116]	; (14b10 <mutex_init_platform+0x80>)
   14a9a:	685b      	ldr	r3, [r3, #4]
   14a9c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14a9e:	6863      	ldr	r3, [r4, #4]
   14aa0:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14aa4:	d02f      	beq.n	14b06 <mutex_init_platform+0x76>
   14aa6:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14aaa:	d02c      	beq.n	14b06 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14aac:	4a19      	ldr	r2, [pc, #100]	; (14b14 <mutex_init_platform+0x84>)
   14aae:	4293      	cmp	r3, r2
   14ab0:	d119      	bne.n	14ae6 <mutex_init_platform+0x56>
   14ab2:	6823      	ldr	r3, [r4, #0]
   14ab4:	bb03      	cbnz	r3, 14af8 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14ab6:	4818      	ldr	r0, [pc, #96]	; (14b18 <mutex_init_platform+0x88>)
   14ab8:	f04f 32ff 	mov.w	r2, #4294967295
   14abc:	f04f 33ff 	mov.w	r3, #4294967295
   14ac0:	4621      	mov	r1, r4
   14ac2:	f00f f8ef 	bl	23ca4 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14ac6:	b908      	cbnz	r0, 14acc <mutex_init_platform+0x3c>
   14ac8:	6823      	ldr	r3, [r4, #0]
   14aca:	b91b      	cbnz	r3, 14ad4 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   14acc:	4b0f      	ldr	r3, [pc, #60]	; (14b0c <mutex_init_platform+0x7c>)
   14ace:	4813      	ldr	r0, [pc, #76]	; (14b1c <mutex_init_platform+0x8c>)
   14ad0:	685b      	ldr	r3, [r3, #4]
   14ad2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14ad4:	6820      	ldr	r0, [r4, #0]
   14ad6:	2214      	movs	r2, #20
   14ad8:	2100      	movs	r1, #0
   14ada:	f016 fa97 	bl	2b00c <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14ade:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14ae2:	6063      	str	r3, [r4, #4]
   14ae4:	e008      	b.n	14af8 <mutex_init_platform+0x68>
    switch(flags){
   14ae6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14aea:	d80d      	bhi.n	14b08 <mutex_init_platform+0x78>
   14aec:	2b3a      	cmp	r3, #58	; 0x3a
   14aee:	d003      	beq.n	14af8 <mutex_init_platform+0x68>
   14af0:	f640 62ba 	movw	r2, #3770	; 0xeba
   14af4:	4293      	cmp	r3, r2
   14af6:	d1de      	bne.n	14ab6 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14af8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14afa:	f019 f925 	bl	2dd48 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14afe:	6863      	ldr	r3, [r4, #4]
   14b00:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14b04:	6063      	str	r3, [r4, #4]
}
   14b06:	bd10      	pop	{r4, pc}
    switch(flags){
   14b08:	4a05      	ldr	r2, [pc, #20]	; (14b20 <mutex_init_platform+0x90>)
   14b0a:	e7f3      	b.n	14af4 <mutex_init_platform+0x64>
   14b0c:	200007bc 	.word	0x200007bc
   14b10:	0002ff79 	.word	0x0002ff79
   14b14:	a95c5f2c 	.word	0xa95c5f2c
   14b18:	200030f0 	.word	0x200030f0
   14b1c:	0002ff9f 	.word	0x0002ff9f
   14b20:	3a00003a 	.word	0x3a00003a

00014b24 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14b24:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14b26:	4906      	ldr	r1, [pc, #24]	; (14b40 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14b28:	4806      	ldr	r0, [pc, #24]	; (14b44 <nrf_cc3xx_platform_mutex_init+0x20>)
   14b2a:	2340      	movs	r3, #64	; 0x40
   14b2c:	2214      	movs	r2, #20
   14b2e:	f019 f8e0 	bl	2dcf2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14b36:	4904      	ldr	r1, [pc, #16]	; (14b48 <nrf_cc3xx_platform_mutex_init+0x24>)
   14b38:	4804      	ldr	r0, [pc, #16]	; (14b4c <nrf_cc3xx_platform_mutex_init+0x28>)
   14b3a:	f012 bbfb 	b.w	27334 <nrf_cc3xx_platform_set_mutexes>
   14b3e:	bf00      	nop
   14b40:	20002bf0 	.word	0x20002bf0
   14b44:	200030f0 	.word	0x200030f0
   14b48:	0002e7f4 	.word	0x0002e7f4
   14b4c:	0002e808 	.word	0x0002e808

00014b50 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14b50:	4901      	ldr	r1, [pc, #4]	; (14b58 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14b52:	2210      	movs	r2, #16
	str	r2, [r1]
   14b54:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14b56:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14b58:	e000ed10 	.word	0xe000ed10

00014b5c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14b5c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14b5e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14b60:	f380 8811 	msr	BASEPRI, r0
	isb
   14b64:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14b68:	f3bf 8f4f 	dsb	sy
   14b6c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14b6e:	b662      	cpsie	i
	isb
   14b70:	f3bf 8f6f 	isb	sy

	bx	lr
   14b74:	4770      	bx	lr
   14b76:	bf00      	nop

00014b78 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14b78:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14b7a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14b7c:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14b80:	f3bf 8f4f 	dsb	sy
   14b84:	bf20      	wfe

	msr	BASEPRI, r0
   14b86:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14b8a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14b8c:	4770      	bx	lr
   14b8e:	bf00      	nop

00014b90 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14b92:	4605      	mov	r5, r0

	if (esf != NULL) {
   14b94:	460c      	mov	r4, r1
   14b96:	b1c9      	cbz	r1, 14bcc <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14b98:	688b      	ldr	r3, [r1, #8]
   14b9a:	9300      	str	r3, [sp, #0]
   14b9c:	e9d1 2300 	ldrd	r2, r3, [r1]
   14ba0:	480e      	ldr	r0, [pc, #56]	; (14bdc <z_arm_fatal_error+0x4c>)
   14ba2:	2145      	movs	r1, #69	; 0x45
   14ba4:	f015 fa5f 	bl	2a066 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14ba8:	6963      	ldr	r3, [r4, #20]
   14baa:	9300      	str	r3, [sp, #0]
   14bac:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   14bb0:	480b      	ldr	r0, [pc, #44]	; (14be0 <z_arm_fatal_error+0x50>)
   14bb2:	2145      	movs	r1, #69	; 0x45
   14bb4:	f015 fa57 	bl	2a066 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14bb8:	69e2      	ldr	r2, [r4, #28]
   14bba:	480a      	ldr	r0, [pc, #40]	; (14be4 <z_arm_fatal_error+0x54>)
   14bbc:	2145      	movs	r1, #69	; 0x45
   14bbe:	f015 fa52 	bl	2a066 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14bc2:	69a2      	ldr	r2, [r4, #24]
   14bc4:	4808      	ldr	r0, [pc, #32]	; (14be8 <z_arm_fatal_error+0x58>)
   14bc6:	2145      	movs	r1, #69	; 0x45
   14bc8:	f015 fa4d 	bl	2a066 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14bcc:	4621      	mov	r1, r4
   14bce:	4628      	mov	r0, r5
}
   14bd0:	b003      	add	sp, #12
   14bd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
   14bd6:	f00e be13 	b.w	23800 <z_fatal_error>
   14bda:	bf00      	nop
   14bdc:	0002ffcc 	.word	0x0002ffcc
   14be0:	00030000 	.word	0x00030000
   14be4:	00030034 	.word	0x00030034
   14be8:	00030048 	.word	0x00030048

00014bec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14bec:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14bee:	2800      	cmp	r0, #0
   14bf0:	db07      	blt.n	14c02 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14bf2:	4a04      	ldr	r2, [pc, #16]	; (14c04 <arch_irq_enable+0x18>)
   14bf4:	0941      	lsrs	r1, r0, #5
   14bf6:	2301      	movs	r3, #1
   14bf8:	f000 001f 	and.w	r0, r0, #31
   14bfc:	4083      	lsls	r3, r0
   14bfe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14c02:	4770      	bx	lr
   14c04:	e000e100 	.word	0xe000e100

00014c08 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14c08:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14c0a:	2800      	cmp	r0, #0
   14c0c:	db0c      	blt.n	14c28 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14c0e:	0943      	lsrs	r3, r0, #5
   14c10:	4906      	ldr	r1, [pc, #24]	; (14c2c <arch_irq_disable+0x24>)
   14c12:	f000 001f 	and.w	r0, r0, #31
   14c16:	3320      	adds	r3, #32
   14c18:	2201      	movs	r2, #1
   14c1a:	4082      	lsls	r2, r0
   14c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14c24:	f3bf 8f6f 	isb	sy
}
   14c28:	4770      	bx	lr
   14c2a:	bf00      	nop
   14c2c:	e000e100 	.word	0xe000e100

00014c30 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14c30:	4b05      	ldr	r3, [pc, #20]	; (14c48 <arch_irq_is_enabled+0x18>)
   14c32:	0942      	lsrs	r2, r0, #5
   14c34:	f000 001f 	and.w	r0, r0, #31
   14c38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14c3c:	2301      	movs	r3, #1
   14c3e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14c42:	4010      	ands	r0, r2
   14c44:	4770      	bx	lr
   14c46:	bf00      	nop
   14c48:	e000e100 	.word	0xe000e100

00014c4c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14c4c:	b508      	push	{r3, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14c4e:	07d3      	lsls	r3, r2, #31
   14c50:	d40b      	bmi.n	14c6a <z_arm_irq_priority_set+0x1e>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14c52:	3102      	adds	r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14c54:	2907      	cmp	r1, #7
   14c56:	d909      	bls.n	14c6c <z_arm_irq_priority_set+0x20>
   14c58:	490e      	ldr	r1, [pc, #56]	; (14c94 <z_arm_irq_priority_set+0x48>)
   14c5a:	480f      	ldr	r0, [pc, #60]	; (14c98 <z_arm_irq_priority_set+0x4c>)
   14c5c:	225b      	movs	r2, #91	; 0x5b
   14c5e:	f015 f9f4 	bl	2a04a <assert_print>
   14c62:	480c      	ldr	r0, [pc, #48]	; (14c94 <z_arm_irq_priority_set+0x48>)
   14c64:	215b      	movs	r1, #91	; 0x5b
   14c66:	f015 f9e9 	bl	2a03c <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14c6a:	2100      	movs	r1, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14c6c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14c6e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c70:	bfac      	ite	ge
   14c72:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c76:	4b09      	ldrlt	r3, [pc, #36]	; (14c9c <z_arm_irq_priority_set+0x50>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c78:	ea4f 1141 	mov.w	r1, r1, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c7c:	bfb8      	it	lt
   14c7e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c82:	b2c9      	uxtb	r1, r1
   14c84:	bfaa      	itet	ge
   14c86:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c8a:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14c8c:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
   14c90:	bd08      	pop	{r3, pc}
   14c92:	bf00      	nop
   14c94:	0003007b 	.word	0x0003007b
   14c98:	0002f2b5 	.word	0x0002f2b5
   14c9c:	e000ed14 	.word	0xe000ed14

00014ca0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   14ca0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   14ca2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   14ca4:	4b04      	ldr	r3, [pc, #16]	; (14cb8 <_arch_isr_direct_pm+0x18>)
   14ca6:	699a      	ldr	r2, [r3, #24]
   14ca8:	b11a      	cbz	r2, 14cb2 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   14caa:	2200      	movs	r2, #0
   14cac:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   14cae:	f019 f83c 	bl	2dd2a <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   14cb2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   14cb4:	bd08      	pop	{r3, pc}
   14cb6:	bf00      	nop
   14cb8:	2000361c 	.word	0x2000361c

00014cbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14cbc:	bf30      	wfi
    b z_SysNmiOnReset
   14cbe:	f7ff bffd 	b.w	14cbc <z_SysNmiOnReset>
   14cc2:	bf00      	nop

00014cc4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14cc4:	4a0b      	ldr	r2, [pc, #44]	; (14cf4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14cc6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14cc8:	4b0b      	ldr	r3, [pc, #44]	; (14cf8 <z_arm_prep_c+0x34>)
   14cca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14cce:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14cd0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14cd4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14cd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14cdc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14ce4:	f00e fe24 	bl	23930 <z_bss_zero>
	z_data_copy();
   14ce8:	f011 f8d4 	bl	25e94 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14cec:	f000 fb00 	bl	152f0 <z_arm_interrupt_init>
	z_cstart();
   14cf0:	f00e fe62 	bl	239b8 <z_cstart>
   14cf4:	00000000 	.word	0x00000000
   14cf8:	e000ed00 	.word	0xe000ed00

00014cfc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14cfc:	4a09      	ldr	r2, [pc, #36]	; (14d24 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14cfe:	490a      	ldr	r1, [pc, #40]	; (14d28 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14d00:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14d02:	6809      	ldr	r1, [r1, #0]
   14d04:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14d06:	4909      	ldr	r1, [pc, #36]	; (14d2c <arch_swap+0x30>)
	_current->arch.basepri = key;
   14d08:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14d0a:	684b      	ldr	r3, [r1, #4]
   14d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14d10:	604b      	str	r3, [r1, #4]
   14d12:	2300      	movs	r3, #0
   14d14:	f383 8811 	msr	BASEPRI, r3
   14d18:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14d1c:	6893      	ldr	r3, [r2, #8]
}
   14d1e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14d20:	4770      	bx	lr
   14d22:	bf00      	nop
   14d24:	2000361c 	.word	0x2000361c
   14d28:	0002ee88 	.word	0x0002ee88
   14d2c:	e000ed00 	.word	0xe000ed00

00014d30 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14d30:	4912      	ldr	r1, [pc, #72]	; (14d7c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14d32:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14d34:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14d38:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14d3a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14d3e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14d42:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14d44:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14d48:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14d4c:	4f0c      	ldr	r7, [pc, #48]	; (14d80 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14d4e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14d52:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   14d54:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14d56:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14d58:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14d5a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14d5c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14d5e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14d62:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14d64:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14d66:	f000 fb5f 	bl	15428 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14d6a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14d6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14d72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14d76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14d7a:	4770      	bx	lr
    ldr r1, =_kernel
   14d7c:	2000361c 	.word	0x2000361c
    ldr v4, =_SCS_ICSR
   14d80:	e000ed04 	.word	0xe000ed04

00014d84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14d84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14d88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14d8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14d8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14d92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14d94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14d98:	2902      	cmp	r1, #2
    beq _oops
   14d9a:	d0ff      	beq.n	14d9c <_oops>

00014d9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14d9c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14d9e:	f016 f843 	bl	2ae28 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14da2:	bd01      	pop	{r0, pc}

00014da4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14da4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14da8:	9b00      	ldr	r3, [sp, #0]
   14daa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14dae:	490a      	ldr	r1, [pc, #40]	; (14dd8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   14db0:	9b01      	ldr	r3, [sp, #4]
   14db2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14db6:	9b02      	ldr	r3, [sp, #8]
   14db8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14dbc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14dc4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14dc8:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14dcc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14dce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   14dd0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   14dd2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14dd4:	4770      	bx	lr
   14dd6:	bf00      	nop
   14dd8:	00029c6f 	.word	0x00029c6f

00014ddc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14ddc:	4a09      	ldr	r2, [pc, #36]	; (14e04 <z_check_thread_stack_fail+0x28>)
{
   14dde:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14de0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14de2:	b170      	cbz	r0, 14e02 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14de4:	f113 0f16 	cmn.w	r3, #22
   14de8:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14dea:	d005      	beq.n	14df8 <z_check_thread_stack_fail+0x1c>
   14dec:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   14df0:	429a      	cmp	r2, r3
   14df2:	d805      	bhi.n	14e00 <z_check_thread_stack_fail+0x24>
   14df4:	4283      	cmp	r3, r0
   14df6:	d203      	bcs.n	14e00 <z_check_thread_stack_fail+0x24>
		return 0;
   14df8:	4281      	cmp	r1, r0
   14dfa:	bf28      	it	cs
   14dfc:	2000      	movcs	r0, #0
   14dfe:	4770      	bx	lr
   14e00:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14e02:	4770      	bx	lr
   14e04:	2000361c 	.word	0x2000361c

00014e08 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14e08:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14e0a:	4b09      	ldr	r3, [pc, #36]	; (14e30 <arch_switch_to_main_thread+0x28>)
   14e0c:	6098      	str	r0, [r3, #8]
{
   14e0e:	460d      	mov	r5, r1
   14e10:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14e12:	f000 fb09 	bl	15428 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14e16:	4620      	mov	r0, r4
   14e18:	f385 8809 	msr	PSP, r5
   14e1c:	2100      	movs	r1, #0
   14e1e:	b663      	cpsie	if
   14e20:	f381 8811 	msr	BASEPRI, r1
   14e24:	f3bf 8f6f 	isb	sy
   14e28:	2200      	movs	r2, #0
   14e2a:	2300      	movs	r3, #0
   14e2c:	f014 ff1f 	bl	29c6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14e30:	2000361c 	.word	0x2000361c

00014e34 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14e34:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   14e36:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   14e38:	4a0b      	ldr	r2, [pc, #44]	; (14e68 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   14e3a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   14e3c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   14e3e:	bf1e      	ittt	ne
	movne	r1, #0
   14e40:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   14e42:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   14e44:	f018 ff71 	blne	2dd2a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   14e48:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14e4a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14e4e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14e52:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14e56:	4905      	ldr	r1, [pc, #20]	; (14e6c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14e58:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14e5a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14e5c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14e5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14e62:	4903      	ldr	r1, [pc, #12]	; (14e70 <_isr_wrapper+0x3c>)
	bx r1
   14e64:	4708      	bx	r1
   14e66:	0000      	.short	0x0000
	ldr r2, =_kernel
   14e68:	2000361c 	.word	0x2000361c
	ldr r1, =_sw_isr_table
   14e6c:	0002e28c 	.word	0x0002e28c
	ldr r1, =z_arm_int_exit
   14e70:	00014e75 	.word	0x00014e75

00014e74 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14e74:	4b04      	ldr	r3, [pc, #16]	; (14e88 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14e76:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14e78:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   14e7a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14e7c:	d003      	beq.n	14e86 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14e7e:	4903      	ldr	r1, [pc, #12]	; (14e8c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14e84:	600a      	str	r2, [r1, #0]

00014e86 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14e86:	4770      	bx	lr
	ldr r3, =_kernel
   14e88:	2000361c 	.word	0x2000361c
	ldr r1, =_SCS_ICSR
   14e8c:	e000ed04 	.word	0xe000ed04

00014e90 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   14e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14e94:	4c38      	ldr	r4, [pc, #224]	; (14f78 <mem_manage_fault+0xe8>)
{
   14e96:	4607      	mov	r7, r0
   14e98:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   14e9a:	4838      	ldr	r0, [pc, #224]	; (14f7c <mem_manage_fault+0xec>)
   14e9c:	2145      	movs	r1, #69	; 0x45
{
   14e9e:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   14ea0:	f015 f8e1 	bl	2a066 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   14ea4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ea6:	06d8      	lsls	r0, r3, #27
   14ea8:	d503      	bpl.n	14eb2 <mem_manage_fault+0x22>
		PR_FAULT_INFO("  Stacking error (context area might be"
   14eaa:	4835      	ldr	r0, [pc, #212]	; (14f80 <mem_manage_fault+0xf0>)
   14eac:	2145      	movs	r1, #69	; 0x45
   14eae:	f015 f8da 	bl	2a066 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   14eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14eb4:	0719      	lsls	r1, r3, #28
   14eb6:	d503      	bpl.n	14ec0 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Unstacking error");
   14eb8:	4832      	ldr	r0, [pc, #200]	; (14f84 <mem_manage_fault+0xf4>)
   14eba:	2145      	movs	r1, #69	; 0x45
   14ebc:	f015 f8d3 	bl	2a066 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   14ec0:	4c2d      	ldr	r4, [pc, #180]	; (14f78 <mem_manage_fault+0xe8>)
   14ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ec4:	079a      	lsls	r2, r3, #30
   14ec6:	d432      	bmi.n	14f2e <mem_manage_fault+0x9e>
	uint32_t mmfar = -EINVAL;
   14ec8:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   14ecc:	4c2a      	ldr	r4, [pc, #168]	; (14f78 <mem_manage_fault+0xe8>)
   14ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ed0:	07d8      	lsls	r0, r3, #31
   14ed2:	d503      	bpl.n	14edc <mem_manage_fault+0x4c>
		PR_FAULT_INFO("  Instruction Access Violation");
   14ed4:	482c      	ldr	r0, [pc, #176]	; (14f88 <mem_manage_fault+0xf8>)
   14ed6:	2145      	movs	r1, #69	; 0x45
   14ed8:	f015 f8c5 	bl	2a066 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14edc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ede:	0699      	lsls	r1, r3, #26
   14ee0:	d503      	bpl.n	14eea <mem_manage_fault+0x5a>
		PR_FAULT_INFO(
   14ee2:	482a      	ldr	r0, [pc, #168]	; (14f8c <mem_manage_fault+0xfc>)
   14ee4:	2145      	movs	r1, #69	; 0x45
   14ee6:	f015 f8be 	bl	2a066 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14eea:	4c23      	ldr	r4, [pc, #140]	; (14f78 <mem_manage_fault+0xe8>)
   14eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14eee:	06da      	lsls	r2, r3, #27
   14ef0:	d402      	bmi.n	14ef8 <mem_manage_fault+0x68>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   14ef2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   14ef4:	079b      	lsls	r3, r3, #30
   14ef6:	d53d      	bpl.n	14f74 <mem_manage_fault+0xe4>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   14ef8:	6863      	ldr	r3, [r4, #4]
   14efa:	0518      	lsls	r0, r3, #20
   14efc:	d53a      	bpl.n	14f74 <mem_manage_fault+0xe4>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   14efe:	4639      	mov	r1, r7
   14f00:	4630      	mov	r0, r6
   14f02:	f7ff ff6b 	bl	14ddc <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
   14f06:	b338      	cbz	r0, 14f58 <mem_manage_fault+0xc8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   14f08:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
   14f0c:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   14f0e:	4b1a      	ldr	r3, [pc, #104]	; (14f78 <mem_manage_fault+0xe8>)
   14f10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14f12:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   14f14:	bf42      	ittt	mi
   14f16:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   14f18:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   14f1c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   14f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14f20:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   14f24:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   14f26:	2300      	movs	r3, #0
   14f28:	702b      	strb	r3, [r5, #0]

	return reason;
}
   14f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   14f2e:	4818      	ldr	r0, [pc, #96]	; (14f90 <mem_manage_fault+0x100>)
   14f30:	2145      	movs	r1, #69	; 0x45
   14f32:	f015 f898 	bl	2a066 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
   14f36:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   14f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f3a:	061b      	lsls	r3, r3, #24
   14f3c:	d5c4      	bpl.n	14ec8 <mem_manage_fault+0x38>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   14f3e:	4815      	ldr	r0, [pc, #84]	; (14f94 <mem_manage_fault+0x104>)
   14f40:	4632      	mov	r2, r6
   14f42:	2145      	movs	r1, #69	; 0x45
   14f44:	f015 f88f 	bl	2a066 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   14f48:	f1b8 0f00 	cmp.w	r8, #0
   14f4c:	d0be      	beq.n	14ecc <mem_manage_fault+0x3c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   14f4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14f54:	62a3      	str	r3, [r4, #40]	; 0x28
   14f56:	e7b9      	b.n	14ecc <mem_manage_fault+0x3c>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   14f58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14f5a:	06d9      	lsls	r1, r3, #27
   14f5c:	d50a      	bpl.n	14f74 <mem_manage_fault+0xe4>
   14f5e:	490e      	ldr	r1, [pc, #56]	; (14f98 <mem_manage_fault+0x108>)
   14f60:	480e      	ldr	r0, [pc, #56]	; (14f9c <mem_manage_fault+0x10c>)
   14f62:	f44f 72ab 	mov.w	r2, #342	; 0x156
   14f66:	f015 f870 	bl	2a04a <assert_print>
   14f6a:	480b      	ldr	r0, [pc, #44]	; (14f98 <mem_manage_fault+0x108>)
   14f6c:	f44f 71ab 	mov.w	r1, #342	; 0x156
   14f70:	f015 f864 	bl	2a03c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   14f74:	2000      	movs	r0, #0
   14f76:	e7ca      	b.n	14f0e <mem_manage_fault+0x7e>
   14f78:	e000ed00 	.word	0xe000ed00
   14f7c:	000300b1 	.word	0x000300b1
   14f80:	000300cc 	.word	0x000300cc
   14f84:	00030104 	.word	0x00030104
   14f88:	00030154 	.word	0x00030154
   14f8c:	00030178 	.word	0x00030178
   14f90:	0003011c 	.word	0x0003011c
   14f94:	00030139 	.word	0x00030139
   14f98:	000301ac 	.word	0x000301ac
   14f9c:	0002f2b5 	.word	0x0002f2b5

00014fa0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14fa0:	b510      	push	{r4, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14fa2:	4c1d      	ldr	r4, [pc, #116]	; (15018 <usage_fault.constprop.0+0x78>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   14fa4:	481d      	ldr	r0, [pc, #116]	; (1501c <usage_fault.constprop.0+0x7c>)
   14fa6:	2145      	movs	r1, #69	; 0x45
   14fa8:	f015 f85d 	bl	2a066 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14fac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fae:	019b      	lsls	r3, r3, #6
   14fb0:	d503      	bpl.n	14fba <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
   14fb2:	481b      	ldr	r0, [pc, #108]	; (15020 <usage_fault.constprop.0+0x80>)
   14fb4:	2145      	movs	r1, #69	; 0x45
   14fb6:	f015 f856 	bl	2a066 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14fba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fbc:	01dc      	lsls	r4, r3, #7
   14fbe:	d503      	bpl.n	14fc8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
   14fc0:	4818      	ldr	r0, [pc, #96]	; (15024 <usage_fault.constprop.0+0x84>)
   14fc2:	2145      	movs	r1, #69	; 0x45
   14fc4:	f015 f84f 	bl	2a066 <z_log_minimal_printk>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14fc8:	4c13      	ldr	r4, [pc, #76]	; (15018 <usage_fault.constprop.0+0x78>)
   14fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fcc:	0318      	lsls	r0, r3, #12
   14fce:	d503      	bpl.n	14fd8 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  No coprocessor instructions");
   14fd0:	4815      	ldr	r0, [pc, #84]	; (15028 <usage_fault.constprop.0+0x88>)
   14fd2:	2145      	movs	r1, #69	; 0x45
   14fd4:	f015 f847 	bl	2a066 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fda:	0359      	lsls	r1, r3, #13
   14fdc:	d503      	bpl.n	14fe6 <usage_fault.constprop.0+0x46>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14fde:	4813      	ldr	r0, [pc, #76]	; (1502c <usage_fault.constprop.0+0x8c>)
   14fe0:	2145      	movs	r1, #69	; 0x45
   14fe2:	f015 f840 	bl	2a066 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14fe6:	4c0c      	ldr	r4, [pc, #48]	; (15018 <usage_fault.constprop.0+0x78>)
   14fe8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14fea:	039a      	lsls	r2, r3, #14
   14fec:	d503      	bpl.n	14ff6 <usage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14fee:	4810      	ldr	r0, [pc, #64]	; (15030 <usage_fault.constprop.0+0x90>)
   14ff0:	2145      	movs	r1, #69	; 0x45
   14ff2:	f015 f838 	bl	2a066 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ff8:	03db      	lsls	r3, r3, #15
   14ffa:	d503      	bpl.n	15004 <usage_fault.constprop.0+0x64>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14ffc:	480d      	ldr	r0, [pc, #52]	; (15034 <usage_fault.constprop.0+0x94>)
   14ffe:	2145      	movs	r1, #69	; 0x45
   15000:	f015 f831 	bl	2a066 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15004:	4a04      	ldr	r2, [pc, #16]	; (15018 <usage_fault.constprop.0+0x78>)
   15006:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15008:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1500c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15010:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15012:	2000      	movs	r0, #0
   15014:	bd10      	pop	{r4, pc}
   15016:	bf00      	nop
   15018:	e000ed00 	.word	0xe000ed00
   1501c:	000301e6 	.word	0x000301e6
   15020:	00030203 	.word	0x00030203
   15024:	0003021b 	.word	0x0003021b
   15028:	0003023a 	.word	0x0003023a
   1502c:	0003025d 	.word	0x0003025d
   15030:	00030287 	.word	0x00030287
   15034:	000302a6 	.word	0x000302a6

00015038 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15038:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1503a:	4c23      	ldr	r4, [pc, #140]	; (150c8 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1503c:	4606      	mov	r6, r0
   1503e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   15040:	4822      	ldr	r0, [pc, #136]	; (150cc <bus_fault.constprop.0+0x94>)
   15042:	2145      	movs	r1, #69	; 0x45
   15044:	f015 f80f 	bl	2a066 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15048:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1504a:	04d9      	lsls	r1, r3, #19
   1504c:	d503      	bpl.n	15056 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
   1504e:	4820      	ldr	r0, [pc, #128]	; (150d0 <bus_fault.constprop.0+0x98>)
   15050:	2145      	movs	r1, #69	; 0x45
   15052:	f015 f808 	bl	2a066 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15058:	051a      	lsls	r2, r3, #20
   1505a:	d503      	bpl.n	15064 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
   1505c:	481d      	ldr	r0, [pc, #116]	; (150d4 <bus_fault.constprop.0+0x9c>)
   1505e:	2145      	movs	r1, #69	; 0x45
   15060:	f015 f801 	bl	2a066 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15064:	4c18      	ldr	r4, [pc, #96]	; (150c8 <bus_fault.constprop.0+0x90>)
   15066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15068:	059b      	lsls	r3, r3, #22
   1506a:	d510      	bpl.n	1508e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
   1506c:	481a      	ldr	r0, [pc, #104]	; (150d8 <bus_fault.constprop.0+0xa0>)
   1506e:	2145      	movs	r1, #69	; 0x45
   15070:	f014 fff9 	bl	2a066 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
   15074:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15078:	0418      	lsls	r0, r3, #16
   1507a:	d508      	bpl.n	1508e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1507c:	4817      	ldr	r0, [pc, #92]	; (150dc <bus_fault.constprop.0+0xa4>)
   1507e:	2145      	movs	r1, #69	; 0x45
   15080:	f014 fff1 	bl	2a066 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
   15084:	b11e      	cbz	r6, 1508e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15088:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1508c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1508e:	4c0e      	ldr	r4, [pc, #56]	; (150c8 <bus_fault.constprop.0+0x90>)
   15090:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15092:	0559      	lsls	r1, r3, #21
   15094:	d503      	bpl.n	1509e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
   15096:	4812      	ldr	r0, [pc, #72]	; (150e0 <bus_fault.constprop.0+0xa8>)
   15098:	2145      	movs	r1, #69	; 0x45
   1509a:	f014 ffe4 	bl	2a066 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1509e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150a0:	05da      	lsls	r2, r3, #23
   150a2:	d50b      	bpl.n	150bc <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
   150a4:	480f      	ldr	r0, [pc, #60]	; (150e4 <bus_fault.constprop.0+0xac>)
   150a6:	2145      	movs	r1, #69	; 0x45
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   150a8:	f014 ffdd 	bl	2a066 <z_log_minimal_printk>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   150ac:	4a06      	ldr	r2, [pc, #24]	; (150c8 <bus_fault.constprop.0+0x90>)
   150ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   150b0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   150b2:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   150b6:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   150b8:	7028      	strb	r0, [r5, #0]
}
   150ba:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   150bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   150be:	049b      	lsls	r3, r3, #18
   150c0:	d5f4      	bpl.n	150ac <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   150c2:	4809      	ldr	r0, [pc, #36]	; (150e8 <bus_fault.constprop.0+0xb0>)
   150c4:	2145      	movs	r1, #69	; 0x45
   150c6:	e7ef      	b.n	150a8 <bus_fault.constprop.0+0x70>
   150c8:	e000ed00 	.word	0xe000ed00
   150cc:	000302d6 	.word	0x000302d6
   150d0:	000302f1 	.word	0x000302f1
   150d4:	00030104 	.word	0x00030104
   150d8:	00030307 	.word	0x00030307
   150dc:	00030325 	.word	0x00030325
   150e0:	0003033f 	.word	0x0003033f
   150e4:	0003035f 	.word	0x0003035f
   150e8:	00030178 	.word	0x00030178

000150ec <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   150ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   150ee:	4b6a      	ldr	r3, [pc, #424]	; (15298 <z_arm_fault+0x1ac>)
{
   150f0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   150f2:	6858      	ldr	r0, [r3, #4]
{
   150f4:	b08a      	sub	sp, #40	; 0x28
   150f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
   150fa:	2600      	movs	r6, #0
   150fc:	f386 8811 	msr	BASEPRI, r6
   15100:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15104:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15108:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1510c:	d107      	bne.n	1511e <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1510e:	f002 040c 	and.w	r4, r2, #12
   15112:	2c08      	cmp	r4, #8
   15114:	d10e      	bne.n	15134 <z_arm_fault+0x48>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15116:	4861      	ldr	r0, [pc, #388]	; (1529c <z_arm_fault+0x1b0>)
   15118:	2145      	movs	r1, #69	; 0x45
   1511a:	f014 ffa4 	bl	2a066 <z_log_minimal_printk>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1511e:	4960      	ldr	r1, [pc, #384]	; (152a0 <z_arm_fault+0x1b4>)
   15120:	4860      	ldr	r0, [pc, #384]	; (152a4 <z_arm_fault+0x1b8>)
   15122:	f44f 6284 	mov.w	r2, #1056	; 0x420
   15126:	f014 ff90 	bl	2a04a <assert_print>
   1512a:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
   1512e:	485c      	ldr	r0, [pc, #368]	; (152a0 <z_arm_fault+0x1b4>)
   15130:	f014 ff84 	bl	2a03c <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15134:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   15136:	bf4c      	ite	mi
   15138:	460d      	movmi	r5, r1
			*nested_exc = true;
   1513a:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   1513c:	2d00      	cmp	r5, #0
   1513e:	d0ee      	beq.n	1511e <z_arm_fault+0x32>
	*recoverable = false;
   15140:	2400      	movs	r4, #0
	switch (fault) {
   15142:	1eda      	subs	r2, r3, #3
	*recoverable = false;
   15144:	f88d 4007 	strb.w	r4, [sp, #7]
	switch (fault) {
   15148:	2a09      	cmp	r2, #9
   1514a:	f200 8093 	bhi.w	15274 <z_arm_fault+0x188>
   1514e:	e8df f002 	tbb	[pc, r2]
   15152:	8605      	.short	0x8605
   15154:	9191718a 	.word	0x9191718a
   15158:	8e919191 	.word	0x8e919191
	PR_FAULT_INFO("***** HARD FAULT *****");
   1515c:	4852      	ldr	r0, [pc, #328]	; (152a8 <z_arm_fault+0x1bc>)
   1515e:	2145      	movs	r1, #69	; 0x45
   15160:	f014 ff81 	bl	2a066 <z_log_minimal_printk>
	*recoverable = false;
   15164:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15168:	4c4b      	ldr	r4, [pc, #300]	; (15298 <z_arm_fault+0x1ac>)
   1516a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1516c:	079a      	lsls	r2, r3, #30
   1516e:	d505      	bpl.n	1517c <z_arm_fault+0x90>
		PR_EXC("  Bus fault on vector table read");
   15170:	484e      	ldr	r0, [pc, #312]	; (152ac <z_arm_fault+0x1c0>)
   15172:	2145      	movs	r1, #69	; 0x45
	PR_FAULT_INFO(
   15174:	f014 ff77 	bl	2a066 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   15178:	2400      	movs	r4, #0
   1517a:	e029      	b.n	151d0 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1517c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1517e:	2b00      	cmp	r3, #0
   15180:	da02      	bge.n	15188 <z_arm_fault+0x9c>
		PR_EXC("  Debug event");
   15182:	484b      	ldr	r0, [pc, #300]	; (152b0 <z_arm_fault+0x1c4>)
   15184:	2145      	movs	r1, #69	; 0x45
   15186:	e7f5      	b.n	15174 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1518a:	005b      	lsls	r3, r3, #1
   1518c:	d55e      	bpl.n	1524c <z_arm_fault+0x160>
		PR_EXC("  Fault escalation (see below)");
   1518e:	4849      	ldr	r0, [pc, #292]	; (152b4 <z_arm_fault+0x1c8>)
   15190:	2145      	movs	r1, #69	; 0x45
   15192:	f014 ff68 	bl	2a066 <z_log_minimal_printk>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   15196:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   15198:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   1519a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1519e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   151a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   151a4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   151a8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   151aa:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   151ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   151b2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   151b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   151b8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   151bc:	f64d 7302 	movw	r3, #57090	; 0xdf02
   151c0:	429a      	cmp	r2, r3
   151c2:	d11e      	bne.n	15202 <z_arm_fault+0x116>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   151c4:	682a      	ldr	r2, [r5, #0]
   151c6:	483c      	ldr	r0, [pc, #240]	; (152b8 <z_arm_fault+0x1cc>)
   151c8:	2145      	movs	r1, #69	; 0x45
   151ca:	f014 ff4c 	bl	2a066 <z_log_minimal_printk>
			reason = esf->basic.r0;
   151ce:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   151d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   151d4:	b99b      	cbnz	r3, 151fe <z_arm_fault+0x112>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   151d6:	2220      	movs	r2, #32
   151d8:	4629      	mov	r1, r5
   151da:	a802      	add	r0, sp, #8
   151dc:	f015 ff0b 	bl	2aff6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   151e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   151e2:	2e00      	cmp	r6, #0
   151e4:	d052      	beq.n	1528c <z_arm_fault+0x1a0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   151e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   151ea:	b922      	cbnz	r2, 151f6 <z_arm_fault+0x10a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   151ec:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   151f0:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   151f4:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   151f6:	a902      	add	r1, sp, #8
   151f8:	4620      	mov	r0, r4
   151fa:	f7ff fcc9 	bl	14b90 <z_arm_fatal_error>
}
   151fe:	b00a      	add	sp, #40	; 0x28
   15200:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   15202:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15204:	b2db      	uxtb	r3, r3
   15206:	b13b      	cbz	r3, 15218 <z_arm_fault+0x12c>
			reason = mem_manage_fault(esf, 1, recoverable);
   15208:	f10d 0207 	add.w	r2, sp, #7
   1520c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1520e:	4628      	mov	r0, r5
   15210:	f7ff fe3e 	bl	14e90 <mem_manage_fault>
   15214:	4604      	mov	r4, r0
		break;
   15216:	e7db      	b.n	151d0 <z_arm_fault+0xe4>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   15218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1521a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1521e:	d005      	beq.n	1522c <z_arm_fault+0x140>
			reason = bus_fault(esf, 1, recoverable);
   15220:	f10d 0107 	add.w	r1, sp, #7
   15224:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   15226:	f7ff ff07 	bl	15038 <bus_fault.constprop.0>
   1522a:	e7f3      	b.n	15214 <z_arm_fault+0x128>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1522c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1522e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15232:	d302      	bcc.n	1523a <z_arm_fault+0x14e>
		reason = usage_fault(esf);
   15234:	f7ff feb4 	bl	14fa0 <usage_fault.constprop.0>
   15238:	e7ec      	b.n	15214 <z_arm_fault+0x128>
			__ASSERT(0,
   1523a:	4919      	ldr	r1, [pc, #100]	; (152a0 <z_arm_fault+0x1b4>)
   1523c:	4819      	ldr	r0, [pc, #100]	; (152a4 <z_arm_fault+0x1b8>)
   1523e:	f240 22f2 	movw	r2, #754	; 0x2f2
   15242:	f014 ff02 	bl	2a04a <assert_print>
   15246:	f240 21f2 	movw	r1, #754	; 0x2f2
   1524a:	e770      	b.n	1512e <z_arm_fault+0x42>
		__ASSERT(0,
   1524c:	4914      	ldr	r1, [pc, #80]	; (152a0 <z_arm_fault+0x1b4>)
   1524e:	4815      	ldr	r0, [pc, #84]	; (152a4 <z_arm_fault+0x1b8>)
   15250:	f240 22f6 	movw	r2, #758	; 0x2f6
   15254:	f014 fef9 	bl	2a04a <assert_print>
   15258:	f240 21f6 	movw	r1, #758	; 0x2f6
   1525c:	e767      	b.n	1512e <z_arm_fault+0x42>
		reason = mem_manage_fault(esf, 0, recoverable);
   1525e:	f10d 0207 	add.w	r2, sp, #7
   15262:	2100      	movs	r1, #0
   15264:	e7d3      	b.n	1520e <z_arm_fault+0x122>
		reason = bus_fault(esf, 0, recoverable);
   15266:	f10d 0107 	add.w	r1, sp, #7
   1526a:	2000      	movs	r0, #0
   1526c:	e7db      	b.n	15226 <z_arm_fault+0x13a>
	PR_FAULT_INFO(
   1526e:	4813      	ldr	r0, [pc, #76]	; (152bc <z_arm_fault+0x1d0>)
   15270:	2145      	movs	r1, #69	; 0x45
   15272:	e77f      	b.n	15174 <z_arm_fault+0x88>
	PR_FAULT_INFO("***** %s %d) *****",
   15274:	4912      	ldr	r1, [pc, #72]	; (152c0 <z_arm_fault+0x1d4>)
   15276:	4a13      	ldr	r2, [pc, #76]	; (152c4 <z_arm_fault+0x1d8>)
   15278:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   1527c:	bf08      	it	eq
   1527e:	460a      	moveq	r2, r1
   15280:	4811      	ldr	r0, [pc, #68]	; (152c8 <z_arm_fault+0x1dc>)
   15282:	3b10      	subs	r3, #16
   15284:	2145      	movs	r1, #69	; 0x45
   15286:	f014 feee 	bl	2a066 <z_log_minimal_printk>
}
   1528a:	e775      	b.n	15178 <z_arm_fault+0x8c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1528c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15290:	f023 0301 	bic.w	r3, r3, #1
   15294:	e7ae      	b.n	151f4 <z_arm_fault+0x108>
   15296:	bf00      	nop
   15298:	e000ed00 	.word	0xe000ed00
   1529c:	000303aa 	.word	0x000303aa
   152a0:	000301ac 	.word	0x000301ac
   152a4:	0002f2b5 	.word	0x0002f2b5
   152a8:	000303da 	.word	0x000303da
   152ac:	000303f6 	.word	0x000303f6
   152b0:	0003041c 	.word	0x0003041c
   152b4:	0003042f 	.word	0x0003042f
   152b8:	00030453 	.word	0x00030453
   152bc:	00030474 	.word	0x00030474
   152c0:	0003037c 	.word	0x0003037c
   152c4:	00030391 	.word	0x00030391
   152c8:	0003049d 	.word	0x0003049d

000152cc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   152cc:	4a02      	ldr	r2, [pc, #8]	; (152d8 <z_arm_fault_init+0xc>)
   152ce:	6953      	ldr	r3, [r2, #20]
   152d0:	f043 0310 	orr.w	r3, r3, #16
   152d4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   152d6:	4770      	bx	lr
   152d8:	e000ed00 	.word	0xe000ed00

000152dc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   152dc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   152e0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   152e4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   152e6:	4672      	mov	r2, lr
	bl z_arm_fault
   152e8:	f7ff ff00 	bl	150ec <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   152ec:	bd01      	pop	{r0, pc}
   152ee:	bf00      	nop

000152f0 <z_arm_interrupt_init>:
   152f0:	4804      	ldr	r0, [pc, #16]	; (15304 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   152f2:	2300      	movs	r3, #0
   152f4:	2140      	movs	r1, #64	; 0x40
   152f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   152f8:	3301      	adds	r3, #1
   152fa:	2b30      	cmp	r3, #48	; 0x30
   152fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15300:	d1f9      	bne.n	152f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15302:	4770      	bx	lr
   15304:	e000e100 	.word	0xe000e100

00015308 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15308:	2000      	movs	r0, #0
    msr CONTROL, r0
   1530a:	f380 8814 	msr	CONTROL, r0
    isb
   1530e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15312:	f7fd fef7 	bl	13104 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15316:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15318:	490d      	ldr	r1, [pc, #52]	; (15350 <__start+0x48>)
    str r0, [r1]
   1531a:	6008      	str	r0, [r1, #0]
    dsb
   1531c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15320:	480c      	ldr	r0, [pc, #48]	; (15354 <__start+0x4c>)
    msr msp, r0
   15322:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15326:	f000 f82b 	bl	15380 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1532a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   1532c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15330:	4809      	ldr	r0, [pc, #36]	; (15358 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15332:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15336:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15338:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1533c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15340:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15342:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15344:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15348:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1534c:	f7ff fcba 	bl	14cc4 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15350:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15354:	2000af40 	.word	0x2000af40
    ldr r0, =z_interrupt_stacks
   15358:	20008580 	.word	0x20008580

0001535c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1535c:	4907      	ldr	r1, [pc, #28]	; (1537c <z_arm_clear_arm_mpu_config+0x20>)
   1535e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   15362:	2300      	movs	r3, #0
	int num_regions =
   15364:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15368:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1536a:	4293      	cmp	r3, r2
   1536c:	db00      	blt.n	15370 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1536e:	4770      	bx	lr
  MPU->RNR = rnr;
   15370:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15374:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15378:	3301      	adds	r3, #1
   1537a:	e7f6      	b.n	1536a <z_arm_clear_arm_mpu_config+0xe>
   1537c:	e000ed00 	.word	0xe000ed00

00015380 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15380:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15382:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15384:	2300      	movs	r3, #0
   15386:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1538a:	f7ff ffe7 	bl	1535c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1538e:	4b14      	ldr	r3, [pc, #80]	; (153e0 <z_arm_init_arch_hw_at_boot+0x60>)
   15390:	f04f 32ff 	mov.w	r2, #4294967295
   15394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1539c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   153a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   153a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   153a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   153ac:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   153b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   153b4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   153b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   153bc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   153c0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   153c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   153c8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   153cc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   153d0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   153d4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   153d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   153da:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   153de:	bd08      	pop	{r3, pc}
   153e0:	e000e100 	.word	0xe000e100

000153e4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   153e4:	4b08      	ldr	r3, [pc, #32]	; (15408 <z_impl_k_thread_abort+0x24>)
   153e6:	689b      	ldr	r3, [r3, #8]
   153e8:	4283      	cmp	r3, r0
   153ea:	d10b      	bne.n	15404 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   153ec:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   153f0:	b143      	cbz	r3, 15404 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   153f2:	4b06      	ldr	r3, [pc, #24]	; (1540c <z_impl_k_thread_abort+0x28>)
   153f4:	685a      	ldr	r2, [r3, #4]
   153f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   153fa:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   153fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   153fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15402:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15404:	f010 bc46 	b.w	25c94 <z_thread_abort>
   15408:	2000361c 	.word	0x2000361c
   1540c:	e000ed00 	.word	0xe000ed00

00015410 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15410:	4b02      	ldr	r3, [pc, #8]	; (1541c <z_arm_configure_static_mpu_regions+0xc>)
   15412:	4a03      	ldr	r2, [pc, #12]	; (15420 <z_arm_configure_static_mpu_regions+0x10>)
   15414:	4803      	ldr	r0, [pc, #12]	; (15424 <z_arm_configure_static_mpu_regions+0x14>)
   15416:	2101      	movs	r1, #1
   15418:	f000 b87c 	b.w	15514 <arm_core_mpu_configure_static_mpu_regions>
   1541c:	20040000 	.word	0x20040000
   15420:	20000000 	.word	0x20000000
   15424:	0002e818 	.word	0x0002e818

00015428 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15428:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1542a:	4b05      	ldr	r3, [pc, #20]	; (15440 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1542c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   1542e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15430:	4a04      	ldr	r2, [pc, #16]	; (15444 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15432:	2140      	movs	r1, #64	; 0x40
   15434:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15438:	4618      	mov	r0, r3
   1543a:	2101      	movs	r1, #1
   1543c:	f000 b886 	b.w	1554c <arm_core_mpu_configure_dynamic_mpu_regions>
   15440:	20003110 	.word	0x20003110
   15444:	150b0000 	.word	0x150b0000

00015448 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1544a:	4e24      	ldr	r6, [pc, #144]	; (154dc <mpu_configure_regions+0x94>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1544c:	2500      	movs	r5, #0
   1544e:	428d      	cmp	r5, r1
   15450:	da0f      	bge.n	15472 <mpu_configure_regions+0x2a>
		if (regions[i].size == 0U) {
   15452:	6844      	ldr	r4, [r0, #4]
   15454:	2c00      	cmp	r4, #0
   15456:	d03e      	beq.n	154d6 <mpu_configure_regions+0x8e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15458:	b19b      	cbz	r3, 15482 <mpu_configure_regions+0x3a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1545a:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   1545e:	ea14 0f0c 	tst.w	r4, ip
   15462:	d008      	beq.n	15476 <mpu_configure_regions+0x2e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15464:	481e      	ldr	r0, [pc, #120]	; (154e0 <mpu_configure_regions+0x98>)
   15466:	462a      	mov	r2, r5
   15468:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1546a:	f014 fdfc 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1546e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15472:	4610      	mov	r0, r2
   15474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   15476:	2c1f      	cmp	r4, #31
   15478:	d9f4      	bls.n	15464 <mpu_configure_regions+0x1c>
		((part->start & (part->size - 1U)) == 0U);
   1547a:	6807      	ldr	r7, [r0, #0]
		&&
   1547c:	ea1c 0f07 	tst.w	ip, r7
   15480:	d1f0      	bne.n	15464 <mpu_configure_regions+0x1c>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15482:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15484:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15486:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1548a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   1548e:	d910      	bls.n	154b2 <mpu_configure_regions+0x6a>
	if (size > (1UL << 31)) {
   15490:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15494:	d80f      	bhi.n	154b6 <mpu_configure_regions+0x6e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15496:	3c01      	subs	r4, #1
   15498:	fab4 f484 	clz	r4, r4
   1549c:	f1c4 041f 	rsb	r4, r4, #31
   154a0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   154a2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   154a6:	ea4c 0c04 	orr.w	ip, ip, r4
   154aa:	d906      	bls.n	154ba <mpu_configure_regions+0x72>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   154ac:	480d      	ldr	r0, [pc, #52]	; (154e4 <mpu_configure_regions+0x9c>)
   154ae:	2145      	movs	r1, #69	; 0x45
   154b0:	e7db      	b.n	1546a <mpu_configure_regions+0x22>
		return REGION_32B;
   154b2:	2408      	movs	r4, #8
   154b4:	e7f5      	b.n	154a2 <mpu_configure_regions+0x5a>
		return REGION_4G;
   154b6:	243e      	movs	r4, #62	; 0x3e
   154b8:	e7f3      	b.n	154a2 <mpu_configure_regions+0x5a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   154ba:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   154be:	4314      	orrs	r4, r2
   154c0:	f044 0410 	orr.w	r4, r4, #16
   154c4:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   154c8:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   154cc:	f04c 0401 	orr.w	r4, ip, #1
   154d0:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   154d4:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   154d6:	3501      	adds	r5, #1
   154d8:	300c      	adds	r0, #12
   154da:	e7b8      	b.n	1544e <mpu_configure_regions+0x6>
   154dc:	e000ed00 	.word	0xe000ed00
   154e0:	000304b9 	.word	0x000304b9
   154e4:	000304e1 	.word	0x000304e1

000154e8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   154e8:	4b04      	ldr	r3, [pc, #16]	; (154fc <arm_core_mpu_enable+0x14>)
   154ea:	2205      	movs	r2, #5
   154ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   154f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   154f4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   154f8:	4770      	bx	lr
   154fa:	bf00      	nop
   154fc:	e000ed00 	.word	0xe000ed00

00015500 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15500:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15504:	4b02      	ldr	r3, [pc, #8]	; (15510 <arm_core_mpu_disable+0x10>)
   15506:	2200      	movs	r2, #0
   15508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1550c:	4770      	bx	lr
   1550e:	bf00      	nop
   15510:	e000ed00 	.word	0xe000ed00

00015514 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15514:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15516:	4c0a      	ldr	r4, [pc, #40]	; (15540 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15518:	2301      	movs	r3, #1
   1551a:	7822      	ldrb	r2, [r4, #0]
   1551c:	f7ff ff94 	bl	15448 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15520:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15522:	3016      	adds	r0, #22
   15524:	d10a      	bne.n	1553c <arm_core_mpu_configure_static_mpu_regions+0x28>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15526:	4907      	ldr	r1, [pc, #28]	; (15544 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   15528:	4807      	ldr	r0, [pc, #28]	; (15548 <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1552a:	f44f 728d 	mov.w	r2, #282	; 0x11a
   1552e:	f014 fd8c 	bl	2a04a <assert_print>
   15532:	4804      	ldr	r0, [pc, #16]	; (15544 <arm_core_mpu_configure_static_mpu_regions+0x30>)
   15534:	f44f 718d 	mov.w	r1, #282	; 0x11a
   15538:	f014 fd80 	bl	2a03c <assert_post_action>
			regions_num);
	}
}
   1553c:	bd10      	pop	{r4, pc}
   1553e:	bf00      	nop
   15540:	20004159 	.word	0x20004159
   15544:	0003050c 	.word	0x0003050c
   15548:	0002f2b5 	.word	0x0002f2b5

0001554c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   1554c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1554e:	4a0f      	ldr	r2, [pc, #60]	; (1558c <arm_core_mpu_configure_dynamic_mpu_regions+0x40>)
   15550:	2300      	movs	r3, #0
   15552:	7812      	ldrb	r2, [r2, #0]
   15554:	f7ff ff78 	bl	15448 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15558:	f110 0f16 	cmn.w	r0, #22
   1555c:	d004      	beq.n	15568 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
   1555e:	4b0c      	ldr	r3, [pc, #48]	; (15590 <arm_core_mpu_configure_dynamic_mpu_regions+0x44>)
  MPU->RASR = 0U;
   15560:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15562:	2807      	cmp	r0, #7
   15564:	dd0b      	ble.n	1557e <arm_core_mpu_configure_dynamic_mpu_regions+0x32>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15566:	bd08      	pop	{r3, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15568:	490a      	ldr	r1, [pc, #40]	; (15594 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   1556a:	480b      	ldr	r0, [pc, #44]	; (15598 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   1556c:	f240 1239 	movw	r2, #313	; 0x139
   15570:	f014 fd6b 	bl	2a04a <assert_print>
   15574:	4807      	ldr	r0, [pc, #28]	; (15594 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
   15576:	f240 1139 	movw	r1, #313	; 0x139
   1557a:	f014 fd5f 	bl	2a03c <assert_post_action>
  MPU->RNR = rnr;
   1557e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15582:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15586:	3001      	adds	r0, #1
   15588:	e7eb      	b.n	15562 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   1558a:	bf00      	nop
   1558c:	20004159 	.word	0x20004159
   15590:	e000ed00 	.word	0xe000ed00
   15594:	0003050c 	.word	0x0003050c
   15598:	0002f2b5 	.word	0x0002f2b5

0001559c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1559c:	4920      	ldr	r1, [pc, #128]	; (15620 <z_arm_mpu_init+0x84>)
{
   1559e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   155a0:	680c      	ldr	r4, [r1, #0]
   155a2:	2c08      	cmp	r4, #8
   155a4:	d90a      	bls.n	155bc <z_arm_mpu_init+0x20>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   155a6:	491f      	ldr	r1, [pc, #124]	; (15624 <z_arm_mpu_init+0x88>)
   155a8:	481f      	ldr	r0, [pc, #124]	; (15628 <z_arm_mpu_init+0x8c>)
   155aa:	f240 1251 	movw	r2, #337	; 0x151
   155ae:	f014 fd4c 	bl	2a04a <assert_print>
   155b2:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   155b6:	481b      	ldr	r0, [pc, #108]	; (15624 <z_arm_mpu_init+0x88>)
   155b8:	f014 fd40 	bl	2a03c <assert_post_action>
	arm_core_mpu_disable();
   155bc:	f7ff ffa0 	bl	15500 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   155c0:	6848      	ldr	r0, [r1, #4]
   155c2:	491a      	ldr	r1, [pc, #104]	; (1562c <z_arm_mpu_init+0x90>)
   155c4:	2200      	movs	r2, #0
   155c6:	4294      	cmp	r4, r2
   155c8:	f100 000c 	add.w	r0, r0, #12
   155cc:	d112      	bne.n	155f4 <z_arm_mpu_init+0x58>
	static_regions_num = mpu_config.num_regions;
   155ce:	4b18      	ldr	r3, [pc, #96]	; (15630 <z_arm_mpu_init+0x94>)
   155d0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   155d2:	f7ff ff89 	bl	154e8 <arm_core_mpu_enable>
	__ASSERT(
   155d6:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   155da:	f3c3 2307 	ubfx	r3, r3, #8, #8
   155de:	2b08      	cmp	r3, #8
   155e0:	d01b      	beq.n	1561a <z_arm_mpu_init+0x7e>
   155e2:	4910      	ldr	r1, [pc, #64]	; (15624 <z_arm_mpu_init+0x88>)
   155e4:	4810      	ldr	r0, [pc, #64]	; (15628 <z_arm_mpu_init+0x8c>)
   155e6:	f240 12b7 	movw	r2, #439	; 0x1b7
   155ea:	f014 fd2e 	bl	2a04a <assert_print>
   155ee:	f240 11b7 	movw	r1, #439	; 0x1b7
   155f2:	e7e0      	b.n	155b6 <z_arm_mpu_init+0x1a>
   155f4:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   155f8:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   155fc:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15600:	4313      	orrs	r3, r2
   15602:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15606:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1560a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   1560e:	f043 0301 	orr.w	r3, r3, #1
   15612:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15616:	3201      	adds	r2, #1
   15618:	e7d5      	b.n	155c6 <z_arm_mpu_init+0x2a>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1561a:	2000      	movs	r0, #0
   1561c:	bd10      	pop	{r4, pc}
   1561e:	bf00      	nop
   15620:	0002e824 	.word	0x0002e824
   15624:	0003050c 	.word	0x0003050c
   15628:	0002f2b5 	.word	0x0002f2b5
   1562c:	e000ed00 	.word	0xe000ed00
   15630:	20004159 	.word	0x20004159

00015634 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15634:	4b01      	ldr	r3, [pc, #4]	; (1563c <__stdout_hook_install+0x8>)
   15636:	6018      	str	r0, [r3, #0]
}
   15638:	4770      	bx	lr
   1563a:	bf00      	nop
   1563c:	2000058c 	.word	0x2000058c

00015640 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
   15640:	b510      	push	{r4, lr}
	__asm__ volatile(
   15642:	f04f 0340 	mov.w	r3, #64	; 0x40
   15646:	f3ef 8011 	mrs	r0, BASEPRI
   1564a:	f383 8812 	msr	BASEPRI_MAX, r3
   1564e:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15652:	4a11      	ldr	r2, [pc, #68]	; (15698 <nordicsemi_nrf52_init+0x58>)
   15654:	2301      	movs	r3, #1
   15656:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1565a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1565e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   15662:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15666:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   1566a:	2c08      	cmp	r4, #8
   1566c:	d108      	bne.n	15680 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1566e:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   15672:	2905      	cmp	r1, #5
   15674:	d804      	bhi.n	15680 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   15676:	4c09      	ldr	r4, [pc, #36]	; (1569c <nordicsemi_nrf52_init+0x5c>)
   15678:	5c61      	ldrb	r1, [r4, r1]
   1567a:	b109      	cbz	r1, 15680 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1567c:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15684:	2201      	movs	r2, #1
   15686:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   1568a:	f380 8811 	msr	BASEPRI, r0
   1568e:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15692:	2000      	movs	r0, #0
   15694:	bd10      	pop	{r4, pc}
   15696:	bf00      	nop
   15698:	4001e000 	.word	0x4001e000
   1569c:	00030552 	.word	0x00030552

000156a0 <sys_arch_reboot>:
    *p_gpregret = val;
   156a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   156a4:	b2c0      	uxtb	r0, r0
   156a6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   156aa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   156ae:	4905      	ldr	r1, [pc, #20]	; (156c4 <sys_arch_reboot+0x24>)
   156b0:	4b05      	ldr	r3, [pc, #20]	; (156c8 <sys_arch_reboot+0x28>)
   156b2:	68ca      	ldr	r2, [r1, #12]
   156b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   156b8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   156ba:	60cb      	str	r3, [r1, #12]
   156bc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   156c0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   156c2:	e7fd      	b.n	156c0 <sys_arch_reboot+0x20>
   156c4:	e000ed00 	.word	0xe000ed00
   156c8:	05fa0004 	.word	0x05fa0004

000156cc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   156cc:	b120      	cbz	r0, 156d8 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   156ce:	4b03      	ldr	r3, [pc, #12]	; (156dc <arch_busy_wait+0x10>)
   156d0:	0180      	lsls	r0, r0, #6
   156d2:	f043 0301 	orr.w	r3, r3, #1
   156d6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   156d8:	4770      	bx	lr
   156da:	bf00      	nop
   156dc:	0002e780 	.word	0x0002e780

000156e0 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   156e0:	4b0e      	ldr	r3, [pc, #56]	; (1571c <bt_hex+0x3c>)
   156e2:	2940      	cmp	r1, #64	; 0x40
{
   156e4:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   156e6:	bf28      	it	cs
   156e8:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   156ea:	4c0d      	ldr	r4, [pc, #52]	; (15720 <bt_hex+0x40>)
   156ec:	1846      	adds	r6, r0, r1
   156ee:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   156f0:	42b0      	cmp	r0, r6
   156f2:	f103 0302 	add.w	r3, r3, #2
   156f6:	d104      	bne.n	15702 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   156f8:	2300      	movs	r3, #0
   156fa:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   156fe:	4807      	ldr	r0, [pc, #28]	; (1571c <bt_hex+0x3c>)
   15700:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15702:	7802      	ldrb	r2, [r0, #0]
   15704:	0912      	lsrs	r2, r2, #4
   15706:	5ca2      	ldrb	r2, [r4, r2]
   15708:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1570c:	f810 2b01 	ldrb.w	r2, [r0], #1
   15710:	f002 020f 	and.w	r2, r2, #15
   15714:	5ca2      	ldrb	r2, [r4, r2]
   15716:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1571a:	e7e9      	b.n	156f0 <bt_hex+0x10>
   1571c:	20004178 	.word	0x20004178
   15720:	0003056f 	.word	0x0003056f

00015724 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15724:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15726:	7803      	ldrb	r3, [r0, #0]
   15728:	b08b      	sub	sp, #44	; 0x2c
   1572a:	4604      	mov	r4, r0
   1572c:	ad07      	add	r5, sp, #28
   1572e:	2b03      	cmp	r3, #3
   15730:	d821      	bhi.n	15776 <bt_addr_le_str+0x52>
   15732:	e8df f003 	tbb	[pc, r3]
   15736:	1a02      	.short	0x1a02
   15738:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1573a:	4912      	ldr	r1, [pc, #72]	; (15784 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   1573c:	4628      	mov	r0, r5
   1573e:	f015 fbf9 	bl	2af34 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15742:	9505      	str	r5, [sp, #20]
   15744:	7863      	ldrb	r3, [r4, #1]
   15746:	9304      	str	r3, [sp, #16]
   15748:	78a3      	ldrb	r3, [r4, #2]
   1574a:	9303      	str	r3, [sp, #12]
   1574c:	78e3      	ldrb	r3, [r4, #3]
   1574e:	9302      	str	r3, [sp, #8]
   15750:	7923      	ldrb	r3, [r4, #4]
   15752:	9301      	str	r3, [sp, #4]
   15754:	7963      	ldrb	r3, [r4, #5]
   15756:	9300      	str	r3, [sp, #0]
   15758:	79a3      	ldrb	r3, [r4, #6]
   1575a:	4a0b      	ldr	r2, [pc, #44]	; (15788 <bt_addr_le_str+0x64>)
   1575c:	480b      	ldr	r0, [pc, #44]	; (1578c <bt_addr_le_str+0x68>)
   1575e:	211e      	movs	r1, #30
   15760:	f014 fa78 	bl	29c54 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15764:	4809      	ldr	r0, [pc, #36]	; (1578c <bt_addr_le_str+0x68>)
   15766:	b00b      	add	sp, #44	; 0x2c
   15768:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1576a:	4909      	ldr	r1, [pc, #36]	; (15790 <bt_addr_le_str+0x6c>)
   1576c:	e7e6      	b.n	1573c <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   1576e:	4909      	ldr	r1, [pc, #36]	; (15794 <bt_addr_le_str+0x70>)
   15770:	e7e4      	b.n	1573c <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   15772:	4909      	ldr	r1, [pc, #36]	; (15798 <bt_addr_le_str+0x74>)
   15774:	e7e2      	b.n	1573c <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   15776:	4a09      	ldr	r2, [pc, #36]	; (1579c <bt_addr_le_str+0x78>)
   15778:	210a      	movs	r1, #10
   1577a:	4628      	mov	r0, r5
   1577c:	f014 fa6a 	bl	29c54 <snprintk>
		break;
   15780:	e7df      	b.n	15742 <bt_addr_le_str+0x1e>
   15782:	bf00      	nop
   15784:	0002f681 	.word	0x0002f681
   15788:	0002f6aa 	.word	0x0002f6aa
   1578c:	2000415a 	.word	0x2000415a
   15790:	0002f688 	.word	0x0002f688
   15794:	0002f68f 	.word	0x0002f68f
   15798:	0002f699 	.word	0x0002f699
   1579c:	0002f6a3 	.word	0x0002f6a3

000157a0 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   157a0:	b510      	push	{r4, lr}
	int err;
	LOG_INF("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   157a2:	4c10      	ldr	r4, [pc, #64]	; (157e4 <save_id+0x44>)
	LOG_INF("Saving ID");
   157a4:	4810      	ldr	r0, [pc, #64]	; (157e8 <save_id+0x48>)
   157a6:	2149      	movs	r1, #73	; 0x49
   157a8:	f014 fc5d 	bl	2a066 <z_log_minimal_printk>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   157ac:	79e2      	ldrb	r2, [r4, #7]
   157ae:	480f      	ldr	r0, [pc, #60]	; (157ec <save_id+0x4c>)
   157b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   157b4:	4621      	mov	r1, r4
   157b6:	f7fe f865 	bl	13884 <settings_save_one>
	if (err) {
   157ba:	4602      	mov	r2, r0
   157bc:	b118      	cbz	r0, 157c6 <save_id+0x26>
		LOG_ERR("Failed to save ID (err %d)", err);
   157be:	480c      	ldr	r0, [pc, #48]	; (157f0 <save_id+0x50>)
   157c0:	2145      	movs	r1, #69	; 0x45
   157c2:	f014 fc50 	bl	2a066 <z_log_minimal_printk>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
   157c6:	79e2      	ldrb	r2, [r4, #7]
   157c8:	490a      	ldr	r1, [pc, #40]	; (157f4 <save_id+0x54>)
   157ca:	480b      	ldr	r0, [pc, #44]	; (157f8 <save_id+0x58>)
   157cc:	0112      	lsls	r2, r2, #4
   157ce:	f7fe f859 	bl	13884 <settings_save_one>
	if (err) {
   157d2:	4602      	mov	r2, r0
   157d4:	b128      	cbz	r0, 157e2 <save_id+0x42>
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   157d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to save IRK (err %d)", err);
   157da:	4808      	ldr	r0, [pc, #32]	; (157fc <save_id+0x5c>)
   157dc:	2145      	movs	r1, #69	; 0x45
   157de:	f014 bc42 	b.w	2a066 <z_log_minimal_printk>
}
   157e2:	bd10      	pop	{r4, pc}
   157e4:	20000378 	.word	0x20000378
   157e8:	00030587 	.word	0x00030587
   157ec:	00030596 	.word	0x00030596
   157f0:	0003059c 	.word	0x0003059c
   157f4:	200004dc 	.word	0x200004dc
   157f8:	000305bc 	.word	0x000305bc
   157fc:	000305c3 	.word	0x000305c3

00015800 <set_setting>:
{
   15800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15804:	4c2f      	ldr	r4, [pc, #188]	; (158c4 <set_setting+0xc4>)
   15806:	f3bf 8f5b 	dmb	ish
   1580a:	461f      	mov	r7, r3
   1580c:	6823      	ldr	r3, [r4, #0]
   1580e:	f3bf 8f5b 	dmb	ish
   15812:	4616      	mov	r6, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15814:	07da      	lsls	r2, r3, #31
{
   15816:	4605      	mov	r5, r0
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   15818:	d51e      	bpl.n	15858 <set_setting+0x58>
	if (!name) {
   1581a:	b930      	cbnz	r0, 1582a <set_setting+0x2a>
		LOG_ERR("Insufficient number of arguments");
   1581c:	482a      	ldr	r0, [pc, #168]	; (158c8 <set_setting+0xc8>)
   1581e:	2145      	movs	r1, #69	; 0x45
   15820:	f014 fc21 	bl	2a066 <z_log_minimal_printk>
		return -ENOENT;
   15824:	f06f 0001 	mvn.w	r0, #1
   15828:	e017      	b.n	1585a <set_setting+0x5a>
	len = settings_name_next(name, &next);
   1582a:	a901      	add	r1, sp, #4
   1582c:	f014 fec7 	bl	2a5be <settings_name_next>
	if (!strncmp(name, "id", len)) {
   15830:	4926      	ldr	r1, [pc, #152]	; (158cc <set_setting+0xcc>)
	len = settings_name_next(name, &next);
   15832:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
   15834:	4602      	mov	r2, r0
   15836:	4628      	mov	r0, r5
   15838:	f015 fba2 	bl	2af80 <strncmp>
   1583c:	bb38      	cbnz	r0, 1588e <set_setting+0x8e>
   1583e:	f3bf 8f5b 	dmb	ish
   15842:	6823      	ldr	r3, [r4, #0]
   15844:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   15848:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1584c:	071b      	lsls	r3, r3, #28
   1584e:	d507      	bpl.n	15860 <set_setting+0x60>
			LOG_WRN("Ignoring identities stored in flash");
   15850:	481f      	ldr	r0, [pc, #124]	; (158d0 <set_setting+0xd0>)
   15852:	2157      	movs	r1, #87	; 0x57
   15854:	f014 fc07 	bl	2a066 <z_log_minimal_printk>
		return 0;
   15858:	2000      	movs	r0, #0
}
   1585a:	b002      	add	sp, #8
   1585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   15860:	3ccc      	subs	r4, #204	; 0xcc
   15862:	2207      	movs	r2, #7
   15864:	4621      	mov	r1, r4
   15866:	4638      	mov	r0, r7
   15868:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1586a:	2806      	cmp	r0, #6
   1586c:	d80a      	bhi.n	15884 <set_setting+0x84>
				LOG_ERR("Invalid length ID address in storage");
   1586e:	4819      	ldr	r0, [pc, #100]	; (158d4 <set_setting+0xd4>)
   15870:	2145      	movs	r1, #69	; 0x45
   15872:	f014 fbf8 	bl	2a066 <z_log_minimal_printk>
			(void)memset(bt_dev.id_addr, 0,
   15876:	2207      	movs	r2, #7
   15878:	4629      	mov	r1, r5
   1587a:	4620      	mov	r0, r4
   1587c:	f015 fbc6 	bl	2b00c <memset>
			bt_dev.id_count = 0U;
   15880:	71e5      	strb	r5, [r4, #7]
   15882:	e7e9      	b.n	15858 <set_setting+0x58>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   15884:	2307      	movs	r3, #7
   15886:	fbb0 f0f3 	udiv	r0, r0, r3
   1588a:	71e0      	strb	r0, [r4, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1588c:	e7e4      	b.n	15858 <set_setting+0x58>
	if (!strncmp(name, "irk", len)) {
   1588e:	4628      	mov	r0, r5
   15890:	4911      	ldr	r1, [pc, #68]	; (158d8 <set_setting+0xd8>)
   15892:	4642      	mov	r2, r8
   15894:	f015 fb74 	bl	2af80 <strncmp>
   15898:	4605      	mov	r5, r0
   1589a:	2800      	cmp	r0, #0
   1589c:	d1c2      	bne.n	15824 <set_setting+0x24>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
   1589e:	2210      	movs	r2, #16
   158a0:	f104 0198 	add.w	r1, r4, #152	; 0x98
   158a4:	4638      	mov	r0, r7
   158a6:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
   158a8:	280f      	cmp	r0, #15
   158aa:	d8d5      	bhi.n	15858 <set_setting+0x58>
				LOG_ERR("Invalid length IRK in storage");
   158ac:	480b      	ldr	r0, [pc, #44]	; (158dc <set_setting+0xdc>)
   158ae:	2145      	movs	r1, #69	; 0x45
   158b0:	f014 fbd9 	bl	2a066 <z_log_minimal_printk>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
   158b4:	2210      	movs	r2, #16
   158b6:	4629      	mov	r1, r5
   158b8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   158bc:	f015 fba6 	bl	2b00c <memset>
   158c0:	e7ca      	b.n	15858 <set_setting+0x58>
   158c2:	bf00      	nop
   158c4:	20000444 	.word	0x20000444
   158c8:	000305e4 	.word	0x000305e4
   158cc:	0002f696 	.word	0x0002f696
   158d0:	0003060a 	.word	0x0003060a
   158d4:	00030633 	.word	0x00030633
   158d8:	000305bf 	.word	0x000305bf
   158dc:	0003065d 	.word	0x0003065d

000158e0 <bt_settings_encode_key>:
{
   158e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158e4:	b088      	sub	sp, #32
		snprintk(path, path_size,
   158e6:	799c      	ldrb	r4, [r3, #6]
{
   158e8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
   158ec:	795d      	ldrb	r5, [r3, #5]
   158ee:	791e      	ldrb	r6, [r3, #4]
   158f0:	78df      	ldrb	r7, [r3, #3]
   158f2:	f893 c002 	ldrb.w	ip, [r3, #2]
   158f6:	f893 e001 	ldrb.w	lr, [r3, #1]
   158fa:	781b      	ldrb	r3, [r3, #0]
	if (key) {
   158fc:	f1b8 0f00 	cmp.w	r8, #0
   15900:	d00e      	beq.n	15920 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
   15902:	e9cd 3806 	strd	r3, r8, [sp, #24]
   15906:	e9cd ce04 	strd	ip, lr, [sp, #16]
   1590a:	4613      	mov	r3, r2
   1590c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   15910:	e9cd 4500 	strd	r4, r5, [sp]
   15914:	4a08      	ldr	r2, [pc, #32]	; (15938 <bt_settings_encode_key+0x58>)
   15916:	f014 f99d 	bl	29c54 <snprintk>
}
   1591a:	b008      	add	sp, #32
   1591c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
   15920:	e9cd e305 	strd	lr, r3, [sp, #20]
   15924:	e9cd 7c03 	strd	r7, ip, [sp, #12]
   15928:	4613      	mov	r3, r2
   1592a:	e9cd 5601 	strd	r5, r6, [sp, #4]
   1592e:	4a03      	ldr	r2, [pc, #12]	; (1593c <bt_settings_encode_key+0x5c>)
   15930:	9400      	str	r4, [sp, #0]
   15932:	f014 f98f 	bl	29c54 <snprintk>
}
   15936:	e7f0      	b.n	1591a <bt_settings_encode_key+0x3a>
   15938:	00030680 	.word	0x00030680
   1593c:	000306a4 	.word	0x000306a4

00015940 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
   15940:	4801      	ldr	r0, [pc, #4]	; (15948 <bt_settings_save_id+0x8>)
   15942:	f00f b8dd 	b.w	24b00 <k_work_submit>
   15946:	bf00      	nop
   15948:	20000590 	.word	0x20000590

0001594c <commit_settings>:
}

static int commit_settings(void)
{
   1594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1594e:	4d1d      	ldr	r5, [pc, #116]	; (159c4 <commit_settings+0x78>)
   15950:	f3bf 8f5b 	dmb	ish
   15954:	682b      	ldr	r3, [r5, #0]
   15956:	f3bf 8f5b 	dmb	ish
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1595a:	f013 0f01 	tst.w	r3, #1
   1595e:	462e      	mov	r6, r5
   15960:	d02e      	beq.n	159c0 <commit_settings+0x74>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   15962:	f815 3cc5 	ldrb.w	r3, [r5, #-197]
   15966:	f1a5 07cc 	sub.w	r7, r5, #204	; 0xcc
   1596a:	b983      	cbnz	r3, 1598e <commit_settings+0x42>
		err = bt_setup_public_id_addr();
   1596c:	f001 ff16 	bl	1779c <bt_setup_public_id_addr>
		if (err) {
   15970:	4604      	mov	r4, r0
   15972:	b128      	cbz	r0, 15980 <commit_settings+0x34>
	}

	if (!bt_dev.id_count) {
		err = bt_setup_random_id_addr();
		if (err) {
			LOG_ERR("Unable to setup an identity address");
   15974:	4814      	ldr	r0, [pc, #80]	; (159c8 <commit_settings+0x7c>)
   15976:	2145      	movs	r1, #69	; 0x45
   15978:	f014 fb75 	bl	2a066 <z_log_minimal_printk>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
   1597c:	4620      	mov	r0, r4
   1597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_dev.id_count) {
   15980:	79fb      	ldrb	r3, [r7, #7]
   15982:	b923      	cbnz	r3, 1598e <commit_settings+0x42>
		err = bt_setup_random_id_addr();
   15984:	f001 ff8c 	bl	178a0 <bt_setup_random_id_addr>
		if (err) {
   15988:	4604      	mov	r4, r0
   1598a:	2800      	cmp	r0, #0
   1598c:	d1f2      	bne.n	15974 <commit_settings+0x28>
   1598e:	f3bf 8f5b 	dmb	ish
   15992:	682b      	ldr	r3, [r5, #0]
   15994:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15998:	075a      	lsls	r2, r3, #29
   1599a:	d401      	bmi.n	159a0 <commit_settings+0x54>
		bt_finalize_init();
   1599c:	f001 f9d0 	bl	16d40 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   159a0:	f3bf 8f5b 	dmb	ish
   159a4:	e856 3f00 	ldrex	r3, [r6]
   159a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
   159ac:	e846 2100 	strex	r1, r2, [r6]
   159b0:	2900      	cmp	r1, #0
   159b2:	d1f7      	bne.n	159a4 <commit_settings+0x58>
   159b4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   159b8:	03db      	lsls	r3, r3, #15
   159ba:	d501      	bpl.n	159c0 <commit_settings+0x74>
		bt_settings_save_id();
   159bc:	f7ff ffc0 	bl	15940 <bt_settings_save_id>
		return 0;
   159c0:	2400      	movs	r4, #0
   159c2:	e7db      	b.n	1597c <commit_settings+0x30>
   159c4:	20000444 	.word	0x20000444
   159c8:	000306c5 	.word	0x000306c5

000159cc <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   159cc:	b510      	push	{r4, lr}
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   159ce:	f7fe f8c9 	bl	13b64 <settings_subsys_init>
	if (err) {
   159d2:	4604      	mov	r4, r0
   159d4:	b120      	cbz	r0, 159e0 <bt_settings_init+0x14>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   159d6:	4602      	mov	r2, r0
   159d8:	2145      	movs	r1, #69	; 0x45
   159da:	4802      	ldr	r0, [pc, #8]	; (159e4 <bt_settings_init+0x18>)
   159dc:	f014 fb43 	bl	2a066 <z_log_minimal_printk>
		return err;
	}

	return 0;
}
   159e0:	4620      	mov	r0, r4
   159e2:	bd10      	pop	{r4, pc}
   159e4:	000306ee 	.word	0x000306ee

000159e8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   159e8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   159ea:	4d0a      	ldr	r5, [pc, #40]	; (15a14 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159ec:	4b0a      	ldr	r3, [pc, #40]	; (15a18 <long_wq_init+0x30>)
{
   159ee:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159f0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   159f2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159f4:	9302      	str	r3, [sp, #8]
   159f6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   159f8:	f00f f888 	bl	24b0c <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   159fc:	ab02      	add	r3, sp, #8
   159fe:	9300      	str	r3, [sp, #0]
   15a00:	4628      	mov	r0, r5
   15a02:	4906      	ldr	r1, [pc, #24]	; (15a1c <long_wq_init+0x34>)
   15a04:	230a      	movs	r3, #10
   15a06:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   15a0a:	f00f f895 	bl	24b38 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   15a0e:	4620      	mov	r0, r4
   15a10:	b005      	add	sp, #20
   15a12:	bd30      	pop	{r4, r5, pc}
   15a14:	20001ab0 	.word	0x20001ab0
   15a18:	00030727 	.word	0x00030727
   15a1c:	20004bc0 	.word	0x20004bc0

00015a20 <bt_long_wq_schedule>:
{
   15a20:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15a22:	4801      	ldr	r0, [pc, #4]	; (15a28 <bt_long_wq_schedule+0x8>)
   15a24:	f00f b90e 	b.w	24c44 <k_work_schedule_for_queue>
   15a28:	20001ab0 	.word	0x20001ab0

00015a2c <bt_long_wq_reschedule>:
{
   15a2c:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   15a2e:	4801      	ldr	r0, [pc, #4]	; (15a34 <bt_long_wq_reschedule+0x8>)
   15a30:	f00f b96e 	b.w	24d10 <k_work_reschedule_for_queue>
   15a34:	20001ab0 	.word	0x20001ab0

00015a38 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15a38:	b430      	push	{r4, r5}
   15a3a:	4603      	mov	r3, r0
   15a3c:	4608      	mov	r0, r1
	switch (src->type) {
   15a3e:	781a      	ldrb	r2, [r3, #0]
   15a40:	2a01      	cmp	r2, #1
   15a42:	d013      	beq.n	15a6c <uuid_to_uuid128+0x34>
   15a44:	2a02      	cmp	r2, #2
   15a46:	d026      	beq.n	15a96 <uuid_to_uuid128+0x5e>
   15a48:	b972      	cbnz	r2, 15a68 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15a4a:	4a15      	ldr	r2, [pc, #84]	; (15aa0 <uuid_to_uuid128+0x68>)
   15a4c:	f102 0410 	add.w	r4, r2, #16
   15a50:	f852 5b04 	ldr.w	r5, [r2], #4
   15a54:	f841 5b04 	str.w	r5, [r1], #4
   15a58:	42a2      	cmp	r2, r4
   15a5a:	d1f9      	bne.n	15a50 <uuid_to_uuid128+0x18>
   15a5c:	7812      	ldrb	r2, [r2, #0]
   15a5e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15a60:	885b      	ldrh	r3, [r3, #2]
	dst[0] = val;
   15a62:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15a64:	0a1b      	lsrs	r3, r3, #8
   15a66:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15a68:	bc30      	pop	{r4, r5}
   15a6a:	4770      	bx	lr
		*dst = uuid128_base;
   15a6c:	4a0c      	ldr	r2, [pc, #48]	; (15aa0 <uuid_to_uuid128+0x68>)
   15a6e:	f102 0410 	add.w	r4, r2, #16
   15a72:	f852 5b04 	ldr.w	r5, [r2], #4
   15a76:	f841 5b04 	str.w	r5, [r1], #4
   15a7a:	42a2      	cmp	r2, r4
   15a7c:	d1f9      	bne.n	15a72 <uuid_to_uuid128+0x3a>
   15a7e:	7812      	ldrb	r2, [r2, #0]
   15a80:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15a82:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15a84:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15a86:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   15a8a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15a8c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15a8e:	0a1b      	lsrs	r3, r3, #8
   15a90:	7382      	strb	r2, [r0, #14]
   15a92:	7403      	strb	r3, [r0, #16]
}
   15a94:	e7e8      	b.n	15a68 <uuid_to_uuid128+0x30>
}
   15a96:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15a98:	2211      	movs	r2, #17
   15a9a:	4619      	mov	r1, r3
   15a9c:	f015 baab 	b.w	2aff6 <memcpy>
   15aa0:	00030730 	.word	0x00030730

00015aa4 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15aa4:	2805      	cmp	r0, #5
{
   15aa6:	b538      	push	{r3, r4, r5, lr}
   15aa8:	4605      	mov	r5, r0
   15aaa:	d803      	bhi.n	15ab4 <bt_buf_get_rx+0x10>
   15aac:	212a      	movs	r1, #42	; 0x2a
   15aae:	40c1      	lsrs	r1, r0
   15ab0:	07c9      	lsls	r1, r1, #31
   15ab2:	d408      	bmi.n	15ac6 <bt_buf_get_rx+0x22>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15ab4:	490a      	ldr	r1, [pc, #40]	; (15ae0 <bt_buf_get_rx+0x3c>)
   15ab6:	480b      	ldr	r0, [pc, #44]	; (15ae4 <bt_buf_get_rx+0x40>)
   15ab8:	223d      	movs	r2, #61	; 0x3d
   15aba:	f014 fac6 	bl	2a04a <assert_print>
   15abe:	4808      	ldr	r0, [pc, #32]	; (15ae0 <bt_buf_get_rx+0x3c>)
   15ac0:	213d      	movs	r1, #61	; 0x3d
   15ac2:	f014 fabb 	bl	2a03c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   15ac6:	4808      	ldr	r0, [pc, #32]	; (15ae8 <bt_buf_get_rx+0x44>)
   15ac8:	f017 fc84 	bl	2d3d4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15acc:	4604      	mov	r4, r0
   15ace:	b120      	cbz	r0, 15ada <bt_buf_get_rx+0x36>
	net_buf_simple_reserve(&buf->b, reserve);
   15ad0:	2100      	movs	r1, #0
   15ad2:	300c      	adds	r0, #12
   15ad4:	f009 f8ec 	bl	1ecb0 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15ad8:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15ada:	4620      	mov	r0, r4
   15adc:	bd38      	pop	{r3, r4, r5, pc}
   15ade:	bf00      	nop
   15ae0:	00030741 	.word	0x00030741
   15ae4:	0002f2b5 	.word	0x0002f2b5
   15ae8:	20000ac4 	.word	0x20000ac4

00015aec <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15aec:	b510      	push	{r4, lr}
   15aee:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   15af0:	490a      	ldr	r1, [pc, #40]	; (15b1c <bt_buf_get_cmd_complete+0x30>)
{
   15af2:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   15af4:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
   15af8:	b920      	cbnz	r0, 15b04 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15afe:	2001      	movs	r0, #1
   15b00:	f7ff bfd0 	b.w	15aa4 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   15b04:	f009 f9ee 	bl	1eee4 <net_buf_ref>
   15b08:	2301      	movs	r3, #1
		buf->len = 0U;
   15b0a:	2100      	movs	r1, #0
   15b0c:	7603      	strb	r3, [r0, #24]
   15b0e:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   15b10:	4604      	mov	r4, r0
   15b12:	300c      	adds	r0, #12
   15b14:	f009 f8cc 	bl	1ecb0 <net_buf_simple_reserve>
}
   15b18:	4620      	mov	r0, r4
   15b1a:	bd10      	pop	{r4, pc}
   15b1c:	20000378 	.word	0x20000378

00015b20 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15b20:	b570      	push	{r4, r5, r6, lr}
   15b22:	4604      	mov	r4, r0
	switch (evt) {
   15b24:	2c0f      	cmp	r4, #15
{
   15b26:	460d      	mov	r5, r1
   15b28:	4610      	mov	r0, r2
   15b2a:	4619      	mov	r1, r3
	switch (evt) {
   15b2c:	d805      	bhi.n	15b3a <bt_buf_get_evt+0x1a>
   15b2e:	2c0d      	cmp	r4, #13
   15b30:	d90d      	bls.n	15b4e <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15b36:	f7ff bfd9 	b.w	15aec <bt_buf_get_cmd_complete>
	switch (evt) {
   15b3a:	2c13      	cmp	r4, #19
   15b3c:	d107      	bne.n	15b4e <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15b3e:	480c      	ldr	r0, [pc, #48]	; (15b70 <bt_buf_get_evt+0x50>)
   15b40:	f017 fc48 	bl	2d3d4 <net_buf_alloc_fixed>
			if (buf) {
   15b44:	4604      	mov	r4, r0
   15b46:	b938      	cbnz	r0, 15b58 <bt_buf_get_evt+0x38>
{
   15b48:	2400      	movs	r4, #0
}
   15b4a:	4620      	mov	r0, r4
   15b4c:	bd70      	pop	{r4, r5, r6, pc}
   15b4e:	4602      	mov	r2, r0
   15b50:	460b      	mov	r3, r1
		if (discardable) {
   15b52:	b145      	cbz	r5, 15b66 <bt_buf_get_evt+0x46>
   15b54:	4807      	ldr	r0, [pc, #28]	; (15b74 <bt_buf_get_evt+0x54>)
   15b56:	e7f3      	b.n	15b40 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15b58:	2100      	movs	r1, #0
   15b5a:	300c      	adds	r0, #12
   15b5c:	f009 f8a8 	bl	1ecb0 <net_buf_simple_reserve>
   15b60:	2301      	movs	r3, #1
   15b62:	7623      	strb	r3, [r4, #24]
}
   15b64:	e7f1      	b.n	15b4a <bt_buf_get_evt+0x2a>
}
   15b66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15b6a:	2001      	movs	r0, #1
   15b6c:	f7ff bf9a 	b.w	15aa4 <bt_buf_get_rx>
   15b70:	20000af8 	.word	0x20000af8
   15b74:	20000a28 	.word	0x20000a28

00015b78 <ver_str>:
{
   15b78:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15b7a:	4d0b      	ldr	r5, [pc, #44]	; (15ba8 <ver_str+0x30>)
{
   15b7c:	4606      	mov	r6, r0
	const char * const str[] = {
   15b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15b80:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15b82:	ac01      	add	r4, sp, #4
   15b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
   15b8e:	2e0c      	cmp	r6, #12
	const char * const str[] = {
   15b90:	682b      	ldr	r3, [r5, #0]
   15b92:	6023      	str	r3, [r4, #0]
		return str[ver];
   15b94:	bf9b      	ittet	ls
   15b96:	ab0e      	addls	r3, sp, #56	; 0x38
   15b98:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
   15b9c:	4803      	ldrhi	r0, [pc, #12]	; (15bac <ver_str+0x34>)
		return str[ver];
   15b9e:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
   15ba2:	b00e      	add	sp, #56	; 0x38
   15ba4:	bd70      	pop	{r4, r5, r6, pc}
   15ba6:	bf00      	nop
   15ba8:	0002e6bc 	.word	0x0002e6bc
   15bac:	00030770 	.word	0x00030770

00015bb0 <hci_data_buf_overflow>:
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15bb0:	68c3      	ldr	r3, [r0, #12]
   15bb2:	4802      	ldr	r0, [pc, #8]	; (15bbc <hci_data_buf_overflow+0xc>)
   15bb4:	781a      	ldrb	r2, [r3, #0]
   15bb6:	2157      	movs	r1, #87	; 0x57
   15bb8:	f014 ba55 	b.w	2a066 <z_log_minimal_printk>
   15bbc:	00030778 	.word	0x00030778

00015bc0 <hci_disconn_complete_prio>:
{
   15bc0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15bc2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15bc4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15bc8:	781b      	ldrb	r3, [r3, #0]
   15bca:	b963      	cbnz	r3, 15be6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15bcc:	4620      	mov	r0, r4
   15bce:	f002 fd7f 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15bd2:	4605      	mov	r5, r0
   15bd4:	b940      	cbnz	r0, 15be8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15bd6:	4b08      	ldr	r3, [pc, #32]	; (15bf8 <hci_disconn_complete_prio+0x38>)
   15bd8:	881a      	ldrh	r2, [r3, #0]
   15bda:	b922      	cbnz	r2, 15be6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15bdc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15be0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15be4:	8018      	strh	r0, [r3, #0]
}
   15be6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15be8:	2101      	movs	r1, #1
   15bea:	f002 fd79 	bl	186e0 <bt_conn_set_state>
	bt_conn_unref(conn);
   15bee:	4628      	mov	r0, r5
}
   15bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15bf4:	f002 bd4c 	b.w	18690 <bt_conn_unref>
   15bf8:	2000413c 	.word	0x2000413c

00015bfc <le_phy_update_complete>:
{
   15bfc:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15bfe:	68c3      	ldr	r3, [r0, #12]
   15c00:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   15c04:	4620      	mov	r0, r4
   15c06:	f002 fd63 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15c0a:	b930      	cbnz	r0, 15c1a <le_phy_update_complete+0x1e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c0c:	4622      	mov	r2, r4
   15c0e:	4805      	ldr	r0, [pc, #20]	; (15c24 <le_phy_update_complete+0x28>)
}
   15c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c14:	2145      	movs	r1, #69	; 0x45
   15c16:	f014 ba26 	b.w	2a066 <z_log_minimal_printk>
}
   15c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15c1e:	f002 bd37 	b.w	18690 <bt_conn_unref>
   15c22:	bf00      	nop
   15c24:	000307a5 	.word	0x000307a5

00015c28 <le_data_len_change>:
{
   15c28:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15c2a:	68c3      	ldr	r3, [r0, #12]
   15c2c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   15c2e:	4620      	mov	r0, r4
   15c30:	f002 fd4e 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15c34:	b930      	cbnz	r0, 15c44 <le_data_len_change+0x1c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c36:	4622      	mov	r2, r4
   15c38:	4804      	ldr	r0, [pc, #16]	; (15c4c <le_data_len_change+0x24>)
}
   15c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15c3e:	2145      	movs	r1, #69	; 0x45
   15c40:	f014 ba11 	b.w	2a066 <z_log_minimal_printk>
}
   15c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   15c48:	f002 bd22 	b.w	18690 <bt_conn_unref>
   15c4c:	000307a5 	.word	0x000307a5

00015c50 <hci_hardware_error>:
{
   15c50:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15c52:	2101      	movs	r1, #1
   15c54:	300c      	adds	r0, #12
   15c56:	f009 f9ef 	bl	1f038 <net_buf_simple_pull_mem>
}
   15c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15c5e:	7802      	ldrb	r2, [r0, #0]
   15c60:	4801      	ldr	r0, [pc, #4]	; (15c68 <hci_hardware_error+0x18>)
   15c62:	2145      	movs	r1, #69	; 0x45
   15c64:	f014 b9ff 	b.w	2a066 <z_log_minimal_printk>
   15c68:	000307ce 	.word	0x000307ce

00015c6c <rx_queue_put>:
{
   15c6c:	4601      	mov	r1, r0
   15c6e:	b508      	push	{r3, lr}
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15c70:	4807      	ldr	r0, [pc, #28]	; (15c90 <rx_queue_put+0x24>)
   15c72:	f009 f83d 	bl	1ecf0 <net_buf_slist_put>
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15c76:	4907      	ldr	r1, [pc, #28]	; (15c94 <rx_queue_put+0x28>)
   15c78:	4807      	ldr	r0, [pc, #28]	; (15c98 <rx_queue_put+0x2c>)
   15c7a:	f018 f8fd 	bl	2de78 <k_work_submit_to_queue>
	if (err < 0) {
   15c7e:	1e02      	subs	r2, r0, #0
   15c80:	da05      	bge.n	15c8e <rx_queue_put+0x22>
}
   15c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Could not submit rx_work: %d", err);
   15c86:	4805      	ldr	r0, [pc, #20]	; (15c9c <rx_queue_put+0x30>)
   15c88:	2145      	movs	r1, #69	; 0x45
   15c8a:	f014 b9ec 	b.w	2a066 <z_log_minimal_printk>
}
   15c8e:	bd08      	pop	{r3, pc}
   15c90:	200004b4 	.word	0x200004b4
   15c94:	200005dc 	.word	0x200005dc
   15c98:	20001bd0 	.word	0x20001bd0
   15c9c:	000307f5 	.word	0x000307f5

00015ca0 <le_conn_update_complete>:
{
   15ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   15ca2:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   15ca4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15ca8:	4630      	mov	r0, r6
   15caa:	f002 fd11 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15cae:	4604      	mov	r4, r0
   15cb0:	b938      	cbnz	r0, 15cc2 <le_conn_update_complete+0x22>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15cb2:	481b      	ldr	r0, [pc, #108]	; (15d20 <le_conn_update_complete+0x80>)
   15cb4:	4632      	mov	r2, r6
   15cb6:	2145      	movs	r1, #69	; 0x45
}
   15cb8:	b002      	add	sp, #8
   15cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15cbe:	f014 b9d2 	b.w	2a066 <z_log_minimal_printk>
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   15cc2:	782b      	ldrb	r3, [r5, #0]
   15cc4:	2b1a      	cmp	r3, #26
   15cc6:	d119      	bne.n	15cfc <le_conn_update_complete+0x5c>
   15cc8:	78c3      	ldrb	r3, [r0, #3]
   15cca:	2b01      	cmp	r3, #1
   15ccc:	d124      	bne.n	15d18 <le_conn_update_complete+0x78>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   15cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
   15cd2:	3004      	adds	r0, #4
   15cd4:	f015 faa8 	bl	2b228 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   15cd8:	0543      	lsls	r3, r0, #21
   15cda:	d40f      	bmi.n	15cfc <le_conn_update_complete+0x5c>
		param.interval_min = conn->le.interval_min;
   15cdc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   15ce0:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   15ce2:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   15ce4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   15ce8:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   15cea:	4620      	mov	r0, r4
   15cec:	f003 fbbc 	bl	19468 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   15cf0:	4620      	mov	r0, r4
}
   15cf2:	b002      	add	sp, #8
   15cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15cf8:	f002 bcca 	b.w	18690 <bt_conn_unref>
		if (!evt->status) {
   15cfc:	782b      	ldrb	r3, [r5, #0]
   15cfe:	b95b      	cbnz	r3, 15d18 <le_conn_update_complete+0x78>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   15d00:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   15d04:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   15d08:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   15d0c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   15d10:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   15d14:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
		notify_le_param_updated(conn);
   15d18:	4620      	mov	r0, r4
   15d1a:	f002 fe2f 	bl	1897c <notify_le_param_updated>
   15d1e:	e7e7      	b.n	15cf0 <le_conn_update_complete+0x50>
   15d20:	000307a5 	.word	0x000307a5

00015d24 <handle_event>:
{
   15d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15d26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15d2a:	4605      	mov	r5, r0
   15d2c:	4614      	mov	r4, r2
   15d2e:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   15d30:	429c      	cmp	r4, r3
   15d32:	d10d      	bne.n	15d50 <handle_event+0x2c>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15d34:	8a04      	ldrh	r4, [r0, #16]
   15d36:	68c0      	ldr	r0, [r0, #12]
   15d38:	4621      	mov	r1, r4
   15d3a:	f7ff fcd1 	bl	156e0 <bt_hex>
   15d3e:	4623      	mov	r3, r4
   15d40:	9000      	str	r0, [sp, #0]
   15d42:	462a      	mov	r2, r5
   15d44:	480e      	ldr	r0, [pc, #56]	; (15d80 <handle_event+0x5c>)
   15d46:	2157      	movs	r1, #87	; 0x57
   15d48:	f014 f98d 	bl	2a066 <z_log_minimal_printk>
}
   15d4c:	b003      	add	sp, #12
   15d4e:	bd30      	pop	{r4, r5, pc}
		if (handler->event != event) {
   15d50:	4622      	mov	r2, r4
   15d52:	f812 1b08 	ldrb.w	r1, [r2], #8
   15d56:	42a9      	cmp	r1, r5
   15d58:	d110      	bne.n	15d7c <handle_event+0x58>
		if (buf->len < handler->min_len) {
   15d5a:	8a02      	ldrh	r2, [r0, #16]
   15d5c:	7863      	ldrb	r3, [r4, #1]
   15d5e:	4293      	cmp	r3, r2
   15d60:	d907      	bls.n	15d72 <handle_event+0x4e>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   15d62:	4808      	ldr	r0, [pc, #32]	; (15d84 <handle_event+0x60>)
   15d64:	462b      	mov	r3, r5
   15d66:	2145      	movs	r1, #69	; 0x45
}
   15d68:	b003      	add	sp, #12
   15d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   15d6e:	f014 b97a 	b.w	2a066 <z_log_minimal_printk>
		handler->handler(buf);
   15d72:	6863      	ldr	r3, [r4, #4]
}
   15d74:	b003      	add	sp, #12
   15d76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   15d7a:	4718      	bx	r3
   15d7c:	4614      	mov	r4, r2
   15d7e:	e7d7      	b.n	15d30 <handle_event+0xc>
   15d80:	0003083e 	.word	0x0003083e
   15d84:	00030817 	.word	0x00030817

00015d88 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   15d88:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15d8a:	4844      	ldr	r0, [pc, #272]	; (15e9c <rx_work_handler+0x114>)
   15d8c:	f009 f802 	bl	1ed94 <net_buf_slist_get>
	if (!buf) {
   15d90:	4604      	mov	r4, r0
   15d92:	2800      	cmp	r0, #0
   15d94:	f000 8081 	beq.w	15e9a <rx_work_handler+0x112>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15d98:	7e02      	ldrb	r2, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   15d9a:	2a01      	cmp	r2, #1
   15d9c:	d04d      	beq.n	15e3a <rx_work_handler+0xb2>
   15d9e:	2a03      	cmp	r2, #3
   15da0:	d178      	bne.n	15e94 <rx_work_handler+0x10c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15da2:	8a03      	ldrh	r3, [r0, #16]
   15da4:	2b03      	cmp	r3, #3
   15da6:	d80b      	bhi.n	15dc0 <rx_work_handler+0x38>
   15da8:	493d      	ldr	r1, [pc, #244]	; (15ea0 <rx_work_handler+0x118>)
   15daa:	483e      	ldr	r0, [pc, #248]	; (15ea4 <rx_work_handler+0x11c>)
   15dac:	f240 12ed 	movw	r2, #493	; 0x1ed
   15db0:	f014 f94b 	bl	2a04a <assert_print>
   15db4:	4040      	eors	r0, r0
   15db6:	f380 8811 	msr	BASEPRI, r0
   15dba:	f04f 0003 	mov.w	r0, #3
   15dbe:	df02      	svc	2
   15dc0:	2104      	movs	r1, #4
   15dc2:	f104 000c 	add.w	r0, r4, #12
   15dc6:	f009 f937 	bl	1f038 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15dca:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   15dcc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15dce:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15dd0:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   15dd2:	8a22      	ldrh	r2, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   15dd4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15dd8:	4293      	cmp	r3, r2
	acl(buf)->handle = bt_acl_handle(handle);
   15dda:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   15ddc:	d007      	beq.n	15dee <rx_work_handler+0x66>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15dde:	4832      	ldr	r0, [pc, #200]	; (15ea8 <rx_work_handler+0x120>)
   15de0:	2145      	movs	r1, #69	; 0x45
   15de2:	f014 f940 	bl	2a066 <z_log_minimal_printk>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   15de6:	4620      	mov	r0, r4
   15de8:	f009 f83a 	bl	1ee60 <net_buf_unref>
		break;
   15dec:	e014      	b.n	15e18 <rx_work_handler+0x90>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15dee:	f002 fc6f 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15df2:	4605      	mov	r5, r0
   15df4:	b928      	cbnz	r0, 15e02 <rx_work_handler+0x7a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15df6:	8b62      	ldrh	r2, [r4, #26]
   15df8:	482c      	ldr	r0, [pc, #176]	; (15eac <rx_work_handler+0x124>)
   15dfa:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15dfc:	f014 f933 	bl	2a066 <z_log_minimal_printk>
   15e00:	e7f1      	b.n	15de6 <rx_work_handler+0x5e>
	acl(buf)->index = bt_conn_index(conn);
   15e02:	f002 fd6b 	bl	188dc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15e06:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15e08:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   15e0a:	4621      	mov	r1, r4
   15e0c:	4628      	mov	r0, r5
   15e0e:	f002 fb19 	bl	18444 <bt_conn_recv>
	bt_conn_unref(conn);
   15e12:	4628      	mov	r0, r5
   15e14:	f002 fc3c 	bl	18690 <bt_conn_unref>
	return list->head;
   15e18:	4b25      	ldr	r3, [pc, #148]	; (15eb0 <rx_work_handler+0x128>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15e1a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   15e1e:	2b00      	cmp	r3, #0
   15e20:	d03b      	beq.n	15e9a <rx_work_handler+0x112>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15e22:	4924      	ldr	r1, [pc, #144]	; (15eb4 <rx_work_handler+0x12c>)
   15e24:	4824      	ldr	r0, [pc, #144]	; (15eb8 <rx_work_handler+0x130>)
   15e26:	f018 f827 	bl	2de78 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15e2a:	1e02      	subs	r2, r0, #0
   15e2c:	da35      	bge.n	15e9a <rx_work_handler+0x112>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   15e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Could not submit rx_work: %d", err);
   15e32:	4822      	ldr	r0, [pc, #136]	; (15ebc <rx_work_handler+0x134>)
   15e34:	2145      	movs	r1, #69	; 0x45
   15e36:	f014 b916 	b.w	2a066 <z_log_minimal_printk>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15e3a:	8a03      	ldrh	r3, [r0, #16]
   15e3c:	2b01      	cmp	r3, #1
   15e3e:	d80b      	bhi.n	15e58 <rx_work_handler+0xd0>
   15e40:	4917      	ldr	r1, [pc, #92]	; (15ea0 <rx_work_handler+0x118>)
   15e42:	4818      	ldr	r0, [pc, #96]	; (15ea4 <rx_work_handler+0x11c>)
   15e44:	f640 126d 	movw	r2, #2413	; 0x96d
   15e48:	f014 f8ff 	bl	2a04a <assert_print>
   15e4c:	4040      	eors	r0, r0
   15e4e:	f380 8811 	msr	BASEPRI, r0
   15e52:	f04f 0003 	mov.w	r0, #3
   15e56:	df02      	svc	2
   15e58:	2102      	movs	r1, #2
   15e5a:	f104 000c 	add.w	r0, r4, #12
   15e5e:	f009 f8eb 	bl	1f038 <net_buf_simple_pull_mem>
   15e62:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15e64:	7800      	ldrb	r0, [r0, #0]
   15e66:	f015 f9b1 	bl	2b1cc <bt_hci_evt_get_flags>
   15e6a:	0783      	lsls	r3, r0, #30
   15e6c:	d40b      	bmi.n	15e86 <rx_work_handler+0xfe>
   15e6e:	490c      	ldr	r1, [pc, #48]	; (15ea0 <rx_work_handler+0x118>)
   15e70:	480c      	ldr	r0, [pc, #48]	; (15ea4 <rx_work_handler+0x11c>)
   15e72:	f640 1271 	movw	r2, #2417	; 0x971
   15e76:	f014 f8e8 	bl	2a04a <assert_print>
   15e7a:	4040      	eors	r0, r0
   15e7c:	f380 8811 	msr	BASEPRI, r0
   15e80:	f04f 0003 	mov.w	r0, #3
   15e84:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15e86:	4a0e      	ldr	r2, [pc, #56]	; (15ec0 <rx_work_handler+0x138>)
   15e88:	7828      	ldrb	r0, [r5, #0]
   15e8a:	2306      	movs	r3, #6
   15e8c:	4621      	mov	r1, r4
   15e8e:	f7ff ff49 	bl	15d24 <handle_event>
	net_buf_unref(buf);
   15e92:	e7a8      	b.n	15de6 <rx_work_handler+0x5e>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15e94:	480b      	ldr	r0, [pc, #44]	; (15ec4 <rx_work_handler+0x13c>)
   15e96:	2145      	movs	r1, #69	; 0x45
   15e98:	e7b0      	b.n	15dfc <rx_work_handler+0x74>
}
   15e9a:	bd70      	pop	{r4, r5, r6, pc}
   15e9c:	200004b4 	.word	0x200004b4
   15ea0:	00030865 	.word	0x00030865
   15ea4:	0002f2b5 	.word	0x0002f2b5
   15ea8:	00030899 	.word	0x00030899
   15eac:	000308c2 	.word	0x000308c2
   15eb0:	20000378 	.word	0x20000378
   15eb4:	200005dc 	.word	0x200005dc
   15eb8:	20001bd0 	.word	0x20001bd0
   15ebc:	000307f5 	.word	0x000307f5
   15ec0:	0002e8cc 	.word	0x0002e8cc
   15ec4:	000308e9 	.word	0x000308e9

00015ec8 <hci_le_meta_event>:
{
   15ec8:	b510      	push	{r4, lr}
   15eca:	2101      	movs	r1, #1
   15ecc:	4604      	mov	r4, r0
   15ece:	300c      	adds	r0, #12
   15ed0:	f009 f8b2 	bl	1f038 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15ed4:	4621      	mov	r1, r4
   15ed6:	4a03      	ldr	r2, [pc, #12]	; (15ee4 <hci_le_meta_event+0x1c>)
   15ed8:	7800      	ldrb	r0, [r0, #0]
}
   15eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   15ede:	230b      	movs	r3, #11
   15ee0:	f7ff bf20 	b.w	15d24 <handle_event>
   15ee4:	0002e8fc 	.word	0x0002e8fc

00015ee8 <le_remote_feat_complete>:
{
   15ee8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   15eea:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15eec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15ef0:	4630      	mov	r0, r6
   15ef2:	f002 fbed 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   15ef6:	4604      	mov	r4, r0
   15ef8:	b930      	cbnz	r0, 15f08 <le_remote_feat_complete+0x20>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15efa:	4632      	mov	r2, r6
   15efc:	480b      	ldr	r0, [pc, #44]	; (15f2c <le_remote_feat_complete+0x44>)
}
   15efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15f02:	2145      	movs	r1, #69	; 0x45
   15f04:	f014 b8af 	b.w	2a066 <z_log_minimal_printk>
	if (!evt->status) {
   15f08:	782b      	ldrb	r3, [r5, #0]
   15f0a:	b923      	cbnz	r3, 15f16 <le_remote_feat_complete+0x2e>
		memcpy(conn->le.features, evt->features,
   15f0c:	2208      	movs	r2, #8
   15f0e:	1ce9      	adds	r1, r5, #3
   15f10:	30b4      	adds	r0, #180	; 0xb4
   15f12:	f015 f870 	bl	2aff6 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15f16:	1d20      	adds	r0, r4, #4
   15f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   15f1c:	f015 f984 	bl	2b228 <atomic_or>
	bt_conn_unref(conn);
   15f20:	4620      	mov	r0, r4
}
   15f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   15f26:	f002 bbb3 	b.w	18690 <bt_conn_unref>
   15f2a:	bf00      	nop
   15f2c:	000307a5 	.word	0x000307a5

00015f30 <hci_cmd_done>:
{
   15f30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   15f34:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f36:	7a90      	ldrb	r0, [r2, #10]
   15f38:	4d39      	ldr	r5, [pc, #228]	; (16020 <hci_cmd_done+0xf0>)
{
   15f3a:	460f      	mov	r7, r1
   15f3c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   15f3e:	f008 fdad 	bl	1ea9c <net_buf_pool_get>
   15f42:	4285      	cmp	r5, r0
   15f44:	d00e      	beq.n	15f64 <hci_cmd_done+0x34>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   15f46:	7aa4      	ldrb	r4, [r4, #10]
   15f48:	4620      	mov	r0, r4
   15f4a:	f008 fda7 	bl	1ea9c <net_buf_pool_get>
   15f4e:	4623      	mov	r3, r4
   15f50:	e9cd 0500 	strd	r0, r5, [sp]
   15f54:	4632      	mov	r2, r6
   15f56:	4833      	ldr	r0, [pc, #204]	; (16024 <hci_cmd_done+0xf4>)
   15f58:	2157      	movs	r1, #87	; 0x57
   15f5a:	f014 f884 	bl	2a066 <z_log_minimal_printk>
}
   15f5e:	b002      	add	sp, #8
   15f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   15f64:	4620      	mov	r0, r4
   15f66:	f008 fda1 	bl	1eaac <net_buf_id>
   15f6a:	4d2f      	ldr	r5, [pc, #188]	; (16028 <hci_cmd_done+0xf8>)
   15f6c:	f04f 080c 	mov.w	r8, #12
   15f70:	fb08 5000 	mla	r0, r8, r0, r5
   15f74:	8843      	ldrh	r3, [r0, #2]
   15f76:	42b3      	cmp	r3, r6
   15f78:	d00d      	beq.n	15f96 <hci_cmd_done+0x66>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   15f7a:	4620      	mov	r0, r4
   15f7c:	f008 fd96 	bl	1eaac <net_buf_id>
   15f80:	fb08 5000 	mla	r0, r8, r0, r5
   15f84:	4632      	mov	r2, r6
   15f86:	8843      	ldrh	r3, [r0, #2]
   15f88:	4828      	ldr	r0, [pc, #160]	; (1602c <hci_cmd_done+0xfc>)
   15f8a:	2157      	movs	r1, #87	; 0x57
}
   15f8c:	b002      	add	sp, #8
   15f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   15f92:	f014 b868 	b.w	2a066 <z_log_minimal_printk>
	if (bt_dev.sent_cmd) {
   15f96:	4e26      	ldr	r6, [pc, #152]	; (16030 <hci_cmd_done+0x100>)
   15f98:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   15f9c:	b120      	cbz	r0, 15fa8 <hci_cmd_done+0x78>
		net_buf_unref(bt_dev.sent_cmd);
   15f9e:	f008 ff5f 	bl	1ee60 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   15fa2:	2300      	movs	r3, #0
   15fa4:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   15fa8:	4620      	mov	r0, r4
   15faa:	f008 fd7f 	bl	1eaac <net_buf_id>
   15fae:	260c      	movs	r6, #12
   15fb0:	fb06 5000 	mla	r0, r6, r0, r5
   15fb4:	6843      	ldr	r3, [r0, #4]
   15fb6:	b19b      	cbz	r3, 15fe0 <hci_cmd_done+0xb0>
   15fb8:	b997      	cbnz	r7, 15fe0 <hci_cmd_done+0xb0>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   15fba:	4620      	mov	r0, r4
   15fbc:	f008 fd76 	bl	1eaac <net_buf_id>
   15fc0:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15fc4:	2101      	movs	r1, #1
   15fc6:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   15fc8:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   15fcc:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   15fce:	f003 061f 	and.w	r6, r3, #31
   15fd2:	40b1      	lsls	r1, r6
	if (val) {
   15fd4:	095b      	lsrs	r3, r3, #5
   15fd6:	b1e2      	cbz	r2, 16012 <hci_cmd_done+0xe2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15fd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   15fdc:	f015 f924 	bl	2b228 <atomic_or>
	if (cmd(buf)->sync) {
   15fe0:	4620      	mov	r0, r4
   15fe2:	f008 fd63 	bl	1eaac <net_buf_id>
   15fe6:	260c      	movs	r6, #12
   15fe8:	fb06 5000 	mla	r0, r6, r0, r5
   15fec:	6883      	ldr	r3, [r0, #8]
   15fee:	2b00      	cmp	r3, #0
   15ff0:	d0b5      	beq.n	15f5e <hci_cmd_done+0x2e>
		cmd(buf)->status = status;
   15ff2:	4620      	mov	r0, r4
   15ff4:	f008 fd5a 	bl	1eaac <net_buf_id>
   15ff8:	4370      	muls	r0, r6
   15ffa:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   15ffc:	4620      	mov	r0, r4
   15ffe:	f008 fd55 	bl	1eaac <net_buf_id>
   16002:	fb06 5500 	mla	r5, r6, r0, r5
   16006:	68a8      	ldr	r0, [r5, #8]
}
   16008:	b002      	add	sp, #8
   1600a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_impl_k_sem_give(sem);
   1600e:	f00e ba4d 	b.w	244ac <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16012:	43c9      	mvns	r1, r1
   16014:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16018:	f015 f915 	bl	2b246 <atomic_and.isra.0>
   1601c:	e7e0      	b.n	15fe0 <hci_cmd_done+0xb0>
   1601e:	bf00      	nop
   16020:	20000a90 	.word	0x20000a90
   16024:	00030902 	.word	0x00030902
   16028:	2000311c 	.word	0x2000311c
   1602c:	0003093c 	.word	0x0003093c
   16030:	20000378 	.word	0x20000378

00016034 <hci_cmd_status>:
{
   16034:	b538      	push	{r3, r4, r5, lr}
   16036:	2104      	movs	r1, #4
   16038:	4604      	mov	r4, r0
   1603a:	300c      	adds	r0, #12
   1603c:	f008 fffc 	bl	1f038 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16040:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   16042:	7801      	ldrb	r1, [r0, #0]
   16044:	8840      	ldrh	r0, [r0, #2]
   16046:	4622      	mov	r2, r4
   16048:	f7ff ff72 	bl	15f30 <hci_cmd_done>
	if (ncmd) {
   1604c:	b125      	cbz	r5, 16058 <hci_cmd_status+0x24>
   1604e:	4803      	ldr	r0, [pc, #12]	; (1605c <hci_cmd_status+0x28>)
}
   16050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16054:	f00e ba2a 	b.w	244ac <z_impl_k_sem_give>
   16058:	bd38      	pop	{r3, r4, r5, pc}
   1605a:	bf00      	nop
   1605c:	20000498 	.word	0x20000498

00016060 <hci_cmd_complete>:
{
   16060:	b538      	push	{r3, r4, r5, lr}
   16062:	2103      	movs	r1, #3
   16064:	4604      	mov	r4, r0
   16066:	300c      	adds	r0, #12
   16068:	f008 ffe6 	bl	1f038 <net_buf_simple_pull_mem>
	status = buf->data[0];
   1606c:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   1606e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16070:	7819      	ldrb	r1, [r3, #0]
   16072:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   16076:	4622      	mov	r2, r4
   16078:	f7ff ff5a 	bl	15f30 <hci_cmd_done>
	if (ncmd) {
   1607c:	b125      	cbz	r5, 16088 <hci_cmd_complete+0x28>
   1607e:	4803      	ldr	r0, [pc, #12]	; (1608c <hci_cmd_complete+0x2c>)
}
   16080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16084:	f00e ba12 	b.w	244ac <z_impl_k_sem_give>
   16088:	bd38      	pop	{r3, r4, r5, pc}
   1608a:	bf00      	nop
   1608c:	20000498 	.word	0x20000498

00016090 <hci_num_completed_packets>:
{
   16090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   16094:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16096:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   16098:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 1616c <hci_num_completed_packets+0xdc>
			tx->pending_no_cb = 0U;
   1609c:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   1609e:	783b      	ldrb	r3, [r7, #0]
   160a0:	429d      	cmp	r5, r3
   160a2:	db01      	blt.n	160a8 <hci_num_completed_packets+0x18>
}
   160a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   160a8:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   160ac:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   160b0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   160b4:	4650      	mov	r0, sl
   160b6:	f002 fb0b 	bl	186d0 <bt_conn_lookup_handle>
		if (!conn) {
   160ba:	4604      	mov	r4, r0
   160bc:	b1d0      	cbz	r0, 160f4 <hci_num_completed_packets+0x64>
			k_work_submit(&conn->tx_complete_work);
   160be:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   160c2:	b346      	cbz	r6, 16116 <hci_num_completed_packets+0x86>
	__asm__ volatile(
   160c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   160c8:	f3ef 8211 	mrs	r2, BASEPRI
   160cc:	f383 8812 	msr	BASEPRI_MAX, r3
   160d0:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   160d4:	69e3      	ldr	r3, [r4, #28]
   160d6:	b1a3      	cbz	r3, 16102 <hci_num_completed_packets+0x72>
				conn->pending_no_cb--;
   160d8:	3b01      	subs	r3, #1
   160da:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   160dc:	f382 8811 	msr	BASEPRI, r2
   160e0:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   160e4:	4620      	mov	r0, r4
   160e6:	f002 f937 	bl	18358 <bt_conn_get_pkts>
   160ea:	3e01      	subs	r6, #1
   160ec:	f00e f9de 	bl	244ac <z_impl_k_sem_give>
   160f0:	b2b6      	uxth	r6, r6
   160f2:	e7e6      	b.n	160c2 <hci_num_completed_packets+0x32>
			LOG_ERR("No connection for handle %u", handle);
   160f4:	481e      	ldr	r0, [pc, #120]	; (16170 <hci_num_completed_packets+0xe0>)
   160f6:	4652      	mov	r2, sl
   160f8:	2145      	movs	r1, #69	; 0x45
   160fa:	f013 ffb4 	bl	2a066 <z_log_minimal_printk>
	for (i = 0; i < evt->num_handles; i++) {
   160fe:	3501      	adds	r5, #1
   16100:	e7cd      	b.n	1609e <hci_num_completed_packets+0xe>
   16102:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16104:	b95b      	cbnz	r3, 1611e <hci_num_completed_packets+0x8e>
   16106:	f382 8811 	msr	BASEPRI, r2
   1610a:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   1610e:	2145      	movs	r1, #69	; 0x45
   16110:	4648      	mov	r0, r9
   16112:	f013 ffa8 	bl	2a066 <z_log_minimal_printk>
		bt_conn_unref(conn);
   16116:	4620      	mov	r0, r4
   16118:	f002 faba 	bl	18690 <bt_conn_unref>
   1611c:	e7ef      	b.n	160fe <hci_num_completed_packets+0x6e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1611e:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16120:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16122:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16124:	428b      	cmp	r3, r1
	list->tail = node;
   16126:	bf08      	it	eq
   16128:	61a0      	streq	r0, [r4, #24]
   1612a:	f382 8811 	msr	BASEPRI, r2
   1612e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16132:	f04f 0240 	mov.w	r2, #64	; 0x40
   16136:	f3ef 8111 	mrs	r1, BASEPRI
   1613a:	f382 8812 	msr	BASEPRI_MAX, r2
   1613e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16142:	68da      	ldr	r2, [r3, #12]
   16144:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16146:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   1614a:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   1614e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16150:	b94a      	cbnz	r2, 16166 <hci_num_completed_packets+0xd6>
	list->head = node;
   16152:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16156:	f381 8811 	msr	BASEPRI, r1
   1615a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1615e:	4650      	mov	r0, sl
   16160:	f00e fcce 	bl	24b00 <k_work_submit>
   16164:	e7be      	b.n	160e4 <hci_num_completed_packets+0x54>
	parent->next = child;
   16166:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16168:	6263      	str	r3, [r4, #36]	; 0x24
}
   1616a:	e7f4      	b.n	16156 <hci_num_completed_packets+0xc6>
   1616c:	00030995 	.word	0x00030995
   16170:	00030974 	.word	0x00030974

00016174 <hci_disconn_complete>:
{
   16174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16176:	68c6      	ldr	r6, [r0, #12]
	if (evt->status) {
   16178:	7835      	ldrb	r5, [r6, #0]
   1617a:	bb4d      	cbnz	r5, 161d0 <hci_disconn_complete+0x5c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1617c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   16180:	4638      	mov	r0, r7
   16182:	f002 faa5 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   16186:	4604      	mov	r4, r0
   16188:	b930      	cbnz	r0, 16198 <hci_disconn_complete+0x24>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1618a:	463a      	mov	r2, r7
   1618c:	4811      	ldr	r0, [pc, #68]	; (161d4 <hci_disconn_complete+0x60>)
}
   1618e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16192:	2145      	movs	r1, #69	; 0x45
   16194:	f013 bf67 	b.w	2a066 <z_log_minimal_printk>
	conn->err = evt->reason;
   16198:	78f3      	ldrb	r3, [r6, #3]
   1619a:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1619c:	4629      	mov	r1, r5
   1619e:	f002 fa9f 	bl	186e0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   161a2:	78a3      	ldrb	r3, [r4, #2]
   161a4:	2b01      	cmp	r3, #1
   161a6:	d004      	beq.n	161b2 <hci_disconn_complete+0x3e>
	bt_conn_unref(conn);
   161a8:	4620      	mov	r0, r4
}
   161aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   161ae:	f002 ba6f 	b.w	18690 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   161b2:	f3bf 8f5b 	dmb	ish
   161b6:	6863      	ldr	r3, [r4, #4]
   161b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   161bc:	07db      	lsls	r3, r3, #31
   161be:	d5f3      	bpl.n	161a8 <hci_disconn_complete+0x34>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   161c0:	4620      	mov	r0, r4
   161c2:	2102      	movs	r1, #2
   161c4:	f002 fa8c 	bl	186e0 <bt_conn_set_state>
		bt_le_scan_update(false);
   161c8:	4628      	mov	r0, r5
   161ca:	f001 fc8d 	bl	17ae8 <bt_le_scan_update>
   161ce:	e7eb      	b.n	161a8 <hci_disconn_complete+0x34>
}
   161d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   161d2:	bf00      	nop
   161d4:	000309b1 	.word	0x000309b1

000161d8 <bt_hci_cmd_state_set_init>:
{
   161d8:	b510      	push	{r4, lr}
	state->bit = bit;
   161da:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   161de:	f89d 3008 	ldrb.w	r3, [sp, #8]
   161e2:	720b      	strb	r3, [r1, #8]
{
   161e4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   161e6:	f008 fc61 	bl	1eaac <net_buf_id>
   161ea:	4b03      	ldr	r3, [pc, #12]	; (161f8 <bt_hci_cmd_state_set_init+0x20>)
   161ec:	220c      	movs	r2, #12
   161ee:	fb02 3300 	mla	r3, r2, r0, r3
   161f2:	605c      	str	r4, [r3, #4]
}
   161f4:	bd10      	pop	{r4, pc}
   161f6:	bf00      	nop
   161f8:	2000311c 	.word	0x2000311c

000161fc <bt_hci_cmd_create>:
{
   161fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16200:	f04f 32ff 	mov.w	r2, #4294967295
   16204:	4606      	mov	r6, r0
   16206:	f04f 33ff 	mov.w	r3, #4294967295
   1620a:	481d      	ldr	r0, [pc, #116]	; (16280 <bt_hci_cmd_create+0x84>)
   1620c:	460f      	mov	r7, r1
   1620e:	f017 f8e1 	bl	2d3d4 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16212:	4604      	mov	r4, r0
   16214:	b950      	cbnz	r0, 1622c <bt_hci_cmd_create+0x30>
   16216:	491b      	ldr	r1, [pc, #108]	; (16284 <bt_hci_cmd_create+0x88>)
   16218:	481b      	ldr	r0, [pc, #108]	; (16288 <bt_hci_cmd_create+0x8c>)
   1621a:	f240 1201 	movw	r2, #257	; 0x101
   1621e:	f013 ff14 	bl	2a04a <assert_print>
   16222:	4818      	ldr	r0, [pc, #96]	; (16284 <bt_hci_cmd_create+0x88>)
   16224:	f240 1101 	movw	r1, #257	; 0x101
   16228:	f013 ff08 	bl	2a03c <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   1622c:	f100 0a0c 	add.w	sl, r0, #12
   16230:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16232:	f04f 0800 	mov.w	r8, #0
   16236:	4650      	mov	r0, sl
   16238:	f008 fd3a 	bl	1ecb0 <net_buf_simple_reserve>
   1623c:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   16240:	4620      	mov	r0, r4
   16242:	f008 fc33 	bl	1eaac <net_buf_id>
   16246:	4d11      	ldr	r5, [pc, #68]	; (1628c <bt_hci_cmd_create+0x90>)
   16248:	f04f 090c 	mov.w	r9, #12
   1624c:	fb09 5000 	mla	r0, r9, r0, r5
   16250:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   16252:	4620      	mov	r0, r4
   16254:	f008 fc2a 	bl	1eaac <net_buf_id>
   16258:	fb09 5000 	mla	r0, r9, r0, r5
   1625c:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16260:	4620      	mov	r0, r4
   16262:	f008 fc23 	bl	1eaac <net_buf_id>
   16266:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   1626a:	2103      	movs	r1, #3
   1626c:	f8c5 8004 	str.w	r8, [r5, #4]
   16270:	4650      	mov	r0, sl
   16272:	f008 fefb 	bl	1f06c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   16276:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16278:	7087      	strb	r7, [r0, #2]
}
   1627a:	4620      	mov	r0, r4
   1627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16280:	20000a90 	.word	0x20000a90
   16284:	00030865 	.word	0x00030865
   16288:	0002f2b5 	.word	0x0002f2b5
   1628c:	2000311c 	.word	0x2000311c

00016290 <bt_hci_cmd_send_sync>:
{
   16290:	b5f0      	push	{r4, r5, r6, r7, lr}
   16292:	4607      	mov	r7, r0
   16294:	b087      	sub	sp, #28
   16296:	4615      	mov	r5, r2
	if (!buf) {
   16298:	460c      	mov	r4, r1
   1629a:	b921      	cbnz	r1, 162a6 <bt_hci_cmd_send_sync+0x16>
		buf = bt_hci_cmd_create(opcode, 0);
   1629c:	f7ff ffae 	bl	161fc <bt_hci_cmd_create>
		if (!buf) {
   162a0:	4604      	mov	r4, r0
   162a2:	2800      	cmp	r0, #0
   162a4:	d047      	beq.n	16336 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   162a6:	2201      	movs	r2, #1
   162a8:	2100      	movs	r1, #0
   162aa:	4668      	mov	r0, sp
   162ac:	f017 fd81 	bl	2ddb2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   162b0:	4620      	mov	r0, r4
   162b2:	f008 fbfb 	bl	1eaac <net_buf_id>
   162b6:	4e21      	ldr	r6, [pc, #132]	; (1633c <bt_hci_cmd_send_sync+0xac>)
   162b8:	230c      	movs	r3, #12
   162ba:	fb03 6000 	mla	r0, r3, r0, r6
   162be:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   162c2:	4620      	mov	r0, r4
   162c4:	f008 fe0e 	bl	1eee4 <net_buf_ref>
   162c8:	4601      	mov	r1, r0
   162ca:	481d      	ldr	r0, [pc, #116]	; (16340 <bt_hci_cmd_send_sync+0xb0>)
   162cc:	f008 fda8 	bl	1ee20 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   162d0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   162d4:	2300      	movs	r3, #0
   162d6:	4668      	mov	r0, sp
   162d8:	f00e f922 	bl	24520 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   162dc:	b158      	cbz	r0, 162f6 <bt_hci_cmd_send_sync+0x66>
   162de:	4919      	ldr	r1, [pc, #100]	; (16344 <bt_hci_cmd_send_sync+0xb4>)
   162e0:	4819      	ldr	r0, [pc, #100]	; (16348 <bt_hci_cmd_send_sync+0xb8>)
   162e2:	f240 1249 	movw	r2, #329	; 0x149
   162e6:	f013 feb0 	bl	2a04a <assert_print>
   162ea:	4040      	eors	r0, r0
   162ec:	f380 8811 	msr	BASEPRI, r0
   162f0:	f04f 0003 	mov.w	r0, #3
   162f4:	df02      	svc	2
	status = cmd(buf)->status;
   162f6:	4620      	mov	r0, r4
   162f8:	f008 fbd8 	bl	1eaac <net_buf_id>
   162fc:	230c      	movs	r3, #12
   162fe:	4358      	muls	r0, r3
   16300:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   16302:	b186      	cbz	r6, 16326 <bt_hci_cmd_send_sync+0x96>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16304:	4811      	ldr	r0, [pc, #68]	; (1634c <bt_hci_cmd_send_sync+0xbc>)
   16306:	4633      	mov	r3, r6
   16308:	463a      	mov	r2, r7
   1630a:	2157      	movs	r1, #87	; 0x57
   1630c:	f013 feab 	bl	2a066 <z_log_minimal_printk>
		net_buf_unref(buf);
   16310:	4620      	mov	r0, r4
   16312:	f008 fda5 	bl	1ee60 <net_buf_unref>
			return -ECONNREFUSED;
   16316:	2e09      	cmp	r6, #9
   16318:	bf14      	ite	ne
   1631a:	f06f 0004 	mvnne.w	r0, #4
   1631e:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16322:	b007      	add	sp, #28
   16324:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
   16326:	b115      	cbz	r5, 1632e <bt_hci_cmd_send_sync+0x9e>
		*rsp = buf;
   16328:	602c      	str	r4, [r5, #0]
	return 0;
   1632a:	2000      	movs	r0, #0
   1632c:	e7f9      	b.n	16322 <bt_hci_cmd_send_sync+0x92>
		net_buf_unref(buf);
   1632e:	4620      	mov	r0, r4
   16330:	f008 fd96 	bl	1ee60 <net_buf_unref>
   16334:	e7f9      	b.n	1632a <bt_hci_cmd_send_sync+0x9a>
			return -ENOBUFS;
   16336:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1633a:	e7f2      	b.n	16322 <bt_hci_cmd_send_sync+0x92>
   1633c:	2000311c 	.word	0x2000311c
   16340:	200004bc 	.word	0x200004bc
   16344:	00030865 	.word	0x00030865
   16348:	0002f2b5 	.word	0x0002f2b5
   1634c:	000309dc 	.word	0x000309dc

00016350 <hci_le_read_max_data_len>:
{
   16350:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16352:	4606      	mov	r6, r0
   16354:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16356:	aa01      	add	r2, sp, #4
   16358:	2100      	movs	r1, #0
   1635a:	f242 002f 	movw	r0, #8239	; 0x202f
   1635e:	f7ff ff97 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   16362:	4604      	mov	r4, r0
   16364:	b130      	cbz	r0, 16374 <hci_le_read_max_data_len+0x24>
		LOG_ERR("Failed to read DLE max data len");
   16366:	4809      	ldr	r0, [pc, #36]	; (1638c <hci_le_read_max_data_len+0x3c>)
   16368:	2145      	movs	r1, #69	; 0x45
   1636a:	f013 fe7c 	bl	2a066 <z_log_minimal_printk>
}
   1636e:	4620      	mov	r0, r4
   16370:	b002      	add	sp, #8
   16372:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16374:	9801      	ldr	r0, [sp, #4]
   16376:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16378:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1637c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1637e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16382:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16384:	f008 fd6c 	bl	1ee60 <net_buf_unref>
	return 0;
   16388:	e7f1      	b.n	1636e <hci_le_read_max_data_len+0x1e>
   1638a:	bf00      	nop
   1638c:	000309fd 	.word	0x000309fd

00016390 <bt_hci_le_rand>:
{
   16390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16392:	4b14      	ldr	r3, [pc, #80]	; (163e4 <bt_hci_le_rand+0x54>)
   16394:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   16398:	2b00      	cmp	r3, #0
{
   1639a:	4605      	mov	r5, r0
   1639c:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1639e:	da1d      	bge.n	163dc <bt_hci_le_rand+0x4c>
	while (len > 0) {
   163a0:	b914      	cbnz	r4, 163a8 <bt_hci_le_rand+0x18>
	return 0;
   163a2:	4620      	mov	r0, r4
}
   163a4:	b003      	add	sp, #12
   163a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   163a8:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   163aa:	aa01      	add	r2, sp, #4
   163ac:	f04f 0100 	mov.w	r1, #0
   163b0:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   163b4:	4626      	mov	r6, r4
   163b6:	bf28      	it	cs
   163b8:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   163ba:	f7ff ff69 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   163be:	2800      	cmp	r0, #0
   163c0:	d1f0      	bne.n	163a4 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   163c2:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   163c4:	68f9      	ldr	r1, [r7, #12]
   163c6:	4632      	mov	r2, r6
   163c8:	3101      	adds	r1, #1
   163ca:	4628      	mov	r0, r5
   163cc:	f014 fe13 	bl	2aff6 <memcpy>
		net_buf_unref(rsp);
   163d0:	4638      	mov	r0, r7
   163d2:	f008 fd45 	bl	1ee60 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   163d6:	4435      	add	r5, r6
		len -= count;
   163d8:	1ba4      	subs	r4, r4, r6
   163da:	e7e1      	b.n	163a0 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   163dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   163e0:	e7e0      	b.n	163a4 <bt_hci_le_rand+0x14>
   163e2:	bf00      	nop
   163e4:	20000378 	.word	0x20000378

000163e8 <bt_le_create_conn>:
{
   163e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   163ea:	b087      	sub	sp, #28
   163ec:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   163ee:	f10d 010b 	add.w	r1, sp, #11
   163f2:	2000      	movs	r0, #0
   163f4:	f001 fa9c 	bl	17930 <bt_id_set_create_conn_own_addr>
	if (err) {
   163f8:	4605      	mov	r5, r0
   163fa:	2800      	cmp	r0, #0
   163fc:	d148      	bne.n	16490 <bt_le_create_conn+0xa8>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   163fe:	2119      	movs	r1, #25
   16400:	f242 000d 	movw	r0, #8205	; 0x200d
   16404:	f7ff fefa 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   16408:	4607      	mov	r7, r0
   1640a:	2800      	cmp	r0, #0
   1640c:	d043      	beq.n	16496 <bt_le_create_conn+0xae>
   1640e:	2119      	movs	r1, #25
   16410:	300c      	adds	r0, #12
   16412:	f008 fe2b 	bl	1f06c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   16416:	4629      	mov	r1, r5
   16418:	4604      	mov	r4, r0
   1641a:	2219      	movs	r2, #25
   1641c:	f014 fdf6 	bl	2b00c <memset>
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   16420:	f106 059e 	add.w	r5, r6, #158	; 0x9e
	cp->own_addr_type = own_addr_type;
   16424:	f89d 300b 	ldrb.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   16428:	491c      	ldr	r1, [pc, #112]	; (1649c <bt_le_create_conn+0xb4>)
   1642a:	7323      	strb	r3, [r4, #12]
   1642c:	2207      	movs	r2, #7
   1642e:	4628      	mov	r0, r5
   16430:	f014 fdba 	bl	2afa8 <memcmp>
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   16434:	b908      	cbnz	r0, 1643a <bt_le_create_conn+0x52>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   16436:	f106 0590 	add.w	r5, r6, #144	; 0x90
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   1643a:	4629      	mov	r1, r5
   1643c:	1d60      	adds	r0, r4, #5
   1643e:	f014 fef0 	bl	2b222 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   16442:	2500      	movs	r5, #0
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   16444:	4a16      	ldr	r2, [pc, #88]	; (164a0 <bt_le_create_conn+0xb8>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   16446:	7125      	strb	r5, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   16448:	8993      	ldrh	r3, [r2, #12]
   1644a:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1644c:	89d3      	ldrh	r3, [r2, #14]
   1644e:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   16450:	f8b6 30a8 	ldrh.w	r3, [r6, #168]	; 0xa8
   16454:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   16458:	f8b6 30aa 	ldrh.w	r3, [r6, #170]	; 0xaa
   1645c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   16460:	f8b6 30ac 	ldrh.w	r3, [r6, #172]	; 0xac
   16464:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   16468:	f8b6 30ae 	ldrh.w	r3, [r6, #174]	; 0xae
   1646c:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   16470:	2301      	movs	r3, #1
   16472:	9300      	str	r3, [sp, #0]
   16474:	230c      	movs	r3, #12
   16476:	eb0d 0103 	add.w	r1, sp, r3
   1647a:	32cc      	adds	r2, #204	; 0xcc
   1647c:	4638      	mov	r0, r7
   1647e:	f7ff feab 	bl	161d8 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   16482:	462a      	mov	r2, r5
   16484:	4639      	mov	r1, r7
   16486:	f242 000d 	movw	r0, #8205	; 0x200d
   1648a:	f7ff ff01 	bl	16290 <bt_hci_cmd_send_sync>
   1648e:	4605      	mov	r5, r0
}
   16490:	4628      	mov	r0, r5
   16492:	b007      	add	sp, #28
   16494:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   16496:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1649a:	e7f9      	b.n	16490 <bt_le_create_conn+0xa8>
   1649c:	0003055c 	.word	0x0003055c
   164a0:	20000378 	.word	0x20000378

000164a4 <bt_le_create_conn_cancel>:
{
   164a4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164a6:	2100      	movs	r1, #0
{
   164a8:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164aa:	f242 000e 	movw	r0, #8206	; 0x200e
   164ae:	f7ff fea5 	bl	161fc <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   164b2:	2500      	movs	r5, #0
   164b4:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   164b6:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   164b8:	eb0d 0103 	add.w	r1, sp, r3
   164bc:	4a05      	ldr	r2, [pc, #20]	; (164d4 <bt_le_create_conn_cancel+0x30>)
   164be:	9500      	str	r5, [sp, #0]
   164c0:	f7ff fe8a 	bl	161d8 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   164c4:	462a      	mov	r2, r5
   164c6:	4621      	mov	r1, r4
   164c8:	f242 000e 	movw	r0, #8206	; 0x200e
   164cc:	f7ff fee0 	bl	16290 <bt_hci_cmd_send_sync>
}
   164d0:	b007      	add	sp, #28
   164d2:	bd30      	pop	{r4, r5, pc}
   164d4:	20000444 	.word	0x20000444

000164d8 <bt_hci_le_enh_conn_complete>:
{
   164d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164dc:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
   164e0:	4a96      	ldr	r2, [pc, #600]	; (1673c <bt_hci_le_enh_conn_complete+0x264>)
	handle |= ~BT_ACL_HANDLE_MASK;
   164e2:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
   164e6:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   164e8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   164ec:	b29b      	uxth	r3, r3
   164ee:	4299      	cmp	r1, r3
{
   164f0:	4605      	mov	r5, r0
   164f2:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   164f6:	bf08      	it	eq
   164f8:	8016      	strheq	r6, [r2, #0]
{
   164fa:	b089      	sub	sp, #36	; 0x24
			return true;
   164fc:	bf08      	it	eq
   164fe:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
   16500:	f000 ff40 	bl	17384 <bt_id_pending_keys_update>
	if (evt->status) {
   16504:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16506:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
   1650a:	b36c      	cbz	r4, 16568 <bt_hci_le_enh_conn_complete+0x90>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1650c:	2c02      	cmp	r4, #2
   1650e:	d123      	bne.n	16558 <bt_hci_le_enh_conn_complete+0x80>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   16510:	2100      	movs	r1, #0
   16512:	2206      	movs	r2, #6
   16514:	4608      	mov	r0, r1
   16516:	f002 fb9b 	bl	18c50 <bt_conn_lookup_state_le>
	if (!conn) {
   1651a:	4605      	mov	r5, r0
   1651c:	b948      	cbnz	r0, 16532 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_ERR("No pending central connection");
   1651e:	4888      	ldr	r0, [pc, #544]	; (16740 <bt_hci_le_enh_conn_complete+0x268>)
   16520:	2145      	movs	r1, #69	; 0x45
   16522:	f013 fda0 	bl	2a066 <z_log_minimal_printk>
			bt_le_scan_update(false);
   16526:	2000      	movs	r0, #0
   16528:	f001 fade 	bl	17ae8 <bt_le_scan_update>
}
   1652c:	b009      	add	sp, #36	; 0x24
   1652e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   16532:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16534:	2100      	movs	r1, #0
   16536:	f002 f8d3 	bl	186e0 <bt_conn_set_state>
   1653a:	f3bf 8f5b 	dmb	ish
   1653e:	686b      	ldr	r3, [r5, #4]
   16540:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   16544:	07de      	lsls	r6, r3, #31
   16546:	d503      	bpl.n	16550 <bt_hci_le_enh_conn_complete+0x78>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   16548:	4621      	mov	r1, r4
   1654a:	4628      	mov	r0, r5
   1654c:	f002 f8c8 	bl	186e0 <bt_conn_set_state>
	bt_conn_unref(conn);
   16550:	4628      	mov	r0, r5
   16552:	f002 f89d 	bl	18690 <bt_conn_unref>
   16556:	e7e6      	b.n	16526 <bt_hci_le_enh_conn_complete+0x4e>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16558:	487a      	ldr	r0, [pc, #488]	; (16744 <bt_hci_le_enh_conn_complete+0x26c>)
   1655a:	4622      	mov	r2, r4
   1655c:	2157      	movs	r1, #87	; 0x57
}
   1655e:	b009      	add	sp, #36	; 0x24
   16560:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16564:	f013 bd7f 	b.w	2a066 <z_log_minimal_printk>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16568:	792b      	ldrb	r3, [r5, #4]
   1656a:	3b02      	subs	r3, #2
   1656c:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1656e:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   16572:	d821      	bhi.n	165b8 <bt_hci_le_enh_conn_complete+0xe0>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   16574:	4649      	mov	r1, r9
   16576:	a806      	add	r0, sp, #24
   16578:	f014 fe53 	bl	2b222 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1657c:	f89d 3018 	ldrb.w	r3, [sp, #24]
	memcpy(dst, src, sizeof(*dst));
   16580:	2206      	movs	r2, #6
   16582:	3b02      	subs	r3, #2
   16584:	f105 0111 	add.w	r1, r5, #17
   16588:	f10d 0011 	add.w	r0, sp, #17
   1658c:	f88d 3018 	strb.w	r3, [sp, #24]
   16590:	f014 fd31 	bl	2aff6 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   16594:	2301      	movs	r3, #1
   16596:	f88d 3010 	strb.w	r3, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   1659a:	78e8      	ldrb	r0, [r5, #3]
   1659c:	b1f8      	cbz	r0, 165de <bt_hci_le_enh_conn_complete+0x106>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1659e:	4648      	mov	r0, r9
   165a0:	f7ff f8c0 	bl	15724 <bt_addr_le_str>
   165a4:	2145      	movs	r1, #69	; 0x45
   165a6:	4602      	mov	r2, r0
   165a8:	4867      	ldr	r0, [pc, #412]	; (16748 <bt_hci_le_enh_conn_complete+0x270>)
   165aa:	f013 fd5c 	bl	2a066 <z_log_minimal_printk>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   165ae:	211f      	movs	r1, #31
   165b0:	4640      	mov	r0, r8
   165b2:	f014 fe64 	bl	2b27e <bt_hci_disconnect>
		return;
   165b6:	e7b9      	b.n	1652c <bt_hci_le_enh_conn_complete+0x54>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   165b8:	78eb      	ldrb	r3, [r5, #3]
   165ba:	2b01      	cmp	r3, #1
   165bc:	bf04      	itt	eq
   165be:	4b63      	ldreq	r3, [pc, #396]	; (1674c <bt_hci_le_enh_conn_complete+0x274>)
   165c0:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   165c4:	4649      	mov	r1, r9
   165c6:	4620      	mov	r0, r4
   165c8:	f014 ff17 	bl	2b3fa <bt_lookup_id_addr>
   165cc:	4601      	mov	r1, r0
   165ce:	a806      	add	r0, sp, #24
   165d0:	f014 fe27 	bl	2b222 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   165d4:	4649      	mov	r1, r9
   165d6:	a804      	add	r0, sp, #16
   165d8:	f014 fe23 	bl	2b222 <bt_addr_le_copy>
   165dc:	e7dd      	b.n	1659a <bt_hci_le_enh_conn_complete+0xc2>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   165de:	2206      	movs	r2, #6
   165e0:	a906      	add	r1, sp, #24
   165e2:	f002 fb35 	bl	18c50 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   165e6:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   165e8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   165ea:	b923      	cbnz	r3, 165f6 <bt_hci_le_enh_conn_complete+0x11e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   165ec:	4858      	ldr	r0, [pc, #352]	; (16750 <bt_hci_le_enh_conn_complete+0x278>)
   165ee:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   165f2:	f014 fe28 	bl	2b246 <atomic_and.isra.0>
	if (!conn) {
   165f6:	2c00      	cmp	r4, #0
   165f8:	d0d1      	beq.n	1659e <bt_hci_le_enh_conn_complete+0xc6>
	conn->handle = handle;
   165fa:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   165fc:	a906      	add	r1, sp, #24
	conn->handle = handle;
   165fe:	f820 7b90 	strh.w	r7, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   16602:	f014 fe0e 	bl	2b222 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16606:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1660a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1660e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16612:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16616:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1661a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   1661e:	78eb      	ldrb	r3, [r5, #3]
   16620:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16622:	2200      	movs	r2, #0
   16624:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16626:	b9b3      	cbnz	r3, 16656 <bt_hci_le_enh_conn_complete+0x17e>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   16628:	a904      	add	r1, sp, #16
   1662a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1662e:	f014 fdf8 	bl	2b222 <bt_addr_le_copy>
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   16632:	350b      	adds	r5, #11
			conn->le.init_addr.type = BT_ADDR_LE_RANDOM;
   16634:	2301      	movs	r3, #1
   16636:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	return memcmp(a, b, sizeof(*a));
   1663a:	2206      	movs	r2, #6
   1663c:	4945      	ldr	r1, [pc, #276]	; (16754 <bt_hci_le_enh_conn_complete+0x27c>)
   1663e:	4628      	mov	r0, r5
   16640:	f014 fcb2 	bl	2afa8 <memcmp>
   16644:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   16646:	2206      	movs	r2, #6
				bt_addr_copy(&conn->le.init_addr.a,
   16648:	f104 0098 	add.w	r0, r4, #152	; 0x98
			if (bt_addr_cmp(&evt->local_rpa, BT_ADDR_ANY) != 0) {
   1664c:	2b00      	cmp	r3, #0
   1664e:	d06f      	beq.n	16730 <bt_hci_le_enh_conn_complete+0x258>
   16650:	4629      	mov	r1, r5
   16652:	f014 fcd0 	bl	2aff6 <memcpy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16656:	2107      	movs	r1, #7
   16658:	4620      	mov	r0, r4
   1665a:	f002 f841 	bl	186e0 <bt_conn_set_state>
	if (is_disconnected) {
   1665e:	b11e      	cbz	r6, 16668 <bt_hci_le_enh_conn_complete+0x190>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16660:	2101      	movs	r1, #1
   16662:	4620      	mov	r0, r4
   16664:	f002 f83c 	bl	186e0 <bt_conn_set_state>
	bt_conn_connected(conn);
   16668:	4620      	mov	r0, r4
   1666a:	f014 ff53 	bl	2b514 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1666e:	7b63      	ldrb	r3, [r4, #13]
   16670:	2b07      	cmp	r3, #7
   16672:	d155      	bne.n	16720 <bt_hci_le_enh_conn_complete+0x248>
   16674:	f3bf 8f5b 	dmb	ish
   16678:	6863      	ldr	r3, [r4, #4]
   1667a:	4e34      	ldr	r6, [pc, #208]	; (1674c <bt_hci_le_enh_conn_complete+0x274>)
   1667c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16680:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   16684:	d11f      	bne.n	166c6 <bt_hci_le_enh_conn_complete+0x1ee>
   16686:	78e3      	ldrb	r3, [r4, #3]
   16688:	b11b      	cbz	r3, 16692 <bt_hci_le_enh_conn_complete+0x1ba>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1668a:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   1668e:	0718      	lsls	r0, r3, #28
   16690:	d519      	bpl.n	166c6 <bt_hci_le_enh_conn_complete+0x1ee>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16692:	2102      	movs	r1, #2
   16694:	f242 0016 	movw	r0, #8214	; 0x2016
   16698:	f7ff fdb0 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   1669c:	4605      	mov	r5, r0
   1669e:	2800      	cmp	r0, #0
   166a0:	d048      	beq.n	16734 <bt_hci_le_enh_conn_complete+0x25c>
   166a2:	2102      	movs	r1, #2
   166a4:	300c      	adds	r0, #12
   166a6:	f008 fce1 	bl	1f06c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   166aa:	8823      	ldrh	r3, [r4, #0]
   166ac:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   166ae:	2200      	movs	r2, #0
   166b0:	4629      	mov	r1, r5
   166b2:	f242 0016 	movw	r0, #8214	; 0x2016
   166b6:	f7ff fdeb 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   166ba:	4602      	mov	r2, r0
   166bc:	b118      	cbz	r0, 166c6 <bt_hci_le_enh_conn_complete+0x1ee>
			LOG_ERR("Failed read remote features (%d)", err);
   166be:	4826      	ldr	r0, [pc, #152]	; (16758 <bt_hci_le_enh_conn_complete+0x280>)
   166c0:	2145      	movs	r1, #69	; 0x45
   166c2:	f013 fcd0 	bl	2a066 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   166c6:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   166ca:	07d9      	lsls	r1, r3, #31
   166cc:	d50c      	bpl.n	166e8 <bt_hci_le_enh_conn_complete+0x210>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   166ce:	2100      	movs	r1, #0
   166d0:	2302      	movs	r3, #2
   166d2:	461a      	mov	r2, r3
   166d4:	9100      	str	r1, [sp, #0]
   166d6:	4620      	mov	r0, r4
   166d8:	f014 fe0a 	bl	2b2f0 <bt_le_set_phy>
		if (err) {
   166dc:	4602      	mov	r2, r0
   166de:	b118      	cbz	r0, 166e8 <bt_hci_le_enh_conn_complete+0x210>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   166e0:	481e      	ldr	r0, [pc, #120]	; (1675c <bt_hci_le_enh_conn_complete+0x284>)
   166e2:	2145      	movs	r1, #69	; 0x45
   166e4:	f013 fcbf 	bl	2a066 <z_log_minimal_printk>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   166e8:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   166ec:	069a      	lsls	r2, r3, #26
   166ee:	d517      	bpl.n	16720 <bt_hci_le_enh_conn_complete+0x248>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   166f0:	f8d6 3160 	ldr.w	r3, [r6, #352]	; 0x160
   166f4:	689b      	ldr	r3, [r3, #8]
   166f6:	079b      	lsls	r3, r3, #30
   166f8:	d512      	bpl.n	16720 <bt_hci_le_enh_conn_complete+0x248>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   166fa:	f10d 010e 	add.w	r1, sp, #14
   166fe:	a803      	add	r0, sp, #12
   16700:	f7ff fe26 	bl	16350 <hci_le_read_max_data_len>
			if (!err) {
   16704:	b960      	cbnz	r0, 16720 <bt_hci_le_enh_conn_complete+0x248>
				err = bt_le_set_data_len(conn,
   16706:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1670a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1670e:	4620      	mov	r0, r4
   16710:	f014 fdd0 	bl	2b2b4 <bt_le_set_data_len>
				if (err) {
   16714:	4602      	mov	r2, r0
   16716:	b118      	cbz	r0, 16720 <bt_hci_le_enh_conn_complete+0x248>
					LOG_ERR("Failed to set data len (%d)", err);
   16718:	4811      	ldr	r0, [pc, #68]	; (16760 <bt_hci_le_enh_conn_complete+0x288>)
   1671a:	2145      	movs	r1, #69	; 0x45
   1671c:	f013 fca3 	bl	2a066 <z_log_minimal_printk>
	bt_conn_unref(conn);
   16720:	4620      	mov	r0, r4
   16722:	f001 ffb5 	bl	18690 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16726:	78e3      	ldrb	r3, [r4, #3]
   16728:	2b00      	cmp	r3, #0
   1672a:	f47f aeff 	bne.w	1652c <bt_hci_le_enh_conn_complete+0x54>
   1672e:	e6fa      	b.n	16526 <bt_hci_le_enh_conn_complete+0x4e>
   16730:	490c      	ldr	r1, [pc, #48]	; (16764 <bt_hci_le_enh_conn_complete+0x28c>)
   16732:	e78e      	b.n	16652 <bt_hci_le_enh_conn_complete+0x17a>
		return -ENOBUFS;
   16734:	f06f 0268 	mvn.w	r2, #104	; 0x68
   16738:	e7c1      	b.n	166be <bt_hci_le_enh_conn_complete+0x1e6>
   1673a:	bf00      	nop
   1673c:	2000413c 	.word	0x2000413c
   16740:	00030a22 	.word	0x00030a22
   16744:	00030a45 	.word	0x00030a45
   16748:	00030a63 	.word	0x00030a63
   1674c:	20000378 	.word	0x20000378
   16750:	20000444 	.word	0x20000444
   16754:	00030569 	.word	0x00030569
   16758:	00030a84 	.word	0x00030a84
   1675c:	00030aaa 	.word	0x00030aaa
   16760:	00030ac6 	.word	0x00030ac6
   16764:	200003d9 	.word	0x200003d9

00016768 <le_legacy_conn_complete>:
{
   16768:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1676a:	68c1      	ldr	r1, [r0, #12]
{
   1676c:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   1676e:	780b      	ldrb	r3, [r1, #0]
   16770:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16774:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16778:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1677c:	78cb      	ldrb	r3, [r1, #3]
   1677e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   16782:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   16786:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1678a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1678e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   16792:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   16796:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1679a:	7c4b      	ldrb	r3, [r1, #17]
   1679c:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   167a0:	a801      	add	r0, sp, #4
   167a2:	3104      	adds	r1, #4
   167a4:	f014 fd3d 	bl	2b222 <bt_addr_le_copy>
   167a8:	4908      	ldr	r1, [pc, #32]	; (167cc <le_legacy_conn_complete+0x64>)
   167aa:	2206      	movs	r2, #6
   167ac:	f10d 000b 	add.w	r0, sp, #11
   167b0:	f014 fc21 	bl	2aff6 <memcpy>
   167b4:	4906      	ldr	r1, [pc, #24]	; (167d0 <le_legacy_conn_complete+0x68>)
   167b6:	2206      	movs	r2, #6
   167b8:	f10d 0011 	add.w	r0, sp, #17
   167bc:	f014 fc1b 	bl	2aff6 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   167c0:	4668      	mov	r0, sp
   167c2:	f7ff fe89 	bl	164d8 <bt_hci_le_enh_conn_complete>
}
   167c6:	b009      	add	sp, #36	; 0x24
   167c8:	f85d fb04 	ldr.w	pc, [sp], #4
   167cc:	200003d9 	.word	0x200003d9
   167d0:	00030569 	.word	0x00030569

000167d4 <bt_security_err_get>:
	switch (hci_err) {
   167d4:	2829      	cmp	r0, #41	; 0x29
   167d6:	bf9a      	itte	ls
   167d8:	4b01      	ldrls	r3, [pc, #4]	; (167e0 <bt_security_err_get+0xc>)
   167da:	5c18      	ldrbls	r0, [r3, r0]
{
   167dc:	2009      	movhi	r0, #9
}
   167de:	4770      	bx	lr
   167e0:	00030e57 	.word	0x00030e57

000167e4 <hci_encrypt_key_refresh_complete>:
{
   167e4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   167e6:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   167e8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
   167ec:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   167ee:	4630      	mov	r0, r6
   167f0:	f001 ff6e 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   167f4:	4604      	mov	r4, r0
   167f6:	b930      	cbnz	r0, 16806 <hci_encrypt_key_refresh_complete+0x22>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   167f8:	4632      	mov	r2, r6
   167fa:	4817      	ldr	r0, [pc, #92]	; (16858 <hci_encrypt_key_refresh_complete+0x74>)
}
   167fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16800:	2145      	movs	r1, #69	; 0x45
   16802:	f013 bc30 	b.w	2a066 <z_log_minimal_printk>
	if (status) {
   16806:	b165      	cbz	r5, 16822 <hci_encrypt_key_refresh_complete+0x3e>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16808:	4628      	mov	r0, r5
   1680a:	f7ff ffe3 	bl	167d4 <bt_security_err_get>
   1680e:	4629      	mov	r1, r5
   16810:	4602      	mov	r2, r0
   16812:	4620      	mov	r0, r4
   16814:	f002 f98c 	bl	18b30 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16818:	4620      	mov	r0, r4
}
   1681a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1681e:	f001 bf37 	b.w	18690 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   16822:	7883      	ldrb	r3, [r0, #2]
   16824:	2b01      	cmp	r3, #1
   16826:	d1ef      	bne.n	16808 <hci_encrypt_key_refresh_complete+0x24>
		bt_smp_update_keys(conn);
   16828:	f007 fd9a 	bl	1e360 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1682c:	4620      	mov	r0, r4
   1682e:	f014 fcdf 	bl	2b1f0 <update_sec_level>
   16832:	2800      	cmp	r0, #0
   16834:	d1e8      	bne.n	16808 <hci_encrypt_key_refresh_complete+0x24>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   16836:	2005      	movs	r0, #5
   16838:	f7ff ffcc 	bl	167d4 <bt_security_err_get>
   1683c:	2105      	movs	r1, #5
   1683e:	4602      	mov	r2, r0
   16840:	4620      	mov	r0, r4
   16842:	f002 f975 	bl	18b30 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   16846:	4805      	ldr	r0, [pc, #20]	; (1685c <hci_encrypt_key_refresh_complete+0x78>)
   16848:	2145      	movs	r1, #69	; 0x45
   1684a:	f013 fc0c 	bl	2a066 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   1684e:	2105      	movs	r1, #5
   16850:	4620      	mov	r0, r4
   16852:	f014 fef7 	bl	2b644 <bt_conn_disconnect>
   16856:	e7df      	b.n	16818 <hci_encrypt_key_refresh_complete+0x34>
   16858:	000309b1 	.word	0x000309b1
   1685c:	00030ae7 	.word	0x00030ae7

00016860 <hci_encrypt_change>:
{
   16860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   16862:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16864:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
   16868:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1686a:	4638      	mov	r0, r7
   1686c:	f001 ff30 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   16870:	4604      	mov	r4, r0
   16872:	b930      	cbnz	r0, 16882 <hci_encrypt_change+0x22>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   16874:	463a      	mov	r2, r7
   16876:	481c      	ldr	r0, [pc, #112]	; (168e8 <hci_encrypt_change+0x88>)
}
   16878:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1687c:	2145      	movs	r1, #69	; 0x45
   1687e:	f013 bbf2 	b.w	2a066 <z_log_minimal_printk>
	if (status) {
   16882:	b165      	cbz	r5, 1689e <hci_encrypt_change+0x3e>
		bt_conn_security_changed(conn, status,
   16884:	4628      	mov	r0, r5
   16886:	f7ff ffa5 	bl	167d4 <bt_security_err_get>
   1688a:	4629      	mov	r1, r5
   1688c:	4602      	mov	r2, r0
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1688e:	4620      	mov	r0, r4
   16890:	f002 f94e 	bl	18b30 <bt_conn_security_changed>
	bt_conn_unref(conn);
   16894:	4620      	mov	r0, r4
}
   16896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1689a:	f001 bef9 	b.w	18690 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
   1689e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
   168a0:	78f3      	ldrb	r3, [r6, #3]
   168a2:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   168a4:	2a01      	cmp	r2, #1
   168a6:	d005      	beq.n	168b4 <hci_encrypt_change+0x54>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   168a8:	2000      	movs	r0, #0
   168aa:	f7ff ff93 	bl	167d4 <bt_security_err_get>
   168ae:	2100      	movs	r1, #0
   168b0:	4602      	mov	r2, r0
   168b2:	e7ec      	b.n	1688e <hci_encrypt_change+0x2e>
		if (conn->encrypt) {
   168b4:	b10b      	cbz	r3, 168ba <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
   168b6:	f007 fd53 	bl	1e360 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   168ba:	4620      	mov	r0, r4
   168bc:	f014 fc98 	bl	2b1f0 <update_sec_level>
   168c0:	2800      	cmp	r0, #0
   168c2:	d1f1      	bne.n	168a8 <hci_encrypt_change+0x48>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   168c4:	2005      	movs	r0, #5
   168c6:	f7ff ff85 	bl	167d4 <bt_security_err_get>
   168ca:	2105      	movs	r1, #5
   168cc:	4602      	mov	r2, r0
   168ce:	4620      	mov	r0, r4
   168d0:	f002 f92e 	bl	18b30 <bt_conn_security_changed>
		LOG_ERR("Failed to set required security level");
   168d4:	4805      	ldr	r0, [pc, #20]	; (168ec <hci_encrypt_change+0x8c>)
   168d6:	2145      	movs	r1, #69	; 0x45
   168d8:	f013 fbc5 	bl	2a066 <z_log_minimal_printk>
		bt_conn_disconnect(conn, status);
   168dc:	2105      	movs	r1, #5
   168de:	4620      	mov	r0, r4
   168e0:	f014 feb0 	bl	2b644 <bt_conn_disconnect>
   168e4:	e7d6      	b.n	16894 <hci_encrypt_change+0x34>
   168e6:	bf00      	nop
   168e8:	000309b1 	.word	0x000309b1
   168ec:	00030ae7 	.word	0x00030ae7

000168f0 <bt_send>:
	return bt_dev.drv->send(buf);
   168f0:	4b02      	ldr	r3, [pc, #8]	; (168fc <bt_send+0xc>)
   168f2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   168f6:	695b      	ldr	r3, [r3, #20]
   168f8:	4718      	bx	r3
   168fa:	bf00      	nop
   168fc:	20000378 	.word	0x20000378

00016900 <bt_hci_cmd_send>:
{
   16900:	b538      	push	{r3, r4, r5, lr}
   16902:	4605      	mov	r5, r0
	if (!buf) {
   16904:	460c      	mov	r4, r1
   16906:	b919      	cbnz	r1, 16910 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   16908:	f7ff fc78 	bl	161fc <bt_hci_cmd_create>
		if (!buf) {
   1690c:	4604      	mov	r4, r0
   1690e:	b1c0      	cbz	r0, 16942 <bt_hci_cmd_send+0x42>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16910:	f640 4335 	movw	r3, #3125	; 0xc35
   16914:	429d      	cmp	r5, r3
   16916:	d10e      	bne.n	16936 <bt_hci_cmd_send+0x36>
		err = bt_send(buf);
   16918:	4620      	mov	r0, r4
   1691a:	f7ff ffe9 	bl	168f0 <bt_send>
		if (err) {
   1691e:	4605      	mov	r5, r0
   16920:	b168      	cbz	r0, 1693e <bt_hci_cmd_send+0x3e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16922:	4602      	mov	r2, r0
   16924:	2145      	movs	r1, #69	; 0x45
   16926:	4808      	ldr	r0, [pc, #32]	; (16948 <bt_hci_cmd_send+0x48>)
   16928:	f013 fb9d 	bl	2a066 <z_log_minimal_printk>
			net_buf_unref(buf);
   1692c:	4620      	mov	r0, r4
   1692e:	f008 fa97 	bl	1ee60 <net_buf_unref>
}
   16932:	4628      	mov	r0, r5
   16934:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16936:	4805      	ldr	r0, [pc, #20]	; (1694c <bt_hci_cmd_send+0x4c>)
   16938:	4621      	mov	r1, r4
   1693a:	f008 fa71 	bl	1ee20 <net_buf_put>
	return 0;
   1693e:	2500      	movs	r5, #0
   16940:	e7f7      	b.n	16932 <bt_hci_cmd_send+0x32>
			return -ENOBUFS;
   16942:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16946:	e7f4      	b.n	16932 <bt_hci_cmd_send+0x32>
   16948:	00030b12 	.word	0x00030b12
   1694c:	200004bc 	.word	0x200004bc

00016950 <le_ltk_request>:
{
   16950:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   16952:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16954:	8826      	ldrh	r6, [r4, #0]
   16956:	b2b7      	uxth	r7, r6
{
   16958:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1695a:	4638      	mov	r0, r7
   1695c:	f001 feb8 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   16960:	4605      	mov	r5, r0
   16962:	b938      	cbnz	r0, 16974 <le_ltk_request+0x24>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16964:	4821      	ldr	r0, [pc, #132]	; (169ec <le_ltk_request+0x9c>)
   16966:	463a      	mov	r2, r7
   16968:	2145      	movs	r1, #69	; 0x45
}
   1696a:	b007      	add	sp, #28
   1696c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16970:	f013 bb79 	b.w	2a066 <z_log_minimal_printk>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   16974:	af02      	add	r7, sp, #8
   16976:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1697a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1697e:	9701      	str	r7, [sp, #4]
   16980:	8961      	ldrh	r1, [r4, #10]
   16982:	9100      	str	r1, [sp, #0]
   16984:	f016 faed 	bl	2cf62 <bt_smp_request_ltk>
   16988:	b1f8      	cbz	r0, 169ca <le_ltk_request+0x7a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1698a:	2112      	movs	r1, #18
   1698c:	f242 001a 	movw	r0, #8218	; 0x201a
   16990:	f7ff fc34 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   16994:	4604      	mov	r4, r0
   16996:	b940      	cbnz	r0, 169aa <le_ltk_request+0x5a>
		LOG_ERR("Out of command buffers");
   16998:	4815      	ldr	r0, [pc, #84]	; (169f0 <le_ltk_request+0xa0>)
   1699a:	2145      	movs	r1, #69	; 0x45
   1699c:	f013 fb63 	bl	2a066 <z_log_minimal_printk>
	bt_conn_unref(conn);
   169a0:	4628      	mov	r0, r5
   169a2:	f001 fe75 	bl	18690 <bt_conn_unref>
}
   169a6:	b007      	add	sp, #28
   169a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   169aa:	2112      	movs	r1, #18
   169ac:	300c      	adds	r0, #12
   169ae:	f008 fb5d 	bl	1f06c <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   169b2:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   169b4:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   169b8:	2210      	movs	r2, #16
   169ba:	f014 fb1c 	bl	2aff6 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   169be:	4621      	mov	r1, r4
   169c0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   169c4:	f7ff ff9c 	bl	16900 <bt_hci_cmd_send>
   169c8:	e7ea      	b.n	169a0 <le_ltk_request+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   169ca:	2102      	movs	r1, #2
   169cc:	f242 001b 	movw	r0, #8219	; 0x201b
   169d0:	f7ff fc14 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   169d4:	4604      	mov	r4, r0
   169d6:	2800      	cmp	r0, #0
   169d8:	d0de      	beq.n	16998 <le_ltk_request+0x48>
   169da:	2102      	movs	r1, #2
   169dc:	300c      	adds	r0, #12
   169de:	f008 fb45 	bl	1f06c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   169e2:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   169e4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   169e6:	f242 001b 	movw	r0, #8219	; 0x201b
   169ea:	e7eb      	b.n	169c4 <le_ltk_request+0x74>
   169ec:	000307a5 	.word	0x000307a5
   169f0:	00030b39 	.word	0x00030b39

000169f4 <le_conn_param_neg_reply>:
{
   169f4:	b570      	push	{r4, r5, r6, lr}
   169f6:	4606      	mov	r6, r0
   169f8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   169fa:	f242 0021 	movw	r0, #8225	; 0x2021
   169fe:	2103      	movs	r1, #3
   16a00:	f7ff fbfc 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   16a04:	4604      	mov	r4, r0
   16a06:	b928      	cbnz	r0, 16a14 <le_conn_param_neg_reply+0x20>
}
   16a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   16a0c:	4808      	ldr	r0, [pc, #32]	; (16a30 <le_conn_param_neg_reply+0x3c>)
   16a0e:	2145      	movs	r1, #69	; 0x45
   16a10:	f013 bb29 	b.w	2a066 <z_log_minimal_printk>
   16a14:	2103      	movs	r1, #3
   16a16:	300c      	adds	r0, #12
   16a18:	f008 fb28 	bl	1f06c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   16a1c:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   16a1e:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16a20:	4621      	mov	r1, r4
   16a22:	f242 0021 	movw	r0, #8225	; 0x2021
}
   16a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   16a2a:	f7ff bf69 	b.w	16900 <bt_hci_cmd_send>
   16a2e:	bf00      	nop
   16a30:	00030b55 	.word	0x00030b55

00016a34 <le_conn_param_req>:
{
   16a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16a36:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a38:	78d9      	ldrb	r1, [r3, #3]
   16a3a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16a3c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a42:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16a46:	7959      	ldrb	r1, [r3, #5]
   16a48:	791a      	ldrb	r2, [r3, #4]
   16a4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a4e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16a52:	799a      	ldrb	r2, [r3, #6]
   16a54:	79d9      	ldrb	r1, [r3, #7]
   16a56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a5a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a5e:	7a1a      	ldrb	r2, [r3, #8]
   16a60:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16a62:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a64:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16a68:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16a6a:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   16a6e:	f001 fe2f 	bl	186d0 <bt_conn_lookup_handle>
	if (!conn) {
   16a72:	4606      	mov	r6, r0
   16a74:	b950      	cbnz	r0, 16a8c <le_conn_param_req+0x58>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16a76:	481d      	ldr	r0, [pc, #116]	; (16aec <le_conn_param_req+0xb8>)
   16a78:	2145      	movs	r1, #69	; 0x45
   16a7a:	4622      	mov	r2, r4
   16a7c:	f013 faf3 	bl	2a066 <z_log_minimal_printk>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16a80:	2102      	movs	r1, #2
   16a82:	4620      	mov	r0, r4
   16a84:	f7ff ffb6 	bl	169f4 <le_conn_param_neg_reply>
}
   16a88:	b003      	add	sp, #12
   16a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   16a8c:	4669      	mov	r1, sp
   16a8e:	f001 ffc7 	bl	18a20 <le_param_req>
   16a92:	b938      	cbnz	r0, 16aa4 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16a94:	211e      	movs	r1, #30
   16a96:	4620      	mov	r0, r4
   16a98:	f7ff ffac 	bl	169f4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16a9c:	4630      	mov	r0, r6
   16a9e:	f001 fdf7 	bl	18690 <bt_conn_unref>
   16aa2:	e7f1      	b.n	16a88 <le_conn_param_req+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16aa4:	210e      	movs	r1, #14
   16aa6:	f242 0020 	movw	r0, #8224	; 0x2020
   16aaa:	f7ff fba7 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   16aae:	4605      	mov	r5, r0
   16ab0:	2800      	cmp	r0, #0
   16ab2:	d0f3      	beq.n	16a9c <le_conn_param_req+0x68>
   16ab4:	210e      	movs	r1, #14
   16ab6:	300c      	adds	r0, #12
   16ab8:	f008 fad8 	bl	1f06c <net_buf_simple_add>
   16abc:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16abe:	220e      	movs	r2, #14
   16ac0:	2100      	movs	r1, #0
   16ac2:	f014 faa3 	bl	2b00c <memset>
	cp->handle = sys_cpu_to_le16(handle);
   16ac6:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16ac8:	f8bd 3000 	ldrh.w	r3, [sp]
   16acc:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16ace:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   16ad2:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16ad4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   16ad8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16ada:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   16ade:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16ae0:	4629      	mov	r1, r5
   16ae2:	f242 0020 	movw	r0, #8224	; 0x2020
   16ae6:	f7ff ff0b 	bl	16900 <bt_hci_cmd_send>
   16aea:	e7d7      	b.n	16a9c <le_conn_param_req+0x68>
   16aec:	000307a5 	.word	0x000307a5

00016af0 <hci_tx_thread>:
{
   16af0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16af4:	4f45      	ldr	r7, [pc, #276]	; (16c0c <hci_tx_thread+0x11c>)
		BT_ASSERT(err == 0);
   16af6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 16c10 <hci_tx_thread+0x120>
			ev_count += bt_conn_prepare_events(&events[1]);
   16afa:	f107 0914 	add.w	r9, r7, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   16afe:	68fb      	ldr	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b00:	4648      	mov	r0, r9
		events[0].state = K_POLL_STATE_NOT_READY;
   16b02:	f36f 3394 	bfc	r3, #14, #7
   16b06:	60fb      	str	r3, [r7, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b08:	f001 fd5e 	bl	185c8 <bt_conn_prepare_events>
   16b0c:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16b0e:	483f      	ldr	r0, [pc, #252]	; (16c0c <hci_tx_thread+0x11c>)
   16b10:	f04f 32ff 	mov.w	r2, #4294967295
   16b14:	f04f 33ff 	mov.w	r3, #4294967295
   16b18:	4629      	mov	r1, r5
   16b1a:	f00f fe29 	bl	26770 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16b1e:	b158      	cbz	r0, 16b38 <hci_tx_thread+0x48>
   16b20:	483c      	ldr	r0, [pc, #240]	; (16c14 <hci_tx_thread+0x124>)
   16b22:	f640 12e6 	movw	r2, #2534	; 0x9e6
   16b26:	4641      	mov	r1, r8
   16b28:	f013 fa8f 	bl	2a04a <assert_print>
   16b2c:	4040      	eors	r0, r0
   16b2e:	f380 8811 	msr	BASEPRI, r0
   16b32:	f04f 0003 	mov.w	r0, #3
   16b36:	df02      	svc	2
{
   16b38:	4e34      	ldr	r6, [pc, #208]	; (16c0c <hci_tx_thread+0x11c>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16b3a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 16c18 <hci_tx_thread+0x128>
	for (; count; ev++, count--) {
   16b3e:	b915      	cbnz	r5, 16b46 <hci_tx_thread+0x56>
	z_impl_k_yield();
   16b40:	f00e ff78 	bl	25a34 <z_impl_k_yield>
	while (1) {
   16b44:	e7db      	b.n	16afe <hci_tx_thread+0xe>
		switch (ev->state) {
   16b46:	68f2      	ldr	r2, [r6, #12]
   16b48:	f3c2 3286 	ubfx	r2, r2, #14, #7
   16b4c:	2a01      	cmp	r2, #1
   16b4e:	d94e      	bls.n	16bee <hci_tx_thread+0xfe>
   16b50:	2a04      	cmp	r2, #4
   16b52:	d156      	bne.n	16c02 <hci_tx_thread+0x112>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16b54:	7b33      	ldrb	r3, [r6, #12]
   16b56:	2b00      	cmp	r3, #0
   16b58:	d14c      	bne.n	16bf4 <hci_tx_thread+0x104>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16b5a:	4830      	ldr	r0, [pc, #192]	; (16c1c <hci_tx_thread+0x12c>)
   16b5c:	2200      	movs	r2, #0
   16b5e:	2300      	movs	r3, #0
   16b60:	f016 fc3d 	bl	2d3de <net_buf_get>
	BT_ASSERT(buf);
   16b64:	4604      	mov	r4, r0
   16b66:	b958      	cbnz	r0, 16b80 <hci_tx_thread+0x90>
   16b68:	482a      	ldr	r0, [pc, #168]	; (16c14 <hci_tx_thread+0x124>)
   16b6a:	f44f 6218 	mov.w	r2, #2432	; 0x980
   16b6e:	4641      	mov	r1, r8
   16b70:	f013 fa6b 	bl	2a04a <assert_print>
   16b74:	4040      	eors	r0, r0
   16b76:	f380 8811 	msr	BASEPRI, r0
   16b7a:	f04f 0003 	mov.w	r0, #3
   16b7e:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   16b80:	f8df b09c 	ldr.w	fp, [pc, #156]	; 16c20 <hci_tx_thread+0x130>
	return z_impl_k_sem_take(sem, timeout);
   16b84:	4827      	ldr	r0, [pc, #156]	; (16c24 <hci_tx_thread+0x134>)
   16b86:	f04f 33ff 	mov.w	r3, #4294967295
   16b8a:	f04f 32ff 	mov.w	r2, #4294967295
   16b8e:	f00d fcc7 	bl	24520 <z_impl_k_sem_take>
   16b92:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   16b96:	b153      	cbz	r3, 16bae <hci_tx_thread+0xbe>
		LOG_ERR("Uncleared pending sent_cmd");
   16b98:	4823      	ldr	r0, [pc, #140]	; (16c28 <hci_tx_thread+0x138>)
   16b9a:	2145      	movs	r1, #69	; 0x45
   16b9c:	f013 fa63 	bl	2a066 <z_log_minimal_printk>
		net_buf_unref(bt_dev.sent_cmd);
   16ba0:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   16ba4:	f008 f95c 	bl	1ee60 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16ba8:	2300      	movs	r3, #0
   16baa:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16bae:	4620      	mov	r0, r4
   16bb0:	f008 f998 	bl	1eee4 <net_buf_ref>
   16bb4:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   16bb8:	4620      	mov	r0, r4
   16bba:	f7ff fe99 	bl	168f0 <bt_send>
	if (err) {
   16bbe:	4602      	mov	r2, r0
   16bc0:	b1a8      	cbz	r0, 16bee <hci_tx_thread+0xfe>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16bc2:	481a      	ldr	r0, [pc, #104]	; (16c2c <hci_tx_thread+0x13c>)
   16bc4:	2145      	movs	r1, #69	; 0x45
   16bc6:	f013 fa4e 	bl	2a066 <z_log_minimal_printk>
	z_impl_k_sem_give(sem);
   16bca:	4816      	ldr	r0, [pc, #88]	; (16c24 <hci_tx_thread+0x134>)
   16bcc:	f00d fc6e 	bl	244ac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16bd0:	4620      	mov	r0, r4
   16bd2:	f007 ff6b 	bl	1eaac <net_buf_id>
   16bd6:	4b16      	ldr	r3, [pc, #88]	; (16c30 <hci_tx_thread+0x140>)
   16bd8:	220c      	movs	r2, #12
   16bda:	fb02 3000 	mla	r0, r2, r0, r3
   16bde:	211f      	movs	r1, #31
   16be0:	8840      	ldrh	r0, [r0, #2]
   16be2:	4622      	mov	r2, r4
   16be4:	f7ff f9a4 	bl	15f30 <hci_cmd_done>
		net_buf_unref(buf);
   16be8:	4620      	mov	r0, r4
   16bea:	f008 f939 	bl	1ee60 <net_buf_unref>
	for (; count; ev++, count--) {
   16bee:	3614      	adds	r6, #20
   16bf0:	3d01      	subs	r5, #1
   16bf2:	e7a4      	b.n	16b3e <hci_tx_thread+0x4e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16bf4:	2b01      	cmp	r3, #1
   16bf6:	d1fa      	bne.n	16bee <hci_tx_thread+0xfe>
					conn = CONTAINER_OF(ev->fifo,
   16bf8:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   16bfa:	3838      	subs	r0, #56	; 0x38
   16bfc:	f002 fa52 	bl	190a4 <bt_conn_process_tx>
   16c00:	e7f5      	b.n	16bee <hci_tx_thread+0xfe>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16c02:	2157      	movs	r1, #87	; 0x57
   16c04:	4650      	mov	r0, sl
   16c06:	f013 fa2e 	bl	2a066 <z_log_minimal_printk>
   16c0a:	e7f0      	b.n	16bee <hci_tx_thread+0xfe>
   16c0c:	200005a0 	.word	0x200005a0
   16c10:	00030865 	.word	0x00030865
   16c14:	0002f2b5 	.word	0x0002f2b5
   16c18:	00030b94 	.word	0x00030b94
   16c1c:	200004bc 	.word	0x200004bc
   16c20:	20000378 	.word	0x20000378
   16c24:	20000498 	.word	0x20000498
   16c28:	00030b74 	.word	0x00030b74
   16c2c:	00030b12 	.word	0x00030b12
   16c30:	2000311c 	.word	0x2000311c

00016c34 <hci_event_prio>:
{
   16c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16c38:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16c3a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   16c3e:	4630      	mov	r0, r6
   16c40:	f016 fbe5 	bl	2d40e <net_buf_simple_headroom>
	state->len = buf->len;
   16c44:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c48:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16c4c:	4605      	mov	r5, r0
   16c4e:	d80b      	bhi.n	16c68 <hci_event_prio+0x34>
   16c50:	491b      	ldr	r1, [pc, #108]	; (16cc0 <hci_event_prio+0x8c>)
   16c52:	481c      	ldr	r0, [pc, #112]	; (16cc4 <hci_event_prio+0x90>)
   16c54:	f640 527b 	movw	r2, #3451	; 0xd7b
   16c58:	f013 f9f7 	bl	2a04a <assert_print>
   16c5c:	4040      	eors	r0, r0
   16c5e:	f380 8811 	msr	BASEPRI, r0
   16c62:	f04f 0003 	mov.w	r0, #3
   16c66:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16c68:	4630      	mov	r0, r6
   16c6a:	2102      	movs	r1, #2
   16c6c:	f008 f9e4 	bl	1f038 <net_buf_simple_pull_mem>
   16c70:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c72:	7800      	ldrb	r0, [r0, #0]
   16c74:	f014 faaa 	bl	2b1cc <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16c78:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16c7a:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16c7c:	d40b      	bmi.n	16c96 <hci_event_prio+0x62>
   16c7e:	4910      	ldr	r1, [pc, #64]	; (16cc0 <hci_event_prio+0x8c>)
   16c80:	4810      	ldr	r0, [pc, #64]	; (16cc4 <hci_event_prio+0x90>)
   16c82:	f640 527f 	movw	r2, #3455	; 0xd7f
   16c86:	f013 f9e0 	bl	2a04a <assert_print>
   16c8a:	4040      	eors	r0, r0
   16c8c:	f380 8811 	msr	BASEPRI, r0
   16c90:	f04f 0003 	mov.w	r0, #3
   16c94:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16c96:	2305      	movs	r3, #5
   16c98:	4a0b      	ldr	r2, [pc, #44]	; (16cc8 <hci_event_prio+0x94>)
   16c9a:	7838      	ldrb	r0, [r7, #0]
   16c9c:	4621      	mov	r1, r4
   16c9e:	f7ff f841 	bl	15d24 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16ca2:	07b3      	lsls	r3, r6, #30
   16ca4:	d507      	bpl.n	16cb6 <hci_event_prio+0x82>
	buf->data = buf->__buf + state->offset;
   16ca6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16ca8:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16cac:	fa13 f585 	uxtah	r5, r3, r5
   16cb0:	60e5      	str	r5, [r4, #12]
}
   16cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16cb6:	4620      	mov	r0, r4
}
   16cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16cbc:	f008 b8d0 	b.w	1ee60 <net_buf_unref>
   16cc0:	00030865 	.word	0x00030865
   16cc4:	0002f2b5 	.word	0x0002f2b5
   16cc8:	0002e8a4 	.word	0x0002e8a4

00016ccc <bt_recv>:
{
   16ccc:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16cce:	7e02      	ldrb	r2, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   16cd0:	2a01      	cmp	r2, #1
{
   16cd2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   16cd4:	d005      	beq.n	16ce2 <bt_recv+0x16>
   16cd6:	2a03      	cmp	r2, #3
   16cd8:	d111      	bne.n	16cfe <bt_recv+0x32>
			rx_queue_put(buf);
   16cda:	f7fe ffc7 	bl	15c6c <rx_queue_put>
		return 0;
   16cde:	2000      	movs	r0, #0
}
   16ce0:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16ce2:	68c3      	ldr	r3, [r0, #12]
   16ce4:	7818      	ldrb	r0, [r3, #0]
   16ce6:	f014 fa71 	bl	2b1cc <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16cea:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16cec:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16cee:	d502      	bpl.n	16cf6 <bt_recv+0x2a>
			hci_event_prio(buf);
   16cf0:	4620      	mov	r0, r4
   16cf2:	f7ff ff9f 	bl	16c34 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16cf6:	07ab      	lsls	r3, r5, #30
   16cf8:	d5f1      	bpl.n	16cde <bt_recv+0x12>
			rx_queue_put(buf);
   16cfa:	4620      	mov	r0, r4
   16cfc:	e7ed      	b.n	16cda <bt_recv+0xe>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16cfe:	4805      	ldr	r0, [pc, #20]	; (16d14 <bt_recv+0x48>)
   16d00:	2145      	movs	r1, #69	; 0x45
   16d02:	f013 f9b0 	bl	2a066 <z_log_minimal_printk>
		net_buf_unref(buf);
   16d06:	4620      	mov	r0, r4
   16d08:	f008 f8aa 	bl	1ee60 <net_buf_unref>
		return -EINVAL;
   16d0c:	f06f 0015 	mvn.w	r0, #21
   16d10:	e7e6      	b.n	16ce0 <bt_recv+0x14>
   16d12:	bf00      	nop
   16d14:	00030bba 	.word	0x00030bba

00016d18 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16d18:	4a08      	ldr	r2, [pc, #32]	; (16d3c <bt_hci_driver_register+0x24>)
{
   16d1a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16d1c:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   16d20:	b930      	cbnz	r0, 16d30 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16d22:	68d9      	ldr	r1, [r3, #12]
   16d24:	b139      	cbz	r1, 16d36 <bt_hci_driver_register+0x1e>
   16d26:	6959      	ldr	r1, [r3, #20]
   16d28:	b129      	cbz	r1, 16d36 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16d2a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   16d2e:	4770      	bx	lr
		return -EALREADY;
   16d30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16d34:	4770      	bx	lr
		return -EINVAL;
   16d36:	f06f 0015 	mvn.w	r0, #21
}
   16d3a:	4770      	bx	lr
   16d3c:	20000378 	.word	0x20000378

00016d40 <bt_finalize_init>:
{
   16d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16d42:	2104      	movs	r1, #4
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d44:	4c24      	ldr	r4, [pc, #144]	; (16dd8 <bt_finalize_init+0x98>)
   16d46:	4825      	ldr	r0, [pc, #148]	; (16ddc <bt_finalize_init+0x9c>)
   16d48:	4d25      	ldr	r5, [pc, #148]	; (16de0 <bt_finalize_init+0xa0>)
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16d4a:	4f26      	ldr	r7, [pc, #152]	; (16de4 <bt_finalize_init+0xa4>)
   16d4c:	f014 fa6c 	bl	2b228 <atomic_or>
		bt_le_scan_update(false);
   16d50:	2000      	movs	r0, #0
   16d52:	f000 fec9 	bl	17ae8 <bt_le_scan_update>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16d56:	79e2      	ldrb	r2, [r4, #7]
   16d58:	4b23      	ldr	r3, [pc, #140]	; (16de8 <bt_finalize_init+0xa8>)
   16d5a:	4620      	mov	r0, r4
   16d5c:	2a01      	cmp	r2, #1
   16d5e:	bf88      	it	hi
   16d60:	461d      	movhi	r5, r3
   16d62:	f7fe fcdf 	bl	15724 <bt_addr_le_str>
   16d66:	462a      	mov	r2, r5
   16d68:	4603      	mov	r3, r0
   16d6a:	2149      	movs	r1, #73	; 0x49
   16d6c:	481f      	ldr	r0, [pc, #124]	; (16dec <bt_finalize_init+0xac>)
   16d6e:	f013 f97a 	bl	2a066 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   16d72:	4626      	mov	r6, r4
   16d74:	2501      	movs	r5, #1
   16d76:	79e3      	ldrb	r3, [r4, #7]
   16d78:	429d      	cmp	r5, r3
   16d7a:	f106 0607 	add.w	r6, r6, #7
   16d7e:	db20      	blt.n	16dc2 <bt_finalize_init+0x82>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16d80:	f894 5068 	ldrb.w	r5, [r4, #104]	; 0x68
   16d84:	4628      	mov	r0, r5
   16d86:	f7fe fef7 	bl	15b78 <ver_str>
   16d8a:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
   16d8e:	9301      	str	r3, [sp, #4]
   16d90:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   16d94:	9300      	str	r3, [sp, #0]
   16d96:	4602      	mov	r2, r0
   16d98:	462b      	mov	r3, r5
   16d9a:	2149      	movs	r1, #73	; 0x49
   16d9c:	4814      	ldr	r0, [pc, #80]	; (16df0 <bt_finalize_init+0xb0>)
   16d9e:	f013 f962 	bl	2a066 <z_log_minimal_printk>
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   16da2:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
   16da6:	4628      	mov	r0, r5
   16da8:	f7fe fee6 	bl	15b78 <ver_str>
   16dac:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   16db0:	9300      	str	r3, [sp, #0]
   16db2:	4602      	mov	r2, r0
   16db4:	462b      	mov	r3, r5
   16db6:	480f      	ldr	r0, [pc, #60]	; (16df4 <bt_finalize_init+0xb4>)
   16db8:	2149      	movs	r1, #73	; 0x49
   16dba:	f013 f954 	bl	2a066 <z_log_minimal_printk>
}
   16dbe:	b003      	add	sp, #12
   16dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16dc2:	4630      	mov	r0, r6
   16dc4:	f7fe fcae 	bl	15724 <bt_addr_le_str>
   16dc8:	462a      	mov	r2, r5
   16dca:	4603      	mov	r3, r0
   16dcc:	2149      	movs	r1, #73	; 0x49
   16dce:	4638      	mov	r0, r7
   16dd0:	f013 f949 	bl	2a066 <z_log_minimal_printk>
	for (i = 1; i < bt_dev.id_count; i++) {
   16dd4:	3501      	adds	r5, #1
   16dd6:	e7ce      	b.n	16d76 <bt_finalize_init+0x36>
   16dd8:	20000378 	.word	0x20000378
   16ddc:	20000444 	.word	0x20000444
   16de0:	0003306a 	.word	0x0003306a
   16de4:	00030beb 	.word	0x00030beb
   16de8:	00030bd3 	.word	0x00030bd3
   16dec:	00030bd7 	.word	0x00030bd7
   16df0:	00030c01 	.word	0x00030c01
   16df4:	00030c44 	.word	0x00030c44

00016df8 <init_work>:
{
   16df8:	b510      	push	{r4, lr}
	err = bt_init();
   16dfa:	f7fa fa15 	bl	11228 <bt_init>
	if (ready_cb) {
   16dfe:	4b03      	ldr	r3, [pc, #12]	; (16e0c <init_work+0x14>)
   16e00:	681b      	ldr	r3, [r3, #0]
   16e02:	b113      	cbz	r3, 16e0a <init_work+0x12>
}
   16e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   16e08:	4718      	bx	r3
}
   16e0a:	bd10      	pop	{r4, pc}
   16e0c:	20003134 	.word	0x20003134

00016e10 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   16e10:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   16e12:	4d35      	ldr	r5, [pc, #212]	; (16ee8 <bt_enable+0xd8>)
   16e14:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   16e18:	b088      	sub	sp, #32
   16e1a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   16e1c:	b943      	cbnz	r3, 16e30 <bt_enable+0x20>
		LOG_ERR("No HCI driver registered");
   16e1e:	4833      	ldr	r0, [pc, #204]	; (16eec <bt_enable+0xdc>)
   16e20:	2145      	movs	r1, #69	; 0x45
   16e22:	f013 f920 	bl	2a066 <z_log_minimal_printk>
		return -ENODEV;
   16e26:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   16e2a:	4620      	mov	r0, r4
   16e2c:	b008      	add	sp, #32
   16e2e:	bd70      	pop	{r4, r5, r6, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16e30:	f06f 0102 	mvn.w	r1, #2
   16e34:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   16e38:	f014 fa05 	bl	2b246 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16e3c:	2101      	movs	r1, #1
   16e3e:	f014 f9f3 	bl	2b228 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   16e42:	07c3      	lsls	r3, r0, #31
   16e44:	d44d      	bmi.n	16ee2 <bt_enable+0xd2>
		err = bt_settings_init();
   16e46:	f7fe fdc1 	bl	159cc <bt_settings_init>
		if (err) {
   16e4a:	4604      	mov	r4, r0
   16e4c:	2800      	cmp	r0, #0
   16e4e:	d1ec      	bne.n	16e2a <bt_enable+0x1a>
	ready_cb = cb;
   16e50:	4b27      	ldr	r3, [pc, #156]	; (16ef0 <bt_enable+0xe0>)
   16e52:	601e      	str	r6, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16e54:	2201      	movs	r2, #1
   16e56:	4611      	mov	r1, r2
   16e58:	f505 7090 	add.w	r0, r5, #288	; 0x120
   16e5c:	f016 ffa9 	bl	2ddb2 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   16e60:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   16e64:	f016 ff83 	bl	2dd6e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16e68:	2200      	movs	r2, #0
   16e6a:	2300      	movs	r3, #0
   16e6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16e70:	f06f 0308 	mvn.w	r3, #8
   16e74:	e9cd 4302 	strd	r4, r3, [sp, #8]
   16e78:	e9cd 4400 	strd	r4, r4, [sp]
   16e7c:	4b1d      	ldr	r3, [pc, #116]	; (16ef4 <bt_enable+0xe4>)
   16e7e:	491e      	ldr	r1, [pc, #120]	; (16ef8 <bt_enable+0xe8>)
   16e80:	9404      	str	r4, [sp, #16]
   16e82:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   16e86:	481d      	ldr	r0, [pc, #116]	; (16efc <bt_enable+0xec>)
   16e88:	f00d f800 	bl	23e8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16e8c:	491c      	ldr	r1, [pc, #112]	; (16f00 <bt_enable+0xf0>)
   16e8e:	481b      	ldr	r0, [pc, #108]	; (16efc <bt_enable+0xec>)
   16e90:	f016 ff44 	bl	2dd1c <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   16e94:	481b      	ldr	r0, [pc, #108]	; (16f04 <bt_enable+0xf4>)
   16e96:	f00d fe39 	bl	24b0c <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   16e9a:	491b      	ldr	r1, [pc, #108]	; (16f08 <bt_enable+0xf8>)
   16e9c:	4819      	ldr	r0, [pc, #100]	; (16f04 <bt_enable+0xf4>)
   16e9e:	9400      	str	r4, [sp, #0]
   16ea0:	f06f 0307 	mvn.w	r3, #7
   16ea4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
   16ea8:	f00d fe46 	bl	24b38 <k_work_queue_start>
   16eac:	4917      	ldr	r1, [pc, #92]	; (16f0c <bt_enable+0xfc>)
   16eae:	4815      	ldr	r0, [pc, #84]	; (16f04 <bt_enable+0xf4>)
   16eb0:	f016 ff34 	bl	2dd1c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   16eb4:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16eb8:	68db      	ldr	r3, [r3, #12]
   16eba:	4798      	blx	r3
	if (err) {
   16ebc:	4604      	mov	r4, r0
   16ebe:	b128      	cbz	r0, 16ecc <bt_enable+0xbc>
		LOG_ERR("HCI driver open failed (%d)", err);
   16ec0:	4602      	mov	r2, r0
   16ec2:	2145      	movs	r1, #69	; 0x45
   16ec4:	4812      	ldr	r0, [pc, #72]	; (16f10 <bt_enable+0x100>)
   16ec6:	f013 f8ce 	bl	2a066 <z_log_minimal_printk>
		return err;
   16eca:	e7ae      	b.n	16e2a <bt_enable+0x1a>
	if (!cb) {
   16ecc:	b926      	cbnz	r6, 16ed8 <bt_enable+0xc8>
}
   16ece:	b008      	add	sp, #32
   16ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   16ed4:	f7fa b9a8 	b.w	11228 <bt_init>
	k_work_submit(&bt_dev.init);
   16ed8:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   16edc:	f00d fe10 	bl	24b00 <k_work_submit>
	return 0;
   16ee0:	e7a3      	b.n	16e2a <bt_enable+0x1a>
		return -EALREADY;
   16ee2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   16ee6:	e7a0      	b.n	16e2a <bt_enable+0x1a>
   16ee8:	20000378 	.word	0x20000378
   16eec:	00030de5 	.word	0x00030de5
   16ef0:	20003134 	.word	0x20003134
   16ef4:	00016af1 	.word	0x00016af1
   16ef8:	20005140 	.word	0x20005140
   16efc:	20001b50 	.word	0x20001b50
   16f00:	00030e03 	.word	0x00030e03
   16f04:	20001bd0 	.word	0x20001bd0
   16f08:	20005780 	.word	0x20005780
   16f0c:	00030e09 	.word	0x00030e09
   16f10:	00030e0f 	.word	0x00030e0f

00016f14 <bt_is_ready>:
   16f14:	4b04      	ldr	r3, [pc, #16]	; (16f28 <bt_is_ready+0x14>)
   16f16:	f3bf 8f5b 	dmb	ish
   16f1a:	6818      	ldr	r0, [r3, #0]
   16f1c:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   16f20:	f3c0 0080 	ubfx	r0, r0, #2, #1
   16f24:	4770      	bx	lr
   16f26:	bf00      	nop
   16f28:	20000444 	.word	0x20000444

00016f2c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   16f2c:	4800      	ldr	r0, [pc, #0]	; (16f30 <bt_get_name+0x4>)
   16f2e:	4770      	bx	lr
   16f30:	00030e30 	.word	0x00030e30

00016f34 <bt_data_parse>:
#endif

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   16f34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16f36:	4604      	mov	r4, r0
   16f38:	460e      	mov	r6, r1
   16f3a:	4617      	mov	r7, r2
	while (ad->len > 1) {
   16f3c:	88a3      	ldrh	r3, [r4, #4]
   16f3e:	2b01      	cmp	r3, #1
   16f40:	d801      	bhi.n	16f46 <bt_data_parse+0x12>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   16f42:	b003      	add	sp, #12
   16f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = net_buf_simple_pull_u8(ad);
   16f46:	4620      	mov	r0, r4
   16f48:	f016 fa51 	bl	2d3ee <net_buf_simple_pull_u8>
		if (len == 0U) {
   16f4c:	4605      	mov	r5, r0
   16f4e:	2800      	cmp	r0, #0
   16f50:	d0f7      	beq.n	16f42 <bt_data_parse+0xe>
		if (len > ad->len) {
   16f52:	88a3      	ldrh	r3, [r4, #4]
   16f54:	4283      	cmp	r3, r0
   16f56:	d206      	bcs.n	16f66 <bt_data_parse+0x32>
			LOG_WRN("malformed advertising data");
   16f58:	480d      	ldr	r0, [pc, #52]	; (16f90 <bt_data_parse+0x5c>)
   16f5a:	2157      	movs	r1, #87	; 0x57
}
   16f5c:	b003      	add	sp, #12
   16f5e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			LOG_WRN("malformed advertising data");
   16f62:	f013 b880 	b.w	2a066 <z_log_minimal_printk>
		data.type = net_buf_simple_pull_u8(ad);
   16f66:	4620      	mov	r0, r4
   16f68:	f016 fa41 	bl	2d3ee <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   16f6c:	3d01      	subs	r5, #1
		data.data = ad->data;
   16f6e:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   16f70:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   16f74:	4639      	mov	r1, r7
   16f76:	4668      	mov	r0, sp
		data.data_len = len - 1;
   16f78:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   16f7c:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   16f7e:	47b0      	blx	r6
   16f80:	2800      	cmp	r0, #0
   16f82:	d0de      	beq.n	16f42 <bt_data_parse+0xe>
		net_buf_simple_pull(ad, len - 1);
   16f84:	4629      	mov	r1, r5
   16f86:	4620      	mov	r0, r4
   16f88:	f008 f83c 	bl	1f004 <net_buf_simple_pull>
   16f8c:	e7d6      	b.n	16f3c <bt_data_parse+0x8>
   16f8e:	bf00      	nop
   16f90:	00030e37 	.word	0x00030e37

00016f94 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   16f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   16f96:	4f0a      	ldr	r7, [pc, #40]	; (16fc0 <id_find+0x2c>)
{
   16f98:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   16f9a:	2500      	movs	r5, #0
   16f9c:	79fb      	ldrb	r3, [r7, #7]
   16f9e:	b2ec      	uxtb	r4, r5
   16fa0:	42a3      	cmp	r3, r4
   16fa2:	d802      	bhi.n	16faa <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   16fa4:	f06f 0001 	mvn.w	r0, #1
   16fa8:	e009      	b.n	16fbe <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   16faa:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   16fae:	4439      	add	r1, r7
   16fb0:	4630      	mov	r0, r6
   16fb2:	f014 f9f4 	bl	2b39e <bt_addr_le_eq>
   16fb6:	3501      	adds	r5, #1
   16fb8:	2800      	cmp	r0, #0
   16fba:	d0ef      	beq.n	16f9c <id_find+0x8>
   16fbc:	4620      	mov	r0, r4
}
   16fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16fc0:	20000378 	.word	0x20000378

00016fc4 <le_rpa_timeout_submit>:
{
   16fc4:	b570      	push	{r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   16fc6:	4d0d      	ldr	r5, [pc, #52]	; (16ffc <le_rpa_timeout_submit+0x38>)
   16fc8:	f8b5 41a8 	ldrh.w	r4, [r5, #424]	; 0x1a8
   16fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16fd0:	435c      	muls	r4, r3
			return ((t * to_hz + off) / from_hz);
   16fd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   16fd6:	f240 30e7 	movw	r0, #999	; 0x3e7
   16fda:	2100      	movs	r1, #0
   16fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16fe0:	2300      	movs	r3, #0
   16fe2:	fbe4 0106 	umlal	r0, r1, r4, r6
   16fe6:	f7e9 f88b 	bl	100 <__aeabi_uldivmod>
   16fea:	4602      	mov	r2, r0
   16fec:	460b      	mov	r3, r1
   16fee:	f505 70bc 	add.w	r0, r5, #376	; 0x178
}
   16ff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)k_work_schedule(&bt_dev.rpa_update, K_SECONDS(bt_dev.rpa_timeout));
   16ff6:	f00d be85 	b.w	24d04 <k_work_schedule>
   16ffa:	bf00      	nop
   16ffc:	20000378 	.word	0x20000378

00017000 <hci_id_add>:
{
   17000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17004:	4688      	mov	r8, r1
   17006:	4617      	mov	r7, r2
	if (id >= CONFIG_BT_ID_MAX) {
   17008:	4605      	mov	r5, r0
   1700a:	bb08      	cbnz	r0, 17050 <hci_id_add+0x50>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1700c:	2127      	movs	r1, #39	; 0x27
   1700e:	f242 0027 	movw	r0, #8231	; 0x2027
   17012:	f7ff f8f3 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   17016:	4604      	mov	r4, r0
   17018:	b1f0      	cbz	r0, 17058 <hci_id_add+0x58>
	return net_buf_simple_add(&buf->b, len);
   1701a:	2127      	movs	r1, #39	; 0x27
   1701c:	300c      	adds	r0, #12
   1701e:	f008 f825 	bl	1f06c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17022:	4641      	mov	r1, r8
   17024:	4606      	mov	r6, r0
   17026:	f014 f9c2 	bl	2b3ae <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1702a:	4639      	mov	r1, r7
   1702c:	2210      	movs	r2, #16
   1702e:	1df0      	adds	r0, r6, #7
   17030:	f013 ffe1 	bl	2aff6 <memcpy>
	(void)memcpy(cp->local_irk, &bt_dev.irk[id], 16);
   17034:	490a      	ldr	r1, [pc, #40]	; (17060 <hci_id_add+0x60>)
   17036:	2210      	movs	r2, #16
   17038:	f106 0017 	add.w	r0, r6, #23
   1703c:	f013 ffdb 	bl	2aff6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   17040:	462a      	mov	r2, r5
   17042:	4621      	mov	r1, r4
   17044:	f242 0027 	movw	r0, #8231	; 0x2027
}
   17048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1704c:	f7ff b920 	b.w	16290 <bt_hci_cmd_send_sync>
		return -EINVAL;
   17050:	f06f 0015 	mvn.w	r0, #21
}
   17054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   17058:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1705c:	e7fa      	b.n	17054 <hci_id_add+0x54>
   1705e:	bf00      	nop
   17060:	200004dc 	.word	0x200004dc

00017064 <atomic_get.constprop.0>:
   17064:	4b03      	ldr	r3, [pc, #12]	; (17074 <atomic_get.constprop.0+0x10>)
   17066:	f3bf 8f5b 	dmb	ish
   1706a:	6818      	ldr	r0, [r3, #0]
   1706c:	f3bf 8f5b 	dmb	ish
}
   17070:	4770      	bx	lr
   17072:	bf00      	nop
   17074:	20000444 	.word	0x20000444

00017078 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   17078:	b5f0      	push	{r4, r5, r6, r7, lr}
   1707a:	4604      	mov	r4, r0
   1707c:	b085      	sub	sp, #20
   1707e:	4616      	mov	r6, r2
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17080:	460d      	mov	r5, r1
   17082:	b329      	cbz	r1, 170d0 <id_create+0x58>
   17084:	4928      	ldr	r1, [pc, #160]	; (17128 <id_create+0xb0>)
   17086:	4628      	mov	r0, r5
   17088:	f014 f989 	bl	2b39e <bt_addr_le_eq>
   1708c:	bb00      	cbnz	r0, 170d0 <id_create+0x58>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1708e:	4b27      	ldr	r3, [pc, #156]	; (1712c <id_create+0xb4>)
   17090:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   17094:	4629      	mov	r1, r5
   17096:	4418      	add	r0, r3
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   17098:	f014 f989 	bl	2b3ae <bt_addr_le_copy>
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	{
		uint8_t zero_irk[16] = { 0 };
   1709c:	2300      	movs	r3, #0
   1709e:	e9cd 3300 	strd	r3, r3, [sp]
   170a2:	e9cd 3302 	strd	r3, r3, [sp, #8]

		if (irk && memcmp(irk, zero_irk, 16)) {
			memcpy(&bt_dev.irk[id], irk, 16);
   170a6:	4b22      	ldr	r3, [pc, #136]	; (17130 <id_create+0xb8>)
   170a8:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
   170ac:	b336      	cbz	r6, 170fc <id_create+0x84>
   170ae:	2210      	movs	r2, #16
   170b0:	4669      	mov	r1, sp
   170b2:	4630      	mov	r0, r6
   170b4:	f013 ff78 	bl	2afa8 <memcmp>
   170b8:	b340      	cbz	r0, 1710c <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
   170ba:	2210      	movs	r2, #16
   170bc:	4631      	mov	r1, r6
   170be:	4620      	mov	r0, r4
			if (err) {
				return err;
			}

			if (irk) {
				memcpy(irk, &bt_dev.irk[id], 16);
   170c0:	f013 ff99 	bl	2aff6 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   170c4:	f7ff ffce 	bl	17064 <atomic_get.constprop.0>
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   170c8:	0743      	lsls	r3, r0, #29
   170ca:	d429      	bmi.n	17120 <id_create+0xa8>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   170cc:	2000      	movs	r0, #0
   170ce:	e01b      	b.n	17108 <id_create+0x90>
			err = bt_addr_le_create_static(&new_addr);
   170d0:	4668      	mov	r0, sp
   170d2:	f014 f86d 	bl	2b1b0 <bt_addr_le_create_static>
			if (err) {
   170d6:	b9b8      	cbnz	r0, 17108 <id_create+0x90>
		} while (id_find(&new_addr) >= 0);
   170d8:	4668      	mov	r0, sp
   170da:	f7ff ff5b 	bl	16f94 <id_find>
   170de:	2800      	cmp	r0, #0
   170e0:	daf6      	bge.n	170d0 <id_create+0x58>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   170e2:	4b12      	ldr	r3, [pc, #72]	; (1712c <id_create+0xb4>)
   170e4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   170e8:	441f      	add	r7, r3
   170ea:	4669      	mov	r1, sp
   170ec:	4638      	mov	r0, r7
   170ee:	f014 f95e 	bl	2b3ae <bt_addr_le_copy>
		if (addr) {
   170f2:	2d00      	cmp	r5, #0
   170f4:	d0d2      	beq.n	1709c <id_create+0x24>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   170f6:	4639      	mov	r1, r7
   170f8:	4628      	mov	r0, r5
   170fa:	e7cd      	b.n	17098 <id_create+0x20>
			err = bt_rand(&bt_dev.irk[id], 16);
   170fc:	2110      	movs	r1, #16
   170fe:	4620      	mov	r0, r4
   17100:	f00a fe7c 	bl	21dfc <bt_rand>
			if (err) {
   17104:	2800      	cmp	r0, #0
   17106:	d0dd      	beq.n	170c4 <id_create+0x4c>
}
   17108:	b005      	add	sp, #20
   1710a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = bt_rand(&bt_dev.irk[id], 16);
   1710c:	2110      	movs	r1, #16
   1710e:	4620      	mov	r0, r4
   17110:	f00a fe74 	bl	21dfc <bt_rand>
			if (err) {
   17114:	2800      	cmp	r0, #0
   17116:	d1f7      	bne.n	17108 <id_create+0x90>
				memcpy(irk, &bt_dev.irk[id], 16);
   17118:	2210      	movs	r2, #16
   1711a:	4621      	mov	r1, r4
   1711c:	4630      	mov	r0, r6
   1711e:	e7cf      	b.n	170c0 <id_create+0x48>
		bt_settings_save_id();
   17120:	f7fe fc0e 	bl	15940 <bt_settings_save_id>
   17124:	e7d2      	b.n	170cc <id_create+0x54>
   17126:	bf00      	nop
   17128:	0003055c 	.word	0x0003055c
   1712c:	20000378 	.word	0x20000378
   17130:	200004dc 	.word	0x200004dc

00017134 <atomic_or.constprop.0.isra.0>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17134:	4b06      	ldr	r3, [pc, #24]	; (17150 <atomic_or.constprop.0.isra.0+0x1c>)
   17136:	f3bf 8f5b 	dmb	ish
   1713a:	e853 1f00 	ldrex	r1, [r3]
   1713e:	4301      	orrs	r1, r0
   17140:	e843 1200 	strex	r2, r1, [r3]
   17144:	2a00      	cmp	r2, #0
   17146:	d1f8      	bne.n	1713a <atomic_or.constprop.0.isra.0+0x6>
   17148:	f3bf 8f5b 	dmb	ish
}
   1714c:	4770      	bx	lr
   1714e:	bf00      	nop
   17150:	20000444 	.word	0x20000444

00017154 <set_random_address>:
{
   17154:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17156:	4913      	ldr	r1, [pc, #76]	; (171a4 <set_random_address+0x50>)
   17158:	2206      	movs	r2, #6
   1715a:	4605      	mov	r5, r0
   1715c:	f013 ff24 	bl	2afa8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17160:	b1d8      	cbz	r0, 1719a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17162:	2106      	movs	r1, #6
   17164:	f242 0005 	movw	r0, #8197	; 0x2005
   17168:	f7ff f848 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   1716c:	4604      	mov	r4, r0
   1716e:	b1b0      	cbz	r0, 1719e <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17170:	2206      	movs	r2, #6
   17172:	4629      	mov	r1, r5
   17174:	300c      	adds	r0, #12
   17176:	f016 f956 	bl	2d426 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1717a:	2200      	movs	r2, #0
   1717c:	4621      	mov	r1, r4
   1717e:	f242 0005 	movw	r0, #8197	; 0x2005
   17182:	f7ff f885 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17186:	b948      	cbnz	r0, 1719c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17188:	2206      	movs	r2, #6
   1718a:	4806      	ldr	r0, [pc, #24]	; (171a4 <set_random_address+0x50>)
   1718c:	4629      	mov	r1, r5
   1718e:	f013 ff32 	bl	2aff6 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17192:	4b05      	ldr	r3, [pc, #20]	; (171a8 <set_random_address+0x54>)
   17194:	2201      	movs	r2, #1
   17196:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   1719a:	2000      	movs	r0, #0
}
   1719c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1719e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   171a2:	e7fb      	b.n	1719c <set_random_address+0x48>
   171a4:	200003d9 	.word	0x200003d9
   171a8:	20000378 	.word	0x20000378

000171ac <find_rl_conflict>:
{
   171ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171b0:	4605      	mov	r5, r0
   171b2:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   171b4:	460c      	mov	r4, r1
   171b6:	b951      	cbnz	r1, 171ce <find_rl_conflict+0x22>
   171b8:	4929      	ldr	r1, [pc, #164]	; (17260 <find_rl_conflict+0xb4>)
   171ba:	482a      	ldr	r0, [pc, #168]	; (17264 <find_rl_conflict+0xb8>)
   171bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
   171c0:	f012 ff43 	bl	2a04a <assert_print>
   171c4:	f44f 7157 	mov.w	r1, #860	; 0x35c
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   171c8:	4825      	ldr	r0, [pc, #148]	; (17260 <find_rl_conflict+0xb4>)
   171ca:	f012 ff37 	bl	2a03c <assert_post_action>
   171ce:	6808      	ldr	r0, [r1, #0]
   171d0:	b940      	cbnz	r0, 171e4 <find_rl_conflict+0x38>
   171d2:	4923      	ldr	r1, [pc, #140]	; (17260 <find_rl_conflict+0xb4>)
   171d4:	4823      	ldr	r0, [pc, #140]	; (17264 <find_rl_conflict+0xb8>)
   171d6:	f240 325d 	movw	r2, #861	; 0x35d
   171da:	f012 ff36 	bl	2a04a <assert_print>
   171de:	f240 315d 	movw	r1, #861	; 0x35d
   171e2:	e7f1      	b.n	171c8 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG(resident != NULL);
   171e4:	b945      	cbnz	r5, 171f8 <find_rl_conflict+0x4c>
   171e6:	491e      	ldr	r1, [pc, #120]	; (17260 <find_rl_conflict+0xb4>)
   171e8:	481e      	ldr	r0, [pc, #120]	; (17264 <find_rl_conflict+0xb8>)
   171ea:	f240 325e 	movw	r2, #862	; 0x35e
   171ee:	f012 ff2c 	bl	2a04a <assert_print>
   171f2:	f240 315e 	movw	r1, #862	; 0x35e
   171f6:	e7e7      	b.n	171c8 <find_rl_conflict+0x1c>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   171f8:	7a03      	ldrb	r3, [r0, #8]
   171fa:	075a      	lsls	r2, r3, #29
   171fc:	d508      	bpl.n	17210 <find_rl_conflict+0x64>
   171fe:	4918      	ldr	r1, [pc, #96]	; (17260 <find_rl_conflict+0xb4>)
   17200:	4818      	ldr	r0, [pc, #96]	; (17264 <find_rl_conflict+0xb8>)
   17202:	f44f 7258 	mov.w	r2, #864	; 0x360
   17206:	f012 ff20 	bl	2a04a <assert_print>
   1720a:	f44f 7158 	mov.w	r1, #864	; 0x360
   1720e:	e7db      	b.n	171c8 <find_rl_conflict+0x1c>
	if (conflict->found) {
   17210:	684f      	ldr	r7, [r1, #4]
   17212:	b9f7      	cbnz	r7, 17252 <find_rl_conflict+0xa6>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   17214:	7a2b      	ldrb	r3, [r5, #8]
   17216:	075b      	lsls	r3, r3, #29
   17218:	d51b      	bpl.n	17252 <find_rl_conflict+0xa6>
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1721a:	1c69      	adds	r1, r5, #1
   1721c:	3001      	adds	r0, #1
   1721e:	f014 f8be 	bl	2b39e <bt_addr_le_eq>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   17222:	f8d4 8000 	ldr.w	r8, [r4]
   17226:	2216      	movs	r2, #22
   17228:	4639      	mov	r1, r7
	addr_conflict = bt_addr_le_eq(&conflict->candidate->addr, &resident->addr);
   1722a:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1722c:	4668      	mov	r0, sp
   1722e:	f013 feed 	bl	2b00c <memset>
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   17232:	2210      	movs	r2, #16
   17234:	4669      	mov	r1, sp
   17236:	f108 002a 	add.w	r0, r8, #42	; 0x2a
   1723a:	f013 feb5 	bl	2afa8 <memcmp>
   1723e:	b158      	cbz	r0, 17258 <find_rl_conflict+0xac>
   17240:	6820      	ldr	r0, [r4, #0]
   17242:	2210      	movs	r2, #16
   17244:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   17248:	302a      	adds	r0, #42	; 0x2a
   1724a:	f013 fead 	bl	2afa8 <memcmp>
   1724e:	b918      	cbnz	r0, 17258 <find_rl_conflict+0xac>
		conflict->found = resident;
   17250:	6065      	str	r5, [r4, #4]
}
   17252:	b006      	add	sp, #24
   17254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (addr_conflict || irk_conflict) {
   17258:	2e00      	cmp	r6, #0
   1725a:	d1f9      	bne.n	17250 <find_rl_conflict+0xa4>
   1725c:	e7f9      	b.n	17252 <find_rl_conflict+0xa6>
   1725e:	bf00      	nop
   17260:	00030f70 	.word	0x00030f70
   17264:	0002f2b5 	.word	0x0002f2b5

00017268 <bt_id_set_private_addr>:
{
   17268:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   1726a:	b9e0      	cbnz	r0, 172a6 <bt_id_set_private_addr+0x3e>
   1726c:	f7ff fefa 	bl	17064 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
   17270:	0483      	lsls	r3, r0, #18
   17272:	d416      	bmi.n	172a2 <bt_id_set_private_addr+0x3a>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
   17274:	480d      	ldr	r0, [pc, #52]	; (172ac <bt_id_set_private_addr+0x44>)
   17276:	4669      	mov	r1, sp
   17278:	f013 ff16 	bl	2b0a8 <bt_rpa_create>
	if (!err) {
   1727c:	4604      	mov	r4, r0
   1727e:	b120      	cbz	r0, 1728a <bt_id_set_private_addr+0x22>
	le_rpa_timeout_submit();
   17280:	f7ff fea0 	bl	16fc4 <le_rpa_timeout_submit>
}
   17284:	4620      	mov	r0, r4
   17286:	b002      	add	sp, #8
   17288:	bd10      	pop	{r4, pc}
		err = set_random_address(&rpa);
   1728a:	4668      	mov	r0, sp
   1728c:	f7ff ff62 	bl	17154 <set_random_address>
		if (!err) {
   17290:	4604      	mov	r4, r0
   17292:	2800      	cmp	r0, #0
   17294:	d1f4      	bne.n	17280 <bt_id_set_private_addr+0x18>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17296:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   1729a:	f7ff ff4b 	bl	17134 <atomic_or.constprop.0.isra.0>
	le_rpa_timeout_submit();
   1729e:	f7ff fe91 	bl	16fc4 <le_rpa_timeout_submit>
		return 0;
   172a2:	2400      	movs	r4, #0
   172a4:	e7ee      	b.n	17284 <bt_id_set_private_addr+0x1c>
		return -EINVAL;
   172a6:	f06f 0415 	mvn.w	r4, #21
   172aa:	e7eb      	b.n	17284 <bt_id_set_private_addr+0x1c>
   172ac:	200004dc 	.word	0x200004dc

000172b0 <le_update_private_addr>:
{
   172b0:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   172b2:	f7ff fed7 	bl	17064 <atomic_get.constprop.0>
   172b6:	4603      	mov	r3, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   172b8:	065b      	lsls	r3, r3, #25
   172ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
   172be:	d409      	bmi.n	172d4 <le_update_private_addr+0x24>
	err = bt_id_set_private_addr(id);
   172c0:	f7ff ffd2 	bl	17268 <bt_id_set_private_addr>
	if (err) {
   172c4:	4602      	mov	r2, r0
   172c6:	b198      	cbz	r0, 172f0 <le_update_private_addr+0x40>
}
   172c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_WRN("Failed to update RPA address (%d)", err);
   172cc:	4809      	ldr	r0, [pc, #36]	; (172f4 <le_update_private_addr+0x44>)
   172ce:	2157      	movs	r1, #87	; 0x57
   172d0:	f012 bec9 	b.w	2a066 <z_log_minimal_printk>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   172d4:	2000      	movs	r0, #0
   172d6:	f014 f8bd 	bl	2b454 <bt_le_scan_set_enable>
	err = bt_id_set_private_addr(id);
   172da:	2000      	movs	r0, #0
   172dc:	f7ff ffc4 	bl	17268 <bt_id_set_private_addr>
	if (err) {
   172e0:	4602      	mov	r2, r0
   172e2:	2800      	cmp	r0, #0
   172e4:	d1f0      	bne.n	172c8 <le_update_private_addr+0x18>
}
   172e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   172ea:	2001      	movs	r0, #1
   172ec:	f014 b8b2 	b.w	2b454 <bt_le_scan_set_enable>
}
   172f0:	bd08      	pop	{r3, pc}
   172f2:	bf00      	nop
   172f4:	00030f9e 	.word	0x00030f9e

000172f8 <le_force_rpa_timeout>:
{
   172f8:	b510      	push	{r4, lr}
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
   172fa:	4c0b      	ldr	r4, [pc, #44]	; (17328 <le_force_rpa_timeout+0x30>)
{
   172fc:	b08a      	sub	sp, #40	; 0x28
	k_work_cancel_delayable_sync(&bt_dev.rpa_update, &sync);
   172fe:	4620      	mov	r0, r4
   17300:	4669      	mov	r1, sp
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17302:	3cac      	subs	r4, #172	; 0xac
   17304:	f00d fdae 	bl	24e64 <k_work_cancel_delayable_sync>
   17308:	f3bf 8f5b 	dmb	ish
   1730c:	e854 3f00 	ldrex	r3, [r4]
   17310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17314:	e844 3200 	strex	r2, r3, [r4]
   17318:	2a00      	cmp	r2, #0
   1731a:	d1f7      	bne.n	1730c <le_force_rpa_timeout+0x14>
   1731c:	f3bf 8f5b 	dmb	ish
	le_update_private_addr();
   17320:	f7ff ffc6 	bl	172b0 <le_update_private_addr>
}
   17324:	b00a      	add	sp, #40	; 0x28
   17326:	bd10      	pop	{r4, pc}
   17328:	200004f0 	.word	0x200004f0

0001732c <rpa_timeout>:
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1732c:	2100      	movs	r1, #0
{
   1732e:	b508      	push	{r3, lr}
			bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17330:	2202      	movs	r2, #2
   17332:	4608      	mov	r0, r1
   17334:	f001 fc8c 	bl	18c50 <bt_conn_lookup_state_le>
		if (conn) {
   17338:	b118      	cbz	r0, 17342 <rpa_timeout+0x16>
			bt_conn_unref(conn);
   1733a:	f001 f9a9 	bl	18690 <bt_conn_unref>
			bt_le_create_conn_cancel();
   1733e:	f7ff f8b1 	bl	164a4 <bt_le_create_conn_cancel>
   17342:	f3bf 8f5b 	dmb	ish
   17346:	4b0e      	ldr	r3, [pc, #56]	; (17380 <rpa_timeout+0x54>)
   17348:	e853 1f00 	ldrex	r1, [r3]
   1734c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   17350:	e843 1200 	strex	r2, r1, [r3]
   17354:	2a00      	cmp	r2, #0
   17356:	d1f7      	bne.n	17348 <rpa_timeout+0x1c>
   17358:	f3bf 8f5b 	dmb	ish
   1735c:	f7ff fe82 	bl	17064 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   17360:	04c1      	lsls	r1, r0, #19
   17362:	d503      	bpl.n	1736c <rpa_timeout+0x40>
}
   17364:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
   17368:	f7ff bfa2 	b.w	172b0 <le_update_private_addr>
   1736c:	f7ff fe7a 	bl	17064 <atomic_get.constprop.0>
	if (!(adv_enabled ||
   17370:	0642      	lsls	r2, r0, #25
   17372:	d503      	bpl.n	1737c <rpa_timeout+0x50>
   17374:	f7ff fe76 	bl	17064 <atomic_get.constprop.0>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17378:	05c3      	lsls	r3, r0, #23
   1737a:	d4f3      	bmi.n	17364 <rpa_timeout+0x38>
}
   1737c:	bd08      	pop	{r3, pc}
   1737e:	bf00      	nop
   17380:	20000444 	.word	0x20000444

00017384 <bt_id_pending_keys_update>:
   17384:	4b0a      	ldr	r3, [pc, #40]	; (173b0 <bt_id_pending_keys_update+0x2c>)
   17386:	f3bf 8f5b 	dmb	ish
   1738a:	e853 2f00 	ldrex	r2, [r3]
   1738e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   17392:	e843 1000 	strex	r0, r1, [r3]
   17396:	2800      	cmp	r0, #0
   17398:	d1f7      	bne.n	1738a <bt_id_pending_keys_update+0x6>
   1739a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1739e:	0413      	lsls	r3, r2, #16
   173a0:	d504      	bpl.n	173ac <bt_id_pending_keys_update+0x28>
			bt_keys_foreach_type(BT_KEYS_ALL, pending_id_update, NULL);
   173a2:	4904      	ldr	r1, [pc, #16]	; (173b4 <bt_id_pending_keys_update+0x30>)
   173a4:	2200      	movs	r2, #0
   173a6:	203f      	movs	r0, #63	; 0x3f
   173a8:	f007 b8d0 	b.w	1e54c <bt_keys_foreach_type>
}
   173ac:	4770      	bx	lr
   173ae:	bf00      	nop
   173b0:	20000444 	.word	0x20000444
   173b4:	0002b417 	.word	0x0002b417

000173b8 <bt_id_find_conflict>:
{
   173b8:	b507      	push	{r0, r1, r2, lr}
	struct bt_id_conflict conflict = {
   173ba:	2300      	movs	r3, #0
   173bc:	e9cd 0300 	strd	r0, r3, [sp]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   173c0:	4904      	ldr	r1, [pc, #16]	; (173d4 <bt_id_find_conflict+0x1c>)
   173c2:	466a      	mov	r2, sp
   173c4:	2002      	movs	r0, #2
   173c6:	f007 f8c1 	bl	1e54c <bt_keys_foreach_type>
}
   173ca:	9801      	ldr	r0, [sp, #4]
   173cc:	b003      	add	sp, #12
   173ce:	f85d fb04 	ldr.w	pc, [sp], #4
   173d2:	bf00      	nop
   173d4:	000171ad 	.word	0x000171ad

000173d8 <bt_id_add>:
{
   173d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	CHECKIF(keys == NULL) {
   173dc:	4604      	mov	r4, r0
   173de:	b170      	cbz	r0, 173fe <bt_id_add+0x26>
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   173e0:	4d4f      	ldr	r5, [pc, #316]	; (17520 <bt_id_add+0x148>)
   173e2:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   173e6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   173ea:	b10a      	cbz	r2, 173f0 <bt_id_add+0x18>
   173ec:	429a      	cmp	r2, r3
   173ee:	d209      	bcs.n	17404 <bt_id_add+0x2c>
		bt_dev.le.rl_entries++;
   173f0:	3301      	adds	r3, #1
   173f2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   173f6:	7a23      	ldrb	r3, [r4, #8]
   173f8:	f043 0304 	orr.w	r3, r3, #4
   173fc:	7223      	strb	r3, [r4, #8]
}
   173fe:	b002      	add	sp, #8
   17400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17404:	2100      	movs	r1, #0
   17406:	2206      	movs	r2, #6
   17408:	4608      	mov	r0, r1
   1740a:	f001 fc21 	bl	18c50 <bt_conn_lookup_state_le>
	if (conn) {
   1740e:	4606      	mov	r6, r0
   17410:	b168      	cbz	r0, 1742e <bt_id_add+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   17416:	f7ff fe8d 	bl	17134 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   1741a:	7a23      	ldrb	r3, [r4, #8]
		bt_conn_unref(conn);
   1741c:	4630      	mov	r0, r6
	keys->state |= flag;
   1741e:	f043 0301 	orr.w	r3, r3, #1
   17422:	7223      	strb	r3, [r4, #8]
}
   17424:	b002      	add	sp, #8
   17426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
   1742a:	f001 b931 	b.w	18690 <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1742e:	f7ff fe19 	bl	17064 <atomic_get.constprop.0>
	if (scan_enabled) {
   17432:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17434:	f3c0 1780 	ubfx	r7, r0, #6, #1
   17438:	d502      	bpl.n	17440 <bt_id_add+0x68>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1743a:	4630      	mov	r0, r6
   1743c:	f014 f80a 	bl	2b454 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
   17440:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17444:	b143      	cbz	r3, 17458 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   17446:	2000      	movs	r0, #0
   17448:	f013 ffbf 	bl	2b3ca <addr_res_enable>
		if (err) {
   1744c:	b120      	cbz	r0, 17458 <bt_id_add+0x80>
			LOG_WRN("Failed to disable address resolution");
   1744e:	4835      	ldr	r0, [pc, #212]	; (17524 <bt_id_add+0x14c>)
   17450:	2157      	movs	r1, #87	; 0x57
		LOG_ERR("Failed to set privacy mode");
   17452:	f012 fe08 	bl	2a066 <z_log_minimal_printk>
		goto done;
   17456:	e01c      	b.n	17492 <bt_id_add+0xba>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   17458:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
   1745c:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   17460:	429a      	cmp	r2, r3
   17462:	d121      	bne.n	174a8 <bt_id_add+0xd0>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   17464:	4830      	ldr	r0, [pc, #192]	; (17528 <bt_id_add+0x150>)
   17466:	2157      	movs	r1, #87	; 0x57
   17468:	f012 fdfd 	bl	2a066 <z_log_minimal_printk>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1746c:	2200      	movs	r2, #0
   1746e:	4611      	mov	r1, r2
   17470:	f242 0029 	movw	r0, #8233	; 0x2029
   17474:	f7fe ff0c 	bl	16290 <bt_hci_cmd_send_sync>
		if (err) {
   17478:	b110      	cbz	r0, 17480 <bt_id_add+0xa8>
			LOG_ERR("Failed to clear resolution list");
   1747a:	482c      	ldr	r0, [pc, #176]	; (1752c <bt_id_add+0x154>)
   1747c:	2145      	movs	r1, #69	; 0x45
   1747e:	e7e8      	b.n	17452 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
   17480:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   17484:	3301      	adds	r3, #1
   17486:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1748a:	7a23      	ldrb	r3, [r4, #8]
   1748c:	f043 0304 	orr.w	r3, r3, #4
   17490:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   17492:	2001      	movs	r0, #1
   17494:	f013 ff99 	bl	2b3ca <addr_res_enable>
	if (scan_enabled) {
   17498:	2f00      	cmp	r7, #0
   1749a:	d0b0      	beq.n	173fe <bt_id_add+0x26>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   1749c:	2001      	movs	r0, #1
}
   1749e:	b002      	add	sp, #8
   174a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   174a4:	f013 bfd6 	b.w	2b454 <bt_le_scan_set_enable>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   174a8:	4622      	mov	r2, r4
   174aa:	f104 0801 	add.w	r8, r4, #1
   174ae:	f812 0b2a 	ldrb.w	r0, [r2], #42
   174b2:	4641      	mov	r1, r8
   174b4:	f7ff fda4 	bl	17000 <hci_id_add>
	if (err) {
   174b8:	4606      	mov	r6, r0
   174ba:	b110      	cbz	r0, 174c2 <bt_id_add+0xea>
		LOG_ERR("Failed to add IRK to controller");
   174bc:	481c      	ldr	r0, [pc, #112]	; (17530 <bt_id_add+0x158>)
   174be:	2145      	movs	r1, #69	; 0x45
   174c0:	e7c7      	b.n	17452 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
   174c2:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   174c6:	3301      	adds	r3, #1
   174c8:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   174cc:	7a23      	ldrb	r3, [r4, #8]
   174ce:	f043 0304 	orr.w	r3, r3, #4
   174d2:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   174d4:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
   174d8:	075b      	lsls	r3, r3, #29
   174da:	d402      	bmi.n	174e2 <bt_id_add+0x10a>
		LOG_WRN("Set privacy mode command is not supported");
   174dc:	4815      	ldr	r0, [pc, #84]	; (17534 <bt_id_add+0x15c>)
   174de:	2157      	movs	r1, #87	; 0x57
   174e0:	e7b7      	b.n	17452 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
   174e2:	4641      	mov	r1, r8
   174e4:	4668      	mov	r0, sp
   174e6:	f013 ff62 	bl	2b3ae <bt_addr_le_copy>
	cp.mode = mode;
   174ea:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   174ec:	2108      	movs	r1, #8
   174ee:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
   174f2:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   174f6:	f7fe fe81 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   174fa:	4604      	mov	r4, r0
   174fc:	b160      	cbz	r0, 17518 <bt_id_add+0x140>
   174fe:	2208      	movs	r2, #8
   17500:	4669      	mov	r1, sp
   17502:	300c      	adds	r0, #12
   17504:	f015 ff8f 	bl	2d426 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   17508:	4632      	mov	r2, r6
   1750a:	4621      	mov	r1, r4
   1750c:	f242 004e 	movw	r0, #8270	; 0x204e
   17510:	f7fe febe 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17514:	2800      	cmp	r0, #0
   17516:	d0bc      	beq.n	17492 <bt_id_add+0xba>
		LOG_ERR("Failed to set privacy mode");
   17518:	4807      	ldr	r0, [pc, #28]	; (17538 <bt_id_add+0x160>)
   1751a:	2145      	movs	r1, #69	; 0x45
   1751c:	e799      	b.n	17452 <bt_id_add+0x7a>
   1751e:	bf00      	nop
   17520:	20000378 	.word	0x20000378
   17524:	00030fc5 	.word	0x00030fc5
   17528:	00030fef 	.word	0x00030fef
   1752c:	00031025 	.word	0x00031025
   17530:	0003104a 	.word	0x0003104a
   17534:	0003106f 	.word	0x0003106f
   17538:	0003109e 	.word	0x0003109e

0001753c <bt_id_del>:
{
   1753c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	CHECKIF(keys == NULL) {
   17540:	4604      	mov	r4, r0
   17542:	b378      	cbz	r0, 175a4 <bt_id_del+0x68>
	if (!bt_dev.le.rl_size ||
   17544:	4d46      	ldr	r5, [pc, #280]	; (17660 <bt_id_del+0x124>)
   17546:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1754a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
	if (!bt_dev.le.rl_size ||
   1754e:	b1b2      	cbz	r2, 1757e <bt_id_del+0x42>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   17550:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
   17552:	4293      	cmp	r3, r2
   17554:	dc1f      	bgt.n	17596 <bt_id_del+0x5a>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   17556:	2100      	movs	r1, #0
   17558:	2206      	movs	r2, #6
   1755a:	4608      	mov	r0, r1
   1755c:	f001 fb78 	bl	18c50 <bt_conn_lookup_state_le>
	if (conn) {
   17560:	4606      	mov	r6, r0
   17562:	b308      	cbz	r0, 175a8 <bt_id_del+0x6c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17564:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   17568:	f7ff fde4 	bl	17134 <atomic_or.constprop.0.isra.0>
	keys->state |= flag;
   1756c:	7a23      	ldrb	r3, [r4, #8]
   1756e:	f043 0302 	orr.w	r3, r3, #2
   17572:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
   17574:	4630      	mov	r0, r6
}
   17576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   1757a:	f001 b889 	b.w	18690 <bt_conn_unref>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1757e:	b953      	cbnz	r3, 17596 <bt_id_del+0x5a>
   17580:	4938      	ldr	r1, [pc, #224]	; (17664 <bt_id_del+0x128>)
   17582:	4839      	ldr	r0, [pc, #228]	; (17668 <bt_id_del+0x12c>)
   17584:	f240 4223 	movw	r2, #1059	; 0x423
   17588:	f012 fd5f 	bl	2a04a <assert_print>
   1758c:	4835      	ldr	r0, [pc, #212]	; (17664 <bt_id_del+0x128>)
   1758e:	f240 4123 	movw	r1, #1059	; 0x423
   17592:	f012 fd53 	bl	2a03c <assert_post_action>
			bt_dev.le.rl_entries--;
   17596:	3b01      	subs	r3, #1
   17598:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1759c:	7a23      	ldrb	r3, [r4, #8]
   1759e:	f023 0304 	bic.w	r3, r3, #4
   175a2:	7223      	strb	r3, [r4, #8]
}
   175a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   175a8:	f7ff fd5c 	bl	17064 <atomic_get.constprop.0>
	if (scan_enabled) {
   175ac:	0643      	lsls	r3, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   175ae:	f3c0 1880 	ubfx	r8, r0, #6, #1
   175b2:	d502      	bpl.n	175ba <bt_id_del+0x7e>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   175b4:	4630      	mov	r0, r6
   175b6:	f013 ff4d 	bl	2b454 <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   175ba:	2000      	movs	r0, #0
   175bc:	f013 ff05 	bl	2b3ca <addr_res_enable>
	if (err) {
   175c0:	4606      	mov	r6, r0
   175c2:	b190      	cbz	r0, 175ea <bt_id_del+0xae>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   175c4:	4602      	mov	r2, r0
   175c6:	2145      	movs	r1, #69	; 0x45
   175c8:	4828      	ldr	r0, [pc, #160]	; (1766c <bt_id_del+0x130>)
   175ca:	f012 fd4c 	bl	2a066 <z_log_minimal_printk>
	if (bt_dev.le.rl_entries) {
   175ce:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   175d2:	b113      	cbz	r3, 175da <bt_id_del+0x9e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   175d4:	2001      	movs	r0, #1
   175d6:	f013 fef8 	bl	2b3ca <addr_res_enable>
	if (scan_enabled) {
   175da:	f1b8 0f00 	cmp.w	r8, #0
   175de:	d0e1      	beq.n	175a4 <bt_id_del+0x68>
}
   175e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   175e4:	2001      	movs	r0, #1
   175e6:	f013 bf35 	b.w	2b454 <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   175ea:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   175ee:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
   175f2:	429a      	cmp	r2, r3
   175f4:	d20c      	bcs.n	17610 <bt_id_del+0xd4>
		bt_dev.le.rl_entries--;
   175f6:	3b01      	subs	r3, #1
   175f8:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   175fc:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   175fe:	491c      	ldr	r1, [pc, #112]	; (17670 <bt_id_del+0x134>)
		keys->state &= ~BT_KEYS_ID_ADDED;
   17600:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   17604:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
   17606:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_ALL, keys_add_id, NULL);
   17608:	203f      	movs	r0, #63	; 0x3f
   1760a:	f006 ff9f 	bl	1e54c <bt_keys_foreach_type>
		goto done;
   1760e:	e7de      	b.n	175ce <bt_id_del+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   17610:	2107      	movs	r1, #7
   17612:	f242 0028 	movw	r0, #8232	; 0x2028
   17616:	f7fe fdf1 	bl	161fc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
   1761a:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
   1761e:	4607      	mov	r7, r0
   17620:	b920      	cbnz	r0, 1762c <bt_id_del+0xf0>
		LOG_ERR("Failed to remove IRK from controller");
   17622:	4814      	ldr	r0, [pc, #80]	; (17674 <bt_id_del+0x138>)
   17624:	2145      	movs	r1, #69	; 0x45
   17626:	f012 fd1e 	bl	2a066 <z_log_minimal_printk>
		goto done;
   1762a:	e7d0      	b.n	175ce <bt_id_del+0x92>
	return net_buf_simple_add(&buf->b, len);
   1762c:	2107      	movs	r1, #7
   1762e:	300c      	adds	r0, #12
   17630:	f007 fd1c 	bl	1f06c <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   17634:	4649      	mov	r1, r9
   17636:	f013 feba 	bl	2b3ae <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   1763a:	4632      	mov	r2, r6
   1763c:	4639      	mov	r1, r7
   1763e:	f242 0028 	movw	r0, #8232	; 0x2028
   17642:	f7fe fe25 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17646:	2800      	cmp	r0, #0
   17648:	d1eb      	bne.n	17622 <bt_id_del+0xe6>
	bt_dev.le.rl_entries--;
   1764a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
   1764e:	3b01      	subs	r3, #1
   17650:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   17654:	7a23      	ldrb	r3, [r4, #8]
   17656:	f023 0304 	bic.w	r3, r3, #4
   1765a:	7223      	strb	r3, [r4, #8]
   1765c:	e7b7      	b.n	175ce <bt_id_del+0x92>
   1765e:	bf00      	nop
   17660:	20000378 	.word	0x20000378
   17664:	00030f70 	.word	0x00030f70
   17668:	0002f2b5 	.word	0x0002f2b5
   1766c:	000310be 	.word	0x000310be
   17670:	0002b3b5 	.word	0x0002b3b5
   17674:	000310f0 	.word	0x000310f0

00017678 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17678:	b5f0      	push	{r4, r5, r6, r7, lr}
   1767a:	460d      	mov	r5, r1
   1767c:	b085      	sub	sp, #20
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1767e:	4604      	mov	r4, r0
   17680:	b930      	cbnz	r0, 17690 <bt_id_create+0x18>

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17682:	4e25      	ldr	r6, [pc, #148]	; (17718 <bt_id_create+0xa0>)
   17684:	79f3      	ldrb	r3, [r6, #7]
   17686:	2b01      	cmp	r3, #1
   17688:	d11f      	bne.n	176ca <bt_id_create+0x52>
		return -ENOMEM;
   1768a:	f06f 000b 	mvn.w	r0, #11
   1768e:	e012      	b.n	176b6 <bt_id_create+0x3e>
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17690:	4922      	ldr	r1, [pc, #136]	; (1771c <bt_id_create+0xa4>)
   17692:	f013 fe84 	bl	2b39e <bt_addr_le_eq>
   17696:	2800      	cmp	r0, #0
   17698:	d1f3      	bne.n	17682 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1769a:	7823      	ldrb	r3, [r4, #0]
   1769c:	2b01      	cmp	r3, #1
   1769e:	d104      	bne.n	176aa <bt_id_create+0x32>
   176a0:	79a3      	ldrb	r3, [r4, #6]
   176a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   176a6:	2bc0      	cmp	r3, #192	; 0xc0
   176a8:	d007      	beq.n	176ba <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   176aa:	481d      	ldr	r0, [pc, #116]	; (17720 <bt_id_create+0xa8>)
   176ac:	2145      	movs	r1, #69	; 0x45
   176ae:	f012 fcda 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   176b2:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   176b6:	b005      	add	sp, #20
   176b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (id_find(addr) >= 0) {
   176ba:	4620      	mov	r0, r4
   176bc:	f7ff fc6a 	bl	16f94 <id_find>
   176c0:	2800      	cmp	r0, #0
   176c2:	dbde      	blt.n	17682 <bt_id_create+0xa>
			return -EALREADY;
   176c4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   176c8:	e7f5      	b.n	176b6 <bt_id_create+0x3e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   176ca:	f7ff fccb 	bl	17064 <atomic_get.constprop.0>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   176ce:	f010 0001 	ands.w	r0, r0, #1
   176d2:	d114      	bne.n	176fe <bt_id_create+0x86>
		uint8_t zero_irk[16] = { 0 };
   176d4:	e9cd 0000 	strd	r0, r0, [sp]
   176d8:	e9cd 0002 	strd	r0, r0, [sp, #8]
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   176dc:	2c00      	cmp	r4, #0
   176de:	d0e8      	beq.n	176b2 <bt_id_create+0x3a>
   176e0:	490e      	ldr	r1, [pc, #56]	; (1771c <bt_id_create+0xa4>)
   176e2:	4620      	mov	r0, r4
   176e4:	f013 fe5b 	bl	2b39e <bt_addr_le_eq>
   176e8:	2800      	cmp	r0, #0
   176ea:	d1e2      	bne.n	176b2 <bt_id_create+0x3a>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   176ec:	2d00      	cmp	r5, #0
   176ee:	d0e0      	beq.n	176b2 <bt_id_create+0x3a>
		    !(irk && memcmp(irk, zero_irk, 16))) {
   176f0:	2210      	movs	r2, #16
   176f2:	4669      	mov	r1, sp
   176f4:	4628      	mov	r0, r5
   176f6:	f013 fc57 	bl	2afa8 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   176fa:	2800      	cmp	r0, #0
   176fc:	d0d9      	beq.n	176b2 <bt_id_create+0x3a>
	new_id = bt_dev.id_count;
   176fe:	79f7      	ldrb	r7, [r6, #7]
	err = id_create(new_id, addr, irk);
   17700:	462a      	mov	r2, r5
   17702:	4621      	mov	r1, r4
   17704:	4638      	mov	r0, r7
   17706:	f7ff fcb7 	bl	17078 <id_create>
	if (err) {
   1770a:	2800      	cmp	r0, #0
   1770c:	d1d3      	bne.n	176b6 <bt_id_create+0x3e>
		bt_dev.id_count++;
   1770e:	79f3      	ldrb	r3, [r6, #7]
   17710:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17712:	4638      	mov	r0, r7
		bt_dev.id_count++;
   17714:	71f3      	strb	r3, [r6, #7]
	return new_id;
   17716:	e7ce      	b.n	176b6 <bt_id_create+0x3e>
   17718:	20000378 	.word	0x20000378
   1771c:	0003055c 	.word	0x0003055c
   17720:	0003111a 	.word	0x0003111a

00017724 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17724:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17726:	4604      	mov	r4, r0
   17728:	b930      	cbnz	r0, 17738 <bt_id_read_public_addr+0x14>
		LOG_WRN("Invalid input parameters");
   1772a:	4818      	ldr	r0, [pc, #96]	; (1778c <bt_id_read_public_addr+0x68>)
   1772c:	2157      	movs	r1, #87	; 0x57
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1772e:	f012 fc9a 	bl	2a066 <z_log_minimal_printk>
		return 0U;
   17732:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17734:	b002      	add	sp, #8
   17736:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17738:	aa01      	add	r2, sp, #4
   1773a:	2100      	movs	r1, #0
   1773c:	f241 0009 	movw	r0, #4105	; 0x1009
   17740:	f7fe fda6 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17744:	4606      	mov	r6, r0
   17746:	b110      	cbz	r0, 1774e <bt_id_read_public_addr+0x2a>
		LOG_WRN("Failed to read public address");
   17748:	4811      	ldr	r0, [pc, #68]	; (17790 <bt_id_read_public_addr+0x6c>)
   1774a:	2157      	movs	r1, #87	; 0x57
   1774c:	e7ef      	b.n	1772e <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   1774e:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17750:	4910      	ldr	r1, [pc, #64]	; (17794 <bt_id_read_public_addr+0x70>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17752:	68dd      	ldr	r5, [r3, #12]
   17754:	3501      	adds	r5, #1
   17756:	2206      	movs	r2, #6
   17758:	4628      	mov	r0, r5
   1775a:	f013 fc25 	bl	2afa8 <memcmp>
   1775e:	b918      	cbnz	r0, 17768 <bt_id_read_public_addr+0x44>
		net_buf_unref(rsp);
   17760:	9801      	ldr	r0, [sp, #4]
   17762:	f007 fb7d 	bl	1ee60 <net_buf_unref>
		return 0U;
   17766:	e7e4      	b.n	17732 <bt_id_read_public_addr+0xe>
   17768:	490b      	ldr	r1, [pc, #44]	; (17798 <bt_id_read_public_addr+0x74>)
   1776a:	2206      	movs	r2, #6
   1776c:	4628      	mov	r0, r5
   1776e:	f013 fc1b 	bl	2afa8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17772:	2800      	cmp	r0, #0
   17774:	d0f4      	beq.n	17760 <bt_id_read_public_addr+0x3c>
	memcpy(dst, src, sizeof(*dst));
   17776:	2206      	movs	r2, #6
   17778:	4629      	mov	r1, r5
   1777a:	1c60      	adds	r0, r4, #1
   1777c:	f013 fc3b 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   17780:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17782:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   17784:	f007 fb6c 	bl	1ee60 <net_buf_unref>
	return 1U;
   17788:	2001      	movs	r0, #1
   1778a:	e7d3      	b.n	17734 <bt_id_read_public_addr+0x10>
   1778c:	0003114d 	.word	0x0003114d
   17790:	0003116b 	.word	0x0003116b
   17794:	00030569 	.word	0x00030569
   17798:	00030563 	.word	0x00030563

0001779c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1779c:	b510      	push	{r4, lr}
   1779e:	b08a      	sub	sp, #40	; 0x28
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   177a0:	4668      	mov	r0, sp
   177a2:	f7ff ffbf 	bl	17724 <bt_id_read_public_addr>
   177a6:	4c1a      	ldr	r4, [pc, #104]	; (17810 <bt_setup_public_id_addr+0x74>)
   177a8:	71e0      	strb	r0, [r4, #7]

	if (!bt_dev.id_count) {
   177aa:	b308      	cbz	r0, 177f0 <bt_setup_public_id_addr+0x54>
	memset(ir, 0, 16);
   177ac:	2210      	movs	r2, #16
   177ae:	2100      	movs	r1, #0
   177b0:	a806      	add	r0, sp, #24
   177b2:	f013 fc2b 	bl	2b00c <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
   177b6:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   177ba:	079b      	lsls	r3, r3, #30
   177bc:	d50a      	bpl.n	177d4 <bt_setup_public_id_addr+0x38>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
   177be:	aa02      	add	r2, sp, #8
   177c0:	2100      	movs	r1, #0
   177c2:	f64f 400a 	movw	r0, #64522	; 0xfc0a
   177c6:	f7fe fd63 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   177ca:	b198      	cbz	r0, 177f4 <bt_setup_public_id_addr+0x58>
		LOG_WRN("Failed to read identity root");
   177cc:	4811      	ldr	r0, [pc, #68]	; (17814 <bt_setup_public_id_addr+0x78>)
   177ce:	2157      	movs	r1, #87	; 0x57
   177d0:	f012 fc49 	bl	2a066 <z_log_minimal_printk>
	uint8_t ir[16];

	bt_read_identity_root(ir);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY_RANDOMIZE_IR)) {
		if (!bt_smp_irk_get(ir, ir_irk)) {
   177d4:	a902      	add	r1, sp, #8
   177d6:	a806      	add	r0, sp, #24
   177d8:	f015 fc50 	bl	2d07c <bt_smp_irk_get>
   177dc:	b1a8      	cbz	r0, 1780a <bt_setup_public_id_addr+0x6e>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   177de:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   177e2:	f7ff fca7 	bl	17134 <atomic_or.constprop.0.isra.0>
	uint8_t *irk = NULL;
   177e6:	2200      	movs	r2, #0
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   177e8:	4669      	mov	r1, sp
   177ea:	2000      	movs	r0, #0
   177ec:	f7ff fc44 	bl	17078 <id_create>
}
   177f0:	b00a      	add	sp, #40	; 0x28
   177f2:	bd10      	pop	{r4, pc}
	rp = (void *)rsp->data;
   177f4:	9b02      	ldr	r3, [sp, #8]
	memcpy(ir, rp->ir, 16);
   177f6:	68d9      	ldr	r1, [r3, #12]
   177f8:	2210      	movs	r2, #16
   177fa:	3101      	adds	r1, #1
   177fc:	a806      	add	r0, sp, #24
   177fe:	f013 fbfa 	bl	2aff6 <memcpy>
	net_buf_unref(rsp);
   17802:	9802      	ldr	r0, [sp, #8]
   17804:	f007 fb2c 	bl	1ee60 <net_buf_unref>
   17808:	e7e4      	b.n	177d4 <bt_setup_public_id_addr+0x38>
			irk = ir_irk;
   1780a:	aa02      	add	r2, sp, #8
   1780c:	e7ec      	b.n	177e8 <bt_setup_public_id_addr+0x4c>
   1780e:	bf00      	nop
   17810:	20000378 	.word	0x20000378
   17814:	0003118e 	.word	0x0003118e

00017818 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17818:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1781c:	4b1c      	ldr	r3, [pc, #112]	; (17890 <bt_read_static_addr+0x78>)
   1781e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   17822:	07db      	lsls	r3, r3, #31
{
   17824:	4607      	mov	r7, r0
   17826:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17828:	d408      	bmi.n	1783c <bt_read_static_addr+0x24>
		LOG_WRN("Read Static Addresses command not available");
   1782a:	481a      	ldr	r0, [pc, #104]	; (17894 <bt_read_static_addr+0x7c>)
   1782c:	2157      	movs	r1, #87	; 0x57
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1782e:	f012 fc1a 	bl	2a066 <z_log_minimal_printk>
		return 0;
   17832:	2500      	movs	r5, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   17834:	4628      	mov	r0, r5
   17836:	b002      	add	sp, #8
   17838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1783c:	aa01      	add	r2, sp, #4
   1783e:	2100      	movs	r1, #0
   17840:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17844:	f7fe fd24 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17848:	4604      	mov	r4, r0
   1784a:	b110      	cbz	r0, 17852 <bt_read_static_addr+0x3a>
		LOG_WRN("Failed to read static addresses");
   1784c:	4812      	ldr	r0, [pc, #72]	; (17898 <bt_read_static_addr+0x80>)
   1784e:	2157      	movs	r1, #87	; 0x57
   17850:	e7ed      	b.n	1782e <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   17852:	9b01      	ldr	r3, [sp, #4]
   17854:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   17856:	7875      	ldrb	r5, [r6, #1]
   17858:	4545      	cmp	r5, r8
   1785a:	bf28      	it	cs
   1785c:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   1785e:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17860:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   17864:	42a5      	cmp	r5, r4
   17866:	dc09      	bgt.n	1787c <bt_read_static_addr+0x64>
	net_buf_unref(rsp);
   17868:	9801      	ldr	r0, [sp, #4]
   1786a:	f007 faf9 	bl	1ee60 <net_buf_unref>
	if (!cnt) {
   1786e:	2d00      	cmp	r5, #0
   17870:	d1e0      	bne.n	17834 <bt_read_static_addr+0x1c>
		LOG_WRN("No static addresses stored in controller");
   17872:	480a      	ldr	r0, [pc, #40]	; (1789c <bt_read_static_addr+0x84>)
   17874:	2157      	movs	r1, #87	; 0x57
   17876:	f012 fbf6 	bl	2a066 <z_log_minimal_printk>
   1787a:	e7db      	b.n	17834 <bt_read_static_addr+0x1c>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1787c:	4631      	mov	r1, r6
   1787e:	fb08 7004 	mla	r0, r8, r4, r7
   17882:	2216      	movs	r2, #22
   17884:	f013 fbb7 	bl	2aff6 <memcpy>
	for (i = 0; i < cnt; i++) {
   17888:	3401      	adds	r4, #1
   1788a:	3616      	adds	r6, #22
   1788c:	e7ea      	b.n	17864 <bt_read_static_addr+0x4c>
   1788e:	bf00      	nop
   17890:	20000378 	.word	0x20000378
   17894:	000311b0 	.word	0x000311b0
   17898:	000311e1 	.word	0x000311e1
   1789c:	00031206 	.word	0x00031206

000178a0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   178a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   178a4:	4e21      	ldr	r6, [pc, #132]	; (1792c <bt_setup_random_id_addr+0x8c>)
   178a6:	79f4      	ldrb	r4, [r6, #7]
{
   178a8:	b08d      	sub	sp, #52	; 0x34
	if (!bt_dev.id_count) {
   178aa:	b92c      	cbnz	r4, 178b8 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   178ac:	2101      	movs	r1, #1
   178ae:	a806      	add	r0, sp, #24
   178b0:	f7ff ffb2 	bl	17818 <bt_read_static_addr>
   178b4:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   178b6:	bb80      	cbnz	r0, 1791a <bt_setup_random_id_addr+0x7a>
   178b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   178bc:	f7ff fc3a 	bl	17134 <atomic_or.constprop.0.isra.0>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   178c0:	2100      	movs	r1, #0
   178c2:	4608      	mov	r0, r1
}
   178c4:	b00d      	add	sp, #52	; 0x34
   178c6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_id_create(NULL, NULL);
   178ca:	f7ff bed5 	b.w	17678 <bt_id_create>
					if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
   178ce:	fb09 f805 	mul.w	r8, r9, r5
   178d2:	f108 0006 	add.w	r0, r8, #6
   178d6:	ab06      	add	r3, sp, #24
   178d8:	a902      	add	r1, sp, #8
   178da:	4418      	add	r0, r3
   178dc:	f015 fbce 	bl	2d07c <bt_smp_irk_get>
   178e0:	b1c8      	cbz	r0, 17916 <bt_setup_random_id_addr+0x76>
   178e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   178e6:	f7ff fc25 	bl	17134 <atomic_or.constprop.0.isra.0>
				uint8_t *irk = NULL;
   178ea:	2700      	movs	r7, #0
   178ec:	ab06      	add	r3, sp, #24
   178ee:	eb03 0108 	add.w	r1, r3, r8
   178f2:	2206      	movs	r2, #6
   178f4:	f10d 0001 	add.w	r0, sp, #1
   178f8:	f013 fb7d 	bl	2aff6 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   178fc:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   178fe:	463a      	mov	r2, r7
   17900:	4669      	mov	r1, sp
   17902:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   17904:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17908:	f7ff fbb6 	bl	17078 <id_create>
				if (err) {
   1790c:	3401      	adds	r4, #1
   1790e:	b130      	cbz	r0, 1791e <bt_setup_random_id_addr+0x7e>
}
   17910:	b00d      	add	sp, #52	; 0x34
   17912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						irk = ir_irk;
   17916:	af02      	add	r7, sp, #8
   17918:	e7e8      	b.n	178ec <bt_setup_random_id_addr+0x4c>
   1791a:	f04f 0916 	mov.w	r9, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1791e:	79f3      	ldrb	r3, [r6, #7]
   17920:	b2e5      	uxtb	r5, r4
   17922:	42ab      	cmp	r3, r5
   17924:	d8d3      	bhi.n	178ce <bt_setup_random_id_addr+0x2e>
			return 0;
   17926:	2000      	movs	r0, #0
   17928:	e7f2      	b.n	17910 <bt_setup_random_id_addr+0x70>
   1792a:	bf00      	nop
   1792c:	20000378 	.word	0x20000378

00017930 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   17930:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   17932:	460c      	mov	r4, r1
   17934:	b311      	cbz	r1, 1797c <bt_id_set_create_conn_own_addr+0x4c>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		if (use_filter || rpa_timeout_valid_check()) {
   17936:	b120      	cbz	r0, 17942 <bt_id_set_create_conn_own_addr+0x12>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   17938:	2000      	movs	r0, #0
   1793a:	f7ff fc95 	bl	17268 <bt_id_set_private_addr>
			if (err) {
   1793e:	b190      	cbz	r0, 17966 <bt_id_set_create_conn_own_addr+0x36>

		*own_addr_type = addr->type;
	}

	return 0;
}
   17940:	bd10      	pop	{r4, pc}
	return z_timeout_remaining(&dwork->timeout);
   17942:	4810      	ldr	r0, [pc, #64]	; (17984 <bt_id_set_create_conn_own_addr+0x54>)
   17944:	f00e fc18 	bl	26178 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   17948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1794c:	fba0 0203 	umull	r0, r2, r0, r3
   17950:	0bc3      	lsrs	r3, r0, #15
   17952:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
	return remaining_ms > (10 * bt_dev.create_param.timeout);
   17956:	4a0c      	ldr	r2, [pc, #48]	; (17988 <bt_id_set_create_conn_own_addr+0x58>)
   17958:	8a92      	ldrh	r2, [r2, #20]
   1795a:	210a      	movs	r1, #10
   1795c:	434a      	muls	r2, r1
		if (use_filter || rpa_timeout_valid_check()) {
   1795e:	429a      	cmp	r2, r3
   17960:	d3ea      	bcc.n	17938 <bt_id_set_create_conn_own_addr+0x8>
			le_force_rpa_timeout();
   17962:	f7ff fcc9 	bl	172f8 <le_force_rpa_timeout>
		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   17966:	4b08      	ldr	r3, [pc, #32]	; (17988 <bt_id_set_create_conn_own_addr+0x58>)
   17968:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1796c:	f013 0f40 	tst.w	r3, #64	; 0x40
   17970:	bf0c      	ite	eq
   17972:	2301      	moveq	r3, #1
   17974:	2303      	movne	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17976:	7023      	strb	r3, [r4, #0]
	return 0;
   17978:	2000      	movs	r0, #0
   1797a:	e7e1      	b.n	17940 <bt_id_set_create_conn_own_addr+0x10>
		return -EINVAL;
   1797c:	f06f 0015 	mvn.w	r0, #21
   17980:	e7de      	b.n	17940 <bt_id_set_create_conn_own_addr+0x10>
   17982:	bf00      	nop
   17984:	20000500 	.word	0x20000500
   17988:	20000378 	.word	0x20000378

0001798c <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1798c:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   1798e:	460c      	mov	r4, r1
   17990:	b169      	cbz	r1, 179ae <bt_id_set_scan_own_addr+0x22>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_BT_PRIVACY)) {
		err = bt_id_set_private_addr(BT_ID_DEFAULT);
   17992:	2000      	movs	r0, #0
   17994:	f7ff fc68 	bl	17268 <bt_id_set_private_addr>
		if (err) {
   17998:	b940      	cbnz	r0, 179ac <bt_id_set_scan_own_addr+0x20>
			return err;
		}

		if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1799a:	4b06      	ldr	r3, [pc, #24]	; (179b4 <bt_id_set_scan_own_addr+0x28>)
   1799c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   179a0:	f013 0f40 	tst.w	r3, #64	; 0x40
   179a4:	bf0c      	ite	eq
   179a6:	2301      	moveq	r3, #1
   179a8:	2303      	movne	r3, #3
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
   179aa:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   179ac:	bd10      	pop	{r4, pc}
		return -EINVAL;
   179ae:	f06f 0015 	mvn.w	r0, #21
   179b2:	e7fb      	b.n	179ac <bt_id_set_scan_own_addr+0x20>
   179b4:	20000378 	.word	0x20000378

000179b8 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   179b8:	b508      	push	{r3, lr}
			return err;
		}
	}

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
   179ba:	4903      	ldr	r1, [pc, #12]	; (179c8 <bt_id_init+0x10>)
   179bc:	4803      	ldr	r0, [pc, #12]	; (179cc <bt_id_init+0x14>)
   179be:	f00d f91b 	bl	24bf8 <k_work_init_delayable>
#endif

	return 0;
}
   179c2:	2000      	movs	r0, #0
   179c4:	bd08      	pop	{r3, pc}
   179c6:	bf00      	nop
   179c8:	0001732d 	.word	0x0001732d
   179cc:	200004f0 	.word	0x200004f0

000179d0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   179d0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   179d2:	2102      	movs	r1, #2
{
   179d4:	b087      	sub	sp, #28
   179d6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   179d8:	f242 000c 	movw	r0, #8204	; 0x200c
   179dc:	f7fe fc0e 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   179e0:	4605      	mov	r5, r0
   179e2:	b318      	cbz	r0, 17a2c <bt_le_scan_set_enable_legacy+0x5c>
   179e4:	2102      	movs	r1, #2
   179e6:	300c      	adds	r0, #12
   179e8:	f007 fb40 	bl	1f06c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   179ec:	2c01      	cmp	r4, #1
   179ee:	d11b      	bne.n	17a28 <bt_le_scan_set_enable_legacy+0x58>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   179f0:	f3bf 8f5b 	dmb	ish
   179f4:	4b0f      	ldr	r3, [pc, #60]	; (17a34 <bt_le_scan_set_enable_legacy+0x64>)
   179f6:	681b      	ldr	r3, [r3, #0]
   179f8:	f3bf 8f5b 	dmb	ish
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   179fc:	f3c3 2340 	ubfx	r3, r3, #9, #1
   17a00:	7043      	strb	r3, [r0, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17a02:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   17a04:	7004      	strb	r4, [r0, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   17a06:	425c      	negs	r4, r3
   17a08:	415c      	adcs	r4, r3
   17a0a:	4a0a      	ldr	r2, [pc, #40]	; (17a34 <bt_le_scan_set_enable_legacy+0x64>)
   17a0c:	9400      	str	r4, [sp, #0]
   17a0e:	a903      	add	r1, sp, #12
   17a10:	4628      	mov	r0, r5
   17a12:	2306      	movs	r3, #6
   17a14:	f7fe fbe0 	bl	161d8 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   17a18:	2200      	movs	r2, #0
   17a1a:	4629      	mov	r1, r5
   17a1c:	f242 000c 	movw	r0, #8204	; 0x200c
   17a20:	f7fe fc36 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   17a24:	b007      	add	sp, #28
   17a26:	bd30      	pop	{r4, r5, pc}
   17a28:	2300      	movs	r3, #0
   17a2a:	e7e9      	b.n	17a00 <bt_le_scan_set_enable_legacy+0x30>
		return -ENOBUFS;
   17a2c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a30:	e7f8      	b.n	17a24 <bt_le_scan_set_enable_legacy+0x54>
   17a32:	bf00      	nop
   17a34:	20000444 	.word	0x20000444

00017a38 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   17a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17a3a:	4605      	mov	r5, r0
   17a3c:	4614      	mov	r4, r2
   17a3e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   17a40:	2207      	movs	r2, #7
   17a42:	2100      	movs	r1, #0
   17a44:	4668      	mov	r0, sp
   17a46:	f013 fae1 	bl	2b00c <memset>

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   17a4a:	2300      	movs	r3, #0
   17a4c:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   17a50:	1e6b      	subs	r3, r5, #1
   17a52:	4258      	negs	r0, r3
   17a54:	f10d 0105 	add.w	r1, sp, #5
   17a58:	4158      	adcs	r0, r3
	set_param.window = sys_cpu_to_le16(window);
   17a5a:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   17a5e:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   17a62:	f8ad 6001 	strh.w	r6, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   17a66:	f7ff ff91 	bl	1798c <bt_id_set_scan_own_addr>
	if (err) {
   17a6a:	4604      	mov	r4, r0
   17a6c:	bb38      	cbnz	r0, 17abe <start_le_scan_legacy+0x86>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   17a6e:	2107      	movs	r1, #7
   17a70:	f242 000b 	movw	r0, #8203	; 0x200b
   17a74:	f7fe fbc2 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   17a78:	4606      	mov	r6, r0
   17a7a:	b348      	cbz	r0, 17ad0 <start_le_scan_legacy+0x98>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17a7c:	2207      	movs	r2, #7
   17a7e:	4669      	mov	r1, sp
   17a80:	300c      	adds	r0, #12
   17a82:	f015 fcd0 	bl	2d426 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   17a86:	4622      	mov	r2, r4
   17a88:	4631      	mov	r1, r6
   17a8a:	f242 000b 	movw	r0, #8203	; 0x200b
   17a8e:	f7fe fbff 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17a92:	4604      	mov	r4, r0
   17a94:	b998      	cbnz	r0, 17abe <start_le_scan_legacy+0x86>
	return bt_le_scan_set_enable_legacy(enable);
   17a96:	2001      	movs	r0, #1
   17a98:	f7ff ff9a 	bl	179d0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   17a9c:	4604      	mov	r4, r0
   17a9e:	b970      	cbnz	r0, 17abe <start_le_scan_legacy+0x86>
	if (val) {
   17aa0:	2d01      	cmp	r5, #1
   17aa2:	d10f      	bne.n	17ac4 <start_le_scan_legacy+0x8c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17aa4:	f3bf 8f5b 	dmb	ish
   17aa8:	4b0b      	ldr	r3, [pc, #44]	; (17ad8 <start_le_scan_legacy+0xa0>)
   17aaa:	e853 1f00 	ldrex	r1, [r3]
   17aae:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   17ab2:	e843 1200 	strex	r2, r1, [r3]
   17ab6:	2a00      	cmp	r2, #0
   17ab8:	d1f7      	bne.n	17aaa <start_le_scan_legacy+0x72>
   17aba:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   17abe:	4620      	mov	r0, r4
   17ac0:	b002      	add	sp, #8
   17ac2:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17ac4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17ac8:	4803      	ldr	r0, [pc, #12]	; (17ad8 <start_le_scan_legacy+0xa0>)
   17aca:	f013 fcb4 	bl	2b436 <atomic_and>
   17ace:	e7f6      	b.n	17abe <start_le_scan_legacy+0x86>
		return -ENOBUFS;
   17ad0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17ad4:	e7f3      	b.n	17abe <start_le_scan_legacy+0x86>
   17ad6:	bf00      	nop
   17ad8:	20000444 	.word	0x20000444

00017adc <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   17adc:	4b01      	ldr	r3, [pc, #4]	; (17ae4 <bt_scan_reset+0x8>)
   17ade:	2200      	movs	r2, #0
   17ae0:	601a      	str	r2, [r3, #0]
}
   17ae2:	4770      	bx	lr
   17ae4:	20003140 	.word	0x20003140

00017ae8 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   17ae8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17aea:	4d21      	ldr	r5, [pc, #132]	; (17b70 <bt_le_scan_update+0x88>)
   17aec:	f3bf 8f5b 	dmb	ish
   17af0:	682b      	ldr	r3, [r5, #0]
   17af2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17af6:	061a      	lsls	r2, r3, #24
{
   17af8:	4606      	mov	r6, r0
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17afa:	f3c3 10c0 	ubfx	r0, r3, #7, #1
   17afe:	d434      	bmi.n	17b6a <bt_le_scan_update+0x82>
   17b00:	f3bf 8f5b 	dmb	ish
   17b04:	682b      	ldr	r3, [r5, #0]
   17b06:	f3bf 8f5b 	dmb	ish
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17b0a:	065b      	lsls	r3, r3, #25
   17b0c:	d426      	bmi.n	17b5c <bt_le_scan_update+0x74>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17b0e:	2100      	movs	r1, #0
   17b10:	2206      	movs	r2, #6
   17b12:	4608      	mov	r0, r1
   17b14:	f001 f89c 	bl	18c50 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   17b18:	4604      	mov	r4, r0
   17b1a:	bb20      	cbnz	r0, 17b66 <bt_le_scan_update+0x7e>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   17b1c:	2202      	movs	r2, #2
   17b1e:	4601      	mov	r1, r0
   17b20:	f001 f896 	bl	18c50 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   17b24:	b308      	cbz	r0, 17b6a <bt_le_scan_update+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b26:	f3bf 8f5b 	dmb	ish
   17b2a:	e855 3f00 	ldrex	r3, [r5]
   17b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17b32:	e845 3200 	strex	r2, r3, [r5]
   17b36:	2a00      	cmp	r2, #0
   17b38:	d1f7      	bne.n	17b2a <bt_le_scan_update+0x42>
   17b3a:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   17b3e:	f000 fda7 	bl	18690 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   17b42:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   17b44:	4620      	mov	r0, r4
   17b46:	bf08      	it	eq
   17b48:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   17b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   17b4e:	bf16      	itet	ne
   17b50:	2230      	movne	r2, #48	; 0x30
   17b52:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   17b56:	2160      	movne	r1, #96	; 0x60
   17b58:	f7ff bf6e 	b.w	17a38 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   17b5c:	f7ff ff38 	bl	179d0 <bt_le_scan_set_enable_legacy>
		if (err) {
   17b60:	2800      	cmp	r0, #0
   17b62:	d0d4      	beq.n	17b0e <bt_le_scan_update+0x26>
}
   17b64:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
   17b66:	f000 fd93 	bl	18690 <bt_conn_unref>
		return 0;
   17b6a:	2000      	movs	r0, #0
   17b6c:	e7fa      	b.n	17b64 <bt_le_scan_update+0x7c>
   17b6e:	bf00      	nop
   17b70:	20000444 	.word	0x20000444

00017b74 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   17b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   17b78:	f100 060c 	add.w	r6, r0, #12
   17b7c:	b08b      	sub	sp, #44	; 0x2c
   17b7e:	4604      	mov	r4, r0
   17b80:	4630      	mov	r0, r6
   17b82:	f015 fc34 	bl	2d3ee <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   17b86:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 17d54 <bt_hci_le_adv_report+0x1e0>
   17b8a:	4680      	mov	r8, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   17b8c:	f1b8 0f00 	cmp.w	r8, #0
   17b90:	d102      	bne.n	17b98 <bt_hci_le_adv_report+0x24>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   17b92:	b00b      	add	sp, #44	; 0x2c
   17b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (buf->len < sizeof(*evt)) {
   17b98:	8a23      	ldrh	r3, [r4, #16]
   17b9a:	2b08      	cmp	r3, #8
   17b9c:	d806      	bhi.n	17bac <bt_hci_le_adv_report+0x38>
			LOG_ERR("Unexpected end of buffer");
   17b9e:	486e      	ldr	r0, [pc, #440]	; (17d58 <bt_hci_le_adv_report+0x1e4>)
   17ba0:	2145      	movs	r1, #69	; 0x45
}
   17ba2:	b00b      	add	sp, #44	; 0x2c
   17ba4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Unexpected end of buffer");
   17ba8:	f012 ba5d 	b.w	2a066 <z_log_minimal_printk>
	return net_buf_simple_pull_mem(&buf->b, len);
   17bac:	2109      	movs	r1, #9
   17bae:	4630      	mov	r0, r6
   17bb0:	f007 fa42 	bl	1f038 <net_buf_simple_pull_mem>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   17bb4:	2301      	movs	r3, #1
   17bb6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   17bba:	237f      	movs	r3, #127	; 0x7f
   17bbc:	f88d 301e 	strb.w	r3, [sp, #30]
		adv_info.rssi = evt->data[evt->length];
   17bc0:	7a03      	ldrb	r3, [r0, #8]
   17bc2:	4403      	add	r3, r0
   17bc4:	4605      	mov	r5, r0
   17bc6:	7a5b      	ldrb	r3, [r3, #9]
   17bc8:	f88d 301d 	strb.w	r3, [sp, #29]
		adv_info.sid = BT_GAP_SID_INVALID;
   17bcc:	23ff      	movs	r3, #255	; 0xff
   17bce:	f88d 301c 	strb.w	r3, [sp, #28]
		adv_info.interval = 0U;
   17bd2:	2300      	movs	r3, #0
   17bd4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
		adv_info.adv_type = evt->evt_type;
   17bd8:	7802      	ldrb	r2, [r0, #0]
   17bda:	f88d 201f 	strb.w	r2, [sp, #31]
	switch (evt_type) {
   17bde:	2a04      	cmp	r2, #4
   17be0:	bf9c      	itt	ls
   17be2:	4b5e      	ldrls	r3, [pc, #376]	; (17d5c <bt_hci_le_adv_report+0x1e8>)
   17be4:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   17be6:	f8ad 3020 	strh.w	r3, [sp, #32]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17bea:	7a03      	ldrb	r3, [r0, #8]
   17bec:	9301      	str	r3, [sp, #4]
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17bee:	7843      	ldrb	r3, [r0, #1]
   17bf0:	1e9a      	subs	r2, r3, #2
   17bf2:	2a01      	cmp	r2, #1
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   17bf4:	f100 0901 	add.w	r9, r0, #1
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   17bf8:	d84e      	bhi.n	17c98 <bt_hci_le_adv_report+0x124>
	memcpy(dst, src, sizeof(*dst));
   17bfa:	2207      	movs	r2, #7
   17bfc:	4649      	mov	r1, r9
   17bfe:	a804      	add	r0, sp, #16
   17c00:	f013 f9f9 	bl	2aff6 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17c04:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17c08:	3b02      	subs	r3, #2
   17c0a:	f88d 3010 	strb.w	r3, [sp, #16]
	if (scan_dev_found_cb) {
   17c0e:	f8da 3000 	ldr.w	r3, [sl]
   17c12:	b1a3      	cbz	r3, 17c3e <bt_hci_le_adv_report+0xca>
	state->offset = net_buf_simple_headroom(buf);
   17c14:	4630      	mov	r0, r6
   17c16:	f015 fbfa 	bl	2d40e <net_buf_simple_headroom>
		buf->len = len;
   17c1a:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
   17c1c:	8a27      	ldrh	r7, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17c1e:	f89d 201f 	ldrb.w	r2, [sp, #31]
		buf->len = len;
   17c22:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   17c24:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   17c26:	4633      	mov	r3, r6
   17c28:	f99d 101d 	ldrsb.w	r1, [sp, #29]
   17c2c:	f8da c000 	ldr.w	ip, [sl]
   17c30:	a804      	add	r0, sp, #16
   17c32:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
   17c34:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   17c36:	8227      	strh	r7, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17c38:	fa13 f38b 	uxtah	r3, r3, fp
   17c3c:	60e3      	str	r3, [r4, #12]
	info->addr = &id_addr;
   17c3e:	ab04      	add	r3, sp, #16
   17c40:	9306      	str	r3, [sp, #24]
	return list->head;
   17c42:	4b47      	ldr	r3, [pc, #284]	; (17d60 <bt_hci_le_adv_report+0x1ec>)
   17c44:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c46:	2b00      	cmp	r3, #0
   17c48:	d037      	beq.n	17cba <bt_hci_le_adv_report+0x146>
	return node->next;
   17c4a:	681a      	ldr	r2, [r3, #0]
   17c4c:	b102      	cbz	r2, 17c50 <bt_hci_le_adv_report+0xdc>
   17c4e:	3a08      	subs	r2, #8
		if (listener->recv) {
   17c50:	f853 1c08 	ldr.w	r1, [r3, #-8]
   17c54:	b1b9      	cbz	r1, 17c86 <bt_hci_le_adv_report+0x112>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c56:	4617      	mov	r7, r2
   17c58:	f1a3 0208 	sub.w	r2, r3, #8
	state->offset = net_buf_simple_headroom(buf);
   17c5c:	4630      	mov	r0, r6
   17c5e:	9203      	str	r2, [sp, #12]
   17c60:	f015 fbd5 	bl	2d40e <net_buf_simple_headroom>
	state->len = buf->len;
   17c64:	8a23      	ldrh	r3, [r4, #16]
			listener->recv(info, buf);
   17c66:	9a03      	ldr	r2, [sp, #12]
   17c68:	9302      	str	r3, [sp, #8]
			buf->len = len;
   17c6a:	9b01      	ldr	r3, [sp, #4]
   17c6c:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   17c6e:	6812      	ldr	r2, [r2, #0]
	state->offset = net_buf_simple_headroom(buf);
   17c70:	4683      	mov	fp, r0
   17c72:	4631      	mov	r1, r6
   17c74:	a806      	add	r0, sp, #24
   17c76:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   17c78:	6962      	ldr	r2, [r4, #20]
	buf->len = state->len;
   17c7a:	9b02      	ldr	r3, [sp, #8]
   17c7c:	8223      	strh	r3, [r4, #16]
	buf->data = buf->__buf + state->offset;
   17c7e:	fa12 f28b 	uxtah	r2, r2, fp
   17c82:	60e2      	str	r2, [r4, #12]
}
   17c84:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c86:	b1c2      	cbz	r2, 17cba <bt_hci_le_adv_report+0x146>
   17c88:	6897      	ldr	r7, [r2, #8]
   17c8a:	6813      	ldr	r3, [r2, #0]
   17c8c:	b19f      	cbz	r7, 17cb6 <bt_hci_le_adv_report+0x142>
   17c8e:	3f08      	subs	r7, #8
		if (listener->recv) {
   17c90:	2b00      	cmp	r3, #0
   17c92:	d1e3      	bne.n	17c5c <bt_hci_le_adv_report+0xe8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   17c94:	463a      	mov	r2, r7
   17c96:	e7f7      	b.n	17c88 <bt_hci_le_adv_report+0x114>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   17c98:	2bff      	cmp	r3, #255	; 0xff
   17c9a:	d105      	bne.n	17ca8 <bt_hci_le_adv_report+0x134>
   17c9c:	4931      	ldr	r1, [pc, #196]	; (17d64 <bt_hci_le_adv_report+0x1f0>)
   17c9e:	2207      	movs	r2, #7
   17ca0:	a804      	add	r0, sp, #16
   17ca2:	f013 f9a8 	bl	2aff6 <memcpy>
}
   17ca6:	e7b2      	b.n	17c0e <bt_hci_le_adv_report+0x9a>
		bt_addr_le_copy(&id_addr,
   17ca8:	4649      	mov	r1, r9
   17caa:	2000      	movs	r0, #0
   17cac:	f013 fba5 	bl	2b3fa <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   17cb0:	2207      	movs	r2, #7
   17cb2:	4601      	mov	r1, r0
   17cb4:	e7f4      	b.n	17ca0 <bt_hci_le_adv_report+0x12c>
		if (listener->recv) {
   17cb6:	2b00      	cmp	r3, #0
   17cb8:	d1d0      	bne.n	17c5c <bt_hci_le_adv_report+0xe8>
	info->addr = NULL;
   17cba:	2300      	movs	r3, #0
   17cbc:	9306      	str	r3, [sp, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17cbe:	4b2a      	ldr	r3, [pc, #168]	; (17d68 <bt_hci_le_adv_report+0x1f4>)
	check_pending_conn(&id_addr, addr, info->adv_props);
   17cc0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   17cc4:	f3bf 8f5b 	dmb	ish
   17cc8:	681a      	ldr	r2, [r3, #0]
   17cca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17cce:	0610      	lsls	r0, r2, #24
   17cd0:	f3c2 1bc0 	ubfx	fp, r2, #7, #1
   17cd4:	d421      	bmi.n	17d1a <bt_hci_le_adv_report+0x1a6>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   17cd6:	07ca      	lsls	r2, r1, #31
   17cd8:	d51f      	bpl.n	17d1a <bt_hci_le_adv_report+0x1a6>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   17cda:	2202      	movs	r2, #2
   17cdc:	a904      	add	r1, sp, #16
   17cde:	4658      	mov	r0, fp
   17ce0:	f000 ffb6 	bl	18c50 <bt_conn_lookup_state_le>
	if (!conn) {
   17ce4:	4607      	mov	r7, r0
   17ce6:	b1c0      	cbz	r0, 17d1a <bt_hci_le_adv_report+0x1a6>
   17ce8:	f3bf 8f5b 	dmb	ish
   17cec:	4b1e      	ldr	r3, [pc, #120]	; (17d68 <bt_hci_le_adv_report+0x1f4>)
   17cee:	681b      	ldr	r3, [r3, #0]
   17cf0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17cf4:	065b      	lsls	r3, r3, #25
   17cf6:	d41a      	bmi.n	17d2e <bt_hci_le_adv_report+0x1ba>
   17cf8:	2207      	movs	r2, #7
   17cfa:	4649      	mov	r1, r9
   17cfc:	f107 009e 	add.w	r0, r7, #158	; 0x9e
   17d00:	f013 f979 	bl	2aff6 <memcpy>
	if (bt_le_create_conn(conn)) {
   17d04:	4638      	mov	r0, r7
   17d06:	f7fe fb6f 	bl	163e8 <bt_le_create_conn>
   17d0a:	b9a8      	cbnz	r0, 17d38 <bt_hci_le_adv_report+0x1c4>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   17d0c:	4638      	mov	r0, r7
   17d0e:	2106      	movs	r1, #6
   17d10:	f000 fce6 	bl	186e0 <bt_conn_set_state>
	bt_conn_unref(conn);
   17d14:	4638      	mov	r0, r7
   17d16:	f000 fcbb 	bl	18690 <bt_conn_unref>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   17d1a:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   17d1c:	4630      	mov	r0, r6
   17d1e:	3101      	adds	r1, #1
   17d20:	f108 38ff 	add.w	r8, r8, #4294967295
   17d24:	f007 f96e 	bl	1f004 <net_buf_simple_pull>
   17d28:	fa5f f888 	uxtb.w	r8, r8
   17d2c:	e72e      	b.n	17b8c <bt_hci_le_adv_report+0x18>
	return bt_le_scan_set_enable_legacy(enable);
   17d2e:	4658      	mov	r0, fp
   17d30:	f7ff fe4e 	bl	179d0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   17d34:	2800      	cmp	r0, #0
   17d36:	d0df      	beq.n	17cf8 <bt_hci_le_adv_report+0x184>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   17d38:	231f      	movs	r3, #31
   17d3a:	733b      	strb	r3, [r7, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d3c:	2100      	movs	r1, #0
   17d3e:	4638      	mov	r0, r7
   17d40:	f000 fcce 	bl	186e0 <bt_conn_set_state>
	bt_conn_unref(conn);
   17d44:	4638      	mov	r0, r7
   17d46:	f000 fca3 	bl	18690 <bt_conn_unref>
	bt_le_scan_update(false);
   17d4a:	2000      	movs	r0, #0
   17d4c:	f7ff fecc 	bl	17ae8 <bt_le_scan_update>
   17d50:	e7e3      	b.n	17d1a <bt_hci_le_adv_report+0x1a6>
   17d52:	bf00      	nop
   17d54:	20003140 	.word	0x20003140
   17d58:	0003123a 	.word	0x0003123a
   17d5c:	00031258 	.word	0x00031258
   17d60:	20003138 	.word	0x20003138
   17d64:	0003055c 	.word	0x0003055c
   17d68:	20000444 	.word	0x20000444

00017d6c <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   17d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17d6e:	4e3d      	ldr	r6, [pc, #244]	; (17e64 <bt_le_scan_start+0xf8>)
   17d70:	f3bf 8f5b 	dmb	ish
   17d74:	6833      	ldr	r3, [r6, #0]
   17d76:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17d7a:	f013 0f04 	tst.w	r3, #4
{
   17d7e:	4605      	mov	r5, r0
   17d80:	460f      	mov	r7, r1
   17d82:	4634      	mov	r4, r6
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17d84:	d06a      	beq.n	17e5c <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   17d86:	7802      	ldrb	r2, [r0, #0]
   17d88:	2a01      	cmp	r2, #1
   17d8a:	d903      	bls.n	17d94 <bt_le_scan_start+0x28>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   17d8c:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   17d90:	4620      	mov	r0, r4
   17d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   17d94:	6843      	ldr	r3, [r0, #4]
   17d96:	2b0f      	cmp	r3, #15
   17d98:	d8f8      	bhi.n	17d8c <bt_le_scan_start+0x20>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   17d9a:	8900      	ldrh	r0, [r0, #8]
   17d9c:	1f03      	subs	r3, r0, #4
   17d9e:	b29b      	uxth	r3, r3
   17da0:	f643 7cfc 	movw	ip, #16380	; 0x3ffc
   17da4:	4563      	cmp	r3, ip
   17da6:	d8f1      	bhi.n	17d8c <bt_le_scan_start+0x20>
	if (param->window < 0x0004 || param->window > 0x4000) {
   17da8:	8969      	ldrh	r1, [r5, #10]
   17daa:	1f0b      	subs	r3, r1, #4
   17dac:	b29b      	uxth	r3, r3
   17dae:	4563      	cmp	r3, ip
   17db0:	d8ec      	bhi.n	17d8c <bt_le_scan_start+0x20>
	if (param->window > param->interval) {
   17db2:	4288      	cmp	r0, r1
   17db4:	d3ea      	bcc.n	17d8c <bt_le_scan_start+0x20>
	if (param->type && !bt_id_scan_random_addr_check()) {
   17db6:	b98a      	cbnz	r2, 17ddc <bt_le_scan_start+0x70>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17db8:	f3bf 8f5b 	dmb	ish
   17dbc:	e854 0f00 	ldrex	r0, [r4]
   17dc0:	f040 0380 	orr.w	r3, r0, #128	; 0x80
   17dc4:	e844 3200 	strex	r2, r3, [r4]
   17dc8:	2a00      	cmp	r2, #0
   17dca:	d1f7      	bne.n	17dbc <bt_le_scan_start+0x50>
   17dcc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17dd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   17dd4:	d007      	beq.n	17de6 <bt_le_scan_start+0x7a>
		return -EALREADY;
   17dd6:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17dda:	e7d9      	b.n	17d90 <bt_le_scan_start+0x24>
	if (param->type && !bt_id_scan_random_addr_check()) {
   17ddc:	f013 fb19 	bl	2b412 <bt_id_scan_random_addr_check>
   17de0:	2800      	cmp	r0, #0
   17de2:	d1e9      	bne.n	17db8 <bt_le_scan_start+0x4c>
   17de4:	e7d2      	b.n	17d8c <bt_le_scan_start+0x20>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17de6:	f3bf 8f5b 	dmb	ish
   17dea:	6833      	ldr	r3, [r6, #0]
   17dec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   17df0:	065a      	lsls	r2, r3, #25
   17df2:	d509      	bpl.n	17e08 <bt_le_scan_start+0x9c>
	return bt_le_scan_set_enable_legacy(enable);
   17df4:	f7ff fdec 	bl	179d0 <bt_le_scan_set_enable_legacy>
		if (err) {
   17df8:	4604      	mov	r4, r0
   17dfa:	b128      	cbz	r0, 17e08 <bt_le_scan_start+0x9c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17dfc:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17e00:	4818      	ldr	r0, [pc, #96]	; (17e64 <bt_le_scan_start+0xf8>)
   17e02:	f013 fb18 	bl	2b436 <atomic_and>
		return err;
   17e06:	e7c3      	b.n	17d90 <bt_le_scan_start+0x24>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   17e08:	686b      	ldr	r3, [r5, #4]
	if (val) {
   17e0a:	07db      	lsls	r3, r3, #31
   17e0c:	d515      	bpl.n	17e3a <bt_le_scan_start+0xce>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17e0e:	f3bf 8f5b 	dmb	ish
   17e12:	e856 3f00 	ldrex	r3, [r6]
   17e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   17e1a:	e846 3200 	strex	r2, r3, [r6]
   17e1e:	2a00      	cmp	r2, #0
   17e20:	d1f7      	bne.n	17e12 <bt_le_scan_start+0xa6>
   17e22:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   17e26:	89ab      	ldrh	r3, [r5, #12]
   17e28:	b16b      	cbz	r3, 17e46 <bt_le_scan_start+0xda>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e2a:	480e      	ldr	r0, [pc, #56]	; (17e64 <bt_le_scan_start+0xf8>)
   17e2c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17e30:	f013 fb01 	bl	2b436 <atomic_and>
			return -ENOTSUP;
   17e34:	f06f 0485 	mvn.w	r4, #133	; 0x85
   17e38:	e7aa      	b.n	17d90 <bt_le_scan_start+0x24>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e3a:	f46f 7100 	mvn.w	r1, #512	; 0x200
   17e3e:	4809      	ldr	r0, [pc, #36]	; (17e64 <bt_le_scan_start+0xf8>)
   17e40:	f013 faf9 	bl	2b436 <atomic_and>
   17e44:	e7ef      	b.n	17e26 <bt_le_scan_start+0xba>
		err = start_le_scan_legacy(param->type, param->interval,
   17e46:	896a      	ldrh	r2, [r5, #10]
   17e48:	8929      	ldrh	r1, [r5, #8]
   17e4a:	7828      	ldrb	r0, [r5, #0]
   17e4c:	f7ff fdf4 	bl	17a38 <start_le_scan_legacy>
	if (err) {
   17e50:	4604      	mov	r4, r0
   17e52:	2800      	cmp	r0, #0
   17e54:	d1d2      	bne.n	17dfc <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   17e56:	4b04      	ldr	r3, [pc, #16]	; (17e68 <bt_le_scan_start+0xfc>)
   17e58:	601f      	str	r7, [r3, #0]
	return 0;
   17e5a:	e799      	b.n	17d90 <bt_le_scan_start+0x24>
		return -EAGAIN;
   17e5c:	f06f 040a 	mvn.w	r4, #10
   17e60:	e796      	b.n	17d90 <bt_le_scan_start+0x24>
   17e62:	bf00      	nop
   17e64:	20000444 	.word	0x20000444
   17e68:	20003140 	.word	0x20003140

00017e6c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   17e6c:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17e6e:	4808      	ldr	r0, [pc, #32]	; (17e90 <bt_le_scan_stop+0x24>)
   17e70:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17e74:	f013 fadf 	bl	2b436 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   17e78:	0603      	lsls	r3, r0, #24
   17e7a:	d506      	bpl.n	17e8a <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   17e7c:	4b05      	ldr	r3, [pc, #20]	; (17e94 <bt_le_scan_stop+0x28>)
   17e7e:	2000      	movs	r0, #0
   17e80:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   17e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   17e86:	f7ff be2f 	b.w	17ae8 <bt_le_scan_update>
}
   17e8a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17e8e:	bd08      	pop	{r3, pc}
   17e90:	20000444 	.word	0x20000444
   17e94:	20003140 	.word	0x20003140

00017e98 <bt_le_scan_cb_register>:
	parent->next = child;
   17e98:	2300      	movs	r3, #0
   17e9a:	6083      	str	r3, [r0, #8]
	return list->tail;
   17e9c:	4b05      	ldr	r3, [pc, #20]	; (17eb4 <bt_le_scan_cb_register+0x1c>)
   17e9e:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   17ea0:	f100 0208 	add.w	r2, r0, #8
Z_GENLIST_APPEND(slist, snode)
   17ea4:	b911      	cbnz	r1, 17eac <bt_le_scan_cb_register+0x14>
	list->head = node;
   17ea6:	e9c3 2200 	strd	r2, r2, [r3]
}
   17eaa:	4770      	bx	lr
	parent->next = child;
   17eac:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17eae:	605a      	str	r2, [r3, #4]
}
   17eb0:	4770      	bx	lr
   17eb2:	bf00      	nop
   17eb4:	20003138 	.word	0x20003138

00017eb8 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   17eb8:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   17eba:	4904      	ldr	r1, [pc, #16]	; (17ecc <bt_pub_key_is_debug+0x14>)
   17ebc:	2240      	movs	r2, #64	; 0x40
   17ebe:	f013 f873 	bl	2afa8 <memcmp>
}
   17ec2:	fab0 f080 	clz	r0, r0
   17ec6:	0940      	lsrs	r0, r0, #5
   17ec8:	bd08      	pop	{r3, pc}
   17eca:	bf00      	nop
   17ecc:	000312f8 	.word	0x000312f8

00017ed0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   17ed0:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   17ed2:	4b37      	ldr	r3, [pc, #220]	; (17fb0 <bt_pub_key_gen+0xe0>)
   17ed4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   17ed8:	f003 0306 	and.w	r3, r3, #6
   17edc:	2b06      	cmp	r3, #6
   17ede:	d007      	beq.n	17ef0 <bt_pub_key_gen+0x20>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		LOG_WRN("ECC HCI commands not available");
   17ee0:	4834      	ldr	r0, [pc, #208]	; (17fb4 <bt_pub_key_gen+0xe4>)
   17ee2:	2157      	movs	r1, #87	; 0x57
   17ee4:	f012 f8bf 	bl	2a066 <z_log_minimal_printk>
		return -ENOTSUP;
   17ee8:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   17eec:	4628      	mov	r0, r5
   17eee:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
   17ef0:	2800      	cmp	r0, #0
   17ef2:	d05a      	beq.n	17faa <bt_pub_key_gen+0xda>
	return list->head;
   17ef4:	4e30      	ldr	r6, [pc, #192]	; (17fb8 <bt_pub_key_gen+0xe8>)
   17ef6:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17ef8:	b16a      	cbz	r2, 17f16 <bt_pub_key_gen+0x46>
   17efa:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
   17efc:	4283      	cmp	r3, r0
   17efe:	d106      	bne.n	17f0e <bt_pub_key_gen+0x3e>
			LOG_WRN("Callback already registered");
   17f00:	482e      	ldr	r0, [pc, #184]	; (17fbc <bt_pub_key_gen+0xec>)
   17f02:	2157      	movs	r1, #87	; 0x57
   17f04:	f012 f8af 	bl	2a066 <z_log_minimal_printk>
			return -EALREADY;
   17f08:	f06f 0577 	mvn.w	r5, #119	; 0x77
   17f0c:	e7ee      	b.n	17eec <bt_pub_key_gen+0x1c>
	return node->next;
   17f0e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f10:	b10b      	cbz	r3, 17f16 <bt_pub_key_gen+0x46>
   17f12:	3b04      	subs	r3, #4
   17f14:	e7f2      	b.n	17efc <bt_pub_key_gen+0x2c>
	parent->next = child;
   17f16:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
   17f18:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   17f1a:	1d03      	adds	r3, r0, #4
	list->head = node;
   17f1c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   17f1e:	b902      	cbnz	r2, 17f22 <bt_pub_key_gen+0x52>
	list->tail = node;
   17f20:	6073      	str	r3, [r6, #4]
   17f22:	4c27      	ldr	r4, [pc, #156]	; (17fc0 <bt_pub_key_gen+0xf0>)
   17f24:	f3bf 8f5b 	dmb	ish
   17f28:	e854 2f00 	ldrex	r2, [r4]
   17f2c:	f042 0320 	orr.w	r3, r2, #32
   17f30:	e844 3100 	strex	r1, r3, [r4]
   17f34:	2900      	cmp	r1, #0
   17f36:	d1f7      	bne.n	17f28 <bt_pub_key_gen+0x58>
   17f38:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17f3c:	f012 0220 	ands.w	r2, r2, #32
   17f40:	d001      	beq.n	17f46 <bt_pub_key_gen+0x76>
	return 0;
   17f42:	2500      	movs	r5, #0
   17f44:	e7d2      	b.n	17eec <bt_pub_key_gen+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17f46:	f3bf 8f5b 	dmb	ish
   17f4a:	e854 3f00 	ldrex	r3, [r4]
   17f4e:	f023 0310 	bic.w	r3, r3, #16
   17f52:	e844 3100 	strex	r1, r3, [r4]
   17f56:	2900      	cmp	r1, #0
   17f58:	d1f7      	bne.n	17f4a <bt_pub_key_gen+0x7a>
   17f5a:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   17f5e:	4611      	mov	r1, r2
   17f60:	f242 0025 	movw	r0, #8229	; 0x2025
   17f64:	f7fe f994 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   17f68:	4605      	mov	r5, r0
   17f6a:	2800      	cmp	r0, #0
   17f6c:	d0e9      	beq.n	17f42 <bt_pub_key_gen+0x72>
		LOG_ERR("Sending LE P256 Public Key command failed");
   17f6e:	4815      	ldr	r0, [pc, #84]	; (17fc4 <bt_pub_key_gen+0xf4>)
   17f70:	2145      	movs	r1, #69	; 0x45
   17f72:	f012 f878 	bl	2a066 <z_log_minimal_printk>
   17f76:	f3bf 8f5b 	dmb	ish
   17f7a:	e854 3f00 	ldrex	r3, [r4]
   17f7e:	f023 0320 	bic.w	r3, r3, #32
   17f82:	e844 3200 	strex	r2, r3, [r4]
   17f86:	2a00      	cmp	r2, #0
   17f88:	d1f7      	bne.n	17f7a <bt_pub_key_gen+0xaa>
   17f8a:	f3bf 8f5b 	dmb	ish
	return list->head;
   17f8e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f90:	b13c      	cbz	r4, 17fa2 <bt_pub_key_gen+0xd2>
			if (cb->func) {
   17f92:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   17f96:	3c04      	subs	r4, #4
			if (cb->func) {
   17f98:	b10b      	cbz	r3, 17f9e <bt_pub_key_gen+0xce>
				cb->func(NULL);
   17f9a:	2000      	movs	r0, #0
   17f9c:	4798      	blx	r3
	return node->next;
   17f9e:	6864      	ldr	r4, [r4, #4]
   17fa0:	e7f6      	b.n	17f90 <bt_pub_key_gen+0xc0>
	list->head = NULL;
   17fa2:	2300      	movs	r3, #0
	list->tail = NULL;
   17fa4:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
   17fa8:	e7a0      	b.n	17eec <bt_pub_key_gen+0x1c>
		return -EINVAL;
   17faa:	f06f 0515 	mvn.w	r5, #21
   17fae:	e79d      	b.n	17eec <bt_pub_key_gen+0x1c>
   17fb0:	20000378 	.word	0x20000378
   17fb4:	0003125d 	.word	0x0003125d
   17fb8:	20003148 	.word	0x20003148
   17fbc:	00031281 	.word	0x00031281
   17fc0:	20000444 	.word	0x20000444
   17fc4:	000312a2 	.word	0x000312a2

00017fc8 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17fc8:	4b05      	ldr	r3, [pc, #20]	; (17fe0 <bt_pub_key_get+0x18>)
   17fca:	f3bf 8f5b 	dmb	ish
   17fce:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
   17fd0:	4804      	ldr	r0, [pc, #16]	; (17fe4 <bt_pub_key_get+0x1c>)
   17fd2:	f3bf 8f5b 	dmb	ish
	return NULL;
   17fd6:	f013 0f10 	tst.w	r3, #16
}
   17fda:	bf08      	it	eq
   17fdc:	2000      	moveq	r0, #0
   17fde:	4770      	bx	lr
   17fe0:	20000444 	.word	0x20000444
   17fe4:	200041f9 	.word	0x200041f9

00017fe8 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   17fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
   17fea:	4d22      	ldr	r5, [pc, #136]	; (18074 <bt_dh_key_gen+0x8c>)
   17fec:	682b      	ldr	r3, [r5, #0]
   17fee:	428b      	cmp	r3, r1
{
   17ff0:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
   17ff2:	d039      	beq.n	18068 <bt_dh_key_gen+0x80>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   17ff4:	b11b      	cbz	r3, 17ffe <bt_dh_key_gen+0x16>
		return -EBUSY;
   17ff6:	f06f 040f 	mvn.w	r4, #15
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   17ffa:	4620      	mov	r0, r4
   17ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ffe:	4b1e      	ldr	r3, [pc, #120]	; (18078 <bt_dh_key_gen+0x90>)
   18000:	f3bf 8f5b 	dmb	ish
   18004:	681a      	ldr	r2, [r3, #0]
   18006:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1800a:	f3c2 1740 	ubfx	r7, r2, #5, #1
   1800e:	0692      	lsls	r2, r2, #26
   18010:	d4f1      	bmi.n	17ff6 <bt_dh_key_gen+0xe>
   18012:	f3bf 8f5b 	dmb	ish
   18016:	681b      	ldr	r3, [r3, #0]
   18018:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1801c:	06db      	lsls	r3, r3, #27
   1801e:	d526      	bpl.n	1806e <bt_dh_key_gen+0x86>
	dh_key_cb = cb;
   18020:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   18022:	f242 0026 	movw	r0, #8230	; 0x2026
   18026:	2140      	movs	r1, #64	; 0x40
   18028:	f7fe f8e8 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   1802c:	4604      	mov	r4, r0
   1802e:	b1c0      	cbz	r0, 18062 <bt_dh_key_gen+0x7a>
	return net_buf_simple_add(&buf->b, len);
   18030:	2140      	movs	r1, #64	; 0x40
   18032:	300c      	adds	r0, #12
   18034:	f007 f81a 	bl	1f06c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   18038:	2240      	movs	r2, #64	; 0x40
   1803a:	4631      	mov	r1, r6
   1803c:	f012 ffdb 	bl	2aff6 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   18040:	4621      	mov	r1, r4
   18042:	463a      	mov	r2, r7
   18044:	f242 0026 	movw	r0, #8230	; 0x2026
   18048:	f7fe f922 	bl	16290 <bt_hci_cmd_send_sync>
	if (err) {
   1804c:	4604      	mov	r4, r0
   1804e:	2800      	cmp	r0, #0
   18050:	d0d3      	beq.n	17ffa <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
   18052:	2300      	movs	r3, #0
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18054:	4809      	ldr	r0, [pc, #36]	; (1807c <bt_dh_key_gen+0x94>)
		dh_key_cb = NULL;
   18056:	602b      	str	r3, [r5, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   18058:	4622      	mov	r2, r4
   1805a:	2157      	movs	r1, #87	; 0x57
   1805c:	f012 f803 	bl	2a066 <z_log_minimal_printk>
		return err;
   18060:	e7cb      	b.n	17ffa <bt_dh_key_gen+0x12>
		return -ENOBUFS;
   18062:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18066:	e7f4      	b.n	18052 <bt_dh_key_gen+0x6a>
		return -EALREADY;
   18068:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1806c:	e7c5      	b.n	17ffa <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
   1806e:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   18072:	e7c2      	b.n	17ffa <bt_dh_key_gen+0x12>
   18074:	20003144 	.word	0x20003144
   18078:	20000444 	.word	0x20000444
   1807c:	000312d1 	.word	0x000312d1

00018080 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   18080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18082:	4c1b      	ldr	r4, [pc, #108]	; (180f0 <bt_hci_evt_le_pkey_complete+0x70>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   18084:	68c6      	ldr	r6, [r0, #12]
   18086:	f3bf 8f5b 	dmb	ish
   1808a:	e854 3f00 	ldrex	r3, [r4]
   1808e:	f023 0320 	bic.w	r3, r3, #32
   18092:	e844 3200 	strex	r2, r3, [r4]
   18096:	2a00      	cmp	r2, #0
   18098:	d1f7      	bne.n	1808a <bt_hci_evt_le_pkey_complete+0xa>
   1809a:	f3bf 8f5b 	dmb	ish

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1809e:	7833      	ldrb	r3, [r6, #0]
   180a0:	b983      	cbnz	r3, 180c4 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   180a2:	4814      	ldr	r0, [pc, #80]	; (180f4 <bt_hci_evt_le_pkey_complete+0x74>)
   180a4:	2240      	movs	r2, #64	; 0x40
   180a6:	1c71      	adds	r1, r6, #1
   180a8:	f012 ffa5 	bl	2aff6 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   180ac:	f3bf 8f5b 	dmb	ish
   180b0:	e854 3f00 	ldrex	r3, [r4]
   180b4:	f043 0310 	orr.w	r3, r3, #16
   180b8:	e844 3200 	strex	r2, r3, [r4]
   180bc:	2a00      	cmp	r2, #0
   180be:	d1f7      	bne.n	180b0 <bt_hci_evt_le_pkey_complete+0x30>
   180c0:	f3bf 8f5b 	dmb	ish
	return list->head;
   180c4:	4d0c      	ldr	r5, [pc, #48]	; (180f8 <bt_hci_evt_le_pkey_complete+0x78>)
   180c6:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   180c8:	b16c      	cbz	r4, 180e6 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   180ca:	4f0a      	ldr	r7, [pc, #40]	; (180f4 <bt_hci_evt_le_pkey_complete+0x74>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   180cc:	3c04      	subs	r4, #4
		if (cb->func) {
   180ce:	6823      	ldr	r3, [r4, #0]
   180d0:	b12b      	cbz	r3, 180de <bt_hci_evt_le_pkey_complete+0x5e>
			cb->func(evt->status ? NULL : pub_key);
   180d2:	7832      	ldrb	r2, [r6, #0]
   180d4:	2a00      	cmp	r2, #0
   180d6:	bf0c      	ite	eq
   180d8:	4638      	moveq	r0, r7
   180da:	2000      	movne	r0, #0
   180dc:	4798      	blx	r3
	return node->next;
   180de:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   180e0:	b10c      	cbz	r4, 180e6 <bt_hci_evt_le_pkey_complete+0x66>
   180e2:	3c04      	subs	r4, #4
   180e4:	e7f3      	b.n	180ce <bt_hci_evt_le_pkey_complete+0x4e>
	list->head = NULL;
   180e6:	2300      	movs	r3, #0
	list->tail = NULL;
   180e8:	e9c5 3300 	strd	r3, r3, [r5]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   180ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   180ee:	bf00      	nop
   180f0:	20000444 	.word	0x20000444
   180f4:	200041f9 	.word	0x200041f9
   180f8:	20003148 	.word	0x20003148

000180fc <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   180fc:	4905      	ldr	r1, [pc, #20]	; (18114 <bt_hci_evt_le_dhkey_complete+0x18>)
   180fe:	680b      	ldr	r3, [r1, #0]
   18100:	b133      	cbz	r3, 18110 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   18102:	68c2      	ldr	r2, [r0, #12]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   18104:	2000      	movs	r0, #0
   18106:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
   18108:	7811      	ldrb	r1, [r2, #0]
   1810a:	b901      	cbnz	r1, 1810e <bt_hci_evt_le_dhkey_complete+0x12>
   1810c:	1c50      	adds	r0, r2, #1
   1810e:	4718      	bx	r3
	}
}
   18110:	4770      	bx	lr
   18112:	bf00      	nop
   18114:	20003144 	.word	0x20003144

00018118 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   18118:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1811a:	4b11      	ldr	r3, [pc, #68]	; (18160 <notify_connected+0x48>)
   1811c:	681d      	ldr	r5, [r3, #0]
{
   1811e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18120:	b975      	cbnz	r5, 18140 <notify_connected+0x28>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18122:	4d10      	ldr	r5, [pc, #64]	; (18164 <notify_connected+0x4c>)
   18124:	4e10      	ldr	r6, [pc, #64]	; (18168 <notify_connected+0x50>)
   18126:	42b5      	cmp	r5, r6
   18128:	d918      	bls.n	1815c <notify_connected+0x44>
   1812a:	4910      	ldr	r1, [pc, #64]	; (1816c <notify_connected+0x54>)
   1812c:	4810      	ldr	r0, [pc, #64]	; (18170 <notify_connected+0x58>)
   1812e:	f240 525b 	movw	r2, #1371	; 0x55b
   18132:	f011 ff8a 	bl	2a04a <assert_print>
   18136:	480d      	ldr	r0, [pc, #52]	; (1816c <notify_connected+0x54>)
   18138:	f240 515b 	movw	r1, #1371	; 0x55b
   1813c:	f011 ff7e 	bl	2a03c <assert_post_action>
		if (cb->connected) {
   18140:	682b      	ldr	r3, [r5, #0]
   18142:	b113      	cbz	r3, 1814a <notify_connected+0x32>
			cb->connected(conn, conn->err);
   18144:	7b21      	ldrb	r1, [r4, #12]
   18146:	4620      	mov	r0, r4
   18148:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1814a:	69ad      	ldr	r5, [r5, #24]
   1814c:	e7e8      	b.n	18120 <notify_connected+0x8>
		if (cb->connected) {
   1814e:	682b      	ldr	r3, [r5, #0]
   18150:	b113      	cbz	r3, 18158 <notify_connected+0x40>
			cb->connected(conn, conn->err);
   18152:	7b21      	ldrb	r1, [r4, #12]
   18154:	4620      	mov	r0, r4
   18156:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18158:	351c      	adds	r5, #28
   1815a:	e7e4      	b.n	18126 <notify_connected+0xe>
   1815c:	d3f7      	bcc.n	1814e <notify_connected+0x36>
		}
	}
}
   1815e:	bd70      	pop	{r4, r5, r6, pc}
   18160:	20003180 	.word	0x20003180
   18164:	0002e46c 	.word	0x0002e46c
   18168:	0002e488 	.word	0x0002e488
   1816c:	0003133f 	.word	0x0003133f
   18170:	0002f2b5 	.word	0x0002f2b5

00018174 <tx_notify>:
{
   18174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18178:	4f15      	ldr	r7, [pc, #84]	; (181d0 <tx_notify+0x5c>)
{
   1817a:	4604      	mov	r4, r0
	tx->cb = NULL;
   1817c:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   18180:	f04f 0240 	mov.w	r2, #64	; 0x40
   18184:	f3ef 8311 	mrs	r3, BASEPRI
   18188:	f382 8812 	msr	BASEPRI_MAX, r2
   1818c:	f3bf 8f6f 	isb	sy
	return list->head;
   18190:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   18192:	b929      	cbnz	r1, 181a0 <tx_notify+0x2c>
	__asm__ volatile(
   18194:	f383 8811 	msr	BASEPRI, r3
   18198:	f3bf 8f6f 	isb	sy
}
   1819c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   181a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   181a2:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   181a4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   181a6:	4281      	cmp	r1, r0
	list->tail = node;
   181a8:	bf08      	it	eq
   181aa:	6262      	streq	r2, [r4, #36]	; 0x24
   181ac:	f383 8811 	msr	BASEPRI, r3
   181b0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   181b4:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   181b8:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   181bc:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   181c0:	4638      	mov	r0, r7
   181c2:	f015 fde1 	bl	2dd88 <k_queue_append>
		cb(conn, user_data, 0);
   181c6:	2200      	movs	r2, #0
   181c8:	4631      	mov	r1, r6
   181ca:	4620      	mov	r0, r4
   181cc:	47a8      	blx	r5
	while (1) {
   181ce:	e7d7      	b.n	18180 <tx_notify+0xc>
   181d0:	200009d8 	.word	0x200009d8

000181d4 <conn_tx_destroy>:
{
   181d4:	b570      	push	{r4, r5, r6, lr}
   181d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   181d8:	b941      	cbnz	r1, 181ec <conn_tx_destroy+0x18>
   181da:	490d      	ldr	r1, [pc, #52]	; (18210 <conn_tx_destroy+0x3c>)
   181dc:	480d      	ldr	r0, [pc, #52]	; (18214 <conn_tx_destroy+0x40>)
   181de:	2239      	movs	r2, #57	; 0x39
   181e0:	f011 ff33 	bl	2a04a <assert_print>
   181e4:	480a      	ldr	r0, [pc, #40]	; (18210 <conn_tx_destroy+0x3c>)
   181e6:	2139      	movs	r1, #57	; 0x39
   181e8:	f011 ff28 	bl	2a03c <assert_post_action>
	void *user_data = tx->user_data;
   181ec:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   181f0:	2200      	movs	r2, #0
	tx->user_data = NULL;
   181f2:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   181f6:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   181f8:	4807      	ldr	r0, [pc, #28]	; (18218 <conn_tx_destroy+0x44>)
   181fa:	f015 fdc5 	bl	2dd88 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   181fe:	4631      	mov	r1, r6
   18200:	4620      	mov	r0, r4
   18202:	462b      	mov	r3, r5
   18204:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   18208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   1820c:	4718      	bx	r3
   1820e:	bf00      	nop
   18210:	0003133f 	.word	0x0003133f
   18214:	0002f2b5 	.word	0x0002f2b5
   18218:	200009d8 	.word	0x200009d8

0001821c <send_frag>:
{
   1821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18220:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18222:	698d      	ldr	r5, [r1, #24]
{
   18224:	460e      	mov	r6, r1
   18226:	4617      	mov	r7, r2
   18228:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   1822a:	f04f 33ff 	mov.w	r3, #4294967295
   1822e:	4846      	ldr	r0, [pc, #280]	; (18348 <send_frag+0x12c>)
   18230:	f04f 32ff 	mov.w	r2, #4294967295
   18234:	f00c f974 	bl	24520 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   18238:	7b63      	ldrb	r3, [r4, #13]
   1823a:	2b07      	cmp	r3, #7
   1823c:	d178      	bne.n	18330 <send_frag+0x114>
	__asm__ volatile(
   1823e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18242:	f3ef 8211 	mrs	r2, BASEPRI
   18246:	f383 8812 	msr	BASEPRI_MAX, r3
   1824a:	f3bf 8f6f 	isb	sy
	if (tx) {
   1824e:	2d00      	cmp	r5, #0
   18250:	d043      	beq.n	182da <send_frag+0xbe>
	parent->next = child;
   18252:	2300      	movs	r3, #0
   18254:	602b      	str	r3, [r5, #0]
	return list->tail;
   18256:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   18258:	2b00      	cmp	r3, #0
   1825a:	d13b      	bne.n	182d4 <send_frag+0xb8>
	list->head = node;
   1825c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   18260:	f382 8811 	msr	BASEPRI, r2
   18264:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   18268:	2104      	movs	r1, #4
   1826a:	f106 000c 	add.w	r0, r6, #12
   1826e:	f006 fead 	bl	1efcc <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18272:	8823      	ldrh	r3, [r4, #0]
   18274:	f007 07fd 	and.w	r7, r7, #253	; 0xfd
   18278:	ea43 3707 	orr.w	r7, r3, r7, lsl #12
   1827c:	8007      	strh	r7, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1827e:	8a33      	ldrh	r3, [r6, #16]
   18280:	3b04      	subs	r3, #4
   18282:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18284:	2302      	movs	r3, #2
   18286:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   18288:	4630      	mov	r0, r6
   1828a:	f7fe fb31 	bl	168f0 <bt_send>
	if (err) {
   1828e:	4602      	mov	r2, r0
   18290:	2800      	cmp	r0, #0
   18292:	d057      	beq.n	18344 <send_frag+0x128>
		LOG_ERR("Unable to send to driver (err %d)", err);
   18294:	482d      	ldr	r0, [pc, #180]	; (1834c <send_frag+0x130>)
   18296:	2145      	movs	r1, #69	; 0x45
   18298:	f011 fee5 	bl	2a066 <z_log_minimal_printk>
	__asm__ volatile(
   1829c:	f04f 0340 	mov.w	r3, #64	; 0x40
   182a0:	f3ef 8711 	mrs	r7, BASEPRI
   182a4:	f383 8812 	msr	BASEPRI_MAX, r3
   182a8:	f3bf 8f6f 	isb	sy
		if (tx) {
   182ac:	b315      	cbz	r5, 182f4 <send_frag+0xd8>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   182ae:	4629      	mov	r1, r5
   182b0:	f104 0014 	add.w	r0, r4, #20
   182b4:	f013 f8d0 	bl	2b458 <sys_slist_find_and_remove>
	__asm__ volatile(
   182b8:	f387 8811 	msr	BASEPRI, r7
   182bc:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   182c0:	4821      	ldr	r0, [pc, #132]	; (18348 <send_frag+0x12c>)
   182c2:	f00c f8f3 	bl	244ac <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   182c6:	2300      	movs	r3, #0
   182c8:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   182ca:	4629      	mov	r1, r5
   182cc:	4620      	mov	r0, r4
   182ce:	f7ff ff81 	bl	181d4 <conn_tx_destroy>
   182d2:	e027      	b.n	18324 <send_frag+0x108>
	parent->next = child;
   182d4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   182d6:	61a5      	str	r5, [r4, #24]
}
   182d8:	e7c2      	b.n	18260 <send_frag+0x44>
	return list->tail;
   182da:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   182dc:	b133      	cbz	r3, 182ec <send_frag+0xd0>
			pending_no_cb = &tail_tx->pending_no_cb;
   182de:	f103 080c 	add.w	r8, r3, #12
   182e2:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   182e4:	3301      	adds	r3, #1
   182e6:	f8c8 3000 	str.w	r3, [r8]
   182ea:	e7b9      	b.n	18260 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   182ec:	69e3      	ldr	r3, [r4, #28]
   182ee:	f104 081c 	add.w	r8, r4, #28
   182f2:	e7f7      	b.n	182e4 <send_frag+0xc8>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   182f4:	f8d8 2000 	ldr.w	r2, [r8]
   182f8:	b952      	cbnz	r2, 18310 <send_frag+0xf4>
   182fa:	4915      	ldr	r1, [pc, #84]	; (18350 <send_frag+0x134>)
   182fc:	4815      	ldr	r0, [pc, #84]	; (18354 <send_frag+0x138>)
   182fe:	f240 2227 	movw	r2, #551	; 0x227
   18302:	f011 fea2 	bl	2a04a <assert_print>
   18306:	4812      	ldr	r0, [pc, #72]	; (18350 <send_frag+0x134>)
   18308:	f240 2127 	movw	r1, #551	; 0x227
   1830c:	f011 fe96 	bl	2a03c <assert_post_action>
			(*pending_no_cb)--;
   18310:	3a01      	subs	r2, #1
   18312:	f8c8 2000 	str.w	r2, [r8]
   18316:	f387 8811 	msr	BASEPRI, r7
   1831a:	f3bf 8f6f 	isb	sy
   1831e:	480a      	ldr	r0, [pc, #40]	; (18348 <send_frag+0x12c>)
   18320:	f00c f8c4 	bl	244ac <z_impl_k_sem_give>
	if (always_consume) {
   18324:	f1b9 0f00 	cmp.w	r9, #0
   18328:	d108      	bne.n	1833c <send_frag+0x120>
	return false;
   1832a:	2000      	movs	r0, #0
}
   1832c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18330:	4805      	ldr	r0, [pc, #20]	; (18348 <send_frag+0x12c>)
   18332:	f00c f8bb 	bl	244ac <z_impl_k_sem_give>
	if (tx) {
   18336:	2d00      	cmp	r5, #0
   18338:	d1c5      	bne.n	182c6 <send_frag+0xaa>
   1833a:	e7f3      	b.n	18324 <send_frag+0x108>
		net_buf_unref(buf);
   1833c:	4630      	mov	r0, r6
   1833e:	f006 fd8f 	bl	1ee60 <net_buf_unref>
   18342:	e7f2      	b.n	1832a <send_frag+0x10e>
	return true;
   18344:	2001      	movs	r0, #1
   18346:	e7f1      	b.n	1832c <send_frag+0x110>
   18348:	20000478 	.word	0x20000478
   1834c:	00030b12 	.word	0x00030b12
   18350:	0003133f 	.word	0x0003133f
   18354:	0002f2b5 	.word	0x0002f2b5

00018358 <bt_conn_get_pkts>:
}
   18358:	4800      	ldr	r0, [pc, #0]	; (1835c <bt_conn_get_pkts+0x4>)
   1835a:	4770      	bx	lr
   1835c:	20000478 	.word	0x20000478

00018360 <bt_conn_new>:
{
   18360:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   18362:	2200      	movs	r2, #0
   18364:	4604      	mov	r4, r0
   18366:	428a      	cmp	r2, r1
   18368:	d102      	bne.n	18370 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1836a:	2400      	movs	r4, #0
}
   1836c:	4620      	mov	r0, r4
   1836e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18370:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
   18374:	2001      	movs	r0, #1
   18376:	f3bf 8f5b 	dmb	ish
   1837a:	e853 5f00 	ldrex	r5, [r3]
   1837e:	2d00      	cmp	r5, #0
   18380:	d104      	bne.n	1838c <bt_conn_new+0x2c>
   18382:	e843 0c00 	strex	ip, r0, [r3]
   18386:	f1bc 0f00 	cmp.w	ip, #0
   1838a:	d1f6      	bne.n	1837a <bt_conn_new+0x1a>
   1838c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18390:	d002      	beq.n	18398 <bt_conn_new+0x38>
   18392:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   18394:	4402      	add	r2, r0
   18396:	e7e6      	b.n	18366 <bt_conn_new+0x6>
	if (!conn) {
   18398:	2c00      	cmp	r4, #0
   1839a:	d0e6      	beq.n	1836a <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1839c:	22c0      	movs	r2, #192	; 0xc0
   1839e:	2100      	movs	r1, #0
   183a0:	4620      	mov	r0, r4
   183a2:	f012 fe33 	bl	2b00c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   183a6:	f104 0060 	add.w	r0, r4, #96	; 0x60
   183aa:	4904      	ldr	r1, [pc, #16]	; (183bc <bt_conn_new+0x5c>)
   183ac:	f00c fc24 	bl	24bf8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   183b0:	4903      	ldr	r1, [pc, #12]	; (183c0 <bt_conn_new+0x60>)
   183b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   183b6:	f00c fb09 	bl	249cc <k_work_init>
	return conn;
   183ba:	e7d7      	b.n	1836c <bt_conn_new+0xc>
   183bc:	00018f41 	.word	0x00018f41
   183c0:	0002b4b9 	.word	0x0002b4b9

000183c4 <conn_cleanup>:
{
   183c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183c8:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   183ca:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   183cc:	f104 0638 	add.w	r6, r4, #56	; 0x38
   183d0:	2300      	movs	r3, #0
   183d2:	2200      	movs	r2, #0
   183d4:	4630      	mov	r0, r6
   183d6:	f015 f802 	bl	2d3de <net_buf_get>
   183da:	4603      	mov	r3, r0
   183dc:	b960      	cbnz	r0, 183f8 <conn_cleanup+0x34>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   183de:	6963      	ldr	r3, [r4, #20]
   183e0:	b1ab      	cbz	r3, 1840e <conn_cleanup+0x4a>
   183e2:	4916      	ldr	r1, [pc, #88]	; (1843c <conn_cleanup+0x78>)
   183e4:	4816      	ldr	r0, [pc, #88]	; (18440 <conn_cleanup+0x7c>)
   183e6:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   183ea:	f011 fe2e 	bl	2a04a <assert_print>
   183ee:	f44f 712d 	mov.w	r1, #692	; 0x2b4
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   183f2:	4812      	ldr	r0, [pc, #72]	; (1843c <conn_cleanup+0x78>)
   183f4:	f011 fe22 	bl	2a03c <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   183f8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   183fa:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   183fc:	f006 fd30 	bl	1ee60 <net_buf_unref>
		if (tx) {
   18400:	2d00      	cmp	r5, #0
   18402:	d0e5      	beq.n	183d0 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   18404:	4629      	mov	r1, r5
   18406:	4620      	mov	r0, r4
   18408:	f7ff fee4 	bl	181d4 <conn_tx_destroy>
   1840c:	e7de      	b.n	183cc <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1840e:	69e3      	ldr	r3, [r4, #28]
   18410:	b143      	cbz	r3, 18424 <conn_cleanup+0x60>
   18412:	490a      	ldr	r1, [pc, #40]	; (1843c <conn_cleanup+0x78>)
   18414:	480a      	ldr	r0, [pc, #40]	; (18440 <conn_cleanup+0x7c>)
   18416:	f240 22b5 	movw	r2, #693	; 0x2b5
   1841a:	f011 fe16 	bl	2a04a <assert_print>
   1841e:	f240 21b5 	movw	r1, #693	; 0x2b5
   18422:	e7e6      	b.n	183f2 <conn_cleanup+0x2e>
	bt_conn_reset_rx_state(conn);
   18424:	4620      	mov	r0, r4
   18426:	f013 f84a 	bl	2b4be <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1842a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1842e:	2200      	movs	r2, #0
}
   18430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18434:	2300      	movs	r3, #0
   18436:	f00c bcc9 	b.w	24dcc <k_work_reschedule>
   1843a:	bf00      	nop
   1843c:	0003133f 	.word	0x0003133f
   18440:	0002f2b5 	.word	0x0002f2b5

00018444 <bt_conn_recv>:
{
   18444:	b570      	push	{r4, r5, r6, lr}
   18446:	4616      	mov	r6, r2
   18448:	4604      	mov	r4, r0
   1844a:	460d      	mov	r5, r1
	tx_notify(conn);
   1844c:	f7ff fe92 	bl	18174 <tx_notify>
	switch (flags) {
   18450:	2e01      	cmp	r6, #1
   18452:	d01f      	beq.n	18494 <bt_conn_recv+0x50>
   18454:	2e02      	cmp	r6, #2
   18456:	d149      	bne.n	184ec <bt_conn_recv+0xa8>
		if (conn->rx) {
   18458:	6923      	ldr	r3, [r4, #16]
   1845a:	b133      	cbz	r3, 1846a <bt_conn_recv+0x26>
			LOG_ERR("Unexpected first L2CAP frame");
   1845c:	482b      	ldr	r0, [pc, #172]	; (1850c <bt_conn_recv+0xc8>)
   1845e:	2145      	movs	r1, #69	; 0x45
   18460:	f011 fe01 	bl	2a066 <z_log_minimal_printk>
			bt_conn_reset_rx_state(conn);
   18464:	4620      	mov	r0, r4
   18466:	f013 f82a 	bl	2b4be <bt_conn_reset_rx_state>
		conn->rx = buf;
   1846a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1846c:	6921      	ldr	r1, [r4, #16]
   1846e:	8a0a      	ldrh	r2, [r1, #16]
   18470:	2a01      	cmp	r2, #1
   18472:	d949      	bls.n	18508 <bt_conn_recv+0xc4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18474:	68cb      	ldr	r3, [r1, #12]
   18476:	881b      	ldrh	r3, [r3, #0]
   18478:	3304      	adds	r3, #4
   1847a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1847c:	429a      	cmp	r2, r3
   1847e:	d343      	bcc.n	18508 <bt_conn_recv+0xc4>
	if (conn->rx->len > acl_total_len) {
   18480:	d93a      	bls.n	184f8 <bt_conn_recv+0xb4>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   18482:	4823      	ldr	r0, [pc, #140]	; (18510 <bt_conn_recv+0xcc>)
   18484:	2145      	movs	r1, #69	; 0x45
   18486:	f011 fdee 	bl	2a066 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   1848a:	4620      	mov	r0, r4
}
   1848c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   18490:	f013 b815 	b.w	2b4be <bt_conn_reset_rx_state>
		if (!conn->rx) {
   18494:	6920      	ldr	r0, [r4, #16]
   18496:	b938      	cbnz	r0, 184a8 <bt_conn_recv+0x64>
			LOG_ERR("Unexpected L2CAP continuation");
   18498:	481e      	ldr	r0, [pc, #120]	; (18514 <bt_conn_recv+0xd0>)
   1849a:	2145      	movs	r1, #69	; 0x45
   1849c:	f011 fde3 	bl	2a066 <z_log_minimal_printk>
		bt_conn_reset_rx_state(conn);
   184a0:	4620      	mov	r0, r4
   184a2:	f013 f80c 	bl	2b4be <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   184a6:	e001      	b.n	184ac <bt_conn_recv+0x68>
		if (!buf->len) {
   184a8:	8a2e      	ldrh	r6, [r5, #16]
   184aa:	b926      	cbnz	r6, 184b6 <bt_conn_recv+0x72>
			net_buf_unref(buf);
   184ac:	4628      	mov	r0, r5
}
   184ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   184b2:	f006 bcd5 	b.w	1ee60 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   184b6:	300c      	adds	r0, #12
   184b8:	f014 ffad 	bl	2d416 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   184bc:	4286      	cmp	r6, r0
   184be:	d90b      	bls.n	184d8 <bt_conn_recv+0x94>
			LOG_ERR("Not enough buffer space for L2CAP data");
   184c0:	4815      	ldr	r0, [pc, #84]	; (18518 <bt_conn_recv+0xd4>)
   184c2:	2145      	movs	r1, #69	; 0x45
   184c4:	f011 fdcf 	bl	2a066 <z_log_minimal_printk>
			bt_l2cap_recv(conn, conn->rx, false);
   184c8:	6921      	ldr	r1, [r4, #16]
   184ca:	2200      	movs	r2, #0
   184cc:	4620      	mov	r0, r4
   184ce:	f000 ffa3 	bl	19418 <bt_l2cap_recv>
			conn->rx = NULL;
   184d2:	2300      	movs	r3, #0
   184d4:	6123      	str	r3, [r4, #16]
   184d6:	e7e9      	b.n	184ac <bt_conn_recv+0x68>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   184d8:	6920      	ldr	r0, [r4, #16]
   184da:	8a2a      	ldrh	r2, [r5, #16]
   184dc:	68e9      	ldr	r1, [r5, #12]
   184de:	300c      	adds	r0, #12
   184e0:	f014 ffa1 	bl	2d426 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   184e4:	4628      	mov	r0, r5
   184e6:	f006 fcbb 	bl	1ee60 <net_buf_unref>
		break;
   184ea:	e7bf      	b.n	1846c <bt_conn_recv+0x28>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   184ec:	480b      	ldr	r0, [pc, #44]	; (1851c <bt_conn_recv+0xd8>)
   184ee:	4632      	mov	r2, r6
   184f0:	2145      	movs	r1, #69	; 0x45
   184f2:	f011 fdb8 	bl	2a066 <z_log_minimal_printk>
   184f6:	e7d3      	b.n	184a0 <bt_conn_recv+0x5c>
	conn->rx = NULL;
   184f8:	2300      	movs	r3, #0
   184fa:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   184fc:	4620      	mov	r0, r4
   184fe:	2201      	movs	r2, #1
}
   18500:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   18504:	f000 bf88 	b.w	19418 <bt_l2cap_recv>
}
   18508:	bd70      	pop	{r4, r5, r6, pc}
   1850a:	bf00      	nop
   1850c:	0003136f 	.word	0x0003136f
   18510:	00031403 	.word	0x00031403
   18514:	00031391 	.word	0x00031391
   18518:	000313b4 	.word	0x000313b4
   1851c:	000313e0 	.word	0x000313e0

00018520 <bt_conn_send_cb>:
{
   18520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18524:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   18526:	7b43      	ldrb	r3, [r0, #13]
   18528:	2b07      	cmp	r3, #7
{
   1852a:	4605      	mov	r5, r0
   1852c:	460f      	mov	r7, r1
   1852e:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   18530:	d006      	beq.n	18540 <bt_conn_send_cb+0x20>
		LOG_ERR("not connected!");
   18532:	4820      	ldr	r0, [pc, #128]	; (185b4 <bt_conn_send_cb+0x94>)
   18534:	2145      	movs	r1, #69	; 0x45
   18536:	f011 fd96 	bl	2a066 <z_log_minimal_printk>
		return -ENOTCONN;
   1853a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1853e:	e017      	b.n	18570 <bt_conn_send_cb+0x50>
	if (cb) {
   18540:	2a00      	cmp	r2, #0
   18542:	d035      	beq.n	185b0 <bt_conn_send_cb+0x90>
	return z_impl_z_current_get();
   18544:	f00d fba0 	bl	25c88 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18548:	4b1b      	ldr	r3, [pc, #108]	; (185b8 <bt_conn_send_cb+0x98>)
   1854a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1854c:	481b      	ldr	r0, [pc, #108]	; (185bc <bt_conn_send_cb+0x9c>)
   1854e:	bf07      	ittee	eq
   18550:	2200      	moveq	r2, #0
   18552:	2300      	moveq	r3, #0
   18554:	f04f 32ff 	movne.w	r2, #4294967295
   18558:	f04f 33ff 	movne.w	r3, #4294967295
   1855c:	f00b ff4e 	bl	243fc <z_impl_k_queue_get>
   18560:	4604      	mov	r4, r0
		if (!tx) {
   18562:	b938      	cbnz	r0, 18574 <bt_conn_send_cb+0x54>
			LOG_ERR("Unable to allocate TX context");
   18564:	4816      	ldr	r0, [pc, #88]	; (185c0 <bt_conn_send_cb+0xa0>)
   18566:	2145      	movs	r1, #69	; 0x45
   18568:	f011 fd7d 	bl	2a066 <z_log_minimal_printk>
			return -ENOBUFS;
   1856c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   18570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   18574:	7b6b      	ldrb	r3, [r5, #13]
   18576:	2b07      	cmp	r3, #7
   18578:	f04f 0800 	mov.w	r8, #0
   1857c:	d00c      	beq.n	18598 <bt_conn_send_cb+0x78>
			LOG_WRN("Disconnected while allocating context");
   1857e:	4811      	ldr	r0, [pc, #68]	; (185c4 <bt_conn_send_cb+0xa4>)
   18580:	2157      	movs	r1, #87	; 0x57
   18582:	f011 fd70 	bl	2a066 <z_log_minimal_printk>
	tx->user_data = NULL;
   18586:	e9c4 8801 	strd	r8, r8, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1858a:	480c      	ldr	r0, [pc, #48]	; (185bc <bt_conn_send_cb+0x9c>)
	tx->pending_no_cb = 0U;
   1858c:	f8c4 800c 	str.w	r8, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18590:	4621      	mov	r1, r4
   18592:	f015 fbf9 	bl	2dd88 <k_queue_append>
}
   18596:	e7d0      	b.n	1853a <bt_conn_send_cb+0x1a>
		tx->user_data = user_data;
   18598:	e9c0 6901 	strd	r6, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   1859c:	f8c0 800c 	str.w	r8, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   185a0:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   185a4:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   185a6:	4639      	mov	r1, r7
   185a8:	f006 fc3a 	bl	1ee20 <net_buf_put>
	return 0;
   185ac:	2000      	movs	r0, #0
   185ae:	e7df      	b.n	18570 <bt_conn_send_cb+0x50>
   185b0:	4614      	mov	r4, r2
   185b2:	e7f5      	b.n	185a0 <bt_conn_send_cb+0x80>
   185b4:	00031423 	.word	0x00031423
   185b8:	200028e0 	.word	0x200028e0
   185bc:	200009d8 	.word	0x200009d8
   185c0:	00031437 	.word	0x00031437
   185c4:	0003145a 	.word	0x0003145a

000185c8 <bt_conn_prepare_events>:
{
   185c8:	b570      	push	{r4, r5, r6, lr}
   185ca:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   185cc:	4816      	ldr	r0, [pc, #88]	; (18628 <bt_conn_prepare_events+0x60>)
   185ce:	f015 fd58 	bl	2e082 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   185d2:	4620      	mov	r0, r4
   185d4:	4b14      	ldr	r3, [pc, #80]	; (18628 <bt_conn_prepare_events+0x60>)
   185d6:	2200      	movs	r2, #0
   185d8:	2101      	movs	r1, #1
   185da:	f00e f89f 	bl	2671c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   185de:	4813      	ldr	r0, [pc, #76]	; (1862c <bt_conn_prepare_events+0x64>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   185e0:	f104 0614 	add.w	r6, r4, #20
	if (!atomic_get(&conn->ref)) {
   185e4:	f012 ff62 	bl	2b4ac <atomic_get>
   185e8:	b908      	cbnz	r0, 185ee <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   185ea:	2001      	movs	r0, #1
}
   185ec:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   185ee:	4d10      	ldr	r5, [pc, #64]	; (18630 <bt_conn_prepare_events+0x68>)
   185f0:	7b6b      	ldrb	r3, [r5, #13]
   185f2:	b953      	cbnz	r3, 1860a <bt_conn_prepare_events+0x42>
   185f4:	f06f 0140 	mvn.w	r1, #64	; 0x40
   185f8:	1d28      	adds	r0, r5, #4
   185fa:	f012 ff48 	bl	2b48e <atomic_and>
   185fe:	0643      	lsls	r3, r0, #25
   18600:	d503      	bpl.n	1860a <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
   18602:	4628      	mov	r0, r5
   18604:	f7ff fede 	bl	183c4 <conn_cleanup>
		return -ENOTCONN;
   18608:	e7ef      	b.n	185ea <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1860a:	7b6b      	ldrb	r3, [r5, #13]
   1860c:	2b07      	cmp	r3, #7
   1860e:	d1ec      	bne.n	185ea <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   18610:	4b08      	ldr	r3, [pc, #32]	; (18634 <bt_conn_prepare_events+0x6c>)
   18612:	4630      	mov	r0, r6
   18614:	2200      	movs	r2, #0
   18616:	2104      	movs	r1, #4
   18618:	f00e f880 	bl	2671c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1861c:	2301      	movs	r3, #1
   1861e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18622:	2002      	movs	r0, #2
	return ev_count;
   18624:	e7e2      	b.n	185ec <bt_conn_prepare_events+0x24>
   18626:	bf00      	nop
   18628:	200005ec 	.word	0x200005ec
   1862c:	20001d30 	.word	0x20001d30
   18630:	20001c70 	.word	0x20001c70
   18634:	20001ca8 	.word	0x20001ca8

00018638 <bt_conn_ref>:
{
   18638:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   1863a:	4603      	mov	r3, r0
   1863c:	b1b0      	cbz	r0, 1866c <bt_conn_ref+0x34>
		old = atomic_get(&conn->ref);
   1863e:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   18642:	4610      	mov	r0, r2
   18644:	f012 ff32 	bl	2b4ac <atomic_get>
		if (!old) {
   18648:	b1d8      	cbz	r0, 18682 <bt_conn_ref+0x4a>
   1864a:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1864e:	1c41      	adds	r1, r0, #1
   18650:	e852 4f00 	ldrex	r4, [r2]
   18654:	4284      	cmp	r4, r0
   18656:	d104      	bne.n	18662 <bt_conn_ref+0x2a>
   18658:	e842 1c00 	strex	ip, r1, [r2]
   1865c:	f1bc 0f00 	cmp.w	ip, #0
   18660:	d1f6      	bne.n	18650 <bt_conn_ref+0x18>
   18662:	f3bf 8f5b 	dmb	ish
   18666:	d1ec      	bne.n	18642 <bt_conn_ref+0xa>
}
   18668:	4618      	mov	r0, r3
   1866a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   1866c:	4906      	ldr	r1, [pc, #24]	; (18688 <bt_conn_ref+0x50>)
   1866e:	4807      	ldr	r0, [pc, #28]	; (1868c <bt_conn_ref+0x54>)
   18670:	f240 427c 	movw	r2, #1148	; 0x47c
   18674:	f011 fce9 	bl	2a04a <assert_print>
   18678:	4803      	ldr	r0, [pc, #12]	; (18688 <bt_conn_ref+0x50>)
   1867a:	f240 417c 	movw	r1, #1148	; 0x47c
   1867e:	f011 fcdd 	bl	2a03c <assert_post_action>
			return NULL;
   18682:	4603      	mov	r3, r0
   18684:	e7f0      	b.n	18668 <bt_conn_ref+0x30>
   18686:	bf00      	nop
   18688:	0003133f 	.word	0x0003133f
   1868c:	0002f2b5 	.word	0x0002f2b5

00018690 <bt_conn_unref>:
{
   18690:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18692:	30c0      	adds	r0, #192	; 0xc0
   18694:	f3bf 8f5b 	dmb	ish
   18698:	e850 3f00 	ldrex	r3, [r0]
   1869c:	1e5a      	subs	r2, r3, #1
   1869e:	e840 2100 	strex	r1, r2, [r0]
   186a2:	2900      	cmp	r1, #0
   186a4:	d1f8      	bne.n	18698 <bt_conn_unref+0x8>
   186a6:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   186aa:	2b00      	cmp	r3, #0
   186ac:	dc0a      	bgt.n	186c4 <bt_conn_unref+0x34>
   186ae:	4906      	ldr	r1, [pc, #24]	; (186c8 <bt_conn_unref+0x38>)
   186b0:	4806      	ldr	r0, [pc, #24]	; (186cc <bt_conn_unref+0x3c>)
   186b2:	f44f 6293 	mov.w	r2, #1176	; 0x498
   186b6:	f011 fcc8 	bl	2a04a <assert_print>
   186ba:	4803      	ldr	r0, [pc, #12]	; (186c8 <bt_conn_unref+0x38>)
   186bc:	f44f 6193 	mov.w	r1, #1176	; 0x498
   186c0:	f011 fcbc 	bl	2a03c <assert_post_action>
}
   186c4:	bd08      	pop	{r3, pc}
   186c6:	bf00      	nop
   186c8:	0003133f 	.word	0x0003133f
   186cc:	0002f2b5 	.word	0x0002f2b5

000186d0 <bt_conn_lookup_handle>:
{
   186d0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   186d2:	2101      	movs	r1, #1
   186d4:	4801      	ldr	r0, [pc, #4]	; (186dc <bt_conn_lookup_handle+0xc>)
   186d6:	f012 befb 	b.w	2b4d0 <conn_lookup_handle>
   186da:	bf00      	nop
   186dc:	20001c70 	.word	0x20001c70

000186e0 <bt_conn_set_state>:
{
   186e0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   186e2:	7b45      	ldrb	r5, [r0, #13]
   186e4:	428d      	cmp	r5, r1
{
   186e6:	4604      	mov	r4, r0
   186e8:	460e      	mov	r6, r1
	if (conn->state == state) {
   186ea:	d10b      	bne.n	18704 <bt_conn_set_state+0x24>
	switch (state) {
   186ec:	2d08      	cmp	r5, #8
   186ee:	bf96      	itet	ls
   186f0:	4b72      	ldrls	r3, [pc, #456]	; (188bc <bt_conn_set_state+0x1dc>)
	if (conn->state == state) {
   186f2:	4a73      	ldrhi	r2, [pc, #460]	; (188c0 <bt_conn_set_state+0x1e0>)
   186f4:	f853 2025 	ldrls.w	r2, [r3, r5, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   186f8:	4872      	ldr	r0, [pc, #456]	; (188c4 <bt_conn_set_state+0x1e4>)
   186fa:	2157      	movs	r1, #87	; 0x57
}
   186fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("no valid (%u) state was set", state);
   18700:	f011 bcb1 	b.w	2a066 <z_log_minimal_printk>
	conn->state = state;
   18704:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   18706:	b165      	cbz	r5, 18722 <bt_conn_set_state+0x42>
   18708:	2d06      	cmp	r5, #6
   1870a:	d010      	beq.n	1872e <bt_conn_set_state+0x4e>
	switch (conn->state) {
   1870c:	7b63      	ldrb	r3, [r4, #13]
   1870e:	2b08      	cmp	r3, #8
   18710:	f200 80cf 	bhi.w	188b2 <bt_conn_set_state+0x1d2>
   18714:	e8df f003 	tbb	[pc, r3]
   18718:	38381239 	.word	0x38381239
   1871c:	2a873838 	.word	0x2a873838
   18720:	38          	.byte	0x38
   18721:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   18722:	7883      	ldrb	r3, [r0, #2]
   18724:	2b08      	cmp	r3, #8
   18726:	d0f1      	beq.n	1870c <bt_conn_set_state+0x2c>
			bt_conn_ref(conn);
   18728:	f7ff ff86 	bl	18638 <bt_conn_ref>
   1872c:	e7ee      	b.n	1870c <bt_conn_set_state+0x2c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1872e:	7883      	ldrb	r3, [r0, #2]
   18730:	2b01      	cmp	r3, #1
   18732:	d1eb      	bne.n	1870c <bt_conn_set_state+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   18734:	3060      	adds	r0, #96	; 0x60
   18736:	f00c fb4f 	bl	24dd8 <k_work_cancel_delayable>
   1873a:	e7e7      	b.n	1870c <bt_conn_set_state+0x2c>
	z_impl_k_sem_give(sem);
   1873c:	4d62      	ldr	r5, [pc, #392]	; (188c8 <bt_conn_set_state+0x1e8>)
		tx->pending_no_cb = 0U;
   1873e:	2600      	movs	r6, #0
	__asm__ volatile(
   18740:	f04f 0240 	mov.w	r2, #64	; 0x40
   18744:	f3ef 8311 	mrs	r3, BASEPRI
   18748:	f382 8812 	msr	BASEPRI_MAX, r2
   1874c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18750:	69e2      	ldr	r2, [r4, #28]
   18752:	2a00      	cmp	r2, #0
   18754:	f000 8089 	beq.w	1886a <bt_conn_set_state+0x18a>
			conn->pending_no_cb--;
   18758:	3a01      	subs	r2, #1
   1875a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1875c:	f383 8811 	msr	BASEPRI, r3
   18760:	f3bf 8f6f 	isb	sy
   18764:	4628      	mov	r0, r5
   18766:	f00b fea1 	bl	244ac <z_impl_k_sem_give>
}
   1876a:	e7e9      	b.n	18740 <bt_conn_set_state+0x60>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1876c:	78a3      	ldrb	r3, [r4, #2]
   1876e:	2b04      	cmp	r3, #4
   18770:	d00a      	beq.n	18788 <bt_conn_set_state+0xa8>
	z_impl_k_queue_init(queue);
   18772:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18776:	f015 fafa 	bl	2dd6e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1877a:	4854      	ldr	r0, [pc, #336]	; (188cc <bt_conn_set_state+0x1ec>)
   1877c:	2100      	movs	r1, #0
   1877e:	f00e f8a9 	bl	268d4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   18782:	2300      	movs	r3, #0
	list->tail = NULL;
   18784:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   18788:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1878a:	78a3      	ldrb	r3, [r4, #2]
   1878c:	2b04      	cmp	r3, #4
   1878e:	d104      	bne.n	1879a <bt_conn_set_state+0xba>
			bt_conn_unref(conn);
   18790:	4620      	mov	r0, r4
}
   18792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   18796:	f7ff bf7b 	b.w	18690 <bt_conn_unref>
		switch (old_state) {
   1879a:	2d08      	cmp	r5, #8
   1879c:	d8f4      	bhi.n	18788 <bt_conn_set_state+0xa8>
   1879e:	a301      	add	r3, pc, #4	; (adr r3, 187a4 <bt_conn_set_state+0xc4>)
   187a0:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   187a4:	0001881f 	.word	0x0001881f
   187a8:	000187c9 	.word	0x000187c9
   187ac:	00018811 	.word	0x00018811
   187b0:	00018791 	.word	0x00018791
   187b4:	00018791 	.word	0x00018791
   187b8:	00018811 	.word	0x00018811
   187bc:	00018811 	.word	0x00018811
   187c0:	00018789 	.word	0x00018789
   187c4:	0001881f 	.word	0x0001881f
			tx_notify(conn);
   187c8:	4620      	mov	r0, r4
   187ca:	f7ff fcd3 	bl	18174 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   187ce:	78a3      	ldrb	r3, [r4, #2]
   187d0:	2b01      	cmp	r3, #1
   187d2:	d10a      	bne.n	187ea <bt_conn_set_state+0x10a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   187d4:	f104 0560 	add.w	r5, r4, #96	; 0x60
   187d8:	4628      	mov	r0, r5
   187da:	f015 fb5e 	bl	2de9a <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   187de:	f010 0f0c 	tst.w	r0, #12
   187e2:	d002      	beq.n	187ea <bt_conn_set_state+0x10a>
				k_work_cancel_delayable(&conn->deferred_work);
   187e4:	4628      	mov	r0, r5
   187e6:	f00c faf7 	bl	24dd8 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   187ea:	f3bf 8f5b 	dmb	ish
   187ee:	3404      	adds	r4, #4
   187f0:	e854 3f00 	ldrex	r3, [r4]
   187f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   187f8:	e844 3200 	strex	r2, r3, [r4]
   187fc:	2a00      	cmp	r2, #0
   187fe:	d1f7      	bne.n	187f0 <bt_conn_set_state+0x110>
   18800:	f3bf 8f5b 	dmb	ish
   18804:	4831      	ldr	r0, [pc, #196]	; (188cc <bt_conn_set_state+0x1ec>)
}
   18806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1880a:	2100      	movs	r1, #0
   1880c:	f00e b862 	b.w	268d4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   18810:	7b23      	ldrb	r3, [r4, #12]
   18812:	2b00      	cmp	r3, #0
   18814:	d0bc      	beq.n	18790 <bt_conn_set_state+0xb0>
				notify_connected(conn);
   18816:	4620      	mov	r0, r4
   18818:	f7ff fc7e 	bl	18118 <notify_connected>
   1881c:	e7b8      	b.n	18790 <bt_conn_set_state+0xb0>
			LOG_WRN("Invalid (%u) old state", state);
   1881e:	482c      	ldr	r0, [pc, #176]	; (188d0 <bt_conn_set_state+0x1f0>)
   18820:	4632      	mov	r2, r6
   18822:	2157      	movs	r1, #87	; 0x57
   18824:	e76a      	b.n	186fc <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18826:	78a3      	ldrb	r3, [r4, #2]
   18828:	2b01      	cmp	r3, #1
   1882a:	d1ad      	bne.n	18788 <bt_conn_set_state+0xa8>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1882c:	4b29      	ldr	r3, [pc, #164]	; (188d4 <bt_conn_set_state+0x1f4>)
   1882e:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   18830:	3460      	adds	r4, #96	; 0x60
					K_MSEC(10 * bt_dev.create_param.timeout));
   18832:	b1c0      	cbz	r0, 18866 <bt_conn_set_state+0x186>
   18834:	230a      	movs	r3, #10
   18836:	4358      	muls	r0, r3
   18838:	2100      	movs	r1, #0
			return ((t * to_hz + off) / from_hz);
   1883a:	03c9      	lsls	r1, r1, #15
   1883c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   18840:	f240 33e7 	movw	r3, #999	; 0x3e7
   18844:	03c0      	lsls	r0, r0, #15
   18846:	18c0      	adds	r0, r0, r3
   18848:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1884c:	f04f 0300 	mov.w	r3, #0
   18850:	f141 0100 	adc.w	r1, r1, #0
   18854:	f7e7 fc54 	bl	100 <__aeabi_uldivmod>
   18858:	4602      	mov	r2, r0
   1885a:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1885c:	4620      	mov	r0, r4
}
   1885e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   18862:	f00c ba4f 	b.w	24d04 <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
   18866:	4601      	mov	r1, r0
   18868:	e7e7      	b.n	1883a <bt_conn_set_state+0x15a>
	return list->head;
   1886a:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1886c:	b921      	cbnz	r1, 18878 <bt_conn_set_state+0x198>
   1886e:	f383 8811 	msr	BASEPRI, r3
   18872:	f3bf 8f6f 	isb	sy
		if (!node) {
   18876:	e787      	b.n	18788 <bt_conn_set_state+0xa8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18878:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1887a:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1887c:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1887e:	4281      	cmp	r1, r0
	list->tail = node;
   18880:	bf08      	it	eq
   18882:	61a2      	streq	r2, [r4, #24]
   18884:	f383 8811 	msr	BASEPRI, r3
   18888:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1888c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18890:	f3ef 8311 	mrs	r3, BASEPRI
   18894:	f382 8812 	msr	BASEPRI_MAX, r2
   18898:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1889c:	68ca      	ldr	r2, [r1, #12]
   1889e:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   188a0:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   188a2:	f383 8811 	msr	BASEPRI, r3
   188a6:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   188aa:	4620      	mov	r0, r4
   188ac:	f7ff fc92 	bl	181d4 <conn_tx_destroy>
   188b0:	e758      	b.n	18764 <bt_conn_set_state+0x84>
		LOG_WRN("no valid (%u) state was set", state);
   188b2:	4809      	ldr	r0, [pc, #36]	; (188d8 <bt_conn_set_state+0x1f8>)
   188b4:	4632      	mov	r2, r6
   188b6:	2157      	movs	r1, #87	; 0x57
   188b8:	e720      	b.n	186fc <bt_conn_set_state+0x1c>
   188ba:	bf00      	nop
   188bc:	0002e964 	.word	0x0002e964
   188c0:	00031485 	.word	0x00031485
   188c4:	0003148f 	.word	0x0003148f
   188c8:	20000478 	.word	0x20000478
   188cc:	200005ec 	.word	0x200005ec
   188d0:	000314a5 	.word	0x000314a5
   188d4:	20000378 	.word	0x20000378
   188d8:	000314c1 	.word	0x000314c1

000188dc <bt_conn_index>:
		index = conn - acl_conns;
   188dc:	4a0a      	ldr	r2, [pc, #40]	; (18908 <bt_conn_index+0x2c>)
   188de:	490b      	ldr	r1, [pc, #44]	; (1890c <bt_conn_index+0x30>)
{
   188e0:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   188e2:	1a83      	subs	r3, r0, r2
   188e4:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   188e6:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   188e8:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   188ec:	d00a      	beq.n	18904 <bt_conn_index+0x28>
   188ee:	4908      	ldr	r1, [pc, #32]	; (18910 <bt_conn_index+0x34>)
   188f0:	4808      	ldr	r0, [pc, #32]	; (18914 <bt_conn_index+0x38>)
   188f2:	f240 42b6 	movw	r2, #1206	; 0x4b6
   188f6:	f011 fba8 	bl	2a04a <assert_print>
   188fa:	4805      	ldr	r0, [pc, #20]	; (18910 <bt_conn_index+0x34>)
   188fc:	f240 41b6 	movw	r1, #1206	; 0x4b6
   18900:	f011 fb9c 	bl	2a03c <assert_post_action>
}
   18904:	b2d8      	uxtb	r0, r3
   18906:	bd08      	pop	{r3, pc}
   18908:	20001c70 	.word	0x20001c70
   1890c:	c28f5c29 	.word	0xc28f5c29
   18910:	0003133f 	.word	0x0003133f
   18914:	0002f2b5 	.word	0x0002f2b5

00018918 <bt_conn_create_pdu_timeout>:
{
   18918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1891a:	4604      	mov	r4, r0
   1891c:	460d      	mov	r5, r1
   1891e:	4617      	mov	r7, r2
   18920:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   18922:	f015 f9f5 	bl	2dd10 <k_is_in_isr>
   18926:	b150      	cbz	r0, 1893e <bt_conn_create_pdu_timeout+0x26>
   18928:	4910      	ldr	r1, [pc, #64]	; (1896c <bt_conn_create_pdu_timeout+0x54>)
   1892a:	4811      	ldr	r0, [pc, #68]	; (18970 <bt_conn_create_pdu_timeout+0x58>)
   1892c:	f240 42d2 	movw	r2, #1234	; 0x4d2
   18930:	f011 fb8b 	bl	2a04a <assert_print>
   18934:	480d      	ldr	r0, [pc, #52]	; (1896c <bt_conn_create_pdu_timeout+0x54>)
   18936:	f240 41d2 	movw	r1, #1234	; 0x4d2
   1893a:	f011 fb7f 	bl	2a03c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1893e:	490d      	ldr	r1, [pc, #52]	; (18974 <bt_conn_create_pdu_timeout+0x5c>)
   18940:	463a      	mov	r2, r7
   18942:	2c00      	cmp	r4, #0
   18944:	bf14      	ite	ne
   18946:	4620      	movne	r0, r4
   18948:	4608      	moveq	r0, r1
   1894a:	4633      	mov	r3, r6
   1894c:	f014 fd42 	bl	2d3d4 <net_buf_alloc_fixed>
	if (!buf) {
   18950:	4604      	mov	r4, r0
   18952:	b928      	cbnz	r0, 18960 <bt_conn_create_pdu_timeout+0x48>
		LOG_WRN("Unable to allocate buffer within timeout");
   18954:	4808      	ldr	r0, [pc, #32]	; (18978 <bt_conn_create_pdu_timeout+0x60>)
   18956:	2157      	movs	r1, #87	; 0x57
   18958:	f011 fb85 	bl	2a066 <z_log_minimal_printk>
}
   1895c:	4620      	mov	r0, r4
   1895e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   18960:	1d29      	adds	r1, r5, #4
   18962:	300c      	adds	r0, #12
   18964:	f006 f9a4 	bl	1ecb0 <net_buf_simple_reserve>
	return buf;
   18968:	e7f8      	b.n	1895c <bt_conn_create_pdu_timeout+0x44>
   1896a:	bf00      	nop
   1896c:	0003133f 	.word	0x0003133f
   18970:	0002f2b5 	.word	0x0002f2b5
   18974:	200009f4 	.word	0x200009f4
   18978:	000314e2 	.word	0x000314e2

0001897c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1897e:	1d03      	adds	r3, r0, #4
{
   18980:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18982:	4618      	mov	r0, r3
   18984:	f012 fd92 	bl	2b4ac <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18988:	0582      	lsls	r2, r0, #22
   1898a:	d512      	bpl.n	189b2 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   1898c:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18990:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   18994:	4291      	cmp	r1, r2
   18996:	d80c      	bhi.n	189b2 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
   18998:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   1899c:	4291      	cmp	r1, r2
   1899e:	d308      	bcc.n	189b2 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   189a0:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   189a4:	4291      	cmp	r1, r2
   189a6:	d104      	bne.n	189b2 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   189a8:	f46f 7100 	mvn.w	r1, #512	; 0x200
   189ac:	4618      	mov	r0, r3
   189ae:	f012 fd6e 	bl	2b48e <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   189b2:	4b16      	ldr	r3, [pc, #88]	; (18a0c <notify_le_param_updated+0x90>)
   189b4:	681d      	ldr	r5, [r3, #0]
   189b6:	b975      	cbnz	r5, 189d6 <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   189b8:	4d15      	ldr	r5, [pc, #84]	; (18a10 <notify_le_param_updated+0x94>)
   189ba:	4f16      	ldr	r7, [pc, #88]	; (18a14 <notify_le_param_updated+0x98>)
   189bc:	42bd      	cmp	r5, r7
   189be:	d922      	bls.n	18a06 <notify_le_param_updated+0x8a>
   189c0:	4915      	ldr	r1, [pc, #84]	; (18a18 <notify_le_param_updated+0x9c>)
   189c2:	4816      	ldr	r0, [pc, #88]	; (18a1c <notify_le_param_updated+0xa0>)
   189c4:	f240 52a5 	movw	r2, #1445	; 0x5a5
   189c8:	f011 fb3f 	bl	2a04a <assert_print>
   189cc:	4812      	ldr	r0, [pc, #72]	; (18a18 <notify_le_param_updated+0x9c>)
   189ce:	f240 51a5 	movw	r1, #1445	; 0x5a5
   189d2:	f011 fb33 	bl	2a03c <assert_post_action>
		if (cb->le_param_updated) {
   189d6:	68ee      	ldr	r6, [r5, #12]
   189d8:	b13e      	cbz	r6, 189ea <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   189da:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   189de:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   189e2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   189e6:	4620      	mov	r0, r4
   189e8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   189ea:	69ad      	ldr	r5, [r5, #24]
   189ec:	e7e3      	b.n	189b6 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
   189ee:	68ee      	ldr	r6, [r5, #12]
   189f0:	b13e      	cbz	r6, 18a02 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   189f2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   189f6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   189fa:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   189fe:	4620      	mov	r0, r4
   18a00:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a02:	351c      	adds	r5, #28
   18a04:	e7da      	b.n	189bc <notify_le_param_updated+0x40>
   18a06:	d3f2      	bcc.n	189ee <notify_le_param_updated+0x72>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   18a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18a0a:	bf00      	nop
   18a0c:	20003180 	.word	0x20003180
   18a10:	0002e46c 	.word	0x0002e46c
   18a14:	0002e488 	.word	0x0002e488
   18a18:	0003133f 	.word	0x0003133f
   18a1c:	0002f2b5 	.word	0x0002f2b5

00018a20 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   18a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a24:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18a26:	4608      	mov	r0, r1
{
   18a28:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18a2a:	f012 fc8c 	bl	2b346 <bt_le_conn_params_valid>
   18a2e:	4605      	mov	r5, r0
   18a30:	b918      	cbnz	r0, 18a3a <le_param_req+0x1a>
		return false;
   18a32:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18a34:	4628      	mov	r0, r5
   18a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18a3a:	4b19      	ldr	r3, [pc, #100]	; (18aa0 <le_param_req+0x80>)
   18a3c:	681e      	ldr	r6, [r3, #0]
   18a3e:	b97e      	cbnz	r6, 18a60 <le_param_req+0x40>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a40:	4e18      	ldr	r6, [pc, #96]	; (18aa4 <le_param_req+0x84>)
   18a42:	f8df 8064 	ldr.w	r8, [pc, #100]	; 18aa8 <le_param_req+0x88>
   18a46:	4546      	cmp	r6, r8
   18a48:	d923      	bls.n	18a92 <le_param_req+0x72>
   18a4a:	4918      	ldr	r1, [pc, #96]	; (18aac <le_param_req+0x8c>)
   18a4c:	4818      	ldr	r0, [pc, #96]	; (18ab0 <le_param_req+0x90>)
   18a4e:	f240 52ed 	movw	r2, #1517	; 0x5ed
   18a52:	f011 fafa 	bl	2a04a <assert_print>
   18a56:	4815      	ldr	r0, [pc, #84]	; (18aac <le_param_req+0x8c>)
   18a58:	f240 51ed 	movw	r1, #1517	; 0x5ed
   18a5c:	f011 faee 	bl	2a03c <assert_post_action>
		if (!cb->le_param_req) {
   18a60:	68b3      	ldr	r3, [r6, #8]
   18a62:	b90b      	cbnz	r3, 18a68 <le_param_req+0x48>
	for (cb = callback_list; cb; cb = cb->_next) {
   18a64:	69b6      	ldr	r6, [r6, #24]
   18a66:	e7ea      	b.n	18a3e <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   18a68:	4621      	mov	r1, r4
   18a6a:	4638      	mov	r0, r7
   18a6c:	4798      	blx	r3
   18a6e:	2800      	cmp	r0, #0
   18a70:	d0df      	beq.n	18a32 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18a72:	4620      	mov	r0, r4
   18a74:	f012 fc67 	bl	2b346 <bt_le_conn_params_valid>
   18a78:	2800      	cmp	r0, #0
   18a7a:	d1f3      	bne.n	18a64 <le_param_req+0x44>
   18a7c:	e7d9      	b.n	18a32 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   18a7e:	4621      	mov	r1, r4
   18a80:	4638      	mov	r0, r7
   18a82:	4798      	blx	r3
   18a84:	2800      	cmp	r0, #0
   18a86:	d0d4      	beq.n	18a32 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18a88:	4620      	mov	r0, r4
   18a8a:	f012 fc5c 	bl	2b346 <bt_le_conn_params_valid>
   18a8e:	b920      	cbnz	r0, 18a9a <le_param_req+0x7a>
   18a90:	e7cf      	b.n	18a32 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a92:	d2cf      	bcs.n	18a34 <le_param_req+0x14>
		if (!cb->le_param_req) {
   18a94:	68b3      	ldr	r3, [r6, #8]
   18a96:	2b00      	cmp	r3, #0
   18a98:	d1f1      	bne.n	18a7e <le_param_req+0x5e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18a9a:	361c      	adds	r6, #28
   18a9c:	e7d3      	b.n	18a46 <le_param_req+0x26>
   18a9e:	bf00      	nop
   18aa0:	20003180 	.word	0x20003180
   18aa4:	0002e46c 	.word	0x0002e46c
   18aa8:	0002e488 	.word	0x0002e488
   18aac:	0003133f 	.word	0x0003133f
   18ab0:	0002f2b5 	.word	0x0002f2b5

00018ab4 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   18ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18ab8:	78c3      	ldrb	r3, [r0, #3]
{
   18aba:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18abc:	b9bb      	cbnz	r3, 18aee <bt_conn_identity_resolved+0x3a>
		rpa = &conn->le.resp_addr;
   18abe:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18ac2:	4b16      	ldr	r3, [pc, #88]	; (18b1c <bt_conn_identity_resolved+0x68>)
   18ac4:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18ac6:	f104 0790 	add.w	r7, r4, #144	; 0x90
	for (cb = callback_list; cb; cb = cb->_next) {
   18aca:	b99d      	cbnz	r5, 18af4 <bt_conn_identity_resolved+0x40>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18acc:	4d14      	ldr	r5, [pc, #80]	; (18b20 <bt_conn_identity_resolved+0x6c>)
   18ace:	4f15      	ldr	r7, [pc, #84]	; (18b24 <bt_conn_identity_resolved+0x70>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18ad0:	f104 0890 	add.w	r8, r4, #144	; 0x90
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18ad4:	42bd      	cmp	r5, r7
   18ad6:	d91d      	bls.n	18b14 <bt_conn_identity_resolved+0x60>
   18ad8:	4913      	ldr	r1, [pc, #76]	; (18b28 <bt_conn_identity_resolved+0x74>)
   18ada:	4814      	ldr	r0, [pc, #80]	; (18b2c <bt_conn_identity_resolved+0x78>)
   18adc:	f240 72bc 	movw	r2, #1980	; 0x7bc
   18ae0:	f011 fab3 	bl	2a04a <assert_print>
   18ae4:	4810      	ldr	r0, [pc, #64]	; (18b28 <bt_conn_identity_resolved+0x74>)
   18ae6:	f240 71bc 	movw	r1, #1980	; 0x7bc
   18aea:	f011 faa7 	bl	2a03c <assert_post_action>
		rpa = &conn->le.init_addr;
   18aee:	f100 0697 	add.w	r6, r0, #151	; 0x97
   18af2:	e7e6      	b.n	18ac2 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
   18af4:	692b      	ldr	r3, [r5, #16]
   18af6:	b11b      	cbz	r3, 18b00 <bt_conn_identity_resolved+0x4c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18af8:	463a      	mov	r2, r7
   18afa:	4631      	mov	r1, r6
   18afc:	4620      	mov	r0, r4
   18afe:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18b00:	69ad      	ldr	r5, [r5, #24]
   18b02:	e7e2      	b.n	18aca <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
   18b04:	692b      	ldr	r3, [r5, #16]
   18b06:	b11b      	cbz	r3, 18b10 <bt_conn_identity_resolved+0x5c>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   18b08:	4642      	mov	r2, r8
   18b0a:	4631      	mov	r1, r6
   18b0c:	4620      	mov	r0, r4
   18b0e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b10:	351c      	adds	r5, #28
   18b12:	e7df      	b.n	18ad4 <bt_conn_identity_resolved+0x20>
   18b14:	d3f6      	bcc.n	18b04 <bt_conn_identity_resolved+0x50>
		}
	}
}
   18b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b1a:	bf00      	nop
   18b1c:	20003180 	.word	0x20003180
   18b20:	0002e46c 	.word	0x0002e46c
   18b24:	0002e488 	.word	0x0002e488
   18b28:	0003133f 	.word	0x0003133f
   18b2c:	0002f2b5 	.word	0x0002f2b5

00018b30 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   18b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
   18b32:	7a43      	ldrb	r3, [r0, #9]
   18b34:	7283      	strb	r3, [r0, #10]
{
   18b36:	4604      	mov	r4, r0
   18b38:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
   18b3a:	f012 fe11 	bl	2b760 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18b3e:	4b12      	ldr	r3, [pc, #72]	; (18b88 <bt_conn_security_changed+0x58>)
   18b40:	681d      	ldr	r5, [r3, #0]
   18b42:	b975      	cbnz	r5, 18b62 <bt_conn_security_changed+0x32>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b44:	4d11      	ldr	r5, [pc, #68]	; (18b8c <bt_conn_security_changed+0x5c>)
   18b46:	4f12      	ldr	r7, [pc, #72]	; (18b90 <bt_conn_security_changed+0x60>)
   18b48:	42bd      	cmp	r5, r7
   18b4a:	d91a      	bls.n	18b82 <bt_conn_security_changed+0x52>
   18b4c:	4911      	ldr	r1, [pc, #68]	; (18b94 <bt_conn_security_changed+0x64>)
   18b4e:	4812      	ldr	r0, [pc, #72]	; (18b98 <bt_conn_security_changed+0x68>)
   18b50:	f640 0228 	movw	r2, #2088	; 0x828
   18b54:	f011 fa79 	bl	2a04a <assert_print>
   18b58:	480e      	ldr	r0, [pc, #56]	; (18b94 <bt_conn_security_changed+0x64>)
   18b5a:	f640 0128 	movw	r1, #2088	; 0x828
   18b5e:	f011 fa6d 	bl	2a03c <assert_post_action>
		if (cb->security_changed) {
   18b62:	696b      	ldr	r3, [r5, #20]
   18b64:	b11b      	cbz	r3, 18b6e <bt_conn_security_changed+0x3e>
			cb->security_changed(conn, conn->sec_level, err);
   18b66:	7a61      	ldrb	r1, [r4, #9]
   18b68:	4632      	mov	r2, r6
   18b6a:	4620      	mov	r0, r4
   18b6c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18b6e:	69ad      	ldr	r5, [r5, #24]
   18b70:	e7e7      	b.n	18b42 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
   18b72:	696b      	ldr	r3, [r5, #20]
   18b74:	b11b      	cbz	r3, 18b7e <bt_conn_security_changed+0x4e>
			cb->security_changed(conn, conn->sec_level, err);
   18b76:	7a61      	ldrb	r1, [r4, #9]
   18b78:	4632      	mov	r2, r6
   18b7a:	4620      	mov	r0, r4
   18b7c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b7e:	351c      	adds	r5, #28
   18b80:	e7e2      	b.n	18b48 <bt_conn_security_changed+0x18>
   18b82:	d3f6      	bcc.n	18b72 <bt_conn_security_changed+0x42>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   18b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18b86:	bf00      	nop
   18b88:	20003180 	.word	0x20003180
   18b8c:	0002e46c 	.word	0x0002e46c
   18b90:	0002e488 	.word	0x0002e488
   18b94:	0003133f 	.word	0x0003133f
   18b98:	0002f2b5 	.word	0x0002f2b5

00018b9c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   18b9c:	4b02      	ldr	r3, [pc, #8]	; (18ba8 <bt_conn_cb_register+0xc>)
   18b9e:	681a      	ldr	r2, [r3, #0]
   18ba0:	6182      	str	r2, [r0, #24]
	callback_list = cb;
   18ba2:	6018      	str	r0, [r3, #0]
}
   18ba4:	4770      	bx	lr
   18ba6:	bf00      	nop
   18ba8:	20003180 	.word	0x20003180

00018bac <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18bac:	b570      	push	{r4, r5, r6, lr}
   18bae:	4606      	mov	r6, r0
   18bb0:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18bb2:	480a      	ldr	r0, [pc, #40]	; (18bdc <bt_conn_add_le+0x30>)
   18bb4:	2101      	movs	r1, #1
   18bb6:	f7ff fbd3 	bl	18360 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   18bba:	4604      	mov	r4, r0
   18bbc:	b160      	cbz	r0, 18bd8 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
   18bbe:	7206      	strb	r6, [r0, #8]
   18bc0:	2207      	movs	r2, #7
   18bc2:	4629      	mov	r1, r5
   18bc4:	3090      	adds	r0, #144	; 0x90
   18bc6:	f012 fa16 	bl	2aff6 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
   18bca:	2301      	movs	r3, #1
   18bcc:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   18bce:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18bd0:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18bd2:	4b03      	ldr	r3, [pc, #12]	; (18be0 <bt_conn_add_le+0x34>)
   18bd4:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18bd8:	4620      	mov	r0, r4
   18bda:	bd70      	pop	{r4, r5, r6, pc}
   18bdc:	20001c70 	.word	0x20001c70
   18be0:	00280018 	.word	0x00280018

00018be4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18be4:	b570      	push	{r4, r5, r6, lr}
   18be6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18be8:	480a      	ldr	r0, [pc, #40]	; (18c14 <bt_conn_lookup_addr_le+0x30>)
{
   18bea:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18bec:	f7ff fd24 	bl	18638 <bt_conn_ref>
   18bf0:	4604      	mov	r4, r0

		if (!conn) {
   18bf2:	b120      	cbz	r0, 18bfe <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18bf4:	7883      	ldrb	r3, [r0, #2]
   18bf6:	2b01      	cmp	r3, #1
   18bf8:	d004      	beq.n	18c04 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   18bfa:	f7ff fd49 	bl	18690 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18bfe:	2400      	movs	r4, #0
}
   18c00:	4620      	mov	r0, r4
   18c02:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18c04:	4632      	mov	r2, r6
   18c06:	4629      	mov	r1, r5
   18c08:	f012 fcfa 	bl	2b600 <bt_conn_is_peer_addr_le>
   18c0c:	2800      	cmp	r0, #0
   18c0e:	d1f7      	bne.n	18c00 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18c10:	4620      	mov	r0, r4
   18c12:	e7f2      	b.n	18bfa <bt_conn_lookup_addr_le+0x16>
   18c14:	20001c70 	.word	0x20001c70

00018c18 <bt_conn_exists_le>:
{
   18c18:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18c1a:	f7ff ffe3 	bl	18be4 <bt_conn_lookup_addr_le>
	if (conn) {
   18c1e:	4604      	mov	r4, r0
   18c20:	b170      	cbz	r0, 18c40 <bt_conn_exists_le+0x28>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   18c22:	7b43      	ldrb	r3, [r0, #13]
   18c24:	4807      	ldr	r0, [pc, #28]	; (18c44 <bt_conn_exists_le+0x2c>)
   18c26:	2b08      	cmp	r3, #8
   18c28:	bf96      	itet	ls
   18c2a:	4a07      	ldrls	r2, [pc, #28]	; (18c48 <bt_conn_exists_le+0x30>)
   18c2c:	4a07      	ldrhi	r2, [pc, #28]	; (18c4c <bt_conn_exists_le+0x34>)
   18c2e:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   18c32:	2157      	movs	r1, #87	; 0x57
   18c34:	f011 fa17 	bl	2a066 <z_log_minimal_printk>
		bt_conn_unref(conn);
   18c38:	4620      	mov	r0, r4
   18c3a:	f7ff fd29 	bl	18690 <bt_conn_unref>
		return true;
   18c3e:	2001      	movs	r0, #1
}
   18c40:	bd10      	pop	{r4, pc}
   18c42:	bf00      	nop
   18c44:	00031510 	.word	0x00031510
   18c48:	0002e964 	.word	0x0002e964
   18c4c:	00031485 	.word	0x00031485

00018c50 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18c52:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c54:	480e      	ldr	r0, [pc, #56]	; (18c90 <bt_conn_lookup_state_le+0x40>)
{
   18c56:	460e      	mov	r6, r1
   18c58:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18c5a:	f7ff fced 	bl	18638 <bt_conn_ref>

		if (!conn) {
   18c5e:	4604      	mov	r4, r0
   18c60:	b120      	cbz	r0, 18c6c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18c62:	7883      	ldrb	r3, [r0, #2]
   18c64:	2b01      	cmp	r3, #1
   18c66:	d003      	beq.n	18c70 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18c68:	f7ff fd12 	bl	18690 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18c6c:	2400      	movs	r4, #0
   18c6e:	e00d      	b.n	18c8c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18c70:	b136      	cbz	r6, 18c80 <bt_conn_lookup_state_le+0x30>
   18c72:	4632      	mov	r2, r6
   18c74:	4629      	mov	r1, r5
   18c76:	f012 fcc3 	bl	2b600 <bt_conn_is_peer_addr_le>
   18c7a:	b908      	cbnz	r0, 18c80 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18c7c:	4620      	mov	r0, r4
   18c7e:	e7f3      	b.n	18c68 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18c80:	7b63      	ldrb	r3, [r4, #13]
   18c82:	42bb      	cmp	r3, r7
   18c84:	d1fa      	bne.n	18c7c <bt_conn_lookup_state_le+0x2c>
   18c86:	7a23      	ldrb	r3, [r4, #8]
   18c88:	42ab      	cmp	r3, r5
   18c8a:	d1f7      	bne.n	18c7c <bt_conn_lookup_state_le+0x2c>
}
   18c8c:	4620      	mov	r0, r4
   18c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18c90:	20001c70 	.word	0x20001c70

00018c94 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   18c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18c98:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18c9a:	4855      	ldr	r0, [pc, #340]	; (18df0 <bt_conn_le_create+0x15c>)
   18c9c:	f012 fc06 	bl	2b4ac <atomic_get>
   18ca0:	460e      	mov	r6, r1
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18ca2:	0741      	lsls	r1, r0, #29
{
   18ca4:	4617      	mov	r7, r2
   18ca6:	4698      	mov	r8, r3
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18ca8:	d405      	bmi.n	18cb6 <bt_conn_le_create+0x22>
		return -EAGAIN;
   18caa:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   18cae:	4628      	mov	r0, r5
   18cb0:	b003      	add	sp, #12
   18cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   18cb6:	4610      	mov	r0, r2
   18cb8:	f012 fb45 	bl	2b346 <bt_le_conn_params_valid>
   18cbc:	b910      	cbnz	r0, 18cc4 <bt_conn_le_create+0x30>
		return -EINVAL;
   18cbe:	f06f 0515 	mvn.w	r5, #21
   18cc2:	e7f4      	b.n	18cae <bt_conn_le_create+0x1a>
	const uint32_t timeout_max = (MSEC_PER_SEC / 10) * bt_dev.rpa_timeout;
   18cc4:	4d4b      	ldr	r5, [pc, #300]	; (18df4 <bt_conn_le_create+0x160>)
   18cc6:	f8b5 31a8 	ldrh.w	r3, [r5, #424]	; 0x1a8
   18cca:	2264      	movs	r2, #100	; 0x64
   18ccc:	4353      	muls	r3, r2
	if (param->timeout > timeout_max) {
   18cce:	89b2      	ldrh	r2, [r6, #12]
   18cd0:	4293      	cmp	r3, r2
   18cd2:	d3f4      	bcc.n	18cbe <bt_conn_le_create+0x2a>
   18cd4:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   18cd8:	f012 fbe8 	bl	2b4ac <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18cdc:	0602      	lsls	r2, r0, #24
   18cde:	d4e4      	bmi.n	18caa <bt_conn_le_create+0x16>
   18ce0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
   18ce4:	f012 fbe2 	bl	2b4ac <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   18ce8:	04c3      	lsls	r3, r0, #19
   18cea:	f3c0 3900 	ubfx	r9, r0, #12, #1
   18cee:	d478      	bmi.n	18de2 <bt_conn_le_create+0x14e>
	if (!bt_id_scan_random_addr_check()) {
   18cf0:	f012 fb8f 	bl	2b412 <bt_id_scan_random_addr_check>
   18cf4:	2800      	cmp	r0, #0
   18cf6:	d0e2      	beq.n	18cbe <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   18cf8:	4621      	mov	r1, r4
   18cfa:	4648      	mov	r0, r9
   18cfc:	f7ff ff8c 	bl	18c18 <bt_conn_exists_le>
   18d00:	2800      	cmp	r0, #0
   18d02:	d1dc      	bne.n	18cbe <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   18d04:	7823      	ldrb	r3, [r4, #0]
   18d06:	3b02      	subs	r3, #2
   18d08:	2b01      	cmp	r3, #1
   18d0a:	d846      	bhi.n	18d9a <bt_conn_le_create+0x106>
   18d0c:	2207      	movs	r2, #7
   18d0e:	4621      	mov	r1, r4
   18d10:	4668      	mov	r0, sp
   18d12:	f012 f970 	bl	2aff6 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   18d16:	f89d 3000 	ldrb.w	r3, [sp]
   18d1a:	3b02      	subs	r3, #2
   18d1c:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   18d20:	4669      	mov	r1, sp
   18d22:	2000      	movs	r0, #0
   18d24:	f7ff ff42 	bl	18bac <bt_conn_add_le>
	if (!conn) {
   18d28:	4604      	mov	r4, r0
   18d2a:	2800      	cmp	r0, #0
   18d2c:	d05c      	beq.n	18de8 <bt_conn_le_create+0x154>
	conn->le.interval_min = param->interval_min;
   18d2e:	883b      	ldrh	r3, [r7, #0]
   18d30:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   18d34:	887b      	ldrh	r3, [r7, #2]
   18d36:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   18d3a:	88bb      	ldrh	r3, [r7, #4]
   18d3c:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18d40:	88fb      	ldrh	r3, [r7, #6]
   18d42:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   18d46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   18d4a:	4f2b      	ldr	r7, [pc, #172]	; (18df8 <bt_conn_le_create+0x164>)
   18d4c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   18d50:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   18d52:	2b00      	cmp	r3, #0
   18d54:	bf08      	it	eq
   18d56:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   18d5a:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   18d5c:	8a2b      	ldrh	r3, [r5, #16]
	bt_dev.create_param.interval_coded =
   18d5e:	b903      	cbnz	r3, 18d62 <bt_conn_le_create+0xce>
   18d60:	89ab      	ldrh	r3, [r5, #12]
   18d62:	822b      	strh	r3, [r5, #16]
		(bt_dev.create_param.window_coded != 0) ?
   18d64:	8a6b      	ldrh	r3, [r5, #18]
	bt_dev.create_param.window_coded =
   18d66:	b903      	cbnz	r3, 18d6a <bt_conn_le_create+0xd6>
   18d68:	89eb      	ldrh	r3, [r5, #14]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18d6a:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
	bt_dev.create_param.window_coded =
   18d6e:	826b      	strh	r3, [r5, #18]
	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18d70:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   18d74:	429a      	cmp	r2, r3
   18d76:	d91d      	bls.n	18db4 <bt_conn_le_create+0x120>
		bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18d78:	2102      	movs	r1, #2
   18d7a:	4620      	mov	r0, r4
   18d7c:	f7ff fcb0 	bl	186e0 <bt_conn_set_state>
		err = bt_le_scan_update(true);
   18d80:	2001      	movs	r0, #1
   18d82:	f7fe feb1 	bl	17ae8 <bt_le_scan_update>
		if (err) {
   18d86:	4605      	mov	r5, r0
   18d88:	b180      	cbz	r0, 18dac <bt_conn_le_create+0x118>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18d8a:	4620      	mov	r0, r4
   18d8c:	2100      	movs	r1, #0
   18d8e:	f7ff fca7 	bl	186e0 <bt_conn_set_state>
			bt_conn_unref(conn);
   18d92:	4620      	mov	r0, r4
   18d94:	f7ff fc7c 	bl	18690 <bt_conn_unref>
			return err;
   18d98:	e789      	b.n	18cae <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   18d9a:	4621      	mov	r1, r4
   18d9c:	f012 fb2d 	bl	2b3fa <bt_lookup_id_addr>
   18da0:	2207      	movs	r2, #7
   18da2:	4601      	mov	r1, r0
   18da4:	4668      	mov	r0, sp
   18da6:	f012 f926 	bl	2aff6 <memcpy>
}
   18daa:	e7b9      	b.n	18d20 <bt_conn_le_create+0x8c>
		*ret_conn = conn;
   18dac:	f8c8 4000 	str.w	r4, [r8]
		return 0;
   18db0:	2500      	movs	r5, #0
   18db2:	e77c      	b.n	18cae <bt_conn_le_create+0x1a>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   18db4:	2106      	movs	r1, #6
   18db6:	4620      	mov	r0, r4
   18db8:	f7ff fc92 	bl	186e0 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   18dbc:	4620      	mov	r0, r4
   18dbe:	f7fd fb13 	bl	163e8 <bt_le_create_conn>
	if (err) {
   18dc2:	4605      	mov	r5, r0
   18dc4:	2800      	cmp	r0, #0
   18dc6:	d0f1      	beq.n	18dac <bt_conn_le_create+0x118>
		conn->err = 0;
   18dc8:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18dca:	4631      	mov	r1, r6
   18dcc:	4620      	mov	r0, r4
		conn->err = 0;
   18dce:	7326      	strb	r6, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18dd0:	f7ff fc86 	bl	186e0 <bt_conn_set_state>
		bt_conn_unref(conn);
   18dd4:	4620      	mov	r0, r4
   18dd6:	f7ff fc5b 	bl	18690 <bt_conn_unref>
		bt_le_scan_update(false);
   18dda:	4630      	mov	r0, r6
   18ddc:	f7fe fe84 	bl	17ae8 <bt_le_scan_update>
		return err;
   18de0:	e765      	b.n	18cae <bt_conn_le_create+0x1a>
		return -EALREADY;
   18de2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   18de6:	e762      	b.n	18cae <bt_conn_le_create+0x1a>
		return -ENOMEM;
   18de8:	f06f 050b 	mvn.w	r5, #11
   18dec:	e75f      	b.n	18cae <bt_conn_le_create+0x1a>
   18dee:	bf00      	nop
   18df0:	20000444 	.word	0x20000444
   18df4:	20000378 	.word	0x20000378
   18df8:	20000380 	.word	0x20000380

00018dfc <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   18dfc:	b570      	push	{r4, r5, r6, lr}
   18dfe:	4606      	mov	r6, r0
   18e00:	4834      	ldr	r0, [pc, #208]	; (18ed4 <bt_le_set_auto_conn+0xd8>)
   18e02:	f012 fb53 	bl	2b4ac <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18e06:	0740      	lsls	r0, r0, #29
{
   18e08:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18e0a:	d55c      	bpl.n	18ec6 <bt_le_set_auto_conn+0xca>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   18e0c:	b929      	cbnz	r1, 18e1a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   18e0e:	f012 fb00 	bl	2b412 <bt_id_scan_random_addr_check>
   18e12:	b940      	cbnz	r0, 18e26 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   18e14:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   18e18:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   18e1a:	4608      	mov	r0, r1
   18e1c:	f012 fa93 	bl	2b346 <bt_le_conn_params_valid>
   18e20:	2800      	cmp	r0, #0
   18e22:	d1f4      	bne.n	18e0e <bt_le_set_auto_conn+0x12>
   18e24:	e7f6      	b.n	18e14 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   18e26:	4631      	mov	r1, r6
   18e28:	2000      	movs	r0, #0
   18e2a:	f7ff fedb 	bl	18be4 <bt_conn_lookup_addr_le>
	if (!conn) {
   18e2e:	4604      	mov	r4, r0
   18e30:	b928      	cbnz	r0, 18e3e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   18e32:	4631      	mov	r1, r6
   18e34:	f7ff feba 	bl	18bac <bt_conn_add_le>
		if (!conn) {
   18e38:	4604      	mov	r4, r0
   18e3a:	2800      	cmp	r0, #0
   18e3c:	d046      	beq.n	18ecc <bt_le_set_auto_conn+0xd0>
		if (!atomic_test_and_set_bit(conn->flags,
   18e3e:	1d20      	adds	r0, r4, #4
	if (param) {
   18e40:	b385      	cbz	r5, 18ea4 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
   18e42:	882b      	ldrh	r3, [r5, #0]
   18e44:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   18e48:	886b      	ldrh	r3, [r5, #2]
   18e4a:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   18e4e:	88ab      	ldrh	r3, [r5, #4]
   18e50:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   18e54:	88eb      	ldrh	r3, [r5, #6]
   18e56:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
   18e5a:	f3bf 8f5b 	dmb	ish
   18e5e:	e850 3f00 	ldrex	r3, [r0]
   18e62:	f043 0201 	orr.w	r2, r3, #1
   18e66:	e840 2100 	strex	r1, r2, [r0]
   18e6a:	2900      	cmp	r1, #0
   18e6c:	d1f7      	bne.n	18e5e <bt_le_set_auto_conn+0x62>
   18e6e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   18e72:	07d9      	lsls	r1, r3, #31
   18e74:	d402      	bmi.n	18e7c <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
   18e76:	4620      	mov	r0, r4
   18e78:	f7ff fbde 	bl	18638 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   18e7c:	7b63      	ldrb	r3, [r4, #13]
   18e7e:	b963      	cbnz	r3, 18e9a <bt_le_set_auto_conn+0x9e>
   18e80:	4814      	ldr	r0, [pc, #80]	; (18ed4 <bt_le_set_auto_conn+0xd8>)
   18e82:	f012 fb13 	bl	2b4ac <atomic_get>
   18e86:	0743      	lsls	r3, r0, #29
   18e88:	d507      	bpl.n	18e9a <bt_le_set_auto_conn+0x9e>
		if (param) {
   18e8a:	b11d      	cbz	r5, 18e94 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECTING_SCAN);
   18e8c:	2102      	movs	r1, #2
   18e8e:	4620      	mov	r0, r4
   18e90:	f7ff fc26 	bl	186e0 <bt_conn_set_state>
		bt_le_scan_update(false);
   18e94:	2000      	movs	r0, #0
   18e96:	f7fe fe27 	bl	17ae8 <bt_le_scan_update>
	bt_conn_unref(conn);
   18e9a:	4620      	mov	r0, r4
   18e9c:	f7ff fbf8 	bl	18690 <bt_conn_unref>
	return 0;
   18ea0:	2000      	movs	r0, #0
   18ea2:	e7b9      	b.n	18e18 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18ea4:	f06f 0101 	mvn.w	r1, #1
   18ea8:	f012 faf1 	bl	2b48e <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
   18eac:	07c2      	lsls	r2, r0, #31
   18eae:	d5e5      	bpl.n	18e7c <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
   18eb0:	4620      	mov	r0, r4
   18eb2:	f7ff fbed 	bl	18690 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECTING_SCAN) {
   18eb6:	7b63      	ldrb	r3, [r4, #13]
   18eb8:	2b02      	cmp	r3, #2
   18eba:	d1df      	bne.n	18e7c <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18ebc:	4629      	mov	r1, r5
   18ebe:	4620      	mov	r0, r4
   18ec0:	f7ff fc0e 	bl	186e0 <bt_conn_set_state>
   18ec4:	e7da      	b.n	18e7c <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
   18ec6:	f06f 000a 	mvn.w	r0, #10
   18eca:	e7a5      	b.n	18e18 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   18ecc:	f06f 000b 	mvn.w	r0, #11
   18ed0:	e7a2      	b.n	18e18 <bt_le_set_auto_conn+0x1c>
   18ed2:	bf00      	nop
   18ed4:	20000444 	.word	0x20000444

00018ed8 <send_conn_le_param_update>:
{
   18ed8:	b538      	push	{r3, r4, r5, lr}
   18eda:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18edc:	4608      	mov	r0, r1
{
   18ede:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18ee0:	f012 fa31 	bl	2b346 <bt_le_conn_params_valid>
   18ee4:	b338      	cbz	r0, 18f36 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18ee6:	4b15      	ldr	r3, [pc, #84]	; (18f3c <send_conn_le_param_update+0x64>)
   18ee8:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   18eec:	0799      	lsls	r1, r3, #30
   18eee:	d407      	bmi.n	18f00 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   18ef0:	78e3      	ldrb	r3, [r4, #3]
   18ef2:	b173      	cbz	r3, 18f12 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   18ef4:	4629      	mov	r1, r5
   18ef6:	4620      	mov	r0, r4
}
   18ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18efc:	f000 bab4 	b.w	19468 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18f00:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18f04:	079a      	lsls	r2, r3, #30
   18f06:	d5f3      	bpl.n	18ef0 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18f08:	1d20      	adds	r0, r4, #4
   18f0a:	f012 facf 	bl	2b4ac <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18f0e:	0543      	lsls	r3, r0, #21
   18f10:	d4ee      	bmi.n	18ef0 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18f12:	4629      	mov	r1, r5
   18f14:	4620      	mov	r0, r4
   18f16:	f012 fbcc 	bl	2b6b2 <bt_conn_le_conn_update>
		if (rc == 0) {
   18f1a:	b958      	cbnz	r0, 18f34 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   18f1c:	882b      	ldrh	r3, [r5, #0]
   18f1e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   18f22:	886b      	ldrh	r3, [r5, #2]
   18f24:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18f28:	88ab      	ldrh	r3, [r5, #4]
   18f2a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18f2e:	88eb      	ldrh	r3, [r5, #6]
   18f30:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   18f34:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18f36:	f06f 0015 	mvn.w	r0, #21
   18f3a:	e7fb      	b.n	18f34 <send_conn_le_param_update+0x5c>
   18f3c:	20000378 	.word	0x20000378

00018f40 <deferred_work>:
{
   18f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   18f42:	f810 3c53 	ldrb.w	r3, [r0, #-83]
{
   18f46:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   18f48:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18f4c:	bb5b      	cbnz	r3, 18fa6 <deferred_work+0x66>
		bt_l2cap_disconnected(conn);
   18f4e:	4628      	mov	r0, r5
   18f50:	f012 fbee 	bl	2b730 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18f54:	4b2f      	ldr	r3, [pc, #188]	; (19014 <deferred_work+0xd4>)
   18f56:	681e      	ldr	r6, [r3, #0]
   18f58:	b976      	cbnz	r6, 18f78 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f5a:	4e2f      	ldr	r6, [pc, #188]	; (19018 <deferred_work+0xd8>)
   18f5c:	4f2f      	ldr	r7, [pc, #188]	; (1901c <deferred_work+0xdc>)
   18f5e:	42be      	cmp	r6, r7
   18f60:	d91a      	bls.n	18f98 <deferred_work+0x58>
   18f62:	492f      	ldr	r1, [pc, #188]	; (19020 <deferred_work+0xe0>)
   18f64:	482f      	ldr	r0, [pc, #188]	; (19024 <deferred_work+0xe4>)
   18f66:	f240 526c 	movw	r2, #1388	; 0x56c
   18f6a:	f011 f86e 	bl	2a04a <assert_print>
   18f6e:	482c      	ldr	r0, [pc, #176]	; (19020 <deferred_work+0xe0>)
   18f70:	f240 516c 	movw	r1, #1388	; 0x56c
   18f74:	f011 f862 	bl	2a03c <assert_post_action>
		if (cb->disconnected) {
   18f78:	6873      	ldr	r3, [r6, #4]
   18f7a:	b11b      	cbz	r3, 18f84 <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   18f7c:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18f80:	4628      	mov	r0, r5
   18f82:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18f84:	69b6      	ldr	r6, [r6, #24]
   18f86:	e7e7      	b.n	18f58 <deferred_work+0x18>
		if (cb->disconnected) {
   18f88:	6873      	ldr	r3, [r6, #4]
   18f8a:	b11b      	cbz	r3, 18f94 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   18f8c:	f814 1c54 	ldrb.w	r1, [r4, #-84]
   18f90:	4628      	mov	r0, r5
   18f92:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f94:	361c      	adds	r6, #28
   18f96:	e7e2      	b.n	18f5e <deferred_work+0x1e>
   18f98:	d3f6      	bcc.n	18f88 <deferred_work+0x48>
		bt_conn_unref(conn);
   18f9a:	4628      	mov	r0, r5
}
   18f9c:	b003      	add	sp, #12
   18f9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
   18fa2:	f7ff bb75 	b.w	18690 <bt_conn_unref>
	if (conn->type != BT_CONN_TYPE_LE) {
   18fa6:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18faa:	2b01      	cmp	r3, #1
   18fac:	d12b      	bne.n	19006 <deferred_work+0xc6>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18fae:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   18fb2:	b923      	cbnz	r3, 18fbe <deferred_work+0x7e>
}
   18fb4:	b003      	add	sp, #12
   18fb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   18fba:	f7fd ba73 	b.w	164a4 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   18fbe:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18fc2:	f46f 7100 	mvn.w	r1, #512	; 0x200
   18fc6:	4630      	mov	r0, r6
   18fc8:	f012 fa61 	bl	2b48e <atomic_and>
   18fcc:	0583      	lsls	r3, r0, #22
   18fce:	d50e      	bpl.n	18fee <deferred_work+0xae>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18fd0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18fd2:	9300      	str	r3, [sp, #0]
		err = send_conn_le_param_update(conn, param);
   18fd4:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18fd6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18fd8:	9301      	str	r3, [sp, #4]
		err = send_conn_le_param_update(conn, param);
   18fda:	4628      	mov	r0, r5
   18fdc:	f7ff ff7c 	bl	18ed8 <send_conn_le_param_update>
		if (!err) {
   18fe0:	4602      	mov	r2, r0
   18fe2:	b990      	cbnz	r0, 1900a <deferred_work+0xca>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18fe4:	f46f 7180 	mvn.w	r1, #256	; 0x100
   18fe8:	4630      	mov	r0, r6
   18fea:	f012 fa50 	bl	2b48e <atomic_and>
   18fee:	f3bf 8f5b 	dmb	ish
   18ff2:	e856 3f00 	ldrex	r3, [r6]
   18ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18ffa:	e846 3200 	strex	r2, r3, [r6]
   18ffe:	2a00      	cmp	r2, #0
   19000:	d1f7      	bne.n	18ff2 <deferred_work+0xb2>
   19002:	f3bf 8f5b 	dmb	ish
}
   19006:	b003      	add	sp, #12
   19008:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   1900a:	4807      	ldr	r0, [pc, #28]	; (19028 <deferred_work+0xe8>)
   1900c:	2157      	movs	r1, #87	; 0x57
   1900e:	f011 f82a 	bl	2a066 <z_log_minimal_printk>
   19012:	e7ec      	b.n	18fee <deferred_work+0xae>
   19014:	20003180 	.word	0x20003180
   19018:	0002e46c 	.word	0x0002e46c
   1901c:	0002e488 	.word	0x0002e488
   19020:	0003133f 	.word	0x0003133f
   19024:	0002f2b5 	.word	0x0002f2b5
   19028:	00031538 	.word	0x00031538

0001902c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1902c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1902e:	4801      	ldr	r0, [pc, #4]	; (19034 <bt_conn_create_frag_timeout+0x8>)
   19030:	f7ff bc72 	b.w	18918 <bt_conn_create_pdu_timeout>
   19034:	20000a5c 	.word	0x20000a5c

00019038 <create_frag>:
{
   19038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1903c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1903e:	f04f 33ff 	mov.w	r3, #4294967295
   19042:	f04f 32ff 	mov.w	r2, #4294967295
   19046:	2000      	movs	r0, #0
{
   19048:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1904a:	f7ff ffef 	bl	1902c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1904e:	7b73      	ldrb	r3, [r6, #13]
   19050:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19052:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19054:	f04f 0600 	mov.w	r6, #0
   19058:	d005      	beq.n	19066 <create_frag+0x2e>
		net_buf_unref(frag);
   1905a:	f005 ff01 	bl	1ee60 <net_buf_unref>
		return NULL;
   1905e:	4635      	mov	r5, r6
}
   19060:	4628      	mov	r0, r5
   19062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   19066:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   19068:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   1906c:	4e0c      	ldr	r6, [pc, #48]	; (190a0 <create_frag+0x68>)
   1906e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19070:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   19074:	f014 f9cf 	bl	2d416 <net_buf_simple_tailroom>
   19078:	4580      	cmp	r8, r0
   1907a:	d20c      	bcs.n	19096 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   1907c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19080:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   19084:	4632      	mov	r2, r6
   19086:	4638      	mov	r0, r7
   19088:	f014 f9cd 	bl	2d426 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1908c:	4631      	mov	r1, r6
   1908e:	4620      	mov	r0, r4
   19090:	f005 ffb8 	bl	1f004 <net_buf_simple_pull>
   19094:	e7e4      	b.n	19060 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   19096:	4638      	mov	r0, r7
   19098:	f014 f9bd 	bl	2d416 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1909c:	b286      	uxth	r6, r0
   1909e:	e7ef      	b.n	19080 <create_frag+0x48>
   190a0:	20000378 	.word	0x20000378

000190a4 <bt_conn_process_tx>:
{
   190a4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   190a6:	7b43      	ldrb	r3, [r0, #13]
{
   190a8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   190aa:	b95b      	cbnz	r3, 190c4 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   190ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
   190b0:	3004      	adds	r0, #4
   190b2:	f012 f9ec 	bl	2b48e <atomic_and>
   190b6:	0643      	lsls	r3, r0, #25
   190b8:	d504      	bpl.n	190c4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
   190ba:	4620      	mov	r0, r4
}
   190bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   190c0:	f7ff b980 	b.w	183c4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   190c4:	2200      	movs	r2, #0
   190c6:	2300      	movs	r3, #0
   190c8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   190cc:	f014 f987 	bl	2d3de <net_buf_get>
	BT_ASSERT(buf);
   190d0:	4605      	mov	r5, r0
   190d2:	b958      	cbnz	r0, 190ec <bt_conn_process_tx+0x48>
   190d4:	4923      	ldr	r1, [pc, #140]	; (19164 <bt_conn_process_tx+0xc0>)
   190d6:	4824      	ldr	r0, [pc, #144]	; (19168 <bt_conn_process_tx+0xc4>)
   190d8:	f240 321a 	movw	r2, #794	; 0x31a
   190dc:	f010 ffb5 	bl	2a04a <assert_print>
   190e0:	4040      	eors	r0, r0
   190e2:	f380 8811 	msr	BASEPRI, r0
   190e6:	f04f 0003 	mov.w	r0, #3
   190ea:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   190ec:	4e1f      	ldr	r6, [pc, #124]	; (1916c <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   190ee:	8a2a      	ldrh	r2, [r5, #16]
   190f0:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   190f4:	429a      	cmp	r2, r3
   190f6:	d807      	bhi.n	19108 <bt_conn_process_tx+0x64>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   190f8:	2300      	movs	r3, #0
   190fa:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   190fc:	4629      	mov	r1, r5
   190fe:	4620      	mov	r0, r4
   19100:	f7ff f88c 	bl	1821c <send_frag>
	if (!send_buf(conn, buf)) {
   19104:	b968      	cbnz	r0, 19122 <bt_conn_process_tx+0x7e>
   19106:	e005      	b.n	19114 <bt_conn_process_tx+0x70>
	frag = create_frag(conn, buf);
   19108:	4629      	mov	r1, r5
   1910a:	4620      	mov	r0, r4
   1910c:	f7ff ff94 	bl	19038 <create_frag>
	if (!frag) {
   19110:	4601      	mov	r1, r0
   19112:	b938      	cbnz	r0, 19124 <bt_conn_process_tx+0x80>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19114:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   19116:	2300      	movs	r3, #0
   19118:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1911a:	4628      	mov	r0, r5
   1911c:	f005 fea0 	bl	1ee60 <net_buf_unref>
		if (tx) {
   19120:	b9ce      	cbnz	r6, 19156 <bt_conn_process_tx+0xb2>
}
   19122:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   19124:	2301      	movs	r3, #1
   19126:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19128:	4620      	mov	r0, r4
   1912a:	f7ff f877 	bl	1821c <send_frag>
   1912e:	2800      	cmp	r0, #0
   19130:	d0f0      	beq.n	19114 <bt_conn_process_tx+0x70>
	while (buf->len > conn_mtu(conn)) {
   19132:	8a2a      	ldrh	r2, [r5, #16]
   19134:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   19138:	429a      	cmp	r2, r3
   1913a:	d802      	bhi.n	19142 <bt_conn_process_tx+0x9e>
	return send_frag(conn, buf, FRAG_END, false);
   1913c:	2300      	movs	r3, #0
   1913e:	2203      	movs	r2, #3
   19140:	e7dc      	b.n	190fc <bt_conn_process_tx+0x58>
		frag = create_frag(conn, buf);
   19142:	4629      	mov	r1, r5
   19144:	4620      	mov	r0, r4
   19146:	f7ff ff77 	bl	19038 <create_frag>
		if (!frag) {
   1914a:	4601      	mov	r1, r0
   1914c:	2800      	cmp	r0, #0
   1914e:	d0e1      	beq.n	19114 <bt_conn_process_tx+0x70>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19150:	2301      	movs	r3, #1
   19152:	461a      	mov	r2, r3
   19154:	e7e8      	b.n	19128 <bt_conn_process_tx+0x84>
			conn_tx_destroy(conn, tx);
   19156:	4631      	mov	r1, r6
   19158:	4620      	mov	r0, r4
}
   1915a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   1915e:	f7ff b839 	b.w	181d4 <conn_tx_destroy>
   19162:	bf00      	nop
   19164:	0003133f 	.word	0x0003133f
   19168:	0002f2b5 	.word	0x0002f2b5
   1916c:	20000378 	.word	0x20000378

00019170 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19170:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   19172:	4815      	ldr	r0, [pc, #84]	; (191c8 <bt_conn_init+0x58>)
   19174:	f014 fdfb 	bl	2dd6e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19178:	4914      	ldr	r1, [pc, #80]	; (191cc <bt_conn_init+0x5c>)
   1917a:	4813      	ldr	r0, [pc, #76]	; (191c8 <bt_conn_init+0x58>)
   1917c:	f014 fe04 	bl	2dd88 <k_queue_append>
   19180:	4913      	ldr	r1, [pc, #76]	; (191d0 <bt_conn_init+0x60>)
   19182:	4811      	ldr	r0, [pc, #68]	; (191c8 <bt_conn_init+0x58>)
   19184:	f014 fe00 	bl	2dd88 <k_queue_append>
   19188:	4912      	ldr	r1, [pc, #72]	; (191d4 <bt_conn_init+0x64>)
   1918a:	480f      	ldr	r0, [pc, #60]	; (191c8 <bt_conn_init+0x58>)
   1918c:	f014 fdfc 	bl	2dd88 <k_queue_append>
	}

	bt_att_init();
   19190:	f001 f86e 	bl	1a270 <bt_att_init>

	err = bt_smp_init();
   19194:	f005 f974 	bl	1e480 <bt_smp_init>
	if (err) {
   19198:	4605      	mov	r5, r0
   1919a:	b998      	cbnz	r0, 191c4 <bt_conn_init+0x54>
		return err;
	}

	bt_l2cap_init();
   1919c:	f012 fb4b 	bl	2b836 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   191a0:	480d      	ldr	r0, [pc, #52]	; (191d8 <bt_conn_init+0x68>)
   191a2:	f7ff fa49 	bl	18638 <bt_conn_ref>

			if (!conn) {
   191a6:	4604      	mov	r4, r0
   191a8:	b160      	cbz	r0, 191c4 <bt_conn_init+0x54>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   191aa:	3004      	adds	r0, #4
   191ac:	f012 f97e 	bl	2b4ac <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   191b0:	07c3      	lsls	r3, r0, #31
   191b2:	d504      	bpl.n	191be <bt_conn_init+0x4e>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   191b4:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn,
   191b6:	2102      	movs	r1, #2
   191b8:	4620      	mov	r0, r4
   191ba:	f7ff fa91 	bl	186e0 <bt_conn_set_state>
						  BT_CONN_CONNECTING_SCAN);
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   191be:	4620      	mov	r0, r4
   191c0:	f7ff fa66 	bl	18690 <bt_conn_unref>
		}
	}

	return 0;
}
   191c4:	4628      	mov	r0, r5
   191c6:	bd38      	pop	{r3, r4, r5, pc}
   191c8:	200009d8 	.word	0x200009d8
   191cc:	20003150 	.word	0x20003150
   191d0:	20003160 	.word	0x20003160
   191d4:	20003170 	.word	0x20003170
   191d8:	20001c70 	.word	0x20001c70

000191dc <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   191dc:	b508      	push	{r3, lr}
   191de:	4602      	mov	r2, r0
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   191e0:	4807      	ldr	r0, [pc, #28]	; (19200 <l2cap_accept+0x24>)
   191e2:	6803      	ldr	r3, [r0, #0]
   191e4:	b923      	cbnz	r3, 191f0 <l2cap_accept+0x14>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   191e6:	4a07      	ldr	r2, [pc, #28]	; (19204 <l2cap_accept+0x28>)
   191e8:	6042      	str	r2, [r0, #4]
		*chan = &l2cap->chan.chan;
   191ea:	6008      	str	r0, [r1, #0]

		return 0;
   191ec:	4618      	mov	r0, r3
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   191ee:	bd08      	pop	{r3, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   191f0:	4805      	ldr	r0, [pc, #20]	; (19208 <l2cap_accept+0x2c>)
   191f2:	2145      	movs	r1, #69	; 0x45
   191f4:	f010 ff37 	bl	2a066 <z_log_minimal_printk>
   191f8:	f06f 000b 	mvn.w	r0, #11
   191fc:	e7f7      	b.n	191ee <l2cap_accept+0x12>
   191fe:	bf00      	nop
   19200:	20003190 	.word	0x20003190
   19204:	0002e9a8 	.word	0x0002e9a8
   19208:	000315db 	.word	0x000315db

0001920c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1920e:	4605      	mov	r5, r0
   19210:	460f      	mov	r7, r1
   19212:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   19214:	2300      	movs	r3, #0
   19216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1921a:	2104      	movs	r1, #4
   1921c:	2000      	movs	r0, #0
   1921e:	f7ff fb7b 	bl	18918 <bt_conn_create_pdu_timeout>
	if (!buf) {
   19222:	4604      	mov	r4, r0
   19224:	b930      	cbnz	r0, 19234 <l2cap_create_le_sig_pdu.constprop.0+0x28>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19226:	4807      	ldr	r0, [pc, #28]	; (19244 <l2cap_create_le_sig_pdu.constprop.0+0x38>)
   19228:	462a      	mov	r2, r5
   1922a:	2145      	movs	r1, #69	; 0x45
   1922c:	f010 ff1b 	bl	2a066 <z_log_minimal_printk>
}
   19230:	4620      	mov	r0, r4
   19232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   19234:	2104      	movs	r1, #4
   19236:	300c      	adds	r0, #12
   19238:	f005 ff18 	bl	1f06c <net_buf_simple_add>
	hdr->code = code;
   1923c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1923e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   19240:	8046      	strh	r6, [r0, #2]
	return buf;
   19242:	e7f5      	b.n	19230 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   19244:	00031607 	.word	0x00031607

00019248 <bt_l2cap_connected>:
{
   19248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1924a:	4d2a      	ldr	r5, [pc, #168]	; (192f4 <bt_l2cap_connected+0xac>)
   1924c:	4f2a      	ldr	r7, [pc, #168]	; (192f8 <bt_l2cap_connected+0xb0>)
{
   1924e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19250:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19252:	42bd      	cmp	r5, r7
   19254:	d94a      	bls.n	192ec <bt_l2cap_connected+0xa4>
   19256:	4929      	ldr	r1, [pc, #164]	; (192fc <bt_l2cap_connected+0xb4>)
   19258:	4829      	ldr	r0, [pc, #164]	; (19300 <bt_l2cap_connected+0xb8>)
   1925a:	f240 1281 	movw	r2, #385	; 0x181
   1925e:	f010 fef4 	bl	2a04a <assert_print>
   19262:	4826      	ldr	r0, [pc, #152]	; (192fc <bt_l2cap_connected+0xb4>)
   19264:	f240 1181 	movw	r1, #385	; 0x181
   19268:	f010 fee8 	bl	2a03c <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   1926c:	686b      	ldr	r3, [r5, #4]
   1926e:	a901      	add	r1, sp, #4
   19270:	4620      	mov	r0, r4
   19272:	4798      	blx	r3
   19274:	2800      	cmp	r0, #0
   19276:	db34      	blt.n	192e2 <bt_l2cap_connected+0x9a>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   19278:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1927a:	882a      	ldrh	r2, [r5, #0]
   1927c:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1927e:	849a      	strh	r2, [r3, #36]	; 0x24
   19280:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19284:	68a8      	ldr	r0, [r5, #8]
   19286:	f3bf 8f5b 	dmb	ish
   1928a:	e852 1f00 	ldrex	r1, [r2]
   1928e:	e842 6c00 	strex	ip, r6, [r2]
   19292:	f1bc 0f00 	cmp.w	ip, #0
   19296:	d1f8      	bne.n	1928a <bt_l2cap_connected+0x42>
   19298:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1929c:	609e      	str	r6, [r3, #8]
	return list->tail;
   1929e:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   192a0:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   192a4:	b9f9      	cbnz	r1, 192e6 <bt_l2cap_connected+0x9e>
	list->head = node;
   192a6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   192aa:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   192ac:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   192ae:	9801      	ldr	r0, [sp, #4]
   192b0:	6843      	ldr	r3, [r0, #4]
   192b2:	681b      	ldr	r3, [r3, #0]
   192b4:	b103      	cbz	r3, 192b8 <bt_l2cap_connected+0x70>
			chan->ops->connected(chan);
   192b6:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192b8:	9b01      	ldr	r3, [sp, #4]
   192ba:	f3bf 8f5b 	dmb	ish
   192be:	3310      	adds	r3, #16
   192c0:	e853 1f00 	ldrex	r1, [r3]
   192c4:	f041 0101 	orr.w	r1, r1, #1
   192c8:	e843 1200 	strex	r2, r1, [r3]
   192cc:	2a00      	cmp	r2, #0
   192ce:	d1f7      	bne.n	192c0 <bt_l2cap_connected+0x78>
   192d0:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   192d4:	9801      	ldr	r0, [sp, #4]
   192d6:	6843      	ldr	r3, [r0, #4]
   192d8:	69db      	ldr	r3, [r3, #28]
   192da:	b113      	cbz	r3, 192e2 <bt_l2cap_connected+0x9a>
			chan->ops->status(chan, chan->status);
   192dc:	f100 0110 	add.w	r1, r0, #16
   192e0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   192e2:	350c      	adds	r5, #12
   192e4:	e7b5      	b.n	19252 <bt_l2cap_connected+0xa>
	parent->next = child;
   192e6:	600a      	str	r2, [r1, #0]
	list->tail = node;
   192e8:	65a2      	str	r2, [r4, #88]	; 0x58
}
   192ea:	e7de      	b.n	192aa <bt_l2cap_connected+0x62>
   192ec:	d3be      	bcc.n	1926c <bt_l2cap_connected+0x24>
}
   192ee:	b003      	add	sp, #12
   192f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192f2:	bf00      	nop
   192f4:	0002e448 	.word	0x0002e448
   192f8:	0002e46c 	.word	0x0002e46c
   192fc:	00031634 	.word	0x00031634
   19300:	0002f2b5 	.word	0x0002f2b5

00019304 <l2cap_recv>:
{
   19304:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   19306:	8a0b      	ldrh	r3, [r1, #16]
   19308:	2b03      	cmp	r3, #3
{
   1930a:	b085      	sub	sp, #20
   1930c:	4606      	mov	r6, r0
   1930e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19310:	d804      	bhi.n	1931c <l2cap_recv+0x18>
		LOG_ERR("Too small L2CAP signaling PDU");
   19312:	483a      	ldr	r0, [pc, #232]	; (193fc <l2cap_recv+0xf8>)
   19314:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19316:	f010 fea6 	bl	2a066 <z_log_minimal_printk>
		return 0;
   1931a:	e00d      	b.n	19338 <l2cap_recv+0x34>
	return net_buf_simple_pull_mem(&buf->b, len);
   1931c:	2104      	movs	r1, #4
   1931e:	f105 000c 	add.w	r0, r5, #12
   19322:	f005 fe89 	bl	1f038 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19326:	8a2a      	ldrh	r2, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19328:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1932a:	4293      	cmp	r3, r2
   1932c:	4604      	mov	r4, r0
   1932e:	d006      	beq.n	1933e <l2cap_recv+0x3a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19330:	4833      	ldr	r0, [pc, #204]	; (19400 <l2cap_recv+0xfc>)
   19332:	2145      	movs	r1, #69	; 0x45
   19334:	f010 fe97 	bl	2a066 <z_log_minimal_printk>
}
   19338:	2000      	movs	r0, #0
   1933a:	b005      	add	sp, #20
   1933c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1933e:	7841      	ldrb	r1, [r0, #1]
   19340:	b911      	cbnz	r1, 19348 <l2cap_recv+0x44>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19342:	4830      	ldr	r0, [pc, #192]	; (19404 <l2cap_recv+0x100>)
   19344:	2145      	movs	r1, #69	; 0x45
   19346:	e7e6      	b.n	19316 <l2cap_recv+0x12>
	switch (hdr->code) {
   19348:	7802      	ldrb	r2, [r0, #0]
   1934a:	2a12      	cmp	r2, #18
   1934c:	d00f      	beq.n	1936e <l2cap_recv+0x6a>
   1934e:	2a13      	cmp	r2, #19
   19350:	d008      	beq.n	19364 <l2cap_recv+0x60>
   19352:	2a01      	cmp	r2, #1
   19354:	d0f0      	beq.n	19338 <l2cap_recv+0x34>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   19356:	482c      	ldr	r0, [pc, #176]	; (19408 <l2cap_recv+0x104>)
   19358:	2157      	movs	r1, #87	; 0x57
   1935a:	f010 fe84 	bl	2a066 <z_log_minimal_printk>
		l2cap_send_reject(chan->conn, hdr->ident,
   1935e:	7861      	ldrb	r1, [r4, #1]
   19360:	6830      	ldr	r0, [r6, #0]
   19362:	e014      	b.n	1938e <l2cap_recv+0x8a>
	if (buf->len < sizeof(*rsp)) {
   19364:	2b01      	cmp	r3, #1
   19366:	d8e7      	bhi.n	19338 <l2cap_recv+0x34>
		LOG_ERR("Too small LE conn param rsp");
   19368:	4828      	ldr	r0, [pc, #160]	; (1940c <l2cap_recv+0x108>)
   1936a:	2145      	movs	r1, #69	; 0x45
   1936c:	e7d3      	b.n	19316 <l2cap_recv+0x12>
	if (buf->len < sizeof(*req)) {
   1936e:	2b07      	cmp	r3, #7
   19370:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   19372:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   19374:	d802      	bhi.n	1937c <l2cap_recv+0x78>
		LOG_ERR("Too small LE conn update param req");
   19376:	4826      	ldr	r0, [pc, #152]	; (19410 <l2cap_recv+0x10c>)
   19378:	2145      	movs	r1, #69	; 0x45
   1937a:	e7cc      	b.n	19316 <l2cap_recv+0x12>
	if (conn->state != BT_CONN_CONNECTED) {
   1937c:	7b63      	ldrb	r3, [r4, #13]
   1937e:	2b07      	cmp	r3, #7
   19380:	d002      	beq.n	19388 <l2cap_recv+0x84>
		LOG_WRN("Not connected");
   19382:	4824      	ldr	r0, [pc, #144]	; (19414 <l2cap_recv+0x110>)
   19384:	2157      	movs	r1, #87	; 0x57
   19386:	e7c6      	b.n	19316 <l2cap_recv+0x12>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   19388:	78e7      	ldrb	r7, [r4, #3]
   1938a:	b11f      	cbz	r7, 19394 <l2cap_recv+0x90>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1938c:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   1938e:	f012 fa20 	bl	2b7d2 <l2cap_send_reject.constprop.0>
		break;
   19392:	e7d1      	b.n	19338 <l2cap_recv+0x34>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   19394:	8813      	ldrh	r3, [r2, #0]
   19396:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1939a:	8853      	ldrh	r3, [r2, #2]
   1939c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   193a0:	8893      	ldrh	r3, [r2, #4]
   193a2:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   193a6:	88d3      	ldrh	r3, [r2, #6]
   193a8:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   193ac:	2202      	movs	r2, #2
   193ae:	2013      	movs	r0, #19
   193b0:	f7ff ff2c 	bl	1920c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   193b4:	4605      	mov	r5, r0
   193b6:	2800      	cmp	r0, #0
   193b8:	d0be      	beq.n	19338 <l2cap_recv+0x34>
	accepted = le_param_req(conn, &param);
   193ba:	a902      	add	r1, sp, #8
   193bc:	4620      	mov	r0, r4
   193be:	f7ff fb2f 	bl	18a20 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   193c2:	2102      	movs	r1, #2
   193c4:	4606      	mov	r6, r0
   193c6:	f105 000c 	add.w	r0, r5, #12
   193ca:	f005 fe4f 	bl	1f06c <net_buf_simple_add>
	if (accepted) {
   193ce:	f086 0301 	eor.w	r3, r6, #1
   193d2:	b2db      	uxtb	r3, r3
   193d4:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   193d6:	462a      	mov	r2, r5
   193d8:	9700      	str	r7, [sp, #0]
   193da:	463b      	mov	r3, r7
   193dc:	2105      	movs	r1, #5
   193de:	4620      	mov	r0, r4
   193e0:	f012 f9de 	bl	2b7a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   193e4:	b110      	cbz	r0, 193ec <l2cap_recv+0xe8>
		net_buf_unref(buf);
   193e6:	4628      	mov	r0, r5
   193e8:	f005 fd3a 	bl	1ee60 <net_buf_unref>
	if (accepted) {
   193ec:	2e00      	cmp	r6, #0
   193ee:	d0a3      	beq.n	19338 <l2cap_recv+0x34>
		bt_conn_le_conn_update(conn, &param);
   193f0:	a902      	add	r1, sp, #8
   193f2:	4620      	mov	r0, r4
   193f4:	f012 f95d 	bl	2b6b2 <bt_conn_le_conn_update>
   193f8:	e79e      	b.n	19338 <l2cap_recv+0x34>
   193fa:	bf00      	nop
   193fc:	00031665 	.word	0x00031665
   19400:	00031688 	.word	0x00031688
   19404:	000316ae 	.word	0x000316ae
   19408:	00031730 	.word	0x00031730
   1940c:	000316d4 	.word	0x000316d4
   19410:	000316f5 	.word	0x000316f5
   19414:	0003171d 	.word	0x0003171d

00019418 <bt_l2cap_recv>:
{
   19418:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1941a:	8a0b      	ldrh	r3, [r1, #16]
   1941c:	2b03      	cmp	r3, #3
{
   1941e:	4605      	mov	r5, r0
   19420:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19422:	d808      	bhi.n	19436 <bt_l2cap_recv+0x1e>
		LOG_ERR("Too small L2CAP PDU received");
   19424:	480e      	ldr	r0, [pc, #56]	; (19460 <bt_l2cap_recv+0x48>)
   19426:	2145      	movs	r1, #69	; 0x45
   19428:	f010 fe1d 	bl	2a066 <z_log_minimal_printk>
	net_buf_unref(buf);
   1942c:	4620      	mov	r0, r4
}
   1942e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   19432:	f005 bd15 	b.w	1ee60 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   19436:	2104      	movs	r1, #4
   19438:	f104 000c 	add.w	r0, r4, #12
   1943c:	f005 fdfc 	bl	1f038 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19440:	8842      	ldrh	r2, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19442:	4628      	mov	r0, r5
   19444:	4611      	mov	r1, r2
   19446:	f012 f9ec 	bl	2b822 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1944a:	b920      	cbnz	r0, 19456 <bt_l2cap_recv+0x3e>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1944c:	4805      	ldr	r0, [pc, #20]	; (19464 <bt_l2cap_recv+0x4c>)
   1944e:	2157      	movs	r1, #87	; 0x57
   19450:	f010 fe09 	bl	2a066 <z_log_minimal_printk>
		net_buf_unref(buf);
   19454:	e7ea      	b.n	1942c <bt_l2cap_recv+0x14>
	chan->ops->recv(chan, buf);
   19456:	6843      	ldr	r3, [r0, #4]
   19458:	4621      	mov	r1, r4
   1945a:	695b      	ldr	r3, [r3, #20]
   1945c:	4798      	blx	r3
   1945e:	e7e5      	b.n	1942c <bt_l2cap_recv+0x14>
   19460:	0003175d 	.word	0x0003175d
   19464:	0003177f 	.word	0x0003177f

00019468 <bt_l2cap_update_conn_param>:
{
   19468:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1946a:	4b17      	ldr	r3, [pc, #92]	; (194c8 <bt_l2cap_update_conn_param+0x60>)
{
   1946c:	460e      	mov	r6, r1
	ident++;
   1946e:	7819      	ldrb	r1, [r3, #0]
   19470:	3101      	adds	r1, #1
   19472:	b2c9      	uxtb	r1, r1
   19474:	2901      	cmp	r1, #1
   19476:	bf38      	it	cc
   19478:	2101      	movcc	r1, #1
{
   1947a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1947c:	2208      	movs	r2, #8
   1947e:	2012      	movs	r0, #18
	ident++;
   19480:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19482:	f7ff fec3 	bl	1920c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19486:	4604      	mov	r4, r0
   19488:	b1d0      	cbz	r0, 194c0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1948a:	2108      	movs	r1, #8
   1948c:	300c      	adds	r0, #12
   1948e:	f005 fded 	bl	1f06c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19492:	8833      	ldrh	r3, [r6, #0]
   19494:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19496:	8873      	ldrh	r3, [r6, #2]
   19498:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1949a:	88b3      	ldrh	r3, [r6, #4]
   1949c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1949e:	88f3      	ldrh	r3, [r6, #6]
   194a0:	80c3      	strh	r3, [r0, #6]
   194a2:	2300      	movs	r3, #0
   194a4:	4628      	mov	r0, r5
   194a6:	9300      	str	r3, [sp, #0]
   194a8:	4622      	mov	r2, r4
   194aa:	2105      	movs	r1, #5
   194ac:	f012 f978 	bl	2b7a0 <bt_l2cap_send_cb>
	if (err) {
   194b0:	4605      	mov	r5, r0
   194b2:	b110      	cbz	r0, 194ba <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   194b4:	4620      	mov	r0, r4
   194b6:	f005 fcd3 	bl	1ee60 <net_buf_unref>
}
   194ba:	4628      	mov	r0, r5
   194bc:	b002      	add	sp, #8
   194be:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   194c0:	f06f 050b 	mvn.w	r5, #11
   194c4:	e7f9      	b.n	194ba <bt_l2cap_update_conn_param+0x52>
   194c6:	bf00      	nop
   194c8:	20004239 	.word	0x20004239

000194cc <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   194cc:	2823      	cmp	r0, #35	; 0x23
   194ce:	d81f      	bhi.n	19510 <att_op_get_type+0x44>
   194d0:	281a      	cmp	r0, #26
   194d2:	d804      	bhi.n	194de <att_op_get_type+0x12>
   194d4:	1e43      	subs	r3, r0, #1
   194d6:	2b18      	cmp	r3, #24
   194d8:	d90e      	bls.n	194f8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   194da:	2006      	movs	r0, #6
   194dc:	4770      	bx	lr
	switch (op) {
   194de:	f1a0 031b 	sub.w	r3, r0, #27
   194e2:	2b08      	cmp	r3, #8
   194e4:	d81e      	bhi.n	19524 <att_op_get_type+0x58>
   194e6:	e8df f003 	tbb	[pc, r3]
   194ea:	1d05      	.short	0x1d05
   194ec:	191d231b 	.word	0x191d231b
   194f0:	1d25      	.short	0x1d25
   194f2:	05          	.byte	0x05
   194f3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   194f4:	2003      	movs	r0, #3
   194f6:	4770      	bx	lr
	switch (op) {
   194f8:	4a0f      	ldr	r2, [pc, #60]	; (19538 <att_op_get_type+0x6c>)
   194fa:	2301      	movs	r3, #1
   194fc:	4083      	lsls	r3, r0
   194fe:	401a      	ands	r2, r3
   19500:	b9c2      	cbnz	r2, 19534 <att_op_get_type+0x68>
   19502:	4a0e      	ldr	r2, [pc, #56]	; (1953c <att_op_get_type+0x70>)
   19504:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   19506:	2a00      	cmp	r2, #0
   19508:	bf14      	ite	ne
   1950a:	2001      	movne	r0, #1
   1950c:	2006      	moveq	r0, #6
   1950e:	4770      	bx	lr
	switch (op) {
   19510:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19514:	2b52      	cmp	r3, #82	; 0x52
   19516:	d105      	bne.n	19524 <att_op_get_type+0x58>
		return ATT_COMMAND;
   19518:	2000      	movs	r0, #0
}
   1951a:	4770      	bx	lr
		return ATT_REQUEST;
   1951c:	2001      	movs	r0, #1
   1951e:	4770      	bx	lr
		return ATT_INDICATION;
   19520:	2005      	movs	r0, #5
   19522:	4770      	bx	lr
		return ATT_COMMAND;
   19524:	f010 0f40 	tst.w	r0, #64	; 0x40
   19528:	bf0c      	ite	eq
   1952a:	2006      	moveq	r0, #6
   1952c:	2000      	movne	r0, #0
   1952e:	4770      	bx	lr
	switch (op) {
   19530:	2004      	movs	r0, #4
   19532:	4770      	bx	lr
		return ATT_RESPONSE;
   19534:	2002      	movs	r0, #2
   19536:	4770      	bx	lr
   19538:	028aaaaa 	.word	0x028aaaaa
   1953c:	01455554 	.word	0x01455554

00019540 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   19540:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   19542:	7b43      	ldrb	r3, [r0, #13]
   19544:	2b07      	cmp	r3, #7
   19546:	d005      	beq.n	19554 <att_get+0x14>
		LOG_WRN("Not connected");
   19548:	4810      	ldr	r0, [pc, #64]	; (1958c <att_get+0x4c>)
   1954a:	2157      	movs	r1, #87	; 0x57
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
	if (!chan) {
		LOG_ERR("Unable to find ATT channel");
   1954c:	f010 fd8b 	bl	2a066 <z_log_minimal_printk>
		return NULL;
   19550:	2000      	movs	r0, #0
	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
		 "ATT channel not connected");

	return att_chan->att;
}
   19552:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19554:	2104      	movs	r1, #4
   19556:	f012 f964 	bl	2b822 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1955a:	4603      	mov	r3, r0
   1955c:	b910      	cbnz	r0, 19564 <att_get+0x24>
		LOG_ERR("Unable to find ATT channel");
   1955e:	480c      	ldr	r0, [pc, #48]	; (19590 <att_get+0x50>)
   19560:	2145      	movs	r1, #69	; 0x45
   19562:	e7f3      	b.n	1954c <att_get+0xc>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   19564:	2102      	movs	r1, #2
   19566:	3094      	adds	r0, #148	; 0x94
   19568:	f012 f98a 	bl	2b880 <atomic_test_bit>
   1956c:	b950      	cbnz	r0, 19584 <att_get+0x44>
   1956e:	4909      	ldr	r1, [pc, #36]	; (19594 <att_get+0x54>)
   19570:	4809      	ldr	r0, [pc, #36]	; (19598 <att_get+0x58>)
   19572:	f640 322a 	movw	r2, #2858	; 0xb2a
   19576:	f010 fd68 	bl	2a04a <assert_print>
   1957a:	4806      	ldr	r0, [pc, #24]	; (19594 <att_get+0x54>)
   1957c:	f640 312a 	movw	r1, #2858	; 0xb2a
   19580:	f010 fd5c 	bl	2a03c <assert_post_action>
	return att_chan->att;
   19584:	f853 0c04 	ldr.w	r0, [r3, #-4]
   19588:	e7e3      	b.n	19552 <att_get+0x12>
   1958a:	bf00      	nop
   1958c:	0003171d 	.word	0x0003171d
   19590:	000317c0 	.word	0x000317c0
   19594:	000317e0 	.word	0x000317e0
   19598:	0002f2b5 	.word	0x0002f2b5

0001959c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1959c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1959e:	3804      	subs	r0, #4
   195a0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   195a2:	a901      	add	r1, sp, #4
   195a4:	4802      	ldr	r0, [pc, #8]	; (195b0 <bt_att_released+0x14>)
   195a6:	f00a fbd5 	bl	23d54 <k_mem_slab_free>
}
   195aa:	b003      	add	sp, #12
   195ac:	f85d fb04 	ldr.w	pc, [sp], #4
   195b0:	200008c0 	.word	0x200008c0

000195b4 <find_type_cb>:
{
   195b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195b8:	b091      	sub	sp, #68	; 0x44
	struct bt_att_chan *chan = data->chan;
   195ba:	f8d2 9000 	ldr.w	r9, [r2]
{
   195be:	4607      	mov	r7, r0
   195c0:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   195c2:	2500      	movs	r5, #0
   195c4:	f642 0301 	movw	r3, #10241	; 0x2801
   195c8:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   195ca:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   195ce:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   195d2:	a90b      	add	r1, sp, #44	; 0x2c
{
   195d4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   195d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   195da:	f011 fda0 	bl	2b11e <bt_uuid_cmp>
   195de:	2800      	cmp	r0, #0
   195e0:	d060      	beq.n	196a4 <find_type_cb+0xf0>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   195e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   195e6:	6838      	ldr	r0, [r7, #0]
   195e8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   195ec:	a90b      	add	r1, sp, #44	; 0x2c
   195ee:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   195f2:	f011 fd94 	bl	2b11e <bt_uuid_cmp>
   195f6:	b138      	cbz	r0, 19608 <find_type_cb+0x54>
		if (data->group &&
   195f8:	68a3      	ldr	r3, [r4, #8]
   195fa:	b11b      	cbz	r3, 19604 <find_type_cb+0x50>
   195fc:	885a      	ldrh	r2, [r3, #2]
   195fe:	42b2      	cmp	r2, r6
   19600:	d200      	bcs.n	19604 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19602:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19604:	2001      	movs	r0, #1
   19606:	e009      	b.n	1961c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19608:	6861      	ldr	r1, [r4, #4]
   1960a:	4608      	mov	r0, r1
   1960c:	f012 f91e 	bl	2b84c <net_buf_frags_len>
   19610:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   19614:	1a1b      	subs	r3, r3, r0
   19616:	2b03      	cmp	r3, #3
   19618:	d803      	bhi.n	19622 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1961a:	2000      	movs	r0, #0
}
   1961c:	b011      	add	sp, #68	; 0x44
   1961e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19622:	4608      	mov	r0, r1
   19624:	f005 fc74 	bl	1ef10 <net_buf_frag_last>
   19628:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1962a:	6860      	ldr	r0, [r4, #4]
   1962c:	f012 f90e 	bl	2b84c <net_buf_frags_len>
   19630:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   19634:	f105 0b0c 	add.w	fp, r5, #12
   19638:	ebaa 0a00 	sub.w	sl, sl, r0
   1963c:	4658      	mov	r0, fp
   1963e:	f013 feea 	bl	2d416 <net_buf_simple_tailroom>
   19642:	4582      	cmp	sl, r0
   19644:	d231      	bcs.n	196aa <find_type_cb+0xf6>
   19646:	6860      	ldr	r0, [r4, #4]
   19648:	f012 f900 	bl	2b84c <net_buf_frags_len>
   1964c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   19650:	1a18      	subs	r0, r3, r0
	if (!len) {
   19652:	b970      	cbnz	r0, 19672 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19654:	6863      	ldr	r3, [r4, #4]
   19656:	7a98      	ldrb	r0, [r3, #10]
   19658:	f005 fa20 	bl	1ea9c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1965c:	2200      	movs	r2, #0
   1965e:	2300      	movs	r3, #0
   19660:	f013 feb8 	bl	2d3d4 <net_buf_alloc_fixed>
		if (!frag) {
   19664:	4605      	mov	r5, r0
   19666:	2800      	cmp	r0, #0
   19668:	d0d7      	beq.n	1961a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1966a:	4601      	mov	r1, r0
   1966c:	6860      	ldr	r0, [r4, #4]
   1966e:	f005 fc8d 	bl	1ef8c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19672:	2300      	movs	r3, #0
   19674:	9300      	str	r3, [sp, #0]
   19676:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1967a:	4639      	mov	r1, r7
   1967c:	2310      	movs	r3, #16
   1967e:	aa02      	add	r2, sp, #8
   19680:	4640      	mov	r0, r8
   19682:	47c8      	blx	r9
	if (read < 0) {
   19684:	1e07      	subs	r7, r0, #0
   19686:	db0d      	blt.n	196a4 <find_type_cb+0xf0>
	if (read != data->value_len) {
   19688:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1968a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1968c:	42ba      	cmp	r2, r7
   1968e:	d02b      	beq.n	196e8 <find_type_cb+0x134>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19690:	4601      	mov	r1, r0
   19692:	a80b      	add	r0, sp, #44	; 0x2c
   19694:	f011 fd71 	bl	2b17a <bt_uuid_create>
   19698:	b958      	cbnz	r0, 196b2 <find_type_cb+0xfe>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1969a:	7c22      	ldrb	r2, [r4, #16]
   1969c:	4814      	ldr	r0, [pc, #80]	; (196f0 <find_type_cb+0x13c>)
   1969e:	2157      	movs	r1, #87	; 0x57
			LOG_WRN("Unable to create UUID: size %d", read);
   196a0:	f010 fce1 	bl	2a066 <z_log_minimal_printk>
	data->group = NULL;
   196a4:	2300      	movs	r3, #0
   196a6:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   196a8:	e7ac      	b.n	19604 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   196aa:	4658      	mov	r0, fp
   196ac:	f013 feb3 	bl	2d416 <net_buf_simple_tailroom>
   196b0:	e7cf      	b.n	19652 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   196b2:	b2fa      	uxtb	r2, r7
   196b4:	a902      	add	r1, sp, #8
   196b6:	a806      	add	r0, sp, #24
   196b8:	f011 fd5f 	bl	2b17a <bt_uuid_create>
   196bc:	b918      	cbnz	r0, 196c6 <find_type_cb+0x112>
			LOG_WRN("Unable to create UUID: size %d", read);
   196be:	480d      	ldr	r0, [pc, #52]	; (196f4 <find_type_cb+0x140>)
   196c0:	463a      	mov	r2, r7
   196c2:	2157      	movs	r1, #87	; 0x57
   196c4:	e7ec      	b.n	196a0 <find_type_cb+0xec>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   196c6:	a906      	add	r1, sp, #24
   196c8:	a80b      	add	r0, sp, #44	; 0x2c
   196ca:	f011 fd28 	bl	2b11e <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   196ce:	2800      	cmp	r0, #0
   196d0:	d1e8      	bne.n	196a4 <find_type_cb+0xf0>
	data->err = 0x00;
   196d2:	2300      	movs	r3, #0
   196d4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   196d6:	2104      	movs	r1, #4
   196d8:	f105 000c 	add.w	r0, r5, #12
   196dc:	f005 fcc6 	bl	1f06c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   196e0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   196e2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   196e4:	68a3      	ldr	r3, [r4, #8]
   196e6:	e78c      	b.n	19602 <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   196e8:	a902      	add	r1, sp, #8
   196ea:	f011 fc5d 	bl	2afa8 <memcmp>
   196ee:	e7ee      	b.n	196ce <find_type_cb+0x11a>
   196f0:	0003180f 	.word	0x0003180f
   196f4:	00031833 	.word	0x00031833

000196f8 <tx_meta_data_free>:
{
   196f8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   196fa:	4604      	mov	r4, r0
   196fc:	b940      	cbnz	r0, 19710 <tx_meta_data_free+0x18>
   196fe:	4909      	ldr	r1, [pc, #36]	; (19724 <tx_meta_data_free+0x2c>)
   19700:	4809      	ldr	r0, [pc, #36]	; (19728 <tx_meta_data_free+0x30>)
   19702:	22a6      	movs	r2, #166	; 0xa6
   19704:	f010 fca1 	bl	2a04a <assert_print>
   19708:	4806      	ldr	r0, [pc, #24]	; (19724 <tx_meta_data_free+0x2c>)
   1970a:	21a6      	movs	r1, #166	; 0xa6
   1970c:	f010 fc96 	bl	2a03c <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   19710:	2100      	movs	r1, #0
   19712:	2214      	movs	r2, #20
   19714:	f011 fc7a 	bl	2b00c <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   19718:	4621      	mov	r1, r4
   1971a:	4804      	ldr	r0, [pc, #16]	; (1972c <tx_meta_data_free+0x34>)
}
   1971c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19720:	f014 bb32 	b.w	2dd88 <k_queue_append>
   19724:	000317e0 	.word	0x000317e0
   19728:	0002f2b5 	.word	0x0002f2b5
   1972c:	200009bc 	.word	0x200009bc

00019730 <chan_send>:
{
   19730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   19734:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19736:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   1973a:	68cb      	ldr	r3, [r1, #12]
{
   1973c:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1973e:	3098      	adds	r0, #152	; 0x98
   19740:	2102      	movs	r1, #2
   19742:	f012 f89d 	bl	2b880 <atomic_test_bit>
   19746:	2800      	cmp	r0, #0
   19748:	d047      	beq.n	197da <chan_send+0xaa>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1974a:	781b      	ldrb	r3, [r3, #0]
   1974c:	2bd2      	cmp	r3, #210	; 0xd2
   1974e:	d114      	bne.n	1977a <chan_send+0x4a>
		err = bt_smp_sign(chan->att->conn, buf);
   19750:	6833      	ldr	r3, [r6, #0]
   19752:	4621      	mov	r1, r4
   19754:	6818      	ldr	r0, [r3, #0]
   19756:	f013 fc8e 	bl	2d076 <bt_smp_sign>
		if (err) {
   1975a:	4605      	mov	r5, r0
   1975c:	b168      	cbz	r0, 1977a <chan_send+0x4a>
			LOG_ERR("Error signing data");
   1975e:	4820      	ldr	r0, [pc, #128]	; (197e0 <chan_send+0xb0>)
   19760:	2145      	movs	r1, #69	; 0x45
   19762:	f010 fc80 	bl	2a066 <z_log_minimal_printk>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   19766:	69a0      	ldr	r0, [r4, #24]
   19768:	f7ff ffc6 	bl	196f8 <tx_meta_data_free>
			net_buf_unref(buf);
   1976c:	4620      	mov	r0, r4
   1976e:	f005 fb77 	bl	1ee60 <net_buf_unref>
}
   19772:	4628      	mov	r0, r5
   19774:	b003      	add	sp, #12
   19776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1977a:	f104 000c 	add.w	r0, r4, #12
   1977e:	f013 fe46 	bl	2d40e <net_buf_simple_headroom>
	state->len = buf->len;
   19782:	f8b4 9010 	ldrh.w	r9, [r4, #16]
	data->att_chan = chan;
   19786:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1978a:	6833      	ldr	r3, [r6, #0]
   1978c:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1978e:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19790:	4607      	mov	r7, r0
   19792:	7818      	ldrb	r0, [r3, #0]
   19794:	f7ff fe9a 	bl	194cc <att_op_get_type>
	switch (op_type) {
   19798:	2805      	cmp	r0, #5
   1979a:	d813      	bhi.n	197c4 <chan_send+0x94>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1979c:	4b11      	ldr	r3, [pc, #68]	; (197e4 <chan_send+0xb4>)
   1979e:	f8cd 8000 	str.w	r8, [sp]
   197a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   197a6:	4622      	mov	r2, r4
   197a8:	4628      	mov	r0, r5
   197aa:	2104      	movs	r1, #4
   197ac:	f011 fff8 	bl	2b7a0 <bt_l2cap_send_cb>
	if (err) {
   197b0:	4605      	mov	r5, r0
   197b2:	2800      	cmp	r0, #0
   197b4:	d0dd      	beq.n	19772 <chan_send+0x42>
	buf->data = buf->__buf + state->offset;
   197b6:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   197b8:	f8a4 9010 	strh.w	r9, [r4, #16]
	buf->data = buf->__buf + state->offset;
   197bc:	fa13 f787 	uxtah	r7, r3, r7
   197c0:	60e7      	str	r7, [r4, #12]
}
   197c2:	e7d6      	b.n	19772 <chan_send+0x42>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   197c4:	4908      	ldr	r1, [pc, #32]	; (197e8 <chan_send+0xb8>)
   197c6:	4809      	ldr	r0, [pc, #36]	; (197ec <chan_send+0xbc>)
   197c8:	f240 2257 	movw	r2, #599	; 0x257
   197cc:	f010 fc3d 	bl	2a04a <assert_print>
   197d0:	4805      	ldr	r0, [pc, #20]	; (197e8 <chan_send+0xb8>)
   197d2:	f240 2157 	movw	r1, #599	; 0x257
   197d6:	f010 fc31 	bl	2a03c <assert_post_action>
		return -EINVAL;
   197da:	f06f 0515 	mvn.w	r5, #21
   197de:	e7c8      	b.n	19772 <chan_send+0x42>
   197e0:	00031857 	.word	0x00031857
   197e4:	0002e9d0 	.word	0x0002e9d0
   197e8:	000317e0 	.word	0x000317e0
   197ec:	0002f2b5 	.word	0x0002f2b5

000197f0 <bt_att_chan_req_send>:
{
   197f0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   197f2:	b950      	cbnz	r0, 1980a <bt_att_chan_req_send+0x1a>
   197f4:	4917      	ldr	r1, [pc, #92]	; (19854 <bt_att_chan_req_send+0x64>)
   197f6:	4818      	ldr	r0, [pc, #96]	; (19858 <bt_att_chan_req_send+0x68>)
   197f8:	f44f 7246 	mov.w	r2, #792	; 0x318
   197fc:	f010 fc25 	bl	2a04a <assert_print>
   19800:	f44f 7146 	mov.w	r1, #792	; 0x318
	__ASSERT_NO_MSG(req);
   19804:	4813      	ldr	r0, [pc, #76]	; (19854 <bt_att_chan_req_send+0x64>)
   19806:	f010 fc19 	bl	2a03c <assert_post_action>
   1980a:	b941      	cbnz	r1, 1981e <bt_att_chan_req_send+0x2e>
   1980c:	4911      	ldr	r1, [pc, #68]	; (19854 <bt_att_chan_req_send+0x64>)
   1980e:	4812      	ldr	r0, [pc, #72]	; (19858 <bt_att_chan_req_send+0x68>)
   19810:	f240 3219 	movw	r2, #793	; 0x319
   19814:	f010 fc19 	bl	2a04a <assert_print>
   19818:	f240 3119 	movw	r1, #793	; 0x319
   1981c:	e7f2      	b.n	19804 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(req->func);
   1981e:	684a      	ldr	r2, [r1, #4]
   19820:	b942      	cbnz	r2, 19834 <bt_att_chan_req_send+0x44>
   19822:	490c      	ldr	r1, [pc, #48]	; (19854 <bt_att_chan_req_send+0x64>)
   19824:	480c      	ldr	r0, [pc, #48]	; (19858 <bt_att_chan_req_send+0x68>)
   19826:	f240 321a 	movw	r2, #794	; 0x31a
   1982a:	f010 fc0e 	bl	2a04a <assert_print>
   1982e:	f240 311a 	movw	r1, #794	; 0x31a
   19832:	e7e7      	b.n	19804 <bt_att_chan_req_send+0x14>
	__ASSERT_NO_MSG(!chan->req);
   19834:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   19838:	b143      	cbz	r3, 1984c <bt_att_chan_req_send+0x5c>
   1983a:	4906      	ldr	r1, [pc, #24]	; (19854 <bt_att_chan_req_send+0x64>)
   1983c:	4806      	ldr	r0, [pc, #24]	; (19858 <bt_att_chan_req_send+0x68>)
   1983e:	f240 321b 	movw	r2, #795	; 0x31b
   19842:	f010 fc02 	bl	2a04a <assert_print>
   19846:	f240 311b 	movw	r1, #795	; 0x31b
   1984a:	e7db      	b.n	19804 <bt_att_chan_req_send+0x14>
}
   1984c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   19850:	f012 b903 	b.w	2ba5a <chan_req_send>
   19854:	000317e0 	.word	0x000317e0
   19858:	0002f2b5 	.word	0x0002f2b5

0001985c <read_group_cb>:
{
   1985c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19860:	4605      	mov	r5, r0
   19862:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19864:	f04f 0800 	mov.w	r8, #0
   19868:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1986c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1986e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19870:	f88d 8008 	strb.w	r8, [sp, #8]
   19874:	a902      	add	r1, sp, #8
{
   19876:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19878:	f8ad 300a 	strh.w	r3, [sp, #10]
   1987c:	f011 fc4f 	bl	2b11e <bt_uuid_cmp>
   19880:	b1a0      	cbz	r0, 198ac <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19882:	f642 0301 	movw	r3, #10241	; 0x2801
   19886:	6828      	ldr	r0, [r5, #0]
   19888:	f88d 800c 	strb.w	r8, [sp, #12]
   1988c:	a903      	add	r1, sp, #12
   1988e:	f8ad 300e 	strh.w	r3, [sp, #14]
   19892:	f011 fc44 	bl	2b11e <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19896:	b148      	cbz	r0, 198ac <read_group_cb+0x50>
		if (data->group &&
   19898:	6923      	ldr	r3, [r4, #16]
   1989a:	b11b      	cbz	r3, 198a4 <read_group_cb+0x48>
   1989c:	885a      	ldrh	r2, [r3, #2]
   1989e:	42b2      	cmp	r2, r6
   198a0:	d200      	bcs.n	198a4 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   198a2:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   198a4:	2001      	movs	r0, #1
}
   198a6:	b004      	add	sp, #16
   198a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   198ac:	6861      	ldr	r1, [r4, #4]
   198ae:	6828      	ldr	r0, [r5, #0]
   198b0:	f011 fc35 	bl	2b11e <bt_uuid_cmp>
   198b4:	b110      	cbz	r0, 198bc <read_group_cb+0x60>
		data->group = NULL;
   198b6:	2300      	movs	r3, #0
   198b8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   198ba:	e7f3      	b.n	198a4 <read_group_cb+0x48>
	if (data->rsp->len &&
   198bc:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   198be:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   198c0:	781a      	ldrb	r2, [r3, #0]
   198c2:	b132      	cbz	r2, 198d2 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   198c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   198c6:	8a01      	ldrh	r1, [r0, #16]
   198c8:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   198ca:	4293      	cmp	r3, r2
   198cc:	da01      	bge.n	198d2 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   198ce:	2000      	movs	r0, #0
   198d0:	e7e9      	b.n	198a6 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   198d2:	2104      	movs	r1, #4
   198d4:	300c      	adds	r0, #12
   198d6:	f005 fbc9 	bl	1f06c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   198da:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   198dc:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   198de:	6923      	ldr	r3, [r4, #16]
   198e0:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   198e2:	4b08      	ldr	r3, [pc, #32]	; (19904 <read_group_cb+0xa8>)
   198e4:	9300      	str	r3, [sp, #0]
   198e6:	9401      	str	r4, [sp, #4]
   198e8:	68a2      	ldr	r2, [r4, #8]
   198ea:	2300      	movs	r3, #0
   198ec:	4629      	mov	r1, r5
   198ee:	4638      	mov	r0, r7
   198f0:	f012 f8f4 	bl	2badc <att_chan_read>
	if (read < 0) {
   198f4:	2800      	cmp	r0, #0
   198f6:	dbea      	blt.n	198ce <read_group_cb+0x72>
	if (!data->group) {
   198f8:	6920      	ldr	r0, [r4, #16]
   198fa:	3800      	subs	r0, #0
   198fc:	bf18      	it	ne
   198fe:	2001      	movne	r0, #1
   19900:	e7d1      	b.n	198a6 <read_group_cb+0x4a>
   19902:	bf00      	nop
   19904:	0002ba3b 	.word	0x0002ba3b

00019908 <read_type_cb>:
{
   19908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1990c:	6817      	ldr	r7, [r2, #0]
{
   1990e:	4605      	mov	r5, r0
   19910:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19912:	6800      	ldr	r0, [r0, #0]
   19914:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   19916:	687e      	ldr	r6, [r7, #4]
{
   19918:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1991a:	f011 fc00 	bl	2b11e <bt_uuid_cmp>
   1991e:	4681      	mov	r9, r0
   19920:	2800      	cmp	r0, #0
   19922:	d13c      	bne.n	1999e <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19924:	4630      	mov	r0, r6
   19926:	2295      	movs	r2, #149	; 0x95
   19928:	4629      	mov	r1, r5
   1992a:	f013 f855 	bl	2c9d8 <bt_gatt_check_perm>
   1992e:	4606      	mov	r6, r0
   19930:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   19932:	b140      	cbz	r0, 19946 <read_type_cb+0x3e>
		if (data->rsp->len) {
   19934:	68e3      	ldr	r3, [r4, #12]
   19936:	781b      	ldrb	r3, [r3, #0]
   19938:	b10b      	cbz	r3, 1993e <read_type_cb+0x36>
			data->err = 0x00;
   1993a:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1993e:	2000      	movs	r0, #0
}
   19940:	b003      	add	sp, #12
   19942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19946:	68a0      	ldr	r0, [r4, #8]
   19948:	f005 fae2 	bl	1ef10 <net_buf_frag_last>
   1994c:	2102      	movs	r1, #2
   1994e:	300c      	adds	r0, #12
   19950:	f005 fb8c 	bl	1f06c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   19954:	4b13      	ldr	r3, [pc, #76]	; (199a4 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   19956:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   19958:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1995c:	9300      	str	r3, [sp, #0]
   1995e:	9401      	str	r4, [sp, #4]
   19960:	68a2      	ldr	r2, [r4, #8]
   19962:	4633      	mov	r3, r6
   19964:	4629      	mov	r1, r5
   19966:	4638      	mov	r0, r7
   19968:	f012 f8b8 	bl	2badc <att_chan_read>
	if (read < 0) {
   1996c:	2800      	cmp	r0, #0
   1996e:	da07      	bge.n	19980 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   19970:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   19974:	bf26      	itte	cs
   19976:	4240      	negcs	r0, r0
   19978:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1997a:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1997c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1997e:	e7de      	b.n	1993e <read_type_cb+0x36>
	if (!data->item) {
   19980:	6923      	ldr	r3, [r4, #16]
   19982:	2b00      	cmp	r3, #0
   19984:	d0db      	beq.n	1993e <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   19986:	68a0      	ldr	r0, [r4, #8]
   19988:	f011 ff60 	bl	2b84c <net_buf_frags_len>
   1998c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1998e:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   19990:	68e3      	ldr	r3, [r4, #12]
   19992:	781b      	ldrb	r3, [r3, #0]
   19994:	4298      	cmp	r0, r3
   19996:	bf94      	ite	ls
   19998:	2000      	movls	r0, #0
   1999a:	2001      	movhi	r0, #1
   1999c:	e7d0      	b.n	19940 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1999e:	2001      	movs	r0, #1
   199a0:	e7ce      	b.n	19940 <read_type_cb+0x38>
   199a2:	bf00      	nop
   199a4:	0002b85d 	.word	0x0002b85d

000199a8 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   199a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   199aa:	2300      	movs	r3, #0
{
   199ac:	4604      	mov	r4, r0
   199ae:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   199b0:	482e      	ldr	r0, [pc, #184]	; (19a6c <bt_att_accept+0xc4>)
   199b2:	2200      	movs	r2, #0
   199b4:	4669      	mov	r1, sp
   199b6:	f00a f975 	bl	23ca4 <k_mem_slab_alloc>
   199ba:	4605      	mov	r5, r0
   199bc:	b148      	cbz	r0, 199d2 <bt_att_accept+0x2a>
		LOG_ERR("No available ATT context for conn %p", conn);
   199be:	482c      	ldr	r0, [pc, #176]	; (19a70 <bt_att_accept+0xc8>)
   199c0:	4622      	mov	r2, r4
   199c2:	2145      	movs	r1, #69	; 0x45
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   199c4:	f010 fb4f 	bl	2a066 <z_log_minimal_printk>
		return -ENOMEM;
   199c8:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   199cc:	4628      	mov	r0, r5
   199ce:	b003      	add	sp, #12
   199d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   199d2:	f00c f959 	bl	25c88 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   199d6:	4b27      	ldr	r3, [pc, #156]	; (19a74 <bt_att_accept+0xcc>)
	(void)memset(att, 0, sizeof(*att));
   199d8:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   199da:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   199dc:	2230      	movs	r2, #48	; 0x30
   199de:	9800      	ldr	r0, [sp, #0]
   199e0:	f011 fb14 	bl	2b00c <memset>
	att->conn = conn;
   199e4:	9b00      	ldr	r3, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   199e6:	4824      	ldr	r0, [pc, #144]	; (19a78 <bt_att_accept+0xd0>)
	att->conn = conn;
   199e8:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   199ea:	9c00      	ldr	r4, [sp, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   199ec:	9501      	str	r5, [sp, #4]
	list->tail = NULL;
   199ee:	e9c4 5501 	strd	r5, r5, [r4, #4]
   199f2:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   199f6:	2200      	movs	r2, #0
   199f8:	2300      	movs	r3, #0
   199fa:	a901      	add	r1, sp, #4
   199fc:	f00a f952 	bl	23ca4 <k_mem_slab_alloc>
   19a00:	4605      	mov	r5, r0
   19a02:	b118      	cbz	r0, 19a0c <bt_att_accept+0x64>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   19a04:	6822      	ldr	r2, [r4, #0]
   19a06:	481d      	ldr	r0, [pc, #116]	; (19a7c <bt_att_accept+0xd4>)
   19a08:	2157      	movs	r1, #87	; 0x57
   19a0a:	e7db      	b.n	199c4 <bt_att_accept+0x1c>
	(void)memset(chan, 0, sizeof(*chan));
   19a0c:	4601      	mov	r1, r0
   19a0e:	22f8      	movs	r2, #248	; 0xf8
   19a10:	9801      	ldr	r0, [sp, #4]
   19a12:	f011 fafb 	bl	2b00c <memset>
	chan->chan.chan.ops = &ops;
   19a16:	9801      	ldr	r0, [sp, #4]
   19a18:	4b19      	ldr	r3, [pc, #100]	; (19a80 <bt_att_accept+0xd8>)
   19a1a:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   19a1c:	30a0      	adds	r0, #160	; 0xa0
   19a1e:	f014 f9a6 	bl	2dd6e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19a22:	9b01      	ldr	r3, [sp, #4]
   19a24:	f3bf 8f5b 	dmb	ish
   19a28:	3398      	adds	r3, #152	; 0x98
   19a2a:	e853 2f00 	ldrex	r2, [r3]
   19a2e:	e843 5100 	strex	r1, r5, [r3]
   19a32:	2900      	cmp	r1, #0
   19a34:	d1f9      	bne.n	19a2a <bt_att_accept+0x82>
   19a36:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19a3a:	9b01      	ldr	r3, [sp, #4]
   19a3c:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   19a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   19a40:	9f01      	ldr	r7, [sp, #4]
	if (sys_slist_is_empty(&att->chans)) {
   19a42:	b91b      	cbnz	r3, 19a4c <bt_att_accept+0xa4>
   19a44:	f104 000c 	add.w	r0, r4, #12
   19a48:	f014 f991 	bl	2dd6e <z_impl_k_queue_init>
	return list->head;
   19a4c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   19a4e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
Z_GENLIST_PREPEND(slist, snode)
   19a52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   19a54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
	list->head = node;
   19a58:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   19a5a:	b902      	cbnz	r2, 19a5e <bt_att_accept+0xb6>
	list->tail = node;
   19a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   19a5e:	9b01      	ldr	r3, [sp, #4]
	if (!chan) {
   19a60:	2b00      	cmp	r3, #0
   19a62:	d0b1      	beq.n	199c8 <bt_att_accept+0x20>
	*ch = &chan->chan.chan;
   19a64:	3304      	adds	r3, #4
   19a66:	6033      	str	r3, [r6, #0]
	return 0;
   19a68:	e7b0      	b.n	199cc <bt_att_accept+0x24>
   19a6a:	bf00      	nop
   19a6c:	200008a0 	.word	0x200008a0
   19a70:	0003186f 	.word	0x0003186f
   19a74:	20003260 	.word	0x20003260
   19a78:	200008c0 	.word	0x200008c0
   19a7c:	00031899 	.word	0x00031899
   19a80:	200005fc 	.word	0x200005fc

00019a84 <bt_att_connected>:
{
   19a84:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a86:	f100 0394 	add.w	r3, r0, #148	; 0x94
   19a8a:	4604      	mov	r4, r0
   19a8c:	f3bf 8f5b 	dmb	ish
   19a90:	e853 1f00 	ldrex	r1, [r3]
   19a94:	f041 0104 	orr.w	r1, r1, #4
   19a98:	e843 1200 	strex	r2, r1, [r3]
   19a9c:	2a00      	cmp	r2, #0
   19a9e:	d1f7      	bne.n	19a90 <bt_att_connected+0xc>
   19aa0:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19aa4:	2317      	movs	r3, #23
   19aa6:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19aa8:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   19aaa:	1f20      	subs	r0, r4, #4
   19aac:	f011 ff0a 	bl	2b8c4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19ab0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   19ab4:	4903      	ldr	r1, [pc, #12]	; (19ac4 <bt_att_connected+0x40>)
   19ab6:	f00b f89f 	bl	24bf8 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   19aba:	6820      	ldr	r0, [r4, #0]
}
   19abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19ac0:	f002 bf5c 	b.w	1c97c <bt_gatt_connected>
   19ac4:	0001a4c9 	.word	0x0001a4c9

00019ac8 <bt_att_chan_create_pdu>:
{
   19ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19aca:	1c53      	adds	r3, r2, #1
   19acc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   19ace:	4293      	cmp	r3, r2
{
   19ad0:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   19ad2:	d906      	bls.n	19ae2 <bt_att_chan_create_pdu+0x1a>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   19ad4:	481c      	ldr	r0, [pc, #112]	; (19b48 <bt_att_chan_create_pdu+0x80>)
   19ad6:	2157      	movs	r1, #87	; 0x57
   19ad8:	f010 fac5 	bl	2a066 <z_log_minimal_printk>
		return NULL;
   19adc:	2400      	movs	r4, #0
}
   19ade:	4620      	mov	r0, r4
   19ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   19ae2:	4608      	mov	r0, r1
   19ae4:	f7ff fcf2 	bl	194cc <att_op_get_type>
   19ae8:	2802      	cmp	r0, #2
   19aea:	d013      	beq.n	19b14 <bt_att_chan_create_pdu+0x4c>
   19aec:	2804      	cmp	r0, #4
   19aee:	d011      	beq.n	19b14 <bt_att_chan_create_pdu+0x4c>
		timeout = K_FOREVER;
   19af0:	f04f 36ff 	mov.w	r6, #4294967295
   19af4:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   19af8:	2100      	movs	r1, #0
   19afa:	4632      	mov	r2, r6
   19afc:	463b      	mov	r3, r7
   19afe:	4608      	mov	r0, r1
   19b00:	f011 fe4b 	bl	2b79a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19b04:	4604      	mov	r4, r0
   19b06:	b948      	cbnz	r0, 19b1c <bt_att_chan_create_pdu+0x54>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   19b08:	4810      	ldr	r0, [pc, #64]	; (19b4c <bt_att_chan_create_pdu+0x84>)
   19b0a:	462a      	mov	r2, r5
   19b0c:	2145      	movs	r1, #69	; 0x45
   19b0e:	f010 faaa 	bl	2a066 <z_log_minimal_printk>
		return NULL;
   19b12:	e7e3      	b.n	19adc <bt_att_chan_create_pdu+0x14>
	switch (att_op_get_type(op)) {
   19b14:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   19b18:	2700      	movs	r7, #0
   19b1a:	e7ed      	b.n	19af8 <bt_att_chan_create_pdu+0x30>
	return z_impl_k_queue_get(queue, timeout);
   19b1c:	480c      	ldr	r0, [pc, #48]	; (19b50 <bt_att_chan_create_pdu+0x88>)
   19b1e:	4632      	mov	r2, r6
   19b20:	463b      	mov	r3, r7
   19b22:	f00a fc6b 	bl	243fc <z_impl_k_queue_get>
	if (!data) {
   19b26:	b938      	cbnz	r0, 19b38 <bt_att_chan_create_pdu+0x70>
		LOG_WRN("Unable to allocate ATT TX meta");
   19b28:	480a      	ldr	r0, [pc, #40]	; (19b54 <bt_att_chan_create_pdu+0x8c>)
   19b2a:	2157      	movs	r1, #87	; 0x57
   19b2c:	f010 fa9b 	bl	2a066 <z_log_minimal_printk>
		net_buf_unref(buf);
   19b30:	4620      	mov	r0, r4
   19b32:	f005 f995 	bl	1ee60 <net_buf_unref>
		return NULL;
   19b36:	e7d1      	b.n	19adc <bt_att_chan_create_pdu+0x14>
	bt_att_tx_meta_data(buf) = data;
   19b38:	61a0      	str	r0, [r4, #24]
   19b3a:	2101      	movs	r1, #1
   19b3c:	f104 000c 	add.w	r0, r4, #12
   19b40:	f005 fa94 	bl	1f06c <net_buf_simple_add>
	hdr->code = op;
   19b44:	7005      	strb	r5, [r0, #0]
	return buf;
   19b46:	e7ca      	b.n	19ade <bt_att_chan_create_pdu+0x16>
   19b48:	000318c3 	.word	0x000318c3
   19b4c:	00031607 	.word	0x00031607
   19b50:	200009bc 	.word	0x200009bc
   19b54:	000318ed 	.word	0x000318ed

00019b58 <bt_att_recv>:
{
   19b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   19b5c:	8a0b      	ldrh	r3, [r1, #16]
{
   19b5e:	4607      	mov	r7, r0
   19b60:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   19b62:	b933      	cbnz	r3, 19b72 <bt_att_recv+0x1a>
		LOG_ERR("Too small ATT PDU received");
   19b64:	4835      	ldr	r0, [pc, #212]	; (19c3c <bt_att_recv+0xe4>)
   19b66:	2145      	movs	r1, #69	; 0x45
			LOG_WRN("Ignoring unexpected request");
   19b68:	f010 fa7d 	bl	2a066 <z_log_minimal_printk>
}
   19b6c:	2000      	movs	r0, #0
   19b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19b72:	2101      	movs	r1, #1
   19b74:	f105 000c 	add.w	r0, r5, #12
   19b78:	f005 fa5e 	bl	1f038 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19b7c:	f857 3c04 	ldr.w	r3, [r7, #-4]
   19b80:	4604      	mov	r4, r0
   19b82:	2b00      	cmp	r3, #0
   19b84:	d0f2      	beq.n	19b6c <bt_att_recv+0x14>
		if (hdr->code == handlers[i].op) {
   19b86:	7802      	ldrb	r2, [r0, #0]
   19b88:	4e2d      	ldr	r6, [pc, #180]	; (19c40 <bt_att_recv+0xe8>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19b8a:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19b8e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19b90:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   19b94:	4290      	cmp	r0, r2
   19b96:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   19b9a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   19b9e:	d10d      	bne.n	19bbc <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
   19ba0:	f891 9002 	ldrb.w	r9, [r1, #2]
   19ba4:	f1b9 0f01 	cmp.w	r9, #1
   19ba8:	d11f      	bne.n	19bea <bt_att_recv+0x92>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   19baa:	2100      	movs	r1, #0
   19bac:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19bb0:	f012 f92e 	bl	2be10 <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   19bb4:	b328      	cbz	r0, 19c02 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected request");
   19bb6:	4823      	ldr	r0, [pc, #140]	; (19c44 <bt_att_recv+0xec>)
   19bb8:	2157      	movs	r1, #87	; 0x57
   19bba:	e7d5      	b.n	19b68 <bt_att_recv+0x10>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19bbc:	3301      	adds	r3, #1
   19bbe:	2b1e      	cmp	r3, #30
   19bc0:	d1e6      	bne.n	19b90 <bt_att_recv+0x38>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   19bc2:	4821      	ldr	r0, [pc, #132]	; (19c48 <bt_att_recv+0xf0>)
   19bc4:	2157      	movs	r1, #87	; 0x57
   19bc6:	f010 fa4e 	bl	2a066 <z_log_minimal_printk>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   19bca:	7821      	ldrb	r1, [r4, #0]
   19bcc:	4608      	mov	r0, r1
   19bce:	f7ff fc7d 	bl	194cc <att_op_get_type>
   19bd2:	2800      	cmp	r0, #0
   19bd4:	d0ca      	beq.n	19b6c <bt_att_recv+0x14>
   19bd6:	2805      	cmp	r0, #5
   19bd8:	d0c8      	beq.n	19b6c <bt_att_recv+0x14>
	if (!req) {
   19bda:	2900      	cmp	r1, #0
   19bdc:	d0c6      	beq.n	19b6c <bt_att_recv+0x14>
   19bde:	2306      	movs	r3, #6
   19be0:	2200      	movs	r2, #0
   19be2:	4640      	mov	r0, r8
   19be4:	f012 f9ae 	bl	2bf44 <send_err_rsp.part.0>
   19be8:	e7c0      	b.n	19b6c <bt_att_recv+0x14>
		} else if (handler->type == ATT_INDICATION &&
   19bea:	f1b9 0f05 	cmp.w	r9, #5
   19bee:	d108      	bne.n	19c02 <bt_att_recv+0xaa>
			   atomic_test_and_set_bit(att_chan->flags,
   19bf0:	2101      	movs	r1, #1
   19bf2:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19bf6:	f012 f90b 	bl	2be10 <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   19bfa:	b110      	cbz	r0, 19c02 <bt_att_recv+0xaa>
			LOG_WRN("Ignoring unexpected indication");
   19bfc:	4813      	ldr	r0, [pc, #76]	; (19c4c <bt_att_recv+0xf4>)
   19bfe:	2157      	movs	r1, #87	; 0x57
   19c00:	e7b2      	b.n	19b68 <bt_att_recv+0x10>
	if (buf->len < handler->expect_len) {
   19c02:	4456      	add	r6, sl
   19c04:	8a2a      	ldrh	r2, [r5, #16]
   19c06:	7873      	ldrb	r3, [r6, #1]
   19c08:	4293      	cmp	r3, r2
   19c0a:	d909      	bls.n	19c20 <bt_att_recv+0xc8>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19c0c:	7823      	ldrb	r3, [r4, #0]
   19c0e:	4810      	ldr	r0, [pc, #64]	; (19c50 <bt_att_recv+0xf8>)
   19c10:	2145      	movs	r1, #69	; 0x45
   19c12:	f010 fa28 	bl	2a066 <z_log_minimal_printk>
	if (handler->type == ATT_REQUEST && err) {
   19c16:	f1b9 0f01 	cmp.w	r9, #1
   19c1a:	d1a7      	bne.n	19b6c <bt_att_recv+0x14>
		err = BT_ATT_ERR_INVALID_PDU;
   19c1c:	2304      	movs	r3, #4
   19c1e:	e009      	b.n	19c34 <bt_att_recv+0xdc>
		err = handler->func(att_chan, buf);
   19c20:	6873      	ldr	r3, [r6, #4]
   19c22:	4629      	mov	r1, r5
   19c24:	4640      	mov	r0, r8
   19c26:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19c28:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   19c2c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19c2e:	d19d      	bne.n	19b6c <bt_att_recv+0x14>
   19c30:	2800      	cmp	r0, #0
   19c32:	d09b      	beq.n	19b6c <bt_att_recv+0x14>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19c34:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   19c36:	2900      	cmp	r1, #0
   19c38:	d098      	beq.n	19b6c <bt_att_recv+0x14>
   19c3a:	e7d1      	b.n	19be0 <bt_att_recv+0x88>
   19c3c:	00031911 	.word	0x00031911
   19c40:	0002e9e8 	.word	0x0002e9e8
   19c44:	00031950 	.word	0x00031950
   19c48:	00031931 	.word	0x00031931
   19c4c:	00031971 	.word	0x00031971
   19c50:	00031995 	.word	0x00031995

00019c54 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c56:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19c58:	6803      	ldr	r3, [r0, #0]
   19c5a:	460d      	mov	r5, r1
   19c5c:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19c5e:	b087      	sub	sp, #28
   19c60:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19c62:	bf18      	it	ne
   19c64:	2101      	movne	r1, #1
   19c66:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19c68:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19c6a:	f012 ffa6 	bl	2cbba <bt_gatt_change_aware>
   19c6e:	b948      	cbnz	r0, 19c84 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19c70:	2105      	movs	r1, #5
   19c72:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19c76:	f012 f8cb 	bl	2be10 <atomic_test_and_set_bit>
   19c7a:	2800      	cmp	r0, #0
   19c7c:	d048      	beq.n	19d10 <att_write_rsp.constprop.0+0xbc>
			return 0;
   19c7e:	2000      	movs	r0, #0
}
   19c80:	b007      	add	sp, #28
   19c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   19c84:	2e00      	cmp	r6, #0
   19c86:	d045      	beq.n	19d14 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   19c88:	2218      	movs	r2, #24
   19c8a:	2100      	movs	r1, #0
   19c8c:	4668      	mov	r0, sp
   19c8e:	f011 f9bd 	bl	2b00c <memset>
	if (rsp) {
   19c92:	bb67      	cbnz	r7, 19cee <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   19c94:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19c96:	4a20      	ldr	r2, [pc, #128]	; (19d18 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   19c98:	681b      	ldr	r3, [r3, #0]
   19c9a:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19c9c:	2300      	movs	r3, #0
   19c9e:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   19ca2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19ca4:	9303      	str	r3, [sp, #12]
	data.len = len;
   19ca6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19caa:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19cae:	2301      	movs	r3, #1
   19cb0:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19cb4:	4631      	mov	r1, r6
   19cb6:	466b      	mov	r3, sp
   19cb8:	4630      	mov	r0, r6
	data.req = req;
   19cba:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19cbe:	f011 fe65 	bl	2b98c <bt_gatt_foreach_attr>
	if (data.err) {
   19cc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19cc6:	b1e3      	cbz	r3, 19d02 <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   19cc8:	2f00      	cmp	r7, #0
   19cca:	d0d8      	beq.n	19c7e <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19ccc:	9b01      	ldr	r3, [sp, #4]
   19cce:	6998      	ldr	r0, [r3, #24]
   19cd0:	f7ff fd12 	bl	196f8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19cd4:	9801      	ldr	r0, [sp, #4]
   19cd6:	f005 f8c3 	bl	1ee60 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   19cda:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   19cde:	2d00      	cmp	r5, #0
   19ce0:	d0cd      	beq.n	19c7e <att_write_rsp.constprop.0+0x2a>
   19ce2:	4632      	mov	r2, r6
   19ce4:	4629      	mov	r1, r5
   19ce6:	4620      	mov	r0, r4
   19ce8:	f012 f92c 	bl	2bf44 <send_err_rsp.part.0>
   19cec:	e7c7      	b.n	19c7e <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19cee:	2200      	movs	r2, #0
   19cf0:	4639      	mov	r1, r7
   19cf2:	4620      	mov	r0, r4
   19cf4:	f7ff fee8 	bl	19ac8 <bt_att_chan_create_pdu>
   19cf8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   19cfa:	2800      	cmp	r0, #0
   19cfc:	d1ca      	bne.n	19c94 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   19cfe:	200e      	movs	r0, #14
   19d00:	e7be      	b.n	19c80 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   19d02:	9901      	ldr	r1, [sp, #4]
   19d04:	2900      	cmp	r1, #0
   19d06:	d0ba      	beq.n	19c7e <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   19d08:	4620      	mov	r0, r4
   19d0a:	f011 fec0 	bl	2ba8e <bt_att_chan_send_rsp>
   19d0e:	e7b6      	b.n	19c7e <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19d10:	2012      	movs	r0, #18
   19d12:	e7b5      	b.n	19c80 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19d14:	2001      	movs	r0, #1
   19d16:	e7b3      	b.n	19c80 <att_write_rsp.constprop.0+0x2c>
   19d18:	0002b92b 	.word	0x0002b92b

00019d1c <bt_att_create_pdu>:
{
   19d1c:	b570      	push	{r4, r5, r6, lr}
   19d1e:	460e      	mov	r6, r1
   19d20:	4615      	mov	r5, r2
	att = att_get(conn);
   19d22:	f7ff fc0d 	bl	19540 <att_get>
	if (!att) {
   19d26:	b190      	cbz	r0, 19d4e <bt_att_create_pdu+0x32>
	return list->head;
   19d28:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d2a:	4618      	mov	r0, r3
   19d2c:	b11b      	cbz	r3, 19d36 <bt_att_create_pdu+0x1a>
	return node->next;
   19d2e:	f850 39f0 	ldr.w	r3, [r0], #-240
   19d32:	b103      	cbz	r3, 19d36 <bt_att_create_pdu+0x1a>
   19d34:	3bf0      	subs	r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d36:	1c6c      	adds	r4, r5, #1
   19d38:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d3a:	b118      	cbz	r0, 19d44 <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d3c:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19d3e:	42a1      	cmp	r1, r4
   19d40:	d210      	bcs.n	19d64 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d42:	b933      	cbnz	r3, 19d52 <bt_att_create_pdu+0x36>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   19d44:	480b      	ldr	r0, [pc, #44]	; (19d74 <bt_att_create_pdu+0x58>)
   19d46:	4622      	mov	r2, r4
   19d48:	2157      	movs	r1, #87	; 0x57
   19d4a:	f010 f98c 	bl	2a066 <z_log_minimal_printk>
}
   19d4e:	2000      	movs	r0, #0
   19d50:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d52:	4618      	mov	r0, r3
   19d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   19d58:	b153      	cbz	r3, 19d70 <bt_att_create_pdu+0x54>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d5a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   19d5c:	4291      	cmp	r1, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19d5e:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d62:	d3f6      	bcc.n	19d52 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   19d64:	462a      	mov	r2, r5
   19d66:	4631      	mov	r1, r6
}
   19d68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   19d6c:	f7ff beac 	b.w	19ac8 <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   19d70:	4614      	mov	r4, r2
   19d72:	e7e3      	b.n	19d3c <bt_att_create_pdu+0x20>
   19d74:	000319b9 	.word	0x000319b9

00019d78 <att_read_group_req>:
{
   19d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19d7c:	8a0e      	ldrh	r6, [r1, #16]
   19d7e:	3e04      	subs	r6, #4
   19d80:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   19d82:	2e02      	cmp	r6, #2
{
   19d84:	4604      	mov	r4, r0
   19d86:	b08c      	sub	sp, #48	; 0x30
   19d88:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19d8a:	d001      	beq.n	19d90 <att_read_group_req+0x18>
   19d8c:	2e10      	cmp	r6, #16
   19d8e:	d16a      	bne.n	19e66 <att_read_group_req+0xee>
   19d90:	2104      	movs	r1, #4
   19d92:	300c      	adds	r0, #12
   19d94:	f005 f950 	bl	1f038 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19d98:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19d9c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19d9e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19da0:	1d01      	adds	r1, r0, #4
   19da2:	4632      	mov	r2, r6
   19da4:	4640      	mov	r0, r8
   19da6:	f011 f9e8 	bl	2b17a <bt_uuid_create>
   19daa:	2800      	cmp	r0, #0
   19dac:	d05d      	beq.n	19e6a <att_read_group_req+0xf2>
	if (!start || !end) {
   19dae:	2d00      	cmp	r5, #0
   19db0:	d03a      	beq.n	19e28 <att_read_group_req+0xb0>
   19db2:	2600      	movs	r6, #0
   19db4:	2f00      	cmp	r7, #0
   19db6:	d036      	beq.n	19e26 <att_read_group_req+0xae>
	if (start > end) {
   19db8:	42bd      	cmp	r5, r7
   19dba:	d835      	bhi.n	19e28 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19dbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19dc0:	a901      	add	r1, sp, #4
   19dc2:	4640      	mov	r0, r8
   19dc4:	f88d 6004 	strb.w	r6, [sp, #4]
   19dc8:	f8ad 3006 	strh.w	r3, [sp, #6]
   19dcc:	f011 f9a7 	bl	2b11e <bt_uuid_cmp>
   19dd0:	bb70      	cbnz	r0, 19e30 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   19dd2:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19dd4:	2214      	movs	r2, #20
   19dd6:	2100      	movs	r1, #0
   19dd8:	a807      	add	r0, sp, #28
   19dda:	f011 f917 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19dde:	2201      	movs	r2, #1
   19de0:	2111      	movs	r1, #17
   19de2:	4630      	mov	r0, r6
   19de4:	f7ff ff9a 	bl	19d1c <bt_att_create_pdu>
   19de8:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19dea:	2800      	cmp	r0, #0
   19dec:	d03d      	beq.n	19e6a <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   19dee:	2101      	movs	r1, #1
   19df0:	300c      	adds	r0, #12
	data.uuid = uuid;
   19df2:	e9cd 4807 	strd	r4, r8, [sp, #28]
   19df6:	f005 f939 	bl	1f06c <net_buf_simple_add>
	data.rsp->len = 0U;
   19dfa:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19dfc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19dfe:	4a1c      	ldr	r2, [pc, #112]	; (19e70 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   19e00:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19e02:	4639      	mov	r1, r7
	data.group = NULL;
   19e04:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19e06:	4628      	mov	r0, r5
   19e08:	ab07      	add	r3, sp, #28
   19e0a:	f011 fdbf 	bl	2b98c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19e10:	781b      	ldrb	r3, [r3, #0]
   19e12:	bb1b      	cbnz	r3, 19e5c <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19e16:	6998      	ldr	r0, [r3, #24]
   19e18:	f7ff fc6e 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   19e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   19e1e:	f005 f81f 	bl	1ee60 <net_buf_unref>
	if (!req) {
   19e22:	230a      	movs	r3, #10
   19e24:	e001      	b.n	19e2a <att_read_group_req+0xb2>
			*err = 0U;
   19e26:	463d      	mov	r5, r7
	if (!req) {
   19e28:	2301      	movs	r3, #1
   19e2a:	462a      	mov	r2, r5
   19e2c:	2110      	movs	r1, #16
   19e2e:	e00e      	b.n	19e4e <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   19e30:	f642 0301 	movw	r3, #10241	; 0x2801
   19e34:	a907      	add	r1, sp, #28
   19e36:	4640      	mov	r0, r8
   19e38:	f88d 601c 	strb.w	r6, [sp, #28]
   19e3c:	f8ad 301e 	strh.w	r3, [sp, #30]
   19e40:	f011 f96d 	bl	2b11e <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19e44:	2800      	cmp	r0, #0
   19e46:	d0c4      	beq.n	19dd2 <att_read_group_req+0x5a>
	if (!req) {
   19e48:	2310      	movs	r3, #16
   19e4a:	462a      	mov	r2, r5
   19e4c:	4619      	mov	r1, r3
   19e4e:	4620      	mov	r0, r4
   19e50:	f012 f878 	bl	2bf44 <send_err_rsp.part.0>
		return 0;
   19e54:	2000      	movs	r0, #0
}
   19e56:	b00c      	add	sp, #48	; 0x30
   19e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   19e5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   19e5e:	4620      	mov	r0, r4
   19e60:	f011 fe15 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   19e64:	e7f6      	b.n	19e54 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   19e66:	2004      	movs	r0, #4
   19e68:	e7f5      	b.n	19e56 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   19e6a:	200e      	movs	r0, #14
   19e6c:	e7f3      	b.n	19e56 <att_read_group_req+0xde>
   19e6e:	bf00      	nop
   19e70:	0001985d 	.word	0x0001985d

00019e74 <att_read_mult_vl_req>:
{
   19e74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19e78:	6846      	ldr	r6, [r0, #4]
{
   19e7a:	b085      	sub	sp, #20
   19e7c:	4604      	mov	r4, r0
   19e7e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19e80:	4630      	mov	r0, r6
   19e82:	2101      	movs	r1, #1
   19e84:	f012 fe99 	bl	2cbba <bt_gatt_change_aware>
   19e88:	b950      	cbnz	r0, 19ea0 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19e8a:	2105      	movs	r1, #5
   19e8c:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19e90:	f011 ffbe 	bl	2be10 <atomic_test_and_set_bit>
   19e94:	2800      	cmp	r0, #0
   19e96:	d13b      	bne.n	19f10 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19e98:	2012      	movs	r0, #18
}
   19e9a:	b005      	add	sp, #20
   19e9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19ea0:	2210      	movs	r2, #16
   19ea2:	2100      	movs	r1, #0
   19ea4:	4668      	mov	r0, sp
   19ea6:	f011 f8b1 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   19eaa:	2200      	movs	r2, #0
   19eac:	2121      	movs	r1, #33	; 0x21
   19eae:	4630      	mov	r0, r6
   19eb0:	f7ff ff34 	bl	19d1c <bt_att_create_pdu>
   19eb4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19eb6:	b368      	cbz	r0, 19f14 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19eb8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19f18 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   19ebc:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   19ebe:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19ec2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19ec6:	8a2b      	ldrh	r3, [r5, #16]
   19ec8:	2b01      	cmp	r3, #1
   19eca:	d804      	bhi.n	19ed6 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19ecc:	9902      	ldr	r1, [sp, #8]
   19ece:	4620      	mov	r0, r4
   19ed0:	f011 fddd 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   19ed4:	e01c      	b.n	19f10 <att_read_mult_vl_req+0x9c>
   19ed6:	4638      	mov	r0, r7
   19ed8:	f013 fa91 	bl	2d3fe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19edc:	466b      	mov	r3, sp
   19ede:	464a      	mov	r2, r9
   19ee0:	4601      	mov	r1, r0
   19ee2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19ee4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   19ee8:	f011 fd50 	bl	2b98c <bt_gatt_foreach_attr>
		if (data.err) {
   19eec:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19ef0:	2b00      	cmp	r3, #0
   19ef2:	d0e8      	beq.n	19ec6 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19ef4:	9b02      	ldr	r3, [sp, #8]
   19ef6:	6998      	ldr	r0, [r3, #24]
   19ef8:	f7ff fbfe 	bl	196f8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19efc:	9802      	ldr	r0, [sp, #8]
   19efe:	f004 ffaf 	bl	1ee60 <net_buf_unref>
	if (!req) {
   19f02:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19f06:	4632      	mov	r2, r6
   19f08:	2120      	movs	r1, #32
   19f0a:	4620      	mov	r0, r4
   19f0c:	f012 f81a 	bl	2bf44 <send_err_rsp.part.0>
			return 0;
   19f10:	2000      	movs	r0, #0
   19f12:	e7c2      	b.n	19e9a <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19f14:	200e      	movs	r0, #14
   19f16:	e7c0      	b.n	19e9a <att_read_mult_vl_req+0x26>
   19f18:	0002bc6f 	.word	0x0002bc6f

00019f1c <att_read_mult_req>:
{
   19f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19f20:	6846      	ldr	r6, [r0, #4]
{
   19f22:	b085      	sub	sp, #20
   19f24:	4604      	mov	r4, r0
   19f26:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19f28:	4630      	mov	r0, r6
   19f2a:	2101      	movs	r1, #1
   19f2c:	f012 fe45 	bl	2cbba <bt_gatt_change_aware>
   19f30:	b950      	cbnz	r0, 19f48 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19f32:	2105      	movs	r1, #5
   19f34:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19f38:	f011 ff6a 	bl	2be10 <atomic_test_and_set_bit>
   19f3c:	2800      	cmp	r0, #0
   19f3e:	d13b      	bne.n	19fb8 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19f40:	2012      	movs	r0, #18
}
   19f42:	b005      	add	sp, #20
   19f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   19f48:	2210      	movs	r2, #16
   19f4a:	2100      	movs	r1, #0
   19f4c:	4668      	mov	r0, sp
   19f4e:	f011 f85d 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   19f52:	2200      	movs	r2, #0
   19f54:	210f      	movs	r1, #15
   19f56:	4630      	mov	r0, r6
   19f58:	f7ff fee0 	bl	19d1c <bt_att_create_pdu>
   19f5c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   19f5e:	b368      	cbz	r0, 19fbc <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19f60:	f8df 905c 	ldr.w	r9, [pc, #92]	; 19fc0 <att_read_mult_req+0xa4>
	data.chan = chan;
   19f64:	9400      	str	r4, [sp, #0]
   19f66:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19f6a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   19f6e:	8a2b      	ldrh	r3, [r5, #16]
   19f70:	2b01      	cmp	r3, #1
   19f72:	d804      	bhi.n	19f7e <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   19f74:	9902      	ldr	r1, [sp, #8]
   19f76:	4620      	mov	r0, r4
   19f78:	f011 fd89 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   19f7c:	e01c      	b.n	19fb8 <att_read_mult_req+0x9c>
   19f7e:	4638      	mov	r0, r7
   19f80:	f013 fa3d 	bl	2d3fe <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19f84:	466b      	mov	r3, sp
   19f86:	464a      	mov	r2, r9
   19f88:	4601      	mov	r1, r0
   19f8a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   19f8c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   19f90:	f011 fcfc 	bl	2b98c <bt_gatt_foreach_attr>
		if (data.err) {
   19f94:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19f98:	2b00      	cmp	r3, #0
   19f9a:	d0e8      	beq.n	19f6e <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19f9c:	9b02      	ldr	r3, [sp, #8]
   19f9e:	6998      	ldr	r0, [r3, #24]
   19fa0:	f7ff fbaa 	bl	196f8 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19fa4:	9802      	ldr	r0, [sp, #8]
   19fa6:	f004 ff5b 	bl	1ee60 <net_buf_unref>
	if (!req) {
   19faa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   19fae:	4632      	mov	r2, r6
   19fb0:	210e      	movs	r1, #14
   19fb2:	4620      	mov	r0, r4
   19fb4:	f011 ffc6 	bl	2bf44 <send_err_rsp.part.0>
			return 0;
   19fb8:	2000      	movs	r0, #0
   19fba:	e7c2      	b.n	19f42 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   19fbc:	200e      	movs	r0, #14
   19fbe:	e7c0      	b.n	19f42 <att_read_mult_req+0x26>
   19fc0:	0002bc29 	.word	0x0002bc29

00019fc4 <att_read_rsp>:
{
   19fc4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   19fc8:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   19fcc:	4604      	mov	r4, r0
   19fce:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   19fd0:	4640      	mov	r0, r8
   19fd2:	2101      	movs	r1, #1
{
   19fd4:	4617      	mov	r7, r2
   19fd6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   19fd8:	f012 fdef 	bl	2cbba <bt_gatt_change_aware>
   19fdc:	b948      	cbnz	r0, 19ff2 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19fde:	2105      	movs	r1, #5
   19fe0:	f104 0098 	add.w	r0, r4, #152	; 0x98
   19fe4:	f011 ff14 	bl	2be10 <atomic_test_and_set_bit>
   19fe8:	bb78      	cbnz	r0, 1a04a <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19fea:	2012      	movs	r0, #18
}
   19fec:	b004      	add	sp, #16
   19fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   19ff2:	b38d      	cbz	r5, 1a058 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   19ff4:	2210      	movs	r2, #16
   19ff6:	2100      	movs	r1, #0
   19ff8:	4668      	mov	r0, sp
   19ffa:	f011 f807 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   19ffe:	2200      	movs	r2, #0
   1a000:	4639      	mov	r1, r7
   1a002:	4640      	mov	r0, r8
   1a004:	f7ff fe8a 	bl	19d1c <bt_att_create_pdu>
   1a008:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a00a:	b338      	cbz	r0, 1a05c <att_read_rsp+0x98>
	data.offset = offset;
   1a00c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a010:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a014:	2301      	movs	r3, #1
   1a016:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a01a:	4a11      	ldr	r2, [pc, #68]	; (1a060 <att_read_rsp+0x9c>)
	data.chan = chan;
   1a01c:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a01e:	466b      	mov	r3, sp
   1a020:	4629      	mov	r1, r5
   1a022:	4628      	mov	r0, r5
   1a024:	f011 fcb2 	bl	2b98c <bt_gatt_foreach_attr>
	if (data.err) {
   1a028:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a02c:	b17b      	cbz	r3, 1a04e <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a02e:	9b02      	ldr	r3, [sp, #8]
   1a030:	6998      	ldr	r0, [r3, #24]
   1a032:	f7ff fb61 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a036:	9802      	ldr	r0, [sp, #8]
   1a038:	f004 ff12 	bl	1ee60 <net_buf_unref>
	if (!req) {
   1a03c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a040:	462a      	mov	r2, r5
   1a042:	4631      	mov	r1, r6
   1a044:	4620      	mov	r0, r4
   1a046:	f011 ff7d 	bl	2bf44 <send_err_rsp.part.0>
			return 0;
   1a04a:	2000      	movs	r0, #0
   1a04c:	e7ce      	b.n	19fec <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a04e:	9902      	ldr	r1, [sp, #8]
   1a050:	4620      	mov	r0, r4
   1a052:	f011 fd1c 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   1a056:	e7f8      	b.n	1a04a <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a058:	2001      	movs	r0, #1
   1a05a:	e7c7      	b.n	19fec <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a05c:	200e      	movs	r0, #14
   1a05e:	e7c5      	b.n	19fec <att_read_rsp+0x28>
   1a060:	0002bc29 	.word	0x0002bc29

0001a064 <att_read_type_req>:
{
   1a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a068:	8a0d      	ldrh	r5, [r1, #16]
   1a06a:	3d04      	subs	r5, #4
   1a06c:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a06e:	2d02      	cmp	r5, #2
{
   1a070:	4604      	mov	r4, r0
   1a072:	b08c      	sub	sp, #48	; 0x30
   1a074:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a076:	d001      	beq.n	1a07c <att_read_type_req+0x18>
   1a078:	2d10      	cmp	r5, #16
   1a07a:	d150      	bne.n	1a11e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a07c:	2104      	movs	r1, #4
   1a07e:	300c      	adds	r0, #12
   1a080:	f004 ffda 	bl	1f038 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a084:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a088:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a08a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a08c:	1d01      	adds	r1, r0, #4
   1a08e:	462a      	mov	r2, r5
   1a090:	4640      	mov	r0, r8
   1a092:	f011 f872 	bl	2b17a <bt_uuid_create>
   1a096:	b188      	cbz	r0, 1a0bc <att_read_type_req+0x58>
	if (!start || !end) {
   1a098:	b19e      	cbz	r6, 1a0c2 <att_read_type_req+0x5e>
   1a09a:	b18f      	cbz	r7, 1a0c0 <att_read_type_req+0x5c>
	if (start > end) {
   1a09c:	42b7      	cmp	r7, r6
   1a09e:	d310      	bcc.n	1a0c2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a0a0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a0a2:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a0a4:	2100      	movs	r1, #0
   1a0a6:	eb0d 0002 	add.w	r0, sp, r2
   1a0aa:	f010 ffaf 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1a0ae:	2201      	movs	r2, #1
   1a0b0:	2109      	movs	r1, #9
   1a0b2:	4628      	mov	r0, r5
   1a0b4:	f7ff fe32 	bl	19d1c <bt_att_create_pdu>
   1a0b8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1a0ba:	b960      	cbnz	r0, 1a0d6 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1a0bc:	200e      	movs	r0, #14
   1a0be:	e007      	b.n	1a0d0 <att_read_type_req+0x6c>
			*err = 0U;
   1a0c0:	463e      	mov	r6, r7
	if (!req) {
   1a0c2:	2301      	movs	r3, #1
   1a0c4:	4632      	mov	r2, r6
   1a0c6:	2108      	movs	r1, #8
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	f011 ff3b 	bl	2bf44 <send_err_rsp.part.0>
		return 0;
   1a0ce:	2000      	movs	r0, #0
}
   1a0d0:	b00c      	add	sp, #48	; 0x30
   1a0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1a0d6:	2101      	movs	r1, #1
   1a0d8:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a0da:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1a0de:	f004 ffc5 	bl	1f06c <net_buf_simple_add>
	data.rsp->len = 0U;
   1a0e2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a0e4:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1a0e6:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a0e8:	230a      	movs	r3, #10
   1a0ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1a0ee:	4a0d      	ldr	r2, [pc, #52]	; (1a124 <att_read_type_req+0xc0>)
   1a0f0:	ab06      	add	r3, sp, #24
   1a0f2:	4639      	mov	r1, r7
   1a0f4:	4630      	mov	r0, r6
   1a0f6:	f011 fc49 	bl	2b98c <bt_gatt_foreach_attr>
	if (data.err) {
   1a0fa:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a0fe:	b14b      	cbz	r3, 1a114 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a100:	9b08      	ldr	r3, [sp, #32]
   1a102:	6998      	ldr	r0, [r3, #24]
   1a104:	f7ff faf8 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a108:	9808      	ldr	r0, [sp, #32]
   1a10a:	f004 fea9 	bl	1ee60 <net_buf_unref>
	if (!req) {
   1a10e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a112:	e7d7      	b.n	1a0c4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1a114:	9908      	ldr	r1, [sp, #32]
   1a116:	4620      	mov	r0, r4
   1a118:	f011 fcb9 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   1a11c:	e7d7      	b.n	1a0ce <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1a11e:	2004      	movs	r0, #4
   1a120:	e7d6      	b.n	1a0d0 <att_read_type_req+0x6c>
   1a122:	bf00      	nop
   1a124:	00019909 	.word	0x00019909

0001a128 <att_find_type_req>:
{
   1a128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a12c:	460f      	mov	r7, r1
   1a12e:	b086      	sub	sp, #24
   1a130:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1a132:	2106      	movs	r1, #6
   1a134:	f107 000c 	add.w	r0, r7, #12
   1a138:	f004 ff7e 	bl	1f038 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a13c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a13e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1a142:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1a144:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1a148:	b1c5      	cbz	r5, 1a17c <att_find_type_req+0x54>
   1a14a:	2300      	movs	r3, #0
   1a14c:	f1b8 0f00 	cmp.w	r8, #0
   1a150:	d013      	beq.n	1a17a <att_find_type_req+0x52>
	if (start > end) {
   1a152:	4545      	cmp	r5, r8
   1a154:	d812      	bhi.n	1a17c <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1a156:	f88d 3000 	strb.w	r3, [sp]
   1a15a:	f88d 3004 	strb.w	r3, [sp, #4]
   1a15e:	a901      	add	r1, sp, #4
   1a160:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a164:	4668      	mov	r0, sp
   1a166:	f8ad 2002 	strh.w	r2, [sp, #2]
   1a16a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a16e:	f010 ffd6 	bl	2b11e <bt_uuid_cmp>
   1a172:	4606      	mov	r6, r0
   1a174:	b160      	cbz	r0, 1a190 <att_find_type_req+0x68>
	if (!req) {
   1a176:	230a      	movs	r3, #10
   1a178:	e001      	b.n	1a17e <att_find_type_req+0x56>
			*err = 0U;
   1a17a:	4645      	mov	r5, r8
	if (!req) {
   1a17c:	2301      	movs	r3, #1
   1a17e:	462a      	mov	r2, r5
   1a180:	2106      	movs	r1, #6
   1a182:	4620      	mov	r0, r4
   1a184:	f011 fede 	bl	2bf44 <send_err_rsp.part.0>
		return 0;
   1a188:	2000      	movs	r0, #0
}
   1a18a:	b006      	add	sp, #24
   1a18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a190:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a194:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1a196:	4601      	mov	r1, r0
   1a198:	2214      	movs	r2, #20
   1a19a:	a801      	add	r0, sp, #4
   1a19c:	f010 ff36 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1a1a0:	4632      	mov	r2, r6
   1a1a2:	2107      	movs	r1, #7
   1a1a4:	4650      	mov	r0, sl
   1a1a6:	f7ff fdb9 	bl	19d1c <bt_att_create_pdu>
   1a1aa:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a1ac:	b1f8      	cbz	r0, 1a1ee <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a1ae:	230a      	movs	r3, #10
   1a1b0:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a1b4:	4a0f      	ldr	r2, [pc, #60]	; (1a1f4 <att_find_type_req+0xcc>)
	data.chan = chan;
   1a1b6:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a1b8:	ab01      	add	r3, sp, #4
   1a1ba:	4641      	mov	r1, r8
   1a1bc:	4628      	mov	r0, r5
	data.value = value;
   1a1be:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1a1c2:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a1c6:	f011 fbe1 	bl	2b98c <bt_gatt_foreach_attr>
	if (data.err) {
   1a1ca:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a1ce:	b14b      	cbz	r3, 1a1e4 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a1d0:	9b02      	ldr	r3, [sp, #8]
   1a1d2:	6998      	ldr	r0, [r3, #24]
   1a1d4:	f7ff fa90 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a1d8:	9802      	ldr	r0, [sp, #8]
   1a1da:	f004 fe41 	bl	1ee60 <net_buf_unref>
	if (!req) {
   1a1de:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a1e2:	e7cc      	b.n	1a17e <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1a1e4:	9902      	ldr	r1, [sp, #8]
   1a1e6:	4620      	mov	r0, r4
   1a1e8:	f011 fc51 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   1a1ec:	e7cc      	b.n	1a188 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1a1ee:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a1f0:	e7cb      	b.n	1a18a <att_find_type_req+0x62>
   1a1f2:	bf00      	nop
   1a1f4:	000195b5 	.word	0x000195b5

0001a1f8 <att_find_info_req>:
{
   1a1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1a1fa:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a1fc:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a1fe:	885e      	ldrh	r6, [r3, #2]
{
   1a200:	b085      	sub	sp, #20
   1a202:	4604      	mov	r4, r0
	if (!start || !end) {
   1a204:	b195      	cbz	r5, 1a22c <att_find_info_req+0x34>
   1a206:	b186      	cbz	r6, 1a22a <att_find_info_req+0x32>
	if (start > end) {
   1a208:	42b5      	cmp	r5, r6
   1a20a:	d80f      	bhi.n	1a22c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a20c:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1a20e:	2210      	movs	r2, #16
   1a210:	2100      	movs	r1, #0
   1a212:	4668      	mov	r0, sp
   1a214:	f010 fefa 	bl	2b00c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1a218:	2200      	movs	r2, #0
   1a21a:	2105      	movs	r1, #5
   1a21c:	4638      	mov	r0, r7
   1a21e:	f7ff fd7d 	bl	19d1c <bt_att_create_pdu>
   1a222:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1a224:	b958      	cbnz	r0, 1a23e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1a226:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1a228:	e007      	b.n	1a23a <att_find_info_req+0x42>
			*err = 0U;
   1a22a:	4635      	mov	r5, r6
	if (!req) {
   1a22c:	2301      	movs	r3, #1
   1a22e:	462a      	mov	r2, r5
   1a230:	2104      	movs	r1, #4
   1a232:	4620      	mov	r0, r4
   1a234:	f011 fe86 	bl	2bf44 <send_err_rsp.part.0>
		return 0;
   1a238:	2000      	movs	r0, #0
}
   1a23a:	b005      	add	sp, #20
   1a23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a23e:	466b      	mov	r3, sp
   1a240:	4a0a      	ldr	r2, [pc, #40]	; (1a26c <att_find_info_req+0x74>)
	data.chan = chan;
   1a242:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a244:	4631      	mov	r1, r6
   1a246:	4628      	mov	r0, r5
   1a248:	f011 fba0 	bl	2b98c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1a24c:	9b02      	ldr	r3, [sp, #8]
   1a24e:	b943      	cbnz	r3, 1a262 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a250:	9b01      	ldr	r3, [sp, #4]
   1a252:	6998      	ldr	r0, [r3, #24]
   1a254:	f7ff fa50 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a258:	9801      	ldr	r0, [sp, #4]
   1a25a:	f004 fe01 	bl	1ee60 <net_buf_unref>
	if (!req) {
   1a25e:	230a      	movs	r3, #10
   1a260:	e7e5      	b.n	1a22e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1a262:	9901      	ldr	r1, [sp, #4]
   1a264:	4620      	mov	r0, r4
   1a266:	f011 fc12 	bl	2ba8e <bt_att_chan_send_rsp>
	return 0;
   1a26a:	e7e5      	b.n	1a238 <att_find_info_req+0x40>
   1a26c:	0002b9a3 	.word	0x0002b9a3

0001a270 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1a270:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a272:	4c0b      	ldr	r4, [pc, #44]	; (1a2a0 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1a274:	4d0b      	ldr	r5, [pc, #44]	; (1a2a4 <bt_att_init+0x34>)
   1a276:	4620      	mov	r0, r4
   1a278:	f013 fd79 	bl	2dd6e <z_impl_k_queue_init>
   1a27c:	4629      	mov	r1, r5
   1a27e:	4620      	mov	r0, r4
   1a280:	f013 fd82 	bl	2dd88 <k_queue_append>
   1a284:	f105 0114 	add.w	r1, r5, #20
   1a288:	4620      	mov	r0, r4
   1a28a:	f013 fd7d 	bl	2dd88 <k_queue_append>
   1a28e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a292:	4620      	mov	r0, r4
   1a294:	f013 fd78 	bl	2dd88 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1a298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1a29c:	f000 bef8 	b.w	1b090 <bt_gatt_init>
   1a2a0:	200009bc 	.word	0x200009bc
   1a2a4:	20003224 	.word	0x20003224

0001a2a8 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1a2a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1a2aa:	2300      	movs	r3, #0
{
   1a2ac:	4605      	mov	r5, r0
   1a2ae:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1a2b0:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1a2b2:	f00b fce9 	bl	25c88 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1a2b6:	4b0b      	ldr	r3, [pc, #44]	; (1a2e4 <bt_att_req_alloc+0x3c>)
   1a2b8:	681b      	ldr	r3, [r3, #0]
   1a2ba:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1a2bc:	bf04      	itt	eq
   1a2be:	2500      	moveq	r5, #0
   1a2c0:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1a2c2:	a901      	add	r1, sp, #4
   1a2c4:	4808      	ldr	r0, [pc, #32]	; (1a2e8 <bt_att_req_alloc+0x40>)
   1a2c6:	462a      	mov	r2, r5
   1a2c8:	4623      	mov	r3, r4
   1a2ca:	f009 fceb 	bl	23ca4 <k_mem_slab_alloc>
   1a2ce:	4601      	mov	r1, r0
   1a2d0:	b930      	cbnz	r0, 1a2e0 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1a2d2:	9801      	ldr	r0, [sp, #4]
   1a2d4:	221c      	movs	r2, #28
   1a2d6:	f010 fe99 	bl	2b00c <memset>

	return req;
   1a2da:	9801      	ldr	r0, [sp, #4]
}
   1a2dc:	b003      	add	sp, #12
   1a2de:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a2e0:	2000      	movs	r0, #0
   1a2e2:	e7fb      	b.n	1a2dc <bt_att_req_alloc+0x34>
   1a2e4:	20003260 	.word	0x20003260
   1a2e8:	200008e0 	.word	0x200008e0

0001a2ec <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1a2ec:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1a2ee:	6883      	ldr	r3, [r0, #8]
{
   1a2f0:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1a2f2:	b14b      	cbz	r3, 1a308 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1a2f4:	6998      	ldr	r0, [r3, #24]
   1a2f6:	f7ff f9ff 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1a2fa:	9b01      	ldr	r3, [sp, #4]
   1a2fc:	6898      	ldr	r0, [r3, #8]
   1a2fe:	f004 fdaf 	bl	1ee60 <net_buf_unref>
		req->buf = NULL;
   1a302:	9b01      	ldr	r3, [sp, #4]
   1a304:	2200      	movs	r2, #0
   1a306:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1a308:	4803      	ldr	r0, [pc, #12]	; (1a318 <bt_att_req_free+0x2c>)
   1a30a:	a901      	add	r1, sp, #4
   1a30c:	f009 fd22 	bl	23d54 <k_mem_slab_free>
}
   1a310:	b003      	add	sp, #12
   1a312:	f85d fb04 	ldr.w	pc, [sp], #4
   1a316:	bf00      	nop
   1a318:	200008e0 	.word	0x200008e0

0001a31c <att_handle_rsp>:
{
   1a31c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a320:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1a322:	30c0      	adds	r0, #192	; 0xc0
{
   1a324:	460e      	mov	r6, r1
   1a326:	4617      	mov	r7, r2
   1a328:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1a32a:	f00a fd55 	bl	24dd8 <k_work_cancel_delayable>
	if (!chan->req) {
   1a32e:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1a332:	b950      	cbnz	r0, 1a34a <att_handle_rsp+0x2e>
		LOG_WRN("No pending ATT request");
   1a334:	4816      	ldr	r0, [pc, #88]	; (1a390 <att_handle_rsp+0x74>)
   1a336:	2157      	movs	r1, #87	; 0x57
   1a338:	f00f fe95 	bl	2a066 <z_log_minimal_printk>
	att_req_send_process(chan->att);
   1a33c:	6820      	ldr	r0, [r4, #0]
   1a33e:	f011 fd02 	bl	2bd46 <att_req_send_process>
}
   1a342:	2000      	movs	r0, #0
   1a344:	b002      	add	sp, #8
   1a346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1a34a:	4b12      	ldr	r3, [pc, #72]	; (1a394 <att_handle_rsp+0x78>)
   1a34c:	4298      	cmp	r0, r3
   1a34e:	f04f 0800 	mov.w	r8, #0
   1a352:	d102      	bne.n	1a35a <att_handle_rsp+0x3e>
		chan->req = NULL;
   1a354:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
   1a358:	e7f0      	b.n	1a33c <att_handle_rsp+0x20>
	func = chan->req->func;
   1a35a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1a35e:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1a362:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   1a366:	f8d0 a018 	ldr.w	sl, [r0, #24]
	bt_att_req_free(chan->req);
   1a36a:	f7ff ffbf 	bl	1a2ec <bt_att_req_free>
	att_req_send_process(chan->att);
   1a36e:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1a370:	f8c4 809c 	str.w	r8, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   1a374:	f011 fce7 	bl	2bd46 <att_req_send_process>
	if (func) {
   1a378:	f1b9 0f00 	cmp.w	r9, #0
   1a37c:	d0e1      	beq.n	1a342 <att_handle_rsp+0x26>
		func(chan->att->conn, err, pdu, len, params);
   1a37e:	6820      	ldr	r0, [r4, #0]
   1a380:	f8cd a000 	str.w	sl, [sp]
   1a384:	6800      	ldr	r0, [r0, #0]
   1a386:	463b      	mov	r3, r7
   1a388:	4632      	mov	r2, r6
   1a38a:	4629      	mov	r1, r5
   1a38c:	47c8      	blx	r9
   1a38e:	e7d8      	b.n	1a342 <att_handle_rsp+0x26>
   1a390:	000319d9 	.word	0x000319d9
   1a394:	20003264 	.word	0x20003264

0001a398 <att_error_rsp>:
{
   1a398:	b570      	push	{r4, r5, r6, lr}
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1a39a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
	rsp = (void *)buf->data;
   1a39e:	68ca      	ldr	r2, [r1, #12]
{
   1a3a0:	4605      	mov	r5, r0
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   1a3a2:	b313      	cbz	r3, 1a3ea <att_error_rsp+0x52>
   1a3a4:	4915      	ldr	r1, [pc, #84]	; (1a3fc <att_error_rsp+0x64>)
   1a3a6:	428b      	cmp	r3, r1
   1a3a8:	d01f      	beq.n	1a3ea <att_error_rsp+0x52>
   1a3aa:	78d4      	ldrb	r4, [r2, #3]
   1a3ac:	b1ec      	cbz	r4, 1a3ea <att_error_rsp+0x52>
	switch (err) {
   1a3ae:	2c05      	cmp	r4, #5
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1a3b0:	6840      	ldr	r0, [r0, #4]
	switch (err) {
   1a3b2:	d006      	beq.n	1a3c2 <att_error_rsp+0x2a>
   1a3b4:	2c0f      	cmp	r4, #15
   1a3b6:	d119      	bne.n	1a3ec <att_error_rsp+0x54>
		if (conn->sec_level >= BT_SECURITY_L2)
   1a3b8:	7a43      	ldrb	r3, [r0, #9]
   1a3ba:	2b01      	cmp	r3, #1
   1a3bc:	d816      	bhi.n	1a3ec <att_error_rsp+0x54>
		sec = BT_SECURITY_L2;
   1a3be:	2102      	movs	r1, #2
   1a3c0:	e007      	b.n	1a3d2 <att_error_rsp+0x3a>
		if (conn->sec_level < BT_SECURITY_L2) {
   1a3c2:	7a43      	ldrb	r3, [r0, #9]
   1a3c4:	2b01      	cmp	r3, #1
   1a3c6:	d9fa      	bls.n	1a3be <att_error_rsp+0x26>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   1a3c8:	2b02      	cmp	r3, #2
   1a3ca:	d00c      	beq.n	1a3e6 <att_error_rsp+0x4e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   1a3cc:	2b03      	cmp	r3, #3
   1a3ce:	d10d      	bne.n	1a3ec <att_error_rsp+0x54>
			sec = BT_SECURITY_L4;
   1a3d0:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
   1a3d2:	f011 f8e3 	bl	2b59c <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
   1a3d6:	b948      	cbnz	r0, 1a3ec <att_error_rsp+0x54>
		chan->req->retrying = true;
   1a3d8:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
   1a3dc:	7c13      	ldrb	r3, [r2, #16]
   1a3de:	f043 0301 	orr.w	r3, r3, #1
   1a3e2:	7413      	strb	r3, [r2, #16]
}
   1a3e4:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
   1a3e6:	2103      	movs	r1, #3
   1a3e8:	e7f3      	b.n	1a3d2 <att_error_rsp+0x3a>
		err = BT_ATT_ERR_UNLIKELY;
   1a3ea:	240e      	movs	r4, #14
	return att_handle_rsp(chan, NULL, 0, err);
   1a3ec:	2200      	movs	r2, #0
   1a3ee:	4623      	mov	r3, r4
   1a3f0:	4628      	mov	r0, r5
   1a3f2:	4611      	mov	r1, r2
}
   1a3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
   1a3f8:	f7ff bf90 	b.w	1a31c <att_handle_rsp>
   1a3fc:	20003264 	.word	0x20003264

0001a400 <bt_att_disconnected>:
{
   1a400:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1a404:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1a408:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1a40a:	2e00      	cmp	r6, #0
   1a40c:	d056      	beq.n	1a4bc <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1a40e:	f100 01ec 	add.w	r1, r0, #236	; 0xec
   1a412:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1a416:	f011 fbec 	bl	2bbf2 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1a41a:	1f27      	subs	r7, r4, #4
   1a41c:	f104 089c 	add.w	r8, r4, #156	; 0x9c
   1a420:	2200      	movs	r2, #0
   1a422:	2300      	movs	r3, #0
   1a424:	4640      	mov	r0, r8
   1a426:	f012 ffda 	bl	2d3de <net_buf_get>
   1a42a:	4605      	mov	r5, r0
   1a42c:	bb28      	cbnz	r0, 1a47a <bt_att_disconnected+0x7a>
	if (chan->req) {
   1a42e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a432:	b12b      	cbz	r3, 1a440 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1a434:	4602      	mov	r2, r0
   1a436:	4601      	mov	r1, r0
   1a438:	230e      	movs	r3, #14
   1a43a:	4638      	mov	r0, r7
   1a43c:	f7ff ff6e 	bl	1a31c <att_handle_rsp>
	chan->att = NULL;
   1a440:	2300      	movs	r3, #0
   1a442:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1a446:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1a448:	2b00      	cmp	r3, #0
   1a44a:	d137      	bne.n	1a4bc <bt_att_disconnected+0xbc>
	att_reset(att);
   1a44c:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a44e:	9803      	ldr	r0, [sp, #12]
   1a450:	2200      	movs	r2, #0
   1a452:	2300      	movs	r3, #0
   1a454:	300c      	adds	r0, #12
   1a456:	f012 ffc2 	bl	2d3de <net_buf_get>
   1a45a:	4605      	mov	r5, r0
   1a45c:	b9a0      	cbnz	r0, 1a488 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1a45e:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1a460:	6845      	ldr	r5, [r0, #4]
   1a462:	b9c5      	cbnz	r5, 1a496 <bt_att_disconnected+0x96>
	att->conn = NULL;
   1a464:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1a466:	a903      	add	r1, sp, #12
   1a468:	4816      	ldr	r0, [pc, #88]	; (1a4c4 <bt_att_disconnected+0xc4>)
   1a46a:	f009 fc73 	bl	23d54 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1a46e:	6820      	ldr	r0, [r4, #0]
}
   1a470:	b004      	add	sp, #16
   1a472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1a476:	f002 bb55 	b.w	1cb24 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a47a:	69a8      	ldr	r0, [r5, #24]
   1a47c:	f7ff f93c 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(buf);
   1a480:	4628      	mov	r0, r5
   1a482:	f004 fced 	bl	1ee60 <net_buf_unref>
   1a486:	e7cb      	b.n	1a420 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a488:	69a8      	ldr	r0, [r5, #24]
   1a48a:	f7ff f935 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(buf);
   1a48e:	4628      	mov	r0, r5
   1a490:	f004 fce6 	bl	1ee60 <net_buf_unref>
   1a494:	e7db      	b.n	1a44e <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a496:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1a498:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1a49a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a49c:	4295      	cmp	r5, r2
	list->tail = node;
   1a49e:	bf08      	it	eq
   1a4a0:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1a4a2:	686e      	ldr	r6, [r5, #4]
   1a4a4:	b136      	cbz	r6, 1a4b4 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a4a6:	69ab      	ldr	r3, [r5, #24]
   1a4a8:	9300      	str	r3, [sp, #0]
   1a4aa:	2300      	movs	r3, #0
   1a4ac:	6800      	ldr	r0, [r0, #0]
   1a4ae:	461a      	mov	r2, r3
   1a4b0:	210e      	movs	r1, #14
   1a4b2:	47b0      	blx	r6
		bt_att_req_free(req);
   1a4b4:	4628      	mov	r0, r5
   1a4b6:	f7ff ff19 	bl	1a2ec <bt_att_req_free>
   1a4ba:	e7d0      	b.n	1a45e <bt_att_disconnected+0x5e>
}
   1a4bc:	b004      	add	sp, #16
   1a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4c2:	bf00      	nop
   1a4c4:	200008a0 	.word	0x200008a0

0001a4c8 <att_timeout>:
{
   1a4c8:	b510      	push	{r4, lr}
	LOG_ERR("ATT Timeout");
   1a4ca:	2145      	movs	r1, #69	; 0x45
{
   1a4cc:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   1a4ce:	4804      	ldr	r0, [pc, #16]	; (1a4e0 <att_timeout+0x18>)
   1a4d0:	f00f fdc9 	bl	2a066 <z_log_minimal_printk>
	bt_att_disconnected(&chan->chan.chan);
   1a4d4:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
}
   1a4d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a4dc:	f7ff bf90 	b.w	1a400 <bt_att_disconnected>
   1a4e0:	000319f5 	.word	0x000319f5

0001a4e4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4e6:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1a4e8:	b950      	cbnz	r0, 1a500 <bt_att_send+0x1c>
   1a4ea:	4928      	ldr	r1, [pc, #160]	; (1a58c <bt_att_send+0xa8>)
   1a4ec:	4828      	ldr	r0, [pc, #160]	; (1a590 <bt_att_send+0xac>)
   1a4ee:	f640 62a4 	movw	r2, #3748	; 0xea4
   1a4f2:	f00f fdaa 	bl	2a04a <assert_print>
   1a4f6:	f640 61a4 	movw	r1, #3748	; 0xea4
	__ASSERT_NO_MSG(buf);
   1a4fa:	4824      	ldr	r0, [pc, #144]	; (1a58c <bt_att_send+0xa8>)
   1a4fc:	f00f fd9e 	bl	2a03c <assert_post_action>
   1a500:	b941      	cbnz	r1, 1a514 <bt_att_send+0x30>
   1a502:	4922      	ldr	r1, [pc, #136]	; (1a58c <bt_att_send+0xa8>)
   1a504:	4822      	ldr	r0, [pc, #136]	; (1a590 <bt_att_send+0xac>)
   1a506:	f640 62a5 	movw	r2, #3749	; 0xea5
   1a50a:	f00f fd9e 	bl	2a04a <assert_print>
   1a50e:	f640 61a5 	movw	r1, #3749	; 0xea5
   1a512:	e7f2      	b.n	1a4fa <bt_att_send+0x16>

	att = att_get(conn);
   1a514:	f7ff f814 	bl	19540 <att_get>
	if (!att) {
   1a518:	4605      	mov	r5, r0
   1a51a:	b940      	cbnz	r0, 1a52e <bt_att_send+0x4a>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a51c:	69a0      	ldr	r0, [r4, #24]
   1a51e:	f7ff f8eb 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(buf);
   1a522:	4620      	mov	r0, r4
   1a524:	f004 fc9c 	bl	1ee60 <net_buf_unref>
		return -ENOTCONN;
   1a528:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1a52e:	f100 060c 	add.w	r6, r0, #12
   1a532:	4621      	mov	r1, r4
   1a534:	4630      	mov	r0, r6
   1a536:	f004 fc73 	bl	1ee20 <net_buf_put>
	return list->head;
   1a53a:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a53c:	b14d      	cbz	r5, 1a552 <bt_att_send+0x6e>
	return node->next;
   1a53e:	f855 49f0 	ldr.w	r4, [r5], #-240
   1a542:	b104      	cbz	r4, 1a546 <bt_att_send+0x62>
   1a544:	3cf0      	subs	r4, #240	; 0xf0
		err = process_queue(chan, &att->tx_queue);
   1a546:	4631      	mov	r1, r6
   1a548:	4628      	mov	r0, r5
   1a54a:	f011 faae 	bl	2baaa <process_queue>
		if (!err) {
   1a54e:	4603      	mov	r3, r0
   1a550:	b980      	cbnz	r0, 1a574 <bt_att_send+0x90>
	return 0;
   1a552:	2000      	movs	r0, #0
   1a554:	e7ea      	b.n	1a52c <bt_att_send+0x48>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1a556:	2103      	movs	r1, #3
   1a558:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1a55c:	f011 f990 	bl	2b880 <atomic_test_bit>
   1a560:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1a562:	f105 0098 	add.w	r0, r5, #152	; 0x98
   1a566:	f011 f98b 	bl	2b880 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1a56a:	4287      	cmp	r7, r0
   1a56c:	f06f 0301 	mvn.w	r3, #1
   1a570:	d107      	bne.n	1a582 <bt_att_send+0x9e>
   1a572:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a574:	2c00      	cmp	r4, #0
   1a576:	d0ec      	beq.n	1a552 <bt_att_send+0x6e>
   1a578:	f8d4 20f0 	ldr.w	r2, [r4, #240]	; 0xf0
   1a57c:	b922      	cbnz	r2, 1a588 <bt_att_send+0xa4>
		if (err == -ENOENT && prev &&
   1a57e:	3302      	adds	r3, #2
   1a580:	d0e9      	beq.n	1a556 <bt_att_send+0x72>
{
   1a582:	4625      	mov	r5, r4
   1a584:	4614      	mov	r4, r2
   1a586:	e7de      	b.n	1a546 <bt_att_send+0x62>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a588:	3af0      	subs	r2, #240	; 0xf0
   1a58a:	e7f8      	b.n	1a57e <bt_att_send+0x9a>
   1a58c:	000317e0 	.word	0x000317e0
   1a590:	0002f2b5 	.word	0x0002f2b5

0001a594 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a594:	b510      	push	{r4, lr}
   1a596:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1a598:	b950      	cbnz	r0, 1a5b0 <bt_att_req_send+0x1c>
   1a59a:	4914      	ldr	r1, [pc, #80]	; (1a5ec <bt_att_req_send+0x58>)
   1a59c:	4814      	ldr	r0, [pc, #80]	; (1a5f0 <bt_att_req_send+0x5c>)
   1a59e:	f640 62ba 	movw	r2, #3770	; 0xeba
   1a5a2:	f00f fd52 	bl	2a04a <assert_print>
   1a5a6:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(req);
   1a5aa:	4810      	ldr	r0, [pc, #64]	; (1a5ec <bt_att_req_send+0x58>)
   1a5ac:	f00f fd46 	bl	2a03c <assert_post_action>
   1a5b0:	b941      	cbnz	r1, 1a5c4 <bt_att_req_send+0x30>
   1a5b2:	490e      	ldr	r1, [pc, #56]	; (1a5ec <bt_att_req_send+0x58>)
   1a5b4:	480e      	ldr	r0, [pc, #56]	; (1a5f0 <bt_att_req_send+0x5c>)
   1a5b6:	f640 62bb 	movw	r2, #3771	; 0xebb
   1a5ba:	f00f fd46 	bl	2a04a <assert_print>
   1a5be:	f640 61bb 	movw	r1, #3771	; 0xebb
   1a5c2:	e7f2      	b.n	1a5aa <bt_att_req_send+0x16>

	att = att_get(conn);
   1a5c4:	f7fe ffbc 	bl	19540 <att_get>
	if (!att) {
   1a5c8:	b160      	cbz	r0, 1a5e4 <bt_att_req_send+0x50>
	parent->next = child;
   1a5ca:	2300      	movs	r3, #0
   1a5cc:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a5ce:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a5d0:	b92b      	cbnz	r3, 1a5de <bt_att_req_send+0x4a>
	list->head = node;
   1a5d2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1a5d6:	f011 fbb6 	bl	2bd46 <att_req_send_process>

	return 0;
   1a5da:	2000      	movs	r0, #0
}
   1a5dc:	bd10      	pop	{r4, pc}
	parent->next = child;
   1a5de:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a5e0:	6084      	str	r4, [r0, #8]
}
   1a5e2:	e7f8      	b.n	1a5d6 <bt_att_req_send+0x42>
		return -ENOTCONN;
   1a5e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a5e8:	e7f8      	b.n	1a5dc <bt_att_req_send+0x48>
   1a5ea:	bf00      	nop
   1a5ec:	000317e0 	.word	0x000317e0
   1a5f0:	0002f2b5 	.word	0x0002f2b5

0001a5f4 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1a5f4:	b510      	push	{r4, lr}
   1a5f6:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   1a5f8:	b338      	cbz	r0, 1a64a <bt_att_req_cancel+0x56>
   1a5fa:	b331      	cbz	r1, 1a64a <bt_att_req_cancel+0x56>
		return;
	}

	att = att_get(conn);
   1a5fc:	f7fe ffa0 	bl	19540 <att_get>
	if (!att) {
   1a600:	b318      	cbz	r0, 1a64a <bt_att_req_cancel+0x56>
	return list->head;
   1a602:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a604:	b1db      	cbz	r3, 1a63e <bt_att_req_cancel+0x4a>
	return node->next;
   1a606:	f853 29f0 	ldr.w	r2, [r3], #-240
   1a60a:	b102      	cbz	r2, 1a60e <bt_att_req_cancel+0x1a>
   1a60c:	3af0      	subs	r2, #240	; 0xf0
	if (chan->req != req) {
   1a60e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   1a612:	428c      	cmp	r4, r1
   1a614:	d00b      	beq.n	1a62e <bt_att_req_cancel+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a616:	b192      	cbz	r2, 1a63e <bt_att_req_cancel+0x4a>
   1a618:	4613      	mov	r3, r2
   1a61a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
   1a61e:	2a00      	cmp	r2, #0
   1a620:	d0f5      	beq.n	1a60e <bt_att_req_cancel+0x1a>
	if (chan->req != req) {
   1a622:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
   1a626:	428c      	cmp	r4, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a628:	f1a2 02f0 	sub.w	r2, r2, #240	; 0xf0
	if (chan->req != req) {
   1a62c:	d1f4      	bne.n	1a618 <bt_att_req_cancel+0x24>
	chan->req = &cancel;
   1a62e:	4a07      	ldr	r2, [pc, #28]	; (1a64c <bt_att_req_cancel+0x58>)
   1a630:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	bt_att_req_free(req);
   1a634:	4620      	mov	r0, r4

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);

	bt_att_req_free(req);
}
   1a636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1a63a:	f7ff be57 	b.w	1a2ec <bt_att_req_free>
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1a63e:	3004      	adds	r0, #4
   1a640:	4621      	mov	r1, r4
   1a642:	f011 fad6 	bl	2bbf2 <sys_slist_find_and_remove.isra.0>
	bt_att_req_free(req);
   1a646:	4620      	mov	r0, r4
   1a648:	e7f5      	b.n	1a636 <bt_att_req_cancel+0x42>
}
   1a64a:	bd10      	pop	{r4, pc}
   1a64c:	20003264 	.word	0x20003264

0001a650 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   1a650:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a652:	4908      	ldr	r1, [pc, #32]	; (1a674 <db_hash_set+0x24>)
{
   1a654:	4614      	mov	r4, r2
	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   1a656:	4618      	mov	r0, r3
   1a658:	2210      	movs	r2, #16
   1a65a:	47a0      	blx	r4
	if (len < 0) {
   1a65c:	1e04      	subs	r4, r0, #0
   1a65e:	da06      	bge.n	1a66e <db_hash_set+0x1e>
		LOG_ERR("Failed to decode value (err %zd)", len);
   1a660:	4805      	ldr	r0, [pc, #20]	; (1a678 <db_hash_set+0x28>)
   1a662:	4622      	mov	r2, r4
   1a664:	2145      	movs	r1, #69	; 0x45
   1a666:	f00f fcfe 	bl	2a066 <z_log_minimal_printk>
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
}
   1a66a:	4620      	mov	r0, r4
   1a66c:	bd10      	pop	{r4, pc}
	return 0;
   1a66e:	2400      	movs	r4, #0
   1a670:	e7fb      	b.n	1a66a <db_hash_set+0x1a>
   1a672:	bf00      	nop
   1a674:	20001d80 	.word	0x20001d80
   1a678:	00031a0d 	.word	0x00031a0d

0001a67c <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a67c:	2210      	movs	r2, #16
{
   1a67e:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   1a680:	4906      	ldr	r1, [pc, #24]	; (1a69c <db_hash_store+0x20>)
   1a682:	4807      	ldr	r0, [pc, #28]	; (1a6a0 <db_hash_store+0x24>)
   1a684:	f7f9 f8fe 	bl	13884 <settings_save_one>
	if (err) {
   1a688:	4602      	mov	r2, r0
   1a68a:	b128      	cbz	r0, 1a698 <db_hash_store+0x1c>
}
   1a68c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   1a690:	4804      	ldr	r0, [pc, #16]	; (1a6a4 <db_hash_store+0x28>)
   1a692:	2145      	movs	r1, #69	; 0x45
   1a694:	f00f bce7 	b.w	2a066 <z_log_minimal_printk>
}
   1a698:	bd08      	pop	{r3, pc}
   1a69a:	bf00      	nop
   1a69c:	20001d70 	.word	0x20001d70
   1a6a0:	00031a33 	.word	0x00031a33
   1a6a4:	00031a3b 	.word	0x00031a3b

0001a6a8 <find_cf_cfg>:
{
   1a6a8:	b570      	push	{r4, r5, r6, lr}
   1a6aa:	4d14      	ldr	r5, [pc, #80]	; (1a6fc <find_cf_cfg+0x54>)
		if (!conn) {
   1a6ac:	4606      	mov	r6, r0
   1a6ae:	b140      	cbz	r0, 1a6c2 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a6b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1a6b4:	462a      	mov	r2, r5
   1a6b6:	1e6c      	subs	r4, r5, #1
   1a6b8:	f010 ffa2 	bl	2b600 <bt_conn_is_peer_addr_le>
   1a6bc:	b198      	cbz	r0, 1a6e6 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a6be:	4620      	mov	r0, r4
   1a6c0:	e00c      	b.n	1a6dc <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a6c2:	490f      	ldr	r1, [pc, #60]	; (1a700 <find_cf_cfg+0x58>)
   1a6c4:	4628      	mov	r0, r5
   1a6c6:	f011 fe2b 	bl	2c320 <bt_addr_le_eq>
   1a6ca:	b940      	cbnz	r0, 1a6de <find_cf_cfg+0x36>
   1a6cc:	490c      	ldr	r1, [pc, #48]	; (1a700 <find_cf_cfg+0x58>)
   1a6ce:	f105 0010 	add.w	r0, r5, #16
   1a6d2:	f011 fe25 	bl	2c320 <bt_addr_le_eq>
   1a6d6:	b120      	cbz	r0, 1a6e2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a6d8:	f105 000f 	add.w	r0, r5, #15
}
   1a6dc:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a6de:	1e68      	subs	r0, r5, #1
   1a6e0:	e7fc      	b.n	1a6dc <find_cf_cfg+0x34>
	return NULL;
   1a6e2:	2000      	movs	r0, #0
   1a6e4:	e7fa      	b.n	1a6dc <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a6e6:	7c21      	ldrb	r1, [r4, #16]
   1a6e8:	f104 0211 	add.w	r2, r4, #17
   1a6ec:	4630      	mov	r0, r6
   1a6ee:	f010 ff87 	bl	2b600 <bt_conn_is_peer_addr_le>
   1a6f2:	2800      	cmp	r0, #0
   1a6f4:	d0f5      	beq.n	1a6e2 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a6f6:	f104 0010 	add.w	r0, r4, #16
   1a6fa:	e7ef      	b.n	1a6dc <find_cf_cfg+0x34>
   1a6fc:	20003299 	.word	0x20003299
   1a700:	0003055c 	.word	0x0003055c

0001a704 <find_sc_cfg>:
{
   1a704:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a706:	4c0e      	ldr	r4, [pc, #56]	; (1a740 <find_sc_cfg+0x3c>)
   1a708:	7823      	ldrb	r3, [r4, #0]
   1a70a:	4283      	cmp	r3, r0
{
   1a70c:	4605      	mov	r5, r0
   1a70e:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a710:	d00c      	beq.n	1a72c <find_sc_cfg+0x28>
   1a712:	7b23      	ldrb	r3, [r4, #12]
   1a714:	42ab      	cmp	r3, r5
   1a716:	d110      	bne.n	1a73a <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a718:	480a      	ldr	r0, [pc, #40]	; (1a744 <find_sc_cfg+0x40>)
   1a71a:	4631      	mov	r1, r6
   1a71c:	f011 fe00 	bl	2c320 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a720:	b158      	cbz	r0, 1a73a <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a722:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1a724:	220c      	movs	r2, #12
   1a726:	fb02 4003 	mla	r0, r2, r3, r4
   1a72a:	e007      	b.n	1a73c <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a72c:	1c60      	adds	r0, r4, #1
   1a72e:	f011 fdf7 	bl	2c320 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a732:	2800      	cmp	r0, #0
   1a734:	d0ed      	beq.n	1a712 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a736:	2300      	movs	r3, #0
   1a738:	e7f4      	b.n	1a724 <find_sc_cfg+0x20>
	return NULL;
   1a73a:	2000      	movs	r0, #0
}
   1a73c:	bd70      	pop	{r4, r5, r6, pc}
   1a73e:	bf00      	nop
   1a740:	2000413e 	.word	0x2000413e
   1a744:	2000414b 	.word	0x2000414b

0001a748 <find_ccc_cfg>:
{
   1a748:	b510      	push	{r4, lr}
						    &cfg->peer)) {
   1a74a:	1c4a      	adds	r2, r1, #1
{
   1a74c:	460c      	mov	r4, r1
		if (conn) {
   1a74e:	b138      	cbz	r0, 1a760 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1a750:	7809      	ldrb	r1, [r1, #0]
   1a752:	f010 ff55 	bl	2b600 <bt_conn_is_peer_addr_le>
   1a756:	b108      	cbz	r0, 1a75c <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a758:	4620      	mov	r0, r4
}
   1a75a:	bd10      	pop	{r4, pc}
	return NULL;
   1a75c:	2000      	movs	r0, #0
   1a75e:	e7fc      	b.n	1a75a <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a760:	4902      	ldr	r1, [pc, #8]	; (1a76c <find_ccc_cfg+0x24>)
   1a762:	4610      	mov	r0, r2
   1a764:	f011 fddc 	bl	2c320 <bt_addr_le_eq>
   1a768:	e7f5      	b.n	1a756 <find_ccc_cfg+0xe>
   1a76a:	bf00      	nop
   1a76c:	0003055c 	.word	0x0003055c

0001a770 <gatt_sub_find>:
{
   1a770:	b570      	push	{r4, r5, r6, lr}
   1a772:	4d14      	ldr	r5, [pc, #80]	; (1a7c4 <gatt_sub_find+0x54>)
		if (!conn) {
   1a774:	4606      	mov	r6, r0
   1a776:	b140      	cbz	r0, 1a78a <gatt_sub_find+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1a778:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1a77c:	462a      	mov	r2, r5
   1a77e:	1e6c      	subs	r4, r5, #1
   1a780:	f010 ff3e 	bl	2b600 <bt_conn_is_peer_addr_le>
   1a784:	b198      	cbz	r0, 1a7ae <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   1a786:	4620      	mov	r0, r4
   1a788:	e00c      	b.n	1a7a4 <gatt_sub_find+0x34>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   1a78a:	490f      	ldr	r1, [pc, #60]	; (1a7c8 <gatt_sub_find+0x58>)
   1a78c:	4628      	mov	r0, r5
   1a78e:	f011 fdc7 	bl	2c320 <bt_addr_le_eq>
   1a792:	b940      	cbnz	r0, 1a7a6 <gatt_sub_find+0x36>
   1a794:	490c      	ldr	r1, [pc, #48]	; (1a7c8 <gatt_sub_find+0x58>)
   1a796:	f105 0010 	add.w	r0, r5, #16
   1a79a:	f011 fdc1 	bl	2c320 <bt_addr_le_eq>
   1a79e:	b120      	cbz	r0, 1a7aa <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1a7a0:	f105 000f 	add.w	r0, r5, #15
}
   1a7a4:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   1a7a6:	1e68      	subs	r0, r5, #1
   1a7a8:	e7fc      	b.n	1a7a4 <gatt_sub_find+0x34>
	return NULL;
   1a7aa:	2000      	movs	r0, #0
   1a7ac:	e7fa      	b.n	1a7a4 <gatt_sub_find+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1a7ae:	7c21      	ldrb	r1, [r4, #16]
   1a7b0:	f104 0211 	add.w	r2, r4, #17
   1a7b4:	4630      	mov	r0, r6
   1a7b6:	f010 ff23 	bl	2b600 <bt_conn_is_peer_addr_le>
   1a7ba:	2800      	cmp	r0, #0
   1a7bc:	d0f5      	beq.n	1a7aa <gatt_sub_find+0x3a>
		struct gatt_sub *sub = &subscriptions[i];
   1a7be:	f104 0010 	add.w	r0, r4, #16
   1a7c2:	e7ef      	b.n	1a7a4 <gatt_sub_find+0x34>
   1a7c4:	200032c9 	.word	0x200032c9
   1a7c8:	0003055c 	.word	0x0003055c

0001a7cc <find_cf_cfg_by_addr>:
{
   1a7cc:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
   1a7ce:	4c0e      	ldr	r4, [pc, #56]	; (1a808 <find_cf_cfg_by_addr+0x3c>)
   1a7d0:	7823      	ldrb	r3, [r4, #0]
   1a7d2:	4283      	cmp	r3, r0
{
   1a7d4:	4606      	mov	r6, r0
   1a7d6:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
   1a7d8:	d00b      	beq.n	1a7f2 <find_cf_cfg_by_addr+0x26>
   1a7da:	7c23      	ldrb	r3, [r4, #16]
   1a7dc:	42b3      	cmp	r3, r6
   1a7de:	d110      	bne.n	1a802 <find_cf_cfg_by_addr+0x36>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1a7e0:	490a      	ldr	r1, [pc, #40]	; (1a80c <find_cf_cfg_by_addr+0x40>)
   1a7e2:	4628      	mov	r0, r5
   1a7e4:	f011 fd9c 	bl	2c320 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1a7e8:	b158      	cbz	r0, 1a802 <find_cf_cfg_by_addr+0x36>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a7ea:	2301      	movs	r3, #1
				return &cf_cfg[i];
   1a7ec:	eb04 1003 	add.w	r0, r4, r3, lsl #4
   1a7f0:	e008      	b.n	1a804 <find_cf_cfg_by_addr+0x38>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   1a7f2:	1c61      	adds	r1, r4, #1
   1a7f4:	4628      	mov	r0, r5
   1a7f6:	f011 fd93 	bl	2c320 <bt_addr_le_eq>
			if (id == cf_cfg[i].id &&
   1a7fa:	2800      	cmp	r0, #0
   1a7fc:	d0ed      	beq.n	1a7da <find_cf_cfg_by_addr+0xe>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1a7fe:	2300      	movs	r3, #0
   1a800:	e7f4      	b.n	1a7ec <find_cf_cfg_by_addr+0x20>
	return NULL;
   1a802:	2000      	movs	r0, #0
}
   1a804:	bd70      	pop	{r4, r5, r6, pc}
   1a806:	bf00      	nop
   1a808:	20003298 	.word	0x20003298
   1a80c:	200032a9 	.word	0x200032a9

0001a810 <cf_write>:
{
   1a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a814:	461f      	mov	r7, r3
   1a816:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1a81a:	2b01      	cmp	r3, #1
{
   1a81c:	4606      	mov	r6, r0
   1a81e:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1a820:	d835      	bhi.n	1a88e <cf_write+0x7e>
	if (offset + len > sizeof(cfg->data)) {
   1a822:	443b      	add	r3, r7
   1a824:	2b01      	cmp	r3, #1
   1a826:	463d      	mov	r5, r7
   1a828:	dc34      	bgt.n	1a894 <cf_write+0x84>
	cfg = find_cf_cfg(conn);
   1a82a:	f7ff ff3d 	bl	1a6a8 <find_cf_cfg>
	if (!cfg) {
   1a82e:	4604      	mov	r4, r0
   1a830:	b960      	cbnz	r0, 1a84c <cf_write+0x3c>
		cfg = find_cf_cfg(NULL);
   1a832:	f7ff ff39 	bl	1a6a8 <find_cf_cfg>
	if (!cfg) {
   1a836:	4604      	mov	r4, r0
   1a838:	b940      	cbnz	r0, 1a84c <cf_write+0x3c>
		LOG_WRN("No space to store Client Supported Features");
   1a83a:	4819      	ldr	r0, [pc, #100]	; (1a8a0 <cf_write+0x90>)
   1a83c:	2157      	movs	r1, #87	; 0x57
   1a83e:	f00f fc12 	bl	2a066 <z_log_minimal_printk>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a842:	f06f 0510 	mvn.w	r5, #16
}
   1a846:	4628      	mov	r0, r5
   1a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a84c:	b197      	cbz	r7, 1a874 <cf_write+0x64>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a84e:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1a850:	f898 2000 	ldrb.w	r2, [r8]
   1a854:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a856:	fa21 f003 	lsr.w	r0, r1, r3
   1a85a:	07c7      	lsls	r7, r0, #31
   1a85c:	d503      	bpl.n	1a866 <cf_write+0x56>
		    !(value[i / 8] & BIT(i % 8))) {
   1a85e:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1a862:	07c0      	lsls	r0, r0, #31
   1a864:	d519      	bpl.n	1a89a <cf_write+0x8a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1a866:	3301      	adds	r3, #1
   1a868:	2b03      	cmp	r3, #3
   1a86a:	d1f4      	bne.n	1a856 <cf_write+0x46>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1a86c:	f002 0207 	and.w	r2, r2, #7
   1a870:	4311      	orrs	r1, r2
   1a872:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a874:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1a878:	1c60      	adds	r0, r4, #1
   1a87a:	f011 fd7b 	bl	2c374 <bt_addr_le_copy>
	cfg->id = conn->id;
   1a87e:	4620      	mov	r0, r4
   1a880:	7a33      	ldrb	r3, [r6, #8]
   1a882:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1a886:	2101      	movs	r1, #1
   1a888:	f011 fd65 	bl	2c356 <atomic_or>
}
   1a88c:	e7db      	b.n	1a846 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a88e:	f06f 0506 	mvn.w	r5, #6
   1a892:	e7d8      	b.n	1a846 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a894:	f06f 050c 	mvn.w	r5, #12
   1a898:	e7d5      	b.n	1a846 <cf_write+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1a89a:	f06f 0512 	mvn.w	r5, #18
   1a89e:	e7d2      	b.n	1a846 <cf_write+0x36>
   1a8a0:	00031a66 	.word	0x00031a66

0001a8a4 <ccc_load>:
{
   1a8a4:	b570      	push	{r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a8a6:	4b20      	ldr	r3, [pc, #128]	; (1a928 <ccc_load+0x84>)
{
   1a8a8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1a8aa:	6882      	ldr	r2, [r0, #8]
   1a8ac:	429a      	cmp	r2, r3
   1a8ae:	d10f      	bne.n	1a8d0 <ccc_load+0x2c>
	if (!load->entry) {
   1a8b0:	68a5      	ldr	r5, [r4, #8]
	ccc = attr->user_data;
   1a8b2:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
   1a8b4:	b975      	cbnz	r5, 1a8d4 <ccc_load+0x30>
	cfg = ccc_find_cfg(ccc, addr, id);
   1a8b6:	7922      	ldrb	r2, [r4, #4]
   1a8b8:	6821      	ldr	r1, [r4, #0]
   1a8ba:	4630      	mov	r0, r6
   1a8bc:	f011 fd38 	bl	2c330 <ccc_find_cfg>
	if (!cfg) {
   1a8c0:	4604      	mov	r4, r0
   1a8c2:	b128      	cbz	r0, 1a8d0 <ccc_load+0x2c>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a8c4:	4919      	ldr	r1, [pc, #100]	; (1a92c <ccc_load+0x88>)
   1a8c6:	3001      	adds	r0, #1
   1a8c8:	f011 fd54 	bl	2c374 <bt_addr_le_copy>
	cfg->id = 0U;
   1a8cc:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a8ce:	8125      	strh	r5, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
   1a8d0:	2001      	movs	r0, #1
}
   1a8d2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!load->count) {
   1a8d4:	68e0      	ldr	r0, [r4, #12]
   1a8d6:	2800      	cmp	r0, #0
   1a8d8:	d0fb      	beq.n	1a8d2 <ccc_load+0x2e>
	if (load->entry->handle != handle) {
   1a8da:	882b      	ldrh	r3, [r5, #0]
   1a8dc:	428b      	cmp	r3, r1
   1a8de:	d00a      	beq.n	1a8f6 <ccc_load+0x52>
		if (load->entry->handle < handle) {
   1a8e0:	d2f6      	bcs.n	1a8d0 <ccc_load+0x2c>
	load->count--;
   1a8e2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
   1a8e4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
   1a8e6:	3801      	subs	r0, #1
	load->entry++;
   1a8e8:	3304      	adds	r3, #4
	load->count--;
   1a8ea:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a8ec:	3800      	subs	r0, #0
	load->entry++;
   1a8ee:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a8f0:	bf18      	it	ne
   1a8f2:	2001      	movne	r0, #1
   1a8f4:	e7ed      	b.n	1a8d2 <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   1a8f6:	7922      	ldrb	r2, [r4, #4]
   1a8f8:	6821      	ldr	r1, [r4, #0]
   1a8fa:	4630      	mov	r0, r6
   1a8fc:	f011 fd18 	bl	2c330 <ccc_find_cfg>
	if (!cfg) {
   1a900:	4605      	mov	r5, r0
   1a902:	b968      	cbnz	r0, 1a920 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   1a904:	4602      	mov	r2, r0
   1a906:	4909      	ldr	r1, [pc, #36]	; (1a92c <ccc_load+0x88>)
   1a908:	4630      	mov	r0, r6
   1a90a:	f011 fd11 	bl	2c330 <ccc_find_cfg>
		if (!cfg) {
   1a90e:	4605      	mov	r5, r0
   1a910:	2800      	cmp	r0, #0
   1a912:	d0e6      	beq.n	1a8e2 <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
   1a914:	6821      	ldr	r1, [r4, #0]
   1a916:	3001      	adds	r0, #1
   1a918:	f011 fd2c 	bl	2c374 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
   1a91c:	7923      	ldrb	r3, [r4, #4]
   1a91e:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
   1a920:	68a3      	ldr	r3, [r4, #8]
   1a922:	885b      	ldrh	r3, [r3, #2]
   1a924:	812b      	strh	r3, [r5, #8]
   1a926:	e7dc      	b.n	1a8e2 <ccc_load+0x3e>
   1a928:	0001af15 	.word	0x0001af15
   1a92c:	0003055c 	.word	0x0003055c

0001a930 <sc_store>:
{
   1a930:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
   1a932:	4605      	mov	r5, r0
{
   1a934:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
   1a936:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   1a93a:	4604      	mov	r4, r0
	if (cfg->id) {
   1a93c:	b1ca      	cbz	r2, 1a972 <sc_store+0x42>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1a93e:	ae02      	add	r6, sp, #8
   1a940:	2104      	movs	r1, #4
   1a942:	4630      	mov	r0, r6
   1a944:	f00f f8eb 	bl	29b1e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a948:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a94a:	4a0b      	ldr	r2, [pc, #44]	; (1a978 <sc_store+0x48>)
   1a94c:	462b      	mov	r3, r5
   1a94e:	2124      	movs	r1, #36	; 0x24
   1a950:	a803      	add	r0, sp, #12
   1a952:	f7fa ffc5 	bl	158e0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   1a956:	2204      	movs	r2, #4
   1a958:	f104 0108 	add.w	r1, r4, #8
   1a95c:	a803      	add	r0, sp, #12
   1a95e:	f7f8 ff91 	bl	13884 <settings_save_one>
	if (err) {
   1a962:	4602      	mov	r2, r0
   1a964:	b118      	cbz	r0, 1a96e <sc_store+0x3e>
		LOG_ERR("failed to store SC (err %d)", err);
   1a966:	4805      	ldr	r0, [pc, #20]	; (1a97c <sc_store+0x4c>)
   1a968:	2145      	movs	r1, #69	; 0x45
   1a96a:	f00f fb7c 	bl	2a066 <z_log_minimal_printk>
}
   1a96e:	b00c      	add	sp, #48	; 0x30
   1a970:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   1a972:	9200      	str	r2, [sp, #0]
   1a974:	e7e9      	b.n	1a94a <sc_store+0x1a>
   1a976:	bf00      	nop
   1a978:	00031f29 	.word	0x00031f29
   1a97c:	00031a97 	.word	0x00031a97

0001a980 <sc_save>:
{
   1a980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a984:	4680      	mov	r8, r0
   1a986:	460f      	mov	r7, r1
   1a988:	4616      	mov	r6, r2
   1a98a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a98c:	f7ff feba 	bl	1a704 <find_sc_cfg>
	if (!cfg) {
   1a990:	4604      	mov	r4, r0
   1a992:	b978      	cbnz	r0, 1a9b4 <sc_save+0x34>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a994:	4915      	ldr	r1, [pc, #84]	; (1a9ec <sc_save+0x6c>)
   1a996:	f7ff feb5 	bl	1a704 <find_sc_cfg>
		if (!cfg) {
   1a99a:	4604      	mov	r4, r0
   1a99c:	b928      	cbnz	r0, 1a9aa <sc_save+0x2a>
}
   1a99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("unable to save SC: no cfg left");
   1a9a2:	4813      	ldr	r0, [pc, #76]	; (1a9f0 <sc_save+0x70>)
   1a9a4:	2145      	movs	r1, #69	; 0x45
   1a9a6:	f00f bb5e 	b.w	2a066 <z_log_minimal_printk>
		cfg->id = id;
   1a9aa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a9ae:	4639      	mov	r1, r7
   1a9b0:	f011 fce0 	bl	2c374 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a9b4:	8922      	ldrh	r2, [r4, #8]
   1a9b6:	8963      	ldrh	r3, [r4, #10]
   1a9b8:	b96a      	cbnz	r2, 1a9d6 <sc_save+0x56>
   1a9ba:	b973      	cbnz	r3, 1a9da <sc_save+0x5a>
		cfg->data.start = start;
   1a9bc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a9be:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1a9c0:	4621      	mov	r1, r4
   1a9c2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a9c6:	f010 fce1 	bl	2b38c <bt_addr_le_is_bonded>
   1a9ca:	b140      	cbz	r0, 1a9de <sc_save+0x5e>
		sc_store(cfg);
   1a9cc:	4620      	mov	r0, r4
}
   1a9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
   1a9d2:	f7ff bfad 	b.w	1a930 <sc_store>
	if (new_start >= *start && new_end <= *end) {
   1a9d6:	4296      	cmp	r6, r2
   1a9d8:	d303      	bcc.n	1a9e2 <sc_save+0x62>
   1a9da:	42ab      	cmp	r3, r5
   1a9dc:	d3ef      	bcc.n	1a9be <sc_save+0x3e>
}
   1a9de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   1a9e2:	42ab      	cmp	r3, r5
		*start = new_start;
   1a9e4:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1a9e6:	d2eb      	bcs.n	1a9c0 <sc_save+0x40>
   1a9e8:	e7e9      	b.n	1a9be <sc_save+0x3e>
   1a9ea:	bf00      	nop
   1a9ec:	0003055c 	.word	0x0003055c
   1a9f0:	00031ab8 	.word	0x00031ab8

0001a9f4 <sc_set>:
{
   1a9f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a9f8:	460e      	mov	r6, r1
   1a9fa:	4617      	mov	r7, r2
   1a9fc:	4698      	mov	r8, r3
	if (!name) {
   1a9fe:	4604      	mov	r4, r0
   1aa00:	b948      	cbnz	r0, 1aa16 <sc_set+0x22>
		LOG_ERR("Insufficient number of arguments");
   1aa02:	4829      	ldr	r0, [pc, #164]	; (1aaa8 <sc_set+0xb4>)
   1aa04:	2145      	movs	r1, #69	; 0x45
   1aa06:	f00f fb2e 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1aa0a:	f06f 0515 	mvn.w	r5, #21
}
   1aa0e:	4628      	mov	r0, r5
   1aa10:	b004      	add	sp, #16
   1aa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1aa16:	a902      	add	r1, sp, #8
   1aa18:	f010 fb5d 	bl	2b0d6 <bt_settings_decode_key>
	if (err) {
   1aa1c:	4605      	mov	r5, r0
   1aa1e:	b128      	cbz	r0, 1aa2c <sc_set+0x38>
		LOG_ERR("Unable to decode address %s", name);
   1aa20:	4822      	ldr	r0, [pc, #136]	; (1aaac <sc_set+0xb8>)
   1aa22:	4622      	mov	r2, r4
   1aa24:	2145      	movs	r1, #69	; 0x45
   1aa26:	f00f fb1e 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1aa2a:	e7ee      	b.n	1aa0a <sc_set+0x16>
	settings_name_next(name, &next);
   1aa2c:	a901      	add	r1, sp, #4
   1aa2e:	4620      	mov	r0, r4
   1aa30:	f00f fdc5 	bl	2a5be <settings_name_next>
	if (!next) {
   1aa34:	9801      	ldr	r0, [sp, #4]
   1aa36:	b140      	cbz	r0, 1aa4a <sc_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1aa38:	220a      	movs	r2, #10
   1aa3a:	4629      	mov	r1, r5
   1aa3c:	f010 fa03 	bl	2ae46 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1aa40:	4602      	mov	r2, r0
   1aa42:	b110      	cbz	r0, 1aa4a <sc_set+0x56>
			LOG_ERR("Invalid local identity %lu", next_id);
   1aa44:	481a      	ldr	r0, [pc, #104]	; (1aab0 <sc_set+0xbc>)
   1aa46:	2145      	movs	r1, #69	; 0x45
   1aa48:	e7ed      	b.n	1aa26 <sc_set+0x32>
	cfg = find_sc_cfg(id, &addr);
   1aa4a:	a902      	add	r1, sp, #8
   1aa4c:	2000      	movs	r0, #0
   1aa4e:	f7ff fe59 	bl	1a704 <find_sc_cfg>
	if (!cfg && len_rd) {
   1aa52:	4604      	mov	r4, r0
   1aa54:	bb08      	cbnz	r0, 1aa9a <sc_set+0xa6>
   1aa56:	2e00      	cmp	r6, #0
   1aa58:	d0d9      	beq.n	1aa0e <sc_set+0x1a>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1aa5a:	4916      	ldr	r1, [pc, #88]	; (1aab4 <sc_set+0xc0>)
   1aa5c:	f7ff fe52 	bl	1a704 <find_sc_cfg>
		if (!cfg) {
   1aa60:	4604      	mov	r4, r0
   1aa62:	b930      	cbnz	r0, 1aa72 <sc_set+0x7e>
			LOG_ERR("Unable to restore SC: no cfg left");
   1aa64:	4814      	ldr	r0, [pc, #80]	; (1aab8 <sc_set+0xc4>)
   1aa66:	2145      	movs	r1, #69	; 0x45
   1aa68:	f00f fafd 	bl	2a066 <z_log_minimal_printk>
			return -ENOMEM;
   1aa6c:	f06f 050b 	mvn.w	r5, #11
   1aa70:	e7cd      	b.n	1aa0e <sc_set+0x1a>
		cfg->id = id;
   1aa72:	2300      	movs	r3, #0
   1aa74:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1aa78:	a902      	add	r1, sp, #8
   1aa7a:	f011 fc7b 	bl	2c374 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1aa7e:	f104 0108 	add.w	r1, r4, #8
   1aa82:	2204      	movs	r2, #4
   1aa84:	4640      	mov	r0, r8
   1aa86:	47b8      	blx	r7
		if (len < 0) {
   1aa88:	1e04      	subs	r4, r0, #0
   1aa8a:	dac0      	bge.n	1aa0e <sc_set+0x1a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1aa8c:	480b      	ldr	r0, [pc, #44]	; (1aabc <sc_set+0xc8>)
   1aa8e:	4622      	mov	r2, r4
   1aa90:	2145      	movs	r1, #69	; 0x45
   1aa92:	f00f fae8 	bl	2a066 <z_log_minimal_printk>
			return len;
   1aa96:	4625      	mov	r5, r4
   1aa98:	e7b9      	b.n	1aa0e <sc_set+0x1a>
	if (len_rd) {
   1aa9a:	2e00      	cmp	r6, #0
   1aa9c:	d1ef      	bne.n	1aa7e <sc_set+0x8a>
		memset(cfg, 0, sizeof(*cfg));
   1aa9e:	220c      	movs	r2, #12
   1aaa0:	4631      	mov	r1, r6
   1aaa2:	f010 fab3 	bl	2b00c <memset>
		LOG_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1aaa6:	e7b2      	b.n	1aa0e <sc_set+0x1a>
   1aaa8:	000305e4 	.word	0x000305e4
   1aaac:	00031adc 	.word	0x00031adc
   1aab0:	00031afd 	.word	0x00031afd
   1aab4:	0003055c 	.word	0x0003055c
   1aab8:	00031b1d 	.word	0x00031b1d
   1aabc:	00031a0d 	.word	0x00031a0d

0001aac0 <db_hash_commit>:

static int db_hash_commit(void)
{
   1aac0:	b510      	push	{r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1aac2:	2108      	movs	r1, #8
   1aac4:	4809      	ldr	r0, [pc, #36]	; (1aaec <db_hash_commit+0x2c>)
   1aac6:	f011 fc46 	bl	2c356 <atomic_or>
	atomic_set_bit(gatt_sc.flags, DB_HASH_LOAD);
	/* Reschedule work to calculate and compare against the Hash value
	 * loaded from flash.
	 */
	if (IS_ENABLED(CONFIG_BT_LONG_WQ)) {
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1aaca:	4809      	ldr	r0, [pc, #36]	; (1aaf0 <db_hash_commit+0x30>)
   1aacc:	2200      	movs	r2, #0
   1aace:	2300      	movs	r3, #0
   1aad0:	f7fa ffac 	bl	15a2c <bt_long_wq_reschedule>
	/* Settings commit uses non-zero value to indicate failure. */
	if (err > 0) {
		err = 0;
	}

	if (err) {
   1aad4:	1e04      	subs	r4, r0, #0
   1aad6:	da06      	bge.n	1aae6 <db_hash_commit+0x26>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   1aad8:	4806      	ldr	r0, [pc, #24]	; (1aaf4 <db_hash_commit+0x34>)
   1aada:	4622      	mov	r2, r4
   1aadc:	2145      	movs	r1, #69	; 0x45
   1aade:	f00f fac2 	bl	2a066 <z_log_minimal_printk>
	}

	return err;
}
   1aae2:	4620      	mov	r0, r4
   1aae4:	bd10      	pop	{r4, pc}
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   1aae6:	2400      	movs	r4, #0
	return err;
   1aae8:	e7fb      	b.n	1aae2 <db_hash_commit+0x22>
   1aaea:	bf00      	nop
   1aaec:	20001e38 	.word	0x20001e38
   1aaf0:	20001d90 	.word	0x20001d90
   1aaf4:	00031b44 	.word	0x00031b44

0001aaf8 <gatt_sub_free>:
{
   1aaf8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1aafa:	6883      	ldr	r3, [r0, #8]
   1aafc:	b153      	cbz	r3, 1ab14 <gatt_sub_free+0x1c>
   1aafe:	4908      	ldr	r1, [pc, #32]	; (1ab20 <gatt_sub_free+0x28>)
   1ab00:	4808      	ldr	r0, [pc, #32]	; (1ab24 <gatt_sub_free+0x2c>)
   1ab02:	f44f 6249 	mov.w	r2, #3216	; 0xc90
   1ab06:	f00f faa0 	bl	2a04a <assert_print>
   1ab0a:	4805      	ldr	r0, [pc, #20]	; (1ab20 <gatt_sub_free+0x28>)
   1ab0c:	f44f 6149 	mov.w	r1, #3216	; 0xc90
   1ab10:	f00f fa94 	bl	2a03c <assert_post_action>
}
   1ab14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1ab18:	4903      	ldr	r1, [pc, #12]	; (1ab28 <gatt_sub_free+0x30>)
   1ab1a:	3001      	adds	r0, #1
   1ab1c:	f011 bc2a 	b.w	2c374 <bt_addr_le_copy>
   1ab20:	00031b7d 	.word	0x00031b7d
   1ab24:	0002f2b5 	.word	0x0002f2b5
   1ab28:	0003055c 	.word	0x0003055c

0001ab2c <gatt_write_ccc_rsp>:
{
   1ab2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab30:	9c06      	ldr	r4, [sp, #24]
   1ab32:	460e      	mov	r6, r1
   1ab34:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1ab36:	f06f 0104 	mvn.w	r1, #4
   1ab3a:	f104 0014 	add.w	r0, r4, #20
   1ab3e:	f011 fc1c 	bl	2c37a <atomic_and>
	if (err) {
   1ab42:	b306      	cbz	r6, 1ab86 <gatt_write_ccc_rsp+0x5a>
		sub = gatt_sub_find(conn);
   1ab44:	4628      	mov	r0, r5
   1ab46:	f7ff fe13 	bl	1a770 <gatt_sub_find>
		if (!sub) {
   1ab4a:	4601      	mov	r1, r0
   1ab4c:	b380      	cbz	r0, 1abb0 <gatt_write_ccc_rsp+0x84>
	return list->head;
   1ab4e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab50:	b14b      	cbz	r3, 1ab66 <gatt_write_ccc_rsp+0x3a>
	return node->next;
   1ab52:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   1ab54:	f104 0718 	add.w	r7, r4, #24
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   1ab58:	b12b      	cbz	r3, 1ab66 <gatt_write_ccc_rsp+0x3a>
			if (node == &params->node) {
   1ab5a:	42bb      	cmp	r3, r7
   1ab5c:	d10c      	bne.n	1ab78 <gatt_write_ccc_rsp+0x4c>
				gatt_sub_remove(conn, sub, tmp, params);
   1ab5e:	4623      	mov	r3, r4
   1ab60:	4628      	mov	r0, r5
   1ab62:	f011 fcfc 	bl	2c55e <gatt_sub_remove>
	if (params->subscribe) {
   1ab66:	6867      	ldr	r7, [r4, #4]
   1ab68:	b1bf      	cbz	r7, 1ab9a <gatt_write_ccc_rsp+0x6e>
		params->subscribe(conn, err, params);
   1ab6a:	4622      	mov	r2, r4
   1ab6c:	4631      	mov	r1, r6
   1ab6e:	4628      	mov	r0, r5
   1ab70:	463b      	mov	r3, r7
}
   1ab72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   1ab76:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab78:	b11a      	cbz	r2, 1ab82 <gatt_write_ccc_rsp+0x56>
	return node->next;
   1ab7a:	6810      	ldr	r0, [r2, #0]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ab7c:	4613      	mov	r3, r2
   1ab7e:	4602      	mov	r2, r0
   1ab80:	e7ea      	b.n	1ab58 <gatt_write_ccc_rsp+0x2c>
   1ab82:	4610      	mov	r0, r2
   1ab84:	e7fa      	b.n	1ab7c <gatt_write_ccc_rsp+0x50>
	} else if (!params->value) {
   1ab86:	8a23      	ldrh	r3, [r4, #16]
   1ab88:	2b00      	cmp	r3, #0
   1ab8a:	d1ec      	bne.n	1ab66 <gatt_write_ccc_rsp+0x3a>
		params->notify(conn, params, NULL, 0);
   1ab8c:	6827      	ldr	r7, [r4, #0]
   1ab8e:	4633      	mov	r3, r6
   1ab90:	4632      	mov	r2, r6
   1ab92:	4621      	mov	r1, r4
   1ab94:	4628      	mov	r0, r5
   1ab96:	47b8      	blx	r7
   1ab98:	e7e5      	b.n	1ab66 <gatt_write_ccc_rsp+0x3a>
	} else if (params->write) {
   1ab9a:	68a3      	ldr	r3, [r4, #8]
   1ab9c:	b143      	cbz	r3, 1abb0 <gatt_write_ccc_rsp+0x84>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   1ab9e:	4805      	ldr	r0, [pc, #20]	; (1abb4 <gatt_write_ccc_rsp+0x88>)
   1aba0:	2157      	movs	r1, #87	; 0x57
   1aba2:	f00f fa60 	bl	2a066 <z_log_minimal_printk>
		params->write(conn, err, NULL);
   1aba6:	68a3      	ldr	r3, [r4, #8]
   1aba8:	463a      	mov	r2, r7
   1abaa:	4631      	mov	r1, r6
   1abac:	4628      	mov	r0, r5
   1abae:	e7e0      	b.n	1ab72 <gatt_write_ccc_rsp+0x46>
}
   1abb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abb4:	00031bad 	.word	0x00031bad

0001abb8 <clear_cf_cfg>:
{
   1abb8:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1abba:	490c      	ldr	r1, [pc, #48]	; (1abec <clear_cf_cfg+0x34>)
{
   1abbc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1abbe:	3001      	adds	r0, #1
   1abc0:	f011 fbd8 	bl	2c374 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1abc4:	f104 0008 	add.w	r0, r4, #8
   1abc8:	2201      	movs	r2, #1
   1abca:	2100      	movs	r1, #0
   1abcc:	f010 fa1e 	bl	2b00c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1abd0:	f3bf 8f5b 	dmb	ish
   1abd4:	340c      	adds	r4, #12
   1abd6:	2300      	movs	r3, #0
   1abd8:	e854 2f00 	ldrex	r2, [r4]
   1abdc:	e844 3100 	strex	r1, r3, [r4]
   1abe0:	2900      	cmp	r1, #0
   1abe2:	d1f9      	bne.n	1abd8 <clear_cf_cfg+0x20>
   1abe4:	f3bf 8f5b 	dmb	ish
}
   1abe8:	bd10      	pop	{r4, pc}
   1abea:	bf00      	nop
   1abec:	0003055c 	.word	0x0003055c

0001abf0 <cf_set>:
{
   1abf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1abf4:	4688      	mov	r8, r1
   1abf6:	4616      	mov	r6, r2
   1abf8:	461f      	mov	r7, r3
	if (!name) {
   1abfa:	4604      	mov	r4, r0
   1abfc:	b948      	cbnz	r0, 1ac12 <cf_set+0x22>
		LOG_ERR("Insufficient number of arguments");
   1abfe:	4828      	ldr	r0, [pc, #160]	; (1aca0 <cf_set+0xb0>)
   1ac00:	2145      	movs	r1, #69	; 0x45
   1ac02:	f00f fa30 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1ac06:	f06f 0515 	mvn.w	r5, #21
}
   1ac0a:	4628      	mov	r0, r5
   1ac0c:	b004      	add	sp, #16
   1ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_settings_decode_key(name, &addr);
   1ac12:	a902      	add	r1, sp, #8
   1ac14:	f010 fa5f 	bl	2b0d6 <bt_settings_decode_key>
	if (err) {
   1ac18:	4605      	mov	r5, r0
   1ac1a:	b128      	cbz	r0, 1ac28 <cf_set+0x38>
		LOG_ERR("Unable to decode address %s", name);
   1ac1c:	4821      	ldr	r0, [pc, #132]	; (1aca4 <cf_set+0xb4>)
   1ac1e:	4622      	mov	r2, r4
   1ac20:	2145      	movs	r1, #69	; 0x45
   1ac22:	f00f fa20 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1ac26:	e7ee      	b.n	1ac06 <cf_set+0x16>
	settings_name_next(name, &next);
   1ac28:	a901      	add	r1, sp, #4
   1ac2a:	4620      	mov	r0, r4
   1ac2c:	f00f fcc7 	bl	2a5be <settings_name_next>
	if (!next) {
   1ac30:	9801      	ldr	r0, [sp, #4]
   1ac32:	b140      	cbz	r0, 1ac46 <cf_set+0x56>
		unsigned long next_id = strtoul(next, NULL, 10);
   1ac34:	220a      	movs	r2, #10
   1ac36:	4629      	mov	r1, r5
   1ac38:	f010 f905 	bl	2ae46 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1ac3c:	4602      	mov	r2, r0
   1ac3e:	b110      	cbz	r0, 1ac46 <cf_set+0x56>
			LOG_ERR("Invalid local identity %lu", next_id);
   1ac40:	4819      	ldr	r0, [pc, #100]	; (1aca8 <cf_set+0xb8>)
   1ac42:	2145      	movs	r1, #69	; 0x45
   1ac44:	e7ed      	b.n	1ac22 <cf_set+0x32>
	cfg = find_cf_cfg_by_addr(id, &addr);
   1ac46:	a902      	add	r1, sp, #8
   1ac48:	2000      	movs	r0, #0
   1ac4a:	f7ff fdbf 	bl	1a7cc <find_cf_cfg_by_addr>
	if (!cfg) {
   1ac4e:	4604      	mov	r4, r0
   1ac50:	b980      	cbnz	r0, 1ac74 <cf_set+0x84>
		cfg = find_cf_cfg(NULL);
   1ac52:	f7ff fd29 	bl	1a6a8 <find_cf_cfg>
		if (!cfg) {
   1ac56:	4604      	mov	r4, r0
   1ac58:	b930      	cbnz	r0, 1ac68 <cf_set+0x78>
			LOG_ERR("Unable to restore CF: no cfg left");
   1ac5a:	4814      	ldr	r0, [pc, #80]	; (1acac <cf_set+0xbc>)
   1ac5c:	2145      	movs	r1, #69	; 0x45
   1ac5e:	f00f fa02 	bl	2a066 <z_log_minimal_printk>
			return -ENOMEM;
   1ac62:	f06f 050b 	mvn.w	r5, #11
   1ac66:	e7d0      	b.n	1ac0a <cf_set+0x1a>
		cfg->id = id;
   1ac68:	2300      	movs	r3, #0
   1ac6a:	f800 3b01 	strb.w	r3, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
   1ac6e:	a902      	add	r1, sp, #8
   1ac70:	f011 fb80 	bl	2c374 <bt_addr_le_copy>
	if (len_rd) {
   1ac74:	f1b8 0f00 	cmp.w	r8, #0
   1ac78:	d00d      	beq.n	1ac96 <cf_set+0xa6>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   1ac7a:	f104 0108 	add.w	r1, r4, #8
   1ac7e:	2201      	movs	r2, #1
   1ac80:	4638      	mov	r0, r7
   1ac82:	47b0      	blx	r6
		if (len < 0) {
   1ac84:	1e04      	subs	r4, r0, #0
   1ac86:	dac0      	bge.n	1ac0a <cf_set+0x1a>
			LOG_ERR("Failed to decode value (err %zd)", len);
   1ac88:	4809      	ldr	r0, [pc, #36]	; (1acb0 <cf_set+0xc0>)
   1ac8a:	4622      	mov	r2, r4
   1ac8c:	2145      	movs	r1, #69	; 0x45
   1ac8e:	f00f f9ea 	bl	2a066 <z_log_minimal_printk>
			return len;
   1ac92:	4625      	mov	r5, r4
   1ac94:	e7b9      	b.n	1ac0a <cf_set+0x1a>
		clear_cf_cfg(cfg);
   1ac96:	4620      	mov	r0, r4
   1ac98:	f7ff ff8e 	bl	1abb8 <clear_cf_cfg>
   1ac9c:	e7b5      	b.n	1ac0a <cf_set+0x1a>
   1ac9e:	bf00      	nop
   1aca0:	000305e4 	.word	0x000305e4
   1aca4:	00031adc 	.word	0x00031adc
   1aca8:	00031afd 	.word	0x00031afd
   1acac:	00031be9 	.word	0x00031be9
   1acb0:	00031a0d 	.word	0x00031a0d

0001acb4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   1acb4:	b508      	push	{r3, lr}
   1acb6:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1acb8:	6881      	ldr	r1, [r0, #8]
   1acba:	4a07      	ldr	r2, [pc, #28]	; (1acd8 <remove_peer_from_attr+0x24>)
   1acbc:	4291      	cmp	r1, r2
   1acbe:	d109      	bne.n	1acd4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1acc0:	791a      	ldrb	r2, [r3, #4]
   1acc2:	6819      	ldr	r1, [r3, #0]
   1acc4:	68c0      	ldr	r0, [r0, #12]
   1acc6:	f011 fb33 	bl	2c330 <ccc_find_cfg>
	if (cfg) {
   1acca:	b118      	cbz	r0, 1acd4 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
   1accc:	220a      	movs	r2, #10
   1acce:	2100      	movs	r1, #0
   1acd0:	f010 f99c 	bl	2b00c <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
   1acd4:	2001      	movs	r0, #1
   1acd6:	bd08      	pop	{r3, pc}
   1acd8:	0001af15 	.word	0x0001af15

0001acdc <convert_to_id_on_match>:
{
   1acdc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1acde:	4b09      	ldr	r3, [pc, #36]	; (1ad04 <convert_to_id_on_match+0x28>)
{
   1ace0:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ace2:	6882      	ldr	r2, [r0, #8]
   1ace4:	429a      	cmp	r2, r3
   1ace6:	d10a      	bne.n	1acfe <convert_to_id_on_match+0x22>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   1ace8:	68c4      	ldr	r4, [r0, #12]
   1acea:	6829      	ldr	r1, [r5, #0]
   1acec:	3401      	adds	r4, #1
   1acee:	4620      	mov	r0, r4
   1acf0:	f011 fb16 	bl	2c320 <bt_addr_le_eq>
   1acf4:	b118      	cbz	r0, 1acfe <convert_to_id_on_match+0x22>
			bt_addr_le_copy(&ccc->cfg[i].peer, match->id_addr);
   1acf6:	6869      	ldr	r1, [r5, #4]
   1acf8:	4620      	mov	r0, r4
   1acfa:	f011 fb3b 	bl	2c374 <bt_addr_le_copy>
}
   1acfe:	2001      	movs	r0, #1
   1ad00:	bd38      	pop	{r3, r4, r5, pc}
   1ad02:	bf00      	nop
   1ad04:	0001af15 	.word	0x0001af15

0001ad08 <ccc_save>:
{
   1ad08:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad0a:	4b0c      	ldr	r3, [pc, #48]	; (1ad3c <ccc_save+0x34>)
{
   1ad0c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad0e:	6882      	ldr	r2, [r0, #8]
   1ad10:	429a      	cmp	r2, r3
{
   1ad12:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ad14:	d10f      	bne.n	1ad36 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   1ad16:	7922      	ldrb	r2, [r4, #4]
   1ad18:	6821      	ldr	r1, [r4, #0]
   1ad1a:	68c0      	ldr	r0, [r0, #12]
   1ad1c:	f011 fb08 	bl	2c330 <ccc_find_cfg>
	if (!cfg) {
   1ad20:	b148      	cbz	r0, 1ad36 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
   1ad22:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   1ad26:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
   1ad2a:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
   1ad2c:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
   1ad2e:	8901      	ldrh	r1, [r0, #8]
   1ad30:	8151      	strh	r1, [r2, #10]
	save->count++;
   1ad32:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
   1ad36:	2001      	movs	r0, #1
   1ad38:	bd38      	pop	{r3, r4, r5, pc}
   1ad3a:	bf00      	nop
   1ad3c:	0001af15 	.word	0x0001af15

0001ad40 <bt_gatt_store_cf.isra.0>:
static int bt_gatt_store_cf(struct bt_conn *conn)
   1ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ad42:	b08d      	sub	sp, #52	; 0x34
   1ad44:	4605      	mov	r5, r0
	cfg = find_cf_cfg(conn);
   1ad46:	f7ff fcaf 	bl	1a6a8 <find_cf_cfg>
					       &conn->le.dst, id_str);
   1ad4a:	f105 0690 	add.w	r6, r5, #144	; 0x90
	if (!cfg) {
   1ad4e:	4604      	mov	r4, r0
   1ad50:	b330      	cbz	r0, 1ada0 <bt_gatt_store_cf.isra.0+0x60>
		if (conn->id) {
   1ad52:	7a2a      	ldrb	r2, [r5, #8]
		str = (char *)cfg->data;
   1ad54:	3408      	adds	r4, #8
		if (conn->id) {
   1ad56:	b16a      	cbz	r2, 1ad74 <bt_gatt_store_cf.isra.0+0x34>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1ad58:	af02      	add	r7, sp, #8
   1ad5a:	2104      	movs	r1, #4
   1ad5c:	4638      	mov	r0, r7
   1ad5e:	f00e fede 	bl	29b1e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   1ad62:	4633      	mov	r3, r6
   1ad64:	4a10      	ldr	r2, [pc, #64]	; (1ada8 <bt_gatt_store_cf.isra.0+0x68>)
   1ad66:	9700      	str	r7, [sp, #0]
   1ad68:	2124      	movs	r1, #36	; 0x24
   1ad6a:	a803      	add	r0, sp, #12
   1ad6c:	f7fa fdb8 	bl	158e0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
   1ad70:	7a2b      	ldrb	r3, [r5, #8]
   1ad72:	b9bb      	cbnz	r3, 1ada4 <bt_gatt_store_cf.isra.0+0x64>
		len = 0;
   1ad74:	2501      	movs	r5, #1
		bt_settings_encode_key(key, sizeof(key), "cf",
   1ad76:	2300      	movs	r3, #0
   1ad78:	9300      	str	r3, [sp, #0]
   1ad7a:	4a0b      	ldr	r2, [pc, #44]	; (1ada8 <bt_gatt_store_cf.isra.0+0x68>)
   1ad7c:	4633      	mov	r3, r6
   1ad7e:	2124      	movs	r1, #36	; 0x24
   1ad80:	a803      	add	r0, sp, #12
   1ad82:	f7fa fdad 	bl	158e0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   1ad86:	462a      	mov	r2, r5
   1ad88:	4621      	mov	r1, r4
   1ad8a:	a803      	add	r0, sp, #12
   1ad8c:	f7f8 fd7a 	bl	13884 <settings_save_one>
	if (err) {
   1ad90:	4602      	mov	r2, r0
   1ad92:	b118      	cbz	r0, 1ad9c <bt_gatt_store_cf.isra.0+0x5c>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   1ad94:	4805      	ldr	r0, [pc, #20]	; (1adac <bt_gatt_store_cf.isra.0+0x6c>)
   1ad96:	2145      	movs	r1, #69	; 0x45
   1ad98:	f00f f965 	bl	2a066 <z_log_minimal_printk>
}
   1ad9c:	b00d      	add	sp, #52	; 0x34
   1ad9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
   1ada0:	4605      	mov	r5, r0
   1ada2:	e7e8      	b.n	1ad76 <bt_gatt_store_cf.isra.0+0x36>
   1ada4:	2501      	movs	r5, #1
   1ada6:	e7ee      	b.n	1ad86 <bt_gatt_store_cf.isra.0+0x46>
   1ada8:	00031f23 	.word	0x00031f23
   1adac:	00031c10 	.word	0x00031c10

0001adb0 <bt_gatt_clear_sc>:
{
   1adb0:	b570      	push	{r4, r5, r6, lr}
   1adb2:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1adb4:	f7ff fca6 	bl	1a704 <find_sc_cfg>
	if (!cfg) {
   1adb8:	4604      	mov	r4, r0
   1adba:	b1e8      	cbz	r0, 1adf8 <bt_gatt_clear_sc+0x48>
		if (cfg->id) {
   1adbc:	4605      	mov	r5, r0
   1adbe:	f815 2b01 	ldrb.w	r2, [r5], #1
   1adc2:	b1e2      	cbz	r2, 1adfe <bt_gatt_clear_sc+0x4e>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   1adc4:	ae02      	add	r6, sp, #8
   1adc6:	2104      	movs	r1, #4
   1adc8:	4630      	mov	r0, r6
   1adca:	f00e fea8 	bl	29b1e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   1adce:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
   1add0:	4a0c      	ldr	r2, [pc, #48]	; (1ae04 <bt_gatt_clear_sc+0x54>)
   1add2:	462b      	mov	r3, r5
   1add4:	2124      	movs	r1, #36	; 0x24
   1add6:	a803      	add	r0, sp, #12
   1add8:	f7fa fd82 	bl	158e0 <bt_settings_encode_key>
		err = settings_delete(key);
   1addc:	a803      	add	r0, sp, #12
   1adde:	f00f fbc6 	bl	2a56e <settings_delete>
		if (err) {
   1ade2:	4602      	mov	r2, r0
   1ade4:	b118      	cbz	r0, 1adee <bt_gatt_clear_sc+0x3e>
			LOG_ERR("failed to delete SC (err %d)", err);
   1ade6:	4808      	ldr	r0, [pc, #32]	; (1ae08 <bt_gatt_clear_sc+0x58>)
   1ade8:	2145      	movs	r1, #69	; 0x45
   1adea:	f00f f93c 	bl	2a066 <z_log_minimal_printk>
	memset(cfg, 0, sizeof(*cfg));
   1adee:	220c      	movs	r2, #12
   1adf0:	2100      	movs	r1, #0
   1adf2:	4620      	mov	r0, r4
   1adf4:	f010 f90a 	bl	2b00c <memset>
}
   1adf8:	2000      	movs	r0, #0
   1adfa:	b00c      	add	sp, #48	; 0x30
   1adfc:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   1adfe:	9200      	str	r2, [sp, #0]
   1ae00:	e7e6      	b.n	1add0 <bt_gatt_clear_sc+0x20>
   1ae02:	bf00      	nop
   1ae04:	00031f29 	.word	0x00031f29
   1ae08:	00031c3e 	.word	0x00031c3e

0001ae0c <sc_clear>:
{
   1ae0c:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae0e:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1ae12:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae14:	4631      	mov	r1, r6
   1ae16:	7a00      	ldrb	r0, [r0, #8]
   1ae18:	f010 fab8 	bl	2b38c <bt_addr_le_is_bonded>
   1ae1c:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ae1e:	4631      	mov	r1, r6
   1ae20:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ae22:	b14d      	cbz	r5, 1ae38 <sc_clear+0x2c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1ae24:	f7ff ffc4 	bl	1adb0 <bt_gatt_clear_sc>
		if (err) {
   1ae28:	4602      	mov	r2, r0
   1ae2a:	b170      	cbz	r0, 1ae4a <sc_clear+0x3e>
}
   1ae2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_ERR("Failed to clear SC %d", err);
   1ae30:	4806      	ldr	r0, [pc, #24]	; (1ae4c <sc_clear+0x40>)
   1ae32:	2145      	movs	r1, #69	; 0x45
   1ae34:	f00f b917 	b.w	2a066 <z_log_minimal_printk>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ae38:	f7ff fc64 	bl	1a704 <find_sc_cfg>
		if (cfg) {
   1ae3c:	b128      	cbz	r0, 1ae4a <sc_clear+0x3e>
	memset(cfg, 0, sizeof(*cfg));
   1ae3e:	4629      	mov	r1, r5
   1ae40:	220c      	movs	r2, #12
}
   1ae42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1ae46:	f010 b8e1 	b.w	2b00c <memset>
}
   1ae4a:	bd70      	pop	{r4, r5, r6, pc}
   1ae4c:	00031c60 	.word	0x00031c60

0001ae50 <gatt_write_ccc>:
{
   1ae50:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1ae52:	2312      	movs	r3, #18
{
   1ae54:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1ae56:	2104      	movs	r1, #4
   1ae58:	e9cd 3100 	strd	r3, r1, [sp]
   1ae5c:	4b03      	ldr	r3, [pc, #12]	; (1ae6c <gatt_write_ccc+0x1c>)
   1ae5e:	4904      	ldr	r1, [pc, #16]	; (1ae70 <gatt_write_ccc+0x20>)
   1ae60:	f011 fce8 	bl	2c834 <gatt_req_send.constprop.0>
}
   1ae64:	b003      	add	sp, #12
   1ae66:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae6a:	bf00      	nop
   1ae6c:	0002c8b5 	.word	0x0002c8b5
   1ae70:	0001ab2d 	.word	0x0001ab2d

0001ae74 <disconnected_cb>:
{
   1ae74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae78:	4b23      	ldr	r3, [pc, #140]	; (1af08 <disconnected_cb+0x94>)
{
   1ae7a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae7c:	6882      	ldr	r2, [r0, #8]
   1ae7e:	429a      	cmp	r2, r3
{
   1ae80:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ae82:	d102      	bne.n	1ae8a <disconnected_cb+0x16>
	ccc = attr->user_data;
   1ae84:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1ae86:	8963      	ldrh	r3, [r4, #10]
   1ae88:	bb33      	cbnz	r3, 1aed8 <disconnected_cb+0x64>
}
   1ae8a:	2001      	movs	r0, #1
   1ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1ae90:	f7fd fbfe 	bl	18690 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1ae94:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1ae96:	2100      	movs	r1, #0
   1ae98:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1ae9a:	2b00      	cmp	r3, #0
   1ae9c:	d0f5      	beq.n	1ae8a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1ae9e:	4638      	mov	r0, r7
   1aea0:	4798      	blx	r3
   1aea2:	e7f2      	b.n	1ae8a <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aea4:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1aea8:	7a28      	ldrb	r0, [r5, #8]
   1aeaa:	4641      	mov	r1, r8
   1aeac:	f010 fa6e 	bl	2b38c <bt_addr_le_is_bonded>
   1aeb0:	b968      	cbnz	r0, 1aece <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1aeb2:	4b16      	ldr	r3, [pc, #88]	; (1af0c <disconnected_cb+0x98>)
   1aeb4:	429c      	cmp	r4, r3
   1aeb6:	d102      	bne.n	1aebe <disconnected_cb+0x4a>
					sc_clear(conn);
   1aeb8:	4628      	mov	r0, r5
   1aeba:	f7ff ffa7 	bl	1ae0c <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1aebe:	4914      	ldr	r1, [pc, #80]	; (1af10 <disconnected_cb+0x9c>)
   1aec0:	4630      	mov	r0, r6
   1aec2:	f011 fa57 	bl	2c374 <bt_addr_le_copy>
	cfg->id = 0U;
   1aec6:	2300      	movs	r3, #0
   1aec8:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1aeca:	8123      	strh	r3, [r4, #8]
}
   1aecc:	e7e2      	b.n	1ae94 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aece:	4641      	mov	r1, r8
   1aed0:	4630      	mov	r0, r6
   1aed2:	f011 fa4f 	bl	2c374 <bt_addr_le_copy>
   1aed6:	e7dd      	b.n	1ae94 <disconnected_cb+0x20>
		if (!cfg->value) {
   1aed8:	8923      	ldrh	r3, [r4, #8]
   1aeda:	2b00      	cmp	r3, #0
   1aedc:	d0da      	beq.n	1ae94 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1aede:	4626      	mov	r6, r4
   1aee0:	4628      	mov	r0, r5
   1aee2:	f816 1b01 	ldrb.w	r1, [r6], #1
   1aee6:	4632      	mov	r2, r6
   1aee8:	f010 fb8a 	bl	2b600 <bt_conn_is_peer_addr_le>
   1aeec:	2800      	cmp	r0, #0
   1aeee:	d1d9      	bne.n	1aea4 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aef0:	7820      	ldrb	r0, [r4, #0]
   1aef2:	4631      	mov	r1, r6
   1aef4:	f7fd fe76 	bl	18be4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1aef8:	2800      	cmp	r0, #0
   1aefa:	d0cb      	beq.n	1ae94 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1aefc:	7b43      	ldrb	r3, [r0, #13]
   1aefe:	2b07      	cmp	r3, #7
   1af00:	d1c6      	bne.n	1ae90 <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1af02:	f7fd fbc5 	bl	18690 <bt_conn_unref>
	if (!value_used) {
   1af06:	e7c0      	b.n	1ae8a <disconnected_cb+0x16>
   1af08:	0001af15 	.word	0x0001af15
   1af0c:	20000658 	.word	0x20000658
   1af10:	0003055c 	.word	0x0003055c

0001af14 <bt_gatt_attr_write_ccc>:
{
   1af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1af18:	461f      	mov	r7, r3
   1af1a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1af1e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1af22:	4605      	mov	r5, r0
   1af24:	4688      	mov	r8, r1
	if (offset) {
   1af26:	2b00      	cmp	r3, #0
   1af28:	d166      	bne.n	1aff8 <bt_gatt_attr_write_ccc+0xe4>
	if (!len || len > sizeof(uint16_t)) {
   1af2a:	1e7b      	subs	r3, r7, #1
   1af2c:	2b01      	cmp	r3, #1
   1af2e:	d866      	bhi.n	1affe <bt_gatt_attr_write_ccc+0xea>
	if (len < sizeof(uint16_t)) {
   1af30:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
   1af32:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1af34:	7816      	ldrb	r6, [r2, #0]
   1af36:	bf18      	it	ne
   1af38:	8816      	ldrhne	r6, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1af3a:	f7ff fc05 	bl	1a748 <find_ccc_cfg>
	if (!cfg) {
   1af3e:	4604      	mov	r4, r0
   1af40:	b9b0      	cbnz	r0, 1af70 <bt_gatt_attr_write_ccc+0x5c>
		if (!value) {
   1af42:	b916      	cbnz	r6, 1af4a <bt_gatt_attr_write_ccc+0x36>
			return len;
   1af44:	4638      	mov	r0, r7
}
   1af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1af4a:	4649      	mov	r1, r9
   1af4c:	f7ff fbfc 	bl	1a748 <find_ccc_cfg>
		if (!cfg) {
   1af50:	4604      	mov	r4, r0
   1af52:	b930      	cbnz	r0, 1af62 <bt_gatt_attr_write_ccc+0x4e>
			LOG_WRN("No space to store CCC cfg");
   1af54:	482b      	ldr	r0, [pc, #172]	; (1b004 <bt_gatt_attr_write_ccc+0xf0>)
   1af56:	2157      	movs	r1, #87	; 0x57
   1af58:	f00f f885 	bl	2a066 <z_log_minimal_printk>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1af5c:	f06f 0010 	mvn.w	r0, #16
   1af60:	e7f1      	b.n	1af46 <bt_gatt_attr_write_ccc+0x32>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1af62:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1af66:	3001      	adds	r0, #1
   1af68:	f011 fa04 	bl	2c374 <bt_addr_le_copy>
		cfg->id = conn->id;
   1af6c:	7a2b      	ldrb	r3, [r5, #8]
   1af6e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1af70:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1af74:	bba3      	cbnz	r3, 1afe0 <bt_gatt_attr_write_ccc+0xcc>
	value_changed = cfg->value != value;
   1af76:	f8b4 a008 	ldrh.w	sl, [r4, #8]
	cfg->value = value;
   1af7a:	8126      	strh	r6, [r4, #8]
	if (cfg->value != ccc->value) {
   1af7c:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   1af80:	42b3      	cmp	r3, r6
   1af82:	d003      	beq.n	1af8c <bt_gatt_attr_write_ccc+0x78>
		gatt_ccc_changed(attr, ccc);
   1af84:	4649      	mov	r1, r9
   1af86:	4640      	mov	r0, r8
   1af88:	f011 f951 	bl	2c22e <gatt_ccc_changed>
	if (value_changed) {
   1af8c:	45b2      	cmp	sl, r6
   1af8e:	d01e      	beq.n	1afce <bt_gatt_attr_write_ccc+0xba>
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   1af90:	4628      	mov	r0, r5
   1af92:	f7fd fca3 	bl	188dc <bt_conn_index>
   1af96:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1b008 <bt_gatt_attr_write_ccc+0xf4>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1af9a:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
   1af9e:	429d      	cmp	r5, r3
   1afa0:	d015      	beq.n	1afce <bt_gatt_attr_write_ccc+0xba>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1afa2:	7a28      	ldrb	r0, [r5, #8]
   1afa4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1afa8:	f010 f9f0 	bl	2b38c <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   1afac:	b178      	cbz	r0, 1afce <bt_gatt_attr_write_ccc+0xba>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1afae:	4628      	mov	r0, r5
   1afb0:	f7fd fc94 	bl	188dc <bt_conn_index>
   1afb4:	4681      	mov	r9, r0
			bt_conn_ref(conn);
   1afb6:	4628      	mov	r0, r5
   1afb8:	f7fd fb3e 	bl	18638 <bt_conn_ref>
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1afbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   1afc0:	f848 0029 	str.w	r0, [r8, r9, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   1afc4:	2300      	movs	r3, #0
   1afc6:	f108 0008 	add.w	r0, r8, #8
   1afca:	f009 feff 	bl	24dcc <k_work_reschedule>
	if (!value) {
   1afce:	2e00      	cmp	r6, #0
   1afd0:	d1b8      	bne.n	1af44 <bt_gatt_attr_write_ccc+0x30>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1afd2:	490e      	ldr	r1, [pc, #56]	; (1b00c <bt_gatt_attr_write_ccc+0xf8>)
   1afd4:	1c60      	adds	r0, r4, #1
   1afd6:	f011 f9cd 	bl	2c374 <bt_addr_le_copy>
	cfg->id = 0U;
   1afda:	7026      	strb	r6, [r4, #0]
	cfg->value = 0U;
   1afdc:	8126      	strh	r6, [r4, #8]
}
   1afde:	e7b1      	b.n	1af44 <bt_gatt_attr_write_ccc+0x30>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1afe0:	4632      	mov	r2, r6
   1afe2:	4641      	mov	r1, r8
   1afe4:	4628      	mov	r0, r5
   1afe6:	4798      	blx	r3
		if (write < 0) {
   1afe8:	2800      	cmp	r0, #0
   1afea:	dbac      	blt.n	1af46 <bt_gatt_attr_write_ccc+0x32>
		if (write != sizeof(value) && write != 1) {
   1afec:	3801      	subs	r0, #1
   1afee:	2801      	cmp	r0, #1
   1aff0:	d9c1      	bls.n	1af76 <bt_gatt_attr_write_ccc+0x62>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1aff2:	f06f 000d 	mvn.w	r0, #13
   1aff6:	e7a6      	b.n	1af46 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1aff8:	f06f 0006 	mvn.w	r0, #6
   1affc:	e7a3      	b.n	1af46 <bt_gatt_attr_write_ccc+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1affe:	f06f 000c 	mvn.w	r0, #12
   1b002:	e7a0      	b.n	1af46 <bt_gatt_attr_write_ccc+0x32>
   1b004:	00031c7b 	.word	0x00031c7b
   1b008:	20001d38 	.word	0x20001d38
   1b00c:	0003055c 	.word	0x0003055c

0001b010 <sc_commit>:
{
   1b010:	b508      	push	{r3, lr}
   1b012:	4809      	ldr	r0, [pc, #36]	; (1b038 <sc_commit+0x28>)
   1b014:	f06f 0102 	mvn.w	r1, #2
   1b018:	f011 f9af 	bl	2c37a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b01c:	4806      	ldr	r0, [pc, #24]	; (1b038 <sc_commit+0x28>)
   1b01e:	f011 f994 	bl	2c34a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b022:	07c3      	lsls	r3, r0, #31
   1b024:	d505      	bpl.n	1b032 <sc_commit+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b026:	4805      	ldr	r0, [pc, #20]	; (1b03c <sc_commit+0x2c>)
   1b028:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b02c:	2300      	movs	r3, #0
   1b02e:	f009 fecd 	bl	24dcc <k_work_reschedule>
}
   1b032:	2000      	movs	r0, #0
   1b034:	bd08      	pop	{r3, pc}
   1b036:	bf00      	nop
   1b038:	20001e38 	.word	0x20001e38
   1b03c:	20001e08 	.word	0x20001e08

0001b040 <sc_indicate_rsp>:
{
   1b040:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b042:	f06f 0102 	mvn.w	r1, #2
   1b046:	4604      	mov	r4, r0
   1b048:	480f      	ldr	r0, [pc, #60]	; (1b088 <sc_indicate_rsp+0x48>)
   1b04a:	f011 f996 	bl	2c37a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b04e:	480e      	ldr	r0, [pc, #56]	; (1b088 <sc_indicate_rsp+0x48>)
   1b050:	f011 f97b 	bl	2c34a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b054:	07c2      	lsls	r2, r0, #31
   1b056:	d504      	bpl.n	1b062 <sc_indicate_rsp+0x22>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b058:	480c      	ldr	r0, [pc, #48]	; (1b08c <sc_indicate_rsp+0x4c>)
   1b05a:	2200      	movs	r2, #0
   1b05c:	2300      	movs	r3, #0
   1b05e:	f009 feb5 	bl	24dcc <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1b062:	4620      	mov	r0, r4
   1b064:	f011 f8b2 	bl	2c1cc <bt_att_fixed_chan_only>
   1b068:	b160      	cbz	r0, 1b084 <sc_indicate_rsp+0x44>
		cfg = find_cf_cfg(conn);
   1b06a:	4620      	mov	r0, r4
   1b06c:	f7ff fb1c 	bl	1a6a8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b070:	b140      	cbz	r0, 1b084 <sc_indicate_rsp+0x44>
   1b072:	7a03      	ldrb	r3, [r0, #8]
   1b074:	07db      	lsls	r3, r3, #31
   1b076:	d505      	bpl.n	1b084 <sc_indicate_rsp+0x44>
}
   1b078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b07c:	2101      	movs	r1, #1
   1b07e:	300c      	adds	r0, #12
   1b080:	f011 b969 	b.w	2c356 <atomic_or>
   1b084:	bd10      	pop	{r4, pc}
   1b086:	bf00      	nop
   1b088:	20001e38 	.word	0x20001e38
   1b08c:	20001e08 	.word	0x20001e08

0001b090 <bt_gatt_init>:
{
   1b090:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b092:	4b2d      	ldr	r3, [pc, #180]	; (1b148 <bt_gatt_init+0xb8>)
   1b094:	f3bf 8f5b 	dmb	ish
   1b098:	2201      	movs	r2, #1
   1b09a:	e853 1f00 	ldrex	r1, [r3]
   1b09e:	2900      	cmp	r1, #0
   1b0a0:	d103      	bne.n	1b0aa <bt_gatt_init+0x1a>
   1b0a2:	e843 2000 	strex	r0, r2, [r3]
   1b0a6:	2800      	cmp	r0, #0
   1b0a8:	d1f7      	bne.n	1b09a <bt_gatt_init+0xa>
   1b0aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1b0ae:	d149      	bne.n	1b144 <bt_gatt_init+0xb4>
   1b0b0:	f3bf 8f5b 	dmb	ish
   1b0b4:	4b25      	ldr	r3, [pc, #148]	; (1b14c <bt_gatt_init+0xbc>)
   1b0b6:	e853 1f00 	ldrex	r1, [r3]
   1b0ba:	2900      	cmp	r1, #0
   1b0bc:	d103      	bne.n	1b0c6 <bt_gatt_init+0x36>
   1b0be:	e843 2000 	strex	r0, r2, [r3]
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d1f7      	bne.n	1b0b6 <bt_gatt_init+0x26>
   1b0c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1b0ca:	d11c      	bne.n	1b106 <bt_gatt_init+0x76>
   1b0cc:	4920      	ldr	r1, [pc, #128]	; (1b150 <bt_gatt_init+0xc0>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b0ce:	4a21      	ldr	r2, [pc, #132]	; (1b154 <bt_gatt_init+0xc4>)
   1b0d0:	880b      	ldrh	r3, [r1, #0]
   1b0d2:	4c21      	ldr	r4, [pc, #132]	; (1b158 <bt_gatt_init+0xc8>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1b0d4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b0d6:	42a2      	cmp	r2, r4
   1b0d8:	d912      	bls.n	1b100 <bt_gatt_init+0x70>
   1b0da:	b100      	cbz	r0, 1b0de <bt_gatt_init+0x4e>
   1b0dc:	800b      	strh	r3, [r1, #0]
   1b0de:	491f      	ldr	r1, [pc, #124]	; (1b15c <bt_gatt_init+0xcc>)
   1b0e0:	481f      	ldr	r0, [pc, #124]	; (1b160 <bt_gatt_init+0xd0>)
   1b0e2:	f44f 62a1 	mov.w	r2, #1288	; 0x508
   1b0e6:	f00e ffb0 	bl	2a04a <assert_print>
   1b0ea:	481c      	ldr	r0, [pc, #112]	; (1b15c <bt_gatt_init+0xcc>)
   1b0ec:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   1b0f0:	f00e ffa4 	bl	2a03c <assert_post_action>
		last_static_handle += svc->attr_count;
   1b0f4:	6850      	ldr	r0, [r2, #4]
   1b0f6:	4403      	add	r3, r0
   1b0f8:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b0fa:	3208      	adds	r2, #8
   1b0fc:	2001      	movs	r0, #1
   1b0fe:	e7ea      	b.n	1b0d6 <bt_gatt_init+0x46>
   1b100:	d3f8      	bcc.n	1b0f4 <bt_gatt_init+0x64>
   1b102:	b100      	cbz	r0, 1b106 <bt_gatt_init+0x76>
   1b104:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1b106:	4b17      	ldr	r3, [pc, #92]	; (1b164 <bt_gatt_init+0xd4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b108:	4917      	ldr	r1, [pc, #92]	; (1b168 <bt_gatt_init+0xd8>)
   1b10a:	4818      	ldr	r0, [pc, #96]	; (1b16c <bt_gatt_init+0xdc>)
   1b10c:	2200      	movs	r2, #0
	list->tail = NULL;
   1b10e:	e9c3 2200 	strd	r2, r2, [r3]
   1b112:	f009 fd71 	bl	24bf8 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b116:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b11a:	2300      	movs	r3, #0
   1b11c:	4813      	ldr	r0, [pc, #76]	; (1b16c <bt_gatt_init+0xdc>)
   1b11e:	f7fa fc7f 	bl	15a20 <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b122:	4913      	ldr	r1, [pc, #76]	; (1b170 <bt_gatt_init+0xe0>)
   1b124:	4813      	ldr	r0, [pc, #76]	; (1b174 <bt_gatt_init+0xe4>)
   1b126:	f009 fd67 	bl	24bf8 <k_work_init_delayable>
   1b12a:	2102      	movs	r1, #2
   1b12c:	4812      	ldr	r0, [pc, #72]	; (1b178 <bt_gatt_init+0xe8>)
   1b12e:	f011 f912 	bl	2c356 <atomic_or>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   1b132:	4812      	ldr	r0, [pc, #72]	; (1b17c <bt_gatt_init+0xec>)
   1b134:	4912      	ldr	r1, [pc, #72]	; (1b180 <bt_gatt_init+0xf0>)
   1b136:	f009 fd5f 	bl	24bf8 <k_work_init_delayable>
}
   1b13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&gatt_conn_cb);
   1b13e:	4811      	ldr	r0, [pc, #68]	; (1b184 <bt_gatt_init+0xf4>)
   1b140:	f7fd bd2c 	b.w	18b9c <bt_conn_cb_register>
}
   1b144:	bd10      	pop	{r4, pc}
   1b146:	bf00      	nop
   1b148:	200032bc 	.word	0x200032bc
   1b14c:	200032b8 	.word	0x200032b8
   1b150:	20004156 	.word	0x20004156
   1b154:	0002e488 	.word	0x0002e488
   1b158:	0002e498 	.word	0x0002e498
   1b15c:	00031b7d 	.word	0x00031b7d
   1b160:	0002f2b5 	.word	0x0002f2b5
   1b164:	200032c0 	.word	0x200032c0
   1b168:	0001b3d9 	.word	0x0001b3d9
   1b16c:	20001d90 	.word	0x20001d90
   1b170:	0001b8f1 	.word	0x0001b8f1
   1b174:	20001e08 	.word	0x20001e08
   1b178:	20001e38 	.word	0x20001e38
   1b17c:	20001d40 	.word	0x20001d40
   1b180:	0002cc23 	.word	0x0002cc23
   1b184:	20000624 	.word	0x20000624

0001b188 <bt_gatt_attr_get_handle>:
{
   1b188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b18c:	4603      	mov	r3, r0
   1b18e:	b378      	cbz	r0, 1b1f0 <bt_gatt_attr_get_handle+0x68>
	if (attr->handle) {
   1b190:	8a00      	ldrh	r0, [r0, #16]
   1b192:	bb68      	cbnz	r0, 1b1f0 <bt_gatt_attr_get_handle+0x68>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b194:	4918      	ldr	r1, [pc, #96]	; (1b1f8 <bt_gatt_attr_get_handle+0x70>)
   1b196:	f8df e064 	ldr.w	lr, [pc, #100]	; 1b1fc <bt_gatt_attr_get_handle+0x74>
	uint16_t handle = 1;
   1b19a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b19c:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1a0:	4571      	cmp	r1, lr
   1b1a2:	d924      	bls.n	1b1ee <bt_gatt_attr_get_handle+0x66>
   1b1a4:	4916      	ldr	r1, [pc, #88]	; (1b200 <bt_gatt_attr_get_handle+0x78>)
   1b1a6:	4817      	ldr	r0, [pc, #92]	; (1b204 <bt_gatt_attr_get_handle+0x7c>)
   1b1a8:	f240 625d 	movw	r2, #1629	; 0x65d
   1b1ac:	f00e ff4d 	bl	2a04a <assert_print>
   1b1b0:	4813      	ldr	r0, [pc, #76]	; (1b200 <bt_gatt_attr_get_handle+0x78>)
   1b1b2:	f240 615d 	movw	r1, #1629	; 0x65d
   1b1b6:	f00e ff41 	bl	2a03c <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b1ba:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1b1be:	42bb      	cmp	r3, r7
   1b1c0:	d304      	bcc.n	1b1cc <bt_gatt_attr_get_handle+0x44>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b1c2:	fb0c 7206 	mla	r2, ip, r6, r7
   1b1c6:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1b1c8:	4293      	cmp	r3, r2
   1b1ca:	d90e      	bls.n	1b1ea <bt_gatt_attr_get_handle+0x62>
			handle += static_svc->attr_count;
   1b1cc:	4434      	add	r4, r6
   1b1ce:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1d0:	3108      	adds	r1, #8
   1b1d2:	4614      	mov	r4, r2
   1b1d4:	e7e4      	b.n	1b1a0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1b1d6:	fb0c 7805 	mla	r8, ip, r5, r7
   1b1da:	4543      	cmp	r3, r8
   1b1dc:	d00a      	beq.n	1b1f4 <bt_gatt_attr_get_handle+0x6c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b1de:	3501      	adds	r5, #1
   1b1e0:	1962      	adds	r2, r4, r5
   1b1e2:	42b5      	cmp	r5, r6
   1b1e4:	b292      	uxth	r2, r2
   1b1e6:	d1f6      	bne.n	1b1d6 <bt_gatt_attr_get_handle+0x4e>
   1b1e8:	e7f2      	b.n	1b1d0 <bt_gatt_attr_get_handle+0x48>
   1b1ea:	2500      	movs	r5, #0
   1b1ec:	e7f8      	b.n	1b1e0 <bt_gatt_attr_get_handle+0x58>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b1ee:	d3e4      	bcc.n	1b1ba <bt_gatt_attr_get_handle+0x32>
}
   1b1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b1f4:	4610      	mov	r0, r2
   1b1f6:	e7fb      	b.n	1b1f0 <bt_gatt_attr_get_handle+0x68>
   1b1f8:	0002e488 	.word	0x0002e488
   1b1fc:	0002e498 	.word	0x0002e498
   1b200:	00031b7d 	.word	0x00031b7d
   1b204:	0002f2b5 	.word	0x0002f2b5

0001b208 <bt_gatt_foreach_attr_type>:
{
   1b208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b20c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1b210:	9100      	str	r1, [sp, #0]
   1b212:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1b214:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b218:	2d00      	cmp	r5, #0
   1b21a:	bf08      	it	eq
   1b21c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1b21e:	4b29      	ldr	r3, [pc, #164]	; (1b2c4 <bt_gatt_foreach_attr_type+0xbc>)
   1b220:	881b      	ldrh	r3, [r3, #0]
   1b222:	4283      	cmp	r3, r0
{
   1b224:	4607      	mov	r7, r0
   1b226:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1b228:	d232      	bcs.n	1b290 <bt_gatt_foreach_attr_type+0x88>
}
   1b22a:	b003      	add	sp, #12
   1b22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b230:	5889      	ldr	r1, [r1, r2]
   1b232:	9301      	str	r3, [sp, #4]
   1b234:	4640      	mov	r0, r8
   1b236:	f00f ff72 	bl	2b11e <bt_uuid_cmp>
   1b23a:	9b01      	ldr	r3, [sp, #4]
   1b23c:	b190      	cbz	r0, 1b264 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b23e:	3401      	adds	r4, #1
   1b240:	f10a 0a01 	add.w	sl, sl, #1
   1b244:	b2a4      	uxth	r4, r4
   1b246:	6873      	ldr	r3, [r6, #4]
   1b248:	4553      	cmp	r3, sl
   1b24a:	d92c      	bls.n	1b2a6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1b24c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b24e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1b250:	429c      	cmp	r4, r3
   1b252:	d8ea      	bhi.n	1b22a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1b254:	42bc      	cmp	r4, r7
   1b256:	d3f2      	bcc.n	1b23e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b258:	fb0b f20a 	mul.w	r2, fp, sl
   1b25c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b25e:	f1b8 0f00 	cmp.w	r8, #0
   1b262:	d1e5      	bne.n	1b230 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1b264:	f1b9 0f00 	cmp.w	r9, #0
   1b268:	d10b      	bne.n	1b282 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1b26a:	3d01      	subs	r5, #1
   1b26c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1b26e:	4618      	mov	r0, r3
   1b270:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b274:	4621      	mov	r1, r4
   1b276:	4798      	blx	r3
	if (!*num_matches) {
   1b278:	2d00      	cmp	r5, #0
   1b27a:	d0d6      	beq.n	1b22a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b27c:	2800      	cmp	r0, #0
   1b27e:	d1de      	bne.n	1b23e <bt_gatt_foreach_attr_type+0x36>
   1b280:	e7d3      	b.n	1b22a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1b282:	68da      	ldr	r2, [r3, #12]
   1b284:	4591      	cmp	r9, r2
   1b286:	d1da      	bne.n	1b23e <bt_gatt_foreach_attr_type+0x36>
   1b288:	e7ef      	b.n	1b26a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b28a:	f04f 0a00 	mov.w	sl, #0
   1b28e:	e7da      	b.n	1b246 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b290:	4e0d      	ldr	r6, [pc, #52]	; (1b2c8 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   1b292:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b294:	f04f 0b14 	mov.w	fp, #20
   1b298:	e006      	b.n	1b2a8 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b29a:	d2c6      	bcs.n	1b22a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1b29c:	6873      	ldr	r3, [r6, #4]
   1b29e:	4423      	add	r3, r4
   1b2a0:	42bb      	cmp	r3, r7
   1b2a2:	d2f2      	bcs.n	1b28a <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1b2a4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2a6:	3608      	adds	r6, #8
   1b2a8:	4b08      	ldr	r3, [pc, #32]	; (1b2cc <bt_gatt_foreach_attr_type+0xc4>)
   1b2aa:	429e      	cmp	r6, r3
   1b2ac:	d9f5      	bls.n	1b29a <bt_gatt_foreach_attr_type+0x92>
   1b2ae:	4908      	ldr	r1, [pc, #32]	; (1b2d0 <bt_gatt_foreach_attr_type+0xc8>)
   1b2b0:	4808      	ldr	r0, [pc, #32]	; (1b2d4 <bt_gatt_foreach_attr_type+0xcc>)
   1b2b2:	f240 7221 	movw	r2, #1825	; 0x721
   1b2b6:	f00e fec8 	bl	2a04a <assert_print>
   1b2ba:	4805      	ldr	r0, [pc, #20]	; (1b2d0 <bt_gatt_foreach_attr_type+0xc8>)
   1b2bc:	f240 7121 	movw	r1, #1825	; 0x721
   1b2c0:	f00e febc 	bl	2a03c <assert_post_action>
   1b2c4:	20004156 	.word	0x20004156
   1b2c8:	0002e488 	.word	0x0002e488
   1b2cc:	0002e498 	.word	0x0002e498
   1b2d0:	00031b7d 	.word	0x00031b7d
   1b2d4:	0002f2b5 	.word	0x0002f2b5

0001b2d8 <db_hash_gen>:
{
   1b2d8:	b530      	push	{r4, r5, lr}
   1b2da:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
   1b2dc:	2300      	movs	r3, #0
{
   1b2de:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b2e0:	aa1c      	add	r2, sp, #112	; 0x70
   1b2e2:	4669      	mov	r1, sp
   1b2e4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1b2e6:	e9cd 3300 	strd	r3, r3, [sp]
   1b2ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b2ee:	f00f fccd 	bl	2ac8c <tc_cmac_setup>
   1b2f2:	b928      	cbnz	r0, 1b300 <db_hash_gen+0x28>
		LOG_ERR("Unable to setup AES CMAC");
   1b2f4:	4814      	ldr	r0, [pc, #80]	; (1b348 <db_hash_gen+0x70>)
   1b2f6:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Unable to calculate hash");
   1b2f8:	f00e feb5 	bl	2a066 <z_log_minimal_printk>
}
   1b2fc:	b049      	add	sp, #292	; 0x124
   1b2fe:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1b300:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b304:	2001      	movs	r0, #1
   1b306:	4a11      	ldr	r2, [pc, #68]	; (1b34c <db_hash_gen+0x74>)
   1b308:	ab04      	add	r3, sp, #16
   1b30a:	f011 fb5a 	bl	2c9c2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b30e:	4810      	ldr	r0, [pc, #64]	; (1b350 <db_hash_gen+0x78>)
   1b310:	a904      	add	r1, sp, #16
   1b312:	f00f fd50 	bl	2adb6 <tc_cmac_final>
   1b316:	b910      	cbnz	r0, 1b31e <db_hash_gen+0x46>
		LOG_ERR("Unable to calculate hash");
   1b318:	480e      	ldr	r0, [pc, #56]	; (1b354 <db_hash_gen+0x7c>)
   1b31a:	2145      	movs	r1, #69	; 0x45
   1b31c:	e7ec      	b.n	1b2f8 <db_hash_gen+0x20>
   1b31e:	4b0c      	ldr	r3, [pc, #48]	; (1b350 <db_hash_gen+0x78>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b320:	2208      	movs	r2, #8
   1b322:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b326:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b328:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
   1b32c:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1b330:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b332:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1b334:	d1f7      	bne.n	1b326 <db_hash_gen+0x4e>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   1b336:	b10c      	cbz	r4, 1b33c <db_hash_gen+0x64>
		db_hash_store();
   1b338:	f7ff f9a0 	bl	1a67c <db_hash_store>
   1b33c:	2104      	movs	r1, #4
   1b33e:	4806      	ldr	r0, [pc, #24]	; (1b358 <db_hash_gen+0x80>)
   1b340:	f011 f809 	bl	2c356 <atomic_or>
   1b344:	e7da      	b.n	1b2fc <db_hash_gen+0x24>
   1b346:	bf00      	nop
   1b348:	00031c9a 	.word	0x00031c9a
   1b34c:	0002c27b 	.word	0x0002c27b
   1b350:	20001d70 	.word	0x20001d70
   1b354:	00031cb8 	.word	0x00031cb8
   1b358:	20001e38 	.word	0x20001e38

0001b35c <db_hash_read>:
{
   1b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b35e:	491b      	ldr	r1, [pc, #108]	; (1b3cc <db_hash_read+0x70>)
{
   1b360:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b364:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b366:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b36a:	4615      	mov	r5, r2
   1b36c:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b36e:	f009 fd79 	bl	24e64 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b372:	4817      	ldr	r0, [pc, #92]	; (1b3d0 <db_hash_read+0x74>)
   1b374:	f010 ffe9 	bl	2c34a <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b378:	0741      	lsls	r1, r0, #29
   1b37a:	d402      	bmi.n	1b382 <db_hash_read+0x26>
		db_hash_gen(true);
   1b37c:	2001      	movs	r0, #1
   1b37e:	f7ff ffab 	bl	1b2d8 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1b382:	4620      	mov	r0, r4
   1b384:	f7ff f990 	bl	1a6a8 <find_cf_cfg>
	if (cfg &&
   1b388:	b168      	cbz	r0, 1b3a6 <db_hash_read+0x4a>
   1b38a:	7a03      	ldrb	r3, [r0, #8]
   1b38c:	07da      	lsls	r2, r3, #31
   1b38e:	d50a      	bpl.n	1b3a6 <db_hash_read+0x4a>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b390:	f100 040c 	add.w	r4, r0, #12
   1b394:	4620      	mov	r0, r4
   1b396:	f010 ffd8 	bl	2c34a <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1b39a:	07c3      	lsls	r3, r0, #31
   1b39c:	d403      	bmi.n	1b3a6 <db_hash_read+0x4a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b39e:	2102      	movs	r1, #2
   1b3a0:	4620      	mov	r0, r4
   1b3a2:	f010 ffd8 	bl	2c356 <atomic_or>
	if (offset > value_len) {
   1b3a6:	2e10      	cmp	r6, #16
   1b3a8:	d80c      	bhi.n	1b3c4 <db_hash_read+0x68>
	len = MIN(buf_len, value_len - offset);
   1b3aa:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b3ae:	4909      	ldr	r1, [pc, #36]	; (1b3d4 <db_hash_read+0x78>)
	len = MIN(buf_len, value_len - offset);
   1b3b0:	42bc      	cmp	r4, r7
   1b3b2:	bfa8      	it	ge
   1b3b4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b3b6:	4622      	mov	r2, r4
   1b3b8:	4431      	add	r1, r6
   1b3ba:	4628      	mov	r0, r5
   1b3bc:	f00f fe1b 	bl	2aff6 <memcpy>
}
   1b3c0:	4620      	mov	r0, r4
   1b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b3c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b3c8:	e7fa      	b.n	1b3c0 <db_hash_read+0x64>
   1b3ca:	bf00      	nop
   1b3cc:	20001dc0 	.word	0x20001dc0
   1b3d0:	20001e38 	.word	0x20001e38
   1b3d4:	20001d70 	.word	0x20001d70

0001b3d8 <db_hash_process>:
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b3d8:	f06f 0108 	mvn.w	r1, #8
{
   1b3dc:	b508      	push	{r3, lr}
   1b3de:	4826      	ldr	r0, [pc, #152]	; (1b478 <db_hash_process+0xa0>)
   1b3e0:	f010 ffcb 	bl	2c37a <atomic_and>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   1b3e4:	0701      	lsls	r1, r0, #28
   1b3e6:	d542      	bpl.n	1b46e <db_hash_process+0x96>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b3e8:	4823      	ldr	r0, [pc, #140]	; (1b478 <db_hash_process+0xa0>)
   1b3ea:	f010 ffae 	bl	2c34a <atomic_get>
   1b3ee:	4603      	mov	r3, r0
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b3f0:	075a      	lsls	r2, r3, #29
   1b3f2:	f3c0 0080 	ubfx	r0, r0, #2, #1
   1b3f6:	d401      	bmi.n	1b3fc <db_hash_process+0x24>
			db_hash_gen(false);
   1b3f8:	f7ff ff6e 	bl	1b2d8 <db_hash_gen>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   1b3fc:	491f      	ldr	r1, [pc, #124]	; (1b47c <db_hash_process+0xa4>)
   1b3fe:	2210      	movs	r2, #16
   1b400:	1888      	adds	r0, r1, r2
   1b402:	f00f fdd1 	bl	2afa8 <memcmp>
   1b406:	b948      	cbnz	r0, 1b41c <db_hash_process+0x44>
			k_work_cancel_delayable(&gatt_sc.work);
   1b408:	481d      	ldr	r0, [pc, #116]	; (1b480 <db_hash_process+0xa8>)
   1b40a:	f009 fce5 	bl	24dd8 <k_work_cancel_delayable>
}
   1b40e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b412:	4819      	ldr	r0, [pc, #100]	; (1b478 <db_hash_process+0xa0>)
   1b414:	f06f 0101 	mvn.w	r1, #1
   1b418:	f010 bfaf 	b.w	2c37a <atomic_and>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b41c:	4816      	ldr	r0, [pc, #88]	; (1b478 <db_hash_process+0xa0>)
   1b41e:	2101      	movs	r1, #1
   1b420:	f010 ff99 	bl	2c356 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b424:	f010 0f01 	tst.w	r0, #1
   1b428:	4b16      	ldr	r3, [pc, #88]	; (1b484 <db_hash_process+0xac>)
   1b42a:	d110      	bne.n	1b44e <db_hash_process+0x76>
		gatt_sc.start = start;
   1b42c:	4a16      	ldr	r2, [pc, #88]	; (1b488 <db_hash_process+0xb0>)
   1b42e:	619a      	str	r2, [r3, #24]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b430:	4811      	ldr	r0, [pc, #68]	; (1b478 <db_hash_process+0xa0>)
   1b432:	f010 ff8a 	bl	2c34a <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   1b436:	0783      	lsls	r3, r0, #30
   1b438:	d405      	bmi.n	1b446 <db_hash_process+0x6e>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b43a:	4811      	ldr	r0, [pc, #68]	; (1b480 <db_hash_process+0xa8>)
   1b43c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b440:	2300      	movs	r3, #0
   1b442:	f009 fcc3 	bl	24dcc <k_work_reschedule>
}
   1b446:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_store();
   1b44a:	f7ff b917 	b.w	1a67c <db_hash_store>
	if (new_start >= *start && new_end <= *end) {
   1b44e:	8b1a      	ldrh	r2, [r3, #24]
   1b450:	8b58      	ldrh	r0, [r3, #26]
   1b452:	2a01      	cmp	r2, #1
   1b454:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b458:	d805      	bhi.n	1b466 <db_hash_process+0x8e>
   1b45a:	4290      	cmp	r0, r2
   1b45c:	d0f3      	beq.n	1b446 <db_hash_process+0x6e>
		*end = new_end;
   1b45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b462:	835a      	strh	r2, [r3, #26]
   1b464:	e7e4      	b.n	1b430 <db_hash_process+0x58>
	if (*end < new_end) {
   1b466:	4290      	cmp	r0, r2
		*start = new_start;
   1b468:	8319      	strh	r1, [r3, #24]
	if (*end < new_end) {
   1b46a:	d0e1      	beq.n	1b430 <db_hash_process+0x58>
   1b46c:	e7f7      	b.n	1b45e <db_hash_process+0x86>
}
   1b46e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	db_hash_gen(true);
   1b472:	2001      	movs	r0, #1
   1b474:	f7ff bf30 	b.w	1b2d8 <db_hash_gen>
   1b478:	20001e38 	.word	0x20001e38
   1b47c:	20001d70 	.word	0x20001d70
   1b480:	20001e08 	.word	0x20001e08
   1b484:	20001de8 	.word	0x20001de8
   1b488:	ffff0001 	.word	0xffff0001

0001b48c <ccc_set_direct>:
{
   1b48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b490:	b0b9      	sub	sp, #228	; 0xe4
   1b492:	460c      	mov	r4, r1
   1b494:	4617      	mov	r7, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b496:	492c      	ldr	r1, [pc, #176]	; (1b548 <ccc_set_direct+0xbc>)
   1b498:	9840      	ldr	r0, [sp, #256]	; 0x100
   1b49a:	466a      	mov	r2, sp
{
   1b49c:	4698      	mov	r8, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   1b49e:	f00f f86a 	bl	2a576 <settings_name_steq>
   1b4a2:	b948      	cbnz	r0, 1b4b8 <ccc_set_direct+0x2c>
			LOG_ERR("Invalid key");
   1b4a4:	4829      	ldr	r0, [pc, #164]	; (1b54c <ccc_set_direct+0xc0>)
   1b4a6:	2145      	movs	r1, #69	; 0x45
   1b4a8:	f00e fddd 	bl	2a066 <z_log_minimal_printk>
   1b4ac:	f06f 0515 	mvn.w	r5, #21
}
   1b4b0:	4628      	mov	r0, r5
   1b4b2:	b039      	add	sp, #228	; 0xe4
   1b4b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
   1b4b8:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
   1b4ba:	a901      	add	r1, sp, #4
   1b4bc:	4630      	mov	r0, r6
   1b4be:	f00f f87e 	bl	2a5be <settings_name_next>
		if (!name) {
   1b4c2:	b936      	cbnz	r6, 1b4d2 <ccc_set_direct+0x46>
			LOG_ERR("Insufficient number of arguments");
   1b4c4:	4822      	ldr	r0, [pc, #136]	; (1b550 <ccc_set_direct+0xc4>)
   1b4c6:	2145      	movs	r1, #69	; 0x45
   1b4c8:	f00e fdcd 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1b4cc:	f06f 0415 	mvn.w	r4, #21
   1b4d0:	e02a      	b.n	1b528 <ccc_set_direct+0x9c>
		} else if (!next) {
   1b4d2:	9801      	ldr	r0, [sp, #4]
   1b4d4:	b970      	cbnz	r0, 1b4f4 <ccc_set_direct+0x68>
		err = bt_settings_decode_key(name, &addr);
   1b4d6:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = BT_ID_DEFAULT;
   1b4da:	2300      	movs	r3, #0
		err = bt_settings_decode_key(name, &addr);
   1b4dc:	4649      	mov	r1, r9
   1b4de:	4630      	mov	r0, r6
			load.addr_with_id.id = BT_ID_DEFAULT;
   1b4e0:	f88d 3014 	strb.w	r3, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
   1b4e4:	f00f fdf7 	bl	2b0d6 <bt_settings_decode_key>
		if (err) {
   1b4e8:	4605      	mov	r5, r0
   1b4ea:	b178      	cbz	r0, 1b50c <ccc_set_direct+0x80>
			LOG_ERR("Unable to decode address %s", name);
   1b4ec:	4819      	ldr	r0, [pc, #100]	; (1b554 <ccc_set_direct+0xc8>)
   1b4ee:	4632      	mov	r2, r6
   1b4f0:	2145      	movs	r1, #69	; 0x45
   1b4f2:	e008      	b.n	1b506 <ccc_set_direct+0x7a>
			unsigned long next_id = strtoul(next, NULL, 10);
   1b4f4:	220a      	movs	r2, #10
   1b4f6:	2100      	movs	r1, #0
   1b4f8:	f00f fca5 	bl	2ae46 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   1b4fc:	4602      	mov	r2, r0
   1b4fe:	2800      	cmp	r0, #0
   1b500:	d0e9      	beq.n	1b4d6 <ccc_set_direct+0x4a>
				LOG_ERR("Invalid local identity %lu", next_id);
   1b502:	4815      	ldr	r0, [pc, #84]	; (1b558 <ccc_set_direct+0xcc>)
   1b504:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to decode address %s", name);
   1b506:	f00e fdae 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1b50a:	e7df      	b.n	1b4cc <ccc_set_direct+0x40>
		load.addr_with_id.addr = &addr;
   1b50c:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
   1b510:	b1c4      	cbz	r4, 1b544 <ccc_set_direct+0xb8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   1b512:	22c0      	movs	r2, #192	; 0xc0
   1b514:	a908      	add	r1, sp, #32
   1b516:	4640      	mov	r0, r8
   1b518:	47b8      	blx	r7
			if (len < 0) {
   1b51a:	1e04      	subs	r4, r0, #0
   1b51c:	da06      	bge.n	1b52c <ccc_set_direct+0xa0>
				LOG_ERR("Failed to decode value (err %zd)", len);
   1b51e:	480f      	ldr	r0, [pc, #60]	; (1b55c <ccc_set_direct+0xd0>)
   1b520:	4622      	mov	r2, r4
   1b522:	2145      	movs	r1, #69	; 0x45
   1b524:	f00e fd9f 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1b528:	4625      	mov	r5, r4
   1b52a:	e7c1      	b.n	1b4b0 <ccc_set_direct+0x24>
			load.count = len / sizeof(*ccc_store);
   1b52c:	08a4      	lsrs	r4, r4, #2
			for (size_t i = 0; i < load.count; i++) {
   1b52e:	ab08      	add	r3, sp, #32
			load.count = len / sizeof(*ccc_store);
   1b530:	e9cd 3406 	strd	r3, r4, [sp, #24]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
   1b534:	4a0a      	ldr	r2, [pc, #40]	; (1b560 <ccc_set_direct+0xd4>)
   1b536:	ab04      	add	r3, sp, #16
   1b538:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b53c:	2001      	movs	r0, #1
   1b53e:	f011 fa40 	bl	2c9c2 <bt_gatt_foreach_attr>
	return 0;
   1b542:	e7b5      	b.n	1b4b0 <ccc_set_direct+0x24>
   1b544:	4623      	mov	r3, r4
   1b546:	e7f3      	b.n	1b530 <ccc_set_direct+0xa4>
   1b548:	00031cd6 	.word	0x00031cd6
   1b54c:	00031cdd 	.word	0x00031cdd
   1b550:	000305e4 	.word	0x000305e4
   1b554:	00031adc 	.word	0x00031adc
   1b558:	00031afd 	.word	0x00031afd
   1b55c:	00031a0d 	.word	0x00031a0d
   1b560:	0001a8a5 	.word	0x0001a8a5

0001b564 <bt_gatt_attr_next>:
{
   1b564:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b566:	2300      	movs	r3, #0
   1b568:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b56a:	f7ff fe0d 	bl	1b188 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b56e:	1c41      	adds	r1, r0, #1
   1b570:	b289      	uxth	r1, r1
   1b572:	4608      	mov	r0, r1
   1b574:	4a03      	ldr	r2, [pc, #12]	; (1b584 <bt_gatt_attr_next+0x20>)
   1b576:	ab01      	add	r3, sp, #4
   1b578:	f011 fa23 	bl	2c9c2 <bt_gatt_foreach_attr>
}
   1b57c:	9801      	ldr	r0, [sp, #4]
   1b57e:	b003      	add	sp, #12
   1b580:	f85d fb04 	ldr.w	pc, [sp], #4
   1b584:	0002c229 	.word	0x0002c229

0001b588 <bt_gatt_is_subscribed>:
{
   1b588:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b58c:	460c      	mov	r4, r1
   1b58e:	4617      	mov	r7, r2
	__ASSERT(conn, "invalid parameter\n");
   1b590:	4605      	mov	r5, r0
   1b592:	b950      	cbnz	r0, 1b5aa <bt_gatt_is_subscribed+0x22>
   1b594:	4953      	ldr	r1, [pc, #332]	; (1b6e4 <bt_gatt_is_subscribed+0x15c>)
   1b596:	4854      	ldr	r0, [pc, #336]	; (1b6e8 <bt_gatt_is_subscribed+0x160>)
   1b598:	f640 424d 	movw	r2, #3149	; 0xc4d
   1b59c:	f00e fd55 	bl	2a04a <assert_print>
   1b5a0:	f640 414d 	movw	r1, #3149	; 0xc4d
	__ASSERT(attr, "invalid parameter\n");
   1b5a4:	484f      	ldr	r0, [pc, #316]	; (1b6e4 <bt_gatt_is_subscribed+0x15c>)
   1b5a6:	f00e fd49 	bl	2a03c <assert_post_action>
   1b5aa:	b941      	cbnz	r1, 1b5be <bt_gatt_is_subscribed+0x36>
   1b5ac:	494d      	ldr	r1, [pc, #308]	; (1b6e4 <bt_gatt_is_subscribed+0x15c>)
   1b5ae:	484e      	ldr	r0, [pc, #312]	; (1b6e8 <bt_gatt_is_subscribed+0x160>)
   1b5b0:	f640 424e 	movw	r2, #3150	; 0xc4e
   1b5b4:	f00e fd49 	bl	2a04a <assert_print>
   1b5b8:	f640 414e 	movw	r1, #3150	; 0xc4e
   1b5bc:	e7f2      	b.n	1b5a4 <bt_gatt_is_subscribed+0x1c>
	if (conn->state != BT_CONN_CONNECTED) {
   1b5be:	7b43      	ldrb	r3, [r0, #13]
   1b5c0:	2b07      	cmp	r3, #7
   1b5c2:	d110      	bne.n	1b5e6 <bt_gatt_is_subscribed+0x5e>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b5c4:	2300      	movs	r3, #0
   1b5c6:	f88d 300c 	strb.w	r3, [sp, #12]
   1b5ca:	6820      	ldr	r0, [r4, #0]
   1b5cc:	f642 0303 	movw	r3, #10243	; 0x2803
   1b5d0:	a903      	add	r1, sp, #12
   1b5d2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b5d6:	f00f fda2 	bl	2b11e <bt_uuid_cmp>
   1b5da:	b9b0      	cbnz	r0, 1b60a <bt_gatt_is_subscribed+0x82>
		if (!(chrc->properties &
   1b5dc:	68e3      	ldr	r3, [r4, #12]
   1b5de:	799b      	ldrb	r3, [r3, #6]
   1b5e0:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b5e4:	d103      	bne.n	1b5ee <bt_gatt_is_subscribed+0x66>
		return false;
   1b5e6:	2000      	movs	r0, #0
}
   1b5e8:	b004      	add	sp, #16
   1b5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	f7ff ffb8 	bl	1b564 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b5f4:	4604      	mov	r4, r0
   1b5f6:	b940      	cbnz	r0, 1b60a <bt_gatt_is_subscribed+0x82>
   1b5f8:	493a      	ldr	r1, [pc, #232]	; (1b6e4 <bt_gatt_is_subscribed+0x15c>)
   1b5fa:	483b      	ldr	r0, [pc, #236]	; (1b6e8 <bt_gatt_is_subscribed+0x160>)
   1b5fc:	f640 425f 	movw	r2, #3167	; 0xc5f
   1b600:	f00e fd23 	bl	2a04a <assert_print>
   1b604:	f640 415f 	movw	r1, #3167	; 0xc5f
   1b608:	e7cc      	b.n	1b5a4 <bt_gatt_is_subscribed+0x1c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b60a:	2300      	movs	r3, #0
   1b60c:	6820      	ldr	r0, [r4, #0]
   1b60e:	f88d 300c 	strb.w	r3, [sp, #12]
   1b612:	a903      	add	r1, sp, #12
   1b614:	f642 1302 	movw	r3, #10498	; 0x2902
   1b618:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b61c:	f00f fd7f 	bl	2b11e <bt_uuid_cmp>
   1b620:	b168      	cbz	r0, 1b63e <bt_gatt_is_subscribed+0xb6>
		attr = bt_gatt_attr_next(attr);
   1b622:	4620      	mov	r0, r4
   1b624:	f7ff ff9e 	bl	1b564 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b628:	4604      	mov	r4, r0
   1b62a:	b940      	cbnz	r0, 1b63e <bt_gatt_is_subscribed+0xb6>
   1b62c:	492d      	ldr	r1, [pc, #180]	; (1b6e4 <bt_gatt_is_subscribed+0x15c>)
   1b62e:	482e      	ldr	r0, [pc, #184]	; (1b6e8 <bt_gatt_is_subscribed+0x160>)
   1b630:	f640 4265 	movw	r2, #3173	; 0xc65
   1b634:	f00e fd09 	bl	2a04a <assert_print>
   1b638:	f640 4165 	movw	r1, #3173	; 0xc65
   1b63c:	e7b2      	b.n	1b5a4 <bt_gatt_is_subscribed+0x1c>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b63e:	2600      	movs	r6, #0
   1b640:	f642 1802 	movw	r8, #10498	; 0x2902
   1b644:	6820      	ldr	r0, [r4, #0]
   1b646:	f88d 6000 	strb.w	r6, [sp]
   1b64a:	4669      	mov	r1, sp
   1b64c:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b650:	f00f fd65 	bl	2b11e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b654:	b9d8      	cbnz	r0, 1b68e <bt_gatt_is_subscribed+0x106>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b656:	2300      	movs	r3, #0
   1b658:	6820      	ldr	r0, [r4, #0]
   1b65a:	f88d 300c 	strb.w	r3, [sp, #12]
   1b65e:	a903      	add	r1, sp, #12
   1b660:	f642 1302 	movw	r3, #10498	; 0x2902
   1b664:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b668:	f00f fd59 	bl	2b11e <bt_uuid_cmp>
   1b66c:	2800      	cmp	r0, #0
   1b66e:	d1ba      	bne.n	1b5e6 <bt_gatt_is_subscribed+0x5e>
	ccc = attr->user_data;
   1b670:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b672:	4622      	mov	r2, r4
   1b674:	4628      	mov	r0, r5
   1b676:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b67a:	f00f ffc1 	bl	2b600 <bt_conn_is_peer_addr_le>
   1b67e:	2800      	cmp	r0, #0
   1b680:	d0b1      	beq.n	1b5e6 <bt_gatt_is_subscribed+0x5e>
   1b682:	8923      	ldrh	r3, [r4, #8]
   1b684:	421f      	tst	r7, r3
   1b686:	bf14      	ite	ne
   1b688:	2001      	movne	r0, #1
   1b68a:	2000      	moveq	r0, #0
   1b68c:	e7ac      	b.n	1b5e8 <bt_gatt_is_subscribed+0x60>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b68e:	6820      	ldr	r0, [r4, #0]
   1b690:	f88d 6004 	strb.w	r6, [sp, #4]
   1b694:	f642 0303 	movw	r3, #10243	; 0x2803
   1b698:	a901      	add	r1, sp, #4
   1b69a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b69e:	f00f fd3e 	bl	2b11e <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b6a2:	2800      	cmp	r0, #0
   1b6a4:	d0d7      	beq.n	1b656 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b6a6:	6820      	ldr	r0, [r4, #0]
   1b6a8:	f88d 6008 	strb.w	r6, [sp, #8]
   1b6ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b6b0:	a902      	add	r1, sp, #8
   1b6b2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b6b6:	f00f fd32 	bl	2b11e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b6ba:	2800      	cmp	r0, #0
   1b6bc:	d0cb      	beq.n	1b656 <bt_gatt_is_subscribed+0xce>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b6be:	6820      	ldr	r0, [r4, #0]
   1b6c0:	f88d 600c 	strb.w	r6, [sp, #12]
   1b6c4:	f642 0301 	movw	r3, #10241	; 0x2801
   1b6c8:	a903      	add	r1, sp, #12
   1b6ca:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b6ce:	f00f fd26 	bl	2b11e <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b6d2:	2800      	cmp	r0, #0
   1b6d4:	d0bf      	beq.n	1b656 <bt_gatt_is_subscribed+0xce>
		attr = bt_gatt_attr_next(attr);
   1b6d6:	4620      	mov	r0, r4
   1b6d8:	f7ff ff44 	bl	1b564 <bt_gatt_attr_next>
		if (!attr) {
   1b6dc:	4604      	mov	r4, r0
   1b6de:	2800      	cmp	r0, #0
   1b6e0:	d1b0      	bne.n	1b644 <bt_gatt_is_subscribed+0xbc>
   1b6e2:	e780      	b.n	1b5e6 <bt_gatt_is_subscribed+0x5e>
   1b6e4:	00031b7d 	.word	0x00031b7d
   1b6e8:	0002f2b5 	.word	0x0002f2b5

0001b6ec <gatt_indicate>:
{
   1b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b6f0:	4615      	mov	r5, r2
   1b6f2:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b6f4:	2294      	movs	r2, #148	; 0x94
   1b6f6:	6869      	ldr	r1, [r5, #4]
{
   1b6f8:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b6fa:	f011 f96d 	bl	2c9d8 <bt_gatt_check_perm>
   1b6fe:	4680      	mov	r8, r0
   1b700:	b140      	cbz	r0, 1b714 <gatt_indicate+0x28>
		LOG_WRN("Link is not encrypted");
   1b702:	482d      	ldr	r0, [pc, #180]	; (1b7b8 <gatt_indicate+0xcc>)
   1b704:	2157      	movs	r1, #87	; 0x57
   1b706:	f00e fcae 	bl	2a066 <z_log_minimal_printk>
		return -EPERM;
   1b70a:	f04f 35ff 	mov.w	r5, #4294967295
}
   1b70e:	4628      	mov	r0, r5
   1b710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b714:	6869      	ldr	r1, [r5, #4]
   1b716:	2202      	movs	r2, #2
   1b718:	4630      	mov	r0, r6
   1b71a:	f7ff ff35 	bl	1b588 <bt_gatt_is_subscribed>
   1b71e:	b930      	cbnz	r0, 1b72e <gatt_indicate+0x42>
			LOG_WRN("Device is not subscribed to characteristic");
   1b720:	4826      	ldr	r0, [pc, #152]	; (1b7bc <gatt_indicate+0xd0>)
   1b722:	2157      	movs	r1, #87	; 0x57
   1b724:	f00e fc9f 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1b728:	f06f 0515 	mvn.w	r5, #21
   1b72c:	e7ef      	b.n	1b70e <gatt_indicate+0x22>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b72e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b732:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b734:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b736:	f7fe fdb7 	bl	1a2a8 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b73a:	3702      	adds	r7, #2
	if (!req) {
   1b73c:	4604      	mov	r4, r0
   1b73e:	b1a0      	cbz	r0, 1b76a <gatt_indicate+0x7e>
	req->func = func;
   1b740:	4b1f      	ldr	r3, [pc, #124]	; (1b7c0 <gatt_indicate+0xd4>)
	req->len = len;
   1b742:	6147      	str	r7, [r0, #20]
	req->att_op = op;
   1b744:	211d      	movs	r1, #29
   1b746:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
   1b748:	f8c0 800c 	str.w	r8, [r0, #12]
	req->func = func;
   1b74c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b74e:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b750:	463a      	mov	r2, r7
   1b752:	4630      	mov	r0, r6
   1b754:	f7fe fae2 	bl	19d1c <bt_att_create_pdu>
	if (!buf) {
   1b758:	4607      	mov	r7, r0
   1b75a:	b948      	cbnz	r0, 1b770 <gatt_indicate+0x84>
		LOG_WRN("No buffer available to send indication");
   1b75c:	4819      	ldr	r0, [pc, #100]	; (1b7c4 <gatt_indicate+0xd8>)
   1b75e:	2157      	movs	r1, #87	; 0x57
   1b760:	f00e fc81 	bl	2a066 <z_log_minimal_printk>
		bt_att_req_free(req);
   1b764:	4620      	mov	r0, r4
   1b766:	f7fe fdc1 	bl	1a2ec <bt_att_req_free>
		return -ENOMEM;
   1b76a:	f06f 050b 	mvn.w	r5, #11
   1b76e:	e7ce      	b.n	1b70e <gatt_indicate+0x22>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1b770:	2301      	movs	r3, #1
   1b772:	4642      	mov	r2, r8
   1b774:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1b776:	f107 0a0c 	add.w	sl, r7, #12
   1b77a:	f010 fd4e 	bl	2c21a <bt_att_set_tx_meta_data>
   1b77e:	2102      	movs	r1, #2
   1b780:	4650      	mov	r0, sl
   1b782:	f003 fc73 	bl	1f06c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b786:	4680      	mov	r8, r0
   1b788:	4650      	mov	r0, sl
   1b78a:	f828 9b02 	strh.w	r9, [r8], #2
   1b78e:	8aa9      	ldrh	r1, [r5, #20]
   1b790:	f003 fc6c 	bl	1f06c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b794:	8aaa      	ldrh	r2, [r5, #20]
   1b796:	6929      	ldr	r1, [r5, #16]
   1b798:	4640      	mov	r0, r8
   1b79a:	f00f fc2c 	bl	2aff6 <memcpy>
	req->buf = buf;
   1b79e:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b7a0:	4621      	mov	r1, r4
   1b7a2:	4630      	mov	r0, r6
   1b7a4:	f7fe fef6 	bl	1a594 <bt_att_req_send>
	if (err) {
   1b7a8:	4605      	mov	r5, r0
   1b7aa:	2800      	cmp	r0, #0
   1b7ac:	d0af      	beq.n	1b70e <gatt_indicate+0x22>
		bt_att_req_free(req);
   1b7ae:	4620      	mov	r0, r4
   1b7b0:	f7fe fd9c 	bl	1a2ec <bt_att_req_free>
   1b7b4:	e7ab      	b.n	1b70e <gatt_indicate+0x22>
   1b7b6:	bf00      	nop
   1b7b8:	00031cee 	.word	0x00031cee
   1b7bc:	00031d09 	.word	0x00031d09
   1b7c0:	0002c243 	.word	0x0002c243
   1b7c4:	00031d39 	.word	0x00031d39

0001b7c8 <bt_gatt_indicate>:
{
   1b7c8:	b530      	push	{r4, r5, lr}
   1b7ca:	4605      	mov	r5, r0
   1b7cc:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b7ce:	460c      	mov	r4, r1
   1b7d0:	b951      	cbnz	r1, 1b7e8 <bt_gatt_indicate+0x20>
   1b7d2:	4942      	ldr	r1, [pc, #264]	; (1b8dc <bt_gatt_indicate+0x114>)
   1b7d4:	4842      	ldr	r0, [pc, #264]	; (1b8e0 <bt_gatt_indicate+0x118>)
   1b7d6:	f640 320d 	movw	r2, #2829	; 0xb0d
   1b7da:	f00e fc36 	bl	2a04a <assert_print>
   1b7de:	f640 310d 	movw	r1, #2829	; 0xb0d
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b7e2:	483e      	ldr	r0, [pc, #248]	; (1b8dc <bt_gatt_indicate+0x114>)
   1b7e4:	f00e fc2a 	bl	2a03c <assert_post_action>
   1b7e8:	684b      	ldr	r3, [r1, #4]
   1b7ea:	b953      	cbnz	r3, 1b802 <bt_gatt_indicate+0x3a>
   1b7ec:	680b      	ldr	r3, [r1, #0]
   1b7ee:	b943      	cbnz	r3, 1b802 <bt_gatt_indicate+0x3a>
   1b7f0:	493a      	ldr	r1, [pc, #232]	; (1b8dc <bt_gatt_indicate+0x114>)
   1b7f2:	483b      	ldr	r0, [pc, #236]	; (1b8e0 <bt_gatt_indicate+0x118>)
   1b7f4:	f640 320e 	movw	r2, #2830	; 0xb0e
   1b7f8:	f00e fc27 	bl	2a04a <assert_print>
   1b7fc:	f640 310e 	movw	r1, #2830	; 0xb0e
   1b800:	e7ef      	b.n	1b7e2 <bt_gatt_indicate+0x1a>
   1b802:	4838      	ldr	r0, [pc, #224]	; (1b8e4 <bt_gatt_indicate+0x11c>)
   1b804:	f010 fda1 	bl	2c34a <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b808:	0742      	lsls	r2, r0, #29
   1b80a:	d561      	bpl.n	1b8d0 <bt_gatt_indicate+0x108>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b80c:	b115      	cbz	r5, 1b814 <bt_gatt_indicate+0x4c>
   1b80e:	7b6b      	ldrb	r3, [r5, #13]
   1b810:	2b07      	cmp	r3, #7
   1b812:	d160      	bne.n	1b8d6 <bt_gatt_indicate+0x10e>
	data.attr = params->attr;
   1b814:	6860      	ldr	r0, [r4, #4]
   1b816:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b818:	f7ff fcb6 	bl	1b188 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b81c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b81e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b822:	b33a      	cbz	r2, 1b874 <bt_gatt_indicate+0xac>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b824:	a905      	add	r1, sp, #20
   1b826:	9102      	str	r1, [sp, #8]
   1b828:	492f      	ldr	r1, [pc, #188]	; (1b8e8 <bt_gatt_indicate+0x120>)
   1b82a:	9101      	str	r1, [sp, #4]
   1b82c:	2101      	movs	r1, #1
	found->attr = NULL;
   1b82e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b830:	9100      	str	r1, [sp, #0]
   1b832:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b836:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b838:	f7ff fce6 	bl	1b208 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b83c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b83e:	b91b      	cbnz	r3, 1b848 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1b840:	f06f 0001 	mvn.w	r0, #1
}
   1b844:	b00b      	add	sp, #44	; 0x2c
   1b846:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b848:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b84a:	9b05      	ldr	r3, [sp, #20]
   1b84c:	6818      	ldr	r0, [r3, #0]
   1b84e:	2300      	movs	r3, #0
   1b850:	f88d 3010 	strb.w	r3, [sp, #16]
   1b854:	a904      	add	r1, sp, #16
   1b856:	f642 0303 	movw	r3, #10243	; 0x2803
   1b85a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b85e:	f00f fc5e 	bl	2b11e <bt_uuid_cmp>
   1b862:	b970      	cbnz	r0, 1b882 <bt_gatt_indicate+0xba>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b864:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b866:	68c3      	ldr	r3, [r0, #12]
   1b868:	799b      	ldrb	r3, [r3, #6]
   1b86a:	069b      	lsls	r3, r3, #26
   1b86c:	d405      	bmi.n	1b87a <bt_gatt_indicate+0xb2>
			return -EINVAL;
   1b86e:	f06f 0015 	mvn.w	r0, #21
   1b872:	e7e7      	b.n	1b844 <bt_gatt_indicate+0x7c>
		if (!data.handle) {
   1b874:	2800      	cmp	r0, #0
   1b876:	d1e8      	bne.n	1b84a <bt_gatt_indicate+0x82>
   1b878:	e7e2      	b.n	1b840 <bt_gatt_indicate+0x78>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b87a:	f011 f854 	bl	2c926 <bt_gatt_attr_value_handle>
   1b87e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b882:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b886:	b13d      	cbz	r5, 1b898 <bt_gatt_indicate+0xd0>
		params->_ref = 1;
   1b888:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b88a:	4601      	mov	r1, r0
		params->_ref = 1;
   1b88c:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b88e:	4622      	mov	r2, r4
   1b890:	4628      	mov	r0, r5
   1b892:	f7ff ff2b 	bl	1b6ec <gatt_indicate>
   1b896:	e7d5      	b.n	1b844 <bt_gatt_indicate+0x7c>
	data.err = -ENOTCONN;
   1b898:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b89c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b89e:	2302      	movs	r3, #2
   1b8a0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8a4:	f642 1302 	movw	r3, #10498	; 0x2902
   1b8a8:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b8ac:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b8ae:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8b0:	9302      	str	r3, [sp, #8]
   1b8b2:	4b0e      	ldr	r3, [pc, #56]	; (1b8ec <bt_gatt_indicate+0x124>)
   1b8b4:	9301      	str	r3, [sp, #4]
   1b8b6:	2301      	movs	r3, #1
   1b8b8:	9300      	str	r3, [sp, #0]
   1b8ba:	aa04      	add	r2, sp, #16
   1b8bc:	462b      	mov	r3, r5
   1b8be:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b8c2:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8c4:	f88d 5010 	strb.w	r5, [sp, #16]
   1b8c8:	f7ff fc9e 	bl	1b208 <bt_gatt_foreach_attr_type>
	return data.err;
   1b8cc:	9807      	ldr	r0, [sp, #28]
   1b8ce:	e7b9      	b.n	1b844 <bt_gatt_indicate+0x7c>
		return -EAGAIN;
   1b8d0:	f06f 000a 	mvn.w	r0, #10
   1b8d4:	e7b6      	b.n	1b844 <bt_gatt_indicate+0x7c>
		return -ENOTCONN;
   1b8d6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b8da:	e7b3      	b.n	1b844 <bt_gatt_indicate+0x7c>
   1b8dc:	00031b7d 	.word	0x00031b7d
   1b8e0:	0002f2b5 	.word	0x0002f2b5
   1b8e4:	20000444 	.word	0x20000444
   1b8e8:	0002c269 	.word	0x0002c269
   1b8ec:	0001bb0d 	.word	0x0001bb0d

0001b8f0 <sc_process>:
{
   1b8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b8f2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
   1b8f6:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b8f8:	f1a0 0720 	sub.w	r7, r0, #32
   1b8fc:	4628      	mov	r0, r5
   1b8fe:	f010 fd24 	bl	2c34a <atomic_get>
   1b902:	0783      	lsls	r3, r0, #30
   1b904:	f3c0 0640 	ubfx	r6, r0, #1, #1
   1b908:	d50a      	bpl.n	1b920 <sc_process+0x30>
   1b90a:	4917      	ldr	r1, [pc, #92]	; (1b968 <sc_process+0x78>)
   1b90c:	4817      	ldr	r0, [pc, #92]	; (1b96c <sc_process+0x7c>)
   1b90e:	f240 429a 	movw	r2, #1178	; 0x49a
   1b912:	f00e fb9a 	bl	2a04a <assert_print>
   1b916:	4814      	ldr	r0, [pc, #80]	; (1b968 <sc_process+0x78>)
   1b918:	f240 419a 	movw	r1, #1178	; 0x49a
   1b91c:	f00e fb8e 	bl	2a03c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b920:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b924:	9301      	str	r3, [sp, #4]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1b926:	f06f 0101 	mvn.w	r1, #1
   1b92a:	4628      	mov	r0, r5
   1b92c:	f010 fd25 	bl	2c37a <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b930:	4b0f      	ldr	r3, [pc, #60]	; (1b970 <sc_process+0x80>)
   1b932:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1b936:	4b0f      	ldr	r3, [pc, #60]	; (1b974 <sc_process+0x84>)
   1b938:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1b93c:	ab01      	add	r3, sp, #4
   1b93e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1b942:	2304      	movs	r3, #4
	sc->start = 0U;
   1b944:	f824 6c08 	strh.w	r6, [r4, #-8]
	sc->end = 0U;
   1b948:	f824 6c06 	strh.w	r6, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1b94c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b950:	4639      	mov	r1, r7
   1b952:	4630      	mov	r0, r6
   1b954:	f7ff ff38 	bl	1b7c8 <bt_gatt_indicate>
   1b958:	b918      	cbnz	r0, 1b962 <sc_process+0x72>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b95a:	2102      	movs	r1, #2
   1b95c:	4628      	mov	r0, r5
   1b95e:	f010 fcfa 	bl	2c356 <atomic_or>
}
   1b962:	b003      	add	sp, #12
   1b964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b966:	bf00      	nop
   1b968:	00031b7d 	.word	0x00031b7d
   1b96c:	0002f2b5 	.word	0x0002f2b5
   1b970:	0002eb00 	.word	0x0002eb00
   1b974:	0001b041 	.word	0x0001b041

0001b978 <update_ccc>:
{
   1b978:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b97c:	4b33      	ldr	r3, [pc, #204]	; (1ba4c <update_ccc+0xd4>)
	struct bt_conn *conn = data->conn;
   1b97e:	6814      	ldr	r4, [r2, #0]
{
   1b980:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b982:	6882      	ldr	r2, [r0, #8]
   1b984:	429a      	cmp	r2, r3
{
   1b986:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b988:	d116      	bne.n	1b9b8 <update_ccc+0x40>
	ccc = attr->user_data;
   1b98a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1b98c:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b98e:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1b990:	b193      	cbz	r3, 1b9b8 <update_ccc+0x40>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b992:	7831      	ldrb	r1, [r6, #0]
   1b994:	4620      	mov	r0, r4
   1b996:	f00f fe33 	bl	2b600 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1b99a:	b168      	cbz	r0, 1b9b8 <update_ccc+0x40>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b99c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b9a0:	4629      	mov	r1, r5
   1b9a2:	4620      	mov	r0, r4
   1b9a4:	f011 f818 	bl	2c9d8 <bt_gatt_check_perm>
		if (err) {
   1b9a8:	b1d8      	cbz	r0, 1b9e2 <update_ccc+0x6a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b9aa:	2803      	cmp	r0, #3
   1b9ac:	d108      	bne.n	1b9c0 <update_ccc+0x48>
				LOG_WRN("CCC %p not writable", attr);
   1b9ae:	4828      	ldr	r0, [pc, #160]	; (1ba50 <update_ccc+0xd8>)
   1b9b0:	462a      	mov	r2, r5
   1b9b2:	2157      	movs	r1, #87	; 0x57
   1b9b4:	f00e fb57 	bl	2a066 <z_log_minimal_printk>
}
   1b9b8:	2001      	movs	r0, #1
   1b9ba:	b002      	add	sp, #8
   1b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			sec = BT_SECURITY_L2;
   1b9c0:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
   1b9c2:	4620      	mov	r0, r4
			sec = BT_SECURITY_L2;
   1b9c4:	bf0c      	ite	eq
   1b9c6:	f04f 0803 	moveq.w	r8, #3
   1b9ca:	f04f 0802 	movne.w	r8, #2
			    bt_conn_get_security(conn) < sec) {
   1b9ce:	f00f fe15 	bl	2b5fc <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   1b9d2:	4580      	cmp	r8, r0
   1b9d4:	d905      	bls.n	1b9e2 <update_ccc+0x6a>
				if (data->sec < sec) {
   1b9d6:	793b      	ldrb	r3, [r7, #4]
   1b9d8:	4543      	cmp	r3, r8
   1b9da:	d2ed      	bcs.n	1b9b8 <update_ccc+0x40>
					data->sec = sec;
   1b9dc:	f887 8004 	strb.w	r8, [r7, #4]
   1b9e0:	e7ea      	b.n	1b9b8 <update_ccc+0x40>
		gatt_ccc_changed(attr, ccc);
   1b9e2:	4631      	mov	r1, r6
   1b9e4:	4628      	mov	r0, r5
   1b9e6:	f010 fc22 	bl	2c22e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b9ea:	4b1a      	ldr	r3, [pc, #104]	; (1ba54 <update_ccc+0xdc>)
   1b9ec:	429e      	cmp	r6, r3
   1b9ee:	d1e3      	bne.n	1b9b8 <update_ccc+0x40>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b9f0:	7a20      	ldrb	r0, [r4, #8]
   1b9f2:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1b9f6:	f7fe fe85 	bl	1a704 <find_sc_cfg>
	if (!cfg) {
   1b9fa:	2800      	cmp	r0, #0
   1b9fc:	d0dc      	beq.n	1b9b8 <update_ccc+0x40>
	if (!(cfg->data.start || cfg->data.end)) {
   1b9fe:	8902      	ldrh	r2, [r0, #8]
   1ba00:	8943      	ldrh	r3, [r0, #10]
   1ba02:	ea52 0103 	orrs.w	r1, r2, r3
   1ba06:	d0d7      	beq.n	1b9b8 <update_ccc+0x40>
	index = bt_conn_index(conn);
   1ba08:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1ba0a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1ba0e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1ba12:	f7fc ff63 	bl	188dc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba16:	4910      	ldr	r1, [pc, #64]	; (1ba58 <update_ccc+0xe0>)
   1ba18:	4a10      	ldr	r2, [pc, #64]	; (1ba5c <update_ccc+0xe4>)
   1ba1a:	2318      	movs	r3, #24
   1ba1c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba20:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba22:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1ba24:	4a0e      	ldr	r2, [pc, #56]	; (1ba60 <update_ccc+0xe8>)
   1ba26:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1ba28:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba2a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1ba2e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1ba30:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba32:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1ba36:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba38:	4620      	mov	r0, r4
   1ba3a:	f7ff fec5 	bl	1b7c8 <bt_gatt_indicate>
   1ba3e:	2800      	cmp	r0, #0
   1ba40:	d0ba      	beq.n	1b9b8 <update_ccc+0x40>
		LOG_ERR("SC restore indication failed");
   1ba42:	4808      	ldr	r0, [pc, #32]	; (1ba64 <update_ccc+0xec>)
   1ba44:	2145      	movs	r1, #69	; 0x45
   1ba46:	f00e fb0e 	bl	2a066 <z_log_minimal_printk>
   1ba4a:	e7b5      	b.n	1b9b8 <update_ccc+0x40>
   1ba4c:	0001af15 	.word	0x0001af15
   1ba50:	00031d65 	.word	0x00031d65
   1ba54:	20000658 	.word	0x20000658
   1ba58:	20003280 	.word	0x20003280
   1ba5c:	0002eb00 	.word	0x0002eb00
   1ba60:	0002c8df 	.word	0x0002c8df
   1ba64:	00031d7e 	.word	0x00031d7e

0001ba68 <gatt_notify>:
{
   1ba68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ba6c:	4614      	mov	r4, r2
   1ba6e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ba70:	2294      	movs	r2, #148	; 0x94
   1ba72:	6861      	ldr	r1, [r4, #4]
{
   1ba74:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1ba76:	f010 ffaf 	bl	2c9d8 <bt_gatt_check_perm>
   1ba7a:	b138      	cbz	r0, 1ba8c <gatt_notify+0x24>
		LOG_WRN("Link is not encrypted");
   1ba7c:	4820      	ldr	r0, [pc, #128]	; (1bb00 <gatt_notify+0x98>)
   1ba7e:	2157      	movs	r1, #87	; 0x57
   1ba80:	f00e faf1 	bl	2a066 <z_log_minimal_printk>
		return -EPERM;
   1ba84:	f04f 30ff 	mov.w	r0, #4294967295
}
   1ba88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1ba8c:	6861      	ldr	r1, [r4, #4]
   1ba8e:	2201      	movs	r2, #1
   1ba90:	4630      	mov	r0, r6
   1ba92:	f7ff fd79 	bl	1b588 <bt_gatt_is_subscribed>
   1ba96:	b930      	cbnz	r0, 1baa6 <gatt_notify+0x3e>
			LOG_WRN("Device is not subscribed to characteristic");
   1ba98:	481a      	ldr	r0, [pc, #104]	; (1bb04 <gatt_notify+0x9c>)
   1ba9a:	2157      	movs	r1, #87	; 0x57
   1ba9c:	f00e fae3 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   1baa0:	f06f 0015 	mvn.w	r0, #21
   1baa4:	e7f0      	b.n	1ba88 <gatt_notify+0x20>
				sizeof(*nfy) + params->len);
   1baa6:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1baa8:	211b      	movs	r1, #27
   1baaa:	3202      	adds	r2, #2
   1baac:	4630      	mov	r0, r6
   1baae:	f7fe f935 	bl	19d1c <bt_att_create_pdu>
	if (!buf) {
   1bab2:	4605      	mov	r5, r0
   1bab4:	b930      	cbnz	r0, 1bac4 <gatt_notify+0x5c>
		LOG_WRN("No buffer available to send notification");
   1bab6:	4814      	ldr	r0, [pc, #80]	; (1bb08 <gatt_notify+0xa0>)
   1bab8:	2157      	movs	r1, #87	; 0x57
   1baba:	f00e fad4 	bl	2a066 <z_log_minimal_printk>
		return -ENOMEM;
   1babe:	f06f 000b 	mvn.w	r0, #11
   1bac2:	e7e1      	b.n	1ba88 <gatt_notify+0x20>
   1bac4:	f100 090c 	add.w	r9, r0, #12
   1bac8:	2102      	movs	r1, #2
   1baca:	4648      	mov	r0, r9
   1bacc:	f003 face 	bl	1f06c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bad0:	4607      	mov	r7, r0
   1bad2:	4648      	mov	r0, r9
   1bad4:	f827 8b02 	strh.w	r8, [r7], #2
   1bad8:	89a1      	ldrh	r1, [r4, #12]
   1bada:	f003 fac7 	bl	1f06c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1bade:	89a2      	ldrh	r2, [r4, #12]
   1bae0:	68a1      	ldr	r1, [r4, #8]
   1bae2:	4638      	mov	r0, r7
   1bae4:	f00f fa87 	bl	2aff6 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1bae8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1baec:	4628      	mov	r0, r5
   1baee:	2301      	movs	r3, #1
   1baf0:	f010 fb93 	bl	2c21a <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1baf4:	4629      	mov	r1, r5
   1baf6:	4630      	mov	r0, r6
}
   1baf8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1bafc:	f7fe bcf2 	b.w	1a4e4 <bt_att_send>
   1bb00:	00031cee 	.word	0x00031cee
   1bb04:	00031d09 	.word	0x00031d09
   1bb08:	00031da0 	.word	0x00031da0

0001bb0c <notify_cb>:
{
   1bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb10:	4b3f      	ldr	r3, [pc, #252]	; (1bc10 <notify_cb+0x104>)
{
   1bb12:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb14:	6882      	ldr	r2, [r0, #8]
   1bb16:	429a      	cmp	r2, r3
{
   1bb18:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bb1a:	d003      	beq.n	1bb24 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1bb1c:	2701      	movs	r7, #1
}
   1bb1e:	4638      	mov	r0, r7
   1bb20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
   1bb24:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1bb26:	4b3b      	ldr	r3, [pc, #236]	; (1bc14 <notify_cb+0x108>)
   1bb28:	429e      	cmp	r6, r3
   1bb2a:	d011      	beq.n	1bb50 <notify_cb+0x44>
		if (cfg->value != data->type) {
   1bb2c:	8932      	ldrh	r2, [r6, #8]
   1bb2e:	89ab      	ldrh	r3, [r5, #12]
   1bb30:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bb32:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1bb36:	d1f1      	bne.n	1bb1c <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bb38:	7830      	ldrb	r0, [r6, #0]
   1bb3a:	f7fd f853 	bl	18be4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1bb3e:	4604      	mov	r4, r0
   1bb40:	2800      	cmp	r0, #0
   1bb42:	d0eb      	beq.n	1bb1c <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1bb44:	7b43      	ldrb	r3, [r0, #13]
   1bb46:	2b07      	cmp	r3, #7
   1bb48:	d026      	beq.n	1bb98 <notify_cb+0x8c>
			bt_conn_unref(conn);
   1bb4a:	f7fc fda1 	bl	18690 <bt_conn_unref>
			continue;
   1bb4e:	e7e5      	b.n	1bb1c <notify_cb+0x10>
   1bb50:	4c31      	ldr	r4, [pc, #196]	; (1bc18 <notify_cb+0x10c>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bb52:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1bc1c <notify_cb+0x110>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bb56:	f04f 0800 	mov.w	r8, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bb5a:	4649      	mov	r1, r9
   1bb5c:	4620      	mov	r0, r4
   1bb5e:	f010 fbdf 	bl	2c320 <bt_addr_le_eq>
   1bb62:	b978      	cbnz	r0, 1bb84 <notify_cb+0x78>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1bb64:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1bb68:	2207      	movs	r2, #7
   1bb6a:	4621      	mov	r1, r4
   1bb6c:	f7fd f870 	bl	18c50 <bt_conn_lookup_state_le>
			if (!conn) {
   1bb70:	b978      	cbnz	r0, 1bb92 <notify_cb+0x86>
				sc = (struct sc_data *)data->ind_params->data;
   1bb72:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1bb74:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1bb78:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1bb7a:	4621      	mov	r1, r4
   1bb7c:	8853      	ldrh	r3, [r2, #2]
   1bb7e:	8812      	ldrh	r2, [r2, #0]
   1bb80:	f7fe fefe 	bl	1a980 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bb84:	340c      	adds	r4, #12
   1bb86:	f1b8 0f00 	cmp.w	r8, #0
   1bb8a:	d1cf      	bne.n	1bb2c <notify_cb+0x20>
   1bb8c:	f04f 0801 	mov.w	r8, #1
   1bb90:	e7e3      	b.n	1bb5a <notify_cb+0x4e>
			bt_conn_unref(conn);
   1bb92:	f7fc fd7d 	bl	18690 <bt_conn_unref>
   1bb96:	e7f5      	b.n	1bb84 <notify_cb+0x78>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1bb98:	6973      	ldr	r3, [r6, #20]
   1bb9a:	b123      	cbz	r3, 1bba6 <notify_cb+0x9a>
   1bb9c:	4639      	mov	r1, r7
   1bb9e:	4798      	blx	r3
   1bba0:	b908      	cbnz	r0, 1bba6 <notify_cb+0x9a>
			bt_conn_unref(conn);
   1bba2:	4620      	mov	r0, r4
   1bba4:	e7d1      	b.n	1bb4a <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bba6:	4639      	mov	r1, r7
   1bba8:	2294      	movs	r2, #148	; 0x94
   1bbaa:	4620      	mov	r0, r4
   1bbac:	f010 ff14 	bl	2c9d8 <bt_gatt_check_perm>
   1bbb0:	4607      	mov	r7, r0
   1bbb2:	b120      	cbz	r0, 1bbbe <notify_cb+0xb2>
			LOG_WRN("Link is not encrypted");
   1bbb4:	481a      	ldr	r0, [pc, #104]	; (1bc20 <notify_cb+0x114>)
   1bbb6:	2157      	movs	r1, #87	; 0x57
   1bbb8:	f00e fa55 	bl	2a066 <z_log_minimal_printk>
   1bbbc:	e7f1      	b.n	1bba2 <notify_cb+0x96>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1bbbe:	89ab      	ldrh	r3, [r5, #12]
   1bbc0:	2b02      	cmp	r3, #2
   1bbc2:	d114      	bne.n	1bbee <notify_cb+0xe2>
   1bbc4:	8933      	ldrh	r3, [r6, #8]
   1bbc6:	079a      	lsls	r2, r3, #30
   1bbc8:	d405      	bmi.n	1bbd6 <notify_cb+0xca>
		bt_conn_unref(conn);
   1bbca:	4620      	mov	r0, r4
   1bbcc:	f7fc fd60 	bl	18690 <bt_conn_unref>
		data->err = 0;
   1bbd0:	2300      	movs	r3, #0
   1bbd2:	60ab      	str	r3, [r5, #8]
   1bbd4:	e7a2      	b.n	1bb1c <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1bbd6:	692a      	ldr	r2, [r5, #16]
   1bbd8:	88a9      	ldrh	r1, [r5, #4]
   1bbda:	4620      	mov	r0, r4
   1bbdc:	f7ff fd86 	bl	1b6ec <gatt_indicate>
			if (err == 0) {
   1bbe0:	4606      	mov	r6, r0
   1bbe2:	b978      	cbnz	r0, 1bc04 <notify_cb+0xf8>
				data->ind_params->_ref++;
   1bbe4:	692a      	ldr	r2, [r5, #16]
   1bbe6:	7d93      	ldrb	r3, [r2, #22]
   1bbe8:	3301      	adds	r3, #1
   1bbea:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1bbec:	e7ed      	b.n	1bbca <notify_cb+0xbe>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1bbee:	2b01      	cmp	r3, #1
   1bbf0:	d1eb      	bne.n	1bbca <notify_cb+0xbe>
   1bbf2:	8933      	ldrh	r3, [r6, #8]
   1bbf4:	07db      	lsls	r3, r3, #31
   1bbf6:	d5e8      	bpl.n	1bbca <notify_cb+0xbe>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1bbf8:	692a      	ldr	r2, [r5, #16]
   1bbfa:	88a9      	ldrh	r1, [r5, #4]
   1bbfc:	4620      	mov	r0, r4
   1bbfe:	f7ff ff33 	bl	1ba68 <gatt_notify>
   1bc02:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1bc04:	4620      	mov	r0, r4
   1bc06:	f7fc fd43 	bl	18690 <bt_conn_unref>
		if (err < 0) {
   1bc0a:	2e00      	cmp	r6, #0
   1bc0c:	db87      	blt.n	1bb1e <notify_cb+0x12>
   1bc0e:	e7df      	b.n	1bbd0 <notify_cb+0xc4>
   1bc10:	0001af15 	.word	0x0001af15
   1bc14:	20000658 	.word	0x20000658
   1bc18:	2000413f 	.word	0x2000413f
   1bc1c:	0003055c 	.word	0x0003055c
   1bc20:	00031cee 	.word	0x00031cee

0001bc24 <bt_gatt_discover>:
{
   1bc24:	b570      	push	{r4, r5, r6, lr}
   1bc26:	460c      	mov	r4, r1
   1bc28:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1bc2a:	4605      	mov	r5, r0
   1bc2c:	b950      	cbnz	r0, 1bc44 <bt_gatt_discover+0x20>
   1bc2e:	496c      	ldr	r1, [pc, #432]	; (1bde0 <bt_gatt_discover+0x1bc>)
   1bc30:	486c      	ldr	r0, [pc, #432]	; (1bde4 <bt_gatt_discover+0x1c0>)
   1bc32:	f241 02c1 	movw	r2, #4289	; 0x10c1
   1bc36:	f00e fa08 	bl	2a04a <assert_print>
   1bc3a:	f241 01c1 	movw	r1, #4289	; 0x10c1
	__ASSERT(params && params->func, "invalid parameters\n");
   1bc3e:	4868      	ldr	r0, [pc, #416]	; (1bde0 <bt_gatt_discover+0x1bc>)
   1bc40:	f00e f9fc 	bl	2a03c <assert_post_action>
   1bc44:	b109      	cbz	r1, 1bc4a <bt_gatt_discover+0x26>
   1bc46:	684b      	ldr	r3, [r1, #4]
   1bc48:	b943      	cbnz	r3, 1bc5c <bt_gatt_discover+0x38>
   1bc4a:	4965      	ldr	r1, [pc, #404]	; (1bde0 <bt_gatt_discover+0x1bc>)
   1bc4c:	4865      	ldr	r0, [pc, #404]	; (1bde4 <bt_gatt_discover+0x1c0>)
   1bc4e:	f241 02c2 	movw	r2, #4290	; 0x10c2
   1bc52:	f00e f9fa 	bl	2a04a <assert_print>
   1bc56:	f241 01c2 	movw	r1, #4290	; 0x10c2
   1bc5a:	e7f0      	b.n	1bc3e <bt_gatt_discover+0x1a>
	__ASSERT((params->start_handle && params->end_handle),
   1bc5c:	890a      	ldrh	r2, [r1, #8]
   1bc5e:	b10a      	cbz	r2, 1bc64 <bt_gatt_discover+0x40>
   1bc60:	89cb      	ldrh	r3, [r1, #14]
   1bc62:	b943      	cbnz	r3, 1bc76 <bt_gatt_discover+0x52>
   1bc64:	495e      	ldr	r1, [pc, #376]	; (1bde0 <bt_gatt_discover+0x1bc>)
   1bc66:	485f      	ldr	r0, [pc, #380]	; (1bde4 <bt_gatt_discover+0x1c0>)
   1bc68:	f241 02c3 	movw	r2, #4291	; 0x10c3
   1bc6c:	f00e f9ed 	bl	2a04a <assert_print>
   1bc70:	f241 01c3 	movw	r1, #4291	; 0x10c3
   1bc74:	e7e3      	b.n	1bc3e <bt_gatt_discover+0x1a>
	__ASSERT((params->start_handle <= params->end_handle),
   1bc76:	429a      	cmp	r2, r3
   1bc78:	d908      	bls.n	1bc8c <bt_gatt_discover+0x68>
   1bc7a:	4959      	ldr	r1, [pc, #356]	; (1bde0 <bt_gatt_discover+0x1bc>)
   1bc7c:	4859      	ldr	r0, [pc, #356]	; (1bde4 <bt_gatt_discover+0x1c0>)
   1bc7e:	f241 02c5 	movw	r2, #4293	; 0x10c5
   1bc82:	f00e f9e2 	bl	2a04a <assert_print>
   1bc86:	f241 01c5 	movw	r1, #4293	; 0x10c5
   1bc8a:	e7d8      	b.n	1bc3e <bt_gatt_discover+0x1a>
	if (conn->state != BT_CONN_CONNECTED) {
   1bc8c:	7b43      	ldrb	r3, [r0, #13]
   1bc8e:	2b07      	cmp	r3, #7
   1bc90:	f040 80a2 	bne.w	1bdd8 <bt_gatt_discover+0x1b4>
	switch (params->type) {
   1bc94:	7c0a      	ldrb	r2, [r1, #16]
   1bc96:	2a06      	cmp	r2, #6
   1bc98:	f200 809b 	bhi.w	1bdd2 <bt_gatt_discover+0x1ae>
   1bc9c:	e8df f002 	tbb	[pc, r2]
   1bca0:	56560404 	.word	0x56560404
   1bca4:	925e      	.short	0x925e
   1bca6:	25          	.byte	0x25
   1bca7:	00          	.byte	0x00
		if (params->uuid) {
   1bca8:	680b      	ldr	r3, [r1, #0]
   1bcaa:	b1b3      	cbz	r3, 1bcda <bt_gatt_discover+0xb6>
	switch (params->uuid->type) {
   1bcac:	781a      	ldrb	r2, [r3, #0]
   1bcae:	b132      	cbz	r2, 1bcbe <bt_gatt_discover+0x9a>
   1bcb0:	2a02      	cmp	r2, #2
   1bcb2:	d010      	beq.n	1bcd6 <bt_gatt_discover+0xb2>
		LOG_ERR("Unknown UUID type %u", params->uuid->type);
   1bcb4:	484c      	ldr	r0, [pc, #304]	; (1bde8 <bt_gatt_discover+0x1c4>)
   1bcb6:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Invalid discovery type: %u", params->type);
   1bcb8:	f00e f9d5 	bl	2a066 <z_log_minimal_printk>
	return -EINVAL;
   1bcbc:	e05b      	b.n	1bd76 <bt_gatt_discover+0x152>
		len += BT_UUID_SIZE_16;
   1bcbe:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1bcc0:	9301      	str	r3, [sp, #4]
   1bcc2:	2306      	movs	r3, #6
   1bcc4:	9300      	str	r3, [sp, #0]
   1bcc6:	4949      	ldr	r1, [pc, #292]	; (1bdec <bt_gatt_discover+0x1c8>)
   1bcc8:	4b49      	ldr	r3, [pc, #292]	; (1bdf0 <bt_gatt_discover+0x1cc>)
   1bcca:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1bccc:	4628      	mov	r0, r5
   1bcce:	f010 fdb1 	bl	2c834 <gatt_req_send.constprop.0>
}
   1bcd2:	b006      	add	sp, #24
   1bcd4:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1bcd6:	2316      	movs	r3, #22
   1bcd8:	e7f2      	b.n	1bcc0 <bt_gatt_discover+0x9c>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1bcda:	2310      	movs	r3, #16
   1bcdc:	2104      	movs	r1, #4
   1bcde:	e9cd 3100 	strd	r3, r1, [sp]
   1bce2:	4622      	mov	r2, r4
   1bce4:	4b43      	ldr	r3, [pc, #268]	; (1bdf4 <bt_gatt_discover+0x1d0>)
   1bce6:	4944      	ldr	r1, [pc, #272]	; (1bdf8 <bt_gatt_discover+0x1d4>)
   1bce8:	e7f0      	b.n	1bccc <bt_gatt_discover+0xa8>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1bcea:	6808      	ldr	r0, [r1, #0]
   1bcec:	2800      	cmp	r0, #0
   1bcee:	d042      	beq.n	1bd76 <bt_gatt_discover+0x152>
   1bcf0:	7806      	ldrb	r6, [r0, #0]
   1bcf2:	2e00      	cmp	r6, #0
   1bcf4:	d13f      	bne.n	1bd76 <bt_gatt_discover+0x152>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1bcf6:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1bcfa:	a902      	add	r1, sp, #8
   1bcfc:	f88d 6008 	strb.w	r6, [sp, #8]
   1bd00:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bd04:	f00f fa0b 	bl	2b11e <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1bd08:	b300      	cbz	r0, 1bd4c <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1bd0a:	f642 1302 	movw	r3, #10498	; 0x2902
   1bd0e:	6820      	ldr	r0, [r4, #0]
   1bd10:	f88d 600c 	strb.w	r6, [sp, #12]
   1bd14:	a903      	add	r1, sp, #12
   1bd16:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bd1a:	f00f fa00 	bl	2b11e <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1bd1e:	b1a8      	cbz	r0, 1bd4c <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1bd20:	f642 1303 	movw	r3, #10499	; 0x2903
   1bd24:	6820      	ldr	r0, [r4, #0]
   1bd26:	f88d 6010 	strb.w	r6, [sp, #16]
   1bd2a:	a904      	add	r1, sp, #16
   1bd2c:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bd30:	f00f f9f5 	bl	2b11e <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1bd34:	b150      	cbz	r0, 1bd4c <bt_gatt_discover+0x128>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1bd36:	f642 1304 	movw	r3, #10500	; 0x2904
   1bd3a:	6820      	ldr	r0, [r4, #0]
   1bd3c:	f88d 6014 	strb.w	r6, [sp, #20]
   1bd40:	a905      	add	r1, sp, #20
   1bd42:	f8ad 3016 	strh.w	r3, [sp, #22]
   1bd46:	f00f f9ea 	bl	2b11e <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1bd4a:	b9a0      	cbnz	r0, 1bd76 <bt_gatt_discover+0x152>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1bd4c:	2308      	movs	r3, #8
   1bd4e:	2204      	movs	r2, #4
   1bd50:	e9cd 3200 	strd	r3, r2, [sp]
   1bd54:	4929      	ldr	r1, [pc, #164]	; (1bdfc <bt_gatt_discover+0x1d8>)
   1bd56:	4b2a      	ldr	r3, [pc, #168]	; (1be00 <bt_gatt_discover+0x1dc>)
   1bd58:	4622      	mov	r2, r4
   1bd5a:	e7b7      	b.n	1bccc <bt_gatt_discover+0xa8>
		if (params->uuid &&
   1bd5c:	6808      	ldr	r0, [r1, #0]
   1bd5e:	b388      	cbz	r0, 1bdc4 <bt_gatt_discover+0x1a0>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1bd60:	2600      	movs	r6, #0
   1bd62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bd66:	a902      	add	r1, sp, #8
   1bd68:	f88d 6008 	strb.w	r6, [sp, #8]
   1bd6c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1bd70:	f00f f9d5 	bl	2b11e <bt_uuid_cmp>
		if (params->uuid &&
   1bd74:	b910      	cbnz	r0, 1bd7c <bt_gatt_discover+0x158>
			return -EINVAL;
   1bd76:	f06f 0015 	mvn.w	r0, #21
   1bd7a:	e7aa      	b.n	1bcd2 <bt_gatt_discover+0xae>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1bd7c:	f642 0301 	movw	r3, #10241	; 0x2801
   1bd80:	6820      	ldr	r0, [r4, #0]
   1bd82:	f88d 600c 	strb.w	r6, [sp, #12]
   1bd86:	a903      	add	r1, sp, #12
   1bd88:	f8ad 300e 	strh.w	r3, [sp, #14]
   1bd8c:	f00f f9c7 	bl	2b11e <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1bd90:	2800      	cmp	r0, #0
   1bd92:	d0f0      	beq.n	1bd76 <bt_gatt_discover+0x152>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1bd94:	f642 0302 	movw	r3, #10242	; 0x2802
   1bd98:	6820      	ldr	r0, [r4, #0]
   1bd9a:	f88d 6010 	strb.w	r6, [sp, #16]
   1bd9e:	a904      	add	r1, sp, #16
   1bda0:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bda4:	f00f f9bb 	bl	2b11e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1bda8:	2800      	cmp	r0, #0
   1bdaa:	d0e4      	beq.n	1bd76 <bt_gatt_discover+0x152>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1bdac:	f642 0303 	movw	r3, #10243	; 0x2803
   1bdb0:	6820      	ldr	r0, [r4, #0]
   1bdb2:	f88d 6014 	strb.w	r6, [sp, #20]
   1bdb6:	a905      	add	r1, sp, #20
   1bdb8:	f8ad 3016 	strh.w	r3, [sp, #22]
   1bdbc:	f00f f9af 	bl	2b11e <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1bdc0:	2800      	cmp	r0, #0
   1bdc2:	d0d8      	beq.n	1bd76 <bt_gatt_discover+0x152>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1bdc4:	2304      	movs	r3, #4
   1bdc6:	e9cd 3300 	strd	r3, r3, [sp]
   1bdca:	490e      	ldr	r1, [pc, #56]	; (1be04 <bt_gatt_discover+0x1e0>)
   1bdcc:	4b0e      	ldr	r3, [pc, #56]	; (1be08 <bt_gatt_discover+0x1e4>)
   1bdce:	4622      	mov	r2, r4
   1bdd0:	e77c      	b.n	1bccc <bt_gatt_discover+0xa8>
		LOG_ERR("Invalid discovery type: %u", params->type);
   1bdd2:	480e      	ldr	r0, [pc, #56]	; (1be0c <bt_gatt_discover+0x1e8>)
   1bdd4:	2145      	movs	r1, #69	; 0x45
   1bdd6:	e76f      	b.n	1bcb8 <bt_gatt_discover+0x94>
		return -ENOTCONN;
   1bdd8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bddc:	e779      	b.n	1bcd2 <bt_gatt_discover+0xae>
   1bdde:	bf00      	nop
   1bde0:	00031b7d 	.word	0x00031b7d
   1bde4:	0002f2b5 	.word	0x0002f2b5
   1bde8:	00031dce 	.word	0x00031dce
   1bdec:	0002ca7d 	.word	0x0002ca7d
   1bdf0:	0002c613 	.word	0x0002c613
   1bdf4:	0002c415 	.word	0x0002c415
   1bdf8:	0001be11 	.word	0x0001be11
   1bdfc:	0001bf15 	.word	0x0001bf15
   1be00:	0002c445 	.word	0x0002c445
   1be04:	0001c265 	.word	0x0001c265
   1be08:	0002c3ad 	.word	0x0002c3ad
   1be0c:	00031de8 	.word	0x00031de8

0001be10 <gatt_read_group_rsp>:
{
   1be10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be14:	b08f      	sub	sp, #60	; 0x3c
   1be16:	4681      	mov	r9, r0
   1be18:	9d18      	ldr	r5, [sp, #96]	; 0x60
   1be1a:	4617      	mov	r7, r2
	if (err) {
   1be1c:	b131      	cbz	r1, 1be2c <gatt_read_group_rsp+0x1c>
		params->func(conn, NULL, params);
   1be1e:	686b      	ldr	r3, [r5, #4]
   1be20:	462a      	mov	r2, r5
   1be22:	2100      	movs	r1, #0
}
   1be24:	b00f      	add	sp, #60	; 0x3c
   1be26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		params->func(conn, NULL, params);
   1be2a:	4718      	bx	r3
	switch (rsp->len) {
   1be2c:	7812      	ldrb	r2, [r2, #0]
   1be2e:	2a06      	cmp	r2, #6
   1be30:	d00e      	beq.n	1be50 <gatt_read_group_rsp+0x40>
   1be32:	2a14      	cmp	r2, #20
   1be34:	d00b      	beq.n	1be4e <gatt_read_group_rsp+0x3e>
		LOG_ERR("Invalid data len %u", rsp->len);
   1be36:	4836      	ldr	r0, [pc, #216]	; (1bf10 <gatt_read_group_rsp+0x100>)
   1be38:	2145      	movs	r1, #69	; 0x45
   1be3a:	f00e f914 	bl	2a066 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1be3e:	686b      	ldr	r3, [r5, #4]
   1be40:	462a      	mov	r2, r5
   1be42:	2100      	movs	r1, #0
   1be44:	4648      	mov	r0, r9
   1be46:	4798      	blx	r3
}
   1be48:	b00f      	add	sp, #60	; 0x3c
   1be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (rsp->len) {
   1be4e:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1be50:	3b01      	subs	r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1be52:	f88d 1010 	strb.w	r1, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1be56:	b29c      	uxth	r4, r3
   1be58:	f107 0801 	add.w	r8, r7, #1
	uint16_t start_handle, end_handle = 0U;
   1be5c:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1be5e:	783b      	ldrb	r3, [r7, #0]
   1be60:	42a3      	cmp	r3, r4
   1be62:	d90b      	bls.n	1be7c <gatt_read_group_rsp+0x6c>
	if (length == 0U && end_handle) {
   1be64:	2c00      	cmp	r4, #0
   1be66:	d1ea      	bne.n	1be3e <gatt_read_group_rsp+0x2e>
   1be68:	2e00      	cmp	r6, #0
   1be6a:	d0e8      	beq.n	1be3e <gatt_read_group_rsp+0x2e>
	gatt_discover_next(conn, handle, params);
   1be6c:	462a      	mov	r2, r5
   1be6e:	4631      	mov	r1, r6
   1be70:	4648      	mov	r0, r9
}
   1be72:	b00f      	add	sp, #60	; 0x3c
   1be74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1be78:	f010 bde2 	b.w	2ca40 <gatt_discover_next>
		struct bt_gatt_attr attr = {};
   1be7c:	2214      	movs	r2, #20
   1be7e:	2100      	movs	r1, #0
   1be80:	a809      	add	r0, sp, #36	; 0x24
   1be82:	f00f f8c3 	bl	2b00c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1be86:	f8b8 a000 	ldrh.w	sl, [r8]
   1be8a:	fa1f f38a 	uxth.w	r3, sl
		if (!start_handle) {
   1be8e:	2b00      	cmp	r3, #0
   1be90:	d0d5      	beq.n	1be3e <gatt_read_group_rsp+0x2e>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1be92:	f8b8 b002 	ldrh.w	fp, [r8, #2]
   1be96:	fa1f f68b 	uxth.w	r6, fp
		if (!end_handle || end_handle < start_handle) {
   1be9a:	2e00      	cmp	r6, #0
   1be9c:	d0cf      	beq.n	1be3e <gatt_read_group_rsp+0x2e>
   1be9e:	42b3      	cmp	r3, r6
   1bea0:	d8cd      	bhi.n	1be3e <gatt_read_group_rsp+0x2e>
		switch (u.uuid.type) {
   1bea2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1bea6:	b323      	cbz	r3, 1bef2 <gatt_read_group_rsp+0xe2>
   1bea8:	2b02      	cmp	r3, #2
   1beaa:	d02a      	beq.n	1bf02 <gatt_read_group_rsp+0xf2>
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1beac:	f04f 0300 	mov.w	r3, #0
   1beb0:	f88d 3004 	strb.w	r3, [sp, #4]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1beb4:	7c2b      	ldrb	r3, [r5, #16]
		value.end_handle = end_handle;
   1beb6:	f8ad b00c 	strh.w	fp, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   1beba:	2b00      	cmp	r3, #0
   1bebc:	f642 0301 	movw	r3, #10241	; 0x2801
   1bec0:	bf08      	it	eq
   1bec2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1bec6:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1beca:	ab04      	add	r3, sp, #16
   1becc:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1bece:	ab01      	add	r3, sp, #4
   1bed0:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1bed2:	ab02      	add	r3, sp, #8
   1bed4:	930c      	str	r3, [sp, #48]	; 0x30
		attr.handle = start_handle;
   1bed6:	f8ad a034 	strh.w	sl, [sp, #52]	; 0x34
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1beda:	686b      	ldr	r3, [r5, #4]
   1bedc:	462a      	mov	r2, r5
   1bede:	a909      	add	r1, sp, #36	; 0x24
   1bee0:	4648      	mov	r0, r9
   1bee2:	4798      	blx	r3
   1bee4:	2800      	cmp	r0, #0
   1bee6:	d0af      	beq.n	1be48 <gatt_read_group_rsp+0x38>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bee8:	783b      	ldrb	r3, [r7, #0]
   1beea:	1ae4      	subs	r4, r4, r3
   1beec:	b2a4      	uxth	r4, r4
   1beee:	4498      	add	r8, r3
   1bef0:	e7b5      	b.n	1be5e <gatt_read_group_rsp+0x4e>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1bef2:	2202      	movs	r2, #2
   1bef4:	f108 0104 	add.w	r1, r8, #4
   1bef8:	f10d 0012 	add.w	r0, sp, #18
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1befc:	f00f f87b 	bl	2aff6 <memcpy>
			break;
   1bf00:	e7d4      	b.n	1beac <gatt_read_group_rsp+0x9c>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1bf02:	2210      	movs	r2, #16
   1bf04:	f108 0104 	add.w	r1, r8, #4
   1bf08:	f10d 0011 	add.w	r0, sp, #17
   1bf0c:	e7f6      	b.n	1befc <gatt_read_group_rsp+0xec>
   1bf0e:	bf00      	nop
   1bf10:	00031e08 	.word	0x00031e08

0001bf14 <gatt_read_type_rsp>:
{
   1bf14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf18:	b093      	sub	sp, #76	; 0x4c
   1bf1a:	4680      	mov	r8, r0
   1bf1c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1bf1e:	4617      	mov	r7, r2
	if (err) {
   1bf20:	b131      	cbz	r1, 1bf30 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
   1bf22:	686b      	ldr	r3, [r5, #4]
   1bf24:	462a      	mov	r2, r5
   1bf26:	2100      	movs	r1, #0
}
   1bf28:	b013      	add	sp, #76	; 0x4c
   1bf2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   1bf2e:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1bf30:	7c28      	ldrb	r0, [r5, #16]
   1bf32:	2802      	cmp	r0, #2
   1bf34:	d17c      	bne.n	1c030 <gatt_read_type_rsp+0x11c>
	switch (rsp->len) {
   1bf36:	7812      	ldrb	r2, [r2, #0]
   1bf38:	2a06      	cmp	r2, #6
   1bf3a:	d00b      	beq.n	1bf54 <gatt_read_type_rsp+0x40>
   1bf3c:	2a08      	cmp	r2, #8
   1bf3e:	d00a      	beq.n	1bf56 <gatt_read_type_rsp+0x42>
		LOG_ERR("Invalid data len %u", rsp->len);
   1bf40:	489f      	ldr	r0, [pc, #636]	; (1c1c0 <gatt_read_type_rsp+0x2ac>)
   1bf42:	2145      	movs	r1, #69	; 0x45
   1bf44:	f00e f88f 	bl	2a066 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1bf48:	686b      	ldr	r3, [r5, #4]
   1bf4a:	462a      	mov	r2, r5
   1bf4c:	2100      	movs	r1, #0
   1bf4e:	4640      	mov	r0, r8
   1bf50:	4798      	blx	r3
	if (!handle) {
   1bf52:	e051      	b.n	1bff8 <gatt_read_type_rsp+0xe4>
	switch (rsp->len) {
   1bf54:	4601      	mov	r1, r0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bf56:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1bf58:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bf5c:	b2a4      	uxth	r4, r4
   1bf5e:	f107 0b01 	add.w	fp, r7, #1
	uint16_t handle = 0U;
   1bf62:	2600      	movs	r6, #0
			.uuid = BT_UUID_GATT_INCLUDE,
   1bf64:	f642 0a02 	movw	sl, #10242	; 0x2802
	for (length--, pdu = rsp->data; length >= rsp->len;
   1bf68:	783b      	ldrb	r3, [r7, #0]
   1bf6a:	42a3      	cmp	r3, r4
   1bf6c:	d90b      	bls.n	1bf86 <gatt_read_type_rsp+0x72>
	if (length == 0U && handle) {
   1bf6e:	2c00      	cmp	r4, #0
   1bf70:	d1ea      	bne.n	1bf48 <gatt_read_type_rsp+0x34>
   1bf72:	2e00      	cmp	r6, #0
   1bf74:	d0e8      	beq.n	1bf48 <gatt_read_type_rsp+0x34>
	gatt_discover_next(conn, handle, params);
   1bf76:	462a      	mov	r2, r5
   1bf78:	4631      	mov	r1, r6
   1bf7a:	4640      	mov	r0, r8
}
   1bf7c:	b013      	add	sp, #76	; 0x4c
   1bf7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
   1bf82:	f010 bd5d 	b.w	2ca40 <gatt_discover_next>
		handle = sys_le16_to_cpu(data->handle);
   1bf86:	f8bb 9000 	ldrh.w	r9, [fp]
   1bf8a:	fa1f f689 	uxth.w	r6, r9
		if (!handle) {
   1bf8e:	2e00      	cmp	r6, #0
   1bf90:	d0da      	beq.n	1bf48 <gatt_read_type_rsp+0x34>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1bf92:	f8bb 0002 	ldrh.w	r0, [fp, #2]
   1bf96:	f8ad 001c 	strh.w	r0, [sp, #28]
		switch (u.uuid.type) {
   1bf9a:	f89d 2020 	ldrb.w	r2, [sp, #32]
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1bf9e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
   1bfa2:	f8ad 101e 	strh.w	r1, [sp, #30]
		switch (u.uuid.type) {
   1bfa6:	b162      	cbz	r2, 1bfc2 <gatt_read_type_rsp+0xae>
   1bfa8:	2a02      	cmp	r2, #2
   1bfaa:	d015      	beq.n	1bfd8 <gatt_read_type_rsp+0xc4>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1bfac:	6829      	ldr	r1, [r5, #0]
   1bfae:	b331      	cbz	r1, 1bffe <gatt_read_type_rsp+0xea>
   1bfb0:	a808      	add	r0, sp, #32
   1bfb2:	f00f f8b4 	bl	2b11e <bt_uuid_cmp>
   1bfb6:	b310      	cbz	r0, 1bffe <gatt_read_type_rsp+0xea>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1bfb8:	783b      	ldrb	r3, [r7, #0]
   1bfba:	1ae4      	subs	r4, r4, r3
   1bfbc:	b2a4      	uxth	r4, r4
   1bfbe:	449b      	add	fp, r3
   1bfc0:	e7d2      	b.n	1bf68 <gatt_read_type_rsp+0x54>
			value.uuid = &u.uuid;
   1bfc2:	aa08      	add	r2, sp, #32
   1bfc4:	9206      	str	r2, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1bfc6:	f89b 2006 	ldrb.w	r2, [fp, #6]
   1bfca:	f89b 1007 	ldrb.w	r1, [fp, #7]
   1bfce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1bfd2:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1bfd6:	e7e9      	b.n	1bfac <gatt_read_type_rsp+0x98>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1bfd8:	230a      	movs	r3, #10
			params->_included.start_handle = value.start_handle;
   1bfda:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1bfdc:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
   1bfde:	f8a5 9008 	strh.w	r9, [r5, #8]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1bfe2:	4978      	ldr	r1, [pc, #480]	; (1c1c4 <gatt_read_type_rsp+0x2b0>)
   1bfe4:	9201      	str	r2, [sp, #4]
   1bfe6:	9300      	str	r3, [sp, #0]
   1bfe8:	462a      	mov	r2, r5
   1bfea:	4b77      	ldr	r3, [pc, #476]	; (1c1c8 <gatt_read_type_rsp+0x2b4>)
   1bfec:	4640      	mov	r0, r8
   1bfee:	f010 fc21 	bl	2c834 <gatt_req_send.constprop.0>
			return read_included_uuid(conn, params);
   1bff2:	b286      	uxth	r6, r0
	if (!handle) {
   1bff4:	2e00      	cmp	r6, #0
   1bff6:	d1be      	bne.n	1bf76 <gatt_read_type_rsp+0x62>
}
   1bff8:	b013      	add	sp, #76	; 0x4c
   1bffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			.uuid = BT_UUID_GATT_INCLUDE,
   1bffe:	f04f 0300 	mov.w	r3, #0
		attr = (struct bt_gatt_attr) {
   1c002:	2210      	movs	r2, #16
   1c004:	2100      	movs	r1, #0
   1c006:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_INCLUDE,
   1c008:	f88d 3014 	strb.w	r3, [sp, #20]
   1c00c:	f8ad a016 	strh.w	sl, [sp, #22]
		attr = (struct bt_gatt_attr) {
   1c010:	f00e fffc 	bl	2b00c <memset>
   1c014:	aa05      	add	r2, sp, #20
   1c016:	920d      	str	r2, [sp, #52]	; 0x34
   1c018:	aa06      	add	r2, sp, #24
   1c01a:	9210      	str	r2, [sp, #64]	; 0x40
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c01c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr) {
   1c01e:	f8ad 9044 	strh.w	r9, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c022:	462a      	mov	r2, r5
   1c024:	a90d      	add	r1, sp, #52	; 0x34
   1c026:	4640      	mov	r0, r8
   1c028:	4798      	blx	r3
   1c02a:	2800      	cmp	r0, #0
   1c02c:	d1c4      	bne.n	1bfb8 <gatt_read_type_rsp+0xa4>
   1c02e:	e7e3      	b.n	1bff8 <gatt_read_type_rsp+0xe4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1c030:	2803      	cmp	r0, #3
   1c032:	d15c      	bne.n	1c0ee <gatt_read_type_rsp+0x1da>
	switch (rsp->len) {
   1c034:	7812      	ldrb	r2, [r2, #0]
   1c036:	2a07      	cmp	r2, #7
   1c038:	d002      	beq.n	1c040 <gatt_read_type_rsp+0x12c>
   1c03a:	2a15      	cmp	r2, #21
   1c03c:	d180      	bne.n	1bf40 <gatt_read_type_rsp+0x2c>
   1c03e:	2102      	movs	r1, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c040:	1e5c      	subs	r4, r3, #1
		u.uuid.type = BT_UUID_TYPE_16;
   1c042:	f88d 1020 	strb.w	r1, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c046:	b2a4      	uxth	r4, r4
   1c048:	f107 0901 	add.w	r9, r7, #1
	uint16_t handle = 0U;
   1c04c:	2600      	movs	r6, #0
   1c04e:	f10d 0a20 	add.w	sl, sp, #32
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c052:	783b      	ldrb	r3, [r7, #0]
   1c054:	42a3      	cmp	r3, r4
   1c056:	d88a      	bhi.n	1bf6e <gatt_read_type_rsp+0x5a>
		handle = sys_le16_to_cpu(data->handle);
   1c058:	f8b9 b000 	ldrh.w	fp, [r9]
   1c05c:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1c060:	2e00      	cmp	r6, #0
   1c062:	f43f af71 	beq.w	1bf48 <gatt_read_type_rsp+0x34>
		switch (u.uuid.type) {
   1c066:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1c06a:	b163      	cbz	r3, 1c086 <gatt_read_type_rsp+0x172>
   1c06c:	2b02      	cmp	r3, #2
   1c06e:	d013      	beq.n	1c098 <gatt_read_type_rsp+0x184>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c070:	6829      	ldr	r1, [r5, #0]
   1c072:	b1c9      	cbz	r1, 1c0a8 <gatt_read_type_rsp+0x194>
   1c074:	4650      	mov	r0, sl
   1c076:	f00f f852 	bl	2b11e <bt_uuid_cmp>
   1c07a:	b1a8      	cbz	r0, 1c0a8 <gatt_read_type_rsp+0x194>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c07c:	783b      	ldrb	r3, [r7, #0]
   1c07e:	1ae4      	subs	r4, r4, r3
   1c080:	b2a4      	uxth	r4, r4
   1c082:	4499      	add	r9, r3
   1c084:	e7e5      	b.n	1c052 <gatt_read_type_rsp+0x13e>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1c086:	f899 3005 	ldrb.w	r3, [r9, #5]
   1c08a:	f899 2006 	ldrb.w	r2, [r9, #6]
   1c08e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c092:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
   1c096:	e7eb      	b.n	1c070 <gatt_read_type_rsp+0x15c>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1c098:	2210      	movs	r2, #16
   1c09a:	f109 0105 	add.w	r1, r9, #5
   1c09e:	f10d 0021 	add.w	r0, sp, #33	; 0x21
   1c0a2:	f00e ffa8 	bl	2aff6 <memcpy>
			break;
   1c0a6:	e7e3      	b.n	1c070 <gatt_read_type_rsp+0x15c>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c0a8:	f8b9 2003 	ldrh.w	r2, [r9, #3]
   1c0ac:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c0b0:	f8ad 201c 	strh.w	r2, [sp, #28]
			.uuid = BT_UUID_GATT_CHRC,
   1c0b4:	2100      	movs	r1, #0
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c0b6:	f88d 301e 	strb.w	r3, [sp, #30]
		attr = (struct bt_gatt_attr) {
   1c0ba:	2210      	movs	r2, #16
			.uuid = BT_UUID_GATT_CHRC,
   1c0bc:	f642 0303 	movw	r3, #10243	; 0x2803
		attr = (struct bt_gatt_attr) {
   1c0c0:	a80e      	add	r0, sp, #56	; 0x38
			.uuid = BT_UUID_GATT_CHRC,
   1c0c2:	f88d 1014 	strb.w	r1, [sp, #20]
   1c0c6:	f8ad 3016 	strh.w	r3, [sp, #22]
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1c0ca:	f8cd a018 	str.w	sl, [sp, #24]
		attr = (struct bt_gatt_attr) {
   1c0ce:	f00e ff9d 	bl	2b00c <memset>
   1c0d2:	ab05      	add	r3, sp, #20
   1c0d4:	930d      	str	r3, [sp, #52]	; 0x34
   1c0d6:	ab06      	add	r3, sp, #24
   1c0d8:	9310      	str	r3, [sp, #64]	; 0x40
   1c0da:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c0de:	686b      	ldr	r3, [r5, #4]
   1c0e0:	462a      	mov	r2, r5
   1c0e2:	a90d      	add	r1, sp, #52	; 0x34
   1c0e4:	4640      	mov	r0, r8
   1c0e6:	4798      	blx	r3
   1c0e8:	2800      	cmp	r0, #0
   1c0ea:	d1c7      	bne.n	1c07c <gatt_read_type_rsp+0x168>
   1c0ec:	e784      	b.n	1bff8 <gatt_read_type_rsp+0xe4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1c0ee:	682a      	ldr	r2, [r5, #0]
   1c0f0:	7816      	ldrb	r6, [r2, #0]
   1c0f2:	b976      	cbnz	r6, 1c112 <gatt_read_type_rsp+0x1fe>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1c0f4:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c0f8:	1e5c      	subs	r4, r3, #1
   1c0fa:	b2a4      	uxth	r4, r4
   1c0fc:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
   1c100:	f5aa 5a24 	sub.w	sl, sl, #10496	; 0x2900
	for (length--, pdu = rsp->data; length >= rsp->len;
   1c104:	783b      	ldrb	r3, [r7, #0]
   1c106:	42a3      	cmp	r3, r4
   1c108:	d908      	bls.n	1c11c <gatt_read_type_rsp+0x208>
	if (length == 0U && handle) {
   1c10a:	b914      	cbnz	r4, 1c112 <gatt_read_type_rsp+0x1fe>
   1c10c:	2e00      	cmp	r6, #0
   1c10e:	f47f af32 	bne.w	1bf76 <gatt_read_type_rsp+0x62>
	params->func(conn, NULL, params);
   1c112:	686b      	ldr	r3, [r5, #4]
   1c114:	462a      	mov	r2, r5
   1c116:	2100      	movs	r1, #0
   1c118:	4640      	mov	r0, r8
   1c11a:	e705      	b.n	1bf28 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
   1c11c:	f8b9 b000 	ldrh.w	fp, [r9]
   1c120:	fa1f f68b 	uxth.w	r6, fp
		if (!handle) {
   1c124:	2e00      	cmp	r6, #0
   1c126:	d0f4      	beq.n	1c112 <gatt_read_type_rsp+0x1fe>
		switch (uuid_val) {
   1c128:	f1ba 0f04 	cmp.w	sl, #4
   1c12c:	d8f1      	bhi.n	1c112 <gatt_read_type_rsp+0x1fe>
   1c12e:	a301      	add	r3, pc, #4	; (adr r3, 1c134 <gatt_read_type_rsp+0x220>)
   1c130:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
   1c134:	0001c149 	.word	0x0001c149
   1c138:	0001c113 	.word	0x0001c113
   1c13c:	0001c149 	.word	0x0001c149
   1c140:	0001c149 	.word	0x0001c149
   1c144:	0001c185 	.word	0x0001c185
			value.scc.flags = sys_get_le16(data->value);
   1c148:	f8b9 3002 	ldrh.w	r3, [r9, #2]
   1c14c:	f8ad 3020 	strh.w	r3, [sp, #32]
			.uuid = params->uuid,
   1c150:	682b      	ldr	r3, [r5, #0]
   1c152:	9303      	str	r3, [sp, #12]
		attr = (struct bt_gatt_attr) {
   1c154:	2210      	movs	r2, #16
   1c156:	2100      	movs	r1, #0
   1c158:	a80e      	add	r0, sp, #56	; 0x38
   1c15a:	f00e ff57 	bl	2b00c <memset>
   1c15e:	9b03      	ldr	r3, [sp, #12]
   1c160:	930d      	str	r3, [sp, #52]	; 0x34
   1c162:	ab08      	add	r3, sp, #32
   1c164:	9310      	str	r3, [sp, #64]	; 0x40
   1c166:	f8ad b044 	strh.w	fp, [sp, #68]	; 0x44
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c16a:	686b      	ldr	r3, [r5, #4]
   1c16c:	462a      	mov	r2, r5
   1c16e:	a90d      	add	r1, sp, #52	; 0x34
   1c170:	4640      	mov	r0, r8
   1c172:	4798      	blx	r3
   1c174:	2800      	cmp	r0, #0
   1c176:	f43f af3f 	beq.w	1bff8 <gatt_read_type_rsp+0xe4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c17a:	783b      	ldrb	r3, [r7, #0]
   1c17c:	1ae4      	subs	r4, r4, r3
   1c17e:	b2a4      	uxth	r4, r4
   1c180:	4499      	add	r9, r3
   1c182:	e7bf      	b.n	1c104 <gatt_read_type_rsp+0x1f0>
			value.cpf.format = cpf->format;
   1c184:	f899 3002 	ldrb.w	r3, [r9, #2]
   1c188:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1c18c:	f899 3003 	ldrb.w	r3, [r9, #3]
   1c190:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1c194:	f899 2005 	ldrb.w	r2, [r9, #5]
   1c198:	f899 3004 	ldrb.w	r3, [r9, #4]
   1c19c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c1a0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1c1a4:	f899 3006 	ldrb.w	r3, [r9, #6]
   1c1a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1c1ac:	f899 3007 	ldrb.w	r3, [r9, #7]
   1c1b0:	f899 2008 	ldrb.w	r2, [r9, #8]
   1c1b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c1b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1c1bc:	e7c8      	b.n	1c150 <gatt_read_type_rsp+0x23c>
   1c1be:	bf00      	nop
   1c1c0:	00031e08 	.word	0x00031e08
   1c1c4:	0001c1cd 	.word	0x0001c1cd
   1c1c8:	0002c399 	.word	0x0002c399

0001c1cc <read_included_uuid_cb>:
{
   1c1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c1ce:	b08f      	sub	sp, #60	; 0x3c
	if (length != 16U) {
   1c1d0:	2b10      	cmp	r3, #16
{
   1c1d2:	4611      	mov	r1, r2
   1c1d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1c1d6:	4605      	mov	r5, r0
   1c1d8:	461a      	mov	r2, r3
	if (length != 16U) {
   1c1da:	d00b      	beq.n	1c1f4 <read_included_uuid_cb+0x28>
		LOG_ERR("Invalid data len %u", length);
   1c1dc:	4820      	ldr	r0, [pc, #128]	; (1c260 <read_included_uuid_cb+0x94>)
   1c1de:	2145      	movs	r1, #69	; 0x45
   1c1e0:	f00d ff41 	bl	2a066 <z_log_minimal_printk>
		params->func(conn, NULL, params);
   1c1e4:	6863      	ldr	r3, [r4, #4]
   1c1e6:	4622      	mov	r2, r4
   1c1e8:	2100      	movs	r1, #0
   1c1ea:	4628      	mov	r0, r5
}
   1c1ec:	b00f      	add	sp, #60	; 0x3c
   1c1ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, NULL, params);
   1c1f2:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
   1c1f4:	8963      	ldrh	r3, [r4, #10]
   1c1f6:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1c1fa:	89a3      	ldrh	r3, [r4, #12]
   1c1fc:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   1c200:	ae04      	add	r6, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1c202:	2302      	movs	r3, #2
	memcpy(u.u128.val, pdu, length);
   1c204:	f10d 0011 	add.w	r0, sp, #17
	handle = params->_included.attr_handle;
   1c208:	8927      	ldrh	r7, [r4, #8]
	value.uuid = &u.uuid;
   1c20a:	9602      	str	r6, [sp, #8]
	u.uuid.type = BT_UUID_TYPE_128;
   1c20c:	f88d 3010 	strb.w	r3, [sp, #16]
	memcpy(u.u128.val, pdu, length);
   1c210:	f00e fef1 	bl	2aff6 <memcpy>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c214:	6821      	ldr	r1, [r4, #0]
   1c216:	b9c1      	cbnz	r1, 1c24a <read_included_uuid_cb+0x7e>
		.uuid = BT_UUID_GATT_INCLUDE,
   1c218:	2100      	movs	r1, #0
   1c21a:	f642 0302 	movw	r3, #10242	; 0x2802
	attr = (struct bt_gatt_attr) {
   1c21e:	2210      	movs	r2, #16
   1c220:	a80a      	add	r0, sp, #40	; 0x28
		.uuid = BT_UUID_GATT_INCLUDE,
   1c222:	f88d 1004 	strb.w	r1, [sp, #4]
   1c226:	f8ad 3006 	strh.w	r3, [sp, #6]
	attr = (struct bt_gatt_attr) {
   1c22a:	f00e feef 	bl	2b00c <memset>
   1c22e:	ab01      	add	r3, sp, #4
   1c230:	9309      	str	r3, [sp, #36]	; 0x24
   1c232:	ab02      	add	r3, sp, #8
   1c234:	930c      	str	r3, [sp, #48]	; 0x30
   1c236:	f8ad 7034 	strh.w	r7, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c23a:	6863      	ldr	r3, [r4, #4]
   1c23c:	4622      	mov	r2, r4
   1c23e:	a909      	add	r1, sp, #36	; 0x24
   1c240:	4628      	mov	r0, r5
   1c242:	4798      	blx	r3
   1c244:	b930      	cbnz	r0, 1c254 <read_included_uuid_cb+0x88>
}
   1c246:	b00f      	add	sp, #60	; 0x3c
   1c248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c24a:	4630      	mov	r0, r6
   1c24c:	f00e ff67 	bl	2b11e <bt_uuid_cmp>
   1c250:	2800      	cmp	r0, #0
   1c252:	d0e1      	beq.n	1c218 <read_included_uuid_cb+0x4c>
	gatt_discover_next(conn, params->start_handle, params);
   1c254:	8921      	ldrh	r1, [r4, #8]
   1c256:	4622      	mov	r2, r4
   1c258:	4628      	mov	r0, r5
   1c25a:	f010 fbf1 	bl	2ca40 <gatt_discover_next>
	return;
   1c25e:	e7f2      	b.n	1c246 <read_included_uuid_cb+0x7a>
   1c260:	00031e08 	.word	0x00031e08

0001c264 <gatt_find_info_rsp>:
{
   1c264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c268:	b08f      	sub	sp, #60	; 0x3c
   1c26a:	4680      	mov	r8, r0
   1c26c:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1c26e:	4615      	mov	r5, r2
	if (err) {
   1c270:	b941      	cbnz	r1, 1c284 <gatt_find_info_rsp+0x20>
	switch (rsp->format) {
   1c272:	7812      	ldrb	r2, [r2, #0]
   1c274:	2a01      	cmp	r2, #1
   1c276:	d00b      	beq.n	1c290 <gatt_find_info_rsp+0x2c>
   1c278:	2a02      	cmp	r2, #2
   1c27a:	d021      	beq.n	1c2c0 <gatt_find_info_rsp+0x5c>
		LOG_ERR("Invalid format %u", rsp->format);
   1c27c:	4849      	ldr	r0, [pc, #292]	; (1c3a4 <gatt_find_info_rsp+0x140>)
   1c27e:	2145      	movs	r1, #69	; 0x45
   1c280:	f00d fef1 	bl	2a066 <z_log_minimal_printk>
	params->func(conn, NULL, params);
   1c284:	6873      	ldr	r3, [r6, #4]
   1c286:	4632      	mov	r2, r6
   1c288:	2100      	movs	r1, #0
   1c28a:	4640      	mov	r0, r8
   1c28c:	4798      	blx	r3
   1c28e:	e086      	b.n	1c39e <gatt_find_info_rsp+0x13a>
	switch (rsp->format) {
   1c290:	f04f 0a04 	mov.w	sl, #4
	length--;
   1c294:	1e5c      	subs	r4, r3, #1
   1c296:	b2a4      	uxth	r4, r4
	if (length < len) {
   1c298:	4554      	cmp	r4, sl
		u.uuid.type = BT_UUID_TYPE_16;
   1c29a:	f88d 1010 	strb.w	r1, [sp, #16]
	if (length < len) {
   1c29e:	d3f1      	bcc.n	1c284 <gatt_find_info_rsp+0x20>
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2a0:	fbb4 f4fa 	udiv	r4, r4, sl
	bool skip = false;
   1c2a4:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2a8:	3501      	adds	r5, #1
	uint16_t handle = 0U;
   1c2aa:	f8cd 9000 	str.w	r9, [sp]
			skip = false;
   1c2ae:	46cb      	mov	fp, r9
   1c2b0:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   1c2b2:	b94c      	cbnz	r4, 1c2c8 <gatt_find_info_rsp+0x64>
	gatt_discover_next(conn, handle, params);
   1c2b4:	9900      	ldr	r1, [sp, #0]
   1c2b6:	4632      	mov	r2, r6
   1c2b8:	4640      	mov	r0, r8
   1c2ba:	f010 fbc1 	bl	2ca40 <gatt_discover_next>
	return;
   1c2be:	e06e      	b.n	1c39e <gatt_find_info_rsp+0x13a>
	switch (rsp->format) {
   1c2c0:	4611      	mov	r1, r2
		len = sizeof(*info.i128);
   1c2c2:	f04f 0a12 	mov.w	sl, #18
   1c2c6:	e7e5      	b.n	1c294 <gatt_find_info_rsp+0x30>
		handle = sys_le16_to_cpu(info.i16->handle);
   1c2c8:	882b      	ldrh	r3, [r5, #0]
   1c2ca:	9301      	str	r3, [sp, #4]
   1c2cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c2d0:	9300      	str	r3, [sp, #0]
		if (skip) {
   1c2d2:	f1b9 0f00 	cmp.w	r9, #0
   1c2d6:	d14c      	bne.n	1c372 <gatt_find_info_rsp+0x10e>
		switch (u.uuid.type) {
   1c2d8:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1c2dc:	b3b3      	cbz	r3, 1c34c <gatt_find_info_rsp+0xe8>
   1c2de:	2b02      	cmp	r3, #2
   1c2e0:	d03b      	beq.n	1c35a <gatt_find_info_rsp+0xf6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c2e2:	6831      	ldr	r1, [r6, #0]
   1c2e4:	2900      	cmp	r1, #0
   1c2e6:	d13f      	bne.n	1c368 <gatt_find_info_rsp+0x104>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1c2e8:	7c33      	ldrb	r3, [r6, #16]
   1c2ea:	2b04      	cmp	r3, #4
   1c2ec:	d146      	bne.n	1c37c <gatt_find_info_rsp+0x118>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1c2ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c2f2:	a902      	add	r1, sp, #8
   1c2f4:	4638      	mov	r0, r7
   1c2f6:	f88d b008 	strb.w	fp, [sp, #8]
   1c2fa:	f8ad 300a 	strh.w	r3, [sp, #10]
   1c2fe:	f00e ff0e 	bl	2b11e <bt_uuid_cmp>
   1c302:	b3b0      	cbz	r0, 1c372 <gatt_find_info_rsp+0x10e>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1c304:	f642 0301 	movw	r3, #10241	; 0x2801
   1c308:	a903      	add	r1, sp, #12
   1c30a:	4638      	mov	r0, r7
   1c30c:	f88d b00c 	strb.w	fp, [sp, #12]
   1c310:	f8ad 300e 	strh.w	r3, [sp, #14]
   1c314:	f00e ff03 	bl	2b11e <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1c318:	b358      	cbz	r0, 1c372 <gatt_find_info_rsp+0x10e>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1c31a:	f642 0302 	movw	r3, #10242	; 0x2802
   1c31e:	a909      	add	r1, sp, #36	; 0x24
   1c320:	4638      	mov	r0, r7
   1c322:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   1c326:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1c32a:	f00e fef8 	bl	2b11e <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1c32e:	b300      	cbz	r0, 1c372 <gatt_find_info_rsp+0x10e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1c330:	f642 0303 	movw	r3, #10243	; 0x2803
   1c334:	a909      	add	r1, sp, #36	; 0x24
   1c336:	4638      	mov	r0, r7
   1c338:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
   1c33c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1c340:	f00e feed 	bl	2b11e <bt_uuid_cmp>
   1c344:	b9d0      	cbnz	r0, 1c37c <gatt_find_info_rsp+0x118>
				skip = true;
   1c346:	f04f 0901 	mov.w	r9, #1
   1c34a:	e014      	b.n	1c376 <gatt_find_info_rsp+0x112>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1c34c:	78ab      	ldrb	r3, [r5, #2]
   1c34e:	78ea      	ldrb	r2, [r5, #3]
   1c350:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c354:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1c358:	e7c3      	b.n	1c2e2 <gatt_find_info_rsp+0x7e>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1c35a:	2210      	movs	r2, #16
   1c35c:	1ca9      	adds	r1, r5, #2
   1c35e:	f10d 0011 	add.w	r0, sp, #17
   1c362:	f00e fe48 	bl	2aff6 <memcpy>
			break;
   1c366:	e7bc      	b.n	1c2e2 <gatt_find_info_rsp+0x7e>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1c368:	4638      	mov	r0, r7
   1c36a:	f00e fed8 	bl	2b11e <bt_uuid_cmp>
   1c36e:	2800      	cmp	r0, #0
   1c370:	d0ba      	beq.n	1c2e8 <gatt_find_info_rsp+0x84>
			skip = false;
   1c372:	f04f 0900 	mov.w	r9, #0
	     i--, pdu = (const uint8_t *)pdu + len) {
   1c376:	3c01      	subs	r4, #1
   1c378:	4455      	add	r5, sl
   1c37a:	e79a      	b.n	1c2b2 <gatt_find_info_rsp+0x4e>
		attr = (struct bt_gatt_attr) {
   1c37c:	2210      	movs	r2, #16
   1c37e:	2100      	movs	r1, #0
   1c380:	a80a      	add	r0, sp, #40	; 0x28
   1c382:	f00e fe43 	bl	2b00c <memset>
   1c386:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c38a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1c38e:	9709      	str	r7, [sp, #36]	; 0x24
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1c390:	6873      	ldr	r3, [r6, #4]
   1c392:	4632      	mov	r2, r6
   1c394:	a909      	add	r1, sp, #36	; 0x24
   1c396:	4640      	mov	r0, r8
   1c398:	4798      	blx	r3
   1c39a:	2800      	cmp	r0, #0
   1c39c:	d1eb      	bne.n	1c376 <gatt_find_info_rsp+0x112>
}
   1c39e:	b00f      	add	sp, #60	; 0x3c
   1c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3a4:	00031e21 	.word	0x00031e21

0001c3a8 <bt_gatt_read>:
{
   1c3a8:	b507      	push	{r0, r1, r2, lr}
   1c3aa:	460a      	mov	r2, r1
	__ASSERT(conn, "invalid parameters\n");
   1c3ac:	b950      	cbnz	r0, 1c3c4 <bt_gatt_read+0x1c>
   1c3ae:	4925      	ldr	r1, [pc, #148]	; (1c444 <bt_gatt_read+0x9c>)
   1c3b0:	4825      	ldr	r0, [pc, #148]	; (1c448 <bt_gatt_read+0xa0>)
   1c3b2:	f241 2211 	movw	r2, #4625	; 0x1211
   1c3b6:	f00d fe48 	bl	2a04a <assert_print>
   1c3ba:	f241 2111 	movw	r1, #4625	; 0x1211
	__ASSERT(params && params->func, "invalid parameters\n");
   1c3be:	4821      	ldr	r0, [pc, #132]	; (1c444 <bt_gatt_read+0x9c>)
   1c3c0:	f00d fe3c 	bl	2a03c <assert_post_action>
   1c3c4:	b109      	cbz	r1, 1c3ca <bt_gatt_read+0x22>
   1c3c6:	6809      	ldr	r1, [r1, #0]
   1c3c8:	b941      	cbnz	r1, 1c3dc <bt_gatt_read+0x34>
   1c3ca:	491e      	ldr	r1, [pc, #120]	; (1c444 <bt_gatt_read+0x9c>)
   1c3cc:	481e      	ldr	r0, [pc, #120]	; (1c448 <bt_gatt_read+0xa0>)
   1c3ce:	f241 2212 	movw	r2, #4626	; 0x1212
   1c3d2:	f00d fe3a 	bl	2a04a <assert_print>
   1c3d6:	f241 2112 	movw	r1, #4626	; 0x1212
   1c3da:	e7f0      	b.n	1c3be <bt_gatt_read+0x16>
	if (conn->state != BT_CONN_CONNECTED) {
   1c3dc:	7b43      	ldrb	r3, [r0, #13]
   1c3de:	2b07      	cmp	r3, #7
   1c3e0:	d12c      	bne.n	1c43c <bt_gatt_read+0x94>
	if (params->handle_count == 0) {
   1c3e2:	6853      	ldr	r3, [r2, #4]
   1c3e4:	b93b      	cbnz	r3, 1c3f6 <bt_gatt_read+0x4e>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1c3e6:	2308      	movs	r3, #8
   1c3e8:	f04f 0e04 	mov.w	lr, #4
   1c3ec:	e9cd 3e00 	strd	r3, lr, [sp]
   1c3f0:	4b16      	ldr	r3, [pc, #88]	; (1c44c <bt_gatt_read+0xa4>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c3f2:	4917      	ldr	r1, [pc, #92]	; (1c450 <bt_gatt_read+0xa8>)
   1c3f4:	e009      	b.n	1c40a <bt_gatt_read+0x62>
	if (params->handle_count > 1) {
   1c3f6:	2b01      	cmp	r3, #1
   1c3f8:	d011      	beq.n	1c41e <bt_gatt_read+0x76>
		if (params->multiple.variable) {
   1c3fa:	7b11      	ldrb	r1, [r2, #12]
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1c3fc:	005b      	lsls	r3, r3, #1
   1c3fe:	9301      	str	r3, [sp, #4]
		if (params->multiple.variable) {
   1c400:	b141      	cbz	r1, 1c414 <bt_gatt_read+0x6c>
	return gatt_req_send(conn, gatt_read_mult_vl_rsp, params,
   1c402:	2320      	movs	r3, #32
   1c404:	9300      	str	r3, [sp, #0]
   1c406:	4913      	ldr	r1, [pc, #76]	; (1c454 <bt_gatt_read+0xac>)
   1c408:	4b13      	ldr	r3, [pc, #76]	; (1c458 <bt_gatt_read+0xb0>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c40a:	f010 fa13 	bl	2c834 <gatt_req_send.constprop.0>
}
   1c40e:	b003      	add	sp, #12
   1c410:	f85d fb04 	ldr.w	pc, [sp], #4
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   1c414:	230e      	movs	r3, #14
   1c416:	9300      	str	r3, [sp, #0]
   1c418:	4910      	ldr	r1, [pc, #64]	; (1c45c <bt_gatt_read+0xb4>)
   1c41a:	4b11      	ldr	r3, [pc, #68]	; (1c460 <bt_gatt_read+0xb8>)
   1c41c:	e7f5      	b.n	1c40a <bt_gatt_read+0x62>
	if (params->single.offset) {
   1c41e:	8953      	ldrh	r3, [r2, #10]
   1c420:	b133      	cbz	r3, 1c430 <bt_gatt_read+0x88>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1c422:	230c      	movs	r3, #12
   1c424:	f04f 0c04 	mov.w	ip, #4
   1c428:	e9cd 3c00 	strd	r3, ip, [sp]
   1c42c:	4b0d      	ldr	r3, [pc, #52]	; (1c464 <bt_gatt_read+0xbc>)
   1c42e:	e7e0      	b.n	1c3f2 <bt_gatt_read+0x4a>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1c430:	230a      	movs	r3, #10
   1c432:	2102      	movs	r1, #2
   1c434:	e9cd 3100 	strd	r3, r1, [sp]
   1c438:	4b0b      	ldr	r3, [pc, #44]	; (1c468 <bt_gatt_read+0xc0>)
   1c43a:	e7da      	b.n	1c3f2 <bt_gatt_read+0x4a>
		return -ENOTCONN;
   1c43c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c440:	e7e5      	b.n	1c40e <bt_gatt_read+0x66>
   1c442:	bf00      	nop
   1c444:	00031b7d 	.word	0x00031b7d
   1c448:	0002f2b5 	.word	0x0002f2b5
   1c44c:	0002c65f 	.word	0x0002c65f
   1c450:	0001c46d 	.word	0x0001c46d
   1c454:	0002c59f 	.word	0x0002c59f
   1c458:	0002c4a9 	.word	0x0002c4a9
   1c45c:	0002c529 	.word	0x0002c529
   1c460:	0002c481 	.word	0x0002c481
   1c464:	0002c3d9 	.word	0x0002c3d9
   1c468:	0002c3c5 	.word	0x0002c3c5

0001c46c <gatt_read_rsp>:
{
   1c46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1c470:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1c472:	4606      	mov	r6, r0
   1c474:	4690      	mov	r8, r2
   1c476:	461d      	mov	r5, r3
	if (err || !length) {
   1c478:	460f      	mov	r7, r1
   1c47a:	b901      	cbnz	r1, 1c47e <gatt_read_rsp+0x12>
   1c47c:	b953      	cbnz	r3, 1c494 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   1c47e:	2300      	movs	r3, #0
   1c480:	930a      	str	r3, [sp, #40]	; 0x28
   1c482:	6825      	ldr	r5, [r4, #0]
   1c484:	4622      	mov	r2, r4
   1c486:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c488:	4630      	mov	r0, r6
   1c48a:	46ac      	mov	ip, r5
}
   1c48c:	b003      	add	sp, #12
   1c48e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c492:	4760      	bx	ip
	if (!params->handle_count) {
   1c494:	6863      	ldr	r3, [r4, #4]
   1c496:	2b00      	cmp	r3, #0
   1c498:	d143      	bne.n	1c522 <gatt_read_rsp+0xb6>
	for (length--, pdu = rsp->data; length;
   1c49a:	3d01      	subs	r5, #1
   1c49c:	b2ad      	uxth	r5, r5
   1c49e:	f102 0901 	add.w	r9, r2, #1
   1c4a2:	b305      	cbz	r5, 1c4e6 <gatt_read_rsp+0x7a>
		handle = sys_le16_to_cpu(data->handle);
   1c4a4:	f8b9 3000 	ldrh.w	r3, [r9]
   1c4a8:	b29a      	uxth	r2, r3
		if (!handle) {
   1c4aa:	b932      	cbnz	r2, 1c4ba <gatt_read_rsp+0x4e>
			LOG_ERR("Invalid handle");
   1c4ac:	482d      	ldr	r0, [pc, #180]	; (1c564 <gatt_read_rsp+0xf8>)
   1c4ae:	2145      	movs	r1, #69	; 0x45
}
   1c4b0:	b003      	add	sp, #12
   1c4b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			LOG_ERR("Invalid handle");
   1c4b6:	f00d bdd6 	b.w	2a066 <z_log_minimal_printk>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1c4ba:	f898 1000 	ldrb.w	r1, [r8]
		params->by_uuid.start_handle = handle;
   1c4be:	8123      	strh	r3, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1c4c0:	42a9      	cmp	r1, r5
   1c4c2:	bf8c      	ite	hi
   1c4c4:	1ea9      	subhi	r1, r5, #2
   1c4c6:	3902      	subls	r1, #2
   1c4c8:	b289      	uxth	r1, r1
		if (params->func(conn, 0, params, data->value, len) ==
   1c4ca:	9100      	str	r1, [sp, #0]
   1c4cc:	6827      	ldr	r7, [r4, #0]
   1c4ce:	f109 0302 	add.w	r3, r9, #2
   1c4d2:	4622      	mov	r2, r4
   1c4d4:	2100      	movs	r1, #0
   1c4d6:	4630      	mov	r0, r6
   1c4d8:	47b8      	blx	r7
   1c4da:	2800      	cmp	r0, #0
   1c4dc:	d03f      	beq.n	1c55e <gatt_read_rsp+0xf2>
		if (rsp->len > length) {
   1c4de:	f898 3000 	ldrb.w	r3, [r8]
   1c4e2:	42ab      	cmp	r3, r5
   1c4e4:	d90b      	bls.n	1c4fe <gatt_read_rsp+0x92>
	if (bt_gatt_read(conn, params) < 0) {
   1c4e6:	4621      	mov	r1, r4
   1c4e8:	4630      	mov	r0, r6
   1c4ea:	f7ff ff5d 	bl	1c3a8 <bt_gatt_read>
   1c4ee:	2800      	cmp	r0, #0
   1c4f0:	da35      	bge.n	1c55e <gatt_read_rsp+0xf2>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c4f2:	2300      	movs	r3, #0
   1c4f4:	930a      	str	r3, [sp, #40]	; 0x28
   1c4f6:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c4f8:	4622      	mov	r2, r4
   1c4fa:	210e      	movs	r1, #14
   1c4fc:	e7c4      	b.n	1c488 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1c4fe:	8923      	ldrh	r3, [r4, #8]
   1c500:	8962      	ldrh	r2, [r4, #10]
   1c502:	429a      	cmp	r2, r3
   1c504:	d105      	bne.n	1c512 <gatt_read_rsp+0xa6>
			params->func(conn, 0, params, NULL, 0);
   1c506:	2300      	movs	r3, #0
   1c508:	930a      	str	r3, [sp, #40]	; 0x28
   1c50a:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1c50c:	4622      	mov	r2, r4
   1c50e:	4619      	mov	r1, r3
   1c510:	e7ba      	b.n	1c488 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1c512:	3301      	adds	r3, #1
   1c514:	8123      	strh	r3, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1c516:	f898 3000 	ldrb.w	r3, [r8]
   1c51a:	1aed      	subs	r5, r5, r3
   1c51c:	b2ad      	uxth	r5, r5
   1c51e:	4499      	add	r9, r3
   1c520:	e7bf      	b.n	1c4a2 <gatt_read_rsp+0x36>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1c522:	9500      	str	r5, [sp, #0]
   1c524:	4613      	mov	r3, r2
   1c526:	f8d4 c000 	ldr.w	ip, [r4]
   1c52a:	4622      	mov	r2, r4
   1c52c:	47e0      	blx	ip
   1c52e:	b1b0      	cbz	r0, 1c55e <gatt_read_rsp+0xf2>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1c530:	4630      	mov	r0, r6
   1c532:	f00f fda1 	bl	2c078 <bt_att_get_mtu>
   1c536:	3801      	subs	r0, #1
   1c538:	4285      	cmp	r5, r0
   1c53a:	da03      	bge.n	1c544 <gatt_read_rsp+0xd8>
		params->func(conn, 0, params, NULL, 0);
   1c53c:	970a      	str	r7, [sp, #40]	; 0x28
   1c53e:	6825      	ldr	r5, [r4, #0]
   1c540:	463b      	mov	r3, r7
   1c542:	e7e3      	b.n	1c50c <gatt_read_rsp+0xa0>
	params->single.offset += length;
   1c544:	8963      	ldrh	r3, [r4, #10]
   1c546:	441d      	add	r5, r3
   1c548:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1c54a:	4621      	mov	r1, r4
   1c54c:	4630      	mov	r0, r6
   1c54e:	f7ff ff2b 	bl	1c3a8 <bt_gatt_read>
   1c552:	2800      	cmp	r0, #0
   1c554:	da03      	bge.n	1c55e <gatt_read_rsp+0xf2>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1c556:	970a      	str	r7, [sp, #40]	; 0x28
   1c558:	6825      	ldr	r5, [r4, #0]
   1c55a:	463b      	mov	r3, r7
   1c55c:	e7cc      	b.n	1c4f8 <gatt_read_rsp+0x8c>
}
   1c55e:	b003      	add	sp, #12
   1c560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c564:	00031e38 	.word	0x00031e38

0001c568 <bt_gatt_write>:
{
   1c568:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c56a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1c56c:	4605      	mov	r5, r0
   1c56e:	b950      	cbnz	r0, 1c586 <bt_gatt_write+0x1e>
   1c570:	4926      	ldr	r1, [pc, #152]	; (1c60c <bt_gatt_write+0xa4>)
   1c572:	4827      	ldr	r0, [pc, #156]	; (1c610 <bt_gatt_write+0xa8>)
   1c574:	f241 3210 	movw	r2, #4880	; 0x1310
   1c578:	f00d fd67 	bl	2a04a <assert_print>
   1c57c:	f241 3110 	movw	r1, #4880	; 0x1310
	__ASSERT(params && params->func, "invalid parameters\n");
   1c580:	4822      	ldr	r0, [pc, #136]	; (1c60c <bt_gatt_write+0xa4>)
   1c582:	f00d fd5b 	bl	2a03c <assert_post_action>
   1c586:	b109      	cbz	r1, 1c58c <bt_gatt_write+0x24>
   1c588:	680b      	ldr	r3, [r1, #0]
   1c58a:	b943      	cbnz	r3, 1c59e <bt_gatt_write+0x36>
   1c58c:	491f      	ldr	r1, [pc, #124]	; (1c60c <bt_gatt_write+0xa4>)
   1c58e:	4820      	ldr	r0, [pc, #128]	; (1c610 <bt_gatt_write+0xa8>)
   1c590:	f241 3211 	movw	r2, #4881	; 0x1311
   1c594:	f00d fd59 	bl	2a04a <assert_print>
   1c598:	f241 3111 	movw	r1, #4881	; 0x1311
   1c59c:	e7f0      	b.n	1c580 <bt_gatt_write+0x18>
	__ASSERT(params->handle, "invalid parameters\n");
   1c59e:	888b      	ldrh	r3, [r1, #4]
   1c5a0:	b943      	cbnz	r3, 1c5b4 <bt_gatt_write+0x4c>
   1c5a2:	491a      	ldr	r1, [pc, #104]	; (1c60c <bt_gatt_write+0xa4>)
   1c5a4:	481a      	ldr	r0, [pc, #104]	; (1c610 <bt_gatt_write+0xa8>)
   1c5a6:	f241 3212 	movw	r2, #4882	; 0x1312
   1c5aa:	f00d fd4e 	bl	2a04a <assert_print>
   1c5ae:	f241 3112 	movw	r1, #4882	; 0x1312
   1c5b2:	e7e5      	b.n	1c580 <bt_gatt_write+0x18>
	if (conn->state != BT_CONN_CONNECTED) {
   1c5b4:	7b43      	ldrb	r3, [r0, #13]
   1c5b6:	2b07      	cmp	r3, #7
   1c5b8:	d125      	bne.n	1c606 <bt_gatt_write+0x9e>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c5ba:	88cb      	ldrh	r3, [r1, #6]
	len = sizeof(struct bt_att_write_req) + params->length;
   1c5bc:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c5be:	b1ab      	cbz	r3, 1c5ec <bt_gatt_write+0x84>
	len = bt_att_get_mtu(conn) - req_len - 1;
   1c5c0:	4628      	mov	r0, r5
   1c5c2:	f00f fd59 	bl	2c078 <bt_att_get_mtu>
	len = MIN(params->length, len);
   1c5c6:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1c5c8:	4912      	ldr	r1, [pc, #72]	; (1c614 <bt_gatt_write+0xac>)
	len = bt_att_get_mtu(conn) - req_len - 1;
   1c5ca:	3805      	subs	r0, #5
   1c5cc:	b280      	uxth	r0, r0
	len = MIN(params->length, len);
   1c5ce:	4283      	cmp	r3, r0
   1c5d0:	bf28      	it	cs
   1c5d2:	4603      	movcs	r3, r0
	len += req_len;
   1c5d4:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1c5d6:	b29b      	uxth	r3, r3
   1c5d8:	9301      	str	r3, [sp, #4]
   1c5da:	2316      	movs	r3, #22
   1c5dc:	9300      	str	r3, [sp, #0]
   1c5de:	4b0e      	ldr	r3, [pc, #56]	; (1c618 <bt_gatt_write+0xb0>)
   1c5e0:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1c5e2:	4628      	mov	r0, r5
   1c5e4:	f010 f926 	bl	2c834 <gatt_req_send.constprop.0>
}
   1c5e8:	b002      	add	sp, #8
   1c5ea:	bd70      	pop	{r4, r5, r6, pc}
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c5ec:	f00f fd44 	bl	2c078 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   1c5f0:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1c5f2:	3801      	subs	r0, #1
   1c5f4:	42b0      	cmp	r0, r6
   1c5f6:	d3e3      	bcc.n	1c5c0 <bt_gatt_write+0x58>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1c5f8:	2312      	movs	r3, #18
   1c5fa:	9300      	str	r3, [sp, #0]
   1c5fc:	4907      	ldr	r1, [pc, #28]	; (1c61c <bt_gatt_write+0xb4>)
   1c5fe:	4b08      	ldr	r3, [pc, #32]	; (1c620 <bt_gatt_write+0xb8>)
   1c600:	9601      	str	r6, [sp, #4]
   1c602:	4622      	mov	r2, r4
   1c604:	e7ed      	b.n	1c5e2 <bt_gatt_write+0x7a>
		return -ENOTCONN;
   1c606:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c60a:	e7ed      	b.n	1c5e8 <bt_gatt_write+0x80>
   1c60c:	00031b7d 	.word	0x00031b7d
   1c610:	0002f2b5 	.word	0x0002f2b5
   1c614:	0001c625 	.word	0x0001c625
   1c618:	0002c4e9 	.word	0x0002c4e9
   1c61c:	0002c271 	.word	0x0002c271
   1c620:	0002c4ad 	.word	0x0002c4ad

0001c624 <gatt_prepare_write_rsp>:
{
   1c624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c626:	9c08      	ldr	r4, [sp, #32]
   1c628:	4606      	mov	r6, r0
   1c62a:	4617      	mov	r7, r2
	if (err) {
   1c62c:	b129      	cbz	r1, 1c63a <gatt_prepare_write_rsp+0x16>
		params->func(conn, err, params);
   1c62e:	6823      	ldr	r3, [r4, #0]
   1c630:	4622      	mov	r2, r4
}
   1c632:	b003      	add	sp, #12
   1c634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1c638:	4718      	bx	r3
	len = length - sizeof(*rsp);
   1c63a:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
   1c63c:	89a3      	ldrh	r3, [r4, #12]
   1c63e:	429d      	cmp	r5, r3
   1c640:	d913      	bls.n	1c66a <gatt_prepare_write_rsp+0x46>
		LOG_ERR("Incorrect length, canceling write");
   1c642:	481c      	ldr	r0, [pc, #112]	; (1c6b4 <gatt_prepare_write_rsp+0x90>)
   1c644:	2145      	movs	r1, #69	; 0x45
   1c646:	f00d fd0e 	bl	2a066 <z_log_minimal_printk>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   1c64a:	2318      	movs	r3, #24
   1c64c:	2101      	movs	r1, #1
   1c64e:	e9cd 3100 	strd	r3, r1, [sp]
   1c652:	4b19      	ldr	r3, [pc, #100]	; (1c6b8 <gatt_prepare_write_rsp+0x94>)
   1c654:	4919      	ldr	r1, [pc, #100]	; (1c6bc <gatt_prepare_write_rsp+0x98>)
   1c656:	4622      	mov	r2, r4
   1c658:	4630      	mov	r0, r6
   1c65a:	f010 f8eb 	bl	2c834 <gatt_req_send.constprop.0>
		if (gatt_cancel_all_writes(conn, params)) {
   1c65e:	b338      	cbz	r0, 1c6b0 <gatt_prepare_write_rsp+0x8c>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1c660:	6823      	ldr	r3, [r4, #0]
   1c662:	4622      	mov	r2, r4
   1c664:	210e      	movs	r1, #14
   1c666:	4630      	mov	r0, r6
   1c668:	e7e3      	b.n	1c632 <gatt_prepare_write_rsp+0xe>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   1c66a:	462a      	mov	r2, r5
   1c66c:	68a0      	ldr	r0, [r4, #8]
   1c66e:	1d39      	adds	r1, r7, #4
   1c670:	f00e fc9a 	bl	2afa8 <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   1c674:	88e2      	ldrh	r2, [r4, #6]
   1c676:	887b      	ldrh	r3, [r7, #2]
   1c678:	4293      	cmp	r3, r2
   1c67a:	d100      	bne.n	1c67e <gatt_prepare_write_rsp+0x5a>
   1c67c:	b110      	cbz	r0, 1c684 <gatt_prepare_write_rsp+0x60>
		LOG_ERR("Incorrect offset or data in response, canceling write");
   1c67e:	4810      	ldr	r0, [pc, #64]	; (1c6c0 <gatt_prepare_write_rsp+0x9c>)
   1c680:	2145      	movs	r1, #69	; 0x45
   1c682:	e7e0      	b.n	1c646 <gatt_prepare_write_rsp+0x22>
	params->offset += len;
   1c684:	fa13 f385 	uxtah	r3, r3, r5
   1c688:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
   1c68a:	68a3      	ldr	r3, [r4, #8]
   1c68c:	442b      	add	r3, r5
   1c68e:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   1c690:	89a3      	ldrh	r3, [r4, #12]
   1c692:	1b5b      	subs	r3, r3, r5
   1c694:	b29b      	uxth	r3, r3
   1c696:	81a3      	strh	r3, [r4, #12]
	if (!params->length) {
   1c698:	b92b      	cbnz	r3, 1c6a6 <gatt_prepare_write_rsp+0x82>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   1c69a:	2318      	movs	r3, #24
   1c69c:	2201      	movs	r2, #1
   1c69e:	e9cd 3200 	strd	r3, r2, [sp]
   1c6a2:	4b08      	ldr	r3, [pc, #32]	; (1c6c4 <gatt_prepare_write_rsp+0xa0>)
   1c6a4:	e7d6      	b.n	1c654 <gatt_prepare_write_rsp+0x30>
	if (!bt_gatt_write(conn, params)) {
   1c6a6:	4621      	mov	r1, r4
   1c6a8:	4630      	mov	r0, r6
   1c6aa:	f7ff ff5d 	bl	1c568 <bt_gatt_write>
   1c6ae:	e7d6      	b.n	1c65e <gatt_prepare_write_rsp+0x3a>
}
   1c6b0:	b003      	add	sp, #12
   1c6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c6b4:	00031e4c 	.word	0x00031e4c
   1c6b8:	0002c3f1 	.word	0x0002c3f1
   1c6bc:	0002c271 	.word	0x0002c271
   1c6c0:	00031e73 	.word	0x00031e73
   1c6c4:	0002c403 	.word	0x0002c403

0001c6c8 <bt_gatt_subscribe>:
{
   1c6c8:	b570      	push	{r4, r5, r6, lr}
   1c6ca:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1c6cc:	4606      	mov	r6, r0
   1c6ce:	b950      	cbnz	r0, 1c6e6 <bt_gatt_subscribe+0x1e>
   1c6d0:	4939      	ldr	r1, [pc, #228]	; (1c7b8 <bt_gatt_subscribe+0xf0>)
   1c6d2:	483a      	ldr	r0, [pc, #232]	; (1c7bc <bt_gatt_subscribe+0xf4>)
   1c6d4:	f241 32aa 	movw	r2, #5034	; 0x13aa
   1c6d8:	f00d fcb7 	bl	2a04a <assert_print>
   1c6dc:	f241 31aa 	movw	r1, #5034	; 0x13aa
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1c6e0:	4835      	ldr	r0, [pc, #212]	; (1c7b8 <bt_gatt_subscribe+0xf0>)
   1c6e2:	f00d fcab 	bl	2a03c <assert_post_action>
   1c6e6:	b109      	cbz	r1, 1c6ec <bt_gatt_subscribe+0x24>
   1c6e8:	680b      	ldr	r3, [r1, #0]
   1c6ea:	b943      	cbnz	r3, 1c6fe <bt_gatt_subscribe+0x36>
   1c6ec:	4932      	ldr	r1, [pc, #200]	; (1c7b8 <bt_gatt_subscribe+0xf0>)
   1c6ee:	4833      	ldr	r0, [pc, #204]	; (1c7bc <bt_gatt_subscribe+0xf4>)
   1c6f0:	f241 32ab 	movw	r2, #5035	; 0x13ab
   1c6f4:	f00d fca9 	bl	2a04a <assert_print>
   1c6f8:	f241 31ab 	movw	r1, #5035	; 0x13ab
   1c6fc:	e7f0      	b.n	1c6e0 <bt_gatt_subscribe+0x18>
	__ASSERT(params->value, "invalid parameters\n");
   1c6fe:	8a0b      	ldrh	r3, [r1, #16]
   1c700:	b943      	cbnz	r3, 1c714 <bt_gatt_subscribe+0x4c>
   1c702:	492d      	ldr	r1, [pc, #180]	; (1c7b8 <bt_gatt_subscribe+0xf0>)
   1c704:	482d      	ldr	r0, [pc, #180]	; (1c7bc <bt_gatt_subscribe+0xf4>)
   1c706:	f241 32ac 	movw	r2, #5036	; 0x13ac
   1c70a:	f00d fc9e 	bl	2a04a <assert_print>
   1c70e:	f241 31ac 	movw	r1, #5036	; 0x13ac
   1c712:	e7e5      	b.n	1c6e0 <bt_gatt_subscribe+0x18>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1c714:	89cb      	ldrh	r3, [r1, #14]
   1c716:	b943      	cbnz	r3, 1c72a <bt_gatt_subscribe+0x62>
   1c718:	4927      	ldr	r1, [pc, #156]	; (1c7b8 <bt_gatt_subscribe+0xf0>)
   1c71a:	4828      	ldr	r0, [pc, #160]	; (1c7bc <bt_gatt_subscribe+0xf4>)
   1c71c:	f241 32b2 	movw	r2, #5042	; 0x13b2
   1c720:	f00d fc93 	bl	2a04a <assert_print>
   1c724:	f241 31b2 	movw	r1, #5042	; 0x13b2
   1c728:	e7da      	b.n	1c6e0 <bt_gatt_subscribe+0x18>
	if (conn->state != BT_CONN_CONNECTED) {
   1c72a:	7b43      	ldrb	r3, [r0, #13]
   1c72c:	2b07      	cmp	r3, #7
   1c72e:	d13a      	bne.n	1c7a6 <bt_gatt_subscribe+0xde>
	sub = gatt_sub_find(conn);
   1c730:	f7fe f81e 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   1c734:	4604      	mov	r4, r0
   1c736:	b958      	cbnz	r0, 1c750 <bt_gatt_subscribe+0x88>
		sub = gatt_sub_find(NULL);
   1c738:	f7fe f81a 	bl	1a770 <gatt_sub_find>
		if (sub) {
   1c73c:	4604      	mov	r4, r0
   1c73e:	2800      	cmp	r0, #0
   1c740:	d034      	beq.n	1c7ac <bt_gatt_subscribe+0xe4>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1c742:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c746:	3001      	adds	r0, #1
   1c748:	f00f fe14 	bl	2c374 <bt_addr_le_copy>
			sub->id = conn->id;
   1c74c:	7a33      	ldrb	r3, [r6, #8]
   1c74e:	7023      	strb	r3, [r4, #0]
	return list->head;
   1c750:	68a3      	ldr	r3, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c752:	b17b      	cbz	r3, 1c774 <bt_gatt_subscribe+0xac>
   1c754:	3b18      	subs	r3, #24
   1c756:	2200      	movs	r2, #0
		if (tmp == params) {
   1c758:	429d      	cmp	r5, r3
   1c75a:	d02a      	beq.n	1c7b2 <bt_gatt_subscribe+0xea>
		if (tmp->value_handle == params->value_handle &&
   1c75c:	8998      	ldrh	r0, [r3, #12]
   1c75e:	89a9      	ldrh	r1, [r5, #12]
   1c760:	4288      	cmp	r0, r1
   1c762:	d104      	bne.n	1c76e <bt_gatt_subscribe+0xa6>
   1c764:	8a18      	ldrh	r0, [r3, #16]
   1c766:	8a29      	ldrh	r1, [r5, #16]
			has_subscription = true;
   1c768:	4288      	cmp	r0, r1
   1c76a:	bf28      	it	cs
   1c76c:	2201      	movcs	r2, #1
	return node->next;
   1c76e:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c770:	b96b      	cbnz	r3, 1c78e <bt_gatt_subscribe+0xc6>
	if (!has_subscription) {
   1c772:	b972      	cbnz	r2, 1c792 <bt_gatt_subscribe+0xca>
		err = gatt_write_ccc(conn, params);
   1c774:	4630      	mov	r0, r6
   1c776:	4629      	mov	r1, r5
   1c778:	f7fe fb6a 	bl	1ae50 <gatt_write_ccc>
		if (err) {
   1c77c:	4606      	mov	r6, r0
   1c77e:	b140      	cbz	r0, 1c792 <bt_gatt_subscribe+0xca>
	if (gatt_sub_is_empty(sub)) {
   1c780:	68a3      	ldr	r3, [r4, #8]
   1c782:	b913      	cbnz	r3, 1c78a <bt_gatt_subscribe+0xc2>
		gatt_sub_free(sub);
   1c784:	4620      	mov	r0, r4
   1c786:	f7fe f9b7 	bl	1aaf8 <gatt_sub_free>
}
   1c78a:	4630      	mov	r0, r6
   1c78c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c78e:	3b18      	subs	r3, #24
   1c790:	e7e2      	b.n	1c758 <bt_gatt_subscribe+0x90>
	return list->head;
   1c792:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1c794:	61aa      	str	r2, [r5, #24]
Z_GENLIST_PREPEND(slist, snode)
   1c796:	68e2      	ldr	r2, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1c798:	f105 0318 	add.w	r3, r5, #24
	list->head = node;
   1c79c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1c79e:	b902      	cbnz	r2, 1c7a2 <bt_gatt_subscribe+0xda>
	list->tail = node;
   1c7a0:	60e3      	str	r3, [r4, #12]
	return 0;
   1c7a2:	2600      	movs	r6, #0
   1c7a4:	e7f1      	b.n	1c78a <bt_gatt_subscribe+0xc2>
		return -ENOTCONN;
   1c7a6:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1c7aa:	e7ee      	b.n	1c78a <bt_gatt_subscribe+0xc2>
		return -ENOMEM;
   1c7ac:	f06f 060b 	mvn.w	r6, #11
   1c7b0:	e7eb      	b.n	1c78a <bt_gatt_subscribe+0xc2>
			return -EALREADY;
   1c7b2:	f06f 0677 	mvn.w	r6, #119	; 0x77
   1c7b6:	e7e8      	b.n	1c78a <bt_gatt_subscribe+0xc2>
   1c7b8:	00031b7d 	.word	0x00031b7d
   1c7bc:	0002f2b5 	.word	0x0002f2b5

0001c7c0 <bt_gatt_unsubscribe>:
{
   1c7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7c4:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1c7c6:	4607      	mov	r7, r0
   1c7c8:	b950      	cbnz	r0, 1c7e0 <bt_gatt_unsubscribe+0x20>
   1c7ca:	493c      	ldr	r1, [pc, #240]	; (1c8bc <bt_gatt_unsubscribe+0xfc>)
   1c7cc:	483c      	ldr	r0, [pc, #240]	; (1c8c0 <bt_gatt_unsubscribe+0x100>)
   1c7ce:	f241 4209 	movw	r2, #5129	; 0x1409
   1c7d2:	f00d fc3a 	bl	2a04a <assert_print>
   1c7d6:	f241 4109 	movw	r1, #5129	; 0x1409
	__ASSERT(params, "invalid parameters\n");
   1c7da:	4838      	ldr	r0, [pc, #224]	; (1c8bc <bt_gatt_unsubscribe+0xfc>)
   1c7dc:	f00d fc2e 	bl	2a03c <assert_post_action>
   1c7e0:	b941      	cbnz	r1, 1c7f4 <bt_gatt_unsubscribe+0x34>
   1c7e2:	4936      	ldr	r1, [pc, #216]	; (1c8bc <bt_gatt_unsubscribe+0xfc>)
   1c7e4:	4836      	ldr	r0, [pc, #216]	; (1c8c0 <bt_gatt_unsubscribe+0x100>)
   1c7e6:	f241 420a 	movw	r2, #5130	; 0x140a
   1c7ea:	f00d fc2e 	bl	2a04a <assert_print>
   1c7ee:	f241 410a 	movw	r1, #5130	; 0x140a
   1c7f2:	e7f2      	b.n	1c7da <bt_gatt_unsubscribe+0x1a>
	if (conn->state != BT_CONN_CONNECTED) {
   1c7f4:	7b43      	ldrb	r3, [r0, #13]
   1c7f6:	2b07      	cmp	r3, #7
   1c7f8:	d15a      	bne.n	1c8b0 <bt_gatt_unsubscribe+0xf0>
	sub = gatt_sub_find(conn);
   1c7fa:	f7fd ffb9 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   1c7fe:	4606      	mov	r6, r0
   1c800:	2800      	cmp	r0, #0
   1c802:	d058      	beq.n	1c8b6 <bt_gatt_unsubscribe+0xf6>
	return list->head;
   1c804:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c806:	2d00      	cmp	r5, #0
   1c808:	d055      	beq.n	1c8b6 <bt_gatt_unsubscribe+0xf6>
   1c80a:	2300      	movs	r3, #0
   1c80c:	3d18      	subs	r5, #24
   1c80e:	4698      	mov	r8, r3
		if (params == tmp) {
   1c810:	42ac      	cmp	r4, r5
   1c812:	d009      	beq.n	1c828 <bt_gatt_unsubscribe+0x68>
		if (tmp->value_handle == params->value_handle) {
   1c814:	89a9      	ldrh	r1, [r5, #12]
   1c816:	89a2      	ldrh	r2, [r4, #12]
			has_subscription = true;
   1c818:	4291      	cmp	r1, r2
   1c81a:	bf08      	it	eq
   1c81c:	f04f 0801 	moveq.w	r8, #1
	return node->next;
   1c820:	69ad      	ldr	r5, [r5, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1c822:	b11d      	cbz	r5, 1c82c <bt_gatt_unsubscribe+0x6c>
   1c824:	3d18      	subs	r5, #24
   1c826:	e7f3      	b.n	1c810 <bt_gatt_unsubscribe+0x50>
			found = true;
   1c828:	2301      	movs	r3, #1
   1c82a:	e7f9      	b.n	1c820 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   1c82c:	2b00      	cmp	r3, #0
   1c82e:	d042      	beq.n	1c8b6 <bt_gatt_unsubscribe+0xf6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1c830:	f104 0014 	add.w	r0, r4, #20
   1c834:	f00f fd89 	bl	2c34a <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   1c838:	0743      	lsls	r3, r0, #29
   1c83a:	d503      	bpl.n	1c844 <bt_gatt_unsubscribe+0x84>
		bt_gatt_cancel(conn, params);
   1c83c:	4621      	mov	r1, r4
   1c83e:	4638      	mov	r0, r7
   1c840:	f010 f969 	bl	2cb16 <bt_gatt_cancel>
	if (!has_subscription) {
   1c844:	f1b8 0f00 	cmp.w	r8, #0
   1c848:	d018      	beq.n	1c87c <bt_gatt_unsubscribe+0xbc>
	return list->head;
   1c84a:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   1c84c:	f104 0218 	add.w	r2, r4, #24
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c850:	b153      	cbz	r3, 1c868 <bt_gatt_unsubscribe+0xa8>
   1c852:	429a      	cmp	r2, r3
   1c854:	d122      	bne.n	1c89c <bt_gatt_unsubscribe+0xdc>
	return node->next;
   1c856:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   1c858:	b9d5      	cbnz	r5, 1c890 <bt_gatt_unsubscribe+0xd0>
   1c85a:	68f1      	ldr	r1, [r6, #12]
	list->head = node;
   1c85c:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1c85e:	428a      	cmp	r2, r1
   1c860:	d100      	bne.n	1c864 <bt_gatt_unsubscribe+0xa4>
	list->tail = node;
   1c862:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   1c864:	2300      	movs	r3, #0
   1c866:	61a3      	str	r3, [r4, #24]
	if (gatt_sub_is_empty(sub)) {
   1c868:	68b3      	ldr	r3, [r6, #8]
   1c86a:	b913      	cbnz	r3, 1c872 <bt_gatt_unsubscribe+0xb2>
		gatt_sub_free(sub);
   1c86c:	4630      	mov	r0, r6
   1c86e:	f7fe f943 	bl	1aaf8 <gatt_sub_free>
	if (has_subscription) {
   1c872:	f1b8 0f00 	cmp.w	r8, #0
   1c876:	d114      	bne.n	1c8a2 <bt_gatt_unsubscribe+0xe2>
	return 0;
   1c878:	2000      	movs	r0, #0
   1c87a:	e007      	b.n	1c88c <bt_gatt_unsubscribe+0xcc>
		params->value = 0x0000;
   1c87c:	f8a4 8010 	strh.w	r8, [r4, #16]
		err = gatt_write_ccc(conn, params);
   1c880:	4621      	mov	r1, r4
   1c882:	4638      	mov	r0, r7
   1c884:	f7fe fae4 	bl	1ae50 <gatt_write_ccc>
		if (err) {
   1c888:	2800      	cmp	r0, #0
   1c88a:	d0de      	beq.n	1c84a <bt_gatt_unsubscribe+0x8a>
}
   1c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c890:	602b      	str	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c892:	68f3      	ldr	r3, [r6, #12]
   1c894:	429a      	cmp	r2, r3
	list->tail = node;
   1c896:	bf08      	it	eq
   1c898:	60f5      	streq	r5, [r6, #12]
}
   1c89a:	e7e3      	b.n	1c864 <bt_gatt_unsubscribe+0xa4>
	return node->next;
   1c89c:	461d      	mov	r5, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c89e:	681b      	ldr	r3, [r3, #0]
   1c8a0:	e7d6      	b.n	1c850 <bt_gatt_unsubscribe+0x90>
		params->notify(conn, params, NULL, 0);
   1c8a2:	2300      	movs	r3, #0
   1c8a4:	6825      	ldr	r5, [r4, #0]
   1c8a6:	461a      	mov	r2, r3
   1c8a8:	4621      	mov	r1, r4
   1c8aa:	4638      	mov	r0, r7
   1c8ac:	47a8      	blx	r5
   1c8ae:	e7e3      	b.n	1c878 <bt_gatt_unsubscribe+0xb8>
		return -ENOTCONN;
   1c8b0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c8b4:	e7ea      	b.n	1c88c <bt_gatt_unsubscribe+0xcc>
		return -EINVAL;
   1c8b6:	f06f 0015 	mvn.w	r0, #21
   1c8ba:	e7e7      	b.n	1c88c <bt_gatt_unsubscribe+0xcc>
   1c8bc:	00031b7d 	.word	0x00031b7d
   1c8c0:	0002f2b5 	.word	0x0002f2b5

0001c8c4 <bt_gatt_mult_notification>:
{
   1c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8c8:	b085      	sub	sp, #20
   1c8ca:	4606      	mov	r6, r0
   1c8cc:	460c      	mov	r4, r1
   1c8ce:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
   1c8d0:	f7fd ff4e 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   1c8d4:	4681      	mov	r9, r0
   1c8d6:	b1e0      	cbz	r0, 1c912 <bt_gatt_mult_notification+0x4e>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1c8d8:	4652      	mov	r2, sl
   1c8da:	4621      	mov	r1, r4
   1c8dc:	a801      	add	r0, sp, #4
   1c8de:	f010 fd80 	bl	2d3e2 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1c8e2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1c8e6:	2b04      	cmp	r3, #4
   1c8e8:	d913      	bls.n	1c912 <bt_gatt_mult_notification+0x4e>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c8ea:	2104      	movs	r1, #4
   1c8ec:	eb0d 0001 	add.w	r0, sp, r1
   1c8f0:	f002 fba2 	bl	1f038 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1c8f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
		len = sys_cpu_to_le16(nfy->len);
   1c8f8:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		handle = sys_cpu_to_le16(nfy->handle);
   1c8fc:	f8b0 b000 	ldrh.w	fp, [r0]
		if (len > buf.len) {
   1c900:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1c902:	4605      	mov	r5, r0
		if (len > buf.len) {
   1c904:	d208      	bcs.n	1c918 <bt_gatt_mult_notification+0x54>
			LOG_ERR("Invalid data len %u > %u", len, length);
   1c906:	481c      	ldr	r0, [pc, #112]	; (1c978 <bt_gatt_mult_notification+0xb4>)
   1c908:	4653      	mov	r3, sl
   1c90a:	4642      	mov	r2, r8
   1c90c:	2145      	movs	r1, #69	; 0x45
   1c90e:	f00d fbaa 	bl	2a066 <z_log_minimal_printk>
}
   1c912:	b005      	add	sp, #20
   1c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
   1c918:	f8d9 7008 	ldr.w	r7, [r9, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c91c:	b31f      	cbz	r7, 1c966 <bt_gatt_mult_notification+0xa2>
	return node->next;
   1c91e:	683c      	ldr	r4, [r7, #0]
   1c920:	b104      	cbz	r4, 1c924 <bt_gatt_mult_notification+0x60>
   1c922:	3c18      	subs	r4, #24
			if (handle != params->value_handle) {
   1c924:	f837 3c0c 	ldrh.w	r3, [r7, #-12]
   1c928:	455b      	cmp	r3, fp
   1c92a:	d119      	bne.n	1c960 <bt_gatt_mult_notification+0x9c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c92c:	3f18      	subs	r7, #24
   1c92e:	e007      	b.n	1c940 <bt_gatt_mult_notification+0x7c>
   1c930:	4627      	mov	r7, r4
   1c932:	69a4      	ldr	r4, [r4, #24]
   1c934:	89bb      	ldrh	r3, [r7, #12]
   1c936:	b1dc      	cbz	r4, 1c970 <bt_gatt_mult_notification+0xac>
			if (handle != params->value_handle) {
   1c938:	455b      	cmp	r3, fp
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c93a:	f1a4 0418 	sub.w	r4, r4, #24
			if (handle != params->value_handle) {
   1c93e:	d1f7      	bne.n	1c930 <bt_gatt_mult_notification+0x6c>
			if (check_subscribe_security_level(conn, params)) {
   1c940:	7a72      	ldrb	r2, [r6, #9]
   1c942:	7cbb      	ldrb	r3, [r7, #18]
   1c944:	429a      	cmp	r2, r3
   1c946:	d30b      	bcc.n	1c960 <bt_gatt_mult_notification+0x9c>
				if (params->notify(conn, params, nfy->value, len) ==
   1c948:	f8d7 c000 	ldr.w	ip, [r7]
   1c94c:	4643      	mov	r3, r8
   1c94e:	1d2a      	adds	r2, r5, #4
   1c950:	4639      	mov	r1, r7
   1c952:	4630      	mov	r0, r6
   1c954:	47e0      	blx	ip
   1c956:	b918      	cbnz	r0, 1c960 <bt_gatt_mult_notification+0x9c>
					bt_gatt_unsubscribe(conn, params);
   1c958:	4639      	mov	r1, r7
   1c95a:	4630      	mov	r0, r6
   1c95c:	f7ff ff30 	bl	1c7c0 <bt_gatt_unsubscribe>
   1c960:	4627      	mov	r7, r4
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1c962:	2c00      	cmp	r4, #0
   1c964:	d1e5      	bne.n	1c932 <bt_gatt_mult_notification+0x6e>
		net_buf_simple_pull_mem(&buf, len);
   1c966:	4641      	mov	r1, r8
   1c968:	a801      	add	r0, sp, #4
   1c96a:	f002 fb65 	bl	1f038 <net_buf_simple_pull_mem>
   1c96e:	e7b8      	b.n	1c8e2 <bt_gatt_mult_notification+0x1e>
			if (handle != params->value_handle) {
   1c970:	455b      	cmp	r3, fp
   1c972:	d0e5      	beq.n	1c940 <bt_gatt_mult_notification+0x7c>
   1c974:	e7f7      	b.n	1c966 <bt_gatt_mult_notification+0xa2>
   1c976:	bf00      	nop
   1c978:	00031eae 	.word	0x00031eae

0001c97c <bt_gatt_connected>:
{
   1c97c:	b570      	push	{r4, r5, r6, lr}
   1c97e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c980:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   1c984:	4604      	mov	r4, r0
	data.conn = conn;
   1c986:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
   1c988:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c98a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
   1c98c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c990:	4631      	mov	r1, r6
   1c992:	f00e fcfb 	bl	2b38c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1c996:	b198      	cbz	r0, 1c9c0 <bt_gatt_connected+0x44>
		if (conn->id) {
   1c998:	7a22      	ldrb	r2, [r4, #8]
   1c99a:	2a00      	cmp	r2, #0
   1c99c:	d03f      	beq.n	1ca1e <bt_gatt_connected+0xa2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   1c99e:	ad02      	add	r5, sp, #8
   1c9a0:	2104      	movs	r1, #4
   1c9a2:	4628      	mov	r0, r5
   1c9a4:	f00d f8bb 	bl	29b1e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c9a8:	9500      	str	r5, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1c9aa:	4a1f      	ldr	r2, [pc, #124]	; (1ca28 <bt_gatt_connected+0xac>)
   1c9ac:	2124      	movs	r1, #36	; 0x24
   1c9ae:	a805      	add	r0, sp, #20
   1c9b0:	4633      	mov	r3, r6
   1c9b2:	f7f8 ff95 	bl	158e0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   1c9b6:	aa05      	add	r2, sp, #20
   1c9b8:	491c      	ldr	r1, [pc, #112]	; (1ca2c <bt_gatt_connected+0xb0>)
   1c9ba:	4610      	mov	r0, r2
   1c9bc:	f7f6 ffc2 	bl	13944 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1c9c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c9c4:	4a1a      	ldr	r2, [pc, #104]	; (1ca30 <bt_gatt_connected+0xb4>)
   1c9c6:	ab03      	add	r3, sp, #12
   1c9c8:	2001      	movs	r0, #1
   1c9ca:	f00f fffa 	bl	2c9c2 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
   1c9ce:	4620      	mov	r0, r4
   1c9d0:	f00e fe14 	bl	2b5fc <bt_conn_get_security>
   1c9d4:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1c9d8:	4288      	cmp	r0, r1
   1c9da:	d208      	bcs.n	1c9ee <bt_gatt_connected+0x72>
		int err = bt_conn_set_security(conn, data.sec);
   1c9dc:	4620      	mov	r0, r4
   1c9de:	f00e fddd 	bl	2b59c <bt_conn_set_security>
		if (err) {
   1c9e2:	4602      	mov	r2, r0
   1c9e4:	b118      	cbz	r0, 1c9ee <bt_gatt_connected+0x72>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   1c9e6:	4813      	ldr	r0, [pc, #76]	; (1ca34 <bt_gatt_connected+0xb8>)
   1c9e8:	2157      	movs	r1, #87	; 0x57
   1c9ea:	f00d fb3c 	bl	2a066 <z_log_minimal_printk>
	sub = gatt_sub_find(conn);
   1c9ee:	4620      	mov	r0, r4
   1c9f0:	f7fd febe 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   1c9f4:	b1a8      	cbz	r0, 1ca22 <bt_gatt_connected+0xa6>
	return list->head;
   1c9f6:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c9f8:	b19d      	cbz	r5, 1ca22 <bt_gatt_connected+0xa6>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1c9fa:	7a20      	ldrb	r0, [r4, #8]
   1c9fc:	4631      	mov	r1, r6
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1c9fe:	3d18      	subs	r5, #24
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1ca00:	f00e fcc4 	bl	2b38c <bt_addr_le_is_bonded>
   1ca04:	b148      	cbz	r0, 1ca1a <bt_gatt_connected+0x9e>
   1ca06:	f105 0014 	add.w	r0, r5, #20
   1ca0a:	f00f fc9e 	bl	2c34a <atomic_get>
   1ca0e:	0783      	lsls	r3, r0, #30
   1ca10:	d403      	bmi.n	1ca1a <bt_gatt_connected+0x9e>
			gatt_write_ccc(conn, params);
   1ca12:	4629      	mov	r1, r5
   1ca14:	4620      	mov	r0, r4
   1ca16:	f7fe fa1b 	bl	1ae50 <gatt_write_ccc>
	return node->next;
   1ca1a:	69ad      	ldr	r5, [r5, #24]
   1ca1c:	e7ec      	b.n	1c9f8 <bt_gatt_connected+0x7c>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   1ca1e:	9200      	str	r2, [sp, #0]
   1ca20:	e7c3      	b.n	1c9aa <bt_gatt_connected+0x2e>
}
   1ca22:	b00e      	add	sp, #56	; 0x38
   1ca24:	bd70      	pop	{r4, r5, r6, pc}
   1ca26:	bf00      	nop
   1ca28:	00031cd9 	.word	0x00031cd9
   1ca2c:	0001b48d 	.word	0x0001b48d
   1ca30:	0001b979 	.word	0x0001b979
   1ca34:	00031ecc 	.word	0x00031ecc

0001ca38 <bt_gatt_att_max_mtu_changed>:
{
   1ca38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1ca3a:	4b08      	ldr	r3, [pc, #32]	; (1ca5c <bt_gatt_att_max_mtu_changed+0x24>)
   1ca3c:	681c      	ldr	r4, [r3, #0]
   1ca3e:	4605      	mov	r5, r0
   1ca40:	460e      	mov	r6, r1
   1ca42:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ca44:	b14c      	cbz	r4, 1ca5a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1ca46:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ca4a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1ca4c:	b11b      	cbz	r3, 1ca56 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1ca4e:	463a      	mov	r2, r7
   1ca50:	4631      	mov	r1, r6
   1ca52:	4628      	mov	r0, r5
   1ca54:	4798      	blx	r3
	return node->next;
   1ca56:	6864      	ldr	r4, [r4, #4]
   1ca58:	e7f4      	b.n	1ca44 <bt_gatt_att_max_mtu_changed+0xc>
}
   1ca5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca5c:	200032c0 	.word	0x200032c0

0001ca60 <bt_gatt_encrypt_change>:
{
   1ca60:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ca62:	4a06      	ldr	r2, [pc, #24]	; (1ca7c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
   1ca64:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ca66:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1ca68:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ca6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1ca6e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ca72:	f00f ffa6 	bl	2c9c2 <bt_gatt_foreach_attr>
}
   1ca76:	b003      	add	sp, #12
   1ca78:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca7c:	0001b979 	.word	0x0001b979

0001ca80 <bt_gatt_store_ccc>:
{
   1ca80:	b570      	push	{r4, r5, r6, lr}
   1ca82:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
   1ca84:	2300      	movs	r3, #0
{
   1ca86:	4604      	mov	r4, r0
   1ca88:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   1ca8a:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
   1ca8c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
   1ca90:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
   1ca92:	4a15      	ldr	r2, [pc, #84]	; (1cae8 <bt_gatt_store_ccc+0x68>)
   1ca94:	ab0d      	add	r3, sp, #52	; 0x34
   1ca96:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ca9a:	2001      	movs	r0, #1
   1ca9c:	f00f ff91 	bl	2c9c2 <bt_gatt_foreach_attr>
	if (id) {
   1caa0:	b1ec      	cbz	r4, 1cade <bt_gatt_store_ccc+0x5e>
		u8_to_dec(id_str, sizeof(id_str), id);
   1caa2:	ae03      	add	r6, sp, #12
   1caa4:	4622      	mov	r2, r4
   1caa6:	2104      	movs	r1, #4
   1caa8:	4630      	mov	r0, r6
   1caaa:	f00d f838 	bl	29b1e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   1caae:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cab0:	4a0e      	ldr	r2, [pc, #56]	; (1caec <bt_gatt_store_ccc+0x6c>)
   1cab2:	462b      	mov	r3, r5
   1cab4:	2124      	movs	r1, #36	; 0x24
   1cab6:	a804      	add	r0, sp, #16
   1cab8:	f7f8 ff12 	bl	158e0 <bt_settings_encode_key>
	if (save.count) {
   1cabc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
   1cabe:	b182      	cbz	r2, 1cae2 <bt_gatt_store_ccc+0x62>
		len = save.count * sizeof(*save.store);
   1cac0:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
   1cac2:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
   1cac4:	a804      	add	r0, sp, #16
   1cac6:	f7f6 fedd 	bl	13884 <settings_save_one>
	if (err) {
   1caca:	4604      	mov	r4, r0
   1cacc:	b120      	cbz	r0, 1cad8 <bt_gatt_store_ccc+0x58>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   1cace:	4602      	mov	r2, r0
   1cad0:	2145      	movs	r1, #69	; 0x45
   1cad2:	4807      	ldr	r0, [pc, #28]	; (1caf0 <bt_gatt_store_ccc+0x70>)
   1cad4:	f00d fac7 	bl	2a066 <z_log_minimal_printk>
}
   1cad8:	4620      	mov	r0, r4
   1cada:	b040      	add	sp, #256	; 0x100
   1cadc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   1cade:	9400      	str	r4, [sp, #0]
   1cae0:	e7e6      	b.n	1cab0 <bt_gatt_store_ccc+0x30>
		str = NULL;
   1cae2:	4611      	mov	r1, r2
   1cae4:	e7ee      	b.n	1cac4 <bt_gatt_store_ccc+0x44>
   1cae6:	bf00      	nop
   1cae8:	0001ad09 	.word	0x0001ad09
   1caec:	00031cd9 	.word	0x00031cd9
   1caf0:	00031efd 	.word	0x00031efd

0001caf4 <bt_gatt_identity_resolved>:
{
   1caf4:	b513      	push	{r0, r1, r4, lr}
   1caf6:	4604      	mov	r4, r0
	struct addr_match user_data = {
   1caf8:	e9cd 1200 	strd	r1, r2, [sp]
	bt_gatt_foreach_attr(0x0001, 0xffff, convert_to_id_on_match, &user_data);
   1cafc:	466b      	mov	r3, sp
   1cafe:	4a08      	ldr	r2, [pc, #32]	; (1cb20 <bt_gatt_identity_resolved+0x2c>)
   1cb00:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb04:	2001      	movs	r0, #1
   1cb06:	f00f ff5c 	bl	2c9c2 <bt_gatt_foreach_attr>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   1cb0a:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1cb0e:	7a20      	ldrb	r0, [r4, #8]
   1cb10:	f7ff ffb6 	bl	1ca80 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   1cb14:	4620      	mov	r0, r4
   1cb16:	f7fe f913 	bl	1ad40 <bt_gatt_store_cf.isra.0>
}
   1cb1a:	b002      	add	sp, #8
   1cb1c:	bd10      	pop	{r4, pc}
   1cb1e:	bf00      	nop
   1cb20:	0001acdd 	.word	0x0001acdd

0001cb24 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1cb24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cb28:	4603      	mov	r3, r0
   1cb2a:	4a43      	ldr	r2, [pc, #268]	; (1cc38 <bt_gatt_disconnected+0x114>)
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1cb2c:	4e43      	ldr	r6, [pc, #268]	; (1cc3c <bt_gatt_disconnected+0x118>)
{
   1cb2e:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1cb30:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb34:	2001      	movs	r0, #1
   1cb36:	f00f ff44 	bl	2c9c2 <bt_gatt_foreach_attr>
	uint8_t index = bt_conn_index(conn);
   1cb3a:	4620      	mov	r0, r4
   1cb3c:	f7fb fece 	bl	188dc <bt_conn_index>
   1cb40:	4605      	mov	r5, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   1cb42:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1cb46:	b120      	cbz	r0, 1cb52 <bt_gatt_disconnected+0x2e>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   1cb48:	f7fb fda2 	bl	18690 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   1cb4c:	2300      	movs	r3, #0
   1cb4e:	f846 3025 	str.w	r3, [r6, r5, lsl #2]

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);

	if (gatt_ccc_conn_queue_is_empty()) {
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1cb52:	483b      	ldr	r0, [pc, #236]	; (1cc40 <bt_gatt_disconnected+0x11c>)
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cb54:	f104 0690 	add.w	r6, r4, #144	; 0x90
		k_work_cancel_delayable(&gatt_ccc_store.work);
   1cb58:	f008 f93e 	bl	24dd8 <k_work_cancel_delayable>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cb5c:	7a20      	ldrb	r0, [r4, #8]
   1cb5e:	4631      	mov	r1, r6
   1cb60:	f00e fc14 	bl	2b38c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1cb64:	b130      	cbz	r0, 1cb74 <bt_gatt_disconnected+0x50>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   1cb66:	7a20      	ldrb	r0, [r4, #8]
   1cb68:	4631      	mov	r1, r6
   1cb6a:	f7ff ff89 	bl	1ca80 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   1cb6e:	4620      	mov	r0, r4
   1cb70:	f7fe f8e6 	bl	1ad40 <bt_gatt_store_cf.isra.0>
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cb74:	7a20      	ldrb	r0, [r4, #8]
   1cb76:	4631      	mov	r1, r6
   1cb78:	f00e fc08 	bl	2b38c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   1cb7c:	b150      	cbz	r0, 1cb94 <bt_gatt_disconnected+0x70>
		struct addr_with_id addr_with_id = {
   1cb7e:	7a23      	ldrb	r3, [r4, #8]
   1cb80:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cb84:	4a2f      	ldr	r2, [pc, #188]	; (1cc44 <bt_gatt_disconnected+0x120>)
		struct addr_with_id addr_with_id = {
   1cb86:	9600      	str	r6, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
   1cb88:	466b      	mov	r3, sp
   1cb8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cb8e:	2001      	movs	r0, #1
   1cb90:	f00f ff17 	bl	2c9c2 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1cb94:	4620      	mov	r0, r4
   1cb96:	f7fd fdeb 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   1cb9a:	4680      	mov	r8, r0
   1cb9c:	b938      	cbnz	r0, 1cbae <bt_gatt_disconnected+0x8a>
	cfg = find_cf_cfg(conn);
   1cb9e:	4620      	mov	r0, r4
   1cba0:	f7fd fd82 	bl	1a6a8 <find_cf_cfg>
	if (!cfg) {
   1cba4:	4605      	mov	r5, r0
   1cba6:	bba0      	cbnz	r0, 1cc12 <bt_gatt_disconnected+0xee>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1cba8:	b002      	add	sp, #8
   1cbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return list->head;
   1cbae:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1cbb0:	2d00      	cmp	r5, #0
   1cbb2:	d0f4      	beq.n	1cb9e <bt_gatt_disconnected+0x7a>
	return node->next;
   1cbb4:	f855 7918 	ldr.w	r7, [r5], #-24
   1cbb8:	b107      	cbz	r7, 1cbbc <bt_gatt_disconnected+0x98>
   1cbba:	3f18      	subs	r7, #24
{
   1cbbc:	f04f 0900 	mov.w	r9, #0
			params->value = 0U;
   1cbc0:	46ca      	mov	sl, r9
   1cbc2:	e001      	b.n	1cbc8 <bt_gatt_disconnected+0xa4>
{
   1cbc4:	463d      	mov	r5, r7
   1cbc6:	461f      	mov	r7, r3
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1cbc8:	7a20      	ldrb	r0, [r4, #8]
   1cbca:	4631      	mov	r1, r6
   1cbcc:	f00e fbde 	bl	2b38c <bt_addr_le_is_bonded>
   1cbd0:	b970      	cbnz	r0, 1cbf0 <bt_gatt_disconnected+0xcc>
			params->value = 0U;
   1cbd2:	f8a5 a010 	strh.w	sl, [r5, #16]
			gatt_sub_remove(conn, sub, prev, params);
   1cbd6:	462b      	mov	r3, r5
   1cbd8:	464a      	mov	r2, r9
   1cbda:	4641      	mov	r1, r8
   1cbdc:	4620      	mov	r0, r4
   1cbde:	f00f fcbe 	bl	2c55e <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1cbe2:	2f00      	cmp	r7, #0
   1cbe4:	d0db      	beq.n	1cb9e <bt_gatt_disconnected+0x7a>
   1cbe6:	69bb      	ldr	r3, [r7, #24]
   1cbe8:	2b00      	cmp	r3, #0
   1cbea:	d0eb      	beq.n	1cbc4 <bt_gatt_disconnected+0xa0>
   1cbec:	3b18      	subs	r3, #24
   1cbee:	e7e9      	b.n	1cbc4 <bt_gatt_disconnected+0xa0>
   1cbf0:	f105 0014 	add.w	r0, r5, #20
   1cbf4:	f00f fba9 	bl	2c34a <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1cbf8:	07c3      	lsls	r3, r0, #31
   1cbfa:	d4ea      	bmi.n	1cbd2 <bt_gatt_disconnected+0xae>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1cbfc:	f898 3001 	ldrb.w	r3, [r8, #1]
   1cc00:	b123      	cbz	r3, 1cc0c <bt_gatt_disconnected+0xe8>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1cc02:	4631      	mov	r1, r6
   1cc04:	f108 0001 	add.w	r0, r8, #1
   1cc08:	f00f fbb4 	bl	2c374 <bt_addr_le_copy>
			prev = &params->node;
   1cc0c:	f105 0918 	add.w	r9, r5, #24
   1cc10:	e7e7      	b.n	1cbe2 <bt_gatt_disconnected+0xbe>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1cc12:	7a20      	ldrb	r0, [r4, #8]
   1cc14:	4631      	mov	r1, r6
   1cc16:	f00e fbb9 	bl	2b38c <bt_addr_le_is_bonded>
   1cc1a:	b928      	cbnz	r0, 1cc28 <bt_gatt_disconnected+0x104>
		clear_cf_cfg(cfg);
   1cc1c:	4628      	mov	r0, r5
}
   1cc1e:	b002      	add	sp, #8
   1cc20:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		clear_cf_cfg(cfg);
   1cc24:	f7fd bfc8 	b.w	1abb8 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc28:	4631      	mov	r1, r6
   1cc2a:	1c68      	adds	r0, r5, #1
}
   1cc2c:	b002      	add	sp, #8
   1cc2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1cc32:	f00f bb9f 	b.w	2c374 <bt_addr_le_copy>
   1cc36:	bf00      	nop
   1cc38:	0001ae75 	.word	0x0001ae75
   1cc3c:	20001d38 	.word	0x20001d38
   1cc40:	20001d40 	.word	0x20001d40
   1cc44:	0001acb5 	.word	0x0001acb5

0001cc48 <smp_find>:

	return 0;
}

static struct bt_smp *smp_find(int flag)
{
   1cc48:	b508      	push	{r3, lr}
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cc4a:	4b05      	ldr	r3, [pc, #20]	; (1cc60 <smp_find+0x18>)
{
   1cc4c:	4601      	mov	r1, r0
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   1cc4e:	4618      	mov	r0, r3
   1cc50:	f010 f800 	bl	2cc54 <atomic_test_bit>
			return &bt_smp_pool[i];
		}
	}

	return NULL;
   1cc54:	3b04      	subs	r3, #4
   1cc56:	2800      	cmp	r0, #0
}
   1cc58:	bf14      	ite	ne
   1cc5a:	4618      	movne	r0, r3
   1cc5c:	2000      	moveq	r0, #0
   1cc5e:	bd08      	pop	{r3, pc}
   1cc60:	20001e44 	.word	0x20001e44

0001cc64 <latch_auth_cb>:
{
   1cc64:	b510      	push	{r4, lr}
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   1cc66:	4a0c      	ldr	r2, [pc, #48]	; (1cc98 <latch_auth_cb+0x34>)
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1cc68:	6811      	ldr	r1, [r2, #0]
   1cc6a:	4a0c      	ldr	r2, [pc, #48]	; (1cc9c <latch_auth_cb+0x38>)
   1cc6c:	f3bf 8f5b 	dmb	ish
   1cc70:	f500 73d8 	add.w	r3, r0, #432	; 0x1b0
   1cc74:	e853 4f00 	ldrex	r4, [r3]
   1cc78:	4294      	cmp	r4, r2
   1cc7a:	d104      	bne.n	1cc86 <latch_auth_cb+0x22>
   1cc7c:	e843 1c00 	strex	ip, r1, [r3]
   1cc80:	f1bc 0f00 	cmp.w	ip, #0
   1cc84:	d1f6      	bne.n	1cc74 <latch_auth_cb+0x10>
   1cc86:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cc8a:	f3bf 8f5b 	dmb	ish
   1cc8e:	f8d0 01b0 	ldr.w	r0, [r0, #432]	; 0x1b0
   1cc92:	f3bf 8f5b 	dmb	ish
}
   1cc96:	bd10      	pop	{r4, pc}
   1cc98:	2000318c 	.word	0x2000318c
   1cc9c:	20001e40 	.word	0x20001e40

0001cca0 <get_io_capa>:
{
   1cca0:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1cca2:	f7ff ffdf 	bl	1cc64 <latch_auth_cb>
	if (!smp_auth_cb) {
   1cca6:	4603      	mov	r3, r0
   1cca8:	b1c8      	cbz	r0, 1ccde <get_io_capa+0x3e>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ccaa:	e9d0 1200 	ldrd	r1, r2, [r0]
   1ccae:	b921      	cbnz	r1, 1ccba <get_io_capa+0x1a>
			return BT_SMP_IO_KEYBOARD_ONLY;
   1ccb0:	2a00      	cmp	r2, #0
   1ccb2:	bf0c      	ite	eq
   1ccb4:	2003      	moveq	r0, #3
   1ccb6:	2002      	movne	r0, #2
   1ccb8:	e010      	b.n	1ccdc <get_io_capa+0x3c>
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   1ccba:	b132      	cbz	r2, 1ccca <get_io_capa+0x2a>
   1ccbc:	6883      	ldr	r3, [r0, #8]
   1ccbe:	b913      	cbnz	r3, 1ccc6 <get_io_capa+0x26>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   1ccc0:	4b09      	ldr	r3, [pc, #36]	; (1cce8 <get_io_capa+0x48>)
   1ccc2:	781b      	ldrb	r3, [r3, #0]
   1ccc4:	b933      	cbnz	r3, 1ccd4 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   1ccc6:	2004      	movs	r0, #4
   1ccc8:	e008      	b.n	1ccdc <get_io_capa+0x3c>
	if (sc_supported && smp_auth_cb->passkey_display &&
   1ccca:	4907      	ldr	r1, [pc, #28]	; (1cce8 <get_io_capa+0x48>)
   1cccc:	7808      	ldrb	r0, [r1, #0]
   1ccce:	b128      	cbz	r0, 1ccdc <get_io_capa+0x3c>
   1ccd0:	689b      	ldr	r3, [r3, #8]
   1ccd2:	b933      	cbnz	r3, 1cce2 <get_io_capa+0x42>
	if (smp_auth_cb->passkey_entry) {
   1ccd4:	3a00      	subs	r2, #0
   1ccd6:	bf18      	it	ne
   1ccd8:	2201      	movne	r2, #1
   1ccda:	0050      	lsls	r0, r2, #1
}
   1ccdc:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   1ccde:	2003      	movs	r0, #3
   1cce0:	e7fc      	b.n	1ccdc <get_io_capa+0x3c>
		return BT_SMP_IO_DISPLAY_YESNO;
   1cce2:	2001      	movs	r0, #1
   1cce4:	e7fa      	b.n	1ccdc <get_io_capa+0x3c>
   1cce6:	bf00      	nop
   1cce8:	2000423a 	.word	0x2000423a

0001ccec <smp_chan_get>:
{
   1ccec:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1ccee:	2106      	movs	r1, #6
   1ccf0:	f00e fd97 	bl	2b822 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1ccf4:	4604      	mov	r4, r0
   1ccf6:	b928      	cbnz	r0, 1cd04 <smp_chan_get+0x18>
		LOG_ERR("Unable to find SMP channel");
   1ccf8:	4804      	ldr	r0, [pc, #16]	; (1cd0c <smp_chan_get+0x20>)
   1ccfa:	2145      	movs	r1, #69	; 0x45
   1ccfc:	f00d f9b3 	bl	2a066 <z_log_minimal_printk>
}
   1cd00:	4620      	mov	r0, r4
   1cd02:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
   1cd04:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
   1cd08:	e7fa      	b.n	1cd00 <smp_chan_get+0x14>
   1cd0a:	bf00      	nop
   1cd0c:	00031f34 	.word	0x00031f34

0001cd10 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1cd10:	b510      	push	{r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
   1cd12:	4c09      	ldr	r4, [pc, #36]	; (1cd38 <bt_smp_accept+0x28>)
{
   1cd14:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
   1cd16:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1cd1a:	b928      	cbnz	r0, 1cd28 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
   1cd1c:	4a07      	ldr	r2, [pc, #28]	; (1cd3c <bt_smp_accept+0x2c>)
   1cd1e:	f8c4 20f0 	str.w	r2, [r4, #240]	; 0xf0

		*chan = &smp->chan.chan;
   1cd22:	34ec      	adds	r4, #236	; 0xec
   1cd24:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1cd26:	bd10      	pop	{r4, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   1cd28:	4805      	ldr	r0, [pc, #20]	; (1cd40 <bt_smp_accept+0x30>)
   1cd2a:	2145      	movs	r1, #69	; 0x45
   1cd2c:	f00d f99b 	bl	2a066 <z_log_minimal_printk>
   1cd30:	f06f 000b 	mvn.w	r0, #11
   1cd34:	e7f7      	b.n	1cd26 <bt_smp_accept+0x16>
   1cd36:	bf00      	nop
   1cd38:	20001e40 	.word	0x20001e40
   1cd3c:	0002ec04 	.word	0x0002ec04
   1cd40:	00031f54 	.word	0x00031f54

0001cd44 <smp_id_add_replace.isra.0>:
static uint8_t smp_id_add_replace(struct bt_smp *smp, struct bt_keys *new_bond)
   1cd44:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1cd46:	f010 0402 	ands.w	r4, r0, #2
static uint8_t smp_id_add_replace(struct bt_smp *smp, struct bt_keys *new_bond)
   1cd4a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   1cd4c:	d00a      	beq.n	1cd64 <smp_id_add_replace.isra.0+0x20>
   1cd4e:	4913      	ldr	r1, [pc, #76]	; (1cd9c <smp_id_add_replace.isra.0+0x58>)
   1cd50:	4813      	ldr	r0, [pc, #76]	; (1cda0 <smp_id_add_replace.isra.0+0x5c>)
   1cd52:	f640 6263 	movw	r2, #3683	; 0xe63
   1cd56:	f00d f978 	bl	2a04a <assert_print>
   1cd5a:	f640 6163 	movw	r1, #3683	; 0xe63
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1cd5e:	480f      	ldr	r0, [pc, #60]	; (1cd9c <smp_id_add_replace.isra.0+0x58>)
   1cd60:	f00d f96c 	bl	2a03c <assert_post_action>
	conflict = bt_id_find_conflict(new_bond);
   1cd64:	4608      	mov	r0, r1
   1cd66:	f7fa fb27 	bl	173b8 <bt_id_find_conflict>
	if (conflict) {
   1cd6a:	b130      	cbz	r0, 1cd7a <smp_id_add_replace.isra.0+0x36>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   1cd6c:	480d      	ldr	r0, [pc, #52]	; (1cda4 <smp_id_add_replace.isra.0+0x60>)
   1cd6e:	2157      	movs	r1, #87	; 0x57
   1cd70:	f00d f979 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1cd74:	2403      	movs	r4, #3
}
   1cd76:	4620      	mov	r0, r4
   1cd78:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   1cd7a:	4628      	mov	r0, r5
   1cd7c:	f7fa fb1c 	bl	173b8 <bt_id_find_conflict>
   1cd80:	b140      	cbz	r0, 1cd94 <smp_id_add_replace.isra.0+0x50>
   1cd82:	4906      	ldr	r1, [pc, #24]	; (1cd9c <smp_id_add_replace.isra.0+0x58>)
   1cd84:	4806      	ldr	r0, [pc, #24]	; (1cda0 <smp_id_add_replace.isra.0+0x5c>)
   1cd86:	f640 627f 	movw	r2, #3711	; 0xe7f
   1cd8a:	f00d f95e 	bl	2a04a <assert_print>
   1cd8e:	f640 617f 	movw	r1, #3711	; 0xe7f
   1cd92:	e7e4      	b.n	1cd5e <smp_id_add_replace.isra.0+0x1a>
	bt_id_add(new_bond);
   1cd94:	4628      	mov	r0, r5
   1cd96:	f7fa fb1f 	bl	173d8 <bt_id_add>
	return 0;
   1cd9a:	e7ec      	b.n	1cd76 <smp_id_add_replace.isra.0+0x32>
   1cd9c:	00031f7e 	.word	0x00031f7e
   1cda0:	0002f2b5 	.word	0x0002f2b5
   1cda4:	00031fad 	.word	0x00031fad

0001cda8 <smp_dhkey_check>:
{
   1cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1cdaa:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1cdae:	78dd      	ldrb	r5, [r3, #3]
{
   1cdb0:	b091      	sub	sp, #68	; 0x44
   1cdb2:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1cdb4:	2d00      	cmp	r5, #0
   1cdb6:	d165      	bne.n	1ce84 <smp_dhkey_check+0xdc>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1cdb8:	68cf      	ldr	r7, [r1, #12]
		(void)memset(r, 0, sizeof(r));
   1cdba:	2210      	movs	r2, #16
   1cdbc:	4629      	mov	r1, r5
   1cdbe:	a80c      	add	r0, sp, #48	; 0x30
   1cdc0:	f00e f924 	bl	2b00c <memset>
		switch (smp->method) {
   1cdc4:	7a22      	ldrb	r2, [r4, #8]
   1cdc6:	2a05      	cmp	r2, #5
   1cdc8:	d84d      	bhi.n	1ce66 <smp_dhkey_check+0xbe>
   1cdca:	e8df f002 	tbb	[pc, r2]
   1cdce:	0309      	.short	0x0309
   1cdd0:	464c0903 	.word	0x464c0903
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1cdd4:	2204      	movs	r2, #4
   1cdd6:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1cdda:	a80c      	add	r0, sp, #48	; 0x30
   1cddc:	f00e f90b 	bl	2aff6 <memcpy>
				 &smp->chan.chan.conn->le.resp_addr,
   1cde0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
				 &smp->chan.chan.conn->le.init_addr, e)) {
   1cde4:	f103 0297 	add.w	r2, r3, #151	; 0x97
				 &smp->chan.chan.conn->le.resp_addr,
   1cde8:	339e      	adds	r3, #158	; 0x9e
		if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
   1cdea:	ae08      	add	r6, sp, #32
   1cdec:	9301      	str	r3, [sp, #4]
   1cdee:	f104 0311 	add.w	r3, r4, #17
   1cdf2:	9202      	str	r2, [sp, #8]
   1cdf4:	9300      	str	r3, [sp, #0]
   1cdf6:	9603      	str	r6, [sp, #12]
   1cdf8:	ab0c      	add	r3, sp, #48	; 0x30
   1cdfa:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1cdfe:	f104 0137 	add.w	r1, r4, #55	; 0x37
   1ce02:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
   1ce06:	f010 fa98 	bl	2d33a <bt_crypto_f6>
   1ce0a:	bb80      	cbnz	r0, 1ce6e <smp_dhkey_check+0xc6>
		if (memcmp(e, req->e, 16)) {
   1ce0c:	4630      	mov	r0, r6
   1ce0e:	2210      	movs	r2, #16
   1ce10:	4639      	mov	r1, r7
   1ce12:	f00e f8c9 	bl	2afa8 <memcmp>
   1ce16:	4606      	mov	r6, r0
   1ce18:	bb90      	cbnz	r0, 1ce80 <smp_dhkey_check+0xd8>
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce1a:	7d23      	ldrb	r3, [r4, #20]
   1ce1c:	7b67      	ldrb	r7, [r4, #13]
		(void)memset(ediv, 0, sizeof(ediv));
   1ce1e:	4601      	mov	r1, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce20:	429f      	cmp	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1ce22:	f04f 0202 	mov.w	r2, #2
   1ce26:	a805      	add	r0, sp, #20
	return MIN(req->max_key_size, rsp->max_key_size);
   1ce28:	bf28      	it	cs
   1ce2a:	461f      	movcs	r7, r3
		(void)memset(ediv, 0, sizeof(ediv));
   1ce2c:	f00e f8ee 	bl	2b00c <memset>
		(void)memset(rand, 0, sizeof(rand));
   1ce30:	2208      	movs	r2, #8
   1ce32:	4631      	mov	r1, r6
   1ce34:	a806      	add	r0, sp, #24
   1ce36:	f00e f8e9 	bl	2b00c <memset>
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
   1ce3a:	9700      	str	r7, [sp, #0]
   1ce3c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1ce40:	f104 0347 	add.w	r3, r4, #71	; 0x47
   1ce44:	aa05      	add	r2, sp, #20
   1ce46:	a906      	add	r1, sp, #24
   1ce48:	f00e fb6d 	bl	2b526 <bt_conn_le_start_encryption>
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	da12      	bge.n	1ce76 <smp_dhkey_check+0xce>
			LOG_ERR("Failed to start encryption");
   1ce50:	480d      	ldr	r0, [pc, #52]	; (1ce88 <smp_dhkey_check+0xe0>)
   1ce52:	2145      	movs	r1, #69	; 0x45
   1ce54:	f00d f907 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ce58:	e009      	b.n	1ce6e <smp_dhkey_check+0xc6>
			if (smp->oobd_local) {
   1ce5a:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   1ce5e:	2900      	cmp	r1, #0
   1ce60:	d0be      	beq.n	1cde0 <smp_dhkey_check+0x38>
				memcpy(r, smp->oobd_local->r, sizeof(r));
   1ce62:	2210      	movs	r2, #16
   1ce64:	e7b9      	b.n	1cdda <smp_dhkey_check+0x32>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1ce66:	4809      	ldr	r0, [pc, #36]	; (1ce8c <smp_dhkey_check+0xe4>)
   1ce68:	2145      	movs	r1, #69	; 0x45
   1ce6a:	f00d f8fc 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1ce6e:	2508      	movs	r5, #8
}
   1ce70:	4628      	mov	r0, r5
   1ce72:	b011      	add	sp, #68	; 0x44
   1ce74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1ce76:	2101      	movs	r1, #1
   1ce78:	1d20      	adds	r0, r4, #4
   1ce7a:	f00f ff59 	bl	2cd30 <atomic_set_bit>
		return 0;
   1ce7e:	e7f7      	b.n	1ce70 <smp_dhkey_check+0xc8>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1ce80:	250b      	movs	r5, #11
   1ce82:	e7f5      	b.n	1ce70 <smp_dhkey_check+0xc8>
	return 0;
   1ce84:	2500      	movs	r5, #0
   1ce86:	e7f3      	b.n	1ce70 <smp_dhkey_check+0xc8>
   1ce88:	0003200e 	.word	0x0003200e
   1ce8c:	00031fed 	.word	0x00031fed

0001ce90 <smp_dhkey_generate>:
{
   1ce90:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ce92:	1d05      	adds	r5, r0, #4
{
   1ce94:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ce96:	2108      	movs	r1, #8
   1ce98:	4628      	mov	r0, r5
   1ce9a:	f00f ff49 	bl	2cd30 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   1ce9e:	4908      	ldr	r1, [pc, #32]	; (1cec0 <smp_dhkey_generate+0x30>)
   1cea0:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1cea4:	f7fb f8a0 	bl	17fe8 <bt_dh_key_gen>
	if (err) {
   1cea8:	b140      	cbz	r0, 1cebc <smp_dhkey_generate+0x2c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1ceaa:	2108      	movs	r1, #8
   1ceac:	4628      	mov	r0, r5
   1ceae:	f00f fefb 	bl	2cca8 <atomic_clear_bit>
		LOG_ERR("Failed to generate DHKey");
   1ceb2:	4804      	ldr	r0, [pc, #16]	; (1cec4 <smp_dhkey_generate+0x34>)
   1ceb4:	2145      	movs	r1, #69	; 0x45
   1ceb6:	f00d f8d6 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1ceba:	2008      	movs	r0, #8
}
   1cebc:	bd38      	pop	{r3, r4, r5, pc}
   1cebe:	bf00      	nop
   1cec0:	0002d195 	.word	0x0002d195
   1cec4:	0003202e 	.word	0x0003202e

0001cec8 <smp_ident_info>:
{
   1cec8:	b570      	push	{r4, r5, r6, lr}
   1ceca:	460b      	mov	r3, r1
   1cecc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cece:	210d      	movs	r1, #13
   1ced0:	3004      	adds	r0, #4
   1ced2:	f00f febf 	bl	2cc54 <atomic_test_bit>
   1ced6:	b1c8      	cbz	r0, 1cf0c <smp_ident_info+0x44>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1ced8:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1ceda:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1cede:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1cee2:	7a19      	ldrb	r1, [r3, #8]
   1cee4:	462a      	mov	r2, r5
   1cee6:	2002      	movs	r0, #2
   1cee8:	f001 fc0a 	bl	1e700 <bt_keys_get_type>
		if (!keys) {
   1ceec:	b948      	cbnz	r0, 1cf02 <smp_ident_info+0x3a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1ceee:	4628      	mov	r0, r5
   1cef0:	f7f8 fc18 	bl	15724 <bt_addr_le_str>
   1cef4:	2145      	movs	r1, #69	; 0x45
   1cef6:	4602      	mov	r2, r0
   1cef8:	4807      	ldr	r0, [pc, #28]	; (1cf18 <smp_ident_info+0x50>)
   1cefa:	f00d f8b4 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1cefe:	2008      	movs	r0, #8
}
   1cf00:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
   1cf02:	2210      	movs	r2, #16
   1cf04:	4631      	mov	r1, r6
   1cf06:	302a      	adds	r0, #42	; 0x2a
   1cf08:	f00e f875 	bl	2aff6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1cf0c:	4620      	mov	r0, r4
   1cf0e:	2109      	movs	r1, #9
   1cf10:	f00f ff0e 	bl	2cd30 <atomic_set_bit>
	return 0;
   1cf14:	2000      	movs	r0, #0
   1cf16:	e7f3      	b.n	1cf00 <smp_ident_info+0x38>
   1cf18:	0003204c 	.word	0x0003204c

0001cf1c <smp_encrypt_info>:
{
   1cf1c:	b570      	push	{r4, r5, r6, lr}
   1cf1e:	460b      	mov	r3, r1
   1cf20:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1cf22:	210d      	movs	r1, #13
   1cf24:	3004      	adds	r0, #4
   1cf26:	f00f fe95 	bl	2cc54 <atomic_test_bit>
   1cf2a:	b1c8      	cbz	r0, 1cf60 <smp_encrypt_info+0x44>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1cf2c:	68de      	ldr	r6, [r3, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   1cf2e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1cf32:	f103 0590 	add.w	r5, r3, #144	; 0x90
   1cf36:	7a19      	ldrb	r1, [r3, #8]
   1cf38:	462a      	mov	r2, r5
   1cf3a:	2004      	movs	r0, #4
   1cf3c:	f001 fbe0 	bl	1e700 <bt_keys_get_type>
		if (!keys) {
   1cf40:	b948      	cbnz	r0, 1cf56 <smp_encrypt_info+0x3a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1cf42:	4628      	mov	r0, r5
   1cf44:	f7f8 fbee 	bl	15724 <bt_addr_le_str>
   1cf48:	2145      	movs	r1, #69	; 0x45
   1cf4a:	4602      	mov	r2, r0
   1cf4c:	4807      	ldr	r0, [pc, #28]	; (1cf6c <smp_encrypt_info+0x50>)
   1cf4e:	f00d f88a 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1cf52:	2008      	movs	r0, #8
}
   1cf54:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
   1cf56:	2210      	movs	r2, #16
   1cf58:	4631      	mov	r1, r6
   1cf5a:	301a      	adds	r0, #26
   1cf5c:	f00e f84b 	bl	2aff6 <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
   1cf60:	4620      	mov	r0, r4
   1cf62:	2107      	movs	r1, #7
   1cf64:	f00f fee4 	bl	2cd30 <atomic_set_bit>
	return 0;
   1cf68:	2000      	movs	r0, #0
   1cf6a:	e7f3      	b.n	1cf54 <smp_encrypt_info+0x38>
   1cf6c:	0003204c 	.word	0x0003204c

0001cf70 <bt_smp_distribute_keys>:
{
   1cf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   1cf74:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (!keys) {
   1cf78:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
{
   1cf7c:	b088      	sub	sp, #32
   1cf7e:	4604      	mov	r4, r0
	if (!keys) {
   1cf80:	b953      	cbnz	r3, 1cf98 <bt_smp_distribute_keys+0x28>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   1cf82:	f106 0090 	add.w	r0, r6, #144	; 0x90
   1cf86:	f7f8 fbcd 	bl	15724 <bt_addr_le_str>
   1cf8a:	2145      	movs	r1, #69	; 0x45
   1cf8c:	4602      	mov	r2, r0
   1cf8e:	485b      	ldr	r0, [pc, #364]	; (1d0fc <bt_smp_distribute_keys+0x18c>)
   1cf90:	f00d f869 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1cf94:	2008      	movs	r0, #8
   1cf96:	e01d      	b.n	1cfd4 <bt_smp_distribute_keys+0x64>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1cf98:	f100 0904 	add.w	r9, r0, #4
   1cf9c:	2105      	movs	r1, #5
   1cf9e:	4648      	mov	r0, r9
   1cfa0:	f00f fe58 	bl	2cc54 <atomic_test_bit>
   1cfa4:	b988      	cbnz	r0, 1cfca <bt_smp_distribute_keys+0x5a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   1cfa6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1cfaa:	07da      	lsls	r2, r3, #31
   1cfac:	d50d      	bpl.n	1cfca <bt_smp_distribute_keys+0x5a>
	struct bt_keys *keys = conn->le.keys;
   1cfae:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cfb2:	211a      	movs	r1, #26
   1cfb4:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
   1cfb6:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
		if (bt_rand((void *)&rand, sizeof(rand))) {
   1cfba:	f004 ff1f 	bl	21dfc <bt_rand>
   1cfbe:	4680      	mov	r8, r0
   1cfc0:	b158      	cbz	r0, 1cfda <bt_smp_distribute_keys+0x6a>
			LOG_ERR("Unable to get random bytes");
   1cfc2:	484f      	ldr	r0, [pc, #316]	; (1d100 <bt_smp_distribute_keys+0x190>)
   1cfc4:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1cfc6:	f00d f84e 	bl	2a066 <z_log_minimal_printk>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
   1cfca:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1cfce:	079b      	lsls	r3, r3, #30
   1cfd0:	d45d      	bmi.n	1d08e <bt_smp_distribute_keys+0x11e>
	return 0;
   1cfd2:	2000      	movs	r0, #0
}
   1cfd4:	b008      	add	sp, #32
   1cfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   1cfda:	2106      	movs	r1, #6
   1cfdc:	4620      	mov	r0, r4
   1cfde:	f00f febb 	bl	2cd58 <smp_create_pdu.constprop.0>
		if (!buf) {
   1cfe2:	4607      	mov	r7, r0
   1cfe4:	b910      	cbnz	r0, 1cfec <bt_smp_distribute_keys+0x7c>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   1cfe6:	4847      	ldr	r0, [pc, #284]	; (1d104 <bt_smp_distribute_keys+0x194>)
   1cfe8:	2145      	movs	r1, #69	; 0x45
   1cfea:	e7ec      	b.n	1cfc6 <bt_smp_distribute_keys+0x56>
   1cfec:	2110      	movs	r1, #16
   1cfee:	300c      	adds	r0, #12
   1cff0:	f002 f83c 	bl	1f06c <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
   1cff4:	7b2a      	ldrb	r2, [r5, #12]
   1cff6:	a901      	add	r1, sp, #4
   1cff8:	4682      	mov	sl, r0
   1cffa:	f00d fffc 	bl	2aff6 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   1cffe:	7b28      	ldrb	r0, [r5, #12]
   1d000:	280f      	cmp	r0, #15
   1d002:	d805      	bhi.n	1d010 <bt_smp_distribute_keys+0xa0>
			(void)memset(info->ltk + keys->enc_size, 0,
   1d004:	f1c0 0210 	rsb	r2, r0, #16
   1d008:	4641      	mov	r1, r8
   1d00a:	4450      	add	r0, sl
   1d00c:	f00d fffe 	bl	2b00c <memset>
		smp_send(smp, buf, NULL, NULL);
   1d010:	4639      	mov	r1, r7
   1d012:	2200      	movs	r2, #0
   1d014:	4620      	mov	r0, r4
   1d016:	f00f fe56 	bl	2ccc6 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   1d01a:	2107      	movs	r1, #7
   1d01c:	4620      	mov	r0, r4
   1d01e:	f00f fe9b 	bl	2cd58 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d022:	4607      	mov	r7, r0
   1d024:	b910      	cbnz	r0, 1d02c <bt_smp_distribute_keys+0xbc>
			LOG_ERR("Unable to allocate Central Ident buffer");
   1d026:	4838      	ldr	r0, [pc, #224]	; (1d108 <bt_smp_distribute_keys+0x198>)
   1d028:	2145      	movs	r1, #69	; 0x45
   1d02a:	e7cc      	b.n	1cfc6 <bt_smp_distribute_keys+0x56>
   1d02c:	210a      	movs	r1, #10
   1d02e:	300c      	adds	r0, #12
   1d030:	f002 f81c 	bl	1f06c <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   1d034:	2208      	movs	r2, #8
   1d036:	4680      	mov	r8, r0
   1d038:	a905      	add	r1, sp, #20
   1d03a:	3002      	adds	r0, #2
   1d03c:	f00d ffdb 	bl	2aff6 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   1d040:	2202      	movs	r2, #2
   1d042:	a907      	add	r1, sp, #28
   1d044:	4640      	mov	r0, r8
   1d046:	f00d ffd6 	bl	2aff6 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   1d04a:	4639      	mov	r1, r7
   1d04c:	4620      	mov	r0, r4
   1d04e:	4a2f      	ldr	r2, [pc, #188]	; (1d10c <bt_smp_distribute_keys+0x19c>)
   1d050:	f00f fe39 	bl	2ccc6 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1d054:	210d      	movs	r1, #13
   1d056:	4648      	mov	r0, r9
   1d058:	f00f fdfc 	bl	2cc54 <atomic_test_bit>
   1d05c:	2800      	cmp	r0, #0
   1d05e:	d0b4      	beq.n	1cfca <bt_smp_distribute_keys+0x5a>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   1d060:	4628      	mov	r0, r5
   1d062:	2101      	movs	r1, #1
   1d064:	f001 fb36 	bl	1e6d4 <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   1d068:	a901      	add	r1, sp, #4
   1d06a:	2210      	movs	r2, #16
   1d06c:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   1d070:	f00d ffc1 	bl	2aff6 <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   1d074:	a905      	add	r1, sp, #20
   1d076:	2208      	movs	r2, #8
   1d078:	f105 0040 	add.w	r0, r5, #64	; 0x40
   1d07c:	f00d ffbb 	bl	2aff6 <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   1d080:	2202      	movs	r2, #2
   1d082:	a907      	add	r1, sp, #28
   1d084:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d088:	f00d ffb5 	bl	2aff6 <memcpy>
   1d08c:	e79d      	b.n	1cfca <bt_smp_distribute_keys+0x5a>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
   1d08e:	2108      	movs	r1, #8
   1d090:	4620      	mov	r0, r4
   1d092:	f00f fe61 	bl	2cd58 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d096:	4605      	mov	r5, r0
   1d098:	b920      	cbnz	r0, 1d0a4 <bt_smp_distribute_keys+0x134>
			LOG_ERR("Unable to allocate Ident Info buffer");
   1d09a:	481d      	ldr	r0, [pc, #116]	; (1d110 <bt_smp_distribute_keys+0x1a0>)
   1d09c:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1d09e:	f00c ffe2 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d0a2:	e777      	b.n	1cf94 <bt_smp_distribute_keys+0x24>
   1d0a4:	2110      	movs	r1, #16
   1d0a6:	300c      	adds	r0, #12
   1d0a8:	f001 ffe0 	bl	1f06c <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   1d0ac:	7a31      	ldrb	r1, [r6, #8]
   1d0ae:	4f19      	ldr	r7, [pc, #100]	; (1d114 <bt_smp_distribute_keys+0x1a4>)
   1d0b0:	0109      	lsls	r1, r1, #4
   1d0b2:	f501 71b2 	add.w	r1, r1, #356	; 0x164
   1d0b6:	2210      	movs	r2, #16
   1d0b8:	4439      	add	r1, r7
   1d0ba:	f00d ff9c 	bl	2aff6 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   1d0be:	4629      	mov	r1, r5
   1d0c0:	2200      	movs	r2, #0
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	f00f fdff 	bl	2ccc6 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   1d0c8:	2109      	movs	r1, #9
   1d0ca:	4620      	mov	r0, r4
   1d0cc:	f00f fe44 	bl	2cd58 <smp_create_pdu.constprop.0>
		if (!buf) {
   1d0d0:	4605      	mov	r5, r0
   1d0d2:	b910      	cbnz	r0, 1d0da <bt_smp_distribute_keys+0x16a>
			LOG_ERR("Unable to allocate Ident Addr Info buffer");
   1d0d4:	4810      	ldr	r0, [pc, #64]	; (1d118 <bt_smp_distribute_keys+0x1a8>)
   1d0d6:	2145      	movs	r1, #69	; 0x45
   1d0d8:	e7e1      	b.n	1d09e <bt_smp_distribute_keys+0x12e>
   1d0da:	2107      	movs	r1, #7
   1d0dc:	300c      	adds	r0, #12
   1d0de:	f001 ffc5 	bl	1f06c <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   1d0e2:	7a31      	ldrb	r1, [r6, #8]
   1d0e4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
   1d0e8:	4439      	add	r1, r7
   1d0ea:	2207      	movs	r2, #7
   1d0ec:	f00d ff83 	bl	2aff6 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   1d0f0:	4a0a      	ldr	r2, [pc, #40]	; (1d11c <bt_smp_distribute_keys+0x1ac>)
   1d0f2:	4629      	mov	r1, r5
   1d0f4:	4620      	mov	r0, r4
   1d0f6:	f00f fde6 	bl	2ccc6 <smp_send.constprop.0>
   1d0fa:	e76a      	b.n	1cfd2 <bt_smp_distribute_keys+0x62>
   1d0fc:	0003206b 	.word	0x0003206b
   1d100:	00032085 	.word	0x00032085
   1d104:	000320a5 	.word	0x000320a5
   1d108:	000320d1 	.word	0x000320d1
   1d10c:	0002d22b 	.word	0x0002d22b
   1d110:	000320fe 	.word	0x000320fe
   1d114:	20000378 	.word	0x20000378
   1d118:	00032128 	.word	0x00032128
   1d11c:	0002d221 	.word	0x0002d221

0001d120 <smp_send_pairing_req>:
{
   1d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d124:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   1d126:	f7ff fde1 	bl	1ccec <smp_chan_get>
	if (!smp) {
   1d12a:	4604      	mov	r4, r0
   1d12c:	2800      	cmp	r0, #0
   1d12e:	f000 80b8 	beq.w	1d2a2 <smp_send_pairing_req+0x182>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1d132:	1d07      	adds	r7, r0, #4
   1d134:	2104      	movs	r1, #4
   1d136:	4638      	mov	r0, r7
   1d138:	f00f fd8c 	bl	2cc54 <atomic_test_bit>
   1d13c:	2800      	cmp	r0, #0
   1d13e:	f040 80b3 	bne.w	1d2a8 <smp_send_pairing_req+0x188>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d142:	2102      	movs	r1, #2
   1d144:	4638      	mov	r0, r7
   1d146:	f00f fd85 	bl	2cc54 <atomic_test_bit>
   1d14a:	2800      	cmp	r0, #0
   1d14c:	f040 80a4 	bne.w	1d298 <smp_send_pairing_req+0x178>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d150:	2103      	movs	r1, #3
   1d152:	4638      	mov	r0, r7
   1d154:	f00f fd7e 	bl	2cc54 <atomic_test_bit>
   1d158:	b118      	cbz	r0, 1d162 <smp_send_pairing_req+0x42>
		return -EBUSY;
   1d15a:	f06f 000f 	mvn.w	r0, #15
}
   1d15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d162:	2101      	movs	r1, #1
   1d164:	4638      	mov	r0, r7
   1d166:	f00f fd75 	bl	2cc54 <atomic_test_bit>
   1d16a:	2800      	cmp	r0, #0
   1d16c:	d1f5      	bne.n	1d15a <smp_send_pairing_req+0x3a>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d16e:	4620      	mov	r0, r4
   1d170:	f7ff fd78 	bl	1cc64 <latch_auth_cb>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d174:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d178:	7a9b      	ldrb	r3, [r3, #10]
   1d17a:	2b03      	cmp	r3, #3
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d17c:	4606      	mov	r6, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   1d17e:	d015      	beq.n	1d1ac <smp_send_pairing_req+0x8c>
   1d180:	d805      	bhi.n	1d18e <smp_send_pairing_req+0x6e>
   1d182:	3b01      	subs	r3, #1
   1d184:	2b01      	cmp	r3, #1
   1d186:	d91b      	bls.n	1d1c0 <smp_send_pairing_req+0xa0>
		return -EINVAL;
   1d188:	f06f 0015 	mvn.w	r0, #21
   1d18c:	e7e7      	b.n	1d15e <smp_send_pairing_req+0x3e>
	switch (smp->chan.chan.conn->required_sec_level) {
   1d18e:	2b04      	cmp	r3, #4
   1d190:	d1fa      	bne.n	1d188 <smp_send_pairing_req+0x68>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d192:	4620      	mov	r0, r4
   1d194:	f7ff fd84 	bl	1cca0 <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d198:	2803      	cmp	r0, #3
   1d19a:	d104      	bne.n	1d1a6 <smp_send_pairing_req+0x86>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d19c:	2e00      	cmp	r6, #0
   1d19e:	d0f3      	beq.n	1d188 <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d1a0:	68f3      	ldr	r3, [r6, #12]
   1d1a2:	2b00      	cmp	r3, #0
   1d1a4:	d0f0      	beq.n	1d188 <smp_send_pairing_req+0x68>
   1d1a6:	4b42      	ldr	r3, [pc, #264]	; (1d2b0 <smp_send_pairing_req+0x190>)
   1d1a8:	781b      	ldrb	r3, [r3, #0]
   1d1aa:	e007      	b.n	1d1bc <smp_send_pairing_req+0x9c>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   1d1ac:	4620      	mov	r0, r4
   1d1ae:	f7ff fd77 	bl	1cca0 <get_io_capa>
   1d1b2:	2803      	cmp	r0, #3
   1d1b4:	d104      	bne.n	1d1c0 <smp_send_pairing_req+0xa0>
   1d1b6:	2e00      	cmp	r6, #0
   1d1b8:	d0e6      	beq.n	1d188 <smp_send_pairing_req+0x68>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   1d1ba:	68f3      	ldr	r3, [r6, #12]
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   1d1bc:	2b00      	cmp	r3, #0
   1d1be:	d0e3      	beq.n	1d188 <smp_send_pairing_req+0x68>
	if (!conn->le.keys) {
   1d1c0:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   1d1c4:	b16b      	cbz	r3, 1d1e2 <smp_send_pairing_req+0xc2>
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   1d1c6:	2100      	movs	r1, #0
   1d1c8:	22ec      	movs	r2, #236	; 0xec
   1d1ca:	4620      	mov	r0, r4
   1d1cc:	f00d ff1e 	bl	2b00c <memset>
	if (bt_rand(smp->prnd, 16)) {
   1d1d0:	2110      	movs	r1, #16
   1d1d2:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d1d6:	f004 fe11 	bl	21dfc <bt_rand>
   1d1da:	b170      	cbz	r0, 1d1fa <smp_send_pairing_req+0xda>
		return -ENOBUFS;
   1d1dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1d1e0:	e7bd      	b.n	1d15e <smp_send_pairing_req+0x3e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d1e2:	7a28      	ldrb	r0, [r5, #8]
   1d1e4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1d1e8:	f001 f99c 	bl	1e524 <bt_keys_get_addr>
   1d1ec:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
		if (!conn->le.keys) {
   1d1f0:	2800      	cmp	r0, #0
   1d1f2:	d1e8      	bne.n	1d1c6 <smp_send_pairing_req+0xa6>
			return -ENOMEM;
   1d1f4:	f06f 000b 	mvn.w	r0, #11
   1d1f8:	e7b1      	b.n	1d15e <smp_send_pairing_req+0x3e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
   1d1fa:	2105      	movs	r1, #5
   1d1fc:	4620      	mov	r0, r4
   1d1fe:	f00f fd97 	bl	2cd30 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
   1d202:	f7fa fee1 	bl	17fc8 <bt_pub_key_get>
   1d206:	4b2b      	ldr	r3, [pc, #172]	; (1d2b4 <smp_send_pairing_req+0x194>)
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1d208:	2101      	movs	r1, #1
	sc_public_key = bt_pub_key_get();
   1d20a:	6018      	str	r0, [r3, #0]
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
   1d20c:	4620      	mov	r0, r4
   1d20e:	f00f fda3 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d212:	4680      	mov	r8, r0
   1d214:	2800      	cmp	r0, #0
   1d216:	d0e1      	beq.n	1d1dc <smp_send_pairing_req+0xbc>
   1d218:	2106      	movs	r1, #6
   1d21a:	300c      	adds	r0, #12
   1d21c:	f001 ff26 	bl	1f06c <net_buf_simple_add>
	if (sc_supported) {
   1d220:	4b23      	ldr	r3, [pc, #140]	; (1d2b0 <smp_send_pairing_req+0x190>)
   1d222:	781b      	ldrb	r3, [r3, #0]
   1d224:	4605      	mov	r5, r0
		auth &= BT_SMP_AUTH_MASK_SC;
   1d226:	2b00      	cmp	r3, #0
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d228:	4620      	mov	r0, r4
		auth &= BT_SMP_AUTH_MASK_SC;
   1d22a:	bf14      	ite	ne
   1d22c:	2609      	movne	r6, #9
   1d22e:	2601      	moveq	r6, #1
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d230:	f7ff fd36 	bl	1cca0 <get_io_capa>
	if (bondable) {
   1d234:	4b20      	ldr	r3, [pc, #128]	; (1d2b8 <smp_send_pairing_req+0x198>)
   1d236:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   1d238:	2803      	cmp	r0, #3
		auth |= BT_SMP_AUTH_MITM;
   1d23a:	bf18      	it	ne
   1d23c:	f046 0604 	orrne.w	r6, r6, #4
	if (bondable) {
   1d240:	b363      	cbz	r3, 1d29c <smp_send_pairing_req+0x17c>
		auth |= BT_SMP_AUTH_BONDING;
   1d242:	f046 0601 	orr.w	r6, r6, #1
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   1d246:	70ae      	strb	r6, [r5, #2]
	req->io_capability = get_io_capa(smp);
   1d248:	4620      	mov	r0, r4
   1d24a:	f7ff fd29 	bl	1cca0 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d24e:	4b1b      	ldr	r3, [pc, #108]	; (1d2bc <smp_send_pairing_req+0x19c>)
	req->io_capability = get_io_capa(smp);
   1d250:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   1d252:	781b      	ldrb	r3, [r3, #0]
   1d254:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   1d256:	2310      	movs	r3, #16
   1d258:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
   1d25a:	2603      	movs	r6, #3
	smp->local_dist = SEND_KEYS;
   1d25c:	f240 3303 	movw	r3, #771	; 0x303
	req->init_key_dist = SEND_KEYS;
   1d260:	712e      	strb	r6, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
   1d262:	716e      	strb	r6, [r5, #5]
	smp->local_dist = SEND_KEYS;
   1d264:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   1d268:	2301      	movs	r3, #1
   1d26a:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   1d26c:	2206      	movs	r2, #6
   1d26e:	4629      	mov	r1, r5
   1d270:	f104 000a 	add.w	r0, r4, #10
   1d274:	f00d febf 	bl	2aff6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d278:	2200      	movs	r2, #0
   1d27a:	4641      	mov	r1, r8
   1d27c:	4620      	mov	r0, r4
   1d27e:	f00f fd22 	bl	2ccc6 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
   1d282:	4620      	mov	r0, r4
   1d284:	2102      	movs	r1, #2
   1d286:	f00f fd53 	bl	2cd30 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1d28a:	210b      	movs	r1, #11
   1d28c:	f00f fd50 	bl	2cd30 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
   1d290:	4631      	mov	r1, r6
   1d292:	4638      	mov	r0, r7
   1d294:	f00f fd4c 	bl	2cd30 <atomic_set_bit>
		return 0;
   1d298:	2000      	movs	r0, #0
   1d29a:	e760      	b.n	1d15e <smp_send_pairing_req+0x3e>
		auth &= ~BT_SMP_AUTH_BONDING;
   1d29c:	f006 060c 	and.w	r6, r6, #12
   1d2a0:	e7d1      	b.n	1d246 <smp_send_pairing_req+0x126>
		return -ENOTCONN;
   1d2a2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d2a6:	e75a      	b.n	1d15e <smp_send_pairing_req+0x3e>
		return -EIO;
   1d2a8:	f06f 0004 	mvn.w	r0, #4
   1d2ac:	e757      	b.n	1d15e <smp_send_pairing_req+0x3e>
   1d2ae:	bf00      	nop
   1d2b0:	2000423a 	.word	0x2000423a
   1d2b4:	200032e8 	.word	0x200032e8
   1d2b8:	20000888 	.word	0x20000888
   1d2bc:	2000423b 	.word	0x2000423b

0001d2c0 <smp_security_request>:
{
   1d2c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d2c4:	1d06      	adds	r6, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d2c6:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	struct bt_smp_security_request *req = (void *)buf->data;
   1d2ca:	68cb      	ldr	r3, [r1, #12]
{
   1d2cc:	4607      	mov	r7, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1d2ce:	2102      	movs	r1, #2
   1d2d0:	4630      	mov	r0, r6
   1d2d2:	f00f fcbf 	bl	2cc54 <atomic_test_bit>
   1d2d6:	2800      	cmp	r0, #0
   1d2d8:	d169      	bne.n	1d3ae <smp_security_request+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1d2da:	2103      	movs	r1, #3
   1d2dc:	4630      	mov	r0, r6
   1d2de:	f00f fcb9 	bl	2cc54 <atomic_test_bit>
   1d2e2:	2800      	cmp	r0, #0
   1d2e4:	d163      	bne.n	1d3ae <smp_security_request+0xee>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1d2e6:	2101      	movs	r1, #1
   1d2e8:	4630      	mov	r0, r6
   1d2ea:	f00f fcb3 	bl	2cc54 <atomic_test_bit>
   1d2ee:	2800      	cmp	r0, #0
   1d2f0:	d15d      	bne.n	1d3ae <smp_security_request+0xee>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1d2f2:	781d      	ldrb	r5, [r3, #0]
	if (sc_supported) {
   1d2f4:	4b2f      	ldr	r3, [pc, #188]	; (1d3b4 <smp_security_request+0xf4>)
   1d2f6:	781b      	ldrb	r3, [r3, #0]
   1d2f8:	b17b      	cbz	r3, 1d31a <smp_security_request+0x5a>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
   1d2fa:	f005 050f 	and.w	r5, r5, #15
	if (conn->le.keys) {
   1d2fe:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1d302:	b16b      	cbz	r3, 1d320 <smp_security_request+0x60>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1d304:	89db      	ldrh	r3, [r3, #14]
   1d306:	f003 0324 	and.w	r3, r3, #36	; 0x24
   1d30a:	b9d3      	cbnz	r3, 1d342 <smp_security_request+0x82>
	if (smp_send_pairing_req(conn) < 0) {
   1d30c:	4620      	mov	r0, r4
   1d30e:	f7ff ff07 	bl	1d120 <smp_send_pairing_req>
   1d312:	2800      	cmp	r0, #0
   1d314:	db43      	blt.n	1d39e <smp_security_request+0xde>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1d316:	210f      	movs	r1, #15
   1d318:	e046      	b.n	1d3a8 <smp_security_request+0xe8>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
   1d31a:	f005 0507 	and.w	r5, r5, #7
   1d31e:	e7ee      	b.n	1d2fe <smp_security_request+0x3e>
					     &conn->le.dst);
   1d320:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1d324:	7a21      	ldrb	r1, [r4, #8]
   1d326:	4642      	mov	r2, r8
   1d328:	2020      	movs	r0, #32
   1d32a:	f001 f935 	bl	1e598 <bt_keys_find>
   1d32e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   1d332:	b930      	cbnz	r0, 1d342 <smp_security_request+0x82>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
   1d334:	7a21      	ldrb	r1, [r4, #8]
   1d336:	4642      	mov	r2, r8
   1d338:	2004      	movs	r0, #4
   1d33a:	f001 f92d 	bl	1e598 <bt_keys_find>
   1d33e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1d342:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   1d346:	2900      	cmp	r1, #0
   1d348:	d0e0      	beq.n	1d30c <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_MITM) &&
   1d34a:	076b      	lsls	r3, r5, #29
   1d34c:	d510      	bpl.n	1d370 <smp_security_request+0xb0>
   1d34e:	7b4b      	ldrb	r3, [r1, #13]
   1d350:	07d8      	lsls	r0, r3, #31
   1d352:	d40d      	bmi.n	1d370 <smp_security_request+0xb0>
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1d354:	4638      	mov	r0, r7
   1d356:	f7ff fca3 	bl	1cca0 <get_io_capa>
   1d35a:	2803      	cmp	r0, #3
			LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d35c:	462a      	mov	r2, r5
		if (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT) {
   1d35e:	d002      	beq.n	1d366 <smp_security_request+0xa6>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d360:	4815      	ldr	r0, [pc, #84]	; (1d3b8 <smp_security_request+0xf8>)
   1d362:	2149      	movs	r1, #73	; 0x49
   1d364:	e001      	b.n	1d36a <smp_security_request+0xaa>
		LOG_WRN("Unsupported auth requirements: 0x%x, repairing", auth);
   1d366:	4815      	ldr	r0, [pc, #84]	; (1d3bc <smp_security_request+0xfc>)
   1d368:	2157      	movs	r1, #87	; 0x57
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d36a:	f00c fe7c 	bl	2a066 <z_log_minimal_printk>
		goto pair;
   1d36e:	e7cd      	b.n	1d30c <smp_security_request+0x4c>
	if ((auth & BT_SMP_AUTH_SC) &&
   1d370:	072a      	lsls	r2, r5, #28
   1d372:	d504      	bpl.n	1d37e <smp_security_request+0xbe>
   1d374:	89cb      	ldrh	r3, [r1, #14]
   1d376:	069b      	lsls	r3, r3, #26
   1d378:	d401      	bmi.n	1d37e <smp_security_request+0xbe>
		LOG_INF("New auth requirements: 0x%x, repairing", auth);
   1d37a:	462a      	mov	r2, r5
   1d37c:	e7f0      	b.n	1d360 <smp_security_request+0xa0>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
   1d37e:	7b0b      	ldrb	r3, [r1, #12]
   1d380:	9300      	str	r3, [sp, #0]
   1d382:	f101 0218 	add.w	r2, r1, #24
   1d386:	f101 031a 	add.w	r3, r1, #26
   1d38a:	4620      	mov	r0, r4
   1d38c:	3110      	adds	r1, #16
   1d38e:	f00e f8ca 	bl	2b526 <bt_conn_le_start_encryption>
   1d392:	2800      	cmp	r0, #0
   1d394:	da07      	bge.n	1d3a6 <smp_security_request+0xe6>
		LOG_ERR("Failed to start encryption");
   1d396:	480a      	ldr	r0, [pc, #40]	; (1d3c0 <smp_security_request+0x100>)
   1d398:	2145      	movs	r1, #69	; 0x45
   1d39a:	f00c fe64 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d39e:	2008      	movs	r0, #8
}
   1d3a0:	b002      	add	sp, #8
   1d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1d3a6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   1d3a8:	4630      	mov	r0, r6
   1d3aa:	f00f fcc1 	bl	2cd30 <atomic_set_bit>
		return 0;
   1d3ae:	2000      	movs	r0, #0
   1d3b0:	e7f6      	b.n	1d3a0 <smp_security_request+0xe0>
   1d3b2:	bf00      	nop
   1d3b4:	2000423a 	.word	0x2000423a
   1d3b8:	00032157 	.word	0x00032157
   1d3bc:	00032183 	.word	0x00032183
   1d3c0:	0003200e 	.word	0x0003200e

0001d3c4 <smp_send_pairing_confirm>:
{
   1d3c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
   1d3c6:	7a04      	ldrb	r4, [r0, #8]
   1d3c8:	2c02      	cmp	r4, #2
{
   1d3ca:	4605      	mov	r5, r0
	switch (smp->method) {
   1d3cc:	d823      	bhi.n	1d416 <smp_send_pairing_confirm+0x52>
   1d3ce:	b144      	cbz	r4, 1d3e2 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1d3d0:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
   1d3d4:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
   1d3d8:	40dc      	lsrs	r4, r3
   1d3da:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   1d3de:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1d3e2:	2103      	movs	r1, #3
   1d3e4:	4628      	mov	r0, r5
   1d3e6:	f00f fcb7 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d3ea:	4606      	mov	r6, r0
   1d3ec:	b1d0      	cbz	r0, 1d424 <smp_send_pairing_confirm+0x60>
   1d3ee:	2110      	movs	r1, #16
   1d3f0:	300c      	adds	r0, #12
   1d3f2:	f001 fe3b 	bl	1f06c <net_buf_simple_add>
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   1d3f6:	9000      	str	r0, [sp, #0]
   1d3f8:	4812      	ldr	r0, [pc, #72]	; (1d444 <smp_send_pairing_confirm+0x80>)
   1d3fa:	4623      	mov	r3, r4
   1d3fc:	6800      	ldr	r0, [r0, #0]
   1d3fe:	f105 0227 	add.w	r2, r5, #39	; 0x27
   1d402:	f105 0157 	add.w	r1, r5, #87	; 0x57
   1d406:	f00f ff73 	bl	2d2f0 <bt_crypto_f4>
   1d40a:	4604      	mov	r4, r0
   1d40c:	b178      	cbz	r0, 1d42e <smp_send_pairing_confirm+0x6a>
		net_buf_unref(buf);
   1d40e:	4630      	mov	r0, r6
   1d410:	f001 fd26 	bl	1ee60 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1d414:	e006      	b.n	1d424 <smp_send_pairing_confirm+0x60>
	switch (smp->method) {
   1d416:	2c03      	cmp	r4, #3
   1d418:	d007      	beq.n	1d42a <smp_send_pairing_confirm+0x66>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d41a:	480b      	ldr	r0, [pc, #44]	; (1d448 <smp_send_pairing_confirm+0x84>)
   1d41c:	4622      	mov	r2, r4
   1d41e:	2145      	movs	r1, #69	; 0x45
   1d420:	f00c fe21 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d424:	2008      	movs	r0, #8
}
   1d426:	b002      	add	sp, #8
   1d428:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1d42a:	2400      	movs	r4, #0
   1d42c:	e7d9      	b.n	1d3e2 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
   1d42e:	4602      	mov	r2, r0
   1d430:	4631      	mov	r1, r6
   1d432:	4628      	mov	r0, r5
   1d434:	f00f fc47 	bl	2ccc6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1d438:	1d28      	adds	r0, r5, #4
   1d43a:	4621      	mov	r1, r4
   1d43c:	f00f fc34 	bl	2cca8 <atomic_clear_bit>
	return 0;
   1d440:	4620      	mov	r0, r4
   1d442:	e7f0      	b.n	1d426 <smp_send_pairing_confirm+0x62>
   1d444:	200032e8 	.word	0x200032e8
   1d448:	00031fed 	.word	0x00031fed

0001d44c <smp_public_key>:
{
   1d44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d44e:	460e      	mov	r6, r1
   1d450:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d452:	f7ff fc07 	bl	1cc64 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   1d456:	68f6      	ldr	r6, [r6, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d458:	f104 0757 	add.w	r7, r4, #87	; 0x57
   1d45c:	2220      	movs	r2, #32
   1d45e:	4631      	mov	r1, r6
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d460:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   1d462:	4638      	mov	r0, r7
   1d464:	f00d fdc7 	bl	2aff6 <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   1d468:	2220      	movs	r2, #32
   1d46a:	18b1      	adds	r1, r6, r2
   1d46c:	f104 0077 	add.w	r0, r4, #119	; 0x77
   1d470:	f00d fdc1 	bl	2aff6 <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   1d474:	4638      	mov	r0, r7
   1d476:	f7fa fd1f 	bl	17eb8 <bt_pub_key_is_debug>
   1d47a:	b9b8      	cbnz	r0, 1d4ac <smp_public_key+0x60>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d47c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d480:	78db      	ldrb	r3, [r3, #3]
   1d482:	2b00      	cmp	r3, #0
   1d484:	d135      	bne.n	1d4f2 <smp_public_key+0xa6>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d486:	1d26      	adds	r6, r4, #4
   1d488:	210e      	movs	r1, #14
   1d48a:	4630      	mov	r0, r6
   1d48c:	f00f fbe2 	bl	2cc54 <atomic_test_bit>
   1d490:	bb88      	cbnz	r0, 1d4f6 <smp_public_key+0xaa>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   1d492:	4b5f      	ldr	r3, [pc, #380]	; (1d610 <smp_public_key+0x1c4>)
   1d494:	2220      	movs	r2, #32
   1d496:	6819      	ldr	r1, [r3, #0]
   1d498:	4638      	mov	r0, r7
   1d49a:	f00d fd85 	bl	2afa8 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   1d49e:	bb50      	cbnz	r0, 1d4f6 <smp_public_key+0xaa>
			LOG_WRN("Remote public key rejected");
   1d4a0:	485c      	ldr	r0, [pc, #368]	; (1d614 <smp_public_key+0x1c8>)
   1d4a2:	2157      	movs	r1, #87	; 0x57
   1d4a4:	f00c fddf 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d4a8:	2008      	movs	r0, #8
   1d4aa:	e020      	b.n	1d4ee <smp_public_key+0xa2>
		LOG_INF("Remote is using Debug Public key");
   1d4ac:	485a      	ldr	r0, [pc, #360]	; (1d618 <smp_public_key+0x1cc>)
   1d4ae:	2149      	movs	r1, #73	; 0x49
   1d4b0:	f00c fdd9 	bl	2a066 <z_log_minimal_printk>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   1d4b4:	210e      	movs	r1, #14
   1d4b6:	1d20      	adds	r0, r4, #4
   1d4b8:	f00f fc3a 	bl	2cd30 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
   1d4bc:	f8d4 60ec 	ldr.w	r6, [r4, #236]	; 0xec
	if (!conn->le.keys) {
   1d4c0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1d4c4:	b933      	cbnz	r3, 1d4d4 <smp_public_key+0x88>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1d4c6:	7a30      	ldrb	r0, [r6, #8]
   1d4c8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1d4cc:	f001 f82a 	bl	1e524 <bt_keys_get_addr>
   1d4d0:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
	if (!conn->le.keys ||
   1d4d4:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
   1d4d8:	2b00      	cmp	r3, #0
   1d4da:	d0cf      	beq.n	1d47c <smp_public_key+0x30>
   1d4dc:	89da      	ldrh	r2, [r3, #14]
   1d4de:	f002 0224 	and.w	r2, r2, #36	; 0x24
   1d4e2:	2a00      	cmp	r2, #0
   1d4e4:	d0ca      	beq.n	1d47c <smp_public_key+0x30>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   1d4e6:	7b5b      	ldrb	r3, [r3, #13]
   1d4e8:	0799      	lsls	r1, r3, #30
   1d4ea:	d4c7      	bmi.n	1d47c <smp_public_key+0x30>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d4ec:	2003      	movs	r0, #3
}
   1d4ee:	b003      	add	sp, #12
   1d4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
   1d4f2:	2000      	movs	r0, #0
   1d4f4:	e7fb      	b.n	1d4ee <smp_public_key+0xa2>
		switch (smp->method) {
   1d4f6:	7a22      	ldrb	r2, [r4, #8]
   1d4f8:	2a05      	cmp	r2, #5
   1d4fa:	f200 8081 	bhi.w	1d600 <smp_public_key+0x1b4>
   1d4fe:	e8df f002 	tbb	[pc, r2]
   1d502:	4603      	.short	0x4603
   1d504:	507f0308 	.word	0x507f0308
			atomic_set_bit(smp->allowed_cmds,
   1d508:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   1d50a:	4620      	mov	r0, r4
   1d50c:	f00f fc10 	bl	2cd30 <atomic_set_bit>
			break;
   1d510:	e02e      	b.n	1d570 <smp_public_key+0x124>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d512:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d514:	f8d4 70ec 	ldr.w	r7, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d518:	f7ff fba4 	bl	1cc64 <latch_auth_cb>
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d51c:	2104      	movs	r1, #4
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d51e:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   1d520:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1d524:	f004 fc6a 	bl	21dfc <bt_rand>
   1d528:	2800      	cmp	r0, #0
   1d52a:	d1bd      	bne.n	1d4a8 <smp_public_key+0x5c>
		smp->passkey %= 1000000;
   1d52c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1d530:	4a3a      	ldr	r2, [pc, #232]	; (1d61c <smp_public_key+0x1d0>)
   1d532:	fbb3 f1f2 	udiv	r1, r3, r2
   1d536:	fb02 3311 	mls	r3, r2, r1, r3
   1d53a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   1d53e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d542:	b155      	cbz	r5, 1d55a <smp_public_key+0x10e>
   1d544:	682b      	ldr	r3, [r5, #0]
   1d546:	b143      	cbz	r3, 1d55a <smp_public_key+0x10e>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d548:	210b      	movs	r1, #11
   1d54a:	4630      	mov	r0, r6
   1d54c:	f00f fbf0 	bl	2cd30 <atomic_set_bit>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   1d550:	682b      	ldr	r3, [r5, #0]
   1d552:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   1d556:	4638      	mov	r0, r7
   1d558:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1d55a:	2103      	movs	r1, #3
   1d55c:	4620      	mov	r0, r4
   1d55e:	f00f fbe7 	bl	2cd30 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
   1d562:	210e      	movs	r1, #14
   1d564:	f00f fbe4 	bl	2cd30 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
   1d568:	f7ff ff2c 	bl	1d3c4 <smp_send_pairing_confirm>
			if (err) {
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d1be      	bne.n	1d4ee <smp_public_key+0xa2>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1d570:	4630      	mov	r0, r6
   1d572:	2107      	movs	r1, #7
   1d574:	f00f fbdc 	bl	2cd30 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   1d578:	2008      	movs	r0, #8
   1d57a:	f7ff fb65 	bl	1cc48 <smp_find>
   1d57e:	2800      	cmp	r0, #0
   1d580:	d1b7      	bne.n	1d4f2 <smp_public_key+0xa6>
		return smp_dhkey_generate(smp);
   1d582:	4620      	mov	r0, r4
}
   1d584:	b003      	add	sp, #12
   1d586:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return smp_dhkey_generate(smp);
   1d58a:	f7ff bc81 	b.w	1ce90 <smp_dhkey_generate>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d58e:	210a      	movs	r1, #10
   1d590:	4630      	mov	r0, r6
   1d592:	f00f fbcd 	bl	2cd30 <atomic_set_bit>
			smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   1d596:	686b      	ldr	r3, [r5, #4]
   1d598:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d59c:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
   1d59e:	210e      	movs	r1, #14
   1d5a0:	e7b3      	b.n	1d50a <smp_public_key+0xbe>
			if (bt_rand(smp->prnd, 16)) {
   1d5a2:	2110      	movs	r1, #16
   1d5a4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1d5a8:	f004 fc28 	bl	21dfc <bt_rand>
   1d5ac:	2800      	cmp	r0, #0
   1d5ae:	f47f af7b 	bne.w	1d4a8 <smp_public_key+0x5c>
			if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d5b2:	b355      	cbz	r5, 1d60a <smp_public_key+0x1be>
   1d5b4:	68eb      	ldr	r3, [r5, #12]
   1d5b6:	b343      	cbz	r3, 1d60a <smp_public_key+0x1be>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d5b8:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
				struct bt_conn_oob_info info = {
   1d5bc:	4b18      	ldr	r3, [pc, #96]	; (1d620 <smp_public_key+0x1d4>)
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d5be:	78c9      	ldrb	r1, [r1, #3]
				struct bt_conn_oob_info info = {
   1d5c0:	881b      	ldrh	r3, [r3, #0]
   1d5c2:	f8ad 3004 	strh.w	r3, [sp, #4]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d5c6:	7ae2      	ldrb	r2, [r4, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d5c8:	7ca3      	ldrb	r3, [r4, #18]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1d5ca:	b9b9      	cbnz	r1, 1d5fc <smp_public_key+0x1b0>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1d5cc:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   1d5ce:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   1d5d2:	d411      	bmi.n	1d5f8 <smp_public_key+0x1ac>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1d5d4:	2b00      	cmp	r3, #0
   1d5d6:	bf08      	it	eq
   1d5d8:	2003      	moveq	r0, #3
				smp->oobd_local = NULL;
   1d5da:	2300      	movs	r3, #0
				smp->oobd_remote = NULL;
   1d5dc:	e9c4 3338 	strd	r3, r3, [r4, #224]	; 0xe0
	info->lesc.oob_config = oob_config;
   1d5e0:	f88d 0005 	strb.w	r0, [sp, #5]
				atomic_set_bit(smp->flags,
   1d5e4:	210c      	movs	r1, #12
   1d5e6:	4630      	mov	r0, r6
   1d5e8:	f00f fba2 	bl	2cd30 <atomic_set_bit>
				smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d5ec:	68eb      	ldr	r3, [r5, #12]
   1d5ee:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d5f2:	a901      	add	r1, sp, #4
   1d5f4:	4798      	blx	r3
			break;
   1d5f6:	e7bb      	b.n	1d570 <smp_public_key+0x124>
		if (rsp_oob_present) {
   1d5f8:	1c58      	adds	r0, r3, #1
   1d5fa:	e7ee      	b.n	1d5da <smp_public_key+0x18e>
	int oob_config = BT_CONN_OOB_NO_DATA;
   1d5fc:	2003      	movs	r0, #3
   1d5fe:	e7ec      	b.n	1d5da <smp_public_key+0x18e>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d600:	4808      	ldr	r0, [pc, #32]	; (1d624 <smp_public_key+0x1d8>)
   1d602:	2145      	movs	r1, #69	; 0x45
   1d604:	f00c fd2f 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1d608:	e74e      	b.n	1d4a8 <smp_public_key+0x5c>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
   1d60a:	2002      	movs	r0, #2
   1d60c:	e76f      	b.n	1d4ee <smp_public_key+0xa2>
   1d60e:	bf00      	nop
   1d610:	200032e8 	.word	0x200032e8
   1d614:	000321dd 	.word	0x000321dd
   1d618:	000321b7 	.word	0x000321b7
   1d61c:	000f4240 	.word	0x000f4240
   1d620:	0002e740 	.word	0x0002e740
   1d624:	00031fed 	.word	0x00031fed

0001d628 <sc_send_public_key>:
{
   1d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d62a:	210c      	movs	r1, #12
{
   1d62c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   1d62e:	f00f fb93 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!req_buf) {
   1d632:	4604      	mov	r4, r0
   1d634:	b1b0      	cbz	r0, 1d664 <sc_send_public_key+0x3c>
   1d636:	2140      	movs	r1, #64	; 0x40
   1d638:	300c      	adds	r0, #12
   1d63a:	f001 fd17 	bl	1f06c <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
   1d63e:	4f0a      	ldr	r7, [pc, #40]	; (1d668 <sc_send_public_key+0x40>)
   1d640:	2220      	movs	r2, #32
   1d642:	6839      	ldr	r1, [r7, #0]
   1d644:	4606      	mov	r6, r0
   1d646:	f00d fcd6 	bl	2aff6 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   1d64a:	6839      	ldr	r1, [r7, #0]
   1d64c:	2220      	movs	r2, #32
   1d64e:	4411      	add	r1, r2
   1d650:	18b0      	adds	r0, r6, r2
   1d652:	f00d fcd0 	bl	2aff6 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   1d656:	4628      	mov	r0, r5
   1d658:	2200      	movs	r2, #0
   1d65a:	4621      	mov	r1, r4
   1d65c:	f00f fb33 	bl	2ccc6 <smp_send.constprop.0>
	return 0;
   1d660:	2000      	movs	r0, #0
}
   1d662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1d664:	2008      	movs	r0, #8
   1d666:	e7fc      	b.n	1d662 <sc_send_public_key+0x3a>
   1d668:	200032e8 	.word	0x200032e8

0001d66c <compute_and_send_central_dhcheck>:
{
   1d66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d670:	4604      	mov	r4, r0
   1d672:	b08c      	sub	sp, #48	; 0x30
	(void)memset(r, 0, sizeof(r));
   1d674:	2210      	movs	r2, #16
   1d676:	2100      	movs	r1, #0
   1d678:	a808      	add	r0, sp, #32
   1d67a:	f00d fcc7 	bl	2b00c <memset>
	switch (smp->method) {
   1d67e:	7a22      	ldrb	r2, [r4, #8]
   1d680:	2a05      	cmp	r2, #5
   1d682:	d82c      	bhi.n	1d6de <compute_and_send_central_dhcheck+0x72>
   1d684:	e8df f002 	tbb	[pc, r2]
   1d688:	09030309 	.word	0x09030309
   1d68c:	252b      	.short	0x252b
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   1d68e:	2204      	movs	r2, #4
   1d690:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d694:	a808      	add	r0, sp, #32
   1d696:	f00d fcae 	bl	2aff6 <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d69a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d69e:	f104 0247 	add.w	r2, r4, #71	; 0x47
   1d6a2:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d6a6:	e9cd 5201 	strd	r5, r2, [sp, #4]
   1d6aa:	f104 0627 	add.w	r6, r4, #39	; 0x27
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   1d6ae:	f103 029e 	add.w	r2, r3, #158	; 0x9e
	if (bt_crypto_f5(smp->dhkey, smp->prnd, smp->rrnd, &smp->chan.chan.conn->le.init_addr,
   1d6b2:	f104 0837 	add.w	r8, r4, #55	; 0x37
   1d6b6:	9200      	str	r2, [sp, #0]
   1d6b8:	3397      	adds	r3, #151	; 0x97
   1d6ba:	4642      	mov	r2, r8
   1d6bc:	4631      	mov	r1, r6
   1d6be:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1d6c2:	f001 f94f 	bl	1e964 <bt_crypto_f5>
   1d6c6:	b190      	cbz	r0, 1d6ee <compute_and_send_central_dhcheck+0x82>
		LOG_ERR("Calculate LTK failed");
   1d6c8:	4821      	ldr	r0, [pc, #132]	; (1d750 <compute_and_send_central_dhcheck+0xe4>)
   1d6ca:	2145      	movs	r1, #69	; 0x45
   1d6cc:	f00c fccb 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d6d0:	e009      	b.n	1d6e6 <compute_and_send_central_dhcheck+0x7a>
		if (smp->oobd_remote) {
   1d6d2:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   1d6d6:	2900      	cmp	r1, #0
   1d6d8:	d0df      	beq.n	1d69a <compute_and_send_central_dhcheck+0x2e>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   1d6da:	2210      	movs	r2, #16
   1d6dc:	e7da      	b.n	1d694 <compute_and_send_central_dhcheck+0x28>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1d6de:	481d      	ldr	r0, [pc, #116]	; (1d754 <compute_and_send_central_dhcheck+0xe8>)
   1d6e0:	2145      	movs	r1, #69	; 0x45
   1d6e2:	f00c fcc0 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1d6e6:	2008      	movs	r0, #8
}
   1d6e8:	b00c      	add	sp, #48	; 0x30
   1d6ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   1d6ee:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d6f2:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   1d6f6:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
   1d6f8:	9301      	str	r3, [sp, #4]
   1d6fa:	af04      	add	r7, sp, #16
   1d6fc:	f104 030a 	add.w	r3, r4, #10
   1d700:	9202      	str	r2, [sp, #8]
   1d702:	9300      	str	r3, [sp, #0]
   1d704:	4628      	mov	r0, r5
   1d706:	9703      	str	r7, [sp, #12]
   1d708:	ab08      	add	r3, sp, #32
   1d70a:	4642      	mov	r2, r8
   1d70c:	4631      	mov	r1, r6
   1d70e:	f00f fe14 	bl	2d33a <bt_crypto_f6>
   1d712:	4605      	mov	r5, r0
   1d714:	b110      	cbz	r0, 1d71c <compute_and_send_central_dhcheck+0xb0>
		LOG_ERR("Calculate local DHKey check failed");
   1d716:	4810      	ldr	r0, [pc, #64]	; (1d758 <compute_and_send_central_dhcheck+0xec>)
   1d718:	2145      	movs	r1, #69	; 0x45
   1d71a:	e7d7      	b.n	1d6cc <compute_and_send_central_dhcheck+0x60>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   1d71c:	210d      	movs	r1, #13
   1d71e:	4620      	mov	r0, r4
   1d720:	f00f fb06 	bl	2cd30 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   1d724:	210d      	movs	r1, #13
   1d726:	f00f fb17 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!buf) {
   1d72a:	4606      	mov	r6, r0
   1d72c:	2800      	cmp	r0, #0
   1d72e:	d0da      	beq.n	1d6e6 <compute_and_send_central_dhcheck+0x7a>
   1d730:	2110      	movs	r1, #16
   1d732:	300c      	adds	r0, #12
   1d734:	f001 fc9a 	bl	1f06c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   1d738:	2210      	movs	r2, #16
   1d73a:	4639      	mov	r1, r7
   1d73c:	f00d fc5b 	bl	2aff6 <memcpy>
	smp_send(smp, buf, NULL, NULL);
   1d740:	4620      	mov	r0, r4
   1d742:	462a      	mov	r2, r5
   1d744:	4631      	mov	r1, r6
   1d746:	f00f fabe 	bl	2ccc6 <smp_send.constprop.0>
	return 0;
   1d74a:	4628      	mov	r0, r5
   1d74c:	e7cc      	b.n	1d6e8 <compute_and_send_central_dhcheck+0x7c>
   1d74e:	bf00      	nop
   1d750:	000321fd 	.word	0x000321fd
   1d754:	00031fed 	.word	0x00031fed
   1d758:	00032217 	.word	0x00032217

0001d75c <bt_smp_connected>:
{
   1d75c:	b538      	push	{r3, r4, r5, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
   1d75e:	490b      	ldr	r1, [pc, #44]	; (1d78c <bt_smp_connected+0x30>)
{
   1d760:	4604      	mov	r4, r0
	k_work_init_delayable(&smp->work, smp_timeout);
   1d762:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
   1d766:	3094      	adds	r0, #148	; 0x94
   1d768:	f007 fa46 	bl	24bf8 <k_work_init_delayable>
	smp_reset(smp);
   1d76c:	4628      	mov	r0, r5
   1d76e:	f00f fb46 	bl	2cdfe <smp_reset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d772:	f3bf 8f5b 	dmb	ish
   1d776:	4b06      	ldr	r3, [pc, #24]	; (1d790 <bt_smp_connected+0x34>)
   1d778:	34c4      	adds	r4, #196	; 0xc4
   1d77a:	e854 2f00 	ldrex	r2, [r4]
   1d77e:	e844 3100 	strex	r1, r3, [r4]
   1d782:	2900      	cmp	r1, #0
   1d784:	d1f9      	bne.n	1d77a <bt_smp_connected+0x1e>
   1d786:	f3bf 8f5b 	dmb	ish
}
   1d78a:	bd38      	pop	{r3, r4, r5, pc}
   1d78c:	0001e339 	.word	0x0001e339
   1d790:	20001e40 	.word	0x20001e40

0001d794 <smp_pairing_rsp>:
{
   1d794:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d798:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1d79a:	f8d0 70ec 	ldr.w	r7, [r0, #236]	; 0xec
{
   1d79e:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7a0:	f7ff fa60 	bl	1cc64 <latch_auth_cb>
	struct bt_smp_pairing *rsp = (void *)buf->data;
   1d7a4:	f8d5 800c 	ldr.w	r8, [r5, #12]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d7a8:	f898 3003 	ldrb.w	r3, [r8, #3]
   1d7ac:	3b07      	subs	r3, #7
   1d7ae:	2b09      	cmp	r3, #9
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d7b0:	4606      	mov	r6, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   1d7b2:	d903      	bls.n	1d7bc <smp_pairing_rsp+0x28>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1d7b4:	2006      	movs	r0, #6
}
   1d7b6:	b002      	add	sp, #8
   1d7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	smp->local_dist &= rsp->init_key_dist;
   1d7bc:	f898 2004 	ldrb.w	r2, [r8, #4]
   1d7c0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1d7c4:	4013      	ands	r3, r2
   1d7c6:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
   1d7ca:	f898 2005 	ldrb.w	r2, [r8, #5]
   1d7ce:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1d7d2:	4013      	ands	r3, r2
   1d7d4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   1d7d8:	2302      	movs	r3, #2
   1d7da:	7423      	strb	r3, [r4, #16]
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
   1d7dc:	2206      	movs	r2, #6
   1d7de:	4641      	mov	r1, r8
   1d7e0:	f104 0011 	add.w	r0, r4, #17
   1d7e4:	f00d fc07 	bl	2aff6 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d7e8:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d7ec:	071b      	lsls	r3, r3, #28
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d7ee:	f104 0504 	add.w	r5, r4, #4
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   1d7f2:	d506      	bpl.n	1d802 <smp_pairing_rsp+0x6e>
   1d7f4:	7b23      	ldrb	r3, [r4, #12]
   1d7f6:	0718      	lsls	r0, r3, #28
   1d7f8:	d503      	bpl.n	1d802 <smp_pairing_rsp+0x6e>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
   1d7fa:	2105      	movs	r1, #5
   1d7fc:	4628      	mov	r0, r5
   1d7fe:	f00f fa97 	bl	2cd30 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   1d802:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d806:	0699      	lsls	r1, r3, #26
   1d808:	d506      	bpl.n	1d818 <smp_pairing_rsp+0x84>
   1d80a:	7b23      	ldrb	r3, [r4, #12]
   1d80c:	069a      	lsls	r2, r3, #26
   1d80e:	d503      	bpl.n	1d818 <smp_pairing_rsp+0x84>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   1d810:	2114      	movs	r1, #20
   1d812:	4628      	mov	r0, r5
   1d814:	f00f fa8c 	bl	2cd30 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1d818:	f898 3002 	ldrb.w	r3, [r8, #2]
   1d81c:	07db      	lsls	r3, r3, #31
   1d81e:	d506      	bpl.n	1d82e <smp_pairing_rsp+0x9a>
   1d820:	7b23      	ldrb	r3, [r4, #12]
   1d822:	07d8      	lsls	r0, r3, #31
   1d824:	d503      	bpl.n	1d82e <smp_pairing_rsp+0x9a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   1d826:	210d      	movs	r1, #13
   1d828:	4628      	mov	r0, r5
   1d82a:	f00f fa81 	bl	2cd30 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d82e:	2105      	movs	r1, #5
   1d830:	4628      	mov	r0, r5
	smp->method = get_pair_method(smp, rsp->io_capability);
   1d832:	f898 8000 	ldrb.w	r8, [r8]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d836:	f00f fa0d 	bl	2cc54 <atomic_test_bit>
   1d83a:	bb40      	cbnz	r0, 1d88e <smp_pairing_rsp+0xfa>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d83c:	f1b8 0f04 	cmp.w	r8, #4
   1d840:	d845      	bhi.n	1d8ce <smp_pairing_rsp+0x13a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d842:	7ae3      	ldrb	r3, [r4, #11]
   1d844:	7ca2      	ldrb	r2, [r4, #18]
   1d846:	4013      	ands	r3, r2
   1d848:	07d9      	lsls	r1, r3, #31
   1d84a:	d43e      	bmi.n	1d8ca <smp_pairing_rsp+0x136>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d84c:	7b21      	ldrb	r1, [r4, #12]
   1d84e:	7ce3      	ldrb	r3, [r4, #19]
   1d850:	4319      	orrs	r1, r3
   1d852:	f011 0104 	ands.w	r1, r1, #4
   1d856:	d011      	beq.n	1d87c <smp_pairing_rsp+0xe8>
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   1d858:	4620      	mov	r0, r4
   1d85a:	f7ff fa21 	bl	1cca0 <get_io_capa>
   1d85e:	4b90      	ldr	r3, [pc, #576]	; (1daa0 <smp_pairing_rsp+0x30c>)
   1d860:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d864:	4498      	add	r8, r3
   1d866:	f818 1000 	ldrb.w	r1, [r8, r0]
	if (method == PASSKEY_ROLE) {
   1d86a:	2904      	cmp	r1, #4
   1d86c:	d106      	bne.n	1d87c <smp_pairing_rsp+0xe8>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1d86e:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d872:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_DISPLAY;
   1d874:	2b00      	cmp	r3, #0
   1d876:	bf14      	ite	ne
   1d878:	2101      	movne	r1, #1
   1d87a:	2102      	moveq	r1, #2
	smp->method = get_pair_method(smp, rsp->io_capability);
   1d87c:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   1d87e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
   1d882:	4620      	mov	r0, r4
   1d884:	f00f f9ef 	bl	2cc66 <update_keys_check>
   1d888:	bb18      	cbnz	r0, 1d8d2 <smp_pairing_rsp+0x13e>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   1d88a:	2003      	movs	r0, #3
   1d88c:	e793      	b.n	1d7b6 <smp_pairing_rsp+0x22>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   1d88e:	7b23      	ldrb	r3, [r4, #12]
   1d890:	7ce0      	ldrb	r0, [r4, #19]
   1d892:	ea03 0200 	and.w	r2, r3, r0
   1d896:	0712      	lsls	r2, r2, #28
   1d898:	d506      	bpl.n	1d8a8 <smp_pairing_rsp+0x114>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   1d89a:	7ae2      	ldrb	r2, [r4, #11]
   1d89c:	f894 c012 	ldrb.w	ip, [r4, #18]
   1d8a0:	ea42 020c 	orr.w	r2, r2, ip
   1d8a4:	07d2      	lsls	r2, r2, #31
   1d8a6:	d4e9      	bmi.n	1d87c <smp_pairing_rsp+0xe8>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   1d8a8:	f1b8 0f04 	cmp.w	r8, #4
   1d8ac:	d80f      	bhi.n	1d8ce <smp_pairing_rsp+0x13a>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   1d8ae:	ea43 0100 	orr.w	r1, r3, r0
   1d8b2:	f011 0104 	ands.w	r1, r1, #4
   1d8b6:	d0e1      	beq.n	1d87c <smp_pairing_rsp+0xe8>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   1d8b8:	4620      	mov	r0, r4
   1d8ba:	f7ff f9f1 	bl	1cca0 <get_io_capa>
   1d8be:	4b79      	ldr	r3, [pc, #484]	; (1daa4 <smp_pairing_rsp+0x310>)
   1d8c0:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1d8c4:	4443      	add	r3, r8
   1d8c6:	5c19      	ldrb	r1, [r3, r0]
   1d8c8:	e7d8      	b.n	1d87c <smp_pairing_rsp+0xe8>
		return LEGACY_OOB;
   1d8ca:	2106      	movs	r1, #6
   1d8cc:	e7d6      	b.n	1d87c <smp_pairing_rsp+0xe8>
		return JUST_WORKS;
   1d8ce:	2100      	movs	r1, #0
   1d8d0:	e7d4      	b.n	1d87c <smp_pairing_rsp+0xe8>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   1d8d2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1d8d6:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   1d8d8:	2b03      	cmp	r3, #3
   1d8da:	d015      	beq.n	1d908 <smp_pairing_rsp+0x174>
   1d8dc:	d804      	bhi.n	1d8e8 <smp_pairing_rsp+0x154>
   1d8de:	3b01      	subs	r3, #1
   1d8e0:	2b01      	cmp	r3, #1
   1d8e2:	d914      	bls.n	1d90e <smp_pairing_rsp+0x17a>
		return BT_SMP_ERR_UNSPECIFIED;
   1d8e4:	2008      	movs	r0, #8
   1d8e6:	e766      	b.n	1d7b6 <smp_pairing_rsp+0x22>
	switch (sec) {
   1d8e8:	2b04      	cmp	r3, #4
   1d8ea:	d1fb      	bne.n	1d8e4 <smp_pairing_rsp+0x150>
	return MIN(req->max_key_size, rsp->max_key_size);
   1d8ec:	7d23      	ldrb	r3, [r4, #20]
   1d8ee:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   1d8f0:	4293      	cmp	r3, r2
   1d8f2:	bf28      	it	cs
   1d8f4:	4613      	movcs	r3, r2
   1d8f6:	2b10      	cmp	r3, #16
   1d8f8:	f47f af5c 	bne.w	1d7b4 <smp_pairing_rsp+0x20>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d8fc:	2105      	movs	r1, #5
   1d8fe:	4628      	mov	r0, r5
   1d900:	f00f f9a8 	bl	2cc54 <atomic_test_bit>
   1d904:	2800      	cmp	r0, #0
   1d906:	d0c0      	beq.n	1d88a <smp_pairing_rsp+0xf6>
		if (smp->method == JUST_WORKS) {
   1d908:	7a23      	ldrb	r3, [r4, #8]
   1d90a:	2b00      	cmp	r3, #0
   1d90c:	d0bd      	beq.n	1d88a <smp_pairing_rsp+0xf6>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1d90e:	2105      	movs	r1, #5
   1d910:	4628      	mov	r0, r5
   1d912:	f00f f99f 	bl	2cc54 <atomic_test_bit>
   1d916:	2800      	cmp	r0, #0
   1d918:	f040 8098 	bne.w	1da4c <smp_pairing_rsp+0x2b8>
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d91c:	4620      	mov	r0, r4
   1d91e:	f7ff f9a1 	bl	1cc64 <latch_auth_cb>
   1d922:	4607      	mov	r7, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d924:	4620      	mov	r0, r4
	struct bt_conn *conn = smp->chan.chan.conn;
   1d926:	f8d4 80ec 	ldr.w	r8, [r4, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d92a:	f7ff f99b 	bl	1cc64 <latch_auth_cb>
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d92e:	f108 0190 	add.w	r1, r8, #144	; 0x90
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1d932:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   1d934:	f898 0008 	ldrb.w	r0, [r8, #8]
   1d938:	f000 feac 	bl	1e694 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   1d93c:	7a22      	ldrb	r2, [r4, #8]
   1d93e:	b140      	cbz	r0, 1d952 <smp_pairing_rsp+0x1be>
   1d940:	7b43      	ldrb	r3, [r0, #13]
   1d942:	07db      	lsls	r3, r3, #31
   1d944:	d505      	bpl.n	1d952 <smp_pairing_rsp+0x1be>
   1d946:	b922      	cbnz	r2, 1d952 <smp_pairing_rsp+0x1be>
		LOG_ERR("JustWorks failed, authenticated keys present");
   1d948:	4857      	ldr	r0, [pc, #348]	; (1daa8 <smp_pairing_rsp+0x314>)
   1d94a:	2145      	movs	r1, #69	; 0x45
   1d94c:	f00c fb8b 	bl	2a066 <z_log_minimal_printk>
	if (ret) {
   1d950:	e7c8      	b.n	1d8e4 <smp_pairing_rsp+0x150>
	switch (smp->method) {
   1d952:	2a06      	cmp	r2, #6
   1d954:	d85d      	bhi.n	1da12 <smp_pairing_rsp+0x27e>
   1d956:	e8df f002 	tbb	[pc, r2]
   1d95a:	5418      	.short	0x5418
   1d95c:	5c5c5c2d 	.word	0x5c5c5c2d
   1d960:	04          	.byte	0x04
   1d961:	00          	.byte	0x00
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   1d962:	2e00      	cmp	r6, #0
   1d964:	d05a      	beq.n	1da1c <smp_pairing_rsp+0x288>
   1d966:	68f3      	ldr	r3, [r6, #12]
   1d968:	2b00      	cmp	r3, #0
   1d96a:	d057      	beq.n	1da1c <smp_pairing_rsp+0x288>
			struct bt_conn_oob_info info = {
   1d96c:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d96e:	210a      	movs	r1, #10
   1d970:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
   1d972:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d976:	f00f f9db 	bl	2cd30 <atomic_set_bit>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   1d97a:	68f3      	ldr	r3, [r6, #12]
   1d97c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1d980:	a901      	add	r1, sp, #4
   1d982:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d984:	7a23      	ldrb	r3, [r4, #8]
   1d986:	2b00      	cmp	r3, #0
   1d988:	d14a      	bne.n	1da20 <smp_pairing_rsp+0x28c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d98a:	210f      	movs	r1, #15
   1d98c:	4628      	mov	r0, r5
   1d98e:	f00f f961 	bl	2cc54 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1d992:	2800      	cmp	r0, #0
   1d994:	d044      	beq.n	1da20 <smp_pairing_rsp+0x28c>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1d996:	2f00      	cmp	r7, #0
   1d998:	d042      	beq.n	1da20 <smp_pairing_rsp+0x28c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1d99a:	697b      	ldr	r3, [r7, #20]
   1d99c:	2b00      	cmp	r3, #0
   1d99e:	d03f      	beq.n	1da20 <smp_pairing_rsp+0x28c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1d9a0:	4628      	mov	r0, r5
   1d9a2:	210a      	movs	r1, #10
   1d9a4:	f00f f9c4 	bl	2cd30 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   1d9a8:	697b      	ldr	r3, [r7, #20]
   1d9aa:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		smp_auth_cb->pairing_confirm(conn);
   1d9ae:	4798      	blx	r3
		return 0;
   1d9b0:	2000      	movs	r0, #0
   1d9b2:	e700      	b.n	1d7b6 <smp_pairing_rsp+0x22>
			if (bt_rand(&passkey, sizeof(passkey))) {
   1d9b4:	2104      	movs	r1, #4
   1d9b6:	eb0d 0001 	add.w	r0, sp, r1
   1d9ba:	f004 fa1f 	bl	21dfc <bt_rand>
   1d9be:	2800      	cmp	r0, #0
   1d9c0:	d190      	bne.n	1d8e4 <smp_pairing_rsp+0x150>
			passkey %= 1000000;
   1d9c2:	9b01      	ldr	r3, [sp, #4]
   1d9c4:	4a39      	ldr	r2, [pc, #228]	; (1daac <smp_pairing_rsp+0x318>)
   1d9c6:	fbb3 f1f2 	udiv	r1, r3, r2
   1d9ca:	fb02 3311 	mls	r3, r2, r1, r3
   1d9ce:	9301      	str	r3, [sp, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   1d9d0:	b14e      	cbz	r6, 1d9e6 <smp_pairing_rsp+0x252>
   1d9d2:	6833      	ldr	r3, [r6, #0]
   1d9d4:	b13b      	cbz	r3, 1d9e6 <smp_pairing_rsp+0x252>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   1d9d6:	210b      	movs	r1, #11
   1d9d8:	4628      	mov	r0, r5
   1d9da:	f00f f9a9 	bl	2cd30 <atomic_set_bit>
			smp_auth_cb->passkey_display(conn, passkey);
   1d9de:	6833      	ldr	r3, [r6, #0]
   1d9e0:	9901      	ldr	r1, [sp, #4]
   1d9e2:	4640      	mov	r0, r8
   1d9e4:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   1d9e6:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
   1d9e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   1d9ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1d9f0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   1d9f2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   1d9f6:	0a1b      	lsrs	r3, r3, #8
   1d9f8:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
   1d9fc:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
   1da00:	e7c0      	b.n	1d984 <smp_pairing_rsp+0x1f0>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1da02:	4628      	mov	r0, r5
   1da04:	210a      	movs	r1, #10
   1da06:	f00f f993 	bl	2cd30 <atomic_set_bit>
		smp_auth_cb->passkey_entry(conn);
   1da0a:	6873      	ldr	r3, [r6, #4]
   1da0c:	4640      	mov	r0, r8
   1da0e:	4798      	blx	r3
	if (ret) {
   1da10:	e7b8      	b.n	1d984 <smp_pairing_rsp+0x1f0>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   1da12:	4827      	ldr	r0, [pc, #156]	; (1dab0 <smp_pairing_rsp+0x31c>)
   1da14:	2145      	movs	r1, #69	; 0x45
   1da16:	f00c fb26 	bl	2a066 <z_log_minimal_printk>
	if (ret) {
   1da1a:	e763      	b.n	1d8e4 <smp_pairing_rsp+0x150>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   1da1c:	2002      	movs	r0, #2
   1da1e:	e6ca      	b.n	1d7b6 <smp_pairing_rsp+0x22>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1da20:	210a      	movs	r1, #10
   1da22:	4628      	mov	r0, r5
   1da24:	f00f f916 	bl	2cc54 <atomic_test_bit>
   1da28:	b958      	cbnz	r0, 1da42 <smp_pairing_rsp+0x2ae>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   1da2a:	4620      	mov	r0, r4
   1da2c:	2103      	movs	r1, #3
   1da2e:	f00f f97f 	bl	2cd30 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1da32:	210e      	movs	r1, #14
   1da34:	f00f f97c 	bl	2cd30 <atomic_set_bit>
}
   1da38:	b002      	add	sp, #8
   1da3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   1da3e:	f00f ba60 	b.w	2cf02 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1da42:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1da44:	4628      	mov	r0, r5
   1da46:	f00f f973 	bl	2cd30 <atomic_set_bit>
		return 0;
   1da4a:	e7b1      	b.n	1d9b0 <smp_pairing_rsp+0x21c>
	smp->local_dist &= SEND_KEYS_SC;
   1da4c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   1da50:	f423 437d 	bic.w	r3, r3, #64768	; 0xfd00
   1da54:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1da58:	f8a4 30e8 	strh.w	r3, [r4, #232]	; 0xe8
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   1da5c:	7a23      	ldrb	r3, [r4, #8]
   1da5e:	b973      	cbnz	r3, 1da7e <smp_pairing_rsp+0x2ea>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1da60:	210f      	movs	r1, #15
   1da62:	4628      	mov	r0, r5
   1da64:	f00f f8f6 	bl	2cc54 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   1da68:	b148      	cbz	r0, 1da7e <smp_pairing_rsp+0x2ea>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1da6a:	b146      	cbz	r6, 1da7e <smp_pairing_rsp+0x2ea>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   1da6c:	6973      	ldr	r3, [r6, #20]
   1da6e:	b133      	cbz	r3, 1da7e <smp_pairing_rsp+0x2ea>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1da70:	4628      	mov	r0, r5
   1da72:	210a      	movs	r1, #10
   1da74:	f00f f95c 	bl	2cd30 <atomic_set_bit>
		smp_auth_cb->pairing_confirm(conn);
   1da78:	6973      	ldr	r3, [r6, #20]
   1da7a:	4638      	mov	r0, r7
   1da7c:	e797      	b.n	1d9ae <smp_pairing_rsp+0x21a>
	if (!sc_public_key) {
   1da7e:	4b0d      	ldr	r3, [pc, #52]	; (1dab4 <smp_pairing_rsp+0x320>)
   1da80:	681b      	ldr	r3, [r3, #0]
   1da82:	b90b      	cbnz	r3, 1da88 <smp_pairing_rsp+0x2f4>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   1da84:	2106      	movs	r1, #6
   1da86:	e7dd      	b.n	1da44 <smp_pairing_rsp+0x2b0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   1da88:	4620      	mov	r0, r4
   1da8a:	210c      	movs	r1, #12
   1da8c:	f00f f950 	bl	2cd30 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   1da90:	210b      	movs	r1, #11
   1da92:	f00f f909 	bl	2cca8 <atomic_clear_bit>
}
   1da96:	b002      	add	sp, #8
   1da98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   1da9c:	f7ff bdc4 	b.w	1d628 <sc_send_public_key>
   1daa0:	0003245d 	.word	0x0003245d
   1daa4:	00032444 	.word	0x00032444
   1daa8:	0003223f 	.word	0x0003223f
   1daac:	000f4240 	.word	0x000f4240
   1dab0:	00031fed 	.word	0x00031fed
   1dab4:	200032e8 	.word	0x200032e8

0001dab8 <smp_pairing_random>:
{
   1dab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1dabc:	b08c      	sub	sp, #48	; 0x30
   1dabe:	4604      	mov	r4, r0
   1dac0:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dac2:	f7ff f8cf 	bl	1cc64 <latch_auth_cb>
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dac6:	f104 0737 	add.w	r7, r4, #55	; 0x37
   1daca:	68e9      	ldr	r1, [r5, #12]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1dacc:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dace:	2210      	movs	r2, #16
   1dad0:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dad2:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   1dad4:	f00d fa8f 	bl	2aff6 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dad8:	2105      	movs	r1, #5
   1dada:	4630      	mov	r0, r6
   1dadc:	f00f f8ba 	bl	2cc54 <atomic_test_bit>
   1dae0:	f8d4 90ec 	ldr.w	r9, [r4, #236]	; 0xec
   1dae4:	2800      	cmp	r0, #0
   1dae6:	d159      	bne.n	1db9c <smp_pairing_random+0xe4>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1dae8:	f109 039e 	add.w	r3, r9, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1daec:	f104 0a47 	add.w	sl, r4, #71	; 0x47
   1daf0:	f10d 0820 	add.w	r8, sp, #32
   1daf4:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   1daf6:	f109 0397 	add.w	r3, r9, #151	; 0x97
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   1dafa:	9300      	str	r3, [sp, #0]
   1dafc:	f8cd 8008 	str.w	r8, [sp, #8]
   1db00:	f104 0310 	add.w	r3, r4, #16
   1db04:	f104 0209 	add.w	r2, r4, #9
   1db08:	4639      	mov	r1, r7
   1db0a:	4650      	mov	r0, sl
   1db0c:	f00f f99f 	bl	2ce4e <smp_c1>
	if (err) {
   1db10:	2800      	cmp	r0, #0
   1db12:	d137      	bne.n	1db84 <smp_pairing_random+0xcc>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1db14:	2210      	movs	r2, #16
   1db16:	4641      	mov	r1, r8
   1db18:	f104 0017 	add.w	r0, r4, #23
   1db1c:	f00d fa44 	bl	2afa8 <memcmp>
   1db20:	2800      	cmp	r0, #0
   1db22:	d168      	bne.n	1dbf6 <smp_pairing_random+0x13e>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1db24:	f899 5003 	ldrb.w	r5, [r9, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1db28:	bb9d      	cbnz	r5, 1db92 <smp_pairing_random+0xda>
	memcpy(out, r2, 8);
   1db2a:	2208      	movs	r2, #8
   1db2c:	f104 0127 	add.w	r1, r4, #39	; 0x27
   1db30:	4640      	mov	r0, r8
   1db32:	f00d fa60 	bl	2aff6 <memcpy>
	memcpy(out + 8, r1, 8);
   1db36:	4639      	mov	r1, r7
   1db38:	2208      	movs	r2, #8
   1db3a:	a80a      	add	r0, sp, #40	; 0x28
   1db3c:	f00d fa5b 	bl	2aff6 <memcpy>
	return bt_encrypt_le(k, out, out);
   1db40:	4642      	mov	r2, r8
   1db42:	4641      	mov	r1, r8
   1db44:	4650      	mov	r0, sl
   1db46:	f00f ff7a 	bl	2da3e <bt_encrypt_le>
		if (err) {
   1db4a:	4607      	mov	r7, r0
   1db4c:	b9d0      	cbnz	r0, 1db84 <smp_pairing_random+0xcc>
		(void)memset(ediv, 0, sizeof(ediv));
   1db4e:	4601      	mov	r1, r0
   1db50:	2202      	movs	r2, #2
   1db52:	a805      	add	r0, sp, #20
   1db54:	f00d fa5a 	bl	2b00c <memset>
		(void)memset(rand, 0, sizeof(rand));
   1db58:	2208      	movs	r2, #8
   1db5a:	4639      	mov	r1, r7
   1db5c:	a806      	add	r0, sp, #24
   1db5e:	f00d fa55 	bl	2b00c <memset>
	return MIN(req->max_key_size, rsp->max_key_size);
   1db62:	7d22      	ldrb	r2, [r4, #20]
   1db64:	7b63      	ldrb	r3, [r4, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   1db66:	429a      	cmp	r2, r3
   1db68:	bf94      	ite	ls
   1db6a:	9200      	strls	r2, [sp, #0]
   1db6c:	9300      	strhi	r3, [sp, #0]
   1db6e:	a906      	add	r1, sp, #24
   1db70:	4643      	mov	r3, r8
   1db72:	aa05      	add	r2, sp, #20
   1db74:	4648      	mov	r0, r9
   1db76:	f00d fcd6 	bl	2b526 <bt_conn_le_start_encryption>
   1db7a:	b128      	cbz	r0, 1db88 <smp_pairing_random+0xd0>
			LOG_ERR("Failed to start encryption");
   1db7c:	4846      	ldr	r0, [pc, #280]	; (1dc98 <smp_pairing_random+0x1e0>)
   1db7e:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("Calculate confirm failed");
   1db80:	f00c fa71 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_UNSPECIFIED;
   1db84:	2508      	movs	r5, #8
   1db86:	e005      	b.n	1db94 <smp_pairing_random+0xdc>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1db88:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1db8a:	4630      	mov	r0, r6
   1db8c:	f00f f8d0 	bl	2cd30 <atomic_set_bit>
			return 0;
   1db90:	e000      	b.n	1db94 <smp_pairing_random+0xdc>
	return 0;
   1db92:	4605      	mov	r5, r0
}
   1db94:	4628      	mov	r0, r5
   1db96:	b00c      	add	sp, #48	; 0x30
   1db98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1db9c:	f899 5003 	ldrb.w	r5, [r9, #3]
   1dba0:	2d00      	cmp	r5, #0
   1dba2:	d177      	bne.n	1dc94 <smp_pairing_random+0x1dc>
	switch (smp->method) {
   1dba4:	7a22      	ldrb	r2, [r4, #8]
   1dba6:	2a05      	cmp	r2, #5
   1dba8:	d862      	bhi.n	1dc70 <smp_pairing_random+0x1b8>
   1dbaa:	e8df f002 	tbb	[pc, r2]
   1dbae:	031b      	.short	0x031b
   1dbb0:	26611b03 	.word	0x26611b03
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   1dbb4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   1dbb8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   1dbbc:	40d3      	lsrs	r3, r2
   1dbbe:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   1dbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   1dbc6:	4935      	ldr	r1, [pc, #212]	; (1dc9c <smp_pairing_random+0x1e4>)
   1dbc8:	f10d 0920 	add.w	r9, sp, #32
   1dbcc:	f8cd 9000 	str.w	r9, [sp]
   1dbd0:	6809      	ldr	r1, [r1, #0]
   1dbd2:	463a      	mov	r2, r7
   1dbd4:	f104 0057 	add.w	r0, r4, #87	; 0x57
   1dbd8:	f00f fb8a 	bl	2d2f0 <bt_crypto_f4>
   1dbdc:	b120      	cbz	r0, 1dbe8 <smp_pairing_random+0x130>
		LOG_ERR("Calculate confirm failed");
   1dbde:	4830      	ldr	r0, [pc, #192]	; (1dca0 <smp_pairing_random+0x1e8>)
   1dbe0:	2145      	movs	r1, #69	; 0x45
   1dbe2:	e7cd      	b.n	1db80 <smp_pairing_random+0xc8>
	switch (smp->method) {
   1dbe4:	2300      	movs	r3, #0
   1dbe6:	e7ee      	b.n	1dbc6 <smp_pairing_random+0x10e>
	if (memcmp(smp->pcnf, cfm, 16)) {
   1dbe8:	2210      	movs	r2, #16
   1dbea:	4649      	mov	r1, r9
   1dbec:	f104 0017 	add.w	r0, r4, #23
   1dbf0:	f00d f9da 	bl	2afa8 <memcmp>
   1dbf4:	b108      	cbz	r0, 1dbfa <smp_pairing_random+0x142>
		return BT_SMP_ERR_CONFIRM_FAILED;
   1dbf6:	2504      	movs	r5, #4
   1dbf8:	e7cc      	b.n	1db94 <smp_pairing_random+0xdc>
		switch (smp->method) {
   1dbfa:	7a22      	ldrb	r2, [r4, #8]
   1dbfc:	2a05      	cmp	r2, #5
   1dbfe:	d837      	bhi.n	1dc70 <smp_pairing_random+0x1b8>
   1dc00:	e8df f002 	tbb	[pc, r2]
   1dc04:	031e1e3b 	.word	0x031e1e3b
   1dc08:	3b36      	.short	0x3b36
			if (bt_crypto_g2(sc_public_key, smp->pkey, smp->prnd, smp->rrnd,
   1dc0a:	ab08      	add	r3, sp, #32
   1dc0c:	4823      	ldr	r0, [pc, #140]	; (1dc9c <smp_pairing_random+0x1e4>)
   1dc0e:	9300      	str	r3, [sp, #0]
   1dc10:	6800      	ldr	r0, [r0, #0]
   1dc12:	463b      	mov	r3, r7
   1dc14:	f104 0227 	add.w	r2, r4, #39	; 0x27
   1dc18:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1dc1c:	f000 ff0a 	bl	1ea34 <bt_crypto_g2>
   1dc20:	2800      	cmp	r0, #0
   1dc22:	d1af      	bne.n	1db84 <smp_pairing_random+0xcc>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1dc24:	4630      	mov	r0, r6
   1dc26:	210a      	movs	r1, #10
   1dc28:	f00f f882 	bl	2cd30 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dc2c:	2109      	movs	r1, #9
   1dc2e:	f00f f87f 	bl	2cd30 <atomic_set_bit>
			smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   1dc32:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1dc36:	9908      	ldr	r1, [sp, #32]
   1dc38:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   1dc3c:	4798      	blx	r3
			return 0;
   1dc3e:	e7a9      	b.n	1db94 <smp_pairing_random+0xdc>
			smp->passkey_round++;
   1dc40:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1dc44:	3301      	adds	r3, #1
   1dc46:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   1dc48:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   1dc4a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   1dc4e:	d014      	beq.n	1dc7a <smp_pairing_random+0x1c2>
			if (bt_rand(smp->prnd, 16)) {
   1dc50:	2110      	movs	r1, #16
   1dc52:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1dc56:	f004 f8d1 	bl	21dfc <bt_rand>
   1dc5a:	2800      	cmp	r0, #0
   1dc5c:	d192      	bne.n	1db84 <smp_pairing_random+0xcc>
			atomic_set_bit(smp->allowed_cmds,
   1dc5e:	2103      	movs	r1, #3
   1dc60:	4620      	mov	r0, r4
   1dc62:	f00f f865 	bl	2cd30 <atomic_set_bit>
}
   1dc66:	b00c      	add	sp, #48	; 0x30
   1dc68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   1dc6c:	f7ff bbaa 	b.w	1d3c4 <smp_send_pairing_confirm>
			LOG_ERR("Unknown pairing method (%u)", smp->method);
   1dc70:	480c      	ldr	r0, [pc, #48]	; (1dca4 <smp_pairing_random+0x1ec>)
   1dc72:	2145      	movs	r1, #69	; 0x45
   1dc74:	f00c f9f7 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1dc78:	e784      	b.n	1db84 <smp_pairing_random+0xcc>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1dc7a:	2107      	movs	r1, #7
   1dc7c:	4630      	mov	r0, r6
   1dc7e:	f00e ffe9 	bl	2cc54 <atomic_test_bit>
   1dc82:	b108      	cbz	r0, 1dc88 <smp_pairing_random+0x1d0>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dc84:	2109      	movs	r1, #9
   1dc86:	e780      	b.n	1db8a <smp_pairing_random+0xd2>
		return compute_and_send_central_dhcheck(smp);
   1dc88:	4620      	mov	r0, r4
}
   1dc8a:	b00c      	add	sp, #48	; 0x30
   1dc8c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   1dc90:	f7ff bcec 	b.w	1d66c <compute_and_send_central_dhcheck>
	return BT_SMP_ERR_PAIRING_NOTSUPP;
   1dc94:	460d      	mov	r5, r1
   1dc96:	e77d      	b.n	1db94 <smp_pairing_random+0xdc>
   1dc98:	0003200e 	.word	0x0003200e
   1dc9c:	200032e8 	.word	0x200032e8
   1dca0:	00032271 	.word	0x00032271
   1dca4:	00031fed 	.word	0x00031fed

0001dca8 <smp_pairing_complete>:
{
   1dca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dcaa:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1dcac:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1dcb0:	1d04      	adds	r4, r0, #4
	if (!status) {
   1dcb2:	bb61      	cbnz	r1, 1dd0e <smp_pairing_complete+0x66>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1dcb4:	210d      	movs	r1, #13
   1dcb6:	4620      	mov	r0, r4
   1dcb8:	f00e ffcc 	bl	2cc54 <atomic_test_bit>
		if (bond_flag) {
   1dcbc:	4607      	mov	r7, r0
   1dcbe:	b118      	cbz	r0, 1dcc8 <smp_pairing_complete+0x20>
			bt_keys_store(conn->le.keys);
   1dcc0:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1dcc4:	f000 fdf0 	bl	1e8a8 <bt_keys_store>
	return list->head;
   1dcc8:	4b36      	ldr	r3, [pc, #216]	; (1dda4 <smp_pairing_complete+0xfc>)
   1dcca:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1dccc:	b19b      	cbz	r3, 1dcf6 <smp_pairing_complete+0x4e>
	return node->next;
   1dcce:	681c      	ldr	r4, [r3, #0]
   1dcd0:	b104      	cbz	r4, 1dcd4 <smp_pairing_complete+0x2c>
   1dcd2:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1dcd4:	f853 3c0c 	ldr.w	r3, [r3, #-12]
   1dcd8:	b113      	cbz	r3, 1dce0 <smp_pairing_complete+0x38>
				listener->pairing_complete(conn, bond_flag);
   1dcda:	4639      	mov	r1, r7
   1dcdc:	4628      	mov	r0, r5
   1dcde:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   1dce0:	b14c      	cbz	r4, 1dcf6 <smp_pairing_complete+0x4e>
   1dce2:	4623      	mov	r3, r4
   1dce4:	68e4      	ldr	r4, [r4, #12]
   1dce6:	681b      	ldr	r3, [r3, #0]
   1dce8:	b11c      	cbz	r4, 1dcf2 <smp_pairing_complete+0x4a>
   1dcea:	3c0c      	subs	r4, #12
			if (listener->pairing_complete) {
   1dcec:	2b00      	cmp	r3, #0
   1dcee:	d1f4      	bne.n	1dcda <smp_pairing_complete+0x32>
   1dcf0:	e7f7      	b.n	1dce2 <smp_pairing_complete+0x3a>
   1dcf2:	2b00      	cmp	r3, #0
   1dcf4:	d1f1      	bne.n	1dcda <smp_pairing_complete+0x32>
	smp_reset(smp);
   1dcf6:	4630      	mov	r0, r6
   1dcf8:	f00f f881 	bl	2cdfe <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   1dcfc:	7a6a      	ldrb	r2, [r5, #9]
   1dcfe:	7aab      	ldrb	r3, [r5, #10]
   1dd00:	429a      	cmp	r2, r3
   1dd02:	d04d      	beq.n	1dda0 <smp_pairing_complete+0xf8>
		bt_smp_start_security(conn);
   1dd04:	4628      	mov	r0, r5
}
   1dd06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   1dd0a:	f00f b9d8 	b.w	2d0be <bt_smp_start_security>
	switch (smp_err) {
   1dd0e:	3901      	subs	r1, #1
   1dd10:	b2c9      	uxtb	r1, r1
   1dd12:	290e      	cmp	r1, #14
   1dd14:	bf9c      	itt	ls
   1dd16:	4b24      	ldrls	r3, [pc, #144]	; (1dda8 <smp_pairing_complete+0x100>)
   1dd18:	5c5f      	ldrbls	r7, [r3, r1]
		if (conn->le.keys &&
   1dd1a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
	if (!status) {
   1dd1e:	bf88      	it	hi
   1dd20:	2709      	movhi	r7, #9
		if (conn->le.keys &&
   1dd22:	b143      	cbz	r3, 1dd36 <smp_pairing_complete+0x8e>
   1dd24:	7b1b      	ldrb	r3, [r3, #12]
   1dd26:	bb2b      	cbnz	r3, 1dd74 <smp_pairing_complete+0xcc>
			bt_keys_clear(conn->le.keys);
   1dd28:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
   1dd2c:	f000 fd0a 	bl	1e744 <bt_keys_clear>
			conn->le.keys = NULL;
   1dd30:	2300      	movs	r3, #0
   1dd32:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1dd36:	2102      	movs	r1, #2
   1dd38:	4620      	mov	r0, r4
   1dd3a:	f00e ff8b 	bl	2cc54 <atomic_test_bit>
   1dd3e:	b940      	cbnz	r0, 1dd52 <smp_pairing_complete+0xaa>
	switch (err) {
   1dd40:	2f07      	cmp	r7, #7
   1dd42:	bf96      	itet	ls
   1dd44:	4b19      	ldrls	r3, [pc, #100]	; (1ddac <smp_pairing_complete+0x104>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   1dd46:	211f      	movhi	r1, #31
   1dd48:	5dd9      	ldrbls	r1, [r3, r7]
			bt_conn_security_changed(conn,
   1dd4a:	463a      	mov	r2, r7
   1dd4c:	4628      	mov	r0, r5
   1dd4e:	f7fa feef 	bl	18b30 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1dd52:	2103      	movs	r1, #3
   1dd54:	4620      	mov	r0, r4
   1dd56:	f00e ff7d 	bl	2cc54 <atomic_test_bit>
   1dd5a:	2800      	cmp	r0, #0
   1dd5c:	d0cb      	beq.n	1dcf6 <smp_pairing_complete+0x4e>
	return list->head;
   1dd5e:	4b11      	ldr	r3, [pc, #68]	; (1dda4 <smp_pairing_complete+0xfc>)
   1dd60:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1dd62:	2b00      	cmp	r3, #0
   1dd64:	d0c7      	beq.n	1dcf6 <smp_pairing_complete+0x4e>
	return node->next;
   1dd66:	681c      	ldr	r4, [r3, #0]
   1dd68:	b104      	cbz	r4, 1dd6c <smp_pairing_complete+0xc4>
   1dd6a:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1dd6c:	f853 3c08 	ldr.w	r3, [r3, #-8]
   1dd70:	b94b      	cbnz	r3, 1dd86 <smp_pairing_complete+0xde>
   1dd72:	e00b      	b.n	1dd8c <smp_pairing_complete+0xe4>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1dd74:	2102      	movs	r1, #2
   1dd76:	4620      	mov	r0, r4
   1dd78:	f00e ff6c 	bl	2cc54 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   1dd7c:	2800      	cmp	r0, #0
   1dd7e:	d1d3      	bne.n	1dd28 <smp_pairing_complete+0x80>
   1dd80:	e7d9      	b.n	1dd36 <smp_pairing_complete+0x8e>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1dd82:	3c0c      	subs	r4, #12
				if (listener->pairing_failed) {
   1dd84:	b123      	cbz	r3, 1dd90 <smp_pairing_complete+0xe8>
					listener->pairing_failed(conn, security_err);
   1dd86:	4639      	mov	r1, r7
   1dd88:	4628      	mov	r0, r5
   1dd8a:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   1dd8c:	2c00      	cmp	r4, #0
   1dd8e:	d0b2      	beq.n	1dcf6 <smp_pairing_complete+0x4e>
   1dd90:	4623      	mov	r3, r4
   1dd92:	68e4      	ldr	r4, [r4, #12]
   1dd94:	685b      	ldr	r3, [r3, #4]
   1dd96:	2c00      	cmp	r4, #0
   1dd98:	d1f3      	bne.n	1dd82 <smp_pairing_complete+0xda>
				if (listener->pairing_failed) {
   1dd9a:	2b00      	cmp	r3, #0
   1dd9c:	d1f3      	bne.n	1dd86 <smp_pairing_complete+0xde>
   1dd9e:	e7aa      	b.n	1dcf6 <smp_pairing_complete+0x4e>
}
   1dda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dda2:	bf00      	nop
   1dda4:	20003184 	.word	0x20003184
   1dda8:	00032435 	.word	0x00032435
   1ddac:	00032424 	.word	0x00032424

0001ddb0 <smp_error>:
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1ddb0:	1d03      	adds	r3, r0, #4
{
   1ddb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ddb4:	4606      	mov	r6, r0
   1ddb6:	460f      	mov	r7, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   1ddb8:	4618      	mov	r0, r3
   1ddba:	2102      	movs	r1, #2
   1ddbc:	f00e ff4a 	bl	2cc54 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   1ddc0:	4604      	mov	r4, r0
   1ddc2:	b120      	cbz	r0, 1ddce <smp_error+0x1e>
   1ddc4:	f8b6 40e8 	ldrh.w	r4, [r6, #232]	; 0xe8
   1ddc8:	fab4 f484 	clz	r4, r4
   1ddcc:	0964      	lsrs	r4, r4, #5
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1ddce:	2103      	movs	r1, #3
   1ddd0:	4618      	mov	r0, r3
   1ddd2:	f00e ff3f 	bl	2cc54 <atomic_test_bit>
   1ddd6:	b180      	cbz	r0, 1ddfa <smp_error+0x4a>
		smp_pairing_complete(smp, reason);
   1ddd8:	4639      	mov	r1, r7
   1ddda:	4630      	mov	r0, r6
   1dddc:	f7ff ff64 	bl	1dca8 <smp_pairing_complete>
	if (remote_already_completed) {
   1dde0:	b1c4      	cbz	r4, 1de14 <smp_error+0x64>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   1dde2:	481a      	ldr	r0, [pc, #104]	; (1de4c <smp_error+0x9c>)
   1dde4:	2157      	movs	r1, #87	; 0x57
   1dde6:	f00c f93e 	bl	2a066 <z_log_minimal_printk>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   1ddea:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1ddee:	2105      	movs	r1, #5
   1ddf0:	f00d fc28 	bl	2b644 <bt_conn_disconnect>
		return 0;
   1ddf4:	2000      	movs	r0, #0
}
   1ddf6:	b003      	add	sp, #12
   1ddf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1ddfa:	2101      	movs	r1, #1
   1ddfc:	4618      	mov	r0, r3
   1ddfe:	f00e ff29 	bl	2cc54 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1de02:	2800      	cmp	r0, #0
   1de04:	d1e8      	bne.n	1ddd8 <smp_error+0x28>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1de06:	210f      	movs	r1, #15
   1de08:	4618      	mov	r0, r3
   1de0a:	f00e ff23 	bl	2cc54 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1de0e:	2800      	cmp	r0, #0
   1de10:	d1e2      	bne.n	1ddd8 <smp_error+0x28>
   1de12:	e7e5      	b.n	1dde0 <smp_error+0x30>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1de14:	2105      	movs	r1, #5
   1de16:	4630      	mov	r0, r6
   1de18:	f00e ff9e 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!buf) {
   1de1c:	4605      	mov	r5, r0
   1de1e:	b190      	cbz	r0, 1de46 <smp_error+0x96>
   1de20:	2101      	movs	r1, #1
   1de22:	300c      	adds	r0, #12
   1de24:	f001 f922 	bl	1f06c <net_buf_simple_add>
	rsp->reason = reason;
   1de28:	7007      	strb	r7, [r0, #0]
   1de2a:	9400      	str	r4, [sp, #0]
   1de2c:	f8d6 00ec 	ldr.w	r0, [r6, #236]	; 0xec
   1de30:	4623      	mov	r3, r4
   1de32:	462a      	mov	r2, r5
   1de34:	2106      	movs	r1, #6
   1de36:	f00d fcb3 	bl	2b7a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1de3a:	2800      	cmp	r0, #0
   1de3c:	d0da      	beq.n	1ddf4 <smp_error+0x44>
		net_buf_unref(buf);
   1de3e:	4628      	mov	r0, r5
   1de40:	f001 f80e 	bl	1ee60 <net_buf_unref>
   1de44:	e7d6      	b.n	1ddf4 <smp_error+0x44>
		return -ENOBUFS;
   1de46:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1de4a:	e7d4      	b.n	1ddf6 <smp_error+0x46>
   1de4c:	0003228f 	.word	0x0003228f

0001de50 <bt_smp_recv>:
{
   1de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1de52:	8a0b      	ldrh	r3, [r1, #16]
{
   1de54:	4607      	mov	r7, r0
   1de56:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1de58:	b92b      	cbnz	r3, 1de66 <bt_smp_recv+0x16>
		LOG_ERR("Too small SMP PDU received");
   1de5a:	4828      	ldr	r0, [pc, #160]	; (1defc <bt_smp_recv+0xac>)
   1de5c:	2145      	movs	r1, #69	; 0x45
   1de5e:	f00c f902 	bl	2a066 <z_log_minimal_printk>
}
   1de62:	2000      	movs	r0, #0
   1de64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1de66:	2101      	movs	r1, #1
   1de68:	f105 000c 	add.w	r0, r5, #12
   1de6c:	f001 f8e4 	bl	1f038 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1de70:	2104      	movs	r1, #4
   1de72:	4606      	mov	r6, r0
   1de74:	f1a7 00e8 	sub.w	r0, r7, #232	; 0xe8
   1de78:	f00e feec 	bl	2cc54 <atomic_test_bit>
   1de7c:	f1a7 04ec 	sub.w	r4, r7, #236	; 0xec
   1de80:	7832      	ldrb	r2, [r6, #0]
   1de82:	b120      	cbz	r0, 1de8e <bt_smp_recv+0x3e>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   1de84:	481e      	ldr	r0, [pc, #120]	; (1df00 <bt_smp_recv+0xb0>)
   1de86:	2157      	movs	r1, #87	; 0x57
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1de88:	f00c f8ed 	bl	2a066 <z_log_minimal_printk>
		return 0;
   1de8c:	e7e9      	b.n	1de62 <bt_smp_recv+0x12>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1de8e:	2a0e      	cmp	r2, #14
   1de90:	d902      	bls.n	1de98 <bt_smp_recv+0x48>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   1de92:	481c      	ldr	r0, [pc, #112]	; (1df04 <bt_smp_recv+0xb4>)
   1de94:	2157      	movs	r1, #87	; 0x57
   1de96:	e7f7      	b.n	1de88 <bt_smp_recv+0x38>
	if (!handlers[hdr->code].func) {
   1de98:	4f1b      	ldr	r7, [pc, #108]	; (1df08 <bt_smp_recv+0xb8>)
   1de9a:	f857 3032 	ldr.w	r3, [r7, r2, lsl #3]
   1de9e:	b943      	cbnz	r3, 1deb2 <bt_smp_recv+0x62>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   1dea0:	2157      	movs	r1, #87	; 0x57
   1dea2:	481a      	ldr	r0, [pc, #104]	; (1df0c <bt_smp_recv+0xbc>)
   1dea4:	f00c f8df 	bl	2a066 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1dea8:	2107      	movs	r1, #7
		smp_error(smp, err);
   1deaa:	4620      	mov	r0, r4
   1deac:	f7ff ff80 	bl	1ddb0 <smp_error>
   1deb0:	e7d7      	b.n	1de62 <bt_smp_recv+0x12>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   1deb2:	4611      	mov	r1, r2
   1deb4:	4620      	mov	r0, r4
   1deb6:	f00e ff25 	bl	2cd04 <atomic_test_and_clear_bit>
   1deba:	7833      	ldrb	r3, [r6, #0]
   1debc:	b948      	cbnz	r0, 1ded2 <bt_smp_recv+0x82>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   1debe:	461a      	mov	r2, r3
   1dec0:	4813      	ldr	r0, [pc, #76]	; (1df10 <bt_smp_recv+0xc0>)
   1dec2:	2157      	movs	r1, #87	; 0x57
   1dec4:	f00c f8cf 	bl	2a066 <z_log_minimal_printk>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   1dec8:	7833      	ldrb	r3, [r6, #0]
   1deca:	2b05      	cmp	r3, #5
   1decc:	d0c9      	beq.n	1de62 <bt_smp_recv+0x12>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1dece:	2108      	movs	r1, #8
   1ded0:	e7eb      	b.n	1deaa <bt_smp_recv+0x5a>
	if (buf->len != handlers[hdr->code].expect_len) {
   1ded2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1ded6:	8a2a      	ldrh	r2, [r5, #16]
   1ded8:	7909      	ldrb	r1, [r1, #4]
   1deda:	4291      	cmp	r1, r2
   1dedc:	d005      	beq.n	1deea <bt_smp_recv+0x9a>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1dede:	2145      	movs	r1, #69	; 0x45
   1dee0:	480c      	ldr	r0, [pc, #48]	; (1df14 <bt_smp_recv+0xc4>)
   1dee2:	f00c f8c0 	bl	2a066 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   1dee6:	210a      	movs	r1, #10
   1dee8:	e7df      	b.n	1deaa <bt_smp_recv+0x5a>
	err = handlers[hdr->code].func(smp, buf);
   1deea:	4629      	mov	r1, r5
   1deec:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
   1def0:	4620      	mov	r0, r4
   1def2:	4798      	blx	r3
	if (err) {
   1def4:	4601      	mov	r1, r0
   1def6:	2800      	cmp	r0, #0
   1def8:	d0b3      	beq.n	1de62 <bt_smp_recv+0x12>
   1defa:	e7d6      	b.n	1deaa <bt_smp_recv+0x5a>
   1defc:	000322ec 	.word	0x000322ec
   1df00:	0003230c 	.word	0x0003230c
   1df04:	00032342 	.word	0x00032342
   1df08:	0002ec2c 	.word	0x0002ec2c
   1df0c:	00032369 	.word	0x00032369
   1df10:	00032388 	.word	0x00032388
   1df14:	00031995 	.word	0x00031995

0001df18 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
   1df18:	4b17      	ldr	r3, [pc, #92]	; (1df78 <bt_smp_pkey_ready+0x60>)
{
   1df1a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
   1df1c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   1df1e:	b928      	cbnz	r0, 1df2c <bt_smp_pkey_ready+0x14>
}
   1df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_WRN("Public key not available");
   1df24:	4815      	ldr	r0, [pc, #84]	; (1df7c <bt_smp_pkey_ready+0x64>)
   1df26:	2157      	movs	r1, #87	; 0x57
   1df28:	f00c b89d 	b.w	2a066 <z_log_minimal_printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1df2c:	4c14      	ldr	r4, [pc, #80]	; (1df80 <bt_smp_pkey_ready+0x68>)
	z_impl_k_sem_give(sem);
   1df2e:	4815      	ldr	r0, [pc, #84]	; (1df84 <bt_smp_pkey_ready+0x6c>)
   1df30:	f006 fabc 	bl	244ac <z_impl_k_sem_give>
   1df34:	f3bf 8f5b 	dmb	ish
   1df38:	6823      	ldr	r3, [r4, #0]
   1df3a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1df3e:	065b      	lsls	r3, r3, #25
   1df40:	d518      	bpl.n	1df74 <bt_smp_pkey_ready+0x5c>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1df42:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1df46:	78db      	ldrb	r3, [r3, #3]
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1df48:	3c04      	subs	r4, #4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1df4a:	b99b      	cbnz	r3, 1df74 <bt_smp_pkey_ready+0x5c>
			err = sc_send_public_key(smp);
   1df4c:	4620      	mov	r0, r4
   1df4e:	f7ff fb6b 	bl	1d628 <sc_send_public_key>
			if (err) {
   1df52:	4601      	mov	r1, r0
   1df54:	b110      	cbz	r0, 1df5c <bt_smp_pkey_ready+0x44>
				smp_error(smp, err);
   1df56:	4620      	mov	r0, r4
   1df58:	f7ff ff2a 	bl	1ddb0 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df5c:	f3bf 8f5b 	dmb	ish
   1df60:	e854 3f00 	ldrex	r3, [r4]
   1df64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1df68:	e844 3200 	strex	r2, r3, [r4]
   1df6c:	2a00      	cmp	r2, #0
   1df6e:	d1f7      	bne.n	1df60 <bt_smp_pkey_ready+0x48>
   1df70:	f3bf 8f5b 	dmb	ish
}
   1df74:	bd10      	pop	{r4, pc}
   1df76:	bf00      	nop
   1df78:	200032e8 	.word	0x200032e8
   1df7c:	000323a8 	.word	0x000323a8
   1df80:	20001e44 	.word	0x20001e44
   1df84:	200009a4 	.word	0x200009a4

0001df88 <smp_ident_addr_info>:
{
   1df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1df8c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1df90:	68ce      	ldr	r6, [r1, #12]
	struct bt_conn *conn = smp->chan.chan.conn;
   1df92:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1df96:	f023 0302 	bic.w	r3, r3, #2
   1df9a:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1df9e:	7833      	ldrb	r3, [r6, #0]
{
   1dfa0:	4604      	mov	r4, r0
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1dfa2:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1dfa6:	b1bb      	cbz	r3, 1dfd8 <smp_ident_addr_info+0x50>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1dfa8:	79b3      	ldrb	r3, [r6, #6]
   1dfaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1dfae:	2bc0      	cmp	r3, #192	; 0xc0
   1dfb0:	d012      	beq.n	1dfd8 <smp_ident_addr_info+0x50>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   1dfb2:	4630      	mov	r0, r6
   1dfb4:	f7f7 fbb6 	bl	15724 <bt_addr_le_str>
   1dfb8:	2145      	movs	r1, #69	; 0x45
   1dfba:	4602      	mov	r2, r0
   1dfbc:	4844      	ldr	r0, [pc, #272]	; (1e0d0 <smp_ident_addr_info+0x148>)
   1dfbe:	f00c f852 	bl	2a066 <z_log_minimal_printk>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   1dfc2:	4640      	mov	r0, r8
   1dfc4:	f7f7 fbae 	bl	15724 <bt_addr_le_str>
   1dfc8:	2145      	movs	r1, #69	; 0x45
   1dfca:	4602      	mov	r2, r0
   1dfcc:	4841      	ldr	r0, [pc, #260]	; (1e0d4 <smp_ident_addr_info+0x14c>)
   1dfce:	f00c f84a 	bl	2a066 <z_log_minimal_printk>
		return BT_SMP_ERR_INVALID_PARAMS;
   1dfd2:	200a      	movs	r0, #10
}
   1dfd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   1dfd8:	2207      	movs	r2, #7
   1dfda:	4631      	mov	r1, r6
   1dfdc:	4640      	mov	r0, r8
   1dfde:	f00c ffe3 	bl	2afa8 <memcmp>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   1dfe2:	b168      	cbz	r0, 1e000 <smp_ident_addr_info+0x78>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   1dfe4:	7a28      	ldrb	r0, [r5, #8]
   1dfe6:	4631      	mov	r1, r6
   1dfe8:	f000 fb54 	bl	1e694 <bt_keys_find_addr>
		if (keys) {
   1dfec:	4607      	mov	r7, r0
   1dfee:	b138      	cbz	r0, 1e000 <smp_ident_addr_info+0x78>
			if (!update_keys_check(smp, keys)) {
   1dff0:	4601      	mov	r1, r0
   1dff2:	4620      	mov	r0, r4
   1dff4:	f00e fe37 	bl	2cc66 <update_keys_check>
   1dff8:	b338      	cbz	r0, 1e04a <smp_ident_addr_info+0xc2>
			bt_keys_clear(keys);
   1dffa:	4638      	mov	r0, r7
   1dffc:	f000 fba2 	bl	1e744 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e000:	210d      	movs	r1, #13
   1e002:	1d20      	adds	r0, r4, #4
   1e004:	f00e fe26 	bl	2cc54 <atomic_test_bit>
   1e008:	b980      	cbnz	r0, 1e02c <smp_ident_addr_info+0xa4>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e00a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e00e:	075b      	lsls	r3, r3, #29
   1e010:	d503      	bpl.n	1e01a <smp_ident_addr_info+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e012:	210a      	movs	r1, #10
   1e014:	4620      	mov	r0, r4
   1e016:	f00e fe8b 	bl	2cd30 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e01a:	78eb      	ldrb	r3, [r5, #3]
   1e01c:	2b00      	cmp	r3, #0
   1e01e:	d049      	beq.n	1e0b4 <smp_ident_addr_info+0x12c>
	if (!smp->local_dist && !smp->remote_dist) {
   1e020:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e024:	2900      	cmp	r1, #0
   1e026:	d04f      	beq.n	1e0c8 <smp_ident_addr_info+0x140>
	return 0;
   1e028:	2000      	movs	r0, #0
   1e02a:	e7d3      	b.n	1dfd4 <smp_ident_addr_info+0x4c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e02c:	7a29      	ldrb	r1, [r5, #8]
   1e02e:	4642      	mov	r2, r8
   1e030:	2002      	movs	r0, #2
   1e032:	f000 fb65 	bl	1e700 <bt_keys_get_type>
		if (!keys) {
   1e036:	4607      	mov	r7, r0
   1e038:	b948      	cbnz	r0, 1e04e <smp_ident_addr_info+0xc6>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e03a:	4640      	mov	r0, r8
   1e03c:	f7f7 fb72 	bl	15724 <bt_addr_le_str>
   1e040:	2145      	movs	r1, #69	; 0x45
   1e042:	4602      	mov	r2, r0
   1e044:	4824      	ldr	r0, [pc, #144]	; (1e0d8 <smp_ident_addr_info+0x150>)
   1e046:	f00c f80e 	bl	2a066 <z_log_minimal_printk>
				return BT_SMP_ERR_UNSPECIFIED;
   1e04a:	2008      	movs	r0, #8
   1e04c:	e7c2      	b.n	1dfd4 <smp_ident_addr_info+0x4c>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e04e:	78eb      	ldrb	r3, [r5, #3]
   1e050:	bb6b      	cbnz	r3, 1e0ae <smp_ident_addr_info+0x126>
			dst = &conn->le.resp_addr;
   1e052:	f105 019e 	add.w	r1, r5, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e056:	780b      	ldrb	r3, [r1, #0]
   1e058:	2b01      	cmp	r3, #1
   1e05a:	d120      	bne.n	1e09e <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
   1e05c:	798b      	ldrb	r3, [r1, #6]
   1e05e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e062:	2b40      	cmp	r3, #64	; 0x40
   1e064:	d11b      	bne.n	1e09e <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1e066:	2206      	movs	r2, #6
   1e068:	3101      	adds	r1, #1
   1e06a:	f107 003a 	add.w	r0, r7, #58	; 0x3a
   1e06e:	f00c ffc2 	bl	2aff6 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e072:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   1e076:	b193      	cbz	r3, 1e09e <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1e078:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
   1e07c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e080:	2bc0      	cmp	r3, #192	; 0xc0
   1e082:	d00c      	beq.n	1e09e <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
   1e084:	2207      	movs	r2, #7
   1e086:	4631      	mov	r1, r6
   1e088:	1c78      	adds	r0, r7, #1
   1e08a:	f00c ffb4 	bl	2aff6 <memcpy>
   1e08e:	2207      	movs	r2, #7
   1e090:	4631      	mov	r1, r6
   1e092:	4640      	mov	r0, r8
   1e094:	f00c ffaf 	bl	2aff6 <memcpy>
				bt_conn_identity_resolved(conn);
   1e098:	4628      	mov	r0, r5
   1e09a:	f7fa fd0b 	bl	18ab4 <bt_conn_identity_resolved>
		err = smp_id_add_replace(smp, keys);
   1e09e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   1e0a2:	4639      	mov	r1, r7
   1e0a4:	f7fe fe4e 	bl	1cd44 <smp_id_add_replace.isra.0>
		if (err) {
   1e0a8:	2800      	cmp	r0, #0
   1e0aa:	d0ae      	beq.n	1e00a <smp_ident_addr_info+0x82>
   1e0ac:	e792      	b.n	1dfd4 <smp_ident_addr_info+0x4c>
			dst = &conn->le.init_addr;
   1e0ae:	f105 0197 	add.w	r1, r5, #151	; 0x97
   1e0b2:	e7d0      	b.n	1e056 <smp_ident_addr_info+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1e0b4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e0b8:	2b00      	cmp	r3, #0
   1e0ba:	d1b1      	bne.n	1e020 <smp_ident_addr_info+0x98>
		err = bt_smp_distribute_keys(smp);
   1e0bc:	4620      	mov	r0, r4
   1e0be:	f7fe ff57 	bl	1cf70 <bt_smp_distribute_keys>
		if (err) {
   1e0c2:	2800      	cmp	r0, #0
   1e0c4:	d0ac      	beq.n	1e020 <smp_ident_addr_info+0x98>
   1e0c6:	e785      	b.n	1dfd4 <smp_ident_addr_info+0x4c>
		smp_pairing_complete(smp, 0);
   1e0c8:	4620      	mov	r0, r4
   1e0ca:	f7ff fded 	bl	1dca8 <smp_pairing_complete>
   1e0ce:	e7ab      	b.n	1e028 <smp_ident_addr_info+0xa0>
   1e0d0:	000323c6 	.word	0x000323c6
   1e0d4:	000323df 	.word	0x000323df
   1e0d8:	0003204c 	.word	0x0003204c

0001e0dc <smp_check_complete>:
{
   1e0dc:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   1e0de:	7883      	ldrb	r3, [r0, #2]
   1e0e0:	2b01      	cmp	r3, #1
{
   1e0e2:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   1e0e4:	d11c      	bne.n	1e120 <smp_check_complete+0x44>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1e0e6:	2106      	movs	r1, #6
   1e0e8:	f00d fb91 	bl	2b80e <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   1e0ec:	b950      	cbnz	r0, 1e104 <smp_check_complete+0x28>
   1e0ee:	490d      	ldr	r1, [pc, #52]	; (1e124 <smp_check_complete+0x48>)
   1e0f0:	480d      	ldr	r0, [pc, #52]	; (1e128 <smp_check_complete+0x4c>)
   1e0f2:	f240 2265 	movw	r2, #613	; 0x265
   1e0f6:	f00b ffa8 	bl	2a04a <assert_print>
   1e0fa:	480a      	ldr	r0, [pc, #40]	; (1e124 <smp_check_complete+0x48>)
   1e0fc:	f240 2165 	movw	r1, #613	; 0x265
   1e100:	f00b ff9c 	bl	2a03c <assert_post_action>
		smp->local_dist &= ~dist_complete;
   1e104:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1e108:	ea23 0104 	bic.w	r1, r3, r4
   1e10c:	f800 1c04 	strb.w	r1, [r0, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   1e110:	f830 1c04 	ldrh.w	r1, [r0, #-4]
   1e114:	b921      	cbnz	r1, 1e120 <smp_check_complete+0x44>
}
   1e116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1e11a:	38ec      	subs	r0, #236	; 0xec
   1e11c:	f7ff bdc4 	b.w	1dca8 <smp_pairing_complete>
}
   1e120:	bd10      	pop	{r4, pc}
   1e122:	bf00      	nop
   1e124:	00031f7e 	.word	0x00031f7e
   1e128:	0002f2b5 	.word	0x0002f2b5

0001e12c <smp_central_ident>:
{
   1e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e130:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   1e132:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
{
   1e136:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e138:	210d      	movs	r1, #13
   1e13a:	3004      	adds	r0, #4
   1e13c:	f00e fd8a 	bl	2cc54 <atomic_test_bit>
   1e140:	b1f8      	cbz	r0, 1e182 <smp_central_ident+0x56>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e142:	f106 0890 	add.w	r8, r6, #144	; 0x90
   1e146:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   1e148:	68df      	ldr	r7, [r3, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1e14a:	4642      	mov	r2, r8
   1e14c:	2004      	movs	r0, #4
   1e14e:	f000 fad7 	bl	1e700 <bt_keys_get_type>
		if (!keys) {
   1e152:	4605      	mov	r5, r0
   1e154:	b950      	cbnz	r0, 1e16c <smp_central_ident+0x40>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e156:	4640      	mov	r0, r8
   1e158:	f7f7 fae4 	bl	15724 <bt_addr_le_str>
   1e15c:	2145      	movs	r1, #69	; 0x45
   1e15e:	4602      	mov	r2, r0
   1e160:	481a      	ldr	r0, [pc, #104]	; (1e1cc <smp_central_ident+0xa0>)
   1e162:	f00b ff80 	bl	2a066 <z_log_minimal_printk>
			return BT_SMP_ERR_UNSPECIFIED;
   1e166:	2008      	movs	r0, #8
}
   1e168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1e16c:	2202      	movs	r2, #2
   1e16e:	4639      	mov	r1, r7
   1e170:	3018      	adds	r0, #24
   1e172:	f00c ff40 	bl	2aff6 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1e176:	2208      	movs	r2, #8
   1e178:	1cb9      	adds	r1, r7, #2
   1e17a:	f105 0010 	add.w	r0, r5, #16
   1e17e:	f00c ff3a 	bl	2aff6 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1e182:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e186:	f023 0201 	bic.w	r2, r3, #1
   1e18a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e18e:	079a      	lsls	r2, r3, #30
   1e190:	d50a      	bpl.n	1e1a8 <smp_central_ident+0x7c>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e192:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e194:	4620      	mov	r0, r4
   1e196:	f00e fdcb 	bl	2cd30 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e19a:	78f3      	ldrb	r3, [r6, #3]
   1e19c:	b143      	cbz	r3, 1e1b0 <smp_central_ident+0x84>
	if (!smp->local_dist && !smp->remote_dist) {
   1e19e:	f8b4 10e8 	ldrh.w	r1, [r4, #232]	; 0xe8
   1e1a2:	b179      	cbz	r1, 1e1c4 <smp_central_ident+0x98>
	return 0;
   1e1a4:	2000      	movs	r0, #0
   1e1a6:	e7df      	b.n	1e168 <smp_central_ident+0x3c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e1a8:	075b      	lsls	r3, r3, #29
   1e1aa:	d5f6      	bpl.n	1e19a <smp_central_ident+0x6e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e1ac:	210a      	movs	r1, #10
   1e1ae:	e7f1      	b.n	1e194 <smp_central_ident+0x68>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   1e1b0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1e1b4:	2b00      	cmp	r3, #0
   1e1b6:	d1f2      	bne.n	1e19e <smp_central_ident+0x72>
		err = bt_smp_distribute_keys(smp);
   1e1b8:	4620      	mov	r0, r4
   1e1ba:	f7fe fed9 	bl	1cf70 <bt_smp_distribute_keys>
		if (err) {
   1e1be:	2800      	cmp	r0, #0
   1e1c0:	d0ed      	beq.n	1e19e <smp_central_ident+0x72>
   1e1c2:	e7d1      	b.n	1e168 <smp_central_ident+0x3c>
		smp_pairing_complete(smp, 0);
   1e1c4:	4620      	mov	r0, r4
   1e1c6:	f7ff fd6f 	bl	1dca8 <smp_pairing_complete>
   1e1ca:	e7eb      	b.n	1e1a4 <smp_central_ident+0x78>
   1e1cc:	0003204c 	.word	0x0003204c

0001e1d0 <smp_pairing_failed>:
{
   1e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1d4:	460e      	mov	r6, r1
   1e1d6:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1e1d8:	f8d0 80ec 	ldr.w	r8, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e1dc:	f7fe fd42 	bl	1cc64 <latch_auth_cb>
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   1e1e0:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e1e2:	2145      	movs	r1, #69	; 0x45
   1e1e4:	7832      	ldrb	r2, [r6, #0]
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   1e1e6:	4605      	mov	r5, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e1e8:	1d27      	adds	r7, r4, #4
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   1e1ea:	480e      	ldr	r0, [pc, #56]	; (1e224 <smp_pairing_failed+0x54>)
   1e1ec:	f00b ff3b 	bl	2a066 <z_log_minimal_printk>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e1f0:	210a      	movs	r1, #10
   1e1f2:	4638      	mov	r0, r7
   1e1f4:	f00e fd86 	bl	2cd04 <atomic_test_and_clear_bit>
   1e1f8:	b138      	cbz	r0, 1e20a <smp_pairing_failed+0x3a>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e1fa:	b96d      	cbnz	r5, 1e218 <smp_pairing_failed+0x48>
	smp_pairing_complete(smp, req->reason);
   1e1fc:	4620      	mov	r0, r4
   1e1fe:	7831      	ldrb	r1, [r6, #0]
   1e200:	f7ff fd52 	bl	1dca8 <smp_pairing_complete>
}
   1e204:	2000      	movs	r0, #0
   1e206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   1e20a:	210b      	movs	r1, #11
   1e20c:	4638      	mov	r0, r7
   1e20e:	f00e fd79 	bl	2cd04 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   1e212:	2800      	cmp	r0, #0
   1e214:	d1f1      	bne.n	1e1fa <smp_pairing_failed+0x2a>
   1e216:	e7f1      	b.n	1e1fc <smp_pairing_failed+0x2c>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   1e218:	692b      	ldr	r3, [r5, #16]
   1e21a:	2b00      	cmp	r3, #0
   1e21c:	d0ee      	beq.n	1e1fc <smp_pairing_failed+0x2c>
			smp_auth_cb->cancel(conn);
   1e21e:	4640      	mov	r0, r8
   1e220:	4798      	blx	r3
   1e222:	e7eb      	b.n	1e1fc <smp_pairing_failed+0x2c>
   1e224:	000323ec 	.word	0x000323ec

0001e228 <bt_smp_encrypt_change>:
{
   1e228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   1e22c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e22e:	f1a0 06e8 	sub.w	r6, r0, #232	; 0xe8
{
   1e232:	4604      	mov	r4, r0
   1e234:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e236:	4630      	mov	r0, r6
   1e238:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1e23a:	f855 89ec 	ldr.w	r8, [r5], #-236
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e23e:	f00e fd61 	bl	2cd04 <atomic_test_and_clear_bit>
   1e242:	2800      	cmp	r0, #0
   1e244:	d06c      	beq.n	1e320 <bt_smp_encrypt_change+0xf8>
	if (hci_status) {
   1e246:	b1cf      	cbz	r7, 1e27c <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e248:	2103      	movs	r1, #3
   1e24a:	4630      	mov	r0, r6
   1e24c:	f00e fd02 	bl	2cc54 <atomic_test_bit>
   1e250:	2800      	cmp	r0, #0
   1e252:	d065      	beq.n	1e320 <bt_smp_encrypt_change+0xf8>
			uint8_t smp_err = smp_err_get(
   1e254:	4638      	mov	r0, r7
   1e256:	f7f8 fabd 	bl	167d4 <bt_security_err_get>
	switch (auth_err) {
   1e25a:	3801      	subs	r0, #1
   1e25c:	b2c0      	uxtb	r0, r0
   1e25e:	2808      	cmp	r0, #8
   1e260:	bf9a      	itte	ls
   1e262:	4b34      	ldrls	r3, [pc, #208]	; (1e334 <bt_smp_encrypt_change+0x10c>)
   1e264:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1e266:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e268:	2102      	movs	r1, #2
   1e26a:	4630      	mov	r0, r6
   1e26c:	f00e fd60 	bl	2cd30 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   1e270:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   1e272:	4628      	mov	r0, r5
}
   1e274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1e278:	f7ff bd16 	b.w	1dca8 <smp_pairing_complete>
	if (!conn->encrypt) {
   1e27c:	f898 300b 	ldrb.w	r3, [r8, #11]
   1e280:	2b00      	cmp	r3, #0
   1e282:	d04d      	beq.n	1e320 <bt_smp_encrypt_change+0xf8>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e284:	2103      	movs	r1, #3
   1e286:	4630      	mov	r0, r6
   1e288:	f00e fce4 	bl	2cc54 <atomic_test_bit>
   1e28c:	b920      	cbnz	r0, 1e298 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   1e28e:	4628      	mov	r0, r5
}
   1e290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   1e294:	f00e bdb3 	b.w	2cdfe <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e298:	2105      	movs	r1, #5
   1e29a:	4630      	mov	r0, r6
   1e29c:	f00e fcda 	bl	2cc54 <atomic_test_bit>
   1e2a0:	b1b8      	cbz	r0, 1e2d2 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   1e2a2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e2a6:	071b      	lsls	r3, r3, #28
   1e2a8:	d507      	bpl.n	1e2ba <bt_smp_encrypt_change+0x92>
   1e2aa:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e2ae:	071f      	lsls	r7, r3, #28
   1e2b0:	d503      	bpl.n	1e2ba <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   1e2b2:	2111      	movs	r1, #17
   1e2b4:	4630      	mov	r0, r6
   1e2b6:	f00e fd3b 	bl	2cd30 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e2ba:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   1e2be:	f023 0308 	bic.w	r3, r3, #8
   1e2c2:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   1e2c6:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e2ca:	f023 0308 	bic.w	r3, r3, #8
   1e2ce:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   1e2d2:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e2d6:	07d8      	lsls	r0, r3, #31
   1e2d8:	d524      	bpl.n	1e324 <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   1e2da:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e2dc:	4628      	mov	r0, r5
   1e2de:	f00e fd27 	bl	2cd30 <atomic_set_bit>
	    !(smp->remote_dist & BT_SMP_DIST_ID_KEY)) {
   1e2e2:	f814 0c03 	ldrb.w	r0, [r4, #-3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e2e6:	0783      	lsls	r3, r0, #30
   1e2e8:	d408      	bmi.n	1e2fc <bt_smp_encrypt_change+0xd4>
		smp_err = smp_id_add_replace(smp, conn->le.keys);
   1e2ea:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
   1e2ee:	f7fe fd29 	bl	1cd44 <smp_id_add_replace.isra.0>
		if (smp_err) {
   1e2f2:	4601      	mov	r1, r0
   1e2f4:	b110      	cbz	r0, 1e2fc <bt_smp_encrypt_change+0xd4>
			smp_pairing_complete(smp, smp_err);
   1e2f6:	4628      	mov	r0, r5
   1e2f8:	f7ff fcd6 	bl	1dca8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1e2fc:	2102      	movs	r1, #2
   1e2fe:	4630      	mov	r0, r6
   1e300:	f00e fd16 	bl	2cd30 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1e304:	f898 3003 	ldrb.w	r3, [r8, #3]
   1e308:	b913      	cbnz	r3, 1e310 <bt_smp_encrypt_change+0xe8>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   1e30a:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   1e30e:	b93b      	cbnz	r3, 1e320 <bt_smp_encrypt_change+0xf8>
	if (bt_smp_distribute_keys(smp)) {
   1e310:	4628      	mov	r0, r5
   1e312:	f7fe fe2d 	bl	1cf70 <bt_smp_distribute_keys>
   1e316:	b918      	cbnz	r0, 1e320 <bt_smp_encrypt_change+0xf8>
	if (!smp->local_dist && !smp->remote_dist) {
   1e318:	f834 1c04 	ldrh.w	r1, [r4, #-4]
   1e31c:	2900      	cmp	r1, #0
   1e31e:	d0a8      	beq.n	1e272 <bt_smp_encrypt_change+0x4a>
}
   1e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1e324:	0799      	lsls	r1, r3, #30
   1e326:	d501      	bpl.n	1e32c <bt_smp_encrypt_change+0x104>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1e328:	2108      	movs	r1, #8
   1e32a:	e7d7      	b.n	1e2dc <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e32c:	075a      	lsls	r2, r3, #29
   1e32e:	d5d8      	bpl.n	1e2e2 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e330:	210a      	movs	r1, #10
   1e332:	e7d3      	b.n	1e2dc <bt_smp_encrypt_change+0xb4>
   1e334:	0003242c 	.word	0x0003242c

0001e338 <smp_timeout>:
{
   1e338:	b510      	push	{r4, lr}
	LOG_ERR("SMP Timeout");
   1e33a:	2145      	movs	r1, #69	; 0x45
{
   1e33c:	4604      	mov	r4, r0
	LOG_ERR("SMP Timeout");
   1e33e:	4807      	ldr	r0, [pc, #28]	; (1e35c <smp_timeout+0x24>)
   1e340:	f00b fe91 	bl	2a066 <z_log_minimal_printk>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1e344:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
   1e348:	2108      	movs	r1, #8
   1e34a:	f7ff fcad 	bl	1dca8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e34e:	f5a4 70be 	sub.w	r0, r4, #380	; 0x17c
   1e352:	2104      	movs	r1, #4
}
   1e354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1e358:	f00e bcea 	b.w	2cd30 <atomic_set_bit>
   1e35c:	00032413 	.word	0x00032413

0001e360 <bt_smp_update_keys>:
{
   1e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e362:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1e364:	f7fe fcc2 	bl	1ccec <smp_chan_get>
	if (!smp) {
   1e368:	4605      	mov	r5, r0
   1e36a:	2800      	cmp	r0, #0
   1e36c:	f000 8084 	beq.w	1e478 <bt_smp_update_keys+0x118>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e370:	1d06      	adds	r6, r0, #4
   1e372:	2103      	movs	r1, #3
   1e374:	4630      	mov	r0, r6
   1e376:	f00e fc6d 	bl	2cc54 <atomic_test_bit>
   1e37a:	2800      	cmp	r0, #0
   1e37c:	d07c      	beq.n	1e478 <bt_smp_update_keys+0x118>
	if (conn->le.keys) {
   1e37e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e382:	b108      	cbz	r0, 1e388 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1e384:	f000 f9de 	bl	1e744 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e388:	f104 0790 	add.w	r7, r4, #144	; 0x90
   1e38c:	7a20      	ldrb	r0, [r4, #8]
   1e38e:	4639      	mov	r1, r7
   1e390:	f000 f8c8 	bl	1e524 <bt_keys_get_addr>
   1e394:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys) {
   1e398:	b968      	cbnz	r0, 1e3b6 <bt_smp_update_keys+0x56>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   1e39a:	4638      	mov	r0, r7
   1e39c:	f7f7 f9c2 	bl	15724 <bt_addr_le_str>
   1e3a0:	2145      	movs	r1, #69	; 0x45
   1e3a2:	4602      	mov	r2, r0
   1e3a4:	4835      	ldr	r0, [pc, #212]	; (1e47c <bt_smp_update_keys+0x11c>)
   1e3a6:	f00b fe5e 	bl	2a066 <z_log_minimal_printk>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e3aa:	4628      	mov	r0, r5
   1e3ac:	2108      	movs	r1, #8
}
   1e3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e3b2:	f7ff bcfd 	b.w	1ddb0 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1e3b6:	210e      	movs	r1, #14
   1e3b8:	4630      	mov	r0, r6
   1e3ba:	f00e fc4b 	bl	2cc54 <atomic_test_bit>
   1e3be:	b128      	cbz	r0, 1e3cc <bt_smp_update_keys+0x6c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1e3c0:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e3c4:	7b53      	ldrb	r3, [r2, #13]
   1e3c6:	f043 0302 	orr.w	r3, r3, #2
   1e3ca:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1e3cc:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e3ce:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
	switch (smp->method) {
   1e3d2:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e3d4:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   1e3d6:	d83c      	bhi.n	1e452 <bt_smp_update_keys+0xf2>
   1e3d8:	2a00      	cmp	r2, #0
   1e3da:	d041      	beq.n	1e460 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1e3dc:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e3e0:	7b53      	ldrb	r3, [r2, #13]
   1e3e2:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e3e6:	7353      	strb	r3, [r2, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1e3e8:	7d2b      	ldrb	r3, [r5, #20]
   1e3ea:	7b69      	ldrb	r1, [r5, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e3ec:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
	return MIN(req->max_key_size, rsp->max_key_size);
   1e3f0:	428b      	cmp	r3, r1
   1e3f2:	bf28      	it	cs
   1e3f4:	460b      	movcs	r3, r1
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e3f6:	7313      	strb	r3, [r2, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e3f8:	2105      	movs	r1, #5
   1e3fa:	4630      	mov	r0, r6
   1e3fc:	f00e fc2a 	bl	2cc54 <atomic_test_bit>
   1e400:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
		conn->le.keys->flags |= BT_KEYS_SC;
   1e404:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e406:	b3a0      	cbz	r0, 1e472 <bt_smp_update_keys+0x112>
		conn->le.keys->flags |= BT_KEYS_SC;
   1e408:	f042 0210 	orr.w	r2, r2, #16
   1e40c:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e40e:	210d      	movs	r1, #13
   1e410:	4630      	mov	r0, r6
   1e412:	f00e fc1f 	bl	2cc54 <atomic_test_bit>
   1e416:	b378      	cbz	r0, 1e478 <bt_smp_update_keys+0x118>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1e418:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e41c:	2120      	movs	r1, #32
   1e41e:	f000 f959 	bl	1e6d4 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1e422:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e426:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1e42a:	2210      	movs	r2, #16
   1e42c:	301a      	adds	r0, #26
   1e42e:	f00c fde2 	bl	2aff6 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1e432:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e436:	2208      	movs	r2, #8
   1e438:	2100      	movs	r1, #0
   1e43a:	3010      	adds	r0, #16
   1e43c:	f00c fde6 	bl	2b00c <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e440:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   1e444:	2202      	movs	r2, #2
}
   1e446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e44a:	2100      	movs	r1, #0
   1e44c:	3018      	adds	r0, #24
   1e44e:	f00c bddd 	b.w	2b00c <memset>
	switch (smp->method) {
   1e452:	3a05      	subs	r2, #5
   1e454:	2a01      	cmp	r2, #1
   1e456:	d803      	bhi.n	1e460 <bt_smp_update_keys+0x100>
		conn->le.keys->flags |= BT_KEYS_OOB;
   1e458:	f043 0320 	orr.w	r3, r3, #32
   1e45c:	734b      	strb	r3, [r1, #13]
   1e45e:	e7bd      	b.n	1e3dc <bt_smp_update_keys+0x7c>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   1e460:	f023 0320 	bic.w	r3, r3, #32
   1e464:	734b      	strb	r3, [r1, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e466:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
   1e46a:	7b53      	ldrb	r3, [r2, #13]
   1e46c:	f023 0301 	bic.w	r3, r3, #1
   1e470:	e7b9      	b.n	1e3e6 <bt_smp_update_keys+0x86>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1e472:	f022 0210 	bic.w	r2, r2, #16
   1e476:	735a      	strb	r2, [r3, #13]
}
   1e478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e47a:	bf00      	nop
   1e47c:	0003204c 	.word	0x0003204c

0001e480 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   1e480:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e482:	4b07      	ldr	r3, [pc, #28]	; (1e4a0 <bt_smp_init+0x20>)
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1e484:	4807      	ldr	r0, [pc, #28]	; (1e4a4 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1e486:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1e48a:	f003 0306 	and.w	r3, r3, #6
   1e48e:	1f9a      	subs	r2, r3, #6
   1e490:	4253      	negs	r3, r2
   1e492:	4153      	adcs	r3, r2
   1e494:	4a04      	ldr	r2, [pc, #16]	; (1e4a8 <bt_smp_init+0x28>)
   1e496:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1e498:	f7f9 fd1a 	bl	17ed0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   1e49c:	2000      	movs	r0, #0
   1e49e:	bd08      	pop	{r3, pc}
   1e4a0:	20000378 	.word	0x20000378
   1e4a4:	20000688 	.word	0x20000688
   1e4a8:	2000423a 	.word	0x2000423a

0001e4ac <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   1e4ac:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e4ae:	b950      	cbnz	r0, 1e4c6 <id_add+0x1a>
   1e4b0:	4907      	ldr	r1, [pc, #28]	; (1e4d0 <id_add+0x24>)
   1e4b2:	4808      	ldr	r0, [pc, #32]	; (1e4d4 <id_add+0x28>)
   1e4b4:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1e4b8:	f00b fdc7 	bl	2a04a <assert_print>
   1e4bc:	4804      	ldr	r0, [pc, #16]	; (1e4d0 <id_add+0x24>)
   1e4be:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1e4c2:	f00b fdbb 	bl	2a03c <assert_post_action>

	bt_id_add(keys);
}
   1e4c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_id_add(keys);
   1e4ca:	f7f8 bf85 	b.w	173d8 <bt_id_add>
   1e4ce:	bf00      	nop
   1e4d0:	0003247d 	.word	0x0003247d
   1e4d4:	0002f2b5 	.word	0x0002f2b5

0001e4d8 <bt_keys_get_addr.part.0>:
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1e4d8:	b570      	push	{r4, r5, r6, lr}
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e4da:	4c0f      	ldr	r4, [pc, #60]	; (1e518 <bt_keys_get_addr.part.0+0x40>)
   1e4dc:	f814 3b01 	ldrb.w	r3, [r4], #1
   1e4e0:	4283      	cmp	r3, r0
struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
   1e4e2:	4605      	mov	r5, r0
   1e4e4:	460e      	mov	r6, r1
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e4e6:	d007      	beq.n	1e4f8 <bt_keys_get_addr.part.0+0x20>
	return memcmp(a, b, sizeof(*a));
   1e4e8:	490c      	ldr	r1, [pc, #48]	; (1e51c <bt_keys_get_addr.part.0+0x44>)
   1e4ea:	480d      	ldr	r0, [pc, #52]	; (1e520 <bt_keys_get_addr.part.0+0x48>)
   1e4ec:	2207      	movs	r2, #7
   1e4ee:	f00c fd5b 	bl	2afa8 <memcmp>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   1e4f2:	b148      	cbz	r0, 1e508 <bt_keys_get_addr.part.0+0x30>
	return NULL;
   1e4f4:	2000      	movs	r0, #0
}
   1e4f6:	bd70      	pop	{r4, r5, r6, pc}
   1e4f8:	2207      	movs	r2, #7
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	f00c fd54 	bl	2afa8 <memcmp>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   1e500:	2800      	cmp	r0, #0
   1e502:	d1f1      	bne.n	1e4e8 <bt_keys_get_addr.part.0+0x10>
		keys = &key_pool[i];
   1e504:	4804      	ldr	r0, [pc, #16]	; (1e518 <bt_keys_get_addr.part.0+0x40>)
   1e506:	e7f6      	b.n	1e4f6 <bt_keys_get_addr.part.0+0x1e>
		keys->id = id;
   1e508:	f804 5c01 	strb.w	r5, [r4, #-1]
	memcpy(dst, src, sizeof(*dst));
   1e50c:	2207      	movs	r2, #7
   1e50e:	4631      	mov	r1, r6
   1e510:	4803      	ldr	r0, [pc, #12]	; (1e520 <bt_keys_get_addr.part.0+0x48>)
   1e512:	f00c fd70 	bl	2aff6 <memcpy>
		return keys;
   1e516:	e7f5      	b.n	1e504 <bt_keys_get_addr.part.0+0x2c>
   1e518:	200032ec 	.word	0x200032ec
   1e51c:	0003055c 	.word	0x0003055c
   1e520:	200032ed 	.word	0x200032ed

0001e524 <bt_keys_get_addr>:
{
   1e524:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1e526:	b941      	cbnz	r1, 1e53a <bt_keys_get_addr+0x16>
   1e528:	4906      	ldr	r1, [pc, #24]	; (1e544 <bt_keys_get_addr+0x20>)
   1e52a:	4807      	ldr	r0, [pc, #28]	; (1e548 <bt_keys_get_addr+0x24>)
   1e52c:	2259      	movs	r2, #89	; 0x59
   1e52e:	f00b fd8c 	bl	2a04a <assert_print>
   1e532:	4804      	ldr	r0, [pc, #16]	; (1e544 <bt_keys_get_addr+0x20>)
   1e534:	2159      	movs	r1, #89	; 0x59
   1e536:	f00b fd81 	bl	2a03c <assert_post_action>
}
   1e53a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1e53e:	f7ff bfcb 	b.w	1e4d8 <bt_keys_get_addr.part.0>
   1e542:	bf00      	nop
   1e544:	0003247d 	.word	0x0003247d
   1e548:	0002f2b5 	.word	0x0002f2b5

0001e54c <bt_keys_foreach_type>:
{
   1e54c:	460b      	mov	r3, r1
   1e54e:	b510      	push	{r4, lr}
   1e550:	4611      	mov	r1, r2
   1e552:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(func != NULL);
   1e554:	b95b      	cbnz	r3, 1e56e <bt_keys_foreach_type+0x22>
   1e556:	4908      	ldr	r1, [pc, #32]	; (1e578 <bt_keys_foreach_type+0x2c>)
   1e558:	4808      	ldr	r0, [pc, #32]	; (1e57c <bt_keys_foreach_type+0x30>)
   1e55a:	22b3      	movs	r2, #179	; 0xb3
   1e55c:	f00b fd75 	bl	2a04a <assert_print>
   1e560:	4805      	ldr	r0, [pc, #20]	; (1e578 <bt_keys_foreach_type+0x2c>)
   1e562:	21b3      	movs	r1, #179	; 0xb3
   1e564:	f00b fd6a 	bl	2a03c <assert_post_action>
}
   1e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			func(&key_pool[i], data);
   1e56c:	4718      	bx	r3
		if ((key_pool[i].keys & type)) {
   1e56e:	4804      	ldr	r0, [pc, #16]	; (1e580 <bt_keys_foreach_type+0x34>)
   1e570:	89c2      	ldrh	r2, [r0, #14]
   1e572:	4222      	tst	r2, r4
   1e574:	d1f8      	bne.n	1e568 <bt_keys_foreach_type+0x1c>
}
   1e576:	bd10      	pop	{r4, pc}
   1e578:	0003247d 	.word	0x0003247d
   1e57c:	0002f2b5 	.word	0x0002f2b5
   1e580:	200032ec 	.word	0x200032ec

0001e584 <keys_commit>:

static int keys_commit(void)
{
   1e584:	b508      	push	{r3, lr}
	/* We do this in commit() rather than add() since add() may get
	 * called multiple times for the same address, especially if
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
   1e586:	4903      	ldr	r1, [pc, #12]	; (1e594 <keys_commit+0x10>)
   1e588:	2200      	movs	r2, #0
   1e58a:	203f      	movs	r0, #63	; 0x3f
   1e58c:	f7ff ffde 	bl	1e54c <bt_keys_foreach_type>
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
	}

	return 0;
}
   1e590:	2000      	movs	r0, #0
   1e592:	bd08      	pop	{r3, pc}
   1e594:	0001e4ad 	.word	0x0001e4ad

0001e598 <bt_keys_find>:
{
   1e598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e59a:	4605      	mov	r5, r0
   1e59c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(addr != NULL);
   1e59e:	4614      	mov	r4, r2
   1e5a0:	b9a2      	cbnz	r2, 1e5cc <bt_keys_find+0x34>
   1e5a2:	490f      	ldr	r1, [pc, #60]	; (1e5e0 <bt_keys_find+0x48>)
   1e5a4:	480f      	ldr	r0, [pc, #60]	; (1e5e4 <bt_keys_find+0x4c>)
   1e5a6:	22c0      	movs	r2, #192	; 0xc0
   1e5a8:	f00b fd4f 	bl	2a04a <assert_print>
   1e5ac:	480c      	ldr	r0, [pc, #48]	; (1e5e0 <bt_keys_find+0x48>)
   1e5ae:	21c0      	movs	r1, #192	; 0xc0
   1e5b0:	f00b fd44 	bl	2a03c <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e5b4:	b18a      	cbz	r2, 1e5da <bt_keys_find+0x42>
   1e5b6:	428e      	cmp	r6, r1
   1e5b8:	d10f      	bne.n	1e5da <bt_keys_find+0x42>
	return memcmp(a, b, sizeof(*a));
   1e5ba:	480b      	ldr	r0, [pc, #44]	; (1e5e8 <bt_keys_find+0x50>)
   1e5bc:	2207      	movs	r2, #7
   1e5be:	4621      	mov	r1, r4
   1e5c0:	f00c fcf2 	bl	2afa8 <memcmp>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e5c4:	2301      	movs	r3, #1
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e5c6:	b918      	cbnz	r0, 1e5d0 <bt_keys_find+0x38>
			return &key_pool[i];
   1e5c8:	4808      	ldr	r0, [pc, #32]	; (1e5ec <bt_keys_find+0x54>)
   1e5ca:	e007      	b.n	1e5dc <bt_keys_find+0x44>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e5cc:	4f07      	ldr	r7, [pc, #28]	; (1e5ec <bt_keys_find+0x54>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e5ce:	2300      	movs	r3, #0
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1e5d0:	89fa      	ldrh	r2, [r7, #14]
   1e5d2:	7839      	ldrb	r1, [r7, #0]
   1e5d4:	402a      	ands	r2, r5
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e5d6:	2b00      	cmp	r3, #0
   1e5d8:	d0ec      	beq.n	1e5b4 <bt_keys_find+0x1c>
	return NULL;
   1e5da:	2000      	movs	r0, #0
}
   1e5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e5de:	bf00      	nop
   1e5e0:	0003247d 	.word	0x0003247d
   1e5e4:	0002f2b5 	.word	0x0002f2b5
   1e5e8:	200032ed 	.word	0x200032ed
   1e5ec:	200032ec 	.word	0x200032ec

0001e5f0 <bt_keys_find_irk>:
{
   1e5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e5f2:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(addr != NULL);
   1e5f4:	460c      	mov	r4, r1
   1e5f6:	b941      	cbnz	r1, 1e60a <bt_keys_find_irk+0x1a>
   1e5f8:	4921      	ldr	r1, [pc, #132]	; (1e680 <bt_keys_find_irk+0x90>)
   1e5fa:	4822      	ldr	r0, [pc, #136]	; (1e684 <bt_keys_find_irk+0x94>)
   1e5fc:	22e9      	movs	r2, #233	; 0xe9
   1e5fe:	f00b fd24 	bl	2a04a <assert_print>
   1e602:	481f      	ldr	r0, [pc, #124]	; (1e680 <bt_keys_find_irk+0x90>)
   1e604:	21e9      	movs	r1, #233	; 0xe9
   1e606:	f00b fd19 	bl	2a03c <assert_post_action>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e60a:	780b      	ldrb	r3, [r1, #0]
   1e60c:	2b01      	cmp	r3, #1
   1e60e:	d001      	beq.n	1e614 <bt_keys_find_irk+0x24>
		return NULL;
   1e610:	2000      	movs	r0, #0
}
   1e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   1e614:	798b      	ldrb	r3, [r1, #6]
   1e616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e61a:	2b40      	cmp	r3, #64	; 0x40
   1e61c:	d1f8      	bne.n	1e610 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e61e:	4d1a      	ldr	r5, [pc, #104]	; (1e688 <bt_keys_find_irk+0x98>)
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e620:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   1e622:	f105 073a 	add.w	r7, r5, #58	; 0x3a
   1e626:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id == id &&
   1e628:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e62a:	f002 0202 	and.w	r2, r2, #2
   1e62e:	b1c3      	cbz	r3, 1e662 <bt_keys_find_irk+0x72>
   1e630:	2300      	movs	r3, #0
   1e632:	89ea      	ldrh	r2, [r5, #14]
		if (key_pool[i].id != id) {
   1e634:	7829      	ldrb	r1, [r5, #0]
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   1e636:	f002 0202 	and.w	r2, r2, #2
   1e63a:	2b00      	cmp	r3, #0
   1e63c:	d1e8      	bne.n	1e610 <bt_keys_find_irk+0x20>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e63e:	2a00      	cmp	r2, #0
   1e640:	d0e6      	beq.n	1e610 <bt_keys_find_irk+0x20>
		if (key_pool[i].id != id) {
   1e642:	42b1      	cmp	r1, r6
   1e644:	d1e4      	bne.n	1e610 <bt_keys_find_irk+0x20>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   1e646:	1c67      	adds	r7, r4, #1
   1e648:	4810      	ldr	r0, [pc, #64]	; (1e68c <bt_keys_find_irk+0x9c>)
   1e64a:	4639      	mov	r1, r7
   1e64c:	f00c fd19 	bl	2b082 <bt_rpa_irk_matches>
   1e650:	2301      	movs	r3, #1
   1e652:	2800      	cmp	r0, #0
   1e654:	d0ed      	beq.n	1e632 <bt_keys_find_irk+0x42>
	memcpy(dst, src, sizeof(*dst));
   1e656:	2206      	movs	r2, #6
   1e658:	4639      	mov	r1, r7
   1e65a:	480d      	ldr	r0, [pc, #52]	; (1e690 <bt_keys_find_irk+0xa0>)
   1e65c:	f00c fccb 	bl	2aff6 <memcpy>
}
   1e660:	e00b      	b.n	1e67a <bt_keys_find_irk+0x8a>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   1e662:	2a00      	cmp	r2, #0
   1e664:	d0e5      	beq.n	1e632 <bt_keys_find_irk+0x42>
		if (key_pool[i].id == id &&
   1e666:	42b0      	cmp	r0, r6
   1e668:	d1e3      	bne.n	1e632 <bt_keys_find_irk+0x42>
	return memcmp(a, b, sizeof(*a));
   1e66a:	2206      	movs	r2, #6
   1e66c:	4639      	mov	r1, r7
   1e66e:	1c60      	adds	r0, r4, #1
   1e670:	f00c fc9a 	bl	2afa8 <memcmp>
   1e674:	2301      	movs	r3, #1
   1e676:	2800      	cmp	r0, #0
   1e678:	d1d5      	bne.n	1e626 <bt_keys_find_irk+0x36>
			return &key_pool[i];
   1e67a:	4803      	ldr	r0, [pc, #12]	; (1e688 <bt_keys_find_irk+0x98>)
   1e67c:	e7c9      	b.n	1e612 <bt_keys_find_irk+0x22>
   1e67e:	bf00      	nop
   1e680:	0003247d 	.word	0x0003247d
   1e684:	0002f2b5 	.word	0x0002f2b5
   1e688:	200032ec 	.word	0x200032ec
   1e68c:	20003316 	.word	0x20003316
   1e690:	20003326 	.word	0x20003326

0001e694 <bt_keys_find_addr>:
{
   1e694:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(addr != NULL);
   1e696:	b951      	cbnz	r1, 1e6ae <bt_keys_find_addr+0x1a>
   1e698:	490b      	ldr	r1, [pc, #44]	; (1e6c8 <bt_keys_find_addr+0x34>)
   1e69a:	480c      	ldr	r0, [pc, #48]	; (1e6cc <bt_keys_find_addr+0x38>)
   1e69c:	f44f 728d 	mov.w	r2, #282	; 0x11a
   1e6a0:	f00b fcd3 	bl	2a04a <assert_print>
   1e6a4:	4808      	ldr	r0, [pc, #32]	; (1e6c8 <bt_keys_find_addr+0x34>)
   1e6a6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1e6aa:	f00b fcc7 	bl	2a03c <assert_post_action>
		if (key_pool[i].id == id &&
   1e6ae:	4c08      	ldr	r4, [pc, #32]	; (1e6d0 <bt_keys_find_addr+0x3c>)
   1e6b0:	7823      	ldrb	r3, [r4, #0]
   1e6b2:	4283      	cmp	r3, r0
   1e6b4:	d104      	bne.n	1e6c0 <bt_keys_find_addr+0x2c>
	return memcmp(a, b, sizeof(*a));
   1e6b6:	2207      	movs	r2, #7
   1e6b8:	1c60      	adds	r0, r4, #1
   1e6ba:	f00c fc75 	bl	2afa8 <memcmp>
   1e6be:	b108      	cbz	r0, 1e6c4 <bt_keys_find_addr+0x30>
	return NULL;
   1e6c0:	2000      	movs	r0, #0
}
   1e6c2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1e6c4:	4620      	mov	r0, r4
   1e6c6:	e7fc      	b.n	1e6c2 <bt_keys_find_addr+0x2e>
   1e6c8:	0003247d 	.word	0x0003247d
   1e6cc:	0002f2b5 	.word	0x0002f2b5
   1e6d0:	200032ec 	.word	0x200032ec

0001e6d4 <bt_keys_add_type>:
{
   1e6d4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e6d6:	b950      	cbnz	r0, 1e6ee <bt_keys_add_type+0x1a>
   1e6d8:	4907      	ldr	r1, [pc, #28]	; (1e6f8 <bt_keys_add_type+0x24>)
   1e6da:	4808      	ldr	r0, [pc, #32]	; (1e6fc <bt_keys_add_type+0x28>)
   1e6dc:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1e6e0:	f00b fcb3 	bl	2a04a <assert_print>
   1e6e4:	4804      	ldr	r0, [pc, #16]	; (1e6f8 <bt_keys_add_type+0x24>)
   1e6e6:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1e6ea:	f00b fca7 	bl	2a03c <assert_post_action>
	keys->keys |= type;
   1e6ee:	89c3      	ldrh	r3, [r0, #14]
   1e6f0:	4319      	orrs	r1, r3
   1e6f2:	81c1      	strh	r1, [r0, #14]
}
   1e6f4:	bd08      	pop	{r3, pc}
   1e6f6:	bf00      	nop
   1e6f8:	0003247d 	.word	0x0003247d
   1e6fc:	0002f2b5 	.word	0x0002f2b5

0001e700 <bt_keys_get_type>:
{
   1e700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e702:	4606      	mov	r6, r0
   1e704:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(addr != NULL);
   1e706:	4615      	mov	r5, r2
   1e708:	b942      	cbnz	r2, 1e71c <bt_keys_get_type+0x1c>
   1e70a:	490c      	ldr	r1, [pc, #48]	; (1e73c <bt_keys_get_type+0x3c>)
   1e70c:	480c      	ldr	r0, [pc, #48]	; (1e740 <bt_keys_get_type+0x40>)
   1e70e:	22d2      	movs	r2, #210	; 0xd2
   1e710:	f00b fc9b 	bl	2a04a <assert_print>
   1e714:	4809      	ldr	r0, [pc, #36]	; (1e73c <bt_keys_get_type+0x3c>)
   1e716:	21d2      	movs	r1, #210	; 0xd2
   1e718:	f00b fc90 	bl	2a03c <assert_post_action>
	keys = bt_keys_find(type, id, addr);
   1e71c:	f7ff ff3c 	bl	1e598 <bt_keys_find>
	if (keys) {
   1e720:	4604      	mov	r4, r0
   1e722:	b940      	cbnz	r0, 1e736 <bt_keys_get_type+0x36>
	keys = bt_keys_get_addr(id, addr);
   1e724:	4629      	mov	r1, r5
   1e726:	4638      	mov	r0, r7
   1e728:	f7ff fefc 	bl	1e524 <bt_keys_get_addr>
	if (!keys) {
   1e72c:	4604      	mov	r4, r0
   1e72e:	b110      	cbz	r0, 1e736 <bt_keys_get_type+0x36>
	bt_keys_add_type(keys, type);
   1e730:	4631      	mov	r1, r6
   1e732:	f7ff ffcf 	bl	1e6d4 <bt_keys_add_type>
}
   1e736:	4620      	mov	r0, r4
   1e738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e73a:	bf00      	nop
   1e73c:	0003247d 	.word	0x0003247d
   1e740:	0002f2b5 	.word	0x0002f2b5

0001e744 <bt_keys_clear>:
{
   1e744:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e746:	4604      	mov	r4, r0
{
   1e748:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1e74a:	b950      	cbnz	r0, 1e762 <bt_keys_clear+0x1e>
   1e74c:	4916      	ldr	r1, [pc, #88]	; (1e7a8 <bt_keys_clear+0x64>)
   1e74e:	4817      	ldr	r0, [pc, #92]	; (1e7ac <bt_keys_clear+0x68>)
   1e750:	f240 1231 	movw	r2, #305	; 0x131
   1e754:	f00b fc79 	bl	2a04a <assert_print>
   1e758:	4813      	ldr	r0, [pc, #76]	; (1e7a8 <bt_keys_clear+0x64>)
   1e75a:	f240 1131 	movw	r1, #305	; 0x131
   1e75e:	f00b fc6d 	bl	2a03c <assert_post_action>
	if (keys->state & BT_KEYS_ID_ADDED) {
   1e762:	7a03      	ldrb	r3, [r0, #8]
   1e764:	075b      	lsls	r3, r3, #29
   1e766:	d501      	bpl.n	1e76c <bt_keys_clear+0x28>
		bt_id_del(keys);
   1e768:	f7f8 fee8 	bl	1753c <bt_id_del>
		if (keys->id) {
   1e76c:	4625      	mov	r5, r4
   1e76e:	f815 2b01 	ldrb.w	r2, [r5], #1
   1e772:	b1b2      	cbz	r2, 1e7a2 <bt_keys_clear+0x5e>
			u8_to_dec(id, sizeof(id), keys->id);
   1e774:	ae02      	add	r6, sp, #8
   1e776:	2104      	movs	r1, #4
   1e778:	4630      	mov	r0, r6
   1e77a:	f00b f9d0 	bl	29b1e <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e77e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e780:	4a0b      	ldr	r2, [pc, #44]	; (1e7b0 <bt_keys_clear+0x6c>)
   1e782:	462b      	mov	r3, r5
   1e784:	2124      	movs	r1, #36	; 0x24
   1e786:	a803      	add	r0, sp, #12
   1e788:	f7f7 f8aa 	bl	158e0 <bt_settings_encode_key>
		settings_delete(key);
   1e78c:	a803      	add	r0, sp, #12
   1e78e:	f00b feee 	bl	2a56e <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1e792:	225c      	movs	r2, #92	; 0x5c
   1e794:	2100      	movs	r1, #0
   1e796:	4620      	mov	r0, r4
}
   1e798:	b00c      	add	sp, #48	; 0x30
   1e79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1e79e:	f00c bc35 	b.w	2b00c <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1e7a2:	9200      	str	r2, [sp, #0]
   1e7a4:	e7ec      	b.n	1e780 <bt_keys_clear+0x3c>
   1e7a6:	bf00      	nop
   1e7a8:	0003247d 	.word	0x0003247d
   1e7ac:	0002f2b5 	.word	0x0002f2b5
   1e7b0:	00032565 	.word	0x00032565

0001e7b4 <keys_set>:
{
   1e7b4:	b570      	push	{r4, r5, r6, lr}
   1e7b6:	4605      	mov	r5, r0
   1e7b8:	b098      	sub	sp, #96	; 0x60
   1e7ba:	4614      	mov	r4, r2
   1e7bc:	4618      	mov	r0, r3
	if (!name) {
   1e7be:	b945      	cbnz	r5, 1e7d2 <keys_set+0x1e>
		LOG_ERR("Insufficient number of arguments");
   1e7c0:	4832      	ldr	r0, [pc, #200]	; (1e88c <keys_set+0xd8>)
   1e7c2:	2145      	movs	r1, #69	; 0x45
   1e7c4:	f00b fc4f 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1e7c8:	f06f 0615 	mvn.w	r6, #21
}
   1e7cc:	4630      	mov	r0, r6
   1e7ce:	b018      	add	sp, #96	; 0x60
   1e7d0:	bd70      	pop	{r4, r5, r6, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   1e7d2:	2250      	movs	r2, #80	; 0x50
   1e7d4:	a904      	add	r1, sp, #16
   1e7d6:	47a0      	blx	r4
	if (len < 0) {
   1e7d8:	1e04      	subs	r4, r0, #0
   1e7da:	da05      	bge.n	1e7e8 <keys_set+0x34>
		LOG_ERR("Failed to read value (err %zd)", len);
   1e7dc:	482c      	ldr	r0, [pc, #176]	; (1e890 <keys_set+0xdc>)
   1e7de:	4622      	mov	r2, r4
   1e7e0:	2145      	movs	r1, #69	; 0x45
   1e7e2:	f00b fc40 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1e7e6:	e7ef      	b.n	1e7c8 <keys_set+0x14>
	err = bt_settings_decode_key(name, &addr);
   1e7e8:	a902      	add	r1, sp, #8
   1e7ea:	4628      	mov	r0, r5
   1e7ec:	f00c fc73 	bl	2b0d6 <bt_settings_decode_key>
	if (err) {
   1e7f0:	4606      	mov	r6, r0
   1e7f2:	b118      	cbz	r0, 1e7fc <keys_set+0x48>
		LOG_ERR("Unable to decode address %s", name);
   1e7f4:	4827      	ldr	r0, [pc, #156]	; (1e894 <keys_set+0xe0>)
   1e7f6:	462a      	mov	r2, r5
   1e7f8:	2145      	movs	r1, #69	; 0x45
   1e7fa:	e7f2      	b.n	1e7e2 <keys_set+0x2e>
	settings_name_next(name, &next);
   1e7fc:	a901      	add	r1, sp, #4
   1e7fe:	4628      	mov	r0, r5
   1e800:	f00b fedd 	bl	2a5be <settings_name_next>
	if (!next) {
   1e804:	9801      	ldr	r0, [sp, #4]
   1e806:	b140      	cbz	r0, 1e81a <keys_set+0x66>
		unsigned long next_id = strtoul(next, NULL, 10);
   1e808:	220a      	movs	r2, #10
   1e80a:	4631      	mov	r1, r6
   1e80c:	f00c fb1b 	bl	2ae46 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   1e810:	4602      	mov	r2, r0
   1e812:	b110      	cbz	r0, 1e81a <keys_set+0x66>
			LOG_ERR("Invalid local identity %lu", next_id);
   1e814:	4820      	ldr	r0, [pc, #128]	; (1e898 <keys_set+0xe4>)
   1e816:	2145      	movs	r1, #69	; 0x45
   1e818:	e7e3      	b.n	1e7e2 <keys_set+0x2e>
	if (!len) {
   1e81a:	b99c      	cbnz	r4, 1e844 <keys_set+0x90>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1e81c:	aa02      	add	r2, sp, #8
   1e81e:	4621      	mov	r1, r4
   1e820:	203f      	movs	r0, #63	; 0x3f
   1e822:	f7ff feb9 	bl	1e598 <bt_keys_find>
		if (keys) {
   1e826:	b120      	cbz	r0, 1e832 <keys_set+0x7e>
			(void)memset(keys, 0, sizeof(*keys));
   1e828:	225c      	movs	r2, #92	; 0x5c
   1e82a:	4621      	mov	r1, r4
   1e82c:	f00c fbee 	bl	2b00c <memset>
			LOG_DBG("Cleared keys for %s", bt_addr_le_str(&addr));
   1e830:	e7cc      	b.n	1e7cc <keys_set+0x18>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   1e832:	a802      	add	r0, sp, #8
   1e834:	f7f6 ff76 	bl	15724 <bt_addr_le_str>
   1e838:	2157      	movs	r1, #87	; 0x57
   1e83a:	4602      	mov	r2, r0
   1e83c:	4817      	ldr	r0, [pc, #92]	; (1e89c <keys_set+0xe8>)
   1e83e:	f00b fc12 	bl	2a066 <z_log_minimal_printk>
   1e842:	e7c3      	b.n	1e7cc <keys_set+0x18>
	__ASSERT_NO_MSG(addr != NULL);
   1e844:	a902      	add	r1, sp, #8
   1e846:	2000      	movs	r0, #0
   1e848:	f7ff fe46 	bl	1e4d8 <bt_keys_get_addr.part.0>
	if (!keys) {
   1e84c:	4605      	mov	r5, r0
   1e84e:	b950      	cbnz	r0, 1e866 <keys_set+0xb2>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1e850:	a802      	add	r0, sp, #8
   1e852:	f7f6 ff67 	bl	15724 <bt_addr_le_str>
   1e856:	2145      	movs	r1, #69	; 0x45
   1e858:	4602      	mov	r2, r0
   1e85a:	4811      	ldr	r0, [pc, #68]	; (1e8a0 <keys_set+0xec>)
   1e85c:	f00b fc03 	bl	2a066 <z_log_minimal_printk>
		return -ENOMEM;
   1e860:	f06f 060b 	mvn.w	r6, #11
   1e864:	e7b2      	b.n	1e7cc <keys_set+0x18>
	if (len != BT_KEYS_STORAGE_LEN) {
   1e866:	2c50      	cmp	r4, #80	; 0x50
   1e868:	d009      	beq.n	1e87e <keys_set+0xca>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   1e86a:	480e      	ldr	r0, [pc, #56]	; (1e8a4 <keys_set+0xf0>)
   1e86c:	2350      	movs	r3, #80	; 0x50
   1e86e:	4622      	mov	r2, r4
   1e870:	2145      	movs	r1, #69	; 0x45
   1e872:	f00b fbf8 	bl	2a066 <z_log_minimal_printk>
			bt_keys_clear(keys);
   1e876:	4628      	mov	r0, r5
   1e878:	f7ff ff64 	bl	1e744 <bt_keys_clear>
			return -EINVAL;
   1e87c:	e7a4      	b.n	1e7c8 <keys_set+0x14>
		memcpy(keys->storage_start, val, len);
   1e87e:	4622      	mov	r2, r4
   1e880:	a904      	add	r1, sp, #16
   1e882:	300c      	adds	r0, #12
   1e884:	f00c fbb7 	bl	2aff6 <memcpy>
	return 0;
   1e888:	e7a0      	b.n	1e7cc <keys_set+0x18>
   1e88a:	bf00      	nop
   1e88c:	000305e4 	.word	0x000305e4
   1e890:	000324ad 	.word	0x000324ad
   1e894:	00031adc 	.word	0x00031adc
   1e898:	00031afd 	.word	0x00031afd
   1e89c:	000324d1 	.word	0x000324d1
   1e8a0:	000324f9 	.word	0x000324f9
   1e8a4:	0003251d 	.word	0x0003251d

0001e8a8 <bt_keys_store>:
{
   1e8a8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(keys != NULL);
   1e8aa:	4604      	mov	r4, r0
{
   1e8ac:	b08c      	sub	sp, #48	; 0x30
	__ASSERT_NO_MSG(keys != NULL);
   1e8ae:	b950      	cbnz	r0, 1e8c6 <bt_keys_store+0x1e>
   1e8b0:	4916      	ldr	r1, [pc, #88]	; (1e90c <bt_keys_store+0x64>)
   1e8b2:	4817      	ldr	r0, [pc, #92]	; (1e910 <bt_keys_store+0x68>)
   1e8b4:	f240 1255 	movw	r2, #341	; 0x155
   1e8b8:	f00b fbc7 	bl	2a04a <assert_print>
   1e8bc:	4813      	ldr	r0, [pc, #76]	; (1e90c <bt_keys_store+0x64>)
   1e8be:	f240 1155 	movw	r1, #341	; 0x155
   1e8c2:	f00b fbbb 	bl	2a03c <assert_post_action>
	if (keys->id) {
   1e8c6:	4605      	mov	r5, r0
   1e8c8:	f815 2b01 	ldrb.w	r2, [r5], #1
   1e8cc:	b1da      	cbz	r2, 1e906 <bt_keys_store+0x5e>
		u8_to_dec(id, sizeof(id), keys->id);
   1e8ce:	ae02      	add	r6, sp, #8
   1e8d0:	2104      	movs	r1, #4
   1e8d2:	4630      	mov	r0, r6
   1e8d4:	f00b f923 	bl	29b1e <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e8d8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e8da:	4a0e      	ldr	r2, [pc, #56]	; (1e914 <bt_keys_store+0x6c>)
   1e8dc:	462b      	mov	r3, r5
   1e8de:	2124      	movs	r1, #36	; 0x24
   1e8e0:	a803      	add	r0, sp, #12
   1e8e2:	f7f6 fffd 	bl	158e0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1e8e6:	f104 010c 	add.w	r1, r4, #12
   1e8ea:	2250      	movs	r2, #80	; 0x50
   1e8ec:	a803      	add	r0, sp, #12
   1e8ee:	f7f4 ffc9 	bl	13884 <settings_save_one>
	if (err) {
   1e8f2:	4604      	mov	r4, r0
   1e8f4:	b120      	cbz	r0, 1e900 <bt_keys_store+0x58>
		LOG_ERR("Failed to save keys (err %d)", err);
   1e8f6:	4602      	mov	r2, r0
   1e8f8:	2145      	movs	r1, #69	; 0x45
   1e8fa:	4807      	ldr	r0, [pc, #28]	; (1e918 <bt_keys_store+0x70>)
   1e8fc:	f00b fbb3 	bl	2a066 <z_log_minimal_printk>
}
   1e900:	4620      	mov	r0, r4
   1e902:	b00c      	add	sp, #48	; 0x30
   1e904:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1e906:	9200      	str	r2, [sp, #0]
   1e908:	e7e7      	b.n	1e8da <bt_keys_store+0x32>
   1e90a:	bf00      	nop
   1e90c:	0003247d 	.word	0x0003247d
   1e910:	0002f2b5 	.word	0x0002f2b5
   1e914:	00032565 	.word	0x00032565
   1e918:	00032540 	.word	0x00032540

0001e91c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e91c:	4288      	cmp	r0, r1
{
   1e91e:	b510      	push	{r4, lr}
   1e920:	eb00 0302 	add.w	r3, r0, r2
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e924:	d90d      	bls.n	1e942 <sys_memcpy_swap+0x26>
   1e926:	188c      	adds	r4, r1, r2
   1e928:	42a0      	cmp	r0, r4
   1e92a:	d20d      	bcs.n	1e948 <sys_memcpy_swap+0x2c>
   1e92c:	490b      	ldr	r1, [pc, #44]	; (1e95c <sys_memcpy_swap+0x40>)
   1e92e:	480c      	ldr	r0, [pc, #48]	; (1e960 <sys_memcpy_swap+0x44>)
   1e930:	f240 2215 	movw	r2, #533	; 0x215
   1e934:	f00b fb89 	bl	2a04a <assert_print>
   1e938:	4808      	ldr	r0, [pc, #32]	; (1e95c <sys_memcpy_swap+0x40>)
   1e93a:	f240 2115 	movw	r1, #533	; 0x215
   1e93e:	f00b fb7d 	bl	2a03c <assert_post_action>
   1e942:	d0f3      	beq.n	1e92c <sys_memcpy_swap+0x10>
   1e944:	4299      	cmp	r1, r3
   1e946:	e7f0      	b.n	1e92a <sys_memcpy_swap+0xe>
	psrc += length - 1;
   1e948:	3a01      	subs	r2, #1
   1e94a:	4411      	add	r1, r2
		*pdst++ = *psrc--;
   1e94c:	f811 2901 	ldrb.w	r2, [r1], #-1
   1e950:	f800 2b01 	strb.w	r2, [r0], #1
	for (; length > 0; length--) {
   1e954:	4283      	cmp	r3, r0
   1e956:	d1f9      	bne.n	1e94c <sys_memcpy_swap+0x30>
}
   1e958:	bd10      	pop	{r4, pc}
   1e95a:	bf00      	nop
   1e95c:	00032572 	.word	0x00032572
   1e960:	0002f2b5 	.word	0x0002f2b5

0001e964 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   1e964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e968:	b09a      	sub	sp, #104	; 0x68
   1e96a:	461d      	mov	r5, r3
   1e96c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   1e970:	4b2e      	ldr	r3, [pc, #184]	; (1ea2c <bt_crypto_f5+0xc8>)
{
   1e972:	4616      	mov	r6, r2
	uint8_t m[53] = {0x00,						 /* counter */
   1e974:	aa0c      	add	r2, sp, #48	; 0x30
{
   1e976:	4684      	mov	ip, r0
   1e978:	468a      	mov	sl, r1
	uint8_t m[53] = {0x00,						 /* counter */
   1e97a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   1e97e:	4690      	mov	r8, r2
   1e980:	6818      	ldr	r0, [r3, #0]
   1e982:	6859      	ldr	r1, [r3, #4]
   1e984:	4614      	mov	r4, r2
   1e986:	c403      	stmia	r4!, {r0, r1}
   1e988:	3308      	adds	r3, #8
   1e98a:	4573      	cmp	r3, lr
   1e98c:	4622      	mov	r2, r4
   1e98e:	d1f7      	bne.n	1e980 <bt_crypto_f5+0x1c>
   1e990:	6818      	ldr	r0, [r3, #0]
   1e992:	791b      	ldrb	r3, [r3, #4]
   1e994:	6020      	str	r0, [r4, #0]
   1e996:	7123      	strb	r3, [r4, #4]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   1e998:	4661      	mov	r1, ip
   1e99a:	2220      	movs	r2, #32
   1e99c:	a804      	add	r0, sp, #16
   1e99e:	f7ff ffbd 	bl	1e91c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   1e9a2:	4823      	ldr	r0, [pc, #140]	; (1ea30 <bt_crypto_f5+0xcc>)
   1e9a4:	466b      	mov	r3, sp
   1e9a6:	2220      	movs	r2, #32
   1e9a8:	a904      	add	r1, sp, #16
   1e9aa:	f00e fc83 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   1e9ae:	4604      	mov	r4, r0
   1e9b0:	bbc0      	cbnz	r0, 1ea24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("t %s", bt_hex(t, 16));

	sys_memcpy_swap(m + 5, n1, 16);
   1e9b2:	2210      	movs	r2, #16
   1e9b4:	4651      	mov	r1, sl
   1e9b6:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   1e9ba:	f7ff ffaf 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   1e9be:	2210      	movs	r2, #16
   1e9c0:	4631      	mov	r1, r6
   1e9c2:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   1e9c6:	f7ff ffa9 	bl	1e91c <sys_memcpy_swap>
	m[37] = a1->type;
   1e9ca:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e9cc:	2206      	movs	r2, #6
	m[37] = a1->type;
   1e9ce:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e9d2:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   1e9d6:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   1e9da:	f7ff ff9f 	bl	1e91c <sys_memcpy_swap>
	m[44] = a2->type;
   1e9de:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e9e0:	2206      	movs	r2, #6
	m[44] = a2->type;
   1e9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   1e9e6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   1e9ea:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   1e9ee:	f7ff ff95 	bl	1e91c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   1e9f2:	464b      	mov	r3, r9
   1e9f4:	2235      	movs	r2, #53	; 0x35
   1e9f6:	4641      	mov	r1, r8
   1e9f8:	4668      	mov	r0, sp
   1e9fa:	f00e fc5b 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   1e9fe:	4604      	mov	r4, r0
   1ea00:	b980      	cbnz	r0, 1ea24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("mackey %1s", bt_hex(mackey, 16));

	sys_mem_swap(mackey, 16);
   1ea02:	4648      	mov	r0, r9
   1ea04:	f00e fc48 	bl	2d298 <sys_mem_swap.constprop.0>

	/* counter for ltk is 1 */
	m[0] = 0x01;
   1ea08:	2301      	movs	r3, #1
   1ea0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30

	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   1ea0e:	2235      	movs	r2, #53	; 0x35
   1ea10:	463b      	mov	r3, r7
   1ea12:	4641      	mov	r1, r8
   1ea14:	4668      	mov	r0, sp
   1ea16:	f00e fc4d 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   1ea1a:	4604      	mov	r4, r0
   1ea1c:	b910      	cbnz	r0, 1ea24 <bt_crypto_f5+0xc0>
		return err;
	}

	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);
   1ea1e:	4638      	mov	r0, r7
   1ea20:	f00e fc3a 	bl	2d298 <sys_mem_swap.constprop.0>

	return 0;
}
   1ea24:	4620      	mov	r0, r4
   1ea26:	b01a      	add	sp, #104	; 0x68
   1ea28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ea2c:	0002e742 	.word	0x0002e742
   1ea30:	000325a4 	.word	0x000325a4

0001ea34 <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   1ea34:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea36:	b099      	sub	sp, #100	; 0x64
   1ea38:	4614      	mov	r4, r2
   1ea3a:	460f      	mov	r7, r1
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   1ea3c:	2220      	movs	r2, #32
   1ea3e:	4601      	mov	r1, r0
   1ea40:	a804      	add	r0, sp, #16
{
   1ea42:	461e      	mov	r6, r3
   1ea44:	9d1e      	ldr	r5, [sp, #120]	; 0x78
	sys_memcpy_swap(m, u, 32);
   1ea46:	f7ff ff69 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1ea4a:	2220      	movs	r2, #32
   1ea4c:	4639      	mov	r1, r7
   1ea4e:	a80c      	add	r0, sp, #48	; 0x30
   1ea50:	f7ff ff64 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   1ea54:	2210      	movs	r2, #16
   1ea56:	4631      	mov	r1, r6
   1ea58:	a814      	add	r0, sp, #80	; 0x50
   1ea5a:	f7ff ff5f 	bl	1e91c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   1ea5e:	4621      	mov	r1, r4
   1ea60:	2210      	movs	r2, #16
   1ea62:	4668      	mov	r0, sp
   1ea64:	f7ff ff5a 	bl	1e91c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   1ea68:	466b      	mov	r3, sp
   1ea6a:	2250      	movs	r2, #80	; 0x50
   1ea6c:	a904      	add	r1, sp, #16
   1ea6e:	4618      	mov	r0, r3
   1ea70:	f00e fc20 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   1ea74:	4604      	mov	r4, r0
   1ea76:	b960      	cbnz	r0, 1ea92 <bt_crypto_g2+0x5e>
		return err;
	}
	LOG_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
   1ea78:	2204      	movs	r2, #4
   1ea7a:	a903      	add	r1, sp, #12
   1ea7c:	4628      	mov	r0, r5
   1ea7e:	f00c faba 	bl	2aff6 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   1ea82:	682b      	ldr	r3, [r5, #0]
   1ea84:	4a04      	ldr	r2, [pc, #16]	; (1ea98 <bt_crypto_g2+0x64>)
   1ea86:	ba1b      	rev	r3, r3
   1ea88:	fbb3 f1f2 	udiv	r1, r3, r2
   1ea8c:	fb02 3311 	mls	r3, r2, r1, r3
   1ea90:	602b      	str	r3, [r5, #0]

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   1ea92:	4620      	mov	r0, r4
   1ea94:	b019      	add	sp, #100	; 0x64
   1ea96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea98:	000f4240 	.word	0x000f4240

0001ea9c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1ea9c:	4b02      	ldr	r3, [pc, #8]	; (1eaa8 <net_buf_pool_get+0xc>)
   1ea9e:	2234      	movs	r2, #52	; 0x34
   1eaa0:	fb02 3000 	mla	r0, r2, r0, r3
   1eaa4:	4770      	bx	lr
   1eaa6:	bf00      	nop
   1eaa8:	200009f4 	.word	0x200009f4

0001eaac <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1eaac:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1eaae:	4b07      	ldr	r3, [pc, #28]	; (1eacc <net_buf_id+0x20>)
   1eab0:	2134      	movs	r1, #52	; 0x34
   1eab2:	fb01 3302 	mla	r3, r1, r2, r3
   1eab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1eab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1eabc:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1eabe:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1eac0:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1eac4:	fbb0 f0f3 	udiv	r0, r0, r3
   1eac8:	4770      	bx	lr
   1eaca:	bf00      	nop
   1eacc:	200009f4 	.word	0x200009f4

0001ead0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1ead0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ead2:	4b0a      	ldr	r3, [pc, #40]	; (1eafc <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ead4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ead6:	2434      	movs	r4, #52	; 0x34
   1ead8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1eadc:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1eade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1eae0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1eae2:	681a      	ldr	r2, [r3, #0]
   1eae4:	4294      	cmp	r4, r2
   1eae6:	bf94      	ite	ls
   1eae8:	600c      	strls	r4, [r1, #0]
   1eaea:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1eaec:	e9d3 5400 	ldrd	r5, r4, [r3]
   1eaf0:	f7ff ffdc 	bl	1eaac <net_buf_id>
}
   1eaf4:	fb05 4000 	mla	r0, r5, r0, r4
   1eaf8:	bd38      	pop	{r3, r4, r5, pc}
   1eafa:	bf00      	nop
   1eafc:	200009f4 	.word	0x200009f4

0001eb00 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb04:	b085      	sub	sp, #20
   1eb06:	4605      	mov	r5, r0
   1eb08:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1eb0a:	4610      	mov	r0, r2
   1eb0c:	4619      	mov	r1, r3
{
   1eb0e:	4691      	mov	r9, r2
   1eb10:	4698      	mov	r8, r3
   1eb12:	4617      	mov	r7, r2
   1eb14:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1eb16:	f00f f9f9 	bl	2df0c <sys_clock_timeout_end_calc>
   1eb1a:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1eb1e:	b93d      	cbnz	r5, 1eb30 <net_buf_alloc_len+0x30>
   1eb20:	495e      	ldr	r1, [pc, #376]	; (1ec9c <net_buf_alloc_len+0x19c>)
   1eb22:	485f      	ldr	r0, [pc, #380]	; (1eca0 <net_buf_alloc_len+0x1a0>)
   1eb24:	22f4      	movs	r2, #244	; 0xf4
   1eb26:	f00b fa90 	bl	2a04a <assert_print>
   1eb2a:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1eb2c:	485b      	ldr	r0, [pc, #364]	; (1ec9c <net_buf_alloc_len+0x19c>)
   1eb2e:	e014      	b.n	1eb5a <net_buf_alloc_len+0x5a>
	key = k_spin_lock(&pool->lock);
   1eb30:	f105 0a1c 	add.w	sl, r5, #28
	__asm__ volatile(
   1eb34:	f04f 0340 	mov.w	r3, #64	; 0x40
   1eb38:	f3ef 8b11 	mrs	fp, BASEPRI
   1eb3c:	f383 8812 	msr	BASEPRI_MAX, r3
   1eb40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1eb44:	4650      	mov	r0, sl
   1eb46:	f005 fa57 	bl	23ff8 <z_spin_lock_valid>
   1eb4a:	b940      	cbnz	r0, 1eb5e <net_buf_alloc_len+0x5e>
   1eb4c:	4955      	ldr	r1, [pc, #340]	; (1eca4 <net_buf_alloc_len+0x1a4>)
   1eb4e:	4854      	ldr	r0, [pc, #336]	; (1eca0 <net_buf_alloc_len+0x1a0>)
   1eb50:	2294      	movs	r2, #148	; 0x94
   1eb52:	f00b fa7a 	bl	2a04a <assert_print>
   1eb56:	2194      	movs	r1, #148	; 0x94
   1eb58:	4852      	ldr	r0, [pc, #328]	; (1eca4 <net_buf_alloc_len+0x1a4>)
   1eb5a:	f00b fa6f 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   1eb5e:	4650      	mov	r0, sl
   1eb60:	f005 fa68 	bl	24034 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1eb64:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1eb66:	2b00      	cmp	r3, #0
   1eb68:	d06a      	beq.n	1ec40 <net_buf_alloc_len+0x140>
		if (pool->uninit_count < pool->buf_count) {
   1eb6a:	8c2a      	ldrh	r2, [r5, #32]
   1eb6c:	429a      	cmp	r2, r3
   1eb6e:	d947      	bls.n	1ec00 <net_buf_alloc_len+0x100>
	return z_impl_k_queue_get(queue, timeout);
   1eb70:	2200      	movs	r2, #0
   1eb72:	2300      	movs	r3, #0
   1eb74:	4628      	mov	r0, r5
   1eb76:	f005 fc41 	bl	243fc <z_impl_k_queue_get>
			if (buf) {
   1eb7a:	4604      	mov	r4, r0
   1eb7c:	2800      	cmp	r0, #0
   1eb7e:	d03f      	beq.n	1ec00 <net_buf_alloc_len+0x100>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eb80:	4650      	mov	r0, sl
   1eb82:	f005 fa47 	bl	24014 <z_spin_unlock_valid>
   1eb86:	b930      	cbnz	r0, 1eb96 <net_buf_alloc_len+0x96>
   1eb88:	4946      	ldr	r1, [pc, #280]	; (1eca4 <net_buf_alloc_len+0x1a4>)
   1eb8a:	4845      	ldr	r0, [pc, #276]	; (1eca0 <net_buf_alloc_len+0x1a0>)
   1eb8c:	22c2      	movs	r2, #194	; 0xc2
   1eb8e:	f00b fa5c 	bl	2a04a <assert_print>
   1eb92:	21c2      	movs	r1, #194	; 0xc2
   1eb94:	e7e0      	b.n	1eb58 <net_buf_alloc_len+0x58>
	__asm__ volatile(
   1eb96:	f38b 8811 	msr	BASEPRI, fp
   1eb9a:	f3bf 8f6f 	isb	sy
	if (size) {
   1eb9e:	9d03      	ldr	r5, [sp, #12]
   1eba0:	2d00      	cmp	r5, #0
   1eba2:	d06f      	beq.n	1ec84 <net_buf_alloc_len+0x184>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1eba4:	ea58 0309 	orrs.w	r3, r8, r9
   1eba8:	d010      	beq.n	1ebcc <net_buf_alloc_len+0xcc>
   1ebaa:	f1b8 3fff 	cmp.w	r8, #4294967295
   1ebae:	bf08      	it	eq
   1ebb0:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1ebb4:	d00a      	beq.n	1ebcc <net_buf_alloc_len+0xcc>
			int64_t remaining = end - sys_clock_tick_get();
   1ebb6:	f007 fc17 	bl	263e8 <sys_clock_tick_get>
   1ebba:	9b01      	ldr	r3, [sp, #4]
   1ebbc:	1a1f      	subs	r7, r3, r0
   1ebbe:	9b02      	ldr	r3, [sp, #8]
   1ebc0:	eb63 0601 	sbc.w	r6, r3, r1
			if (remaining <= 0) {
   1ebc4:	2e00      	cmp	r6, #0
   1ebc6:	bfbc      	itt	lt
   1ebc8:	2700      	movlt	r7, #0
   1ebca:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ebcc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1ebce:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1eca8 <net_buf_alloc_len+0x1a8>
   1ebd2:	f04f 0934 	mov.w	r9, #52	; 0x34
   1ebd6:	fb09 8303 	mla	r3, r9, r3, r8
   1ebda:	463a      	mov	r2, r7
   1ebdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ebde:	681b      	ldr	r3, [r3, #0]
   1ebe0:	a903      	add	r1, sp, #12
   1ebe2:	f8d3 a000 	ldr.w	sl, [r3]
   1ebe6:	4620      	mov	r0, r4
   1ebe8:	4633      	mov	r3, r6
   1ebea:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1ebec:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1ebee:	2800      	cmp	r0, #0
   1ebf0:	d13c      	bne.n	1ec6c <net_buf_alloc_len+0x16c>
	k_lifo_put(&pool->free, buf);
   1ebf2:	7aa0      	ldrb	r0, [r4, #10]
   1ebf4:	4621      	mov	r1, r4
   1ebf6:	fb00 8009 	mla	r0, r0, r9, r8
   1ebfa:	f00f f8d0 	bl	2dd9e <k_queue_prepend>
}
   1ebfe:	e030      	b.n	1ec62 <net_buf_alloc_len+0x162>
		uninit_count = pool->uninit_count--;
   1ec00:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1ec02:	1e63      	subs	r3, r4, #1
   1ec04:	846b      	strh	r3, [r5, #34]	; 0x22
   1ec06:	4650      	mov	r0, sl
   1ec08:	f005 fa04 	bl	24014 <z_spin_unlock_valid>
   1ec0c:	2800      	cmp	r0, #0
   1ec0e:	d0bb      	beq.n	1eb88 <net_buf_alloc_len+0x88>
   1ec10:	f38b 8811 	msr	BASEPRI, fp
   1ec14:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec18:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ec1c:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec1e:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1ec20:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ec22:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1ec24:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1ec28:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1ec2c:	4b1e      	ldr	r3, [pc, #120]	; (1eca8 <net_buf_alloc_len+0x1a8>)
   1ec2e:	4a1f      	ldr	r2, [pc, #124]	; (1ecac <net_buf_alloc_len+0x1ac>)
   1ec30:	1aeb      	subs	r3, r5, r3
   1ec32:	109b      	asrs	r3, r3, #2
   1ec34:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1ec36:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1ec38:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1ec3c:	72e3      	strb	r3, [r4, #11]
		goto success;
   1ec3e:	e7ae      	b.n	1eb9e <net_buf_alloc_len+0x9e>
   1ec40:	4650      	mov	r0, sl
   1ec42:	f005 f9e7 	bl	24014 <z_spin_unlock_valid>
   1ec46:	2800      	cmp	r0, #0
   1ec48:	d09e      	beq.n	1eb88 <net_buf_alloc_len+0x88>
   1ec4a:	f38b 8811 	msr	BASEPRI, fp
   1ec4e:	f3bf 8f6f 	isb	sy
   1ec52:	464a      	mov	r2, r9
   1ec54:	4643      	mov	r3, r8
   1ec56:	4628      	mov	r0, r5
   1ec58:	f005 fbd0 	bl	243fc <z_impl_k_queue_get>
	if (!buf) {
   1ec5c:	4604      	mov	r4, r0
   1ec5e:	2800      	cmp	r0, #0
   1ec60:	d19d      	bne.n	1eb9e <net_buf_alloc_len+0x9e>
		return NULL;
   1ec62:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ec64:	4620      	mov	r0, r4
   1ec66:	b005      	add	sp, #20
   1ec68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1ec6c:	9b03      	ldr	r3, [sp, #12]
   1ec6e:	429d      	cmp	r5, r3
   1ec70:	d909      	bls.n	1ec86 <net_buf_alloc_len+0x186>
   1ec72:	490a      	ldr	r1, [pc, #40]	; (1ec9c <net_buf_alloc_len+0x19c>)
   1ec74:	480a      	ldr	r0, [pc, #40]	; (1eca0 <net_buf_alloc_len+0x1a0>)
   1ec76:	f240 1255 	movw	r2, #341	; 0x155
   1ec7a:	f00b f9e6 	bl	2a04a <assert_print>
   1ec7e:	f240 1155 	movw	r1, #341	; 0x155
   1ec82:	e753      	b.n	1eb2c <net_buf_alloc_len+0x2c>
		buf->__buf = NULL;
   1ec84:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1ec86:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1ec88:	2201      	movs	r2, #1
	buf->frags = NULL;
   1ec8a:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1ec8c:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1ec8e:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1ec90:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1ec92:	6963      	ldr	r3, [r4, #20]
   1ec94:	8262      	strh	r2, [r4, #18]
   1ec96:	60e3      	str	r3, [r4, #12]
}
   1ec98:	e7e4      	b.n	1ec64 <net_buf_alloc_len+0x164>
   1ec9a:	bf00      	nop
   1ec9c:	000325be 	.word	0x000325be
   1eca0:	0002f2b5 	.word	0x0002f2b5
   1eca4:	0002f9fb 	.word	0x0002f9fb
   1eca8:	200009f4 	.word	0x200009f4
   1ecac:	c4ec4ec5 	.word	0xc4ec4ec5

0001ecb0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ecb0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ecb2:	b950      	cbnz	r0, 1ecca <net_buf_simple_reserve+0x1a>
   1ecb4:	490c      	ldr	r1, [pc, #48]	; (1ece8 <net_buf_simple_reserve+0x38>)
   1ecb6:	480d      	ldr	r0, [pc, #52]	; (1ecec <net_buf_simple_reserve+0x3c>)
   1ecb8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   1ecbc:	f00b f9c5 	bl	2a04a <assert_print>
   1ecc0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
	__ASSERT_NO_MSG(buf->len == 0U);
   1ecc4:	4808      	ldr	r0, [pc, #32]	; (1ece8 <net_buf_simple_reserve+0x38>)
   1ecc6:	f00b f9b9 	bl	2a03c <assert_post_action>
   1ecca:	8883      	ldrh	r3, [r0, #4]
   1eccc:	b143      	cbz	r3, 1ece0 <net_buf_simple_reserve+0x30>
   1ecce:	4906      	ldr	r1, [pc, #24]	; (1ece8 <net_buf_simple_reserve+0x38>)
   1ecd0:	4806      	ldr	r0, [pc, #24]	; (1ecec <net_buf_simple_reserve+0x3c>)
   1ecd2:	f240 12b9 	movw	r2, #441	; 0x1b9
   1ecd6:	f00b f9b8 	bl	2a04a <assert_print>
   1ecda:	f240 11b9 	movw	r1, #441	; 0x1b9
   1ecde:	e7f1      	b.n	1ecc4 <net_buf_simple_reserve+0x14>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ece0:	6883      	ldr	r3, [r0, #8]
   1ece2:	440b      	add	r3, r1
   1ece4:	6003      	str	r3, [r0, #0]
}
   1ece6:	bd08      	pop	{r3, pc}
   1ece8:	000325be 	.word	0x000325be
   1ecec:	0002f2b5 	.word	0x0002f2b5

0001ecf0 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ecf0:	b570      	push	{r4, r5, r6, lr}
   1ecf2:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ecf4:	4605      	mov	r5, r0
   1ecf6:	b950      	cbnz	r0, 1ed0e <net_buf_slist_put+0x1e>
   1ecf8:	4922      	ldr	r1, [pc, #136]	; (1ed84 <net_buf_slist_put+0x94>)
   1ecfa:	4823      	ldr	r0, [pc, #140]	; (1ed88 <net_buf_slist_put+0x98>)
   1ecfc:	f240 12c5 	movw	r2, #453	; 0x1c5
   1ed00:	f00b f9a3 	bl	2a04a <assert_print>
   1ed04:	f240 11c5 	movw	r1, #453	; 0x1c5
	__ASSERT_NO_MSG(buf);
   1ed08:	481e      	ldr	r0, [pc, #120]	; (1ed84 <net_buf_slist_put+0x94>)
   1ed0a:	f00b f997 	bl	2a03c <assert_post_action>
   1ed0e:	b941      	cbnz	r1, 1ed22 <net_buf_slist_put+0x32>
   1ed10:	491c      	ldr	r1, [pc, #112]	; (1ed84 <net_buf_slist_put+0x94>)
   1ed12:	481d      	ldr	r0, [pc, #116]	; (1ed88 <net_buf_slist_put+0x98>)
   1ed14:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
   1ed18:	f00b f997 	bl	2a04a <assert_print>
   1ed1c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   1ed20:	e7f2      	b.n	1ed08 <net_buf_slist_put+0x18>
	__asm__ volatile(
   1ed22:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ed26:	f3ef 8611 	mrs	r6, BASEPRI
   1ed2a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ed2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ed32:	4816      	ldr	r0, [pc, #88]	; (1ed8c <net_buf_slist_put+0x9c>)
   1ed34:	f005 f960 	bl	23ff8 <z_spin_lock_valid>
   1ed38:	b938      	cbnz	r0, 1ed4a <net_buf_slist_put+0x5a>
   1ed3a:	4915      	ldr	r1, [pc, #84]	; (1ed90 <net_buf_slist_put+0xa0>)
   1ed3c:	4812      	ldr	r0, [pc, #72]	; (1ed88 <net_buf_slist_put+0x98>)
   1ed3e:	2294      	movs	r2, #148	; 0x94
   1ed40:	f00b f983 	bl	2a04a <assert_print>
   1ed44:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed46:	4812      	ldr	r0, [pc, #72]	; (1ed90 <net_buf_slist_put+0xa0>)
   1ed48:	e7df      	b.n	1ed0a <net_buf_slist_put+0x1a>
	z_spin_lock_set_owner(l);
   1ed4a:	4810      	ldr	r0, [pc, #64]	; (1ed8c <net_buf_slist_put+0x9c>)
   1ed4c:	f005 f972 	bl	24034 <z_spin_lock_set_owner>
	parent->next = child;
   1ed50:	2300      	movs	r3, #0
   1ed52:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ed54:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ed56:	b963      	cbnz	r3, 1ed72 <net_buf_slist_put+0x82>
	list->head = node;
   1ed58:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ed5c:	480b      	ldr	r0, [pc, #44]	; (1ed8c <net_buf_slist_put+0x9c>)
   1ed5e:	f005 f959 	bl	24014 <z_spin_unlock_valid>
   1ed62:	b948      	cbnz	r0, 1ed78 <net_buf_slist_put+0x88>
   1ed64:	490a      	ldr	r1, [pc, #40]	; (1ed90 <net_buf_slist_put+0xa0>)
   1ed66:	4808      	ldr	r0, [pc, #32]	; (1ed88 <net_buf_slist_put+0x98>)
   1ed68:	22c2      	movs	r2, #194	; 0xc2
   1ed6a:	f00b f96e 	bl	2a04a <assert_print>
   1ed6e:	21c2      	movs	r1, #194	; 0xc2
   1ed70:	e7e9      	b.n	1ed46 <net_buf_slist_put+0x56>
	parent->next = child;
   1ed72:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ed74:	606c      	str	r4, [r5, #4]
}
   1ed76:	e7f1      	b.n	1ed5c <net_buf_slist_put+0x6c>
	__asm__ volatile(
   1ed78:	f386 8811 	msr	BASEPRI, r6
   1ed7c:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1ed80:	bd70      	pop	{r4, r5, r6, pc}
   1ed82:	bf00      	nop
   1ed84:	000325be 	.word	0x000325be
   1ed88:	0002f2b5 	.word	0x0002f2b5
   1ed8c:	20003348 	.word	0x20003348
   1ed90:	0002f9fb 	.word	0x0002f9fb

0001ed94 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1ed94:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ed96:	4604      	mov	r4, r0
   1ed98:	b950      	cbnz	r0, 1edb0 <net_buf_slist_get+0x1c>
   1ed9a:	491d      	ldr	r1, [pc, #116]	; (1ee10 <net_buf_slist_get+0x7c>)
   1ed9c:	481d      	ldr	r0, [pc, #116]	; (1ee14 <net_buf_slist_get+0x80>)
   1ed9e:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1eda2:	f00b f952 	bl	2a04a <assert_print>
   1eda6:	481a      	ldr	r0, [pc, #104]	; (1ee10 <net_buf_slist_get+0x7c>)
   1eda8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1edac:	f00b f946 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   1edb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1edb4:	f3ef 8611 	mrs	r6, BASEPRI
   1edb8:	f383 8812 	msr	BASEPRI_MAX, r3
   1edbc:	f3bf 8f6f 	isb	sy
   1edc0:	4815      	ldr	r0, [pc, #84]	; (1ee18 <net_buf_slist_get+0x84>)
   1edc2:	f005 f919 	bl	23ff8 <z_spin_lock_valid>
   1edc6:	b938      	cbnz	r0, 1edd8 <net_buf_slist_get+0x44>
   1edc8:	4914      	ldr	r1, [pc, #80]	; (1ee1c <net_buf_slist_get+0x88>)
   1edca:	4812      	ldr	r0, [pc, #72]	; (1ee14 <net_buf_slist_get+0x80>)
   1edcc:	2294      	movs	r2, #148	; 0x94
   1edce:	f00b f93c 	bl	2a04a <assert_print>
   1edd2:	2194      	movs	r1, #148	; 0x94
   1edd4:	4811      	ldr	r0, [pc, #68]	; (1ee1c <net_buf_slist_get+0x88>)
   1edd6:	e7e9      	b.n	1edac <net_buf_slist_get+0x18>
	z_spin_lock_set_owner(l);
   1edd8:	480f      	ldr	r0, [pc, #60]	; (1ee18 <net_buf_slist_get+0x84>)
   1edda:	f005 f92b 	bl	24034 <z_spin_lock_set_owner>
	return list->head;
   1edde:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1ede0:	b12d      	cbz	r5, 1edee <net_buf_slist_get+0x5a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ede2:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1ede4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ede6:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ede8:	4295      	cmp	r5, r2
	list->tail = node;
   1edea:	bf08      	it	eq
   1edec:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1edee:	480a      	ldr	r0, [pc, #40]	; (1ee18 <net_buf_slist_get+0x84>)
   1edf0:	f005 f910 	bl	24014 <z_spin_unlock_valid>
   1edf4:	b930      	cbnz	r0, 1ee04 <net_buf_slist_get+0x70>
   1edf6:	4909      	ldr	r1, [pc, #36]	; (1ee1c <net_buf_slist_get+0x88>)
   1edf8:	4806      	ldr	r0, [pc, #24]	; (1ee14 <net_buf_slist_get+0x80>)
   1edfa:	22c2      	movs	r2, #194	; 0xc2
   1edfc:	f00b f925 	bl	2a04a <assert_print>
   1ee00:	21c2      	movs	r1, #194	; 0xc2
   1ee02:	e7e7      	b.n	1edd4 <net_buf_slist_get+0x40>
	__asm__ volatile(
   1ee04:	f386 8811 	msr	BASEPRI, r6
   1ee08:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1ee0c:	4628      	mov	r0, r5
   1ee0e:	bd70      	pop	{r4, r5, r6, pc}
   1ee10:	000325be 	.word	0x000325be
   1ee14:	0002f2b5 	.word	0x0002f2b5
   1ee18:	20003348 	.word	0x20003348
   1ee1c:	0002f9fb 	.word	0x0002f9fb

0001ee20 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ee20:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1ee22:	b950      	cbnz	r0, 1ee3a <net_buf_put+0x1a>
   1ee24:	490c      	ldr	r1, [pc, #48]	; (1ee58 <net_buf_put+0x38>)
   1ee26:	480d      	ldr	r0, [pc, #52]	; (1ee5c <net_buf_put+0x3c>)
   1ee28:	f240 12df 	movw	r2, #479	; 0x1df
   1ee2c:	f00b f90d 	bl	2a04a <assert_print>
   1ee30:	f240 11df 	movw	r1, #479	; 0x1df
	__ASSERT_NO_MSG(buf);
   1ee34:	4808      	ldr	r0, [pc, #32]	; (1ee58 <net_buf_put+0x38>)
   1ee36:	f00b f901 	bl	2a03c <assert_post_action>
   1ee3a:	b941      	cbnz	r1, 1ee4e <net_buf_put+0x2e>
   1ee3c:	4906      	ldr	r1, [pc, #24]	; (1ee58 <net_buf_put+0x38>)
   1ee3e:	4807      	ldr	r0, [pc, #28]	; (1ee5c <net_buf_put+0x3c>)
   1ee40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ee44:	f00b f901 	bl	2a04a <assert_print>
   1ee48:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ee4c:	e7f2      	b.n	1ee34 <net_buf_put+0x14>

	k_fifo_put(fifo, buf);
}
   1ee4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1ee52:	f00e bf99 	b.w	2dd88 <k_queue_append>
   1ee56:	bf00      	nop
   1ee58:	000325be 	.word	0x000325be
   1ee5c:	0002f2b5 	.word	0x0002f2b5

0001ee60 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ee60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1ee64:	4605      	mov	r5, r0
   1ee66:	b328      	cbz	r0, 1eeb4 <net_buf_unref+0x54>
   1ee68:	4e1b      	ldr	r6, [pc, #108]	; (1eed8 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1ee6a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1ee6c:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1ee70:	462c      	mov	r4, r5
   1ee72:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1ee74:	7a23      	ldrb	r3, [r4, #8]
   1ee76:	3b01      	subs	r3, #1
   1ee78:	b2db      	uxtb	r3, r3
   1ee7a:	7223      	strb	r3, [r4, #8]
   1ee7c:	b9c3      	cbnz	r3, 1eeb0 <net_buf_unref+0x50>
		if (buf->__buf) {
   1ee7e:	6961      	ldr	r1, [r4, #20]
   1ee80:	b159      	cbz	r1, 1ee9a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1ee82:	7a63      	ldrb	r3, [r4, #9]
   1ee84:	07db      	lsls	r3, r3, #31
   1ee86:	d407      	bmi.n	1ee98 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ee88:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1ee8a:	fb08 6303 	mla	r3, r8, r3, r6
   1ee8e:	4620      	mov	r0, r4
   1ee90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ee92:	681b      	ldr	r3, [r3, #0]
   1ee94:	689b      	ldr	r3, [r3, #8]
   1ee96:	4798      	blx	r3
			buf->__buf = NULL;
   1ee98:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1ee9a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1ee9c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ee9e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1eea2:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1eea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1eea6:	b183      	cbz	r3, 1eeca <net_buf_unref+0x6a>
			pool->destroy(buf);
   1eea8:	4620      	mov	r0, r4
   1eeaa:	4798      	blx	r3
	while (buf) {
   1eeac:	2d00      	cmp	r5, #0
   1eeae:	d1df      	bne.n	1ee70 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1eeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1eeb4:	4909      	ldr	r1, [pc, #36]	; (1eedc <net_buf_unref+0x7c>)
   1eeb6:	480a      	ldr	r0, [pc, #40]	; (1eee0 <net_buf_unref+0x80>)
   1eeb8:	f240 12eb 	movw	r2, #491	; 0x1eb
   1eebc:	f00b f8c5 	bl	2a04a <assert_print>
   1eec0:	4806      	ldr	r0, [pc, #24]	; (1eedc <net_buf_unref+0x7c>)
   1eec2:	f240 11eb 	movw	r1, #491	; 0x1eb
   1eec6:	f00b f8b9 	bl	2a03c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1eeca:	4621      	mov	r1, r4
   1eecc:	fb00 6008 	mla	r0, r0, r8, r6
   1eed0:	f00e ff65 	bl	2dd9e <k_queue_prepend>
}
   1eed4:	e7ea      	b.n	1eeac <net_buf_unref+0x4c>
   1eed6:	bf00      	nop
   1eed8:	200009f4 	.word	0x200009f4
   1eedc:	000325be 	.word	0x000325be
   1eee0:	0002f2b5 	.word	0x0002f2b5

0001eee4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1eee4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1eee6:	b950      	cbnz	r0, 1eefe <net_buf_ref+0x1a>
   1eee8:	4907      	ldr	r1, [pc, #28]	; (1ef08 <net_buf_ref+0x24>)
   1eeea:	4808      	ldr	r0, [pc, #32]	; (1ef0c <net_buf_ref+0x28>)
   1eeec:	f240 221a 	movw	r2, #538	; 0x21a
   1eef0:	f00b f8ab 	bl	2a04a <assert_print>
   1eef4:	4804      	ldr	r0, [pc, #16]	; (1ef08 <net_buf_ref+0x24>)
   1eef6:	f240 211a 	movw	r1, #538	; 0x21a
   1eefa:	f00b f89f 	bl	2a03c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1eefe:	7a02      	ldrb	r2, [r0, #8]
   1ef00:	3201      	adds	r2, #1
   1ef02:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1ef04:	bd08      	pop	{r3, pc}
   1ef06:	bf00      	nop
   1ef08:	000325be 	.word	0x000325be
   1ef0c:	0002f2b5 	.word	0x0002f2b5

0001ef10 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1ef10:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1ef12:	4603      	mov	r3, r0
   1ef14:	b950      	cbnz	r0, 1ef2c <net_buf_frag_last+0x1c>
   1ef16:	4908      	ldr	r1, [pc, #32]	; (1ef38 <net_buf_frag_last+0x28>)
   1ef18:	4808      	ldr	r0, [pc, #32]	; (1ef3c <net_buf_frag_last+0x2c>)
   1ef1a:	f240 2257 	movw	r2, #599	; 0x257
   1ef1e:	f00b f894 	bl	2a04a <assert_print>
   1ef22:	4805      	ldr	r0, [pc, #20]	; (1ef38 <net_buf_frag_last+0x28>)
   1ef24:	f240 2157 	movw	r1, #599	; 0x257
   1ef28:	f00b f888 	bl	2a03c <assert_post_action>

	while (buf->frags) {
   1ef2c:	4618      	mov	r0, r3
   1ef2e:	685b      	ldr	r3, [r3, #4]
   1ef30:	2b00      	cmp	r3, #0
   1ef32:	d1fb      	bne.n	1ef2c <net_buf_frag_last+0x1c>
		buf = buf->frags;
	}

	return buf;
}
   1ef34:	bd08      	pop	{r3, pc}
   1ef36:	bf00      	nop
   1ef38:	000325be 	.word	0x000325be
   1ef3c:	0002f2b5 	.word	0x0002f2b5

0001ef40 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1ef40:	b570      	push	{r4, r5, r6, lr}
   1ef42:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1ef44:	4604      	mov	r4, r0
   1ef46:	b950      	cbnz	r0, 1ef5e <net_buf_frag_insert+0x1e>
   1ef48:	490e      	ldr	r1, [pc, #56]	; (1ef84 <net_buf_frag_insert+0x44>)
   1ef4a:	480f      	ldr	r0, [pc, #60]	; (1ef88 <net_buf_frag_insert+0x48>)
   1ef4c:	f240 2262 	movw	r2, #610	; 0x262
   1ef50:	f00b f87b 	bl	2a04a <assert_print>
   1ef54:	f240 2162 	movw	r1, #610	; 0x262
	__ASSERT_NO_MSG(frag);
   1ef58:	480a      	ldr	r0, [pc, #40]	; (1ef84 <net_buf_frag_insert+0x44>)
   1ef5a:	f00b f86f 	bl	2a03c <assert_post_action>
   1ef5e:	b941      	cbnz	r1, 1ef72 <net_buf_frag_insert+0x32>
   1ef60:	4908      	ldr	r1, [pc, #32]	; (1ef84 <net_buf_frag_insert+0x44>)
   1ef62:	4809      	ldr	r0, [pc, #36]	; (1ef88 <net_buf_frag_insert+0x48>)
   1ef64:	f240 2263 	movw	r2, #611	; 0x263
   1ef68:	f00b f86f 	bl	2a04a <assert_print>
   1ef6c:	f240 2163 	movw	r1, #611	; 0x263
   1ef70:	e7f2      	b.n	1ef58 <net_buf_frag_insert+0x18>

	if (parent->frags) {
   1ef72:	6846      	ldr	r6, [r0, #4]
   1ef74:	b11e      	cbz	r6, 1ef7e <net_buf_frag_insert+0x3e>
		net_buf_frag_last(frag)->frags = parent->frags;
   1ef76:	4608      	mov	r0, r1
   1ef78:	f7ff ffca 	bl	1ef10 <net_buf_frag_last>
   1ef7c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1ef7e:	6065      	str	r5, [r4, #4]
}
   1ef80:	bd70      	pop	{r4, r5, r6, pc}
   1ef82:	bf00      	nop
   1ef84:	000325be 	.word	0x000325be
   1ef88:	0002f2b5 	.word	0x0002f2b5

0001ef8c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1ef8c:	b538      	push	{r3, r4, r5, lr}
   1ef8e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1ef90:	460c      	mov	r4, r1
   1ef92:	b951      	cbnz	r1, 1efaa <net_buf_frag_add+0x1e>
   1ef94:	490b      	ldr	r1, [pc, #44]	; (1efc4 <net_buf_frag_add+0x38>)
   1ef96:	480c      	ldr	r0, [pc, #48]	; (1efc8 <net_buf_frag_add+0x3c>)
   1ef98:	f240 226e 	movw	r2, #622	; 0x26e
   1ef9c:	f00b f855 	bl	2a04a <assert_print>
   1efa0:	4808      	ldr	r0, [pc, #32]	; (1efc4 <net_buf_frag_add+0x38>)
   1efa2:	f240 216e 	movw	r1, #622	; 0x26e
   1efa6:	f00b f849 	bl	2a03c <assert_post_action>

	if (!head) {
   1efaa:	b920      	cbnz	r0, 1efb6 <net_buf_frag_add+0x2a>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1efac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1efb0:	4608      	mov	r0, r1
   1efb2:	f7ff bf97 	b.w	1eee4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1efb6:	f7ff ffab 	bl	1ef10 <net_buf_frag_last>
   1efba:	4621      	mov	r1, r4
   1efbc:	f7ff ffc0 	bl	1ef40 <net_buf_frag_insert>
}
   1efc0:	4628      	mov	r0, r5
   1efc2:	bd38      	pop	{r3, r4, r5, pc}
   1efc4:	000325be 	.word	0x000325be
   1efc8:	0002f2b5 	.word	0x0002f2b5

0001efcc <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1efcc:	b508      	push	{r3, lr}
   1efce:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1efd0:	6800      	ldr	r0, [r0, #0]
   1efd2:	689a      	ldr	r2, [r3, #8]
   1efd4:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1efd6:	4291      	cmp	r1, r2
   1efd8:	d90a      	bls.n	1eff0 <net_buf_simple_push+0x24>
   1efda:	4908      	ldr	r1, [pc, #32]	; (1effc <net_buf_simple_push+0x30>)
   1efdc:	4808      	ldr	r0, [pc, #32]	; (1f000 <net_buf_simple_push+0x34>)
   1efde:	f240 32f2 	movw	r2, #1010	; 0x3f2
   1efe2:	f00b f832 	bl	2a04a <assert_print>
   1efe6:	4805      	ldr	r0, [pc, #20]	; (1effc <net_buf_simple_push+0x30>)
   1efe8:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1efec:	f00b f826 	bl	2a03c <assert_post_action>
	buf->len += len;
   1eff0:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1eff2:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1eff4:	4411      	add	r1, r2
	buf->data -= len;
   1eff6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1eff8:	8099      	strh	r1, [r3, #4]
}
   1effa:	bd08      	pop	{r3, pc}
   1effc:	000325be 	.word	0x000325be
   1f000:	0002f2b5 	.word	0x0002f2b5

0001f004 <net_buf_simple_pull>:
{
   1f004:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1f006:	8882      	ldrh	r2, [r0, #4]
   1f008:	428a      	cmp	r2, r1
{
   1f00a:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1f00c:	d20a      	bcs.n	1f024 <net_buf_simple_pull+0x20>
   1f00e:	4908      	ldr	r1, [pc, #32]	; (1f030 <net_buf_simple_pull+0x2c>)
   1f010:	4808      	ldr	r0, [pc, #32]	; (1f034 <net_buf_simple_pull+0x30>)
   1f012:	f240 4252 	movw	r2, #1106	; 0x452
   1f016:	f00b f818 	bl	2a04a <assert_print>
   1f01a:	4805      	ldr	r0, [pc, #20]	; (1f030 <net_buf_simple_pull+0x2c>)
   1f01c:	f240 4152 	movw	r1, #1106	; 0x452
   1f020:	f00b f80c 	bl	2a03c <assert_post_action>
	buf->len -= len;
   1f024:	1a52      	subs	r2, r2, r1
   1f026:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1f028:	6800      	ldr	r0, [r0, #0]
   1f02a:	4408      	add	r0, r1
   1f02c:	6018      	str	r0, [r3, #0]
}
   1f02e:	bd08      	pop	{r3, pc}
   1f030:	000325be 	.word	0x000325be
   1f034:	0002f2b5 	.word	0x0002f2b5

0001f038 <net_buf_simple_pull_mem>:
{
   1f038:	b508      	push	{r3, lr}
   1f03a:	4603      	mov	r3, r0
	void *data = buf->data;
   1f03c:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1f03e:	889a      	ldrh	r2, [r3, #4]
   1f040:	428a      	cmp	r2, r1
   1f042:	d20a      	bcs.n	1f05a <net_buf_simple_pull_mem+0x22>
   1f044:	4907      	ldr	r1, [pc, #28]	; (1f064 <net_buf_simple_pull_mem+0x2c>)
   1f046:	4808      	ldr	r0, [pc, #32]	; (1f068 <net_buf_simple_pull_mem+0x30>)
   1f048:	f240 425e 	movw	r2, #1118	; 0x45e
   1f04c:	f00a fffd 	bl	2a04a <assert_print>
   1f050:	4804      	ldr	r0, [pc, #16]	; (1f064 <net_buf_simple_pull_mem+0x2c>)
   1f052:	f240 415e 	movw	r1, #1118	; 0x45e
   1f056:	f00a fff1 	bl	2a03c <assert_post_action>
	buf->len -= len;
   1f05a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1f05c:	4401      	add	r1, r0
	buf->len -= len;
   1f05e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1f060:	6019      	str	r1, [r3, #0]
}
   1f062:	bd08      	pop	{r3, pc}
   1f064:	000325be 	.word	0x000325be
   1f068:	0002f2b5 	.word	0x0002f2b5

0001f06c <net_buf_simple_add>:
{
   1f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1f06e:	8885      	ldrh	r5, [r0, #4]
   1f070:	6803      	ldr	r3, [r0, #0]
   1f072:	460e      	mov	r6, r1
   1f074:	4604      	mov	r4, r0
   1f076:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1f078:	f00e f9cd 	bl	2d416 <net_buf_simple_tailroom>
   1f07c:	42b0      	cmp	r0, r6
   1f07e:	d20a      	bcs.n	1f096 <net_buf_simple_add+0x2a>
   1f080:	4907      	ldr	r1, [pc, #28]	; (1f0a0 <net_buf_simple_add+0x34>)
   1f082:	4808      	ldr	r0, [pc, #32]	; (1f0a4 <net_buf_simple_add+0x38>)
   1f084:	f240 3203 	movw	r2, #771	; 0x303
   1f088:	f00a ffdf 	bl	2a04a <assert_print>
   1f08c:	4804      	ldr	r0, [pc, #16]	; (1f0a0 <net_buf_simple_add+0x34>)
   1f08e:	f240 3103 	movw	r1, #771	; 0x303
   1f092:	f00a ffd3 	bl	2a03c <assert_post_action>
	buf->len += len;
   1f096:	4435      	add	r5, r6
   1f098:	80a5      	strh	r5, [r4, #4]
}
   1f09a:	4638      	mov	r0, r7
   1f09c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f09e:	bf00      	nop
   1f0a0:	000325be 	.word	0x000325be
   1f0a4:	0002f2b5 	.word	0x0002f2b5

0001f0a8 <net_buf_append_bytes>:
{
   1f0a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f0ac:	4606      	mov	r6, r0
   1f0ae:	460c      	mov	r4, r1
   1f0b0:	4615      	mov	r5, r2
	struct net_buf *frag = net_buf_frag_last(buf);
   1f0b2:	f7ff ff2d 	bl	1ef10 <net_buf_frag_last>
	return &_net_buf_pool_list[id];
   1f0b6:	f8df a068 	ldr.w	sl, [pc, #104]	; 1f120 <net_buf_append_bytes+0x78>
	struct net_buf *frag = net_buf_frag_last(buf);
   1f0ba:	4683      	mov	fp, r0
	size_t added_len = 0;
   1f0bc:	2700      	movs	r7, #0
	return &_net_buf_pool_list[id];
   1f0be:	f04f 0934 	mov.w	r9, #52	; 0x34
	return net_buf_simple_tailroom(&buf->b);
   1f0c2:	f10b 0b0c 	add.w	fp, fp, #12
   1f0c6:	4658      	mov	r0, fp
   1f0c8:	f00e f9a5 	bl	2d416 <net_buf_simple_tailroom>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1f0cc:	4284      	cmp	r4, r0
   1f0ce:	bf2c      	ite	cs
   1f0d0:	fa1f f880 	uxthcs.w	r8, r0
   1f0d4:	fa1f f884 	uxthcc.w	r8, r4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1f0d8:	4629      	mov	r1, r5
   1f0da:	4642      	mov	r2, r8
   1f0dc:	4658      	mov	r0, fp
   1f0de:	f00e f9a2 	bl	2d426 <net_buf_simple_add_mem>
		if (len == 0) {
   1f0e2:	ebb4 0408 	subs.w	r4, r4, r8
		added_len += count;
   1f0e6:	4447      	add	r7, r8
		value8 += count;
   1f0e8:	4445      	add	r5, r8
		if (len == 0) {
   1f0ea:	d015      	beq.n	1f118 <net_buf_append_bytes+0x70>
		if (allocate_cb) {
   1f0ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f0ee:	b153      	cbz	r3, 1f106 <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   1f0f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f0f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f0f6:	4798      	blx	r3
			frag = net_buf_alloc_len(pool, len, timeout);
   1f0f8:	4683      	mov	fp, r0
		if (!frag) {
   1f0fa:	b168      	cbz	r0, 1f118 <net_buf_append_bytes+0x70>
		net_buf_frag_add(buf, frag);
   1f0fc:	4601      	mov	r1, r0
   1f0fe:	4630      	mov	r0, r6
   1f100:	f7ff ff44 	bl	1ef8c <net_buf_frag_add>
	do {
   1f104:	e7dd      	b.n	1f0c2 <net_buf_append_bytes+0x1a>
	return &_net_buf_pool_list[id];
   1f106:	7ab0      	ldrb	r0, [r6, #10]
			frag = net_buf_alloc_len(pool, len, timeout);
   1f108:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f10c:	4621      	mov	r1, r4
   1f10e:	fb00 a009 	mla	r0, r0, r9, sl
   1f112:	f7ff fcf5 	bl	1eb00 <net_buf_alloc_len>
   1f116:	e7ef      	b.n	1f0f8 <net_buf_append_bytes+0x50>
}
   1f118:	4638      	mov	r0, r7
   1f11a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f11e:	bf00      	nop
   1f120:	200009f4 	.word	0x200009f4

0001f124 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1f124:	b508      	push	{r3, lr}
   1f126:	4804      	ldr	r0, [pc, #16]	; (1f138 <xoshiro128_initialize+0x14>)
   1f128:	f00e fdb6 	bl	2dc98 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1f12c:	2800      	cmp	r0, #0
}
   1f12e:	bf0c      	ite	eq
   1f130:	f06f 0012 	mvneq.w	r0, #18
   1f134:	2000      	movne	r0, #0
   1f136:	bd08      	pop	{r3, pc}
   1f138:	0002e214 	.word	0x0002e214

0001f13c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1f13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f13e:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f140:	490a      	ldr	r1, [pc, #40]	; (1f16c <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f142:	4a0b      	ldr	r2, [pc, #44]	; (1f170 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1f144:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f146:	2340      	movs	r3, #64	; 0x40
   1f148:	9300      	str	r3, [sp, #0]
   1f14a:	1149      	asrs	r1, r1, #5
{
   1f14c:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1f14e:	4623      	mov	r3, r4
   1f150:	4808      	ldr	r0, [pc, #32]	; (1f174 <onoff_start+0x38>)
   1f152:	f00e f997 	bl	2d484 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1f156:	1e01      	subs	r1, r0, #0
   1f158:	da05      	bge.n	1f166 <onoff_start+0x2a>
		notify(mgr, err);
   1f15a:	4628      	mov	r0, r5
   1f15c:	4623      	mov	r3, r4
	}
}
   1f15e:	b003      	add	sp, #12
   1f160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1f164:	4718      	bx	r3
}
   1f166:	b003      	add	sp, #12
   1f168:	bd30      	pop	{r4, r5, pc}
   1f16a:	bf00      	nop
   1f16c:	20003360 	.word	0x20003360
   1f170:	0002d4ef 	.word	0x0002d4ef
   1f174:	0002e19c 	.word	0x0002e19c

0001f178 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f178:	b2c9      	uxtb	r1, r1
   1f17a:	2901      	cmp	r1, #1
{
   1f17c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f17e:	d908      	bls.n	1f192 <get_status+0x1a>
   1f180:	4908      	ldr	r1, [pc, #32]	; (1f1a4 <get_status+0x2c>)
   1f182:	4809      	ldr	r0, [pc, #36]	; (1f1a8 <get_status+0x30>)
   1f184:	227a      	movs	r2, #122	; 0x7a
   1f186:	f00a ff60 	bl	2a04a <assert_print>
   1f18a:	4806      	ldr	r0, [pc, #24]	; (1f1a4 <get_status+0x2c>)
   1f18c:	217a      	movs	r1, #122	; 0x7a
   1f18e:	f00a ff55 	bl	2a03c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f192:	6903      	ldr	r3, [r0, #16]
   1f194:	220c      	movs	r2, #12
   1f196:	fb01 3302 	mla	r3, r1, r2, r3
   1f19a:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1f19c:	f000 0007 	and.w	r0, r0, #7
   1f1a0:	bd08      	pop	{r3, pc}
   1f1a2:	bf00      	nop
   1f1a4:	000325ea 	.word	0x000325ea
   1f1a8:	0002f2b5 	.word	0x0002f2b5

0001f1ac <stop>:
{
   1f1ac:	b570      	push	{r4, r5, r6, lr}
   1f1ae:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1b0:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1f1b2:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1f1b4:	d90a      	bls.n	1f1cc <stop+0x20>
   1f1b6:	4918      	ldr	r1, [pc, #96]	; (1f218 <stop+0x6c>)
   1f1b8:	4818      	ldr	r0, [pc, #96]	; (1f21c <stop+0x70>)
   1f1ba:	f240 125d 	movw	r2, #349	; 0x15d
   1f1be:	f00a ff44 	bl	2a04a <assert_print>
   1f1c2:	4815      	ldr	r0, [pc, #84]	; (1f218 <stop+0x6c>)
   1f1c4:	f240 115d 	movw	r1, #349	; 0x15d
   1f1c8:	f00a ff38 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   1f1cc:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f1d0:	f3ef 8511 	mrs	r5, BASEPRI
   1f1d4:	f384 8812 	msr	BASEPRI_MAX, r4
   1f1d8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f1dc:	260c      	movs	r6, #12
   1f1de:	fb06 3401 	mla	r4, r6, r1, r3
   1f1e2:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f1e4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1f1e8:	d008      	beq.n	1f1fc <stop+0x50>
   1f1ea:	42a2      	cmp	r2, r4
   1f1ec:	d006      	beq.n	1f1fc <stop+0x50>
	__asm__ volatile(
   1f1ee:	f385 8811 	msr	BASEPRI, r5
   1f1f2:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1f1f6:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f1fa:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f1fc:	4371      	muls	r1, r6
   1f1fe:	440b      	add	r3, r1
   1f200:	2201      	movs	r2, #1
   1f202:	649a      	str	r2, [r3, #72]	; 0x48
   1f204:	f385 8811 	msr	BASEPRI, r5
   1f208:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1f20c:	6843      	ldr	r3, [r0, #4]
   1f20e:	440b      	add	r3, r1
   1f210:	685b      	ldr	r3, [r3, #4]
   1f212:	4798      	blx	r3
	return 0;
   1f214:	2000      	movs	r0, #0
   1f216:	e7f0      	b.n	1f1fa <stop+0x4e>
   1f218:	000325ea 	.word	0x000325ea
   1f21c:	0002f2b5 	.word	0x0002f2b5

0001f220 <onoff_stop>:
{
   1f220:	b570      	push	{r4, r5, r6, lr}
   1f222:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1f224:	4906      	ldr	r1, [pc, #24]	; (1f240 <onoff_stop+0x20>)
   1f226:	1a41      	subs	r1, r0, r1
{
   1f228:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f22a:	1149      	asrs	r1, r1, #5
   1f22c:	4805      	ldr	r0, [pc, #20]	; (1f244 <onoff_stop+0x24>)
   1f22e:	2240      	movs	r2, #64	; 0x40
   1f230:	f7ff ffbc 	bl	1f1ac <stop>
	notify(mgr, res);
   1f234:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1f236:	4601      	mov	r1, r0
	notify(mgr, res);
   1f238:	4620      	mov	r0, r4
}
   1f23a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1f23e:	4718      	bx	r3
   1f240:	20003360 	.word	0x20003360
   1f244:	0002e19c 	.word	0x0002e19c

0001f248 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f248:	2200      	movs	r2, #0
{
   1f24a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f24c:	2101      	movs	r1, #1
{
   1f24e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1f250:	4610      	mov	r0, r2
   1f252:	f7f5 fcfb 	bl	14c4c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1f256:	480f      	ldr	r0, [pc, #60]	; (1f294 <clk_init+0x4c>)
   1f258:	f003 f846 	bl	222e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1f25c:	4b0e      	ldr	r3, [pc, #56]	; (1f298 <clk_init+0x50>)
   1f25e:	4298      	cmp	r0, r3
   1f260:	d115      	bne.n	1f28e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1f262:	f00e fc4b 	bl	2dafc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1f266:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f268:	490c      	ldr	r1, [pc, #48]	; (1f29c <clk_init+0x54>)
   1f26a:	4630      	mov	r0, r6
   1f26c:	f00a fe62 	bl	29f34 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1f270:	2800      	cmp	r0, #0
   1f272:	db0b      	blt.n	1f28c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f274:	2501      	movs	r5, #1
   1f276:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1f278:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1f27a:	4908      	ldr	r1, [pc, #32]	; (1f29c <clk_init+0x54>)
   1f27c:	f104 0020 	add.w	r0, r4, #32
   1f280:	f00a fe58 	bl	29f34 <onoff_manager_init>
		if (err < 0) {
   1f284:	2800      	cmp	r0, #0
   1f286:	db01      	blt.n	1f28c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1f288:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1f28a:	2000      	movs	r0, #0
}
   1f28c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1f28e:	f06f 0004 	mvn.w	r0, #4
   1f292:	e7fb      	b.n	1f28c <clk_init+0x44>
   1f294:	0001f2d5 	.word	0x0001f2d5
   1f298:	0bad0000 	.word	0x0bad0000
   1f29c:	0002ecb0 	.word	0x0002ecb0

0001f2a0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1f2a0:	b570      	push	{r4, r5, r6, lr}
   1f2a2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1f2a4:	230c      	movs	r3, #12
   1f2a6:	4809      	ldr	r0, [pc, #36]	; (1f2cc <clkstarted_handle.constprop.0+0x2c>)
   1f2a8:	434b      	muls	r3, r1
   1f2aa:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1f2ac:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   1f2b0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1f2b2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1f2b4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1f2b6:	4418      	add	r0, r3
   1f2b8:	f00e f8d1 	bl	2d45e <set_on_state>
	if (callback) {
   1f2bc:	b12d      	cbz	r5, 1f2ca <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f2be:	4632      	mov	r2, r6
   1f2c0:	462b      	mov	r3, r5
   1f2c2:	4803      	ldr	r0, [pc, #12]	; (1f2d0 <clkstarted_handle.constprop.0+0x30>)
}
   1f2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f2c8:	4718      	bx	r3
}
   1f2ca:	bd70      	pop	{r4, r5, r6, pc}
   1f2cc:	20003360 	.word	0x20003360
   1f2d0:	0002e19c 	.word	0x0002e19c

0001f2d4 <clock_event_handler>:
	switch (event) {
   1f2d4:	2801      	cmp	r0, #1
{
   1f2d6:	b508      	push	{r3, lr}
	switch (event) {
   1f2d8:	d006      	beq.n	1f2e8 <clock_event_handler+0x14>
   1f2da:	2803      	cmp	r0, #3
   1f2dc:	d008      	beq.n	1f2f0 <clock_event_handler+0x1c>
   1f2de:	b990      	cbnz	r0, 1f306 <clock_event_handler+0x32>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1f2e0:	4b0e      	ldr	r3, [pc, #56]	; (1f31c <clock_event_handler+0x48>)
   1f2e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1f2e4:	075b      	lsls	r3, r3, #29
   1f2e6:	d117      	bne.n	1f318 <clock_event_handler+0x44>
}
   1f2e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1f2ec:	f7ff bfd8 	b.w	1f2a0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1f2f0:	490b      	ldr	r1, [pc, #44]	; (1f320 <clock_event_handler+0x4c>)
   1f2f2:	480c      	ldr	r0, [pc, #48]	; (1f324 <clock_event_handler+0x50>)
   1f2f4:	f240 226e 	movw	r2, #622	; 0x26e
   1f2f8:	f00a fea7 	bl	2a04a <assert_print>
   1f2fc:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1f300:	4807      	ldr	r0, [pc, #28]	; (1f320 <clock_event_handler+0x4c>)
   1f302:	f00a fe9b 	bl	2a03c <assert_post_action>
   1f306:	4906      	ldr	r1, [pc, #24]	; (1f320 <clock_event_handler+0x4c>)
   1f308:	4806      	ldr	r0, [pc, #24]	; (1f324 <clock_event_handler+0x50>)
   1f30a:	f240 2272 	movw	r2, #626	; 0x272
   1f30e:	f00a fe9c 	bl	2a04a <assert_print>
   1f312:	f240 2172 	movw	r1, #626	; 0x272
   1f316:	e7f3      	b.n	1f300 <clock_event_handler+0x2c>
}
   1f318:	bd08      	pop	{r3, pc}
   1f31a:	bf00      	nop
   1f31c:	20003360 	.word	0x20003360
   1f320:	000325ea 	.word	0x000325ea
   1f324:	0002f2b5 	.word	0x0002f2b5

0001f328 <generic_hfclk_start>:
{
   1f328:	b508      	push	{r3, lr}
	__asm__ volatile(
   1f32a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f32e:	f3ef 8111 	mrs	r1, BASEPRI
   1f332:	f383 8812 	msr	BASEPRI_MAX, r3
   1f336:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1f33a:	4a12      	ldr	r2, [pc, #72]	; (1f384 <generic_hfclk_start+0x5c>)
   1f33c:	6813      	ldr	r3, [r2, #0]
   1f33e:	f043 0002 	orr.w	r0, r3, #2
   1f342:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1f344:	07da      	lsls	r2, r3, #31
   1f346:	d408      	bmi.n	1f35a <generic_hfclk_start+0x32>
	__asm__ volatile(
   1f348:	f381 8811 	msr	BASEPRI, r1
   1f34c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1f350:	2001      	movs	r0, #1
}
   1f352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f356:	f002 bf91 	b.w	2227c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1f35a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f35e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1f362:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1f366:	07d3      	lsls	r3, r2, #31
   1f368:	d5ee      	bpl.n	1f348 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1f36a:	4807      	ldr	r0, [pc, #28]	; (1f388 <generic_hfclk_start+0x60>)
   1f36c:	f00e f877 	bl	2d45e <set_on_state>
   1f370:	f381 8811 	msr	BASEPRI, r1
   1f374:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1f378:	2000      	movs	r0, #0
}
   1f37a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1f37e:	f7ff bf8f 	b.w	1f2a0 <clkstarted_handle.constprop.0>
   1f382:	bf00      	nop
   1f384:	200033b8 	.word	0x200033b8
   1f388:	200033a8 	.word	0x200033a8

0001f38c <api_blocking_start>:
{
   1f38c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f38e:	2200      	movs	r2, #0
   1f390:	2301      	movs	r3, #1
   1f392:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f396:	ab04      	add	r3, sp, #16
   1f398:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f39c:	4a09      	ldr	r2, [pc, #36]	; (1f3c4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f39e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f3a2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1f3a4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1f3a8:	f00e f89a 	bl	2d4e0 <api_start>
	if (err < 0) {
   1f3ac:	2800      	cmp	r0, #0
   1f3ae:	db05      	blt.n	1f3bc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1f3b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1f3b4:	2300      	movs	r3, #0
   1f3b6:	4668      	mov	r0, sp
   1f3b8:	f005 f8b2 	bl	24520 <z_impl_k_sem_take>
}
   1f3bc:	b007      	add	sp, #28
   1f3be:	f85d fb04 	ldr.w	pc, [sp], #4
   1f3c2:	bf00      	nop
   1f3c4:	0002d507 	.word	0x0002d507

0001f3c8 <generic_hfclk_stop>:
{
   1f3c8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f3ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f3ce:	f3ef 8411 	mrs	r4, BASEPRI
   1f3d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3d6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1f3da:	4a07      	ldr	r2, [pc, #28]	; (1f3f8 <generic_hfclk_stop+0x30>)
   1f3dc:	6813      	ldr	r3, [r2, #0]
   1f3de:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1f3e2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1f3e4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1f3e6:	d402      	bmi.n	1f3ee <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1f3e8:	2001      	movs	r0, #1
   1f3ea:	f002 ff67 	bl	222bc <nrfx_clock_stop>
	__asm__ volatile(
   1f3ee:	f384 8811 	msr	BASEPRI, r4
   1f3f2:	f3bf 8f6f 	isb	sy
}
   1f3f6:	bd10      	pop	{r4, pc}
   1f3f8:	200033b8 	.word	0x200033b8

0001f3fc <z_nrf_clock_control_lf_on>:
{
   1f3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f400:	4944      	ldr	r1, [pc, #272]	; (1f514 <z_nrf_clock_control_lf_on+0x118>)
   1f402:	f3bf 8f5b 	dmb	ish
   1f406:	4606      	mov	r6, r0
   1f408:	2201      	movs	r2, #1
   1f40a:	e851 3f00 	ldrex	r3, [r1]
   1f40e:	e841 2000 	strex	r0, r2, [r1]
   1f412:	2800      	cmp	r0, #0
   1f414:	d1f9      	bne.n	1f40a <z_nrf_clock_control_lf_on+0xe>
   1f416:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1f41a:	b99b      	cbnz	r3, 1f444 <z_nrf_clock_control_lf_on+0x48>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1f41c:	493e      	ldr	r1, [pc, #248]	; (1f518 <z_nrf_clock_control_lf_on+0x11c>)
		err = onoff_request(mgr, &cli);
   1f41e:	483f      	ldr	r0, [pc, #252]	; (1f51c <z_nrf_clock_control_lf_on+0x120>)
   1f420:	604b      	str	r3, [r1, #4]
   1f422:	60cb      	str	r3, [r1, #12]
   1f424:	608a      	str	r2, [r1, #8]
   1f426:	f7f3 f9e5 	bl	127f4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1f42a:	2800      	cmp	r0, #0
   1f42c:	da0a      	bge.n	1f444 <z_nrf_clock_control_lf_on+0x48>
   1f42e:	493c      	ldr	r1, [pc, #240]	; (1f520 <z_nrf_clock_control_lf_on+0x124>)
   1f430:	483c      	ldr	r0, [pc, #240]	; (1f524 <z_nrf_clock_control_lf_on+0x128>)
   1f432:	f44f 720c 	mov.w	r2, #560	; 0x230
   1f436:	f00a fe08 	bl	2a04a <assert_print>
   1f43a:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1f43e:	4838      	ldr	r0, [pc, #224]	; (1f520 <z_nrf_clock_control_lf_on+0x124>)
   1f440:	f00a fdfc 	bl	2a03c <assert_post_action>
	switch (start_mode) {
   1f444:	b376      	cbz	r6, 1f4a4 <z_nrf_clock_control_lf_on+0xa8>
   1f446:	1e73      	subs	r3, r6, #1
   1f448:	2b01      	cmp	r3, #1
   1f44a:	d859      	bhi.n	1f500 <z_nrf_clock_control_lf_on+0x104>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1f44c:	2e01      	cmp	r6, #1
   1f44e:	d107      	bne.n	1f460 <z_nrf_clock_control_lf_on+0x64>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1f450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f454:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1f458:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1f45c:	2b01      	cmp	r3, #1
   1f45e:	d021      	beq.n	1f4a4 <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f460:	f00e fc56 	bl	2dd10 <k_is_in_isr>
   1f464:	4605      	mov	r5, r0
   1f466:	b9f8      	cbnz	r0, 1f4a8 <z_nrf_clock_control_lf_on+0xac>
	return !z_sys_post_kernel;
   1f468:	4b2f      	ldr	r3, [pc, #188]	; (1f528 <z_nrf_clock_control_lf_on+0x12c>)
   1f46a:	781b      	ldrb	r3, [r3, #0]
   1f46c:	b1e3      	cbz	r3, 1f4a8 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENCLR = mask;
   1f46e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f472:	2202      	movs	r2, #2
   1f474:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1f478:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f47a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 1f52c <z_nrf_clock_control_lf_on+0x130>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1f47e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1f482:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1f486:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1f48a:	03d2      	lsls	r2, r2, #15
   1f48c:	d516      	bpl.n	1f4bc <z_nrf_clock_control_lf_on+0xc0>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1f48e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1f492:	2b01      	cmp	r3, #1
   1f494:	d001      	beq.n	1f49a <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1f496:	2e01      	cmp	r6, #1
   1f498:	d110      	bne.n	1f4bc <z_nrf_clock_control_lf_on+0xc0>
	if (isr_mode) {
   1f49a:	b35d      	cbz	r5, 1f4f4 <z_nrf_clock_control_lf_on+0xf8>
   1f49c:	f387 8811 	msr	BASEPRI, r7
   1f4a0:	f3bf 8f6f 	isb	sy
}
   1f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1f4a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f4ac:	f3ef 8711 	mrs	r7, BASEPRI
   1f4b0:	f383 8812 	msr	BASEPRI_MAX, r3
   1f4b4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1f4b8:	2501      	movs	r5, #1
   1f4ba:	e7de      	b.n	1f47a <z_nrf_clock_control_lf_on+0x7e>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1f4bc:	b1ad      	cbz	r5, 1f4ea <z_nrf_clock_control_lf_on+0xee>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1f4be:	4638      	mov	r0, r7
   1f4c0:	f7f5 fb5a 	bl	14b78 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1f4c4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1f4c8:	2b00      	cmp	r3, #0
   1f4ca:	d1da      	bne.n	1f482 <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1f4cc:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1f4d0:	2a00      	cmp	r2, #0
   1f4d2:	d0d6      	beq.n	1f482 <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4d4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1f4d8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1f4dc:	2301      	movs	r3, #1
   1f4de:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1f4e2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4e6:	60a3      	str	r3, [r4, #8]
}
   1f4e8:	e7cb      	b.n	1f482 <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   1f4ea:	2100      	movs	r1, #0
   1f4ec:	2021      	movs	r0, #33	; 0x21
   1f4ee:	f006 fb9f 	bl	25c30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1f4f2:	e7e7      	b.n	1f4c4 <z_nrf_clock_control_lf_on+0xc8>
    p_reg->INTENSET = mask;
   1f4f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f4f8:	2202      	movs	r2, #2
   1f4fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1f4fe:	e7d1      	b.n	1f4a4 <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   1f500:	4907      	ldr	r1, [pc, #28]	; (1f520 <z_nrf_clock_control_lf_on+0x124>)
   1f502:	4808      	ldr	r0, [pc, #32]	; (1f524 <z_nrf_clock_control_lf_on+0x128>)
   1f504:	f240 2242 	movw	r2, #578	; 0x242
   1f508:	f00a fd9f 	bl	2a04a <assert_print>
   1f50c:	f240 2142 	movw	r1, #578	; 0x242
   1f510:	e795      	b.n	1f43e <z_nrf_clock_control_lf_on+0x42>
   1f512:	bf00      	nop
   1f514:	2000335c 	.word	0x2000335c
   1f518:	2000334c 	.word	0x2000334c
   1f51c:	20003380 	.word	0x20003380
   1f520:	000325ea 	.word	0x000325ea
   1f524:	0002f2b5 	.word	0x0002f2b5
   1f528:	20004743 	.word	0x20004743
   1f52c:	e000e100 	.word	0xe000e100

0001f530 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1f530:	b508      	push	{r3, lr}
   1f532:	4807      	ldr	r0, [pc, #28]	; (1f550 <uart_console_init+0x20>)
   1f534:	f00e fbb0 	bl	2dc98 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   1f538:	b138      	cbz	r0, 1f54a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1f53a:	4806      	ldr	r0, [pc, #24]	; (1f554 <uart_console_init+0x24>)
   1f53c:	f7f6 f87a 	bl	15634 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1f540:	4804      	ldr	r0, [pc, #16]	; (1f554 <uart_console_init+0x24>)
   1f542:	f7f2 fe4d 	bl	121e0 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1f546:	2000      	movs	r0, #0
}
   1f548:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1f54a:	f06f 0012 	mvn.w	r0, #18
   1f54e:	e7fb      	b.n	1f548 <uart_console_init+0x18>
   1f550:	0002e244 	.word	0x0002e244
   1f554:	0001f559 	.word	0x0001f559

0001f558 <console_out>:
	if ('\n' == c) {
   1f558:	280a      	cmp	r0, #10
{
   1f55a:	b538      	push	{r3, r4, r5, lr}
   1f55c:	4d07      	ldr	r5, [pc, #28]	; (1f57c <console_out+0x24>)
   1f55e:	4604      	mov	r4, r0
	if ('\n' == c) {
   1f560:	d104      	bne.n	1f56c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1f562:	68ab      	ldr	r3, [r5, #8]
   1f564:	210d      	movs	r1, #13
   1f566:	685b      	ldr	r3, [r3, #4]
   1f568:	4628      	mov	r0, r5
   1f56a:	4798      	blx	r3
   1f56c:	68ab      	ldr	r3, [r5, #8]
   1f56e:	4803      	ldr	r0, [pc, #12]	; (1f57c <console_out+0x24>)
   1f570:	685b      	ldr	r3, [r3, #4]
   1f572:	b2e1      	uxtb	r1, r4
   1f574:	4798      	blx	r3
}
   1f576:	4620      	mov	r0, r4
   1f578:	bd38      	pop	{r3, r4, r5, pc}
   1f57a:	bf00      	nop
   1f57c:	0002e244 	.word	0x0002e244

0001f580 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1f580:	b510      	push	{r4, lr}
	return port->data;
   1f582:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1f584:	b941      	cbnz	r1, 1f598 <gpio_nrfx_manage_callback+0x18>
   1f586:	491c      	ldr	r1, [pc, #112]	; (1f5f8 <gpio_nrfx_manage_callback+0x78>)
   1f588:	481c      	ldr	r0, [pc, #112]	; (1f5fc <gpio_nrfx_manage_callback+0x7c>)
   1f58a:	222a      	movs	r2, #42	; 0x2a
   1f58c:	f00a fd5d 	bl	2a04a <assert_print>
   1f590:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1f592:	4819      	ldr	r0, [pc, #100]	; (1f5f8 <gpio_nrfx_manage_callback+0x78>)
   1f594:	f00a fd52 	bl	2a03c <assert_post_action>
   1f598:	6848      	ldr	r0, [r1, #4]
   1f59a:	b930      	cbnz	r0, 1f5aa <gpio_nrfx_manage_callback+0x2a>
   1f59c:	4916      	ldr	r1, [pc, #88]	; (1f5f8 <gpio_nrfx_manage_callback+0x78>)
   1f59e:	4817      	ldr	r0, [pc, #92]	; (1f5fc <gpio_nrfx_manage_callback+0x7c>)
   1f5a0:	222b      	movs	r2, #43	; 0x2b
   1f5a2:	f00a fd52 	bl	2a04a <assert_print>
   1f5a6:	212b      	movs	r1, #43	; 0x2b
   1f5a8:	e7f3      	b.n	1f592 <gpio_nrfx_manage_callback+0x12>
	return list->head;
   1f5aa:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1f5ac:	b1f8      	cbz	r0, 1f5ee <gpio_nrfx_manage_callback+0x6e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5ae:	4288      	cmp	r0, r1
   1f5b0:	d119      	bne.n	1f5e6 <gpio_nrfx_manage_callback+0x66>
Z_GENLIST_REMOVE(slist, snode)
   1f5b2:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1f5b4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1f5b6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1f5b8:	42a1      	cmp	r1, r4
   1f5ba:	d100      	bne.n	1f5be <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1f5bc:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1f5be:	2000      	movs	r0, #0
   1f5c0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1f5c2:	b12a      	cbz	r2, 1f5d0 <gpio_nrfx_manage_callback+0x50>
	return list->head;
   1f5c4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f5c6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f5c8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f5ca:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f5cc:	b902      	cbnz	r2, 1f5d0 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
   1f5ce:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1f5d0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1f5d2:	e010      	b.n	1f5f6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5d4:	4281      	cmp	r1, r0
   1f5d6:	d106      	bne.n	1f5e6 <gpio_nrfx_manage_callback+0x66>
	return node->next;
   1f5d8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1f5da:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f5dc:	6898      	ldr	r0, [r3, #8]
   1f5de:	4281      	cmp	r1, r0
   1f5e0:	d1ed      	bne.n	1f5be <gpio_nrfx_manage_callback+0x3e>
	list->tail = node;
   1f5e2:	609c      	str	r4, [r3, #8]
}
   1f5e4:	e7eb      	b.n	1f5be <gpio_nrfx_manage_callback+0x3e>
	return node->next;
   1f5e6:	4604      	mov	r4, r0
   1f5e8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5ea:	2800      	cmp	r0, #0
   1f5ec:	d1f2      	bne.n	1f5d4 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
   1f5ee:	2a00      	cmp	r2, #0
   1f5f0:	d1e8      	bne.n	1f5c4 <gpio_nrfx_manage_callback+0x44>
				return -EINVAL;
   1f5f2:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1f5f6:	bd10      	pop	{r4, pc}
   1f5f8:	00032650 	.word	0x00032650
   1f5fc:	0002f2b5 	.word	0x0002f2b5

0001f600 <gpio_nrfx_pin_interrupt_configure>:
{
   1f600:	b530      	push	{r4, r5, lr}
	return port->config;
   1f602:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f604:	7b05      	ldrb	r5, [r0, #12]
   1f606:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f60a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1f60e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1f610:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1f614:	d105      	bne.n	1f622 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1f616:	4620      	mov	r0, r4
   1f618:	f003 fb88 	bl	22d2c <nrfx_gpiote_trigger_disable>
		return 0;
   1f61c:	2000      	movs	r0, #0
}
   1f61e:	b005      	add	sp, #20
   1f620:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f622:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f624:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f628:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1f62c:	d114      	bne.n	1f658 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1f62e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f632:	bf0c      	ite	eq
   1f634:	2304      	moveq	r3, #4
   1f636:	2305      	movne	r3, #5
   1f638:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f63c:	2300      	movs	r3, #0
   1f63e:	4619      	mov	r1, r3
   1f640:	aa02      	add	r2, sp, #8
   1f642:	4620      	mov	r0, r4
   1f644:	f003 f984 	bl	22950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f648:	4b2b      	ldr	r3, [pc, #172]	; (1f6f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1f64a:	4298      	cmp	r0, r3
   1f64c:	d150      	bne.n	1f6f0 <gpio_nrfx_pin_interrupt_configure+0xf0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1f64e:	2101      	movs	r1, #1
   1f650:	4620      	mov	r0, r4
   1f652:	f003 fb05 	bl	22c60 <nrfx_gpiote_trigger_enable>
	return 0;
   1f656:	e7e1      	b.n	1f61c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f658:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1f65c:	d023      	beq.n	1f6a6 <gpio_nrfx_pin_interrupt_configure+0xa6>
   1f65e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1f662:	bf14      	ite	ne
   1f664:	2301      	movne	r3, #1
   1f666:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f668:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1f66c:	6883      	ldr	r3, [r0, #8]
   1f66e:	40cb      	lsrs	r3, r1
   1f670:	07d8      	lsls	r0, r3, #31
   1f672:	d4e3      	bmi.n	1f63c <gpio_nrfx_pin_interrupt_configure+0x3c>
   1f674:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1f678:	d1e0      	bne.n	1f63c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1f67a:	0962      	lsrs	r2, r4, #5
   1f67c:	f004 031f 	and.w	r3, r4, #31
   1f680:	d013      	beq.n	1f6aa <gpio_nrfx_pin_interrupt_configure+0xaa>
   1f682:	2a01      	cmp	r2, #1
   1f684:	d104      	bne.n	1f690 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1f686:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1f68a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f68c:	07d1      	lsls	r1, r2, #31
   1f68e:	d414      	bmi.n	1f6ba <gpio_nrfx_pin_interrupt_configure+0xba>
   1f690:	491a      	ldr	r1, [pc, #104]	; (1f6fc <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1f692:	481b      	ldr	r0, [pc, #108]	; (1f700 <gpio_nrfx_pin_interrupt_configure+0x100>)
   1f694:	f240 2247 	movw	r2, #583	; 0x247
   1f698:	f00a fcd7 	bl	2a04a <assert_print>
   1f69c:	4817      	ldr	r0, [pc, #92]	; (1f6fc <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1f69e:	f240 2147 	movw	r1, #583	; 0x247
   1f6a2:	f00a fccb 	bl	2a03c <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1f6a6:	2303      	movs	r3, #3
   1f6a8:	e7de      	b.n	1f668 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1f6aa:	f04f 32ff 	mov.w	r2, #4294967295
   1f6ae:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f6b0:	07d2      	lsls	r2, r2, #31
   1f6b2:	d5ed      	bpl.n	1f690 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1f6b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f6b8:	e000      	b.n	1f6bc <gpio_nrfx_pin_interrupt_configure+0xbc>
        case 1: return NRF_P1;
   1f6ba:	4a12      	ldr	r2, [pc, #72]	; (1f704 <gpio_nrfx_pin_interrupt_configure+0x104>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1f6bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1f6c4:	07db      	lsls	r3, r3, #31
   1f6c6:	d4b9      	bmi.n	1f63c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f6c8:	f10d 0507 	add.w	r5, sp, #7
   1f6cc:	4629      	mov	r1, r5
   1f6ce:	4620      	mov	r0, r4
   1f6d0:	f003 fa62 	bl	22b98 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1f6d4:	4b0c      	ldr	r3, [pc, #48]	; (1f708 <gpio_nrfx_pin_interrupt_configure+0x108>)
   1f6d6:	4298      	cmp	r0, r3
   1f6d8:	d001      	beq.n	1f6de <gpio_nrfx_pin_interrupt_configure+0xde>
		trigger_config.p_in_channel = &ch;
   1f6da:	9503      	str	r5, [sp, #12]
   1f6dc:	e7ae      	b.n	1f63c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1f6de:	4628      	mov	r0, r5
   1f6e0:	f003 fab8 	bl	22c54 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1f6e4:	4b04      	ldr	r3, [pc, #16]	; (1f6f8 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1f6e6:	4298      	cmp	r0, r3
   1f6e8:	d0f7      	beq.n	1f6da <gpio_nrfx_pin_interrupt_configure+0xda>
				return -ENOMEM;
   1f6ea:	f06f 000b 	mvn.w	r0, #11
   1f6ee:	e796      	b.n	1f61e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1f6f0:	f06f 0015 	mvn.w	r0, #21
   1f6f4:	e793      	b.n	1f61e <gpio_nrfx_pin_interrupt_configure+0x1e>
   1f6f6:	bf00      	nop
   1f6f8:	0bad0000 	.word	0x0bad0000
   1f6fc:	0003268c 	.word	0x0003268c
   1f700:	0002f2b5 	.word	0x0002f2b5
   1f704:	50000300 	.word	0x50000300
   1f708:	0bad0004 	.word	0x0bad0004

0001f70c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1f70c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1f70e:	f003 fa91 	bl	22c34 <nrfx_gpiote_is_init>
   1f712:	4604      	mov	r4, r0
   1f714:	b968      	cbnz	r0, 1f732 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1f716:	f003 fa65 	bl	22be4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1f71a:	4b08      	ldr	r3, [pc, #32]	; (1f73c <gpio_nrfx_init+0x30>)
   1f71c:	4298      	cmp	r0, r3
   1f71e:	d10a      	bne.n	1f736 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1f720:	4807      	ldr	r0, [pc, #28]	; (1f740 <gpio_nrfx_init+0x34>)
   1f722:	4621      	mov	r1, r4
   1f724:	f003 fa32 	bl	22b8c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1f728:	4622      	mov	r2, r4
   1f72a:	2105      	movs	r1, #5
   1f72c:	2006      	movs	r0, #6
   1f72e:	f7f5 fa8d 	bl	14c4c <z_arm_irq_priority_set>
		return 0;
   1f732:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1f734:	bd10      	pop	{r4, pc}
		return -EIO;
   1f736:	f06f 0004 	mvn.w	r0, #4
   1f73a:	e7fb      	b.n	1f734 <gpio_nrfx_init+0x28>
   1f73c:	0bad0000 	.word	0x0bad0000
   1f740:	0001f745 	.word	0x0001f745

0001f744 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f744:	0942      	lsrs	r2, r0, #5
{
   1f746:	b570      	push	{r4, r5, r6, lr}
   1f748:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f74a:	d002      	beq.n	1f752 <nrfx_gpio_handler+0xe>
   1f74c:	2a01      	cmp	r2, #1
   1f74e:	d01a      	beq.n	1f786 <nrfx_gpio_handler+0x42>
}
   1f750:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f752:	4e12      	ldr	r6, [pc, #72]	; (1f79c <nrfx_gpio_handler+0x58>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1f754:	6932      	ldr	r2, [r6, #16]
   1f756:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f758:	2900      	cmp	r1, #0
   1f75a:	d0f9      	beq.n	1f750 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1f75c:	f003 031f 	and.w	r3, r3, #31
   1f760:	2501      	movs	r5, #1
	return node->next;
   1f762:	680c      	ldr	r4, [r1, #0]
   1f764:	409d      	lsls	r5, r3
   1f766:	2900      	cmp	r1, #0
   1f768:	d0f2      	beq.n	1f750 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1f76a:	688a      	ldr	r2, [r1, #8]
   1f76c:	402a      	ands	r2, r5
   1f76e:	d00e      	beq.n	1f78e <nrfx_gpio_handler+0x4a>
			__ASSERT(cb->handler, "No callback handler!");
   1f770:	684b      	ldr	r3, [r1, #4]
   1f772:	b953      	cbnz	r3, 1f78a <nrfx_gpio_handler+0x46>
   1f774:	490a      	ldr	r1, [pc, #40]	; (1f7a0 <nrfx_gpio_handler+0x5c>)
   1f776:	480b      	ldr	r0, [pc, #44]	; (1f7a4 <nrfx_gpio_handler+0x60>)
   1f778:	224d      	movs	r2, #77	; 0x4d
   1f77a:	f00a fc66 	bl	2a04a <assert_print>
   1f77e:	4808      	ldr	r0, [pc, #32]	; (1f7a0 <nrfx_gpio_handler+0x5c>)
   1f780:	214d      	movs	r1, #77	; 0x4d
   1f782:	f00a fc5b 	bl	2a03c <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1f786:	4e08      	ldr	r6, [pc, #32]	; (1f7a8 <nrfx_gpio_handler+0x64>)
   1f788:	e7e4      	b.n	1f754 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1f78a:	4630      	mov	r0, r6
   1f78c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1f78e:	b11c      	cbz	r4, 1f798 <nrfx_gpio_handler+0x54>
   1f790:	6823      	ldr	r3, [r4, #0]
   1f792:	4621      	mov	r1, r4
   1f794:	461c      	mov	r4, r3
   1f796:	e7e6      	b.n	1f766 <nrfx_gpio_handler+0x22>
   1f798:	4623      	mov	r3, r4
   1f79a:	e7fa      	b.n	1f792 <nrfx_gpio_handler+0x4e>
   1f79c:	0002e1cc 	.word	0x0002e1cc
   1f7a0:	00032650 	.word	0x00032650
   1f7a4:	0002f2b5 	.word	0x0002f2b5
   1f7a8:	0002e1b4 	.word	0x0002e1b4

0001f7ac <gpio_nrfx_pin_configure>:
{
   1f7ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1f7b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1f7b4:	f898 300c 	ldrb.w	r3, [r8, #12]
   1f7b8:	f001 051f 	and.w	r5, r1, #31
   1f7bc:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1f7c0:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f7c2:	4628      	mov	r0, r5
   1f7c4:	f10d 0103 	add.w	r1, sp, #3
{
   1f7c8:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f7ca:	f003 f9e5 	bl	22b98 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1f7ce:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1f7d2:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1f7d4:	d114      	bne.n	1f800 <gpio_nrfx_pin_configure+0x54>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1f7d6:	4628      	mov	r0, r5
   1f7d8:	f003 fad2 	bl	22d80 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1f7dc:	4b48      	ldr	r3, [pc, #288]	; (1f900 <gpio_nrfx_pin_configure+0x154>)
   1f7de:	429e      	cmp	r6, r3
   1f7e0:	d16f      	bne.n	1f8c2 <gpio_nrfx_pin_configure+0x116>
			err = nrfx_gpiote_channel_free(ch);
   1f7e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1f7e6:	f003 fa2f 	bl	22c48 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f7ea:	42b0      	cmp	r0, r6
   1f7ec:	d069      	beq.n	1f8c2 <gpio_nrfx_pin_configure+0x116>
   1f7ee:	4945      	ldr	r1, [pc, #276]	; (1f904 <gpio_nrfx_pin_configure+0x158>)
   1f7f0:	4845      	ldr	r0, [pc, #276]	; (1f908 <gpio_nrfx_pin_configure+0x15c>)
   1f7f2:	226a      	movs	r2, #106	; 0x6a
   1f7f4:	f00a fc29 	bl	2a04a <assert_print>
   1f7f8:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f7fa:	4842      	ldr	r0, [pc, #264]	; (1f904 <gpio_nrfx_pin_configure+0x158>)
   1f7fc:	f00a fc1e 	bl	2a03c <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f800:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f802:	4619      	mov	r1, r3
   1f804:	aa02      	add	r2, sp, #8
   1f806:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1f808:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1f80c:	f003 f8a0 	bl	22950 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1f810:	4b3b      	ldr	r3, [pc, #236]	; (1f900 <gpio_nrfx_pin_configure+0x154>)
   1f812:	4298      	cmp	r0, r3
   1f814:	d004      	beq.n	1f820 <gpio_nrfx_pin_configure+0x74>
		return NRF_GPIO_PIN_PULLUP;
   1f816:	f06f 0015 	mvn.w	r0, #21
}
   1f81a:	b004      	add	sp, #16
   1f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1f820:	4286      	cmp	r6, r0
   1f822:	d10c      	bne.n	1f83e <gpio_nrfx_pin_configure+0x92>
		err = nrfx_gpiote_channel_free(ch);
   1f824:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1f828:	f003 fa0e 	bl	22c48 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1f82c:	42b0      	cmp	r0, r6
   1f82e:	d006      	beq.n	1f83e <gpio_nrfx_pin_configure+0x92>
   1f830:	4934      	ldr	r1, [pc, #208]	; (1f904 <gpio_nrfx_pin_configure+0x158>)
   1f832:	4835      	ldr	r0, [pc, #212]	; (1f908 <gpio_nrfx_pin_configure+0x15c>)
   1f834:	227c      	movs	r2, #124	; 0x7c
   1f836:	f00a fc08 	bl	2a04a <assert_print>
   1f83a:	217c      	movs	r1, #124	; 0x7c
   1f83c:	e7dd      	b.n	1f7fa <gpio_nrfx_pin_configure+0x4e>
	if (flags & GPIO_OUTPUT) {
   1f83e:	03a6      	lsls	r6, r4, #14
   1f840:	d54e      	bpl.n	1f8e0 <gpio_nrfx_pin_configure+0x134>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f842:	f240 3306 	movw	r3, #774	; 0x306
   1f846:	4023      	ands	r3, r4
   1f848:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1f84c:	d019      	beq.n	1f882 <gpio_nrfx_pin_configure+0xd6>
   1f84e:	d80c      	bhi.n	1f86a <gpio_nrfx_pin_configure+0xbe>
   1f850:	2b06      	cmp	r3, #6
   1f852:	d017      	beq.n	1f884 <gpio_nrfx_pin_configure+0xd8>
   1f854:	d804      	bhi.n	1f860 <gpio_nrfx_pin_configure+0xb4>
   1f856:	b1ab      	cbz	r3, 1f884 <gpio_nrfx_pin_configure+0xd8>
   1f858:	2b02      	cmp	r3, #2
   1f85a:	d1dc      	bne.n	1f816 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_D0S1;
   1f85c:	2304      	movs	r3, #4
   1f85e:	e011      	b.n	1f884 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1f864:	d1d7      	bne.n	1f816 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_H0S1;
   1f866:	2301      	movs	r3, #1
   1f868:	e00c      	b.n	1f884 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f86a:	f240 2202 	movw	r2, #514	; 0x202
   1f86e:	4293      	cmp	r3, r2
   1f870:	d029      	beq.n	1f8c6 <gpio_nrfx_pin_configure+0x11a>
   1f872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1f876:	d028      	beq.n	1f8ca <gpio_nrfx_pin_configure+0x11e>
   1f878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1f87c:	d1cb      	bne.n	1f816 <gpio_nrfx_pin_configure+0x6a>
		*drive = NRF_GPIO_PIN_S0H1;
   1f87e:	2302      	movs	r3, #2
   1f880:	e000      	b.n	1f884 <gpio_nrfx_pin_configure+0xd8>
		*drive = NRF_GPIO_PIN_H0D1;
   1f882:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1f884:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1f888:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1f88c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1f890:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1f892:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1f896:	bf54      	ite	pl
   1f898:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1f89c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1f89e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1f8a0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1f8a4:	d513      	bpl.n	1f8ce <gpio_nrfx_pin_configure+0x122>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1f8a6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1f8aa:	2301      	movs	r3, #1
   1f8ac:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1f8ae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1f8b2:	2200      	movs	r2, #0
   1f8b4:	a901      	add	r1, sp, #4
   1f8b6:	4628      	mov	r0, r5
   1f8b8:	f003 f8f4 	bl	22aa4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1f8bc:	4b10      	ldr	r3, [pc, #64]	; (1f900 <gpio_nrfx_pin_configure+0x154>)
   1f8be:	4298      	cmp	r0, r3
   1f8c0:	d1a9      	bne.n	1f816 <gpio_nrfx_pin_configure+0x6a>
   1f8c2:	2000      	movs	r0, #0
   1f8c4:	e7a9      	b.n	1f81a <gpio_nrfx_pin_configure+0x6e>
		*drive = NRF_GPIO_PIN_D0H1;
   1f8c6:	2305      	movs	r3, #5
   1f8c8:	e7dc      	b.n	1f884 <gpio_nrfx_pin_configure+0xd8>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1f8ca:	2303      	movs	r3, #3
   1f8cc:	e7da      	b.n	1f884 <gpio_nrfx_pin_configure+0xd8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1f8ce:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1f8d0:	bf41      	itttt	mi
   1f8d2:	2301      	movmi	r3, #1
   1f8d4:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1f8d8:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1f8da:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1f8de:	e7e8      	b.n	1f8b2 <gpio_nrfx_pin_configure+0x106>
	if (flags & GPIO_PULL_UP) {
   1f8e0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f8e2:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1f8e6:	bf54      	ite	pl
   1f8e8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1f8ec:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f8ee:	461a      	mov	r2, r3
   1f8f0:	a901      	add	r1, sp, #4
   1f8f2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1f8f4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1f8f8:	f003 f82a 	bl	22950 <nrfx_gpiote_input_configure>
   1f8fc:	e7de      	b.n	1f8bc <gpio_nrfx_pin_configure+0x110>
   1f8fe:	bf00      	nop
   1f900:	0bad0000 	.word	0x0bad0000
   1f904:	000326bf 	.word	0x000326bf
   1f908:	0002f2b5 	.word	0x0002f2b5

0001f90c <qspi_get_zephyr_ret_code>:
/**
 * @brief Converts NRFX return codes to the zephyr ones
 */
static inline int qspi_get_zephyr_ret_code(nrfx_err_t res)
{
	switch (res) {
   1f90c:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   1f910:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   1f914:	280a      	cmp	r0, #10
   1f916:	bf9a      	itte	ls
   1f918:	4b02      	ldrls	r3, [pc, #8]	; (1f924 <qspi_get_zephyr_ret_code+0x18>)
   1f91a:	f933 0010 	ldrshls.w	r0, [r3, r0, lsl #1]
{
   1f91e:	f06f 000f 	mvnhi.w	r0, #15
	case NRFX_ERROR_BUSY:
	case NRFX_ERROR_TIMEOUT:
	default:
		return -EBUSY;
	}
}
   1f922:	4770      	bx	lr
   1f924:	0002f140 	.word	0x0002f140

0001f928 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   1f928:	4b02      	ldr	r3, [pc, #8]	; (1f934 <qspi_nor_pages_layout+0xc>)
   1f92a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1f92c:	2301      	movs	r3, #1
   1f92e:	6013      	str	r3, [r2, #0]
}
   1f930:	4770      	bx	lr
   1f932:	bf00      	nop
   1f934:	0002eda0 	.word	0x0002eda0

0001f938 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   1f938:	4800      	ldr	r0, [pc, #0]	; (1f93c <qspi_flash_get_parameters+0x4>)
   1f93a:	4770      	bx	lr
   1f93c:	0002ed34 	.word	0x0002ed34

0001f940 <qspi_wait_for_completion.isra.0>:
	if (res == NRFX_SUCCESS) {
   1f940:	4b05      	ldr	r3, [pc, #20]	; (1f958 <qspi_wait_for_completion.isra.0+0x18>)
   1f942:	4299      	cmp	r1, r3
   1f944:	d106      	bne.n	1f954 <qspi_wait_for_completion.isra.0+0x14>
	return z_impl_k_sem_take(sem, timeout);
   1f946:	f04f 32ff 	mov.w	r2, #4294967295
   1f94a:	f04f 33ff 	mov.w	r3, #4294967295
   1f94e:	3030      	adds	r0, #48	; 0x30
   1f950:	f004 bde6 	b.w	24520 <z_impl_k_sem_take>
}
   1f954:	4770      	bx	lr
   1f956:	bf00      	nop
   1f958:	0bad0000 	.word	0x0bad0000

0001f95c <qspi_device_init>:
{
   1f95c:	b570      	push	{r4, r5, r6, lr}
	struct qspi_nor_data *dev_data = dev->data;
   1f95e:	6905      	ldr	r5, [r0, #16]
	if (!qspi_initialized) {
   1f960:	4e0f      	ldr	r6, [pc, #60]	; (1f9a0 <qspi_device_init+0x44>)
{
   1f962:	4604      	mov	r4, r0
	qspi_lock(dev);
   1f964:	4628      	mov	r0, r5
   1f966:	f00d fe08 	bl	2d57a <qspi_lock.isra.0>
	k_sem_give(&dev_data->count);
   1f96a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1f96e:	f00d fdfc 	bl	2d56a <k_sem_give>
	if (!qspi_initialized) {
   1f972:	7833      	ldrb	r3, [r6, #0]
   1f974:	b98b      	cbnz	r3, 1f99a <qspi_device_init+0x3e>
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1f976:	462a      	mov	r2, r5
   1f978:	490a      	ldr	r1, [pc, #40]	; (1f9a4 <qspi_device_init+0x48>)
   1f97a:	6860      	ldr	r0, [r4, #4]
   1f97c:	f003 fcb2 	bl	232e4 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   1f980:	f7ff ffc4 	bl	1f90c <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   1f984:	fab0 f380 	clz	r3, r0
   1f988:	095b      	lsrs	r3, r3, #5
   1f98a:	4605      	mov	r5, r0
   1f98c:	7033      	strb	r3, [r6, #0]
	k_sem_give(&dev_data->sem);
   1f98e:	6920      	ldr	r0, [r4, #16]
   1f990:	3018      	adds	r0, #24
   1f992:	f00d fdea 	bl	2d56a <k_sem_give>
}
   1f996:	4628      	mov	r0, r5
   1f998:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   1f99a:	2500      	movs	r5, #0
   1f99c:	e7f7      	b.n	1f98e <qspi_device_init+0x32>
   1f99e:	bf00      	nop
   1f9a0:	2000423c 	.word	0x2000423c
   1f9a4:	0002d56f 	.word	0x0002d56f

0001f9a8 <qspi_send_cmd>:
{
   1f9a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (cmd->tx_buf) {
   1f9aa:	684c      	ldr	r4, [r1, #4]
{
   1f9ac:	4605      	mov	r5, r0
   1f9ae:	4617      	mov	r7, r2
	if (cmd->tx_buf) {
   1f9b0:	b1ac      	cbz	r4, 1f9de <qspi_send_cmd+0x36>
		tx_buf = cmd->tx_buf->buf;
   1f9b2:	e9d4 4300 	ldrd	r4, r3, [r4]
	if (cmd->rx_buf) {
   1f9b6:	6888      	ldr	r0, [r1, #8]
   1f9b8:	b198      	cbz	r0, 1f9e2 <qspi_send_cmd+0x3a>
		rx_len = cmd->rx_buf->len;
   1f9ba:	e9d0 6000 	ldrd	r6, r0, [r0]
	if ((rx_len != 0) && (tx_len != 0)) {
   1f9be:	b188      	cbz	r0, 1f9e4 <qspi_send_cmd+0x3c>
   1f9c0:	b183      	cbz	r3, 1f9e4 <qspi_send_cmd+0x3c>
		if (rx_len != tx_len) {
   1f9c2:	4298      	cmp	r0, r3
   1f9c4:	d107      	bne.n	1f9d6 <qspi_send_cmd+0x2e>
		xfer_len += tx_len;
   1f9c6:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1f9c8:	2b09      	cmp	r3, #9
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1f9ca:	780a      	ldrb	r2, [r1, #0]
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   1f9cc:	d90d      	bls.n	1f9ea <qspi_send_cmd+0x42>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   1f9ce:	4817      	ldr	r0, [pc, #92]	; (1fa2c <qspi_send_cmd+0x84>)
   1f9d0:	2157      	movs	r1, #87	; 0x57
   1f9d2:	f00a fb48 	bl	2a066 <z_log_minimal_printk>
}
   1f9d6:	f06f 0015 	mvn.w	r0, #21
   1f9da:	b003      	add	sp, #12
   1f9dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t tx_len = 0;
   1f9de:	4623      	mov	r3, r4
   1f9e0:	e7e9      	b.n	1f9b6 <qspi_send_cmd+0xe>
	void *rx_buf = NULL;
   1f9e2:	4606      	mov	r6, r0
		xfer_len += tx_len + rx_len;
   1f9e4:	3301      	adds	r3, #1
   1f9e6:	4403      	add	r3, r0
   1f9e8:	e7ee      	b.n	1f9c8 <qspi_send_cmd+0x20>
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1f9ea:	f88d 3001 	strb.w	r3, [sp, #1]
   1f9ee:	f240 1301 	movw	r3, #257	; 0x101
	qspi_lock(dev);
   1f9f2:	6928      	ldr	r0, [r5, #16]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   1f9f4:	f8ad 3002 	strh.w	r3, [sp, #2]
   1f9f8:	2300      	movs	r3, #0
   1f9fa:	f88d 3004 	strb.w	r3, [sp, #4]
   1f9fe:	f88d 2000 	strb.w	r2, [sp]
   1fa02:	f88d 7005 	strb.w	r7, [sp, #5]
	qspi_lock(dev);
   1fa06:	f00d fdb8 	bl	2d57a <qspi_lock.isra.0>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   1fa0a:	4621      	mov	r1, r4
   1fa0c:	4632      	mov	r2, r6
   1fa0e:	4668      	mov	r0, sp
   1fa10:	f003 fd5c 	bl	234cc <nrfx_qspi_cinstr_xfer>
   1fa14:	4604      	mov	r4, r0
	k_sem_give(&dev_data->sem);
   1fa16:	6928      	ldr	r0, [r5, #16]
   1fa18:	3018      	adds	r0, #24
   1fa1a:	f00d fda6 	bl	2d56a <k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   1fa1e:	4620      	mov	r0, r4
}
   1fa20:	b003      	add	sp, #12
   1fa22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return qspi_get_zephyr_ret_code(res);
   1fa26:	f7ff bf71 	b.w	1f90c <qspi_get_zephyr_ret_code>
   1fa2a:	bf00      	nop
   1fa2c:	00032707 	.word	0x00032707

0001fa30 <qspi_device_uninit>:
{
   1fa30:	b538      	push	{r3, r4, r5, lr}
   1fa32:	4604      	mov	r4, r0
	qspi_lock(dev);
   1fa34:	6900      	ldr	r0, [r0, #16]
   1fa36:	f00d fda0 	bl	2d57a <qspi_lock.isra.0>
	struct qspi_nor_data *dev_data = dev->data;
   1fa3a:	6925      	ldr	r5, [r4, #16]
   1fa3c:	2200      	movs	r2, #0
   1fa3e:	2300      	movs	r3, #0
   1fa40:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1fa44:	f004 fd6c 	bl	24520 <z_impl_k_sem_take>
	if (last) {
   1fa48:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   1fa4a:	b94b      	cbnz	r3, 1fa60 <qspi_device_uninit+0x30>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   1fa4c:	4d0a      	ldr	r5, [pc, #40]	; (1fa78 <qspi_device_uninit+0x48>)
   1fa4e:	f003 fd99 	bl	23584 <nrfx_qspi_mem_busy_check>
   1fa52:	42a8      	cmp	r0, r5
   1fa54:	d10a      	bne.n	1fa6c <qspi_device_uninit+0x3c>
		nrfx_qspi_uninit();
   1fa56:	f003 fdb7 	bl	235c8 <nrfx_qspi_uninit>
		qspi_initialized = false;
   1fa5a:	4b08      	ldr	r3, [pc, #32]	; (1fa7c <qspi_device_uninit+0x4c>)
   1fa5c:	2200      	movs	r2, #0
   1fa5e:	701a      	strb	r2, [r3, #0]
	k_sem_give(&dev_data->sem);
   1fa60:	6920      	ldr	r0, [r4, #16]
}
   1fa62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_sem_give(&dev_data->sem);
   1fa66:	3018      	adds	r0, #24
   1fa68:	f00d bd7f 	b.w	2d56a <k_sem_give>
	return z_impl_k_sleep(timeout);
   1fa6c:	2100      	movs	r1, #0
   1fa6e:	f240 6067 	movw	r0, #1639	; 0x667
   1fa72:	f006 f8dd 	bl	25c30 <z_impl_k_sleep>
   1fa76:	e7ea      	b.n	1fa4e <qspi_device_uninit+0x1e>
   1fa78:	0bad0000 	.word	0x0bad0000
   1fa7c:	2000423c 	.word	0x2000423c

0001fa80 <qspi_nor_read>:
{
   1fa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa84:	4681      	mov	r9, r0
   1fa86:	b085      	sub	sp, #20
   1fa88:	460e      	mov	r6, r1
   1fa8a:	461c      	mov	r4, r3
	if (!dest) {
   1fa8c:	4690      	mov	r8, r2
   1fa8e:	b17a      	cbz	r2, 1fab0 <qspi_nor_read+0x30>
	if (!size) {
   1fa90:	2b00      	cmp	r3, #0
   1fa92:	f000 809c 	beq.w	1fbce <qspi_nor_read+0x14e>
	if (addr < 0 ||
   1fa96:	2900      	cmp	r1, #0
	const struct qspi_nor_config *params = dev->config;
   1fa98:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   1fa9a:	db03      	blt.n	1faa4 <qspi_nor_read+0x24>
   1fa9c:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1fa9e:	18cb      	adds	r3, r1, r3
	if (addr < 0 ||
   1faa0:	4293      	cmp	r3, r2
   1faa2:	d90b      	bls.n	1fabc <qspi_nor_read+0x3c>
		LOG_ERR("read error: address or size "
   1faa4:	484b      	ldr	r0, [pc, #300]	; (1fbd4 <qspi_nor_read+0x154>)
   1faa6:	4623      	mov	r3, r4
   1faa8:	4632      	mov	r2, r6
   1faaa:	2145      	movs	r1, #69	; 0x45
   1faac:	f00a fadb 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1fab0:	f06f 0515 	mvn.w	r5, #21
}
   1fab4:	4628      	mov	r0, r5
   1fab6:	b005      	add	sp, #20
   1fab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int rc = qspi_device_init(dev);
   1fabc:	f7ff ff4e 	bl	1f95c <qspi_device_init>
	if (rc != 0) {
   1fac0:	4605      	mov	r5, r0
   1fac2:	2800      	cmp	r0, #0
   1fac4:	d17f      	bne.n	1fbc6 <qspi_nor_read+0x146>
	qspi_lock(dev);
   1fac6:	4275      	negs	r5, r6
   1fac8:	f005 0503 	and.w	r5, r5, #3
   1facc:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fad0:	f00d fd53 	bl	2d57a <qspi_lock.isra.0>
	if (flash_prefix > size) {
   1fad4:	42a5      	cmp	r5, r4
   1fad6:	bf28      	it	cs
   1fad8:	4625      	movcs	r5, r4
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   1fada:	f1d8 0300 	rsbs	r3, r8, #0
   1fade:	f003 0303 	and.w	r3, r3, #3
   1fae2:	f008 0703 	and.w	r7, r8, #3
   1fae6:	bf58      	it	pl
   1fae8:	425f      	negpl	r7, r3
   1faea:	427f      	negs	r7, r7
   1faec:	f007 0703 	and.w	r7, r7, #3
   1faf0:	42a7      	cmp	r7, r4
   1faf2:	bf28      	it	cs
   1faf4:	4627      	movcs	r7, r4
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   1faf6:	1b63      	subs	r3, r4, r5
			    (size - dest_prefix) % WORD_SIZE;
   1faf8:	1be4      	subs	r4, r4, r7
   1fafa:	f024 0403 	bic.w	r4, r4, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   1fafe:	f023 0a03 	bic.w	sl, r3, #3
	if (flash_middle > dest_middle) {
   1fb02:	45a2      	cmp	sl, r4
		flash_suffix = size - flash_prefix - flash_middle;
   1fb04:	bfc8      	it	gt
   1fb06:	46a2      	movgt	sl, r4
   1fb08:	f003 0b03 	and.w	fp, r3, #3
   1fb0c:	bfc8      	it	gt
   1fb0e:	eba3 0b04 	subgt.w	fp, r3, r4
	if (flash_middle != 0) {
   1fb12:	f1ba 0f00 	cmp.w	sl, #0
   1fb16:	d019      	beq.n	1fb4c <qspi_nor_read+0xcc>
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   1fb18:	eb08 0307 	add.w	r3, r8, r7
   1fb1c:	1972      	adds	r2, r6, r5
   1fb1e:	4651      	mov	r1, sl
   1fb20:	4618      	mov	r0, r3
   1fb22:	9301      	str	r3, [sp, #4]
   1fb24:	f00e f8a9 	bl	2dc7a <nrfx_qspi_read>
   1fb28:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fb2a:	4601      	mov	r1, r0
   1fb2c:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fb30:	f7ff ff06 	bl	1f940 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fb34:	4a28      	ldr	r2, [pc, #160]	; (1fbd8 <qspi_nor_read+0x158>)
   1fb36:	4294      	cmp	r4, r2
   1fb38:	d13c      	bne.n	1fbb4 <qspi_nor_read+0x134>
		if (flash_prefix != dest_prefix) {
   1fb3a:	42bd      	cmp	r5, r7
   1fb3c:	d006      	beq.n	1fb4c <qspi_nor_read+0xcc>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   1fb3e:	9b01      	ldr	r3, [sp, #4]
   1fb40:	4652      	mov	r2, sl
   1fb42:	4619      	mov	r1, r3
   1fb44:	eb08 0005 	add.w	r0, r8, r5
   1fb48:	f00b fa3e 	bl	2afc8 <memmove>
	if (flash_prefix != 0) {
   1fb4c:	b1bd      	cbz	r5, 1fb7e <qspi_nor_read+0xfe>
				     (WORD_SIZE - flash_prefix));
   1fb4e:	f1c5 0704 	rsb	r7, r5, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   1fb52:	1bf2      	subs	r2, r6, r7
   1fb54:	2104      	movs	r1, #4
   1fb56:	a802      	add	r0, sp, #8
   1fb58:	f00e f88f 	bl	2dc7a <nrfx_qspi_read>
   1fb5c:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fb5e:	4601      	mov	r1, r0
   1fb60:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fb64:	f7ff feec 	bl	1f940 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fb68:	4b1b      	ldr	r3, [pc, #108]	; (1fbd8 <qspi_nor_read+0x158>)
   1fb6a:	429c      	cmp	r4, r3
   1fb6c:	d122      	bne.n	1fbb4 <qspi_nor_read+0x134>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   1fb6e:	f107 0308 	add.w	r3, r7, #8
   1fb72:	462a      	mov	r2, r5
   1fb74:	eb0d 0103 	add.w	r1, sp, r3
   1fb78:	4640      	mov	r0, r8
   1fb7a:	f00b fa3c 	bl	2aff6 <memcpy>
	if (flash_suffix != 0) {
   1fb7e:	f1bb 0f00 	cmp.w	fp, #0
   1fb82:	d016      	beq.n	1fbb2 <qspi_nor_read+0x132>
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1fb84:	2108      	movs	r1, #8
				     addr + flash_prefix + flash_middle);
   1fb86:	1972      	adds	r2, r6, r5
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   1fb88:	4452      	add	r2, sl
   1fb8a:	eb0d 0001 	add.w	r0, sp, r1
   1fb8e:	f00e f874 	bl	2dc7a <nrfx_qspi_read>
   1fb92:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   1fb94:	4601      	mov	r1, r0
   1fb96:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fb9a:	f7ff fed1 	bl	1f940 <qspi_wait_for_completion.isra.0>
		if (res != NRFX_SUCCESS) {
   1fb9e:	4b0e      	ldr	r3, [pc, #56]	; (1fbd8 <qspi_nor_read+0x158>)
   1fba0:	429c      	cmp	r4, r3
   1fba2:	d107      	bne.n	1fbb4 <qspi_nor_read+0x134>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   1fba4:	eb0a 0005 	add.w	r0, sl, r5
   1fba8:	465a      	mov	r2, fp
   1fbaa:	a902      	add	r1, sp, #8
   1fbac:	4440      	add	r0, r8
   1fbae:	f00b fa22 	bl	2aff6 <memcpy>
	return res;
   1fbb2:	4c09      	ldr	r4, [pc, #36]	; (1fbd8 <qspi_nor_read+0x158>)
	k_sem_give(&dev_data->sem);
   1fbb4:	f8d9 0010 	ldr.w	r0, [r9, #16]
   1fbb8:	3018      	adds	r0, #24
   1fbba:	f00d fcd6 	bl	2d56a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1fbbe:	4620      	mov	r0, r4
   1fbc0:	f7ff fea4 	bl	1f90c <qspi_get_zephyr_ret_code>
   1fbc4:	4605      	mov	r5, r0
	qspi_device_uninit(dev);
   1fbc6:	4648      	mov	r0, r9
   1fbc8:	f7ff ff32 	bl	1fa30 <qspi_device_uninit>
	return rc;
   1fbcc:	e772      	b.n	1fab4 <qspi_nor_read+0x34>
		return 0;
   1fbce:	461d      	mov	r5, r3
   1fbd0:	e770      	b.n	1fab4 <qspi_nor_read+0x34>
   1fbd2:	bf00      	nop
   1fbd4:	0003272f 	.word	0x0003272f
   1fbd8:	0bad0000 	.word	0x0bad0000

0001fbdc <qspi_nor_init>:
{
   1fbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   1fbe0:	6843      	ldr	r3, [r0, #4]
   1fbe2:	6a1e      	ldr	r6, [r3, #32]
{
   1fbe4:	b08a      	sub	sp, #40	; 0x28
   1fbe6:	4605      	mov	r5, r0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1fbe8:	aa07      	add	r2, sp, #28
   1fbea:	2100      	movs	r1, #0
   1fbec:	4630      	mov	r0, r6
   1fbee:	f00d fe1a 	bl	2d826 <pinctrl_lookup_state>
	if (ret < 0) {
   1fbf2:	1e04      	subs	r4, r0, #0
   1fbf4:	db2f      	blt.n	1fc56 <qspi_nor_init+0x7a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1fbf6:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1fbf8:	6832      	ldr	r2, [r6, #0]
   1fbfa:	7919      	ldrb	r1, [r3, #4]
   1fbfc:	6818      	ldr	r0, [r3, #0]
   1fbfe:	f00d fe25 	bl	2d84c <pinctrl_configure_pins>
	if (ret < 0) {
   1fc02:	1e04      	subs	r4, r0, #0
   1fc04:	db27      	blt.n	1fc56 <qspi_nor_init+0x7a>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   1fc06:	2200      	movs	r2, #0
   1fc08:	2101      	movs	r1, #1
   1fc0a:	2029      	movs	r0, #41	; 0x29
   1fc0c:	f7f5 f81e 	bl	14c4c <z_arm_irq_priority_set>
	const struct qspi_nor_config *dev_config = dev->config;
   1fc10:	686e      	ldr	r6, [r5, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   1fc12:	692a      	ldr	r2, [r5, #16]
   1fc14:	494b      	ldr	r1, [pc, #300]	; (1fd44 <qspi_nor_init+0x168>)
   1fc16:	4630      	mov	r0, r6
   1fc18:	f003 fb64 	bl	232e4 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   1fc1c:	f7ff fe76 	bl	1f90c <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   1fc20:	1e04      	subs	r4, r0, #0
   1fc22:	db18      	blt.n	1fc56 <qspi_nor_init+0x7a>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   1fc24:	7af3      	ldrb	r3, [r6, #11]
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1fc26:	3b02      	subs	r3, #2
   1fc28:	2b01      	cmp	r3, #1
   1fc2a:	d918      	bls.n	1fc5e <qspi_nor_init+0x82>
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   1fc2c:	f896 800a 	ldrb.w	r8, [r6, #10]
   1fc30:	f1a8 0803 	sub.w	r8, r8, #3
   1fc34:	f1b8 0f01 	cmp.w	r8, #1
   1fc38:	bf8c      	ite	hi
   1fc3a:	f04f 0800 	movhi.w	r8, #0
   1fc3e:	f04f 0801 	movls.w	r8, #1
		ret = qspi_rdsr(dev, sr_num);
   1fc42:	4628      	mov	r0, r5
   1fc44:	f00d fcbb 	bl	2d5be <qspi_rdsr.constprop.0>
		if (ret < 0) {
   1fc48:	1e04      	subs	r4, r0, #0
   1fc4a:	da0b      	bge.n	1fc64 <qspi_nor_init+0x88>
			LOG_ERR("RDSR failed: %d", ret);
   1fc4c:	483e      	ldr	r0, [pc, #248]	; (1fd48 <qspi_nor_init+0x16c>)
   1fc4e:	4622      	mov	r2, r4
   1fc50:	2145      	movs	r1, #69	; 0x45
   1fc52:	f00a fa08 	bl	2a066 <z_log_minimal_printk>
}
   1fc56:	4620      	mov	r0, r4
   1fc58:	b00a      	add	sp, #40	; 0x28
   1fc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   1fc5e:	f04f 0801 	mov.w	r8, #1
   1fc62:	e7ee      	b.n	1fc42 <qspi_nor_init+0x66>
		uint8_t sr = (uint8_t)ret;
   1fc64:	b2e2      	uxtb	r2, r4
		if (qe_state != qe_value) {
   1fc66:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1fc6a:	45a0      	cmp	r8, r4
   1fc6c:	ae04      	add	r6, sp, #16
   1fc6e:	af05      	add	r7, sp, #20
   1fc70:	d028      	beq.n	1fcc4 <qspi_nor_init+0xe8>
	uint8_t sr_array[2] = {0};
   1fc72:	2300      	movs	r3, #0
			sr ^= qe_mask;
   1fc74:	f082 0240 	eor.w	r2, r2, #64	; 0x40
	uint8_t sr_array[2] = {0};
   1fc78:	f8ad 3010 	strh.w	r3, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fc7c:	a907      	add	r1, sp, #28
		sr_array[0] = sr_val;
   1fc7e:	f88d 2010 	strb.w	r2, [sp, #16]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fc82:	4628      	mov	r0, r5
	const struct qspi_buf sr_buf = {
   1fc84:	2201      	movs	r2, #1
	struct qspi_cmd cmd = {
   1fc86:	e9cd 2306 	strd	r2, r3, [sp, #24]
	const struct qspi_buf sr_buf = {
   1fc8a:	9605      	str	r6, [sp, #20]
	struct qspi_cmd cmd = {
   1fc8c:	9309      	str	r3, [sp, #36]	; 0x24
   1fc8e:	f88d 201c 	strb.w	r2, [sp, #28]
   1fc92:	9708      	str	r7, [sp, #32]
	ret = qspi_send_cmd(dev, &cmd, true);
   1fc94:	f7ff fe88 	bl	1f9a8 <qspi_send_cmd>
	if (ret == 0) {
   1fc98:	1e04      	subs	r4, r0, #0
   1fc9a:	d00c      	beq.n	1fcb6 <qspi_nor_init+0xda>
		if (ret < 0) {
   1fc9c:	dadb      	bge.n	1fc56 <qspi_nor_init+0x7a>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   1fc9e:	492b      	ldr	r1, [pc, #172]	; (1fd4c <qspi_nor_init+0x170>)
   1fca0:	4a2b      	ldr	r2, [pc, #172]	; (1fd50 <qspi_nor_init+0x174>)
   1fca2:	482c      	ldr	r0, [pc, #176]	; (1fd54 <qspi_nor_init+0x178>)
   1fca4:	f1b8 0f00 	cmp.w	r8, #0
   1fca8:	bf08      	it	eq
   1fcaa:	460a      	moveq	r2, r1
   1fcac:	4623      	mov	r3, r4
   1fcae:	2145      	movs	r1, #69	; 0x45
   1fcb0:	f00a f9d9 	bl	2a066 <z_log_minimal_printk>
	if (ret != 0) {
   1fcb4:	e7cf      	b.n	1fc56 <qspi_nor_init+0x7a>
		ret = qspi_rdsr(dev, 1);
   1fcb6:	4628      	mov	r0, r5
   1fcb8:	f00d fc81 	bl	2d5be <qspi_rdsr.constprop.0>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   1fcbc:	1e04      	subs	r4, r0, #0
   1fcbe:	dbee      	blt.n	1fc9e <qspi_nor_init+0xc2>
   1fcc0:	07e3      	lsls	r3, r4, #31
   1fcc2:	d4f8      	bmi.n	1fcb6 <qspi_nor_init+0xda>
	qspi_device_uninit(dev);
   1fcc4:	4628      	mov	r0, r5
   1fcc6:	f7ff feb3 	bl	1fa30 <qspi_device_uninit>
	const struct qspi_cmd cmd = {
   1fcca:	f04f 0803 	mov.w	r8, #3
   1fcce:	2300      	movs	r3, #0
   1fcd0:	e9cd 8306 	strd	r8, r3, [sp, #24]
   1fcd4:	9308      	str	r3, [sp, #32]
	int ret = qspi_device_init(dev);
   1fcd6:	4628      	mov	r0, r5
	const struct qspi_cmd cmd = {
   1fcd8:	239f      	movs	r3, #159	; 0x9f
	const struct qspi_buf rx_buf = {
   1fcda:	9605      	str	r6, [sp, #20]
	const struct qspi_cmd cmd = {
   1fcdc:	f88d 301c 	strb.w	r3, [sp, #28]
   1fce0:	9709      	str	r7, [sp, #36]	; 0x24
	int ret = qspi_device_init(dev);
   1fce2:	f7ff fe3b 	bl	1f95c <qspi_device_init>
	if (ret == 0) {
   1fce6:	4602      	mov	r2, r0
   1fce8:	b128      	cbz	r0, 1fcf6 <qspi_nor_init+0x11a>
	qspi_device_uninit(dev);
   1fcea:	4628      	mov	r0, r5
   1fcec:	f7ff fea0 	bl	1fa30 <qspi_device_uninit>
		return -ENODEV;
   1fcf0:	f06f 0412 	mvn.w	r4, #18
   1fcf4:	e7af      	b.n	1fc56 <qspi_nor_init+0x7a>
		ret = qspi_send_cmd(dev, &cmd, false);
   1fcf6:	a907      	add	r1, sp, #28
   1fcf8:	4628      	mov	r0, r5
   1fcfa:	f7ff fe55 	bl	1f9a8 <qspi_send_cmd>
   1fcfe:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1fd00:	4628      	mov	r0, r5
   1fd02:	f7ff fe95 	bl	1fa30 <qspi_device_uninit>
	if (ret != 0) {
   1fd06:	2c00      	cmp	r4, #0
   1fd08:	d1f2      	bne.n	1fcf0 <qspi_nor_init+0x114>
	const struct qspi_nor_config *qnc = dev->config;
   1fd0a:	686d      	ldr	r5, [r5, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   1fd0c:	4642      	mov	r2, r8
   1fd0e:	4631      	mov	r1, r6
   1fd10:	f105 001c 	add.w	r0, r5, #28
   1fd14:	f00b f948 	bl	2afa8 <memcmp>
   1fd18:	4604      	mov	r4, r0
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	d09b      	beq.n	1fc56 <qspi_nor_init+0x7a>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   1fd1e:	7fab      	ldrb	r3, [r5, #30]
   1fd20:	9303      	str	r3, [sp, #12]
   1fd22:	7f6b      	ldrb	r3, [r5, #29]
   1fd24:	9302      	str	r3, [sp, #8]
   1fd26:	7f2b      	ldrb	r3, [r5, #28]
   1fd28:	9301      	str	r3, [sp, #4]
   1fd2a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1fd2e:	9300      	str	r3, [sp, #0]
   1fd30:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1fd34:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1fd38:	4807      	ldr	r0, [pc, #28]	; (1fd58 <qspi_nor_init+0x17c>)
   1fd3a:	2145      	movs	r1, #69	; 0x45
   1fd3c:	f00a f993 	bl	2a066 <z_log_minimal_printk>
		return -ENODEV;
   1fd40:	e7d6      	b.n	1fcf0 <qspi_nor_init+0x114>
   1fd42:	bf00      	nop
   1fd44:	0002d56f 	.word	0x0002d56f
   1fd48:	00032787 	.word	0x00032787
   1fd4c:	00032781 	.word	0x00032781
   1fd50:	0003277d 	.word	0x0003277d
   1fd54:	0003279c 	.word	0x0003279c
   1fd58:	000327b2 	.word	0x000327b2

0001fd5c <qspi_nor_erase>:
{
   1fd5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd60:	4615      	mov	r5, r2
	if (addr < 0 ||
   1fd62:	1e0a      	subs	r2, r1, #0
	const struct qspi_nor_config *params = dev->config;
   1fd64:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   1fd68:	4606      	mov	r6, r0
	if (addr < 0 ||
   1fd6a:	db05      	blt.n	1fd78 <qspi_nor_erase+0x1c>
   1fd6c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	    (addr + size) > params->size) {
   1fd70:	1951      	adds	r1, r2, r5
	if (addr < 0 ||
   1fd72:	4299      	cmp	r1, r3
	    (addr + size) > params->size) {
   1fd74:	4690      	mov	r8, r2
	if (addr < 0 ||
   1fd76:	d909      	bls.n	1fd8c <qspi_nor_erase+0x30>
		LOG_ERR("erase error: address or size "
   1fd78:	483c      	ldr	r0, [pc, #240]	; (1fe6c <qspi_nor_erase+0x110>)
   1fd7a:	462b      	mov	r3, r5
   1fd7c:	2145      	movs	r1, #69	; 0x45
   1fd7e:	f00a f972 	bl	2a066 <z_log_minimal_printk>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1fd82:	f06f 0415 	mvn.w	r4, #21
}
   1fd86:	4620      	mov	r0, r4
   1fd88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   1fd8c:	f3c2 020b 	ubfx	r2, r2, #0, #12
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   1fd90:	2d00      	cmp	r5, #0
   1fd92:	d0f6      	beq.n	1fd82 <qspi_nor_erase+0x26>
   1fd94:	f3c5 030b 	ubfx	r3, r5, #0, #12
   1fd98:	4313      	orrs	r3, r2
   1fd9a:	d1f2      	bne.n	1fd82 <qspi_nor_erase+0x26>
	rv = qspi_device_init(dev);
   1fd9c:	f7ff fdde 	bl	1f95c <qspi_device_init>
	if (rv != 0) {
   1fda0:	4604      	mov	r4, r0
   1fda2:	bb68      	cbnz	r0, 1fe00 <qspi_nor_erase+0xa4>
	qspi_trans_lock(dev);
   1fda4:	6930      	ldr	r0, [r6, #16]
   1fda6:	f00d fbef 	bl	2d588 <qspi_trans_lock.isra.0>
	rv = qspi_nor_write_protection_set(dev, false);
   1fdaa:	4621      	mov	r1, r4
   1fdac:	4630      	mov	r0, r6
   1fdae:	f00d fbf1 	bl	2d594 <qspi_nor_write_protection_set>
	if (rv != 0) {
   1fdb2:	4604      	mov	r4, r0
   1fdb4:	bb08      	cbnz	r0, 1fdfa <qspi_nor_erase+0x9e>
	qspi_lock(dev);
   1fdb6:	6930      	ldr	r0, [r6, #16]
		if (res == NRFX_SUCCESS) {
   1fdb8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1fe70 <qspi_nor_erase+0x114>
	qspi_lock(dev);
   1fdbc:	f00d fbdd 	bl	2d57a <qspi_lock.isra.0>
		if (size == params->size) {
   1fdc0:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1fdc4:	42ab      	cmp	r3, r5
   1fdc6:	d11f      	bne.n	1fe08 <qspi_nor_erase+0xac>
			res = nrfx_qspi_chip_erase();
   1fdc8:	f00d ff5a 	bl	2dc80 <nrfx_qspi_chip_erase>
   1fdcc:	46ab      	mov	fp, r5
   1fdce:	4607      	mov	r7, r0
		qspi_wait_for_completion(dev, res);
   1fdd0:	6930      	ldr	r0, [r6, #16]
   1fdd2:	4639      	mov	r1, r7
   1fdd4:	f7ff fdb4 	bl	1f940 <qspi_wait_for_completion.isra.0>
		if (res == NRFX_SUCCESS) {
   1fdd8:	4557      	cmp	r7, sl
   1fdda:	d13b      	bne.n	1fe54 <qspi_nor_erase+0xf8>
	while (size > 0) {
   1fddc:	ebb5 050b 	subs.w	r5, r5, fp
			addr += adj;
   1fde0:	44d8      	add	r8, fp
	while (size > 0) {
   1fde2:	d1ed      	bne.n	1fdc0 <qspi_nor_erase+0x64>
	k_sem_give(&dev_data->sem);
   1fde4:	6930      	ldr	r0, [r6, #16]
   1fde6:	3018      	adds	r0, #24
   1fde8:	f00d fbbf 	bl	2d56a <k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   1fdec:	2101      	movs	r1, #1
   1fdee:	4630      	mov	r0, r6
   1fdf0:	f00d fbd0 	bl	2d594 <qspi_nor_write_protection_set>
   1fdf4:	2c00      	cmp	r4, #0
   1fdf6:	bf08      	it	eq
   1fdf8:	4604      	moveq	r4, r0
	k_sem_give(&dev_data->trans);
   1fdfa:	6930      	ldr	r0, [r6, #16]
   1fdfc:	f00d fbb5 	bl	2d56a <k_sem_give>
	qspi_device_uninit(dev);
   1fe00:	4630      	mov	r0, r6
   1fe02:	f7ff fe15 	bl	1fa30 <qspi_device_uninit>
	return rv;
   1fe06:	e7be      	b.n	1fd86 <qspi_nor_erase+0x2a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1fe08:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1fe0c:	d30a      	bcc.n	1fe24 <qspi_nor_erase+0xc8>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   1fe0e:	fa1f f388 	uxth.w	r3, r8
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   1fe12:	b953      	cbnz	r3, 1fe2a <qspi_nor_erase+0xce>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1fe14:	4641      	mov	r1, r8
   1fe16:	2001      	movs	r0, #1
   1fe18:	f003 fc3e 	bl	23698 <nrfx_qspi_erase>
			adj = QSPI_BLOCK_SIZE;
   1fe1c:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   1fe20:	4607      	mov	r7, r0
			adj = QSPI_BLOCK_SIZE;
   1fe22:	e7d5      	b.n	1fdd0 <qspi_nor_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1fe24:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1fe28:	d309      	bcc.n	1fe3e <qspi_nor_erase+0xe2>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   1fe2a:	f3c8 000b 	ubfx	r0, r8, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   1fe2e:	b930      	cbnz	r0, 1fe3e <qspi_nor_erase+0xe2>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1fe30:	4641      	mov	r1, r8
   1fe32:	f003 fc31 	bl	23698 <nrfx_qspi_erase>
			adj = QSPI_SECTOR_SIZE;
   1fe36:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   1fe3a:	4607      	mov	r7, r0
			adj = QSPI_SECTOR_SIZE;
   1fe3c:	e7c8      	b.n	1fdd0 <qspi_nor_erase+0x74>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1fe3e:	480d      	ldr	r0, [pc, #52]	; (1fe74 <qspi_nor_erase+0x118>)
			res = NRFX_ERROR_INVALID_PARAM;
   1fe40:	4f0d      	ldr	r7, [pc, #52]	; (1fe78 <qspi_nor_erase+0x11c>)
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   1fe42:	462b      	mov	r3, r5
   1fe44:	4642      	mov	r2, r8
   1fe46:	2145      	movs	r1, #69	; 0x45
   1fe48:	f00a f90d 	bl	2a066 <z_log_minimal_printk>
		qspi_wait_for_completion(dev, res);
   1fe4c:	490a      	ldr	r1, [pc, #40]	; (1fe78 <qspi_nor_erase+0x11c>)
   1fe4e:	6930      	ldr	r0, [r6, #16]
   1fe50:	f7ff fd76 	bl	1f940 <qspi_wait_for_completion.isra.0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   1fe54:	4809      	ldr	r0, [pc, #36]	; (1fe7c <qspi_nor_erase+0x120>)
   1fe56:	462b      	mov	r3, r5
   1fe58:	4642      	mov	r2, r8
   1fe5a:	2145      	movs	r1, #69	; 0x45
   1fe5c:	f00a f903 	bl	2a066 <z_log_minimal_printk>
			rv = qspi_get_zephyr_ret_code(res);
   1fe60:	4638      	mov	r0, r7
   1fe62:	f7ff fd53 	bl	1f90c <qspi_get_zephyr_ret_code>
   1fe66:	4604      	mov	r4, r0
			break;
   1fe68:	e7bc      	b.n	1fde4 <qspi_nor_erase+0x88>
   1fe6a:	bf00      	nop
   1fe6c:	000327e9 	.word	0x000327e9
   1fe70:	0bad0000 	.word	0x0bad0000
   1fe74:	00032838 	.word	0x00032838
   1fe78:	0bad0004 	.word	0x0bad0004
   1fe7c:	0003285b 	.word	0x0003285b

0001fe80 <qspi_nor_write>:
{
   1fe80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1fe84:	4605      	mov	r5, r0
   1fe86:	460f      	mov	r7, r1
   1fe88:	461e      	mov	r6, r3
	if (!src) {
   1fe8a:	4690      	mov	r8, r2
   1fe8c:	b19a      	cbz	r2, 1feb6 <qspi_nor_write+0x36>
	if ((size == 0)
   1fe8e:	b193      	cbz	r3, 1feb6 <qspi_nor_write+0x36>
	    || ((size > 4) && ((size % 4U) != 0))) {
   1fe90:	2b04      	cmp	r3, #4
   1fe92:	d901      	bls.n	1fe98 <qspi_nor_write+0x18>
   1fe94:	079a      	lsls	r2, r3, #30
   1fe96:	d10e      	bne.n	1feb6 <qspi_nor_write+0x36>
	if ((addr % 4U) != 0) {
   1fe98:	07bb      	lsls	r3, r7, #30
   1fe9a:	d10c      	bne.n	1feb6 <qspi_nor_write+0x36>
	if (addr < 0 ||
   1fe9c:	2f00      	cmp	r7, #0
	const struct qspi_nor_config *params = dev->config;
   1fe9e:	686a      	ldr	r2, [r5, #4]
	if (addr < 0 ||
   1fea0:	db03      	blt.n	1feaa <qspi_nor_write+0x2a>
   1fea2:	6992      	ldr	r2, [r2, #24]
	    (addr + size) > params->size) {
   1fea4:	19bb      	adds	r3, r7, r6
	if (addr < 0 ||
   1fea6:	4293      	cmp	r3, r2
   1fea8:	d90b      	bls.n	1fec2 <qspi_nor_write+0x42>
		LOG_ERR("write error: address or size "
   1feaa:	483f      	ldr	r0, [pc, #252]	; (1ffa8 <qspi_nor_write+0x128>)
   1feac:	4633      	mov	r3, r6
   1feae:	463a      	mov	r2, r7
   1feb0:	2145      	movs	r1, #69	; 0x45
   1feb2:	f00a f8d8 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   1feb6:	f06f 0415 	mvn.w	r4, #21
}
   1feba:	4620      	mov	r0, r4
   1febc:	b002      	add	sp, #8
   1febe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int rc = qspi_device_init(dev);
   1fec2:	4628      	mov	r0, r5
   1fec4:	f7ff fd4a 	bl	1f95c <qspi_device_init>
	if (rc != 0) {
   1fec8:	4604      	mov	r4, r0
   1feca:	2800      	cmp	r0, #0
   1fecc:	d163      	bne.n	1ff96 <qspi_nor_write+0x116>
	qspi_trans_lock(dev);
   1fece:	6928      	ldr	r0, [r5, #16]
   1fed0:	f00d fb5a 	bl	2d588 <qspi_trans_lock.isra.0>
	res = qspi_nor_write_protection_set(dev, false);
   1fed4:	4621      	mov	r1, r4
   1fed6:	4628      	mov	r0, r5
   1fed8:	f00d fb5c 	bl	2d594 <qspi_nor_write_protection_set>
   1fedc:	4604      	mov	r4, r0
	qspi_lock(dev);
   1fede:	6928      	ldr	r0, [r5, #16]
   1fee0:	f00d fb4b 	bl	2d57a <qspi_lock.isra.0>
	if (!res) {
   1fee4:	2c00      	cmp	r4, #0
   1fee6:	d143      	bne.n	1ff70 <qspi_nor_write+0xf0>
		if (size < 4U) {
   1fee8:	2e03      	cmp	r6, #3
   1feea:	d81e      	bhi.n	1ff2a <qspi_nor_write+0xaa>
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   1feec:	2104      	movs	r1, #4
   1feee:	463a      	mov	r2, r7
   1fef0:	eb0d 0001 	add.w	r0, sp, r1
   1fef4:	f00d fec1 	bl	2dc7a <nrfx_qspi_read>
   1fef8:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   1fefa:	4601      	mov	r1, r0
   1fefc:	6928      	ldr	r0, [r5, #16]
   1fefe:	f7ff fd1f 	bl	1f940 <qspi_wait_for_completion.isra.0>
	if (res == NRFX_SUCCESS) {
   1ff02:	4b2a      	ldr	r3, [pc, #168]	; (1ffac <qspi_nor_write+0x12c>)
   1ff04:	429c      	cmp	r4, r3
   1ff06:	d133      	bne.n	1ff70 <qspi_nor_write+0xf0>
		memcpy(buf, sptr, slen);
   1ff08:	4632      	mov	r2, r6
   1ff0a:	4641      	mov	r1, r8
   1ff0c:	a801      	add	r0, sp, #4
   1ff0e:	f00b f872 	bl	2aff6 <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ff12:	2104      	movs	r1, #4
   1ff14:	463a      	mov	r2, r7
   1ff16:	eb0d 0001 	add.w	r0, sp, r1
			res = nrfx_qspi_write(src, size, addr);
   1ff1a:	f00d feab 	bl	2dc74 <nrfx_qspi_write>
   1ff1e:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ff20:	4601      	mov	r1, r0
   1ff22:	6928      	ldr	r0, [r5, #16]
   1ff24:	f7ff fd0c 	bl	1f940 <qspi_wait_for_completion.isra.0>
   1ff28:	e022      	b.n	1ff70 <qspi_nor_write+0xf0>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ff2a:	f008 4360 	and.w	r3, r8, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   1ff2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1ff32:	d034      	beq.n	1ff9e <qspi_nor_write+0x11e>
			if (res == NRFX_SUCCESS) {
   1ff34:	f8df a074 	ldr.w	sl, [pc, #116]	; 1ffac <qspi_nor_write+0x12c>
			size_t len = MIN(slen, sizeof(buf));
   1ff38:	2e04      	cmp	r6, #4
   1ff3a:	46b1      	mov	r9, r6
   1ff3c:	bf28      	it	cs
   1ff3e:	f04f 0904 	movcs.w	r9, #4
			memcpy(buf, sp, len);
   1ff42:	464a      	mov	r2, r9
   1ff44:	4641      	mov	r1, r8
   1ff46:	a801      	add	r0, sp, #4
   1ff48:	f00b f855 	bl	2aff6 <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   1ff4c:	2104      	movs	r1, #4
   1ff4e:	463a      	mov	r2, r7
   1ff50:	eb0d 0001 	add.w	r0, sp, r1
   1ff54:	f00d fe8e 	bl	2dc74 <nrfx_qspi_write>
   1ff58:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   1ff5a:	4601      	mov	r1, r0
   1ff5c:	6928      	ldr	r0, [r5, #16]
   1ff5e:	f7ff fcef 	bl	1f940 <qspi_wait_for_completion.isra.0>
			if (res == NRFX_SUCCESS) {
   1ff62:	4554      	cmp	r4, sl
   1ff64:	d104      	bne.n	1ff70 <qspi_nor_write+0xf0>
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ff66:	ebb6 0609 	subs.w	r6, r6, r9
				sp += len;
   1ff6a:	44c8      	add	r8, r9
				addr += len;
   1ff6c:	444f      	add	r7, r9
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   1ff6e:	d1e3      	bne.n	1ff38 <qspi_nor_write+0xb8>
	k_sem_give(&dev_data->sem);
   1ff70:	6928      	ldr	r0, [r5, #16]
   1ff72:	3018      	adds	r0, #24
   1ff74:	f00d faf9 	bl	2d56a <k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   1ff78:	2101      	movs	r1, #1
   1ff7a:	4628      	mov	r0, r5
   1ff7c:	f00d fb0a 	bl	2d594 <qspi_nor_write_protection_set>
   1ff80:	4606      	mov	r6, r0
	k_sem_give(&dev_data->trans);
   1ff82:	6928      	ldr	r0, [r5, #16]
   1ff84:	f00d faf1 	bl	2d56a <k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   1ff88:	2c00      	cmp	r4, #0
   1ff8a:	bf14      	ite	ne
   1ff8c:	4620      	movne	r0, r4
   1ff8e:	4630      	moveq	r0, r6
   1ff90:	f7ff fcbc 	bl	1f90c <qspi_get_zephyr_ret_code>
   1ff94:	4604      	mov	r4, r0
	qspi_device_uninit(dev);
   1ff96:	4628      	mov	r0, r5
   1ff98:	f7ff fd4a 	bl	1fa30 <qspi_device_uninit>
	return rc;
   1ff9c:	e78d      	b.n	1feba <qspi_nor_write+0x3a>
			res = nrfx_qspi_write(src, size, addr);
   1ff9e:	463a      	mov	r2, r7
   1ffa0:	4631      	mov	r1, r6
   1ffa2:	4640      	mov	r0, r8
   1ffa4:	e7b9      	b.n	1ff1a <qspi_nor_write+0x9a>
   1ffa6:	bf00      	nop
   1ffa8:	0003287e 	.word	0x0003287e
   1ffac:	0bad0000 	.word	0x0bad0000

0001ffb0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1ffb0:	4b02      	ldr	r3, [pc, #8]	; (1ffbc <flash_nrf_pages_layout+0xc>)
   1ffb2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1ffb4:	2301      	movs	r3, #1
   1ffb6:	6013      	str	r3, [r2, #0]
}
   1ffb8:	4770      	bx	lr
   1ffba:	bf00      	nop
   1ffbc:	200033d4 	.word	0x200033d4

0001ffc0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1ffc0:	4800      	ldr	r0, [pc, #0]	; (1ffc4 <flash_nrf_get_parameters+0x4>)
   1ffc2:	4770      	bx	lr
   1ffc4:	0002edbc 	.word	0x0002edbc

0001ffc8 <flash_nrf_read>:
{
   1ffc8:	b570      	push	{r4, r5, r6, lr}
   1ffca:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1ffcc:	4628      	mov	r0, r5
   1ffce:	4619      	mov	r1, r3
{
   1ffd0:	4616      	mov	r6, r2
   1ffd2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1ffd4:	f00d fb0e 	bl	2d5f4 <is_regular_addr_valid>
   1ffd8:	b940      	cbnz	r0, 1ffec <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1ffda:	4808      	ldr	r0, [pc, #32]	; (1fffc <flash_nrf_read+0x34>)
   1ffdc:	4623      	mov	r3, r4
   1ffde:	462a      	mov	r2, r5
   1ffe0:	2145      	movs	r1, #69	; 0x45
   1ffe2:	f00a f840 	bl	2a066 <z_log_minimal_printk>
   1ffe6:	f06f 0015 	mvn.w	r0, #21
}
   1ffea:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1ffec:	b124      	cbz	r4, 1fff8 <flash_nrf_read+0x30>
	memcpy(data, (void *)addr, len);
   1ffee:	4622      	mov	r2, r4
   1fff0:	4629      	mov	r1, r5
   1fff2:	4630      	mov	r0, r6
   1fff4:	f00a ffff 	bl	2aff6 <memcpy>
		return 0;
   1fff8:	2000      	movs	r0, #0
   1fffa:	e7f6      	b.n	1ffea <flash_nrf_read+0x22>
   1fffc:	000328e3 	.word	0x000328e3

00020000 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   20000:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20002:	2201      	movs	r2, #1
   20004:	4611      	mov	r1, r2
   20006:	4807      	ldr	r0, [pc, #28]	; (20024 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20008:	4c07      	ldr	r4, [pc, #28]	; (20028 <nrf_flash_init+0x28>)
   2000a:	f00d fed2 	bl	2ddb2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   2000e:	f002 f9d1 	bl	223b4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   20012:	f00d fe1d 	bl	2dc50 <nrfx_nvmc_flash_page_count_get>
   20016:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   20018:	f00d fe16 	bl	2dc48 <nrfx_nvmc_flash_page_size_get>
   2001c:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2001e:	2000      	movs	r0, #0
   20020:	bd10      	pop	{r4, pc}
   20022:	bf00      	nop
   20024:	200033dc 	.word	0x200033dc
   20028:	200033d4 	.word	0x200033d4

0002002c <restore_pofwarn.part.0>:
    uint32_t pofcon = p_reg->POFCON;
   2002c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20030:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
   20034:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   20038:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2003c:	f023 031f 	bic.w	r3, r3, #31
   20040:	430b      	orrs	r3, r1
    pofcon |=
   20042:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   20046:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	if (pofcon_enabled) {
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
   2004a:	4b02      	ldr	r3, [pc, #8]	; (20054 <restore_pofwarn.part.0+0x28>)
   2004c:	2200      	movs	r2, #0
   2004e:	701a      	strb	r2, [r3, #0]
	}
}
   20050:	4770      	bx	lr
   20052:	bf00      	nop
   20054:	2000423d 	.word	0x2000423d

00020058 <suspend_pofwarn>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2005c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   20060:	2b08      	cmp	r3, #8
   20062:	d120      	bne.n	200a6 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   20064:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20068:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
	if (enabled) {
   2006c:	07cb      	lsls	r3, r1, #31
   2006e:	d51a      	bpl.n	200a6 <suspend_pofwarn+0x4e>
    uint32_t pofcon = p_reg->POFCON;
   20070:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
   20074:	f001 011e 	and.w	r1, r1, #30
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   20078:	f023 031f 	bic.w	r3, r3, #31
    pofcon |=
   2007c:	430b      	orrs	r3, r1
    p_reg->POFCON = pofcon;
   2007e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20082:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
   20086:	b15b      	cbz	r3, 200a0 <suspend_pofwarn+0x48>
    uint32_t pofcon = p_reg->POFCON;
   20088:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
   2008c:	f023 031f 	bic.w	r3, r3, #31
   20090:	430b      	orrs	r3, r1
    pofcon |=
   20092:	f043 0301 	orr.w	r3, r3, #1
    p_reg->POFCON = pofcon;
   20096:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			return -ECANCELED;
   2009a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   2009e:	4770      	bx	lr
		pofcon_enabled = enabled;
   200a0:	4b02      	ldr	r3, [pc, #8]	; (200ac <suspend_pofwarn+0x54>)
   200a2:	2201      	movs	r2, #1
   200a4:	701a      	strb	r2, [r3, #0]
		return 0;
   200a6:	2000      	movs	r0, #0
}
   200a8:	4770      	bx	lr
   200aa:	bf00      	nop
   200ac:	2000423d 	.word	0x2000423d

000200b0 <erase_op>:
{
   200b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200b2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   200b4:	f00d fdc8 	bl	2dc48 <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   200b8:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   200ba:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   200bc:	b10b      	cbz	r3, 200c2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   200be:	f00d fd22 	bl	2db06 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   200c2:	4f13      	ldr	r7, [pc, #76]	; (20110 <erase_op+0x60>)
{
   200c4:	2600      	movs	r6, #0
		if (SUSPEND_POFWARN()) {
   200c6:	f7ff ffc7 	bl	20058 <suspend_pofwarn>
   200ca:	b9e8      	cbnz	r0, 20108 <erase_op+0x58>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   200cc:	6860      	ldr	r0, [r4, #4]
   200ce:	f002 ff67 	bl	22fa0 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   200d2:	68a3      	ldr	r3, [r4, #8]
   200d4:	1b5b      	subs	r3, r3, r5
   200d6:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   200d8:	6863      	ldr	r3, [r4, #4]
   200da:	442b      	add	r3, r5
   200dc:	6063      	str	r3, [r4, #4]
	if (pofcon_enabled) {
   200de:	783b      	ldrb	r3, [r7, #0]
   200e0:	b10b      	cbz	r3, 200e6 <erase_op+0x36>
   200e2:	f7ff ffa3 	bl	2002c <restore_pofwarn.part.0>
		if (e_ctx->enable_time_limit) {
   200e6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   200e8:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   200ea:	b93b      	cbnz	r3, 200fc <erase_op+0x4c>
	} while (e_ctx->len > 0);
   200ec:	68a3      	ldr	r3, [r4, #8]
   200ee:	2b00      	cmp	r3, #0
   200f0:	d1e9      	bne.n	200c6 <erase_op+0x16>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   200f2:	68a0      	ldr	r0, [r4, #8]
   200f4:	3800      	subs	r0, #0
   200f6:	bf18      	it	ne
   200f8:	2001      	movne	r0, #1
}
   200fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   200fc:	4630      	mov	r0, r6
   200fe:	f002 fa11 	bl	22524 <nrf_flash_sync_check_time_limit>
   20102:	2800      	cmp	r0, #0
   20104:	d0f2      	beq.n	200ec <erase_op+0x3c>
   20106:	e7f4      	b.n	200f2 <erase_op+0x42>
			return -ECANCELED;
   20108:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   2010c:	e7f5      	b.n	200fa <erase_op+0x4a>
   2010e:	bf00      	nop
   20110:	2000423d 	.word	0x2000423d

00020114 <flash_nrf_erase>:
{
   20114:	b5f0      	push	{r4, r5, r6, r7, lr}
   20116:	b087      	sub	sp, #28
   20118:	460e      	mov	r6, r1
   2011a:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2011c:	f00d fd94 	bl	2dc48 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   20120:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   20122:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   20124:	4630      	mov	r0, r6
   20126:	f00d fa65 	bl	2d5f4 <is_regular_addr_valid>
   2012a:	b358      	cbz	r0, 20184 <flash_nrf_erase+0x70>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2012c:	fbb6 f3f7 	udiv	r3, r6, r7
   20130:	fb07 6313 	mls	r3, r7, r3, r6
   20134:	b923      	cbnz	r3, 20140 <flash_nrf_erase+0x2c>
   20136:	fbb5 f4f7 	udiv	r4, r5, r7
   2013a:	fb07 5414 	mls	r4, r7, r4, r5
   2013e:	b154      	cbz	r4, 20156 <flash_nrf_erase+0x42>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   20140:	481f      	ldr	r0, [pc, #124]	; (201c0 <flash_nrf_erase+0xac>)
   20142:	462b      	mov	r3, r5
   20144:	4632      	mov	r2, r6
   20146:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20148:	f009 ff8d 	bl	2a066 <z_log_minimal_printk>
			return -EINVAL;
   2014c:	f06f 0415 	mvn.w	r4, #21
}
   20150:	4620      	mov	r0, r4
   20152:	b007      	add	sp, #28
   20154:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   20156:	42bd      	cmp	r5, r7
   20158:	d3fa      	bcc.n	20150 <flash_nrf_erase+0x3c>
	return z_impl_k_sem_take(sem, timeout);
   2015a:	f04f 33ff 	mov.w	r3, #4294967295
   2015e:	f04f 32ff 	mov.w	r2, #4294967295
   20162:	4818      	ldr	r0, [pc, #96]	; (201c4 <flash_nrf_erase+0xb0>)
   20164:	f004 f9dc 	bl	24520 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   20168:	f00d fccb 	bl	2db02 <nrf_flash_sync_is_required>
   2016c:	ab02      	add	r3, sp, #8
   2016e:	4601      	mov	r1, r0
   20170:	b968      	cbnz	r0, 2018e <flash_nrf_erase+0x7a>
	struct flash_context context = {
   20172:	2210      	movs	r2, #16
   20174:	4618      	mov	r0, r3
   20176:	f00a ff49 	bl	2b00c <memset>
   2017a:	e9cd 6503 	strd	r6, r5, [sp, #12]
	return	erase_op(&context);
   2017e:	f7ff ff97 	bl	200b0 <erase_op>
   20182:	e017      	b.n	201b4 <flash_nrf_erase+0xa0>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20184:	4810      	ldr	r0, [pc, #64]	; (201c8 <flash_nrf_erase+0xb4>)
   20186:	462b      	mov	r3, r5
   20188:	4632      	mov	r2, r6
   2018a:	2145      	movs	r1, #69	; 0x45
   2018c:	e7dc      	b.n	20148 <flash_nrf_erase+0x34>
	struct flash_context context = {
   2018e:	2210      	movs	r2, #16
   20190:	4621      	mov	r1, r4
   20192:	4618      	mov	r0, r3
   20194:	f00a ff3a 	bl	2b00c <memset>
   20198:	2201      	movs	r2, #1
   2019a:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   2019e:	4a0b      	ldr	r2, [pc, #44]	; (201cc <flash_nrf_erase+0xb8>)
   201a0:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   201a4:	480a      	ldr	r0, [pc, #40]	; (201d0 <flash_nrf_erase+0xbc>)
	struct flash_context context = {
   201a6:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   201aa:	f002 f90b 	bl	223c4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   201ae:	4668      	mov	r0, sp
   201b0:	f002 f90e 	bl	223d0 <nrf_flash_sync_exe>
	return	erase_op(&context);
   201b4:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   201b6:	4803      	ldr	r0, [pc, #12]	; (201c4 <flash_nrf_erase+0xb0>)
   201b8:	f004 f978 	bl	244ac <z_impl_k_sem_give>
}
   201bc:	e7c8      	b.n	20150 <flash_nrf_erase+0x3c>
   201be:	bf00      	nop
   201c0:	00032905 	.word	0x00032905
   201c4:	200033dc 	.word	0x200033dc
   201c8:	000328e3 	.word	0x000328e3
   201cc:	000200b1 	.word	0x000200b1
   201d0:	00015e64 	.word	0x00015e64

000201d4 <write_op>:
{
   201d4:	b570      	push	{r4, r5, r6, lr}
	if (w_ctx->enable_time_limit) {
   201d6:	7b03      	ldrb	r3, [r0, #12]
{
   201d8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   201da:	b10b      	cbz	r3, 201e0 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   201dc:	f00d fc93 	bl	2db06 <nrf_flash_sync_get_timestamp_begin>
	if (pofcon_enabled) {
   201e0:	4e19      	ldr	r6, [pc, #100]	; (20248 <write_op+0x74>)
{
   201e2:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   201e4:	68a3      	ldr	r3, [r4, #8]
   201e6:	2b03      	cmp	r3, #3
   201e8:	d806      	bhi.n	201f8 <write_op+0x24>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   201ea:	4a18      	ldr	r2, [pc, #96]	; (2024c <write_op+0x78>)
   201ec:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   201f0:	07db      	lsls	r3, r3, #31
   201f2:	d5fb      	bpl.n	201ec <write_op+0x18>
	return FLASH_OP_DONE;
   201f4:	2000      	movs	r0, #0
}
   201f6:	bd70      	pop	{r4, r5, r6, pc}
		if (SUSPEND_POFWARN()) {
   201f8:	f7ff ff2e 	bl	20058 <suspend_pofwarn>
   201fc:	bb08      	cbnz	r0, 20242 <write_op+0x6e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   201fe:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   20200:	6860      	ldr	r0, [r4, #4]
   20202:	6819      	ldr	r1, [r3, #0]
   20204:	f002 ff00 	bl	23008 <nrfx_nvmc_word_write>
	if (pofcon_enabled) {
   20208:	7833      	ldrb	r3, [r6, #0]
   2020a:	b10b      	cbz	r3, 20210 <write_op+0x3c>
   2020c:	f7ff ff0e 	bl	2002c <restore_pofwarn.part.0>
	w_ctx->flash_addr += shift;
   20210:	6863      	ldr	r3, [r4, #4]
   20212:	3304      	adds	r3, #4
   20214:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   20216:	6823      	ldr	r3, [r4, #0]
   20218:	3304      	adds	r3, #4
   2021a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   2021c:	68a3      	ldr	r3, [r4, #8]
   2021e:	3b04      	subs	r3, #4
   20220:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   20222:	7b23      	ldrb	r3, [r4, #12]
		i++;
   20224:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   20226:	2b00      	cmp	r3, #0
   20228:	d0dc      	beq.n	201e4 <write_op+0x10>
			if (nrf_flash_sync_check_time_limit(i)) {
   2022a:	4628      	mov	r0, r5
   2022c:	f002 f97a 	bl	22524 <nrf_flash_sync_check_time_limit>
   20230:	2800      	cmp	r0, #0
   20232:	d0d7      	beq.n	201e4 <write_op+0x10>
   20234:	4a05      	ldr	r2, [pc, #20]	; (2024c <write_op+0x78>)
   20236:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2023a:	07d9      	lsls	r1, r3, #31
   2023c:	d5fb      	bpl.n	20236 <write_op+0x62>
				return FLASH_OP_ONGOING;
   2023e:	2001      	movs	r0, #1
   20240:	e7d9      	b.n	201f6 <write_op+0x22>
			return -ECANCELED;
   20242:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   20246:	e7d6      	b.n	201f6 <write_op+0x22>
   20248:	2000423d 	.word	0x2000423d
   2024c:	4001e000 	.word	0x4001e000

00020250 <flash_nrf_write>:
{
   20250:	b570      	push	{r4, r5, r6, lr}
   20252:	460d      	mov	r5, r1
   20254:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   20256:	4619      	mov	r1, r3
   20258:	4628      	mov	r0, r5
{
   2025a:	4616      	mov	r6, r2
   2025c:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2025e:	f00d f9c9 	bl	2d5f4 <is_regular_addr_valid>
   20262:	b950      	cbnz	r0, 2027a <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   20264:	481d      	ldr	r0, [pc, #116]	; (202dc <flash_nrf_write+0x8c>)
   20266:	4623      	mov	r3, r4
   20268:	462a      	mov	r2, r5
   2026a:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2026c:	f009 fefb 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   20270:	f06f 0415 	mvn.w	r4, #21
}
   20274:	4620      	mov	r0, r4
   20276:	b006      	add	sp, #24
   20278:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2027a:	ea45 0304 	orr.w	r3, r5, r4
   2027e:	079b      	lsls	r3, r3, #30
   20280:	d004      	beq.n	2028c <flash_nrf_write+0x3c>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   20282:	4817      	ldr	r0, [pc, #92]	; (202e0 <flash_nrf_write+0x90>)
   20284:	4623      	mov	r3, r4
   20286:	462a      	mov	r2, r5
   20288:	2145      	movs	r1, #69	; 0x45
   2028a:	e7ef      	b.n	2026c <flash_nrf_write+0x1c>
	if (!len) {
   2028c:	2c00      	cmp	r4, #0
   2028e:	d0f1      	beq.n	20274 <flash_nrf_write+0x24>
	return z_impl_k_sem_take(sem, timeout);
   20290:	f04f 33ff 	mov.w	r3, #4294967295
   20294:	f04f 32ff 	mov.w	r2, #4294967295
   20298:	4812      	ldr	r0, [pc, #72]	; (202e4 <flash_nrf_write+0x94>)
   2029a:	f004 f941 	bl	24520 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   2029e:	f00d fc30 	bl	2db02 <nrf_flash_sync_is_required>
   202a2:	4603      	mov	r3, r0
	struct flash_context context = {
   202a4:	e9cd 6502 	strd	r6, r5, [sp, #8]
   202a8:	a802      	add	r0, sp, #8
   202aa:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   202ac:	b18b      	cbz	r3, 202d2 <flash_nrf_write+0x82>
	struct flash_context context = {
   202ae:	2301      	movs	r3, #1
   202b0:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   202b4:	4b0c      	ldr	r3, [pc, #48]	; (202e8 <flash_nrf_write+0x98>)
   202b6:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   202ba:	f641 504c 	movw	r0, #7500	; 0x1d4c
   202be:	f002 f881 	bl	223c4 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   202c2:	4668      	mov	r0, sp
   202c4:	f002 f884 	bl	223d0 <nrf_flash_sync_exe>
	return write_op(&context);
   202c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   202ca:	4806      	ldr	r0, [pc, #24]	; (202e4 <flash_nrf_write+0x94>)
   202cc:	f004 f8ee 	bl	244ac <z_impl_k_sem_give>
}
   202d0:	e7d0      	b.n	20274 <flash_nrf_write+0x24>
	struct flash_context context = {
   202d2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   202d6:	f7ff ff7d 	bl	201d4 <write_op>
   202da:	e7f5      	b.n	202c8 <flash_nrf_write+0x78>
   202dc:	000328e3 	.word	0x000328e3
   202e0:	00032929 	.word	0x00032929
   202e4:	200033dc 	.word	0x200033dc
   202e8:	000201d5 	.word	0x000201d5

000202ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   202ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   202ee:	794b      	ldrb	r3, [r1, #5]
   202f0:	2b01      	cmp	r3, #1
   202f2:	d026      	beq.n	20342 <uarte_nrfx_configure+0x56>
   202f4:	2b03      	cmp	r3, #3
   202f6:	d121      	bne.n	2033c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   202f8:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   202fa:	798b      	ldrb	r3, [r1, #6]
   202fc:	2b03      	cmp	r3, #3
   202fe:	d11d      	bne.n	2033c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20300:	79ce      	ldrb	r6, [r1, #7]
   20302:	b10e      	cbz	r6, 20308 <uarte_nrfx_configure+0x1c>
   20304:	2e01      	cmp	r6, #1
   20306:	d119      	bne.n	2033c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20308:	790a      	ldrb	r2, [r1, #4]
   2030a:	b112      	cbz	r2, 20312 <uarte_nrfx_configure+0x26>
   2030c:	2a02      	cmp	r2, #2
   2030e:	d115      	bne.n	2033c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20310:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20312:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20314:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   20316:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2031a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   2031c:	d067      	beq.n	203ee <uarte_nrfx_configure+0x102>
   2031e:	d82d      	bhi.n	2037c <uarte_nrfx_configure+0x90>
   20320:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20324:	d066      	beq.n	203f4 <uarte_nrfx_configure+0x108>
   20326:	d816      	bhi.n	20356 <uarte_nrfx_configure+0x6a>
   20328:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2032c:	d064      	beq.n	203f8 <uarte_nrfx_configure+0x10c>
   2032e:	d80a      	bhi.n	20346 <uarte_nrfx_configure+0x5a>
   20330:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20334:	d063      	beq.n	203fe <uarte_nrfx_configure+0x112>
   20336:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2033a:	d063      	beq.n	20404 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   2033c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20340:	e054      	b.n	203ec <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   20342:	2500      	movs	r5, #0
   20344:	e7d9      	b.n	202fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   20346:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2034a:	d05e      	beq.n	2040a <uarte_nrfx_configure+0x11e>
   2034c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20350:	d1f4      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20352:	4b38      	ldr	r3, [pc, #224]	; (20434 <uarte_nrfx_configure+0x148>)
   20354:	e03c      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20356:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2035a:	d059      	beq.n	20410 <uarte_nrfx_configure+0x124>
   2035c:	d807      	bhi.n	2036e <uarte_nrfx_configure+0x82>
   2035e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20362:	d057      	beq.n	20414 <uarte_nrfx_configure+0x128>
   20364:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20368:	d1e8      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2036a:	4b33      	ldr	r3, [pc, #204]	; (20438 <uarte_nrfx_configure+0x14c>)
   2036c:	e030      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2036e:	f647 2412 	movw	r4, #31250	; 0x7a12
   20372:	42a3      	cmp	r3, r4
   20374:	d1e2      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20376:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2037a:	e029      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2037c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20380:	d04a      	beq.n	20418 <uarte_nrfx_configure+0x12c>
   20382:	d813      	bhi.n	203ac <uarte_nrfx_configure+0xc0>
   20384:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20388:	d049      	beq.n	2041e <uarte_nrfx_configure+0x132>
   2038a:	d809      	bhi.n	203a0 <uarte_nrfx_configure+0xb4>
   2038c:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   20390:	42a3      	cmp	r3, r4
   20392:	d046      	beq.n	20422 <uarte_nrfx_configure+0x136>
   20394:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20398:	d1d0      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2039a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2039e:	e017      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   203a0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   203a4:	d1ca      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   203a6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   203aa:	e011      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   203ac:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   203b0:	d03a      	beq.n	20428 <uarte_nrfx_configure+0x13c>
   203b2:	d808      	bhi.n	203c6 <uarte_nrfx_configure+0xda>
   203b4:	4c21      	ldr	r4, [pc, #132]	; (2043c <uarte_nrfx_configure+0x150>)
   203b6:	42a3      	cmp	r3, r4
   203b8:	d039      	beq.n	2042e <uarte_nrfx_configure+0x142>
   203ba:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   203be:	d1bd      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   203c0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   203c4:	e004      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   203c6:	4c1e      	ldr	r4, [pc, #120]	; (20440 <uarte_nrfx_configure+0x154>)
   203c8:	42a3      	cmp	r3, r4
   203ca:	d1b7      	bne.n	2033c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   203cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   203d0:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   203d2:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   203d6:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   203d8:	4335      	orrs	r5, r6
   203da:	681b      	ldr	r3, [r3, #0]
   203dc:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   203de:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   203e2:	c903      	ldmia	r1, {r0, r1}
   203e4:	1d23      	adds	r3, r4, #4
   203e6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   203ea:	2000      	movs	r0, #0
}
   203ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   203ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   203f2:	e7ed      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   203f4:	4b13      	ldr	r3, [pc, #76]	; (20444 <uarte_nrfx_configure+0x158>)
   203f6:	e7eb      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   203f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   203fc:	e7e8      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   203fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20402:	e7e5      	b.n	203d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20404:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20408:	e7e2      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2040a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2040e:	e7df      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20410:	4b0d      	ldr	r3, [pc, #52]	; (20448 <uarte_nrfx_configure+0x15c>)
   20412:	e7dd      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20414:	4b0d      	ldr	r3, [pc, #52]	; (2044c <uarte_nrfx_configure+0x160>)
   20416:	e7db      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20418:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2041c:	e7d8      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2041e:	4b0c      	ldr	r3, [pc, #48]	; (20450 <uarte_nrfx_configure+0x164>)
   20420:	e7d6      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20422:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20426:	e7d3      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20428:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2042c:	e7d0      	b.n	203d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2042e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20432:	e7cd      	b.n	203d0 <uarte_nrfx_configure+0xe4>
   20434:	0013b000 	.word	0x0013b000
   20438:	004ea000 	.word	0x004ea000
   2043c:	0003d090 	.word	0x0003d090
   20440:	000f4240 	.word	0x000f4240
   20444:	00275000 	.word	0x00275000
   20448:	0075c000 	.word	0x0075c000
   2044c:	003af000 	.word	0x003af000
   20450:	013a9000 	.word	0x013a9000

00020454 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   20454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
   20458:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2045a:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   2045c:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2045e:	2100      	movs	r1, #0
   20460:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   20464:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   20466:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
   2046a:	4680      	mov	r8, r0
	ret = pinctrl_lookup_state(config, id, &state);
   2046c:	aa01      	add	r2, sp, #4
   2046e:	4648      	mov	r0, r9
   20470:	f00d f9d9 	bl	2d826 <pinctrl_lookup_state>
	if (ret < 0) {
   20474:	1e05      	subs	r5, r0, #0
   20476:	db1e      	blt.n	204b6 <uarte_instance_init.constprop.0+0x62>
	return pinctrl_apply_state_direct(config, state);
   20478:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   2047a:	f8d9 2000 	ldr.w	r2, [r9]
   2047e:	7919      	ldrb	r1, [r3, #4]
   20480:	6818      	ldr	r0, [r3, #0]
   20482:	f00d f9e3 	bl	2d84c <pinctrl_configure_pins>
	if (err < 0) {
   20486:	1e05      	subs	r5, r0, #0
   20488:	db15      	blt.n	204b6 <uarte_instance_init.constprop.0+0x62>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   2048a:	1d31      	adds	r1, r6, #4
   2048c:	4640      	mov	r0, r8
   2048e:	f7ff ff2d 	bl	202ec <uarte_nrfx_configure>
	if (err) {
   20492:	4605      	mov	r5, r0
   20494:	b978      	cbnz	r0, 204b6 <uarte_instance_init.constprop.0+0x62>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   20496:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   20498:	0799      	lsls	r1, r3, #30
   2049a:	d524      	bpl.n	204e6 <uarte_instance_init.constprop.0+0x92>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2049c:	f106 0018 	add.w	r0, r6, #24
   204a0:	f002 fde2 	bl	23068 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   204a4:	4b24      	ldr	r3, [pc, #144]	; (20538 <uarte_instance_init.constprop.0+0xe4>)
   204a6:	4298      	cmp	r0, r3
   204a8:	d009      	beq.n	204be <uarte_instance_init.constprop.0+0x6a>
		LOG_ERR("Failed to allocate PPI Channel");
   204aa:	4824      	ldr	r0, [pc, #144]	; (2053c <uarte_instance_init.constprop.0+0xe8>)
   204ac:	2145      	movs	r1, #69	; 0x45
   204ae:	f009 fdda 	bl	2a066 <z_log_minimal_printk>
		return -EIO;
   204b2:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   204b6:	4628      	mov	r0, r5
   204b8:	b003      	add	sp, #12
   204ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   204be:	7e33      	ldrb	r3, [r6, #24]
   204c0:	00db      	lsls	r3, r3, #3
   204c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   204c6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   204ca:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   204ce:	f504 7190 	add.w	r1, r4, #288	; 0x120
   204d2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   204d6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   204da:	7e32      	ldrb	r2, [r6, #24]
   204dc:	2301      	movs	r3, #1
   204de:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   204e0:	4a17      	ldr	r2, [pc, #92]	; (20540 <uarte_instance_init.constprop.0+0xec>)
   204e2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   204e6:	2308      	movs	r3, #8
   204e8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   204ec:	7a3b      	ldrb	r3, [r7, #8]
   204ee:	b953      	cbnz	r3, 20506 <uarte_instance_init.constprop.0+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   204f0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   204f4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   204f8:	6973      	ldr	r3, [r6, #20]
   204fa:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   204fe:	2301      	movs	r3, #1
   20500:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20504:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   20506:	687b      	ldr	r3, [r7, #4]
   20508:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2050a:	bf5c      	itt	pl
   2050c:	f44f 7380 	movpl.w	r3, #256	; 0x100
   20510:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20514:	687b      	ldr	r3, [r7, #4]
   20516:	06db      	lsls	r3, r3, #27
   20518:	bf44      	itt	mi
   2051a:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   2051e:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20522:	6933      	ldr	r3, [r6, #16]
   20524:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20528:	2300      	movs	r3, #0
   2052a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2052e:	2301      	movs	r3, #1
   20530:	60a3      	str	r3, [r4, #8]
   20532:	60e3      	str	r3, [r4, #12]
	return 0;
   20534:	e7bf      	b.n	204b6 <uarte_instance_init.constprop.0+0x62>
   20536:	bf00      	nop
   20538:	0bad0000 	.word	0x0bad0000
   2053c:	00032970 	.word	0x00032970
   20540:	4001f000 	.word	0x4001f000

00020544 <uarte_nrfx_poll_out>:
{
   20544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20546:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   20548:	6907      	ldr	r7, [r0, #16]
{
   2054a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2054c:	f00d fbe0 	bl	2dd10 <k_is_in_isr>
   20550:	b9b0      	cbnz	r0, 20580 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
   20552:	4b2e      	ldr	r3, [pc, #184]	; (2060c <uarte_nrfx_poll_out+0xc8>)
   20554:	781b      	ldrb	r3, [r3, #0]
   20556:	b19b      	cbz	r3, 20580 <uarte_nrfx_poll_out+0x3c>
{
   20558:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2055a:	6860      	ldr	r0, [r4, #4]
   2055c:	f00d f8df 	bl	2d71e <is_tx_ready.isra.0>
   20560:	bb00      	cbnz	r0, 205a4 <uarte_nrfx_poll_out+0x60>
   20562:	2001      	movs	r0, #1
   20564:	f00d fadc 	bl	2db20 <nrfx_busy_wait>
   20568:	3e01      	subs	r6, #1
   2056a:	d1f6      	bne.n	2055a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
   2056c:	2100      	movs	r1, #0
   2056e:	2021      	movs	r0, #33	; 0x21
   20570:	f005 fb5e 	bl	25c30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20574:	e7f0      	b.n	20558 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
   20576:	f386 8811 	msr	BASEPRI, r6
   2057a:	f3bf 8f6f 	isb	sy
}
   2057e:	e7f5      	b.n	2056c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
   20580:	f04f 0340 	mov.w	r3, #64	; 0x40
   20584:	f3ef 8611 	mrs	r6, BASEPRI
   20588:	f383 8812 	msr	BASEPRI_MAX, r3
   2058c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20590:	6860      	ldr	r0, [r4, #4]
   20592:	4631      	mov	r1, r6
   20594:	f00d f8c3 	bl	2d71e <is_tx_ready.isra.0>
   20598:	b990      	cbnz	r0, 205c0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
   2059a:	f386 8811 	msr	BASEPRI, r6
   2059e:	f3bf 8f6f 	isb	sy
}
   205a2:	e7ed      	b.n	20580 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
   205a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   205a8:	f3ef 8611 	mrs	r6, BASEPRI
   205ac:	f383 8812 	msr	BASEPRI_MAX, r3
   205b0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   205b4:	6860      	ldr	r0, [r4, #4]
   205b6:	4631      	mov	r1, r6
   205b8:	f00d f8b1 	bl	2d71e <is_tx_ready.isra.0>
   205bc:	2800      	cmp	r0, #0
   205be:	d0da      	beq.n	20576 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
   205c0:	693b      	ldr	r3, [r7, #16]
   205c2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
   205c4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   205c6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
   205c8:	6813      	ldr	r3, [r2, #0]
   205ca:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   205ce:	2001      	movs	r0, #1
   205d0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   205d4:	2000      	movs	r0, #0
   205d6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   205da:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
   205de:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   205e2:	6852      	ldr	r2, [r2, #4]
   205e4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
   205e8:	06d2      	lsls	r2, r2, #27
   205ea:	d508      	bpl.n	205fe <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
   205ec:	6862      	ldr	r2, [r4, #4]
   205ee:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   205f0:	2008      	movs	r0, #8
   205f2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   205f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   205fa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205fe:	2201      	movs	r2, #1
   20600:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   20602:	f381 8811 	msr	BASEPRI, r1
   20606:	f3bf 8f6f 	isb	sy
}
   2060a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2060c:	20004743 	.word	0x20004743

00020610 <random_byte_get>:
	__asm__ volatile(
   20610:	f04f 0340 	mov.w	r3, #64	; 0x40
   20614:	f3ef 8211 	mrs	r2, BASEPRI
   20618:	f383 8812 	msr	BASEPRI_MAX, r3
   2061c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20620:	4b09      	ldr	r3, [pc, #36]	; (20648 <random_byte_get+0x38>)
   20622:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   20626:	b161      	cbz	r1, 20642 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20628:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   2062a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2062e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   20632:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   20636:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   20638:	f382 8811 	msr	BASEPRI, r2
   2063c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   20640:	4770      	bx	lr
	int retval = -EAGAIN;
   20642:	f06f 000a 	mvn.w	r0, #10
   20646:	e7f7      	b.n	20638 <random_byte_get+0x28>
   20648:	4000d000 	.word	0x4000d000

0002064c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   2064c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2064e:	4603      	mov	r3, r0
   20650:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   20652:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   20654:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   20658:	f04f 0540 	mov.w	r5, #64	; 0x40
   2065c:	f3ef 8211 	mrs	r2, BASEPRI
   20660:	f385 8812 	msr	BASEPRI_MAX, r5
   20664:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   20668:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   2066a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   2066e:	1be4      	subs	r4, r4, r7
   20670:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   20674:	42a0      	cmp	r0, r4
		len = available;
   20676:	bf88      	it	hi
   20678:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   2067a:	183e      	adds	r6, r7, r0
   2067c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   20680:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   20682:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   20684:	f382 8811 	msr	BASEPRI, r2
   20688:	f3bf 8f6f 	isb	sy
   2068c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   2068e:	428a      	cmp	r2, r1
   20690:	d117      	bne.n	206c2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   20692:	4577      	cmp	r7, lr
   20694:	d10d      	bne.n	206b2 <rng_pool_get+0x66>
	__asm__ volatile(
   20696:	f04f 0140 	mov.w	r1, #64	; 0x40
   2069a:	f3ef 8211 	mrs	r2, BASEPRI
   2069e:	f381 8812 	msr	BASEPRI_MAX, r1
   206a2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   206a6:	7819      	ldrb	r1, [r3, #0]
   206a8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   206aa:	f382 8811 	msr	BASEPRI, r2
   206ae:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   206b2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   206b4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   206b6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   206b8:	bf22      	ittt	cs
   206ba:	4b06      	ldrcs	r3, [pc, #24]	; (206d4 <rng_pool_get+0x88>)
   206bc:	2201      	movcs	r2, #1
   206be:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   206c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   206c2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   206c4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   206c6:	7976      	ldrb	r6, [r6, #5]
   206c8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   206cc:	ea05 050c 	and.w	r5, r5, ip
   206d0:	e7dd      	b.n	2068e <rng_pool_get+0x42>
   206d2:	bf00      	nop
   206d4:	4000d000 	.word	0x4000d000

000206d8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   206d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   206dc:	4d2e      	ldr	r5, [pc, #184]	; (20798 <entropy_nrf5_get_entropy_isr+0xc0>)
   206de:	6900      	ldr	r0, [r0, #16]
   206e0:	42a8      	cmp	r0, r5
{
   206e2:	460e      	mov	r6, r1
   206e4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   206e6:	d00a      	beq.n	206fe <entropy_nrf5_get_entropy_isr+0x26>
   206e8:	492c      	ldr	r1, [pc, #176]	; (2079c <entropy_nrf5_get_entropy_isr+0xc4>)
   206ea:	482d      	ldr	r0, [pc, #180]	; (207a0 <entropy_nrf5_get_entropy_isr+0xc8>)
   206ec:	f240 1207 	movw	r2, #263	; 0x107
   206f0:	f009 fcab 	bl	2a04a <assert_print>
   206f4:	4829      	ldr	r0, [pc, #164]	; (2079c <entropy_nrf5_get_entropy_isr+0xc4>)
   206f6:	f240 1107 	movw	r1, #263	; 0x107
   206fa:	f009 fc9f 	bl	2a03c <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   206fe:	43db      	mvns	r3, r3
   20700:	f013 0501 	ands.w	r5, r3, #1
   20704:	d004      	beq.n	20710 <entropy_nrf5_get_entropy_isr+0x38>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20706:	3030      	adds	r0, #48	; 0x30
   20708:	f7ff ffa0 	bl	2064c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2070c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   20710:	b3a2      	cbz	r2, 2077c <entropy_nrf5_get_entropy_isr+0xa4>
	__asm__ volatile(
   20712:	f04f 0340 	mov.w	r3, #64	; 0x40
   20716:	f3ef 8811 	mrs	r8, BASEPRI
   2071a:	f383 8812 	msr	BASEPRI_MAX, r3
   2071e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20722:	200d      	movs	r0, #13
   20724:	f7f4 fa84 	bl	14c30 <arch_irq_is_enabled>
   20728:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2072a:	200d      	movs	r0, #13
   2072c:	f7f4 fa6c 	bl	14c08 <arch_irq_disable>
	__asm__ volatile(
   20730:	f388 8811 	msr	BASEPRI, r8
   20734:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20738:	f8df a068 	ldr.w	sl, [pc, #104]	; 207a4 <entropy_nrf5_get_entropy_isr+0xcc>
   2073c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 207a8 <entropy_nrf5_get_entropy_isr+0xd0>
   20740:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   20744:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   20748:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2074c:	2301      	movs	r3, #1
   2074e:	f8ca 3000 	str.w	r3, [sl]
   20752:	4625      	mov	r5, r4
   20754:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   20758:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   2075c:	b183      	cbz	r3, 20780 <entropy_nrf5_get_entropy_isr+0xa8>
			byte = random_byte_get();
   2075e:	f7ff ff57 	bl	20610 <random_byte_get>
			if (byte < 0) {
   20762:	1e03      	subs	r3, r0, #0
   20764:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   20768:	dbf6      	blt.n	20758 <entropy_nrf5_get_entropy_isr+0x80>
			buf[--len] = byte;
   2076a:	3d01      	subs	r5, #1
   2076c:	b2ad      	uxth	r5, r5
   2076e:	5573      	strb	r3, [r6, r5]
		} while (len);
   20770:	2d00      	cmp	r5, #0
   20772:	d1f1      	bne.n	20758 <entropy_nrf5_get_entropy_isr+0x80>
		if (irq_enabled) {
   20774:	b117      	cbz	r7, 2077c <entropy_nrf5_get_entropy_isr+0xa4>
			irq_enable(IRQN);
   20776:	200d      	movs	r0, #13
   20778:	f7f4 fa38 	bl	14bec <arch_irq_enable>
	return cnt;
   2077c:	4620      	mov	r0, r4
   2077e:	e7c5      	b.n	2070c <entropy_nrf5_get_entropy_isr+0x34>
	__asm__ volatile(
   20780:	f04f 0340 	mov.w	r3, #64	; 0x40
   20784:	f3ef 8011 	mrs	r0, BASEPRI
   20788:	f383 8812 	msr	BASEPRI_MAX, r3
   2078c:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   20790:	f7f4 f9f2 	bl	14b78 <arch_cpu_atomic_idle>
}
   20794:	e7e0      	b.n	20758 <entropy_nrf5_get_entropy_isr+0x80>
   20796:	bf00      	nop
   20798:	200033f4 	.word	0x200033f4
   2079c:	000329c0 	.word	0x000329c0
   207a0:	0002f2b5 	.word	0x0002f2b5
   207a4:	4000d000 	.word	0x4000d000
   207a8:	e000e100 	.word	0xe000e100

000207ac <entropy_nrf5_get_entropy>:
{
   207ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   207b0:	4b18      	ldr	r3, [pc, #96]	; (20814 <entropy_nrf5_get_entropy+0x68>)
   207b2:	6907      	ldr	r7, [r0, #16]
   207b4:	429f      	cmp	r7, r3
{
   207b6:	460d      	mov	r5, r1
   207b8:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   207ba:	d105      	bne.n	207c8 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   207bc:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   207c0:	b95c      	cbnz	r4, 207da <entropy_nrf5_get_entropy+0x2e>
}
   207c2:	4620      	mov	r0, r4
   207c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   207c8:	4913      	ldr	r1, [pc, #76]	; (20818 <entropy_nrf5_get_entropy+0x6c>)
   207ca:	4814      	ldr	r0, [pc, #80]	; (2081c <entropy_nrf5_get_entropy+0x70>)
   207cc:	22e9      	movs	r2, #233	; 0xe9
   207ce:	f009 fc3c 	bl	2a04a <assert_print>
   207d2:	4811      	ldr	r0, [pc, #68]	; (20818 <entropy_nrf5_get_entropy+0x6c>)
   207d4:	21e9      	movs	r1, #233	; 0xe9
   207d6:	f009 fc31 	bl	2a03c <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   207da:	f04f 33ff 	mov.w	r3, #4294967295
   207de:	f04f 32ff 	mov.w	r2, #4294967295
   207e2:	4638      	mov	r0, r7
   207e4:	f003 fe9c 	bl	24520 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   207e8:	4622      	mov	r2, r4
   207ea:	4629      	mov	r1, r5
   207ec:	4640      	mov	r0, r8
   207ee:	f7ff ff2d 	bl	2064c <rng_pool_get>
   207f2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   207f4:	4638      	mov	r0, r7
   207f6:	f003 fe59 	bl	244ac <z_impl_k_sem_give>
		if (bytes == 0U) {
   207fa:	b93e      	cbnz	r6, 2080c <entropy_nrf5_get_entropy+0x60>
	return z_impl_k_sem_take(sem, timeout);
   207fc:	f04f 32ff 	mov.w	r2, #4294967295
   20800:	f04f 33ff 	mov.w	r3, #4294967295
   20804:	4806      	ldr	r0, [pc, #24]	; (20820 <entropy_nrf5_get_entropy+0x74>)
   20806:	f003 fe8b 	bl	24520 <z_impl_k_sem_take>
	while (len) {
   2080a:	e7e6      	b.n	207da <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   2080c:	1ba4      	subs	r4, r4, r6
   2080e:	b2a4      	uxth	r4, r4
		buf += bytes;
   20810:	4435      	add	r5, r6
   20812:	e7d5      	b.n	207c0 <entropy_nrf5_get_entropy+0x14>
   20814:	200033f4 	.word	0x200033f4
   20818:	000329c0 	.word	0x000329c0
   2081c:	0002f2b5 	.word	0x0002f2b5
   20820:	2000340c 	.word	0x2000340c

00020824 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   20824:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   20826:	4b20      	ldr	r3, [pc, #128]	; (208a8 <entropy_nrf5_init+0x84>)
   20828:	6904      	ldr	r4, [r0, #16]
   2082a:	429c      	cmp	r4, r3
   2082c:	d00a      	beq.n	20844 <entropy_nrf5_init+0x20>
   2082e:	491f      	ldr	r1, [pc, #124]	; (208ac <entropy_nrf5_init+0x88>)
   20830:	481f      	ldr	r0, [pc, #124]	; (208b0 <entropy_nrf5_init+0x8c>)
   20832:	f240 124b 	movw	r2, #331	; 0x14b
   20836:	f009 fc08 	bl	2a04a <assert_print>
   2083a:	481c      	ldr	r0, [pc, #112]	; (208ac <entropy_nrf5_init+0x88>)
   2083c:	f240 114b 	movw	r1, #331	; 0x14b
   20840:	f009 fbfc 	bl	2a03c <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20844:	2201      	movs	r2, #1
   20846:	4611      	mov	r1, r2
   20848:	4620      	mov	r0, r4
   2084a:	f00d fab2 	bl	2ddb2 <z_impl_k_sem_init>
   2084e:	2201      	movs	r2, #1
   20850:	2100      	movs	r1, #0
   20852:	f104 0018 	add.w	r0, r4, #24
   20856:	f00d faac 	bl	2ddb2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2085a:	f240 4307 	movw	r3, #1031	; 0x407
   2085e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   20862:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20866:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   20868:	230c      	movs	r3, #12
   2086a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2086e:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   20870:	4b10      	ldr	r3, [pc, #64]	; (208b4 <entropy_nrf5_init+0x90>)
   20872:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   20876:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2087a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2087e:	f022 0201 	bic.w	r2, r2, #1
   20882:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   20886:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20888:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   2088c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20890:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   20894:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20896:	6019      	str	r1, [r3, #0]
   20898:	200d      	movs	r0, #13
   2089a:	f7f4 f9d7 	bl	14c4c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2089e:	200d      	movs	r0, #13
   208a0:	f7f4 f9a4 	bl	14bec <arch_irq_enable>

	return 0;
}
   208a4:	4628      	mov	r0, r5
   208a6:	bd38      	pop	{r3, r4, r5, pc}
   208a8:	200033f4 	.word	0x200033f4
   208ac:	000329c0 	.word	0x000329c0
   208b0:	0002f2b5 	.word	0x0002f2b5
   208b4:	4000d000 	.word	0x4000d000

000208b8 <isr>:
{
   208b8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   208ba:	f7ff fea9 	bl	20610 <random_byte_get>
	if (byte < 0) {
   208be:	2800      	cmp	r0, #0
   208c0:	db20      	blt.n	20904 <isr+0x4c>
	uint8_t last  = rngp->last;
   208c2:	4b17      	ldr	r3, [pc, #92]	; (20920 <isr+0x68>)
   208c4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   208c8:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   208cc:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   208d0:	1b14      	subs	r4, r2, r4
   208d2:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   208d6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   208d8:	d10d      	bne.n	208f6 <isr+0x3e>
	uint8_t last  = rngp->last;
   208da:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   208de:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   208e2:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   208e6:	1b14      	subs	r4, r2, r4
   208e8:	ea31 0404 	bics.w	r4, r1, r4
   208ec:	d10b      	bne.n	20906 <isr+0x4e>
   208ee:	4b0d      	ldr	r3, [pc, #52]	; (20924 <isr+0x6c>)
   208f0:	2201      	movs	r2, #1
   208f2:	605a      	str	r2, [r3, #4]
}
   208f4:	e00e      	b.n	20914 <isr+0x5c>
	rngp->buffer[last] = byte;
   208f6:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   208f8:	3201      	adds	r2, #1
   208fa:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   208fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20900:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   20904:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   20906:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   20908:	3201      	adds	r2, #1
   2090a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   2090c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   20910:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   20914:	4804      	ldr	r0, [pc, #16]	; (20928 <isr+0x70>)
}
   20916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2091a:	f003 bdc7 	b.w	244ac <z_impl_k_sem_give>
   2091e:	bf00      	nop
   20920:	200033f4 	.word	0x200033f4
   20924:	4000d000 	.word	0x4000d000
   20928:	2000340c 	.word	0x2000340c

0002092c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   2092c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2092e:	460f      	mov	r7, r1
   20930:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   20932:	b940      	cbnz	r0, 20946 <entropy_cc3xx_rng_get_entropy+0x1a>
   20934:	4917      	ldr	r1, [pc, #92]	; (20994 <entropy_cc3xx_rng_get_entropy+0x68>)
   20936:	4818      	ldr	r0, [pc, #96]	; (20998 <entropy_cc3xx_rng_get_entropy+0x6c>)
   20938:	2218      	movs	r2, #24
   2093a:	f009 fb86 	bl	2a04a <assert_print>
   2093e:	2118      	movs	r1, #24
	__ASSERT_NO_MSG(buffer != NULL);
   20940:	4814      	ldr	r0, [pc, #80]	; (20994 <entropy_cc3xx_rng_get_entropy+0x68>)
   20942:	f009 fb7b 	bl	2a03c <assert_post_action>
   20946:	b9e1      	cbnz	r1, 20982 <entropy_cc3xx_rng_get_entropy+0x56>
   20948:	4912      	ldr	r1, [pc, #72]	; (20994 <entropy_cc3xx_rng_get_entropy+0x68>)
   2094a:	4813      	ldr	r0, [pc, #76]	; (20998 <entropy_cc3xx_rng_get_entropy+0x6c>)
   2094c:	2219      	movs	r2, #25
   2094e:	f009 fb7c 	bl	2a04a <assert_print>
   20952:	2119      	movs	r1, #25
   20954:	e7f4      	b.n	20940 <entropy_cc3xx_rng_get_entropy+0x14>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   20956:	1b33      	subs	r3, r6, r4
   20958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2095c:	bf38      	it	cc
   2095e:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   20960:	462a      	mov	r2, r5
   20962:	ab01      	add	r3, sp, #4
   20964:	1939      	adds	r1, r7, r4
   20966:	2000      	movs	r0, #0
   20968:	f006 fc58 	bl	2721c <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   2096c:	b968      	cbnz	r0, 2098a <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   2096e:	9b01      	ldr	r3, [sp, #4]
   20970:	429d      	cmp	r5, r3
   20972:	d10a      	bne.n	2098a <entropy_cc3xx_rng_get_entropy+0x5e>
			return -EINVAL;
		}

		offset += chunk_size;
   20974:	442c      	add	r4, r5
	while (offset < length) {
   20976:	42a6      	cmp	r6, r4
   20978:	d8ed      	bhi.n	20956 <entropy_cc3xx_rng_get_entropy+0x2a>
	}

	if (offset == length) {
   2097a:	d009      	beq.n	20990 <entropy_cc3xx_rng_get_entropy+0x64>
	int err = EINVAL;
   2097c:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   2097e:	b003      	add	sp, #12
   20980:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   20982:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   20986:	2400      	movs	r4, #0
   20988:	e7f5      	b.n	20976 <entropy_cc3xx_rng_get_entropy+0x4a>
			return -EINVAL;
   2098a:	f06f 0015 	mvn.w	r0, #21
   2098e:	e7f6      	b.n	2097e <entropy_cc3xx_rng_get_entropy+0x52>
		err = 0;
   20990:	2000      	movs	r0, #0
   20992:	e7f4      	b.n	2097e <entropy_cc3xx_rng_get_entropy+0x52>
   20994:	00032a11 	.word	0x00032a11
   20998:	0002f2b5 	.word	0x0002f2b5

0002099c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   2099c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2099e:	490e      	ldr	r1, [pc, #56]	; (209d8 <sys_clock_timeout_handler+0x3c>)
   209a0:	e9d1 3400 	ldrd	r3, r4, [r1]
   209a4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   209a6:	18c3      	adds	r3, r0, r3
   209a8:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   209ac:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   209b0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   209b4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   209b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   209bc:	d209      	bcs.n	209d2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   209be:	4b07      	ldr	r3, [pc, #28]	; (209dc <sys_clock_timeout_handler+0x40>)
   209c0:	681b      	ldr	r3, [r3, #0]
   209c2:	0a1a      	lsrs	r2, r3, #8
   209c4:	061b      	lsls	r3, r3, #24
   209c6:	199c      	adds	r4, r3, r6
   209c8:	4b05      	ldr	r3, [pc, #20]	; (209e0 <sys_clock_timeout_handler+0x44>)
   209ca:	f142 0500 	adc.w	r5, r2, #0
   209ce:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   209d2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   209d4:	f005 bc7a 	b.w	262cc <sys_clock_announce>
   209d8:	20002008 	.word	0x20002008
   209dc:	20003450 	.word	0x20003450
   209e0:	20002010 	.word	0x20002010

000209e4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   209e4:	4b0d      	ldr	r3, [pc, #52]	; (20a1c <z_nrf_rtc_timer_read+0x38>)
   209e6:	6818      	ldr	r0, [r3, #0]
   209e8:	0a01      	lsrs	r1, r0, #8
   209ea:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   209ec:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   209f0:	4b0b      	ldr	r3, [pc, #44]	; (20a20 <z_nrf_rtc_timer_read+0x3c>)
   209f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   209f6:	1818      	adds	r0, r3, r0
   209f8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   209fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20a00:	d20a      	bcs.n	20a18 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   20a02:	4b08      	ldr	r3, [pc, #32]	; (20a24 <z_nrf_rtc_timer_read+0x40>)
   20a04:	e9d3 2300 	ldrd	r2, r3, [r3]
   20a08:	4290      	cmp	r0, r2
   20a0a:	eb71 0303 	sbcs.w	r3, r1, r3
   20a0e:	d203      	bcs.n	20a18 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   20a10:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   20a14:	f141 0100 	adc.w	r1, r1, #0
}
   20a18:	4770      	bx	lr
   20a1a:	bf00      	nop
   20a1c:	20003450 	.word	0x20003450
   20a20:	40011000 	.word	0x40011000
   20a24:	20002010 	.word	0x20002010

00020a28 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   20a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   20a2c:	4c2b      	ldr	r4, [pc, #172]	; (20adc <rtc_nrf_isr+0xb4>)
   20a2e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   20a32:	0799      	lsls	r1, r3, #30
   20a34:	d50b      	bpl.n	20a4e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a36:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20a3a:	b143      	cbz	r3, 20a4e <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   20a3c:	4a28      	ldr	r2, [pc, #160]	; (20ae0 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20a3e:	2300      	movs	r3, #0
   20a40:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20a44:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20a48:	6813      	ldr	r3, [r2, #0]
   20a4a:	3301      	adds	r3, #1
   20a4c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   20a4e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   20a52:	03da      	lsls	r2, r3, #15
   20a54:	d523      	bpl.n	20a9e <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20a56:	f3bf 8f5b 	dmb	ish
   20a5a:	4b22      	ldr	r3, [pc, #136]	; (20ae4 <rtc_nrf_isr+0xbc>)
   20a5c:	e853 2f00 	ldrex	r2, [r3]
   20a60:	f022 0101 	bic.w	r1, r2, #1
   20a64:	e843 1000 	strex	r0, r1, [r3]
   20a68:	2800      	cmp	r0, #0
   20a6a:	d1f7      	bne.n	20a5c <rtc_nrf_isr+0x34>
   20a6c:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   20a70:	07d3      	lsls	r3, r2, #31
   20a72:	d402      	bmi.n	20a7a <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20a74:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   20a78:	b18b      	cbz	r3, 20a9e <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20a7a:	2500      	movs	r5, #0
   20a7c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   20a80:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   20a84:	f7ff ffae 	bl	209e4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   20a88:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   20a8c:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   20a8e:	4b16      	ldr	r3, [pc, #88]	; (20ae8 <rtc_nrf_isr+0xc0>)
   20a90:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   20a94:	42b0      	cmp	r0, r6
   20a96:	41b9      	sbcs	r1, r7
   20a98:	d204      	bcs.n	20aa4 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   20a9a:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   20a9e:	b003      	add	sp, #12
   20aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   20aa4:	f04f 38ff 	mov.w	r8, #4294967295
   20aa8:	f04f 39ff 	mov.w	r9, #4294967295
   20aac:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   20ab0:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   20ab4:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20aba:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20abe:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   20ac2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   20ac6:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   20aca:	2900      	cmp	r1, #0
   20acc:	d0e7      	beq.n	20a9e <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   20ace:	9000      	str	r0, [sp, #0]
   20ad0:	4632      	mov	r2, r6
   20ad2:	463b      	mov	r3, r7
   20ad4:	4628      	mov	r0, r5
   20ad6:	4788      	blx	r1
   20ad8:	e7e1      	b.n	20a9e <rtc_nrf_isr+0x76>
   20ada:	bf00      	nop
   20adc:	40011000 	.word	0x40011000
   20ae0:	20003450 	.word	0x20003450
   20ae4:	20003448 	.word	0x20003448
   20ae8:	20001ff8 	.word	0x20001ff8

00020aec <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   20aec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20af0:	4d4b      	ldr	r5, [pc, #300]	; (20c20 <compare_set.constprop.0.isra.0+0x134>)
   20af2:	f3bf 8f5b 	dmb	ish
   20af6:	4606      	mov	r6, r0
   20af8:	460f      	mov	r7, r1
   20afa:	e855 8f00 	ldrex	r8, [r5]
   20afe:	f028 0301 	bic.w	r3, r8, #1
   20b02:	e845 3200 	strex	r2, r3, [r5]
   20b06:	2a00      	cmp	r2, #0
   20b08:	d1f7      	bne.n	20afa <compare_set.constprop.0.isra.0+0xe>
   20b0a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   20b0e:	4c45      	ldr	r4, [pc, #276]	; (20c24 <compare_set.constprop.0.isra.0+0x138>)
   20b10:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   20b14:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   20b18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20b1c:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   20b20:	f7ff ff60 	bl	209e4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   20b24:	42b0      	cmp	r0, r6
   20b26:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   20b2a:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   20b2e:	d240      	bcs.n	20bb2 <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   20b30:	4b3d      	ldr	r3, [pc, #244]	; (20c28 <compare_set.constprop.0.isra.0+0x13c>)
   20b32:	1a30      	subs	r0, r6, r0
   20b34:	eb67 0101 	sbc.w	r1, r7, r1
   20b38:	4298      	cmp	r0, r3
   20b3a:	f171 0100 	sbcs.w	r1, r1, #0
   20b3e:	d24c      	bcs.n	20bda <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   20b40:	4b3a      	ldr	r3, [pc, #232]	; (20c2c <compare_set.constprop.0.isra.0+0x140>)
   20b42:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   20b46:	429f      	cmp	r7, r3
   20b48:	bf08      	it	eq
   20b4a:	4296      	cmpeq	r6, r2
   20b4c:	d03e      	beq.n	20bcc <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20b4e:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   20b52:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20b56:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   20b5a:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   20b5e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20b62:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 20c30 <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
   20b66:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   20b68:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   20b6a:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20b6e:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   20b72:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   20b76:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   20b7a:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20b7e:	ebae 0302 	sub.w	r3, lr, r2
   20b82:	445b      	add	r3, fp
   20b84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   20b88:	4553      	cmp	r3, sl
   20b8a:	d91f      	bls.n	20bcc <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20b8c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   20b90:	b15b      	cbz	r3, 20baa <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   20b92:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20b96:	1a13      	subs	r3, r2, r0
   20b98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   20b9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   20ba0:	d914      	bls.n	20bcc <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20ba2:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   20ba6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   20baa:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   20bae:	3101      	adds	r1, #1
	for (;;) {
   20bb0:	e7dd      	b.n	20b6e <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20bb2:	4b20      	ldr	r3, [pc, #128]	; (20c34 <compare_set.constprop.0.isra.0+0x148>)
   20bb4:	f3bf 8f5b 	dmb	ish
   20bb8:	e853 1f00 	ldrex	r1, [r3]
   20bbc:	f041 0101 	orr.w	r1, r1, #1
   20bc0:	e843 1200 	strex	r2, r1, [r3]
   20bc4:	2a00      	cmp	r2, #0
   20bc6:	d1f7      	bne.n	20bb8 <compare_set.constprop.0.isra.0+0xcc>
   20bc8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   20bcc:	4b17      	ldr	r3, [pc, #92]	; (20c2c <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   20bce:	4a1a      	ldr	r2, [pc, #104]	; (20c38 <compare_set.constprop.0.isra.0+0x14c>)
   20bd0:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   20bd2:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   20bd6:	2200      	movs	r2, #0
   20bd8:	605a      	str	r2, [r3, #4]
	if (key) {
   20bda:	f1b8 0f00 	cmp.w	r8, #0
   20bde:	d01c      	beq.n	20c1a <compare_set.constprop.0.isra.0+0x12e>
   20be0:	f3bf 8f5b 	dmb	ish
   20be4:	e855 3f00 	ldrex	r3, [r5]
   20be8:	f043 0301 	orr.w	r3, r3, #1
   20bec:	e845 3200 	strex	r2, r3, [r5]
   20bf0:	2a00      	cmp	r2, #0
   20bf2:	d1f7      	bne.n	20be4 <compare_set.constprop.0.isra.0+0xf8>
   20bf4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   20bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20bfc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20c00:	4b0c      	ldr	r3, [pc, #48]	; (20c34 <compare_set.constprop.0.isra.0+0x148>)
   20c02:	f3bf 8f5b 	dmb	ish
   20c06:	681b      	ldr	r3, [r3, #0]
   20c08:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   20c0c:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c0e:	bf42      	ittt	mi
   20c10:	4b0a      	ldrmi	r3, [pc, #40]	; (20c3c <compare_set.constprop.0.isra.0+0x150>)
   20c12:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   20c16:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   20c1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c1e:	bf00      	nop
   20c20:	2000344c 	.word	0x2000344c
   20c24:	40011000 	.word	0x40011000
   20c28:	00800001 	.word	0x00800001
   20c2c:	20001ff8 	.word	0x20001ff8
   20c30:	007ffffd 	.word	0x007ffffd
   20c34:	20003448 	.word	0x20003448
   20c38:	0002099d 	.word	0x0002099d
   20c3c:	e000e100 	.word	0xe000e100

00020c40 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   20c40:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   20c42:	4b16      	ldr	r3, [pc, #88]	; (20c9c <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   20c44:	4c16      	ldr	r4, [pc, #88]	; (20ca0 <sys_clock_driver_init+0x60>)
   20c46:	2500      	movs	r5, #0
   20c48:	f04f 30ff 	mov.w	r0, #4294967295
   20c4c:	f04f 31ff 	mov.w	r1, #4294967295
   20c50:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   20c54:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   20c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20c5c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c60:	4b10      	ldr	r3, [pc, #64]	; (20ca4 <sys_clock_driver_init+0x64>)
   20c62:	2602      	movs	r6, #2
   20c64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   20c68:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   20c6c:	2101      	movs	r1, #1
   20c6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   20c72:	2011      	movs	r0, #17
   20c74:	462a      	mov	r2, r5
   20c76:	f7f3 ffe9 	bl	14c4c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   20c7a:	2011      	movs	r0, #17
   20c7c:	f7f3 ffb6 	bl	14bec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   20c80:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   20c82:	4a09      	ldr	r2, [pc, #36]	; (20ca8 <sys_clock_driver_init+0x68>)
   20c84:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   20c86:	2100      	movs	r1, #0
   20c88:	6023      	str	r3, [r4, #0]
   20c8a:	4808      	ldr	r0, [pc, #32]	; (20cac <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   20c8c:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   20c8e:	f7ff ff2d 	bl	20aec <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   20c92:	4630      	mov	r0, r6
   20c94:	f7fe fbb2 	bl	1f3fc <z_nrf_clock_control_lf_on>

	return 0;
}
   20c98:	4628      	mov	r0, r5
   20c9a:	bd70      	pop	{r4, r5, r6, pc}
   20c9c:	20001ff8 	.word	0x20001ff8
   20ca0:	40011000 	.word	0x40011000
   20ca4:	e000e100 	.word	0xe000e100
   20ca8:	2000344c 	.word	0x2000344c
   20cac:	007fffff 	.word	0x007fffff

00020cb0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   20cb0:	1c43      	adds	r3, r0, #1
{
   20cb2:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   20cb4:	d01d      	beq.n	20cf2 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   20cb6:	2801      	cmp	r0, #1
   20cb8:	dd1d      	ble.n	20cf6 <sys_clock_set_timeout+0x46>
   20cba:	4a10      	ldr	r2, [pc, #64]	; (20cfc <sys_clock_set_timeout+0x4c>)
   20cbc:	4b10      	ldr	r3, [pc, #64]	; (20d00 <sys_clock_set_timeout+0x50>)
   20cbe:	4290      	cmp	r0, r2
   20cc0:	bfd4      	ite	le
   20cc2:	4604      	movle	r4, r0
   20cc4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   20cc6:	f7ff fe8d 	bl	209e4 <z_nrf_rtc_timer_read>
   20cca:	4a0e      	ldr	r2, [pc, #56]	; (20d04 <sys_clock_set_timeout+0x54>)
   20ccc:	e9d2 3100 	ldrd	r3, r1, [r2]
   20cd0:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   20cd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   20cd6:	4a0a      	ldr	r2, [pc, #40]	; (20d00 <sys_clock_set_timeout+0x50>)
		cyc = 0;
   20cd8:	bf28      	it	cs
   20cda:	2400      	movcs	r4, #0
	cyc += unannounced;
   20cdc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   20cde:	4294      	cmp	r4, r2
   20ce0:	bf28      	it	cs
   20ce2:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   20ce4:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   20ce6:	f141 0100 	adc.w	r1, r1, #0
}
   20cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   20cee:	f7ff befd 	b.w	20aec <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   20cf2:	4c03      	ldr	r4, [pc, #12]	; (20d00 <sys_clock_set_timeout+0x50>)
   20cf4:	e7e7      	b.n	20cc6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   20cf6:	2401      	movs	r4, #1
   20cf8:	e7e5      	b.n	20cc6 <sys_clock_set_timeout+0x16>
   20cfa:	bf00      	nop
   20cfc:	007ffffe 	.word	0x007ffffe
   20d00:	007fffff 	.word	0x007fffff
   20d04:	20002008 	.word	0x20002008

00020d08 <sys_clock_elapsed>:
{
   20d08:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   20d0a:	f7ff fe6b 	bl	209e4 <z_nrf_rtc_timer_read>
   20d0e:	4b02      	ldr	r3, [pc, #8]	; (20d18 <sys_clock_elapsed+0x10>)
   20d10:	681b      	ldr	r3, [r3, #0]
}
   20d12:	1ac0      	subs	r0, r0, r3
   20d14:	bd08      	pop	{r3, pc}
   20d16:	bf00      	nop
   20d18:	20002008 	.word	0x20002008

00020d1c <nrf_gpio_pin_port_decode>:
{
   20d1c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d1e:	6803      	ldr	r3, [r0, #0]
    switch (port)
   20d20:	095a      	lsrs	r2, r3, #5
   20d22:	d00c      	beq.n	20d3e <nrf_gpio_pin_port_decode+0x22>
   20d24:	2a01      	cmp	r2, #1
   20d26:	d013      	beq.n	20d50 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d28:	490e      	ldr	r1, [pc, #56]	; (20d64 <nrf_gpio_pin_port_decode+0x48>)
   20d2a:	480f      	ldr	r0, [pc, #60]	; (20d68 <nrf_gpio_pin_port_decode+0x4c>)
   20d2c:	f240 2247 	movw	r2, #583	; 0x247
   20d30:	f009 f98b 	bl	2a04a <assert_print>
   20d34:	480b      	ldr	r0, [pc, #44]	; (20d64 <nrf_gpio_pin_port_decode+0x48>)
   20d36:	f240 2147 	movw	r1, #583	; 0x247
   20d3a:	f009 f97f 	bl	2a03c <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   20d3e:	f04f 32ff 	mov.w	r2, #4294967295
   20d42:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d46:	07d9      	lsls	r1, r3, #31
   20d48:	d5ee      	bpl.n	20d28 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   20d4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   20d4e:	e008      	b.n	20d62 <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   20d50:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   20d58:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20d5a:	07d2      	lsls	r2, r2, #31
   20d5c:	d5e4      	bpl.n	20d28 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   20d5e:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   20d60:	4802      	ldr	r0, [pc, #8]	; (20d6c <nrf_gpio_pin_port_decode+0x50>)
}
   20d62:	bd08      	pop	{r3, pc}
   20d64:	0003268c 	.word	0x0003268c
   20d68:	0002f2b5 	.word	0x0002f2b5
   20d6c:	50000300 	.word	0x50000300

00020d70 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   20d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   20d74:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   20d78:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   20d7c:	6906      	ldr	r6, [r0, #16]
{
   20d7e:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   20d80:	d00a      	beq.n	20d98 <z_impl_gpio_pin_configure+0x28>
   20d82:	4935      	ldr	r1, [pc, #212]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20d84:	4835      	ldr	r0, [pc, #212]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20d86:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   20d8a:	f009 f95e 	bl	2a04a <assert_print>
   20d8e:	f44f 712d 	mov.w	r1, #692	; 0x2b4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   20d92:	4831      	ldr	r0, [pc, #196]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20d94:	f009 f952 	bl	2a03c <assert_post_action>
   20d98:	f002 0230 	and.w	r2, r2, #48	; 0x30
   20d9c:	2a30      	cmp	r2, #48	; 0x30
   20d9e:	d108      	bne.n	20db2 <z_impl_gpio_pin_configure+0x42>
   20da0:	492d      	ldr	r1, [pc, #180]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20da2:	482e      	ldr	r0, [pc, #184]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20da4:	f240 22b7 	movw	r2, #695	; 0x2b7
   20da8:	f009 f94f 	bl	2a04a <assert_print>
   20dac:	f240 21b7 	movw	r1, #695	; 0x2b7
   20db0:	e7ef      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   20db2:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   20db6:	2a02      	cmp	r2, #2
   20db8:	d108      	bne.n	20dcc <z_impl_gpio_pin_configure+0x5c>
   20dba:	4927      	ldr	r1, [pc, #156]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20dbc:	4827      	ldr	r0, [pc, #156]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20dbe:	f240 22bb 	movw	r2, #699	; 0x2bb
   20dc2:	f009 f942 	bl	2a04a <assert_print>
   20dc6:	f240 21bb 	movw	r1, #699	; 0x2bb
   20dca:	e7e2      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   20dcc:	f003 0206 	and.w	r2, r3, #6
   20dd0:	2a04      	cmp	r2, #4
   20dd2:	d108      	bne.n	20de6 <z_impl_gpio_pin_configure+0x76>
   20dd4:	4920      	ldr	r1, [pc, #128]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20dd6:	4821      	ldr	r0, [pc, #132]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20dd8:	f240 22bf 	movw	r2, #703	; 0x2bf
   20ddc:	f009 f935 	bl	2a04a <assert_print>
   20de0:	f240 21bf 	movw	r1, #703	; 0x2bf
   20de4:	e7d5      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   20de6:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   20dea:	d012      	beq.n	20e12 <z_impl_gpio_pin_configure+0xa2>
   20dec:	039d      	lsls	r5, r3, #14
   20dee:	d408      	bmi.n	20e02 <z_impl_gpio_pin_configure+0x92>
   20df0:	4919      	ldr	r1, [pc, #100]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20df2:	481a      	ldr	r0, [pc, #104]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20df4:	f240 22c2 	movw	r2, #706	; 0x2c2
   20df8:	f009 f927 	bl	2a04a <assert_print>
   20dfc:	f240 21c2 	movw	r1, #706	; 0x2c2
   20e00:	e7c7      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   20e02:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   20e06:	d014      	beq.n	20e32 <z_impl_gpio_pin_configure+0xc2>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   20e08:	4a15      	ldr	r2, [pc, #84]	; (20e60 <z_impl_gpio_pin_configure+0xf0>)
   20e0a:	439a      	bics	r2, r3
   20e0c:	d101      	bne.n	20e12 <z_impl_gpio_pin_configure+0xa2>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   20e0e:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20e12:	6824      	ldr	r4, [r4, #0]
   20e14:	2501      	movs	r5, #1
   20e16:	408d      	lsls	r5, r1
   20e18:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   20e1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20e1e:	d111      	bne.n	20e44 <z_impl_gpio_pin_configure+0xd4>
   20e20:	490d      	ldr	r1, [pc, #52]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20e22:	480e      	ldr	r0, [pc, #56]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20e24:	f240 22d2 	movw	r2, #722	; 0x2d2
   20e28:	f009 f90f 	bl	2a04a <assert_print>
   20e2c:	f240 21d2 	movw	r1, #722	; 0x2d2
   20e30:	e7af      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   20e32:	4909      	ldr	r1, [pc, #36]	; (20e58 <z_impl_gpio_pin_configure+0xe8>)
   20e34:	4809      	ldr	r0, [pc, #36]	; (20e5c <z_impl_gpio_pin_configure+0xec>)
   20e36:	f240 22c6 	movw	r2, #710	; 0x2c6
   20e3a:	f009 f906 	bl	2a04a <assert_print>
   20e3e:	f240 21c6 	movw	r1, #710	; 0x2c6
   20e42:	e7a6      	b.n	20d92 <z_impl_gpio_pin_configure+0x22>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20e44:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   20e46:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   20e48:	bf4c      	ite	mi
   20e4a:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   20e4c:	43ac      	bicpl	r4, r5
   20e4e:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   20e50:	683b      	ldr	r3, [r7, #0]
}
   20e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   20e56:	4718      	bx	r3
   20e58:	00032a51 	.word	0x00032a51
   20e5c:	0002f2b5 	.word	0x0002f2b5
   20e60:	00100001 	.word	0x00100001

00020e64 <z_impl_gpio_pin_interrupt_configure>:
{
   20e64:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   20e66:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   20e6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
	__unused const struct gpio_driver_config *const cfg =
   20e6e:	e9d0 6401 	ldrd	r6, r4, [r0, #4]
	const struct gpio_driver_data *const data =
   20e72:	6905      	ldr	r5, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   20e74:	d10a      	bne.n	20e8c <z_impl_gpio_pin_interrupt_configure+0x28>
   20e76:	4920      	ldr	r1, [pc, #128]	; (20ef8 <z_impl_gpio_pin_interrupt_configure+0x94>)
   20e78:	4820      	ldr	r0, [pc, #128]	; (20efc <z_impl_gpio_pin_interrupt_configure+0x98>)
   20e7a:	f240 2261 	movw	r2, #609	; 0x261
   20e7e:	f009 f8e4 	bl	2a04a <assert_print>
   20e82:	f240 2161 	movw	r1, #609	; 0x261
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   20e86:	481c      	ldr	r0, [pc, #112]	; (20ef8 <z_impl_gpio_pin_interrupt_configure+0x94>)
   20e88:	f009 f8d8 	bl	2a03c <assert_post_action>
   20e8c:	b943      	cbnz	r3, 20ea0 <z_impl_gpio_pin_interrupt_configure+0x3c>
   20e8e:	491a      	ldr	r1, [pc, #104]	; (20ef8 <z_impl_gpio_pin_interrupt_configure+0x94>)
   20e90:	481a      	ldr	r0, [pc, #104]	; (20efc <z_impl_gpio_pin_interrupt_configure+0x98>)
   20e92:	f240 2265 	movw	r2, #613	; 0x265
   20e96:	f009 f8d8 	bl	2a04a <assert_print>
   20e9a:	f240 2165 	movw	r1, #613	; 0x265
   20e9e:	e7f2      	b.n	20e86 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   20ea0:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   20ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   20ea8:	d108      	bne.n	20ebc <z_impl_gpio_pin_interrupt_configure+0x58>
   20eaa:	4913      	ldr	r1, [pc, #76]	; (20ef8 <z_impl_gpio_pin_interrupt_configure+0x94>)
   20eac:	4813      	ldr	r0, [pc, #76]	; (20efc <z_impl_gpio_pin_interrupt_configure+0x98>)
   20eae:	f240 226f 	movw	r2, #623	; 0x26f
   20eb2:	f009 f8ca 	bl	2a04a <assert_print>
   20eb6:	f240 216f 	movw	r1, #623	; 0x26f
   20eba:	e7e4      	b.n	20e86 <z_impl_gpio_pin_interrupt_configure+0x22>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20ebc:	6836      	ldr	r6, [r6, #0]
   20ebe:	2301      	movs	r3, #1
   20ec0:	408b      	lsls	r3, r1
   20ec2:	4233      	tst	r3, r6
   20ec4:	d108      	bne.n	20ed8 <z_impl_gpio_pin_interrupt_configure+0x74>
   20ec6:	490c      	ldr	r1, [pc, #48]	; (20ef8 <z_impl_gpio_pin_interrupt_configure+0x94>)
   20ec8:	480c      	ldr	r0, [pc, #48]	; (20efc <z_impl_gpio_pin_interrupt_configure+0x98>)
   20eca:	f44f 721d 	mov.w	r2, #628	; 0x274
   20ece:	f009 f8bc 	bl	2a04a <assert_print>
   20ed2:	f44f 711d 	mov.w	r1, #628	; 0x274
   20ed6:	e7d6      	b.n	20e86 <z_impl_gpio_pin_interrupt_configure+0x22>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   20ed8:	0216      	lsls	r6, r2, #8
   20eda:	d504      	bpl.n	20ee6 <z_impl_gpio_pin_interrupt_configure+0x82>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   20edc:	682d      	ldr	r5, [r5, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   20ede:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   20ee0:	bf18      	it	ne
   20ee2:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   20ee6:	69a4      	ldr	r4, [r4, #24]
   20ee8:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   20eec:	46a4      	mov	ip, r4
   20eee:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
   20ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   20ef6:	4760      	bx	ip
   20ef8:	00032a51 	.word	0x00032a51
   20efc:	0002f2b5 	.word	0x0002f2b5

00020f00 <get_buttons>:

	return err;
}

static uint32_t get_buttons(void)
{
   20f00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	uint32_t ret = 0;
   20f04:	2400      	movs	r4, #0
   20f06:	4e1c      	ldr	r6, [pc, #112]	; (20f78 <get_buttons+0x78>)
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   20f08:	4625      	mov	r5, r4
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20f0a:	f04f 0801 	mov.w	r8, #1
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   20f0e:	6830      	ldr	r0, [r6, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   20f10:	7937      	ldrb	r7, [r6, #4]
   20f12:	6843      	ldr	r3, [r0, #4]
   20f14:	681b      	ldr	r3, [r3, #0]
   20f16:	fa08 f707 	lsl.w	r7, r8, r7
   20f1a:	421f      	tst	r7, r3
   20f1c:	d10a      	bne.n	20f34 <get_buttons+0x34>
   20f1e:	4917      	ldr	r1, [pc, #92]	; (20f7c <get_buttons+0x7c>)
   20f20:	4817      	ldr	r0, [pc, #92]	; (20f80 <get_buttons+0x80>)
   20f22:	f240 42e4 	movw	r2, #1252	; 0x4e4
   20f26:	f009 f890 	bl	2a04a <assert_print>
   20f2a:	4814      	ldr	r0, [pc, #80]	; (20f7c <get_buttons+0x7c>)
   20f2c:	f240 41e4 	movw	r1, #1252	; 0x4e4
   20f30:	f009 f884 	bl	2a03c <assert_post_action>
	const struct gpio_driver_data *const data =
   20f34:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   20f38:	6883      	ldr	r3, [r0, #8]
   20f3a:	a901      	add	r1, sp, #4
   20f3c:	685b      	ldr	r3, [r3, #4]
   20f3e:	4798      	blx	r3
	if (ret == 0) {
   20f40:	2800      	cmp	r0, #0
   20f42:	d009      	beq.n	20f58 <get_buttons+0x58>
		int val;

		val = gpio_pin_get_dt(&buttons[i]);
		if (val < 0) {
   20f44:	db0f      	blt.n	20f66 <get_buttons+0x66>
			LOG_ERR("Cannot read gpio pin");
			return 0;
		}
		if (val) {
			ret |= 1U << i;
   20f46:	fa08 f305 	lsl.w	r3, r8, r5
   20f4a:	431c      	orrs	r4, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   20f4c:	3501      	adds	r5, #1
   20f4e:	2d04      	cmp	r5, #4
   20f50:	f106 0608 	add.w	r6, r6, #8
   20f54:	d1db      	bne.n	20f0e <get_buttons+0xe>
   20f56:	e00b      	b.n	20f70 <get_buttons+0x70>
		*value ^= data->invert;
   20f58:	f8d9 2000 	ldr.w	r2, [r9]
   20f5c:	9b01      	ldr	r3, [sp, #4]
   20f5e:	4053      	eors	r3, r2
		if (val) {
   20f60:	423b      	tst	r3, r7
   20f62:	d0f3      	beq.n	20f4c <get_buttons+0x4c>
   20f64:	e7ef      	b.n	20f46 <get_buttons+0x46>
			LOG_ERR("Cannot read gpio pin");
   20f66:	4807      	ldr	r0, [pc, #28]	; (20f84 <get_buttons+0x84>)
   20f68:	2145      	movs	r1, #69	; 0x45
   20f6a:	f009 f87c 	bl	2a066 <z_log_minimal_printk>
   20f6e:	2400      	movs	r4, #0
		}
	}

	return ret;
}
   20f70:	4620      	mov	r0, r4
   20f72:	b003      	add	sp, #12
   20f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20f78:	0002ee50 	.word	0x0002ee50
   20f7c:	00032a51 	.word	0x00032a51
   20f80:	0002f2b5 	.word	0x0002f2b5
   20f84:	00032a82 	.word	0x00032a82

00020f88 <callback_ctrl>:
{
   20f88:	b570      	push	{r4, r5, r6, lr}
	gpio_flags_t flags = enable ? GPIO_INT_LEVEL_ACTIVE : GPIO_INT_DISABLE;
   20f8a:	2800      	cmp	r0, #0
   20f8c:	4c09      	ldr	r4, [pc, #36]	; (20fb4 <callback_ctrl+0x2c>)
   20f8e:	bf0c      	ite	eq
   20f90:	f44f 1600 	moveq.w	r6, #2097152	; 0x200000
   20f94:	f04f 6698 	movne.w	r6, #79691776	; 0x4c00000
	for (size_t i = 0; (i < ARRAY_SIZE(buttons)) && !err; i++) {
   20f98:	2500      	movs	r5, #0
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   20f9a:	6820      	ldr	r0, [r4, #0]
   20f9c:	7921      	ldrb	r1, [r4, #4]
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   20f9e:	4632      	mov	r2, r6
   20fa0:	3501      	adds	r5, #1
   20fa2:	f7ff ff5f 	bl	20e64 <z_impl_gpio_pin_interrupt_configure>
   20fa6:	2d04      	cmp	r5, #4
   20fa8:	d002      	beq.n	20fb0 <callback_ctrl+0x28>
   20faa:	3408      	adds	r4, #8
   20fac:	2800      	cmp	r0, #0
   20fae:	d0f4      	beq.n	20f9a <callback_ctrl+0x12>
}
   20fb0:	bd70      	pop	{r4, r5, r6, pc}
   20fb2:	bf00      	nop
   20fb4:	0002ee50 	.word	0x0002ee50

00020fb8 <button_pressed>:
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
}

static void button_pressed(const struct device *gpio_dev, struct gpio_callback *cb,
		    uint32_t pins)
{
   20fb8:	b510      	push	{r4, lr}
   20fba:	f04f 0340 	mov.w	r3, #64	; 0x40
   20fbe:	f3ef 8411 	mrs	r4, BASEPRI
   20fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   20fc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20fca:	481d      	ldr	r0, [pc, #116]	; (21040 <button_pressed+0x88>)
   20fcc:	f003 f814 	bl	23ff8 <z_spin_lock_valid>
   20fd0:	b940      	cbnz	r0, 20fe4 <button_pressed+0x2c>
   20fd2:	491c      	ldr	r1, [pc, #112]	; (21044 <button_pressed+0x8c>)
   20fd4:	481c      	ldr	r0, [pc, #112]	; (21048 <button_pressed+0x90>)
   20fd6:	2294      	movs	r2, #148	; 0x94
   20fd8:	f009 f837 	bl	2a04a <assert_print>
   20fdc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20fde:	4819      	ldr	r0, [pc, #100]	; (21044 <button_pressed+0x8c>)
   20fe0:	f009 f82c 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   20fe4:	4816      	ldr	r0, [pc, #88]	; (21040 <button_pressed+0x88>)
   20fe6:	f003 f825 	bl	24034 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Disable GPIO interrupt */
	int err = callback_ctrl(false);
   20fea:	2000      	movs	r0, #0
   20fec:	f7ff ffcc 	bl	20f88 <callback_ctrl>

	if (err) {
   20ff0:	b118      	cbz	r0, 20ffa <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   20ff2:	4816      	ldr	r0, [pc, #88]	; (2104c <button_pressed+0x94>)
   20ff4:	2145      	movs	r1, #69	; 0x45
   20ff6:	f009 f836 	bl	2a066 <z_log_minimal_printk>
	}

	switch (state) {
   20ffa:	4b15      	ldr	r3, [pc, #84]	; (21050 <button_pressed+0x98>)
   20ffc:	781a      	ldrb	r2, [r3, #0]
   20ffe:	b9b2      	cbnz	r2, 2102e <button_pressed+0x76>
	case STATE_WAITING:
		state = STATE_SCANNING;
   21000:	2201      	movs	r2, #1
   21002:	701a      	strb	r2, [r3, #0]
		k_work_reschedule(&buttons_scan, K_MSEC(1));
   21004:	4813      	ldr	r0, [pc, #76]	; (21054 <button_pressed+0x9c>)
   21006:	2221      	movs	r2, #33	; 0x21
   21008:	2300      	movs	r3, #0
   2100a:	f003 fedf 	bl	24dcc <k_work_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2100e:	480c      	ldr	r0, [pc, #48]	; (21040 <button_pressed+0x88>)
   21010:	f003 f800 	bl	24014 <z_spin_unlock_valid>
   21014:	b930      	cbnz	r0, 21024 <button_pressed+0x6c>
   21016:	490b      	ldr	r1, [pc, #44]	; (21044 <button_pressed+0x8c>)
   21018:	480b      	ldr	r0, [pc, #44]	; (21048 <button_pressed+0x90>)
   2101a:	22c2      	movs	r2, #194	; 0xc2
   2101c:	f009 f815 	bl	2a04a <assert_print>
   21020:	21c2      	movs	r1, #194	; 0xc2
   21022:	e7dc      	b.n	20fde <button_pressed+0x26>
	__asm__ volatile(
   21024:	f384 8811 	msr	BASEPRI, r4
   21028:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(false);
		break;
	}

	k_spin_unlock(&lock, key);
}
   2102c:	bd10      	pop	{r4, pc}
		__ASSERT_NO_MSG(false);
   2102e:	490a      	ldr	r1, [pc, #40]	; (21058 <button_pressed+0xa0>)
   21030:	4805      	ldr	r0, [pc, #20]	; (21048 <button_pressed+0x90>)
   21032:	22ba      	movs	r2, #186	; 0xba
   21034:	f009 f809 	bl	2a04a <assert_print>
   21038:	4807      	ldr	r0, [pc, #28]	; (21058 <button_pressed+0xa0>)
   2103a:	21ba      	movs	r1, #186	; 0xba
   2103c:	e7d0      	b.n	20fe0 <button_pressed+0x28>
   2103e:	bf00      	nop
   21040:	20003478 	.word	0x20003478
   21044:	0002f9fb 	.word	0x0002f9fb
   21048:	0002f2b5 	.word	0x0002f2b5
   2104c:	00032a9c 	.word	0x00032a9c
   21050:	20004242 	.word	0x20004242
   21054:	20002018 	.word	0x20002018
   21058:	00032aba 	.word	0x00032aba

0002105c <buttons_scan_fn>:
{
   2105c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	button_scan = get_buttons();
   21060:	f7ff ff4e 	bl	20f00 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21064:	f3bf 8f5b 	dmb	ish
   21068:	4b3b      	ldr	r3, [pc, #236]	; (21158 <buttons_scan_fn+0xfc>)
   2106a:	4604      	mov	r4, r0
   2106c:	e853 2f00 	ldrex	r2, [r3]
   21070:	e843 4100 	strex	r1, r4, [r3]
   21074:	2900      	cmp	r1, #0
   21076:	d1f9      	bne.n	2106c <buttons_scan_fn+0x10>
   21078:	f3bf 8f5b 	dmb	ish
	if (!initial_run) {
   2107c:	4b37      	ldr	r3, [pc, #220]	; (2115c <buttons_scan_fn+0x100>)
   2107e:	4f38      	ldr	r7, [pc, #224]	; (21160 <buttons_scan_fn+0x104>)
   21080:	781a      	ldrb	r2, [r3, #0]
   21082:	bb32      	cbnz	r2, 210d2 <buttons_scan_fn+0x76>
		if (button_scan != last_button_scan) {
   21084:	683e      	ldr	r6, [r7, #0]
   21086:	42a6      	cmp	r6, r4
   21088:	d019      	beq.n	210be <buttons_scan_fn+0x62>
	if (button_handler_cb != NULL) {
   2108a:	4b36      	ldr	r3, [pc, #216]	; (21164 <buttons_scan_fn+0x108>)
   2108c:	681b      	ldr	r3, [r3, #0]
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2108e:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   21090:	b10b      	cbz	r3, 21096 <buttons_scan_fn+0x3a>
		button_handler_cb(button_state, has_changed);
   21092:	4631      	mov	r1, r6
   21094:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   21096:	f04f 33ff 	mov.w	r3, #4294967295
   2109a:	4833      	ldr	r0, [pc, #204]	; (21168 <buttons_scan_fn+0x10c>)
   2109c:	f04f 32ff 	mov.w	r2, #4294967295
   210a0:	f002 fffe 	bl	240a0 <z_impl_k_mutex_lock>
	return list->head;
   210a4:	4b31      	ldr	r3, [pc, #196]	; (2116c <buttons_scan_fn+0x110>)
   210a6:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   210a8:	b135      	cbz	r5, 210b8 <buttons_scan_fn+0x5c>
   210aa:	3d04      	subs	r5, #4
			handler->cb(button_state, has_changed);
   210ac:	4631      	mov	r1, r6
   210ae:	682b      	ldr	r3, [r5, #0]
   210b0:	4620      	mov	r0, r4
   210b2:	4798      	blx	r3
	return node->next;
   210b4:	686d      	ldr	r5, [r5, #4]
   210b6:	e7f7      	b.n	210a8 <buttons_scan_fn+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   210b8:	482b      	ldr	r0, [pc, #172]	; (21168 <buttons_scan_fn+0x10c>)
   210ba:	f003 f8a7 	bl	2420c <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   210be:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   210c0:	b154      	cbz	r4, 210d8 <buttons_scan_fn+0x7c>
}
   210c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_reschedule(&buttons_scan,
   210c6:	482a      	ldr	r0, [pc, #168]	; (21170 <buttons_scan_fn+0x114>)
   210c8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   210cc:	2300      	movs	r3, #0
   210ce:	f003 be7d 	b.w	24dcc <k_work_reschedule>
		initial_run = false;
   210d2:	2200      	movs	r2, #0
   210d4:	701a      	strb	r2, [r3, #0]
   210d6:	e7f2      	b.n	210be <buttons_scan_fn+0x62>
	__asm__ volatile(
   210d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   210dc:	f3ef 8511 	mrs	r5, BASEPRI
   210e0:	f383 8812 	msr	BASEPRI_MAX, r3
   210e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   210e8:	4822      	ldr	r0, [pc, #136]	; (21174 <buttons_scan_fn+0x118>)
   210ea:	f002 ff85 	bl	23ff8 <z_spin_lock_valid>
   210ee:	b940      	cbnz	r0, 21102 <buttons_scan_fn+0xa6>
   210f0:	4921      	ldr	r1, [pc, #132]	; (21178 <buttons_scan_fn+0x11c>)
   210f2:	4822      	ldr	r0, [pc, #136]	; (2117c <buttons_scan_fn+0x120>)
   210f4:	2294      	movs	r2, #148	; 0x94
   210f6:	f008 ffa8 	bl	2a04a <assert_print>
   210fa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210fc:	481e      	ldr	r0, [pc, #120]	; (21178 <buttons_scan_fn+0x11c>)
   210fe:	f008 ff9d 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   21102:	481c      	ldr	r0, [pc, #112]	; (21174 <buttons_scan_fn+0x118>)
   21104:	f002 ff96 	bl	24034 <z_spin_lock_set_owner>
		switch (state) {
   21108:	4b1d      	ldr	r3, [pc, #116]	; (21180 <buttons_scan_fn+0x124>)
   2110a:	7818      	ldrb	r0, [r3, #0]
   2110c:	2801      	cmp	r0, #1
   2110e:	d119      	bne.n	21144 <buttons_scan_fn+0xe8>
			state = STATE_WAITING;
   21110:	701c      	strb	r4, [r3, #0]
			err = callback_ctrl(true);
   21112:	f7ff ff39 	bl	20f88 <callback_ctrl>
   21116:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21118:	4816      	ldr	r0, [pc, #88]	; (21174 <buttons_scan_fn+0x118>)
   2111a:	f002 ff7b 	bl	24014 <z_spin_unlock_valid>
   2111e:	b930      	cbnz	r0, 2112e <buttons_scan_fn+0xd2>
   21120:	4915      	ldr	r1, [pc, #84]	; (21178 <buttons_scan_fn+0x11c>)
   21122:	4816      	ldr	r0, [pc, #88]	; (2117c <buttons_scan_fn+0x120>)
   21124:	22c2      	movs	r2, #194	; 0xc2
   21126:	f008 ff90 	bl	2a04a <assert_print>
   2112a:	21c2      	movs	r1, #194	; 0xc2
   2112c:	e7e6      	b.n	210fc <buttons_scan_fn+0xa0>
	__asm__ volatile(
   2112e:	f385 8811 	msr	BASEPRI, r5
   21132:	f3bf 8f6f 	isb	sy
		if (err) {
   21136:	b16c      	cbz	r4, 21154 <buttons_scan_fn+0xf8>
}
   21138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_ERR("Cannot enable callbacks");
   2113c:	4811      	ldr	r0, [pc, #68]	; (21184 <buttons_scan_fn+0x128>)
   2113e:	2145      	movs	r1, #69	; 0x45
   21140:	f008 bf91 	b.w	2a066 <z_log_minimal_printk>
			__ASSERT_NO_MSG(false);
   21144:	4910      	ldr	r1, [pc, #64]	; (21188 <buttons_scan_fn+0x12c>)
   21146:	480d      	ldr	r0, [pc, #52]	; (2117c <buttons_scan_fn+0x120>)
   21148:	228a      	movs	r2, #138	; 0x8a
   2114a:	f008 ff7e 	bl	2a04a <assert_print>
   2114e:	480e      	ldr	r0, [pc, #56]	; (21188 <buttons_scan_fn+0x12c>)
   21150:	218a      	movs	r1, #138	; 0x8a
   21152:	e7d4      	b.n	210fe <buttons_scan_fn+0xa2>
}
   21154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21158:	20003488 	.word	0x20003488
   2115c:	20000889 	.word	0x20000889
   21160:	20003458 	.word	0x20003458
   21164:	2000348c 	.word	0x2000348c
   21168:	2000345c 	.word	0x2000345c
   2116c:	20003470 	.word	0x20003470
   21170:	20002018 	.word	0x20002018
   21174:	20003478 	.word	0x20003478
   21178:	0002f9fb 	.word	0x0002f9fb
   2117c:	0002f2b5 	.word	0x0002f2b5
   21180:	20004242 	.word	0x20004242
   21184:	00032af8 	.word	0x00032af8
   21188:	00032aba 	.word	0x00032aba

0002118c <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2118c:	4b07      	ldr	r3, [pc, #28]	; (211ac <dk_read_buttons+0x20>)
   2118e:	f3bf 8f5b 	dmb	ish
   21192:	681b      	ldr	r3, [r3, #0]
   21194:	f3bf 8f5b 	dmb	ish
void dk_read_buttons(uint32_t *button_state, uint32_t *has_changed)
{
	static uint32_t last_state;
	uint32_t current_state = atomic_get(&my_buttons);

	if (button_state != NULL) {
   21198:	b100      	cbz	r0, 2119c <dk_read_buttons+0x10>
		*button_state = current_state;
   2119a:	6003      	str	r3, [r0, #0]
	}

	if (has_changed != NULL) {
   2119c:	4804      	ldr	r0, [pc, #16]	; (211b0 <dk_read_buttons+0x24>)
   2119e:	b111      	cbz	r1, 211a6 <dk_read_buttons+0x1a>
		*has_changed = (current_state ^ last_state);
   211a0:	6802      	ldr	r2, [r0, #0]
   211a2:	405a      	eors	r2, r3
   211a4:	600a      	str	r2, [r1, #0]
	}

	last_state = current_state;
   211a6:	6003      	str	r3, [r0, #0]
}
   211a8:	4770      	bx	lr
   211aa:	bf00      	nop
   211ac:	20003488 	.word	0x20003488
   211b0:	20003454 	.word	0x20003454

000211b4 <dk_buttons_init>:
{
   211b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	button_handler_cb = button_handler;
   211b8:	4b3c      	ldr	r3, [pc, #240]	; (212ac <dk_buttons_init+0xf8>)
   211ba:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   211bc:	483c      	ldr	r0, [pc, #240]	; (212b0 <dk_buttons_init+0xfc>)
   211be:	4d3d      	ldr	r5, [pc, #244]	; (212b4 <dk_buttons_init+0x100>)
   211c0:	f00c fdc2 	bl	2dd48 <z_impl_k_mutex_init>
   211c4:	462e      	mov	r6, r5
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   211c6:	f04f 0800 	mov.w	r8, #0
   211ca:	462f      	mov	r7, r5
			buttons[i].dt_flags & GPIO_ACTIVE_LOW ?
   211cc:	88f2      	ldrh	r2, [r6, #6]
	return gpio_pin_configure(spec->port,
   211ce:	6830      	ldr	r0, [r6, #0]
				  spec->pin,
   211d0:	7931      	ldrb	r1, [r6, #4]
			GPIO_PULL_UP : GPIO_PULL_DOWN;
   211d2:	f012 0f01 	tst.w	r2, #1
   211d6:	bf14      	ite	ne
   211d8:	2310      	movne	r3, #16
   211da:	2320      	moveq	r3, #32
	return gpio_pin_configure(spec->port,
   211dc:	431a      	orrs	r2, r3
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   211de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   211e2:	f7ff fdc5 	bl	20d70 <z_impl_gpio_pin_configure>
		if (err) {
   211e6:	4604      	mov	r4, r0
   211e8:	b130      	cbz	r0, 211f8 <dk_buttons_init+0x44>
			LOG_ERR("Cannot configure button gpio");
   211ea:	4833      	ldr	r0, [pc, #204]	; (212b8 <dk_buttons_init+0x104>)
   211ec:	2145      	movs	r1, #69	; 0x45
			LOG_ERR("Cannot disable callbacks()");
   211ee:	f008 ff3a 	bl	2a066 <z_log_minimal_printk>
}
   211f2:	4620      	mov	r0, r4
   211f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   211f8:	f108 0801 	add.w	r8, r8, #1
   211fc:	f1b8 0f04 	cmp.w	r8, #4
   21200:	f106 0608 	add.w	r6, r6, #8
   21204:	d1e2      	bne.n	211cc <dk_buttons_init+0x18>
	uint32_t pin_mask = 0;
   21206:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21208:	4680      	mov	r8, r0
		pin_mask |= BIT(buttons[i].pin);
   2120a:	f04f 0901 	mov.w	r9, #1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   2120e:	6828      	ldr	r0, [r5, #0]
   21210:	7929      	ldrb	r1, [r5, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   21212:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21216:	f7ff fe25 	bl	20e64 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2121a:	4604      	mov	r4, r0
   2121c:	b110      	cbz	r0, 21224 <dk_buttons_init+0x70>
			LOG_ERR("Cannot disable callbacks()");
   2121e:	4827      	ldr	r0, [pc, #156]	; (212bc <dk_buttons_init+0x108>)
   21220:	2145      	movs	r1, #69	; 0x45
   21222:	e7e4      	b.n	211ee <dk_buttons_init+0x3a>
		pin_mask |= BIT(buttons[i].pin);
   21224:	792b      	ldrb	r3, [r5, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21226:	f108 0801 	add.w	r8, r8, #1
		pin_mask |= BIT(buttons[i].pin);
   2122a:	fa09 f303 	lsl.w	r3, r9, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   2122e:	f1b8 0f04 	cmp.w	r8, #4
		pin_mask |= BIT(buttons[i].pin);
   21232:	ea46 0603 	orr.w	r6, r6, r3
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21236:	f105 0508 	add.w	r5, r5, #8
   2123a:	d1e8      	bne.n	2120e <dk_buttons_init+0x5a>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2123c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 212c0 <dk_buttons_init+0x10c>
   21240:	4b20      	ldr	r3, [pc, #128]	; (212c4 <dk_buttons_init+0x110>)
	callback->pin_mask = pin_mask;
   21242:	e9c8 3601 	strd	r3, r6, [r8, #4]
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21246:	4605      	mov	r5, r0
		err = gpio_add_callback(buttons[i].port, &gpio_cb);
   21248:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2124c:	6883      	ldr	r3, [r0, #8]
   2124e:	69db      	ldr	r3, [r3, #28]
   21250:	b13b      	cbz	r3, 21262 <dk_buttons_init+0xae>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   21252:	2201      	movs	r2, #1
   21254:	4641      	mov	r1, r8
   21256:	4798      	blx	r3
		if (err) {
   21258:	4604      	mov	r4, r0
   2125a:	b128      	cbz	r0, 21268 <dk_buttons_init+0xb4>
			LOG_ERR("Cannot add callback");
   2125c:	481a      	ldr	r0, [pc, #104]	; (212c8 <dk_buttons_init+0x114>)
   2125e:	2145      	movs	r1, #69	; 0x45
   21260:	e7c5      	b.n	211ee <dk_buttons_init+0x3a>
		return -ENOTSUP;
   21262:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21266:	e7f9      	b.n	2125c <dk_buttons_init+0xa8>
	for (size_t i = 0; i < ARRAY_SIZE(buttons); i++) {
   21268:	3501      	adds	r5, #1
   2126a:	2d04      	cmp	r5, #4
   2126c:	d1ec      	bne.n	21248 <dk_buttons_init+0x94>
	k_work_init_delayable(&buttons_scan, buttons_scan_fn);
   2126e:	4917      	ldr	r1, [pc, #92]	; (212cc <dk_buttons_init+0x118>)
   21270:	4817      	ldr	r0, [pc, #92]	; (212d0 <dk_buttons_init+0x11c>)
   21272:	f003 fcc1 	bl	24bf8 <k_work_init_delayable>
	state = STATE_SCANNING;
   21276:	4b17      	ldr	r3, [pc, #92]	; (212d4 <dk_buttons_init+0x120>)
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   21278:	4815      	ldr	r0, [pc, #84]	; (212d0 <dk_buttons_init+0x11c>)
	state = STATE_SCANNING;
   2127a:	2201      	movs	r2, #1
   2127c:	701a      	strb	r2, [r3, #0]
	k_work_schedule(&buttons_scan, K_NO_WAIT);
   2127e:	2300      	movs	r3, #0
   21280:	2200      	movs	r2, #0
   21282:	f003 fd3f 	bl	24d04 <k_work_schedule>
	dk_read_buttons(NULL, NULL);
   21286:	4621      	mov	r1, r4
   21288:	4620      	mov	r0, r4
   2128a:	f7ff ff7f 	bl	2118c <dk_read_buttons>
	atomic_set(&my_buttons, (atomic_val_t)get_buttons());
   2128e:	f7ff fe37 	bl	20f00 <get_buttons>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21292:	f3bf 8f5b 	dmb	ish
   21296:	4b10      	ldr	r3, [pc, #64]	; (212d8 <dk_buttons_init+0x124>)
   21298:	e853 2f00 	ldrex	r2, [r3]
   2129c:	e843 0100 	strex	r1, r0, [r3]
   212a0:	2900      	cmp	r1, #0
   212a2:	d1f9      	bne.n	21298 <dk_buttons_init+0xe4>
   212a4:	f3bf 8f5b 	dmb	ish
   212a8:	e7a3      	b.n	211f2 <dk_buttons_init+0x3e>
   212aa:	bf00      	nop
   212ac:	2000348c 	.word	0x2000348c
   212b0:	2000345c 	.word	0x2000345c
   212b4:	0002ee50 	.word	0x0002ee50
   212b8:	00032b15 	.word	0x00032b15
   212bc:	00032b37 	.word	0x00032b37
   212c0:	2000347c 	.word	0x2000347c
   212c4:	00020fb9 	.word	0x00020fb9
   212c8:	00032b57 	.word	0x00032b57
   212cc:	0002105d 	.word	0x0002105d
   212d0:	20002018 	.word	0x20002018
   212d4:	20004242 	.word	0x20004242
   212d8:	20003488 	.word	0x20003488

000212dc <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   212dc:	4602      	mov	r2, r0
   212de:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   212e0:	4801      	ldr	r0, [pc, #4]	; (212e8 <multithreading_lock_acquire+0xc>)
   212e2:	f002 bedd 	b.w	240a0 <z_impl_k_mutex_lock>
   212e6:	bf00      	nop
   212e8:	2000092c 	.word	0x2000092c

000212ec <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   212ec:	4801      	ldr	r0, [pc, #4]	; (212f4 <multithreading_lock_release+0x8>)
   212ee:	f002 bf8d 	b.w	2420c <z_impl_k_mutex_unlock>
   212f2:	bf00      	nop
   212f4:	2000092c 	.word	0x2000092c

000212f8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   212f8:	4803      	ldr	r0, [pc, #12]	; (21308 <k_sys_fatal_error_handler+0x10>)
{
   212fa:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
   212fc:	2145      	movs	r1, #69	; 0x45
   212fe:	f008 feb2 	bl	2a066 <z_log_minimal_printk>
		sys_arch_reboot(0);
   21302:	2000      	movs	r0, #0
   21304:	f7f4 f9cc 	bl	156a0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21308:	00032b84 	.word	0x00032b84

0002130c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   2130c:	b508      	push	{r3, lr}
   2130e:	4602      	mov	r2, r0
   21310:	460b      	mov	r3, r1
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   21312:	4805      	ldr	r0, [pc, #20]	; (21328 <sdc_assertion_handler+0x1c>)
   21314:	2145      	movs	r1, #69	; 0x45
   21316:	f008 fea6 	bl	2a066 <z_log_minimal_printk>
	k_oops();
   2131a:	4040      	eors	r0, r0
   2131c:	f380 8811 	msr	BASEPRI, r0
   21320:	f04f 0003 	mov.w	r0, #3
   21324:	df02      	svc	2
}
   21326:	bd08      	pop	{r3, pc}
   21328:	00032ba6 	.word	0x00032ba6

0002132c <hci_driver_open>:

	return 0;
}

static int hci_driver_open(void)
{
   2132c:	b510      	push	{r4, lr}
	LOG_DBG("Open");

	k_work_init(&receive_work, receive_work_handler);
   2132e:	4921      	ldr	r1, [pc, #132]	; (213b4 <hci_driver_open+0x88>)
   21330:	4821      	ldr	r0, [pc, #132]	; (213b8 <hci_driver_open+0x8c>)
{
   21332:	b088      	sub	sp, #32
	k_work_init(&receive_work, receive_work_handler);
   21334:	f003 fb4a 	bl	249cc <k_work_init>

	if (IS_ENABLED(CONFIG_BT_CTLR_ECDH)) {
		hci_ecdh_init();
   21338:	f000 fe96 	bl	22068 <hci_ecdh_init>
	}

	uint8_t build_revision[SDC_BUILD_REVISION_SIZE];

	sdc_build_revision_get(build_revision);
   2133c:	a803      	add	r0, sp, #12
   2133e:	f7df fab7 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21342:	4a1e      	ldr	r2, [pc, #120]	; (213bc <hci_driver_open+0x90>)
   21344:	481e      	ldr	r0, [pc, #120]	; (213c0 <hci_driver_open+0x94>)
   21346:	2149      	movs	r1, #73	; 0x49
   21348:	f008 fe8d 	bl	2a066 <z_log_minimal_printk>
   2134c:	2214      	movs	r2, #20
   2134e:	a903      	add	r1, sp, #12
   21350:	2003      	movs	r0, #3
   21352:	f7f1 fed9 	bl	13108 <z_log_minimal_hexdump_print>
   21356:	481b      	ldr	r0, [pc, #108]	; (213c4 <hci_driver_open+0x98>)
   21358:	f00c fc9e 	bl	2dc98 <z_device_is_ready>
			"SoftDevice Controller build revision: ");

	int err;

	if (!device_is_ready(entropy_source)) {
   2135c:	b940      	cbnz	r0, 21370 <hci_driver_open+0x44>
		LOG_ERR("Entropy source device not ready");
   2135e:	481a      	ldr	r0, [pc, #104]	; (213c8 <hci_driver_open+0x9c>)
   21360:	2145      	movs	r1, #69	; 0x45
   21362:	f008 fe80 	bl	2a066 <z_log_minimal_printk>
		return -ENODEV;
   21366:	f06f 0412 	mvn.w	r4, #18
	}

	MULTITHREADING_LOCK_RELEASE();

	return 0;
}
   2136a:	4620      	mov	r0, r4
   2136c:	b008      	add	sp, #32
   2136e:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   21370:	4a16      	ldr	r2, [pc, #88]	; (213cc <hci_driver_open+0xa0>)
   21372:	ca07      	ldmia	r2, {r0, r1, r2}
   21374:	466b      	mov	r3, sp
   21376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   2137a:	4618      	mov	r0, r3
   2137c:	f7df fc2e 	bl	bdc <sdc_rand_source_register>
	if (err) {
   21380:	4602      	mov	r2, r0
   21382:	b130      	cbz	r0, 21392 <hci_driver_open+0x66>
		LOG_ERR("Failed to register rand source (%d)", err);
   21384:	4812      	ldr	r0, [pc, #72]	; (213d0 <hci_driver_open+0xa4>)
   21386:	2145      	movs	r1, #69	; 0x45
   21388:	f008 fe6d 	bl	2a066 <z_log_minimal_printk>
		return -EINVAL;
   2138c:	f06f 0415 	mvn.w	r4, #21
   21390:	e7eb      	b.n	2136a <hci_driver_open+0x3e>
	err = MULTITHREADING_LOCK_ACQUIRE();
   21392:	f04f 30ff 	mov.w	r0, #4294967295
   21396:	f04f 31ff 	mov.w	r1, #4294967295
   2139a:	f7ff ff9f 	bl	212dc <multithreading_lock_acquire>
	if (err) {
   2139e:	4604      	mov	r4, r0
   213a0:	2800      	cmp	r0, #0
   213a2:	d1e2      	bne.n	2136a <hci_driver_open+0x3e>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   213a4:	490b      	ldr	r1, [pc, #44]	; (213d4 <hci_driver_open+0xa8>)
   213a6:	480c      	ldr	r0, [pc, #48]	; (213d8 <hci_driver_open+0xac>)
   213a8:	f7df faea 	bl	980 <sdc_enable>
	if (err) {
   213ac:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   213ae:	f7ff ff9d 	bl	212ec <multithreading_lock_release>
	return 0;
   213b2:	e7da      	b.n	2136a <hci_driver_open+0x3e>
   213b4:	0002da3b 	.word	0x0002da3b
   213b8:	20003490 	.word	0x20003490
   213bc:	00032bd0 	.word	0x00032bd0
   213c0:	00032bf7 	.word	0x00032bf7
   213c4:	0002e1e4 	.word	0x0002e1e4
   213c8:	00032bff 	.word	0x00032bff
   213cc:	0002e6f0 	.word	0x0002e6f0
   213d0:	00032c24 	.word	0x00032c24
   213d4:	20002048 	.word	0x20002048
   213d8:	00021521 	.word	0x00021521

000213dc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   213dc:	b513      	push	{r0, r1, r4, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   213de:	4829      	ldr	r0, [pc, #164]	; (21484 <hci_driver_init+0xa8>)
   213e0:	f7f5 fc9a 	bl	16d18 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   213e4:	4828      	ldr	r0, [pc, #160]	; (21488 <hci_driver_init+0xac>)
   213e6:	f7df faf5 	bl	9d4 <sdc_init>
			err = sdc_support_central();
   213ea:	f7df fb6f 	bl	acc <sdc_support_central>
			if (err) {
   213ee:	b118      	cbz	r0, 213f8 <hci_driver_init+0x1c>
			return -ENOTSUP;
   213f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   213f4:	b002      	add	sp, #8
   213f6:	bd10      	pop	{r4, pc}
			err = sdc_support_dle_central();
   213f8:	f7df fb7a 	bl	af0 <sdc_support_dle_central>
			if (err) {
   213fc:	2800      	cmp	r0, #0
   213fe:	d1f7      	bne.n	213f0 <hci_driver_init+0x14>
		err = sdc_support_le_2m_phy();
   21400:	f7df fb86 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   21404:	2800      	cmp	r0, #0
   21406:	d1f3      	bne.n	213f0 <hci_driver_init+0x14>
			err = sdc_support_phy_update_central();
   21408:	f7df fb92 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   2140c:	4604      	mov	r4, r0
   2140e:	2800      	cmp	r0, #0
   21410:	d1ee      	bne.n	213f0 <hci_driver_init+0x14>
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   21412:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21414:	aa01      	add	r2, sp, #4
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   21416:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2141a:	f7df fa57 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   2141e:	2800      	cmp	r0, #0
   21420:	dbe8      	blt.n	213f4 <hci_driver_init+0x18>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   21422:	4b1a      	ldr	r3, [pc, #104]	; (2148c <hci_driver_init+0xb0>)
   21424:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21426:	aa01      	add	r2, sp, #4
   21428:	2103      	movs	r1, #3
   2142a:	4620      	mov	r0, r4
   2142c:	f7df fa4e 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21430:	2800      	cmp	r0, #0
   21432:	dbdf      	blt.n	213f4 <hci_driver_init+0x18>
	cfg.event_length.event_length_us =
   21434:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21438:	aa01      	add	r2, sp, #4
   2143a:	2104      	movs	r1, #4
   2143c:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   2143e:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21440:	f7df fa44 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   21444:	2800      	cmp	r0, #0
   21446:	dbd5      	blt.n	213f4 <hci_driver_init+0x18>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21448:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2144a:	aa01      	add	r2, sp, #4
   2144c:	2106      	movs	r1, #6
   2144e:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21450:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21454:	f7df fa3a 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   21458:	2800      	cmp	r0, #0
   2145a:	dbcb      	blt.n	213f4 <hci_driver_init+0x18>
	if (required_memory > sizeof(sdc_mempool)) {
   2145c:	f240 6271 	movw	r2, #1649	; 0x671
   21460:	4290      	cmp	r0, r2
   21462:	dd0d      	ble.n	21480 <hci_driver_init+0xa4>
		LOG_ERR("Allocated memory too low: %u < %u",
   21464:	4603      	mov	r3, r0
   21466:	2145      	movs	r1, #69	; 0x45
   21468:	4809      	ldr	r0, [pc, #36]	; (21490 <hci_driver_init+0xb4>)
   2146a:	f008 fdfc 	bl	2a066 <z_log_minimal_printk>
		k_panic();
   2146e:	4040      	eors	r0, r0
   21470:	f380 8811 	msr	BASEPRI, r0
   21474:	f04f 0004 	mov.w	r0, #4
   21478:	df02      	svc	2
		return -ENOMEM;
   2147a:	f06f 000b 	mvn.w	r0, #11
   2147e:	e7b9      	b.n	213f4 <hci_driver_init+0x18>
	return 0;
   21480:	4620      	mov	r0, r4
	if (err) {
   21482:	e7b7      	b.n	213f4 <hci_driver_init+0x18>
   21484:	0002ee70 	.word	0x0002ee70
   21488:	0002130d 	.word	0x0002130d
   2148c:	02031b1b 	.word	0x02031b1b
   21490:	00032c4d 	.word	0x00032c4d

00021494 <rand_prio_low_vector_get_blocking>:
{
   21494:	b510      	push	{r4, lr}
   21496:	4603      	mov	r3, r0
   21498:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   2149a:	480d      	ldr	r0, [pc, #52]	; (214d0 <rand_prio_low_vector_get_blocking+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   2149c:	6881      	ldr	r1, [r0, #8]
   2149e:	680c      	ldr	r4, [r1, #0]
   214a0:	b944      	cbnz	r4, 214b4 <rand_prio_low_vector_get_blocking+0x20>
   214a2:	490c      	ldr	r1, [pc, #48]	; (214d4 <rand_prio_low_vector_get_blocking+0x40>)
   214a4:	480c      	ldr	r0, [pc, #48]	; (214d8 <rand_prio_low_vector_get_blocking+0x44>)
   214a6:	224d      	movs	r2, #77	; 0x4d
   214a8:	f008 fdcf 	bl	2a04a <assert_print>
   214ac:	4809      	ldr	r0, [pc, #36]	; (214d4 <rand_prio_low_vector_get_blocking+0x40>)
   214ae:	214d      	movs	r1, #77	; 0x4d
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   214b0:	f008 fdc4 	bl	2a03c <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   214b4:	4619      	mov	r1, r3
   214b6:	47a0      	blx	r4
   214b8:	b148      	cbz	r0, 214ce <rand_prio_low_vector_get_blocking+0x3a>
   214ba:	4908      	ldr	r1, [pc, #32]	; (214dc <rand_prio_low_vector_get_blocking+0x48>)
   214bc:	4806      	ldr	r0, [pc, #24]	; (214d8 <rand_prio_low_vector_get_blocking+0x44>)
   214be:	f44f 72dd 	mov.w	r2, #442	; 0x1ba
   214c2:	f008 fdc2 	bl	2a04a <assert_print>
   214c6:	4805      	ldr	r0, [pc, #20]	; (214dc <rand_prio_low_vector_get_blocking+0x48>)
   214c8:	f44f 71dd 	mov.w	r1, #442	; 0x1ba
   214cc:	e7f0      	b.n	214b0 <rand_prio_low_vector_get_blocking+0x1c>
}
   214ce:	bd10      	pop	{r4, pc}
   214d0:	0002e1e4 	.word	0x0002e1e4
   214d4:	00032c74 	.word	0x00032c74
   214d8:	0002f2b5 	.word	0x0002f2b5
   214dc:	00032ca8 	.word	0x00032ca8

000214e0 <rand_prio_low_vector_get>:
{
   214e0:	b538      	push	{r3, r4, r5, lr}
   214e2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   214e4:	480b      	ldr	r0, [pc, #44]	; (21514 <rand_prio_low_vector_get+0x34>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   214e6:	6883      	ldr	r3, [r0, #8]
   214e8:	685d      	ldr	r5, [r3, #4]
   214ea:	460a      	mov	r2, r1
   214ec:	b955      	cbnz	r5, 21504 <rand_prio_low_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   214ee:	490a      	ldr	r1, [pc, #40]	; (21518 <rand_prio_low_vector_get+0x38>)
   214f0:	480a      	ldr	r0, [pc, #40]	; (2151c <rand_prio_low_vector_get+0x3c>)
   214f2:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   214f6:	f008 fda8 	bl	2a04a <assert_print>
   214fa:	4807      	ldr	r0, [pc, #28]	; (21518 <rand_prio_low_vector_get+0x38>)
   214fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   21500:	f008 fd9c 	bl	2a03c <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   21504:	2300      	movs	r3, #0
   21506:	4621      	mov	r1, r4
   21508:	47a8      	blx	r5
   2150a:	2800      	cmp	r0, #0
   2150c:	dbef      	blt.n	214ee <rand_prio_low_vector_get+0xe>
}
   2150e:	b2c0      	uxtb	r0, r0
   21510:	bd38      	pop	{r3, r4, r5, pc}
   21512:	bf00      	nop
   21514:	0002e1e4 	.word	0x0002e1e4
   21518:	00032ca8 	.word	0x00032ca8
   2151c:	0002f2b5 	.word	0x0002f2b5

00021520 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   21520:	4901      	ldr	r1, [pc, #4]	; (21528 <receive_signal_raise+0x8>)
   21522:	4802      	ldr	r0, [pc, #8]	; (2152c <receive_signal_raise+0xc>)
   21524:	f00c bca8 	b.w	2de78 <k_work_submit_to_queue>
   21528:	20003490 	.word	0x20003490
   2152c:	20002740 	.word	0x20002740

00021530 <rand_prio_high_vector_get>:
{
   21530:	b538      	push	{r3, r4, r5, lr}
   21532:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   21534:	480b      	ldr	r0, [pc, #44]	; (21564 <rand_prio_high_vector_get+0x34>)
	if (unlikely(!api->get_entropy_isr)) {
   21536:	6883      	ldr	r3, [r0, #8]
   21538:	685d      	ldr	r5, [r3, #4]
   2153a:	460a      	mov	r2, r1
   2153c:	b955      	cbnz	r5, 21554 <rand_prio_high_vector_get+0x24>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   2153e:	490a      	ldr	r1, [pc, #40]	; (21568 <rand_prio_high_vector_get+0x38>)
   21540:	480a      	ldr	r0, [pc, #40]	; (2156c <rand_prio_high_vector_get+0x3c>)
   21542:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
   21546:	f008 fd80 	bl	2a04a <assert_print>
   2154a:	4807      	ldr	r0, [pc, #28]	; (21568 <rand_prio_high_vector_get+0x38>)
   2154c:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
   21550:	f008 fd74 	bl	2a03c <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   21554:	2300      	movs	r3, #0
   21556:	4621      	mov	r1, r4
   21558:	47a8      	blx	r5
   2155a:	2800      	cmp	r0, #0
   2155c:	dbef      	blt.n	2153e <rand_prio_high_vector_get+0xe>
}
   2155e:	b2c0      	uxtb	r0, r0
   21560:	bd38      	pop	{r3, r4, r5, pc}
   21562:	bf00      	nop
   21564:	0002e1e4 	.word	0x0002e1e4
   21568:	00032ca8 	.word	0x00032ca8
   2156c:	0002f2b5 	.word	0x0002f2b5

00021570 <hci_driver_receive_process>:
{
   21570:	b573      	push	{r0, r1, r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   21572:	f04f 30ff 	mov.w	r0, #4294967295
   21576:	f04f 31ff 	mov.w	r1, #4294967295
   2157a:	f7ff feaf 	bl	212dc <multithreading_lock_acquire>
	if (!errcode) {
   2157e:	2800      	cmp	r0, #0
   21580:	d155      	bne.n	2162e <hci_driver_receive_process+0xbe>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   21582:	4d2c      	ldr	r5, [pc, #176]	; (21634 <hci_driver_receive_process+0xc4>)
   21584:	f10d 0107 	add.w	r1, sp, #7
   21588:	4628      	mov	r0, r5
   2158a:	f000 fbfd 	bl	21d88 <hci_internal_msg_get>
   2158e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   21590:	f7ff feac 	bl	212ec <multithreading_lock_release>
	if (errcode) {
   21594:	2c00      	cmp	r4, #0
   21596:	d14a      	bne.n	2162e <hci_driver_receive_process+0xbe>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   21598:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2159c:	2a04      	cmp	r2, #4
   2159e:	d12b      	bne.n	215f8 <hci_driver_receive_process+0x88>
	switch (hdr->evt) {
   215a0:	7828      	ldrb	r0, [r5, #0]
   215a2:	283e      	cmp	r0, #62	; 0x3e
   215a4:	d014      	beq.n	215d0 <hci_driver_receive_process+0x60>
   215a6:	28ff      	cmp	r0, #255	; 0xff
   215a8:	d019      	beq.n	215de <hci_driver_receive_process+0x6e>
		switch (subevent) {
   215aa:	f04f 32ff 	mov.w	r2, #4294967295
   215ae:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   215b2:	4621      	mov	r1, r4
   215b4:	f7f4 fab4 	bl	15b20 <bt_buf_get_evt>
	if (!evt_buf) {
   215b8:	4606      	mov	r6, r0
   215ba:	b998      	cbnz	r0, 215e4 <hci_driver_receive_process+0x74>
		if (discardable) {
   215bc:	b91c      	cbnz	r4, 215c6 <hci_driver_receive_process+0x56>
		LOG_ERR("No event buffer available");
   215be:	481e      	ldr	r0, [pc, #120]	; (21638 <hci_driver_receive_process+0xc8>)
   215c0:	2145      	movs	r1, #69	; 0x45
		LOG_ERR("No data buffer available");
   215c2:	f008 fd50 	bl	2a066 <z_log_minimal_printk>
}
   215c6:	b002      	add	sp, #8
   215c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   215cc:	f7ff bfa8 	b.w	21520 <receive_signal_raise>
		switch (me->subevent) {
   215d0:	78ab      	ldrb	r3, [r5, #2]
   215d2:	2b02      	cmp	r3, #2
		switch (subevent) {
   215d4:	d1e9      	bne.n	215aa <hci_driver_receive_process+0x3a>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   215d6:	2200      	movs	r2, #0
   215d8:	2300      	movs	r3, #0
			return true;
   215da:	2401      	movs	r4, #1
   215dc:	e7e9      	b.n	215b2 <hci_driver_receive_process+0x42>
		switch (subevent) {
   215de:	78ab      	ldrb	r3, [r5, #2]
   215e0:	2b80      	cmp	r3, #128	; 0x80
   215e2:	e7f7      	b.n	215d4 <hci_driver_receive_process+0x64>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   215e4:	786a      	ldrb	r2, [r5, #1]
   215e6:	4913      	ldr	r1, [pc, #76]	; (21634 <hci_driver_receive_process+0xc4>)
   215e8:	3202      	adds	r2, #2
   215ea:	300c      	adds	r0, #12
   215ec:	f00b ff1b 	bl	2d426 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   215f0:	4630      	mov	r0, r6
	bt_recv(data_buf);
   215f2:	f7f5 fb6b 	bl	16ccc <bt_recv>
   215f6:	e7e6      	b.n	215c6 <hci_driver_receive_process+0x56>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   215f8:	2a02      	cmp	r2, #2
   215fa:	d113      	bne.n	21624 <hci_driver_receive_process+0xb4>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   215fc:	f04f 32ff 	mov.w	r2, #4294967295
   21600:	f04f 33ff 	mov.w	r3, #4294967295
   21604:	2003      	movs	r0, #3
   21606:	f7f4 fa4d 	bl	15aa4 <bt_buf_get_rx>
	if (!data_buf) {
   2160a:	4604      	mov	r4, r0
   2160c:	b910      	cbnz	r0, 21614 <hci_driver_receive_process+0xa4>
		LOG_ERR("No data buffer available");
   2160e:	480b      	ldr	r0, [pc, #44]	; (2163c <hci_driver_receive_process+0xcc>)
   21610:	2145      	movs	r1, #69	; 0x45
   21612:	e7d6      	b.n	215c2 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   21614:	886a      	ldrh	r2, [r5, #2]
   21616:	4629      	mov	r1, r5
   21618:	3204      	adds	r2, #4
   2161a:	300c      	adds	r0, #12
   2161c:	f00b ff03 	bl	2d426 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   21620:	4620      	mov	r0, r4
   21622:	e7e6      	b.n	215f2 <hci_driver_receive_process+0x82>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   21624:	4806      	ldr	r0, [pc, #24]	; (21640 <hci_driver_receive_process+0xd0>)
   21626:	2145      	movs	r1, #69	; 0x45
   21628:	f008 fd1d 	bl	2a066 <z_log_minimal_printk>
   2162c:	e7cb      	b.n	215c6 <hci_driver_receive_process+0x56>
}
   2162e:	b002      	add	sp, #8
   21630:	bd70      	pop	{r4, r5, r6, pc}
   21632:	bf00      	nop
   21634:	20004243 	.word	0x20004243
   21638:	00032ce1 	.word	0x00032ce1
   2163c:	00032d00 	.word	0x00032d00
   21640:	00032d1e 	.word	0x00032d1e

00021644 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   21644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   21646:	4cb4      	ldr	r4, [pc, #720]	; (21918 <hci_internal_cmd_put+0x2d4>)
   21648:	7823      	ldrb	r3, [r4, #0]
{
   2164a:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   2164c:	2b00      	cmp	r3, #0
   2164e:	f040 8396 	bne.w	21d7e <hci_internal_cmd_put+0x73a>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   21652:	2304      	movs	r3, #4
   21654:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   21658:	4bb0      	ldr	r3, [pc, #704]	; (2191c <hci_internal_cmd_put+0x2d8>)
   2165a:	8806      	ldrh	r6, [r0, #0]
   2165c:	681f      	ldr	r7, [r3, #0]
   2165e:	b1b7      	cbz	r7, 2168e <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   21660:	f10d 0306 	add.w	r3, sp, #6
   21664:	f10d 0207 	add.w	r2, sp, #7
   21668:	1c61      	adds	r1, r4, #1
   2166a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   2166c:	2801      	cmp	r0, #1
   2166e:	d00e      	beq.n	2168e <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   21670:	f89d 3006 	ldrb.w	r3, [sp, #6]
   21674:	2b00      	cmp	r3, #0
   21676:	f040 8208 	bne.w	21a8a <hci_internal_cmd_put+0x446>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2167a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   2167e:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21680:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   21682:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   21684:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   21686:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   21688:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2168a:	71a0      	strb	r0, [r4, #6]
}
   2168c:	e206      	b.n	21a9c <hci_internal_cmd_put+0x458>
		switch (BT_OGF(opcode)) {
   2168e:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   21692:	ea4f 2396 	mov.w	r3, r6, lsr #10
   21696:	d20f      	bcs.n	216b8 <hci_internal_cmd_put+0x74>
   21698:	2b00      	cmp	r3, #0
   2169a:	d057      	beq.n	2174c <hci_internal_cmd_put+0x108>
   2169c:	3b01      	subs	r3, #1
   2169e:	2b07      	cmp	r3, #7
   216a0:	f200 8356 	bhi.w	21d50 <hci_internal_cmd_put+0x70c>
   216a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   216a8:	0354000d 	.word	0x0354000d
   216ac:	0082003e 	.word	0x0082003e
   216b0:	03540354 	.word	0x03540354
   216b4:	013e0354 	.word	0x013e0354
   216b8:	2b3f      	cmp	r3, #63	; 0x3f
   216ba:	f000 82a0 	beq.w	21bfe <hci_internal_cmd_put+0x5ba>
	switch (opcode)	{
   216be:	2001      	movs	r0, #1
   216c0:	e2e0      	b.n	21c84 <hci_internal_cmd_put+0x640>
	return ((uint16_t)src[1] << 8) | src[0];
   216c2:	4628      	mov	r0, r5
	switch (opcode)	{
   216c4:	f240 4206 	movw	r2, #1030	; 0x406
   216c8:	f930 3b03 	ldrsh.w	r3, [r0], #3
   216cc:	4293      	cmp	r3, r2
   216ce:	d00f      	beq.n	216f0 <hci_internal_cmd_put+0xac>
   216d0:	f240 421d 	movw	r2, #1053	; 0x41d
   216d4:	4293      	cmp	r3, r2
   216d6:	d022      	beq.n	2171e <hci_internal_cmd_put+0xda>
   216d8:	2001      	movs	r0, #1
	switch (hci_opcode) {
   216da:	f240 4306 	movw	r3, #1030	; 0x406
   216de:	429e      	cmp	r6, r3
   216e0:	f000 81d3 	beq.w	21a8a <hci_internal_cmd_put+0x446>
   216e4:	f240 431d 	movw	r3, #1053	; 0x41d
   216e8:	429e      	cmp	r6, r3
   216ea:	f000 81ce 	beq.w	21a8a <hci_internal_cmd_put+0x446>
   216ee:	e042      	b.n	21776 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   216f0:	f7ec f84f 	bl	d792 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   216f4:	f242 0332 	movw	r3, #8242	; 0x2032
   216f8:	429e      	cmp	r6, r3
   216fa:	f240 831f 	bls.w	21d3c <hci_internal_cmd_put+0x6f8>
   216fe:	f242 0385 	movw	r3, #8325	; 0x2085
   21702:	429e      	cmp	r6, r3
   21704:	d837      	bhi.n	21776 <hci_internal_cmd_put+0x132>
   21706:	f242 036c 	movw	r3, #8300	; 0x206c
   2170a:	429e      	cmp	r6, r3
   2170c:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   21710:	f200 8320 	bhi.w	21d54 <hci_internal_cmd_put+0x710>
   21714:	3b03      	subs	r3, #3
   21716:	b29b      	uxth	r3, r3
   21718:	2b01      	cmp	r3, #1
   2171a:	d82c      	bhi.n	21776 <hci_internal_cmd_put+0x132>
   2171c:	e1b5      	b.n	21a8a <hci_internal_cmd_put+0x446>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2171e:	f7ec f83a 	bl	d796 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   21722:	e7e7      	b.n	216f4 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21724:	4628      	mov	r0, r5
	switch (opcode)	{
   21726:	f640 4263 	movw	r2, #3171	; 0xc63
   2172a:	f930 3b03 	ldrsh.w	r3, [r0], #3
   2172e:	4293      	cmp	r3, r2
   21730:	d030      	beq.n	21794 <hci_internal_cmd_put+0x150>
   21732:	dc0d      	bgt.n	21750 <hci_internal_cmd_put+0x10c>
   21734:	f640 4203 	movw	r2, #3075	; 0xc03
   21738:	4293      	cmp	r3, r2
   2173a:	d01f      	beq.n	2177c <hci_internal_cmd_put+0x138>
   2173c:	f640 422d 	movw	r2, #3117	; 0xc2d
   21740:	4293      	cmp	r3, r2
   21742:	d01e      	beq.n	21782 <hci_internal_cmd_put+0x13e>
   21744:	f640 4201 	movw	r2, #3073	; 0xc01
   21748:	4293      	cmp	r3, r2
   2174a:	d012      	beq.n	21772 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   2174c:	2001      	movs	r0, #1
   2174e:	e19c      	b.n	21a8a <hci_internal_cmd_put+0x446>
	switch (opcode)	{
   21750:	f640 427b 	movw	r2, #3195	; 0xc7b
   21754:	4293      	cmp	r3, r2
   21756:	d020      	beq.n	2179a <hci_internal_cmd_put+0x156>
   21758:	f640 427c 	movw	r2, #3196	; 0xc7c
   2175c:	4293      	cmp	r3, r2
   2175e:	d1f5      	bne.n	2174c <hci_internal_cmd_put+0x108>
		*param_length_out +=
   21760:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   21764:	496e      	ldr	r1, [pc, #440]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out +=
   21766:	3302      	adds	r3, #2
   21768:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2176c:	f7eb fed9 	bl	d522 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   21770:	e001      	b.n	21776 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   21772:	f7eb fecc 	bl	d50e <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   21776:	2801      	cmp	r0, #1
   21778:	d0e8      	beq.n	2174c <hci_internal_cmd_put+0x108>
   2177a:	e77e      	b.n	2167a <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   2177c:	f7df fb2e 	bl	ddc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   21780:	e7f9      	b.n	21776 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   21782:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   21786:	4966      	ldr	r1, [pc, #408]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   21788:	3303      	adds	r3, #3
   2178a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2178e:	f7eb febc 	bl	d50a <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   21792:	e7f0      	b.n	21776 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   21794:	f7eb fec0 	bl	d518 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   21798:	e7ed      	b.n	21776 <hci_internal_cmd_put+0x132>
		*param_length_out +=
   2179a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2179e:	4960      	ldr	r1, [pc, #384]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out +=
   217a0:	3304      	adds	r3, #4
   217a2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   217a6:	f7eb feae 	bl	d506 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   217aa:	e7e4      	b.n	21776 <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   217ac:	882b      	ldrh	r3, [r5, #0]
   217ae:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   217b2:	3b01      	subs	r3, #1
   217b4:	2b08      	cmp	r3, #8
   217b6:	d8c9      	bhi.n	2174c <hci_internal_cmd_put+0x108>
   217b8:	a201      	add	r2, pc, #4	; (adr r2, 217c0 <hci_internal_cmd_put+0x17c>)
   217ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   217be:	bf00      	nop
   217c0:	000217e5 	.word	0x000217e5
   217c4:	000217f7 	.word	0x000217f7
   217c8:	000218e5 	.word	0x000218e5
   217cc:	0002174d 	.word	0x0002174d
   217d0:	0002174d 	.word	0x0002174d
   217d4:	0002174d 	.word	0x0002174d
   217d8:	0002174d 	.word	0x0002174d
   217dc:	0002174d 	.word	0x0002174d
   217e0:	00021907 	.word	0x00021907
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   217e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   217e8:	484d      	ldr	r0, [pc, #308]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   217ea:	3308      	adds	r3, #8
   217ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   217f0:	f7eb ff88 	bl	d704 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   217f4:	e7bf      	b.n	21776 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   217f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   217fa:	4849      	ldr	r0, [pc, #292]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   217fc:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   217fe:	2230      	movs	r2, #48	; 0x30
   21800:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   21802:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21806:	f009 fc01 	bl	2b00c <memset>
	cmds->hci_disconnect = 1;
   2180a:	79e3      	ldrb	r3, [r4, #7]
   2180c:	f043 0320 	orr.w	r3, r3, #32
   21810:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   21812:	7a63      	ldrb	r3, [r4, #9]
   21814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21818:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   2181a:	7b23      	ldrb	r3, [r4, #12]
   2181c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21820:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   21822:	7c63      	ldrb	r3, [r4, #17]
   21824:	f043 0304 	orr.w	r3, r3, #4
   21828:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2182a:	7d63      	ldrb	r3, [r4, #21]
   2182c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   21830:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   21834:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   21836:	7da3      	ldrb	r3, [r4, #22]
   21838:	f043 0302 	orr.w	r3, r3, #2
   2183c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   2183e:	7f63      	ldrb	r3, [r4, #29]
   21840:	f043 0304 	orr.w	r3, r3, #4
   21844:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   21846:	f894 3020 	ldrb.w	r3, [r4, #32]
   2184a:	f023 0317 	bic.w	r3, r3, #23
   2184e:	f043 0317 	orr.w	r3, r3, #23
   21852:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   21856:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   2185a:	f063 0303 	orn	r3, r3, #3
   2185e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   21862:	23ff      	movs	r3, #255	; 0xff
   21864:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   21868:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   2186c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   21870:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   21874:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   21878:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2187c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   21880:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21884:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   21888:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   2188c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   21890:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   21894:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   21898:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2189c:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
   218a0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   218a4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   218a8:	f063 0301 	orn	r3, r3, #1
   218ac:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   218b0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   218b4:	f043 0301 	orr.w	r3, r3, #1
   218b8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   218bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   218c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   218c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   218c8:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   218cc:	f043 0304 	orr.w	r3, r3, #4
   218d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->hci_le_generate_dhkey_v2 = 1;
   218d4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   218d8:	f043 0304 	orr.w	r3, r3, #4
   218dc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   218e0:	2000      	movs	r0, #0
   218e2:	e6ca      	b.n	2167a <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   218e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   218e8:	480d      	ldr	r0, [pc, #52]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   218ea:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   218ec:	2208      	movs	r2, #8
   218ee:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   218f0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   218f4:	f009 fb8a 	bl	2b00c <memset>
	features->bdedr_not_supported = 1;
   218f8:	7ae3      	ldrb	r3, [r4, #11]
   218fa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   218fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   21902:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   21904:	e7ec      	b.n	218e0 <hci_internal_cmd_put+0x29c>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   21906:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2190a:	4805      	ldr	r0, [pc, #20]	; (21920 <hci_internal_cmd_put+0x2dc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2190c:	3306      	adds	r3, #6
   2190e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   21912:	f7eb fef5 	bl	d700 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   21916:	e72e      	b.n	21776 <hci_internal_cmd_put+0x132>
   21918:	2000428c 	.word	0x2000428c
   2191c:	200034a0 	.word	0x200034a0
   21920:	20004293 	.word	0x20004293
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21924:	4628      	mov	r0, r5
	switch (opcode)	{
   21926:	f830 3b03 	ldrh.w	r3, [r0], #3
   2192a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2192e:	3b01      	subs	r3, #1
   21930:	2b5d      	cmp	r3, #93	; 0x5d
   21932:	d85f      	bhi.n	219f4 <hci_internal_cmd_put+0x3b0>
   21934:	e8df f013 	tbh	[pc, r3, lsl #1]
   21938:	007e0076 	.word	0x007e0076
   2193c:	005e0087 	.word	0x005e0087
   21940:	005e00b7 	.word	0x005e00b7
   21944:	005e005e 	.word	0x005e005e
   21948:	005e005e 	.word	0x005e005e
   2194c:	00bd00ba 	.word	0x00bd00ba
   21950:	00c300c0 	.word	0x00c300c0
   21954:	00cf00c6 	.word	0x00cf00c6
   21958:	00d500d2 	.word	0x00d500d2
   2195c:	00db00d8 	.word	0x00db00d8
   21960:	00e700de 	.word	0x00e700de
   21964:	00f300ea 	.word	0x00f300ea
   21968:	005e00fc 	.word	0x005e00fc
   2196c:	00ff005e 	.word	0x00ff005e
   21970:	005e005e 	.word	0x005e005e
   21974:	005e005e 	.word	0x005e005e
   21978:	0109005e 	.word	0x0109005e
   2197c:	011b0112 	.word	0x011b0112
   21980:	0121011e 	.word	0x0121011e
   21984:	012a0127 	.word	0x012a0127
   21988:	0130012d 	.word	0x0130012d
   2198c:	005e005e 	.word	0x005e005e
   21990:	013c0139 	.word	0x013c0139
   21994:	0148013f 	.word	0x0148013f
   21998:	01540151 	.word	0x01540151
   2199c:	005e005e 	.word	0x005e005e
   219a0:	005e005e 	.word	0x005e005e
   219a4:	005e005e 	.word	0x005e005e
   219a8:	005e005e 	.word	0x005e005e
   219ac:	005e005e 	.word	0x005e005e
   219b0:	005e005e 	.word	0x005e005e
   219b4:	005e005e 	.word	0x005e005e
   219b8:	005e005e 	.word	0x005e005e
   219bc:	005e005e 	.word	0x005e005e
   219c0:	005e005e 	.word	0x005e005e
   219c4:	005e005e 	.word	0x005e005e
   219c8:	005e005e 	.word	0x005e005e
   219cc:	005e0157 	.word	0x005e0157
   219d0:	0160005e 	.word	0x0160005e
   219d4:	005e005e 	.word	0x005e005e
   219d8:	005e005e 	.word	0x005e005e
   219dc:	005e005e 	.word	0x005e005e
   219e0:	005e005e 	.word	0x005e005e
   219e4:	005e005e 	.word	0x005e005e
   219e8:	005e005e 	.word	0x005e005e
   219ec:	005e005e 	.word	0x005e005e
   219f0:	0124005e 	.word	0x0124005e
	switch (hci_opcode) {
   219f4:	f242 0332 	movw	r3, #8242	; 0x2032
   219f8:	429e      	cmp	r6, r3
   219fa:	f43f aea7 	beq.w	2174c <hci_internal_cmd_put+0x108>
   219fe:	f200 81b8 	bhi.w	21d72 <hci_internal_cmd_put+0x72e>
   21a02:	f242 0326 	movw	r3, #8230	; 0x2026
   21a06:	429e      	cmp	r6, r3
   21a08:	f63f aea0 	bhi.w	2174c <hci_internal_cmd_put+0x108>
   21a0c:	2001      	movs	r0, #1
   21a0e:	f242 030c 	movw	r3, #8204	; 0x200c
   21a12:	429e      	cmp	r6, r3
   21a14:	f67f ae61 	bls.w	216da <hci_internal_cmd_put+0x96>
   21a18:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   21a1c:	3b0d      	subs	r3, #13
   21a1e:	4aca      	ldr	r2, [pc, #808]	; (21d48 <hci_internal_cmd_put+0x704>)
   21a20:	b29b      	uxth	r3, r3
   21a22:	e19a      	b.n	21d5a <hci_internal_cmd_put+0x716>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   21a24:	f7eb fea0 	bl	d768 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   21a28:	f242 0332 	movw	r3, #8242	; 0x2032
   21a2c:	429e      	cmp	r6, r3
   21a2e:	f47f ae61 	bne.w	216f4 <hci_internal_cmd_put+0xb0>
   21a32:	e02a      	b.n	21a8a <hci_internal_cmd_put+0x446>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   21a34:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21a38:	48c4      	ldr	r0, [pc, #784]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   21a3a:	3303      	adds	r3, #3
   21a3c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   21a40:	f7eb fe76 	bl	d730 <sdc_hci_cmd_le_read_buffer_size>
   21a44:	e7f0      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21a4a:	48c0      	ldr	r0, [pc, #768]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21a4c:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   21a4e:	2208      	movs	r2, #8
   21a50:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   21a52:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   21a56:	f009 fad9 	bl	2b00c <memset>
	features->params.le_encryption = 1;
   21a5a:	79e3      	ldrb	r3, [r4, #7]
   21a5c:	f063 0302 	orn	r3, r3, #2
   21a60:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   21a62:	7a23      	ldrb	r3, [r4, #8]
   21a64:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   21a68:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   21a6c:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   21a6e:	f242 0332 	movw	r3, #8242	; 0x2032
   21a72:	429e      	cmp	r6, r3
   21a74:	d008      	beq.n	21a88 <hci_internal_cmd_put+0x444>
   21a76:	f200 8176 	bhi.w	21d66 <hci_internal_cmd_put+0x722>
   21a7a:	f242 0326 	movw	r3, #8230	; 0x2026
   21a7e:	429e      	cmp	r6, r3
   21a80:	f63f af2e 	bhi.w	218e0 <hci_internal_cmd_put+0x29c>
		return 0;
   21a84:	2000      	movs	r0, #0
   21a86:	e7c2      	b.n	21a0e <hci_internal_cmd_put+0x3ca>
   21a88:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   21a8a:	230f      	movs	r3, #15
   21a8c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   21a8e:	2304      	movs	r3, #4
   21a90:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   21a92:	2301      	movs	r3, #1
	evt_data->status = status_code;
   21a94:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   21a96:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   21a98:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   21a9c:	2301      	movs	r3, #1
   21a9e:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   21aa0:	2000      	movs	r0, #0
}
   21aa2:	b003      	add	sp, #12
   21aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   21aa6:	f7eb fe6a 	bl	d77e <sdc_hci_cmd_le_set_random_address>
   21aaa:	e7bd      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   21aac:	f7eb fe6d 	bl	d78a <sdc_hci_cmd_le_set_scan_params>
   21ab0:	e7ba      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   21ab2:	f7eb fe68 	bl	d786 <sdc_hci_cmd_le_set_scan_enable>
   21ab6:	e7b7      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   21ab8:	f7eb fe30 	bl	d71c <sdc_hci_cmd_le_create_conn>
   21abc:	e7b4      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_create_conn_cancel();
   21abe:	f7eb fe2f 	bl	d720 <sdc_hci_cmd_le_create_conn_cancel>
   21ac2:	e7b1      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   21ac4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   21ac8:	48a0      	ldr	r0, [pc, #640]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   21aca:	3301      	adds	r3, #1
   21acc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   21ad0:	f7eb fe32 	bl	d738 <sdc_hci_cmd_le_read_filter_accept_list_size>
   21ad4:	e7a8      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   21ad6:	f7eb fe1b 	bl	d710 <sdc_hci_cmd_le_clear_filter_accept_list>
   21ada:	e7a5      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   21adc:	f7eb fe14 	bl	d708 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   21ae0:	e7a2      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   21ae2:	f7eb fe37 	bl	d754 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   21ae6:	e79f      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   21ae8:	f7eb fe16 	bl	d718 <sdc_hci_cmd_le_conn_update>
   21aec:	e79c      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   21aee:	f7eb fe40 	bl	d772 <sdc_hci_cmd_le_set_host_channel_classification>
   21af2:	e799      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   21af4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   21af8:	4994      	ldr	r1, [pc, #592]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   21afa:	3307      	adds	r3, #7
   21afc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   21b00:	f7eb fe18 	bl	d734 <sdc_hci_cmd_le_read_channel_map>
   21b04:	e790      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   21b06:	f7eb fe1d 	bl	d744 <sdc_hci_cmd_le_read_remote_features>
   21b0a:	e78d      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21b0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   21b10:	498e      	ldr	r1, [pc, #568]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   21b12:	3310      	adds	r3, #16
   21b14:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   21b18:	f7eb fe06 	bl	d728 <sdc_hci_cmd_le_encrypt>
   21b1c:	e784      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21b1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   21b22:	488a      	ldr	r0, [pc, #552]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   21b24:	3308      	adds	r3, #8
   21b26:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   21b2a:	f7eb fdff 	bl	d72c <sdc_hci_cmd_le_rand>
   21b2e:	e77b      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   21b30:	f7eb fdf8 	bl	d724 <sdc_hci_cmd_le_enable_encryption>
   21b34:	e778      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   21b36:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21b3a:	3308      	adds	r3, #8
   21b3c:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   21b40:	2370      	movs	r3, #112	; 0x70
   21b42:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   21b44:	2340      	movs	r3, #64	; 0x40
   21b46:	72e3      	strb	r3, [r4, #11]
   21b48:	e791      	b.n	21a6e <hci_internal_cmd_put+0x42a>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   21b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   21b4e:	497f      	ldr	r1, [pc, #508]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   21b50:	3302      	adds	r3, #2
   21b52:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   21b56:	f7eb fe03 	bl	d760 <sdc_hci_cmd_le_set_data_length>
   21b5a:	e765      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out +=
   21b5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   21b60:	487a      	ldr	r0, [pc, #488]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out +=
   21b62:	3304      	adds	r3, #4
   21b64:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   21b68:	f7eb fdf0 	bl	d74c <sdc_hci_cmd_le_read_suggested_default_data_length>
   21b6c:	e75c      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   21b6e:	f7eb fe0e 	bl	d78e <sdc_hci_cmd_le_write_suggested_default_data_length>
   21b72:	e759      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_read_local_p256_public_key();
   21b74:	f000 faa8 	bl	220c8 <hci_cmd_le_read_local_p256_public_key>
   21b78:	e756      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   21b7a:	f00b ff84 	bl	2da86 <hci_cmd_le_generate_dhkey>
   21b7e:	e753      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   21b80:	f00b ff84 	bl	2da8c <hci_cmd_le_generate_dhkey_v2>
   21b84:	e750      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   21b86:	f7eb fdc1 	bl	d70c <sdc_hci_cmd_le_add_device_to_resolving_list>
   21b8a:	e74d      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   21b8c:	f7eb fde4 	bl	d758 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   21b90:	e74a      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_clear_resolving_list();
   21b92:	f7eb fdbf 	bl	d714 <sdc_hci_cmd_le_clear_resolving_list>
   21b96:	e747      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   21b98:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   21b9c:	486b      	ldr	r0, [pc, #428]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   21b9e:	3301      	adds	r3, #1
   21ba0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   21ba4:	f7eb fdd0 	bl	d748 <sdc_hci_cmd_le_read_resolving_list_size>
   21ba8:	e73e      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   21baa:	f7eb fdd7 	bl	d75c <sdc_hci_cmd_le_set_address_resolution_enable>
   21bae:	e73b      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   21bb0:	f7eb fde7 	bl	d782 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   21bb4:	e738      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   21bb6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21bba:	4864      	ldr	r0, [pc, #400]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   21bbc:	3308      	adds	r3, #8
   21bbe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   21bc2:	f7eb fdbb 	bl	d73c <sdc_hci_cmd_le_read_max_data_length>
   21bc6:	e72f      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21bc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21bcc:	495f      	ldr	r1, [pc, #380]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   21bce:	3304      	adds	r3, #4
   21bd0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   21bd4:	f7eb fdb4 	bl	d740 <sdc_hci_cmd_le_read_phy>
   21bd8:	e726      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   21bda:	f7eb fdc3 	bl	d764 <sdc_hci_cmd_le_set_default_phy>
   21bde:	e723      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   21be0:	f7eb fdc9 	bl	d776 <sdc_hci_cmd_le_set_phy>
   21be4:	e720      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   21be6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21bea:	4858      	ldr	r0, [pc, #352]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   21bec:	3302      	adds	r3, #2
   21bee:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   21bf2:	f7eb fdad 	bl	d750 <sdc_hci_cmd_le_read_transmit_power>
   21bf6:	e717      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   21bf8:	f7eb fdbf 	bl	d77a <sdc_hci_cmd_le_set_privacy_mode>
   21bfc:	e714      	b.n	21a28 <hci_internal_cmd_put+0x3e4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   21bfe:	4628      	mov	r0, r5
	switch (opcode)	{
   21c00:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   21c04:	f830 3b03 	ldrh.w	r3, [r0], #3
   21c08:	4293      	cmp	r3, r2
   21c0a:	d823      	bhi.n	21c54 <hci_internal_cmd_put+0x610>
   21c0c:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   21c10:	f67f ad55 	bls.w	216be <hci_internal_cmd_put+0x7a>
   21c14:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   21c18:	3b01      	subs	r3, #1
   21c1a:	2b0a      	cmp	r3, #10
   21c1c:	f63f ad4f 	bhi.w	216be <hci_internal_cmd_put+0x7a>
   21c20:	a201      	add	r2, pc, #4	; (adr r2, 21c28 <hci_internal_cmd_put+0x5e4>)
   21c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21c26:	bf00      	nop
   21c28:	00021c75 	.word	0x00021c75
   21c2c:	00021c91 	.word	0x00021c91
   21c30:	000216bf 	.word	0x000216bf
   21c34:	000216bf 	.word	0x000216bf
   21c38:	000216bf 	.word	0x000216bf
   21c3c:	00021ce5 	.word	0x00021ce5
   21c40:	000216bf 	.word	0x000216bf
   21c44:	000216bf 	.word	0x000216bf
   21c48:	00021cc1 	.word	0x00021cc1
   21c4c:	00021cd3 	.word	0x00021cd3
   21c50:	00021ceb 	.word	0x00021ceb
   21c54:	f503 7240 	add.w	r2, r3, #768	; 0x300
   21c58:	b292      	uxth	r2, r2
   21c5a:	2a05      	cmp	r2, #5
   21c5c:	f63f ad2f 	bhi.w	216be <hci_internal_cmd_put+0x7a>
   21c60:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   21c64:	3b01      	subs	r3, #1
   21c66:	2b04      	cmp	r3, #4
   21c68:	d848      	bhi.n	21cfc <hci_internal_cmd_put+0x6b8>
   21c6a:	e8df f003 	tbb	[pc, r3]
   21c6e:	5b58      	.short	0x5b58
   21c70:	615e      	.short	0x615e
   21c72:	64          	.byte	0x64
   21c73:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   21c74:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21c78:	4834      	ldr	r0, [pc, #208]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   21c7a:	330c      	adds	r3, #12
   21c7c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   21c80:	f7df f8c0 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   21c84:	f026 0308 	bic.w	r3, r6, #8
   21c88:	f64f 5202 	movw	r2, #64770	; 0xfd02
   21c8c:	4293      	cmp	r3, r2
   21c8e:	e52c      	b.n	216ea <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21c90:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21c94:	482d      	ldr	r0, [pc, #180]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21c96:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21c98:	2202      	movs	r2, #2
   21c9a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   21c9c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21ca0:	f009 f9b4 	bl	2b00c <memset>
	cmds->read_version_info = 1;
   21ca4:	79e3      	ldrb	r3, [r4, #7]
   21ca6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   21caa:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   21cae:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   21cb0:	7a23      	ldrb	r3, [r4, #8]
   21cb2:	f023 0307 	bic.w	r3, r3, #7
   21cb6:	f043 0307 	orr.w	r3, r3, #7
   21cba:	7223      	strb	r3, [r4, #8]
		return 0;
   21cbc:	2000      	movs	r0, #0
   21cbe:	e7e1      	b.n	21c84 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21cc4:	4821      	ldr	r0, [pc, #132]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   21cc6:	3317      	adds	r3, #23
   21cc8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   21ccc:	f7eb fcc7 	bl	d65e <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   21cd0:	e7d8      	b.n	21c84 <hci_internal_cmd_put+0x640>
		*param_length_out +=
   21cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21cd6:	481d      	ldr	r0, [pc, #116]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out +=
   21cd8:	3320      	adds	r3, #32
   21cda:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   21cde:	f7eb fc71 	bl	d5c4 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   21ce2:	e7cf      	b.n	21c84 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   21ce4:	f7eb fd0a 	bl	d6fc <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   21ce8:	e7cc      	b.n	21c84 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   21cea:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   21cee:	4817      	ldr	r0, [pc, #92]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   21cf0:	3301      	adds	r3, #1
   21cf2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   21cf6:	f7eb fc51 	bl	d59c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   21cfa:	e7c3      	b.n	21c84 <hci_internal_cmd_put+0x640>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21cfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21d00:	4812      	ldr	r0, [pc, #72]	; (21d4c <hci_internal_cmd_put+0x708>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21d02:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   21d04:	2202      	movs	r2, #2
   21d06:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   21d08:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   21d0c:	f009 f97e 	bl	2b00c <memset>
	cmds->read_supported_vs_commands = 1;
   21d10:	79e3      	ldrb	r3, [r4, #7]
   21d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21d16:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   21d1a:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   21d1c:	e7ce      	b.n	21cbc <hci_internal_cmd_put+0x678>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   21d1e:	f7eb fc36 	bl	d58e <sdc_hci_cmd_vs_llpm_mode_set>
   21d22:	e7af      	b.n	21c84 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   21d24:	f7eb fc07 	bl	d536 <sdc_hci_cmd_vs_conn_update>
   21d28:	e7ac      	b.n	21c84 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   21d2a:	f7eb fbfc 	bl	d526 <sdc_hci_cmd_vs_conn_event_extend>
   21d2e:	e7a9      	b.n	21c84 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   21d30:	f7eb fc2f 	bl	d592 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   21d34:	e7a6      	b.n	21c84 <hci_internal_cmd_put+0x640>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   21d36:	f7eb fc28 	bl	d58a <sdc_hci_cmd_vs_event_length_set>
   21d3a:	e7a3      	b.n	21c84 <hci_internal_cmd_put+0x640>
	switch (hci_opcode) {
   21d3c:	f242 0326 	movw	r3, #8230	; 0x2026
   21d40:	429e      	cmp	r6, r3
   21d42:	f67f ae64 	bls.w	21a0e <hci_internal_cmd_put+0x3ca>
   21d46:	e516      	b.n	21776 <hci_internal_cmd_put+0x132>
   21d48:	03001241 	.word	0x03001241
   21d4c:	20004293 	.word	0x20004293
		switch (BT_OGF(opcode)) {
   21d50:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   21d52:	e510      	b.n	21776 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   21d54:	3b2d      	subs	r3, #45	; 0x2d
   21d56:	4a0b      	ldr	r2, [pc, #44]	; (21d84 <hci_internal_cmd_put+0x740>)
   21d58:	b29b      	uxth	r3, r3
   21d5a:	fa22 f303 	lsr.w	r3, r2, r3
   21d5e:	07db      	lsls	r3, r3, #31
   21d60:	f57f ad09 	bpl.w	21776 <hci_internal_cmd_put+0x132>
   21d64:	e691      	b.n	21a8a <hci_internal_cmd_put+0x446>
   21d66:	f242 0385 	movw	r3, #8325	; 0x2085
   21d6a:	429e      	cmp	r6, r3
   21d6c:	d905      	bls.n	21d7a <hci_internal_cmd_put+0x736>
		return 0;
   21d6e:	2000      	movs	r0, #0
   21d70:	e501      	b.n	21776 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   21d72:	f242 0385 	movw	r3, #8325	; 0x2085
   21d76:	2001      	movs	r0, #1
   21d78:	e4c3      	b.n	21702 <hci_internal_cmd_put+0xbe>
		return 0;
   21d7a:	2000      	movs	r0, #0
   21d7c:	e4c3      	b.n	21706 <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   21d7e:	f04f 30ff 	mov.w	r0, #4294967295
   21d82:	e68e      	b.n	21aa2 <hci_internal_cmd_put+0x45e>
   21d84:	01000401 	.word	0x01000401

00021d88 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   21d88:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   21d8a:	4c09      	ldr	r4, [pc, #36]	; (21db0 <hci_internal_msg_get+0x28>)
   21d8c:	7823      	ldrb	r3, [r4, #0]
{
   21d8e:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   21d90:	b91b      	cbnz	r3, 21d9a <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   21d92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   21d96:	f7eb bba6 	b.w	d4e6 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   21d9a:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   21d9c:	1c61      	adds	r1, r4, #1
   21d9e:	3202      	adds	r2, #2
   21da0:	f009 f929 	bl	2aff6 <memcpy>
		cmd_complete_or_status.occurred = false;
   21da4:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   21da6:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   21da8:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   21daa:	702b      	strb	r3, [r5, #0]
}
   21dac:	bd38      	pop	{r3, r4, r5, pc}
   21dae:	bf00      	nop
   21db0:	2000428c 	.word	0x2000428c

00021db4 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   21db4:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   21db6:	b508      	push	{r3, lr}
   21db8:	f101 0310 	add.w	r3, r1, #16
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   21dbc:	d90c      	bls.n	21dd8 <sys_memcpy_swap.constprop.0+0x24>
   21dbe:	4298      	cmp	r0, r3
   21dc0:	d20f      	bcs.n	21de2 <sys_memcpy_swap.constprop.0+0x2e>
   21dc2:	490c      	ldr	r1, [pc, #48]	; (21df4 <sys_memcpy_swap.constprop.0+0x40>)
   21dc4:	480c      	ldr	r0, [pc, #48]	; (21df8 <sys_memcpy_swap.constprop.0+0x44>)
   21dc6:	f240 2215 	movw	r2, #533	; 0x215
   21dca:	f008 f93e 	bl	2a04a <assert_print>
   21dce:	4809      	ldr	r0, [pc, #36]	; (21df4 <sys_memcpy_swap.constprop.0+0x40>)
   21dd0:	f240 2115 	movw	r1, #533	; 0x215
   21dd4:	f008 f932 	bl	2a03c <assert_post_action>
   21dd8:	d0f3      	beq.n	21dc2 <sys_memcpy_swap.constprop.0+0xe>
   21dda:	f100 0210 	add.w	r2, r0, #16
   21dde:	4291      	cmp	r1, r2
   21de0:	e7ee      	b.n	21dc0 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   21de2:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   21de4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   21de8:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   21dec:	428b      	cmp	r3, r1
   21dee:	d1f9      	bne.n	21de4 <sys_memcpy_swap.constprop.0+0x30>
}
   21df0:	bd08      	pop	{r3, pc}
   21df2:	bf00      	nop
   21df4:	00032572 	.word	0x00032572
   21df8:	0002f2b5 	.word	0x0002f2b5

00021dfc <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   21dfc:	b570      	push	{r4, r5, r6, lr}
   21dfe:	4606      	mov	r6, r0
   21e00:	460c      	mov	r4, r1
   21e02:	4d0d      	ldr	r5, [pc, #52]	; (21e38 <bt_rand+0x3c>)
   21e04:	4628      	mov	r0, r5
   21e06:	f00b ff47 	bl	2dc98 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   21e0a:	b188      	cbz	r0, 21e30 <bt_rand+0x34>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   21e0c:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   21e0e:	68ab      	ldr	r3, [r5, #8]
   21e10:	681b      	ldr	r3, [r3, #0]
   21e12:	b943      	cbnz	r3, 21e26 <bt_rand+0x2a>
   21e14:	4909      	ldr	r1, [pc, #36]	; (21e3c <bt_rand+0x40>)
   21e16:	480a      	ldr	r0, [pc, #40]	; (21e40 <bt_rand+0x44>)
   21e18:	224d      	movs	r2, #77	; 0x4d
   21e1a:	f008 f916 	bl	2a04a <assert_print>
   21e1e:	4807      	ldr	r0, [pc, #28]	; (21e3c <bt_rand+0x40>)
   21e20:	214d      	movs	r1, #77	; 0x4d
   21e22:	f008 f90b 	bl	2a03c <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   21e26:	4631      	mov	r1, r6
   21e28:	4628      	mov	r0, r5
}
   21e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21e2e:	4718      	bx	r3
   21e30:	f06f 0012 	mvn.w	r0, #18
   21e34:	bd70      	pop	{r4, r5, r6, pc}
   21e36:	bf00      	nop
   21e38:	0002e1e4 	.word	0x0002e1e4
   21e3c:	00032c74 	.word	0x00032c74
   21e40:	0002f2b5 	.word	0x0002f2b5

00021e44 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   21e44:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   21e46:	b508      	push	{r3, lr}
   21e48:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   21e4c:	d90c      	bls.n	21e68 <sys_memcpy_swap.constprop.0+0x24>
   21e4e:	4298      	cmp	r0, r3
   21e50:	d20f      	bcs.n	21e72 <sys_memcpy_swap.constprop.0+0x2e>
   21e52:	490c      	ldr	r1, [pc, #48]	; (21e84 <sys_memcpy_swap.constprop.0+0x40>)
   21e54:	480c      	ldr	r0, [pc, #48]	; (21e88 <sys_memcpy_swap.constprop.0+0x44>)
   21e56:	f240 2215 	movw	r2, #533	; 0x215
   21e5a:	f008 f8f6 	bl	2a04a <assert_print>
   21e5e:	4809      	ldr	r0, [pc, #36]	; (21e84 <sys_memcpy_swap.constprop.0+0x40>)
   21e60:	f240 2115 	movw	r1, #533	; 0x215
   21e64:	f008 f8ea 	bl	2a03c <assert_post_action>
   21e68:	d0f3      	beq.n	21e52 <sys_memcpy_swap.constprop.0+0xe>
   21e6a:	f100 0220 	add.w	r2, r0, #32
   21e6e:	4291      	cmp	r1, r2
   21e70:	e7ee      	b.n	21e50 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   21e72:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   21e74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   21e78:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   21e7c:	428b      	cmp	r3, r1
   21e7e:	d1f9      	bne.n	21e74 <sys_memcpy_swap.constprop.0+0x30>
}
   21e80:	bd08      	pop	{r3, pc}
   21e82:	bf00      	nop
   21e84:	00032572 	.word	0x00032572
   21e88:	0002f2b5 	.word	0x0002f2b5

00021e8c <ecdh_p256_common_secret>:

static uint8_t common_secret(bool use_debug)
{
	int err;

	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   21e8c:	4b1e      	ldr	r3, [pc, #120]	; (21f08 <ecdh_p256_common_secret+0x7c>)
   21e8e:	491f      	ldr	r1, [pc, #124]	; (21f0c <ecdh_p256_common_secret+0x80>)
   21e90:	f103 0220 	add.w	r2, r3, #32
   21e94:	2800      	cmp	r0, #0
   21e96:	bf08      	it	eq
   21e98:	4619      	moveq	r1, r3

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   21e9a:	b570      	push	{r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   21e9c:	4610      	mov	r0, r2
   21e9e:	f004 fde3 	bl	26a68 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   21ea2:	4602      	mov	r2, r0
   21ea4:	b348      	cbz	r0, 21efa <ecdh_p256_common_secret+0x6e>
		LOG_ERR("public key is not valid (err %d)", err);
   21ea6:	481a      	ldr	r0, [pc, #104]	; (21f10 <ecdh_p256_common_secret+0x84>)
   21ea8:	2145      	movs	r1, #69	; 0x45
   21eaa:	f008 f8dc 	bl	2a066 <z_log_minimal_printk>
		return BT_HCI_ERR_INVALID_PARAM;
   21eae:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21eb0:	f04f 32ff 	mov.w	r2, #4294967295
   21eb4:	f04f 33ff 	mov.w	r3, #4294967295
   21eb8:	2001      	movs	r0, #1
   21eba:	f7f3 fdf3 	bl	15aa4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   21ebe:	f100 060c 	add.w	r6, r0, #12
   21ec2:	2102      	movs	r1, #2
   21ec4:	4605      	mov	r5, r0
   21ec6:	4630      	mov	r0, r6
   21ec8:	f7fd f8d0 	bl	1f06c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   21ecc:	233e      	movs	r3, #62	; 0x3e
   21ece:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21ed0:	2322      	movs	r3, #34	; 0x22
   21ed2:	7043      	strb	r3, [r0, #1]
   21ed4:	2101      	movs	r1, #1
   21ed6:	4630      	mov	r0, r6
   21ed8:	f7fd f8c8 	bl	1f06c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   21edc:	2309      	movs	r3, #9
   21ede:	7003      	strb	r3, [r0, #0]
   21ee0:	2121      	movs	r1, #33	; 0x21
   21ee2:	4630      	mov	r0, r6
   21ee4:	f7fd f8c2 	bl	1f06c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   21ee8:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   21eec:	b13c      	cbz	r4, 21efe <ecdh_p256_common_secret+0x72>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   21eee:	2220      	movs	r2, #32
   21ef0:	21ff      	movs	r1, #255	; 0xff
   21ef2:	f009 f88b 	bl	2b00c <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   21ef6:	4628      	mov	r0, r5
   21ef8:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21efa:	4604      	mov	r4, r0
   21efc:	e7d8      	b.n	21eb0 <ecdh_p256_common_secret+0x24>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   21efe:	4905      	ldr	r1, [pc, #20]	; (21f14 <ecdh_p256_common_secret+0x88>)
   21f00:	f7ff ffa0 	bl	21e44 <sys_memcpy_swap.constprop.0>
   21f04:	e7f7      	b.n	21ef6 <ecdh_p256_common_secret+0x6a>
   21f06:	bf00      	nop
   21f08:	200042d3 	.word	0x200042d3
   21f0c:	00032dda 	.word	0x00032dda
   21f10:	00032d92 	.word	0x00032d92
   21f14:	200042f3 	.word	0x200042f3

00021f18 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   21f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   21f1a:	4c3d      	ldr	r4, [pc, #244]	; (22010 <ecdh_cmd_process+0xf8>)
   21f1c:	f3bf 8f5b 	dmb	ish
   21f20:	6823      	ldr	r3, [r4, #0]
   21f22:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   21f26:	2b02      	cmp	r3, #2
   21f28:	4627      	mov	r7, r4
   21f2a:	d059      	beq.n	21fe0 <ecdh_cmd_process+0xc8>
   21f2c:	2b04      	cmp	r3, #4
   21f2e:	d05c      	beq.n	21fea <ecdh_cmd_process+0xd2>
   21f30:	2b01      	cmp	r3, #1
   21f32:	d15c      	bne.n	21fee <ecdh_cmd_process+0xd6>
		err = bt_rand(ecdh.private_key_be, 32);
   21f34:	4c37      	ldr	r4, [pc, #220]	; (22014 <ecdh_cmd_process+0xfc>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   21f36:	4e38      	ldr	r6, [pc, #224]	; (22018 <ecdh_cmd_process+0x100>)
		err = bt_rand(ecdh.private_key_be, 32);
   21f38:	2120      	movs	r1, #32
   21f3a:	4620      	mov	r0, r4
   21f3c:	f7ff ff5e 	bl	21dfc <bt_rand>
		if (err) {
   21f40:	2800      	cmp	r0, #0
   21f42:	d142      	bne.n	21fca <ecdh_cmd_process+0xb2>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   21f44:	2220      	movs	r2, #32
   21f46:	4631      	mov	r1, r6
   21f48:	4620      	mov	r0, r4
   21f4a:	f009 f82d 	bl	2afa8 <memcmp>
   21f4e:	2800      	cmp	r0, #0
   21f50:	d0f2      	beq.n	21f38 <ecdh_cmd_process+0x20>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   21f52:	4832      	ldr	r0, [pc, #200]	; (2201c <ecdh_cmd_process+0x104>)
   21f54:	4621      	mov	r1, r4
   21f56:	f004 fd73 	bl	26a40 <ocrypto_ecdh_p256_public_key>
	} while (err);
   21f5a:	4605      	mov	r5, r0
   21f5c:	2800      	cmp	r0, #0
   21f5e:	d1eb      	bne.n	21f38 <ecdh_cmd_process+0x20>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   21f60:	f04f 32ff 	mov.w	r2, #4294967295
   21f64:	f04f 33ff 	mov.w	r3, #4294967295
   21f68:	2001      	movs	r0, #1
   21f6a:	f7f3 fd9b 	bl	15aa4 <bt_buf_get_rx>
   21f6e:	f100 060c 	add.w	r6, r0, #12
   21f72:	2102      	movs	r1, #2
   21f74:	4604      	mov	r4, r0
   21f76:	4630      	mov	r0, r6
   21f78:	f7fd f878 	bl	1f06c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   21f7c:	233e      	movs	r3, #62	; 0x3e
   21f7e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   21f80:	2342      	movs	r3, #66	; 0x42
   21f82:	7043      	strb	r3, [r0, #1]
   21f84:	2101      	movs	r1, #1
   21f86:	4630      	mov	r0, r6
   21f88:	f7fd f870 	bl	1f06c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   21f8c:	2308      	movs	r3, #8
   21f8e:	7003      	strb	r3, [r0, #0]
   21f90:	2141      	movs	r1, #65	; 0x41
   21f92:	4630      	mov	r0, r6
   21f94:	f7fd f86a 	bl	1f06c <net_buf_simple_add>
   21f98:	4606      	mov	r6, r0
	evt->status = status;
   21f9a:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   21f9e:	b1b5      	cbz	r5, 21fce <ecdh_cmd_process+0xb6>
		(void)memset(evt->key, 0, sizeof(evt->key));
   21fa0:	2240      	movs	r2, #64	; 0x40
   21fa2:	2100      	movs	r1, #0
   21fa4:	f009 f832 	bl	2b00c <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   21fa8:	f3bf 8f5b 	dmb	ish
   21fac:	2300      	movs	r3, #0
   21fae:	e857 2f00 	ldrex	r2, [r7]
   21fb2:	e847 3100 	strex	r1, r3, [r7]
   21fb6:	2900      	cmp	r1, #0
   21fb8:	d1f9      	bne.n	21fae <ecdh_cmd_process+0x96>
   21fba:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   21fbe:	b32c      	cbz	r4, 2200c <ecdh_cmd_process+0xf4>
		bt_recv(buf);
   21fc0:	4620      	mov	r0, r4
	}
}
   21fc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_recv(buf);
   21fc6:	f7f4 be81 	b.w	16ccc <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   21fca:	251f      	movs	r5, #31
   21fcc:	e7c8      	b.n	21f60 <ecdh_cmd_process+0x48>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   21fce:	4913      	ldr	r1, [pc, #76]	; (2201c <ecdh_cmd_process+0x104>)
   21fd0:	f7ff ff38 	bl	21e44 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   21fd4:	4912      	ldr	r1, [pc, #72]	; (22020 <ecdh_cmd_process+0x108>)
   21fd6:	f106 0021 	add.w	r0, r6, #33	; 0x21
   21fda:	f7ff ff33 	bl	21e44 <sys_memcpy_swap.constprop.0>
		break;
   21fde:	e7e3      	b.n	21fa8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(false);
   21fe0:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   21fe2:	f7ff ff53 	bl	21e8c <ecdh_p256_common_secret>
   21fe6:	4604      	mov	r4, r0
		break;
   21fe8:	e7de      	b.n	21fa8 <ecdh_cmd_process+0x90>
		buf = ecdh_p256_common_secret(true);
   21fea:	2001      	movs	r0, #1
   21fec:	e7f9      	b.n	21fe2 <ecdh_cmd_process+0xca>
		LOG_WRN("Unknown command");
   21fee:	480d      	ldr	r0, [pc, #52]	; (22024 <ecdh_cmd_process+0x10c>)
   21ff0:	2157      	movs	r1, #87	; 0x57
   21ff2:	f008 f838 	bl	2a066 <z_log_minimal_printk>
   21ff6:	f3bf 8f5b 	dmb	ish
   21ffa:	2300      	movs	r3, #0
   21ffc:	e854 2f00 	ldrex	r2, [r4]
   22000:	e844 3100 	strex	r1, r3, [r4]
   22004:	2900      	cmp	r1, #0
   22006:	d1f9      	bne.n	21ffc <ecdh_cmd_process+0xe4>
   22008:	f3bf 8f5b 	dmb	ish
}
   2200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2200e:	bf00      	nop
   22010:	200034b4 	.word	0x200034b4
   22014:	200042d3 	.word	0x200042d3
   22018:	00032dda 	.word	0x00032dda
   2201c:	200042f3 	.word	0x200042f3
   22020:	20004313 	.word	0x20004313
   22024:	00032db8 	.word	0x00032db8

00022028 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   22028:	b510      	push	{r4, lr}
   2202a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   2202c:	2210      	movs	r2, #16
   2202e:	2100      	movs	r1, #0
   22030:	a801      	add	r0, sp, #4
   22032:	f008 ffeb 	bl	2b00c <memset>
   22036:	4c0b      	ldr	r4, [pc, #44]	; (22064 <ecdh_thread+0x3c>)
   22038:	9405      	str	r4, [sp, #20]
   2203a:	2301      	movs	r3, #1
   2203c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   22040:	f04f 32ff 	mov.w	r2, #4294967295
   22044:	f04f 33ff 	mov.w	r3, #4294967295
   22048:	2101      	movs	r1, #1
   2204a:	a801      	add	r0, sp, #4
   2204c:	f004 fb90 	bl	26770 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   22050:	4620      	mov	r0, r4
   22052:	f00c f81b 	bl	2e08c <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   22056:	9b04      	ldr	r3, [sp, #16]
   22058:	f36f 3394 	bfc	r3, #14, #7
   2205c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   2205e:	f7ff ff5b 	bl	21f18 <ecdh_cmd_process>
	while (true) {
   22062:	e7ed      	b.n	22040 <ecdh_thread+0x18>
   22064:	200034a4 	.word	0x200034a4

00022068 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   22068:	b510      	push	{r4, lr}
   2206a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   2206c:	480e      	ldr	r0, [pc, #56]	; (220a8 <hci_ecdh_init+0x40>)
   2206e:	f00c f808 	bl	2e082 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22072:	4c0e      	ldr	r4, [pc, #56]	; (220ac <hci_ecdh_init+0x44>)
   22074:	490e      	ldr	r1, [pc, #56]	; (220b0 <hci_ecdh_init+0x48>)
   22076:	2200      	movs	r2, #0
   22078:	2300      	movs	r3, #0
   2207a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2207e:	2300      	movs	r3, #0
   22080:	220a      	movs	r2, #10
   22082:	e9cd 2303 	strd	r2, r3, [sp, #12]
   22086:	e9cd 3301 	strd	r3, r3, [sp, #4]
   2208a:	9300      	str	r3, [sp, #0]
   2208c:	f44f 7262 	mov.w	r2, #904	; 0x388
   22090:	4b08      	ldr	r3, [pc, #32]	; (220b4 <hci_ecdh_init+0x4c>)
   22092:	4620      	mov	r0, r4
   22094:	f001 fefa 	bl	23e8c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   22098:	4907      	ldr	r1, [pc, #28]	; (220b8 <hci_ecdh_init+0x50>)
   2209a:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   2209c:	b008      	add	sp, #32
   2209e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   220a2:	f00b be3b 	b.w	2dd1c <z_impl_k_thread_name_set>
   220a6:	bf00      	nop
   220a8:	200034a4 	.word	0x200034a4
   220ac:	200026c0 	.word	0x200026c0
   220b0:	20007d40 	.word	0x20007d40
   220b4:	00022029 	.word	0x00022029
   220b8:	00032dcd 	.word	0x00032dcd

000220bc <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   220bc:	4801      	ldr	r0, [pc, #4]	; (220c4 <hci_ecdh_uninit+0x8>)
   220be:	f7f3 b991 	b.w	153e4 <z_impl_k_thread_abort>
   220c2:	bf00      	nop
   220c4:	200026c0 	.word	0x200026c0

000220c8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   220c8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   220ca:	4b0b      	ldr	r3, [pc, #44]	; (220f8 <hci_cmd_le_read_local_p256_public_key+0x30>)
   220cc:	f3bf 8f5b 	dmb	ish
   220d0:	2201      	movs	r2, #1
   220d2:	e853 1f00 	ldrex	r1, [r3]
   220d6:	2900      	cmp	r1, #0
   220d8:	d103      	bne.n	220e2 <hci_cmd_le_read_local_p256_public_key+0x1a>
   220da:	e843 2000 	strex	r0, r2, [r3]
   220de:	2800      	cmp	r0, #0
   220e0:	d1f7      	bne.n	220d2 <hci_cmd_le_read_local_p256_public_key+0xa>
   220e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   220e6:	d105      	bne.n	220f4 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   220e8:	4804      	ldr	r0, [pc, #16]	; (220fc <hci_cmd_le_read_local_p256_public_key+0x34>)
   220ea:	2100      	movs	r1, #0
   220ec:	f004 fbf2 	bl	268d4 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   220f0:	2000      	movs	r0, #0
}
   220f2:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   220f4:	200c      	movs	r0, #12
   220f6:	e7fc      	b.n	220f2 <hci_cmd_le_read_local_p256_public_key+0x2a>
   220f8:	200034b4 	.word	0x200034b4
   220fc:	200034a4 	.word	0x200034a4

00022100 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   22100:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   22102:	2900      	cmp	r1, #0
   22104:	4b11      	ldr	r3, [pc, #68]	; (2214c <cmd_le_generate_dhkey+0x4c>)
   22106:	f3bf 8f5b 	dmb	ish
{
   2210a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   2210c:	bf0c      	ite	eq
   2210e:	2202      	moveq	r2, #2
   22110:	2204      	movne	r2, #4
   22112:	e853 1f00 	ldrex	r1, [r3]
   22116:	2900      	cmp	r1, #0
   22118:	d103      	bne.n	22122 <cmd_le_generate_dhkey+0x22>
   2211a:	e843 2000 	strex	r0, r2, [r3]
   2211e:	2800      	cmp	r0, #0
   22120:	d1f7      	bne.n	22112 <cmd_le_generate_dhkey+0x12>
   22122:	f3bf 8f5b 	dmb	ish
   22126:	d10e      	bne.n	22146 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   22128:	4621      	mov	r1, r4
   2212a:	4809      	ldr	r0, [pc, #36]	; (22150 <cmd_le_generate_dhkey+0x50>)
   2212c:	f7ff fe8a 	bl	21e44 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   22130:	4808      	ldr	r0, [pc, #32]	; (22154 <cmd_le_generate_dhkey+0x54>)
   22132:	f104 0120 	add.w	r1, r4, #32
   22136:	f7ff fe85 	bl	21e44 <sys_memcpy_swap.constprop.0>
   2213a:	4807      	ldr	r0, [pc, #28]	; (22158 <cmd_le_generate_dhkey+0x58>)
   2213c:	2100      	movs	r1, #0
   2213e:	f004 fbc9 	bl	268d4 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   22142:	2000      	movs	r0, #0
}
   22144:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22146:	200c      	movs	r0, #12
   22148:	e7fc      	b.n	22144 <cmd_le_generate_dhkey+0x44>
   2214a:	bf00      	nop
   2214c:	200034b4 	.word	0x200034b4
   22150:	200042f3 	.word	0x200042f3
   22154:	20004313 	.word	0x20004313
   22158:	200034a4 	.word	0x200034a4

0002215c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   2215c:	b508      	push	{r3, lr}
   2215e:	4602      	mov	r2, r0
   22160:	460b      	mov	r3, r1
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   22162:	4805      	ldr	r0, [pc, #20]	; (22178 <m_assert_handler+0x1c>)
   22164:	2145      	movs	r1, #69	; 0x45
   22166:	f007 ff7e 	bl	2a066 <z_log_minimal_printk>
	k_oops();
   2216a:	4040      	eors	r0, r0
   2216c:	f380 8811 	msr	BASEPRI, r0
   22170:	f04f 0003 	mov.w	r0, #3
   22174:	df02      	svc	2
}
   22176:	bd08      	pop	{r3, pc}
   22178:	00032e06 	.word	0x00032e06

0002217c <mpsl_low_prio_irq_handler>:
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   2217c:	4901      	ldr	r1, [pc, #4]	; (22184 <mpsl_low_prio_irq_handler+0x8>)
   2217e:	4802      	ldr	r0, [pc, #8]	; (22188 <mpsl_low_prio_irq_handler+0xc>)
   22180:	f00b be7a 	b.w	2de78 <k_work_submit_to_queue>
   22184:	200034e8 	.word	0x200034e8
   22188:	20002740 	.word	0x20002740

0002218c <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   2218c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2218e:	2332      	movs	r3, #50	; 0x32
   22190:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   22194:	4a13      	ldr	r2, [pc, #76]	; (221e4 <mpsl_lib_init_sys+0x58>)
	clock_cfg.skip_wait_lfclk_started =
   22196:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   22198:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2219a:	2119      	movs	r1, #25
   2219c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2219e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   221a2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   221a6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   221aa:	f7ea fb71 	bl	c890 <mpsl_init>
	if (err) {
   221ae:	4604      	mov	r4, r0
   221b0:	b9a0      	cbnz	r0, 221dc <mpsl_lib_init_sys+0x50>
	err = mpsl_timeslot_session_count_set((void *) timeslot_context,
   221b2:	480d      	ldr	r0, [pc, #52]	; (221e8 <mpsl_lib_init_sys+0x5c>)
   221b4:	4629      	mov	r1, r5
   221b6:	f7ee fd02 	bl	10bbe <mpsl_timeslot_session_count_set>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   221ba:	4604      	mov	r4, r0
   221bc:	b970      	cbnz	r0, 221dc <mpsl_lib_init_sys+0x50>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   221be:	4601      	mov	r1, r0
   221c0:	462a      	mov	r2, r5
   221c2:	2008      	movs	r0, #8
   221c4:	f7f2 fd42 	bl	14c4c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   221c8:	462a      	mov	r2, r5
   221ca:	4621      	mov	r1, r4
   221cc:	200b      	movs	r0, #11
   221ce:	f7f2 fd3d 	bl	14c4c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   221d2:	462a      	mov	r2, r5
   221d4:	4621      	mov	r1, r4
   221d6:	4628      	mov	r0, r5
   221d8:	f7f2 fd38 	bl	14c4c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   221dc:	4620      	mov	r0, r4
   221de:	b003      	add	sp, #12
   221e0:	bd30      	pop	{r4, r5, pc}
   221e2:	bf00      	nop
   221e4:	0002215d 	.word	0x0002215d
   221e8:	200034b8 	.word	0x200034b8

000221ec <mpsl_low_prio_work_handler>:
{
   221ec:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   221ee:	f04f 30ff 	mov.w	r0, #4294967295
   221f2:	f04f 31ff 	mov.w	r1, #4294967295
   221f6:	f7ff f871 	bl	212dc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   221fa:	b140      	cbz	r0, 2220e <mpsl_low_prio_work_handler+0x22>
   221fc:	4907      	ldr	r1, [pc, #28]	; (2221c <mpsl_low_prio_work_handler+0x30>)
   221fe:	4808      	ldr	r0, [pc, #32]	; (22220 <mpsl_low_prio_work_handler+0x34>)
   22200:	2247      	movs	r2, #71	; 0x47
   22202:	f007 ff22 	bl	2a04a <assert_print>
   22206:	4805      	ldr	r0, [pc, #20]	; (2221c <mpsl_low_prio_work_handler+0x30>)
   22208:	2147      	movs	r1, #71	; 0x47
   2220a:	f007 ff17 	bl	2a03c <assert_post_action>
	mpsl_low_priority_process();
   2220e:	f7ee fdc6 	bl	10d9e <mpsl_low_priority_process>
}
   22212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   22216:	f7ff b869 	b.w	212ec <multithreading_lock_release>
   2221a:	bf00      	nop
   2221c:	00032e1f 	.word	0x00032e1f
   22220:	0002f2b5 	.word	0x0002f2b5

00022224 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   22224:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   22226:	4d0d      	ldr	r5, [pc, #52]	; (2225c <mpsl_low_prio_init+0x38>)
   22228:	490d      	ldr	r1, [pc, #52]	; (22260 <mpsl_low_prio_init+0x3c>)
   2222a:	2400      	movs	r4, #0
   2222c:	9400      	str	r4, [sp, #0]
   2222e:	f06f 0309 	mvn.w	r3, #9
   22232:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22236:	4628      	mov	r0, r5
   22238:	f002 fc7e 	bl	24b38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   2223c:	4909      	ldr	r1, [pc, #36]	; (22264 <mpsl_low_prio_init+0x40>)
   2223e:	4628      	mov	r0, r5
   22240:	f00b fd6c 	bl	2dd1c <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   22244:	4908      	ldr	r1, [pc, #32]	; (22268 <mpsl_low_prio_init+0x44>)
   22246:	4809      	ldr	r0, [pc, #36]	; (2226c <mpsl_low_prio_init+0x48>)
   22248:	f002 fbc0 	bl	249cc <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   2224c:	4622      	mov	r2, r4
   2224e:	2104      	movs	r1, #4
   22250:	2019      	movs	r0, #25
   22252:	f7f2 fcfb 	bl	14c4c <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   22256:	4620      	mov	r0, r4
   22258:	b003      	add	sp, #12
   2225a:	bd30      	pop	{r4, r5, pc}
   2225c:	20002740 	.word	0x20002740
   22260:	20008140 	.word	0x20008140
   22264:	00032e4c 	.word	0x00032e4c
   22268:	000221ed 	.word	0x000221ed
   2226c:	200034e8 	.word	0x200034e8

00022270 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22270:	4b01      	ldr	r3, [pc, #4]	; (22278 <mpsl_hfclk_callback+0x8>)
   22272:	2000      	movs	r0, #0
   22274:	681b      	ldr	r3, [r3, #0]
   22276:	4718      	bx	r3
   22278:	200034f8 	.word	0x200034f8

0002227c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2227c:	b510      	push	{r4, lr}
	switch (domain) {
   2227e:	b130      	cbz	r0, 2228e <nrfx_clock_start+0x12>
   22280:	2801      	cmp	r0, #1
   22282:	d10a      	bne.n	2229a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   22284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   22288:	4808      	ldr	r0, [pc, #32]	; (222ac <nrfx_clock_start+0x30>)
   2228a:	f7ea b981 	b.w	c590 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2228e:	4b08      	ldr	r3, [pc, #32]	; (222b0 <nrfx_clock_start+0x34>)
}
   22290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22294:	681b      	ldr	r3, [r3, #0]
   22296:	2001      	movs	r0, #1
   22298:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   2229a:	4906      	ldr	r1, [pc, #24]	; (222b4 <nrfx_clock_start+0x38>)
   2229c:	4806      	ldr	r0, [pc, #24]	; (222b8 <nrfx_clock_start+0x3c>)
   2229e:	221c      	movs	r2, #28
   222a0:	f007 fed3 	bl	2a04a <assert_print>
   222a4:	4803      	ldr	r0, [pc, #12]	; (222b4 <nrfx_clock_start+0x38>)
   222a6:	211c      	movs	r1, #28
   222a8:	f007 fec8 	bl	2a03c <assert_post_action>
   222ac:	00022271 	.word	0x00022271
   222b0:	200034f8 	.word	0x200034f8
   222b4:	00032e60 	.word	0x00032e60
   222b8:	0002f2b5 	.word	0x0002f2b5

000222bc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   222bc:	b508      	push	{r3, lr}
	switch (domain) {
   222be:	b170      	cbz	r0, 222de <nrfx_clock_stop+0x22>
   222c0:	2801      	cmp	r0, #1
   222c2:	d103      	bne.n	222cc <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   222c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   222c8:	f7ea b954 	b.w	c574 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   222cc:	4904      	ldr	r1, [pc, #16]	; (222e0 <nrfx_clock_stop+0x24>)
   222ce:	4805      	ldr	r0, [pc, #20]	; (222e4 <nrfx_clock_stop+0x28>)
   222d0:	222a      	movs	r2, #42	; 0x2a
   222d2:	f007 feba 	bl	2a04a <assert_print>
   222d6:	4802      	ldr	r0, [pc, #8]	; (222e0 <nrfx_clock_stop+0x24>)
   222d8:	212a      	movs	r1, #42	; 0x2a
   222da:	f007 feaf 	bl	2a03c <assert_post_action>
}
   222de:	bd08      	pop	{r3, pc}
   222e0:	00032e60 	.word	0x00032e60
   222e4:	0002f2b5 	.word	0x0002f2b5

000222e8 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   222e8:	4b01      	ldr	r3, [pc, #4]	; (222f0 <nrfx_clock_init+0x8>)
   222ea:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   222ec:	4801      	ldr	r0, [pc, #4]	; (222f4 <nrfx_clock_init+0xc>)
   222ee:	4770      	bx	lr
   222f0:	200034f8 	.word	0x200034f8
   222f4:	0bad0000 	.word	0x0bad0000

000222f8 <timeslot_callback>:
		      "mpsl_timeslot_request failed: %d", ret);
}

static mpsl_timeslot_signal_return_param_t *
timeslot_callback(mpsl_timeslot_session_id_t session_id, uint32_t signal)
{
   222f8:	b510      	push	{r4, lr}
	int rc;
	__ASSERT_NO_MSG(session_id == _context.session_id);
   222fa:	4c28      	ldr	r4, [pc, #160]	; (2239c <timeslot_callback+0xa4>)
   222fc:	7e23      	ldrb	r3, [r4, #24]
   222fe:	4283      	cmp	r3, r0
   22300:	d008      	beq.n	22314 <timeslot_callback+0x1c>
   22302:	4927      	ldr	r1, [pc, #156]	; (223a0 <timeslot_callback+0xa8>)
   22304:	4827      	ldr	r0, [pc, #156]	; (223a4 <timeslot_callback+0xac>)
   22306:	2250      	movs	r2, #80	; 0x50
   22308:	f007 fe9f 	bl	2a04a <assert_print>
   2230c:	2150      	movs	r1, #80	; 0x50
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2230e:	4824      	ldr	r0, [pc, #144]	; (223a0 <timeslot_callback+0xa8>)
   22310:	f007 fe94 	bl	2a03c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22314:	f3bf 8f5b 	dmb	ish
   22318:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2231a:	f3bf 8f5b 	dmb	ish

	if (atomic_get(&_context.timeout_occured)) {
   2231e:	bb13      	cbnz	r3, 22366 <timeslot_callback+0x6e>
		return NULL;
	}

	switch (signal) {
   22320:	2909      	cmp	r1, #9
   22322:	d834      	bhi.n	2238e <timeslot_callback+0x96>
   22324:	e8df f001 	tbb	[pc, r1]
   22328:	33333305 	.word	0x33333305
   2232c:	1c212133 	.word	0x1c212133
   22330:	1f33      	.short	0x1f33
	case MPSL_TIMESLOT_SIGNAL_START:
		rc = _context.op_desc->handler(_context.op_desc->context);
   22332:	6a23      	ldr	r3, [r4, #32]
   22334:	e9d3 2000 	ldrd	r2, r0, [r3]
   22338:	4790      	blx	r2
		if (rc != FLASH_OP_ONGOING) {
   2233a:	2801      	cmp	r0, #1
   2233c:	d005      	beq.n	2234a <timeslot_callback+0x52>
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
			_context.return_param.callback_action =
   2233e:	2302      	movs	r3, #2
			_context.status = (rc == FLASH_OP_DONE) ? 0 : rc;
   22340:	63e0      	str	r0, [r4, #60]	; 0x3c
			_context.return_param.callback_action =
   22342:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	default:
		__ASSERT(false, "unexpected signal: %u", signal);
		return NULL;
	}

	return &_context.return_param;
   22346:	4818      	ldr	r0, [pc, #96]	; (223a8 <timeslot_callback+0xb0>)
   22348:	e00e      	b.n	22368 <timeslot_callback+0x70>
			_context.timeslot_request.params.earliest.timeout_us =
   2234a:	f247 5330 	movw	r3, #30000	; 0x7530
   2234e:	6323      	str	r3, [r4, #48]	; 0x30
			_context.return_param.callback_action =
   22350:	2303      	movs	r3, #3
   22352:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			_context.return_param.params.request.p_next =
   22356:	4b15      	ldr	r3, [pc, #84]	; (223ac <timeslot_callback+0xb4>)
			_context.timeslot_request.params.earliest.priority =
   22358:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
			_context.return_param.params.request.p_next =
   2235c:	63a3      	str	r3, [r4, #56]	; 0x38
   2235e:	e7f2      	b.n	22346 <timeslot_callback+0x4e>
	z_impl_k_sem_give(sem);
   22360:	480e      	ldr	r0, [pc, #56]	; (2239c <timeslot_callback+0xa4>)
   22362:	f002 f8a3 	bl	244ac <z_impl_k_sem_give>
		return NULL;
   22366:	2000      	movs	r0, #0
}
   22368:	bd10      	pop	{r4, pc}
	_context.timeslot_request.params.earliest.priority =
   2236a:	2300      	movs	r3, #0
   2236c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22370:	490e      	ldr	r1, [pc, #56]	; (223ac <timeslot_callback+0xb4>)
	_context.timeslot_request.params.earliest.timeout_us =
   22372:	4b0f      	ldr	r3, [pc, #60]	; (223b0 <timeslot_callback+0xb8>)
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22374:	7e20      	ldrb	r0, [r4, #24]
	_context.timeslot_request.params.earliest.timeout_us =
   22376:	6323      	str	r3, [r4, #48]	; 0x30
	int32_t ret = mpsl_timeslot_request(_context.session_id,
   22378:	f7ee fbc5 	bl	10b06 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   2237c:	2800      	cmp	r0, #0
   2237e:	d0f2      	beq.n	22366 <timeslot_callback+0x6e>
   22380:	4907      	ldr	r1, [pc, #28]	; (223a0 <timeslot_callback+0xa8>)
   22382:	4808      	ldr	r0, [pc, #32]	; (223a4 <timeslot_callback+0xac>)
   22384:	2248      	movs	r2, #72	; 0x48
   22386:	f007 fe60 	bl	2a04a <assert_print>
   2238a:	2148      	movs	r1, #72	; 0x48
   2238c:	e7bf      	b.n	2230e <timeslot_callback+0x16>
		__ASSERT(false, "unexpected signal: %u", signal);
   2238e:	4904      	ldr	r1, [pc, #16]	; (223a0 <timeslot_callback+0xa8>)
   22390:	4804      	ldr	r0, [pc, #16]	; (223a4 <timeslot_callback+0xac>)
   22392:	227c      	movs	r2, #124	; 0x7c
   22394:	f007 fe59 	bl	2a04a <assert_print>
   22398:	217c      	movs	r1, #124	; 0x7c
   2239a:	e7b8      	b.n	2230e <timeslot_callback+0x16>
   2239c:	200034fc 	.word	0x200034fc
   223a0:	00032e9d 	.word	0x00032e9d
   223a4:	0002f2b5 	.word	0x0002f2b5
   223a8:	20003530 	.word	0x20003530
   223ac:	20003520 	.word	0x20003520
   223b0:	0f423fff 	.word	0x0f423fff

000223b4 <nrf_flash_sync_init>:
	return z_impl_k_sem_init(sem, initial_count, limit);
   223b4:	4802      	ldr	r0, [pc, #8]	; (223c0 <nrf_flash_sync_init+0xc>)
   223b6:	2201      	movs	r2, #1
   223b8:	2100      	movs	r1, #0
   223ba:	f00b bcfa 	b.w	2ddb2 <z_impl_k_sem_init>
   223be:	bf00      	nop
   223c0:	200034fc 	.word	0x200034fc

000223c4 <nrf_flash_sync_set_context>:
}

void nrf_flash_sync_set_context(uint32_t duration)
{
	LOG_DBG("duration: %u", duration);
	_context.request_length_us = duration;
   223c4:	4b01      	ldr	r3, [pc, #4]	; (223cc <nrf_flash_sync_set_context+0x8>)
   223c6:	61d8      	str	r0, [r3, #28]
}
   223c8:	4770      	bx	lr
   223ca:	bf00      	nop
   223cc:	200034fc 	.word	0x200034fc

000223d0 <nrf_flash_sync_exe>:
{
	return mpsl_is_initialized();
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
   223d0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("");

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   223d2:	f04f 31ff 	mov.w	r1, #4294967295
{
   223d6:	4606      	mov	r6, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   223d8:	f04f 30ff 	mov.w	r0, #4294967295
   223dc:	f7fe ff7e 	bl	212dc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   223e0:	4605      	mov	r5, r0
   223e2:	b140      	cbz	r0, 223f6 <nrf_flash_sync_exe+0x26>
   223e4:	4947      	ldr	r1, [pc, #284]	; (22504 <nrf_flash_sync_exe+0x134>)
   223e6:	4848      	ldr	r0, [pc, #288]	; (22508 <nrf_flash_sync_exe+0x138>)
   223e8:	2299      	movs	r2, #153	; 0x99
   223ea:	f007 fe2e 	bl	2a04a <assert_print>
   223ee:	2199      	movs	r1, #153	; 0x99

	_context.op_desc = op_desc;
	_context.status = -ETIMEDOUT;
	atomic_clear(&_context.timeout_occured);

	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   223f0:	4844      	ldr	r0, [pc, #272]	; (22504 <nrf_flash_sync_exe+0x134>)
   223f2:	f007 fe23 	bl	2a03c <assert_post_action>
	int32_t ret = mpsl_timeslot_session_open(timeslot_callback,
   223f6:	4945      	ldr	r1, [pc, #276]	; (2250c <nrf_flash_sync_exe+0x13c>)
   223f8:	4845      	ldr	r0, [pc, #276]	; (22510 <nrf_flash_sync_exe+0x140>)
   223fa:	f7e6 fe7d 	bl	90f8 <mpsl_timeslot_session_open>
   223fe:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   22400:	f7fe ff74 	bl	212ec <multithreading_lock_release>
	if (ret < 0) {
   22404:	2c00      	cmp	r4, #0
   22406:	da07      	bge.n	22418 <nrf_flash_sync_exe+0x48>
		LOG_ERR("mpsl_timeslot_session_open failed: %d", ret);
   22408:	4842      	ldr	r0, [pc, #264]	; (22514 <nrf_flash_sync_exe+0x144>)
   2240a:	4622      	mov	r2, r4
   2240c:	2145      	movs	r1, #69	; 0x45
   2240e:	f007 fe2a 	bl	2a066 <z_log_minimal_printk>
		return -ENOMEM;
   22412:	f06f 000b 	mvn.w	r0, #11
	if (atomic_get(&_context.timeout_occured)) {
		k_sem_reset(&_context.timeout_sem);
	}

	return _context.status;
}
   22416:	bd70      	pop	{r4, r5, r6, pc}
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22418:	4c3f      	ldr	r4, [pc, #252]	; (22518 <nrf_flash_sync_exe+0x148>)
	req->params.earliest.hfclk = MPSL_TIMESLOT_HFCLK_CFG_NO_GUARANTEE;
   2241a:	f240 1301 	movw	r3, #257	; 0x101
   2241e:	8523      	strh	r3, [r4, #40]	; 0x28
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   22420:	69e3      	ldr	r3, [r4, #28]
	_context.op_desc = op_desc;
   22422:	6226      	str	r6, [r4, #32]
		_context.request_length_us + TIMESLOT_LENGTH_SLACK_US;
   22424:	3364      	adds	r3, #100	; 0x64
	req->params.earliest.length_us =
   22426:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->params.earliest.timeout_us = TIMESLOT_TIMEOUT_PRIORITY_NORMAL_US;
   22428:	f247 5330 	movw	r3, #30000	; 0x7530
   2242c:	6323      	str	r3, [r4, #48]	; 0x30
	_context.status = -ETIMEDOUT;
   2242e:	f06f 0373 	mvn.w	r3, #115	; 0x73
	req->request_type = MPSL_TIMESLOT_REQ_TYPE_EARLIEST;
   22432:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	_context.status = -ETIMEDOUT;
   22436:	63e3      	str	r3, [r4, #60]	; 0x3c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22438:	f104 0640 	add.w	r6, r4, #64	; 0x40
   2243c:	f3bf 8f5b 	dmb	ish
   22440:	e856 3f00 	ldrex	r3, [r6]
   22444:	e846 5200 	strex	r2, r5, [r6]
   22448:	2a00      	cmp	r2, #0
   2244a:	d1f9      	bne.n	22440 <nrf_flash_sync_exe+0x70>
   2244c:	f3bf 8f5b 	dmb	ish
	__ASSERT_NO_MSG(k_sem_count_get(&_context.timeout_sem) == 0);
   22450:	68a3      	ldr	r3, [r4, #8]
   22452:	b133      	cbz	r3, 22462 <nrf_flash_sync_exe+0x92>
   22454:	492b      	ldr	r1, [pc, #172]	; (22504 <nrf_flash_sync_exe+0x134>)
   22456:	482c      	ldr	r0, [pc, #176]	; (22508 <nrf_flash_sync_exe+0x138>)
   22458:	22af      	movs	r2, #175	; 0xaf
   2245a:	f007 fdf6 	bl	2a04a <assert_print>
   2245e:	21af      	movs	r1, #175	; 0xaf
   22460:	e7c6      	b.n	223f0 <nrf_flash_sync_exe+0x20>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22462:	f04f 30ff 	mov.w	r0, #4294967295
   22466:	f04f 31ff 	mov.w	r1, #4294967295
   2246a:	f7fe ff37 	bl	212dc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   2246e:	b130      	cbz	r0, 2247e <nrf_flash_sync_exe+0xae>
   22470:	4924      	ldr	r1, [pc, #144]	; (22504 <nrf_flash_sync_exe+0x134>)
   22472:	4825      	ldr	r0, [pc, #148]	; (22508 <nrf_flash_sync_exe+0x138>)
   22474:	22b2      	movs	r2, #178	; 0xb2
   22476:	f007 fde8 	bl	2a04a <assert_print>
   2247a:	21b2      	movs	r1, #178	; 0xb2
   2247c:	e7b8      	b.n	223f0 <nrf_flash_sync_exe+0x20>
	ret = mpsl_timeslot_request(_context.session_id, req);
   2247e:	7e20      	ldrb	r0, [r4, #24]
   22480:	f104 0124 	add.w	r1, r4, #36	; 0x24
   22484:	f7ee fb3f 	bl	10b06 <mpsl_timeslot_request>
	__ASSERT_EVAL((void)ret, (void)ret, ret == 0,
   22488:	b130      	cbz	r0, 22498 <nrf_flash_sync_exe+0xc8>
   2248a:	491e      	ldr	r1, [pc, #120]	; (22504 <nrf_flash_sync_exe+0x134>)
   2248c:	481e      	ldr	r0, [pc, #120]	; (22508 <nrf_flash_sync_exe+0x138>)
   2248e:	22b4      	movs	r2, #180	; 0xb4
   22490:	f007 fddb 	bl	2a04a <assert_print>
   22494:	21b4      	movs	r1, #180	; 0xb4
   22496:	e7ab      	b.n	223f0 <nrf_flash_sync_exe+0x20>
	MULTITHREADING_LOCK_RELEASE();
   22498:	f7fe ff28 	bl	212ec <multithreading_lock_release>
	return z_impl_k_sem_take(sem, timeout);
   2249c:	4a1f      	ldr	r2, [pc, #124]	; (2251c <nrf_flash_sync_exe+0x14c>)
   2249e:	2300      	movs	r3, #0
   224a0:	4620      	mov	r0, r4
   224a2:	f002 f83d 	bl	24520 <z_impl_k_sem_take>
	if (k_sem_take(&_context.timeout_sem, K_MSEC(FLASH_TIMEOUT_MS)) < 0) {
   224a6:	2800      	cmp	r0, #0
   224a8:	da0e      	bge.n	224c8 <nrf_flash_sync_exe+0xf8>
		LOG_ERR("timeout");
   224aa:	481d      	ldr	r0, [pc, #116]	; (22520 <nrf_flash_sync_exe+0x150>)
   224ac:	2145      	movs	r1, #69	; 0x45
   224ae:	f007 fdda 	bl	2a066 <z_log_minimal_printk>
   224b2:	f3bf 8f5b 	dmb	ish
   224b6:	2301      	movs	r3, #1
   224b8:	e856 2f00 	ldrex	r2, [r6]
   224bc:	e846 3100 	strex	r1, r3, [r6]
   224c0:	2900      	cmp	r1, #0
   224c2:	d1f9      	bne.n	224b8 <nrf_flash_sync_exe+0xe8>
   224c4:	f3bf 8f5b 	dmb	ish
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   224c8:	f04f 30ff 	mov.w	r0, #4294967295
   224cc:	f04f 31ff 	mov.w	r1, #4294967295
   224d0:	f7fe ff04 	bl	212dc <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   224d4:	b130      	cbz	r0, 224e4 <nrf_flash_sync_exe+0x114>
   224d6:	490b      	ldr	r1, [pc, #44]	; (22504 <nrf_flash_sync_exe+0x134>)
   224d8:	480b      	ldr	r0, [pc, #44]	; (22508 <nrf_flash_sync_exe+0x138>)
   224da:	22bf      	movs	r2, #191	; 0xbf
   224dc:	f007 fdb5 	bl	2a04a <assert_print>
   224e0:	21bf      	movs	r1, #191	; 0xbf
   224e2:	e785      	b.n	223f0 <nrf_flash_sync_exe+0x20>
	mpsl_timeslot_session_close(_context.session_id);
   224e4:	7e20      	ldrb	r0, [r4, #24]
   224e6:	f7ee fb49 	bl	10b7c <mpsl_timeslot_session_close>
	MULTITHREADING_LOCK_RELEASE();
   224ea:	f7fe feff 	bl	212ec <multithreading_lock_release>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   224ee:	f3bf 8f5b 	dmb	ish
   224f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   224f4:	f3bf 8f5b 	dmb	ish
	if (atomic_get(&_context.timeout_occured)) {
   224f8:	b113      	cbz	r3, 22500 <nrf_flash_sync_exe+0x130>
	z_impl_k_sem_reset(sem);
   224fa:	4807      	ldr	r0, [pc, #28]	; (22518 <nrf_flash_sync_exe+0x148>)
   224fc:	f002 f870 	bl	245e0 <z_impl_k_sem_reset>
	return _context.status;
   22500:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   22502:	e788      	b.n	22416 <nrf_flash_sync_exe+0x46>
   22504:	00032e9d 	.word	0x00032e9d
   22508:	0002f2b5 	.word	0x0002f2b5
   2250c:	20003514 	.word	0x20003514
   22510:	000222f9 	.word	0x000222f9
   22514:	00032ed7 	.word	0x00032ed7
   22518:	200034fc 	.word	0x200034fc
   2251c:	000b7b44 	.word	0x000b7b44
   22520:	00032f02 	.word	0x00032f02

00022524 <nrf_flash_sync_check_time_limit>:
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_timer_task_trigger(NRF_TIMER_Type * p_reg,
                                              nrf_timer_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22524:	4b07      	ldr	r3, [pc, #28]	; (22544 <nrf_flash_sync_check_time_limit+0x20>)
   22526:	2201      	movs	r2, #1
   22528:	641a      	str	r2, [r3, #64]	; 0x40
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
   2252a:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
	uint32_t now_us = get_timeslot_time_us();
	uint32_t time_per_iteration_us = now_us / iteration;
   2252e:	fbb3 f0f0 	udiv	r0, r3, r0
	return now_us + time_per_iteration_us >= _context.request_length_us;
   22532:	4418      	add	r0, r3
   22534:	4b04      	ldr	r3, [pc, #16]	; (22548 <nrf_flash_sync_check_time_limit+0x24>)
   22536:	69db      	ldr	r3, [r3, #28]
}
   22538:	4298      	cmp	r0, r3
   2253a:	bf34      	ite	cc
   2253c:	2000      	movcc	r0, #0
   2253e:	2001      	movcs	r0, #1
   22540:	4770      	bx	lr
   22542:	bf00      	nop
   22544:	40008000 	.word	0x40008000
   22548:	200034fc 	.word	0x200034fc

0002254c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2254c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22550:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22554:	2a08      	cmp	r2, #8
   22556:	d106      	bne.n	22566 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22558:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   2255c:	2b05      	cmp	r3, #5
   2255e:	d802      	bhi.n	22566 <nrf52_errata_103+0x1a>
   22560:	4a02      	ldr	r2, [pc, #8]	; (2256c <nrf52_errata_103+0x20>)
   22562:	5cd0      	ldrb	r0, [r2, r3]
   22564:	4770      	bx	lr
                        return false;
   22566:	2000      	movs	r0, #0
}
   22568:	4770      	bx	lr
   2256a:	bf00      	nop
   2256c:	00032f25 	.word	0x00032f25

00022570 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22570:	4a02      	ldr	r2, [pc, #8]	; (2257c <nvmc_wait+0xc>)
   22572:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   22576:	2b00      	cmp	r3, #0
   22578:	d0fb      	beq.n	22572 <nvmc_wait+0x2>
}
   2257a:	4770      	bx	lr
   2257c:	4001e000 	.word	0x4001e000

00022580 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   22580:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22586:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2258a:	2a08      	cmp	r2, #8
   2258c:	d14e      	bne.n	2262c <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   2258e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22592:	2100      	movs	r1, #0
   22594:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   22598:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2259c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   225a0:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   225a4:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   225a8:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   225ac:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   225b0:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   225b4:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   225b8:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   225bc:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   225c0:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   225c4:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   225c8:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   225cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   225d0:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   225d4:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   225d8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   225dc:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   225e0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   225e4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   225e8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   225ec:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   225f0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   225f4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   225f8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   225fc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   22600:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22604:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   22608:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   2260c:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   22610:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22614:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   22618:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   2261c:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   22620:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22624:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   22628:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   2262c:	f7ff ff8e 	bl	2254c <nrf52_errata_103>
   22630:	b118      	cbz	r0, 2263a <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   22632:	4b3b      	ldr	r3, [pc, #236]	; (22720 <SystemInit+0x1a0>)
   22634:	4a3b      	ldr	r2, [pc, #236]	; (22724 <SystemInit+0x1a4>)
   22636:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   2263a:	f7ff ff87 	bl	2254c <nrf52_errata_103>
   2263e:	b118      	cbz	r0, 22648 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   22640:	4b39      	ldr	r3, [pc, #228]	; (22728 <SystemInit+0x1a8>)
   22642:	22fb      	movs	r2, #251	; 0xfb
   22644:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   22648:	f7ff ff80 	bl	2254c <nrf52_errata_103>
   2264c:	b170      	cbz	r0, 2266c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   2264e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   22652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22656:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   2265a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2265e:	f022 020f 	bic.w	r2, r2, #15
   22662:	f003 030f 	and.w	r3, r3, #15
   22666:	4313      	orrs	r3, r2
   22668:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   2266c:	f7ff ff6e 	bl	2254c <nrf52_errata_103>
   22670:	b120      	cbz	r0, 2267c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   22672:	4b2e      	ldr	r3, [pc, #184]	; (2272c <SystemInit+0x1ac>)
   22674:	f44f 7200 	mov.w	r2, #512	; 0x200
   22678:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2267c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   22680:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   22684:	2b08      	cmp	r3, #8
   22686:	d11a      	bne.n	226be <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   22688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2268c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   22690:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   22692:	bf44      	itt	mi
   22694:	f06f 0201 	mvnmi.w	r2, #1
   22698:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2269c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   226a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
   226a4:	2b05      	cmp	r3, #5
   226a6:	d802      	bhi.n	226ae <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   226a8:	4a21      	ldr	r2, [pc, #132]	; (22730 <SystemInit+0x1b0>)
   226aa:	5cd3      	ldrb	r3, [r2, r3]
   226ac:	b13b      	cbz	r3, 226be <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   226ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   226b2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   226b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   226ba:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   226be:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   226c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   226c6:	2a00      	cmp	r2, #0
   226c8:	db03      	blt.n	226d2 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   226ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   226ce:	2b00      	cmp	r3, #0
   226d0:	da22      	bge.n	22718 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   226d2:	4918      	ldr	r1, [pc, #96]	; (22734 <SystemInit+0x1b4>)
   226d4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   226d6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   226da:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   226de:	2412      	movs	r4, #18
    nvmc_wait();
   226e0:	f7ff ff46 	bl	22570 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   226e4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   226e8:	f7ff ff42 	bl	22570 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   226ec:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   226f0:	f7ff ff3e 	bl	22570 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   226f4:	2300      	movs	r3, #0
   226f6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   226fa:	f7ff ff39 	bl	22570 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   226fe:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22702:	490d      	ldr	r1, [pc, #52]	; (22738 <SystemInit+0x1b8>)
   22704:	4b0d      	ldr	r3, [pc, #52]	; (2273c <SystemInit+0x1bc>)
   22706:	68ca      	ldr	r2, [r1, #12]
   22708:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2270c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2270e:	60cb      	str	r3, [r1, #12]
   22710:	f3bf 8f4f 	dsb	sy
    __NOP();
   22714:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22716:	e7fd      	b.n	22714 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   22718:	4b09      	ldr	r3, [pc, #36]	; (22740 <SystemInit+0x1c0>)
   2271a:	4a0a      	ldr	r2, [pc, #40]	; (22744 <SystemInit+0x1c4>)
   2271c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   2271e:	bd10      	pop	{r4, pc}
   22720:	40005000 	.word	0x40005000
   22724:	00038148 	.word	0x00038148
   22728:	4000f000 	.word	0x4000f000
   2272c:	40029000 	.word	0x40029000
   22730:	00032f1f 	.word	0x00032f1f
   22734:	4001e000 	.word	0x4001e000
   22738:	e000ed00 	.word	0xe000ed00
   2273c:	05fa0004 	.word	0x05fa0004
   22740:	20000728 	.word	0x20000728
   22744:	03d09000 	.word	0x03d09000

00022748 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   22748:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2274a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   2274c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2274e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   22752:	fab2 f382 	clz	r3, r2
   22756:	f1c3 031f 	rsb	r3, r3, #31
   2275a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   2275c:	fa05 f403 	lsl.w	r4, r5, r3
   22760:	ea22 0404 	bic.w	r4, r2, r4
   22764:	e850 6f00 	ldrex	r6, [r0]
   22768:	4296      	cmp	r6, r2
   2276a:	d104      	bne.n	22776 <nrfx_flag32_alloc+0x2e>
   2276c:	e840 4c00 	strex	ip, r4, [r0]
   22770:	f1bc 0f00 	cmp.w	ip, #0
   22774:	d1f6      	bne.n	22764 <nrfx_flag32_alloc+0x1c>
   22776:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2277a:	d1e7      	bne.n	2274c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   2277c:	4801      	ldr	r0, [pc, #4]	; (22784 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   2277e:	700b      	strb	r3, [r1, #0]
}
   22780:	bd70      	pop	{r4, r5, r6, pc}
   22782:	bf00      	nop
   22784:	0bad0000 	.word	0x0bad0000

00022788 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   22788:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2278a:	6803      	ldr	r3, [r0, #0]
   2278c:	40cb      	lsrs	r3, r1
   2278e:	07db      	lsls	r3, r3, #31
   22790:	d414      	bmi.n	227bc <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   22792:	2301      	movs	r3, #1
   22794:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   22796:	6802      	ldr	r2, [r0, #0]
   22798:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2279c:	ea43 0102 	orr.w	r1, r3, r2
   227a0:	e850 4f00 	ldrex	r4, [r0]
   227a4:	4294      	cmp	r4, r2
   227a6:	d104      	bne.n	227b2 <nrfx_flag32_free+0x2a>
   227a8:	e840 1c00 	strex	ip, r1, [r0]
   227ac:	f1bc 0f00 	cmp.w	ip, #0
   227b0:	d1f6      	bne.n	227a0 <nrfx_flag32_free+0x18>
   227b2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   227b6:	d1ee      	bne.n	22796 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   227b8:	4801      	ldr	r0, [pc, #4]	; (227c0 <nrfx_flag32_free+0x38>)
}
   227ba:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   227bc:	4801      	ldr	r0, [pc, #4]	; (227c4 <nrfx_flag32_free+0x3c>)
   227be:	e7fc      	b.n	227ba <nrfx_flag32_free+0x32>
   227c0:	0bad0000 	.word	0x0bad0000
   227c4:	0bad0004 	.word	0x0bad0004

000227c8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   227c8:	4b03      	ldr	r3, [pc, #12]	; (227d8 <pin_in_use_by_te+0x10>)
   227ca:	3008      	adds	r0, #8
   227cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   227d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   227d4:	4770      	bx	lr
   227d6:	bf00      	nop
   227d8:	2000072c 	.word	0x2000072c

000227dc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   227dc:	4b04      	ldr	r3, [pc, #16]	; (227f0 <pin_has_trigger+0x14>)
   227de:	3008      	adds	r0, #8
   227e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   227e4:	f010 001c 	ands.w	r0, r0, #28
   227e8:	bf18      	it	ne
   227ea:	2001      	movne	r0, #1
   227ec:	4770      	bx	lr
   227ee:	bf00      	nop
   227f0:	2000072c 	.word	0x2000072c

000227f4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   227f4:	4b03      	ldr	r3, [pc, #12]	; (22804 <pin_is_output+0x10>)
   227f6:	3008      	adds	r0, #8
   227f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   227fc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   22800:	4770      	bx	lr
   22802:	bf00      	nop
   22804:	2000072c 	.word	0x2000072c

00022808 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22808:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2280a:	f100 0308 	add.w	r3, r0, #8
   2280e:	4c0c      	ldr	r4, [pc, #48]	; (22840 <call_handler+0x38>)
   22810:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   22814:	05da      	lsls	r2, r3, #23
{
   22816:	4605      	mov	r5, r0
   22818:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2281a:	d507      	bpl.n	2282c <call_handler+0x24>
   2281c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22820:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22824:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   22828:	6852      	ldr	r2, [r2, #4]
   2282a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   2282c:	68a3      	ldr	r3, [r4, #8]
   2282e:	b12b      	cbz	r3, 2283c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22830:	68e2      	ldr	r2, [r4, #12]
   22832:	4631      	mov	r1, r6
   22834:	4628      	mov	r0, r5
    }
}
   22836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2283a:	4718      	bx	r3
}
   2283c:	bd70      	pop	{r4, r5, r6, pc}
   2283e:	bf00      	nop
   22840:	2000072c 	.word	0x2000072c

00022844 <release_handler>:
{
   22844:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22846:	4a18      	ldr	r2, [pc, #96]	; (228a8 <release_handler+0x64>)
   22848:	3008      	adds	r0, #8
   2284a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   2284e:	05d9      	lsls	r1, r3, #23
   22850:	d51d      	bpl.n	2288e <release_handler+0x4a>
   22852:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22856:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2285a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2285e:	f102 040e 	add.w	r4, r2, #14
   22862:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22864:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   22868:	f413 7f80 	tst.w	r3, #256	; 0x100
   2286c:	d003      	beq.n	22876 <release_handler+0x32>
   2286e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   22872:	4299      	cmp	r1, r3
   22874:	d00b      	beq.n	2288e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22876:	3001      	adds	r0, #1
   22878:	2830      	cmp	r0, #48	; 0x30
   2287a:	d1f3      	bne.n	22864 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   2287c:	2300      	movs	r3, #0
   2287e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22882:	480a      	ldr	r0, [pc, #40]	; (228ac <release_handler+0x68>)
   22884:	f7ff ff80 	bl	22788 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22888:	4b09      	ldr	r3, [pc, #36]	; (228b0 <release_handler+0x6c>)
   2288a:	4298      	cmp	r0, r3
   2288c:	d100      	bne.n	22890 <release_handler+0x4c>
}
   2288e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22890:	4908      	ldr	r1, [pc, #32]	; (228b4 <release_handler+0x70>)
   22892:	4809      	ldr	r0, [pc, #36]	; (228b8 <release_handler+0x74>)
   22894:	f44f 7299 	mov.w	r2, #306	; 0x132
   22898:	f007 fbd7 	bl	2a04a <assert_print>
   2289c:	4805      	ldr	r0, [pc, #20]	; (228b4 <release_handler+0x70>)
   2289e:	f44f 7199 	mov.w	r1, #306	; 0x132
   228a2:	f007 fbcb 	bl	2a03c <assert_post_action>
   228a6:	bf00      	nop
   228a8:	2000072c 	.word	0x2000072c
   228ac:	200007a0 	.word	0x200007a0
   228b0:	0bad0000 	.word	0x0bad0000
   228b4:	00032f2b 	.word	0x00032f2b
   228b8:	0002f2b5 	.word	0x0002f2b5

000228bc <pin_handler_trigger_uninit>:
{
   228bc:	b538      	push	{r3, r4, r5, lr}
   228be:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   228c0:	f7ff ff82 	bl	227c8 <pin_in_use_by_te>
   228c4:	4c09      	ldr	r4, [pc, #36]	; (228ec <pin_handler_trigger_uninit+0x30>)
   228c6:	f102 0508 	add.w	r5, r2, #8
   228ca:	b140      	cbz	r0, 228de <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   228cc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   228d0:	4907      	ldr	r1, [pc, #28]	; (228f0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   228d2:	0b5b      	lsrs	r3, r3, #13
   228d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   228d8:	2000      	movs	r0, #0
   228da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   228de:	4610      	mov	r0, r2
   228e0:	f7ff ffb0 	bl	22844 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   228e4:	2300      	movs	r3, #0
   228e6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   228ea:	bd38      	pop	{r3, r4, r5, pc}
   228ec:	2000072c 	.word	0x2000072c
   228f0:	40006000 	.word	0x40006000

000228f4 <nrf_gpio_pin_port_decode>:
{
   228f4:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   228f6:	6802      	ldr	r2, [r0, #0]
{
   228f8:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   228fa:	4610      	mov	r0, r2
   228fc:	f00b f912 	bl	2db24 <nrf_gpio_pin_present_check>
   22900:	b950      	cbnz	r0, 22918 <nrf_gpio_pin_port_decode+0x24>
   22902:	4910      	ldr	r1, [pc, #64]	; (22944 <nrf_gpio_pin_port_decode+0x50>)
   22904:	4810      	ldr	r0, [pc, #64]	; (22948 <nrf_gpio_pin_port_decode+0x54>)
   22906:	f240 2247 	movw	r2, #583	; 0x247
   2290a:	f007 fb9e 	bl	2a04a <assert_print>
   2290e:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   22912:	480c      	ldr	r0, [pc, #48]	; (22944 <nrf_gpio_pin_port_decode+0x50>)
   22914:	f007 fb92 	bl	2a03c <assert_post_action>
    *p_pin = pin_number & 0x1F;
   22918:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2291c:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   2291e:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22920:	d00a      	beq.n	22938 <nrf_gpio_pin_port_decode+0x44>
   22922:	2a01      	cmp	r2, #1
   22924:	d00b      	beq.n	2293e <nrf_gpio_pin_port_decode+0x4a>
            NRFX_ASSERT(0);
   22926:	4907      	ldr	r1, [pc, #28]	; (22944 <nrf_gpio_pin_port_decode+0x50>)
   22928:	4807      	ldr	r0, [pc, #28]	; (22948 <nrf_gpio_pin_port_decode+0x54>)
   2292a:	f44f 7213 	mov.w	r2, #588	; 0x24c
   2292e:	f007 fb8c 	bl	2a04a <assert_print>
   22932:	f44f 7113 	mov.w	r1, #588	; 0x24c
   22936:	e7ec      	b.n	22912 <nrf_gpio_pin_port_decode+0x1e>
        case 0: return NRF_P0;
   22938:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   2293c:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2293e:	4803      	ldr	r0, [pc, #12]	; (2294c <nrf_gpio_pin_port_decode+0x58>)
   22940:	e7fc      	b.n	2293c <nrf_gpio_pin_port_decode+0x48>
   22942:	bf00      	nop
   22944:	0003268c 	.word	0x0003268c
   22948:	0002f2b5 	.word	0x0002f2b5
   2294c:	50000300 	.word	0x50000300

00022950 <nrfx_gpiote_input_configure>:
{
   22950:	b5f0      	push	{r4, r5, r6, r7, lr}
   22952:	4604      	mov	r4, r0
   22954:	b085      	sub	sp, #20
   22956:	4617      	mov	r7, r2
   22958:	461d      	mov	r5, r3
    if (p_input_config)
   2295a:	b1d9      	cbz	r1, 22994 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   2295c:	f00b f8f3 	bl	2db46 <pin_is_task_output>
   22960:	bb00      	cbnz	r0, 229a4 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22962:	460b      	mov	r3, r1
   22964:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22968:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2296c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22970:	f10d 020f 	add.w	r2, sp, #15
   22974:	f10d 010e 	add.w	r1, sp, #14
   22978:	4620      	mov	r0, r4
   2297a:	f00b f8ef 	bl	2db5c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2297e:	4a44      	ldr	r2, [pc, #272]	; (22a90 <nrfx_gpiote_input_configure+0x140>)
   22980:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   22984:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22988:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2298c:	f043 0301 	orr.w	r3, r3, #1
   22990:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   22994:	b34f      	cbz	r7, 229ea <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   22996:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22998:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2299a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   2299c:	f7ff ff2a 	bl	227f4 <pin_is_output>
   229a0:	b110      	cbz	r0, 229a8 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   229a2:	b1ba      	cbz	r2, 229d4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   229a4:	483b      	ldr	r0, [pc, #236]	; (22a94 <nrfx_gpiote_input_configure+0x144>)
   229a6:	e022      	b.n	229ee <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   229a8:	4b39      	ldr	r3, [pc, #228]	; (22a90 <nrfx_gpiote_input_configure+0x140>)
   229aa:	f104 0c08 	add.w	ip, r4, #8
   229ae:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   229b2:	f021 0120 	bic.w	r1, r1, #32
   229b6:	04c9      	lsls	r1, r1, #19
   229b8:	0cc9      	lsrs	r1, r1, #19
   229ba:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   229be:	b14a      	cbz	r2, 229d4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   229c0:	2e03      	cmp	r6, #3
   229c2:	d8ef      	bhi.n	229a4 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   229c4:	687a      	ldr	r2, [r7, #4]
   229c6:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   229c8:	b99e      	cbnz	r6, 229f2 <nrfx_gpiote_input_configure+0xa2>
   229ca:	4b33      	ldr	r3, [pc, #204]	; (22a98 <nrfx_gpiote_input_configure+0x148>)
   229cc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   229d0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   229d4:	4a2e      	ldr	r2, [pc, #184]	; (22a90 <nrfx_gpiote_input_configure+0x140>)
   229d6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   229da:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   229de:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   229e2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   229e6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   229ea:	bb3d      	cbnz	r5, 22a3c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   229ec:	482b      	ldr	r0, [pc, #172]	; (22a9c <nrfx_gpiote_input_configure+0x14c>)
}
   229ee:	b005      	add	sp, #20
   229f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   229f2:	00ba      	lsls	r2, r7, #2
   229f4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   229f8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   229fc:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   22a00:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22a04:	f020 0003 	bic.w	r0, r0, #3
   22a08:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22a0c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   22a10:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   22a14:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   22a18:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22a1c:	0220      	lsls	r0, r4, #8
   22a1e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   22a22:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   22a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   22a2a:	ea40 000e 	orr.w	r0, r0, lr
   22a2e:	f041 0120 	orr.w	r1, r1, #32
   22a32:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   22a36:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   22a3a:	e7cb      	b.n	229d4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22a3c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   22a40:	4620      	mov	r0, r4
   22a42:	f7ff feff 	bl	22844 <release_handler>
    if (!handler)
   22a46:	2e00      	cmp	r6, #0
   22a48:	d0d0      	beq.n	229ec <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22a4a:	4d11      	ldr	r5, [pc, #68]	; (22a90 <nrfx_gpiote_input_configure+0x140>)
   22a4c:	e9d5 2300 	ldrd	r2, r3, [r5]
   22a50:	4296      	cmp	r6, r2
   22a52:	d101      	bne.n	22a58 <nrfx_gpiote_input_configure+0x108>
   22a54:	429f      	cmp	r7, r3
   22a56:	d018      	beq.n	22a8a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22a58:	4811      	ldr	r0, [pc, #68]	; (22aa0 <nrfx_gpiote_input_configure+0x150>)
   22a5a:	f10d 010f 	add.w	r1, sp, #15
   22a5e:	f7ff fe73 	bl	22748 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22a62:	4b0e      	ldr	r3, [pc, #56]	; (22a9c <nrfx_gpiote_input_configure+0x14c>)
   22a64:	4298      	cmp	r0, r3
   22a66:	d1c2      	bne.n	229ee <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   22a68:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   22a6c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22a70:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22a74:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   22a76:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22a78:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   22a7c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   22a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22a84:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   22a88:	e7b0      	b.n	229ec <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22a8a:	2200      	movs	r2, #0
   22a8c:	e7ee      	b.n	22a6c <nrfx_gpiote_input_configure+0x11c>
   22a8e:	bf00      	nop
   22a90:	2000072c 	.word	0x2000072c
   22a94:	0bad0004 	.word	0x0bad0004
   22a98:	40006000 	.word	0x40006000
   22a9c:	0bad0000 	.word	0x0bad0000
   22aa0:	200007a0 	.word	0x200007a0

00022aa4 <nrfx_gpiote_output_configure>:
{
   22aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22aa6:	4604      	mov	r4, r0
   22aa8:	b085      	sub	sp, #20
   22aaa:	4615      	mov	r5, r2
    if (p_config)
   22aac:	b321      	cbz	r1, 22af8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   22aae:	f7ff fea1 	bl	227f4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22ab2:	b920      	cbnz	r0, 22abe <nrfx_gpiote_output_configure+0x1a>
   22ab4:	4620      	mov	r0, r4
   22ab6:	f7ff fe87 	bl	227c8 <pin_in_use_by_te>
   22aba:	2800      	cmp	r0, #0
   22abc:	d15e      	bne.n	22b7c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22abe:	4620      	mov	r0, r4
   22ac0:	f7ff fe8c 	bl	227dc <pin_has_trigger>
   22ac4:	b110      	cbz	r0, 22acc <nrfx_gpiote_output_configure+0x28>
   22ac6:	784b      	ldrb	r3, [r1, #1]
   22ac8:	2b01      	cmp	r3, #1
   22aca:	d057      	beq.n	22b7c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22acc:	2301      	movs	r3, #1
   22ace:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   22ad2:	2300      	movs	r3, #0
   22ad4:	e9cd 1300 	strd	r1, r3, [sp]
   22ad8:	1c4a      	adds	r2, r1, #1
   22ada:	1c8b      	adds	r3, r1, #2
   22adc:	4620      	mov	r0, r4
   22ade:	f10d 010f 	add.w	r1, sp, #15
   22ae2:	f00b f83b 	bl	2db5c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22ae6:	4a26      	ldr	r2, [pc, #152]	; (22b80 <nrfx_gpiote_output_configure+0xdc>)
   22ae8:	f104 0108 	add.w	r1, r4, #8
   22aec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22af0:	f043 0303 	orr.w	r3, r3, #3
   22af4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   22af8:	b915      	cbnz	r5, 22b00 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   22afa:	4822      	ldr	r0, [pc, #136]	; (22b84 <nrfx_gpiote_output_configure+0xe0>)
}
   22afc:	b005      	add	sp, #20
   22afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   22b00:	4620      	mov	r0, r4
   22b02:	f7ff fe77 	bl	227f4 <pin_is_output>
        if (pin_is_input(pin))
   22b06:	b3c8      	cbz	r0, 22b7c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22b08:	4e1d      	ldr	r6, [pc, #116]	; (22b80 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   22b0a:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22b0e:	f104 0708 	add.w	r7, r4, #8
   22b12:	4661      	mov	r1, ip
   22b14:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   22b18:	0089      	lsls	r1, r1, #2
   22b1a:	f020 0020 	bic.w	r0, r0, #32
   22b1e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   22b22:	04c0      	lsls	r0, r0, #19
   22b24:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   22b28:	0cc0      	lsrs	r0, r0, #19
   22b2a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   22b2e:	2300      	movs	r3, #0
   22b30:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22b34:	786a      	ldrb	r2, [r5, #1]
   22b36:	2a00      	cmp	r2, #0
   22b38:	d0df      	beq.n	22afa <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   22b3a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   22b3e:	78ad      	ldrb	r5, [r5, #2]
   22b40:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   22b44:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22b48:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22b4c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   22b50:	0223      	lsls	r3, r4, #8
   22b52:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22b56:	0412      	lsls	r2, r2, #16
   22b58:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22b5c:	ea43 030e 	orr.w	r3, r3, lr
   22b60:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22b62:	052a      	lsls	r2, r5, #20
   22b64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22b68:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22b6c:	4313      	orrs	r3, r2
   22b6e:	f040 0020 	orr.w	r0, r0, #32
   22b72:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22b76:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22b7a:	e7be      	b.n	22afa <nrfx_gpiote_output_configure+0x56>
{
   22b7c:	4802      	ldr	r0, [pc, #8]	; (22b88 <nrfx_gpiote_output_configure+0xe4>)
   22b7e:	e7bd      	b.n	22afc <nrfx_gpiote_output_configure+0x58>
   22b80:	2000072c 	.word	0x2000072c
   22b84:	0bad0000 	.word	0x0bad0000
   22b88:	0bad0004 	.word	0x0bad0004

00022b8c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   22b8c:	4b01      	ldr	r3, [pc, #4]	; (22b94 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   22b8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   22b92:	4770      	bx	lr
   22b94:	2000072c 	.word	0x2000072c

00022b98 <nrfx_gpiote_channel_get>:
{
   22b98:	b508      	push	{r3, lr}
   22b9a:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   22b9c:	b951      	cbnz	r1, 22bb4 <nrfx_gpiote_channel_get+0x1c>
   22b9e:	490c      	ldr	r1, [pc, #48]	; (22bd0 <nrfx_gpiote_channel_get+0x38>)
   22ba0:	480c      	ldr	r0, [pc, #48]	; (22bd4 <nrfx_gpiote_channel_get+0x3c>)
   22ba2:	f240 2235 	movw	r2, #565	; 0x235
   22ba6:	f007 fa50 	bl	2a04a <assert_print>
   22baa:	4809      	ldr	r0, [pc, #36]	; (22bd0 <nrfx_gpiote_channel_get+0x38>)
   22bac:	f240 2135 	movw	r1, #565	; 0x235
   22bb0:	f007 fa44 	bl	2a03c <assert_post_action>
    if (pin_in_use_by_te(pin))
   22bb4:	f7ff fe08 	bl	227c8 <pin_in_use_by_te>
   22bb8:	b138      	cbz	r0, 22bca <nrfx_gpiote_channel_get+0x32>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22bba:	4b07      	ldr	r3, [pc, #28]	; (22bd8 <nrfx_gpiote_channel_get+0x40>)
        return NRFX_SUCCESS;
   22bbc:	4807      	ldr	r0, [pc, #28]	; (22bdc <nrfx_gpiote_channel_get+0x44>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22bbe:	3208      	adds	r2, #8
   22bc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   22bc4:	0b5b      	lsrs	r3, r3, #13
   22bc6:	700b      	strb	r3, [r1, #0]
}
   22bc8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22bca:	4805      	ldr	r0, [pc, #20]	; (22be0 <nrfx_gpiote_channel_get+0x48>)
   22bcc:	e7fc      	b.n	22bc8 <nrfx_gpiote_channel_get+0x30>
   22bce:	bf00      	nop
   22bd0:	00032f2b 	.word	0x00032f2b
   22bd4:	0002f2b5 	.word	0x0002f2b5
   22bd8:	2000072c 	.word	0x2000072c
   22bdc:	0bad0000 	.word	0x0bad0000
   22be0:	0bad0004 	.word	0x0bad0004

00022be4 <nrfx_gpiote_init>:
{
   22be4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22be6:	4c0f      	ldr	r4, [pc, #60]	; (22c24 <nrfx_gpiote_init+0x40>)
   22be8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   22bec:	b9bd      	cbnz	r5, 22c1e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   22bee:	2260      	movs	r2, #96	; 0x60
   22bf0:	4629      	mov	r1, r5
   22bf2:	f104 0010 	add.w	r0, r4, #16
   22bf6:	f008 fa09 	bl	2b00c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   22bfa:	2006      	movs	r0, #6
   22bfc:	f7f1 fff6 	bl	14bec <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22c00:	4b09      	ldr	r3, [pc, #36]	; (22c28 <nrfx_gpiote_init+0x44>)
    return err_code;
   22c02:	480a      	ldr	r0, [pc, #40]	; (22c2c <nrfx_gpiote_init+0x48>)
   22c04:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   22c08:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   22c0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22c10:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   22c14:	2301      	movs	r3, #1
   22c16:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   22c1a:	6763      	str	r3, [r4, #116]	; 0x74
}
   22c1c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   22c1e:	4804      	ldr	r0, [pc, #16]	; (22c30 <nrfx_gpiote_init+0x4c>)
   22c20:	e7fc      	b.n	22c1c <nrfx_gpiote_init+0x38>
   22c22:	bf00      	nop
   22c24:	2000072c 	.word	0x2000072c
   22c28:	40006000 	.word	0x40006000
   22c2c:	0bad0000 	.word	0x0bad0000
   22c30:	0bad0005 	.word	0x0bad0005

00022c34 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   22c34:	4b03      	ldr	r3, [pc, #12]	; (22c44 <nrfx_gpiote_is_init+0x10>)
   22c36:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   22c3a:	3800      	subs	r0, #0
   22c3c:	bf18      	it	ne
   22c3e:	2001      	movne	r0, #1
   22c40:	4770      	bx	lr
   22c42:	bf00      	nop
   22c44:	2000072c 	.word	0x2000072c

00022c48 <nrfx_gpiote_channel_free>:
{
   22c48:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   22c4a:	4801      	ldr	r0, [pc, #4]	; (22c50 <nrfx_gpiote_channel_free+0x8>)
   22c4c:	f7ff bd9c 	b.w	22788 <nrfx_flag32_free>
   22c50:	2000079c 	.word	0x2000079c

00022c54 <nrfx_gpiote_channel_alloc>:
{
   22c54:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   22c56:	4801      	ldr	r0, [pc, #4]	; (22c5c <nrfx_gpiote_channel_alloc+0x8>)
   22c58:	f7ff bd76 	b.w	22748 <nrfx_flag32_alloc>
   22c5c:	2000079c 	.word	0x2000079c

00022c60 <nrfx_gpiote_trigger_enable>:
{
   22c60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22c62:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   22c64:	f7ff fdba 	bl	227dc <pin_has_trigger>
   22c68:	b950      	cbnz	r0, 22c80 <nrfx_gpiote_trigger_enable+0x20>
   22c6a:	492c      	ldr	r1, [pc, #176]	; (22d1c <nrfx_gpiote_trigger_enable+0xbc>)
   22c6c:	482c      	ldr	r0, [pc, #176]	; (22d20 <nrfx_gpiote_trigger_enable+0xc0>)
   22c6e:	f240 32df 	movw	r2, #991	; 0x3df
   22c72:	f007 f9ea 	bl	2a04a <assert_print>
   22c76:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   22c7a:	4828      	ldr	r0, [pc, #160]	; (22d1c <nrfx_gpiote_trigger_enable+0xbc>)
   22c7c:	f007 f9de 	bl	2a03c <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22c80:	4620      	mov	r0, r4
   22c82:	f7ff fda1 	bl	227c8 <pin_in_use_by_te>
   22c86:	4a27      	ldr	r2, [pc, #156]	; (22d24 <nrfx_gpiote_trigger_enable+0xc4>)
   22c88:	f104 0508 	add.w	r5, r4, #8
   22c8c:	b1f8      	cbz	r0, 22cce <nrfx_gpiote_trigger_enable+0x6e>
    return !pin_is_output(pin);
   22c8e:	4620      	mov	r0, r4
   22c90:	f7ff fdb0 	bl	227f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22c94:	b9d8      	cbnz	r0, 22cce <nrfx_gpiote_trigger_enable+0x6e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22c96:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   22c9a:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   22c9c:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   22c9e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   22ca2:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   22ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22caa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22cae:	6020      	str	r0, [r4, #0]
   22cb0:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   22cb2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   22cb6:	f040 0001 	orr.w	r0, r0, #1
   22cba:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   22cbe:	b121      	cbz	r1, 22cca <nrfx_gpiote_trigger_enable+0x6a>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   22cc0:	2301      	movs	r3, #1
   22cc2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   22cc4:	4a18      	ldr	r2, [pc, #96]	; (22d28 <nrfx_gpiote_trigger_enable+0xc8>)
   22cc6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   22cca:	b003      	add	sp, #12
   22ccc:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   22cce:	b941      	cbnz	r1, 22ce2 <nrfx_gpiote_trigger_enable+0x82>
   22cd0:	4912      	ldr	r1, [pc, #72]	; (22d1c <nrfx_gpiote_trigger_enable+0xbc>)
   22cd2:	4813      	ldr	r0, [pc, #76]	; (22d20 <nrfx_gpiote_trigger_enable+0xc0>)
   22cd4:	f240 32ee 	movw	r2, #1006	; 0x3ee
   22cd8:	f007 f9b7 	bl	2a04a <assert_print>
   22cdc:	f240 31ee 	movw	r1, #1006	; 0x3ee
   22ce0:	e7cb      	b.n	22c7a <nrfx_gpiote_trigger_enable+0x1a>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22ce2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   22ce6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   22cea:	2b04      	cmp	r3, #4
   22cec:	d012      	beq.n	22d14 <nrfx_gpiote_trigger_enable+0xb4>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   22cee:	2b05      	cmp	r3, #5
   22cf0:	d012      	beq.n	22d18 <nrfx_gpiote_trigger_enable+0xb8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22cf2:	a801      	add	r0, sp, #4
   22cf4:	9401      	str	r4, [sp, #4]
   22cf6:	f7ff fdfd 	bl	228f4 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22cfa:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   22cfc:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   22d00:	40d9      	lsrs	r1, r3
   22d02:	f001 0101 	and.w	r1, r1, #1
   22d06:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22d08:	4620      	mov	r0, r4
}
   22d0a:	b003      	add	sp, #12
   22d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   22d10:	f00a bf71 	b.w	2dbf6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   22d14:	2103      	movs	r1, #3
   22d16:	e7f7      	b.n	22d08 <nrfx_gpiote_trigger_enable+0xa8>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   22d18:	2102      	movs	r1, #2
   22d1a:	e7f5      	b.n	22d08 <nrfx_gpiote_trigger_enable+0xa8>
   22d1c:	00032f2b 	.word	0x00032f2b
   22d20:	0002f2b5 	.word	0x0002f2b5
   22d24:	2000072c 	.word	0x2000072c
   22d28:	40006000 	.word	0x40006000

00022d2c <nrfx_gpiote_trigger_disable>:
{
   22d2c:	b508      	push	{r3, lr}
   22d2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22d30:	f7ff fd4a 	bl	227c8 <pin_in_use_by_te>
   22d34:	b1c8      	cbz	r0, 22d6a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   22d36:	4610      	mov	r0, r2
   22d38:	f7ff fd5c 	bl	227f4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   22d3c:	b9a8      	cbnz	r0, 22d6a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22d3e:	3208      	adds	r2, #8
   22d40:	4b0d      	ldr	r3, [pc, #52]	; (22d78 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   22d42:	490e      	ldr	r1, [pc, #56]	; (22d7c <nrfx_gpiote_trigger_disable+0x50>)
   22d44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22d48:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22d4a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   22d4c:	409a      	lsls	r2, r3
   22d4e:	009b      	lsls	r3, r3, #2
   22d50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22d54:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   22d58:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22d5c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   22d60:	f022 0203 	bic.w	r2, r2, #3
   22d64:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   22d68:	bd08      	pop	{r3, pc}
   22d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22d6e:	2100      	movs	r1, #0
   22d70:	4610      	mov	r0, r2
   22d72:	f00a bf40 	b.w	2dbf6 <nrf_gpio_cfg_sense_set>
   22d76:	bf00      	nop
   22d78:	2000072c 	.word	0x2000072c
   22d7c:	40006000 	.word	0x40006000

00022d80 <nrfx_gpiote_pin_uninit>:
{
   22d80:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22d82:	4b0e      	ldr	r3, [pc, #56]	; (22dbc <nrfx_gpiote_pin_uninit+0x3c>)
   22d84:	f100 0208 	add.w	r2, r0, #8
{
   22d88:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   22d8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   22d8e:	07db      	lsls	r3, r3, #31
   22d90:	d511      	bpl.n	22db6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   22d92:	f7ff ffcb 	bl	22d2c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   22d96:	4620      	mov	r0, r4
   22d98:	f7ff fd90 	bl	228bc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22d9c:	a801      	add	r0, sp, #4
   22d9e:	9401      	str	r4, [sp, #4]
   22da0:	f7ff fda8 	bl	228f4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22da4:	9b01      	ldr	r3, [sp, #4]
   22da6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22daa:	2202      	movs	r2, #2
   22dac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   22db0:	4803      	ldr	r0, [pc, #12]	; (22dc0 <nrfx_gpiote_pin_uninit+0x40>)
}
   22db2:	b002      	add	sp, #8
   22db4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22db6:	4803      	ldr	r0, [pc, #12]	; (22dc4 <nrfx_gpiote_pin_uninit+0x44>)
   22db8:	e7fb      	b.n	22db2 <nrfx_gpiote_pin_uninit+0x32>
   22dba:	bf00      	nop
   22dbc:	2000072c 	.word	0x2000072c
   22dc0:	0bad0000 	.word	0x0bad0000
   22dc4:	0bad0004 	.word	0x0bad0004

00022dc8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   22dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22dcc:	4b69      	ldr	r3, [pc, #420]	; (22f74 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   22dce:	486a      	ldr	r0, [pc, #424]	; (22f78 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22dd0:	496a      	ldr	r1, [pc, #424]	; (22f7c <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   22dd2:	2600      	movs	r6, #0
{
   22dd4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   22dd6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22dd8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22dda:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   22ddc:	b135      	cbz	r5, 22dec <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   22dde:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   22de2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22de4:	bf1e      	ittt	ne
   22de6:	601c      	strne	r4, [r3, #0]
   22de8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   22dea:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22dec:	3304      	adds	r3, #4
   22dee:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   22df0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   22df4:	d1f1      	bne.n	22dda <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22df6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 22f78 <nrfx_gpiote_irq_handler+0x1b0>
   22dfa:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   22dfe:	2b00      	cmp	r3, #0
   22e00:	f000 809b 	beq.w	22f3a <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   22e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   22e08:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   22e0c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   22e0e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   22e12:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   22e16:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   22e18:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22e1c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   22e20:	f10d 0a10 	add.w	sl, sp, #16
   22e24:	ea4f 1348 	mov.w	r3, r8, lsl #5
   22e28:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   22e2a:	f04f 0b01 	mov.w	fp, #1
   22e2e:	e04b      	b.n	22ec8 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   22e30:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e32:	4a53      	ldr	r2, [pc, #332]	; (22f80 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   22e34:	fa94 f4a4 	rbit	r4, r4
   22e38:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   22e3c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   22e3e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e40:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   22e44:	f004 0107 	and.w	r1, r4, #7
   22e48:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   22e4c:	f81a 3000 	ldrb.w	r3, [sl, r0]
   22e50:	9403      	str	r4, [sp, #12]
   22e52:	fa0b f101 	lsl.w	r1, fp, r1
   22e56:	ea23 0301 	bic.w	r3, r3, r1
   22e5a:	08ba      	lsrs	r2, r7, #2
   22e5c:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e60:	a803      	add	r0, sp, #12
   22e62:	9201      	str	r2, [sp, #4]
   22e64:	f7ff fd46 	bl	228f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22e68:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   22e6a:	9a01      	ldr	r2, [sp, #4]
   22e6c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e70:	f3c7 0582 	ubfx	r5, r7, #2, #3
   22e74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   22e78:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   22e7a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   22e7c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   22e80:	d52c      	bpl.n	22edc <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   22e82:	4639      	mov	r1, r7
   22e84:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22e86:	b2dd      	uxtb	r5, r3
   22e88:	f7ff fcbe 	bl	22808 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22e8c:	a803      	add	r0, sp, #12
   22e8e:	9403      	str	r4, [sp, #12]
   22e90:	f7ff fd30 	bl	228f4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   22e94:	9b03      	ldr	r3, [sp, #12]
   22e96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22e9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   22e9e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   22ea2:	429d      	cmp	r5, r3
   22ea4:	d107      	bne.n	22eb6 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   22ea6:	2100      	movs	r1, #0
   22ea8:	4620      	mov	r0, r4
   22eaa:	f00a fea4 	bl	2dbf6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   22eae:	4629      	mov	r1, r5
   22eb0:	4620      	mov	r0, r4
   22eb2:	f00a fea0 	bl	2dbf6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22eb6:	a803      	add	r0, sp, #12
   22eb8:	9403      	str	r4, [sp, #12]
   22eba:	f7ff fd1b 	bl	228f4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   22ebe:	9b03      	ldr	r3, [sp, #12]
   22ec0:	fa0b f303 	lsl.w	r3, fp, r3
   22ec4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   22ec8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   22ecc:	2c00      	cmp	r4, #0
   22ece:	d1af      	bne.n	22e30 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   22ed0:	f1b8 0f00 	cmp.w	r8, #0
   22ed4:	d11d      	bne.n	22f12 <nrfx_gpiote_irq_handler+0x14a>
   22ed6:	f04f 0801 	mov.w	r8, #1
   22eda:	e7a3      	b.n	22e24 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   22edc:	2b02      	cmp	r3, #2
   22ede:	d10c      	bne.n	22efa <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22ee0:	2103      	movs	r1, #3
   22ee2:	4620      	mov	r0, r4
   22ee4:	f00a fe87 	bl	2dbf6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   22ee8:	f005 0305 	and.w	r3, r5, #5
   22eec:	2b01      	cmp	r3, #1
   22eee:	d1e2      	bne.n	22eb6 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   22ef0:	4639      	mov	r1, r7
   22ef2:	4620      	mov	r0, r4
   22ef4:	f7ff fc88 	bl	22808 <call_handler>
   22ef8:	e7dd      	b.n	22eb6 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   22efa:	2102      	movs	r1, #2
   22efc:	4620      	mov	r0, r4
   22efe:	9301      	str	r3, [sp, #4]
   22f00:	f00a fe79 	bl	2dbf6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   22f04:	2d03      	cmp	r5, #3
   22f06:	d0f3      	beq.n	22ef0 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   22f08:	9b01      	ldr	r3, [sp, #4]
   22f0a:	2b03      	cmp	r3, #3
   22f0c:	d1d3      	bne.n	22eb6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   22f0e:	2d02      	cmp	r5, #2
   22f10:	e7ed      	b.n	22eee <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   22f12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   22f16:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   22f1a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   22f1e:	4919      	ldr	r1, [pc, #100]	; (22f84 <nrfx_gpiote_irq_handler+0x1bc>)
   22f20:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   22f24:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   22f26:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   22f2a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   22f2e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   22f30:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   22f32:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   22f36:	f47f af71 	bne.w	22e1c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   22f3a:	2401      	movs	r4, #1
    while (mask)
   22f3c:	b916      	cbnz	r6, 22f44 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   22f3e:	b007      	add	sp, #28
   22f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   22f44:	fa96 f3a6 	rbit	r3, r6
   22f48:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   22f4c:	fa04 f203 	lsl.w	r2, r4, r3
   22f50:	009b      	lsls	r3, r3, #2
   22f52:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22f56:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   22f5a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   22f5e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   22f62:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   22f66:	f3c0 2005 	ubfx	r0, r0, #8, #6
   22f6a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   22f6e:	f7ff fc4b 	bl	22808 <call_handler>
   22f72:	e7e3      	b.n	22f3c <nrfx_gpiote_irq_handler+0x174>
   22f74:	40006100 	.word	0x40006100
   22f78:	40006000 	.word	0x40006000
   22f7c:	40006120 	.word	0x40006120
   22f80:	2000072c 	.word	0x2000072c
   22f84:	50000300 	.word	0x50000300

00022f88 <nvmc_word_write>:
   22f88:	4a04      	ldr	r2, [pc, #16]	; (22f9c <nvmc_word_write+0x14>)
   22f8a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22f8e:	07db      	lsls	r3, r3, #31
   22f90:	d5fb      	bpl.n	22f8a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   22f92:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   22f94:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   22f98:	4770      	bx	lr
   22f9a:	bf00      	nop
   22f9c:	4001e000 	.word	0x4001e000

00022fa0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   22fa0:	b508      	push	{r3, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   22fa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22fa6:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   22fa8:	6959      	ldr	r1, [r3, #20]
    return flash_page_size_get() * flash_page_count_get();
   22faa:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   22fac:	4290      	cmp	r0, r2
   22fae:	d207      	bcs.n	22fc0 <nrfx_nvmc_page_erase+0x20>
    return p_reg->CODEPAGESIZE;
   22fb0:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   22fb2:	fbb0 f3f2 	udiv	r3, r0, r2
   22fb6:	fb02 0313 	mls	r3, r2, r3, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   22fba:	b163      	cbz	r3, 22fd6 <nrfx_nvmc_page_erase+0x36>
    {
        return NRFX_ERROR_INVALID_ADDR;
   22fbc:	480d      	ldr	r0, [pc, #52]	; (22ff4 <nrfx_nvmc_page_erase+0x54>)
   22fbe:	e018      	b.n	22ff2 <nrfx_nvmc_page_erase+0x52>
    NRFX_ASSERT(is_valid_address(addr, false));
   22fc0:	490d      	ldr	r1, [pc, #52]	; (22ff8 <nrfx_nvmc_page_erase+0x58>)
   22fc2:	480e      	ldr	r0, [pc, #56]	; (22ffc <nrfx_nvmc_page_erase+0x5c>)
   22fc4:	f44f 7283 	mov.w	r2, #262	; 0x106
   22fc8:	f007 f83f 	bl	2a04a <assert_print>
   22fcc:	480a      	ldr	r0, [pc, #40]	; (22ff8 <nrfx_nvmc_page_erase+0x58>)
   22fce:	f44f 7183 	mov.w	r1, #262	; 0x106
   22fd2:	f007 f833 	bl	2a03c <assert_post_action>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   22fd6:	4b0a      	ldr	r3, [pc, #40]	; (23000 <nrfx_nvmc_page_erase+0x60>)
   22fd8:	2202      	movs	r2, #2
   22fda:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   22fde:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   22fe2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   22fe6:	07d2      	lsls	r2, r2, #31
   22fe8:	d5fb      	bpl.n	22fe2 <nrfx_nvmc_page_erase+0x42>
    p_reg->CONFIG = (uint32_t)mode;
   22fea:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   22fec:	4805      	ldr	r0, [pc, #20]	; (23004 <nrfx_nvmc_page_erase+0x64>)
   22fee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   22ff2:	bd08      	pop	{r3, pc}
   22ff4:	0bad000a 	.word	0x0bad000a
   22ff8:	00032f75 	.word	0x00032f75
   22ffc:	0002f2b5 	.word	0x0002f2b5
   23000:	4001e000 	.word	0x4001e000
   23004:	0bad0000 	.word	0x0bad0000

00023008 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   23008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2300a:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
   2300c:	2101      	movs	r1, #1
{
   2300e:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, true));
   23010:	f00a fe00 	bl	2dc14 <is_valid_address>
   23014:	b950      	cbnz	r0, 2302c <nrfx_nvmc_word_write+0x24>
   23016:	4911      	ldr	r1, [pc, #68]	; (2305c <nrfx_nvmc_word_write+0x54>)
   23018:	4811      	ldr	r0, [pc, #68]	; (23060 <nrfx_nvmc_word_write+0x58>)
   2301a:	f44f 72ca 	mov.w	r2, #404	; 0x194
   2301e:	f007 f814 	bl	2a04a <assert_print>
   23022:	f44f 71ca 	mov.w	r1, #404	; 0x194
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   23026:	480d      	ldr	r0, [pc, #52]	; (2305c <nrfx_nvmc_word_write+0x54>)
   23028:	f007 f808 	bl	2a03c <assert_post_action>
   2302c:	f014 0703 	ands.w	r7, r4, #3
   23030:	d008      	beq.n	23044 <nrfx_nvmc_word_write+0x3c>
   23032:	490a      	ldr	r1, [pc, #40]	; (2305c <nrfx_nvmc_word_write+0x54>)
   23034:	480a      	ldr	r0, [pc, #40]	; (23060 <nrfx_nvmc_word_write+0x58>)
   23036:	f240 1295 	movw	r2, #405	; 0x195
   2303a:	f007 f806 	bl	2a04a <assert_print>
   2303e:	f240 1195 	movw	r1, #405	; 0x195
   23042:	e7f0      	b.n	23026 <nrfx_nvmc_word_write+0x1e>
   23044:	4e07      	ldr	r6, [pc, #28]	; (23064 <nrfx_nvmc_word_write+0x5c>)
   23046:	2301      	movs	r3, #1
   23048:	f8c6 3504 	str.w	r3, [r6, #1284]	; 0x504

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   2304c:	4629      	mov	r1, r5
   2304e:	4620      	mov	r0, r4
   23050:	f7ff ff9a 	bl	22f88 <nvmc_word_write>
   23054:	f8c6 7504 	str.w	r7, [r6, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   23058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2305a:	bf00      	nop
   2305c:	00032f75 	.word	0x00032f75
   23060:	0002f2b5 	.word	0x0002f2b5
   23064:	4001e000 	.word	0x4001e000

00023068 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23068:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2306a:	4801      	ldr	r0, [pc, #4]	; (23070 <nrfx_ppi_channel_alloc+0x8>)
   2306c:	f7ff bb6c 	b.w	22748 <nrfx_flag32_alloc>
   23070:	200007a8 	.word	0x200007a8

00023074 <nrf_gpio_pin_port_decode>:
{
   23074:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23076:	6803      	ldr	r3, [r0, #0]
    switch (port)
   23078:	095a      	lsrs	r2, r3, #5
   2307a:	d00c      	beq.n	23096 <nrf_gpio_pin_port_decode+0x22>
   2307c:	2a01      	cmp	r2, #1
   2307e:	d013      	beq.n	230a8 <nrf_gpio_pin_port_decode+0x34>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23080:	490e      	ldr	r1, [pc, #56]	; (230bc <nrf_gpio_pin_port_decode+0x48>)
   23082:	480f      	ldr	r0, [pc, #60]	; (230c0 <nrf_gpio_pin_port_decode+0x4c>)
   23084:	f240 2247 	movw	r2, #583	; 0x247
   23088:	f006 ffdf 	bl	2a04a <assert_print>
   2308c:	480b      	ldr	r0, [pc, #44]	; (230bc <nrf_gpio_pin_port_decode+0x48>)
   2308e:	f240 2147 	movw	r1, #583	; 0x247
   23092:	f006 ffd3 	bl	2a03c <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   23096:	f04f 32ff 	mov.w	r2, #4294967295
   2309a:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2309e:	07d9      	lsls	r1, r3, #31
   230a0:	d5ee      	bpl.n	23080 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   230a2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   230a6:	e008      	b.n	230ba <nrf_gpio_pin_port_decode+0x46>
    pin_number &= 0x1F;
   230a8:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   230ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   230b0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   230b2:	07d2      	lsls	r2, r2, #31
   230b4:	d5e4      	bpl.n	23080 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   230b6:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   230b8:	4802      	ldr	r0, [pc, #8]	; (230c4 <nrf_gpio_pin_port_decode+0x50>)
}
   230ba:	bd08      	pop	{r3, pc}
   230bc:	0003268c 	.word	0x0003268c
   230c0:	0002f2b5 	.word	0x0002f2b5
   230c4:	50000300 	.word	0x50000300

000230c8 <qspi_xfer>:

static nrfx_err_t qspi_xfer(void *            p_buffer,
                            size_t            length,
                            uint32_t          address,
                            nrfx_qspi_state_t desired_state)
{
   230c8:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   230ca:	4d41      	ldr	r5, [pc, #260]	; (231d0 <qspi_xfer+0x108>)
   230cc:	f895 4030 	ldrb.w	r4, [r5, #48]	; 0x30
   230d0:	b944      	cbnz	r4, 230e4 <qspi_xfer+0x1c>
   230d2:	4940      	ldr	r1, [pc, #256]	; (231d4 <qspi_xfer+0x10c>)
   230d4:	4840      	ldr	r0, [pc, #256]	; (231d8 <qspi_xfer+0x110>)
   230d6:	2268      	movs	r2, #104	; 0x68
   230d8:	f006 ffb7 	bl	2a04a <assert_print>
   230dc:	2168      	movs	r1, #104	; 0x68
    NRFX_ASSERT(p_buffer != NULL);
   230de:	483d      	ldr	r0, [pc, #244]	; (231d4 <qspi_xfer+0x10c>)
   230e0:	f006 ffac 	bl	2a03c <assert_post_action>
   230e4:	b930      	cbnz	r0, 230f4 <qspi_xfer+0x2c>
   230e6:	493b      	ldr	r1, [pc, #236]	; (231d4 <qspi_xfer+0x10c>)
   230e8:	483b      	ldr	r0, [pc, #236]	; (231d8 <qspi_xfer+0x110>)
   230ea:	2269      	movs	r2, #105	; 0x69
   230ec:	f006 ffad 	bl	2a04a <assert_print>
   230f0:	2169      	movs	r1, #105	; 0x69
   230f2:	e7f4      	b.n	230de <qspi_xfer+0x16>
   230f4:	f000 4660 	and.w	r6, r0, #3758096384	; 0xe0000000

    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   230f8:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
   230fc:	d163      	bne.n	231c6 <qspi_xfer+0xfe>
   230fe:	0786      	lsls	r6, r0, #30
   23100:	d161      	bne.n	231c6 <qspi_xfer+0xfe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    }

    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   23102:	2c01      	cmp	r4, #1
   23104:	d001      	beq.n	2310a <qspi_xfer+0x42>
   23106:	429c      	cmp	r4, r3
   23108:	d15f      	bne.n	231ca <qspi_xfer+0x102>
    {
        return NRFX_ERROR_BUSY;
    }

    bool is_first_buffer = false;
    if (m_cb.handler)
   2310a:	682c      	ldr	r4, [r5, #0]
   2310c:	bb04      	cbnz	r4, 23150 <qspi_xfer+0x88>
            is_first_buffer = true;
        }
    }

    nrf_qspi_task_t task;
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2310e:	2b02      	cmp	r3, #2
   23110:	4b32      	ldr	r3, [pc, #200]	; (231dc <qspi_xfer+0x114>)
NRF_STATIC_INLINE void nrf_qspi_write_buffer_set(NRF_QSPI_Type * p_reg,
                                                 void const    * p_buffer,
                                                 uint32_t        length,
                                                 uint32_t        dest_addr)
{
    p_reg->WRITE.DST = dest_addr;
   23112:	bf0b      	itete	eq
   23114:	f8c3 2510 	streq.w	r2, [r3, #1296]	; 0x510
NRF_STATIC_INLINE void nrf_qspi_read_buffer_set(NRF_QSPI_Type * p_reg,
                                                void          * p_buffer,
                                                uint32_t        length,
                                                uint32_t        src_addr)
{
    p_reg->READ.SRC = src_addr;
   23118:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2311c:	f8c3 0514 	streq.w	r0, [r3, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23120:	f8c3 0508 	strne.w	r0, [r3, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23124:	bf0b      	itete	eq
   23126:	f8c3 1518 	streq.w	r1, [r3, #1304]	; 0x518
    p_reg->READ.CNT = length;
   2312a:	f8c3 150c 	strne.w	r1, [r3, #1292]	; 0x50c
    {
        nrf_qspi_write_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_WRITESTART;
   2312e:	2208      	moveq	r2, #8
    }
    else
    {
        nrf_qspi_read_buffer_set(NRF_QSPI, p_buffer, length, address);
        task = NRF_QSPI_TASK_READSTART;
   23130:	2204      	movne	r2, #4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23132:	2100      	movs	r1, #0
   23134:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23138:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   2313c:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
   23140:	2201      	movs	r2, #1
   23142:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23144:	4a25      	ldr	r2, [pc, #148]	; (231dc <qspi_xfer+0x114>)
   23146:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100

    if (!m_cb.handler)
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_task_trigger(NRF_QSPI, task);
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2314a:	2b00      	cmp	r3, #0
   2314c:	d0fb      	beq.n	23146 <qspi_xfer+0x7e>
   2314e:	e00d      	b.n	2316c <qspi_xfer+0xa4>
        if (m_cb.p_buffer_primary)
   23150:	68ae      	ldr	r6, [r5, #8]
   23152:	4c22      	ldr	r4, [pc, #136]	; (231dc <qspi_xfer+0x114>)
   23154:	b166      	cbz	r6, 23170 <qspi_xfer+0xa8>
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23156:	2b02      	cmp	r3, #2
            m_cb.p_buffer_secondary = p_buffer;
   23158:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   2315a:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   2315c:	61ea      	str	r2, [r5, #28]
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2315e:	d12b      	bne.n	231b8 <qspi_xfer+0xf0>
    p_reg->WRITE.DST = dest_addr;
   23160:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23164:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   23168:	f8c4 1518 	str.w	r1, [r4, #1304]	; 0x518
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);
        nrf_qspi_int_enable(NRF_QSPI, NRF_QSPI_INT_READY_MASK);
        nrf_qspi_task_trigger(NRF_QSPI, task);
    }

    return NRFX_SUCCESS;
   2316c:	481c      	ldr	r0, [pc, #112]	; (231e0 <qspi_xfer+0x118>)
}
   2316e:	bd70      	pop	{r4, r5, r6, pc}
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   23170:	2b02      	cmp	r3, #2
            m_cb.state = desired_state;
   23172:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        task = NRF_QSPI_TASK_WRITESTART;
   23176:	bf0c      	ite	eq
   23178:	2308      	moveq	r3, #8
        task = NRF_QSPI_TASK_READSTART;
   2317a:	2304      	movne	r3, #4
            m_cb.size_primary     = length;
   2317c:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   2317e:	61aa      	str	r2, [r5, #24]
            m_cb.p_buffer_primary = p_buffer;
   23180:	60a8      	str	r0, [r5, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23182:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    p_reg->WRITE.DST = dest_addr;
   23186:	bf0b      	itete	eq
   23188:	f8c4 2510 	streq.w	r2, [r4, #1296]	; 0x510
    p_reg->READ.SRC = src_addr;
   2318c:	f8c4 2504 	strne.w	r2, [r4, #1284]	; 0x504
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   23190:	f8c4 0514 	streq.w	r0, [r4, #1300]	; 0x514
    p_reg->READ.DST = (uint32_t) p_buffer;
   23194:	f8c4 0508 	strne.w	r0, [r4, #1288]	; 0x508
    p_reg->WRITE.CNT = length;
   23198:	bf0c      	ite	eq
   2319a:	f8c4 1518 	streq.w	r1, [r4, #1304]	; 0x518
    p_reg->READ.CNT = length;
   2319e:	f8c4 150c 	strne.w	r1, [r4, #1292]	; 0x50c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   231a2:	490e      	ldr	r1, [pc, #56]	; (231dc <qspi_xfer+0x114>)
   231a4:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231a6:	f503 3324 	add.w	r3, r3, #167936	; 0x29000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   231aa:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   231ae:	2201      	movs	r2, #1
   231b0:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   231b4:	601a      	str	r2, [r3, #0]
}
   231b6:	e7d9      	b.n	2316c <qspi_xfer+0xa4>
    p_reg->READ.SRC = src_addr;
   231b8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   231bc:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->READ.CNT = length;
   231c0:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
    else if (is_first_buffer)
   231c4:	e7d2      	b.n	2316c <qspi_xfer+0xa4>
        return NRFX_ERROR_INVALID_ADDR;
   231c6:	4807      	ldr	r0, [pc, #28]	; (231e4 <qspi_xfer+0x11c>)
   231c8:	e7d1      	b.n	2316e <qspi_xfer+0xa6>
        return NRFX_ERROR_BUSY;
   231ca:	4807      	ldr	r0, [pc, #28]	; (231e8 <qspi_xfer+0x120>)
   231cc:	e7cf      	b.n	2316e <qspi_xfer+0xa6>
   231ce:	bf00      	nop
   231d0:	20003540 	.word	0x20003540
   231d4:	00032fba 	.word	0x00032fba
   231d8:	0002f2b5 	.word	0x0002f2b5
   231dc:	40029000 	.word	0x40029000
   231e0:	0bad0000 	.word	0x0bad0000
   231e4:	0bad000a 	.word	0x0bad000a
   231e8:	0bad000b 	.word	0x0bad000b

000231ec <qspi_ready_wait>:
        nrf_gpio_cfg_default(pins.io3_pin);
    }
}

static nrfx_err_t qspi_ready_wait(void)
{
   231ec:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   231ee:	4d07      	ldr	r5, [pc, #28]	; (2320c <qspi_ready_wait+0x20>)
   231f0:	2464      	movs	r4, #100	; 0x64
   231f2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    bool result;
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   231f6:	b933      	cbnz	r3, 23206 <qspi_ready_wait+0x1a>
   231f8:	200a      	movs	r0, #10
   231fa:	f00a fc91 	bl	2db20 <nrfx_busy_wait>
   231fe:	3c01      	subs	r4, #1
   23200:	d1f7      	bne.n	231f2 <qspi_ready_wait+0x6>
                                       QSPI_DEF_WAIT_ATTEMPTS,
                                       QSPI_DEF_WAIT_TIME_US,
                                       result);
    if (!result)
    {
        return NRFX_ERROR_TIMEOUT;
   23202:	4803      	ldr	r0, [pc, #12]	; (23210 <qspi_ready_wait+0x24>)
    }

    return NRFX_SUCCESS;
}
   23204:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   23206:	4803      	ldr	r0, [pc, #12]	; (23214 <qspi_ready_wait+0x28>)
   23208:	e7fc      	b.n	23204 <qspi_ready_wait+0x18>
   2320a:	bf00      	nop
   2320c:	40029000 	.word	0x40029000
   23210:	0bad0007 	.word	0x0bad0007
   23214:	0bad0000 	.word	0x0bad0000

00023218 <qspi_event_xfer_handle.constprop.0>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   23218:	4b08      	ldr	r3, [pc, #32]	; (2323c <qspi_event_xfer_handle.constprop.0+0x24>)
   2321a:	689a      	ldr	r2, [r3, #8]
   2321c:	625a      	str	r2, [r3, #36]	; 0x24
    p_xfer->size     = m_cb.size_primary;
   2321e:	691a      	ldr	r2, [r3, #16]
   23220:	629a      	str	r2, [r3, #40]	; 0x28
    p_xfer->addr     = m_cb.addr_primary;
   23222:	699a      	ldr	r2, [r3, #24]
   23224:	62da      	str	r2, [r3, #44]	; 0x2c
    if (m_cb.p_buffer_secondary)
   23226:	68da      	ldr	r2, [r3, #12]
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   23228:	609a      	str	r2, [r3, #8]
    if (m_cb.p_buffer_secondary)
   2322a:	b132      	cbz	r2, 2323a <qspi_event_xfer_handle.constprop.0+0x22>
        m_cb.size_primary     = m_cb.size_secondary;
   2322c:	695a      	ldr	r2, [r3, #20]
   2322e:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   23230:	69da      	ldr	r2, [r3, #28]
   23232:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   23234:	2200      	movs	r2, #0
   23236:	60da      	str	r2, [r3, #12]
   23238:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
    }
}
   2323a:	4770      	bx	lr
   2323c:	20003540 	.word	0x20003540

00023240 <nrf_qspi_cinstrdata_get.constprop.0>:
        default:
            break;
    }
}

NRF_STATIC_INLINE void nrf_qspi_cinstrdata_get(NRF_QSPI_Type const * p_reg,
   23240:	b510      	push	{r4, lr}
                                               nrf_qspi_cinstr_len_t length,
                                               void *                p_rx_data)
{
    uint8_t *p_rx_data_8 = (uint8_t *) p_rx_data;

    uint32_t reg1 = p_reg->CINSTRDAT1;
   23242:	4b0e      	ldr	r3, [pc, #56]	; (2327c <nrf_qspi_cinstrdata_get.constprop.0+0x3c>)
    uint32_t reg0 = p_reg->CINSTRDAT0;
    switch (length)
   23244:	3802      	subs	r0, #2
    uint32_t reg1 = p_reg->CINSTRDAT1;
   23246:	f8d3 263c 	ldr.w	r2, [r3, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   2324a:	f8d3 3638 	ldr.w	r3, [r3, #1592]	; 0x638
    switch (length)
   2324e:	2807      	cmp	r0, #7
   23250:	d813      	bhi.n	2327a <nrf_qspi_cinstrdata_get.constprop.0+0x3a>
   23252:	e8df f000 	tbb	[pc, r0]
   23256:	0f11      	.short	0x0f11
   23258:	080a0b0d 	.word	0x080a0b0d
   2325c:	0406      	.short	0x0406
    {
        case NRF_QSPI_CINSTR_LEN_9B:
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   2325e:	0e10      	lsrs	r0, r2, #24
   23260:	71c8      	strb	r0, [r1, #7]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_8B:
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   23262:	0c10      	lsrs	r0, r2, #16
   23264:	7188      	strb	r0, [r1, #6]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_7B:
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   23266:	0a10      	lsrs	r0, r2, #8
   23268:	7148      	strb	r0, [r1, #5]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_6B:
            p_rx_data_8[4] = (uint8_t)(reg1);
   2326a:	710a      	strb	r2, [r1, #4]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_5B:
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   2326c:	0e1a      	lsrs	r2, r3, #24
   2326e:	70ca      	strb	r2, [r1, #3]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_4B:
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   23270:	0c1a      	lsrs	r2, r3, #16
   23272:	708a      	strb	r2, [r1, #2]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_3B:
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   23274:	0a1a      	lsrs	r2, r3, #8
   23276:	704a      	strb	r2, [r1, #1]
            /* FALLTHROUGH */
        case NRF_QSPI_CINSTR_LEN_2B:
            p_rx_data_8[0] = (uint8_t)(reg0);
   23278:	700b      	strb	r3, [r1, #0]
            /* Send only opcode. Case to avoid compiler warnings. */
            break;
        default:
            break;
    }
}
   2327a:	bd10      	pop	{r4, pc}
   2327c:	40029000 	.word	0x40029000

00023280 <nrf_qspi_cinstrdata_set.constprop.0>:
    switch (length)
   23280:	3802      	subs	r0, #2
   23282:	2807      	cmp	r0, #7
   23284:	d81f      	bhi.n	232c6 <nrf_qspi_cinstrdata_set.constprop.0+0x46>
   23286:	e8df f000 	tbb	[pc, r0]
   2328a:	2729      	.short	0x2729
   2328c:	21231125 	.word	0x21231125
   23290:	041f      	.short	0x041f
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   23292:	79cb      	ldrb	r3, [r1, #7]
   23294:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   23296:	798a      	ldrb	r2, [r1, #6]
   23298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   2329c:	794a      	ldrb	r2, [r1, #5]
   2329e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   232a2:	790a      	ldrb	r2, [r1, #4]
   232a4:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT1 = reg;
   232a6:	4a0e      	ldr	r2, [pc, #56]	; (232e0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   232a8:	f8c2 363c 	str.w	r3, [r2, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   232ac:	78cb      	ldrb	r3, [r1, #3]
   232ae:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   232b0:	788a      	ldrb	r2, [r1, #2]
   232b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   232b6:	784a      	ldrb	r2, [r1, #1]
   232b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   232bc:	780a      	ldrb	r2, [r1, #0]
   232be:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   232c0:	4a07      	ldr	r2, [pc, #28]	; (232e0 <nrf_qspi_cinstrdata_set.constprop.0+0x60>)
   232c2:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
}
   232c6:	4770      	bx	lr
    switch (length)
   232c8:	2300      	movs	r3, #0
   232ca:	e7e4      	b.n	23296 <nrf_qspi_cinstrdata_set.constprop.0+0x16>
   232cc:	2300      	movs	r3, #0
   232ce:	e7e5      	b.n	2329c <nrf_qspi_cinstrdata_set.constprop.0+0x1c>
   232d0:	2300      	movs	r3, #0
   232d2:	e7e6      	b.n	232a2 <nrf_qspi_cinstrdata_set.constprop.0+0x22>
   232d4:	2300      	movs	r3, #0
   232d6:	e7eb      	b.n	232b0 <nrf_qspi_cinstrdata_set.constprop.0+0x30>
   232d8:	2300      	movs	r3, #0
   232da:	e7ec      	b.n	232b6 <nrf_qspi_cinstrdata_set.constprop.0+0x36>
   232dc:	2300      	movs	r3, #0
   232de:	e7ed      	b.n	232bc <nrf_qspi_cinstrdata_set.constprop.0+0x3c>
   232e0:	40029000 	.word	0x40029000

000232e4 <nrfx_qspi_init>:
{
   232e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   232e8:	460d      	mov	r5, r1
   232ea:	4616      	mov	r6, r2
    NRFX_ASSERT(p_config);
   232ec:	4604      	mov	r4, r0
   232ee:	b950      	cbnz	r0, 23306 <nrfx_qspi_init+0x22>
   232f0:	4970      	ldr	r1, [pc, #448]	; (234b4 <nrfx_qspi_init+0x1d0>)
   232f2:	4871      	ldr	r0, [pc, #452]	; (234b8 <nrfx_qspi_init+0x1d4>)
   232f4:	f44f 7288 	mov.w	r2, #272	; 0x110
   232f8:	f006 fea7 	bl	2a04a <assert_print>
   232fc:	486d      	ldr	r0, [pc, #436]	; (234b4 <nrfx_qspi_init+0x1d0>)
   232fe:	f44f 7188 	mov.w	r1, #272	; 0x110
   23302:	f006 fe9b 	bl	2a03c <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   23306:	4f6d      	ldr	r7, [pc, #436]	; (234bc <nrfx_qspi_init+0x1d8>)
   23308:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   2330c:	2b00      	cmp	r3, #0
   2330e:	f040 80ca 	bne.w	234a6 <nrfx_qspi_init+0x1c2>
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   23312:	7cc2      	ldrb	r2, [r0, #19]
   23314:	b11a      	cbz	r2, 2331e <nrfx_qspi_init+0x3a>
   23316:	7d03      	ldrb	r3, [r0, #20]
   23318:	2b00      	cmp	r3, #0
   2331a:	f040 8084 	bne.w	23426 <nrfx_qspi_init+0x142>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2331e:	7923      	ldrb	r3, [r4, #4]
   23320:	2bff      	cmp	r3, #255	; 0xff
   23322:	f000 80c4 	beq.w	234ae <nrfx_qspi_init+0x1ca>
   23326:	7961      	ldrb	r1, [r4, #5]
   23328:	29ff      	cmp	r1, #255	; 0xff
   2332a:	f000 80c0 	beq.w	234ae <nrfx_qspi_init+0x1ca>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2332e:	79a1      	ldrb	r1, [r4, #6]
   23330:	29ff      	cmp	r1, #255	; 0xff
   23332:	f000 80bc 	beq.w	234ae <nrfx_qspi_init+0x1ca>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   23336:	79e1      	ldrb	r1, [r4, #7]
   23338:	29ff      	cmp	r1, #255	; 0xff
   2333a:	f000 80b8 	beq.w	234ae <nrfx_qspi_init+0x1ca>
    if (!p_config->skip_gpio_cfg)
   2333e:	2a00      	cmp	r2, #0
   23340:	d142      	bne.n	233c8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23342:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   23344:	9301      	str	r3, [sp, #4]
   23346:	f7ff fe95 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2334a:	9b01      	ldr	r3, [sp, #4]
   2334c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23350:	f240 3802 	movw	r8, #770	; 0x302
   23354:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23358:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   2335a:	7963      	ldrb	r3, [r4, #5]
   2335c:	9301      	str	r3, [sp, #4]
   2335e:	f7ff fe89 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23362:	9b01      	ldr	r3, [sp, #4]
   23364:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23368:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2336c:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   2336e:	79a3      	ldrb	r3, [r4, #6]
   23370:	9301      	str	r3, [sp, #4]
   23372:	f7ff fe7f 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   23376:	9b01      	ldr	r3, [sp, #4]
   23378:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2337c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23380:	a801      	add	r0, sp, #4
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   23382:	79e3      	ldrb	r3, [r4, #7]
   23384:	9301      	str	r3, [sp, #4]
   23386:	f7ff fe75 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2338a:	9b01      	ldr	r3, [sp, #4]
   2338c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23390:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   23394:	7a23      	ldrb	r3, [r4, #8]
   23396:	2bff      	cmp	r3, #255	; 0xff
   23398:	d008      	beq.n	233ac <nrfx_qspi_init+0xc8>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2339a:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   2339c:	9301      	str	r3, [sp, #4]
   2339e:	f7ff fe69 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   233a2:	9b01      	ldr	r3, [sp, #4]
   233a4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   233a8:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   233ac:	7a63      	ldrb	r3, [r4, #9]
   233ae:	2bff      	cmp	r3, #255	; 0xff
   233b0:	d00a      	beq.n	233c8 <nrfx_qspi_init+0xe4>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   233b2:	a801      	add	r0, sp, #4
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   233b4:	9301      	str	r3, [sp, #4]
   233b6:	f7ff fe5d 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   233ba:	9b01      	ldr	r3, [sp, #4]
   233bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   233c0:	f240 3202 	movw	r2, #770	; 0x302
   233c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   233c8:	7d23      	ldrb	r3, [r4, #20]
   233ca:	bb63      	cbnz	r3, 23426 <nrfx_qspi_init+0x142>
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   233cc:	7923      	ldrb	r3, [r4, #4]
   233ce:	2bff      	cmp	r3, #255	; 0xff
   233d0:	bf18      	it	ne
   233d2:	461a      	movne	r2, r3
   233d4:	4b3a      	ldr	r3, [pc, #232]	; (234c0 <nrfx_qspi_init+0x1dc>)
   233d6:	bf08      	it	eq
   233d8:	f04f 32ff 	moveq.w	r2, #4294967295
   233dc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   233e0:	7962      	ldrb	r2, [r4, #5]
   233e2:	2aff      	cmp	r2, #255	; 0xff
   233e4:	bf08      	it	eq
   233e6:	f04f 32ff 	moveq.w	r2, #4294967295
   233ea:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   233ee:	79a2      	ldrb	r2, [r4, #6]
   233f0:	2aff      	cmp	r2, #255	; 0xff
   233f2:	bf08      	it	eq
   233f4:	f04f 32ff 	moveq.w	r2, #4294967295
   233f8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   233fc:	79e2      	ldrb	r2, [r4, #7]
   233fe:	2aff      	cmp	r2, #255	; 0xff
   23400:	bf08      	it	eq
   23402:	f04f 32ff 	moveq.w	r2, #4294967295
   23406:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   2340a:	7a22      	ldrb	r2, [r4, #8]
   2340c:	2aff      	cmp	r2, #255	; 0xff
   2340e:	bf08      	it	eq
   23410:	f04f 32ff 	moveq.w	r2, #4294967295
   23414:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   23418:	7a62      	ldrb	r2, [r4, #9]
   2341a:	2aff      	cmp	r2, #255	; 0xff
   2341c:	bf08      	it	eq
   2341e:	f04f 32ff 	moveq.w	r2, #4294967295
   23422:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->XIPOFFSET = xip_offset;
   23426:	4a26      	ldr	r2, [pc, #152]	; (234c0 <nrfx_qspi_init+0x1dc>)
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   23428:	6823      	ldr	r3, [r4, #0]
   2342a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   2342e:	7b23      	ldrb	r3, [r4, #12]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   23430:	7ae0      	ldrb	r0, [r4, #11]
    uint32_t config = p_config->readoc;
   23432:	7aa1      	ldrb	r1, [r4, #10]
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   23434:	019b      	lsls	r3, r3, #6
   23436:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
   2343a:	430b      	orrs	r3, r1
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   2343c:	7b61      	ldrb	r1, [r4, #13]
   2343e:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
    p_reg->IFCONFIG0 = config;
   23442:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   23446:	f8d2 1600 	ldr.w	r1, [r2, #1536]	; 0x600
    config |= p_config->sck_delay;
   2344a:	7ba3      	ldrb	r3, [r4, #14]
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   2344c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   23450:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    config |= p_config->sck_delay;
   23454:	430b      	orrs	r3, r1
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   23456:	7be1      	ldrb	r1, [r4, #15]
   23458:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   2345c:	7c21      	ldrb	r1, [r4, #16]
   2345e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   23462:	7c61      	ldrb	r1, [r4, #17]
   23464:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
    p_reg->IFCONFIG1 = config;
   23468:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   2346c:	7ce3      	ldrb	r3, [r4, #19]
   2346e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    p_reg->INTENCLR = mask;
   23472:	2301      	movs	r3, #1
    m_cb.p_context = p_context;
   23474:	e9c7 5600 	strd	r5, r6, [r7]
   23478:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    if (handler)
   2347c:	b115      	cbz	r5, 23484 <nrfx_qspi_init+0x1a0>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   2347e:	2029      	movs	r0, #41	; 0x29
   23480:	f7f1 fbb4 	bl	14bec <arch_irq_enable>
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   23484:	4b0e      	ldr	r3, [pc, #56]	; (234c0 <nrfx_qspi_init+0x1dc>)
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   23486:	2201      	movs	r2, #1
    m_cb.p_buffer_primary = NULL;
   23488:	2100      	movs	r1, #0
    m_cb.p_buffer_secondary = NULL;
   2348a:	e9c7 1102 	strd	r1, r1, [r7, #8]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   2348e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
   23492:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23496:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2349a:	601a      	str	r2, [r3, #0]
}
   2349c:	b002      	add	sp, #8
   2349e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return qspi_ready_wait();
   234a2:	f7ff bea3 	b.w	231ec <qspi_ready_wait>
        return NRFX_ERROR_INVALID_STATE;
   234a6:	4807      	ldr	r0, [pc, #28]	; (234c4 <nrfx_qspi_init+0x1e0>)
}
   234a8:	b002      	add	sp, #8
   234aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return NRFX_ERROR_INVALID_PARAM;
   234ae:	4806      	ldr	r0, [pc, #24]	; (234c8 <nrfx_qspi_init+0x1e4>)
   234b0:	e7fa      	b.n	234a8 <nrfx_qspi_init+0x1c4>
   234b2:	bf00      	nop
   234b4:	00032fba 	.word	0x00032fba
   234b8:	0002f2b5 	.word	0x0002f2b5
   234bc:	20003540 	.word	0x20003540
   234c0:	40029000 	.word	0x40029000
   234c4:	0bad0005 	.word	0x0bad0005
   234c8:	0bad0004 	.word	0x0bad0004

000234cc <nrfx_qspi_cinstr_xfer>:
{
   234cc:	b570      	push	{r4, r5, r6, lr}
   234ce:	4614      	mov	r4, r2
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   234d0:	4a25      	ldr	r2, [pc, #148]	; (23568 <nrfx_qspi_cinstr_xfer+0x9c>)
   234d2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
{
   234d6:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   234d8:	b952      	cbnz	r2, 234f0 <nrfx_qspi_cinstr_xfer+0x24>
   234da:	4924      	ldr	r1, [pc, #144]	; (2356c <nrfx_qspi_cinstr_xfer+0xa0>)
   234dc:	4824      	ldr	r0, [pc, #144]	; (23570 <nrfx_qspi_cinstr_xfer+0xa4>)
   234de:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   234e2:	f006 fdb2 	bl	2a04a <assert_print>
   234e6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
        NRFX_ASSERT(p_config->wipwait);
   234ea:	4820      	ldr	r0, [pc, #128]	; (2356c <nrfx_qspi_cinstr_xfer+0xa0>)
   234ec:	f006 fda6 	bl	2a03c <assert_post_action>
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   234f0:	2a01      	cmp	r2, #1
   234f2:	d136      	bne.n	23562 <nrfx_qspi_cinstr_xfer+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   234f4:	4e1f      	ldr	r6, [pc, #124]	; (23574 <nrfx_qspi_cinstr_xfer+0xa8>)
   234f6:	2200      	movs	r2, #0
   234f8:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
    if (p_tx_buffer)
   234fc:	b111      	cbz	r1, 23504 <nrfx_qspi_cinstr_xfer+0x38>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   234fe:	7840      	ldrb	r0, [r0, #1]
   23500:	f7ff febe 	bl	23280 <nrf_qspi_cinstrdata_set.constprop.0>
    p_reg->INTENCLR = mask;
   23504:	2301      	movs	r3, #1
   23506:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
NRF_STATIC_INLINE void nrf_qspi_cinstr_transfer_start(NRF_QSPI_Type *                p_reg,
                                                      nrf_qspi_cinstr_conf_t const * p_config)
{
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2350a:	78ab      	ldrb	r3, [r5, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   2350c:	786a      	ldrb	r2, [r5, #1]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2350e:	031b      	lsls	r3, r3, #12
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   23510:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   23514:	782a      	ldrb	r2, [r5, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   23516:	4313      	orrs	r3, r2
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   23518:	78ea      	ldrb	r2, [r5, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   2351a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   2351e:	792a      	ldrb	r2, [r5, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   23520:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   23524:	796a      	ldrb	r2, [r5, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   23526:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   2352a:	f8c6 3634 	str.w	r3, [r6, #1588]	; 0x634
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   2352e:	f7ff fe5d 	bl	231ec <qspi_ready_wait>
   23532:	4b11      	ldr	r3, [pc, #68]	; (23578 <nrfx_qspi_cinstr_xfer+0xac>)
   23534:	4298      	cmp	r0, r3
   23536:	d10a      	bne.n	2354e <nrfx_qspi_cinstr_xfer+0x82>
        NRFX_ASSERT(p_config->wipwait);
   23538:	792b      	ldrb	r3, [r5, #4]
   2353a:	b98b      	cbnz	r3, 23560 <nrfx_qspi_cinstr_xfer+0x94>
   2353c:	490b      	ldr	r1, [pc, #44]	; (2356c <nrfx_qspi_cinstr_xfer+0xa0>)
   2353e:	480c      	ldr	r0, [pc, #48]	; (23570 <nrfx_qspi_cinstr_xfer+0xa4>)
   23540:	f240 126b 	movw	r2, #363	; 0x16b
   23544:	f006 fd81 	bl	2a04a <assert_print>
   23548:	f240 116b 	movw	r1, #363	; 0x16b
   2354c:	e7cd      	b.n	234ea <nrfx_qspi_cinstr_xfer+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2354e:	2300      	movs	r3, #0
   23550:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
    if (p_rx_buffer)
   23554:	b11c      	cbz	r4, 2355e <nrfx_qspi_cinstr_xfer+0x92>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   23556:	7868      	ldrb	r0, [r5, #1]
   23558:	4621      	mov	r1, r4
   2355a:	f7ff fe71 	bl	23240 <nrf_qspi_cinstrdata_get.constprop.0>
    return NRFX_SUCCESS;
   2355e:	4807      	ldr	r0, [pc, #28]	; (2357c <nrfx_qspi_cinstr_xfer+0xb0>)
}
   23560:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_BUSY;
   23562:	4807      	ldr	r0, [pc, #28]	; (23580 <nrfx_qspi_cinstr_xfer+0xb4>)
   23564:	e7fc      	b.n	23560 <nrfx_qspi_cinstr_xfer+0x94>
   23566:	bf00      	nop
   23568:	20003540 	.word	0x20003540
   2356c:	00032fba 	.word	0x00032fba
   23570:	0002f2b5 	.word	0x0002f2b5
   23574:	40029000 	.word	0x40029000
   23578:	0bad0007 	.word	0x0bad0007
   2357c:	0bad0000 	.word	0x0bad0000
   23580:	0bad000b 	.word	0x0bad000b

00023584 <nrfx_qspi_mem_busy_check>:
{
   23584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_qspi_cinstr_conf_t const config = {
   23586:	4a0d      	ldr	r2, [pc, #52]	; (235bc <nrfx_qspi_mem_busy_check+0x38>)
   23588:	9202      	str	r2, [sp, #8]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2358a:	f10d 0207 	add.w	r2, sp, #7
    uint8_t status_value = 0;
   2358e:	2300      	movs	r3, #0
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   23590:	4611      	mov	r1, r2
   23592:	a802      	add	r0, sp, #8
    uint8_t status_value = 0;
   23594:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   23598:	f8ad 300c 	strh.w	r3, [sp, #12]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2359c:	f7ff ff96 	bl	234cc <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   235a0:	4b07      	ldr	r3, [pc, #28]	; (235c0 <nrfx_qspi_mem_busy_check+0x3c>)
   235a2:	4298      	cmp	r0, r3
   235a4:	d106      	bne.n	235b4 <nrfx_qspi_mem_busy_check+0x30>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   235a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        return NRFX_ERROR_BUSY;
   235aa:	f013 0f01 	tst.w	r3, #1
   235ae:	4b05      	ldr	r3, [pc, #20]	; (235c4 <nrfx_qspi_mem_busy_check+0x40>)
   235b0:	bf18      	it	ne
   235b2:	4618      	movne	r0, r3
}
   235b4:	b005      	add	sp, #20
   235b6:	f85d fb04 	ldr.w	pc, [sp], #4
   235ba:	bf00      	nop
   235bc:	01000205 	.word	0x01000205
   235c0:	0bad0000 	.word	0x0bad0000
   235c4:	0bad000b 	.word	0x0bad000b

000235c8 <nrfx_qspi_uninit>:
{
   235c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   235cc:	4e2d      	ldr	r6, [pc, #180]	; (23684 <nrfx_qspi_uninit+0xbc>)
   235ce:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   235d2:	b953      	cbnz	r3, 235ea <nrfx_qspi_uninit+0x22>
   235d4:	492c      	ldr	r1, [pc, #176]	; (23688 <nrfx_qspi_uninit+0xc0>)
   235d6:	482d      	ldr	r0, [pc, #180]	; (2368c <nrfx_qspi_uninit+0xc4>)
   235d8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   235dc:	f006 fd35 	bl	2a04a <assert_print>
   235e0:	4829      	ldr	r0, [pc, #164]	; (23688 <nrfx_qspi_uninit+0xc0>)
   235e2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   235e6:	f006 fd29 	bl	2a03c <assert_post_action>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   235ea:	2029      	movs	r0, #41	; 0x29
   235ec:	f7f1 fb0c 	bl	14c08 <arch_irq_disable>
                         (QSPI_CINSTRCONF_LFEN_Msk));
}

NRF_STATIC_INLINE bool nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI_Type const * p_reg)
{
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   235f0:	4b27      	ldr	r3, [pc, #156]	; (23690 <nrfx_qspi_uninit+0xc8>)
   235f2:	f8d3 2634 	ldr.w	r2, [r3, #1588]	; 0x634
   235f6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   235fa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
                                                              bool                  finalize)
{
    uint32_t mask = (((uint32_t)length << QSPI_CINSTRCONF_LENGTH_Pos) | (QSPI_CINSTRCONF_LFEN_Msk));
    mask |= (finalize ? QSPI_CINSTRCONF_LFSTOP_Msk : 0);

    p_reg->CINSTRCONF = mask;
   235fe:	bf04      	itt	eq
   23600:	4a24      	ldreq	r2, [pc, #144]	; (23694 <nrfx_qspi_uninit+0xcc>)
   23602:	f8c3 2634 	streq.w	r2, [r3, #1588]	; 0x634
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23606:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    p_reg->INTENCLR = mask;
   2360a:	2201      	movs	r2, #1
   2360c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23610:	611a      	str	r2, [r3, #16]
            if (var1 == 0x08)
   23612:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   23616:	2908      	cmp	r1, #8
        *(volatile uint32_t *)0x40029054ul = 1ul;
   23618:	bf08      	it	eq
   2361a:	655a      	streq	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   2361c:	4b1c      	ldr	r3, [pc, #112]	; (23690 <nrfx_qspi_uninit+0xc8>)
   2361e:	2200      	movs	r2, #0
   23620:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   23628:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
   2362c:	bb22      	cbnz	r2, 23678 <nrfx_qspi_uninit+0xb0>
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   2362e:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   23632:	f8d3 9528 	ldr.w	r9, [r3, #1320]	; 0x528
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   23636:	f8d3 8530 	ldr.w	r8, [r3, #1328]	; 0x530
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   2363a:	f8d3 7534 	ldr.w	r7, [r3, #1332]	; 0x534
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   2363e:	f8d3 5538 	ldr.w	r5, [r3, #1336]	; 0x538
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   23642:	f8d3 453c 	ldr.w	r4, [r3, #1340]	; 0x53c
    nrf_gpio_cfg_default(pins.sck_pin);
   23646:	b2c0      	uxtb	r0, r0
   23648:	f00a fb06 	bl	2dc58 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   2364c:	fa5f f089 	uxtb.w	r0, r9
   23650:	f00a fb02 	bl	2dc58 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   23654:	fa5f f088 	uxtb.w	r0, r8
   23658:	f00a fafe 	bl	2dc58 <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   2365c:	b2f8      	uxtb	r0, r7
   2365e:	f00a fafb 	bl	2dc58 <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   23662:	b2e8      	uxtb	r0, r5
   23664:	28ff      	cmp	r0, #255	; 0xff
   23666:	b2e4      	uxtb	r4, r4
   23668:	d001      	beq.n	2366e <nrfx_qspi_uninit+0xa6>
        nrf_gpio_cfg_default(pins.io2_pin);
   2366a:	f00a faf5 	bl	2dc58 <nrf_gpio_cfg_default>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2366e:	2cff      	cmp	r4, #255	; 0xff
   23670:	d002      	beq.n	23678 <nrfx_qspi_uninit+0xb0>
        nrf_gpio_cfg_default(pins.io3_pin);
   23672:	4620      	mov	r0, r4
   23674:	f00a faf0 	bl	2dc58 <nrf_gpio_cfg_default>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   23678:	2300      	movs	r3, #0
   2367a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
   2367e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23682:	bf00      	nop
   23684:	20003540 	.word	0x20003540
   23688:	00032fba 	.word	0x00032fba
   2368c:	0002f2b5 	.word	0x0002f2b5
   23690:	40029000 	.word	0x40029000
   23694:	00030100 	.word	0x00030100

00023698 <nrfx_qspi_erase>:
{
   23698:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2369a:	4a1a      	ldr	r2, [pc, #104]	; (23704 <nrfx_qspi_erase+0x6c>)
   2369c:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
   236a0:	b953      	cbnz	r3, 236b8 <nrfx_qspi_erase+0x20>
   236a2:	4919      	ldr	r1, [pc, #100]	; (23708 <nrfx_qspi_erase+0x70>)
   236a4:	4819      	ldr	r0, [pc, #100]	; (2370c <nrfx_qspi_erase+0x74>)
   236a6:	f44f 720a 	mov.w	r2, #552	; 0x228
   236aa:	f006 fcce 	bl	2a04a <assert_print>
   236ae:	4816      	ldr	r0, [pc, #88]	; (23708 <nrfx_qspi_erase+0x70>)
   236b0:	f44f 710a 	mov.w	r1, #552	; 0x228
   236b4:	f006 fcc2 	bl	2a03c <assert_post_action>
    if (!nrfx_is_word_aligned((void const *)start_address))
   236b8:	078c      	lsls	r4, r1, #30
   236ba:	d11e      	bne.n	236fa <nrfx_qspi_erase+0x62>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   236bc:	6814      	ldr	r4, [r2, #0]
   236be:	b10c      	cbz	r4, 236c4 <nrfx_qspi_erase+0x2c>
   236c0:	2b01      	cmp	r3, #1
   236c2:	d11c      	bne.n	236fe <nrfx_qspi_erase+0x66>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   236c4:	2304      	movs	r3, #4
   236c6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   236ca:	4b11      	ldr	r3, [pc, #68]	; (23710 <nrfx_qspi_erase+0x78>)
   236cc:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   236d0:	2100      	movs	r1, #0
    p_reg->ERASE.LEN = len;
   236d2:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   236d6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   236da:	2101      	movs	r1, #1
   236dc:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   236de:	6810      	ldr	r0, [r2, #0]
   236e0:	b940      	cbnz	r0, 236f4 <nrfx_qspi_erase+0x5c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   236e2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   236e6:	2900      	cmp	r1, #0
   236e8:	d0fb      	beq.n	236e2 <nrfx_qspi_erase+0x4a>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   236ea:	2301      	movs	r3, #1
   236ec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        return NRFX_ERROR_BUSY;
   236f0:	4808      	ldr	r0, [pc, #32]	; (23714 <nrfx_qspi_erase+0x7c>)
}
   236f2:	bd10      	pop	{r4, pc}
    p_reg->INTENSET = mask;
   236f4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
}
   236f8:	e7fa      	b.n	236f0 <nrfx_qspi_erase+0x58>
        return NRFX_ERROR_INVALID_ADDR;
   236fa:	4807      	ldr	r0, [pc, #28]	; (23718 <nrfx_qspi_erase+0x80>)
   236fc:	e7f9      	b.n	236f2 <nrfx_qspi_erase+0x5a>
        return NRFX_ERROR_BUSY;
   236fe:	4807      	ldr	r0, [pc, #28]	; (2371c <nrfx_qspi_erase+0x84>)
   23700:	e7f7      	b.n	236f2 <nrfx_qspi_erase+0x5a>
   23702:	bf00      	nop
   23704:	20003540 	.word	0x20003540
   23708:	00032fba 	.word	0x00032fba
   2370c:	0002f2b5 	.word	0x0002f2b5
   23710:	40029000 	.word	0x40029000
   23714:	0bad0000 	.word	0x0bad0000
   23718:	0bad000a 	.word	0x0bad000a
   2371c:	0bad000b 	.word	0x0bad000b

00023720 <nrfx_qspi_irq_handler>:
            break;
    }
}

void nrfx_qspi_irq_handler(void)
{
   23720:	b510      	push	{r4, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23722:	4b17      	ldr	r3, [pc, #92]	; (23780 <nrfx_qspi_irq_handler+0x60>)
   23724:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   23728:	b1e2      	cbz	r2, 23764 <nrfx_qspi_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2372a:	2200      	movs	r2, #0
    switch (m_cb.state)
   2372c:	4c15      	ldr	r4, [pc, #84]	; (23784 <nrfx_qspi_irq_handler+0x64>)
   2372e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23732:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   23736:	2a03      	cmp	r2, #3
   23738:	d015      	beq.n	23766 <nrfx_qspi_irq_handler+0x46>
   2373a:	2a04      	cmp	r2, #4
   2373c:	d015      	beq.n	2376a <nrfx_qspi_irq_handler+0x4a>
   2373e:	2a02      	cmp	r2, #2
   23740:	d104      	bne.n	2374c <nrfx_qspi_irq_handler+0x2c>
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   23742:	2301      	movs	r3, #1
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   23744:	f884 3020 	strb.w	r3, [r4, #32]
            qspi_event_xfer_handle(&p_event->data.xfer);
   23748:	f7ff fd66 	bl	23218 <qspi_event_xfer_handle.constprop.0>
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
        if (!m_cb.p_buffer_primary)
   2374c:	68a3      	ldr	r3, [r4, #8]
   2374e:	b913      	cbnz	r3, 23756 <nrfx_qspi_irq_handler+0x36>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   23750:	2301      	movs	r3, #1
   23752:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   23756:	e9d4 3100 	ldrd	r3, r1, [r4]
   2375a:	2000      	movs	r0, #0
   2375c:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2375e:	2300      	movs	r3, #0
   23760:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   23764:	bd10      	pop	{r4, pc}
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   23766:	2302      	movs	r3, #2
   23768:	e7ec      	b.n	23744 <nrfx_qspi_irq_handler+0x24>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   2376a:	2203      	movs	r2, #3
   2376c:	f884 2020 	strb.w	r2, [r4, #32]
    return p_reg->ERASE.PTR;
   23770:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   23774:	6262      	str	r2, [r4, #36]	; 0x24
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   23776:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2377a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   2377e:	e7e5      	b.n	2374c <nrfx_qspi_irq_handler+0x2c>
   23780:	40029000 	.word	0x40029000
   23784:	20003540 	.word	0x20003540

00023788 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   23788:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2378a:	4c14      	ldr	r4, [pc, #80]	; (237dc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2378c:	4a14      	ldr	r2, [pc, #80]	; (237e0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2378e:	4915      	ldr	r1, [pc, #84]	; (237e4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   23790:	2303      	movs	r3, #3
   23792:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   23794:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   23796:	4b14      	ldr	r3, [pc, #80]	; (237e8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
   23798:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   2379a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   2379c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   237a0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   237a2:	2300      	movs	r3, #0
   237a4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   237a6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   237a8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   237aa:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   237ac:	4a0f      	ldr	r2, [pc, #60]	; (237ec <_DoInit+0x64>)
   237ae:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   237b0:	2210      	movs	r2, #16
   237b2:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   237b4:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   237b6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   237b8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   237ba:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   237bc:	f007 fbba 	bl	2af34 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   237c0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   237c4:	490a      	ldr	r1, [pc, #40]	; (237f0 <_DoInit+0x68>)
   237c6:	4620      	mov	r0, r4
   237c8:	f007 fbb4 	bl	2af34 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   237cc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   237d0:	2320      	movs	r3, #32
   237d2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   237d4:	f3bf 8f5f 	dmb	sy
}
   237d8:	bd10      	pop	{r4, pc}
   237da:	bf00      	nop
   237dc:	20003574 	.word	0x20003574
   237e0:	00032ff6 	.word	0x00032ff6
   237e4:	00032fff 	.word	0x00032fff
   237e8:	20004343 	.word	0x20004343
   237ec:	20004333 	.word	0x20004333
   237f0:	00033003 	.word	0x00033003

000237f4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   237f4:	4b01      	ldr	r3, [pc, #4]	; (237fc <z_impl_z_errno+0x8>)
   237f6:	6898      	ldr	r0, [r3, #8]
}
   237f8:	3064      	adds	r0, #100	; 0x64
   237fa:	4770      	bx	lr
   237fc:	2000361c 	.word	0x2000361c

00023800 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   23800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23802:	4604      	mov	r4, r0
   23804:	460e      	mov	r6, r1
	__asm__ volatile(
   23806:	f04f 0340 	mov.w	r3, #64	; 0x40
   2380a:	f3ef 8711 	mrs	r7, BASEPRI
   2380e:	f383 8812 	msr	BASEPRI_MAX, r3
   23812:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   23816:	f002 fa37 	bl	25c88 <z_impl_z_current_get>
   2381a:	2c04      	cmp	r4, #4
   2381c:	bf96      	itet	ls
   2381e:	4b1e      	ldrls	r3, [pc, #120]	; (23898 <z_fatal_error+0x98>)
   23820:	4b1e      	ldrhi	r3, [pc, #120]	; (2389c <z_fatal_error+0x9c>)
   23822:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   23826:	2200      	movs	r2, #0
   23828:	4605      	mov	r5, r0
   2382a:	9200      	str	r2, [sp, #0]
   2382c:	481c      	ldr	r0, [pc, #112]	; (238a0 <z_fatal_error+0xa0>)
   2382e:	4622      	mov	r2, r4
   23830:	2145      	movs	r1, #69	; 0x45
   23832:	f006 fc18 	bl	2a066 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   23836:	b13e      	cbz	r6, 23848 <z_fatal_error+0x48>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   23838:	69f3      	ldr	r3, [r6, #28]
   2383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2383e:	b11b      	cbz	r3, 23848 <z_fatal_error+0x48>
		LOG_ERR("Fault during interrupt handling\n");
   23840:	4818      	ldr	r0, [pc, #96]	; (238a4 <z_fatal_error+0xa4>)
   23842:	2145      	movs	r1, #69	; 0x45
   23844:	f006 fc0f 	bl	2a066 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23848:	b135      	cbz	r5, 23858 <z_fatal_error+0x58>
   2384a:	4628      	mov	r0, r5
   2384c:	f00a fa69 	bl	2dd22 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   23850:	4603      	mov	r3, r0
   23852:	b108      	cbz	r0, 23858 <z_fatal_error+0x58>
   23854:	7802      	ldrb	r2, [r0, #0]
   23856:	b902      	cbnz	r2, 2385a <z_fatal_error+0x5a>
		thread_name = "unknown";
   23858:	4b13      	ldr	r3, [pc, #76]	; (238a8 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2385a:	4814      	ldr	r0, [pc, #80]	; (238ac <z_fatal_error+0xac>)
   2385c:	462a      	mov	r2, r5
   2385e:	2145      	movs	r1, #69	; 0x45
   23860:	f006 fc01 	bl	2a066 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   23864:	4631      	mov	r1, r6
   23866:	4620      	mov	r0, r4
   23868:	f7fd fd46 	bl	212f8 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2386c:	2c04      	cmp	r4, #4
   2386e:	d108      	bne.n	23882 <z_fatal_error+0x82>
   23870:	490f      	ldr	r1, [pc, #60]	; (238b0 <z_fatal_error+0xb0>)
   23872:	4810      	ldr	r0, [pc, #64]	; (238b4 <z_fatal_error+0xb4>)
   23874:	2293      	movs	r2, #147	; 0x93
   23876:	f006 fbe8 	bl	2a04a <assert_print>
   2387a:	480d      	ldr	r0, [pc, #52]	; (238b0 <z_fatal_error+0xb0>)
   2387c:	2193      	movs	r1, #147	; 0x93
   2387e:	f006 fbdd 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   23882:	f387 8811 	msr	BASEPRI, r7
   23886:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2388a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2388c:	b003      	add	sp, #12
   2388e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23892:	f7f1 bda7 	b.w	153e4 <z_impl_k_thread_abort>
   23896:	bf00      	nop
   23898:	0002ee8c 	.word	0x0002ee8c
   2389c:	0003300a 	.word	0x0003300a
   238a0:	00033018 	.word	0x00033018
   238a4:	00033045 	.word	0x00033045
   238a8:	00030770 	.word	0x00030770
   238ac:	0003306b 	.word	0x0003306b
   238b0:	00033088 	.word	0x00033088
   238b4:	0002f2b5 	.word	0x0002f2b5

000238b8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   238b8:	4b0f      	ldr	r3, [pc, #60]	; (238f8 <z_sys_init_run_level+0x40>)
{
   238ba:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   238bc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   238c0:	3001      	adds	r0, #1
   238c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   238c6:	42a6      	cmp	r6, r4
   238c8:	d800      	bhi.n	238cc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   238ca:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   238cc:	e9d4 3500 	ldrd	r3, r5, [r4]
   238d0:	4628      	mov	r0, r5
   238d2:	4798      	blx	r3
		if (dev != NULL) {
   238d4:	b16d      	cbz	r5, 238f2 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   238d6:	b138      	cbz	r0, 238e8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   238d8:	2800      	cmp	r0, #0
   238da:	bfb8      	it	lt
   238dc:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   238de:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   238e0:	28ff      	cmp	r0, #255	; 0xff
   238e2:	bfa8      	it	ge
   238e4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   238e6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   238e8:	68ea      	ldr	r2, [r5, #12]
   238ea:	7853      	ldrb	r3, [r2, #1]
   238ec:	f043 0301 	orr.w	r3, r3, #1
   238f0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   238f2:	3408      	adds	r4, #8
   238f4:	e7e7      	b.n	238c6 <z_sys_init_run_level+0xe>
   238f6:	bf00      	nop
   238f8:	0002eea0 	.word	0x0002eea0

000238fc <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   238fc:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   238fe:	4b0a      	ldr	r3, [pc, #40]	; (23928 <bg_thread_main+0x2c>)
   23900:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23902:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   23904:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   23906:	f7ff ffd7 	bl	238b8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2390a:	f003 f893 	bl	26a34 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2390e:	2004      	movs	r0, #4
   23910:	f7ff ffd2 	bl	238b8 <z_sys_init_run_level>

	z_init_static_threads();
   23914:	f000 faf8 	bl	23f08 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   23918:	f7ee fbca 	bl	120b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2391c:	4a03      	ldr	r2, [pc, #12]	; (2392c <bg_thread_main+0x30>)
   2391e:	7b13      	ldrb	r3, [r2, #12]
   23920:	f023 0301 	bic.w	r3, r3, #1
   23924:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   23926:	bd08      	pop	{r3, pc}
   23928:	20004743 	.word	0x20004743
   2392c:	20002860 	.word	0x20002860

00023930 <z_bss_zero>:
{
   23930:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   23932:	4803      	ldr	r0, [pc, #12]	; (23940 <z_bss_zero+0x10>)
   23934:	4a03      	ldr	r2, [pc, #12]	; (23944 <z_bss_zero+0x14>)
   23936:	2100      	movs	r1, #0
   23938:	1a12      	subs	r2, r2, r0
   2393a:	f00a f9b8 	bl	2dcae <z_early_memset>
}
   2393e:	bd08      	pop	{r3, pc}
   23940:	20000b30 	.word	0x20000b30
   23944:	20004744 	.word	0x20004744

00023948 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   23948:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   2394a:	2300      	movs	r3, #0
{
   2394c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2394e:	2201      	movs	r2, #1
   23950:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   23954:	4e13      	ldr	r6, [pc, #76]	; (239a4 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23956:	4d14      	ldr	r5, [pc, #80]	; (239a8 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   23958:	9301      	str	r3, [sp, #4]
   2395a:	220f      	movs	r2, #15
   2395c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   23960:	4912      	ldr	r1, [pc, #72]	; (239ac <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23962:	2318      	movs	r3, #24
   23964:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   23968:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   2396c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2396e:	f44f 70c0 	mov.w	r0, #384	; 0x180
   23972:	fb00 1104 	mla	r1, r0, r4, r1
   23976:	4b0e      	ldr	r3, [pc, #56]	; (239b0 <z_init_cpu+0x68>)
   23978:	9500      	str	r5, [sp, #0]
   2397a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2397e:	4630      	mov	r0, r6
   23980:	f000 fa38 	bl	23df4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23984:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23986:	4a0b      	ldr	r2, [pc, #44]	; (239b4 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   23988:	60ee      	str	r6, [r5, #12]
   2398a:	f023 0304 	bic.w	r3, r3, #4
   2398e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   23990:	f44f 6304 	mov.w	r3, #2112	; 0x840
   23994:	fb04 3303 	mla	r3, r4, r3, r3
   23998:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   2399a:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   2399c:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2399e:	b006      	add	sp, #24
   239a0:	bd70      	pop	{r4, r5, r6, pc}
   239a2:	bf00      	nop
   239a4:	200027e0 	.word	0x200027e0
   239a8:	2000361c 	.word	0x2000361c
   239ac:	20008dc0 	.word	0x20008dc0
   239b0:	00024045 	.word	0x00024045
   239b4:	20008580 	.word	0x20008580

000239b8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   239b8:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   239ba:	2000      	movs	r0, #0
{
   239bc:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   239be:	f7ff ff7b 	bl	238b8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   239c2:	4b2e      	ldr	r3, [pc, #184]	; (23a7c <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   239c4:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   239c8:	4c2d      	ldr	r4, [pc, #180]	; (23a80 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   239ca:	4e2e      	ldr	r6, [pc, #184]	; (23a84 <z_cstart+0xcc>)
   239cc:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   239ce:	4f2e      	ldr	r7, [pc, #184]	; (23a88 <z_cstart+0xd0>)
   239d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   239d4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   239d6:	23e0      	movs	r3, #224	; 0xe0
   239d8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   239dc:	2500      	movs	r5, #0
   239de:	2320      	movs	r3, #32
   239e0:	77e3      	strb	r3, [r4, #31]
   239e2:	7625      	strb	r5, [r4, #24]
   239e4:	7665      	strb	r5, [r4, #25]
   239e6:	76a5      	strb	r5, [r4, #26]
   239e8:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   239ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   239ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   239f2:	6263      	str	r3, [r4, #36]	; 0x24
   239f4:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   239f8:	f7f1 fc68 	bl	152cc <z_arm_fault_init>
	z_arm_cpu_idle_init();
   239fc:	f7f1 f8a8 	bl	14b50 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   23a00:	f04f 33ff 	mov.w	r3, #4294967295
   23a04:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   23a06:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   23a08:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   23a0a:	f7f1 fdc7 	bl	1559c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   23a0e:	f7f1 fcff 	bl	15410 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   23a12:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   23a16:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   23a18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   23a1c:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   23a20:	f002 ffea 	bl	269f8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   23a24:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23a26:	f00a f936 	bl	2dc96 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   23a2a:	2001      	movs	r0, #1
   23a2c:	f7ff ff44 	bl	238b8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23a30:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   23a32:	4c16      	ldr	r4, [pc, #88]	; (23a8c <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   23a34:	f7ff ff40 	bl	238b8 <z_sys_init_run_level>
	z_sched_init();
   23a38:	f001 fff0 	bl	25a1c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23a3c:	4b14      	ldr	r3, [pc, #80]	; (23a90 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   23a3e:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23a40:	9305      	str	r3, [sp, #20]
   23a42:	2301      	movs	r3, #1
   23a44:	4913      	ldr	r1, [pc, #76]	; (23a94 <z_cstart+0xdc>)
   23a46:	9500      	str	r5, [sp, #0]
   23a48:	e9cd 5303 	strd	r5, r3, [sp, #12]
   23a4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   23a50:	463b      	mov	r3, r7
   23a52:	e9cd 5501 	strd	r5, r5, [sp, #4]
   23a56:	4620      	mov	r0, r4
   23a58:	f000 f9cc 	bl	23df4 <z_setup_new_thread>
   23a5c:	7b62      	ldrb	r2, [r4, #13]
   23a5e:	4606      	mov	r6, r0
   23a60:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   23a64:	4620      	mov	r0, r4
   23a66:	7362      	strb	r2, [r4, #13]
   23a68:	f001 fb4a 	bl	25100 <z_ready_thread>
	z_init_cpu(0);
   23a6c:	4628      	mov	r0, r5
   23a6e:	f7ff ff6b 	bl	23948 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   23a72:	463a      	mov	r2, r7
   23a74:	4631      	mov	r1, r6
   23a76:	4620      	mov	r0, r4
   23a78:	f7f1 f9c6 	bl	14e08 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   23a7c:	20008dc0 	.word	0x20008dc0
   23a80:	e000ed00 	.word	0xe000ed00
   23a84:	2000361c 	.word	0x2000361c
   23a88:	000238fd 	.word	0x000238fd
   23a8c:	20002860 	.word	0x20002860
   23a90:	000330f4 	.word	0x000330f4
   23a94:	20008f40 	.word	0x20008f40

00023a98 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23a98:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23a9a:	4c0b      	ldr	r4, [pc, #44]	; (23ac8 <statics_init+0x30>)
   23a9c:	4d0b      	ldr	r5, [pc, #44]	; (23acc <statics_init+0x34>)
   23a9e:	42ac      	cmp	r4, r5
   23aa0:	d90f      	bls.n	23ac2 <statics_init+0x2a>
   23aa2:	490b      	ldr	r1, [pc, #44]	; (23ad0 <statics_init+0x38>)
   23aa4:	480b      	ldr	r0, [pc, #44]	; (23ad4 <statics_init+0x3c>)
   23aa6:	2218      	movs	r2, #24
   23aa8:	f006 facf 	bl	2a04a <assert_print>
   23aac:	4808      	ldr	r0, [pc, #32]	; (23ad0 <statics_init+0x38>)
   23aae:	2118      	movs	r1, #24
   23ab0:	f006 fac4 	bl	2a03c <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   23ab4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   23ab8:	4620      	mov	r0, r4
   23aba:	f00a f8fc 	bl	2dcb6 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23abe:	3418      	adds	r4, #24
   23ac0:	e7ed      	b.n	23a9e <statics_init+0x6>
   23ac2:	d3f7      	bcc.n	23ab4 <statics_init+0x1c>
		}
	}
	return 0;
}
   23ac4:	2000      	movs	r0, #0
   23ac6:	bd38      	pop	{r3, r4, r5, pc}
   23ac8:	20000900 	.word	0x20000900
   23acc:	20000918 	.word	0x20000918
   23ad0:	000330fc 	.word	0x000330fc
   23ad4:	0002f2b5 	.word	0x0002f2b5

00023ad8 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   23ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23adc:	b085      	sub	sp, #20
   23ade:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   23ae2:	4680      	mov	r8, r0
   23ae4:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23ae6:	4648      	mov	r0, r9
   23ae8:	4659      	mov	r1, fp
{
   23aea:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23aec:	f00a fa0e 	bl	2df0c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23af0:	f1bb 3fff 	cmp.w	fp, #4294967295
   23af4:	bf08      	it	eq
   23af6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23afa:	4605      	mov	r5, r0
   23afc:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   23afe:	bf04      	itt	eq
   23b00:	f04f 35ff 	moveq.w	r5, #4294967295
   23b04:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23b08:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   23b0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b10:	f3ef 8411 	mrs	r4, BASEPRI
   23b14:	f383 8812 	msr	BASEPRI_MAX, r3
   23b18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b1c:	4630      	mov	r0, r6
   23b1e:	f000 fa6b 	bl	23ff8 <z_spin_lock_valid>
   23b22:	b938      	cbnz	r0, 23b34 <k_heap_aligned_alloc+0x5c>
   23b24:	492c      	ldr	r1, [pc, #176]	; (23bd8 <k_heap_aligned_alloc+0x100>)
   23b26:	482d      	ldr	r0, [pc, #180]	; (23bdc <k_heap_aligned_alloc+0x104>)
   23b28:	2294      	movs	r2, #148	; 0x94
   23b2a:	f006 fa8e 	bl	2a04a <assert_print>
   23b2e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b30:	4829      	ldr	r0, [pc, #164]	; (23bd8 <k_heap_aligned_alloc+0x100>)
   23b32:	e027      	b.n	23b84 <k_heap_aligned_alloc+0xac>
	z_spin_lock_set_owner(l);
   23b34:	4630      	mov	r0, r6
   23b36:	f000 fa7d 	bl	24034 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23b3a:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   23b3e:	b113      	cbz	r3, 23b46 <k_heap_aligned_alloc+0x6e>
   23b40:	ea5b 0909 	orrs.w	r9, fp, r9
   23b44:	d117      	bne.n	23b76 <k_heap_aligned_alloc+0x9e>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23b46:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23b4a:	9903      	ldr	r1, [sp, #12]
   23b4c:	4652      	mov	r2, sl
   23b4e:	4640      	mov	r0, r8
   23b50:	f7ee fba2 	bl	12298 <sys_heap_aligned_alloc>
   23b54:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   23b56:	f002 fc47 	bl	263e8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23b5a:	f1b9 0f00 	cmp.w	r9, #0
   23b5e:	d013      	beq.n	23b88 <k_heap_aligned_alloc+0xb0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b60:	4630      	mov	r0, r6
   23b62:	f000 fa57 	bl	24014 <z_spin_unlock_valid>
   23b66:	bb70      	cbnz	r0, 23bc6 <k_heap_aligned_alloc+0xee>
   23b68:	491b      	ldr	r1, [pc, #108]	; (23bd8 <k_heap_aligned_alloc+0x100>)
   23b6a:	481c      	ldr	r0, [pc, #112]	; (23bdc <k_heap_aligned_alloc+0x104>)
   23b6c:	22c2      	movs	r2, #194	; 0xc2
   23b6e:	f006 fa6c 	bl	2a04a <assert_print>
   23b72:	21c2      	movs	r1, #194	; 0xc2
   23b74:	e7dc      	b.n	23b30 <k_heap_aligned_alloc+0x58>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   23b76:	491a      	ldr	r1, [pc, #104]	; (23be0 <k_heap_aligned_alloc+0x108>)
   23b78:	4818      	ldr	r0, [pc, #96]	; (23bdc <k_heap_aligned_alloc+0x104>)
   23b7a:	224c      	movs	r2, #76	; 0x4c
   23b7c:	f006 fa65 	bl	2a04a <assert_print>
   23b80:	4817      	ldr	r0, [pc, #92]	; (23be0 <k_heap_aligned_alloc+0x108>)
   23b82:	214c      	movs	r1, #76	; 0x4c
   23b84:	f006 fa5a 	bl	2a03c <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   23b88:	1a28      	subs	r0, r5, r0
   23b8a:	eb67 0101 	sbc.w	r1, r7, r1
   23b8e:	2801      	cmp	r0, #1
   23b90:	f171 0300 	sbcs.w	r3, r1, #0
   23b94:	dbe4      	blt.n	23b60 <k_heap_aligned_alloc+0x88>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   23b96:	e9cd 0100 	strd	r0, r1, [sp]
   23b9a:	465a      	mov	r2, fp
   23b9c:	4621      	mov	r1, r4
   23b9e:	4630      	mov	r0, r6
   23ba0:	f001 fd36 	bl	25610 <z_pend_curr>
   23ba4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23ba8:	f3ef 8411 	mrs	r4, BASEPRI
   23bac:	f383 8812 	msr	BASEPRI_MAX, r3
   23bb0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bb4:	4630      	mov	r0, r6
   23bb6:	f000 fa1f 	bl	23ff8 <z_spin_lock_valid>
   23bba:	2800      	cmp	r0, #0
   23bbc:	d0b2      	beq.n	23b24 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   23bbe:	4630      	mov	r0, r6
   23bc0:	f000 fa38 	bl	24034 <z_spin_lock_set_owner>
	return k;
   23bc4:	e7c1      	b.n	23b4a <k_heap_aligned_alloc+0x72>
	__asm__ volatile(
   23bc6:	f384 8811 	msr	BASEPRI, r4
   23bca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   23bce:	4648      	mov	r0, r9
   23bd0:	b005      	add	sp, #20
   23bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23bd6:	bf00      	nop
   23bd8:	0002f9fb 	.word	0x0002f9fb
   23bdc:	0002f2b5 	.word	0x0002f2b5
   23be0:	000330fc 	.word	0x000330fc

00023be4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23be6:	4604      	mov	r4, r0
   23be8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23bea:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   23bee:	f04f 0340 	mov.w	r3, #64	; 0x40
   23bf2:	f3ef 8711 	mrs	r7, BASEPRI
   23bf6:	f383 8812 	msr	BASEPRI_MAX, r3
   23bfa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bfe:	4628      	mov	r0, r5
   23c00:	f000 f9fa 	bl	23ff8 <z_spin_lock_valid>
   23c04:	b940      	cbnz	r0, 23c18 <k_heap_free+0x34>
   23c06:	4915      	ldr	r1, [pc, #84]	; (23c5c <k_heap_free+0x78>)
   23c08:	4815      	ldr	r0, [pc, #84]	; (23c60 <k_heap_free+0x7c>)
   23c0a:	2294      	movs	r2, #148	; 0x94
   23c0c:	f006 fa1d 	bl	2a04a <assert_print>
   23c10:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c12:	4812      	ldr	r0, [pc, #72]	; (23c5c <k_heap_free+0x78>)
   23c14:	f006 fa12 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   23c18:	4628      	mov	r0, r5
   23c1a:	f000 fa0b 	bl	24034 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   23c1e:	4620      	mov	r0, r4
   23c20:	4631      	mov	r1, r6
   23c22:	f7ee fb07 	bl	12234 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23c26:	f104 000c 	add.w	r0, r4, #12
   23c2a:	f00a f957 	bl	2dedc <z_unpend_all>
   23c2e:	b128      	cbz	r0, 23c3c <k_heap_free+0x58>
		z_reschedule(&h->lock, key);
   23c30:	4639      	mov	r1, r7
   23c32:	4628      	mov	r0, r5
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23c34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   23c38:	f001 ba96 	b.w	25168 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c3c:	4628      	mov	r0, r5
   23c3e:	f000 f9e9 	bl	24014 <z_spin_unlock_valid>
   23c42:	b930      	cbnz	r0, 23c52 <k_heap_free+0x6e>
   23c44:	4905      	ldr	r1, [pc, #20]	; (23c5c <k_heap_free+0x78>)
   23c46:	4806      	ldr	r0, [pc, #24]	; (23c60 <k_heap_free+0x7c>)
   23c48:	22c2      	movs	r2, #194	; 0xc2
   23c4a:	f006 f9fe 	bl	2a04a <assert_print>
   23c4e:	21c2      	movs	r1, #194	; 0xc2
   23c50:	e7df      	b.n	23c12 <k_heap_free+0x2e>
	__asm__ volatile(
   23c52:	f387 8811 	msr	BASEPRI, r7
   23c56:	f3bf 8f6f 	isb	sy
}
   23c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23c5c:	0002f9fb 	.word	0x0002f9fb
   23c60:	0002f2b5 	.word	0x0002f2b5

00023c64 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   23c64:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23c66:	4c0b      	ldr	r4, [pc, #44]	; (23c94 <init_mem_slab_module+0x30>)
   23c68:	4d0b      	ldr	r5, [pc, #44]	; (23c98 <init_mem_slab_module+0x34>)
	int rc = 0;
   23c6a:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23c6c:	42ac      	cmp	r4, r5
   23c6e:	d90f      	bls.n	23c90 <init_mem_slab_module+0x2c>
   23c70:	490a      	ldr	r1, [pc, #40]	; (23c9c <init_mem_slab_module+0x38>)
   23c72:	480b      	ldr	r0, [pc, #44]	; (23ca0 <init_mem_slab_module+0x3c>)
   23c74:	223d      	movs	r2, #61	; 0x3d
   23c76:	f006 f9e8 	bl	2a04a <assert_print>
   23c7a:	4808      	ldr	r0, [pc, #32]	; (23c9c <init_mem_slab_module+0x38>)
   23c7c:	213d      	movs	r1, #61	; 0x3d
   23c7e:	f006 f9dd 	bl	2a03c <assert_post_action>
		rc = create_free_list(slab);
   23c82:	4620      	mov	r0, r4
   23c84:	f00a f81f 	bl	2dcc6 <create_free_list>
		if (rc < 0) {
   23c88:	2800      	cmp	r0, #0
   23c8a:	db02      	blt.n	23c92 <init_mem_slab_module+0x2e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23c8c:	3420      	adds	r4, #32
   23c8e:	e7ed      	b.n	23c6c <init_mem_slab_module+0x8>
   23c90:	d3f7      	bcc.n	23c82 <init_mem_slab_module+0x1e>
		z_object_init(slab);
	}

out:
	return rc;
}
   23c92:	bd38      	pop	{r3, r4, r5, pc}
   23c94:	200008a0 	.word	0x200008a0
   23c98:	20000900 	.word	0x20000900
   23c9c:	0003311e 	.word	0x0003311e
   23ca0:	0002f2b5 	.word	0x0002f2b5

00023ca4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23ca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23ca8:	4604      	mov	r4, r0
   23caa:	460d      	mov	r5, r1
   23cac:	4690      	mov	r8, r2
   23cae:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23cb0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   23cb8:	f3ef 8911 	mrs	r9, BASEPRI
   23cbc:	f383 8812 	msr	BASEPRI_MAX, r3
   23cc0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cc4:	4630      	mov	r0, r6
   23cc6:	f000 f997 	bl	23ff8 <z_spin_lock_valid>
   23cca:	b940      	cbnz	r0, 23cde <k_mem_slab_alloc+0x3a>
   23ccc:	491e      	ldr	r1, [pc, #120]	; (23d48 <k_mem_slab_alloc+0xa4>)
   23cce:	481f      	ldr	r0, [pc, #124]	; (23d4c <k_mem_slab_alloc+0xa8>)
   23cd0:	2294      	movs	r2, #148	; 0x94
   23cd2:	f006 f9ba 	bl	2a04a <assert_print>
   23cd6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cd8:	481b      	ldr	r0, [pc, #108]	; (23d48 <k_mem_slab_alloc+0xa4>)
   23cda:	f006 f9af 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   23cde:	4630      	mov	r0, r6
   23ce0:	f000 f9a8 	bl	24034 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23ce4:	69a3      	ldr	r3, [r4, #24]
   23ce6:	b18b      	cbz	r3, 23d0c <k_mem_slab_alloc+0x68>
		/* take a free block */
		*mem = slab->free_list;
   23ce8:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
   23cea:	681b      	ldr	r3, [r3, #0]
   23cec:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   23cee:	69e3      	ldr	r3, [r4, #28]
   23cf0:	3301      	adds	r3, #1
   23cf2:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23cf4:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cf6:	4630      	mov	r0, r6
   23cf8:	f000 f98c 	bl	24014 <z_spin_unlock_valid>
   23cfc:	b9f0      	cbnz	r0, 23d3c <k_mem_slab_alloc+0x98>
   23cfe:	4912      	ldr	r1, [pc, #72]	; (23d48 <k_mem_slab_alloc+0xa4>)
   23d00:	4812      	ldr	r0, [pc, #72]	; (23d4c <k_mem_slab_alloc+0xa8>)
   23d02:	22c2      	movs	r2, #194	; 0xc2
   23d04:	f006 f9a1 	bl	2a04a <assert_print>
   23d08:	21c2      	movs	r1, #194	; 0xc2
   23d0a:	e7e5      	b.n	23cd8 <k_mem_slab_alloc+0x34>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23d0c:	ea58 0207 	orrs.w	r2, r8, r7
   23d10:	d103      	bne.n	23d1a <k_mem_slab_alloc+0x76>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   23d12:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
   23d14:	f06f 040b 	mvn.w	r4, #11
   23d18:	e7ed      	b.n	23cf6 <k_mem_slab_alloc+0x52>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   23d1a:	4622      	mov	r2, r4
   23d1c:	e9cd 8700 	strd	r8, r7, [sp]
   23d20:	4649      	mov	r1, r9
   23d22:	4630      	mov	r0, r6
   23d24:	f001 fc74 	bl	25610 <z_pend_curr>
		if (result == 0) {
   23d28:	4604      	mov	r4, r0
   23d2a:	b918      	cbnz	r0, 23d34 <k_mem_slab_alloc+0x90>
			*mem = _current->base.swap_data;
   23d2c:	4b08      	ldr	r3, [pc, #32]	; (23d50 <k_mem_slab_alloc+0xac>)
   23d2e:	689b      	ldr	r3, [r3, #8]
   23d30:	695b      	ldr	r3, [r3, #20]
   23d32:	602b      	str	r3, [r5, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   23d34:	4620      	mov	r0, r4
   23d36:	b003      	add	sp, #12
   23d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   23d3c:	f389 8811 	msr	BASEPRI, r9
   23d40:	f3bf 8f6f 	isb	sy
	return result;
   23d44:	e7f6      	b.n	23d34 <k_mem_slab_alloc+0x90>
   23d46:	bf00      	nop
   23d48:	0002f9fb 	.word	0x0002f9fb
   23d4c:	0002f2b5 	.word	0x0002f2b5
   23d50:	2000361c 	.word	0x2000361c

00023d54 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d58:	4604      	mov	r4, r0
   23d5a:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23d5c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   23d60:	f04f 0340 	mov.w	r3, #64	; 0x40
   23d64:	f3ef 8711 	mrs	r7, BASEPRI
   23d68:	f383 8812 	msr	BASEPRI_MAX, r3
   23d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d70:	4630      	mov	r0, r6
   23d72:	f000 f941 	bl	23ff8 <z_spin_lock_valid>
   23d76:	b940      	cbnz	r0, 23d8a <k_mem_slab_free+0x36>
   23d78:	491c      	ldr	r1, [pc, #112]	; (23dec <k_mem_slab_free+0x98>)
   23d7a:	481d      	ldr	r0, [pc, #116]	; (23df0 <k_mem_slab_free+0x9c>)
   23d7c:	2294      	movs	r2, #148	; 0x94
   23d7e:	f006 f964 	bl	2a04a <assert_print>
   23d82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d84:	4819      	ldr	r0, [pc, #100]	; (23dec <k_mem_slab_free+0x98>)
   23d86:	f006 f959 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   23d8a:	4630      	mov	r0, r6
   23d8c:	f000 f952 	bl	24034 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23d90:	f8d4 8018 	ldr.w	r8, [r4, #24]
   23d94:	f1b8 0f00 	cmp.w	r8, #0
   23d98:	d10f      	bne.n	23dba <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23d9a:	4620      	mov	r0, r4
   23d9c:	f001 fe00 	bl	259a0 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23da0:	b158      	cbz	r0, 23dba <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23da2:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23da4:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23da6:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   23daa:	f001 f9a9 	bl	25100 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23dae:	4639      	mov	r1, r7
   23db0:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   23db6:	f001 b9d7 	b.w	25168 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23dba:	682b      	ldr	r3, [r5, #0]
   23dbc:	69a2      	ldr	r2, [r4, #24]
   23dbe:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23dc0:	682b      	ldr	r3, [r5, #0]
   23dc2:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   23dc4:	69e3      	ldr	r3, [r4, #28]
   23dc6:	3b01      	subs	r3, #1
   23dc8:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23dca:	4630      	mov	r0, r6
   23dcc:	f000 f922 	bl	24014 <z_spin_unlock_valid>
   23dd0:	b930      	cbnz	r0, 23de0 <k_mem_slab_free+0x8c>
   23dd2:	4906      	ldr	r1, [pc, #24]	; (23dec <k_mem_slab_free+0x98>)
   23dd4:	4806      	ldr	r0, [pc, #24]	; (23df0 <k_mem_slab_free+0x9c>)
   23dd6:	22c2      	movs	r2, #194	; 0xc2
   23dd8:	f006 f937 	bl	2a04a <assert_print>
   23ddc:	21c2      	movs	r1, #194	; 0xc2
   23dde:	e7d1      	b.n	23d84 <k_mem_slab_free+0x30>
	__asm__ volatile(
   23de0:	f387 8811 	msr	BASEPRI, r7
   23de4:	f3bf 8f6f 	isb	sy
}
   23de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dec:	0002f9fb 	.word	0x0002f9fb
   23df0:	0002f2b5 	.word	0x0002f2b5

00023df4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   23df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   23df6:	b085      	sub	sp, #20
   23df8:	4604      	mov	r4, r0
   23dfa:	980d      	ldr	r0, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   23dfc:	280f      	cmp	r0, #15
   23dfe:	d12e      	bne.n	23e5e <z_setup_new_thread+0x6a>
   23e00:	4d1e      	ldr	r5, [pc, #120]	; (23e7c <z_setup_new_thread+0x88>)
   23e02:	42ab      	cmp	r3, r5
   23e04:	d12f      	bne.n	23e66 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23e06:	f104 0558 	add.w	r5, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   23e0a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   23e0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23e10:	7325      	strb	r5, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23e12:	3207      	adds	r2, #7
	thread_base->thread_state = (uint8_t)initial_state;
   23e14:	2504      	movs	r5, #4
   23e16:	7365      	strb	r5, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23e18:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   23e1c:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   23e20:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   23e24:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->prio = priority;
   23e28:	73a0      	strb	r0, [r4, #14]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   23e2a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   23e2e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
   23e30:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   23e32:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23e34:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23e38:	9202      	str	r2, [sp, #8]
   23e3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23e3c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   23e3e:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23e40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   23e42:	9200      	str	r2, [sp, #0]
   23e44:	4620      	mov	r0, r4
   23e46:	463a      	mov	r2, r7
   23e48:	f7f0 ffac 	bl	14da4 <arch_new_thread>
	if (!_current) {
   23e4c:	4b0c      	ldr	r3, [pc, #48]	; (23e80 <z_setup_new_thread+0x8c>)
	new_thread->init_data = NULL;
   23e4e:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   23e50:	689b      	ldr	r3, [r3, #8]
   23e52:	b103      	cbz	r3, 23e56 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   23e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   23e56:	6763      	str	r3, [r4, #116]	; 0x74
}
   23e58:	4638      	mov	r0, r7
   23e5a:	b005      	add	sp, #20
   23e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   23e5e:	f100 0510 	add.w	r5, r0, #16
   23e62:	2d1e      	cmp	r5, #30
   23e64:	d9cf      	bls.n	23e06 <z_setup_new_thread+0x12>
   23e66:	4907      	ldr	r1, [pc, #28]	; (23e84 <z_setup_new_thread+0x90>)
   23e68:	4807      	ldr	r0, [pc, #28]	; (23e88 <z_setup_new_thread+0x94>)
   23e6a:	f44f 7206 	mov.w	r2, #536	; 0x218
   23e6e:	f006 f8ec 	bl	2a04a <assert_print>
   23e72:	4804      	ldr	r0, [pc, #16]	; (23e84 <z_setup_new_thread+0x90>)
   23e74:	f44f 7106 	mov.w	r1, #536	; 0x218
   23e78:	f006 f8e0 	bl	2a03c <assert_post_action>
   23e7c:	00024045 	.word	0x00024045
   23e80:	2000361c 	.word	0x2000361c
   23e84:	00033143 	.word	0x00033143
   23e88:	0002f2b5 	.word	0x0002f2b5

00023e8c <z_impl_k_thread_create>:
{
   23e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e8e:	b087      	sub	sp, #28
   23e90:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   23e94:	4604      	mov	r4, r0
   23e96:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   23e9a:	b155      	cbz	r5, 23eb2 <z_impl_k_thread_create+0x26>
   23e9c:	4917      	ldr	r1, [pc, #92]	; (23efc <z_impl_k_thread_create+0x70>)
   23e9e:	4818      	ldr	r0, [pc, #96]	; (23f00 <z_impl_k_thread_create+0x74>)
   23ea0:	f240 2287 	movw	r2, #647	; 0x287
   23ea4:	f006 f8d1 	bl	2a04a <assert_print>
   23ea8:	4814      	ldr	r0, [pc, #80]	; (23efc <z_impl_k_thread_create+0x70>)
   23eaa:	f240 2187 	movw	r1, #647	; 0x287
   23eae:	f006 f8c5 	bl	2a03c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   23eb2:	9505      	str	r5, [sp, #20]
   23eb4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   23eb6:	9504      	str	r5, [sp, #16]
   23eb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   23eba:	9503      	str	r5, [sp, #12]
   23ebc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   23ebe:	9502      	str	r5, [sp, #8]
   23ec0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   23ec2:	9501      	str	r5, [sp, #4]
   23ec4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23ec6:	9500      	str	r5, [sp, #0]
   23ec8:	f7ff ff94 	bl	23df4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   23ecc:	f1b6 3fff 	cmp.w	r6, #4294967295
   23ed0:	bf08      	it	eq
   23ed2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   23ed6:	d005      	beq.n	23ee4 <z_impl_k_thread_create+0x58>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23ed8:	ea56 0307 	orrs.w	r3, r6, r7
   23edc:	d105      	bne.n	23eea <z_impl_k_thread_create+0x5e>
	z_sched_start(thread);
   23ede:	4620      	mov	r0, r4
   23ee0:	f001 f976 	bl	251d0 <z_sched_start>
}
   23ee4:	4620      	mov	r0, r4
   23ee6:	b007      	add	sp, #28
   23ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   23eea:	4906      	ldr	r1, [pc, #24]	; (23f04 <z_impl_k_thread_create+0x78>)
   23eec:	463a      	mov	r2, r7
   23eee:	4633      	mov	r3, r6
   23ef0:	f104 0018 	add.w	r0, r4, #24
   23ef4:	f002 f85a 	bl	25fac <z_add_timeout>
   23ef8:	e7f4      	b.n	23ee4 <z_impl_k_thread_create+0x58>
   23efa:	bf00      	nop
   23efc:	00033143 	.word	0x00033143
   23f00:	0002f2b5 	.word	0x0002f2b5
   23f04:	00025915 	.word	0x00025915

00023f08 <z_init_static_threads>:
{
   23f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23f0c:	4c35      	ldr	r4, [pc, #212]	; (23fe4 <z_init_static_threads+0xdc>)
	_FOREACH_STATIC_THREAD(thread_data) {
   23f0e:	4d36      	ldr	r5, [pc, #216]	; (23fe8 <z_init_static_threads+0xe0>)
{
   23f10:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   23f12:	42ac      	cmp	r4, r5
   23f14:	4626      	mov	r6, r4
   23f16:	d926      	bls.n	23f66 <z_init_static_threads+0x5e>
   23f18:	4934      	ldr	r1, [pc, #208]	; (23fec <z_init_static_threads+0xe4>)
   23f1a:	4835      	ldr	r0, [pc, #212]	; (23ff0 <z_init_static_threads+0xe8>)
   23f1c:	f240 22ee 	movw	r2, #750	; 0x2ee
   23f20:	f006 f893 	bl	2a04a <assert_print>
   23f24:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
   23f28:	4830      	ldr	r0, [pc, #192]	; (23fec <z_init_static_threads+0xe4>)
   23f2a:	f006 f887 	bl	2a03c <assert_post_action>
		z_setup_new_thread(
   23f2e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23f32:	9305      	str	r3, [sp, #20]
   23f34:	f854 3c10 	ldr.w	r3, [r4, #-16]
   23f38:	9304      	str	r3, [sp, #16]
   23f3a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   23f3e:	9303      	str	r3, [sp, #12]
   23f40:	f854 3c18 	ldr.w	r3, [r4, #-24]
   23f44:	9302      	str	r3, [sp, #8]
   23f46:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   23f4a:	9301      	str	r3, [sp, #4]
   23f4c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   23f50:	9300      	str	r3, [sp, #0]
   23f52:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   23f56:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   23f5a:	f7ff ff4b 	bl	23df4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   23f5e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   23f62:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   23f64:	e7d5      	b.n	23f12 <z_init_static_threads+0xa>
   23f66:	42ae      	cmp	r6, r5
   23f68:	f104 0430 	add.w	r4, r4, #48	; 0x30
   23f6c:	d3df      	bcc.n	23f2e <z_init_static_threads+0x26>
	k_sched_lock();
   23f6e:	f001 f96f 	bl	25250 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   23f72:	4c1c      	ldr	r4, [pc, #112]	; (23fe4 <z_init_static_threads+0xdc>)
   23f74:	f8df 907c 	ldr.w	r9, [pc, #124]	; 23ff4 <z_init_static_threads+0xec>
   23f78:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   23f7c:	f240 37e7 	movw	r7, #999	; 0x3e7
   23f80:	42ac      	cmp	r4, r5
   23f82:	d928      	bls.n	23fd6 <z_init_static_threads+0xce>
   23f84:	4919      	ldr	r1, [pc, #100]	; (23fec <z_init_static_threads+0xe4>)
   23f86:	481a      	ldr	r0, [pc, #104]	; (23ff0 <z_init_static_threads+0xe8>)
   23f88:	f240 320d 	movw	r2, #781	; 0x30d
   23f8c:	f006 f85d 	bl	2a04a <assert_print>
   23f90:	f240 310d 	movw	r1, #781	; 0x30d
   23f94:	e7c8      	b.n	23f28 <z_init_static_threads+0x20>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   23f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23f98:	1c5a      	adds	r2, r3, #1
   23f9a:	d00d      	beq.n	23fb8 <z_init_static_threads+0xb0>
					    K_MSEC(thread_data->init_delay));
   23f9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23fa0:	2100      	movs	r1, #0
   23fa2:	4638      	mov	r0, r7
   23fa4:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23fa8:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   23fac:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   23fb0:	d104      	bne.n	23fbc <z_init_static_threads+0xb4>
	z_sched_start(thread);
   23fb2:	4640      	mov	r0, r8
   23fb4:	f001 f90c 	bl	251d0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   23fb8:	3430      	adds	r4, #48	; 0x30
   23fba:	e7e1      	b.n	23f80 <z_init_static_threads+0x78>
   23fbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23fc0:	2300      	movs	r3, #0
   23fc2:	f7dc f89d 	bl	100 <__aeabi_uldivmod>
   23fc6:	4602      	mov	r2, r0
   23fc8:	460b      	mov	r3, r1
   23fca:	f108 0018 	add.w	r0, r8, #24
   23fce:	4649      	mov	r1, r9
   23fd0:	f001 ffec 	bl	25fac <z_add_timeout>
   23fd4:	e7f0      	b.n	23fb8 <z_init_static_threads+0xb0>
   23fd6:	d3de      	bcc.n	23f96 <z_init_static_threads+0x8e>
}
   23fd8:	b007      	add	sp, #28
   23fda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   23fde:	f001 b983 	b.w	252e8 <k_sched_unlock>
   23fe2:	bf00      	nop
   23fe4:	0002e40c 	.word	0x0002e40c
   23fe8:	0002e40c 	.word	0x0002e40c
   23fec:	00033143 	.word	0x00033143
   23ff0:	0002f2b5 	.word	0x0002f2b5
   23ff4:	00025915 	.word	0x00025915

00023ff8 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   23ff8:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   23ffa:	b138      	cbz	r0, 2400c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   23ffc:	4b04      	ldr	r3, [pc, #16]	; (24010 <z_spin_lock_valid+0x18>)
   23ffe:	7d1b      	ldrb	r3, [r3, #20]
   24000:	f000 0003 	and.w	r0, r0, #3
   24004:	1ac0      	subs	r0, r0, r3
   24006:	bf18      	it	ne
   24008:	2001      	movne	r0, #1
   2400a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2400c:	2001      	movs	r0, #1
}
   2400e:	4770      	bx	lr
   24010:	2000361c 	.word	0x2000361c

00024014 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24014:	4a06      	ldr	r2, [pc, #24]	; (24030 <z_spin_unlock_valid+0x1c>)
   24016:	7d11      	ldrb	r1, [r2, #20]
   24018:	6892      	ldr	r2, [r2, #8]
   2401a:	430a      	orrs	r2, r1
   2401c:	6801      	ldr	r1, [r0, #0]
{
   2401e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24020:	4291      	cmp	r1, r2
   24022:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   24026:	bf04      	itt	eq
   24028:	6018      	streq	r0, [r3, #0]
	return true;
   2402a:	2001      	moveq	r0, #1
}
   2402c:	4770      	bx	lr
   2402e:	bf00      	nop
   24030:	2000361c 	.word	0x2000361c

00024034 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24034:	4b02      	ldr	r3, [pc, #8]	; (24040 <z_spin_lock_set_owner+0xc>)
   24036:	7d1a      	ldrb	r2, [r3, #20]
   24038:	689b      	ldr	r3, [r3, #8]
   2403a:	4313      	orrs	r3, r2
   2403c:	6003      	str	r3, [r0, #0]
}
   2403e:	4770      	bx	lr
   24040:	2000361c 	.word	0x2000361c

00024044 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   24044:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24046:	4c12      	ldr	r4, [pc, #72]	; (24090 <idle+0x4c>)
   24048:	68a3      	ldr	r3, [r4, #8]
   2404a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2404e:	2b00      	cmp	r3, #0
   24050:	db10      	blt.n	24074 <idle+0x30>
	return !z_sys_post_kernel;
   24052:	4d10      	ldr	r5, [pc, #64]	; (24094 <idle+0x50>)
	__asm__ volatile(
   24054:	f04f 0240 	mov.w	r2, #64	; 0x40
   24058:	f3ef 8311 	mrs	r3, BASEPRI
   2405c:	f382 8812 	msr	BASEPRI_MAX, r2
   24060:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24064:	f002 f8c0 	bl	261e8 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24068:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2406a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2406c:	b95b      	cbnz	r3, 24086 <idle+0x42>
	arch_cpu_idle();
   2406e:	f7f0 fd75 	bl	14b5c <arch_cpu_idle>
}
   24072:	e7ef      	b.n	24054 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   24074:	4908      	ldr	r1, [pc, #32]	; (24098 <idle+0x54>)
   24076:	4809      	ldr	r0, [pc, #36]	; (2409c <idle+0x58>)
   24078:	2227      	movs	r2, #39	; 0x27
   2407a:	f005 ffe6 	bl	2a04a <assert_print>
   2407e:	4806      	ldr	r0, [pc, #24]	; (24098 <idle+0x54>)
   24080:	2127      	movs	r1, #39	; 0x27
   24082:	f005 ffdb 	bl	2a03c <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24086:	f7ef febf 	bl	13e08 <pm_system_suspend>
   2408a:	2800      	cmp	r0, #0
   2408c:	d1e2      	bne.n	24054 <idle+0x10>
   2408e:	e7ee      	b.n	2406e <idle+0x2a>
   24090:	2000361c 	.word	0x2000361c
   24094:	20004743 	.word	0x20004743
   24098:	00033166 	.word	0x00033166
   2409c:	0002f2b5 	.word	0x0002f2b5

000240a0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   240a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   240a4:	4604      	mov	r4, r0
   240a6:	4617      	mov	r7, r2
   240a8:	461e      	mov	r6, r3
   240aa:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   240ae:	b145      	cbz	r5, 240c2 <z_impl_k_mutex_lock+0x22>
   240b0:	4951      	ldr	r1, [pc, #324]	; (241f8 <z_impl_k_mutex_lock+0x158>)
   240b2:	4852      	ldr	r0, [pc, #328]	; (241fc <z_impl_k_mutex_lock+0x15c>)
   240b4:	2265      	movs	r2, #101	; 0x65
   240b6:	f005 ffc8 	bl	2a04a <assert_print>
   240ba:	484f      	ldr	r0, [pc, #316]	; (241f8 <z_impl_k_mutex_lock+0x158>)
   240bc:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   240be:	f005 ffbd 	bl	2a03c <assert_post_action>
   240c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   240c6:	f3ef 8811 	mrs	r8, BASEPRI
   240ca:	f383 8812 	msr	BASEPRI_MAX, r3
   240ce:	f3bf 8f6f 	isb	sy
   240d2:	484b      	ldr	r0, [pc, #300]	; (24200 <z_impl_k_mutex_lock+0x160>)
   240d4:	f7ff ff90 	bl	23ff8 <z_spin_lock_valid>
   240d8:	b938      	cbnz	r0, 240ea <z_impl_k_mutex_lock+0x4a>
   240da:	494a      	ldr	r1, [pc, #296]	; (24204 <z_impl_k_mutex_lock+0x164>)
   240dc:	4847      	ldr	r0, [pc, #284]	; (241fc <z_impl_k_mutex_lock+0x15c>)
   240de:	2294      	movs	r2, #148	; 0x94
   240e0:	f005 ffb3 	bl	2a04a <assert_print>
   240e4:	2194      	movs	r1, #148	; 0x94
   240e6:	4847      	ldr	r0, [pc, #284]	; (24204 <z_impl_k_mutex_lock+0x164>)
   240e8:	e7e9      	b.n	240be <z_impl_k_mutex_lock+0x1e>
	z_spin_lock_set_owner(l);
   240ea:	4845      	ldr	r0, [pc, #276]	; (24200 <z_impl_k_mutex_lock+0x160>)
   240ec:	f7ff ffa2 	bl	24034 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   240f0:	68e3      	ldr	r3, [r4, #12]
   240f2:	4a45      	ldr	r2, [pc, #276]	; (24208 <z_impl_k_mutex_lock+0x168>)
   240f4:	b19b      	cbz	r3, 2411e <z_impl_k_mutex_lock+0x7e>
   240f6:	68a0      	ldr	r0, [r4, #8]
   240f8:	6891      	ldr	r1, [r2, #8]
   240fa:	4288      	cmp	r0, r1
   240fc:	d022      	beq.n	24144 <z_impl_k_mutex_lock+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   240fe:	ea57 0306 	orrs.w	r3, r7, r6
   24102:	d127      	bne.n	24154 <z_impl_k_mutex_lock+0xb4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24104:	483e      	ldr	r0, [pc, #248]	; (24200 <z_impl_k_mutex_lock+0x160>)
   24106:	f7ff ff85 	bl	24014 <z_spin_unlock_valid>
   2410a:	b1a0      	cbz	r0, 24136 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   2410c:	f388 8811 	msr	BASEPRI, r8
   24110:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   24114:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24118:	b002      	add	sp, #8
   2411a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2411e:	6891      	ldr	r1, [r2, #8]
   24120:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24124:	4836      	ldr	r0, [pc, #216]	; (24200 <z_impl_k_mutex_lock+0x160>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   24126:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   24128:	3301      	adds	r3, #1
   2412a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2412c:	6893      	ldr	r3, [r2, #8]
   2412e:	60a3      	str	r3, [r4, #8]
   24130:	f7ff ff70 	bl	24014 <z_spin_unlock_valid>
   24134:	b940      	cbnz	r0, 24148 <z_impl_k_mutex_lock+0xa8>
   24136:	4933      	ldr	r1, [pc, #204]	; (24204 <z_impl_k_mutex_lock+0x164>)
   24138:	4830      	ldr	r0, [pc, #192]	; (241fc <z_impl_k_mutex_lock+0x15c>)
   2413a:	22c2      	movs	r2, #194	; 0xc2
   2413c:	f005 ff85 	bl	2a04a <assert_print>
   24140:	21c2      	movs	r1, #194	; 0xc2
   24142:	e7d0      	b.n	240e6 <z_impl_k_mutex_lock+0x46>
					_current->base.prio :
   24144:	6921      	ldr	r1, [r4, #16]
   24146:	e7ed      	b.n	24124 <z_impl_k_mutex_lock+0x84>
   24148:	f388 8811 	msr	BASEPRI, r8
   2414c:	f3bf 8f6f 	isb	sy
		return 0;
   24150:	2000      	movs	r0, #0
   24152:	e7e1      	b.n	24118 <z_impl_k_mutex_lock+0x78>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   24154:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24158:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2415c:	4299      	cmp	r1, r3
   2415e:	bfa8      	it	ge
   24160:	4619      	movge	r1, r3
   24162:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   24166:	4291      	cmp	r1, r2
   24168:	bfb8      	it	lt
   2416a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2416c:	428b      	cmp	r3, r1
   2416e:	dd02      	ble.n	24176 <z_impl_k_mutex_lock+0xd6>
		resched = adjust_owner_prio(mutex, new_prio);
   24170:	f009 fde2 	bl	2dd38 <adjust_owner_prio.isra.0>
   24174:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   24176:	e9cd 7600 	strd	r7, r6, [sp]
   2417a:	4821      	ldr	r0, [pc, #132]	; (24200 <z_impl_k_mutex_lock+0x160>)
   2417c:	4622      	mov	r2, r4
   2417e:	4641      	mov	r1, r8
   24180:	f001 fa46 	bl	25610 <z_pend_curr>
	if (got_mutex == 0) {
   24184:	2800      	cmp	r0, #0
   24186:	d0e3      	beq.n	24150 <z_impl_k_mutex_lock+0xb0>
	__asm__ volatile(
   24188:	f04f 0340 	mov.w	r3, #64	; 0x40
   2418c:	f3ef 8611 	mrs	r6, BASEPRI
   24190:	f383 8812 	msr	BASEPRI_MAX, r3
   24194:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24198:	4819      	ldr	r0, [pc, #100]	; (24200 <z_impl_k_mutex_lock+0x160>)
   2419a:	f7ff ff2d 	bl	23ff8 <z_spin_lock_valid>
   2419e:	2800      	cmp	r0, #0
   241a0:	d09b      	beq.n	240da <z_impl_k_mutex_lock+0x3a>
	z_spin_lock_set_owner(l);
   241a2:	4817      	ldr	r0, [pc, #92]	; (24200 <z_impl_k_mutex_lock+0x160>)
   241a4:	f7ff ff46 	bl	24034 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   241a8:	68a0      	ldr	r0, [r4, #8]
   241aa:	b1c0      	cbz	r0, 241de <z_impl_k_mutex_lock+0x13e>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   241ac:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   241ae:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   241b0:	429c      	cmp	r4, r3
   241b2:	d00a      	beq.n	241ca <z_impl_k_mutex_lock+0x12a>
   241b4:	b14b      	cbz	r3, 241ca <z_impl_k_mutex_lock+0x12a>
   241b6:	f993 300e 	ldrsb.w	r3, [r3, #14]
   241ba:	4299      	cmp	r1, r3
   241bc:	bfa8      	it	ge
   241be:	4619      	movge	r1, r3
   241c0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   241c4:	4299      	cmp	r1, r3
   241c6:	bfb8      	it	lt
   241c8:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   241ca:	f009 fdb5 	bl	2dd38 <adjust_owner_prio.isra.0>
   241ce:	b130      	cbz	r0, 241de <z_impl_k_mutex_lock+0x13e>
		z_reschedule(&lock, key);
   241d0:	480b      	ldr	r0, [pc, #44]	; (24200 <z_impl_k_mutex_lock+0x160>)
   241d2:	4631      	mov	r1, r6
   241d4:	f000 ffc8 	bl	25168 <z_reschedule>
	return -EAGAIN;
   241d8:	f06f 000a 	mvn.w	r0, #10
   241dc:	e79c      	b.n	24118 <z_impl_k_mutex_lock+0x78>
	if (resched) {
   241de:	2d00      	cmp	r5, #0
   241e0:	d1f6      	bne.n	241d0 <z_impl_k_mutex_lock+0x130>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   241e2:	4807      	ldr	r0, [pc, #28]	; (24200 <z_impl_k_mutex_lock+0x160>)
   241e4:	f7ff ff16 	bl	24014 <z_spin_unlock_valid>
   241e8:	2800      	cmp	r0, #0
   241ea:	d0a4      	beq.n	24136 <z_impl_k_mutex_lock+0x96>
	__asm__ volatile(
   241ec:	f386 8811 	msr	BASEPRI, r6
   241f0:	f3bf 8f6f 	isb	sy
   241f4:	e7f0      	b.n	241d8 <z_impl_k_mutex_lock+0x138>
   241f6:	bf00      	nop
   241f8:	00033187 	.word	0x00033187
   241fc:	0002f2b5 	.word	0x0002f2b5
   24200:	20003644 	.word	0x20003644
   24204:	0002f9fb 	.word	0x0002f9fb
   24208:	2000361c 	.word	0x2000361c

0002420c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2420c:	b570      	push	{r4, r5, r6, lr}
   2420e:	4604      	mov	r4, r0
   24210:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24214:	b146      	cbz	r6, 24228 <z_impl_k_mutex_unlock+0x1c>
   24216:	4930      	ldr	r1, [pc, #192]	; (242d8 <z_impl_k_mutex_unlock+0xcc>)
   24218:	4830      	ldr	r0, [pc, #192]	; (242dc <z_impl_k_mutex_unlock+0xd0>)
   2421a:	22cd      	movs	r2, #205	; 0xcd
   2421c:	f005 ff15 	bl	2a04a <assert_print>
   24220:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24222:	482d      	ldr	r0, [pc, #180]	; (242d8 <z_impl_k_mutex_unlock+0xcc>)
   24224:	f005 ff0a 	bl	2a03c <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   24228:	6883      	ldr	r3, [r0, #8]
   2422a:	2b00      	cmp	r3, #0
   2422c:	d04e      	beq.n	242cc <z_impl_k_mutex_unlock+0xc0>
	CHECKIF(mutex->owner != _current) {
   2422e:	4a2c      	ldr	r2, [pc, #176]	; (242e0 <z_impl_k_mutex_unlock+0xd4>)
   24230:	6892      	ldr	r2, [r2, #8]
   24232:	4293      	cmp	r3, r2
   24234:	d14d      	bne.n	242d2 <z_impl_k_mutex_unlock+0xc6>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   24236:	68c3      	ldr	r3, [r0, #12]
   24238:	b933      	cbnz	r3, 24248 <z_impl_k_mutex_unlock+0x3c>
   2423a:	4927      	ldr	r1, [pc, #156]	; (242d8 <z_impl_k_mutex_unlock+0xcc>)
   2423c:	4827      	ldr	r0, [pc, #156]	; (242dc <z_impl_k_mutex_unlock+0xd0>)
   2423e:	22e5      	movs	r2, #229	; 0xe5
   24240:	f005 ff03 	bl	2a04a <assert_print>
   24244:	21e5      	movs	r1, #229	; 0xe5
   24246:	e7ec      	b.n	24222 <z_impl_k_mutex_unlock+0x16>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24248:	2b01      	cmp	r3, #1
   2424a:	d003      	beq.n	24254 <z_impl_k_mutex_unlock+0x48>
		mutex->lock_count--;
   2424c:	3b01      	subs	r3, #1
   2424e:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   24250:	2000      	movs	r0, #0
}
   24252:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   24254:	f04f 0340 	mov.w	r3, #64	; 0x40
   24258:	f3ef 8511 	mrs	r5, BASEPRI
   2425c:	f383 8812 	msr	BASEPRI_MAX, r3
   24260:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24264:	481f      	ldr	r0, [pc, #124]	; (242e4 <z_impl_k_mutex_unlock+0xd8>)
   24266:	f7ff fec7 	bl	23ff8 <z_spin_lock_valid>
   2426a:	b938      	cbnz	r0, 2427c <z_impl_k_mutex_unlock+0x70>
   2426c:	491e      	ldr	r1, [pc, #120]	; (242e8 <z_impl_k_mutex_unlock+0xdc>)
   2426e:	481b      	ldr	r0, [pc, #108]	; (242dc <z_impl_k_mutex_unlock+0xd0>)
   24270:	2294      	movs	r2, #148	; 0x94
   24272:	f005 feea 	bl	2a04a <assert_print>
   24276:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24278:	481b      	ldr	r0, [pc, #108]	; (242e8 <z_impl_k_mutex_unlock+0xdc>)
   2427a:	e7d3      	b.n	24224 <z_impl_k_mutex_unlock+0x18>
	z_spin_lock_set_owner(l);
   2427c:	4819      	ldr	r0, [pc, #100]	; (242e4 <z_impl_k_mutex_unlock+0xd8>)
   2427e:	f7ff fed9 	bl	24034 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   24282:	6921      	ldr	r1, [r4, #16]
   24284:	68a0      	ldr	r0, [r4, #8]
   24286:	f009 fd57 	bl	2dd38 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2428a:	4620      	mov	r0, r4
   2428c:	f001 fb88 	bl	259a0 <z_unpend_first_thread>
	mutex->owner = new_owner;
   24290:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24292:	b150      	cbz	r0, 242aa <z_impl_k_mutex_unlock+0x9e>
		mutex->owner_orig_prio = new_owner->base.prio;
   24294:	f990 200e 	ldrsb.w	r2, [r0, #14]
   24298:	6122      	str	r2, [r4, #16]
   2429a:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2429c:	f000 ff30 	bl	25100 <z_ready_thread>
		z_reschedule(&lock, key);
   242a0:	4810      	ldr	r0, [pc, #64]	; (242e4 <z_impl_k_mutex_unlock+0xd8>)
   242a2:	4629      	mov	r1, r5
   242a4:	f000 ff60 	bl	25168 <z_reschedule>
   242a8:	e7d2      	b.n	24250 <z_impl_k_mutex_unlock+0x44>
		mutex->lock_count = 0U;
   242aa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   242ac:	480d      	ldr	r0, [pc, #52]	; (242e4 <z_impl_k_mutex_unlock+0xd8>)
   242ae:	f7ff feb1 	bl	24014 <z_spin_unlock_valid>
   242b2:	b930      	cbnz	r0, 242c2 <z_impl_k_mutex_unlock+0xb6>
   242b4:	490c      	ldr	r1, [pc, #48]	; (242e8 <z_impl_k_mutex_unlock+0xdc>)
   242b6:	4809      	ldr	r0, [pc, #36]	; (242dc <z_impl_k_mutex_unlock+0xd0>)
   242b8:	22c2      	movs	r2, #194	; 0xc2
   242ba:	f005 fec6 	bl	2a04a <assert_print>
   242be:	21c2      	movs	r1, #194	; 0xc2
   242c0:	e7da      	b.n	24278 <z_impl_k_mutex_unlock+0x6c>
	__asm__ volatile(
   242c2:	f385 8811 	msr	BASEPRI, r5
   242c6:	f3bf 8f6f 	isb	sy
   242ca:	e7c1      	b.n	24250 <z_impl_k_mutex_unlock+0x44>
		return -EINVAL;
   242cc:	f06f 0015 	mvn.w	r0, #21
   242d0:	e7bf      	b.n	24252 <z_impl_k_mutex_unlock+0x46>
		return -EPERM;
   242d2:	f04f 30ff 	mov.w	r0, #4294967295
   242d6:	e7bc      	b.n	24252 <z_impl_k_mutex_unlock+0x46>
   242d8:	00033187 	.word	0x00033187
   242dc:	0002f2b5 	.word	0x0002f2b5
   242e0:	2000361c 	.word	0x2000361c
   242e4:	20003644 	.word	0x20003644
   242e8:	0002f9fb 	.word	0x0002f9fb

000242ec <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   242ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   242f0:	4604      	mov	r4, r0
   242f2:	f89d a020 	ldrb.w	sl, [sp, #32]
   242f6:	460d      	mov	r5, r1
   242f8:	4690      	mov	r8, r2
   242fa:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   242fc:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24300:	f04f 0340 	mov.w	r3, #64	; 0x40
   24304:	f3ef 8711 	mrs	r7, BASEPRI
   24308:	f383 8812 	msr	BASEPRI_MAX, r3
   2430c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24310:	4630      	mov	r0, r6
   24312:	f7ff fe71 	bl	23ff8 <z_spin_lock_valid>
   24316:	b940      	cbnz	r0, 2432a <queue_insert+0x3e>
   24318:	4936      	ldr	r1, [pc, #216]	; (243f4 <queue_insert+0x108>)
   2431a:	4837      	ldr	r0, [pc, #220]	; (243f8 <queue_insert+0x10c>)
   2431c:	2294      	movs	r2, #148	; 0x94
   2431e:	f005 fe94 	bl	2a04a <assert_print>
   24322:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24324:	4833      	ldr	r0, [pc, #204]	; (243f4 <queue_insert+0x108>)
   24326:	f005 fe89 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2432a:	4630      	mov	r0, r6
   2432c:	f7ff fe82 	bl	24034 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   24330:	f1ba 0f00 	cmp.w	sl, #0
   24334:	d000      	beq.n	24338 <queue_insert+0x4c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   24336:	6865      	ldr	r5, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24338:	f104 000c 	add.w	r0, r4, #12
   2433c:	f001 fb30 	bl	259a0 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   24340:	b158      	cbz	r0, 2435a <queue_insert+0x6e>
   24342:	2300      	movs	r3, #0
   24344:	67c3      	str	r3, [r0, #124]	; 0x7c
   24346:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2434a:	f000 fed9 	bl	25100 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   2434e:	4630      	mov	r0, r6
   24350:	4639      	mov	r1, r7
   24352:	f000 ff09 	bl	25168 <z_reschedule>
		return 0;
   24356:	2000      	movs	r0, #0
   24358:	e017      	b.n	2438a <queue_insert+0x9e>
	if (alloc) {
   2435a:	f1b9 0f00 	cmp.w	r9, #0
   2435e:	d026      	beq.n	243ae <queue_insert+0xc2>
	return z_thread_aligned_alloc(0, size);
   24360:	2108      	movs	r1, #8
   24362:	f002 fb4f 	bl	26a04 <z_thread_aligned_alloc>
		if (anode == NULL) {
   24366:	b990      	cbnz	r0, 2438e <queue_insert+0xa2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24368:	4630      	mov	r0, r6
   2436a:	f7ff fe53 	bl	24014 <z_spin_unlock_valid>
   2436e:	b930      	cbnz	r0, 2437e <queue_insert+0x92>
   24370:	4920      	ldr	r1, [pc, #128]	; (243f4 <queue_insert+0x108>)
   24372:	4821      	ldr	r0, [pc, #132]	; (243f8 <queue_insert+0x10c>)
   24374:	22c2      	movs	r2, #194	; 0xc2
   24376:	f005 fe68 	bl	2a04a <assert_print>
   2437a:	21c2      	movs	r1, #194	; 0xc2
   2437c:	e7d2      	b.n	24324 <queue_insert+0x38>
	__asm__ volatile(
   2437e:	f387 8811 	msr	BASEPRI, r7
   24382:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24386:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   2438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   2438e:	2201      	movs	r2, #1
		anode->data = data;
   24390:	f8c0 8004 	str.w	r8, [r0, #4]
   24394:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24396:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24398:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   2439c:	b95d      	cbnz	r5, 243b6 <queue_insert+0xca>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2439e:	6822      	ldr	r2, [r4, #0]
   243a0:	430a      	orrs	r2, r1
   243a2:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   243a4:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   243a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   243a8:	b96a      	cbnz	r2, 243c6 <queue_insert+0xda>
	list->tail = node;
   243aa:	6060      	str	r0, [r4, #4]
}
   243ac:	e00b      	b.n	243c6 <queue_insert+0xda>
	node->next_and_flags = flags;
   243ae:	f8c8 9000 	str.w	r9, [r8]
}
   243b2:	4640      	mov	r0, r8
   243b4:	e7ef      	b.n	24396 <queue_insert+0xaa>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   243b6:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   243b8:	2a03      	cmp	r2, #3
   243ba:	d810      	bhi.n	243de <queue_insert+0xf2>
	parent->next_and_flags = cur_flags | (unative_t)child;
   243bc:	6001      	str	r1, [r0, #0]
	return list->tail;
   243be:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   243c0:	b939      	cbnz	r1, 243d2 <queue_insert+0xe6>
	list->head = node;
   243c2:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   243c6:	2104      	movs	r1, #4
   243c8:	f104 0014 	add.w	r0, r4, #20
   243cc:	f009 fe4b 	bl	2e066 <z_handle_obj_poll_events>
   243d0:	e7bd      	b.n	2434e <queue_insert+0x62>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   243d2:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   243d4:	f002 0203 	and.w	r2, r2, #3
   243d8:	4302      	orrs	r2, r0
   243da:	600a      	str	r2, [r1, #0]
   243dc:	e7e5      	b.n	243aa <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   243de:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   243e2:	430a      	orrs	r2, r1
   243e4:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   243e6:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   243e8:	f002 0203 	and.w	r2, r2, #3
   243ec:	ea40 0302 	orr.w	r3, r0, r2
   243f0:	602b      	str	r3, [r5, #0]
}
   243f2:	e7e8      	b.n	243c6 <queue_insert+0xda>
   243f4:	0002f9fb 	.word	0x0002f9fb
   243f8:	0002f2b5 	.word	0x0002f2b5

000243fc <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   243fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24400:	4605      	mov	r5, r0
   24402:	4691      	mov	r9, r2
   24404:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24406:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2440a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2440e:	f3ef 8811 	mrs	r8, BASEPRI
   24412:	f383 8812 	msr	BASEPRI_MAX, r3
   24416:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2441a:	4630      	mov	r0, r6
   2441c:	f7ff fdec 	bl	23ff8 <z_spin_lock_valid>
   24420:	b940      	cbnz	r0, 24434 <z_impl_k_queue_get+0x38>
   24422:	491f      	ldr	r1, [pc, #124]	; (244a0 <z_impl_k_queue_get+0xa4>)
   24424:	481f      	ldr	r0, [pc, #124]	; (244a4 <z_impl_k_queue_get+0xa8>)
   24426:	2294      	movs	r2, #148	; 0x94
   24428:	f005 fe0f 	bl	2a04a <assert_print>
   2442c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2442e:	481c      	ldr	r0, [pc, #112]	; (244a0 <z_impl_k_queue_get+0xa4>)
   24430:	f005 fe04 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   24434:	4630      	mov	r0, r6
   24436:	f7ff fdfd 	bl	24034 <z_spin_lock_set_owner>
	return list->head;
   2443a:	682c      	ldr	r4, [r5, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2443c:	b1bc      	cbz	r4, 2446e <z_impl_k_queue_get+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2443e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24440:	686a      	ldr	r2, [r5, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24442:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24446:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   24448:	4620      	mov	r0, r4
	list->head = node;
   2444a:	602b      	str	r3, [r5, #0]
	list->tail = node;
   2444c:	bf08      	it	eq
   2444e:	606b      	streq	r3, [r5, #4]
   24450:	2101      	movs	r1, #1
   24452:	f009 fc80 	bl	2dd56 <z_queue_node_peek>
   24456:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24458:	4630      	mov	r0, r6
   2445a:	f7ff fddb 	bl	24014 <z_spin_unlock_valid>
   2445e:	b9b0      	cbnz	r0, 2448e <z_impl_k_queue_get+0x92>
   24460:	490f      	ldr	r1, [pc, #60]	; (244a0 <z_impl_k_queue_get+0xa4>)
   24462:	4810      	ldr	r0, [pc, #64]	; (244a4 <z_impl_k_queue_get+0xa8>)
   24464:	22c2      	movs	r2, #194	; 0xc2
   24466:	f005 fdf0 	bl	2a04a <assert_print>
   2446a:	21c2      	movs	r1, #194	; 0xc2
   2446c:	e7df      	b.n	2442e <z_impl_k_queue_get+0x32>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2446e:	ea59 0307 	orrs.w	r3, r9, r7
   24472:	d0f1      	beq.n	24458 <z_impl_k_queue_get+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24474:	e9cd 9700 	strd	r9, r7, [sp]
   24478:	f105 020c 	add.w	r2, r5, #12
   2447c:	4641      	mov	r1, r8
   2447e:	4630      	mov	r0, r6
   24480:	f001 f8c6 	bl	25610 <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   24484:	b938      	cbnz	r0, 24496 <z_impl_k_queue_get+0x9a>
   24486:	4b08      	ldr	r3, [pc, #32]	; (244a8 <z_impl_k_queue_get+0xac>)
   24488:	689b      	ldr	r3, [r3, #8]
   2448a:	695c      	ldr	r4, [r3, #20]
   2448c:	e003      	b.n	24496 <z_impl_k_queue_get+0x9a>
	__asm__ volatile(
   2448e:	f388 8811 	msr	BASEPRI, r8
   24492:	f3bf 8f6f 	isb	sy
}
   24496:	4620      	mov	r0, r4
   24498:	b003      	add	sp, #12
   2449a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2449e:	bf00      	nop
   244a0:	0002f9fb 	.word	0x0002f9fb
   244a4:	0002f2b5 	.word	0x0002f2b5
   244a8:	2000361c 	.word	0x2000361c

000244ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   244ac:	b538      	push	{r3, r4, r5, lr}
   244ae:	4604      	mov	r4, r0
	__asm__ volatile(
   244b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   244b4:	f3ef 8511 	mrs	r5, BASEPRI
   244b8:	f383 8812 	msr	BASEPRI_MAX, r3
   244bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244c0:	4814      	ldr	r0, [pc, #80]	; (24514 <z_impl_k_sem_give+0x68>)
   244c2:	f7ff fd99 	bl	23ff8 <z_spin_lock_valid>
   244c6:	b940      	cbnz	r0, 244da <z_impl_k_sem_give+0x2e>
   244c8:	4913      	ldr	r1, [pc, #76]	; (24518 <z_impl_k_sem_give+0x6c>)
   244ca:	4814      	ldr	r0, [pc, #80]	; (2451c <z_impl_k_sem_give+0x70>)
   244cc:	2294      	movs	r2, #148	; 0x94
   244ce:	f005 fdbc 	bl	2a04a <assert_print>
   244d2:	4811      	ldr	r0, [pc, #68]	; (24518 <z_impl_k_sem_give+0x6c>)
   244d4:	2194      	movs	r1, #148	; 0x94
   244d6:	f005 fdb1 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   244da:	480e      	ldr	r0, [pc, #56]	; (24514 <z_impl_k_sem_give+0x68>)
   244dc:	f7ff fdaa 	bl	24034 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   244e0:	4620      	mov	r0, r4
   244e2:	f001 fa5d 	bl	259a0 <z_unpend_first_thread>

	if (thread != NULL) {
   244e6:	b148      	cbz	r0, 244fc <z_impl_k_sem_give+0x50>
   244e8:	2200      	movs	r2, #0
   244ea:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   244ec:	f000 fe08 	bl	25100 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   244f0:	4629      	mov	r1, r5
   244f2:	4808      	ldr	r0, [pc, #32]	; (24514 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   244f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   244f8:	f000 be36 	b.w	25168 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   244fc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24500:	429a      	cmp	r2, r3
   24502:	bf18      	it	ne
   24504:	3301      	addne	r3, #1
   24506:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24508:	2102      	movs	r1, #2
   2450a:	f104 0010 	add.w	r0, r4, #16
   2450e:	f009 fdaa 	bl	2e066 <z_handle_obj_poll_events>
}
   24512:	e7ed      	b.n	244f0 <z_impl_k_sem_give+0x44>
   24514:	20003648 	.word	0x20003648
   24518:	0002f9fb 	.word	0x0002f9fb
   2451c:	0002f2b5 	.word	0x0002f2b5

00024520 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24522:	4604      	mov	r4, r0
   24524:	4616      	mov	r6, r2
   24526:	461d      	mov	r5, r3
   24528:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   2452c:	b15b      	cbz	r3, 24546 <z_impl_k_sem_take+0x26>
   2452e:	ea52 0305 	orrs.w	r3, r2, r5
   24532:	d008      	beq.n	24546 <z_impl_k_sem_take+0x26>
   24534:	4926      	ldr	r1, [pc, #152]	; (245d0 <z_impl_k_sem_take+0xb0>)
   24536:	4827      	ldr	r0, [pc, #156]	; (245d4 <z_impl_k_sem_take+0xb4>)
   24538:	2279      	movs	r2, #121	; 0x79
   2453a:	f005 fd86 	bl	2a04a <assert_print>
   2453e:	4824      	ldr	r0, [pc, #144]	; (245d0 <z_impl_k_sem_take+0xb0>)
   24540:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24542:	f005 fd7b 	bl	2a03c <assert_post_action>
   24546:	f04f 0340 	mov.w	r3, #64	; 0x40
   2454a:	f3ef 8711 	mrs	r7, BASEPRI
   2454e:	f383 8812 	msr	BASEPRI_MAX, r3
   24552:	f3bf 8f6f 	isb	sy
   24556:	4820      	ldr	r0, [pc, #128]	; (245d8 <z_impl_k_sem_take+0xb8>)
   24558:	f7ff fd4e 	bl	23ff8 <z_spin_lock_valid>
   2455c:	b938      	cbnz	r0, 2456e <z_impl_k_sem_take+0x4e>
   2455e:	491f      	ldr	r1, [pc, #124]	; (245dc <z_impl_k_sem_take+0xbc>)
   24560:	481c      	ldr	r0, [pc, #112]	; (245d4 <z_impl_k_sem_take+0xb4>)
   24562:	2294      	movs	r2, #148	; 0x94
   24564:	f005 fd71 	bl	2a04a <assert_print>
   24568:	2194      	movs	r1, #148	; 0x94
   2456a:	481c      	ldr	r0, [pc, #112]	; (245dc <z_impl_k_sem_take+0xbc>)
   2456c:	e7e9      	b.n	24542 <z_impl_k_sem_take+0x22>
	z_spin_lock_set_owner(l);
   2456e:	481a      	ldr	r0, [pc, #104]	; (245d8 <z_impl_k_sem_take+0xb8>)
   24570:	f7ff fd60 	bl	24034 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24574:	68a3      	ldr	r3, [r4, #8]
   24576:	b19b      	cbz	r3, 245a0 <z_impl_k_sem_take+0x80>
		sem->count--;
   24578:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2457a:	4817      	ldr	r0, [pc, #92]	; (245d8 <z_impl_k_sem_take+0xb8>)
   2457c:	60a3      	str	r3, [r4, #8]
   2457e:	f7ff fd49 	bl	24014 <z_spin_unlock_valid>
   24582:	b930      	cbnz	r0, 24592 <z_impl_k_sem_take+0x72>
   24584:	4915      	ldr	r1, [pc, #84]	; (245dc <z_impl_k_sem_take+0xbc>)
   24586:	4813      	ldr	r0, [pc, #76]	; (245d4 <z_impl_k_sem_take+0xb4>)
   24588:	22c2      	movs	r2, #194	; 0xc2
   2458a:	f005 fd5e 	bl	2a04a <assert_print>
   2458e:	21c2      	movs	r1, #194	; 0xc2
   24590:	e7eb      	b.n	2456a <z_impl_k_sem_take+0x4a>
	__asm__ volatile(
   24592:	f387 8811 	msr	BASEPRI, r7
   24596:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2459a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2459c:	b003      	add	sp, #12
   2459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   245a0:	ea56 0305 	orrs.w	r3, r6, r5
   245a4:	d10b      	bne.n	245be <z_impl_k_sem_take+0x9e>
   245a6:	480c      	ldr	r0, [pc, #48]	; (245d8 <z_impl_k_sem_take+0xb8>)
   245a8:	f7ff fd34 	bl	24014 <z_spin_unlock_valid>
   245ac:	2800      	cmp	r0, #0
   245ae:	d0e9      	beq.n	24584 <z_impl_k_sem_take+0x64>
   245b0:	f387 8811 	msr	BASEPRI, r7
   245b4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   245b8:	f06f 000f 	mvn.w	r0, #15
   245bc:	e7ee      	b.n	2459c <z_impl_k_sem_take+0x7c>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   245be:	e9cd 6500 	strd	r6, r5, [sp]
   245c2:	4622      	mov	r2, r4
   245c4:	4639      	mov	r1, r7
   245c6:	4804      	ldr	r0, [pc, #16]	; (245d8 <z_impl_k_sem_take+0xb8>)
   245c8:	f001 f822 	bl	25610 <z_pend_curr>
	return ret;
   245cc:	e7e6      	b.n	2459c <z_impl_k_sem_take+0x7c>
   245ce:	bf00      	nop
   245d0:	000331a9 	.word	0x000331a9
   245d4:	0002f2b5 	.word	0x0002f2b5
   245d8:	20003648 	.word	0x20003648
   245dc:	0002f9fb 	.word	0x0002f9fb

000245e0 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
   245e0:	b570      	push	{r4, r5, r6, lr}
   245e2:	4604      	mov	r4, r0
	__asm__ volatile(
   245e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   245e8:	f3ef 8511 	mrs	r5, BASEPRI
   245ec:	f383 8812 	msr	BASEPRI_MAX, r3
   245f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245f4:	4812      	ldr	r0, [pc, #72]	; (24640 <z_impl_k_sem_reset+0x60>)
   245f6:	f7ff fcff 	bl	23ff8 <z_spin_lock_valid>
   245fa:	b940      	cbnz	r0, 2460e <z_impl_k_sem_reset+0x2e>
   245fc:	4911      	ldr	r1, [pc, #68]	; (24644 <z_impl_k_sem_reset+0x64>)
   245fe:	4812      	ldr	r0, [pc, #72]	; (24648 <z_impl_k_sem_reset+0x68>)
   24600:	2294      	movs	r2, #148	; 0x94
   24602:	f005 fd22 	bl	2a04a <assert_print>
   24606:	480f      	ldr	r0, [pc, #60]	; (24644 <z_impl_k_sem_reset+0x64>)
   24608:	2194      	movs	r1, #148	; 0x94
   2460a:	f005 fd17 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2460e:	480c      	ldr	r0, [pc, #48]	; (24640 <z_impl_k_sem_reset+0x60>)
   24610:	f7ff fd10 	bl	24034 <z_spin_lock_set_owner>
   24614:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
   24618:	4620      	mov	r0, r4
   2461a:	f001 f9c1 	bl	259a0 <z_unpend_first_thread>
		if (thread == NULL) {
   2461e:	b118      	cbz	r0, 24628 <z_impl_k_sem_reset+0x48>
   24620:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
   24622:	f000 fd6d 	bl	25100 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
   24626:	e7f7      	b.n	24618 <z_impl_k_sem_reset+0x38>
	}
	sem->count = 0;
   24628:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2462a:	2102      	movs	r1, #2
   2462c:	f104 0010 	add.w	r0, r4, #16
   24630:	f009 fd19 	bl	2e066 <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
   24634:	4629      	mov	r1, r5
   24636:	4802      	ldr	r0, [pc, #8]	; (24640 <z_impl_k_sem_reset+0x60>)
}
   24638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
   2463c:	f000 bd94 	b.w	25168 <z_reschedule>
   24640:	20003648 	.word	0x20003648
   24644:	0002f9fb 	.word	0x0002f9fb
   24648:	0002f2b5 	.word	0x0002f2b5

0002464c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2464c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2464e:	4b09      	ldr	r3, [pc, #36]	; (24674 <k_sys_work_q_init+0x28>)
   24650:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24652:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   24654:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   24656:	9300      	str	r3, [sp, #0]
   24658:	4907      	ldr	r1, [pc, #28]	; (24678 <k_sys_work_q_init+0x2c>)
   2465a:	4808      	ldr	r0, [pc, #32]	; (2467c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2465c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24660:	f04f 33ff 	mov.w	r3, #4294967295
   24664:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24668:	f000 fa66 	bl	24b38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2466c:	4620      	mov	r0, r4
   2466e:	b004      	add	sp, #16
   24670:	bd10      	pop	{r4, pc}
   24672:	bf00      	nop
   24674:	000331c9 	.word	0x000331c9
   24678:	2000af80 	.word	0x2000af80
   2467c:	200028e0 	.word	0x200028e0

00024680 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24684:	4e68      	ldr	r6, [pc, #416]	; (24828 <work_queue_main+0x1a8>)
	return list->head;
   24686:	4f69      	ldr	r7, [pc, #420]	; (2482c <work_queue_main+0x1ac>)
   24688:	b085      	sub	sp, #20
   2468a:	4604      	mov	r4, r0
   2468c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24690:	f3ef 8811 	mrs	r8, BASEPRI
   24694:	f383 8812 	msr	BASEPRI_MAX, r3
   24698:	f3bf 8f6f 	isb	sy
   2469c:	4630      	mov	r0, r6
   2469e:	f7ff fcab 	bl	23ff8 <z_spin_lock_valid>
   246a2:	b940      	cbnz	r0, 246b6 <work_queue_main+0x36>
   246a4:	4962      	ldr	r1, [pc, #392]	; (24830 <work_queue_main+0x1b0>)
   246a6:	4863      	ldr	r0, [pc, #396]	; (24834 <work_queue_main+0x1b4>)
   246a8:	2294      	movs	r2, #148	; 0x94
   246aa:	f005 fcce 	bl	2a04a <assert_print>
   246ae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   246b0:	485f      	ldr	r0, [pc, #380]	; (24830 <work_queue_main+0x1b0>)
   246b2:	f005 fcc3 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   246b6:	4630      	mov	r0, r6
   246b8:	f7ff fcbc 	bl	24034 <z_spin_lock_set_owner>
   246bc:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   246c0:	b9a5      	cbnz	r5, 246ec <work_queue_main+0x6c>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   246c2:	2102      	movs	r1, #2
   246c4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   246c8:	f009 fb83 	bl	2ddd2 <flag_test_and_clear>
   246cc:	bb80      	cbnz	r0, 24730 <work_queue_main+0xb0>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   246ce:	2300      	movs	r3, #0
   246d0:	9302      	str	r3, [sp, #8]
   246d2:	f04f 32ff 	mov.w	r2, #4294967295
   246d6:	f04f 33ff 	mov.w	r3, #4294967295
   246da:	e9cd 2300 	strd	r2, r3, [sp]
   246de:	4641      	mov	r1, r8
   246e0:	f104 0288 	add.w	r2, r4, #136	; 0x88
   246e4:	4630      	mov	r0, r6
   246e6:	f001 fbc3 	bl	25e70 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   246ea:	e7cf      	b.n	2468c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   246ec:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   246f0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   246f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   246f6:	4295      	cmp	r5, r2
	list->tail = node;
   246f8:	bf08      	it	eq
   246fa:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   246fe:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24702:	f043 0302 	orr.w	r3, r3, #2
   24706:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   2470a:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   2470c:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   24710:	f023 0304 	bic.w	r3, r3, #4
   24714:	f043 0301 	orr.w	r3, r3, #1
   24718:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2471a:	4630      	mov	r0, r6
   2471c:	f7ff fc7a 	bl	24014 <z_spin_unlock_valid>
   24720:	b980      	cbnz	r0, 24744 <work_queue_main+0xc4>
   24722:	4943      	ldr	r1, [pc, #268]	; (24830 <work_queue_main+0x1b0>)
   24724:	4843      	ldr	r0, [pc, #268]	; (24834 <work_queue_main+0x1b4>)
   24726:	22c2      	movs	r2, #194	; 0xc2
   24728:	f005 fc8f 	bl	2a04a <assert_print>
   2472c:	21c2      	movs	r1, #194	; 0xc2
   2472e:	e7bf      	b.n	246b0 <work_queue_main+0x30>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24730:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24734:	2200      	movs	r2, #0
   24736:	2101      	movs	r1, #1
   24738:	4628      	mov	r0, r5
   2473a:	f001 fb4d 	bl	25dd8 <z_sched_wake>
   2473e:	2800      	cmp	r0, #0
   24740:	d1f8      	bne.n	24734 <work_queue_main+0xb4>
   24742:	e7c4      	b.n	246ce <work_queue_main+0x4e>
	__asm__ volatile(
   24744:	f388 8811 	msr	BASEPRI, r8
   24748:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2474c:	f1b9 0f00 	cmp.w	r9, #0
   24750:	d109      	bne.n	24766 <work_queue_main+0xe6>
   24752:	4939      	ldr	r1, [pc, #228]	; (24838 <work_queue_main+0x1b8>)
   24754:	4837      	ldr	r0, [pc, #220]	; (24834 <work_queue_main+0x1b4>)
   24756:	f240 229b 	movw	r2, #667	; 0x29b
   2475a:	f005 fc76 	bl	2a04a <assert_print>
   2475e:	4836      	ldr	r0, [pc, #216]	; (24838 <work_queue_main+0x1b8>)
   24760:	f240 219b 	movw	r1, #667	; 0x29b
   24764:	e7a5      	b.n	246b2 <work_queue_main+0x32>
		handler(work);
   24766:	4628      	mov	r0, r5
   24768:	47c8      	blx	r9
	__asm__ volatile(
   2476a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2476e:	f3ef 8a11 	mrs	sl, BASEPRI
   24772:	f383 8812 	msr	BASEPRI_MAX, r3
   24776:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2477a:	4630      	mov	r0, r6
   2477c:	f7ff fc3c 	bl	23ff8 <z_spin_lock_valid>
   24780:	2800      	cmp	r0, #0
   24782:	d08f      	beq.n	246a4 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   24784:	4630      	mov	r0, r6
   24786:	f7ff fc55 	bl	24034 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2478a:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2478c:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   2478e:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24792:	d417      	bmi.n	247c4 <work_queue_main+0x144>
	*flagp &= ~BIT(bit);
   24794:	60ea      	str	r2, [r5, #12]
   24796:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2479a:	f023 0302 	bic.w	r3, r3, #2
   2479e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247a2:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   247a4:	f3c3 2500 	ubfx	r5, r3, #8, #1
   247a8:	f7ff fc34 	bl	24014 <z_spin_unlock_valid>
   247ac:	2800      	cmp	r0, #0
   247ae:	d0b8      	beq.n	24722 <work_queue_main+0xa2>
	__asm__ volatile(
   247b0:	f38a 8811 	msr	BASEPRI, sl
   247b4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   247b8:	2d00      	cmp	r5, #0
   247ba:	f47f af67 	bne.w	2468c <work_queue_main+0xc>
	z_impl_k_yield();
   247be:	f001 f939 	bl	25a34 <z_impl_k_yield>
}
   247c2:	e763      	b.n	2468c <work_queue_main+0xc>
	return list->head;
   247c4:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   247c6:	f023 0303 	bic.w	r3, r3, #3
   247ca:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   247cc:	2800      	cmp	r0, #0
   247ce:	d0e2      	beq.n	24796 <work_queue_main+0x116>
	return node->next;
   247d0:	f04f 0800 	mov.w	r8, #0
   247d4:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   247d8:	46c3      	mov	fp, r8
   247da:	2800      	cmp	r0, #0
   247dc:	d0db      	beq.n	24796 <work_queue_main+0x116>
		if (wc->work == work) {
   247de:	6843      	ldr	r3, [r0, #4]
   247e0:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   247e2:	4602      	mov	r2, r0
		if (wc->work == work) {
   247e4:	d10d      	bne.n	24802 <work_queue_main+0x182>
	return node->next;
   247e6:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   247e8:	f1b8 0f00 	cmp.w	r8, #0
   247ec:	d112      	bne.n	24814 <work_queue_main+0x194>
   247ee:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   247f0:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   247f2:	4283      	cmp	r3, r0
   247f4:	d100      	bne.n	247f8 <work_queue_main+0x178>
	list->tail = node;
   247f6:	607a      	str	r2, [r7, #4]
	parent->next = child;
   247f8:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   247fc:	f7ff fe56 	bl	244ac <z_impl_k_sem_give>
}
   24800:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24802:	f1b9 0f00 	cmp.w	r9, #0
   24806:	d00d      	beq.n	24824 <work_queue_main+0x1a4>
	return node->next;
   24808:	f8d9 3000 	ldr.w	r3, [r9]
   2480c:	4648      	mov	r0, r9
   2480e:	4690      	mov	r8, r2
   24810:	4699      	mov	r9, r3
   24812:	e7e2      	b.n	247da <work_queue_main+0x15a>
	parent->next = child;
   24814:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   24818:	687b      	ldr	r3, [r7, #4]
   2481a:	4283      	cmp	r3, r0
	list->tail = node;
   2481c:	bf08      	it	eq
   2481e:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   24822:	e7e9      	b.n	247f8 <work_queue_main+0x178>
   24824:	464b      	mov	r3, r9
   24826:	e7f1      	b.n	2480c <work_queue_main+0x18c>
   24828:	20003654 	.word	0x20003654
   2482c:	2000364c 	.word	0x2000364c
   24830:	0002f9fb 	.word	0x0002f9fb
   24834:	0002f2b5 	.word	0x0002f2b5
   24838:	000331d2 	.word	0x000331d2

0002483c <cancel_sync_locked>:
{
   2483c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2483e:	68c3      	ldr	r3, [r0, #12]
   24840:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   24844:	079b      	lsls	r3, r3, #30
{
   24846:	4605      	mov	r5, r0
   24848:	460c      	mov	r4, r1
	if (ret) {
   2484a:	d50d      	bpl.n	24868 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   2484c:	2201      	movs	r2, #1
   2484e:	2100      	movs	r1, #0
   24850:	f104 0008 	add.w	r0, r4, #8
   24854:	f009 faad 	bl	2ddb2 <z_impl_k_sem_init>
	parent->next = child;
   24858:	2300      	movs	r3, #0
   2485a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2485c:	4b05      	ldr	r3, [pc, #20]	; (24874 <cancel_sync_locked+0x38>)
	canceler->work = work;
   2485e:	6065      	str	r5, [r4, #4]
   24860:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   24862:	b91a      	cbnz	r2, 2486c <cancel_sync_locked+0x30>
	list->head = node;
   24864:	e9c3 4400 	strd	r4, r4, [r3]
}
   24868:	4630      	mov	r0, r6
   2486a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2486c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2486e:	605c      	str	r4, [r3, #4]
}
   24870:	e7fa      	b.n	24868 <cancel_sync_locked+0x2c>
   24872:	bf00      	nop
   24874:	2000364c 	.word	0x2000364c

00024878 <submit_to_queue_locked>:
{
   24878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2487a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2487c:	079a      	lsls	r2, r3, #30
{
   2487e:	4604      	mov	r4, r0
   24880:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24882:	f3c3 0640 	ubfx	r6, r3, #1, #1
   24886:	d438      	bmi.n	248fa <submit_to_queue_locked+0x82>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24888:	075b      	lsls	r3, r3, #29
   2488a:	d424      	bmi.n	248d6 <submit_to_queue_locked+0x5e>
		if (*queuep == NULL) {
   2488c:	680b      	ldr	r3, [r1, #0]
   2488e:	b90b      	cbnz	r3, 24894 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24890:	6883      	ldr	r3, [r0, #8]
   24892:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   24894:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24896:	07dd      	lsls	r5, r3, #31
   24898:	d520      	bpl.n	248dc <submit_to_queue_locked+0x64>
			__ASSERT_NO_MSG(work->queue != NULL);
   2489a:	68a3      	ldr	r3, [r4, #8]
   2489c:	b953      	cbnz	r3, 248b4 <submit_to_queue_locked+0x3c>
   2489e:	4928      	ldr	r1, [pc, #160]	; (24940 <submit_to_queue_locked+0xc8>)
   248a0:	4828      	ldr	r0, [pc, #160]	; (24944 <submit_to_queue_locked+0xcc>)
   248a2:	f44f 72a7 	mov.w	r2, #334	; 0x14e
   248a6:	f005 fbd0 	bl	2a04a <assert_print>
   248aa:	4825      	ldr	r0, [pc, #148]	; (24940 <submit_to_queue_locked+0xc8>)
   248ac:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   248b0:	f005 fbc4 	bl	2a03c <assert_post_action>
			*queuep = work->queue;
   248b4:	603b      	str	r3, [r7, #0]
			ret = 2;
   248b6:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   248b8:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   248ba:	2d00      	cmp	r5, #0
   248bc:	d03c      	beq.n	24938 <submit_to_queue_locked+0xc0>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   248be:	4b22      	ldr	r3, [pc, #136]	; (24948 <submit_to_queue_locked+0xd0>)
   248c0:	689b      	ldr	r3, [r3, #8]
   248c2:	42ab      	cmp	r3, r5
   248c4:	d00c      	beq.n	248e0 <submit_to_queue_locked+0x68>
	return (*flagp & BIT(bit)) != 0U;
   248c6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   248ca:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   248cc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   248d0:	d416      	bmi.n	24900 <submit_to_queue_locked+0x88>
		ret = -EBUSY;
   248d2:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   248d6:	2300      	movs	r3, #0
   248d8:	603b      	str	r3, [r7, #0]
	return ret;
   248da:	e027      	b.n	2492c <submit_to_queue_locked+0xb4>
		ret = 1;
   248dc:	2601      	movs	r6, #1
   248de:	e7eb      	b.n	248b8 <submit_to_queue_locked+0x40>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   248e0:	f009 fa16 	bl	2dd10 <k_is_in_isr>
   248e4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   248e8:	2800      	cmp	r0, #0
   248ea:	d1ee      	bne.n	248ca <submit_to_queue_locked+0x52>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   248ec:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   248ee:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   248f2:	d5ee      	bpl.n	248d2 <submit_to_queue_locked+0x5a>
	} else if (plugged && !draining) {
   248f4:	b152      	cbz	r2, 2490c <submit_to_queue_locked+0x94>
   248f6:	075b      	lsls	r3, r3, #29
   248f8:	d408      	bmi.n	2490c <submit_to_queue_locked+0x94>
		ret = -EBUSY;
   248fa:	f06f 060f 	mvn.w	r6, #15
   248fe:	e7ea      	b.n	248d6 <submit_to_queue_locked+0x5e>
	} else if (draining && !chained) {
   24900:	2a00      	cmp	r2, #0
   24902:	d1fa      	bne.n	248fa <submit_to_queue_locked+0x82>
	return (*flagp & BIT(bit)) != 0U;
   24904:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   24908:	2b00      	cmp	r3, #0
   2490a:	d1f6      	bne.n	248fa <submit_to_queue_locked+0x82>
	parent->next = child;
   2490c:	2300      	movs	r3, #0
   2490e:	6023      	str	r3, [r4, #0]
	return list->tail;
   24910:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   24914:	b963      	cbnz	r3, 24930 <submit_to_queue_locked+0xb8>
	list->head = node;
   24916:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   2491a:	4628      	mov	r0, r5
   2491c:	f009 fa72 	bl	2de04 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   24920:	68e3      	ldr	r3, [r4, #12]
   24922:	f043 0304 	orr.w	r3, r3, #4
   24926:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   24928:	683b      	ldr	r3, [r7, #0]
   2492a:	60a3      	str	r3, [r4, #8]
}
   2492c:	4630      	mov	r0, r6
   2492e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   24930:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24932:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   24936:	e7f0      	b.n	2491a <submit_to_queue_locked+0xa2>
		return -EINVAL;
   24938:	f06f 0615 	mvn.w	r6, #21
   2493c:	e7cb      	b.n	248d6 <submit_to_queue_locked+0x5e>
   2493e:	bf00      	nop
   24940:	000331d2 	.word	0x000331d2
   24944:	0002f2b5 	.word	0x0002f2b5
   24948:	2000361c 	.word	0x2000361c

0002494c <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   2494c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2494e:	4604      	mov	r4, r0
	__asm__ volatile(
   24950:	f04f 0340 	mov.w	r3, #64	; 0x40
   24954:	f3ef 8511 	mrs	r5, BASEPRI
   24958:	f383 8812 	msr	BASEPRI_MAX, r3
   2495c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24960:	4817      	ldr	r0, [pc, #92]	; (249c0 <work_timeout+0x74>)
   24962:	f7ff fb49 	bl	23ff8 <z_spin_lock_valid>
   24966:	b940      	cbnz	r0, 2497a <work_timeout+0x2e>
   24968:	4916      	ldr	r1, [pc, #88]	; (249c4 <work_timeout+0x78>)
   2496a:	4817      	ldr	r0, [pc, #92]	; (249c8 <work_timeout+0x7c>)
   2496c:	2294      	movs	r2, #148	; 0x94
   2496e:	f005 fb6c 	bl	2a04a <assert_print>
   24972:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24974:	4813      	ldr	r0, [pc, #76]	; (249c4 <work_timeout+0x78>)
   24976:	f005 fb61 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2497a:	4811      	ldr	r0, [pc, #68]	; (249c0 <work_timeout+0x74>)
   2497c:	f7ff fb5a 	bl	24034 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   24980:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24982:	2103      	movs	r1, #3
   24984:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   24986:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24988:	f1a4 0610 	sub.w	r6, r4, #16
   2498c:	f009 fa21 	bl	2ddd2 <flag_test_and_clear>
   24990:	b128      	cbz	r0, 2499e <work_timeout+0x52>
		queue = dw->queue;
   24992:	69a3      	ldr	r3, [r4, #24]
   24994:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24996:	a901      	add	r1, sp, #4
   24998:	4630      	mov	r0, r6
   2499a:	f7ff ff6d 	bl	24878 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2499e:	4808      	ldr	r0, [pc, #32]	; (249c0 <work_timeout+0x74>)
   249a0:	f7ff fb38 	bl	24014 <z_spin_unlock_valid>
   249a4:	b930      	cbnz	r0, 249b4 <work_timeout+0x68>
   249a6:	4907      	ldr	r1, [pc, #28]	; (249c4 <work_timeout+0x78>)
   249a8:	4807      	ldr	r0, [pc, #28]	; (249c8 <work_timeout+0x7c>)
   249aa:	22c2      	movs	r2, #194	; 0xc2
   249ac:	f005 fb4d 	bl	2a04a <assert_print>
   249b0:	21c2      	movs	r1, #194	; 0xc2
   249b2:	e7df      	b.n	24974 <work_timeout+0x28>
	__asm__ volatile(
   249b4:	f385 8811 	msr	BASEPRI, r5
   249b8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   249bc:	b002      	add	sp, #8
   249be:	bd70      	pop	{r4, r5, r6, pc}
   249c0:	20003654 	.word	0x20003654
   249c4:	0002f9fb 	.word	0x0002f9fb
   249c8:	0002f2b5 	.word	0x0002f2b5

000249cc <k_work_init>:
{
   249cc:	b538      	push	{r3, r4, r5, lr}
   249ce:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   249d0:	4604      	mov	r4, r0
   249d2:	b940      	cbnz	r0, 249e6 <k_work_init+0x1a>
   249d4:	490b      	ldr	r1, [pc, #44]	; (24a04 <k_work_init+0x38>)
   249d6:	480c      	ldr	r0, [pc, #48]	; (24a08 <k_work_init+0x3c>)
   249d8:	2289      	movs	r2, #137	; 0x89
   249da:	f005 fb36 	bl	2a04a <assert_print>
   249de:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   249e0:	4808      	ldr	r0, [pc, #32]	; (24a04 <k_work_init+0x38>)
   249e2:	f005 fb2b 	bl	2a03c <assert_post_action>
   249e6:	b931      	cbnz	r1, 249f6 <k_work_init+0x2a>
   249e8:	4906      	ldr	r1, [pc, #24]	; (24a04 <k_work_init+0x38>)
   249ea:	4807      	ldr	r0, [pc, #28]	; (24a08 <k_work_init+0x3c>)
   249ec:	228a      	movs	r2, #138	; 0x8a
   249ee:	f005 fb2c 	bl	2a04a <assert_print>
   249f2:	218a      	movs	r1, #138	; 0x8a
   249f4:	e7f4      	b.n	249e0 <k_work_init+0x14>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   249f6:	2210      	movs	r2, #16
   249f8:	2100      	movs	r1, #0
   249fa:	f006 fb07 	bl	2b00c <memset>
   249fe:	6065      	str	r5, [r4, #4]
}
   24a00:	bd38      	pop	{r3, r4, r5, pc}
   24a02:	bf00      	nop
   24a04:	000331d2 	.word	0x000331d2
   24a08:	0002f2b5 	.word	0x0002f2b5

00024a0c <k_work_busy_get>:
{
   24a0c:	b538      	push	{r3, r4, r5, lr}
   24a0e:	4604      	mov	r4, r0
	__asm__ volatile(
   24a10:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a14:	f3ef 8511 	mrs	r5, BASEPRI
   24a18:	f383 8812 	msr	BASEPRI_MAX, r3
   24a1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a20:	4811      	ldr	r0, [pc, #68]	; (24a68 <k_work_busy_get+0x5c>)
   24a22:	f7ff fae9 	bl	23ff8 <z_spin_lock_valid>
   24a26:	b940      	cbnz	r0, 24a3a <k_work_busy_get+0x2e>
   24a28:	4910      	ldr	r1, [pc, #64]	; (24a6c <k_work_busy_get+0x60>)
   24a2a:	4811      	ldr	r0, [pc, #68]	; (24a70 <k_work_busy_get+0x64>)
   24a2c:	2294      	movs	r2, #148	; 0x94
   24a2e:	f005 fb0c 	bl	2a04a <assert_print>
   24a32:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a34:	480d      	ldr	r0, [pc, #52]	; (24a6c <k_work_busy_get+0x60>)
   24a36:	f005 fb01 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   24a3a:	480b      	ldr	r0, [pc, #44]	; (24a68 <k_work_busy_get+0x5c>)
   24a3c:	f7ff fafa 	bl	24034 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   24a40:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a42:	4809      	ldr	r0, [pc, #36]	; (24a68 <k_work_busy_get+0x5c>)
   24a44:	f004 040f 	and.w	r4, r4, #15
   24a48:	f7ff fae4 	bl	24014 <z_spin_unlock_valid>
   24a4c:	b930      	cbnz	r0, 24a5c <k_work_busy_get+0x50>
   24a4e:	4907      	ldr	r1, [pc, #28]	; (24a6c <k_work_busy_get+0x60>)
   24a50:	4807      	ldr	r0, [pc, #28]	; (24a70 <k_work_busy_get+0x64>)
   24a52:	22c2      	movs	r2, #194	; 0xc2
   24a54:	f005 faf9 	bl	2a04a <assert_print>
   24a58:	21c2      	movs	r1, #194	; 0xc2
   24a5a:	e7eb      	b.n	24a34 <k_work_busy_get+0x28>
	__asm__ volatile(
   24a5c:	f385 8811 	msr	BASEPRI, r5
   24a60:	f3bf 8f6f 	isb	sy
}
   24a64:	4620      	mov	r0, r4
   24a66:	bd38      	pop	{r3, r4, r5, pc}
   24a68:	20003654 	.word	0x20003654
   24a6c:	0002f9fb 	.word	0x0002f9fb
   24a70:	0002f2b5 	.word	0x0002f2b5

00024a74 <z_work_submit_to_queue>:
{
   24a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   24a76:	460c      	mov	r4, r1
{
   24a78:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   24a7a:	b951      	cbnz	r1, 24a92 <z_work_submit_to_queue+0x1e>
   24a7c:	491c      	ldr	r1, [pc, #112]	; (24af0 <z_work_submit_to_queue+0x7c>)
   24a7e:	481d      	ldr	r0, [pc, #116]	; (24af4 <z_work_submit_to_queue+0x80>)
   24a80:	f44f 72ba 	mov.w	r2, #372	; 0x174
   24a84:	f005 fae1 	bl	2a04a <assert_print>
   24a88:	4819      	ldr	r0, [pc, #100]	; (24af0 <z_work_submit_to_queue+0x7c>)
   24a8a:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a8e:	f005 fad5 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   24a92:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a96:	f3ef 8511 	mrs	r5, BASEPRI
   24a9a:	f383 8812 	msr	BASEPRI_MAX, r3
   24a9e:	f3bf 8f6f 	isb	sy
   24aa2:	4815      	ldr	r0, [pc, #84]	; (24af8 <z_work_submit_to_queue+0x84>)
   24aa4:	f7ff faa8 	bl	23ff8 <z_spin_lock_valid>
   24aa8:	b938      	cbnz	r0, 24aba <z_work_submit_to_queue+0x46>
   24aaa:	4914      	ldr	r1, [pc, #80]	; (24afc <z_work_submit_to_queue+0x88>)
   24aac:	4811      	ldr	r0, [pc, #68]	; (24af4 <z_work_submit_to_queue+0x80>)
   24aae:	2294      	movs	r2, #148	; 0x94
   24ab0:	f005 facb 	bl	2a04a <assert_print>
   24ab4:	2194      	movs	r1, #148	; 0x94
   24ab6:	4811      	ldr	r0, [pc, #68]	; (24afc <z_work_submit_to_queue+0x88>)
   24ab8:	e7e9      	b.n	24a8e <z_work_submit_to_queue+0x1a>
	z_spin_lock_set_owner(l);
   24aba:	480f      	ldr	r0, [pc, #60]	; (24af8 <z_work_submit_to_queue+0x84>)
   24abc:	f7ff faba 	bl	24034 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   24ac0:	4620      	mov	r0, r4
   24ac2:	a901      	add	r1, sp, #4
   24ac4:	f7ff fed8 	bl	24878 <submit_to_queue_locked>
   24ac8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24aca:	480b      	ldr	r0, [pc, #44]	; (24af8 <z_work_submit_to_queue+0x84>)
   24acc:	f7ff faa2 	bl	24014 <z_spin_unlock_valid>
   24ad0:	b930      	cbnz	r0, 24ae0 <z_work_submit_to_queue+0x6c>
   24ad2:	490a      	ldr	r1, [pc, #40]	; (24afc <z_work_submit_to_queue+0x88>)
   24ad4:	4807      	ldr	r0, [pc, #28]	; (24af4 <z_work_submit_to_queue+0x80>)
   24ad6:	22c2      	movs	r2, #194	; 0xc2
   24ad8:	f005 fab7 	bl	2a04a <assert_print>
   24adc:	21c2      	movs	r1, #194	; 0xc2
   24ade:	e7ea      	b.n	24ab6 <z_work_submit_to_queue+0x42>
	__asm__ volatile(
   24ae0:	f385 8811 	msr	BASEPRI, r5
   24ae4:	f3bf 8f6f 	isb	sy
}
   24ae8:	4620      	mov	r0, r4
   24aea:	b003      	add	sp, #12
   24aec:	bd30      	pop	{r4, r5, pc}
   24aee:	bf00      	nop
   24af0:	000331d2 	.word	0x000331d2
   24af4:	0002f2b5 	.word	0x0002f2b5
   24af8:	20003654 	.word	0x20003654
   24afc:	0002f9fb 	.word	0x0002f9fb

00024b00 <k_work_submit>:
{
   24b00:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24b02:	4801      	ldr	r0, [pc, #4]	; (24b08 <k_work_submit+0x8>)
   24b04:	f009 b9b8 	b.w	2de78 <k_work_submit_to_queue>
   24b08:	200028e0 	.word	0x200028e0

00024b0c <k_work_queue_init>:
{
   24b0c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   24b0e:	b950      	cbnz	r0, 24b26 <k_work_queue_init+0x1a>
   24b10:	4907      	ldr	r1, [pc, #28]	; (24b30 <k_work_queue_init+0x24>)
   24b12:	4808      	ldr	r0, [pc, #32]	; (24b34 <k_work_queue_init+0x28>)
   24b14:	f240 22b9 	movw	r2, #697	; 0x2b9
   24b18:	f005 fa97 	bl	2a04a <assert_print>
   24b1c:	4804      	ldr	r0, [pc, #16]	; (24b30 <k_work_queue_init+0x24>)
   24b1e:	f240 21b9 	movw	r1, #697	; 0x2b9
   24b22:	f005 fa8b 	bl	2a03c <assert_post_action>
	*queue = (struct k_work_q) {
   24b26:	22a0      	movs	r2, #160	; 0xa0
   24b28:	2100      	movs	r1, #0
   24b2a:	f006 fa6f 	bl	2b00c <memset>
}
   24b2e:	bd08      	pop	{r3, pc}
   24b30:	000331d2 	.word	0x000331d2
   24b34:	0002f2b5 	.word	0x0002f2b5

00024b38 <k_work_queue_start>:
{
   24b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b3a:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   24b3c:	4604      	mov	r4, r0
{
   24b3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   24b40:	b950      	cbnz	r0, 24b58 <k_work_queue_start+0x20>
   24b42:	492a      	ldr	r1, [pc, #168]	; (24bec <k_work_queue_start+0xb4>)
   24b44:	482a      	ldr	r0, [pc, #168]	; (24bf0 <k_work_queue_start+0xb8>)
   24b46:	f44f 7232 	mov.w	r2, #712	; 0x2c8
   24b4a:	f005 fa7e 	bl	2a04a <assert_print>
   24b4e:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   24b52:	4826      	ldr	r0, [pc, #152]	; (24bec <k_work_queue_start+0xb4>)
   24b54:	f005 fa72 	bl	2a03c <assert_post_action>
   24b58:	b941      	cbnz	r1, 24b6c <k_work_queue_start+0x34>
   24b5a:	4924      	ldr	r1, [pc, #144]	; (24bec <k_work_queue_start+0xb4>)
   24b5c:	4824      	ldr	r0, [pc, #144]	; (24bf0 <k_work_queue_start+0xb8>)
   24b5e:	f240 22c9 	movw	r2, #713	; 0x2c9
   24b62:	f005 fa72 	bl	2a04a <assert_print>
   24b66:	f240 21c9 	movw	r1, #713	; 0x2c9
   24b6a:	e7f2      	b.n	24b52 <k_work_queue_start+0x1a>
	return (*flagp & BIT(bit)) != 0U;
   24b6c:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   24b70:	f010 0001 	ands.w	r0, r0, #1
   24b74:	d008      	beq.n	24b88 <k_work_queue_start+0x50>
   24b76:	491d      	ldr	r1, [pc, #116]	; (24bec <k_work_queue_start+0xb4>)
   24b78:	481d      	ldr	r0, [pc, #116]	; (24bf0 <k_work_queue_start+0xb8>)
   24b7a:	f240 22ca 	movw	r2, #714	; 0x2ca
   24b7e:	f005 fa64 	bl	2a04a <assert_print>
   24b82:	f240 21ca 	movw	r1, #714	; 0x2ca
   24b86:	e7e4      	b.n	24b52 <k_work_queue_start+0x1a>
	list->tail = NULL;
   24b88:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   24b8c:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   24b90:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   24b94:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24b98:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90
	if ((cfg != NULL) && cfg->no_yield) {
   24b9c:	b31d      	cbz	r5, 24be6 <k_work_queue_start+0xae>
   24b9e:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24ba0:	2800      	cmp	r0, #0
   24ba2:	f240 1001 	movw	r0, #257	; 0x101
   24ba6:	bf08      	it	eq
   24ba8:	2001      	moveq	r0, #1
	*flagp = flags;
   24baa:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24bae:	2000      	movs	r0, #0
   24bb0:	f04f 36ff 	mov.w	r6, #4294967295
   24bb4:	f04f 37ff 	mov.w	r7, #4294967295
   24bb8:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24bbc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24bc0:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24bc4:	4b0b      	ldr	r3, [pc, #44]	; (24bf4 <k_work_queue_start+0xbc>)
   24bc6:	9400      	str	r4, [sp, #0]
   24bc8:	4620      	mov	r0, r4
   24bca:	f7ff f95f 	bl	23e8c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   24bce:	b125      	cbz	r5, 24bda <k_work_queue_start+0xa2>
   24bd0:	6829      	ldr	r1, [r5, #0]
   24bd2:	b111      	cbz	r1, 24bda <k_work_queue_start+0xa2>
	return z_impl_k_thread_name_set(thread, str);
   24bd4:	4620      	mov	r0, r4
   24bd6:	f009 f8a1 	bl	2dd1c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   24bda:	4620      	mov	r0, r4
}
   24bdc:	b009      	add	sp, #36	; 0x24
   24bde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   24be2:	f009 b8a0 	b.w	2dd26 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   24be6:	2001      	movs	r0, #1
   24be8:	e7df      	b.n	24baa <k_work_queue_start+0x72>
   24bea:	bf00      	nop
   24bec:	000331d2 	.word	0x000331d2
   24bf0:	0002f2b5 	.word	0x0002f2b5
   24bf4:	00024681 	.word	0x00024681

00024bf8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   24bf8:	b538      	push	{r3, r4, r5, lr}
   24bfa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   24bfc:	4604      	mov	r4, r0
   24bfe:	b950      	cbnz	r0, 24c16 <k_work_init_delayable+0x1e>
   24c00:	490e      	ldr	r1, [pc, #56]	; (24c3c <k_work_init_delayable+0x44>)
   24c02:	480f      	ldr	r0, [pc, #60]	; (24c40 <k_work_init_delayable+0x48>)
   24c04:	f44f 7250 	mov.w	r2, #832	; 0x340
   24c08:	f005 fa1f 	bl	2a04a <assert_print>
   24c0c:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   24c10:	480a      	ldr	r0, [pc, #40]	; (24c3c <k_work_init_delayable+0x44>)
   24c12:	f005 fa13 	bl	2a03c <assert_post_action>
   24c16:	b941      	cbnz	r1, 24c2a <k_work_init_delayable+0x32>
   24c18:	4908      	ldr	r1, [pc, #32]	; (24c3c <k_work_init_delayable+0x44>)
   24c1a:	4809      	ldr	r0, [pc, #36]	; (24c40 <k_work_init_delayable+0x48>)
   24c1c:	f240 3241 	movw	r2, #833	; 0x341
   24c20:	f005 fa13 	bl	2a04a <assert_print>
   24c24:	f240 3141 	movw	r1, #833	; 0x341
   24c28:	e7f2      	b.n	24c10 <k_work_init_delayable+0x18>

	*dwork = (struct k_work_delayable){
   24c2a:	2230      	movs	r2, #48	; 0x30
   24c2c:	2100      	movs	r1, #0
   24c2e:	f006 f9ed 	bl	2b00c <memset>
   24c32:	f44f 7380 	mov.w	r3, #256	; 0x100
   24c36:	6065      	str	r5, [r4, #4]
   24c38:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   24c3a:	bd38      	pop	{r3, r4, r5, pc}
   24c3c:	000331d2 	.word	0x000331d2
   24c40:	0002f2b5 	.word	0x0002f2b5

00024c44 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   24c44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24c46:	4616      	mov	r6, r2
   24c48:	9001      	str	r0, [sp, #4]
   24c4a:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   24c4c:	460c      	mov	r4, r1
   24c4e:	b951      	cbnz	r1, 24c66 <k_work_schedule_for_queue+0x22>
   24c50:	4927      	ldr	r1, [pc, #156]	; (24cf0 <k_work_schedule_for_queue+0xac>)
   24c52:	4828      	ldr	r0, [pc, #160]	; (24cf4 <k_work_schedule_for_queue+0xb0>)
   24c54:	f240 32b7 	movw	r2, #951	; 0x3b7
   24c58:	f005 f9f7 	bl	2a04a <assert_print>
   24c5c:	4824      	ldr	r0, [pc, #144]	; (24cf0 <k_work_schedule_for_queue+0xac>)
   24c5e:	f240 31b7 	movw	r1, #951	; 0x3b7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c62:	f005 f9eb 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   24c66:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c6a:	f3ef 8711 	mrs	r7, BASEPRI
   24c6e:	f383 8812 	msr	BASEPRI_MAX, r3
   24c72:	f3bf 8f6f 	isb	sy
   24c76:	4820      	ldr	r0, [pc, #128]	; (24cf8 <k_work_schedule_for_queue+0xb4>)
   24c78:	f7ff f9be 	bl	23ff8 <z_spin_lock_valid>
   24c7c:	b938      	cbnz	r0, 24c8e <k_work_schedule_for_queue+0x4a>
   24c7e:	491f      	ldr	r1, [pc, #124]	; (24cfc <k_work_schedule_for_queue+0xb8>)
   24c80:	481c      	ldr	r0, [pc, #112]	; (24cf4 <k_work_schedule_for_queue+0xb0>)
   24c82:	2294      	movs	r2, #148	; 0x94
   24c84:	f005 f9e1 	bl	2a04a <assert_print>
   24c88:	2194      	movs	r1, #148	; 0x94
   24c8a:	481c      	ldr	r0, [pc, #112]	; (24cfc <k_work_schedule_for_queue+0xb8>)
   24c8c:	e7e9      	b.n	24c62 <k_work_schedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   24c8e:	481a      	ldr	r0, [pc, #104]	; (24cf8 <k_work_schedule_for_queue+0xb4>)
   24c90:	f7ff f9d0 	bl	24034 <z_spin_lock_set_owner>
	return *flagp;
   24c94:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   24c96:	f013 0f0e 	tst.w	r3, #14
   24c9a:	d120      	bne.n	24cde <k_work_schedule_for_queue+0x9a>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24c9c:	ea55 0206 	orrs.w	r2, r5, r6
   24ca0:	d10f      	bne.n	24cc2 <k_work_schedule_for_queue+0x7e>
		return submit_to_queue_locked(work, queuep);
   24ca2:	4620      	mov	r0, r4
   24ca4:	a901      	add	r1, sp, #4
   24ca6:	f7ff fde7 	bl	24878 <submit_to_queue_locked>
   24caa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cac:	4812      	ldr	r0, [pc, #72]	; (24cf8 <k_work_schedule_for_queue+0xb4>)
   24cae:	f7ff f9b1 	bl	24014 <z_spin_unlock_valid>
   24cb2:	b9b0      	cbnz	r0, 24ce2 <k_work_schedule_for_queue+0x9e>
   24cb4:	4911      	ldr	r1, [pc, #68]	; (24cfc <k_work_schedule_for_queue+0xb8>)
   24cb6:	480f      	ldr	r0, [pc, #60]	; (24cf4 <k_work_schedule_for_queue+0xb0>)
   24cb8:	22c2      	movs	r2, #194	; 0xc2
   24cba:	f005 f9c6 	bl	2a04a <assert_print>
   24cbe:	21c2      	movs	r1, #194	; 0xc2
   24cc0:	e7e3      	b.n	24c8a <k_work_schedule_for_queue+0x46>
	*flagp |= BIT(bit);
   24cc2:	f043 0308 	orr.w	r3, r3, #8
   24cc6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   24cc8:	9b01      	ldr	r3, [sp, #4]
   24cca:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24ccc:	f104 0010 	add.w	r0, r4, #16
   24cd0:	490b      	ldr	r1, [pc, #44]	; (24d00 <k_work_schedule_for_queue+0xbc>)
   24cd2:	4632      	mov	r2, r6
   24cd4:	462b      	mov	r3, r5
   24cd6:	f001 f969 	bl	25fac <z_add_timeout>
	return ret;
   24cda:	2401      	movs	r4, #1
   24cdc:	e7e6      	b.n	24cac <k_work_schedule_for_queue+0x68>
	int ret = 0;
   24cde:	2400      	movs	r4, #0
   24ce0:	e7e4      	b.n	24cac <k_work_schedule_for_queue+0x68>
	__asm__ volatile(
   24ce2:	f387 8811 	msr	BASEPRI, r7
   24ce6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   24cea:	4620      	mov	r0, r4
   24cec:	b003      	add	sp, #12
   24cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24cf0:	000331d2 	.word	0x000331d2
   24cf4:	0002f2b5 	.word	0x0002f2b5
   24cf8:	20003654 	.word	0x20003654
   24cfc:	0002f9fb 	.word	0x0002f9fb
   24d00:	0002494d 	.word	0x0002494d

00024d04 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   24d04:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   24d06:	4801      	ldr	r0, [pc, #4]	; (24d0c <k_work_schedule+0x8>)
   24d08:	f7ff bf9c 	b.w	24c44 <k_work_schedule_for_queue>
   24d0c:	200028e0 	.word	0x200028e0

00024d10 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   24d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24d12:	4616      	mov	r6, r2
   24d14:	9001      	str	r0, [sp, #4]
   24d16:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   24d18:	460c      	mov	r4, r1
   24d1a:	b951      	cbnz	r1, 24d32 <k_work_reschedule_for_queue+0x22>
   24d1c:	4926      	ldr	r1, [pc, #152]	; (24db8 <k_work_reschedule_for_queue+0xa8>)
   24d1e:	4827      	ldr	r0, [pc, #156]	; (24dbc <k_work_reschedule_for_queue+0xac>)
   24d20:	f240 32db 	movw	r2, #987	; 0x3db
   24d24:	f005 f991 	bl	2a04a <assert_print>
   24d28:	4823      	ldr	r0, [pc, #140]	; (24db8 <k_work_reschedule_for_queue+0xa8>)
   24d2a:	f240 31db 	movw	r1, #987	; 0x3db
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d2e:	f005 f985 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   24d32:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d36:	f3ef 8711 	mrs	r7, BASEPRI
   24d3a:	f383 8812 	msr	BASEPRI_MAX, r3
   24d3e:	f3bf 8f6f 	isb	sy
   24d42:	481f      	ldr	r0, [pc, #124]	; (24dc0 <k_work_reschedule_for_queue+0xb0>)
   24d44:	f7ff f958 	bl	23ff8 <z_spin_lock_valid>
   24d48:	b938      	cbnz	r0, 24d5a <k_work_reschedule_for_queue+0x4a>
   24d4a:	491e      	ldr	r1, [pc, #120]	; (24dc4 <k_work_reschedule_for_queue+0xb4>)
   24d4c:	481b      	ldr	r0, [pc, #108]	; (24dbc <k_work_reschedule_for_queue+0xac>)
   24d4e:	2294      	movs	r2, #148	; 0x94
   24d50:	f005 f97b 	bl	2a04a <assert_print>
   24d54:	2194      	movs	r1, #148	; 0x94
   24d56:	481b      	ldr	r0, [pc, #108]	; (24dc4 <k_work_reschedule_for_queue+0xb4>)
   24d58:	e7e9      	b.n	24d2e <k_work_reschedule_for_queue+0x1e>
	z_spin_lock_set_owner(l);
   24d5a:	4819      	ldr	r0, [pc, #100]	; (24dc0 <k_work_reschedule_for_queue+0xb0>)
   24d5c:	f7ff f96a 	bl	24034 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   24d60:	4620      	mov	r0, r4
   24d62:	f009 f841 	bl	2dde8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24d66:	ea55 0306 	orrs.w	r3, r5, r6
   24d6a:	d10f      	bne.n	24d8c <k_work_reschedule_for_queue+0x7c>
		return submit_to_queue_locked(work, queuep);
   24d6c:	4620      	mov	r0, r4
   24d6e:	a901      	add	r1, sp, #4
   24d70:	f7ff fd82 	bl	24878 <submit_to_queue_locked>
   24d74:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24d76:	4812      	ldr	r0, [pc, #72]	; (24dc0 <k_work_reschedule_for_queue+0xb0>)
   24d78:	f7ff f94c 	bl	24014 <z_spin_unlock_valid>
   24d7c:	b9a8      	cbnz	r0, 24daa <k_work_reschedule_for_queue+0x9a>
   24d7e:	4911      	ldr	r1, [pc, #68]	; (24dc4 <k_work_reschedule_for_queue+0xb4>)
   24d80:	480e      	ldr	r0, [pc, #56]	; (24dbc <k_work_reschedule_for_queue+0xac>)
   24d82:	22c2      	movs	r2, #194	; 0xc2
   24d84:	f005 f961 	bl	2a04a <assert_print>
   24d88:	21c2      	movs	r1, #194	; 0xc2
   24d8a:	e7e4      	b.n	24d56 <k_work_reschedule_for_queue+0x46>
	*flagp |= BIT(bit);
   24d8c:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d8e:	490e      	ldr	r1, [pc, #56]	; (24dc8 <k_work_reschedule_for_queue+0xb8>)
	*flagp |= BIT(bit);
   24d90:	f043 0308 	orr.w	r3, r3, #8
   24d94:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   24d96:	9b01      	ldr	r3, [sp, #4]
   24d98:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   24d9a:	f104 0010 	add.w	r0, r4, #16
   24d9e:	4632      	mov	r2, r6
   24da0:	462b      	mov	r3, r5
   24da2:	f001 f903 	bl	25fac <z_add_timeout>
	return ret;
   24da6:	2401      	movs	r4, #1
   24da8:	e7e5      	b.n	24d76 <k_work_reschedule_for_queue+0x66>
	__asm__ volatile(
   24daa:	f387 8811 	msr	BASEPRI, r7
   24dae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   24db2:	4620      	mov	r0, r4
   24db4:	b003      	add	sp, #12
   24db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24db8:	000331d2 	.word	0x000331d2
   24dbc:	0002f2b5 	.word	0x0002f2b5
   24dc0:	20003654 	.word	0x20003654
   24dc4:	0002f9fb 	.word	0x0002f9fb
   24dc8:	0002494d 	.word	0x0002494d

00024dcc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   24dcc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   24dce:	4801      	ldr	r0, [pc, #4]	; (24dd4 <k_work_reschedule+0x8>)
   24dd0:	f7ff bf9e 	b.w	24d10 <k_work_reschedule_for_queue>
   24dd4:	200028e0 	.word	0x200028e0

00024dd8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   24dd8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   24dda:	4604      	mov	r4, r0
   24ddc:	b950      	cbnz	r0, 24df4 <k_work_cancel_delayable+0x1c>
   24dde:	491d      	ldr	r1, [pc, #116]	; (24e54 <k_work_cancel_delayable+0x7c>)
   24de0:	481d      	ldr	r0, [pc, #116]	; (24e58 <k_work_cancel_delayable+0x80>)
   24de2:	f240 32fd 	movw	r2, #1021	; 0x3fd
   24de6:	f005 f930 	bl	2a04a <assert_print>
   24dea:	481a      	ldr	r0, [pc, #104]	; (24e54 <k_work_cancel_delayable+0x7c>)
   24dec:	f240 31fd 	movw	r1, #1021	; 0x3fd
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24df0:	f005 f924 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   24df4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24df8:	f3ef 8511 	mrs	r5, BASEPRI
   24dfc:	f383 8812 	msr	BASEPRI_MAX, r3
   24e00:	f3bf 8f6f 	isb	sy
   24e04:	4815      	ldr	r0, [pc, #84]	; (24e5c <k_work_cancel_delayable+0x84>)
   24e06:	f7ff f8f7 	bl	23ff8 <z_spin_lock_valid>
   24e0a:	b938      	cbnz	r0, 24e1c <k_work_cancel_delayable+0x44>
   24e0c:	4914      	ldr	r1, [pc, #80]	; (24e60 <k_work_cancel_delayable+0x88>)
   24e0e:	4812      	ldr	r0, [pc, #72]	; (24e58 <k_work_cancel_delayable+0x80>)
   24e10:	2294      	movs	r2, #148	; 0x94
   24e12:	f005 f91a 	bl	2a04a <assert_print>
   24e16:	2194      	movs	r1, #148	; 0x94
   24e18:	4811      	ldr	r0, [pc, #68]	; (24e60 <k_work_cancel_delayable+0x88>)
   24e1a:	e7e9      	b.n	24df0 <k_work_cancel_delayable+0x18>
	z_spin_lock_set_owner(l);
   24e1c:	480f      	ldr	r0, [pc, #60]	; (24e5c <k_work_cancel_delayable+0x84>)
   24e1e:	f7ff f909 	bl	24034 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   24e22:	4620      	mov	r0, r4
   24e24:	f008 ffe0 	bl	2dde8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24e28:	4620      	mov	r0, r4
   24e2a:	f008 fff2 	bl	2de12 <cancel_async_locked>
   24e2e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24e30:	480a      	ldr	r0, [pc, #40]	; (24e5c <k_work_cancel_delayable+0x84>)
   24e32:	f7ff f8ef 	bl	24014 <z_spin_unlock_valid>
   24e36:	b930      	cbnz	r0, 24e46 <k_work_cancel_delayable+0x6e>
   24e38:	4909      	ldr	r1, [pc, #36]	; (24e60 <k_work_cancel_delayable+0x88>)
   24e3a:	4807      	ldr	r0, [pc, #28]	; (24e58 <k_work_cancel_delayable+0x80>)
   24e3c:	22c2      	movs	r2, #194	; 0xc2
   24e3e:	f005 f904 	bl	2a04a <assert_print>
   24e42:	21c2      	movs	r1, #194	; 0xc2
   24e44:	e7e8      	b.n	24e18 <k_work_cancel_delayable+0x40>
	__asm__ volatile(
   24e46:	f385 8811 	msr	BASEPRI, r5
   24e4a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24e4e:	4620      	mov	r0, r4
   24e50:	bd38      	pop	{r3, r4, r5, pc}
   24e52:	bf00      	nop
   24e54:	000331d2 	.word	0x000331d2
   24e58:	0002f2b5 	.word	0x0002f2b5
   24e5c:	20003654 	.word	0x20003654
   24e60:	0002f9fb 	.word	0x0002f9fb

00024e64 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e68:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   24e6a:	4605      	mov	r5, r0
   24e6c:	b950      	cbnz	r0, 24e84 <k_work_cancel_delayable_sync+0x20>
   24e6e:	4933      	ldr	r1, [pc, #204]	; (24f3c <k_work_cancel_delayable_sync+0xd8>)
   24e70:	4833      	ldr	r0, [pc, #204]	; (24f40 <k_work_cancel_delayable_sync+0xdc>)
   24e72:	f240 420e 	movw	r2, #1038	; 0x40e
   24e76:	f005 f8e8 	bl	2a04a <assert_print>
   24e7a:	f240 410e 	movw	r1, #1038	; 0x40e
	__ASSERT_NO_MSG(sync != NULL);
   24e7e:	482f      	ldr	r0, [pc, #188]	; (24f3c <k_work_cancel_delayable_sync+0xd8>)
   24e80:	f005 f8dc 	bl	2a03c <assert_post_action>
   24e84:	b941      	cbnz	r1, 24e98 <k_work_cancel_delayable_sync+0x34>
   24e86:	492d      	ldr	r1, [pc, #180]	; (24f3c <k_work_cancel_delayable_sync+0xd8>)
   24e88:	482d      	ldr	r0, [pc, #180]	; (24f40 <k_work_cancel_delayable_sync+0xdc>)
   24e8a:	f240 420f 	movw	r2, #1039	; 0x40f
   24e8e:	f005 f8dc 	bl	2a04a <assert_print>
   24e92:	f240 410f 	movw	r1, #1039	; 0x40f
   24e96:	e7f2      	b.n	24e7e <k_work_cancel_delayable_sync+0x1a>
	__ASSERT_NO_MSG(!k_is_in_isr());
   24e98:	f008 ff3a 	bl	2dd10 <k_is_in_isr>
   24e9c:	4604      	mov	r4, r0
   24e9e:	b140      	cbz	r0, 24eb2 <k_work_cancel_delayable_sync+0x4e>
   24ea0:	4926      	ldr	r1, [pc, #152]	; (24f3c <k_work_cancel_delayable_sync+0xd8>)
   24ea2:	4827      	ldr	r0, [pc, #156]	; (24f40 <k_work_cancel_delayable_sync+0xdc>)
   24ea4:	f44f 6282 	mov.w	r2, #1040	; 0x410
   24ea8:	f005 f8cf 	bl	2a04a <assert_print>
   24eac:	f44f 6182 	mov.w	r1, #1040	; 0x410
   24eb0:	e7e5      	b.n	24e7e <k_work_cancel_delayable_sync+0x1a>
	__asm__ volatile(
   24eb2:	f04f 0340 	mov.w	r3, #64	; 0x40
   24eb6:	f3ef 8811 	mrs	r8, BASEPRI
   24eba:	f383 8812 	msr	BASEPRI_MAX, r3
   24ebe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24ec2:	4820      	ldr	r0, [pc, #128]	; (24f44 <k_work_cancel_delayable_sync+0xe0>)
   24ec4:	f7ff f898 	bl	23ff8 <z_spin_lock_valid>
   24ec8:	b938      	cbnz	r0, 24eda <k_work_cancel_delayable_sync+0x76>
   24eca:	491f      	ldr	r1, [pc, #124]	; (24f48 <k_work_cancel_delayable_sync+0xe4>)
   24ecc:	481c      	ldr	r0, [pc, #112]	; (24f40 <k_work_cancel_delayable_sync+0xdc>)
   24ece:	2294      	movs	r2, #148	; 0x94
   24ed0:	f005 f8bb 	bl	2a04a <assert_print>
   24ed4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ed6:	481c      	ldr	r0, [pc, #112]	; (24f48 <k_work_cancel_delayable_sync+0xe4>)
   24ed8:	e7d2      	b.n	24e80 <k_work_cancel_delayable_sync+0x1c>
	z_spin_lock_set_owner(l);
   24eda:	481a      	ldr	r0, [pc, #104]	; (24f44 <k_work_cancel_delayable_sync+0xe0>)
   24edc:	f7ff f8aa 	bl	24034 <z_spin_lock_set_owner>
	return *flagp;
   24ee0:	68eb      	ldr	r3, [r5, #12]
   24ee2:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24ee6:	2b00      	cmp	r3, #0
   24ee8:	bf14      	ite	ne
   24eea:	2701      	movne	r7, #1
   24eec:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   24eee:	d00a      	beq.n	24f06 <k_work_cancel_delayable_sync+0xa2>
	(void)unschedule_locked(dwork);
   24ef0:	4628      	mov	r0, r5
   24ef2:	f008 ff79 	bl	2dde8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24ef6:	4628      	mov	r0, r5
   24ef8:	f008 ff8b 	bl	2de12 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24efc:	4631      	mov	r1, r6
   24efe:	4628      	mov	r0, r5
   24f00:	f7ff fc9c 	bl	2483c <cancel_sync_locked>
   24f04:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f06:	480f      	ldr	r0, [pc, #60]	; (24f44 <k_work_cancel_delayable_sync+0xe0>)
   24f08:	f7ff f884 	bl	24014 <z_spin_unlock_valid>
   24f0c:	b930      	cbnz	r0, 24f1c <k_work_cancel_delayable_sync+0xb8>
   24f0e:	490e      	ldr	r1, [pc, #56]	; (24f48 <k_work_cancel_delayable_sync+0xe4>)
   24f10:	480b      	ldr	r0, [pc, #44]	; (24f40 <k_work_cancel_delayable_sync+0xdc>)
   24f12:	22c2      	movs	r2, #194	; 0xc2
   24f14:	f005 f899 	bl	2a04a <assert_print>
   24f18:	21c2      	movs	r1, #194	; 0xc2
   24f1a:	e7dc      	b.n	24ed6 <k_work_cancel_delayable_sync+0x72>
	__asm__ volatile(
   24f1c:	f388 8811 	msr	BASEPRI, r8
   24f20:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   24f24:	b13c      	cbz	r4, 24f36 <k_work_cancel_delayable_sync+0xd2>
	return z_impl_k_sem_take(sem, timeout);
   24f26:	f04f 32ff 	mov.w	r2, #4294967295
   24f2a:	f04f 33ff 	mov.w	r3, #4294967295
   24f2e:	f106 0008 	add.w	r0, r6, #8
   24f32:	f7ff faf5 	bl	24520 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24f36:	4638      	mov	r0, r7
   24f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24f3c:	000331d2 	.word	0x000331d2
   24f40:	0002f2b5 	.word	0x0002f2b5
   24f44:	20003654 	.word	0x20003654
   24f48:	0002f9fb 	.word	0x0002f9fb

00024f4c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   24f4c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   24f4e:	4d07      	ldr	r5, [pc, #28]	; (24f6c <z_reset_time_slice+0x20>)
   24f50:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   24f52:	b154      	cbz	r4, 24f6a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   24f54:	f7fb fed8 	bl	20d08 <sys_clock_elapsed>
   24f58:	4b05      	ldr	r3, [pc, #20]	; (24f70 <z_reset_time_slice+0x24>)
   24f5a:	4404      	add	r4, r0
   24f5c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   24f5e:	6828      	ldr	r0, [r5, #0]
   24f60:	2100      	movs	r1, #0
	}
}
   24f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   24f66:	f001 b973 	b.w	26250 <z_set_timeout_expiry>
}
   24f6a:	bd38      	pop	{r3, r4, r5, pc}
   24f6c:	20003660 	.word	0x20003660
   24f70:	2000361c 	.word	0x2000361c

00024f74 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   24f74:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   24f76:	4d12      	ldr	r5, [pc, #72]	; (24fc0 <update_cache+0x4c>)
   24f78:	462b      	mov	r3, r5
   24f7a:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24f7e:	429c      	cmp	r4, r3
   24f80:	d000      	beq.n	24f84 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   24f82:	b904      	cbnz	r4, 24f86 <update_cache+0x12>
   24f84:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   24f86:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   24f88:	b988      	cbnz	r0, 24fae <update_cache+0x3a>
	__ASSERT(_current != NULL, "");
   24f8a:	b943      	cbnz	r3, 24f9e <update_cache+0x2a>
   24f8c:	490d      	ldr	r1, [pc, #52]	; (24fc4 <update_cache+0x50>)
   24f8e:	480e      	ldr	r0, [pc, #56]	; (24fc8 <update_cache+0x54>)
   24f90:	2289      	movs	r2, #137	; 0x89
   24f92:	f005 f85a 	bl	2a04a <assert_print>
   24f96:	480b      	ldr	r0, [pc, #44]	; (24fc4 <update_cache+0x50>)
   24f98:	2189      	movs	r1, #137	; 0x89
   24f9a:	f005 f84f 	bl	2a03c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   24f9e:	7b5a      	ldrb	r2, [r3, #13]
   24fa0:	06d2      	lsls	r2, r2, #27
   24fa2:	d104      	bne.n	24fae <update_cache+0x3a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   24fa4:	69a2      	ldr	r2, [r4, #24]
   24fa6:	b912      	cbnz	r2, 24fae <update_cache+0x3a>
	if (is_preempt(_current) || is_metairq(thread)) {
   24fa8:	89da      	ldrh	r2, [r3, #14]
   24faa:	2a7f      	cmp	r2, #127	; 0x7f
   24fac:	d805      	bhi.n	24fba <update_cache+0x46>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   24fae:	429c      	cmp	r4, r3
   24fb0:	d002      	beq.n	24fb8 <update_cache+0x44>
			z_reset_time_slice(thread);
   24fb2:	4620      	mov	r0, r4
   24fb4:	f7ff ffca 	bl	24f4c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   24fb8:	4623      	mov	r3, r4
   24fba:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   24fbc:	bd38      	pop	{r3, r4, r5, pc}
   24fbe:	bf00      	nop
   24fc0:	2000361c 	.word	0x2000361c
   24fc4:	000331f3 	.word	0x000331f3
   24fc8:	0002f2b5 	.word	0x0002f2b5

00024fcc <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
   24fcc:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   24fce:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   24fd2:	7b42      	ldrb	r2, [r0, #13]
   24fd4:	2b00      	cmp	r3, #0
   24fd6:	db37      	blt.n	25048 <ready_thread+0x7c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24fd8:	06d3      	lsls	r3, r2, #27
   24fda:	d135      	bne.n	25048 <ready_thread+0x7c>
	return node->next != NULL;
   24fdc:	6983      	ldr	r3, [r0, #24]
   24fde:	2b00      	cmp	r3, #0
   24fe0:	d132      	bne.n	25048 <ready_thread+0x7c>
	thread->base.thread_state |= _THREAD_QUEUED;
   24fe2:	f062 027f 	orn	r2, r2, #127	; 0x7f
   24fe6:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   24fe8:	4a18      	ldr	r2, [pc, #96]	; (2504c <ready_thread+0x80>)
   24fea:	4290      	cmp	r0, r2
   24fec:	d108      	bne.n	25000 <ready_thread+0x34>
   24fee:	4918      	ldr	r1, [pc, #96]	; (25050 <ready_thread+0x84>)
   24ff0:	4818      	ldr	r0, [pc, #96]	; (25054 <ready_thread+0x88>)
   24ff2:	22ba      	movs	r2, #186	; 0xba
   24ff4:	f005 f829 	bl	2a04a <assert_print>
   24ff8:	4815      	ldr	r0, [pc, #84]	; (25050 <ready_thread+0x84>)
   24ffa:	21ba      	movs	r1, #186	; 0xba
   24ffc:	f005 f81e 	bl	2a03c <assert_post_action>
	return list->head == list;
   25000:	4915      	ldr	r1, [pc, #84]	; (25058 <ready_thread+0x8c>)
   25002:	460a      	mov	r2, r1
   25004:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25008:	4294      	cmp	r4, r2
   2500a:	bf18      	it	ne
   2500c:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2500e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25010:	b923      	cbnz	r3, 2501c <ready_thread+0x50>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   25012:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   25016:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25018:	6248      	str	r0, [r1, #36]	; 0x24
}
   2501a:	e00c      	b.n	25036 <ready_thread+0x6a>
	int32_t b1 = thread_1->base.prio;
   2501c:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25020:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   25024:	42b5      	cmp	r5, r6
   25026:	d00b      	beq.n	25040 <ready_thread+0x74>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25028:	42ae      	cmp	r6, r5
   2502a:	dd09      	ble.n	25040 <ready_thread+0x74>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2502c:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2502e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   25032:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   25034:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   25036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2503a:	2000      	movs	r0, #0
   2503c:	f7ff bf9a 	b.w	24f74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25040:	42a3      	cmp	r3, r4
   25042:	d0e6      	beq.n	25012 <ready_thread+0x46>
   25044:	681b      	ldr	r3, [r3, #0]
   25046:	e7e3      	b.n	25010 <ready_thread+0x44>
}
   25048:	bd70      	pop	{r4, r5, r6, pc}
   2504a:	bf00      	nop
   2504c:	200027e0 	.word	0x200027e0
   25050:	000331f3 	.word	0x000331f3
   25054:	0002f2b5 	.word	0x0002f2b5
   25058:	2000361c 	.word	0x2000361c

0002505c <k_sched_time_slice_set>:
{
   2505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2505e:	4604      	mov	r4, r0
   25060:	460d      	mov	r5, r1
	__asm__ volatile(
   25062:	f04f 0340 	mov.w	r3, #64	; 0x40
   25066:	f3ef 8711 	mrs	r7, BASEPRI
   2506a:	f383 8812 	msr	BASEPRI_MAX, r3
   2506e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25072:	481d      	ldr	r0, [pc, #116]	; (250e8 <k_sched_time_slice_set+0x8c>)
   25074:	f7fe ffc0 	bl	23ff8 <z_spin_lock_valid>
   25078:	b940      	cbnz	r0, 2508c <k_sched_time_slice_set+0x30>
   2507a:	491c      	ldr	r1, [pc, #112]	; (250ec <k_sched_time_slice_set+0x90>)
   2507c:	481c      	ldr	r0, [pc, #112]	; (250f0 <k_sched_time_slice_set+0x94>)
   2507e:	2294      	movs	r2, #148	; 0x94
   25080:	f004 ffe3 	bl	2a04a <assert_print>
   25084:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25086:	4819      	ldr	r0, [pc, #100]	; (250ec <k_sched_time_slice_set+0x90>)
   25088:	f004 ffd8 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2508c:	4816      	ldr	r0, [pc, #88]	; (250e8 <k_sched_time_slice_set+0x8c>)
			return (uint32_t)((t * to_hz + off) / from_hz);
   2508e:	2600      	movs	r6, #0
   25090:	f7fe ffd0 	bl	24034 <z_spin_lock_set_owner>
   25094:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   25098:	f240 30e7 	movw	r0, #999	; 0x3e7
   2509c:	4631      	mov	r1, r6
   2509e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   250a2:	2300      	movs	r3, #0
   250a4:	fbe4 010c 	umlal	r0, r1, r4, ip
   250a8:	f7db f82a 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   250ac:	42b4      	cmp	r4, r6
   250ae:	dd02      	ble.n	250b6 <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
   250b0:	2802      	cmp	r0, #2
   250b2:	bfb8      	it	lt
   250b4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   250b6:	4a0f      	ldr	r2, [pc, #60]	; (250f4 <k_sched_time_slice_set+0x98>)
		_current_cpu->slice_ticks = 0;
   250b8:	4b0f      	ldr	r3, [pc, #60]	; (250f8 <k_sched_time_slice_set+0x9c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   250ba:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   250bc:	4a0f      	ldr	r2, [pc, #60]	; (250fc <k_sched_time_slice_set+0xa0>)
		z_reset_time_slice(_current);
   250be:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   250c0:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   250c2:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   250c4:	f7ff ff42 	bl	24f4c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   250c8:	4807      	ldr	r0, [pc, #28]	; (250e8 <k_sched_time_slice_set+0x8c>)
   250ca:	f7fe ffa3 	bl	24014 <z_spin_unlock_valid>
   250ce:	b930      	cbnz	r0, 250de <k_sched_time_slice_set+0x82>
   250d0:	4906      	ldr	r1, [pc, #24]	; (250ec <k_sched_time_slice_set+0x90>)
   250d2:	4807      	ldr	r0, [pc, #28]	; (250f0 <k_sched_time_slice_set+0x94>)
   250d4:	22c2      	movs	r2, #194	; 0xc2
   250d6:	f004 ffb8 	bl	2a04a <assert_print>
   250da:	21c2      	movs	r1, #194	; 0xc2
   250dc:	e7d3      	b.n	25086 <k_sched_time_slice_set+0x2a>
	__asm__ volatile(
   250de:	f387 8811 	msr	BASEPRI, r7
   250e2:	f3bf 8f6f 	isb	sy
}
   250e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   250e8:	20003664 	.word	0x20003664
   250ec:	0002f9fb 	.word	0x0002f9fb
   250f0:	0002f2b5 	.word	0x0002f2b5
   250f4:	20003660 	.word	0x20003660
   250f8:	2000361c 	.word	0x2000361c
   250fc:	2000365c 	.word	0x2000365c

00025100 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   25100:	b538      	push	{r3, r4, r5, lr}
   25102:	4604      	mov	r4, r0
	__asm__ volatile(
   25104:	f04f 0340 	mov.w	r3, #64	; 0x40
   25108:	f3ef 8511 	mrs	r5, BASEPRI
   2510c:	f383 8812 	msr	BASEPRI_MAX, r3
   25110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25114:	4811      	ldr	r0, [pc, #68]	; (2515c <z_ready_thread+0x5c>)
   25116:	f7fe ff6f 	bl	23ff8 <z_spin_lock_valid>
   2511a:	b940      	cbnz	r0, 2512e <z_ready_thread+0x2e>
   2511c:	4910      	ldr	r1, [pc, #64]	; (25160 <z_ready_thread+0x60>)
   2511e:	4811      	ldr	r0, [pc, #68]	; (25164 <z_ready_thread+0x64>)
   25120:	2294      	movs	r2, #148	; 0x94
   25122:	f004 ff92 	bl	2a04a <assert_print>
   25126:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25128:	480d      	ldr	r0, [pc, #52]	; (25160 <z_ready_thread+0x60>)
   2512a:	f004 ff87 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2512e:	480b      	ldr	r0, [pc, #44]	; (2515c <z_ready_thread+0x5c>)
   25130:	f7fe ff80 	bl	24034 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   25134:	4620      	mov	r0, r4
   25136:	f7ff ff49 	bl	24fcc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2513a:	4808      	ldr	r0, [pc, #32]	; (2515c <z_ready_thread+0x5c>)
   2513c:	f7fe ff6a 	bl	24014 <z_spin_unlock_valid>
   25140:	b930      	cbnz	r0, 25150 <z_ready_thread+0x50>
   25142:	4907      	ldr	r1, [pc, #28]	; (25160 <z_ready_thread+0x60>)
   25144:	4807      	ldr	r0, [pc, #28]	; (25164 <z_ready_thread+0x64>)
   25146:	22c2      	movs	r2, #194	; 0xc2
   25148:	f004 ff7f 	bl	2a04a <assert_print>
   2514c:	21c2      	movs	r1, #194	; 0xc2
   2514e:	e7eb      	b.n	25128 <z_ready_thread+0x28>
	__asm__ volatile(
   25150:	f385 8811 	msr	BASEPRI, r5
   25154:	f3bf 8f6f 	isb	sy
		}
	}
}
   25158:	bd38      	pop	{r3, r4, r5, pc}
   2515a:	bf00      	nop
   2515c:	20003664 	.word	0x20003664
   25160:	0002f9fb 	.word	0x0002f9fb
   25164:	0002f2b5 	.word	0x0002f2b5

00025168 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   25168:	b538      	push	{r3, r4, r5, lr}
   2516a:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2516c:	460c      	mov	r4, r1
   2516e:	b9c1      	cbnz	r1, 251a2 <z_reschedule+0x3a>
   25170:	f3ef 8505 	mrs	r5, IPSR
   25174:	b9ad      	cbnz	r5, 251a2 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
   25176:	4a13      	ldr	r2, [pc, #76]	; (251c4 <z_reschedule+0x5c>)
	if (resched(key.key) && need_swap()) {
   25178:	69d1      	ldr	r1, [r2, #28]
   2517a:	6892      	ldr	r2, [r2, #8]
   2517c:	4291      	cmp	r1, r2
   2517e:	d010      	beq.n	251a2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25180:	f7fe ff48 	bl	24014 <z_spin_unlock_valid>
   25184:	b940      	cbnz	r0, 25198 <z_reschedule+0x30>
   25186:	4910      	ldr	r1, [pc, #64]	; (251c8 <z_reschedule+0x60>)
   25188:	4810      	ldr	r0, [pc, #64]	; (251cc <z_reschedule+0x64>)
   2518a:	22e1      	movs	r2, #225	; 0xe1
   2518c:	f004 ff5d 	bl	2a04a <assert_print>
   25190:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25192:	480d      	ldr	r0, [pc, #52]	; (251c8 <z_reschedule+0x60>)
   25194:	f004 ff52 	bl	2a03c <assert_post_action>
	ret = arch_swap(key);
   25198:	4628      	mov	r0, r5
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2519a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2519e:	f7ef bdad 	b.w	14cfc <arch_swap>
   251a2:	4618      	mov	r0, r3
   251a4:	f7fe ff36 	bl	24014 <z_spin_unlock_valid>
   251a8:	b930      	cbnz	r0, 251b8 <z_reschedule+0x50>
   251aa:	4907      	ldr	r1, [pc, #28]	; (251c8 <z_reschedule+0x60>)
   251ac:	4807      	ldr	r0, [pc, #28]	; (251cc <z_reschedule+0x64>)
   251ae:	22c2      	movs	r2, #194	; 0xc2
   251b0:	f004 ff4b 	bl	2a04a <assert_print>
   251b4:	21c2      	movs	r1, #194	; 0xc2
   251b6:	e7ec      	b.n	25192 <z_reschedule+0x2a>
   251b8:	f384 8811 	msr	BASEPRI, r4
   251bc:	f3bf 8f6f 	isb	sy
   251c0:	bd38      	pop	{r3, r4, r5, pc}
   251c2:	bf00      	nop
   251c4:	2000361c 	.word	0x2000361c
   251c8:	0002f9fb 	.word	0x0002f9fb
   251cc:	0002f2b5 	.word	0x0002f2b5

000251d0 <z_sched_start>:
{
   251d0:	b538      	push	{r3, r4, r5, lr}
   251d2:	4604      	mov	r4, r0
	__asm__ volatile(
   251d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   251d8:	f3ef 8511 	mrs	r5, BASEPRI
   251dc:	f383 8812 	msr	BASEPRI_MAX, r3
   251e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251e4:	4817      	ldr	r0, [pc, #92]	; (25244 <z_sched_start+0x74>)
   251e6:	f7fe ff07 	bl	23ff8 <z_spin_lock_valid>
   251ea:	b940      	cbnz	r0, 251fe <z_sched_start+0x2e>
   251ec:	4916      	ldr	r1, [pc, #88]	; (25248 <z_sched_start+0x78>)
   251ee:	4817      	ldr	r0, [pc, #92]	; (2524c <z_sched_start+0x7c>)
   251f0:	2294      	movs	r2, #148	; 0x94
   251f2:	f004 ff2a 	bl	2a04a <assert_print>
   251f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   251f8:	4813      	ldr	r0, [pc, #76]	; (25248 <z_sched_start+0x78>)
   251fa:	f004 ff1f 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   251fe:	4811      	ldr	r0, [pc, #68]	; (25244 <z_sched_start+0x74>)
   25200:	f7fe ff18 	bl	24034 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25204:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   25206:	075a      	lsls	r2, r3, #29
   25208:	d40f      	bmi.n	2522a <z_sched_start+0x5a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2520a:	480e      	ldr	r0, [pc, #56]	; (25244 <z_sched_start+0x74>)
   2520c:	f7fe ff02 	bl	24014 <z_spin_unlock_valid>
   25210:	b930      	cbnz	r0, 25220 <z_sched_start+0x50>
   25212:	490d      	ldr	r1, [pc, #52]	; (25248 <z_sched_start+0x78>)
   25214:	480d      	ldr	r0, [pc, #52]	; (2524c <z_sched_start+0x7c>)
   25216:	22c2      	movs	r2, #194	; 0xc2
   25218:	f004 ff17 	bl	2a04a <assert_print>
   2521c:	21c2      	movs	r1, #194	; 0xc2
   2521e:	e7eb      	b.n	251f8 <z_sched_start+0x28>
	__asm__ volatile(
   25220:	f385 8811 	msr	BASEPRI, r5
   25224:	f3bf 8f6f 	isb	sy
}
   25228:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2522a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2522e:	4620      	mov	r0, r4
   25230:	7363      	strb	r3, [r4, #13]
   25232:	f7ff fecb 	bl	24fcc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25236:	4629      	mov	r1, r5
   25238:	4802      	ldr	r0, [pc, #8]	; (25244 <z_sched_start+0x74>)
}
   2523a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2523e:	f7ff bf93 	b.w	25168 <z_reschedule>
   25242:	bf00      	nop
   25244:	20003664 	.word	0x20003664
   25248:	0002f9fb 	.word	0x0002f9fb
   2524c:	0002f2b5 	.word	0x0002f2b5

00025250 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   25250:	b510      	push	{r4, lr}
	__asm__ volatile(
   25252:	f04f 0340 	mov.w	r3, #64	; 0x40
   25256:	f3ef 8411 	mrs	r4, BASEPRI
   2525a:	f383 8812 	msr	BASEPRI_MAX, r3
   2525e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25262:	481c      	ldr	r0, [pc, #112]	; (252d4 <k_sched_lock+0x84>)
   25264:	f7fe fec8 	bl	23ff8 <z_spin_lock_valid>
   25268:	b938      	cbnz	r0, 2527a <k_sched_lock+0x2a>
   2526a:	491b      	ldr	r1, [pc, #108]	; (252d8 <k_sched_lock+0x88>)
   2526c:	481b      	ldr	r0, [pc, #108]	; (252dc <k_sched_lock+0x8c>)
   2526e:	2294      	movs	r2, #148	; 0x94
   25270:	f004 feeb 	bl	2a04a <assert_print>
   25274:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25276:	4818      	ldr	r0, [pc, #96]	; (252d8 <k_sched_lock+0x88>)
   25278:	e00c      	b.n	25294 <k_sched_lock+0x44>
	z_spin_lock_set_owner(l);
   2527a:	4816      	ldr	r0, [pc, #88]	; (252d4 <k_sched_lock+0x84>)
   2527c:	f7fe feda 	bl	24034 <z_spin_lock_set_owner>
   25280:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25284:	b143      	cbz	r3, 25298 <k_sched_lock+0x48>
   25286:	4916      	ldr	r1, [pc, #88]	; (252e0 <k_sched_lock+0x90>)
   25288:	4814      	ldr	r0, [pc, #80]	; (252dc <k_sched_lock+0x8c>)
   2528a:	22fd      	movs	r2, #253	; 0xfd
   2528c:	f004 fedd 	bl	2a04a <assert_print>
   25290:	21fd      	movs	r1, #253	; 0xfd
   25292:	4813      	ldr	r0, [pc, #76]	; (252e0 <k_sched_lock+0x90>)
   25294:	f004 fed2 	bl	2a03c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   25298:	4b12      	ldr	r3, [pc, #72]	; (252e4 <k_sched_lock+0x94>)
   2529a:	689a      	ldr	r2, [r3, #8]
   2529c:	7bd3      	ldrb	r3, [r2, #15]
   2529e:	2b01      	cmp	r3, #1
   252a0:	d106      	bne.n	252b0 <k_sched_lock+0x60>
   252a2:	490f      	ldr	r1, [pc, #60]	; (252e0 <k_sched_lock+0x90>)
   252a4:	480d      	ldr	r0, [pc, #52]	; (252dc <k_sched_lock+0x8c>)
   252a6:	22fe      	movs	r2, #254	; 0xfe
   252a8:	f004 fecf 	bl	2a04a <assert_print>
   252ac:	21fe      	movs	r1, #254	; 0xfe
   252ae:	e7f0      	b.n	25292 <k_sched_lock+0x42>
	--_current->base.sched_locked;
   252b0:	3b01      	subs	r3, #1
   252b2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   252b4:	4807      	ldr	r0, [pc, #28]	; (252d4 <k_sched_lock+0x84>)
   252b6:	f7fe fead 	bl	24014 <z_spin_unlock_valid>
   252ba:	b930      	cbnz	r0, 252ca <k_sched_lock+0x7a>
   252bc:	4906      	ldr	r1, [pc, #24]	; (252d8 <k_sched_lock+0x88>)
   252be:	4807      	ldr	r0, [pc, #28]	; (252dc <k_sched_lock+0x8c>)
   252c0:	22c2      	movs	r2, #194	; 0xc2
   252c2:	f004 fec2 	bl	2a04a <assert_print>
   252c6:	21c2      	movs	r1, #194	; 0xc2
   252c8:	e7d5      	b.n	25276 <k_sched_lock+0x26>
	__asm__ volatile(
   252ca:	f384 8811 	msr	BASEPRI, r4
   252ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   252d2:	bd10      	pop	{r4, pc}
   252d4:	20003664 	.word	0x20003664
   252d8:	0002f9fb 	.word	0x0002f9fb
   252dc:	0002f2b5 	.word	0x0002f2b5
   252e0:	00033215 	.word	0x00033215
   252e4:	2000361c 	.word	0x2000361c

000252e8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   252e8:	b510      	push	{r4, lr}
	__asm__ volatile(
   252ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   252ee:	f3ef 8411 	mrs	r4, BASEPRI
   252f2:	f383 8812 	msr	BASEPRI_MAX, r3
   252f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   252fa:	4820      	ldr	r0, [pc, #128]	; (2537c <k_sched_unlock+0x94>)
   252fc:	f7fe fe7c 	bl	23ff8 <z_spin_lock_valid>
   25300:	b938      	cbnz	r0, 25312 <k_sched_unlock+0x2a>
   25302:	491f      	ldr	r1, [pc, #124]	; (25380 <k_sched_unlock+0x98>)
   25304:	481f      	ldr	r0, [pc, #124]	; (25384 <k_sched_unlock+0x9c>)
   25306:	2294      	movs	r2, #148	; 0x94
   25308:	f004 fe9f 	bl	2a04a <assert_print>
   2530c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2530e:	481c      	ldr	r0, [pc, #112]	; (25380 <k_sched_unlock+0x98>)
   25310:	e00f      	b.n	25332 <k_sched_unlock+0x4a>
	z_spin_lock_set_owner(l);
   25312:	481a      	ldr	r0, [pc, #104]	; (2537c <k_sched_unlock+0x94>)
   25314:	f7fe fe8e 	bl	24034 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   25318:	4b1b      	ldr	r3, [pc, #108]	; (25388 <k_sched_unlock+0xa0>)
   2531a:	689a      	ldr	r2, [r3, #8]
   2531c:	7bd3      	ldrb	r3, [r2, #15]
   2531e:	b953      	cbnz	r3, 25336 <k_sched_unlock+0x4e>
   25320:	491a      	ldr	r1, [pc, #104]	; (2538c <k_sched_unlock+0xa4>)
   25322:	4818      	ldr	r0, [pc, #96]	; (25384 <k_sched_unlock+0x9c>)
   25324:	f240 32e7 	movw	r2, #999	; 0x3e7
   25328:	f004 fe8f 	bl	2a04a <assert_print>
   2532c:	f240 31e7 	movw	r1, #999	; 0x3e7
   25330:	4816      	ldr	r0, [pc, #88]	; (2538c <k_sched_unlock+0xa4>)
   25332:	f004 fe83 	bl	2a03c <assert_post_action>
   25336:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   2533a:	b140      	cbz	r0, 2534e <k_sched_unlock+0x66>
   2533c:	4913      	ldr	r1, [pc, #76]	; (2538c <k_sched_unlock+0xa4>)
   2533e:	4811      	ldr	r0, [pc, #68]	; (25384 <k_sched_unlock+0x9c>)
   25340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25344:	f004 fe81 	bl	2a04a <assert_print>
   25348:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2534c:	e7f0      	b.n	25330 <k_sched_unlock+0x48>

		++_current->base.sched_locked;
   2534e:	3301      	adds	r3, #1
   25350:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25352:	f7ff fe0f 	bl	24f74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25356:	4809      	ldr	r0, [pc, #36]	; (2537c <k_sched_unlock+0x94>)
   25358:	f7fe fe5c 	bl	24014 <z_spin_unlock_valid>
   2535c:	b930      	cbnz	r0, 2536c <k_sched_unlock+0x84>
   2535e:	4908      	ldr	r1, [pc, #32]	; (25380 <k_sched_unlock+0x98>)
   25360:	4808      	ldr	r0, [pc, #32]	; (25384 <k_sched_unlock+0x9c>)
   25362:	22c2      	movs	r2, #194	; 0xc2
   25364:	f004 fe71 	bl	2a04a <assert_print>
   25368:	21c2      	movs	r1, #194	; 0xc2
   2536a:	e7d0      	b.n	2530e <k_sched_unlock+0x26>
	__asm__ volatile(
   2536c:	f384 8811 	msr	BASEPRI, r4
   25370:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   25374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25378:	f008 bda6 	b.w	2dec8 <z_reschedule_unlocked>
   2537c:	20003664 	.word	0x20003664
   25380:	0002f9fb 	.word	0x0002f9fb
   25384:	0002f2b5 	.word	0x0002f2b5
   25388:	2000361c 	.word	0x2000361c
   2538c:	000331f3 	.word	0x000331f3

00025390 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   25390:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25392:	4b0b      	ldr	r3, [pc, #44]	; (253c0 <z_priq_dumb_remove+0x30>)
   25394:	4299      	cmp	r1, r3
   25396:	d10a      	bne.n	253ae <z_priq_dumb_remove+0x1e>
   25398:	490a      	ldr	r1, [pc, #40]	; (253c4 <z_priq_dumb_remove+0x34>)
   2539a:	480b      	ldr	r0, [pc, #44]	; (253c8 <z_priq_dumb_remove+0x38>)
   2539c:	f240 4273 	movw	r2, #1139	; 0x473
   253a0:	f004 fe53 	bl	2a04a <assert_print>
   253a4:	4807      	ldr	r0, [pc, #28]	; (253c4 <z_priq_dumb_remove+0x34>)
   253a6:	f240 4173 	movw	r1, #1139	; 0x473
   253aa:	f004 fe47 	bl	2a03c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   253ae:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   253b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   253b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   253b6:	2300      	movs	r3, #0
	node->prev = NULL;
   253b8:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   253bc:	bd08      	pop	{r3, pc}
   253be:	bf00      	nop
   253c0:	200027e0 	.word	0x200027e0
   253c4:	000331f3 	.word	0x000331f3
   253c8:	0002f2b5 	.word	0x0002f2b5

000253cc <move_thread_to_end_of_prio_q>:
{
   253cc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   253ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   253d2:	7b43      	ldrb	r3, [r0, #13]
   253d4:	2a00      	cmp	r2, #0
{
   253d6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   253d8:	da06      	bge.n	253e8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   253da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   253de:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   253e0:	4601      	mov	r1, r0
   253e2:	481d      	ldr	r0, [pc, #116]	; (25458 <move_thread_to_end_of_prio_q+0x8c>)
   253e4:	f7ff ffd4 	bl	25390 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   253e8:	7b63      	ldrb	r3, [r4, #13]
   253ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
   253ee:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   253f0:	4b1a      	ldr	r3, [pc, #104]	; (2545c <move_thread_to_end_of_prio_q+0x90>)
   253f2:	429c      	cmp	r4, r3
   253f4:	d108      	bne.n	25408 <move_thread_to_end_of_prio_q+0x3c>
   253f6:	491a      	ldr	r1, [pc, #104]	; (25460 <move_thread_to_end_of_prio_q+0x94>)
   253f8:	481a      	ldr	r0, [pc, #104]	; (25464 <move_thread_to_end_of_prio_q+0x98>)
   253fa:	22ba      	movs	r2, #186	; 0xba
   253fc:	f004 fe25 	bl	2a04a <assert_print>
   25400:	4817      	ldr	r0, [pc, #92]	; (25460 <move_thread_to_end_of_prio_q+0x94>)
   25402:	21ba      	movs	r1, #186	; 0xba
   25404:	f004 fe1a 	bl	2a03c <assert_post_action>
	return list->head == list;
   25408:	4a17      	ldr	r2, [pc, #92]	; (25468 <move_thread_to_end_of_prio_q+0x9c>)
   2540a:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   2540c:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   2540e:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25412:	428b      	cmp	r3, r1
   25414:	bf08      	it	eq
   25416:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25418:	b923      	cbnz	r3, 25424 <move_thread_to_end_of_prio_q+0x58>
	node->prev = tail;
   2541a:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   2541e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   25420:	6254      	str	r4, [r2, #36]	; 0x24
}
   25422:	e00c      	b.n	2543e <move_thread_to_end_of_prio_q+0x72>
	int32_t b1 = thread_1->base.prio;
   25424:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25428:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2542c:	42b5      	cmp	r5, r6
   2542e:	d00e      	beq.n	2544e <move_thread_to_end_of_prio_q+0x82>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25430:	42ae      	cmp	r6, r5
   25432:	dd0c      	ble.n	2544e <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   25434:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   25436:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2543a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2543c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   2543e:	6890      	ldr	r0, [r2, #8]
   25440:	1b03      	subs	r3, r0, r4
   25442:	4258      	negs	r0, r3
}
   25444:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25448:	4158      	adcs	r0, r3
   2544a:	f7ff bd93 	b.w	24f74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2544e:	4298      	cmp	r0, r3
   25450:	d0e3      	beq.n	2541a <move_thread_to_end_of_prio_q+0x4e>
   25452:	681b      	ldr	r3, [r3, #0]
   25454:	e7e0      	b.n	25418 <move_thread_to_end_of_prio_q+0x4c>
   25456:	bf00      	nop
   25458:	2000363c 	.word	0x2000363c
   2545c:	200027e0 	.word	0x200027e0
   25460:	000331f3 	.word	0x000331f3
   25464:	0002f2b5 	.word	0x0002f2b5
   25468:	2000361c 	.word	0x2000361c

0002546c <z_time_slice>:
{
   2546c:	b570      	push	{r4, r5, r6, lr}
   2546e:	4605      	mov	r5, r0
	__asm__ volatile(
   25470:	f04f 0340 	mov.w	r3, #64	; 0x40
   25474:	f3ef 8611 	mrs	r6, BASEPRI
   25478:	f383 8812 	msr	BASEPRI_MAX, r3
   2547c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25480:	4824      	ldr	r0, [pc, #144]	; (25514 <z_time_slice+0xa8>)
   25482:	f7fe fdb9 	bl	23ff8 <z_spin_lock_valid>
   25486:	b940      	cbnz	r0, 2549a <z_time_slice+0x2e>
   25488:	4923      	ldr	r1, [pc, #140]	; (25518 <z_time_slice+0xac>)
   2548a:	4824      	ldr	r0, [pc, #144]	; (2551c <z_time_slice+0xb0>)
   2548c:	2294      	movs	r2, #148	; 0x94
   2548e:	f004 fddc 	bl	2a04a <assert_print>
   25492:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25494:	4820      	ldr	r0, [pc, #128]	; (25518 <z_time_slice+0xac>)
   25496:	f004 fdd1 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   2549a:	481e      	ldr	r0, [pc, #120]	; (25514 <z_time_slice+0xa8>)
   2549c:	f7fe fdca 	bl	24034 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   254a0:	4b1f      	ldr	r3, [pc, #124]	; (25520 <z_time_slice+0xb4>)
   254a2:	4a20      	ldr	r2, [pc, #128]	; (25524 <z_time_slice+0xb8>)
   254a4:	689c      	ldr	r4, [r3, #8]
   254a6:	6811      	ldr	r1, [r2, #0]
   254a8:	428c      	cmp	r4, r1
   254aa:	d10d      	bne.n	254c8 <z_time_slice+0x5c>
		z_reset_time_slice(_current);
   254ac:	4620      	mov	r0, r4
   254ae:	f7ff fd4d 	bl	24f4c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   254b2:	4818      	ldr	r0, [pc, #96]	; (25514 <z_time_slice+0xa8>)
   254b4:	f7fe fdae 	bl	24014 <z_spin_unlock_valid>
   254b8:	bb30      	cbnz	r0, 25508 <z_time_slice+0x9c>
   254ba:	4917      	ldr	r1, [pc, #92]	; (25518 <z_time_slice+0xac>)
   254bc:	4817      	ldr	r0, [pc, #92]	; (2551c <z_time_slice+0xb0>)
   254be:	22c2      	movs	r2, #194	; 0xc2
   254c0:	f004 fdc3 	bl	2a04a <assert_print>
   254c4:	21c2      	movs	r1, #194	; 0xc2
   254c6:	e7e5      	b.n	25494 <z_time_slice+0x28>
	pending_current = NULL;
   254c8:	2100      	movs	r1, #0
   254ca:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   254cc:	4a16      	ldr	r2, [pc, #88]	; (25528 <z_time_slice+0xbc>)
	if (slice_time(_current) && sliceable(_current)) {
   254ce:	6812      	ldr	r2, [r2, #0]
   254d0:	b1c2      	cbz	r2, 25504 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   254d2:	89e2      	ldrh	r2, [r4, #14]
   254d4:	2a7f      	cmp	r2, #127	; 0x7f
   254d6:	d815      	bhi.n	25504 <z_time_slice+0x98>
		&& !z_is_thread_prevented_from_running(thread)
   254d8:	7b62      	ldrb	r2, [r4, #13]
   254da:	06d2      	lsls	r2, r2, #27
   254dc:	d112      	bne.n	25504 <z_time_slice+0x98>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   254de:	4a13      	ldr	r2, [pc, #76]	; (2552c <z_time_slice+0xc0>)
   254e0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   254e4:	6812      	ldr	r2, [r2, #0]
   254e6:	4291      	cmp	r1, r2
   254e8:	db0c      	blt.n	25504 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   254ea:	4a11      	ldr	r2, [pc, #68]	; (25530 <z_time_slice+0xc4>)
   254ec:	4294      	cmp	r4, r2
   254ee:	d009      	beq.n	25504 <z_time_slice+0x98>
		if (ticks >= _current_cpu->slice_ticks) {
   254f0:	691a      	ldr	r2, [r3, #16]
   254f2:	42aa      	cmp	r2, r5
   254f4:	dc03      	bgt.n	254fe <z_time_slice+0x92>
		move_thread_to_end_of_prio_q(curr);
   254f6:	4620      	mov	r0, r4
   254f8:	f7ff ff68 	bl	253cc <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
   254fc:	e7d6      	b.n	254ac <z_time_slice+0x40>
			_current_cpu->slice_ticks -= ticks;
   254fe:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
   25500:	611a      	str	r2, [r3, #16]
   25502:	e7d6      	b.n	254b2 <z_time_slice+0x46>
   25504:	2200      	movs	r2, #0
   25506:	e7fb      	b.n	25500 <z_time_slice+0x94>
	__asm__ volatile(
   25508:	f386 8811 	msr	BASEPRI, r6
   2550c:	f3bf 8f6f 	isb	sy
}
   25510:	bd70      	pop	{r4, r5, r6, pc}
   25512:	bf00      	nop
   25514:	20003664 	.word	0x20003664
   25518:	0002f9fb 	.word	0x0002f9fb
   2551c:	0002f2b5 	.word	0x0002f2b5
   25520:	2000361c 	.word	0x2000361c
   25524:	20003658 	.word	0x20003658
   25528:	20003660 	.word	0x20003660
   2552c:	2000365c 	.word	0x2000365c
   25530:	200027e0 	.word	0x200027e0

00025534 <unready_thread>:
{
   25534:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   25536:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2553a:	7b43      	ldrb	r3, [r0, #13]
   2553c:	2a00      	cmp	r2, #0
{
   2553e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   25540:	da06      	bge.n	25550 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25546:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25548:	4601      	mov	r1, r0
   2554a:	4806      	ldr	r0, [pc, #24]	; (25564 <unready_thread+0x30>)
   2554c:	f7ff ff20 	bl	25390 <z_priq_dumb_remove>
	update_cache(thread == _current);
   25550:	4b05      	ldr	r3, [pc, #20]	; (25568 <unready_thread+0x34>)
   25552:	6898      	ldr	r0, [r3, #8]
   25554:	1b03      	subs	r3, r0, r4
   25556:	4258      	negs	r0, r3
}
   25558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   2555c:	4158      	adcs	r0, r3
   2555e:	f7ff bd09 	b.w	24f74 <update_cache>
   25562:	bf00      	nop
   25564:	2000363c 	.word	0x2000363c
   25568:	2000361c 	.word	0x2000361c

0002556c <add_to_waitq_locked>:
{
   2556c:	b538      	push	{r3, r4, r5, lr}
   2556e:	4604      	mov	r4, r0
   25570:	460d      	mov	r5, r1
	unready_thread(thread);
   25572:	f7ff ffdf 	bl	25534 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   25576:	7b63      	ldrb	r3, [r4, #13]
   25578:	f043 0302 	orr.w	r3, r3, #2
   2557c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2557e:	b345      	cbz	r5, 255d2 <add_to_waitq_locked+0x66>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25580:	4b14      	ldr	r3, [pc, #80]	; (255d4 <add_to_waitq_locked+0x68>)
		thread->base.pended_on = wait_q;
   25582:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25584:	429c      	cmp	r4, r3
   25586:	d108      	bne.n	2559a <add_to_waitq_locked+0x2e>
   25588:	4913      	ldr	r1, [pc, #76]	; (255d8 <add_to_waitq_locked+0x6c>)
   2558a:	4814      	ldr	r0, [pc, #80]	; (255dc <add_to_waitq_locked+0x70>)
   2558c:	22ba      	movs	r2, #186	; 0xba
   2558e:	f004 fd5c 	bl	2a04a <assert_print>
   25592:	4811      	ldr	r0, [pc, #68]	; (255d8 <add_to_waitq_locked+0x6c>)
   25594:	21ba      	movs	r1, #186	; 0xba
   25596:	f004 fd51 	bl	2a03c <assert_post_action>
	return list->head == list;
   2559a:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2559c:	429d      	cmp	r5, r3
   2559e:	d109      	bne.n	255b4 <add_to_waitq_locked+0x48>
	sys_dnode_t *const tail = list->tail;
   255a0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   255a2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   255a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   255a8:	606c      	str	r4, [r5, #4]
}
   255aa:	e012      	b.n	255d2 <add_to_waitq_locked+0x66>
	return (node == list->tail) ? NULL : node->next;
   255ac:	686a      	ldr	r2, [r5, #4]
   255ae:	4293      	cmp	r3, r2
   255b0:	d0f6      	beq.n	255a0 <add_to_waitq_locked+0x34>
   255b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   255b4:	2b00      	cmp	r3, #0
   255b6:	d0f3      	beq.n	255a0 <add_to_waitq_locked+0x34>
	int32_t b1 = thread_1->base.prio;
   255b8:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   255bc:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   255c0:	428a      	cmp	r2, r1
   255c2:	d0f3      	beq.n	255ac <add_to_waitq_locked+0x40>
		if (z_sched_prio_cmp(thread, t) > 0) {
   255c4:	4291      	cmp	r1, r2
   255c6:	ddf1      	ble.n	255ac <add_to_waitq_locked+0x40>
	sys_dnode_t *const prev = successor->prev;
   255c8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   255ca:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   255ce:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   255d0:	605c      	str	r4, [r3, #4]
}
   255d2:	bd38      	pop	{r3, r4, r5, pc}
   255d4:	200027e0 	.word	0x200027e0
   255d8:	000331f3 	.word	0x000331f3
   255dc:	0002f2b5 	.word	0x0002f2b5

000255e0 <pend_locked>:
{
   255e0:	b570      	push	{r4, r5, r6, lr}
   255e2:	4615      	mov	r5, r2
   255e4:	461c      	mov	r4, r3
   255e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   255e8:	f7ff ffc0 	bl	2556c <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   255ec:	f1b4 3fff 	cmp.w	r4, #4294967295
   255f0:	bf08      	it	eq
   255f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   255f6:	d008      	beq.n	2560a <pend_locked+0x2a>
   255f8:	462a      	mov	r2, r5
   255fa:	4623      	mov	r3, r4
   255fc:	f106 0018 	add.w	r0, r6, #24
   25600:	4902      	ldr	r1, [pc, #8]	; (2560c <pend_locked+0x2c>)
}
   25602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25606:	f000 bcd1 	b.w	25fac <z_add_timeout>
   2560a:	bd70      	pop	{r4, r5, r6, pc}
   2560c:	00025915 	.word	0x00025915

00025610 <z_pend_curr>:
{
   25610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   25614:	f8df a094 	ldr.w	sl, [pc, #148]	; 256ac <z_pend_curr+0x9c>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   25618:	4c25      	ldr	r4, [pc, #148]	; (256b0 <z_pend_curr+0xa0>)
	pending_current = _current;
   2561a:	4b26      	ldr	r3, [pc, #152]	; (256b4 <z_pend_curr+0xa4>)
{
   2561c:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2561e:	42a0      	cmp	r0, r4
	pending_current = _current;
   25620:	f8da 2008 	ldr.w	r2, [sl, #8]
   25624:	601a      	str	r2, [r3, #0]
{
   25626:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2562a:	4605      	mov	r5, r0
   2562c:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2562e:	d10a      	bne.n	25646 <z_pend_curr+0x36>
   25630:	4921      	ldr	r1, [pc, #132]	; (256b8 <z_pend_curr+0xa8>)
   25632:	4822      	ldr	r0, [pc, #136]	; (256bc <z_pend_curr+0xac>)
   25634:	f240 324e 	movw	r2, #846	; 0x34e
   25638:	f004 fd07 	bl	2a04a <assert_print>
   2563c:	481e      	ldr	r0, [pc, #120]	; (256b8 <z_pend_curr+0xa8>)
   2563e:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25642:	f004 fcfb 	bl	2a03c <assert_post_action>
	__asm__ volatile(
   25646:	f04f 0240 	mov.w	r2, #64	; 0x40
   2564a:	f3ef 8311 	mrs	r3, BASEPRI
   2564e:	f382 8812 	msr	BASEPRI_MAX, r2
   25652:	f3bf 8f6f 	isb	sy
   25656:	4620      	mov	r0, r4
   25658:	f7fe fcce 	bl	23ff8 <z_spin_lock_valid>
   2565c:	b938      	cbnz	r0, 2566e <z_pend_curr+0x5e>
   2565e:	4918      	ldr	r1, [pc, #96]	; (256c0 <z_pend_curr+0xb0>)
   25660:	4816      	ldr	r0, [pc, #88]	; (256bc <z_pend_curr+0xac>)
   25662:	2294      	movs	r2, #148	; 0x94
   25664:	f004 fcf1 	bl	2a04a <assert_print>
   25668:	2194      	movs	r1, #148	; 0x94
   2566a:	4815      	ldr	r0, [pc, #84]	; (256c0 <z_pend_curr+0xb0>)
   2566c:	e7e9      	b.n	25642 <z_pend_curr+0x32>
	z_spin_lock_set_owner(l);
   2566e:	4620      	mov	r0, r4
   25670:	f7fe fce0 	bl	24034 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   25674:	f8da 0008 	ldr.w	r0, [sl, #8]
   25678:	4642      	mov	r2, r8
   2567a:	464b      	mov	r3, r9
   2567c:	4639      	mov	r1, r7
   2567e:	f7ff ffaf 	bl	255e0 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25682:	4628      	mov	r0, r5
   25684:	f7fe fcc6 	bl	24014 <z_spin_unlock_valid>
   25688:	b930      	cbnz	r0, 25698 <z_pend_curr+0x88>
   2568a:	490d      	ldr	r1, [pc, #52]	; (256c0 <z_pend_curr+0xb0>)
   2568c:	480b      	ldr	r0, [pc, #44]	; (256bc <z_pend_curr+0xac>)
   2568e:	22e1      	movs	r2, #225	; 0xe1
   25690:	f004 fcdb 	bl	2a04a <assert_print>
   25694:	21e1      	movs	r1, #225	; 0xe1
   25696:	e7e8      	b.n	2566a <z_pend_curr+0x5a>
   25698:	4620      	mov	r0, r4
   2569a:	f7fe fcbb 	bl	24014 <z_spin_unlock_valid>
   2569e:	2800      	cmp	r0, #0
   256a0:	d0f3      	beq.n	2568a <z_pend_curr+0x7a>
   256a2:	4630      	mov	r0, r6
}
   256a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   256a8:	f7ef bb28 	b.w	14cfc <arch_swap>
   256ac:	2000361c 	.word	0x2000361c
   256b0:	20003664 	.word	0x20003664
   256b4:	20003658 	.word	0x20003658
   256b8:	000331f3 	.word	0x000331f3
   256bc:	0002f2b5 	.word	0x0002f2b5
   256c0:	0002f9fb 	.word	0x0002f9fb

000256c4 <z_set_prio>:
{
   256c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   256c8:	4604      	mov	r4, r0
   256ca:	460e      	mov	r6, r1
   256cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   256d0:	f3ef 8911 	mrs	r9, BASEPRI
   256d4:	f383 8812 	msr	BASEPRI_MAX, r3
   256d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   256dc:	4831      	ldr	r0, [pc, #196]	; (257a4 <z_set_prio+0xe0>)
   256de:	f7fe fc8b 	bl	23ff8 <z_spin_lock_valid>
   256e2:	4607      	mov	r7, r0
   256e4:	b938      	cbnz	r0, 256f6 <z_set_prio+0x32>
   256e6:	4930      	ldr	r1, [pc, #192]	; (257a8 <z_set_prio+0xe4>)
   256e8:	4830      	ldr	r0, [pc, #192]	; (257ac <z_set_prio+0xe8>)
   256ea:	2294      	movs	r2, #148	; 0x94
   256ec:	f004 fcad 	bl	2a04a <assert_print>
   256f0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256f2:	482d      	ldr	r0, [pc, #180]	; (257a8 <z_set_prio+0xe4>)
   256f4:	e020      	b.n	25738 <z_set_prio+0x74>
	z_spin_lock_set_owner(l);
   256f6:	482b      	ldr	r0, [pc, #172]	; (257a4 <z_set_prio+0xe0>)
   256f8:	f7fe fc9c 	bl	24034 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   256fc:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   256fe:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   25700:	b276      	sxtb	r6, r6
   25702:	d11b      	bne.n	2573c <z_set_prio+0x78>
	return node->next != NULL;
   25704:	69a5      	ldr	r5, [r4, #24]
   25706:	b9cd      	cbnz	r5, 2573c <z_set_prio+0x78>
	_priq_run_remove(thread_runq(thread), thread);
   25708:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 257b0 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25710:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25712:	4621      	mov	r1, r4
   25714:	4640      	mov	r0, r8
   25716:	f7ff fe3b 	bl	25390 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2571a:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2571c:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2571e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25722:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25724:	4b23      	ldr	r3, [pc, #140]	; (257b4 <z_set_prio+0xf0>)
   25726:	429c      	cmp	r4, r3
   25728:	d115      	bne.n	25756 <z_set_prio+0x92>
   2572a:	4923      	ldr	r1, [pc, #140]	; (257b8 <z_set_prio+0xf4>)
   2572c:	481f      	ldr	r0, [pc, #124]	; (257ac <z_set_prio+0xe8>)
   2572e:	22ba      	movs	r2, #186	; 0xba
   25730:	f004 fc8b 	bl	2a04a <assert_print>
   25734:	4820      	ldr	r0, [pc, #128]	; (257b8 <z_set_prio+0xf4>)
   25736:	21ba      	movs	r1, #186	; 0xba
   25738:	f004 fc80 	bl	2a03c <assert_post_action>
			thread->base.prio = prio;
   2573c:	73a6      	strb	r6, [r4, #14]
   2573e:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25740:	4818      	ldr	r0, [pc, #96]	; (257a4 <z_set_prio+0xe0>)
   25742:	f7fe fc67 	bl	24014 <z_spin_unlock_valid>
   25746:	bb30      	cbnz	r0, 25796 <z_set_prio+0xd2>
   25748:	4917      	ldr	r1, [pc, #92]	; (257a8 <z_set_prio+0xe4>)
   2574a:	4818      	ldr	r0, [pc, #96]	; (257ac <z_set_prio+0xe8>)
   2574c:	22c2      	movs	r2, #194	; 0xc2
   2574e:	f004 fc7c 	bl	2a04a <assert_print>
   25752:	21c2      	movs	r1, #194	; 0xc2
   25754:	e7cd      	b.n	256f2 <z_set_prio+0x2e>
	return list->head == list;
   25756:	4643      	mov	r3, r8
   25758:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2575c:	4542      	cmp	r2, r8
   2575e:	bf18      	it	ne
   25760:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   25762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25764:	b925      	cbnz	r5, 25770 <z_set_prio+0xac>
	node->prev = tail;
   25766:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   2576a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2576c:	625c      	str	r4, [r3, #36]	; 0x24
}
   2576e:	e00a      	b.n	25786 <z_set_prio+0xc2>
	int32_t b2 = thread_2->base.prio;
   25770:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   25774:	428e      	cmp	r6, r1
   25776:	d00a      	beq.n	2578e <z_set_prio+0xca>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25778:	42b1      	cmp	r1, r6
   2577a:	dd08      	ble.n	2578e <z_set_prio+0xca>
	sys_dnode_t *const prev = successor->prev;
   2577c:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   2577e:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   25782:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   25784:	606c      	str	r4, [r5, #4]
			update_cache(1);
   25786:	2001      	movs	r0, #1
   25788:	f7ff fbf4 	bl	24f74 <update_cache>
   2578c:	e7d8      	b.n	25740 <z_set_prio+0x7c>
	return (node == list->tail) ? NULL : node->next;
   2578e:	42aa      	cmp	r2, r5
   25790:	d0e9      	beq.n	25766 <z_set_prio+0xa2>
   25792:	682d      	ldr	r5, [r5, #0]
   25794:	e7e6      	b.n	25764 <z_set_prio+0xa0>
	__asm__ volatile(
   25796:	f389 8811 	msr	BASEPRI, r9
   2579a:	f3bf 8f6f 	isb	sy
}
   2579e:	4638      	mov	r0, r7
   257a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   257a4:	20003664 	.word	0x20003664
   257a8:	0002f9fb 	.word	0x0002f9fb
   257ac:	0002f2b5 	.word	0x0002f2b5
   257b0:	2000363c 	.word	0x2000363c
   257b4:	200027e0 	.word	0x200027e0
   257b8:	000331f3 	.word	0x000331f3

000257bc <z_impl_k_thread_suspend>:
{
   257bc:	b570      	push	{r4, r5, r6, lr}
   257be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   257c0:	3018      	adds	r0, #24
   257c2:	f000 fc9f 	bl	26104 <z_abort_timeout>
	__asm__ volatile(
   257c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   257ca:	f3ef 8611 	mrs	r6, BASEPRI
   257ce:	f383 8812 	msr	BASEPRI_MAX, r3
   257d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257d6:	481f      	ldr	r0, [pc, #124]	; (25854 <z_impl_k_thread_suspend+0x98>)
   257d8:	f7fe fc0e 	bl	23ff8 <z_spin_lock_valid>
   257dc:	b940      	cbnz	r0, 257f0 <z_impl_k_thread_suspend+0x34>
   257de:	491e      	ldr	r1, [pc, #120]	; (25858 <z_impl_k_thread_suspend+0x9c>)
   257e0:	481e      	ldr	r0, [pc, #120]	; (2585c <z_impl_k_thread_suspend+0xa0>)
   257e2:	2294      	movs	r2, #148	; 0x94
   257e4:	f004 fc31 	bl	2a04a <assert_print>
   257e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   257ea:	481b      	ldr	r0, [pc, #108]	; (25858 <z_impl_k_thread_suspend+0x9c>)
   257ec:	f004 fc26 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   257f0:	4818      	ldr	r0, [pc, #96]	; (25854 <z_impl_k_thread_suspend+0x98>)
   257f2:	f7fe fc1f 	bl	24034 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   257f6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   257fa:	7b63      	ldrb	r3, [r4, #13]
   257fc:	2a00      	cmp	r2, #0
   257fe:	da06      	bge.n	2580e <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   25804:	4816      	ldr	r0, [pc, #88]	; (25860 <z_impl_k_thread_suspend+0xa4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25806:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25808:	4621      	mov	r1, r4
   2580a:	f7ff fdc1 	bl	25390 <z_priq_dumb_remove>
		update_cache(thread == _current);
   2580e:	4d15      	ldr	r5, [pc, #84]	; (25864 <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25810:	7b63      	ldrb	r3, [r4, #13]
   25812:	68a8      	ldr	r0, [r5, #8]
   25814:	f043 0310 	orr.w	r3, r3, #16
   25818:	7363      	strb	r3, [r4, #13]
   2581a:	1b03      	subs	r3, r0, r4
   2581c:	4258      	negs	r0, r3
   2581e:	4158      	adcs	r0, r3
   25820:	f7ff fba8 	bl	24f74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25824:	480b      	ldr	r0, [pc, #44]	; (25854 <z_impl_k_thread_suspend+0x98>)
   25826:	f7fe fbf5 	bl	24014 <z_spin_unlock_valid>
   2582a:	b930      	cbnz	r0, 2583a <z_impl_k_thread_suspend+0x7e>
   2582c:	490a      	ldr	r1, [pc, #40]	; (25858 <z_impl_k_thread_suspend+0x9c>)
   2582e:	480b      	ldr	r0, [pc, #44]	; (2585c <z_impl_k_thread_suspend+0xa0>)
   25830:	22c2      	movs	r2, #194	; 0xc2
   25832:	f004 fc0a 	bl	2a04a <assert_print>
   25836:	21c2      	movs	r1, #194	; 0xc2
   25838:	e7d7      	b.n	257ea <z_impl_k_thread_suspend+0x2e>
	__asm__ volatile(
   2583a:	f386 8811 	msr	BASEPRI, r6
   2583e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   25842:	68ab      	ldr	r3, [r5, #8]
   25844:	42a3      	cmp	r3, r4
   25846:	d103      	bne.n	25850 <z_impl_k_thread_suspend+0x94>
}
   25848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2584c:	f008 bb3c 	b.w	2dec8 <z_reschedule_unlocked>
}
   25850:	bd70      	pop	{r4, r5, r6, pc}
   25852:	bf00      	nop
   25854:	20003664 	.word	0x20003664
   25858:	0002f9fb 	.word	0x0002f9fb
   2585c:	0002f2b5 	.word	0x0002f2b5
   25860:	2000363c 	.word	0x2000363c
   25864:	2000361c 	.word	0x2000361c

00025868 <unpend_thread_no_timeout>:
{
   25868:	b510      	push	{r4, lr}
   2586a:	4604      	mov	r4, r0
   2586c:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   2586e:	b950      	cbnz	r0, 25886 <unpend_thread_no_timeout+0x1e>
   25870:	490a      	ldr	r1, [pc, #40]	; (2589c <unpend_thread_no_timeout+0x34>)
   25872:	480b      	ldr	r0, [pc, #44]	; (258a0 <unpend_thread_no_timeout+0x38>)
   25874:	f240 22d6 	movw	r2, #726	; 0x2d6
   25878:	f004 fbe7 	bl	2a04a <assert_print>
   2587c:	4807      	ldr	r0, [pc, #28]	; (2589c <unpend_thread_no_timeout+0x34>)
   2587e:	f240 21d6 	movw	r1, #726	; 0x2d6
   25882:	f004 fbdb 	bl	2a03c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25886:	4621      	mov	r1, r4
   25888:	f7ff fd82 	bl	25390 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2588c:	7b63      	ldrb	r3, [r4, #13]
   2588e:	f023 0302 	bic.w	r3, r3, #2
   25892:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   25894:	2300      	movs	r3, #0
   25896:	60a3      	str	r3, [r4, #8]
}
   25898:	bd10      	pop	{r4, pc}
   2589a:	bf00      	nop
   2589c:	000331f3 	.word	0x000331f3
   258a0:	0002f2b5 	.word	0x0002f2b5

000258a4 <z_unpend_thread>:
{
   258a4:	b538      	push	{r3, r4, r5, lr}
   258a6:	4604      	mov	r4, r0
	__asm__ volatile(
   258a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   258ac:	f3ef 8511 	mrs	r5, BASEPRI
   258b0:	f383 8812 	msr	BASEPRI_MAX, r3
   258b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258b8:	4813      	ldr	r0, [pc, #76]	; (25908 <z_unpend_thread+0x64>)
   258ba:	f7fe fb9d 	bl	23ff8 <z_spin_lock_valid>
   258be:	b940      	cbnz	r0, 258d2 <z_unpend_thread+0x2e>
   258c0:	4912      	ldr	r1, [pc, #72]	; (2590c <z_unpend_thread+0x68>)
   258c2:	4813      	ldr	r0, [pc, #76]	; (25910 <z_unpend_thread+0x6c>)
   258c4:	2294      	movs	r2, #148	; 0x94
   258c6:	f004 fbc0 	bl	2a04a <assert_print>
   258ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258cc:	480f      	ldr	r0, [pc, #60]	; (2590c <z_unpend_thread+0x68>)
   258ce:	f004 fbb5 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   258d2:	480d      	ldr	r0, [pc, #52]	; (25908 <z_unpend_thread+0x64>)
   258d4:	f7fe fbae 	bl	24034 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   258d8:	4620      	mov	r0, r4
   258da:	f7ff ffc5 	bl	25868 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   258de:	480a      	ldr	r0, [pc, #40]	; (25908 <z_unpend_thread+0x64>)
   258e0:	f7fe fb98 	bl	24014 <z_spin_unlock_valid>
   258e4:	b930      	cbnz	r0, 258f4 <z_unpend_thread+0x50>
   258e6:	4909      	ldr	r1, [pc, #36]	; (2590c <z_unpend_thread+0x68>)
   258e8:	4809      	ldr	r0, [pc, #36]	; (25910 <z_unpend_thread+0x6c>)
   258ea:	22c2      	movs	r2, #194	; 0xc2
   258ec:	f004 fbad 	bl	2a04a <assert_print>
   258f0:	21c2      	movs	r1, #194	; 0xc2
   258f2:	e7eb      	b.n	258cc <z_unpend_thread+0x28>
	__asm__ volatile(
   258f4:	f385 8811 	msr	BASEPRI, r5
   258f8:	f3bf 8f6f 	isb	sy
   258fc:	f104 0018 	add.w	r0, r4, #24
}
   25900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25904:	f000 bbfe 	b.w	26104 <z_abort_timeout>
   25908:	20003664 	.word	0x20003664
   2590c:	0002f9fb 	.word	0x0002f9fb
   25910:	0002f2b5 	.word	0x0002f2b5

00025914 <z_thread_timeout>:
{
   25914:	b570      	push	{r4, r5, r6, lr}
   25916:	4604      	mov	r4, r0
	__asm__ volatile(
   25918:	f04f 0340 	mov.w	r3, #64	; 0x40
   2591c:	f3ef 8611 	mrs	r6, BASEPRI
   25920:	f383 8812 	msr	BASEPRI_MAX, r3
   25924:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25928:	481a      	ldr	r0, [pc, #104]	; (25994 <z_thread_timeout+0x80>)
   2592a:	f7fe fb65 	bl	23ff8 <z_spin_lock_valid>
   2592e:	b940      	cbnz	r0, 25942 <z_thread_timeout+0x2e>
   25930:	4919      	ldr	r1, [pc, #100]	; (25998 <z_thread_timeout+0x84>)
   25932:	481a      	ldr	r0, [pc, #104]	; (2599c <z_thread_timeout+0x88>)
   25934:	2294      	movs	r2, #148	; 0x94
   25936:	f004 fb88 	bl	2a04a <assert_print>
   2593a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2593c:	4816      	ldr	r0, [pc, #88]	; (25998 <z_thread_timeout+0x84>)
   2593e:	f004 fb7d 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   25942:	4814      	ldr	r0, [pc, #80]	; (25994 <z_thread_timeout+0x80>)
   25944:	f7fe fb76 	bl	24034 <z_spin_lock_set_owner>
		if (!killed) {
   25948:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2594c:	f013 0f28 	tst.w	r3, #40	; 0x28
   25950:	d110      	bne.n	25974 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
   25952:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   25956:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   2595a:	b113      	cbz	r3, 25962 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
   2595c:	4628      	mov	r0, r5
   2595e:	f7ff ff83 	bl	25868 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   25962:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   25966:	f023 0314 	bic.w	r3, r3, #20
   2596a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2596e:	4628      	mov	r0, r5
   25970:	f7ff fb2c 	bl	24fcc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25974:	4807      	ldr	r0, [pc, #28]	; (25994 <z_thread_timeout+0x80>)
   25976:	f7fe fb4d 	bl	24014 <z_spin_unlock_valid>
   2597a:	b930      	cbnz	r0, 2598a <z_thread_timeout+0x76>
   2597c:	4906      	ldr	r1, [pc, #24]	; (25998 <z_thread_timeout+0x84>)
   2597e:	4807      	ldr	r0, [pc, #28]	; (2599c <z_thread_timeout+0x88>)
   25980:	22c2      	movs	r2, #194	; 0xc2
   25982:	f004 fb62 	bl	2a04a <assert_print>
   25986:	21c2      	movs	r1, #194	; 0xc2
   25988:	e7d8      	b.n	2593c <z_thread_timeout+0x28>
	__asm__ volatile(
   2598a:	f386 8811 	msr	BASEPRI, r6
   2598e:	f3bf 8f6f 	isb	sy
}
   25992:	bd70      	pop	{r4, r5, r6, pc}
   25994:	20003664 	.word	0x20003664
   25998:	0002f9fb 	.word	0x0002f9fb
   2599c:	0002f2b5 	.word	0x0002f2b5

000259a0 <z_unpend_first_thread>:
{
   259a0:	b570      	push	{r4, r5, r6, lr}
   259a2:	4605      	mov	r5, r0
	__asm__ volatile(
   259a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   259a8:	f3ef 8611 	mrs	r6, BASEPRI
   259ac:	f383 8812 	msr	BASEPRI_MAX, r3
   259b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259b4:	4816      	ldr	r0, [pc, #88]	; (25a10 <z_unpend_first_thread+0x70>)
   259b6:	f7fe fb1f 	bl	23ff8 <z_spin_lock_valid>
   259ba:	b940      	cbnz	r0, 259ce <z_unpend_first_thread+0x2e>
   259bc:	4915      	ldr	r1, [pc, #84]	; (25a14 <z_unpend_first_thread+0x74>)
   259be:	4816      	ldr	r0, [pc, #88]	; (25a18 <z_unpend_first_thread+0x78>)
   259c0:	2294      	movs	r2, #148	; 0x94
   259c2:	f004 fb42 	bl	2a04a <assert_print>
   259c6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259c8:	4812      	ldr	r0, [pc, #72]	; (25a14 <z_unpend_first_thread+0x74>)
   259ca:	f004 fb37 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   259ce:	4810      	ldr	r0, [pc, #64]	; (25a10 <z_unpend_first_thread+0x70>)
   259d0:	f7fe fb30 	bl	24034 <z_spin_lock_set_owner>
	return list->head == list;
   259d4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   259d6:	42a5      	cmp	r5, r4
   259d8:	d012      	beq.n	25a00 <z_unpend_first_thread+0x60>
		if (thread != NULL) {
   259da:	b134      	cbz	r4, 259ea <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
   259dc:	4620      	mov	r0, r4
   259de:	f7ff ff43 	bl	25868 <unpend_thread_no_timeout>
   259e2:	f104 0018 	add.w	r0, r4, #24
   259e6:	f000 fb8d 	bl	26104 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   259ea:	4809      	ldr	r0, [pc, #36]	; (25a10 <z_unpend_first_thread+0x70>)
   259ec:	f7fe fb12 	bl	24014 <z_spin_unlock_valid>
   259f0:	b940      	cbnz	r0, 25a04 <z_unpend_first_thread+0x64>
   259f2:	4908      	ldr	r1, [pc, #32]	; (25a14 <z_unpend_first_thread+0x74>)
   259f4:	4808      	ldr	r0, [pc, #32]	; (25a18 <z_unpend_first_thread+0x78>)
   259f6:	22c2      	movs	r2, #194	; 0xc2
   259f8:	f004 fb27 	bl	2a04a <assert_print>
   259fc:	21c2      	movs	r1, #194	; 0xc2
   259fe:	e7e3      	b.n	259c8 <z_unpend_first_thread+0x28>
   25a00:	2400      	movs	r4, #0
   25a02:	e7f2      	b.n	259ea <z_unpend_first_thread+0x4a>
	__asm__ volatile(
   25a04:	f386 8811 	msr	BASEPRI, r6
   25a08:	f3bf 8f6f 	isb	sy
}
   25a0c:	4620      	mov	r0, r4
   25a0e:	bd70      	pop	{r4, r5, r6, pc}
   25a10:	20003664 	.word	0x20003664
   25a14:	0002f9fb 	.word	0x0002f9fb
   25a18:	0002f2b5 	.word	0x0002f2b5

00025a1c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   25a1c:	4b04      	ldr	r3, [pc, #16]	; (25a30 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   25a1e:	2100      	movs	r1, #0
   25a20:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   25a24:	e9c3 2208 	strd	r2, r2, [r3, #32]
   25a28:	4608      	mov	r0, r1
   25a2a:	f7ff bb17 	b.w	2505c <k_sched_time_slice_set>
   25a2e:	bf00      	nop
   25a30:	2000361c 	.word	0x2000361c

00025a34 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   25a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25a36:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25a3a:	b14b      	cbz	r3, 25a50 <z_impl_k_yield+0x1c>
   25a3c:	4935      	ldr	r1, [pc, #212]	; (25b14 <z_impl_k_yield+0xe0>)
   25a3e:	4836      	ldr	r0, [pc, #216]	; (25b18 <z_impl_k_yield+0xe4>)
   25a40:	f44f 62ae 	mov.w	r2, #1392	; 0x570
   25a44:	f004 fb01 	bl	2a04a <assert_print>
   25a48:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25a4c:	4831      	ldr	r0, [pc, #196]	; (25b14 <z_impl_k_yield+0xe0>)
   25a4e:	e012      	b.n	25a76 <z_impl_k_yield+0x42>
	__asm__ volatile(
   25a50:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a54:	f3ef 8611 	mrs	r6, BASEPRI
   25a58:	f383 8812 	msr	BASEPRI_MAX, r3
   25a5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a60:	482e      	ldr	r0, [pc, #184]	; (25b1c <z_impl_k_yield+0xe8>)
   25a62:	f7fe fac9 	bl	23ff8 <z_spin_lock_valid>
   25a66:	b940      	cbnz	r0, 25a7a <z_impl_k_yield+0x46>
   25a68:	492d      	ldr	r1, [pc, #180]	; (25b20 <z_impl_k_yield+0xec>)
   25a6a:	482b      	ldr	r0, [pc, #172]	; (25b18 <z_impl_k_yield+0xe4>)
   25a6c:	2294      	movs	r2, #148	; 0x94
   25a6e:	f004 faec 	bl	2a04a <assert_print>
   25a72:	2194      	movs	r1, #148	; 0x94
   25a74:	482a      	ldr	r0, [pc, #168]	; (25b20 <z_impl_k_yield+0xec>)
   25a76:	f004 fae1 	bl	2a03c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   25a7a:	4c2a      	ldr	r4, [pc, #168]	; (25b24 <z_impl_k_yield+0xf0>)
	z_spin_lock_set_owner(l);
   25a7c:	4827      	ldr	r0, [pc, #156]	; (25b1c <z_impl_k_yield+0xe8>)
   25a7e:	f7fe fad9 	bl	24034 <z_spin_lock_set_owner>
   25a82:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25a84:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25a86:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25a8e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25a90:	4628      	mov	r0, r5
   25a92:	f7ff fc7d 	bl	25390 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   25a96:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   25a98:	7b5a      	ldrb	r2, [r3, #13]
   25a9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   25a9e:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25aa0:	4a21      	ldr	r2, [pc, #132]	; (25b28 <z_impl_k_yield+0xf4>)
   25aa2:	4293      	cmp	r3, r2
   25aa4:	d106      	bne.n	25ab4 <z_impl_k_yield+0x80>
   25aa6:	491b      	ldr	r1, [pc, #108]	; (25b14 <z_impl_k_yield+0xe0>)
   25aa8:	481b      	ldr	r0, [pc, #108]	; (25b18 <z_impl_k_yield+0xe4>)
   25aaa:	22ba      	movs	r2, #186	; 0xba
   25aac:	f004 facd 	bl	2a04a <assert_print>
   25ab0:	21ba      	movs	r1, #186	; 0xba
   25ab2:	e7cb      	b.n	25a4c <z_impl_k_yield+0x18>
	return list->head == list;
   25ab4:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   25ab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ab8:	42aa      	cmp	r2, r5
   25aba:	bf08      	it	eq
   25abc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25abe:	b922      	cbnz	r2, 25aca <z_impl_k_yield+0x96>
	node->prev = tail;
   25ac0:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   25ac4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   25ac6:	6263      	str	r3, [r4, #36]	; 0x24
}
   25ac8:	e00c      	b.n	25ae4 <z_impl_k_yield+0xb0>
	int32_t b1 = thread_1->base.prio;
   25aca:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   25ace:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   25ad2:	42b8      	cmp	r0, r7
   25ad4:	d014      	beq.n	25b00 <z_impl_k_yield+0xcc>
		if (z_sched_prio_cmp(thread, t) > 0) {
   25ad6:	4287      	cmp	r7, r0
   25ad8:	dd12      	ble.n	25b00 <z_impl_k_yield+0xcc>
	sys_dnode_t *const prev = successor->prev;
   25ada:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   25adc:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   25ae0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   25ae2:	6053      	str	r3, [r2, #4]
	update_cache(1);
   25ae4:	2001      	movs	r0, #1
   25ae6:	f7ff fa45 	bl	24f74 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25aea:	480c      	ldr	r0, [pc, #48]	; (25b1c <z_impl_k_yield+0xe8>)
   25aec:	f7fe fa92 	bl	24014 <z_spin_unlock_valid>
   25af0:	b950      	cbnz	r0, 25b08 <z_impl_k_yield+0xd4>
   25af2:	490b      	ldr	r1, [pc, #44]	; (25b20 <z_impl_k_yield+0xec>)
   25af4:	4808      	ldr	r0, [pc, #32]	; (25b18 <z_impl_k_yield+0xe4>)
   25af6:	22e1      	movs	r2, #225	; 0xe1
   25af8:	f004 faa7 	bl	2a04a <assert_print>
   25afc:	21e1      	movs	r1, #225	; 0xe1
   25afe:	e7b9      	b.n	25a74 <z_impl_k_yield+0x40>
	return (node == list->tail) ? NULL : node->next;
   25b00:	428a      	cmp	r2, r1
   25b02:	d0dd      	beq.n	25ac0 <z_impl_k_yield+0x8c>
   25b04:	6812      	ldr	r2, [r2, #0]
   25b06:	e7da      	b.n	25abe <z_impl_k_yield+0x8a>
   25b08:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   25b0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   25b0e:	f7ef b8f5 	b.w	14cfc <arch_swap>
   25b12:	bf00      	nop
   25b14:	000331f3 	.word	0x000331f3
   25b18:	0002f2b5 	.word	0x0002f2b5
   25b1c:	20003664 	.word	0x20003664
   25b20:	0002f9fb 	.word	0x0002f9fb
   25b24:	2000361c 	.word	0x2000361c
   25b28:	200027e0 	.word	0x200027e0

00025b2c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   25b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b30:	4605      	mov	r5, r0
   25b32:	460e      	mov	r6, r1
   25b34:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   25b38:	b14b      	cbz	r3, 25b4e <z_tick_sleep+0x22>
   25b3a:	4936      	ldr	r1, [pc, #216]	; (25c14 <z_tick_sleep+0xe8>)
   25b3c:	4836      	ldr	r0, [pc, #216]	; (25c18 <z_tick_sleep+0xec>)
   25b3e:	f240 528c 	movw	r2, #1420	; 0x58c
   25b42:	f004 fa82 	bl	2a04a <assert_print>
   25b46:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   25b4a:	4832      	ldr	r0, [pc, #200]	; (25c14 <z_tick_sleep+0xe8>)
   25b4c:	e020      	b.n	25b90 <z_tick_sleep+0x64>
	if (ticks == 0) {
   25b4e:	ea50 0301 	orrs.w	r3, r0, r1
   25b52:	d103      	bne.n	25b5c <z_tick_sleep+0x30>
	z_impl_k_yield();
   25b54:	f7ff ff6e 	bl	25a34 <z_impl_k_yield>
		return 0;
   25b58:	2000      	movs	r0, #0
   25b5a:	e058      	b.n	25c0e <z_tick_sleep+0xe2>
	if (Z_TICK_ABS(ticks) <= 0) {
   25b5c:	1c82      	adds	r2, r0, #2
   25b5e:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   25b62:	db17      	blt.n	25b94 <z_tick_sleep+0x68>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25b64:	f008 f9ca 	bl	2defc <sys_clock_tick_get_32>
   25b68:	182c      	adds	r4, r5, r0
   25b6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b6e:	f3ef 8811 	mrs	r8, BASEPRI
   25b72:	f383 8812 	msr	BASEPRI_MAX, r3
   25b76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b7a:	4828      	ldr	r0, [pc, #160]	; (25c1c <z_tick_sleep+0xf0>)
   25b7c:	f7fe fa3c 	bl	23ff8 <z_spin_lock_valid>
   25b80:	b960      	cbnz	r0, 25b9c <z_tick_sleep+0x70>
   25b82:	4927      	ldr	r1, [pc, #156]	; (25c20 <z_tick_sleep+0xf4>)
   25b84:	4824      	ldr	r0, [pc, #144]	; (25c18 <z_tick_sleep+0xec>)
   25b86:	2294      	movs	r2, #148	; 0x94
   25b88:	f004 fa5f 	bl	2a04a <assert_print>
   25b8c:	2194      	movs	r1, #148	; 0x94
   25b8e:	4824      	ldr	r0, [pc, #144]	; (25c20 <z_tick_sleep+0xf4>)
   25b90:	f004 fa54 	bl	2a03c <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   25b94:	f06f 0401 	mvn.w	r4, #1
   25b98:	1a24      	subs	r4, r4, r0
   25b9a:	e7e6      	b.n	25b6a <z_tick_sleep+0x3e>
	pending_current = _current;
   25b9c:	4f21      	ldr	r7, [pc, #132]	; (25c24 <z_tick_sleep+0xf8>)
	z_spin_lock_set_owner(l);
   25b9e:	481f      	ldr	r0, [pc, #124]	; (25c1c <z_tick_sleep+0xf0>)
   25ba0:	f7fe fa48 	bl	24034 <z_spin_lock_set_owner>
   25ba4:	4b20      	ldr	r3, [pc, #128]	; (25c28 <z_tick_sleep+0xfc>)
   25ba6:	68b8      	ldr	r0, [r7, #8]
   25ba8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   25baa:	f7ff fcc3 	bl	25534 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25bae:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25bb0:	491e      	ldr	r1, [pc, #120]	; (25c2c <z_tick_sleep+0x100>)
   25bb2:	462a      	mov	r2, r5
   25bb4:	4633      	mov	r3, r6
   25bb6:	3018      	adds	r0, #24
   25bb8:	f000 f9f8 	bl	25fac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25bbc:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bbe:	4817      	ldr	r0, [pc, #92]	; (25c1c <z_tick_sleep+0xf0>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   25bc0:	7b53      	ldrb	r3, [r2, #13]
   25bc2:	f043 0310 	orr.w	r3, r3, #16
   25bc6:	7353      	strb	r3, [r2, #13]
   25bc8:	f7fe fa24 	bl	24014 <z_spin_unlock_valid>
   25bcc:	b930      	cbnz	r0, 25bdc <z_tick_sleep+0xb0>
   25bce:	4914      	ldr	r1, [pc, #80]	; (25c20 <z_tick_sleep+0xf4>)
   25bd0:	4811      	ldr	r0, [pc, #68]	; (25c18 <z_tick_sleep+0xec>)
   25bd2:	22e1      	movs	r2, #225	; 0xe1
   25bd4:	f004 fa39 	bl	2a04a <assert_print>
   25bd8:	21e1      	movs	r1, #225	; 0xe1
   25bda:	e7d8      	b.n	25b8e <z_tick_sleep+0x62>
   25bdc:	4640      	mov	r0, r8
   25bde:	f7ef f88d 	bl	14cfc <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   25be2:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   25be4:	7b5b      	ldrb	r3, [r3, #13]
   25be6:	06db      	lsls	r3, r3, #27
   25be8:	d508      	bpl.n	25bfc <z_tick_sleep+0xd0>
   25bea:	490a      	ldr	r1, [pc, #40]	; (25c14 <z_tick_sleep+0xe8>)
   25bec:	480a      	ldr	r0, [pc, #40]	; (25c18 <z_tick_sleep+0xec>)
   25bee:	f44f 62b5 	mov.w	r2, #1448	; 0x5a8
   25bf2:	f004 fa2a 	bl	2a04a <assert_print>
   25bf6:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   25bfa:	e7a6      	b.n	25b4a <z_tick_sleep+0x1e>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25bfc:	f008 f97e 	bl	2defc <sys_clock_tick_get_32>
   25c00:	1a20      	subs	r0, r4, r0
   25c02:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   25c06:	2801      	cmp	r0, #1
   25c08:	f173 0300 	sbcs.w	r3, r3, #0
   25c0c:	dba4      	blt.n	25b58 <z_tick_sleep+0x2c>
		return ticks;
	}
#endif

	return 0;
}
   25c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c12:	bf00      	nop
   25c14:	000331f3 	.word	0x000331f3
   25c18:	0002f2b5 	.word	0x0002f2b5
   25c1c:	20003664 	.word	0x20003664
   25c20:	0002f9fb 	.word	0x0002f9fb
   25c24:	2000361c 	.word	0x2000361c
   25c28:	20003658 	.word	0x20003658
   25c2c:	00025915 	.word	0x00025915

00025c30 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   25c30:	b508      	push	{r3, lr}
   25c32:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   25c36:	b153      	cbz	r3, 25c4e <z_impl_k_sleep+0x1e>
   25c38:	4910      	ldr	r1, [pc, #64]	; (25c7c <z_impl_k_sleep+0x4c>)
   25c3a:	4811      	ldr	r0, [pc, #68]	; (25c80 <z_impl_k_sleep+0x50>)
   25c3c:	f240 52b7 	movw	r2, #1463	; 0x5b7
   25c40:	f004 fa03 	bl	2a04a <assert_print>
   25c44:	480d      	ldr	r0, [pc, #52]	; (25c7c <z_impl_k_sleep+0x4c>)
   25c46:	f240 51b7 	movw	r1, #1463	; 0x5b7
   25c4a:	f004 f9f7 	bl	2a03c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25c4e:	f1b1 3fff 	cmp.w	r1, #4294967295
   25c52:	bf08      	it	eq
   25c54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   25c58:	d106      	bne.n	25c68 <z_impl_k_sleep+0x38>
		k_thread_suspend(_current);
   25c5a:	4b0a      	ldr	r3, [pc, #40]	; (25c84 <z_impl_k_sleep+0x54>)
   25c5c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   25c5e:	f7ff fdad 	bl	257bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   25c62:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   25c66:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   25c68:	f7ff ff60 	bl	25b2c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   25c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25c70:	fb80 0303 	smull	r0, r3, r0, r3
   25c74:	0bc0      	lsrs	r0, r0, #15
   25c76:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   25c7a:	e7f4      	b.n	25c66 <z_impl_k_sleep+0x36>
   25c7c:	000331f3 	.word	0x000331f3
   25c80:	0002f2b5 	.word	0x0002f2b5
   25c84:	2000361c 	.word	0x2000361c

00025c88 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   25c88:	4b01      	ldr	r3, [pc, #4]	; (25c90 <z_impl_z_current_get+0x8>)
   25c8a:	6898      	ldr	r0, [r3, #8]
   25c8c:	4770      	bx	lr
   25c8e:	bf00      	nop
   25c90:	2000361c 	.word	0x2000361c

00025c94 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   25c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25c98:	4604      	mov	r4, r0
   25c9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c9e:	f3ef 8611 	mrs	r6, BASEPRI
   25ca2:	f383 8812 	msr	BASEPRI_MAX, r3
   25ca6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25caa:	4845      	ldr	r0, [pc, #276]	; (25dc0 <z_thread_abort+0x12c>)
   25cac:	f7fe f9a4 	bl	23ff8 <z_spin_lock_valid>
   25cb0:	b940      	cbnz	r0, 25cc4 <z_thread_abort+0x30>
   25cb2:	4944      	ldr	r1, [pc, #272]	; (25dc4 <z_thread_abort+0x130>)
   25cb4:	4844      	ldr	r0, [pc, #272]	; (25dc8 <z_thread_abort+0x134>)
   25cb6:	2294      	movs	r2, #148	; 0x94
   25cb8:	f004 f9c7 	bl	2a04a <assert_print>
   25cbc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25cbe:	4841      	ldr	r0, [pc, #260]	; (25dc4 <z_thread_abort+0x130>)
   25cc0:	f004 f9bc 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   25cc4:	483e      	ldr	r0, [pc, #248]	; (25dc0 <z_thread_abort+0x12c>)
   25cc6:	f7fe f9b5 	bl	24034 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   25cca:	7b23      	ldrb	r3, [r4, #12]
   25ccc:	07d9      	lsls	r1, r3, #31
   25cce:	d518      	bpl.n	25d02 <z_thread_abort+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25cd0:	483b      	ldr	r0, [pc, #236]	; (25dc0 <z_thread_abort+0x12c>)
   25cd2:	f7fe f99f 	bl	24014 <z_spin_unlock_valid>
   25cd6:	b930      	cbnz	r0, 25ce6 <z_thread_abort+0x52>
   25cd8:	493a      	ldr	r1, [pc, #232]	; (25dc4 <z_thread_abort+0x130>)
   25cda:	483b      	ldr	r0, [pc, #236]	; (25dc8 <z_thread_abort+0x134>)
   25cdc:	22c2      	movs	r2, #194	; 0xc2
   25cde:	f004 f9b4 	bl	2a04a <assert_print>
   25ce2:	21c2      	movs	r1, #194	; 0xc2
   25ce4:	e7eb      	b.n	25cbe <z_thread_abort+0x2a>
	__asm__ volatile(
   25ce6:	f386 8811 	msr	BASEPRI, r6
   25cea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   25cee:	4937      	ldr	r1, [pc, #220]	; (25dcc <z_thread_abort+0x138>)
   25cf0:	4835      	ldr	r0, [pc, #212]	; (25dc8 <z_thread_abort+0x134>)
   25cf2:	f240 62c3 	movw	r2, #1731	; 0x6c3
   25cf6:	f004 f9a8 	bl	2a04a <assert_print>
   25cfa:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   25cfe:	4833      	ldr	r0, [pc, #204]	; (25dcc <z_thread_abort+0x138>)
   25d00:	e7de      	b.n	25cc0 <z_thread_abort+0x2c>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   25d02:	7b63      	ldrb	r3, [r4, #13]
   25d04:	071a      	lsls	r2, r3, #28
   25d06:	d50a      	bpl.n	25d1e <z_thread_abort+0x8a>
   25d08:	482d      	ldr	r0, [pc, #180]	; (25dc0 <z_thread_abort+0x12c>)
   25d0a:	f7fe f983 	bl	24014 <z_spin_unlock_valid>
   25d0e:	2800      	cmp	r0, #0
   25d10:	d0e2      	beq.n	25cd8 <z_thread_abort+0x44>
   25d12:	f386 8811 	msr	BASEPRI, r6
   25d16:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   25d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25d1e:	f023 0220 	bic.w	r2, r3, #32
   25d22:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25d26:	09d2      	lsrs	r2, r2, #7
   25d28:	d127      	bne.n	25d7a <z_thread_abort+0xe6>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25d2a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   25d2c:	68a3      	ldr	r3, [r4, #8]
   25d2e:	b113      	cbz	r3, 25d36 <z_thread_abort+0xa2>
			unpend_thread_no_timeout(thread);
   25d30:	4620      	mov	r0, r4
   25d32:	f7ff fd99 	bl	25868 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25d36:	f104 0018 	add.w	r0, r4, #24
   25d3a:	f000 f9e3 	bl	26104 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25d3e:	f104 0758 	add.w	r7, r4, #88	; 0x58
   25d42:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   25d46:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25d48:	42bd      	cmp	r5, r7
   25d4a:	d000      	beq.n	25d4e <z_thread_abort+0xba>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   25d4c:	b9fd      	cbnz	r5, 25d8e <z_thread_abort+0xfa>
		update_cache(1);
   25d4e:	2001      	movs	r0, #1
   25d50:	f7ff f910 	bl	24f74 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   25d54:	4b1e      	ldr	r3, [pc, #120]	; (25dd0 <z_thread_abort+0x13c>)
   25d56:	689b      	ldr	r3, [r3, #8]
   25d58:	42a3      	cmp	r3, r4
   25d5a:	d1d5      	bne.n	25d08 <z_thread_abort+0x74>
   25d5c:	f3ef 8305 	mrs	r3, IPSR
   25d60:	2b00      	cmp	r3, #0
   25d62:	d1d1      	bne.n	25d08 <z_thread_abort+0x74>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d64:	4816      	ldr	r0, [pc, #88]	; (25dc0 <z_thread_abort+0x12c>)
   25d66:	f7fe f955 	bl	24014 <z_spin_unlock_valid>
   25d6a:	b9e8      	cbnz	r0, 25da8 <z_thread_abort+0x114>
   25d6c:	4915      	ldr	r1, [pc, #84]	; (25dc4 <z_thread_abort+0x130>)
   25d6e:	4816      	ldr	r0, [pc, #88]	; (25dc8 <z_thread_abort+0x134>)
   25d70:	22e1      	movs	r2, #225	; 0xe1
   25d72:	f004 f96a 	bl	2a04a <assert_print>
   25d76:	21e1      	movs	r1, #225	; 0xe1
   25d78:	e7a1      	b.n	25cbe <z_thread_abort+0x2a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25d7a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25d7e:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   25d82:	4814      	ldr	r0, [pc, #80]	; (25dd4 <z_thread_abort+0x140>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25d84:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25d86:	4621      	mov	r1, r4
   25d88:	f7ff fb02 	bl	25390 <z_priq_dumb_remove>
}
   25d8c:	e7ce      	b.n	25d2c <z_thread_abort+0x98>
		unpend_thread_no_timeout(thread);
   25d8e:	4628      	mov	r0, r5
   25d90:	f7ff fd6a 	bl	25868 <unpend_thread_no_timeout>
   25d94:	f105 0018 	add.w	r0, r5, #24
   25d98:	f000 f9b4 	bl	26104 <z_abort_timeout>
   25d9c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   25da0:	4628      	mov	r0, r5
   25da2:	f7ff f913 	bl	24fcc <ready_thread>
   25da6:	e7ce      	b.n	25d46 <z_thread_abort+0xb2>
   25da8:	4630      	mov	r0, r6
   25daa:	f7ee ffa7 	bl	14cfc <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   25dae:	4907      	ldr	r1, [pc, #28]	; (25dcc <z_thread_abort+0x138>)
   25db0:	4805      	ldr	r0, [pc, #20]	; (25dc8 <z_thread_abort+0x134>)
   25db2:	f240 62f2 	movw	r2, #1778	; 0x6f2
   25db6:	f004 f948 	bl	2a04a <assert_print>
   25dba:	f240 61f2 	movw	r1, #1778	; 0x6f2
   25dbe:	e79e      	b.n	25cfe <z_thread_abort+0x6a>
   25dc0:	20003664 	.word	0x20003664
   25dc4:	0002f9fb 	.word	0x0002f9fb
   25dc8:	0002f2b5 	.word	0x0002f2b5
   25dcc:	000331f3 	.word	0x000331f3
   25dd0:	2000361c 	.word	0x2000361c
   25dd4:	2000363c 	.word	0x2000363c

00025dd8 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   25dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25ddc:	4606      	mov	r6, r0
   25dde:	4688      	mov	r8, r1
   25de0:	4617      	mov	r7, r2
	__asm__ volatile(
   25de2:	f04f 0340 	mov.w	r3, #64	; 0x40
   25de6:	f3ef 8911 	mrs	r9, BASEPRI
   25dea:	f383 8812 	msr	BASEPRI_MAX, r3
   25dee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25df2:	481c      	ldr	r0, [pc, #112]	; (25e64 <z_sched_wake+0x8c>)
   25df4:	f7fe f900 	bl	23ff8 <z_spin_lock_valid>
   25df8:	4605      	mov	r5, r0
   25dfa:	b940      	cbnz	r0, 25e0e <z_sched_wake+0x36>
   25dfc:	491a      	ldr	r1, [pc, #104]	; (25e68 <z_sched_wake+0x90>)
   25dfe:	481b      	ldr	r0, [pc, #108]	; (25e6c <z_sched_wake+0x94>)
   25e00:	2294      	movs	r2, #148	; 0x94
   25e02:	f004 f922 	bl	2a04a <assert_print>
   25e06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e08:	4817      	ldr	r0, [pc, #92]	; (25e68 <z_sched_wake+0x90>)
   25e0a:	f004 f917 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   25e0e:	4815      	ldr	r0, [pc, #84]	; (25e64 <z_sched_wake+0x8c>)
   25e10:	f7fe f910 	bl	24034 <z_spin_lock_set_owner>
	return list->head == list;
   25e14:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25e16:	42a6      	cmp	r6, r4
   25e18:	d018      	beq.n	25e4c <z_sched_wake+0x74>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   25e1a:	b1cc      	cbz	r4, 25e50 <z_sched_wake+0x78>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   25e1c:	4620      	mov	r0, r4
   25e1e:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   25e22:	6167      	str	r7, [r4, #20]
   25e24:	f7ff fd20 	bl	25868 <unpend_thread_no_timeout>
   25e28:	f104 0018 	add.w	r0, r4, #24
   25e2c:	f000 f96a 	bl	26104 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   25e30:	4620      	mov	r0, r4
   25e32:	f7ff f8cb 	bl	24fcc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e36:	480b      	ldr	r0, [pc, #44]	; (25e64 <z_sched_wake+0x8c>)
   25e38:	f7fe f8ec 	bl	24014 <z_spin_unlock_valid>
   25e3c:	b950      	cbnz	r0, 25e54 <z_sched_wake+0x7c>
   25e3e:	490a      	ldr	r1, [pc, #40]	; (25e68 <z_sched_wake+0x90>)
   25e40:	480a      	ldr	r0, [pc, #40]	; (25e6c <z_sched_wake+0x94>)
   25e42:	22c2      	movs	r2, #194	; 0xc2
   25e44:	f004 f901 	bl	2a04a <assert_print>
   25e48:	21c2      	movs	r1, #194	; 0xc2
   25e4a:	e7dd      	b.n	25e08 <z_sched_wake+0x30>
	bool ret = false;
   25e4c:	2500      	movs	r5, #0
   25e4e:	e7f2      	b.n	25e36 <z_sched_wake+0x5e>
   25e50:	4625      	mov	r5, r4
   25e52:	e7f0      	b.n	25e36 <z_sched_wake+0x5e>
	__asm__ volatile(
   25e54:	f389 8811 	msr	BASEPRI, r9
   25e58:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   25e5c:	4628      	mov	r0, r5
   25e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25e62:	bf00      	nop
   25e64:	20003664 	.word	0x20003664
   25e68:	0002f9fb 	.word	0x0002f9fb
   25e6c:	0002f2b5 	.word	0x0002f2b5

00025e70 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   25e70:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25e72:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25e76:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25e78:	e9cd 6700 	strd	r6, r7, [sp]
   25e7c:	f7ff fbc8 	bl	25610 <z_pend_curr>

	if (data != NULL) {
   25e80:	b11c      	cbz	r4, 25e8a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   25e82:	4b03      	ldr	r3, [pc, #12]	; (25e90 <z_sched_wait+0x20>)
   25e84:	689b      	ldr	r3, [r3, #8]
   25e86:	695b      	ldr	r3, [r3, #20]
   25e88:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   25e8a:	b002      	add	sp, #8
   25e8c:	bdd0      	pop	{r4, r6, r7, pc}
   25e8e:	bf00      	nop
   25e90:	2000361c 	.word	0x2000361c

00025e94 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   25e94:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   25e96:	4806      	ldr	r0, [pc, #24]	; (25eb0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   25e98:	4a06      	ldr	r2, [pc, #24]	; (25eb4 <z_data_copy+0x20>)
   25e9a:	4907      	ldr	r1, [pc, #28]	; (25eb8 <z_data_copy+0x24>)
   25e9c:	1a12      	subs	r2, r2, r0
   25e9e:	f007 ff08 	bl	2dcb2 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   25ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   25ea6:	4a05      	ldr	r2, [pc, #20]	; (25ebc <z_data_copy+0x28>)
   25ea8:	4905      	ldr	r1, [pc, #20]	; (25ec0 <z_data_copy+0x2c>)
   25eaa:	4806      	ldr	r0, [pc, #24]	; (25ec4 <z_data_copy+0x30>)
   25eac:	f007 bf01 	b.w	2dcb2 <z_early_memcpy>
   25eb0:	20000000 	.word	0x20000000
   25eb4:	20000b2c 	.word	0x20000b2c
   25eb8:	000332d8 	.word	0x000332d8
   25ebc:	00000000 	.word	0x00000000
   25ec0:	000332d8 	.word	0x000332d8
   25ec4:	20000000 	.word	0x20000000

00025ec8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   25ec8:	4b03      	ldr	r3, [pc, #12]	; (25ed8 <elapsed+0x10>)
   25eca:	681b      	ldr	r3, [r3, #0]
   25ecc:	b90b      	cbnz	r3, 25ed2 <elapsed+0xa>
   25ece:	f7fa bf1b 	b.w	20d08 <sys_clock_elapsed>
}
   25ed2:	2000      	movs	r0, #0
   25ed4:	4770      	bx	lr
   25ed6:	bf00      	nop
   25ed8:	20003668 	.word	0x20003668

00025edc <next_timeout>:

static int32_t next_timeout(void)
{
   25edc:	b510      	push	{r4, lr}
	return list->head == list;
   25ede:	4b11      	ldr	r3, [pc, #68]	; (25f24 <next_timeout+0x48>)
   25ee0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ee2:	429c      	cmp	r4, r3
   25ee4:	d10a      	bne.n	25efc <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25ee6:	f7ff ffef 	bl	25ec8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   25eea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   25eee:	4b0e      	ldr	r3, [pc, #56]	; (25f28 <next_timeout+0x4c>)
   25ef0:	691b      	ldr	r3, [r3, #16]
   25ef2:	b113      	cbz	r3, 25efa <next_timeout+0x1e>
   25ef4:	4298      	cmp	r0, r3
   25ef6:	bfa8      	it	ge
   25ef8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   25efa:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   25efc:	f7ff ffe4 	bl	25ec8 <elapsed>
	if ((to == NULL) ||
   25f00:	2c00      	cmp	r4, #0
   25f02:	d0f2      	beq.n	25eea <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   25f04:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   25f08:	1a1b      	subs	r3, r3, r0
   25f0a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   25f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25f12:	f172 0100 	sbcs.w	r1, r2, #0
   25f16:	dae8      	bge.n	25eea <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   25f18:	2a00      	cmp	r2, #0
   25f1a:	bfac      	ite	ge
   25f1c:	4618      	movge	r0, r3
   25f1e:	2000      	movlt	r0, #0
   25f20:	e7e5      	b.n	25eee <next_timeout+0x12>
   25f22:	bf00      	nop
   25f24:	200007ac 	.word	0x200007ac
   25f28:	2000361c 	.word	0x2000361c

00025f2c <remove_timeout>:
{
   25f2c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25f2e:	b170      	cbz	r0, 25f4e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   25f30:	4b0b      	ldr	r3, [pc, #44]	; (25f60 <remove_timeout+0x34>)
   25f32:	685b      	ldr	r3, [r3, #4]
   25f34:	4298      	cmp	r0, r3
   25f36:	d00a      	beq.n	25f4e <remove_timeout+0x22>
   25f38:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   25f3a:	b143      	cbz	r3, 25f4e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25f3c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25f40:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   25f44:	1912      	adds	r2, r2, r4
   25f46:	eb41 0105 	adc.w	r1, r1, r5
   25f4a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   25f4e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25f52:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25f54:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25f56:	2300      	movs	r3, #0
	node->prev = NULL;
   25f58:	e9c0 3300 	strd	r3, r3, [r0]
}
   25f5c:	bd30      	pop	{r4, r5, pc}
   25f5e:	bf00      	nop
   25f60:	200007ac 	.word	0x200007ac

00025f64 <timeout_rem>:
	return ret;
}

/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
   25f64:	b570      	push	{r4, r5, r6, lr}
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   25f66:	6804      	ldr	r4, [r0, #0]
   25f68:	b1d4      	cbz	r4, 25fa0 <timeout_rem+0x3c>
	return list->head == list;
   25f6a:	4a0f      	ldr	r2, [pc, #60]	; (25fa8 <timeout_rem+0x44>)
   25f6c:	6813      	ldr	r3, [r2, #0]
	return (node == list->tail) ? NULL : node->next;
   25f6e:	6851      	ldr	r1, [r2, #4]
   25f70:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f72:	4293      	cmp	r3, r2
   25f74:	bf08      	it	eq
   25f76:	2300      	moveq	r3, #0
	return (node == list->tail) ? NULL : node->next;
   25f78:	4625      	mov	r5, r4
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   25f7a:	b933      	cbnz	r3, 25f8a <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   25f7c:	f7ff ffa4 	bl	25ec8 <elapsed>
   25f80:	4603      	mov	r3, r0
   25f82:	1a20      	subs	r0, r4, r0
   25f84:	eb65 71e3 	sbc.w	r1, r5, r3, asr #31
}
   25f88:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   25f8a:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   25f8e:	18a4      	adds	r4, r4, r2
   25f90:	eb45 0506 	adc.w	r5, r5, r6
		if (timeout == t) {
   25f94:	4283      	cmp	r3, r0
   25f96:	d0f1      	beq.n	25f7c <timeout_rem+0x18>
   25f98:	4299      	cmp	r1, r3
   25f9a:	d0ef      	beq.n	25f7c <timeout_rem+0x18>
   25f9c:	681b      	ldr	r3, [r3, #0]
   25f9e:	e7ec      	b.n	25f7a <timeout_rem+0x16>
		return 0;
   25fa0:	4620      	mov	r0, r4
   25fa2:	4621      	mov	r1, r4
   25fa4:	e7f0      	b.n	25f88 <timeout_rem+0x24>
   25fa6:	bf00      	nop
   25fa8:	200007ac 	.word	0x200007ac

00025fac <z_add_timeout>:
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25fac:	f1b3 3fff 	cmp.w	r3, #4294967295
   25fb0:	bf08      	it	eq
   25fb2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   25fb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25fba:	4604      	mov	r4, r0
   25fbc:	4692      	mov	sl, r2
   25fbe:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25fc0:	f000 8090 	beq.w	260e4 <z_add_timeout+0x138>
	return node->next != NULL;
   25fc4:	6806      	ldr	r6, [r0, #0]
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   25fc6:	b146      	cbz	r6, 25fda <z_add_timeout+0x2e>
   25fc8:	4947      	ldr	r1, [pc, #284]	; (260e8 <z_add_timeout+0x13c>)
   25fca:	4848      	ldr	r0, [pc, #288]	; (260ec <z_add_timeout+0x140>)
   25fcc:	2263      	movs	r2, #99	; 0x63
   25fce:	f004 f83c 	bl	2a04a <assert_print>
   25fd2:	4845      	ldr	r0, [pc, #276]	; (260e8 <z_add_timeout+0x13c>)
   25fd4:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25fd6:	f004 f831 	bl	2a03c <assert_post_action>
	to->fn = fn;
   25fda:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   25fdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25fe0:	f3ef 8711 	mrs	r7, BASEPRI
   25fe4:	f383 8812 	msr	BASEPRI_MAX, r3
   25fe8:	f3bf 8f6f 	isb	sy
   25fec:	4840      	ldr	r0, [pc, #256]	; (260f0 <z_add_timeout+0x144>)
   25fee:	f7fe f803 	bl	23ff8 <z_spin_lock_valid>
   25ff2:	b938      	cbnz	r0, 26004 <z_add_timeout+0x58>
   25ff4:	493f      	ldr	r1, [pc, #252]	; (260f4 <z_add_timeout+0x148>)
   25ff6:	483d      	ldr	r0, [pc, #244]	; (260ec <z_add_timeout+0x140>)
   25ff8:	2294      	movs	r2, #148	; 0x94
   25ffa:	f004 f826 	bl	2a04a <assert_print>
   25ffe:	2194      	movs	r1, #148	; 0x94
   26000:	483c      	ldr	r0, [pc, #240]	; (260f4 <z_add_timeout+0x148>)
   26002:	e7e8      	b.n	25fd6 <z_add_timeout+0x2a>
	z_spin_lock_set_owner(l);
   26004:	483a      	ldr	r0, [pc, #232]	; (260f0 <z_add_timeout+0x144>)
   26006:	f7fe f815 	bl	24034 <z_spin_lock_set_owner>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2600a:	f1ba 3fff 	cmp.w	sl, #4294967295
   2600e:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   26012:	da23      	bge.n	2605c <z_add_timeout+0xb0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   26014:	4938      	ldr	r1, [pc, #224]	; (260f8 <z_add_timeout+0x14c>)
   26016:	e9d1 2000 	ldrd	r2, r0, [r1]
   2601a:	f06f 0301 	mvn.w	r3, #1
   2601e:	1a9b      	subs	r3, r3, r2
   26020:	f04f 32ff 	mov.w	r2, #4294967295
   26024:	eb62 0000 	sbc.w	r0, r2, r0
   26028:	ebb3 030a 	subs.w	r3, r3, sl
   2602c:	eb60 0005 	sbc.w	r0, r0, r5
			to->dticks = MAX(1, ticks);
   26030:	2b01      	cmp	r3, #1
   26032:	f170 0200 	sbcs.w	r2, r0, #0
   26036:	da01      	bge.n	2603c <z_add_timeout+0x90>
   26038:	2301      	movs	r3, #1
   2603a:	4630      	mov	r0, r6
   2603c:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   26040:	4b2e      	ldr	r3, [pc, #184]	; (260fc <z_add_timeout+0x150>)
   26042:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   26044:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26048:	429a      	cmp	r2, r3
   2604a:	bf18      	it	ne
   2604c:	4616      	movne	r6, r2
		for (t = first(); t != NULL; t = next(t)) {
   2604e:	b986      	cbnz	r6, 26072 <z_add_timeout+0xc6>
	node->prev = tail;
   26050:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   26054:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   26058:	605c      	str	r4, [r3, #4]
}
   2605a:	e01c      	b.n	26096 <z_add_timeout+0xea>
			to->dticks = timeout.ticks + 1 + elapsed();
   2605c:	f7ff ff34 	bl	25ec8 <elapsed>
   26060:	f11a 0801 	adds.w	r8, sl, #1
   26064:	f145 0500 	adc.w	r5, r5, #0
   26068:	eb18 0300 	adds.w	r3, r8, r0
   2606c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   26070:	e7e4      	b.n	2603c <z_add_timeout+0x90>
			if (t->dticks > to->dticks) {
   26072:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   26076:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   2607a:	428a      	cmp	r2, r1
   2607c:	eb70 0e05 	sbcs.w	lr, r0, r5
   26080:	da23      	bge.n	260ca <z_add_timeout+0x11e>
				t->dticks -= to->dticks;
   26082:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   26084:	6872      	ldr	r2, [r6, #4]
   26086:	eb65 0500 	sbc.w	r5, r5, r0
   2608a:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   2608e:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   26092:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26094:	6074      	str	r4, [r6, #4]
	return list->head == list;
   26096:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26098:	429a      	cmp	r2, r3
   2609a:	d00b      	beq.n	260b4 <z_add_timeout+0x108>
		if (to == first()) {
   2609c:	4294      	cmp	r4, r2
   2609e:	d109      	bne.n	260b4 <z_add_timeout+0x108>
			int32_t next_time = next_timeout();
   260a0:	f7ff ff1c 	bl	25edc <next_timeout>
			if (next_time == 0 ||
   260a4:	b118      	cbz	r0, 260ae <z_add_timeout+0x102>
			    _current_cpu->slice_ticks != next_time) {
   260a6:	4b16      	ldr	r3, [pc, #88]	; (26100 <z_add_timeout+0x154>)
			if (next_time == 0 ||
   260a8:	691b      	ldr	r3, [r3, #16]
   260aa:	4283      	cmp	r3, r0
   260ac:	d002      	beq.n	260b4 <z_add_timeout+0x108>
				sys_clock_set_timeout(next_time, false);
   260ae:	2100      	movs	r1, #0
   260b0:	f7fa fdfe 	bl	20cb0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   260b4:	480e      	ldr	r0, [pc, #56]	; (260f0 <z_add_timeout+0x144>)
   260b6:	f7fd ffad 	bl	24014 <z_spin_unlock_valid>
   260ba:	b978      	cbnz	r0, 260dc <z_add_timeout+0x130>
   260bc:	490d      	ldr	r1, [pc, #52]	; (260f4 <z_add_timeout+0x148>)
   260be:	480b      	ldr	r0, [pc, #44]	; (260ec <z_add_timeout+0x140>)
   260c0:	22c2      	movs	r2, #194	; 0xc2
   260c2:	f003 ffc2 	bl	2a04a <assert_print>
   260c6:	21c2      	movs	r1, #194	; 0xc2
   260c8:	e79a      	b.n	26000 <z_add_timeout+0x54>
			to->dticks -= t->dticks;
   260ca:	1a52      	subs	r2, r2, r1
   260cc:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   260d0:	4566      	cmp	r6, ip
   260d2:	e9c4 2004 	strd	r2, r0, [r4, #16]
   260d6:	d0bb      	beq.n	26050 <z_add_timeout+0xa4>
   260d8:	6836      	ldr	r6, [r6, #0]
   260da:	e7b8      	b.n	2604e <z_add_timeout+0xa2>
	__asm__ volatile(
   260dc:	f387 8811 	msr	BASEPRI, r7
   260e0:	f3bf 8f6f 	isb	sy
}
   260e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   260e8:	00033240 	.word	0x00033240
   260ec:	0002f2b5 	.word	0x0002f2b5
   260f0:	2000366c 	.word	0x2000366c
   260f4:	0002f9fb 	.word	0x0002f9fb
   260f8:	20002980 	.word	0x20002980
   260fc:	200007ac 	.word	0x200007ac
   26100:	2000361c 	.word	0x2000361c

00026104 <z_abort_timeout>:
{
   26104:	b538      	push	{r3, r4, r5, lr}
   26106:	4604      	mov	r4, r0
	__asm__ volatile(
   26108:	f04f 0340 	mov.w	r3, #64	; 0x40
   2610c:	f3ef 8511 	mrs	r5, BASEPRI
   26110:	f383 8812 	msr	BASEPRI_MAX, r3
   26114:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26118:	4814      	ldr	r0, [pc, #80]	; (2616c <z_abort_timeout+0x68>)
   2611a:	f7fd ff6d 	bl	23ff8 <z_spin_lock_valid>
   2611e:	b940      	cbnz	r0, 26132 <z_abort_timeout+0x2e>
   26120:	4913      	ldr	r1, [pc, #76]	; (26170 <z_abort_timeout+0x6c>)
   26122:	4814      	ldr	r0, [pc, #80]	; (26174 <z_abort_timeout+0x70>)
   26124:	2294      	movs	r2, #148	; 0x94
   26126:	f003 ff90 	bl	2a04a <assert_print>
   2612a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2612c:	4810      	ldr	r0, [pc, #64]	; (26170 <z_abort_timeout+0x6c>)
   2612e:	f003 ff85 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26132:	480e      	ldr	r0, [pc, #56]	; (2616c <z_abort_timeout+0x68>)
   26134:	f7fd ff7e 	bl	24034 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   26138:	6823      	ldr	r3, [r4, #0]
   2613a:	b173      	cbz	r3, 2615a <z_abort_timeout+0x56>
			remove_timeout(to);
   2613c:	4620      	mov	r0, r4
   2613e:	f7ff fef5 	bl	25f2c <remove_timeout>
			ret = 0;
   26142:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26144:	4809      	ldr	r0, [pc, #36]	; (2616c <z_abort_timeout+0x68>)
   26146:	f7fd ff65 	bl	24014 <z_spin_unlock_valid>
   2614a:	b948      	cbnz	r0, 26160 <z_abort_timeout+0x5c>
   2614c:	4908      	ldr	r1, [pc, #32]	; (26170 <z_abort_timeout+0x6c>)
   2614e:	4809      	ldr	r0, [pc, #36]	; (26174 <z_abort_timeout+0x70>)
   26150:	22c2      	movs	r2, #194	; 0xc2
   26152:	f003 ff7a 	bl	2a04a <assert_print>
   26156:	21c2      	movs	r1, #194	; 0xc2
   26158:	e7e8      	b.n	2612c <z_abort_timeout+0x28>
	int ret = -EINVAL;
   2615a:	f06f 0415 	mvn.w	r4, #21
   2615e:	e7f1      	b.n	26144 <z_abort_timeout+0x40>
	__asm__ volatile(
   26160:	f385 8811 	msr	BASEPRI, r5
   26164:	f3bf 8f6f 	isb	sy
}
   26168:	4620      	mov	r0, r4
   2616a:	bd38      	pop	{r3, r4, r5, pc}
   2616c:	2000366c 	.word	0x2000366c
   26170:	0002f9fb 	.word	0x0002f9fb
   26174:	0002f2b5 	.word	0x0002f2b5

00026178 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   26178:	b570      	push	{r4, r5, r6, lr}
   2617a:	4604      	mov	r4, r0
	__asm__ volatile(
   2617c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26180:	f3ef 8611 	mrs	r6, BASEPRI
   26184:	f383 8812 	msr	BASEPRI_MAX, r3
   26188:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2618c:	4813      	ldr	r0, [pc, #76]	; (261dc <z_timeout_remaining+0x64>)
   2618e:	f7fd ff33 	bl	23ff8 <z_spin_lock_valid>
   26192:	b940      	cbnz	r0, 261a6 <z_timeout_remaining+0x2e>
   26194:	4912      	ldr	r1, [pc, #72]	; (261e0 <z_timeout_remaining+0x68>)
   26196:	4813      	ldr	r0, [pc, #76]	; (261e4 <z_timeout_remaining+0x6c>)
   26198:	2294      	movs	r2, #148	; 0x94
   2619a:	f003 ff56 	bl	2a04a <assert_print>
   2619e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261a0:	480f      	ldr	r0, [pc, #60]	; (261e0 <z_timeout_remaining+0x68>)
   261a2:	f003 ff4b 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   261a6:	480d      	ldr	r0, [pc, #52]	; (261dc <z_timeout_remaining+0x64>)
   261a8:	f7fd ff44 	bl	24034 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   261ac:	4620      	mov	r0, r4
   261ae:	f7ff fed9 	bl	25f64 <timeout_rem>
   261b2:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   261b4:	4809      	ldr	r0, [pc, #36]	; (261dc <z_timeout_remaining+0x64>)
   261b6:	460c      	mov	r4, r1
   261b8:	f7fd ff2c 	bl	24014 <z_spin_unlock_valid>
   261bc:	b930      	cbnz	r0, 261cc <z_timeout_remaining+0x54>
   261be:	4908      	ldr	r1, [pc, #32]	; (261e0 <z_timeout_remaining+0x68>)
   261c0:	4808      	ldr	r0, [pc, #32]	; (261e4 <z_timeout_remaining+0x6c>)
   261c2:	22c2      	movs	r2, #194	; 0xc2
   261c4:	f003 ff41 	bl	2a04a <assert_print>
   261c8:	21c2      	movs	r1, #194	; 0xc2
   261ca:	e7e9      	b.n	261a0 <z_timeout_remaining+0x28>
	__asm__ volatile(
   261cc:	f386 8811 	msr	BASEPRI, r6
   261d0:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   261d4:	4628      	mov	r0, r5
   261d6:	4621      	mov	r1, r4
   261d8:	bd70      	pop	{r4, r5, r6, pc}
   261da:	bf00      	nop
   261dc:	2000366c 	.word	0x2000366c
   261e0:	0002f9fb 	.word	0x0002f9fb
   261e4:	0002f2b5 	.word	0x0002f2b5

000261e8 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   261e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   261ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   261ee:	f3ef 8511 	mrs	r5, BASEPRI
   261f2:	f383 8812 	msr	BASEPRI_MAX, r3
   261f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   261fa:	4812      	ldr	r0, [pc, #72]	; (26244 <z_get_next_timeout_expiry+0x5c>)
   261fc:	f7fd fefc 	bl	23ff8 <z_spin_lock_valid>
   26200:	b940      	cbnz	r0, 26214 <z_get_next_timeout_expiry+0x2c>
   26202:	4911      	ldr	r1, [pc, #68]	; (26248 <z_get_next_timeout_expiry+0x60>)
   26204:	4811      	ldr	r0, [pc, #68]	; (2624c <z_get_next_timeout_expiry+0x64>)
   26206:	2294      	movs	r2, #148	; 0x94
   26208:	f003 ff1f 	bl	2a04a <assert_print>
   2620c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2620e:	480e      	ldr	r0, [pc, #56]	; (26248 <z_get_next_timeout_expiry+0x60>)
   26210:	f003 ff14 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26214:	480b      	ldr	r0, [pc, #44]	; (26244 <z_get_next_timeout_expiry+0x5c>)
   26216:	f7fd ff0d 	bl	24034 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2621a:	f7ff fe5f 	bl	25edc <next_timeout>
   2621e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26220:	4808      	ldr	r0, [pc, #32]	; (26244 <z_get_next_timeout_expiry+0x5c>)
   26222:	f7fd fef7 	bl	24014 <z_spin_unlock_valid>
   26226:	b930      	cbnz	r0, 26236 <z_get_next_timeout_expiry+0x4e>
   26228:	4907      	ldr	r1, [pc, #28]	; (26248 <z_get_next_timeout_expiry+0x60>)
   2622a:	4808      	ldr	r0, [pc, #32]	; (2624c <z_get_next_timeout_expiry+0x64>)
   2622c:	22c2      	movs	r2, #194	; 0xc2
   2622e:	f003 ff0c 	bl	2a04a <assert_print>
   26232:	21c2      	movs	r1, #194	; 0xc2
   26234:	e7eb      	b.n	2620e <z_get_next_timeout_expiry+0x26>
	__asm__ volatile(
   26236:	f385 8811 	msr	BASEPRI, r5
   2623a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   2623e:	4620      	mov	r0, r4
   26240:	bd38      	pop	{r3, r4, r5, pc}
   26242:	bf00      	nop
   26244:	2000366c 	.word	0x2000366c
   26248:	0002f9fb 	.word	0x0002f9fb
   2624c:	0002f2b5 	.word	0x0002f2b5

00026250 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   26250:	b570      	push	{r4, r5, r6, lr}
   26252:	4604      	mov	r4, r0
   26254:	460d      	mov	r5, r1
	__asm__ volatile(
   26256:	f04f 0340 	mov.w	r3, #64	; 0x40
   2625a:	f3ef 8611 	mrs	r6, BASEPRI
   2625e:	f383 8812 	msr	BASEPRI_MAX, r3
   26262:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26266:	4816      	ldr	r0, [pc, #88]	; (262c0 <z_set_timeout_expiry+0x70>)
   26268:	f7fd fec6 	bl	23ff8 <z_spin_lock_valid>
   2626c:	b940      	cbnz	r0, 26280 <z_set_timeout_expiry+0x30>
   2626e:	4915      	ldr	r1, [pc, #84]	; (262c4 <z_set_timeout_expiry+0x74>)
   26270:	4815      	ldr	r0, [pc, #84]	; (262c8 <z_set_timeout_expiry+0x78>)
   26272:	2294      	movs	r2, #148	; 0x94
   26274:	f003 fee9 	bl	2a04a <assert_print>
   26278:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2627a:	4812      	ldr	r0, [pc, #72]	; (262c4 <z_set_timeout_expiry+0x74>)
   2627c:	f003 fede 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26280:	480f      	ldr	r0, [pc, #60]	; (262c0 <z_set_timeout_expiry+0x70>)
   26282:	f7fd fed7 	bl	24034 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   26286:	f7ff fe29 	bl	25edc <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   2628a:	2801      	cmp	r0, #1
   2628c:	dd07      	ble.n	2629e <z_set_timeout_expiry+0x4e>
   2628e:	42a0      	cmp	r0, r4
   26290:	db05      	blt.n	2629e <z_set_timeout_expiry+0x4e>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   26292:	42a0      	cmp	r0, r4
   26294:	4629      	mov	r1, r5
   26296:	bfa8      	it	ge
   26298:	4620      	movge	r0, r4
   2629a:	f7fa fd09 	bl	20cb0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2629e:	4808      	ldr	r0, [pc, #32]	; (262c0 <z_set_timeout_expiry+0x70>)
   262a0:	f7fd feb8 	bl	24014 <z_spin_unlock_valid>
   262a4:	b930      	cbnz	r0, 262b4 <z_set_timeout_expiry+0x64>
   262a6:	4907      	ldr	r1, [pc, #28]	; (262c4 <z_set_timeout_expiry+0x74>)
   262a8:	4807      	ldr	r0, [pc, #28]	; (262c8 <z_set_timeout_expiry+0x78>)
   262aa:	22c2      	movs	r2, #194	; 0xc2
   262ac:	f003 fecd 	bl	2a04a <assert_print>
   262b0:	21c2      	movs	r1, #194	; 0xc2
   262b2:	e7e2      	b.n	2627a <z_set_timeout_expiry+0x2a>
	__asm__ volatile(
   262b4:	f386 8811 	msr	BASEPRI, r6
   262b8:	f3bf 8f6f 	isb	sy
		}
	}
}
   262bc:	bd70      	pop	{r4, r5, r6, pc}
   262be:	bf00      	nop
   262c0:	2000366c 	.word	0x2000366c
   262c4:	0002f9fb 	.word	0x0002f9fb
   262c8:	0002f2b5 	.word	0x0002f2b5

000262cc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   262cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   262d0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   262d2:	f7ff f8cb 	bl	2546c <z_time_slice>
	__asm__ volatile(
   262d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   262da:	f3ef 8711 	mrs	r7, BASEPRI
   262de:	f383 8812 	msr	BASEPRI_MAX, r3
   262e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262e6:	483a      	ldr	r0, [pc, #232]	; (263d0 <sys_clock_announce+0x104>)
   262e8:	f7fd fe86 	bl	23ff8 <z_spin_lock_valid>
   262ec:	b940      	cbnz	r0, 26300 <sys_clock_announce+0x34>
   262ee:	4939      	ldr	r1, [pc, #228]	; (263d4 <sys_clock_announce+0x108>)
   262f0:	4839      	ldr	r0, [pc, #228]	; (263d8 <sys_clock_announce+0x10c>)
   262f2:	2294      	movs	r2, #148	; 0x94
   262f4:	f003 fea9 	bl	2a04a <assert_print>
   262f8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   262fa:	4836      	ldr	r0, [pc, #216]	; (263d4 <sys_clock_announce+0x108>)
   262fc:	f003 fe9e 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26300:	4833      	ldr	r0, [pc, #204]	; (263d0 <sys_clock_announce+0x104>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   26302:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 263dc <sys_clock_announce+0x110>
	return list->head == list;
   26306:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 263e0 <sys_clock_announce+0x114>
   2630a:	f7fd fe93 	bl	24034 <z_spin_lock_set_owner>
   2630e:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   26312:	4a34      	ldr	r2, [pc, #208]	; (263e4 <sys_clock_announce+0x118>)
	announce_remaining = ticks;
   26314:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26318:	454d      	cmp	r5, r9
		curr_tick += dt;
   2631a:	e9d2 3c00 	ldrd	r3, ip, [r2]
   2631e:	ea4f 71e4 	mov.w	r1, r4, asr #31
   26322:	d00b      	beq.n	2633c <sys_clock_announce+0x70>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   26324:	b155      	cbz	r5, 2633c <sys_clock_announce+0x70>
   26326:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
   2632a:	42b4      	cmp	r4, r6
   2632c:	eb71 0e00 	sbcs.w	lr, r1, r0
   26330:	da1b      	bge.n	2636a <sys_clock_announce+0x9e>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   26332:	1b36      	subs	r6, r6, r4
   26334:	eb60 0001 	sbc.w	r0, r0, r1
   26338:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
   2633c:	18e3      	adds	r3, r4, r3
   2633e:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
   26342:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   26344:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   26348:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   2634c:	f7ff fdc6 	bl	25edc <next_timeout>
   26350:	4621      	mov	r1, r4
   26352:	f7fa fcad 	bl	20cb0 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26356:	481e      	ldr	r0, [pc, #120]	; (263d0 <sys_clock_announce+0x104>)
   26358:	f7fd fe5c 	bl	24014 <z_spin_unlock_valid>
   2635c:	b1a8      	cbz	r0, 2638a <sys_clock_announce+0xbe>
	__asm__ volatile(
   2635e:	f387 8811 	msr	BASEPRI, r7
   26362:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   26366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2636a:	18f3      	adds	r3, r6, r3
   2636c:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
   26370:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   26374:	2200      	movs	r2, #0
   26376:	2300      	movs	r3, #0
		remove_timeout(t);
   26378:	4628      	mov	r0, r5
		t->dticks = 0;
   2637a:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
   2637e:	f7ff fdd5 	bl	25f2c <remove_timeout>
   26382:	4813      	ldr	r0, [pc, #76]	; (263d0 <sys_clock_announce+0x104>)
   26384:	f7fd fe46 	bl	24014 <z_spin_unlock_valid>
   26388:	b930      	cbnz	r0, 26398 <sys_clock_announce+0xcc>
   2638a:	4912      	ldr	r1, [pc, #72]	; (263d4 <sys_clock_announce+0x108>)
   2638c:	4812      	ldr	r0, [pc, #72]	; (263d8 <sys_clock_announce+0x10c>)
   2638e:	22c2      	movs	r2, #194	; 0xc2
   26390:	f003 fe5b 	bl	2a04a <assert_print>
   26394:	21c2      	movs	r1, #194	; 0xc2
   26396:	e7b0      	b.n	262fa <sys_clock_announce+0x2e>
   26398:	f387 8811 	msr	BASEPRI, r7
   2639c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   263a0:	68ab      	ldr	r3, [r5, #8]
   263a2:	4628      	mov	r0, r5
   263a4:	4798      	blx	r3
	__asm__ volatile(
   263a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   263aa:	f3ef 8711 	mrs	r7, BASEPRI
   263ae:	f383 8812 	msr	BASEPRI_MAX, r3
   263b2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263b6:	4806      	ldr	r0, [pc, #24]	; (263d0 <sys_clock_announce+0x104>)
   263b8:	f7fd fe1e 	bl	23ff8 <z_spin_lock_valid>
   263bc:	2800      	cmp	r0, #0
   263be:	d096      	beq.n	262ee <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
   263c0:	4803      	ldr	r0, [pc, #12]	; (263d0 <sys_clock_announce+0x104>)
   263c2:	f7fd fe37 	bl	24034 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   263c6:	f8d8 4000 	ldr.w	r4, [r8]
   263ca:	1ba4      	subs	r4, r4, r6
   263cc:	e79f      	b.n	2630e <sys_clock_announce+0x42>
   263ce:	bf00      	nop
   263d0:	2000366c 	.word	0x2000366c
   263d4:	0002f9fb 	.word	0x0002f9fb
   263d8:	0002f2b5 	.word	0x0002f2b5
   263dc:	20003668 	.word	0x20003668
   263e0:	200007ac 	.word	0x200007ac
   263e4:	20002980 	.word	0x20002980

000263e8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   263e8:	b570      	push	{r4, r5, r6, lr}
   263ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   263ee:	f3ef 8611 	mrs	r6, BASEPRI
   263f2:	f383 8812 	msr	BASEPRI_MAX, r3
   263f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   263fa:	4815      	ldr	r0, [pc, #84]	; (26450 <sys_clock_tick_get+0x68>)
   263fc:	f7fd fdfc 	bl	23ff8 <z_spin_lock_valid>
   26400:	b940      	cbnz	r0, 26414 <sys_clock_tick_get+0x2c>
   26402:	4914      	ldr	r1, [pc, #80]	; (26454 <sys_clock_tick_get+0x6c>)
   26404:	4814      	ldr	r0, [pc, #80]	; (26458 <sys_clock_tick_get+0x70>)
   26406:	2294      	movs	r2, #148	; 0x94
   26408:	f003 fe1f 	bl	2a04a <assert_print>
   2640c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2640e:	4811      	ldr	r0, [pc, #68]	; (26454 <sys_clock_tick_get+0x6c>)
   26410:	f003 fe14 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26414:	480e      	ldr	r0, [pc, #56]	; (26450 <sys_clock_tick_get+0x68>)
   26416:	f7fd fe0d 	bl	24034 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2641a:	f7ff fd55 	bl	25ec8 <elapsed>
   2641e:	4a0f      	ldr	r2, [pc, #60]	; (2645c <sys_clock_tick_get+0x74>)
   26420:	e9d2 4500 	ldrd	r4, r5, [r2]
   26424:	1904      	adds	r4, r0, r4
   26426:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2642a:	4809      	ldr	r0, [pc, #36]	; (26450 <sys_clock_tick_get+0x68>)
   2642c:	f7fd fdf2 	bl	24014 <z_spin_unlock_valid>
   26430:	b930      	cbnz	r0, 26440 <sys_clock_tick_get+0x58>
   26432:	4908      	ldr	r1, [pc, #32]	; (26454 <sys_clock_tick_get+0x6c>)
   26434:	4808      	ldr	r0, [pc, #32]	; (26458 <sys_clock_tick_get+0x70>)
   26436:	22c2      	movs	r2, #194	; 0xc2
   26438:	f003 fe07 	bl	2a04a <assert_print>
   2643c:	21c2      	movs	r1, #194	; 0xc2
   2643e:	e7e6      	b.n	2640e <sys_clock_tick_get+0x26>
	__asm__ volatile(
   26440:	f386 8811 	msr	BASEPRI, r6
   26444:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   26448:	4620      	mov	r0, r4
   2644a:	4629      	mov	r1, r5
   2644c:	bd70      	pop	{r4, r5, r6, pc}
   2644e:	bf00      	nop
   26450:	2000366c 	.word	0x2000366c
   26454:	0002f9fb 	.word	0x0002f9fb
   26458:	0002f2b5 	.word	0x0002f2b5
   2645c:	20002980 	.word	0x20002980

00026460 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   26460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   26464:	2500      	movs	r5, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26466:	f8df 9194 	ldr.w	r9, [pc, #404]	; 265fc <register_events+0x19c>
{
   2646a:	9301      	str	r3, [sp, #4]
   2646c:	460f      	mov	r7, r1
   2646e:	4614      	mov	r4, r2
	for (int ii = 0; ii < num_events; ii++) {
   26470:	4680      	mov	r8, r0
	int events_registered = 0;
   26472:	462e      	mov	r6, r5
	event->poller = NULL;
   26474:	46aa      	mov	sl, r5
	for (int ii = 0; ii < num_events; ii++) {
   26476:	42bd      	cmp	r5, r7
   26478:	db03      	blt.n	26482 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2647a:	4630      	mov	r0, r6
   2647c:	b003      	add	sp, #12
   2647e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   26482:	f04f 0340 	mov.w	r3, #64	; 0x40
   26486:	f3ef 8b11 	mrs	fp, BASEPRI
   2648a:	f383 8812 	msr	BASEPRI_MAX, r3
   2648e:	f3bf 8f6f 	isb	sy
   26492:	4648      	mov	r0, r9
   26494:	f7fd fdb0 	bl	23ff8 <z_spin_lock_valid>
   26498:	b938      	cbnz	r0, 264aa <register_events+0x4a>
   2649a:	4959      	ldr	r1, [pc, #356]	; (26600 <register_events+0x1a0>)
   2649c:	4859      	ldr	r0, [pc, #356]	; (26604 <register_events+0x1a4>)
   2649e:	2294      	movs	r2, #148	; 0x94
   264a0:	f003 fdd3 	bl	2a04a <assert_print>
   264a4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264a6:	4856      	ldr	r0, [pc, #344]	; (26600 <register_events+0x1a0>)
   264a8:	e05b      	b.n	26562 <register_events+0x102>
	z_spin_lock_set_owner(l);
   264aa:	4648      	mov	r0, r9
   264ac:	f7fd fdc2 	bl	24034 <z_spin_lock_set_owner>
	switch (event->type) {
   264b0:	f898 300d 	ldrb.w	r3, [r8, #13]
   264b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   264b8:	2b08      	cmp	r3, #8
   264ba:	d84b      	bhi.n	26554 <register_events+0xf4>
   264bc:	e8df f003 	tbb	[pc, r3]
   264c0:	4a053c29 	.word	0x4a053c29
   264c4:	4a4a4a25 	.word	0x4a4a4a25
   264c8:	43          	.byte	0x43
   264c9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   264ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
   264ce:	689b      	ldr	r3, [r3, #8]
   264d0:	b1fb      	cbz	r3, 26512 <register_events+0xb2>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   264d2:	2302      	movs	r3, #2
	event->state |= state;
   264d4:	f8d8 200c 	ldr.w	r2, [r8, #12]
	event->poller = NULL;
   264d8:	f8c8 a008 	str.w	sl, [r8, #8]
	event->state |= state;
   264dc:	f3c2 3086 	ubfx	r0, r2, #14, #7
   264e0:	4303      	orrs	r3, r0
   264e2:	f363 3294 	bfi	r2, r3, #14, #7
   264e6:	f8c8 200c 	str.w	r2, [r8, #12]
			poller->is_polling = false;
   264ea:	f884 a000 	strb.w	sl, [r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   264ee:	4648      	mov	r0, r9
   264f0:	f7fd fd90 	bl	24014 <z_spin_unlock_valid>
   264f4:	f108 0814 	add.w	r8, r8, #20
   264f8:	2800      	cmp	r0, #0
   264fa:	d179      	bne.n	265f0 <register_events+0x190>
   264fc:	4940      	ldr	r1, [pc, #256]	; (26600 <register_events+0x1a0>)
   264fe:	4841      	ldr	r0, [pc, #260]	; (26604 <register_events+0x1a4>)
   26500:	22c2      	movs	r2, #194	; 0xc2
   26502:	f003 fda2 	bl	2a04a <assert_print>
   26506:	21c2      	movs	r1, #194	; 0xc2
   26508:	e7cd      	b.n	264a6 <register_events+0x46>
		if (!k_queue_is_empty(event->queue)) {
   2650a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2650e:	681b      	ldr	r3, [r3, #0]
   26510:	bb4b      	cbnz	r3, 26566 <register_events+0x106>
		} else if (!just_check && poller->is_polling) {
   26512:	9b01      	ldr	r3, [sp, #4]
   26514:	2b00      	cmp	r3, #0
   26516:	d1ea      	bne.n	264ee <register_events+0x8e>
   26518:	7823      	ldrb	r3, [r4, #0]
   2651a:	2b00      	cmp	r3, #0
   2651c:	d0e7      	beq.n	264ee <register_events+0x8e>
	switch (event->type) {
   2651e:	f898 300d 	ldrb.w	r3, [r8, #13]
   26522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26526:	2b08      	cmp	r3, #8
   26528:	d85b      	bhi.n	265e2 <register_events+0x182>
   2652a:	e8df f003 	tbb	[pc, r3]
   2652e:	3f2d      	.short	0x3f2d
   26530:	5a315a1e 	.word	0x5a315a1e
   26534:	5a5a      	.short	0x5a5a
   26536:	4c          	.byte	0x4c
   26537:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   26538:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2653c:	689b      	ldr	r3, [r3, #8]
   2653e:	2b00      	cmp	r3, #0
   26540:	d0e7      	beq.n	26512 <register_events+0xb2>
			*state = K_POLL_STATE_SIGNALED;
   26542:	2301      	movs	r3, #1
   26544:	e7c6      	b.n	264d4 <register_events+0x74>
		if (event->msgq->used_msgs > 0) {
   26546:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2654c:	2b00      	cmp	r3, #0
   2654e:	d0e0      	beq.n	26512 <register_events+0xb2>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   26550:	2310      	movs	r3, #16
   26552:	e7bf      	b.n	264d4 <register_events+0x74>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   26554:	492c      	ldr	r1, [pc, #176]	; (26608 <register_events+0x1a8>)
   26556:	482b      	ldr	r0, [pc, #172]	; (26604 <register_events+0x1a4>)
   26558:	2263      	movs	r2, #99	; 0x63
   2655a:	f003 fd76 	bl	2a04a <assert_print>
   2655e:	2163      	movs	r1, #99	; 0x63
   26560:	4829      	ldr	r0, [pc, #164]	; (26608 <register_events+0x1a8>)
   26562:	f003 fd6b 	bl	2a03c <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   26566:	2304      	movs	r3, #4
   26568:	e7b4      	b.n	264d4 <register_events+0x74>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2656a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2656e:	b930      	cbnz	r0, 2657e <register_events+0x11e>
   26570:	4925      	ldr	r1, [pc, #148]	; (26608 <register_events+0x1a8>)
   26572:	4824      	ldr	r0, [pc, #144]	; (26604 <register_events+0x1a4>)
   26574:	228d      	movs	r2, #141	; 0x8d
   26576:	f003 fd68 	bl	2a04a <assert_print>
   2657a:	218d      	movs	r1, #141	; 0x8d
   2657c:	e7f0      	b.n	26560 <register_events+0x100>
		add_event(&event->sem->poll_events, event, poller);
   2657e:	4622      	mov	r2, r4
   26580:	4641      	mov	r1, r8
   26582:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   26584:	f007 fce4 	bl	2df50 <add_event>
	event->poller = poller;
   26588:	f8c8 4008 	str.w	r4, [r8, #8]
			events_registered += 1;
   2658c:	3601      	adds	r6, #1
   2658e:	e7ae      	b.n	264ee <register_events+0x8e>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   26590:	f8d8 0010 	ldr.w	r0, [r8, #16]
   26594:	b930      	cbnz	r0, 265a4 <register_events+0x144>
   26596:	491c      	ldr	r1, [pc, #112]	; (26608 <register_events+0x1a8>)
   26598:	481a      	ldr	r0, [pc, #104]	; (26604 <register_events+0x1a4>)
   2659a:	2291      	movs	r2, #145	; 0x91
   2659c:	f003 fd55 	bl	2a04a <assert_print>
   265a0:	2191      	movs	r1, #145	; 0x91
   265a2:	e7dd      	b.n	26560 <register_events+0x100>
		add_event(&event->queue->poll_events, event, poller);
   265a4:	4622      	mov	r2, r4
   265a6:	4641      	mov	r1, r8
   265a8:	3014      	adds	r0, #20
   265aa:	e7eb      	b.n	26584 <register_events+0x124>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   265ac:	f8d8 0010 	ldr.w	r0, [r8, #16]
   265b0:	b930      	cbnz	r0, 265c0 <register_events+0x160>
   265b2:	4915      	ldr	r1, [pc, #84]	; (26608 <register_events+0x1a8>)
   265b4:	4813      	ldr	r0, [pc, #76]	; (26604 <register_events+0x1a4>)
   265b6:	2295      	movs	r2, #149	; 0x95
   265b8:	f003 fd47 	bl	2a04a <assert_print>
   265bc:	2195      	movs	r1, #149	; 0x95
   265be:	e7cf      	b.n	26560 <register_events+0x100>
		add_event(&event->signal->poll_events, event, poller);
   265c0:	4622      	mov	r2, r4
   265c2:	4641      	mov	r1, r8
   265c4:	e7de      	b.n	26584 <register_events+0x124>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   265c6:	f8d8 0010 	ldr.w	r0, [r8, #16]
   265ca:	b930      	cbnz	r0, 265da <register_events+0x17a>
   265cc:	490e      	ldr	r1, [pc, #56]	; (26608 <register_events+0x1a8>)
   265ce:	480d      	ldr	r0, [pc, #52]	; (26604 <register_events+0x1a4>)
   265d0:	2299      	movs	r2, #153	; 0x99
   265d2:	f003 fd3a 	bl	2a04a <assert_print>
   265d6:	2199      	movs	r1, #153	; 0x99
   265d8:	e7c2      	b.n	26560 <register_events+0x100>
		add_event(&event->msgq->poll_events, event, poller);
   265da:	4622      	mov	r2, r4
   265dc:	4641      	mov	r1, r8
   265de:	3028      	adds	r0, #40	; 0x28
   265e0:	e7d0      	b.n	26584 <register_events+0x124>
		__ASSERT(false, "invalid event type\n");
   265e2:	4909      	ldr	r1, [pc, #36]	; (26608 <register_events+0x1a8>)
   265e4:	4807      	ldr	r0, [pc, #28]	; (26604 <register_events+0x1a4>)
   265e6:	22a6      	movs	r2, #166	; 0xa6
   265e8:	f003 fd2f 	bl	2a04a <assert_print>
   265ec:	21a6      	movs	r1, #166	; 0xa6
   265ee:	e7b7      	b.n	26560 <register_events+0x100>
	__asm__ volatile(
   265f0:	f38b 8811 	msr	BASEPRI, fp
   265f4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   265f8:	3501      	adds	r5, #1
   265fa:	e73c      	b.n	26476 <register_events+0x16>
   265fc:	20003670 	.word	0x20003670
   26600:	0002f9fb 	.word	0x0002f9fb
   26604:	0002f2b5 	.word	0x0002f2b5
   26608:	00033264 	.word	0x00033264

0002660c <clear_event_registrations>:
{
   2660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26610:	2314      	movs	r3, #20
   26612:	4f3e      	ldr	r7, [pc, #248]	; (2670c <clear_event_registrations+0x100>)
   26614:	4615      	mov	r5, r2
	while (num_events--) {
   26616:	460c      	mov	r4, r1
   26618:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2661c:	2600      	movs	r6, #0
	while (num_events--) {
   2661e:	b90c      	cbnz	r4, 26624 <clear_event_registrations+0x18>
}
   26620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   26624:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   26628:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   2662c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26630:	f1a0 0814 	sub.w	r8, r0, #20
   26634:	2b08      	cmp	r3, #8
   26636:	d830      	bhi.n	2669a <clear_event_registrations+0x8e>
   26638:	e8df f003 	tbb	[pc, r3]
   2663c:	2f051b3f 	.word	0x2f051b3f
   26640:	2f2f2f11 	.word	0x2f2f2f11
   26644:	25          	.byte	0x25
   26645:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   26646:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2664a:	bb6b      	cbnz	r3, 266a8 <clear_event_registrations+0x9c>
   2664c:	4930      	ldr	r1, [pc, #192]	; (26710 <clear_event_registrations+0x104>)
   2664e:	4831      	ldr	r0, [pc, #196]	; (26714 <clear_event_registrations+0x108>)
   26650:	22b6      	movs	r2, #182	; 0xb6
   26652:	f003 fcfa 	bl	2a04a <assert_print>
   26656:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   26658:	482d      	ldr	r0, [pc, #180]	; (26710 <clear_event_registrations+0x104>)
   2665a:	f003 fcef 	bl	2a03c <assert_post_action>
   2665e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26662:	bb0b      	cbnz	r3, 266a8 <clear_event_registrations+0x9c>
   26664:	492a      	ldr	r1, [pc, #168]	; (26710 <clear_event_registrations+0x104>)
   26666:	482b      	ldr	r0, [pc, #172]	; (26714 <clear_event_registrations+0x108>)
   26668:	22ba      	movs	r2, #186	; 0xba
   2666a:	f003 fcee 	bl	2a04a <assert_print>
   2666e:	21ba      	movs	r1, #186	; 0xba
   26670:	e7f2      	b.n	26658 <clear_event_registrations+0x4c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   26672:	f850 3c04 	ldr.w	r3, [r0, #-4]
   26676:	b9bb      	cbnz	r3, 266a8 <clear_event_registrations+0x9c>
   26678:	4925      	ldr	r1, [pc, #148]	; (26710 <clear_event_registrations+0x104>)
   2667a:	4826      	ldr	r0, [pc, #152]	; (26714 <clear_event_registrations+0x108>)
   2667c:	22be      	movs	r2, #190	; 0xbe
   2667e:	f003 fce4 	bl	2a04a <assert_print>
   26682:	21be      	movs	r1, #190	; 0xbe
   26684:	e7e8      	b.n	26658 <clear_event_registrations+0x4c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   26686:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2668a:	b96b      	cbnz	r3, 266a8 <clear_event_registrations+0x9c>
   2668c:	4920      	ldr	r1, [pc, #128]	; (26710 <clear_event_registrations+0x104>)
   2668e:	4821      	ldr	r0, [pc, #132]	; (26714 <clear_event_registrations+0x108>)
   26690:	22c2      	movs	r2, #194	; 0xc2
   26692:	f003 fcda 	bl	2a04a <assert_print>
   26696:	21c2      	movs	r1, #194	; 0xc2
   26698:	e7de      	b.n	26658 <clear_event_registrations+0x4c>
		__ASSERT(false, "invalid event type\n");
   2669a:	491d      	ldr	r1, [pc, #116]	; (26710 <clear_event_registrations+0x104>)
   2669c:	481d      	ldr	r0, [pc, #116]	; (26714 <clear_event_registrations+0x108>)
   2669e:	22cf      	movs	r2, #207	; 0xcf
   266a0:	f003 fcd3 	bl	2a04a <assert_print>
   266a4:	21cf      	movs	r1, #207	; 0xcf
   266a6:	e7d7      	b.n	26658 <clear_event_registrations+0x4c>
	return node->next != NULL;
   266a8:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   266ac:	b12b      	cbz	r3, 266ba <clear_event_registrations+0xae>
	sys_dnode_t *const prev = node->prev;
   266ae:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   266b2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   266b4:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   266b6:	e940 6605 	strd	r6, r6, [r0, #-20]
   266ba:	4638      	mov	r0, r7
   266bc:	f7fd fcaa 	bl	24014 <z_spin_unlock_valid>
   266c0:	b938      	cbnz	r0, 266d2 <clear_event_registrations+0xc6>
   266c2:	4915      	ldr	r1, [pc, #84]	; (26718 <clear_event_registrations+0x10c>)
   266c4:	4813      	ldr	r0, [pc, #76]	; (26714 <clear_event_registrations+0x108>)
   266c6:	22c2      	movs	r2, #194	; 0xc2
   266c8:	f003 fcbf 	bl	2a04a <assert_print>
   266cc:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   266ce:	4812      	ldr	r0, [pc, #72]	; (26718 <clear_event_registrations+0x10c>)
   266d0:	e7c3      	b.n	2665a <clear_event_registrations+0x4e>
   266d2:	f385 8811 	msr	BASEPRI, r5
   266d6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   266da:	f04f 0340 	mov.w	r3, #64	; 0x40
   266de:	f3ef 8511 	mrs	r5, BASEPRI
   266e2:	f383 8812 	msr	BASEPRI_MAX, r3
   266e6:	f3bf 8f6f 	isb	sy
   266ea:	4638      	mov	r0, r7
   266ec:	f7fd fc84 	bl	23ff8 <z_spin_lock_valid>
   266f0:	3c01      	subs	r4, #1
   266f2:	b930      	cbnz	r0, 26702 <clear_event_registrations+0xf6>
   266f4:	4908      	ldr	r1, [pc, #32]	; (26718 <clear_event_registrations+0x10c>)
   266f6:	4807      	ldr	r0, [pc, #28]	; (26714 <clear_event_registrations+0x108>)
   266f8:	2294      	movs	r2, #148	; 0x94
   266fa:	f003 fca6 	bl	2a04a <assert_print>
   266fe:	2194      	movs	r1, #148	; 0x94
   26700:	e7e5      	b.n	266ce <clear_event_registrations+0xc2>
	z_spin_lock_set_owner(l);
   26702:	4638      	mov	r0, r7
   26704:	f7fd fc96 	bl	24034 <z_spin_lock_set_owner>
	return k;
   26708:	4640      	mov	r0, r8
   2670a:	e788      	b.n	2661e <clear_event_registrations+0x12>
   2670c:	20003670 	.word	0x20003670
   26710:	00033264 	.word	0x00033264
   26714:	0002f2b5 	.word	0x0002f2b5
   26718:	0002f9fb 	.word	0x0002f9fb

0002671c <k_poll_event_init>:
{
   2671c:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   2671e:	b142      	cbz	r2, 26732 <k_poll_event_init+0x16>
   26720:	4911      	ldr	r1, [pc, #68]	; (26768 <k_poll_event_init+0x4c>)
   26722:	4812      	ldr	r0, [pc, #72]	; (2676c <k_poll_event_init+0x50>)
   26724:	222d      	movs	r2, #45	; 0x2d
   26726:	f003 fc90 	bl	2a04a <assert_print>
   2672a:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   2672c:	480e      	ldr	r0, [pc, #56]	; (26768 <k_poll_event_init+0x4c>)
   2672e:	f003 fc85 	bl	2a03c <assert_post_action>
   26732:	293f      	cmp	r1, #63	; 0x3f
   26734:	d906      	bls.n	26744 <k_poll_event_init+0x28>
   26736:	490c      	ldr	r1, [pc, #48]	; (26768 <k_poll_event_init+0x4c>)
   26738:	480c      	ldr	r0, [pc, #48]	; (2676c <k_poll_event_init+0x50>)
   2673a:	222f      	movs	r2, #47	; 0x2f
   2673c:	f003 fc85 	bl	2a04a <assert_print>
   26740:	212f      	movs	r1, #47	; 0x2f
   26742:	e7f3      	b.n	2672c <k_poll_event_init+0x10>
	__ASSERT(obj != NULL, "must provide an object\n");
   26744:	b933      	cbnz	r3, 26754 <k_poll_event_init+0x38>
   26746:	4908      	ldr	r1, [pc, #32]	; (26768 <k_poll_event_init+0x4c>)
   26748:	4808      	ldr	r0, [pc, #32]	; (2676c <k_poll_event_init+0x50>)
   2674a:	2230      	movs	r2, #48	; 0x30
   2674c:	f003 fc7d 	bl	2a04a <assert_print>
   26750:	2130      	movs	r1, #48	; 0x30
   26752:	e7eb      	b.n	2672c <k_poll_event_init+0x10>
	event->poller = NULL;
   26754:	6082      	str	r2, [r0, #8]
	event->type = type;
   26756:	0209      	lsls	r1, r1, #8
   26758:	7b02      	ldrb	r2, [r0, #12]
   2675a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2675e:	4311      	orrs	r1, r2
	event->obj = obj;
   26760:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   26764:	bd08      	pop	{r3, pc}
   26766:	bf00      	nop
   26768:	00033264 	.word	0x00033264
   2676c:	0002f2b5 	.word	0x0002f2b5

00026770 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   26770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26774:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   26776:	4b51      	ldr	r3, [pc, #324]	; (268bc <z_impl_k_poll+0x14c>)
   26778:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   2677c:	2301      	movs	r3, #1
{
   2677e:	4617      	mov	r7, r2
   26780:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   26782:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   26786:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2678a:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   2678e:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   26792:	f1bb 0f00 	cmp.w	fp, #0
   26796:	d00a      	beq.n	267ae <z_impl_k_poll+0x3e>
   26798:	4949      	ldr	r1, [pc, #292]	; (268c0 <z_impl_k_poll+0x150>)
   2679a:	484a      	ldr	r0, [pc, #296]	; (268c4 <z_impl_k_poll+0x154>)
   2679c:	f240 122d 	movw	r2, #301	; 0x12d
   267a0:	f003 fc53 	bl	2a04a <assert_print>
   267a4:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   267a8:	4845      	ldr	r0, [pc, #276]	; (268c0 <z_impl_k_poll+0x150>)
   267aa:	f003 fc47 	bl	2a03c <assert_post_action>
   267ae:	b940      	cbnz	r0, 267c2 <z_impl_k_poll+0x52>
   267b0:	4943      	ldr	r1, [pc, #268]	; (268c0 <z_impl_k_poll+0x150>)
   267b2:	4844      	ldr	r0, [pc, #272]	; (268c4 <z_impl_k_poll+0x154>)
   267b4:	f44f 7297 	mov.w	r2, #302	; 0x12e
   267b8:	f003 fc47 	bl	2a04a <assert_print>
   267bc:	f44f 7197 	mov.w	r1, #302	; 0x12e
   267c0:	e7f2      	b.n	267a8 <z_impl_k_poll+0x38>
	__ASSERT(num_events >= 0, "<0 events\n");
   267c2:	2900      	cmp	r1, #0
   267c4:	da08      	bge.n	267d8 <z_impl_k_poll+0x68>
   267c6:	493e      	ldr	r1, [pc, #248]	; (268c0 <z_impl_k_poll+0x150>)
   267c8:	483e      	ldr	r0, [pc, #248]	; (268c4 <z_impl_k_poll+0x154>)
   267ca:	f240 122f 	movw	r2, #303	; 0x12f
   267ce:	f003 fc3c 	bl	2a04a <assert_print>
   267d2:	f240 112f 	movw	r1, #303	; 0x12f
   267d6:	e7e7      	b.n	267a8 <z_impl_k_poll+0x38>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   267d8:	ea57 0306 	orrs.w	r3, r7, r6
   267dc:	bf0c      	ite	eq
   267de:	2301      	moveq	r3, #1
   267e0:	2300      	movne	r3, #0
   267e2:	f7ff fe3d 	bl	26460 <register_events>
   267e6:	4681      	mov	r9, r0
   267e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   267ec:	f3ef 8a11 	mrs	sl, BASEPRI
   267f0:	f383 8812 	msr	BASEPRI_MAX, r3
   267f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267f8:	4833      	ldr	r0, [pc, #204]	; (268c8 <z_impl_k_poll+0x158>)
   267fa:	f7fd fbfd 	bl	23ff8 <z_spin_lock_valid>
   267fe:	b938      	cbnz	r0, 26810 <z_impl_k_poll+0xa0>
   26800:	4932      	ldr	r1, [pc, #200]	; (268cc <z_impl_k_poll+0x15c>)
   26802:	4830      	ldr	r0, [pc, #192]	; (268c4 <z_impl_k_poll+0x154>)
   26804:	2294      	movs	r2, #148	; 0x94
   26806:	f003 fc20 	bl	2a04a <assert_print>
   2680a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2680c:	482f      	ldr	r0, [pc, #188]	; (268cc <z_impl_k_poll+0x15c>)
   2680e:	e7cc      	b.n	267aa <z_impl_k_poll+0x3a>
	z_spin_lock_set_owner(l);
   26810:	482d      	ldr	r0, [pc, #180]	; (268c8 <z_impl_k_poll+0x158>)
   26812:	f7fd fc0f 	bl	24034 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   26816:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   2681a:	b9bc      	cbnz	r4, 2684c <z_impl_k_poll+0xdc>
		clear_event_registrations(events, events_registered, key);
   2681c:	4628      	mov	r0, r5
   2681e:	4652      	mov	r2, sl
   26820:	4649      	mov	r1, r9
   26822:	f7ff fef3 	bl	2660c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26826:	4828      	ldr	r0, [pc, #160]	; (268c8 <z_impl_k_poll+0x158>)
   26828:	f7fd fbf4 	bl	24014 <z_spin_unlock_valid>
   2682c:	b930      	cbnz	r0, 2683c <z_impl_k_poll+0xcc>
   2682e:	4927      	ldr	r1, [pc, #156]	; (268cc <z_impl_k_poll+0x15c>)
   26830:	4824      	ldr	r0, [pc, #144]	; (268c4 <z_impl_k_poll+0x154>)
   26832:	22c2      	movs	r2, #194	; 0xc2
   26834:	f003 fc09 	bl	2a04a <assert_print>
   26838:	21c2      	movs	r1, #194	; 0xc2
   2683a:	e7e7      	b.n	2680c <z_impl_k_poll+0x9c>
	__asm__ volatile(
   2683c:	f38a 8811 	msr	BASEPRI, sl
   26840:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   26844:	4620      	mov	r0, r4
   26846:	b003      	add	sp, #12
   26848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2684c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   26850:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26854:	d10b      	bne.n	2686e <z_impl_k_poll+0xfe>
   26856:	481c      	ldr	r0, [pc, #112]	; (268c8 <z_impl_k_poll+0x158>)
   26858:	f7fd fbdc 	bl	24014 <z_spin_unlock_valid>
   2685c:	2800      	cmp	r0, #0
   2685e:	d0e6      	beq.n	2682e <z_impl_k_poll+0xbe>
   26860:	f38a 8811 	msr	BASEPRI, sl
   26864:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   26868:	f06f 040a 	mvn.w	r4, #10
   2686c:	e7ea      	b.n	26844 <z_impl_k_poll+0xd4>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2686e:	e9cd 7600 	strd	r7, r6, [sp]
   26872:	4a17      	ldr	r2, [pc, #92]	; (268d0 <z_impl_k_poll+0x160>)
   26874:	4814      	ldr	r0, [pc, #80]	; (268c8 <z_impl_k_poll+0x158>)
   26876:	4651      	mov	r1, sl
   26878:	f7fe feca 	bl	25610 <z_pend_curr>
   2687c:	4604      	mov	r4, r0
	__asm__ volatile(
   2687e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26882:	f3ef 8611 	mrs	r6, BASEPRI
   26886:	f383 8812 	msr	BASEPRI_MAX, r3
   2688a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2688e:	480e      	ldr	r0, [pc, #56]	; (268c8 <z_impl_k_poll+0x158>)
   26890:	f7fd fbb2 	bl	23ff8 <z_spin_lock_valid>
   26894:	2800      	cmp	r0, #0
   26896:	d0b3      	beq.n	26800 <z_impl_k_poll+0x90>
	z_spin_lock_set_owner(l);
   26898:	480b      	ldr	r0, [pc, #44]	; (268c8 <z_impl_k_poll+0x158>)
   2689a:	f7fd fbcb 	bl	24034 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   2689e:	4628      	mov	r0, r5
   268a0:	4632      	mov	r2, r6
   268a2:	4649      	mov	r1, r9
   268a4:	f7ff feb2 	bl	2660c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   268a8:	4807      	ldr	r0, [pc, #28]	; (268c8 <z_impl_k_poll+0x158>)
   268aa:	f7fd fbb3 	bl	24014 <z_spin_unlock_valid>
   268ae:	2800      	cmp	r0, #0
   268b0:	d0bd      	beq.n	2682e <z_impl_k_poll+0xbe>
	__asm__ volatile(
   268b2:	f386 8811 	msr	BASEPRI, r6
   268b6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   268ba:	e7c3      	b.n	26844 <z_impl_k_poll+0xd4>
   268bc:	2000361c 	.word	0x2000361c
   268c0:	00033264 	.word	0x00033264
   268c4:	0002f2b5 	.word	0x0002f2b5
   268c8:	20003670 	.word	0x20003670
   268cc:	0002f9fb 	.word	0x0002f9fb
   268d0:	200007b4 	.word	0x200007b4

000268d4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   268d4:	b570      	push	{r4, r5, r6, lr}
   268d6:	4604      	mov	r4, r0
   268d8:	460d      	mov	r5, r1
	__asm__ volatile(
   268da:	f04f 0340 	mov.w	r3, #64	; 0x40
   268de:	f3ef 8611 	mrs	r6, BASEPRI
   268e2:	f383 8812 	msr	BASEPRI_MAX, r3
   268e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   268ea:	481b      	ldr	r0, [pc, #108]	; (26958 <z_impl_k_poll_signal_raise+0x84>)
   268ec:	f7fd fb84 	bl	23ff8 <z_spin_lock_valid>
   268f0:	b940      	cbnz	r0, 26904 <z_impl_k_poll_signal_raise+0x30>
   268f2:	491a      	ldr	r1, [pc, #104]	; (2695c <z_impl_k_poll_signal_raise+0x88>)
   268f4:	481a      	ldr	r0, [pc, #104]	; (26960 <z_impl_k_poll_signal_raise+0x8c>)
   268f6:	2294      	movs	r2, #148	; 0x94
   268f8:	f003 fba7 	bl	2a04a <assert_print>
   268fc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   268fe:	4817      	ldr	r0, [pc, #92]	; (2695c <z_impl_k_poll_signal_raise+0x88>)
   26900:	f003 fb9c 	bl	2a03c <assert_post_action>
	z_spin_lock_set_owner(l);
   26904:	4814      	ldr	r0, [pc, #80]	; (26958 <z_impl_k_poll_signal_raise+0x84>)
   26906:	f7fd fb95 	bl	24034 <z_spin_lock_set_owner>
	return list->head == list;
   2690a:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2690c:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   2690e:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   26910:	4284      	cmp	r4, r0
   26912:	60a1      	str	r1, [r4, #8]
   26914:	d10a      	bne.n	2692c <z_impl_k_poll_signal_raise+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26916:	4810      	ldr	r0, [pc, #64]	; (26958 <z_impl_k_poll_signal_raise+0x84>)
   26918:	f7fd fb7c 	bl	24014 <z_spin_unlock_valid>
   2691c:	b9b0      	cbnz	r0, 2694c <z_impl_k_poll_signal_raise+0x78>
   2691e:	490f      	ldr	r1, [pc, #60]	; (2695c <z_impl_k_poll_signal_raise+0x88>)
   26920:	480f      	ldr	r0, [pc, #60]	; (26960 <z_impl_k_poll_signal_raise+0x8c>)
   26922:	22c2      	movs	r2, #194	; 0xc2
   26924:	f003 fb91 	bl	2a04a <assert_print>
   26928:	21c2      	movs	r1, #194	; 0xc2
   2692a:	e7e8      	b.n	268fe <z_impl_k_poll_signal_raise+0x2a>
	sys_dnode_t *const next = node->next;
   2692c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26930:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26932:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26934:	2300      	movs	r3, #0
	node->prev = NULL;
   26936:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2693a:	f007 fb3a 	bl	2dfb2 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2693e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   26940:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   26942:	4805      	ldr	r0, [pc, #20]	; (26958 <z_impl_k_poll_signal_raise+0x84>)
   26944:	f7fe fc10 	bl	25168 <z_reschedule>
	return rc;
}
   26948:	4620      	mov	r0, r4
   2694a:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2694c:	f386 8811 	msr	BASEPRI, r6
   26950:	f3bf 8f6f 	isb	sy
		return 0;
   26954:	2400      	movs	r4, #0
   26956:	e7f7      	b.n	26948 <z_impl_k_poll_signal_raise+0x74>
   26958:	20003670 	.word	0x20003670
   2695c:	0002f9fb 	.word	0x0002f9fb
   26960:	0002f2b5 	.word	0x0002f2b5

00026964 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   26964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   26966:	3204      	adds	r2, #4
   26968:	4605      	mov	r5, r0
   2696a:	460c      	mov	r4, r1
   2696c:	d217      	bcs.n	2699e <z_heap_aligned_alloc+0x3a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2696e:	2600      	movs	r6, #0
   26970:	2700      	movs	r7, #0
   26972:	e9cd 6700 	strd	r6, r7, [sp]
   26976:	f041 0104 	orr.w	r1, r1, #4
   2697a:	f7fd f8ad 	bl	23ad8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2697e:	b170      	cbz	r0, 2699e <z_heap_aligned_alloc+0x3a>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   26980:	f840 5b04 	str.w	r5, [r0], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   26984:	b164      	cbz	r4, 269a0 <z_heap_aligned_alloc+0x3c>
   26986:	3c01      	subs	r4, #1
   26988:	4220      	tst	r0, r4
   2698a:	d009      	beq.n	269a0 <z_heap_aligned_alloc+0x3c>
   2698c:	4905      	ldr	r1, [pc, #20]	; (269a4 <z_heap_aligned_alloc+0x40>)
   2698e:	4806      	ldr	r0, [pc, #24]	; (269a8 <z_heap_aligned_alloc+0x44>)
   26990:	2225      	movs	r2, #37	; 0x25
   26992:	f003 fb5a 	bl	2a04a <assert_print>
   26996:	4803      	ldr	r0, [pc, #12]	; (269a4 <z_heap_aligned_alloc+0x40>)
   26998:	2125      	movs	r1, #37	; 0x25
   2699a:	f003 fb4f 	bl	2a03c <assert_post_action>
		return NULL;
   2699e:	2000      	movs	r0, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   269a0:	b003      	add	sp, #12
   269a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   269a4:	00033285 	.word	0x00033285
   269a8:	0002f2b5 	.word	0x0002f2b5

000269ac <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   269ac:	2803      	cmp	r0, #3
{
   269ae:	b508      	push	{r3, lr}
   269b0:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   269b2:	d901      	bls.n	269b8 <k_aligned_alloc+0xc>
   269b4:	0783      	lsls	r3, r0, #30
   269b6:	d008      	beq.n	269ca <k_aligned_alloc+0x1e>
   269b8:	490c      	ldr	r1, [pc, #48]	; (269ec <k_aligned_alloc+0x40>)
   269ba:	480d      	ldr	r0, [pc, #52]	; (269f0 <k_aligned_alloc+0x44>)
   269bc:	2242      	movs	r2, #66	; 0x42
   269be:	f003 fb44 	bl	2a04a <assert_print>
   269c2:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   269c4:	4809      	ldr	r0, [pc, #36]	; (269ec <k_aligned_alloc+0x40>)
   269c6:	f003 fb39 	bl	2a03c <assert_post_action>
   269ca:	1e43      	subs	r3, r0, #1
   269cc:	4203      	tst	r3, r0
   269ce:	d006      	beq.n	269de <k_aligned_alloc+0x32>
   269d0:	4906      	ldr	r1, [pc, #24]	; (269ec <k_aligned_alloc+0x40>)
   269d2:	4807      	ldr	r0, [pc, #28]	; (269f0 <k_aligned_alloc+0x44>)
   269d4:	2246      	movs	r2, #70	; 0x46
   269d6:	f003 fb38 	bl	2a04a <assert_print>
   269da:	2146      	movs	r1, #70	; 0x46
   269dc:	e7f2      	b.n	269c4 <k_aligned_alloc+0x18>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   269de:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   269e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   269e4:	4803      	ldr	r0, [pc, #12]	; (269f4 <k_aligned_alloc+0x48>)
   269e6:	f7ff bfbd 	b.w	26964 <z_heap_aligned_alloc>
   269ea:	bf00      	nop
   269ec:	00033285 	.word	0x00033285
   269f0:	0002f2b5 	.word	0x0002f2b5
   269f4:	20000900 	.word	0x20000900

000269f8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   269f8:	4b01      	ldr	r3, [pc, #4]	; (26a00 <k_thread_system_pool_assign+0x8>)
   269fa:	6743      	str	r3, [r0, #116]	; 0x74
}
   269fc:	4770      	bx	lr
   269fe:	bf00      	nop
   26a00:	20000900 	.word	0x20000900

00026a04 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   26a04:	b538      	push	{r3, r4, r5, lr}
   26a06:	4604      	mov	r4, r0
   26a08:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   26a0a:	f007 f981 	bl	2dd10 <k_is_in_isr>
   26a0e:	b920      	cbnz	r0, 26a1a <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   26a10:	4b06      	ldr	r3, [pc, #24]	; (26a2c <z_thread_aligned_alloc+0x28>)
   26a12:	689b      	ldr	r3, [r3, #8]
   26a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   26a16:	b90b      	cbnz	r3, 26a1c <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   26a18:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   26a1a:	4b05      	ldr	r3, [pc, #20]	; (26a30 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   26a1c:	462a      	mov	r2, r5
   26a1e:	4621      	mov	r1, r4
   26a20:	4618      	mov	r0, r3
}
   26a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   26a26:	f7ff bf9d 	b.w	26964 <z_heap_aligned_alloc>
   26a2a:	bf00      	nop
   26a2c:	2000361c 	.word	0x2000361c
   26a30:	20000900 	.word	0x20000900

00026a34 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   26a34:	4801      	ldr	r0, [pc, #4]	; (26a3c <boot_banner+0x8>)
   26a36:	f003 b900 	b.w	29c3a <printk>
   26a3a:	bf00      	nop
   26a3c:	000332a9 	.word	0x000332a9

00026a40 <ocrypto_ecdh_p256_public_key>:
   26a40:	b530      	push	{r4, r5, lr}
   26a42:	b099      	sub	sp, #100	; 0x64
   26a44:	4605      	mov	r5, r0
   26a46:	4668      	mov	r0, sp
   26a48:	f000 f828 	bl	26a9c <ocrypto_sc_p256_from32bytes>
   26a4c:	4669      	mov	r1, sp
   26a4e:	4604      	mov	r4, r0
   26a50:	a808      	add	r0, sp, #32
   26a52:	f000 fa53 	bl	26efc <ocrypto_curve_p256_scalarmult_base>
   26a56:	a908      	add	r1, sp, #32
   26a58:	4304      	orrs	r4, r0
   26a5a:	4628      	mov	r0, r5
   26a5c:	f000 f98a 	bl	26d74 <ocrypto_curve_p256_to64bytes>
   26a60:	4620      	mov	r0, r4
   26a62:	b019      	add	sp, #100	; 0x64
   26a64:	bd30      	pop	{r4, r5, pc}
   26a66:	bf00      	nop

00026a68 <ocrypto_ecdh_p256_common_secret>:
   26a68:	b570      	push	{r4, r5, r6, lr}
   26a6a:	b098      	sub	sp, #96	; 0x60
   26a6c:	4605      	mov	r5, r0
   26a6e:	4668      	mov	r0, sp
   26a70:	4616      	mov	r6, r2
   26a72:	f000 f813 	bl	26a9c <ocrypto_sc_p256_from32bytes>
   26a76:	4631      	mov	r1, r6
   26a78:	4604      	mov	r4, r0
   26a7a:	a808      	add	r0, sp, #32
   26a7c:	f000 f946 	bl	26d0c <ocrypto_curve_p256_from64bytes>
   26a80:	a908      	add	r1, sp, #32
   26a82:	466a      	mov	r2, sp
   26a84:	4304      	orrs	r4, r0
   26a86:	4608      	mov	r0, r1
   26a88:	f000 f982 	bl	26d90 <ocrypto_curve_p256_scalarmult>
   26a8c:	a908      	add	r1, sp, #32
   26a8e:	4304      	orrs	r4, r0
   26a90:	4628      	mov	r0, r5
   26a92:	f000 f96d 	bl	26d70 <ocrypto_curve_p256_to32bytes>
   26a96:	4620      	mov	r0, r4
   26a98:	b018      	add	sp, #96	; 0x60
   26a9a:	bd70      	pop	{r4, r5, r6, pc}

00026a9c <ocrypto_sc_p256_from32bytes>:
   26a9c:	b570      	push	{r4, r5, r6, lr}
   26a9e:	680b      	ldr	r3, [r1, #0]
   26aa0:	4e12      	ldr	r6, [pc, #72]	; (26aec <ocrypto_sc_p256_from32bytes+0x50>)
   26aa2:	ba1b      	rev	r3, r3
   26aa4:	61c3      	str	r3, [r0, #28]
   26aa6:	684b      	ldr	r3, [r1, #4]
   26aa8:	ba1b      	rev	r3, r3
   26aaa:	6183      	str	r3, [r0, #24]
   26aac:	688b      	ldr	r3, [r1, #8]
   26aae:	ba1b      	rev	r3, r3
   26ab0:	6143      	str	r3, [r0, #20]
   26ab2:	68cb      	ldr	r3, [r1, #12]
   26ab4:	ba1b      	rev	r3, r3
   26ab6:	6103      	str	r3, [r0, #16]
   26ab8:	690b      	ldr	r3, [r1, #16]
   26aba:	ba1b      	rev	r3, r3
   26abc:	60c3      	str	r3, [r0, #12]
   26abe:	694b      	ldr	r3, [r1, #20]
   26ac0:	ba1b      	rev	r3, r3
   26ac2:	6083      	str	r3, [r0, #8]
   26ac4:	698b      	ldr	r3, [r1, #24]
   26ac6:	ba1b      	rev	r3, r3
   26ac8:	6043      	str	r3, [r0, #4]
   26aca:	69cb      	ldr	r3, [r1, #28]
   26acc:	ba1b      	rev	r3, r3
   26ace:	4632      	mov	r2, r6
   26ad0:	6003      	str	r3, [r0, #0]
   26ad2:	4601      	mov	r1, r0
   26ad4:	4604      	mov	r4, r0
   26ad6:	f7d9 fb4d 	bl	174 <ocrypto_bigint_sub256>
   26ada:	4631      	mov	r1, r6
   26adc:	4605      	mov	r5, r0
   26ade:	4602      	mov	r2, r0
   26ae0:	4620      	mov	r0, r4
   26ae2:	f7d9 fb67 	bl	1b4 <ocrypto_bigint_cadd256>
   26ae6:	1e68      	subs	r0, r5, #1
   26ae8:	bd70      	pop	{r4, r5, r6, pc}
   26aea:	bf00      	nop
   26aec:	0002eeb8 	.word	0x0002eeb8

00026af0 <p256_zdblu>:
   26af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26af4:	b088      	sub	sp, #32
   26af6:	460c      	mov	r4, r1
   26af8:	4606      	mov	r6, r0
   26afa:	f102 0120 	add.w	r1, r2, #32
   26afe:	4668      	mov	r0, sp
   26b00:	f106 0720 	add.w	r7, r6, #32
   26b04:	4690      	mov	r8, r2
   26b06:	f7d9 fe3f 	bl	788 <ocrypto_mod_p256_sqr>
   26b0a:	466a      	mov	r2, sp
   26b0c:	4669      	mov	r1, sp
   26b0e:	4668      	mov	r0, sp
   26b10:	f7d9 fd4c 	bl	5ac <ocrypto_mod_p256_add>
   26b14:	4669      	mov	r1, sp
   26b16:	4638      	mov	r0, r7
   26b18:	f7d9 fe36 	bl	788 <ocrypto_mod_p256_sqr>
   26b1c:	463a      	mov	r2, r7
   26b1e:	4639      	mov	r1, r7
   26b20:	4638      	mov	r0, r7
   26b22:	f104 0520 	add.w	r5, r4, #32
   26b26:	f7d9 fd41 	bl	5ac <ocrypto_mod_p256_add>
   26b2a:	466a      	mov	r2, sp
   26b2c:	4669      	mov	r1, sp
   26b2e:	4668      	mov	r0, sp
   26b30:	f7d9 fd3c 	bl	5ac <ocrypto_mod_p256_add>
   26b34:	4641      	mov	r1, r8
   26b36:	4628      	mov	r0, r5
   26b38:	f7d9 fe26 	bl	788 <ocrypto_mod_p256_sqr>
   26b3c:	466a      	mov	r2, sp
   26b3e:	4641      	mov	r1, r8
   26b40:	4630      	mov	r0, r6
   26b42:	f7d9 fe09 	bl	758 <ocrypto_mod_p256_mul>
   26b46:	462a      	mov	r2, r5
   26b48:	4629      	mov	r1, r5
   26b4a:	4668      	mov	r0, sp
   26b4c:	f7d9 fd2e 	bl	5ac <ocrypto_mod_p256_add>
   26b50:	462a      	mov	r2, r5
   26b52:	4669      	mov	r1, sp
   26b54:	4668      	mov	r0, sp
   26b56:	f7d9 fd29 	bl	5ac <ocrypto_mod_p256_add>
   26b5a:	4a12      	ldr	r2, [pc, #72]	; (26ba4 <p256_zdblu+0xb4>)
   26b5c:	4669      	mov	r1, sp
   26b5e:	4668      	mov	r0, sp
   26b60:	f7d9 fd24 	bl	5ac <ocrypto_mod_p256_add>
   26b64:	4669      	mov	r1, sp
   26b66:	4620      	mov	r0, r4
   26b68:	f7d9 fe0e 	bl	788 <ocrypto_mod_p256_sqr>
   26b6c:	4632      	mov	r2, r6
   26b6e:	4621      	mov	r1, r4
   26b70:	4620      	mov	r0, r4
   26b72:	f7d9 fd59 	bl	628 <ocrypto_mod_p256_sub>
   26b76:	4632      	mov	r2, r6
   26b78:	4621      	mov	r1, r4
   26b7a:	4620      	mov	r0, r4
   26b7c:	f7d9 fd54 	bl	628 <ocrypto_mod_p256_sub>
   26b80:	4622      	mov	r2, r4
   26b82:	4631      	mov	r1, r6
   26b84:	4628      	mov	r0, r5
   26b86:	f7d9 fd4f 	bl	628 <ocrypto_mod_p256_sub>
   26b8a:	466a      	mov	r2, sp
   26b8c:	4629      	mov	r1, r5
   26b8e:	4628      	mov	r0, r5
   26b90:	f7d9 fde2 	bl	758 <ocrypto_mod_p256_mul>
   26b94:	463a      	mov	r2, r7
   26b96:	4629      	mov	r1, r5
   26b98:	4628      	mov	r0, r5
   26b9a:	f7d9 fd45 	bl	628 <ocrypto_mod_p256_sub>
   26b9e:	b008      	add	sp, #32
   26ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26ba4:	0002ef58 	.word	0x0002ef58

00026ba8 <p256_zaddc>:
   26ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
   26baa:	b099      	sub	sp, #100	; 0x64
   26bac:	4604      	mov	r4, r0
   26bae:	460d      	mov	r5, r1
   26bb0:	460a      	mov	r2, r1
   26bb2:	4601      	mov	r1, r0
   26bb4:	4668      	mov	r0, sp
   26bb6:	f7d9 fd37 	bl	628 <ocrypto_mod_p256_sub>
   26bba:	4669      	mov	r1, sp
   26bbc:	4668      	mov	r0, sp
   26bbe:	f7d9 fde3 	bl	788 <ocrypto_mod_p256_sqr>
   26bc2:	466a      	mov	r2, sp
   26bc4:	4621      	mov	r1, r4
   26bc6:	a808      	add	r0, sp, #32
   26bc8:	f105 0620 	add.w	r6, r5, #32
   26bcc:	f104 0720 	add.w	r7, r4, #32
   26bd0:	f7d9 fdc2 	bl	758 <ocrypto_mod_p256_mul>
   26bd4:	466a      	mov	r2, sp
   26bd6:	4629      	mov	r1, r5
   26bd8:	4668      	mov	r0, sp
   26bda:	f7d9 fdbd 	bl	758 <ocrypto_mod_p256_mul>
   26bde:	4632      	mov	r2, r6
   26be0:	4639      	mov	r1, r7
   26be2:	a810      	add	r0, sp, #64	; 0x40
   26be4:	f7d9 fce2 	bl	5ac <ocrypto_mod_p256_add>
   26be8:	4632      	mov	r2, r6
   26bea:	4639      	mov	r1, r7
   26bec:	4630      	mov	r0, r6
   26bee:	f7d9 fd1b 	bl	628 <ocrypto_mod_p256_sub>
   26bf2:	4631      	mov	r1, r6
   26bf4:	4628      	mov	r0, r5
   26bf6:	f7d9 fdc7 	bl	788 <ocrypto_mod_p256_sqr>
   26bfa:	466a      	mov	r2, sp
   26bfc:	a908      	add	r1, sp, #32
   26bfe:	4620      	mov	r0, r4
   26c00:	f7d9 fcd4 	bl	5ac <ocrypto_mod_p256_add>
   26c04:	4622      	mov	r2, r4
   26c06:	4629      	mov	r1, r5
   26c08:	4628      	mov	r0, r5
   26c0a:	f7d9 fd0d 	bl	628 <ocrypto_mod_p256_sub>
   26c0e:	466a      	mov	r2, sp
   26c10:	a908      	add	r1, sp, #32
   26c12:	4668      	mov	r0, sp
   26c14:	f7d9 fd08 	bl	628 <ocrypto_mod_p256_sub>
   26c18:	466a      	mov	r2, sp
   26c1a:	4639      	mov	r1, r7
   26c1c:	4638      	mov	r0, r7
   26c1e:	f7d9 fd9b 	bl	758 <ocrypto_mod_p256_mul>
   26c22:	462a      	mov	r2, r5
   26c24:	a908      	add	r1, sp, #32
   26c26:	4668      	mov	r0, sp
   26c28:	f7d9 fcfe 	bl	628 <ocrypto_mod_p256_sub>
   26c2c:	466a      	mov	r2, sp
   26c2e:	4631      	mov	r1, r6
   26c30:	4630      	mov	r0, r6
   26c32:	f7d9 fd91 	bl	758 <ocrypto_mod_p256_mul>
   26c36:	463a      	mov	r2, r7
   26c38:	4631      	mov	r1, r6
   26c3a:	4630      	mov	r0, r6
   26c3c:	f7d9 fcf4 	bl	628 <ocrypto_mod_p256_sub>
   26c40:	a910      	add	r1, sp, #64	; 0x40
   26c42:	4668      	mov	r0, sp
   26c44:	f7d9 fda0 	bl	788 <ocrypto_mod_p256_sqr>
   26c48:	4622      	mov	r2, r4
   26c4a:	4669      	mov	r1, sp
   26c4c:	4620      	mov	r0, r4
   26c4e:	f7d9 fceb 	bl	628 <ocrypto_mod_p256_sub>
   26c52:	a908      	add	r1, sp, #32
   26c54:	4622      	mov	r2, r4
   26c56:	4608      	mov	r0, r1
   26c58:	f7d9 fce6 	bl	628 <ocrypto_mod_p256_sub>
   26c5c:	a910      	add	r1, sp, #64	; 0x40
   26c5e:	aa08      	add	r2, sp, #32
   26c60:	4608      	mov	r0, r1
   26c62:	f7d9 fd79 	bl	758 <ocrypto_mod_p256_mul>
   26c66:	463a      	mov	r2, r7
   26c68:	a910      	add	r1, sp, #64	; 0x40
   26c6a:	4638      	mov	r0, r7
   26c6c:	f7d9 fcdc 	bl	628 <ocrypto_mod_p256_sub>
   26c70:	b019      	add	sp, #100	; 0x64
   26c72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026c74 <p256_zaddu>:
   26c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26c78:	b088      	sub	sp, #32
   26c7a:	460c      	mov	r4, r1
   26c7c:	4605      	mov	r5, r0
   26c7e:	4690      	mov	r8, r2
   26c80:	460a      	mov	r2, r1
   26c82:	4601      	mov	r1, r0
   26c84:	4668      	mov	r0, sp
   26c86:	f7d9 fccf 	bl	628 <ocrypto_mod_p256_sub>
   26c8a:	4669      	mov	r1, sp
   26c8c:	4668      	mov	r0, sp
   26c8e:	f7d9 fd7b 	bl	788 <ocrypto_mod_p256_sqr>
   26c92:	466a      	mov	r2, sp
   26c94:	4629      	mov	r1, r5
   26c96:	4628      	mov	r0, r5
   26c98:	f104 0620 	add.w	r6, r4, #32
   26c9c:	f7d9 fd5c 	bl	758 <ocrypto_mod_p256_mul>
   26ca0:	f105 0720 	add.w	r7, r5, #32
   26ca4:	466a      	mov	r2, sp
   26ca6:	4621      	mov	r1, r4
   26ca8:	4668      	mov	r0, sp
   26caa:	f7d9 fd55 	bl	758 <ocrypto_mod_p256_mul>
   26cae:	4632      	mov	r2, r6
   26cb0:	4639      	mov	r1, r7
   26cb2:	4630      	mov	r0, r6
   26cb4:	f7d9 fcb8 	bl	628 <ocrypto_mod_p256_sub>
   26cb8:	4631      	mov	r1, r6
   26cba:	4620      	mov	r0, r4
   26cbc:	f7d9 fd64 	bl	788 <ocrypto_mod_p256_sqr>
   26cc0:	462a      	mov	r2, r5
   26cc2:	4621      	mov	r1, r4
   26cc4:	4620      	mov	r0, r4
   26cc6:	f7d9 fcaf 	bl	628 <ocrypto_mod_p256_sub>
   26cca:	466a      	mov	r2, sp
   26ccc:	4621      	mov	r1, r4
   26cce:	4620      	mov	r0, r4
   26cd0:	f7d9 fcaa 	bl	628 <ocrypto_mod_p256_sub>
   26cd4:	466a      	mov	r2, sp
   26cd6:	4629      	mov	r1, r5
   26cd8:	4640      	mov	r0, r8
   26cda:	f7d9 fca5 	bl	628 <ocrypto_mod_p256_sub>
   26cde:	4642      	mov	r2, r8
   26ce0:	4639      	mov	r1, r7
   26ce2:	4638      	mov	r0, r7
   26ce4:	f7d9 fd38 	bl	758 <ocrypto_mod_p256_mul>
   26ce8:	4622      	mov	r2, r4
   26cea:	4629      	mov	r1, r5
   26cec:	4668      	mov	r0, sp
   26cee:	f7d9 fc9b 	bl	628 <ocrypto_mod_p256_sub>
   26cf2:	466a      	mov	r2, sp
   26cf4:	4631      	mov	r1, r6
   26cf6:	4630      	mov	r0, r6
   26cf8:	f7d9 fd2e 	bl	758 <ocrypto_mod_p256_mul>
   26cfc:	463a      	mov	r2, r7
   26cfe:	4631      	mov	r1, r6
   26d00:	4630      	mov	r0, r6
   26d02:	f7d9 fc91 	bl	628 <ocrypto_mod_p256_sub>
   26d06:	b008      	add	sp, #32
   26d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026d0c <ocrypto_curve_p256_from64bytes>:
   26d0c:	b570      	push	{r4, r5, r6, lr}
   26d0e:	f100 0620 	add.w	r6, r0, #32
   26d12:	b090      	sub	sp, #64	; 0x40
   26d14:	460d      	mov	r5, r1
   26d16:	4604      	mov	r4, r0
   26d18:	f000 f914 	bl	26f44 <ocrypto_mod_p256_from_bytes>
   26d1c:	f105 0120 	add.w	r1, r5, #32
   26d20:	4630      	mov	r0, r6
   26d22:	f000 f90f 	bl	26f44 <ocrypto_mod_p256_from_bytes>
   26d26:	4621      	mov	r1, r4
   26d28:	a808      	add	r0, sp, #32
   26d2a:	f7d9 fd2d 	bl	788 <ocrypto_mod_p256_sqr>
   26d2e:	a908      	add	r1, sp, #32
   26d30:	4608      	mov	r0, r1
   26d32:	4a0d      	ldr	r2, [pc, #52]	; (26d68 <ocrypto_curve_p256_from64bytes+0x5c>)
   26d34:	f7d9 fc3a 	bl	5ac <ocrypto_mod_p256_add>
   26d38:	a908      	add	r1, sp, #32
   26d3a:	4622      	mov	r2, r4
   26d3c:	4608      	mov	r0, r1
   26d3e:	f7d9 fd0b 	bl	758 <ocrypto_mod_p256_mul>
   26d42:	a908      	add	r1, sp, #32
   26d44:	4a09      	ldr	r2, [pc, #36]	; (26d6c <ocrypto_curve_p256_from64bytes+0x60>)
   26d46:	4608      	mov	r0, r1
   26d48:	f7d9 fc30 	bl	5ac <ocrypto_mod_p256_add>
   26d4c:	4631      	mov	r1, r6
   26d4e:	4668      	mov	r0, sp
   26d50:	f7d9 fd1a 	bl	788 <ocrypto_mod_p256_sqr>
   26d54:	2220      	movs	r2, #32
   26d56:	4669      	mov	r1, sp
   26d58:	eb0d 0002 	add.w	r0, sp, r2
   26d5c:	f7d9 fbf8 	bl	550 <ocrypto_constant_time_equal>
   26d60:	3801      	subs	r0, #1
   26d62:	b010      	add	sp, #64	; 0x40
   26d64:	bd70      	pop	{r4, r5, r6, pc}
   26d66:	bf00      	nop
   26d68:	0002ef58 	.word	0x0002ef58
   26d6c:	0002ef78 	.word	0x0002ef78

00026d70 <ocrypto_curve_p256_to32bytes>:
   26d70:	f000 b902 	b.w	26f78 <ocrypto_mod_p256_to_bytes>

00026d74 <ocrypto_curve_p256_to64bytes>:
   26d74:	b538      	push	{r3, r4, r5, lr}
   26d76:	4604      	mov	r4, r0
   26d78:	460d      	mov	r5, r1
   26d7a:	f000 f8fd 	bl	26f78 <ocrypto_mod_p256_to_bytes>
   26d7e:	f105 0120 	add.w	r1, r5, #32
   26d82:	f104 0020 	add.w	r0, r4, #32
   26d86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26d8a:	f000 b8f5 	b.w	26f78 <ocrypto_mod_p256_to_bytes>
   26d8e:	bf00      	nop

00026d90 <ocrypto_curve_p256_scalarmult>:
   26d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26d94:	4613      	mov	r3, r2
   26d96:	b0b8      	sub	sp, #224	; 0xe0
   26d98:	4a54      	ldr	r2, [pc, #336]	; (26eec <ocrypto_curve_p256_scalarmult+0x15c>)
   26d9a:	4689      	mov	r9, r1
   26d9c:	4680      	mov	r8, r0
   26d9e:	4619      	mov	r1, r3
   26da0:	a810      	add	r0, sp, #64	; 0x40
   26da2:	f7d9 f9e7 	bl	174 <ocrypto_bigint_sub256>
   26da6:	4952      	ldr	r1, [pc, #328]	; (26ef0 <ocrypto_curve_p256_scalarmult+0x160>)
   26da8:	4602      	mov	r2, r0
   26daa:	a810      	add	r0, sp, #64	; 0x40
   26dac:	f7d9 fa02 	bl	1b4 <ocrypto_bigint_cadd256>
   26db0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   26db2:	494e      	ldr	r1, [pc, #312]	; (26eec <ocrypto_curve_p256_scalarmult+0x15c>)
   26db4:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   26db8:	4607      	mov	r7, r0
   26dba:	f1c6 0201 	rsb	r2, r6, #1
   26dbe:	a810      	add	r0, sp, #64	; 0x40
   26dc0:	f7d9 f9f8 	bl	1b4 <ocrypto_bigint_cadd256>
   26dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   26dc6:	464a      	mov	r2, r9
   26dc8:	ea6f 0a03 	mvn.w	sl, r3
   26dcc:	a928      	add	r1, sp, #160	; 0xa0
   26dce:	a818      	add	r0, sp, #96	; 0x60
   26dd0:	f7ff fe8e 	bl	26af0 <p256_zdblu>
   26dd4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   26dd8:	a920      	add	r1, sp, #128	; 0x80
   26dda:	f1ca 0201 	rsb	r2, sl, #1
   26dde:	4608      	mov	r0, r1
   26de0:	f000 f892 	bl	26f08 <ocrypto_mod_p256_cneg>
   26de4:	f1c7 0701 	rsb	r7, r7, #1
   26de8:	24fe      	movs	r4, #254	; 0xfe
   26dea:	466a      	mov	r2, sp
   26dec:	a918      	add	r1, sp, #96	; 0x60
   26dee:	a828      	add	r0, sp, #160	; 0xa0
   26df0:	f7ff ff40 	bl	26c74 <p256_zaddu>
   26df4:	1162      	asrs	r2, r4, #5
   26df6:	ab38      	add	r3, sp, #224	; 0xe0
   26df8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   26dfc:	f004 011f 	and.w	r1, r4, #31
   26e00:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   26e04:	40cb      	lsrs	r3, r1
   26e06:	4655      	mov	r5, sl
   26e08:	f003 0a01 	and.w	sl, r3, #1
   26e0c:	ea8a 0505 	eor.w	r5, sl, r5
   26e10:	462a      	mov	r2, r5
   26e12:	a928      	add	r1, sp, #160	; 0xa0
   26e14:	a818      	add	r0, sp, #96	; 0x60
   26e16:	f7d9 fa29 	bl	26c <ocrypto_bigint_cswap256>
   26e1a:	462a      	mov	r2, r5
   26e1c:	a930      	add	r1, sp, #192	; 0xc0
   26e1e:	a820      	add	r0, sp, #128	; 0x80
   26e20:	f7d9 fa24 	bl	26c <ocrypto_bigint_cswap256>
   26e24:	3c01      	subs	r4, #1
   26e26:	a928      	add	r1, sp, #160	; 0xa0
   26e28:	a818      	add	r0, sp, #96	; 0x60
   26e2a:	f7ff febd 	bl	26ba8 <p256_zaddc>
   26e2e:	1c63      	adds	r3, r4, #1
   26e30:	d1db      	bne.n	26dea <ocrypto_curve_p256_scalarmult+0x5a>
   26e32:	f1ca 0201 	rsb	r2, sl, #1
   26e36:	a920      	add	r1, sp, #128	; 0x80
   26e38:	a808      	add	r0, sp, #32
   26e3a:	f000 f865 	bl	26f08 <ocrypto_mod_p256_cneg>
   26e3e:	ea86 060a 	eor.w	r6, r6, sl
   26e42:	466a      	mov	r2, sp
   26e44:	a918      	add	r1, sp, #96	; 0x60
   26e46:	a828      	add	r0, sp, #160	; 0xa0
   26e48:	f7ff ff14 	bl	26c74 <p256_zaddu>
   26e4c:	a928      	add	r1, sp, #160	; 0xa0
   26e4e:	4632      	mov	r2, r6
   26e50:	a818      	add	r0, sp, #96	; 0x60
   26e52:	f7d9 fa0b 	bl	26c <ocrypto_bigint_cswap256>
   26e56:	4632      	mov	r2, r6
   26e58:	a930      	add	r1, sp, #192	; 0xc0
   26e5a:	a820      	add	r0, sp, #128	; 0x80
   26e5c:	f7d9 fa06 	bl	26c <ocrypto_bigint_cswap256>
   26e60:	a908      	add	r1, sp, #32
   26e62:	466a      	mov	r2, sp
   26e64:	4608      	mov	r0, r1
   26e66:	f7d9 fc77 	bl	758 <ocrypto_mod_p256_mul>
   26e6a:	a908      	add	r1, sp, #32
   26e6c:	4608      	mov	r0, r1
   26e6e:	f000 f89d 	bl	26fac <ocrypto_mod_p256_inv>
   26e72:	a908      	add	r1, sp, #32
   26e74:	f108 0420 	add.w	r4, r8, #32
   26e78:	f109 0220 	add.w	r2, r9, #32
   26e7c:	4608      	mov	r0, r1
   26e7e:	f7d9 fc6b 	bl	758 <ocrypto_mod_p256_mul>
   26e82:	a920      	add	r1, sp, #128	; 0x80
   26e84:	aa08      	add	r2, sp, #32
   26e86:	4620      	mov	r0, r4
   26e88:	f7d9 fc66 	bl	758 <ocrypto_mod_p256_mul>
   26e8c:	aa08      	add	r2, sp, #32
   26e8e:	a918      	add	r1, sp, #96	; 0x60
   26e90:	4668      	mov	r0, sp
   26e92:	f7d9 fc61 	bl	758 <ocrypto_mod_p256_mul>
   26e96:	4669      	mov	r1, sp
   26e98:	4668      	mov	r0, sp
   26e9a:	f7d9 fc75 	bl	788 <ocrypto_mod_p256_sqr>
   26e9e:	aa18      	add	r2, sp, #96	; 0x60
   26ea0:	4669      	mov	r1, sp
   26ea2:	a808      	add	r0, sp, #32
   26ea4:	f7d9 fc58 	bl	758 <ocrypto_mod_p256_mul>
   26ea8:	4621      	mov	r1, r4
   26eaa:	4668      	mov	r0, sp
   26eac:	f7d9 fc6c 	bl	788 <ocrypto_mod_p256_sqr>
   26eb0:	aa08      	add	r2, sp, #32
   26eb2:	4669      	mov	r1, sp
   26eb4:	4610      	mov	r0, r2
   26eb6:	f7d9 fbb7 	bl	628 <ocrypto_mod_p256_sub>
   26eba:	4a0e      	ldr	r2, [pc, #56]	; (26ef4 <ocrypto_curve_p256_scalarmult+0x164>)
   26ebc:	a908      	add	r1, sp, #32
   26ebe:	4668      	mov	r0, sp
   26ec0:	f7d9 fbb2 	bl	628 <ocrypto_mod_p256_sub>
   26ec4:	4620      	mov	r0, r4
   26ec6:	2120      	movs	r1, #32
   26ec8:	f7d9 fb56 	bl	578 <ocrypto_constant_time_is_zero>
   26ecc:	a908      	add	r1, sp, #32
   26ece:	4243      	negs	r3, r0
   26ed0:	4602      	mov	r2, r0
   26ed2:	4668      	mov	r0, sp
   26ed4:	431f      	orrs	r7, r3
   26ed6:	f7d9 f9c9 	bl	26c <ocrypto_bigint_cswap256>
   26eda:	4640      	mov	r0, r8
   26edc:	4a06      	ldr	r2, [pc, #24]	; (26ef8 <ocrypto_curve_p256_scalarmult+0x168>)
   26ede:	4669      	mov	r1, sp
   26ee0:	f7d9 fc3a 	bl	758 <ocrypto_mod_p256_mul>
   26ee4:	4638      	mov	r0, r7
   26ee6:	b038      	add	sp, #224	; 0xe0
   26ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26eec:	0002ef98 	.word	0x0002ef98
   26ef0:	0002ef18 	.word	0x0002ef18
   26ef4:	0002ef78 	.word	0x0002ef78
   26ef8:	0002ef38 	.word	0x0002ef38

00026efc <ocrypto_curve_p256_scalarmult_base>:
   26efc:	460a      	mov	r2, r1
   26efe:	4901      	ldr	r1, [pc, #4]	; (26f04 <ocrypto_curve_p256_scalarmult_base+0x8>)
   26f00:	f7ff bf46 	b.w	26d90 <ocrypto_curve_p256_scalarmult>
   26f04:	0002eed8 	.word	0x0002eed8

00026f08 <ocrypto_mod_p256_cneg>:
   26f08:	b570      	push	{r4, r5, r6, lr}
   26f0a:	b088      	sub	sp, #32
   26f0c:	4604      	mov	r4, r0
   26f0e:	460d      	mov	r5, r1
   26f10:	4616      	mov	r6, r2
   26f12:	2100      	movs	r1, #0
   26f14:	2220      	movs	r2, #32
   26f16:	4668      	mov	r0, sp
   26f18:	f004 f878 	bl	2b00c <memset>
   26f1c:	2300      	movs	r3, #0
   26f1e:	4629      	mov	r1, r5
   26f20:	2220      	movs	r2, #32
   26f22:	4620      	mov	r0, r4
   26f24:	9300      	str	r3, [sp, #0]
   26f26:	f004 f866 	bl	2aff6 <memcpy>
   26f2a:	462a      	mov	r2, r5
   26f2c:	4669      	mov	r1, sp
   26f2e:	4668      	mov	r0, sp
   26f30:	f7d9 fb7a 	bl	628 <ocrypto_mod_p256_sub>
   26f34:	4632      	mov	r2, r6
   26f36:	4669      	mov	r1, sp
   26f38:	4620      	mov	r0, r4
   26f3a:	f7d9 f997 	bl	26c <ocrypto_bigint_cswap256>
   26f3e:	b008      	add	sp, #32
   26f40:	bd70      	pop	{r4, r5, r6, pc}
   26f42:	bf00      	nop

00026f44 <ocrypto_mod_p256_from_bytes>:
   26f44:	680b      	ldr	r3, [r1, #0]
   26f46:	ba1b      	rev	r3, r3
   26f48:	61c3      	str	r3, [r0, #28]
   26f4a:	684b      	ldr	r3, [r1, #4]
   26f4c:	ba1b      	rev	r3, r3
   26f4e:	6183      	str	r3, [r0, #24]
   26f50:	688b      	ldr	r3, [r1, #8]
   26f52:	ba1b      	rev	r3, r3
   26f54:	6143      	str	r3, [r0, #20]
   26f56:	68cb      	ldr	r3, [r1, #12]
   26f58:	ba1b      	rev	r3, r3
   26f5a:	6103      	str	r3, [r0, #16]
   26f5c:	690b      	ldr	r3, [r1, #16]
   26f5e:	ba1b      	rev	r3, r3
   26f60:	60c3      	str	r3, [r0, #12]
   26f62:	694b      	ldr	r3, [r1, #20]
   26f64:	ba1b      	rev	r3, r3
   26f66:	6083      	str	r3, [r0, #8]
   26f68:	698b      	ldr	r3, [r1, #24]
   26f6a:	ba1b      	rev	r3, r3
   26f6c:	6043      	str	r3, [r0, #4]
   26f6e:	69cb      	ldr	r3, [r1, #28]
   26f70:	ba1b      	rev	r3, r3
   26f72:	6003      	str	r3, [r0, #0]
   26f74:	4770      	bx	lr
   26f76:	bf00      	nop

00026f78 <ocrypto_mod_p256_to_bytes>:
   26f78:	69cb      	ldr	r3, [r1, #28]
   26f7a:	ba1b      	rev	r3, r3
   26f7c:	6003      	str	r3, [r0, #0]
   26f7e:	698b      	ldr	r3, [r1, #24]
   26f80:	ba1b      	rev	r3, r3
   26f82:	6043      	str	r3, [r0, #4]
   26f84:	694b      	ldr	r3, [r1, #20]
   26f86:	ba1b      	rev	r3, r3
   26f88:	6083      	str	r3, [r0, #8]
   26f8a:	690b      	ldr	r3, [r1, #16]
   26f8c:	ba1b      	rev	r3, r3
   26f8e:	60c3      	str	r3, [r0, #12]
   26f90:	68cb      	ldr	r3, [r1, #12]
   26f92:	ba1b      	rev	r3, r3
   26f94:	6103      	str	r3, [r0, #16]
   26f96:	688b      	ldr	r3, [r1, #8]
   26f98:	ba1b      	rev	r3, r3
   26f9a:	6143      	str	r3, [r0, #20]
   26f9c:	684b      	ldr	r3, [r1, #4]
   26f9e:	ba1b      	rev	r3, r3
   26fa0:	6183      	str	r3, [r0, #24]
   26fa2:	680b      	ldr	r3, [r1, #0]
   26fa4:	ba1b      	rev	r3, r3
   26fa6:	61c3      	str	r3, [r0, #28]
   26fa8:	4770      	bx	lr
   26faa:	bf00      	nop

00026fac <ocrypto_mod_p256_inv>:
   26fac:	b570      	push	{r4, r5, r6, lr}
   26fae:	b098      	sub	sp, #96	; 0x60
   26fb0:	460d      	mov	r5, r1
   26fb2:	4606      	mov	r6, r0
   26fb4:	a810      	add	r0, sp, #64	; 0x40
   26fb6:	f7d9 fbe7 	bl	788 <ocrypto_mod_p256_sqr>
   26fba:	462a      	mov	r2, r5
   26fbc:	a910      	add	r1, sp, #64	; 0x40
   26fbe:	4668      	mov	r0, sp
   26fc0:	f7d9 fbca 	bl	758 <ocrypto_mod_p256_mul>
   26fc4:	4669      	mov	r1, sp
   26fc6:	a810      	add	r0, sp, #64	; 0x40
   26fc8:	f7d9 fbde 	bl	788 <ocrypto_mod_p256_sqr>
   26fcc:	a910      	add	r1, sp, #64	; 0x40
   26fce:	4608      	mov	r0, r1
   26fd0:	f7d9 fbda 	bl	788 <ocrypto_mod_p256_sqr>
   26fd4:	466a      	mov	r2, sp
   26fd6:	a910      	add	r1, sp, #64	; 0x40
   26fd8:	a808      	add	r0, sp, #32
   26fda:	f7d9 fbbd 	bl	758 <ocrypto_mod_p256_mul>
   26fde:	a908      	add	r1, sp, #32
   26fe0:	a810      	add	r0, sp, #64	; 0x40
   26fe2:	f7d9 fbd1 	bl	788 <ocrypto_mod_p256_sqr>
   26fe6:	a910      	add	r1, sp, #64	; 0x40
   26fe8:	4608      	mov	r0, r1
   26fea:	f7d9 fbcd 	bl	788 <ocrypto_mod_p256_sqr>
   26fee:	a910      	add	r1, sp, #64	; 0x40
   26ff0:	4608      	mov	r0, r1
   26ff2:	f7d9 fbc9 	bl	788 <ocrypto_mod_p256_sqr>
   26ff6:	a910      	add	r1, sp, #64	; 0x40
   26ff8:	4608      	mov	r0, r1
   26ffa:	f7d9 fbc5 	bl	788 <ocrypto_mod_p256_sqr>
   26ffe:	a910      	add	r1, sp, #64	; 0x40
   27000:	aa08      	add	r2, sp, #32
   27002:	4608      	mov	r0, r1
   27004:	f7d9 fba8 	bl	758 <ocrypto_mod_p256_mul>
   27008:	a910      	add	r1, sp, #64	; 0x40
   2700a:	4608      	mov	r0, r1
   2700c:	f7d9 fbbc 	bl	788 <ocrypto_mod_p256_sqr>
   27010:	a910      	add	r1, sp, #64	; 0x40
   27012:	4608      	mov	r0, r1
   27014:	f7d9 fbb8 	bl	788 <ocrypto_mod_p256_sqr>
   27018:	a910      	add	r1, sp, #64	; 0x40
   2701a:	466a      	mov	r2, sp
   2701c:	a808      	add	r0, sp, #32
   2701e:	f7d9 fb9b 	bl	758 <ocrypto_mod_p256_mul>
   27022:	2405      	movs	r4, #5
   27024:	a908      	add	r1, sp, #32
   27026:	a810      	add	r0, sp, #64	; 0x40
   27028:	f7d9 fbae 	bl	788 <ocrypto_mod_p256_sqr>
   2702c:	a910      	add	r1, sp, #64	; 0x40
   2702e:	4608      	mov	r0, r1
   27030:	f7d9 fbaa 	bl	788 <ocrypto_mod_p256_sqr>
   27034:	3c01      	subs	r4, #1
   27036:	a910      	add	r1, sp, #64	; 0x40
   27038:	d1f5      	bne.n	27026 <ocrypto_mod_p256_inv+0x7a>
   2703a:	aa08      	add	r2, sp, #32
   2703c:	4608      	mov	r0, r1
   2703e:	f7d9 fb8b 	bl	758 <ocrypto_mod_p256_mul>
   27042:	2405      	movs	r4, #5
   27044:	a910      	add	r1, sp, #64	; 0x40
   27046:	4608      	mov	r0, r1
   27048:	f7d9 fb9e 	bl	788 <ocrypto_mod_p256_sqr>
   2704c:	a910      	add	r1, sp, #64	; 0x40
   2704e:	4608      	mov	r0, r1
   27050:	f7d9 fb9a 	bl	788 <ocrypto_mod_p256_sqr>
   27054:	3c01      	subs	r4, #1
   27056:	d1f5      	bne.n	27044 <ocrypto_mod_p256_inv+0x98>
   27058:	a910      	add	r1, sp, #64	; 0x40
   2705a:	aa08      	add	r2, sp, #32
   2705c:	4608      	mov	r0, r1
   2705e:	f7d9 fb7b 	bl	758 <ocrypto_mod_p256_mul>
   27062:	a910      	add	r1, sp, #64	; 0x40
   27064:	a808      	add	r0, sp, #32
   27066:	f7d9 fb8f 	bl	788 <ocrypto_mod_p256_sqr>
   2706a:	a908      	add	r1, sp, #32
   2706c:	4608      	mov	r0, r1
   2706e:	f7d9 fb8b 	bl	788 <ocrypto_mod_p256_sqr>
   27072:	a908      	add	r1, sp, #32
   27074:	466a      	mov	r2, sp
   27076:	4668      	mov	r0, sp
   27078:	f7d9 fb6e 	bl	758 <ocrypto_mod_p256_mul>
   2707c:	2410      	movs	r4, #16
   2707e:	4669      	mov	r1, sp
   27080:	a810      	add	r0, sp, #64	; 0x40
   27082:	f7d9 fb81 	bl	788 <ocrypto_mod_p256_sqr>
   27086:	a910      	add	r1, sp, #64	; 0x40
   27088:	4608      	mov	r0, r1
   2708a:	f7d9 fb7d 	bl	788 <ocrypto_mod_p256_sqr>
   2708e:	3c01      	subs	r4, #1
   27090:	a910      	add	r1, sp, #64	; 0x40
   27092:	d1f5      	bne.n	27080 <ocrypto_mod_p256_inv+0xd4>
   27094:	462a      	mov	r2, r5
   27096:	4608      	mov	r0, r1
   27098:	f7d9 fb5e 	bl	758 <ocrypto_mod_p256_mul>
   2709c:	2440      	movs	r4, #64	; 0x40
   2709e:	a910      	add	r1, sp, #64	; 0x40
   270a0:	4608      	mov	r0, r1
   270a2:	f7d9 fb71 	bl	788 <ocrypto_mod_p256_sqr>
   270a6:	a910      	add	r1, sp, #64	; 0x40
   270a8:	4608      	mov	r0, r1
   270aa:	f7d9 fb6d 	bl	788 <ocrypto_mod_p256_sqr>
   270ae:	3c01      	subs	r4, #1
   270b0:	d1f5      	bne.n	2709e <ocrypto_mod_p256_inv+0xf2>
   270b2:	a910      	add	r1, sp, #64	; 0x40
   270b4:	466a      	mov	r2, sp
   270b6:	4608      	mov	r0, r1
   270b8:	f7d9 fb4e 	bl	758 <ocrypto_mod_p256_mul>
   270bc:	2410      	movs	r4, #16
   270be:	a910      	add	r1, sp, #64	; 0x40
   270c0:	4608      	mov	r0, r1
   270c2:	f7d9 fb61 	bl	788 <ocrypto_mod_p256_sqr>
   270c6:	a910      	add	r1, sp, #64	; 0x40
   270c8:	4608      	mov	r0, r1
   270ca:	f7d9 fb5d 	bl	788 <ocrypto_mod_p256_sqr>
   270ce:	3c01      	subs	r4, #1
   270d0:	d1f5      	bne.n	270be <ocrypto_mod_p256_inv+0x112>
   270d2:	a910      	add	r1, sp, #64	; 0x40
   270d4:	466a      	mov	r2, sp
   270d6:	4608      	mov	r0, r1
   270d8:	f7d9 fb3e 	bl	758 <ocrypto_mod_p256_mul>
   270dc:	2410      	movs	r4, #16
   270de:	a910      	add	r1, sp, #64	; 0x40
   270e0:	4608      	mov	r0, r1
   270e2:	f7d9 fb51 	bl	788 <ocrypto_mod_p256_sqr>
   270e6:	a910      	add	r1, sp, #64	; 0x40
   270e8:	4608      	mov	r0, r1
   270ea:	f7d9 fb4d 	bl	788 <ocrypto_mod_p256_sqr>
   270ee:	3c01      	subs	r4, #1
   270f0:	d1f5      	bne.n	270de <ocrypto_mod_p256_inv+0x132>
   270f2:	a910      	add	r1, sp, #64	; 0x40
   270f4:	aa08      	add	r2, sp, #32
   270f6:	4608      	mov	r0, r1
   270f8:	f7d9 fb2e 	bl	758 <ocrypto_mod_p256_mul>
   270fc:	462a      	mov	r2, r5
   270fe:	a910      	add	r1, sp, #64	; 0x40
   27100:	4630      	mov	r0, r6
   27102:	f7d9 fb29 	bl	758 <ocrypto_mod_p256_mul>
   27106:	b018      	add	sp, #96	; 0x60
   27108:	bd70      	pop	{r4, r5, r6, pc}
   2710a:	bf00      	nop

0002710c <nrf_cc3xx_platform_init>:
   2710c:	b510      	push	{r4, lr}
   2710e:	4c0c      	ldr	r4, [pc, #48]	; (27140 <nrf_cc3xx_platform_init+0x34>)
   27110:	6823      	ldr	r3, [r4, #0]
   27112:	b113      	cbz	r3, 2711a <nrf_cc3xx_platform_init+0xe>
   27114:	4b0b      	ldr	r3, [pc, #44]	; (27144 <nrf_cc3xx_platform_init+0x38>)
   27116:	681b      	ldr	r3, [r3, #0]
   27118:	b92b      	cbnz	r3, 27126 <nrf_cc3xx_platform_init+0x1a>
   2711a:	f000 fe99 	bl	27e50 <CC_LibInit>
   2711e:	b930      	cbnz	r0, 2712e <nrf_cc3xx_platform_init+0x22>
   27120:	4b08      	ldr	r3, [pc, #32]	; (27144 <nrf_cc3xx_platform_init+0x38>)
   27122:	2201      	movs	r2, #1
   27124:	601a      	str	r2, [r3, #0]
   27126:	2301      	movs	r3, #1
   27128:	6023      	str	r3, [r4, #0]
   2712a:	2000      	movs	r0, #0
   2712c:	bd10      	pop	{r4, pc}
   2712e:	3801      	subs	r0, #1
   27130:	2806      	cmp	r0, #6
   27132:	d901      	bls.n	27138 <nrf_cc3xx_platform_init+0x2c>
   27134:	4804      	ldr	r0, [pc, #16]	; (27148 <nrf_cc3xx_platform_init+0x3c>)
   27136:	bd10      	pop	{r4, pc}
   27138:	4b04      	ldr	r3, [pc, #16]	; (2714c <nrf_cc3xx_platform_init+0x40>)
   2713a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2713e:	bd10      	pop	{r4, pc}
   27140:	20003674 	.word	0x20003674
   27144:	20003678 	.word	0x20003678
   27148:	ffff8ffe 	.word	0xffff8ffe
   2714c:	0002efb8 	.word	0x0002efb8

00027150 <nrf_cc3xx_platform_abort>:
   27150:	f3bf 8f4f 	dsb	sy
   27154:	4905      	ldr	r1, [pc, #20]	; (2716c <nrf_cc3xx_platform_abort+0x1c>)
   27156:	4b06      	ldr	r3, [pc, #24]	; (27170 <nrf_cc3xx_platform_abort+0x20>)
   27158:	68ca      	ldr	r2, [r1, #12]
   2715a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2715e:	4313      	orrs	r3, r2
   27160:	60cb      	str	r3, [r1, #12]
   27162:	f3bf 8f4f 	dsb	sy
   27166:	bf00      	nop
   27168:	e7fd      	b.n	27166 <nrf_cc3xx_platform_abort+0x16>
   2716a:	bf00      	nop
   2716c:	e000ed00 	.word	0xe000ed00
   27170:	05fa0004 	.word	0x05fa0004

00027174 <CC_PalAbort>:
   27174:	b410      	push	{r4}
   27176:	4b09      	ldr	r3, [pc, #36]	; (2719c <CC_PalAbort+0x28>)
   27178:	4909      	ldr	r1, [pc, #36]	; (271a0 <CC_PalAbort+0x2c>)
   2717a:	4c0a      	ldr	r4, [pc, #40]	; (271a4 <CC_PalAbort+0x30>)
   2717c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   27180:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   27184:	6849      	ldr	r1, [r1, #4]
   27186:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   2718a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2718e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   27192:	2300      	movs	r3, #0
   27194:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   27198:	bc10      	pop	{r4}
   2719a:	4708      	bx	r1
   2719c:	5002b000 	.word	0x5002b000
   271a0:	200007bc 	.word	0x200007bc
   271a4:	5002a000 	.word	0x5002a000

000271a8 <nrf_cc3xx_platform_set_abort>:
   271a8:	e9d0 1200 	ldrd	r1, r2, [r0]
   271ac:	4b01      	ldr	r3, [pc, #4]	; (271b4 <nrf_cc3xx_platform_set_abort+0xc>)
   271ae:	e9c3 1200 	strd	r1, r2, [r3]
   271b2:	4770      	bx	lr
   271b4:	200007bc 	.word	0x200007bc

000271b8 <nrf_cc3xx_platform_ctr_drbg_init>:
   271b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   271bc:	4c14      	ldr	r4, [pc, #80]	; (27210 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   271be:	4e15      	ldr	r6, [pc, #84]	; (27214 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   271c0:	2800      	cmp	r0, #0
   271c2:	bf18      	it	ne
   271c4:	4604      	movne	r4, r0
   271c6:	b083      	sub	sp, #12
   271c8:	6823      	ldr	r3, [r4, #0]
   271ca:	42b3      	cmp	r3, r6
   271cc:	d01c      	beq.n	27208 <nrf_cc3xx_platform_ctr_drbg_init+0x50>
   271ce:	460d      	mov	r5, r1
   271d0:	4620      	mov	r0, r4
   271d2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   271d6:	f104 0904 	add.w	r9, r4, #4
   271da:	4617      	mov	r7, r2
   271dc:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   271e0:	f000 f8e8 	bl	273b4 <mbedtls_platform_zeroize>
   271e4:	4648      	mov	r0, r9
   271e6:	f000 fd1d 	bl	27c24 <cc_mbedtls_entropy_init>
   271ea:	4640      	mov	r0, r8
   271ec:	f000 fb4a 	bl	27884 <cc_mbedtls_ctr_drbg_init>
   271f0:	4909      	ldr	r1, [pc, #36]	; (27218 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   271f2:	9700      	str	r7, [sp, #0]
   271f4:	462b      	mov	r3, r5
   271f6:	464a      	mov	r2, r9
   271f8:	4640      	mov	r0, r8
   271fa:	f000 fb59 	bl	278b0 <cc_mbedtls_ctr_drbg_seed>
   271fe:	b900      	cbnz	r0, 27202 <nrf_cc3xx_platform_ctr_drbg_init+0x4a>
   27200:	6026      	str	r6, [r4, #0]
   27202:	b003      	add	sp, #12
   27204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27208:	2000      	movs	r0, #0
   2720a:	b003      	add	sp, #12
   2720c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27210:	2000367c 	.word	0x2000367c
   27214:	5ac9bca5 	.word	0x5ac9bca5
   27218:	00027cad 	.word	0x00027cad

0002721c <nrf_cc3xx_platform_ctr_drbg_get>:
   2721c:	b570      	push	{r4, r5, r6, lr}
   2721e:	4d0d      	ldr	r5, [pc, #52]	; (27254 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   27220:	2800      	cmp	r0, #0
   27222:	bf18      	it	ne
   27224:	4605      	movne	r5, r0
   27226:	461e      	mov	r6, r3
   27228:	6828      	ldr	r0, [r5, #0]
   2722a:	4b0b      	ldr	r3, [pc, #44]	; (27258 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   2722c:	4298      	cmp	r0, r3
   2722e:	b082      	sub	sp, #8
   27230:	d10d      	bne.n	2724e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   27232:	f505 708e 	add.w	r0, r5, #284	; 0x11c
   27236:	2500      	movs	r5, #0
   27238:	9500      	str	r5, [sp, #0]
   2723a:	462b      	mov	r3, r5
   2723c:	4614      	mov	r4, r2
   2723e:	f000 fb85 	bl	2794c <cc_mbedtls_ctr_drbg_random_with_add>
   27242:	2800      	cmp	r0, #0
   27244:	bf18      	it	ne
   27246:	462c      	movne	r4, r5
   27248:	6034      	str	r4, [r6, #0]
   2724a:	b002      	add	sp, #8
   2724c:	bd70      	pop	{r4, r5, r6, pc}
   2724e:	4803      	ldr	r0, [pc, #12]	; (2725c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   27250:	e7fb      	b.n	2724a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   27252:	bf00      	nop
   27254:	2000367c 	.word	0x2000367c
   27258:	5ac9bca5 	.word	0x5ac9bca5
   2725c:	ffff8fe8 	.word	0xffff8fe8

00027260 <mutex_free>:
   27260:	b510      	push	{r4, lr}
   27262:	4604      	mov	r4, r0
   27264:	b150      	cbz	r0, 2727c <mutex_free+0x1c>
   27266:	6863      	ldr	r3, [r4, #4]
   27268:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2726c:	d005      	beq.n	2727a <mutex_free+0x1a>
   2726e:	4a06      	ldr	r2, [pc, #24]	; (27288 <mutex_free+0x28>)
   27270:	4293      	cmp	r3, r2
   27272:	d002      	beq.n	2727a <mutex_free+0x1a>
   27274:	2300      	movs	r3, #0
   27276:	6023      	str	r3, [r4, #0]
   27278:	6062      	str	r2, [r4, #4]
   2727a:	bd10      	pop	{r4, pc}
   2727c:	4b03      	ldr	r3, [pc, #12]	; (2728c <mutex_free+0x2c>)
   2727e:	4804      	ldr	r0, [pc, #16]	; (27290 <mutex_free+0x30>)
   27280:	685b      	ldr	r3, [r3, #4]
   27282:	4798      	blx	r3
   27284:	e7ef      	b.n	27266 <mutex_free+0x6>
   27286:	bf00      	nop
   27288:	a95c5f2c 	.word	0xa95c5f2c
   2728c:	200007bc 	.word	0x200007bc
   27290:	0002efd4 	.word	0x0002efd4

00027294 <mutex_lock>:
   27294:	b1c8      	cbz	r0, 272ca <mutex_lock+0x36>
   27296:	6843      	ldr	r3, [r0, #4]
   27298:	4a0d      	ldr	r2, [pc, #52]	; (272d0 <mutex_lock+0x3c>)
   2729a:	4293      	cmp	r3, r2
   2729c:	d013      	beq.n	272c6 <mutex_lock+0x32>
   2729e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   272a2:	d00e      	beq.n	272c2 <mutex_lock+0x2e>
   272a4:	2301      	movs	r3, #1
   272a6:	e850 2f00 	ldrex	r2, [r0]
   272aa:	4619      	mov	r1, r3
   272ac:	e840 1c00 	strex	ip, r1, [r0]
   272b0:	f09c 0f00 	teq	ip, #0
   272b4:	d1f7      	bne.n	272a6 <mutex_lock+0x12>
   272b6:	2a01      	cmp	r2, #1
   272b8:	d0f5      	beq.n	272a6 <mutex_lock+0x12>
   272ba:	f3bf 8f5f 	dmb	sy
   272be:	2000      	movs	r0, #0
   272c0:	4770      	bx	lr
   272c2:	4804      	ldr	r0, [pc, #16]	; (272d4 <mutex_lock+0x40>)
   272c4:	4770      	bx	lr
   272c6:	4804      	ldr	r0, [pc, #16]	; (272d8 <mutex_lock+0x44>)
   272c8:	4770      	bx	lr
   272ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   272ce:	4770      	bx	lr
   272d0:	a95c5f2c 	.word	0xa95c5f2c
   272d4:	ffff8fe9 	.word	0xffff8fe9
   272d8:	ffff8fea 	.word	0xffff8fea

000272dc <mutex_unlock>:
   272dc:	b180      	cbz	r0, 27300 <mutex_unlock+0x24>
   272de:	6843      	ldr	r3, [r0, #4]
   272e0:	4a09      	ldr	r2, [pc, #36]	; (27308 <mutex_unlock+0x2c>)
   272e2:	4293      	cmp	r3, r2
   272e4:	d00a      	beq.n	272fc <mutex_unlock+0x20>
   272e6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   272ea:	d005      	beq.n	272f8 <mutex_unlock+0x1c>
   272ec:	f3bf 8f5f 	dmb	sy
   272f0:	2300      	movs	r3, #0
   272f2:	6003      	str	r3, [r0, #0]
   272f4:	4618      	mov	r0, r3
   272f6:	4770      	bx	lr
   272f8:	4804      	ldr	r0, [pc, #16]	; (2730c <mutex_unlock+0x30>)
   272fa:	4770      	bx	lr
   272fc:	4804      	ldr	r0, [pc, #16]	; (27310 <mutex_unlock+0x34>)
   272fe:	4770      	bx	lr
   27300:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   27304:	4770      	bx	lr
   27306:	bf00      	nop
   27308:	a95c5f2c 	.word	0xa95c5f2c
   2730c:	ffff8fe9 	.word	0xffff8fe9
   27310:	ffff8fea 	.word	0xffff8fea

00027314 <mutex_init>:
   27314:	b510      	push	{r4, lr}
   27316:	4604      	mov	r4, r0
   27318:	b120      	cbz	r0, 27324 <mutex_init+0x10>
   2731a:	4b04      	ldr	r3, [pc, #16]	; (2732c <mutex_init+0x18>)
   2731c:	6063      	str	r3, [r4, #4]
   2731e:	2200      	movs	r2, #0
   27320:	6022      	str	r2, [r4, #0]
   27322:	bd10      	pop	{r4, pc}
   27324:	4802      	ldr	r0, [pc, #8]	; (27330 <mutex_init+0x1c>)
   27326:	f7ff ff25 	bl	27174 <CC_PalAbort>
   2732a:	e7f6      	b.n	2731a <mutex_init+0x6>
   2732c:	3a00003a 	.word	0x3a00003a
   27330:	0002effc 	.word	0x0002effc

00027334 <nrf_cc3xx_platform_set_mutexes>:
   27334:	b570      	push	{r4, r5, r6, lr}
   27336:	e9d0 2300 	ldrd	r2, r3, [r0]
   2733a:	4c15      	ldr	r4, [pc, #84]	; (27390 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   2733c:	4d15      	ldr	r5, [pc, #84]	; (27394 <nrf_cc3xx_platform_set_mutexes+0x60>)
   2733e:	6063      	str	r3, [r4, #4]
   27340:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   27344:	e9c4 3002 	strd	r3, r0, [r4, #8]
   27348:	6022      	str	r2, [r4, #0]
   2734a:	4b13      	ldr	r3, [pc, #76]	; (27398 <nrf_cc3xx_platform_set_mutexes+0x64>)
   2734c:	6808      	ldr	r0, [r1, #0]
   2734e:	6018      	str	r0, [r3, #0]
   27350:	6848      	ldr	r0, [r1, #4]
   27352:	6058      	str	r0, [r3, #4]
   27354:	6888      	ldr	r0, [r1, #8]
   27356:	6098      	str	r0, [r3, #8]
   27358:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
   2735c:	60d8      	str	r0, [r3, #12]
   2735e:	6119      	str	r1, [r3, #16]
   27360:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   27364:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   27368:	d010      	beq.n	2738c <nrf_cc3xx_platform_set_mutexes+0x58>
   2736a:	490c      	ldr	r1, [pc, #48]	; (2739c <nrf_cc3xx_platform_set_mutexes+0x68>)
   2736c:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   27370:	2300      	movs	r3, #0
   27372:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   27376:	f505 708a 	add.w	r0, r5, #276	; 0x114
   2737a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   2737e:	4790      	blx	r2
   27380:	6823      	ldr	r3, [r4, #0]
   27382:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   27386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2738a:	4718      	bx	r3
   2738c:	bd70      	pop	{r4, r5, r6, pc}
   2738e:	bf00      	nop
   27390:	200007cc 	.word	0x200007cc
   27394:	2000367c 	.word	0x2000367c
   27398:	200007dc 	.word	0x200007dc
   2739c:	a95c5f2c 	.word	0xa95c5f2c

000273a0 <mbedtls_zeroize_internal>:
   273a0:	b138      	cbz	r0, 273b2 <mbedtls_zeroize_internal+0x12>
   273a2:	b131      	cbz	r1, 273b2 <mbedtls_zeroize_internal+0x12>
   273a4:	4401      	add	r1, r0
   273a6:	2200      	movs	r2, #0
   273a8:	4603      	mov	r3, r0
   273aa:	3001      	adds	r0, #1
   273ac:	4281      	cmp	r1, r0
   273ae:	701a      	strb	r2, [r3, #0]
   273b0:	d1fa      	bne.n	273a8 <mbedtls_zeroize_internal+0x8>
   273b2:	4770      	bx	lr

000273b4 <mbedtls_platform_zeroize>:
   273b4:	b138      	cbz	r0, 273c6 <mbedtls_platform_zeroize+0x12>
   273b6:	b131      	cbz	r1, 273c6 <mbedtls_platform_zeroize+0x12>
   273b8:	4401      	add	r1, r0
   273ba:	2200      	movs	r2, #0
   273bc:	4603      	mov	r3, r0
   273be:	3001      	adds	r0, #1
   273c0:	4288      	cmp	r0, r1
   273c2:	701a      	strb	r2, [r3, #0]
   273c4:	d1fa      	bne.n	273bc <mbedtls_platform_zeroize+0x8>
   273c6:	4770      	bx	lr

000273c8 <block_cipher_df>:
   273c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273cc:	b0b7      	sub	sp, #220	; 0xdc
   273ce:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   273d2:	9005      	str	r0, [sp, #20]
   273d4:	f200 8147 	bhi.w	27666 <block_cipher_df+0x29e>
   273d8:	4614      	mov	r4, r2
   273da:	460d      	mov	r5, r1
   273dc:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   273e0:	2100      	movs	r1, #0
   273e2:	48a2      	ldr	r0, [pc, #648]	; (2766c <block_cipher_df+0x2a4>)
   273e4:	f003 fe12 	bl	2b00c <memset>
   273e8:	a819      	add	r0, sp, #100	; 0x64
   273ea:	f001 f9cf 	bl	2878c <cc_mbedtls_aes_init>
   273ee:	489f      	ldr	r0, [pc, #636]	; (2766c <block_cipher_df+0x2a4>)
   273f0:	2300      	movs	r3, #0
   273f2:	8203      	strh	r3, [r0, #16]
   273f4:	ba63      	rev16	r3, r4
   273f6:	8243      	strh	r3, [r0, #18]
   273f8:	2320      	movs	r3, #32
   273fa:	4629      	mov	r1, r5
   273fc:	75c3      	strb	r3, [r0, #23]
   273fe:	4605      	mov	r5, r0
   27400:	4622      	mov	r2, r4
   27402:	3018      	adds	r0, #24
   27404:	f003 fdf7 	bl	2aff6 <memcpy>
   27408:	462b      	mov	r3, r5
   2740a:	4423      	add	r3, r4
   2740c:	2280      	movs	r2, #128	; 0x80
   2740e:	761a      	strb	r2, [r3, #24]
   27410:	4b97      	ldr	r3, [pc, #604]	; (27670 <block_cipher_df+0x2a8>)
   27412:	930d      	str	r3, [sp, #52]	; 0x34
   27414:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27418:	930e      	str	r3, [sp, #56]	; 0x38
   2741a:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   2741e:	930f      	str	r3, [sp, #60]	; 0x3c
   27420:	a90d      	add	r1, sp, #52	; 0x34
   27422:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   27426:	a819      	add	r0, sp, #100	; 0x64
   27428:	9310      	str	r3, [sp, #64]	; 0x40
   2742a:	f001 f9c5 	bl	287b8 <cc_mbedtls_aes_setkey_enc>
   2742e:	4605      	mov	r5, r0
   27430:	2800      	cmp	r0, #0
   27432:	f040 80f4 	bne.w	2761e <block_cipher_df+0x256>
   27436:	f104 0319 	add.w	r3, r4, #25
   2743a:	9306      	str	r3, [sp, #24]
   2743c:	f10d 0820 	add.w	r8, sp, #32
   27440:	ab11      	add	r3, sp, #68	; 0x44
   27442:	9304      	str	r3, [sp, #16]
   27444:	9307      	str	r3, [sp, #28]
   27446:	46c1      	mov	r9, r8
   27448:	2210      	movs	r2, #16
   2744a:	2100      	movs	r1, #0
   2744c:	4648      	mov	r0, r9
   2744e:	f003 fddd 	bl	2b00c <memset>
   27452:	f8df a220 	ldr.w	sl, [pc, #544]	; 27674 <block_cipher_df+0x2ac>
   27456:	9b06      	ldr	r3, [sp, #24]
   27458:	9300      	str	r3, [sp, #0]
   2745a:	f8cd 900c 	str.w	r9, [sp, #12]
   2745e:	f81a 0c08 	ldrb.w	r0, [sl, #-8]
   27462:	f81a 3c07 	ldrb.w	r3, [sl, #-7]
   27466:	f81a 2c10 	ldrb.w	r2, [sl, #-16]
   2746a:	f89d 5020 	ldrb.w	r5, [sp, #32]
   2746e:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
   27472:	f89d c029 	ldrb.w	ip, [sp, #41]	; 0x29
   27476:	f81a 6c04 	ldrb.w	r6, [sl, #-4]
   2747a:	f81a 1c0c 	ldrb.w	r1, [sl, #-12]
   2747e:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   27482:	f89d b02c 	ldrb.w	fp, [sp, #44]	; 0x2c
   27486:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
   2748a:	406a      	eors	r2, r5
   2748c:	ea8e 0e00 	eor.w	lr, lr, r0
   27490:	9d00      	ldr	r5, [sp, #0]
   27492:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   27496:	9202      	str	r2, [sp, #8]
   27498:	ea8c 0c03 	eor.w	ip, ip, r3
   2749c:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
   274a0:	f81a 2c0f 	ldrb.w	r2, [sl, #-15]
   274a4:	2d10      	cmp	r5, #16
   274a6:	ea80 0003 	eor.w	r0, r0, r3
   274aa:	462b      	mov	r3, r5
   274ac:	bf8c      	ite	hi
   274ae:	3b10      	subhi	r3, #16
   274b0:	1b6b      	subls	r3, r5, r5
   274b2:	9300      	str	r3, [sp, #0]
   274b4:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
   274b8:	f81a 3c03 	ldrb.w	r3, [sl, #-3]
   274bc:	f81a 9c0e 	ldrb.w	r9, [sl, #-14]
   274c0:	f81a 8c0a 	ldrb.w	r8, [sl, #-10]
   274c4:	4061      	eors	r1, r4
   274c6:	405f      	eors	r7, r3
   274c8:	2400      	movs	r4, #0
   274ca:	406a      	eors	r2, r5
   274cc:	ea8b 0b06 	eor.w	fp, fp, r6
   274d0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
   274d4:	f81a 6c02 	ldrb.w	r6, [sl, #-2]
   274d8:	f81a 3c0b 	ldrb.w	r3, [sl, #-11]
   274dc:	9601      	str	r6, [sp, #4]
   274de:	4626      	mov	r6, r4
   274e0:	406b      	eors	r3, r5
   274e2:	f36b 0607 	bfi	r6, fp, #0, #8
   274e6:	4625      	mov	r5, r4
   274e8:	f367 260f 	bfi	r6, r7, #8, #8
   274ec:	462f      	mov	r7, r5
   274ee:	f361 0707 	bfi	r7, r1, #0, #8
   274f2:	9902      	ldr	r1, [sp, #8]
   274f4:	f361 0507 	bfi	r5, r1, #0, #8
   274f8:	f362 250f 	bfi	r5, r2, #8, #8
   274fc:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   27500:	f81a 1c0d 	ldrb.w	r1, [sl, #-13]
   27504:	f363 270f 	bfi	r7, r3, #8, #8
   27508:	ea82 0909 	eor.w	r9, r2, r9
   2750c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   27510:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   27514:	ea83 0808 	eor.w	r8, r3, r8
   27518:	404a      	eors	r2, r1
   2751a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   2751e:	f81a 1c09 	ldrb.w	r1, [sl, #-9]
   27522:	f36e 0407 	bfi	r4, lr, #0, #8
   27526:	404b      	eors	r3, r1
   27528:	f368 4717 	bfi	r7, r8, #16, #8
   2752c:	f36c 240f 	bfi	r4, ip, #8, #8
   27530:	f363 671f 	bfi	r7, r3, #24, #8
   27534:	9b03      	ldr	r3, [sp, #12]
   27536:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
   2753a:	f8dd e004 	ldr.w	lr, [sp, #4]
   2753e:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
   27542:	ea8c 0c0e 	eor.w	ip, ip, lr
   27546:	f36c 4617 	bfi	r6, ip, #16, #8
   2754a:	f89d c02f 	ldrb.w	ip, [sp, #47]	; 0x2f
   2754e:	f81a ec05 	ldrb.w	lr, [sl, #-5]
   27552:	ea8c 0c08 	eor.w	ip, ip, r8
   27556:	f36c 661f 	bfi	r6, ip, #24, #8
   2755a:	f369 4517 	bfi	r5, r9, #16, #8
   2755e:	f89d c02b 	ldrb.w	ip, [sp, #43]	; 0x2b
   27562:	960b      	str	r6, [sp, #44]	; 0x2c
   27564:	f362 651f 	bfi	r5, r2, #24, #8
   27568:	f360 4417 	bfi	r4, r0, #16, #8
   2756c:	9508      	str	r5, [sp, #32]
   2756e:	ea8c 050e 	eor.w	r5, ip, lr
   27572:	f365 641f 	bfi	r4, r5, #24, #8
   27576:	461a      	mov	r2, r3
   27578:	2101      	movs	r1, #1
   2757a:	a819      	add	r0, sp, #100	; 0x64
   2757c:	f10a 0a10 	add.w	sl, sl, #16
   27580:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
   27584:	f001 f932 	bl	287ec <cc_mbedtls_aes_crypt_ecb>
   27588:	2800      	cmp	r0, #0
   2758a:	d168      	bne.n	2765e <block_cipher_df+0x296>
   2758c:	9b00      	ldr	r3, [sp, #0]
   2758e:	2b00      	cmp	r3, #0
   27590:	f47f af65 	bne.w	2745e <block_cipher_df+0x96>
   27594:	9c07      	ldr	r4, [sp, #28]
   27596:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2759a:	4620      	mov	r0, r4
   2759c:	2210      	movs	r2, #16
   2759e:	3410      	adds	r4, #16
   275a0:	4649      	mov	r1, r9
   275a2:	9407      	str	r4, [sp, #28]
   275a4:	f003 fd27 	bl	2aff6 <memcpy>
   275a8:	4a30      	ldr	r2, [pc, #192]	; (2766c <block_cipher_df+0x2a4>)
   275aa:	78d3      	ldrb	r3, [r2, #3]
   275ac:	3301      	adds	r3, #1
   275ae:	70d3      	strb	r3, [r2, #3]
   275b0:	ab19      	add	r3, sp, #100	; 0x64
   275b2:	429c      	cmp	r4, r3
   275b4:	f47f af48 	bne.w	27448 <block_cipher_df+0x80>
   275b8:	9904      	ldr	r1, [sp, #16]
   275ba:	2280      	movs	r2, #128	; 0x80
   275bc:	4618      	mov	r0, r3
   275be:	f001 f8fb 	bl	287b8 <cc_mbedtls_aes_setkey_enc>
   275c2:	46c8      	mov	r8, r9
   275c4:	4605      	mov	r5, r0
   275c6:	bb70      	cbnz	r0, 27626 <block_cipher_df+0x25e>
   275c8:	9c05      	ldr	r4, [sp, #20]
   275ca:	f104 0620 	add.w	r6, r4, #32
   275ce:	ab15      	add	r3, sp, #84	; 0x54
   275d0:	461a      	mov	r2, r3
   275d2:	2101      	movs	r1, #1
   275d4:	a819      	add	r0, sp, #100	; 0x64
   275d6:	f001 f909 	bl	287ec <cc_mbedtls_aes_crypt_ecb>
   275da:	2210      	movs	r2, #16
   275dc:	4605      	mov	r5, r0
   275de:	bb10      	cbnz	r0, 27626 <block_cipher_df+0x25e>
   275e0:	4620      	mov	r0, r4
   275e2:	a915      	add	r1, sp, #84	; 0x54
   275e4:	3410      	adds	r4, #16
   275e6:	f003 fd06 	bl	2aff6 <memcpy>
   275ea:	42b4      	cmp	r4, r6
   275ec:	d1ef      	bne.n	275ce <block_cipher_df+0x206>
   275ee:	a819      	add	r0, sp, #100	; 0x64
   275f0:	f001 f8dc 	bl	287ac <cc_mbedtls_aes_free>
   275f4:	481d      	ldr	r0, [pc, #116]	; (2766c <block_cipher_df+0x2a4>)
   275f6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   275fa:	f7ff fedb 	bl	273b4 <mbedtls_platform_zeroize>
   275fe:	9804      	ldr	r0, [sp, #16]
   27600:	2120      	movs	r1, #32
   27602:	f7ff fed7 	bl	273b4 <mbedtls_platform_zeroize>
   27606:	a80d      	add	r0, sp, #52	; 0x34
   27608:	2110      	movs	r1, #16
   2760a:	f7ff fed3 	bl	273b4 <mbedtls_platform_zeroize>
   2760e:	4640      	mov	r0, r8
   27610:	2110      	movs	r1, #16
   27612:	f7ff fecf 	bl	273b4 <mbedtls_platform_zeroize>
   27616:	4628      	mov	r0, r5
   27618:	b037      	add	sp, #220	; 0xdc
   2761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2761e:	ab11      	add	r3, sp, #68	; 0x44
   27620:	9304      	str	r3, [sp, #16]
   27622:	f10d 0820 	add.w	r8, sp, #32
   27626:	a819      	add	r0, sp, #100	; 0x64
   27628:	f001 f8c0 	bl	287ac <cc_mbedtls_aes_free>
   2762c:	480f      	ldr	r0, [pc, #60]	; (2766c <block_cipher_df+0x2a4>)
   2762e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   27632:	f7ff febf 	bl	273b4 <mbedtls_platform_zeroize>
   27636:	9804      	ldr	r0, [sp, #16]
   27638:	2120      	movs	r1, #32
   2763a:	f7ff febb 	bl	273b4 <mbedtls_platform_zeroize>
   2763e:	a80d      	add	r0, sp, #52	; 0x34
   27640:	2110      	movs	r1, #16
   27642:	f7ff feb7 	bl	273b4 <mbedtls_platform_zeroize>
   27646:	4640      	mov	r0, r8
   27648:	2110      	movs	r1, #16
   2764a:	f7ff feb3 	bl	273b4 <mbedtls_platform_zeroize>
   2764e:	9805      	ldr	r0, [sp, #20]
   27650:	2120      	movs	r1, #32
   27652:	f7ff feaf 	bl	273b4 <mbedtls_platform_zeroize>
   27656:	4628      	mov	r0, r5
   27658:	b037      	add	sp, #220	; 0xdc
   2765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2765e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   27662:	4605      	mov	r5, r0
   27664:	e7df      	b.n	27626 <block_cipher_df+0x25e>
   27666:	f06f 0537 	mvn.w	r5, #55	; 0x37
   2766a:	e7f4      	b.n	27656 <block_cipher_df+0x28e>
   2766c:	2000384c 	.word	0x2000384c
   27670:	03020100 	.word	0x03020100
   27674:	2000385c 	.word	0x2000385c

00027678 <ctr_drbg_update_internal>:
   27678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2767c:	b088      	sub	sp, #32
   2767e:	4604      	mov	r4, r0
   27680:	460d      	mov	r5, r1
   27682:	2220      	movs	r2, #32
   27684:	2100      	movs	r1, #0
   27686:	4668      	mov	r0, sp
   27688:	f003 fcc0 	bl	2b00c <memset>
   2768c:	f104 0620 	add.w	r6, r4, #32
   27690:	466f      	mov	r7, sp
   27692:	7be2      	ldrb	r2, [r4, #15]
   27694:	3201      	adds	r2, #1
   27696:	b2d2      	uxtb	r2, r2
   27698:	73e2      	strb	r2, [r4, #15]
   2769a:	2a00      	cmp	r2, #0
   2769c:	d14d      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   2769e:	7ba2      	ldrb	r2, [r4, #14]
   276a0:	3201      	adds	r2, #1
   276a2:	b2d2      	uxtb	r2, r2
   276a4:	73a2      	strb	r2, [r4, #14]
   276a6:	2a00      	cmp	r2, #0
   276a8:	d147      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   276aa:	7b63      	ldrb	r3, [r4, #13]
   276ac:	3301      	adds	r3, #1
   276ae:	b2db      	uxtb	r3, r3
   276b0:	7363      	strb	r3, [r4, #13]
   276b2:	2b00      	cmp	r3, #0
   276b4:	d141      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   276b6:	7b23      	ldrb	r3, [r4, #12]
   276b8:	3301      	adds	r3, #1
   276ba:	b2db      	uxtb	r3, r3
   276bc:	7323      	strb	r3, [r4, #12]
   276be:	2b00      	cmp	r3, #0
   276c0:	d13b      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   276c2:	7ae3      	ldrb	r3, [r4, #11]
   276c4:	3301      	adds	r3, #1
   276c6:	b2db      	uxtb	r3, r3
   276c8:	72e3      	strb	r3, [r4, #11]
   276ca:	2b00      	cmp	r3, #0
   276cc:	d135      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   276ce:	7aa3      	ldrb	r3, [r4, #10]
   276d0:	3301      	adds	r3, #1
   276d2:	b2db      	uxtb	r3, r3
   276d4:	72a3      	strb	r3, [r4, #10]
   276d6:	2b00      	cmp	r3, #0
   276d8:	d12f      	bne.n	2773a <ctr_drbg_update_internal+0xc2>
   276da:	7a63      	ldrb	r3, [r4, #9]
   276dc:	3301      	adds	r3, #1
   276de:	b2db      	uxtb	r3, r3
   276e0:	7263      	strb	r3, [r4, #9]
   276e2:	bb53      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   276e4:	7a23      	ldrb	r3, [r4, #8]
   276e6:	3301      	adds	r3, #1
   276e8:	b2db      	uxtb	r3, r3
   276ea:	7223      	strb	r3, [r4, #8]
   276ec:	bb2b      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   276ee:	79e3      	ldrb	r3, [r4, #7]
   276f0:	3301      	adds	r3, #1
   276f2:	b2db      	uxtb	r3, r3
   276f4:	71e3      	strb	r3, [r4, #7]
   276f6:	bb03      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   276f8:	79a3      	ldrb	r3, [r4, #6]
   276fa:	3301      	adds	r3, #1
   276fc:	b2db      	uxtb	r3, r3
   276fe:	71a3      	strb	r3, [r4, #6]
   27700:	b9db      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   27702:	7963      	ldrb	r3, [r4, #5]
   27704:	3301      	adds	r3, #1
   27706:	b2db      	uxtb	r3, r3
   27708:	7163      	strb	r3, [r4, #5]
   2770a:	b9b3      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   2770c:	7923      	ldrb	r3, [r4, #4]
   2770e:	3301      	adds	r3, #1
   27710:	b2db      	uxtb	r3, r3
   27712:	7123      	strb	r3, [r4, #4]
   27714:	b98b      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   27716:	78e3      	ldrb	r3, [r4, #3]
   27718:	3301      	adds	r3, #1
   2771a:	b2db      	uxtb	r3, r3
   2771c:	70e3      	strb	r3, [r4, #3]
   2771e:	b963      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   27720:	78a3      	ldrb	r3, [r4, #2]
   27722:	3301      	adds	r3, #1
   27724:	b2db      	uxtb	r3, r3
   27726:	70a3      	strb	r3, [r4, #2]
   27728:	b93b      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   2772a:	7863      	ldrb	r3, [r4, #1]
   2772c:	3301      	adds	r3, #1
   2772e:	b2db      	uxtb	r3, r3
   27730:	7063      	strb	r3, [r4, #1]
   27732:	b913      	cbnz	r3, 2773a <ctr_drbg_update_internal+0xc2>
   27734:	7823      	ldrb	r3, [r4, #0]
   27736:	3301      	adds	r3, #1
   27738:	7023      	strb	r3, [r4, #0]
   2773a:	463b      	mov	r3, r7
   2773c:	4622      	mov	r2, r4
   2773e:	2101      	movs	r1, #1
   27740:	4630      	mov	r0, r6
   27742:	f001 f853 	bl	287ec <cc_mbedtls_aes_crypt_ecb>
   27746:	4680      	mov	r8, r0
   27748:	bb50      	cbnz	r0, 277a0 <ctr_drbg_update_internal+0x128>
   2774a:	3710      	adds	r7, #16
   2774c:	ab08      	add	r3, sp, #32
   2774e:	429f      	cmp	r7, r3
   27750:	d19f      	bne.n	27692 <ctr_drbg_update_internal+0x1a>
   27752:	9a00      	ldr	r2, [sp, #0]
   27754:	682b      	ldr	r3, [r5, #0]
   27756:	9906      	ldr	r1, [sp, #24]
   27758:	4053      	eors	r3, r2
   2775a:	9300      	str	r3, [sp, #0]
   2775c:	9a01      	ldr	r2, [sp, #4]
   2775e:	686b      	ldr	r3, [r5, #4]
   27760:	4053      	eors	r3, r2
   27762:	9301      	str	r3, [sp, #4]
   27764:	9a02      	ldr	r2, [sp, #8]
   27766:	68ab      	ldr	r3, [r5, #8]
   27768:	4053      	eors	r3, r2
   2776a:	9302      	str	r3, [sp, #8]
   2776c:	9a03      	ldr	r2, [sp, #12]
   2776e:	68eb      	ldr	r3, [r5, #12]
   27770:	4053      	eors	r3, r2
   27772:	9303      	str	r3, [sp, #12]
   27774:	9a04      	ldr	r2, [sp, #16]
   27776:	692b      	ldr	r3, [r5, #16]
   27778:	4053      	eors	r3, r2
   2777a:	9304      	str	r3, [sp, #16]
   2777c:	9a05      	ldr	r2, [sp, #20]
   2777e:	696b      	ldr	r3, [r5, #20]
   27780:	4053      	eors	r3, r2
   27782:	69aa      	ldr	r2, [r5, #24]
   27784:	9305      	str	r3, [sp, #20]
   27786:	404a      	eors	r2, r1
   27788:	69eb      	ldr	r3, [r5, #28]
   2778a:	9206      	str	r2, [sp, #24]
   2778c:	9a07      	ldr	r2, [sp, #28]
   2778e:	4630      	mov	r0, r6
   27790:	4053      	eors	r3, r2
   27792:	4669      	mov	r1, sp
   27794:	2280      	movs	r2, #128	; 0x80
   27796:	9307      	str	r3, [sp, #28]
   27798:	f001 f80e 	bl	287b8 <cc_mbedtls_aes_setkey_enc>
   2779c:	4680      	mov	r8, r0
   2779e:	b138      	cbz	r0, 277b0 <ctr_drbg_update_internal+0x138>
   277a0:	4668      	mov	r0, sp
   277a2:	2120      	movs	r1, #32
   277a4:	f7ff fe06 	bl	273b4 <mbedtls_platform_zeroize>
   277a8:	4640      	mov	r0, r8
   277aa:	b008      	add	sp, #32
   277ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   277b0:	2210      	movs	r2, #16
   277b2:	eb0d 0102 	add.w	r1, sp, r2
   277b6:	4620      	mov	r0, r4
   277b8:	f003 fc1d 	bl	2aff6 <memcpy>
   277bc:	e7f0      	b.n	277a0 <ctr_drbg_update_internal+0x128>
   277be:	bf00      	nop

000277c0 <mbedtls_ctr_drbg_reseed_internal>:
   277c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   277c4:	4604      	mov	r4, r0
   277c6:	6980      	ldr	r0, [r0, #24]
   277c8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   277cc:	d852      	bhi.n	27874 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   277ce:	461d      	mov	r5, r3
   277d0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   277d4:	42ab      	cmp	r3, r5
   277d6:	d34d      	bcc.n	27874 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   277d8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   277dc:	1a18      	subs	r0, r3, r0
   277de:	4290      	cmp	r0, r2
   277e0:	4616      	mov	r6, r2
   277e2:	d347      	bcc.n	27874 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   277e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 27880 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   277e8:	f44f 72c0 	mov.w	r2, #384	; 0x180
   277ec:	460f      	mov	r7, r1
   277ee:	4648      	mov	r0, r9
   277f0:	2100      	movs	r1, #0
   277f2:	f003 fc0b 	bl	2b00c <memset>
   277f6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   277fa:	69a2      	ldr	r2, [r4, #24]
   277fc:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   27800:	4649      	mov	r1, r9
   27802:	4798      	blx	r3
   27804:	2800      	cmp	r0, #0
   27806:	d138      	bne.n	2787a <mbedtls_ctr_drbg_reseed_internal+0xba>
   27808:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2780c:	b13d      	cbz	r5, 2781e <mbedtls_ctr_drbg_reseed_internal+0x5e>
   2780e:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   27812:	462a      	mov	r2, r5
   27814:	eb09 0108 	add.w	r1, r9, r8
   27818:	4798      	blx	r3
   2781a:	bb70      	cbnz	r0, 2787a <mbedtls_ctr_drbg_reseed_internal+0xba>
   2781c:	44a8      	add	r8, r5
   2781e:	b107      	cbz	r7, 27822 <mbedtls_ctr_drbg_reseed_internal+0x62>
   27820:	b9c6      	cbnz	r6, 27854 <mbedtls_ctr_drbg_reseed_internal+0x94>
   27822:	4917      	ldr	r1, [pc, #92]	; (27880 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   27824:	4642      	mov	r2, r8
   27826:	4608      	mov	r0, r1
   27828:	f7ff fdce 	bl	273c8 <block_cipher_df>
   2782c:	4605      	mov	r5, r0
   2782e:	b138      	cbz	r0, 27840 <mbedtls_ctr_drbg_reseed_internal+0x80>
   27830:	4813      	ldr	r0, [pc, #76]	; (27880 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   27832:	f44f 71c0 	mov.w	r1, #384	; 0x180
   27836:	f7ff fdbd 	bl	273b4 <mbedtls_platform_zeroize>
   2783a:	4628      	mov	r0, r5
   2783c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   27840:	490f      	ldr	r1, [pc, #60]	; (27880 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   27842:	4620      	mov	r0, r4
   27844:	f7ff ff18 	bl	27678 <ctr_drbg_update_internal>
   27848:	4605      	mov	r5, r0
   2784a:	2800      	cmp	r0, #0
   2784c:	d1f0      	bne.n	27830 <mbedtls_ctr_drbg_reseed_internal+0x70>
   2784e:	2301      	movs	r3, #1
   27850:	6123      	str	r3, [r4, #16]
   27852:	e7ed      	b.n	27830 <mbedtls_ctr_drbg_reseed_internal+0x70>
   27854:	eb09 0008 	add.w	r0, r9, r8
   27858:	4639      	mov	r1, r7
   2785a:	4632      	mov	r2, r6
   2785c:	f003 fbcb 	bl	2aff6 <memcpy>
   27860:	4907      	ldr	r1, [pc, #28]	; (27880 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   27862:	44b0      	add	r8, r6
   27864:	4642      	mov	r2, r8
   27866:	4608      	mov	r0, r1
   27868:	f7ff fdae 	bl	273c8 <block_cipher_df>
   2786c:	4605      	mov	r5, r0
   2786e:	2800      	cmp	r0, #0
   27870:	d1de      	bne.n	27830 <mbedtls_ctr_drbg_reseed_internal+0x70>
   27872:	e7e5      	b.n	27840 <mbedtls_ctr_drbg_reseed_internal+0x80>
   27874:	f06f 0537 	mvn.w	r5, #55	; 0x37
   27878:	e7df      	b.n	2783a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   2787a:	f06f 0533 	mvn.w	r5, #51	; 0x33
   2787e:	e7dc      	b.n	2783a <mbedtls_ctr_drbg_reseed_internal+0x7a>
   27880:	200039ec 	.word	0x200039ec

00027884 <cc_mbedtls_ctr_drbg_init>:
   27884:	b510      	push	{r4, lr}
   27886:	22a4      	movs	r2, #164	; 0xa4
   27888:	4604      	mov	r4, r0
   2788a:	2100      	movs	r1, #0
   2788c:	f003 fbbe 	bl	2b00c <memset>
   27890:	4b06      	ldr	r3, [pc, #24]	; (278ac <cc_mbedtls_ctr_drbg_init+0x28>)
   27892:	f04f 31ff 	mov.w	r1, #4294967295
   27896:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   2789a:	6121      	str	r1, [r4, #16]
   2789c:	61e2      	str	r2, [r4, #28]
   2789e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   278a2:	681b      	ldr	r3, [r3, #0]
   278a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   278a8:	4718      	bx	r3
   278aa:	bf00      	nop
   278ac:	20000820 	.word	0x20000820

000278b0 <cc_mbedtls_ctr_drbg_seed>:
   278b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   278b4:	b085      	sub	sp, #20
   278b6:	4605      	mov	r5, r0
   278b8:	460f      	mov	r7, r1
   278ba:	4616      	mov	r6, r2
   278bc:	2100      	movs	r1, #0
   278be:	2210      	movs	r2, #16
   278c0:	4668      	mov	r0, sp
   278c2:	4699      	mov	r9, r3
   278c4:	f003 fba2 	bl	2b00c <memset>
   278c8:	4b1e      	ldr	r3, [pc, #120]	; (27944 <cc_mbedtls_ctr_drbg_seed+0x94>)
   278ca:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   278ce:	681b      	ldr	r3, [r3, #0]
   278d0:	4640      	mov	r0, r8
   278d2:	4798      	blx	r3
   278d4:	b120      	cbz	r0, 278e0 <cc_mbedtls_ctr_drbg_seed+0x30>
   278d6:	4604      	mov	r4, r0
   278d8:	4620      	mov	r0, r4
   278da:	b005      	add	sp, #20
   278dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   278e0:	f105 0420 	add.w	r4, r5, #32
   278e4:	4620      	mov	r0, r4
   278e6:	f000 ff51 	bl	2878c <cc_mbedtls_aes_init>
   278ea:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   278ee:	69ae      	ldr	r6, [r5, #24]
   278f0:	692b      	ldr	r3, [r5, #16]
   278f2:	b9ee      	cbnz	r6, 27930 <cc_mbedtls_ctr_drbg_seed+0x80>
   278f4:	2220      	movs	r2, #32
   278f6:	2b00      	cmp	r3, #0
   278f8:	61aa      	str	r2, [r5, #24]
   278fa:	db20      	blt.n	2793e <cc_mbedtls_ctr_drbg_seed+0x8e>
   278fc:	461e      	mov	r6, r3
   278fe:	4620      	mov	r0, r4
   27900:	4669      	mov	r1, sp
   27902:	2280      	movs	r2, #128	; 0x80
   27904:	f000 ff58 	bl	287b8 <cc_mbedtls_aes_setkey_enc>
   27908:	4604      	mov	r4, r0
   2790a:	b930      	cbnz	r0, 2791a <cc_mbedtls_ctr_drbg_seed+0x6a>
   2790c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2790e:	4633      	mov	r3, r6
   27910:	4649      	mov	r1, r9
   27912:	4628      	mov	r0, r5
   27914:	f7ff ff54 	bl	277c0 <mbedtls_ctr_drbg_reseed_internal>
   27918:	4604      	mov	r4, r0
   2791a:	4b0b      	ldr	r3, [pc, #44]	; (27948 <cc_mbedtls_ctr_drbg_seed+0x98>)
   2791c:	4640      	mov	r0, r8
   2791e:	681b      	ldr	r3, [r3, #0]
   27920:	4798      	blx	r3
   27922:	2800      	cmp	r0, #0
   27924:	bf18      	it	ne
   27926:	4604      	movne	r4, r0
   27928:	4620      	mov	r0, r4
   2792a:	b005      	add	sp, #20
   2792c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27930:	2b00      	cmp	r3, #0
   27932:	dae3      	bge.n	278fc <cc_mbedtls_ctr_drbg_seed+0x4c>
   27934:	2e17      	cmp	r6, #23
   27936:	d802      	bhi.n	2793e <cc_mbedtls_ctr_drbg_seed+0x8e>
   27938:	3601      	adds	r6, #1
   2793a:	0876      	lsrs	r6, r6, #1
   2793c:	e7df      	b.n	278fe <cc_mbedtls_ctr_drbg_seed+0x4e>
   2793e:	2600      	movs	r6, #0
   27940:	e7dd      	b.n	278fe <cc_mbedtls_ctr_drbg_seed+0x4e>
   27942:	bf00      	nop
   27944:	20000824 	.word	0x20000824
   27948:	20000828 	.word	0x20000828

0002794c <cc_mbedtls_ctr_drbg_random_with_add>:
   2794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27950:	b08d      	sub	sp, #52	; 0x34
   27952:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   27956:	9f16      	ldr	r7, [sp, #88]	; 0x58
   27958:	f200 80e3 	bhi.w	27b22 <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   2795c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   27960:	f200 80dc 	bhi.w	27b1c <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   27964:	4604      	mov	r4, r0
   27966:	4615      	mov	r5, r2
   27968:	460e      	mov	r6, r1
   2796a:	2220      	movs	r2, #32
   2796c:	2100      	movs	r1, #0
   2796e:	a804      	add	r0, sp, #16
   27970:	4698      	mov	r8, r3
   27972:	f003 fb4b 	bl	2b00c <memset>
   27976:	4b6c      	ldr	r3, [pc, #432]	; (27b28 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   27978:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   2797c:	681b      	ldr	r3, [r3, #0]
   2797e:	4648      	mov	r0, r9
   27980:	4798      	blx	r3
   27982:	4683      	mov	fp, r0
   27984:	2800      	cmp	r0, #0
   27986:	f040 8092 	bne.w	27aae <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   2798a:	6922      	ldr	r2, [r4, #16]
   2798c:	69e3      	ldr	r3, [r4, #28]
   2798e:	429a      	cmp	r2, r3
   27990:	f300 8091 	bgt.w	27ab6 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   27994:	6963      	ldr	r3, [r4, #20]
   27996:	2b00      	cmp	r3, #0
   27998:	f040 808d 	bne.w	27ab6 <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   2799c:	2f00      	cmp	r7, #0
   2799e:	f040 80a9 	bne.w	27af4 <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   279a2:	f8df a188 	ldr.w	sl, [pc, #392]	; 27b2c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   279a6:	466f      	mov	r7, sp
   279a8:	2d00      	cmp	r5, #0
   279aa:	f000 8098 	beq.w	27ade <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   279ae:	f104 0820 	add.w	r8, r4, #32
   279b2:	466f      	mov	r7, sp
   279b4:	e00e      	b.n	279d4 <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   279b6:	2d10      	cmp	r5, #16
   279b8:	46ab      	mov	fp, r5
   279ba:	bf28      	it	cs
   279bc:	f04f 0b10 	movcs.w	fp, #16
   279c0:	4630      	mov	r0, r6
   279c2:	465a      	mov	r2, fp
   279c4:	4639      	mov	r1, r7
   279c6:	f003 fb16 	bl	2aff6 <memcpy>
   279ca:	ebb5 050b 	subs.w	r5, r5, fp
   279ce:	445e      	add	r6, fp
   279d0:	f000 8085 	beq.w	27ade <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   279d4:	7be3      	ldrb	r3, [r4, #15]
   279d6:	3301      	adds	r3, #1
   279d8:	b2db      	uxtb	r3, r3
   279da:	73e3      	strb	r3, [r4, #15]
   279dc:	2b00      	cmp	r3, #0
   279de:	d14d      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   279e0:	7ba3      	ldrb	r3, [r4, #14]
   279e2:	3301      	adds	r3, #1
   279e4:	b2db      	uxtb	r3, r3
   279e6:	73a3      	strb	r3, [r4, #14]
   279e8:	2b00      	cmp	r3, #0
   279ea:	d147      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   279ec:	7b63      	ldrb	r3, [r4, #13]
   279ee:	3301      	adds	r3, #1
   279f0:	b2db      	uxtb	r3, r3
   279f2:	7363      	strb	r3, [r4, #13]
   279f4:	2b00      	cmp	r3, #0
   279f6:	d141      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   279f8:	7b23      	ldrb	r3, [r4, #12]
   279fa:	3301      	adds	r3, #1
   279fc:	b2db      	uxtb	r3, r3
   279fe:	7323      	strb	r3, [r4, #12]
   27a00:	2b00      	cmp	r3, #0
   27a02:	d13b      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a04:	7ae3      	ldrb	r3, [r4, #11]
   27a06:	3301      	adds	r3, #1
   27a08:	b2db      	uxtb	r3, r3
   27a0a:	72e3      	strb	r3, [r4, #11]
   27a0c:	2b00      	cmp	r3, #0
   27a0e:	d135      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a10:	7aa3      	ldrb	r3, [r4, #10]
   27a12:	3301      	adds	r3, #1
   27a14:	b2db      	uxtb	r3, r3
   27a16:	72a3      	strb	r3, [r4, #10]
   27a18:	2b00      	cmp	r3, #0
   27a1a:	d12f      	bne.n	27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a1c:	7a63      	ldrb	r3, [r4, #9]
   27a1e:	3301      	adds	r3, #1
   27a20:	b2db      	uxtb	r3, r3
   27a22:	7263      	strb	r3, [r4, #9]
   27a24:	bb53      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a26:	7a23      	ldrb	r3, [r4, #8]
   27a28:	3301      	adds	r3, #1
   27a2a:	b2db      	uxtb	r3, r3
   27a2c:	7223      	strb	r3, [r4, #8]
   27a2e:	bb2b      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a30:	79e3      	ldrb	r3, [r4, #7]
   27a32:	3301      	adds	r3, #1
   27a34:	b2db      	uxtb	r3, r3
   27a36:	71e3      	strb	r3, [r4, #7]
   27a38:	bb03      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a3a:	79a3      	ldrb	r3, [r4, #6]
   27a3c:	3301      	adds	r3, #1
   27a3e:	b2db      	uxtb	r3, r3
   27a40:	71a3      	strb	r3, [r4, #6]
   27a42:	b9db      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a44:	7963      	ldrb	r3, [r4, #5]
   27a46:	3301      	adds	r3, #1
   27a48:	b2db      	uxtb	r3, r3
   27a4a:	7163      	strb	r3, [r4, #5]
   27a4c:	b9b3      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a4e:	7923      	ldrb	r3, [r4, #4]
   27a50:	3301      	adds	r3, #1
   27a52:	b2db      	uxtb	r3, r3
   27a54:	7123      	strb	r3, [r4, #4]
   27a56:	b98b      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a58:	78e3      	ldrb	r3, [r4, #3]
   27a5a:	3301      	adds	r3, #1
   27a5c:	b2db      	uxtb	r3, r3
   27a5e:	70e3      	strb	r3, [r4, #3]
   27a60:	b963      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a62:	78a3      	ldrb	r3, [r4, #2]
   27a64:	3301      	adds	r3, #1
   27a66:	b2db      	uxtb	r3, r3
   27a68:	70a3      	strb	r3, [r4, #2]
   27a6a:	b93b      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a6c:	7863      	ldrb	r3, [r4, #1]
   27a6e:	3301      	adds	r3, #1
   27a70:	b2db      	uxtb	r3, r3
   27a72:	7063      	strb	r3, [r4, #1]
   27a74:	b913      	cbnz	r3, 27a7c <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   27a76:	7823      	ldrb	r3, [r4, #0]
   27a78:	3301      	adds	r3, #1
   27a7a:	7023      	strb	r3, [r4, #0]
   27a7c:	463b      	mov	r3, r7
   27a7e:	4622      	mov	r2, r4
   27a80:	2101      	movs	r1, #1
   27a82:	4640      	mov	r0, r8
   27a84:	f000 feb2 	bl	287ec <cc_mbedtls_aes_crypt_ecb>
   27a88:	4683      	mov	fp, r0
   27a8a:	2800      	cmp	r0, #0
   27a8c:	d093      	beq.n	279b6 <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   27a8e:	f8da 3000 	ldr.w	r3, [sl]
   27a92:	4648      	mov	r0, r9
   27a94:	4798      	blx	r3
   27a96:	2120      	movs	r1, #32
   27a98:	4603      	mov	r3, r0
   27a9a:	a804      	add	r0, sp, #16
   27a9c:	2b00      	cmp	r3, #0
   27a9e:	bf18      	it	ne
   27aa0:	469b      	movne	fp, r3
   27aa2:	f7ff fc87 	bl	273b4 <mbedtls_platform_zeroize>
   27aa6:	2110      	movs	r1, #16
   27aa8:	4638      	mov	r0, r7
   27aaa:	f7ff fc83 	bl	273b4 <mbedtls_platform_zeroize>
   27aae:	4658      	mov	r0, fp
   27ab0:	b00d      	add	sp, #52	; 0x34
   27ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ab6:	463a      	mov	r2, r7
   27ab8:	4641      	mov	r1, r8
   27aba:	2300      	movs	r3, #0
   27abc:	4620      	mov	r0, r4
   27abe:	f7ff fe7f 	bl	277c0 <mbedtls_ctr_drbg_reseed_internal>
   27ac2:	f8df a068 	ldr.w	sl, [pc, #104]	; 27b2c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   27ac6:	2800      	cmp	r0, #0
   27ac8:	f43f af6d 	beq.w	279a6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   27acc:	f8da 3000 	ldr.w	r3, [sl]
   27ad0:	4648      	mov	r0, r9
   27ad2:	4798      	blx	r3
   27ad4:	4683      	mov	fp, r0
   27ad6:	2800      	cmp	r0, #0
   27ad8:	f43f af65 	beq.w	279a6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   27adc:	e7e7      	b.n	27aae <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   27ade:	a904      	add	r1, sp, #16
   27ae0:	4620      	mov	r0, r4
   27ae2:	f7ff fdc9 	bl	27678 <ctr_drbg_update_internal>
   27ae6:	4683      	mov	fp, r0
   27ae8:	2800      	cmp	r0, #0
   27aea:	d1d0      	bne.n	27a8e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   27aec:	6923      	ldr	r3, [r4, #16]
   27aee:	3301      	adds	r3, #1
   27af0:	6123      	str	r3, [r4, #16]
   27af2:	e7cc      	b.n	27a8e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   27af4:	463a      	mov	r2, r7
   27af6:	4641      	mov	r1, r8
   27af8:	a804      	add	r0, sp, #16
   27afa:	f7ff fc65 	bl	273c8 <block_cipher_df>
   27afe:	4683      	mov	fp, r0
   27b00:	b118      	cbz	r0, 27b0a <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   27b02:	f8df a028 	ldr.w	sl, [pc, #40]	; 27b2c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   27b06:	466f      	mov	r7, sp
   27b08:	e7c1      	b.n	27a8e <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   27b0a:	a904      	add	r1, sp, #16
   27b0c:	4620      	mov	r0, r4
   27b0e:	f7ff fdb3 	bl	27678 <ctr_drbg_update_internal>
   27b12:	4683      	mov	fp, r0
   27b14:	2800      	cmp	r0, #0
   27b16:	f43f af44 	beq.w	279a2 <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   27b1a:	e7f2      	b.n	27b02 <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   27b1c:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   27b20:	e7c5      	b.n	27aae <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   27b22:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   27b26:	e7c2      	b.n	27aae <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   27b28:	20000824 	.word	0x20000824
   27b2c:	20000828 	.word	0x20000828

00027b30 <entropy_update>:
   27b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b34:	2b20      	cmp	r3, #32
   27b36:	b08b      	sub	sp, #44	; 0x2c
   27b38:	461d      	mov	r5, r3
   27b3a:	4606      	mov	r6, r0
   27b3c:	4688      	mov	r8, r1
   27b3e:	4691      	mov	r9, r2
   27b40:	d826      	bhi.n	27b90 <entropy_update+0x60>
   27b42:	b2db      	uxtb	r3, r3
   27b44:	af02      	add	r7, sp, #8
   27b46:	f88d 8004 	strb.w	r8, [sp, #4]
   27b4a:	46b0      	mov	r8, r6
   27b4c:	f88d 3005 	strb.w	r3, [sp, #5]
   27b50:	f858 1b04 	ldr.w	r1, [r8], #4
   27b54:	b921      	cbnz	r1, 27b60 <entropy_update+0x30>
   27b56:	4640      	mov	r0, r8
   27b58:	f000 fe8c 	bl	28874 <cc_mbedtls_sha256_starts>
   27b5c:	4604      	mov	r4, r0
   27b5e:	b940      	cbnz	r0, 27b72 <entropy_update+0x42>
   27b60:	2301      	movs	r3, #1
   27b62:	6033      	str	r3, [r6, #0]
   27b64:	2202      	movs	r2, #2
   27b66:	a901      	add	r1, sp, #4
   27b68:	4640      	mov	r0, r8
   27b6a:	f000 fe97 	bl	2889c <cc_mbedtls_sha256_update>
   27b6e:	4604      	mov	r4, r0
   27b70:	b138      	cbz	r0, 27b82 <entropy_update+0x52>
   27b72:	4638      	mov	r0, r7
   27b74:	2120      	movs	r1, #32
   27b76:	f7ff fc1d 	bl	273b4 <mbedtls_platform_zeroize>
   27b7a:	4620      	mov	r0, r4
   27b7c:	b00b      	add	sp, #44	; 0x2c
   27b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   27b82:	462a      	mov	r2, r5
   27b84:	4649      	mov	r1, r9
   27b86:	4640      	mov	r0, r8
   27b88:	f000 fe88 	bl	2889c <cc_mbedtls_sha256_update>
   27b8c:	4604      	mov	r4, r0
   27b8e:	e7f0      	b.n	27b72 <entropy_update+0x42>
   27b90:	af02      	add	r7, sp, #8
   27b92:	4619      	mov	r1, r3
   27b94:	4610      	mov	r0, r2
   27b96:	2300      	movs	r3, #0
   27b98:	463a      	mov	r2, r7
   27b9a:	f001 f807 	bl	28bac <cc_mbedtls_sha256>
   27b9e:	4604      	mov	r4, r0
   27ba0:	2800      	cmp	r0, #0
   27ba2:	d1e6      	bne.n	27b72 <entropy_update+0x42>
   27ba4:	2320      	movs	r3, #32
   27ba6:	46b9      	mov	r9, r7
   27ba8:	461d      	mov	r5, r3
   27baa:	e7cc      	b.n	27b46 <entropy_update+0x16>

00027bac <entropy_gather_internal.part.0>:
   27bac:	b5f0      	push	{r4, r5, r6, r7, lr}
   27bae:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   27bb2:	b0a7      	sub	sp, #156	; 0x9c
   27bb4:	2b00      	cmp	r3, #0
   27bb6:	bfd8      	it	le
   27bb8:	ae02      	addle	r6, sp, #8
   27bba:	dd2c      	ble.n	27c16 <entropy_gather_internal.part.0+0x6a>
   27bbc:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   27bc0:	4605      	mov	r5, r0
   27bc2:	2300      	movs	r3, #0
   27bc4:	ae02      	add	r6, sp, #8
   27bc6:	9301      	str	r3, [sp, #4]
   27bc8:	f1a4 0701 	sub.w	r7, r4, #1
   27bcc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   27bd0:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   27bd4:	ab01      	add	r3, sp, #4
   27bd6:	2290      	movs	r2, #144	; 0x90
   27bd8:	4631      	mov	r1, r6
   27bda:	47a0      	blx	r4
   27bdc:	fab7 f787 	clz	r7, r7
   27be0:	097f      	lsrs	r7, r7, #5
   27be2:	4604      	mov	r4, r0
   27be4:	b910      	cbnz	r0, 27bec <entropy_gather_internal.part.0+0x40>
   27be6:	9b01      	ldr	r3, [sp, #4]
   27be8:	b93b      	cbnz	r3, 27bfa <entropy_gather_internal.part.0+0x4e>
   27bea:	b1a7      	cbz	r7, 27c16 <entropy_gather_internal.part.0+0x6a>
   27bec:	4630      	mov	r0, r6
   27bee:	2190      	movs	r1, #144	; 0x90
   27bf0:	f7ff fbe0 	bl	273b4 <mbedtls_platform_zeroize>
   27bf4:	4620      	mov	r0, r4
   27bf6:	b027      	add	sp, #156	; 0x9c
   27bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27bfa:	4601      	mov	r1, r0
   27bfc:	4632      	mov	r2, r6
   27bfe:	4628      	mov	r0, r5
   27c00:	f7ff ff96 	bl	27b30 <entropy_update>
   27c04:	b950      	cbnz	r0, 27c1c <entropy_gather_internal.part.0+0x70>
   27c06:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   27c0a:	9a01      	ldr	r2, [sp, #4]
   27c0c:	4413      	add	r3, r2
   27c0e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   27c12:	2f00      	cmp	r7, #0
   27c14:	d1ea      	bne.n	27bec <entropy_gather_internal.part.0+0x40>
   27c16:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   27c1a:	e7e7      	b.n	27bec <entropy_gather_internal.part.0+0x40>
   27c1c:	4604      	mov	r4, r0
   27c1e:	4620      	mov	r0, r4
   27c20:	b027      	add	sp, #156	; 0x9c
   27c22:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c24 <cc_mbedtls_entropy_init>:
   27c24:	b570      	push	{r4, r5, r6, lr}
   27c26:	2500      	movs	r5, #0
   27c28:	4604      	mov	r4, r0
   27c2a:	f504 7688 	add.w	r6, r4, #272	; 0x110
   27c2e:	2214      	movs	r2, #20
   27c30:	4629      	mov	r1, r5
   27c32:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   27c36:	30fc      	adds	r0, #252	; 0xfc
   27c38:	f003 f9e8 	bl	2b00c <memset>
   27c3c:	2208      	movs	r2, #8
   27c3e:	4629      	mov	r1, r5
   27c40:	4630      	mov	r0, r6
   27c42:	f003 f9e3 	bl	2b00c <memset>
   27c46:	4b15      	ldr	r3, [pc, #84]	; (27c9c <cc_mbedtls_entropy_init+0x78>)
   27c48:	4630      	mov	r0, r6
   27c4a:	681b      	ldr	r3, [r3, #0]
   27c4c:	4798      	blx	r3
   27c4e:	4620      	mov	r0, r4
   27c50:	f840 5b04 	str.w	r5, [r0], #4
   27c54:	f000 fdf4 	bl	28840 <cc_mbedtls_sha256_init>
   27c58:	4b11      	ldr	r3, [pc, #68]	; (27ca0 <cc_mbedtls_entropy_init+0x7c>)
   27c5a:	4630      	mov	r0, r6
   27c5c:	681b      	ldr	r3, [r3, #0]
   27c5e:	4798      	blx	r3
   27c60:	b9d8      	cbnz	r0, 27c9a <cc_mbedtls_entropy_init+0x76>
   27c62:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27c66:	42ab      	cmp	r3, r5
   27c68:	dc11      	bgt.n	27c8e <cc_mbedtls_entropy_init+0x6a>
   27c6a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27c6e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   27c72:	2120      	movs	r1, #32
   27c74:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   27c78:	2101      	movs	r1, #1
   27c7a:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   27c7e:	3301      	adds	r3, #1
   27c80:	4908      	ldr	r1, [pc, #32]	; (27ca4 <cc_mbedtls_entropy_init+0x80>)
   27c82:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   27c86:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   27c8a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   27c8e:	4b06      	ldr	r3, [pc, #24]	; (27ca8 <cc_mbedtls_entropy_init+0x84>)
   27c90:	4630      	mov	r0, r6
   27c92:	681b      	ldr	r3, [r3, #0]
   27c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27c98:	4718      	bx	r3
   27c9a:	bd70      	pop	{r4, r5, r6, pc}
   27c9c:	20000820 	.word	0x20000820
   27ca0:	20000824 	.word	0x20000824
   27ca4:	00028691 	.word	0x00028691
   27ca8:	20000828 	.word	0x20000828

00027cac <cc_mbedtls_entropy_func>:
   27cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27cb0:	2a20      	cmp	r2, #32
   27cb2:	b088      	sub	sp, #32
   27cb4:	d876      	bhi.n	27da4 <cc_mbedtls_entropy_func+0xf8>
   27cb6:	4b3d      	ldr	r3, [pc, #244]	; (27dac <cc_mbedtls_entropy_func+0x100>)
   27cb8:	f500 7988 	add.w	r9, r0, #272	; 0x110
   27cbc:	681b      	ldr	r3, [r3, #0]
   27cbe:	4604      	mov	r4, r0
   27cc0:	4648      	mov	r0, r9
   27cc2:	4617      	mov	r7, r2
   27cc4:	4688      	mov	r8, r1
   27cc6:	4798      	blx	r3
   27cc8:	4605      	mov	r5, r0
   27cca:	bba0      	cbnz	r0, 27d36 <cc_mbedtls_entropy_func+0x8a>
   27ccc:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27cd0:	f240 1601 	movw	r6, #257	; 0x101
   27cd4:	e001      	b.n	27cda <cc_mbedtls_entropy_func+0x2e>
   27cd6:	3e01      	subs	r6, #1
   27cd8:	d060      	beq.n	27d9c <cc_mbedtls_entropy_func+0xf0>
   27cda:	4620      	mov	r0, r4
   27cdc:	b37b      	cbz	r3, 27d3e <cc_mbedtls_entropy_func+0x92>
   27cde:	f7ff ff65 	bl	27bac <entropy_gather_internal.part.0>
   27ce2:	4605      	mov	r5, r0
   27ce4:	bb68      	cbnz	r0, 27d42 <cc_mbedtls_entropy_func+0x96>
   27ce6:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27cea:	2b00      	cmp	r3, #0
   27cec:	ddf3      	ble.n	27cd6 <cc_mbedtls_entropy_func+0x2a>
   27cee:	e9d4 0241 	ldrd	r0, r2, [r4, #260]	; 0x104
   27cf2:	4290      	cmp	r0, r2
   27cf4:	d3ef      	bcc.n	27cd6 <cc_mbedtls_entropy_func+0x2a>
   27cf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   27cfa:	2a01      	cmp	r2, #1
   27cfc:	d1eb      	bne.n	27cd6 <cc_mbedtls_entropy_func+0x2a>
   27cfe:	281f      	cmp	r0, #31
   27d00:	d9e9      	bls.n	27cd6 <cc_mbedtls_entropy_func+0x2a>
   27d02:	466e      	mov	r6, sp
   27d04:	4629      	mov	r1, r5
   27d06:	2220      	movs	r2, #32
   27d08:	4630      	mov	r0, r6
   27d0a:	f104 0a04 	add.w	sl, r4, #4
   27d0e:	f003 f97d 	bl	2b00c <memset>
   27d12:	4631      	mov	r1, r6
   27d14:	4650      	mov	r0, sl
   27d16:	f000 fdeb 	bl	288f0 <cc_mbedtls_sha256_finish>
   27d1a:	4605      	mov	r5, r0
   27d1c:	b198      	cbz	r0, 27d46 <cc_mbedtls_entropy_func+0x9a>
   27d1e:	2120      	movs	r1, #32
   27d20:	4630      	mov	r0, r6
   27d22:	f7ff fb47 	bl	273b4 <mbedtls_platform_zeroize>
   27d26:	4b22      	ldr	r3, [pc, #136]	; (27db0 <cc_mbedtls_entropy_func+0x104>)
   27d28:	4648      	mov	r0, r9
   27d2a:	681b      	ldr	r3, [r3, #0]
   27d2c:	4798      	blx	r3
   27d2e:	2800      	cmp	r0, #0
   27d30:	bf18      	it	ne
   27d32:	f06f 051d 	mvnne.w	r5, #29
   27d36:	4628      	mov	r0, r5
   27d38:	b008      	add	sp, #32
   27d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27d3e:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   27d42:	466e      	mov	r6, sp
   27d44:	e7eb      	b.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27d46:	4650      	mov	r0, sl
   27d48:	f000 fd8e 	bl	28868 <cc_mbedtls_sha256_free>
   27d4c:	4650      	mov	r0, sl
   27d4e:	f000 fd77 	bl	28840 <cc_mbedtls_sha256_init>
   27d52:	4629      	mov	r1, r5
   27d54:	4650      	mov	r0, sl
   27d56:	f000 fd8d 	bl	28874 <cc_mbedtls_sha256_starts>
   27d5a:	4605      	mov	r5, r0
   27d5c:	2800      	cmp	r0, #0
   27d5e:	d1de      	bne.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27d60:	4650      	mov	r0, sl
   27d62:	2220      	movs	r2, #32
   27d64:	4631      	mov	r1, r6
   27d66:	f000 fd99 	bl	2889c <cc_mbedtls_sha256_update>
   27d6a:	4605      	mov	r5, r0
   27d6c:	2800      	cmp	r0, #0
   27d6e:	d1d6      	bne.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27d70:	4603      	mov	r3, r0
   27d72:	4632      	mov	r2, r6
   27d74:	2120      	movs	r1, #32
   27d76:	4630      	mov	r0, r6
   27d78:	f000 ff18 	bl	28bac <cc_mbedtls_sha256>
   27d7c:	4605      	mov	r5, r0
   27d7e:	2800      	cmp	r0, #0
   27d80:	d1cd      	bne.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27d82:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   27d86:	2b00      	cmp	r3, #0
   27d88:	bfc4      	itt	gt
   27d8a:	2300      	movgt	r3, #0
   27d8c:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   27d90:	463a      	mov	r2, r7
   27d92:	4640      	mov	r0, r8
   27d94:	4631      	mov	r1, r6
   27d96:	f003 f92e 	bl	2aff6 <memcpy>
   27d9a:	e7c0      	b.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27d9c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   27da0:	466e      	mov	r6, sp
   27da2:	e7bc      	b.n	27d1e <cc_mbedtls_entropy_func+0x72>
   27da4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   27da8:	e7c5      	b.n	27d36 <cc_mbedtls_entropy_func+0x8a>
   27daa:	bf00      	nop
   27dac:	20000824 	.word	0x20000824
   27db0:	20000828 	.word	0x20000828

00027db4 <RndStartupTest.constprop.0>:
   27db4:	b530      	push	{r4, r5, lr}
   27db6:	b08d      	sub	sp, #52	; 0x34
   27db8:	2100      	movs	r1, #0
   27dba:	2228      	movs	r2, #40	; 0x28
   27dbc:	a802      	add	r0, sp, #8
   27dbe:	9101      	str	r1, [sp, #4]
   27dc0:	f003 f924 	bl	2b00c <memset>
   27dc4:	a802      	add	r0, sp, #8
   27dc6:	f000 ff19 	bl	28bfc <RNG_PLAT_SetUserRngParameters>
   27dca:	4604      	mov	r4, r0
   27dcc:	b110      	cbz	r0, 27dd4 <RndStartupTest.constprop.0+0x20>
   27dce:	4620      	mov	r0, r4
   27dd0:	b00d      	add	sp, #52	; 0x34
   27dd2:	bd30      	pop	{r4, r5, pc}
   27dd4:	4d18      	ldr	r5, [pc, #96]	; (27e38 <RndStartupTest.constprop.0+0x84>)
   27dd6:	f04f 31ff 	mov.w	r1, #4294967295
   27dda:	6828      	ldr	r0, [r5, #0]
   27ddc:	f000 f946 	bl	2806c <CC_PalMutexLock>
   27de0:	4604      	mov	r4, r0
   27de2:	b9c0      	cbnz	r0, 27e16 <RndStartupTest.constprop.0+0x62>
   27de4:	2000      	movs	r0, #0
   27de6:	f000 f971 	bl	280cc <CC_PalPowerSaveModeSelect>
   27dea:	bb00      	cbnz	r0, 27e2e <RndStartupTest.constprop.0+0x7a>
   27dec:	4a13      	ldr	r2, [pc, #76]	; (27e3c <RndStartupTest.constprop.0+0x88>)
   27dee:	a902      	add	r1, sp, #8
   27df0:	a801      	add	r0, sp, #4
   27df2:	f000 fc3f 	bl	28674 <LLF_RND_RunTrngStartupTest>
   27df6:	4604      	mov	r4, r0
   27df8:	2001      	movs	r0, #1
   27dfa:	f000 f967 	bl	280cc <CC_PalPowerSaveModeSelect>
   27dfe:	b990      	cbnz	r0, 27e26 <RndStartupTest.constprop.0+0x72>
   27e00:	6828      	ldr	r0, [r5, #0]
   27e02:	f000 f93b 	bl	2807c <CC_PalMutexUnlock>
   27e06:	2800      	cmp	r0, #0
   27e08:	d0e1      	beq.n	27dce <RndStartupTest.constprop.0+0x1a>
   27e0a:	480d      	ldr	r0, [pc, #52]	; (27e40 <RndStartupTest.constprop.0+0x8c>)
   27e0c:	f7ff f9b2 	bl	27174 <CC_PalAbort>
   27e10:	4620      	mov	r0, r4
   27e12:	b00d      	add	sp, #52	; 0x34
   27e14:	bd30      	pop	{r4, r5, pc}
   27e16:	480b      	ldr	r0, [pc, #44]	; (27e44 <RndStartupTest.constprop.0+0x90>)
   27e18:	f7ff f9ac 	bl	27174 <CC_PalAbort>
   27e1c:	2c01      	cmp	r4, #1
   27e1e:	bf08      	it	eq
   27e20:	2405      	moveq	r4, #5
   27e22:	d0ed      	beq.n	27e00 <RndStartupTest.constprop.0+0x4c>
   27e24:	e7de      	b.n	27de4 <RndStartupTest.constprop.0+0x30>
   27e26:	4808      	ldr	r0, [pc, #32]	; (27e48 <RndStartupTest.constprop.0+0x94>)
   27e28:	f7ff f9a4 	bl	27174 <CC_PalAbort>
   27e2c:	e7e8      	b.n	27e00 <RndStartupTest.constprop.0+0x4c>
   27e2e:	4807      	ldr	r0, [pc, #28]	; (27e4c <RndStartupTest.constprop.0+0x98>)
   27e30:	f7ff f9a0 	bl	27174 <CC_PalAbort>
   27e34:	e7da      	b.n	27dec <RndStartupTest.constprop.0+0x38>
   27e36:	bf00      	nop
   27e38:	2000081c 	.word	0x2000081c
   27e3c:	20003bd8 	.word	0x20003bd8
   27e40:	0002f078 	.word	0x0002f078
   27e44:	0002f020 	.word	0x0002f020
   27e48:	0002f058 	.word	0x0002f058
   27e4c:	0002f038 	.word	0x0002f038

00027e50 <CC_LibInit>:
   27e50:	b530      	push	{r4, r5, lr}
   27e52:	b083      	sub	sp, #12
   27e54:	f000 f85c 	bl	27f10 <CC_HalInit>
   27e58:	b128      	cbz	r0, 27e66 <CC_LibInit+0x16>
   27e5a:	f000 f8ab 	bl	27fb4 <CC_PalTerminate>
   27e5e:	2403      	movs	r4, #3
   27e60:	4620      	mov	r0, r4
   27e62:	b003      	add	sp, #12
   27e64:	bd30      	pop	{r4, r5, pc}
   27e66:	f000 f877 	bl	27f58 <CC_PalInit>
   27e6a:	b9d8      	cbnz	r0, 27ea4 <CC_LibInit+0x54>
   27e6c:	f000 f92e 	bl	280cc <CC_PalPowerSaveModeSelect>
   27e70:	b9e0      	cbnz	r0, 27eac <CC_LibInit+0x5c>
   27e72:	4c22      	ldr	r4, [pc, #136]	; (27efc <CC_LibInit+0xac>)
   27e74:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   27e78:	0e1b      	lsrs	r3, r3, #24
   27e7a:	2bf0      	cmp	r3, #240	; 0xf0
   27e7c:	d10a      	bne.n	27e94 <CC_LibInit+0x44>
   27e7e:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   27e82:	4b1f      	ldr	r3, [pc, #124]	; (27f00 <CC_LibInit+0xb0>)
   27e84:	429a      	cmp	r2, r3
   27e86:	d031      	beq.n	27eec <CC_LibInit+0x9c>
   27e88:	f000 f844 	bl	27f14 <CC_HalTerminate>
   27e8c:	2407      	movs	r4, #7
   27e8e:	f000 f891 	bl	27fb4 <CC_PalTerminate>
   27e92:	e7e5      	b.n	27e60 <CC_LibInit+0x10>
   27e94:	f000 f83e 	bl	27f14 <CC_HalTerminate>
   27e98:	f000 f88c 	bl	27fb4 <CC_PalTerminate>
   27e9c:	2406      	movs	r4, #6
   27e9e:	4620      	mov	r0, r4
   27ea0:	b003      	add	sp, #12
   27ea2:	bd30      	pop	{r4, r5, pc}
   27ea4:	2404      	movs	r4, #4
   27ea6:	4620      	mov	r0, r4
   27ea8:	b003      	add	sp, #12
   27eaa:	bd30      	pop	{r4, r5, pc}
   27eac:	f000 f832 	bl	27f14 <CC_HalTerminate>
   27eb0:	f000 f880 	bl	27fb4 <CC_PalTerminate>
   27eb4:	f7ff ff7e 	bl	27db4 <RndStartupTest.constprop.0>
   27eb8:	4604      	mov	r4, r0
   27eba:	b998      	cbnz	r0, 27ee4 <CC_LibInit+0x94>
   27ebc:	4d11      	ldr	r5, [pc, #68]	; (27f04 <CC_LibInit+0xb4>)
   27ebe:	682b      	ldr	r3, [r5, #0]
   27ec0:	2b00      	cmp	r3, #0
   27ec2:	d1cd      	bne.n	27e60 <CC_LibInit+0x10>
   27ec4:	4602      	mov	r2, r0
   27ec6:	4601      	mov	r1, r0
   27ec8:	f7ff f976 	bl	271b8 <nrf_cc3xx_platform_ctr_drbg_init>
   27ecc:	b950      	cbnz	r0, 27ee4 <CC_LibInit+0x94>
   27ece:	490e      	ldr	r1, [pc, #56]	; (27f08 <CC_LibInit+0xb8>)
   27ed0:	ab01      	add	r3, sp, #4
   27ed2:	2268      	movs	r2, #104	; 0x68
   27ed4:	f7ff f9a2 	bl	2721c <nrf_cc3xx_platform_ctr_drbg_get>
   27ed8:	b920      	cbnz	r0, 27ee4 <CC_LibInit+0x94>
   27eda:	4b0c      	ldr	r3, [pc, #48]	; (27f0c <CC_LibInit+0xbc>)
   27edc:	602b      	str	r3, [r5, #0]
   27ede:	4620      	mov	r0, r4
   27ee0:	b003      	add	sp, #12
   27ee2:	bd30      	pop	{r4, r5, pc}
   27ee4:	2405      	movs	r4, #5
   27ee6:	4620      	mov	r0, r4
   27ee8:	b003      	add	sp, #12
   27eea:	bd30      	pop	{r4, r5, pc}
   27eec:	2001      	movs	r0, #1
   27eee:	f000 f8ed 	bl	280cc <CC_PalPowerSaveModeSelect>
   27ef2:	2800      	cmp	r0, #0
   27ef4:	d1da      	bne.n	27eac <CC_LibInit+0x5c>
   27ef6:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   27efa:	e7db      	b.n	27eb4 <CC_LibInit+0x64>
   27efc:	5002b000 	.word	0x5002b000
   27f00:	20e00000 	.word	0x20e00000
   27f04:	20003bd4 	.word	0x20003bd4
   27f08:	20003b6c 	.word	0x20003b6c
   27f0c:	5a5aea5a 	.word	0x5a5aea5a

00027f10 <CC_HalInit>:
   27f10:	2000      	movs	r0, #0
   27f12:	4770      	bx	lr

00027f14 <CC_HalTerminate>:
   27f14:	2000      	movs	r0, #0
   27f16:	4770      	bx	lr

00027f18 <CC_HalClearInterruptBit>:
   27f18:	0543      	lsls	r3, r0, #21
   27f1a:	d504      	bpl.n	27f26 <CC_HalClearInterruptBit+0xe>
   27f1c:	4b04      	ldr	r3, [pc, #16]	; (27f30 <CC_HalClearInterruptBit+0x18>)
   27f1e:	f04f 32ff 	mov.w	r2, #4294967295
   27f22:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   27f26:	4b02      	ldr	r3, [pc, #8]	; (27f30 <CC_HalClearInterruptBit+0x18>)
   27f28:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   27f2c:	4770      	bx	lr
   27f2e:	bf00      	nop
   27f30:	5002b000 	.word	0x5002b000

00027f34 <CC_HalMaskInterrupt>:
   27f34:	4b01      	ldr	r3, [pc, #4]	; (27f3c <CC_HalMaskInterrupt+0x8>)
   27f36:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   27f3a:	4770      	bx	lr
   27f3c:	5002b000 	.word	0x5002b000

00027f40 <CC_HalWaitInterrupt>:
   27f40:	b108      	cbz	r0, 27f46 <CC_HalWaitInterrupt+0x6>
   27f42:	f000 b86b 	b.w	2801c <CC_PalWaitInterrupt>
   27f46:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   27f4a:	4770      	bx	lr

00027f4c <CC_HalWaitInterruptRND>:
   27f4c:	b108      	cbz	r0, 27f52 <CC_HalWaitInterruptRND+0x6>
   27f4e:	f000 b84f 	b.w	27ff0 <CC_PalWaitInterruptRND>
   27f52:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   27f56:	4770      	bx	lr

00027f58 <CC_PalInit>:
   27f58:	b510      	push	{r4, lr}
   27f5a:	4811      	ldr	r0, [pc, #68]	; (27fa0 <CC_PalInit+0x48>)
   27f5c:	f000 f872 	bl	28044 <CC_PalMutexCreate>
   27f60:	b100      	cbz	r0, 27f64 <CC_PalInit+0xc>
   27f62:	bd10      	pop	{r4, pc}
   27f64:	480f      	ldr	r0, [pc, #60]	; (27fa4 <CC_PalInit+0x4c>)
   27f66:	f000 f86d 	bl	28044 <CC_PalMutexCreate>
   27f6a:	2800      	cmp	r0, #0
   27f6c:	d1f9      	bne.n	27f62 <CC_PalInit+0xa>
   27f6e:	4c0e      	ldr	r4, [pc, #56]	; (27fa8 <CC_PalInit+0x50>)
   27f70:	4620      	mov	r0, r4
   27f72:	f000 f867 	bl	28044 <CC_PalMutexCreate>
   27f76:	2800      	cmp	r0, #0
   27f78:	d1f3      	bne.n	27f62 <CC_PalInit+0xa>
   27f7a:	4b0c      	ldr	r3, [pc, #48]	; (27fac <CC_PalInit+0x54>)
   27f7c:	480c      	ldr	r0, [pc, #48]	; (27fb0 <CC_PalInit+0x58>)
   27f7e:	601c      	str	r4, [r3, #0]
   27f80:	f000 f860 	bl	28044 <CC_PalMutexCreate>
   27f84:	4601      	mov	r1, r0
   27f86:	2800      	cmp	r0, #0
   27f88:	d1eb      	bne.n	27f62 <CC_PalInit+0xa>
   27f8a:	f000 f82d 	bl	27fe8 <CC_PalDmaInit>
   27f8e:	4604      	mov	r4, r0
   27f90:	b108      	cbz	r0, 27f96 <CC_PalInit+0x3e>
   27f92:	4620      	mov	r0, r4
   27f94:	bd10      	pop	{r4, pc}
   27f96:	f000 f87b 	bl	28090 <CC_PalPowerSaveModeInit>
   27f9a:	4620      	mov	r0, r4
   27f9c:	e7fa      	b.n	27f94 <CC_PalInit+0x3c>
   27f9e:	bf00      	nop
   27fa0:	20000818 	.word	0x20000818
   27fa4:	2000080c 	.word	0x2000080c
   27fa8:	20000814 	.word	0x20000814
   27fac:	2000081c 	.word	0x2000081c
   27fb0:	20000810 	.word	0x20000810

00027fb4 <CC_PalTerminate>:
   27fb4:	b508      	push	{r3, lr}
   27fb6:	4808      	ldr	r0, [pc, #32]	; (27fd8 <CC_PalTerminate+0x24>)
   27fb8:	f000 f84e 	bl	28058 <CC_PalMutexDestroy>
   27fbc:	4807      	ldr	r0, [pc, #28]	; (27fdc <CC_PalTerminate+0x28>)
   27fbe:	f000 f84b 	bl	28058 <CC_PalMutexDestroy>
   27fc2:	4807      	ldr	r0, [pc, #28]	; (27fe0 <CC_PalTerminate+0x2c>)
   27fc4:	f000 f848 	bl	28058 <CC_PalMutexDestroy>
   27fc8:	4806      	ldr	r0, [pc, #24]	; (27fe4 <CC_PalTerminate+0x30>)
   27fca:	f000 f845 	bl	28058 <CC_PalMutexDestroy>
   27fce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27fd2:	f000 b80b 	b.w	27fec <CC_PalDmaTerminate>
   27fd6:	bf00      	nop
   27fd8:	20000818 	.word	0x20000818
   27fdc:	2000080c 	.word	0x2000080c
   27fe0:	20000814 	.word	0x20000814
   27fe4:	20000810 	.word	0x20000810

00027fe8 <CC_PalDmaInit>:
   27fe8:	2000      	movs	r0, #0
   27fea:	4770      	bx	lr

00027fec <CC_PalDmaTerminate>:
   27fec:	4770      	bx	lr
   27fee:	bf00      	nop

00027ff0 <CC_PalWaitInterruptRND>:
   27ff0:	b410      	push	{r4}
   27ff2:	4c09      	ldr	r4, [pc, #36]	; (28018 <CC_PalWaitInterruptRND+0x28>)
   27ff4:	4602      	mov	r2, r0
   27ff6:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   27ffa:	4213      	tst	r3, r2
   27ffc:	d0fb      	beq.n	27ff6 <CC_PalWaitInterruptRND+0x6>
   27ffe:	b121      	cbz	r1, 2800a <CC_PalWaitInterruptRND+0x1a>
   28000:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   28004:	600b      	str	r3, [r1, #0]
   28006:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2800a:	4b03      	ldr	r3, [pc, #12]	; (28018 <CC_PalWaitInterruptRND+0x28>)
   2800c:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   28010:	2000      	movs	r0, #0
   28012:	bc10      	pop	{r4}
   28014:	4770      	bx	lr
   28016:	bf00      	nop
   28018:	5002b000 	.word	0x5002b000

0002801c <CC_PalWaitInterrupt>:
   2801c:	4a04      	ldr	r2, [pc, #16]	; (28030 <CC_PalWaitInterrupt+0x14>)
   2801e:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   28022:	4218      	tst	r0, r3
   28024:	d0fb      	beq.n	2801e <CC_PalWaitInterrupt+0x2>
   28026:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   2802a:	2000      	movs	r0, #0
   2802c:	4770      	bx	lr
   2802e:	bf00      	nop
   28030:	5002b000 	.word	0x5002b000

00028034 <CC_PalMemCopyPlat>:
   28034:	f002 bfc8 	b.w	2afc8 <memmove>

00028038 <CC_PalMemSetPlat>:
   28038:	f002 bfe8 	b.w	2b00c <memset>

0002803c <CC_PalMemSetZeroPlat>:
   2803c:	460a      	mov	r2, r1
   2803e:	2100      	movs	r1, #0
   28040:	f002 bfe4 	b.w	2b00c <memset>

00028044 <CC_PalMutexCreate>:
   28044:	b508      	push	{r3, lr}
   28046:	4b03      	ldr	r3, [pc, #12]	; (28054 <CC_PalMutexCreate+0x10>)
   28048:	6802      	ldr	r2, [r0, #0]
   2804a:	681b      	ldr	r3, [r3, #0]
   2804c:	6810      	ldr	r0, [r2, #0]
   2804e:	4798      	blx	r3
   28050:	2000      	movs	r0, #0
   28052:	bd08      	pop	{r3, pc}
   28054:	200007cc 	.word	0x200007cc

00028058 <CC_PalMutexDestroy>:
   28058:	b508      	push	{r3, lr}
   2805a:	4b03      	ldr	r3, [pc, #12]	; (28068 <CC_PalMutexDestroy+0x10>)
   2805c:	6802      	ldr	r2, [r0, #0]
   2805e:	685b      	ldr	r3, [r3, #4]
   28060:	6810      	ldr	r0, [r2, #0]
   28062:	4798      	blx	r3
   28064:	2000      	movs	r0, #0
   28066:	bd08      	pop	{r3, pc}
   28068:	200007cc 	.word	0x200007cc

0002806c <CC_PalMutexLock>:
   2806c:	4b02      	ldr	r3, [pc, #8]	; (28078 <CC_PalMutexLock+0xc>)
   2806e:	6802      	ldr	r2, [r0, #0]
   28070:	689b      	ldr	r3, [r3, #8]
   28072:	6810      	ldr	r0, [r2, #0]
   28074:	4718      	bx	r3
   28076:	bf00      	nop
   28078:	200007cc 	.word	0x200007cc

0002807c <CC_PalMutexUnlock>:
   2807c:	b508      	push	{r3, lr}
   2807e:	4b03      	ldr	r3, [pc, #12]	; (2808c <CC_PalMutexUnlock+0x10>)
   28080:	6802      	ldr	r2, [r0, #0]
   28082:	68db      	ldr	r3, [r3, #12]
   28084:	6810      	ldr	r0, [r2, #0]
   28086:	4798      	blx	r3
   28088:	2000      	movs	r0, #0
   2808a:	bd08      	pop	{r3, pc}
   2808c:	200007cc 	.word	0x200007cc

00028090 <CC_PalPowerSaveModeInit>:
   28090:	b570      	push	{r4, r5, r6, lr}
   28092:	4c09      	ldr	r4, [pc, #36]	; (280b8 <CC_PalPowerSaveModeInit+0x28>)
   28094:	4d09      	ldr	r5, [pc, #36]	; (280bc <CC_PalPowerSaveModeInit+0x2c>)
   28096:	6920      	ldr	r0, [r4, #16]
   28098:	68ab      	ldr	r3, [r5, #8]
   2809a:	4798      	blx	r3
   2809c:	b118      	cbz	r0, 280a6 <CC_PalPowerSaveModeInit+0x16>
   2809e:	4b08      	ldr	r3, [pc, #32]	; (280c0 <CC_PalPowerSaveModeInit+0x30>)
   280a0:	4808      	ldr	r0, [pc, #32]	; (280c4 <CC_PalPowerSaveModeInit+0x34>)
   280a2:	685b      	ldr	r3, [r3, #4]
   280a4:	4798      	blx	r3
   280a6:	4a08      	ldr	r2, [pc, #32]	; (280c8 <CC_PalPowerSaveModeInit+0x38>)
   280a8:	68eb      	ldr	r3, [r5, #12]
   280aa:	6920      	ldr	r0, [r4, #16]
   280ac:	2100      	movs	r1, #0
   280ae:	6011      	str	r1, [r2, #0]
   280b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   280b4:	4718      	bx	r3
   280b6:	bf00      	nop
   280b8:	200007dc 	.word	0x200007dc
   280bc:	200007cc 	.word	0x200007cc
   280c0:	200007bc 	.word	0x200007bc
   280c4:	0002f090 	.word	0x0002f090
   280c8:	20003df8 	.word	0x20003df8

000280cc <CC_PalPowerSaveModeSelect>:
   280cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   280ce:	4d1a      	ldr	r5, [pc, #104]	; (28138 <CC_PalPowerSaveModeSelect+0x6c>)
   280d0:	4e1a      	ldr	r6, [pc, #104]	; (2813c <CC_PalPowerSaveModeSelect+0x70>)
   280d2:	4604      	mov	r4, r0
   280d4:	68b2      	ldr	r2, [r6, #8]
   280d6:	6928      	ldr	r0, [r5, #16]
   280d8:	4790      	blx	r2
   280da:	b9e8      	cbnz	r0, 28118 <CC_PalPowerSaveModeSelect+0x4c>
   280dc:	4f18      	ldr	r7, [pc, #96]	; (28140 <CC_PalPowerSaveModeSelect+0x74>)
   280de:	683b      	ldr	r3, [r7, #0]
   280e0:	b14c      	cbz	r4, 280f6 <CC_PalPowerSaveModeSelect+0x2a>
   280e2:	b1a3      	cbz	r3, 2810e <CC_PalPowerSaveModeSelect+0x42>
   280e4:	2b01      	cmp	r3, #1
   280e6:	d019      	beq.n	2811c <CC_PalPowerSaveModeSelect+0x50>
   280e8:	3b01      	subs	r3, #1
   280ea:	603b      	str	r3, [r7, #0]
   280ec:	6928      	ldr	r0, [r5, #16]
   280ee:	68f3      	ldr	r3, [r6, #12]
   280f0:	4798      	blx	r3
   280f2:	2000      	movs	r0, #0
   280f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   280f6:	b943      	cbnz	r3, 2810a <CC_PalPowerSaveModeSelect+0x3e>
   280f8:	4a12      	ldr	r2, [pc, #72]	; (28144 <CC_PalPowerSaveModeSelect+0x78>)
   280fa:	2101      	movs	r1, #1
   280fc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   28100:	4911      	ldr	r1, [pc, #68]	; (28148 <CC_PalPowerSaveModeSelect+0x7c>)
   28102:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   28106:	2a00      	cmp	r2, #0
   28108:	d1fb      	bne.n	28102 <CC_PalPowerSaveModeSelect+0x36>
   2810a:	3301      	adds	r3, #1
   2810c:	603b      	str	r3, [r7, #0]
   2810e:	68f3      	ldr	r3, [r6, #12]
   28110:	6928      	ldr	r0, [r5, #16]
   28112:	4798      	blx	r3
   28114:	2000      	movs	r0, #0
   28116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28118:	480c      	ldr	r0, [pc, #48]	; (2814c <CC_PalPowerSaveModeSelect+0x80>)
   2811a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2811c:	4a0a      	ldr	r2, [pc, #40]	; (28148 <CC_PalPowerSaveModeSelect+0x7c>)
   2811e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28122:	2b00      	cmp	r3, #0
   28124:	d1fb      	bne.n	2811e <CC_PalPowerSaveModeSelect+0x52>
   28126:	4a07      	ldr	r2, [pc, #28]	; (28144 <CC_PalPowerSaveModeSelect+0x78>)
   28128:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   2812c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   28130:	f7ff ff00 	bl	27f34 <CC_HalMaskInterrupt>
   28134:	683b      	ldr	r3, [r7, #0]
   28136:	e7d7      	b.n	280e8 <CC_PalPowerSaveModeSelect+0x1c>
   28138:	200007dc 	.word	0x200007dc
   2813c:	200007cc 	.word	0x200007cc
   28140:	20003df8 	.word	0x20003df8
   28144:	5002a000 	.word	0x5002a000
   28148:	5002b000 	.word	0x5002b000
   2814c:	ffff8fe9 	.word	0xffff8fe9

00028150 <mutex_init>:
   28150:	4b01      	ldr	r3, [pc, #4]	; (28158 <mutex_init+0x8>)
   28152:	681b      	ldr	r3, [r3, #0]
   28154:	4718      	bx	r3
   28156:	bf00      	nop
   28158:	200007cc 	.word	0x200007cc

0002815c <mutex_lock>:
   2815c:	4b01      	ldr	r3, [pc, #4]	; (28164 <mutex_lock+0x8>)
   2815e:	689b      	ldr	r3, [r3, #8]
   28160:	4718      	bx	r3
   28162:	bf00      	nop
   28164:	200007cc 	.word	0x200007cc

00028168 <mutex_unlock>:
   28168:	4b01      	ldr	r3, [pc, #4]	; (28170 <mutex_unlock+0x8>)
   2816a:	68db      	ldr	r3, [r3, #12]
   2816c:	4718      	bx	r3
   2816e:	bf00      	nop
   28170:	200007cc 	.word	0x200007cc

00028174 <startTrngHW>:
   28174:	2800      	cmp	r0, #0
   28176:	f000 8084 	beq.w	28282 <startTrngHW+0x10e>
   2817a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2817e:	460c      	mov	r4, r1
   28180:	b083      	sub	sp, #12
   28182:	2900      	cmp	r1, #0
   28184:	d078      	beq.n	28278 <startTrngHW+0x104>
   28186:	461d      	mov	r5, r3
   28188:	2b00      	cmp	r3, #0
   2818a:	d075      	beq.n	28278 <startTrngHW+0x104>
   2818c:	4607      	mov	r7, r0
   2818e:	b11a      	cbz	r2, 28198 <startTrngHW+0x24>
   28190:	2201      	movs	r2, #1
   28192:	2300      	movs	r3, #0
   28194:	602a      	str	r2, [r5, #0]
   28196:	6003      	str	r3, [r0, #0]
   28198:	682b      	ldr	r3, [r5, #0]
   2819a:	2b00      	cmp	r3, #0
   2819c:	d067      	beq.n	2826e <startTrngHW+0xfa>
   2819e:	4629      	mov	r1, r5
   281a0:	4620      	mov	r0, r4
   281a2:	f000 fde9 	bl	28d78 <LLF_RND_GetFastestRosc>
   281a6:	4603      	mov	r3, r0
   281a8:	2800      	cmp	r0, #0
   281aa:	d161      	bne.n	28270 <startTrngHW+0xfc>
   281ac:	6828      	ldr	r0, [r5, #0]
   281ae:	4621      	mov	r1, r4
   281b0:	f000 fdc4 	bl	28d3c <LLF_RND_GetRoscSampleCnt>
   281b4:	4603      	mov	r3, r0
   281b6:	2800      	cmp	r0, #0
   281b8:	d15a      	bne.n	28270 <startTrngHW+0xfc>
   281ba:	682a      	ldr	r2, [r5, #0]
   281bc:	2a08      	cmp	r2, #8
   281be:	d072      	beq.n	282a6 <startTrngHW+0x132>
   281c0:	2a04      	cmp	r2, #4
   281c2:	d073      	beq.n	282ac <startTrngHW+0x138>
   281c4:	f1a2 0802 	sub.w	r8, r2, #2
   281c8:	fab8 f888 	clz	r8, r8
   281cc:	ea4f 1858 	mov.w	r8, r8, lsr #5
   281d0:	4e38      	ldr	r6, [pc, #224]	; (282b4 <startTrngHW+0x140>)
   281d2:	2001      	movs	r0, #1
   281d4:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   281d8:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
   281dc:	f8c6 01c4 	str.w	r0, [r6, #452]	; 0x1c4
   281e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   281e2:	f8c6 2130 	str.w	r2, [r6, #304]	; 0x130
   281e6:	f8d6 1130 	ldr.w	r1, [r6, #304]	; 0x130
   281ea:	428a      	cmp	r2, r1
   281ec:	d1f6      	bne.n	281dc <startTrngHW+0x68>
   281ee:	f04f 0900 	mov.w	r9, #0
   281f2:	9301      	str	r3, [sp, #4]
   281f4:	f04f 30ff 	mov.w	r0, #4294967295
   281f8:	f8c6 912c 	str.w	r9, [r6, #300]	; 0x12c
   281fc:	f7ff fe8c 	bl	27f18 <CC_HalClearInterruptBit>
   28200:	f06f 021b 	mvn.w	r2, #27
   28204:	f8c6 2100 	str.w	r2, [r6, #256]	; 0x100
   28208:	4648      	mov	r0, r9
   2820a:	f7ff fe93 	bl	27f34 <CC_HalMaskInterrupt>
   2820e:	f8c6 810c 	str.w	r8, [r6, #268]	; 0x10c
   28212:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   28216:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2821a:	f7ff fe8b 	bl	27f34 <CC_HalMaskInterrupt>
   2821e:	220a      	movs	r2, #10
   28220:	f8c6 2138 	str.w	r2, [r6, #312]	; 0x138
   28224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28226:	2b01      	cmp	r3, #1
   28228:	9b01      	ldr	r3, [sp, #4]
   2822a:	d02d      	beq.n	28288 <startTrngHW+0x114>
   2822c:	6922      	ldr	r2, [r4, #16]
   2822e:	4922      	ldr	r1, [pc, #136]	; (282b8 <startTrngHW+0x144>)
   28230:	fba1 1202 	umull	r1, r2, r1, r2
   28234:	0912      	lsrs	r2, r2, #4
   28236:	6a61      	ldr	r1, [r4, #36]	; 0x24
   28238:	fb01 f202 	mul.w	r2, r1, r2
   2823c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   28240:	491c      	ldr	r1, [pc, #112]	; (282b4 <startTrngHW+0x140>)
   28242:	03d2      	lsls	r2, r2, #15
   28244:	0992      	lsrs	r2, r2, #6
   28246:	f8c1 21d8 	str.w	r2, [r1, #472]	; 0x1d8
   2824a:	2201      	movs	r2, #1
   2824c:	f8c1 212c 	str.w	r2, [r1, #300]	; 0x12c
   28250:	683a      	ldr	r2, [r7, #0]
   28252:	6829      	ldr	r1, [r5, #0]
   28254:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   28258:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
   2825c:	603a      	str	r2, [r7, #0]
   2825e:	6829      	ldr	r1, [r5, #0]
   28260:	4618      	mov	r0, r3
   28262:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28266:	603a      	str	r2, [r7, #0]
   28268:	b003      	add	sp, #12
   2826a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2826e:	4b13      	ldr	r3, [pc, #76]	; (282bc <startTrngHW+0x148>)
   28270:	4618      	mov	r0, r3
   28272:	b003      	add	sp, #12
   28274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28278:	4b11      	ldr	r3, [pc, #68]	; (282c0 <startTrngHW+0x14c>)
   2827a:	4618      	mov	r0, r3
   2827c:	b003      	add	sp, #12
   2827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   28282:	4b0f      	ldr	r3, [pc, #60]	; (282c0 <startTrngHW+0x14c>)
   28284:	4618      	mov	r0, r3
   28286:	4770      	bx	lr
   28288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2828c:	f8d2 1c0c 	ldr.w	r1, [r2, #3084]	; 0xc0c
   28290:	3101      	adds	r1, #1
   28292:	d006      	beq.n	282a2 <startTrngHW+0x12e>
   28294:	f8d2 2c0c 	ldr.w	r2, [r2, #3084]	; 0xc0c
   28298:	4907      	ldr	r1, [pc, #28]	; (282b8 <startTrngHW+0x144>)
   2829a:	fba1 1202 	umull	r1, r2, r1, r2
   2829e:	0912      	lsrs	r2, r2, #4
   282a0:	e7c9      	b.n	28236 <startTrngHW+0xc2>
   282a2:	2216      	movs	r2, #22
   282a4:	e7c7      	b.n	28236 <startTrngHW+0xc2>
   282a6:	f04f 0803 	mov.w	r8, #3
   282aa:	e791      	b.n	281d0 <startTrngHW+0x5c>
   282ac:	f04f 0802 	mov.w	r8, #2
   282b0:	e78e      	b.n	281d0 <startTrngHW+0x5c>
   282b2:	bf00      	nop
   282b4:	5002b000 	.word	0x5002b000
   282b8:	aaaaaaab 	.word	0xaaaaaaab
   282bc:	00f10c31 	.word	0x00f10c31
   282c0:	00f10c35 	.word	0x00f10c35

000282c4 <LLF_RND_RepetitionCounterTest.part.0>:
   282c4:	b570      	push	{r4, r5, r6, lr}
   282c6:	00c9      	lsls	r1, r1, #3
   282c8:	2400      	movs	r4, #0
   282ca:	1e4e      	subs	r6, r1, #1
   282cc:	f04f 0c01 	mov.w	ip, #1
   282d0:	4625      	mov	r5, r4
   282d2:	46a6      	mov	lr, r4
   282d4:	e008      	b.n	282e8 <LLF_RND_RepetitionCounterTest.part.0+0x24>
   282d6:	459e      	cmp	lr, r3
   282d8:	d015      	beq.n	28306 <LLF_RND_RepetitionCounterTest.part.0+0x42>
   282da:	2501      	movs	r5, #1
   282dc:	45b4      	cmp	ip, r6
   282de:	d817      	bhi.n	28310 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   282e0:	3401      	adds	r4, #1
   282e2:	f10c 0c01 	add.w	ip, ip, #1
   282e6:	469e      	mov	lr, r3
   282e8:	0963      	lsrs	r3, r4, #5
   282ea:	f004 011f 	and.w	r1, r4, #31
   282ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   282f2:	291f      	cmp	r1, #31
   282f4:	fa23 f301 	lsr.w	r3, r3, r1
   282f8:	bf18      	it	ne
   282fa:	f003 0301 	andne.w	r3, r3, #1
   282fe:	2c00      	cmp	r4, #0
   28300:	d1e9      	bne.n	282d6 <LLF_RND_RepetitionCounterTest.part.0+0x12>
   28302:	2501      	movs	r5, #1
   28304:	e7ec      	b.n	282e0 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   28306:	3501      	adds	r5, #1
   28308:	4295      	cmp	r5, r2
   2830a:	d1e7      	bne.n	282dc <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2830c:	4801      	ldr	r0, [pc, #4]	; (28314 <LLF_RND_RepetitionCounterTest.part.0+0x50>)
   2830e:	bd70      	pop	{r4, r5, r6, pc}
   28310:	2000      	movs	r0, #0
   28312:	bd70      	pop	{r4, r5, r6, pc}
   28314:	00f10c36 	.word	0x00f10c36

00028318 <LLF_RND_AdaptiveProportionTest>:
   28318:	2800      	cmp	r0, #0
   2831a:	d03f      	beq.n	2839c <LLF_RND_AdaptiveProportionTest+0x84>
   2831c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28320:	1e4c      	subs	r4, r1, #1
   28322:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   28326:	d228      	bcs.n	2837a <LLF_RND_AdaptiveProportionTest+0x62>
   28328:	b33b      	cbz	r3, 2837a <LLF_RND_AdaptiveProportionTest+0x62>
   2832a:	b332      	cbz	r2, 2837a <LLF_RND_AdaptiveProportionTest+0x62>
   2832c:	f04f 0e00 	mov.w	lr, #0
   28330:	00cf      	lsls	r7, r1, #3
   28332:	4676      	mov	r6, lr
   28334:	4675      	mov	r5, lr
   28336:	4674      	mov	r4, lr
   28338:	f103 38ff 	add.w	r8, r3, #4294967295
   2833c:	0961      	lsrs	r1, r4, #5
   2833e:	f004 0c1f 	and.w	ip, r4, #31
   28342:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   28346:	f1bc 0f1f 	cmp.w	ip, #31
   2834a:	fa21 f10c 	lsr.w	r1, r1, ip
   2834e:	bf18      	it	ne
   28350:	f001 0101 	andne.w	r1, r1, #1
   28354:	b1a4      	cbz	r4, 28380 <LLF_RND_AdaptiveProportionTest+0x68>
   28356:	42ab      	cmp	r3, r5
   28358:	d018      	beq.n	2838c <LLF_RND_AdaptiveProportionTest+0x74>
   2835a:	428e      	cmp	r6, r1
   2835c:	bf08      	it	eq
   2835e:	f10e 0e01 	addeq.w	lr, lr, #1
   28362:	45a8      	cmp	r8, r5
   28364:	d015      	beq.n	28392 <LLF_RND_AdaptiveProportionTest+0x7a>
   28366:	3501      	adds	r5, #1
   28368:	4631      	mov	r1, r6
   2836a:	3401      	adds	r4, #1
   2836c:	42bc      	cmp	r4, r7
   2836e:	d001      	beq.n	28374 <LLF_RND_AdaptiveProportionTest+0x5c>
   28370:	460e      	mov	r6, r1
   28372:	e7e3      	b.n	2833c <LLF_RND_AdaptiveProportionTest+0x24>
   28374:	2000      	movs	r0, #0
   28376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2837a:	4809      	ldr	r0, [pc, #36]	; (283a0 <LLF_RND_AdaptiveProportionTest+0x88>)
   2837c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28380:	f04f 0e01 	mov.w	lr, #1
   28384:	4674      	mov	r4, lr
   28386:	4675      	mov	r5, lr
   28388:	460e      	mov	r6, r1
   2838a:	e7d7      	b.n	2833c <LLF_RND_AdaptiveProportionTest+0x24>
   2838c:	2501      	movs	r5, #1
   2838e:	46ae      	mov	lr, r5
   28390:	e7eb      	b.n	2836a <LLF_RND_AdaptiveProportionTest+0x52>
   28392:	4572      	cmp	r2, lr
   28394:	d3f1      	bcc.n	2837a <LLF_RND_AdaptiveProportionTest+0x62>
   28396:	4631      	mov	r1, r6
   28398:	461d      	mov	r5, r3
   2839a:	e7e6      	b.n	2836a <LLF_RND_AdaptiveProportionTest+0x52>
   2839c:	4800      	ldr	r0, [pc, #0]	; (283a0 <LLF_RND_AdaptiveProportionTest+0x88>)
   2839e:	4770      	bx	lr
   283a0:	00f10c37 	.word	0x00f10c37

000283a4 <getTrngSource>:
   283a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283a8:	b091      	sub	sp, #68	; 0x44
   283aa:	460d      	mov	r5, r1
   283ac:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   283b0:	4681      	mov	r9, r0
   283b2:	2900      	cmp	r1, #0
   283b4:	d14c      	bne.n	28450 <getTrngSource+0xac>
   283b6:	6928      	ldr	r0, [r5, #16]
   283b8:	9006      	str	r0, [sp, #24]
   283ba:	981a      	ldr	r0, [sp, #104]	; 0x68
   283bc:	601c      	str	r4, [r3, #0]
   283be:	2300      	movs	r3, #0
   283c0:	6003      	str	r3, [r0, #0]
   283c2:	2a00      	cmp	r2, #0
   283c4:	f000 8124 	beq.w	28610 <getTrngSource+0x26c>
   283c8:	4b9d      	ldr	r3, [pc, #628]	; (28640 <getTrngSource+0x29c>)
   283ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   283cc:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   283d0:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   283d4:	429a      	cmp	r2, r3
   283d6:	d147      	bne.n	28468 <getTrngSource+0xc4>
   283d8:	290a      	cmp	r1, #10
   283da:	d145      	bne.n	28468 <getTrngSource+0xc4>
   283dc:	f899 3003 	ldrb.w	r3, [r9, #3]
   283e0:	9308      	str	r3, [sp, #32]
   283e2:	f104 0308 	add.w	r3, r4, #8
   283e6:	9a06      	ldr	r2, [sp, #24]
   283e8:	9307      	str	r3, [sp, #28]
   283ea:	4b96      	ldr	r3, [pc, #600]	; (28644 <getTrngSource+0x2a0>)
   283ec:	4c94      	ldr	r4, [pc, #592]	; (28640 <getTrngSource+0x29c>)
   283ee:	fba3 1302 	umull	r1, r3, r3, r2
   283f2:	089b      	lsrs	r3, r3, #2
   283f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   283f8:	eba2 0343 	sub.w	r3, r2, r3, lsl #1
   283fc:	9303      	str	r3, [sp, #12]
   283fe:	2304      	movs	r3, #4
   28400:	9305      	str	r3, [sp, #20]
   28402:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28404:	9e06      	ldr	r6, [sp, #24]
   28406:	601e      	str	r6, [r3, #0]
   28408:	2e00      	cmp	r6, #0
   2840a:	d033      	beq.n	28474 <getTrngSource+0xd0>
   2840c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   28410:	2700      	movs	r7, #0
   28412:	f04f 0a01 	mov.w	sl, #1
   28416:	f000 fcbf 	bl	28d98 <LLF_RND_TurnOffTrng>
   2841a:	2300      	movs	r3, #0
   2841c:	9309      	str	r3, [sp, #36]	; 0x24
   2841e:	f1b9 0f00 	cmp.w	r9, #0
   28422:	f000 80df 	beq.w	285e4 <getTrngSource+0x240>
   28426:	2d00      	cmp	r5, #0
   28428:	f000 80dc 	beq.w	285e4 <getTrngSource+0x240>
   2842c:	9b08      	ldr	r3, [sp, #32]
   2842e:	b1eb      	cbz	r3, 2846c <getTrngSource+0xc8>
   28430:	a908      	add	r1, sp, #32
   28432:	4628      	mov	r0, r5
   28434:	f000 fca0 	bl	28d78 <LLF_RND_GetFastestRosc>
   28438:	2800      	cmp	r0, #0
   2843a:	d03e      	beq.n	284ba <getTrngSource+0x116>
   2843c:	4b82      	ldr	r3, [pc, #520]	; (28648 <getTrngSource+0x2a4>)
   2843e:	4298      	cmp	r0, r3
   28440:	d118      	bne.n	28474 <getTrngSource+0xd0>
   28442:	9003      	str	r0, [sp, #12]
   28444:	f000 fca8 	bl	28d98 <LLF_RND_TurnOffTrng>
   28448:	9803      	ldr	r0, [sp, #12]
   2844a:	b011      	add	sp, #68	; 0x44
   2844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28450:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   28454:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   28458:	3601      	adds	r6, #1
   2845a:	bf14      	ite	ne
   2845c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   28460:	f44f 7004 	moveq.w	r0, #528	; 0x210
   28464:	9006      	str	r0, [sp, #24]
   28466:	e7a8      	b.n	283ba <getTrngSource+0x16>
   28468:	4878      	ldr	r0, [pc, #480]	; (2864c <getTrngSource+0x2a8>)
   2846a:	e7ea      	b.n	28442 <getTrngSource+0x9e>
   2846c:	4878      	ldr	r0, [pc, #480]	; (28650 <getTrngSource+0x2ac>)
   2846e:	4b76      	ldr	r3, [pc, #472]	; (28648 <getTrngSource+0x2a4>)
   28470:	4298      	cmp	r0, r3
   28472:	d0e6      	beq.n	28442 <getTrngSource+0x9e>
   28474:	9b08      	ldr	r3, [sp, #32]
   28476:	2b08      	cmp	r3, #8
   28478:	f000 80c8 	beq.w	2860c <getTrngSource+0x268>
   2847c:	005b      	lsls	r3, r3, #1
   2847e:	2200      	movs	r2, #0
   28480:	9308      	str	r3, [sp, #32]
   28482:	9200      	str	r2, [sp, #0]
   28484:	ab08      	add	r3, sp, #32
   28486:	4629      	mov	r1, r5
   28488:	4648      	mov	r0, r9
   2848a:	f7ff fe73 	bl	28174 <startTrngHW>
   2848e:	4b70      	ldr	r3, [pc, #448]	; (28650 <getTrngSource+0x2ac>)
   28490:	4298      	cmp	r0, r3
   28492:	f000 80b7 	beq.w	28604 <getTrngSource+0x260>
   28496:	2800      	cmp	r0, #0
   28498:	d1d3      	bne.n	28442 <getTrngSource+0x9e>
   2849a:	f8d9 2000 	ldr.w	r2, [r9]
   2849e:	0a13      	lsrs	r3, r2, #8
   284a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   284a4:	4313      	orrs	r3, r2
   284a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   284aa:	f8c9 3000 	str.w	r3, [r9]
   284ae:	9b05      	ldr	r3, [sp, #20]
   284b0:	3b01      	subs	r3, #1
   284b2:	9305      	str	r3, [sp, #20]
   284b4:	d1a5      	bne.n	28402 <getTrngSource+0x5e>
   284b6:	2000      	movs	r0, #0
   284b8:	e7c3      	b.n	28442 <getTrngSource+0x9e>
   284ba:	9808      	ldr	r0, [sp, #32]
   284bc:	4629      	mov	r1, r5
   284be:	f000 fc3d 	bl	28d3c <LLF_RND_GetRoscSampleCnt>
   284c2:	2800      	cmp	r0, #0
   284c4:	d1ba      	bne.n	2843c <getTrngSource+0x98>
   284c6:	9b08      	ldr	r3, [sp, #32]
   284c8:	2b08      	cmp	r3, #8
   284ca:	f000 8095 	beq.w	285f8 <getTrngSource+0x254>
   284ce:	2b04      	cmp	r3, #4
   284d0:	f000 8095 	beq.w	285fe <getTrngSource+0x25a>
   284d4:	f1a3 0302 	sub.w	r3, r3, #2
   284d8:	fab3 f383 	clz	r3, r3
   284dc:	095b      	lsrs	r3, r3, #5
   284de:	9304      	str	r3, [sp, #16]
   284e0:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   284e4:	f8c4 a140 	str.w	sl, [r4, #320]	; 0x140
   284e8:	f8c4 a1c4 	str.w	sl, [r4, #452]	; 0x1c4
   284ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   284ee:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   284f2:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   284f6:	4293      	cmp	r3, r2
   284f8:	d1f6      	bne.n	284e8 <getTrngSource+0x144>
   284fa:	f04f 0b00 	mov.w	fp, #0
   284fe:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   28502:	f04f 30ff 	mov.w	r0, #4294967295
   28506:	f7ff fd07 	bl	27f18 <CC_HalClearInterruptBit>
   2850a:	f06f 031b 	mvn.w	r3, #27
   2850e:	4658      	mov	r0, fp
   28510:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   28514:	f7ff fd0e 	bl	27f34 <CC_HalMaskInterrupt>
   28518:	9b04      	ldr	r3, [sp, #16]
   2851a:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   2851e:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   28522:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   28526:	f7ff fd05 	bl	27f34 <CC_HalMaskInterrupt>
   2852a:	230a      	movs	r3, #10
   2852c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   28530:	692b      	ldr	r3, [r5, #16]
   28532:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   28536:	fbab 2303 	umull	r2, r3, fp, r3
   2853a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   2853c:	091b      	lsrs	r3, r3, #4
   2853e:	fb02 f303 	mul.w	r3, r2, r3
   28542:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28546:	03db      	lsls	r3, r3, #15
   28548:	099b      	lsrs	r3, r3, #6
   2854a:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   2854e:	f8c4 a12c 	str.w	sl, [r4, #300]	; 0x12c
   28552:	9908      	ldr	r1, [sp, #32]
   28554:	f8d9 2000 	ldr.w	r2, [r9]
   28558:	020b      	lsls	r3, r1, #8
   2855a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2855e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   28562:	4313      	orrs	r3, r2
   28564:	f8c9 3000 	str.w	r3, [r9]
   28568:	a809      	add	r0, sp, #36	; 0x24
   2856a:	f000 fbd7 	bl	28d1c <LLF_RND_WaitRngInterrupt>
   2856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28570:	f003 031a 	and.w	r3, r3, #26
   28574:	4303      	orrs	r3, r0
   28576:	f47f af7d 	bne.w	28474 <getTrngSource+0xd0>
   2857a:	fbab 3b06 	umull	r3, fp, fp, r6
   2857e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   28582:	930a      	str	r3, [sp, #40]	; 0x28
   28584:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   28588:	930b      	str	r3, [sp, #44]	; 0x2c
   2858a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2858e:	930c      	str	r3, [sp, #48]	; 0x30
   28590:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   28594:	930d      	str	r3, [sp, #52]	; 0x34
   28596:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2859a:	930e      	str	r3, [sp, #56]	; 0x38
   2859c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   285a0:	930f      	str	r3, [sp, #60]	; 0x3c
   285a2:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   285a6:	d101      	bne.n	285ac <getTrngSource+0x208>
   285a8:	9b03      	ldr	r3, [sp, #12]
   285aa:	b9eb      	cbnz	r3, 285e8 <getTrngSource+0x244>
   285ac:	4640      	mov	r0, r8
   285ae:	2218      	movs	r2, #24
   285b0:	a90a      	add	r1, sp, #40	; 0x28
   285b2:	3e18      	subs	r6, #24
   285b4:	f108 0818 	add.w	r8, r8, #24
   285b8:	f7ff fd3c 	bl	28034 <CC_PalMemCopyPlat>
   285bc:	3701      	adds	r7, #1
   285be:	2e00      	cmp	r6, #0
   285c0:	f47f af29 	bne.w	28416 <getTrngSource+0x72>
   285c4:	9b06      	ldr	r3, [sp, #24]
   285c6:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   285ca:	d836      	bhi.n	2863a <getTrngSource+0x296>
   285cc:	9e07      	ldr	r6, [sp, #28]
   285ce:	696a      	ldr	r2, [r5, #20]
   285d0:	4619      	mov	r1, r3
   285d2:	4630      	mov	r0, r6
   285d4:	461f      	mov	r7, r3
   285d6:	f7ff fe75 	bl	282c4 <LLF_RND_RepetitionCounterTest.part.0>
   285da:	b320      	cbz	r0, 28626 <getTrngSource+0x282>
   285dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   285de:	2300      	movs	r3, #0
   285e0:	6013      	str	r3, [r2, #0]
   285e2:	e72b      	b.n	2843c <getTrngSource+0x98>
   285e4:	481b      	ldr	r0, [pc, #108]	; (28654 <getTrngSource+0x2b0>)
   285e6:	e729      	b.n	2843c <getTrngSource+0x98>
   285e8:	4640      	mov	r0, r8
   285ea:	461a      	mov	r2, r3
   285ec:	a90a      	add	r1, sp, #40	; 0x28
   285ee:	1af6      	subs	r6, r6, r3
   285f0:	4498      	add	r8, r3
   285f2:	f7ff fd1f 	bl	28034 <CC_PalMemCopyPlat>
   285f6:	e7e1      	b.n	285bc <getTrngSource+0x218>
   285f8:	2303      	movs	r3, #3
   285fa:	9304      	str	r3, [sp, #16]
   285fc:	e770      	b.n	284e0 <getTrngSource+0x13c>
   285fe:	2302      	movs	r3, #2
   28600:	9304      	str	r3, [sp, #16]
   28602:	e76d      	b.n	284e0 <getTrngSource+0x13c>
   28604:	6a2b      	ldr	r3, [r5, #32]
   28606:	2b00      	cmp	r3, #0
   28608:	f43f af1b 	beq.w	28442 <getTrngSource+0x9e>
   2860c:	4812      	ldr	r0, [pc, #72]	; (28658 <getTrngSource+0x2b4>)
   2860e:	e718      	b.n	28442 <getTrngSource+0x9e>
   28610:	9100      	str	r1, [sp, #0]
   28612:	ab08      	add	r3, sp, #32
   28614:	2201      	movs	r2, #1
   28616:	4629      	mov	r1, r5
   28618:	4648      	mov	r0, r9
   2861a:	f7ff fdab 	bl	28174 <startTrngHW>
   2861e:	2800      	cmp	r0, #0
   28620:	f43f aedf 	beq.w	283e2 <getTrngSource+0x3e>
   28624:	e70d      	b.n	28442 <getTrngSource+0x9e>
   28626:	69aa      	ldr	r2, [r5, #24]
   28628:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2862c:	4639      	mov	r1, r7
   2862e:	4630      	mov	r0, r6
   28630:	f7ff fe72 	bl	28318 <LLF_RND_AdaptiveProportionTest>
   28634:	2800      	cmp	r0, #0
   28636:	d1d1      	bne.n	285dc <getTrngSource+0x238>
   28638:	e73d      	b.n	284b6 <getTrngSource+0x112>
   2863a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2863c:	601e      	str	r6, [r3, #0]
   2863e:	e719      	b.n	28474 <getTrngSource+0xd0>
   28640:	5002b000 	.word	0x5002b000
   28644:	aaaaaaab 	.word	0xaaaaaaab
   28648:	00f10c02 	.word	0x00f10c02
   2864c:	00f10c30 	.word	0x00f10c30
   28650:	00f10c31 	.word	0x00f10c31
   28654:	00f10c35 	.word	0x00f10c35
   28658:	00f10c32 	.word	0x00f10c32

0002865c <LLF_RND_GetTrngSource>:
   2865c:	b410      	push	{r4}
   2865e:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   28662:	9401      	str	r4, [sp, #4]
   28664:	9c03      	ldr	r4, [sp, #12]
   28666:	9402      	str	r4, [sp, #8]
   28668:	2400      	movs	r4, #0
   2866a:	9403      	str	r4, [sp, #12]
   2866c:	bc10      	pop	{r4}
   2866e:	f7ff be99 	b.w	283a4 <getTrngSource>
   28672:	bf00      	nop

00028674 <LLF_RND_RunTrngStartupTest>:
   28674:	b510      	push	{r4, lr}
   28676:	b086      	sub	sp, #24
   28678:	ab05      	add	r3, sp, #20
   2867a:	2401      	movs	r4, #1
   2867c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   28680:	9300      	str	r3, [sp, #0]
   28682:	2200      	movs	r2, #0
   28684:	ab04      	add	r3, sp, #16
   28686:	f7ff fe8d 	bl	283a4 <getTrngSource>
   2868a:	b006      	add	sp, #24
   2868c:	bd10      	pop	{r4, pc}
   2868e:	bf00      	nop

00028690 <mbedtls_hardware_poll>:
   28690:	b5f0      	push	{r4, r5, r6, r7, lr}
   28692:	b089      	sub	sp, #36	; 0x24
   28694:	9205      	str	r2, [sp, #20]
   28696:	2900      	cmp	r1, #0
   28698:	d064      	beq.n	28764 <mbedtls_hardware_poll+0xd4>
   2869a:	461c      	mov	r4, r3
   2869c:	2b00      	cmp	r3, #0
   2869e:	d061      	beq.n	28764 <mbedtls_hardware_poll+0xd4>
   286a0:	4615      	mov	r5, r2
   286a2:	2a00      	cmp	r2, #0
   286a4:	d05e      	beq.n	28764 <mbedtls_hardware_poll+0xd4>
   286a6:	4f31      	ldr	r7, [pc, #196]	; (2876c <mbedtls_hardware_poll+0xdc>)
   286a8:	460e      	mov	r6, r1
   286aa:	6838      	ldr	r0, [r7, #0]
   286ac:	f04f 31ff 	mov.w	r1, #4294967295
   286b0:	f7ff fcdc 	bl	2806c <CC_PalMutexLock>
   286b4:	2800      	cmp	r0, #0
   286b6:	d14b      	bne.n	28750 <mbedtls_hardware_poll+0xc0>
   286b8:	2000      	movs	r0, #0
   286ba:	f7ff fd07 	bl	280cc <CC_PalPowerSaveModeSelect>
   286be:	2800      	cmp	r0, #0
   286c0:	d142      	bne.n	28748 <mbedtls_hardware_poll+0xb8>
   286c2:	482b      	ldr	r0, [pc, #172]	; (28770 <mbedtls_hardware_poll+0xe0>)
   286c4:	f000 fa9a 	bl	28bfc <RNG_PLAT_SetUserRngParameters>
   286c8:	b1d8      	cbz	r0, 28702 <mbedtls_hardware_poll+0x72>
   286ca:	2001      	movs	r0, #1
   286cc:	f04f 36ff 	mov.w	r6, #4294967295
   286d0:	f7ff fcfc 	bl	280cc <CC_PalPowerSaveModeSelect>
   286d4:	2800      	cmp	r0, #0
   286d6:	d133      	bne.n	28740 <mbedtls_hardware_poll+0xb0>
   286d8:	4826      	ldr	r0, [pc, #152]	; (28774 <mbedtls_hardware_poll+0xe4>)
   286da:	f44f 7108 	mov.w	r1, #544	; 0x220
   286de:	f7fe fe5f 	bl	273a0 <mbedtls_zeroize_internal>
   286e2:	4825      	ldr	r0, [pc, #148]	; (28778 <mbedtls_hardware_poll+0xe8>)
   286e4:	2104      	movs	r1, #4
   286e6:	f7fe fe5b 	bl	273a0 <mbedtls_zeroize_internal>
   286ea:	4821      	ldr	r0, [pc, #132]	; (28770 <mbedtls_hardware_poll+0xe0>)
   286ec:	2128      	movs	r1, #40	; 0x28
   286ee:	f7fe fe57 	bl	273a0 <mbedtls_zeroize_internal>
   286f2:	6838      	ldr	r0, [r7, #0]
   286f4:	f7ff fcc2 	bl	2807c <CC_PalMutexUnlock>
   286f8:	2800      	cmp	r0, #0
   286fa:	d12d      	bne.n	28758 <mbedtls_hardware_poll+0xc8>
   286fc:	4630      	mov	r0, r6
   286fe:	b009      	add	sp, #36	; 0x24
   28700:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28702:	4b1c      	ldr	r3, [pc, #112]	; (28774 <mbedtls_hardware_poll+0xe4>)
   28704:	9302      	str	r3, [sp, #8]
   28706:	ab07      	add	r3, sp, #28
   28708:	9003      	str	r0, [sp, #12]
   2870a:	4602      	mov	r2, r0
   2870c:	9300      	str	r3, [sp, #0]
   2870e:	4918      	ldr	r1, [pc, #96]	; (28770 <mbedtls_hardware_poll+0xe0>)
   28710:	4819      	ldr	r0, [pc, #100]	; (28778 <mbedtls_hardware_poll+0xe8>)
   28712:	9401      	str	r4, [sp, #4]
   28714:	ab05      	add	r3, sp, #20
   28716:	f7ff ffa1 	bl	2865c <LLF_RND_GetTrngSource>
   2871a:	4603      	mov	r3, r0
   2871c:	2800      	cmp	r0, #0
   2871e:	d1d4      	bne.n	286ca <mbedtls_hardware_poll+0x3a>
   28720:	6822      	ldr	r2, [r4, #0]
   28722:	42aa      	cmp	r2, r5
   28724:	d3d1      	bcc.n	286ca <mbedtls_hardware_poll+0x3a>
   28726:	9907      	ldr	r1, [sp, #28]
   28728:	4630      	mov	r0, r6
   2872a:	3108      	adds	r1, #8
   2872c:	462a      	mov	r2, r5
   2872e:	461e      	mov	r6, r3
   28730:	f7ff fc80 	bl	28034 <CC_PalMemCopyPlat>
   28734:	6025      	str	r5, [r4, #0]
   28736:	2001      	movs	r0, #1
   28738:	f7ff fcc8 	bl	280cc <CC_PalPowerSaveModeSelect>
   2873c:	2800      	cmp	r0, #0
   2873e:	d0cb      	beq.n	286d8 <mbedtls_hardware_poll+0x48>
   28740:	480e      	ldr	r0, [pc, #56]	; (2877c <mbedtls_hardware_poll+0xec>)
   28742:	f7fe fd17 	bl	27174 <CC_PalAbort>
   28746:	e7c7      	b.n	286d8 <mbedtls_hardware_poll+0x48>
   28748:	480d      	ldr	r0, [pc, #52]	; (28780 <mbedtls_hardware_poll+0xf0>)
   2874a:	f7fe fd13 	bl	27174 <CC_PalAbort>
   2874e:	e7b8      	b.n	286c2 <mbedtls_hardware_poll+0x32>
   28750:	480c      	ldr	r0, [pc, #48]	; (28784 <mbedtls_hardware_poll+0xf4>)
   28752:	f7fe fd0f 	bl	27174 <CC_PalAbort>
   28756:	e7af      	b.n	286b8 <mbedtls_hardware_poll+0x28>
   28758:	480b      	ldr	r0, [pc, #44]	; (28788 <mbedtls_hardware_poll+0xf8>)
   2875a:	f7fe fd0b 	bl	27174 <CC_PalAbort>
   2875e:	4630      	mov	r0, r6
   28760:	b009      	add	sp, #36	; 0x24
   28762:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28764:	f04f 36ff 	mov.w	r6, #4294967295
   28768:	e7c8      	b.n	286fc <mbedtls_hardware_poll+0x6c>
   2876a:	bf00      	nop
   2876c:	2000081c 	.word	0x2000081c
   28770:	20004020 	.word	0x20004020
   28774:	20003e00 	.word	0x20003e00
   28778:	20003dfc 	.word	0x20003dfc
   2877c:	0002f058 	.word	0x0002f058
   28780:	0002f038 	.word	0x0002f038
   28784:	0002f020 	.word	0x0002f020
   28788:	0002f0b0 	.word	0x0002f0b0

0002878c <cc_mbedtls_aes_init>:
   2878c:	b510      	push	{r4, lr}
   2878e:	4604      	mov	r4, r0
   28790:	b130      	cbz	r0, 287a0 <cc_mbedtls_aes_init+0x14>
   28792:	2200      	movs	r2, #0
   28794:	2301      	movs	r3, #1
   28796:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2879a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2879e:	bd10      	pop	{r4, pc}
   287a0:	4801      	ldr	r0, [pc, #4]	; (287a8 <cc_mbedtls_aes_init+0x1c>)
   287a2:	f7fe fce7 	bl	27174 <CC_PalAbort>
   287a6:	e7f4      	b.n	28792 <cc_mbedtls_aes_init+0x6>
   287a8:	0002f0c8 	.word	0x0002f0c8

000287ac <cc_mbedtls_aes_free>:
   287ac:	b118      	cbz	r0, 287b6 <cc_mbedtls_aes_free+0xa>
   287ae:	2274      	movs	r2, #116	; 0x74
   287b0:	2100      	movs	r1, #0
   287b2:	f7ff bc41 	b.w	28038 <CC_PalMemSetPlat>
   287b6:	4770      	bx	lr

000287b8 <cc_mbedtls_aes_setkey_enc>:
   287b8:	b190      	cbz	r0, 287e0 <cc_mbedtls_aes_setkey_enc+0x28>
   287ba:	b1a1      	cbz	r1, 287e6 <cc_mbedtls_aes_setkey_enc+0x2e>
   287bc:	b510      	push	{r4, lr}
   287be:	2a80      	cmp	r2, #128	; 0x80
   287c0:	f04f 0400 	mov.w	r4, #0
   287c4:	6384      	str	r4, [r0, #56]	; 0x38
   287c6:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   287ca:	d106      	bne.n	287da <cc_mbedtls_aes_setkey_enc+0x22>
   287cc:	2210      	movs	r2, #16
   287ce:	6304      	str	r4, [r0, #48]	; 0x30
   287d0:	4410      	add	r0, r2
   287d2:	f7ff fc2f 	bl	28034 <CC_PalMemCopyPlat>
   287d6:	4620      	mov	r0, r4
   287d8:	bd10      	pop	{r4, pc}
   287da:	f06f 001f 	mvn.w	r0, #31
   287de:	bd10      	pop	{r4, pc}
   287e0:	f06f 0021 	mvn.w	r0, #33	; 0x21
   287e4:	4770      	bx	lr
   287e6:	f06f 001f 	mvn.w	r0, #31
   287ea:	4770      	bx	lr

000287ec <cc_mbedtls_aes_crypt_ecb>:
   287ec:	b328      	cbz	r0, 2883a <cc_mbedtls_aes_crypt_ecb+0x4e>
   287ee:	b322      	cbz	r2, 2883a <cc_mbedtls_aes_crypt_ecb+0x4e>
   287f0:	b31b      	cbz	r3, 2883a <cc_mbedtls_aes_crypt_ecb+0x4e>
   287f2:	2901      	cmp	r1, #1
   287f4:	d821      	bhi.n	2883a <cc_mbedtls_aes_crypt_ecb+0x4e>
   287f6:	b570      	push	{r4, r5, r6, lr}
   287f8:	4604      	mov	r4, r0
   287fa:	6b81      	ldr	r1, [r0, #56]	; 0x38
   287fc:	b086      	sub	sp, #24
   287fe:	d017      	beq.n	28830 <cc_mbedtls_aes_crypt_ecb+0x44>
   28800:	2901      	cmp	r1, #1
   28802:	d117      	bne.n	28834 <cc_mbedtls_aes_crypt_ecb+0x48>
   28804:	2510      	movs	r5, #16
   28806:	2100      	movs	r1, #0
   28808:	eb0d 0605 	add.w	r6, sp, r5
   2880c:	6361      	str	r1, [r4, #52]	; 0x34
   2880e:	4610      	mov	r0, r2
   28810:	9500      	str	r5, [sp, #0]
   28812:	9601      	str	r6, [sp, #4]
   28814:	aa02      	add	r2, sp, #8
   28816:	4629      	mov	r1, r5
   28818:	f000 faca 	bl	28db0 <SetDataBuffersInfo>
   2881c:	b950      	cbnz	r0, 28834 <cc_mbedtls_aes_crypt_ecb+0x48>
   2881e:	462b      	mov	r3, r5
   28820:	4632      	mov	r2, r6
   28822:	a902      	add	r1, sp, #8
   28824:	4620      	mov	r0, r4
   28826:	f000 fd4b 	bl	292c0 <ProcessAesDrv>
   2882a:	b918      	cbnz	r0, 28834 <cc_mbedtls_aes_crypt_ecb+0x48>
   2882c:	b006      	add	sp, #24
   2882e:	bd70      	pop	{r4, r5, r6, pc}
   28830:	2900      	cmp	r1, #0
   28832:	d0e7      	beq.n	28804 <cc_mbedtls_aes_crypt_ecb+0x18>
   28834:	f06f 0021 	mvn.w	r0, #33	; 0x21
   28838:	e7f8      	b.n	2882c <cc_mbedtls_aes_crypt_ecb+0x40>
   2883a:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2883e:	4770      	bx	lr

00028840 <cc_mbedtls_sha256_init>:
   28840:	b510      	push	{r4, lr}
   28842:	4604      	mov	r4, r0
   28844:	b128      	cbz	r0, 28852 <cc_mbedtls_sha256_init+0x12>
   28846:	4620      	mov	r0, r4
   28848:	21f4      	movs	r1, #244	; 0xf4
   2884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2884e:	f7ff bbf5 	b.w	2803c <CC_PalMemSetZeroPlat>
   28852:	4804      	ldr	r0, [pc, #16]	; (28864 <cc_mbedtls_sha256_init+0x24>)
   28854:	f7fe fc8e 	bl	27174 <CC_PalAbort>
   28858:	4620      	mov	r0, r4
   2885a:	21f4      	movs	r1, #244	; 0xf4
   2885c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   28860:	f7ff bbec 	b.w	2803c <CC_PalMemSetZeroPlat>
   28864:	0002f0dc 	.word	0x0002f0dc

00028868 <cc_mbedtls_sha256_free>:
   28868:	b110      	cbz	r0, 28870 <cc_mbedtls_sha256_free+0x8>
   2886a:	21f4      	movs	r1, #244	; 0xf4
   2886c:	f7fe bd98 	b.w	273a0 <mbedtls_zeroize_internal>
   28870:	4770      	bx	lr
   28872:	bf00      	nop

00028874 <cc_mbedtls_sha256_starts>:
   28874:	b508      	push	{r3, lr}
   28876:	b161      	cbz	r1, 28892 <cc_mbedtls_sha256_starts+0x1e>
   28878:	2901      	cmp	r1, #1
   2887a:	d107      	bne.n	2888c <cc_mbedtls_sha256_starts+0x18>
   2887c:	2102      	movs	r1, #2
   2887e:	f000 f85b 	bl	28938 <mbedtls_sha_starts_internal>
   28882:	2800      	cmp	r0, #0
   28884:	bf18      	it	ne
   28886:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2888a:	bd08      	pop	{r3, pc}
   2888c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   28890:	bd08      	pop	{r3, pc}
   28892:	2101      	movs	r1, #1
   28894:	f000 f850 	bl	28938 <mbedtls_sha_starts_internal>
   28898:	e7f3      	b.n	28882 <cc_mbedtls_sha256_starts+0xe>
   2889a:	bf00      	nop

0002889c <cc_mbedtls_sha256_update>:
   2889c:	b530      	push	{r4, r5, lr}
   2889e:	4605      	mov	r5, r0
   288a0:	1888      	adds	r0, r1, r2
   288a2:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   288a6:	b0a1      	sub	sp, #132	; 0x84
   288a8:	460b      	mov	r3, r1
   288aa:	4614      	mov	r4, r2
   288ac:	d801      	bhi.n	288b2 <cc_mbedtls_sha256_update+0x16>
   288ae:	2a80      	cmp	r2, #128	; 0x80
   288b0:	d90c      	bls.n	288cc <cc_mbedtls_sha256_update+0x30>
   288b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   288b6:	d917      	bls.n	288e8 <cc_mbedtls_sha256_update+0x4c>
   288b8:	4622      	mov	r2, r4
   288ba:	4619      	mov	r1, r3
   288bc:	4628      	mov	r0, r5
   288be:	f000 f87d 	bl	289bc <mbedtls_sha_update_internal>
   288c2:	4604      	mov	r4, r0
   288c4:	b984      	cbnz	r4, 288e8 <cc_mbedtls_sha256_update+0x4c>
   288c6:	4620      	mov	r0, r4
   288c8:	b021      	add	sp, #132	; 0x84
   288ca:	bd30      	pop	{r4, r5, pc}
   288cc:	4668      	mov	r0, sp
   288ce:	f7ff fbb1 	bl	28034 <CC_PalMemCopyPlat>
   288d2:	4622      	mov	r2, r4
   288d4:	4669      	mov	r1, sp
   288d6:	4628      	mov	r0, r5
   288d8:	f000 f870 	bl	289bc <mbedtls_sha_update_internal>
   288dc:	2180      	movs	r1, #128	; 0x80
   288de:	4604      	mov	r4, r0
   288e0:	4668      	mov	r0, sp
   288e2:	f7ff fbab 	bl	2803c <CC_PalMemSetZeroPlat>
   288e6:	e7ed      	b.n	288c4 <cc_mbedtls_sha256_update+0x28>
   288e8:	f06f 0436 	mvn.w	r4, #54	; 0x36
   288ec:	e7eb      	b.n	288c6 <cc_mbedtls_sha256_update+0x2a>
   288ee:	bf00      	nop

000288f0 <cc_mbedtls_sha256_finish>:
   288f0:	b570      	push	{r4, r5, r6, lr}
   288f2:	b1e8      	cbz	r0, 28930 <cc_mbedtls_sha256_finish+0x40>
   288f4:	460e      	mov	r6, r1
   288f6:	b1d9      	cbz	r1, 28930 <cc_mbedtls_sha256_finish+0x40>
   288f8:	4604      	mov	r4, r0
   288fa:	f000 f831 	bl	28960 <mbedtls_sha_finish_internal>
   288fe:	4605      	mov	r5, r0
   28900:	b9b0      	cbnz	r0, 28930 <cc_mbedtls_sha256_finish+0x40>
   28902:	6823      	ldr	r3, [r4, #0]
   28904:	2b01      	cmp	r3, #1
   28906:	d00b      	beq.n	28920 <cc_mbedtls_sha256_finish+0x30>
   28908:	2b02      	cmp	r3, #2
   2890a:	d001      	beq.n	28910 <cc_mbedtls_sha256_finish+0x20>
   2890c:	4628      	mov	r0, r5
   2890e:	bd70      	pop	{r4, r5, r6, pc}
   28910:	221c      	movs	r2, #28
   28912:	f104 0108 	add.w	r1, r4, #8
   28916:	4630      	mov	r0, r6
   28918:	f7ff fb8c 	bl	28034 <CC_PalMemCopyPlat>
   2891c:	4628      	mov	r0, r5
   2891e:	bd70      	pop	{r4, r5, r6, pc}
   28920:	2220      	movs	r2, #32
   28922:	f104 0108 	add.w	r1, r4, #8
   28926:	4630      	mov	r0, r6
   28928:	f7ff fb84 	bl	28034 <CC_PalMemCopyPlat>
   2892c:	4628      	mov	r0, r5
   2892e:	bd70      	pop	{r4, r5, r6, pc}
   28930:	f06f 0536 	mvn.w	r5, #54	; 0x36
   28934:	e7ea      	b.n	2890c <cc_mbedtls_sha256_finish+0x1c>
   28936:	bf00      	nop

00028938 <mbedtls_sha_starts_internal>:
   28938:	b178      	cbz	r0, 2895a <mbedtls_sha_starts_internal+0x22>
   2893a:	b538      	push	{r3, r4, r5, lr}
   2893c:	4604      	mov	r4, r0
   2893e:	460d      	mov	r5, r1
   28940:	21f0      	movs	r1, #240	; 0xf0
   28942:	f7ff fb7b 	bl	2803c <CC_PalMemSetZeroPlat>
   28946:	2340      	movs	r3, #64	; 0x40
   28948:	6025      	str	r5, [r4, #0]
   2894a:	65e3      	str	r3, [r4, #92]	; 0x5c
   2894c:	4620      	mov	r0, r4
   2894e:	f000 fa63 	bl	28e18 <InitHashDrv>
   28952:	3800      	subs	r0, #0
   28954:	bf18      	it	ne
   28956:	2001      	movne	r0, #1
   28958:	bd38      	pop	{r3, r4, r5, pc}
   2895a:	2001      	movs	r0, #1
   2895c:	4770      	bx	lr
   2895e:	bf00      	nop

00028960 <mbedtls_sha_finish_internal>:
   28960:	b570      	push	{r4, r5, r6, lr}
   28962:	6e05      	ldr	r5, [r0, #96]	; 0x60
   28964:	b0a4      	sub	sp, #144	; 0x90
   28966:	4604      	mov	r4, r0
   28968:	ae04      	add	r6, sp, #16
   2896a:	b9e5      	cbnz	r5, 289a6 <mbedtls_sha_finish_internal+0x46>
   2896c:	2201      	movs	r2, #1
   2896e:	2300      	movs	r3, #0
   28970:	6062      	str	r2, [r4, #4]
   28972:	4630      	mov	r0, r6
   28974:	e9cd 3300 	strd	r3, r3, [sp]
   28978:	aa02      	add	r2, sp, #8
   2897a:	4629      	mov	r1, r5
   2897c:	f000 fa18 	bl	28db0 <SetDataBuffersInfo>
   28980:	b110      	cbz	r0, 28988 <mbedtls_sha_finish_internal+0x28>
   28982:	2001      	movs	r0, #1
   28984:	b024      	add	sp, #144	; 0x90
   28986:	bd70      	pop	{r4, r5, r6, pc}
   28988:	462a      	mov	r2, r5
   2898a:	a902      	add	r1, sp, #8
   2898c:	4620      	mov	r0, r4
   2898e:	f000 fa6d 	bl	28e6c <ProcessHashDrv>
   28992:	2800      	cmp	r0, #0
   28994:	d1f5      	bne.n	28982 <mbedtls_sha_finish_internal+0x22>
   28996:	4620      	mov	r0, r4
   28998:	f000 fb7e 	bl	29098 <FinishHashDrv>
   2899c:	2800      	cmp	r0, #0
   2899e:	d1f0      	bne.n	28982 <mbedtls_sha_finish_internal+0x22>
   289a0:	6620      	str	r0, [r4, #96]	; 0x60
   289a2:	b024      	add	sp, #144	; 0x90
   289a4:	bd70      	pop	{r4, r5, r6, pc}
   289a6:	2d80      	cmp	r5, #128	; 0x80
   289a8:	462a      	mov	r2, r5
   289aa:	f100 0164 	add.w	r1, r0, #100	; 0x64
   289ae:	bf28      	it	cs
   289b0:	2280      	movcs	r2, #128	; 0x80
   289b2:	4630      	mov	r0, r6
   289b4:	f7ff fb3e 	bl	28034 <CC_PalMemCopyPlat>
   289b8:	6e25      	ldr	r5, [r4, #96]	; 0x60
   289ba:	e7d7      	b.n	2896c <mbedtls_sha_finish_internal+0xc>

000289bc <mbedtls_sha_update_internal>:
   289bc:	2800      	cmp	r0, #0
   289be:	f000 80cd 	beq.w	28b5c <mbedtls_sha_update_internal+0x1a0>
   289c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   289c6:	4615      	mov	r5, r2
   289c8:	b0a5      	sub	sp, #148	; 0x94
   289ca:	2a00      	cmp	r2, #0
   289cc:	f000 80b4 	beq.w	28b38 <mbedtls_sha_update_internal+0x17c>
   289d0:	460f      	mov	r7, r1
   289d2:	2900      	cmp	r1, #0
   289d4:	f000 80ac 	beq.w	28b30 <mbedtls_sha_update_internal+0x174>
   289d8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   289dc:	4606      	mov	r6, r0
   289de:	6e00      	ldr	r0, [r0, #96]	; 0x60
   289e0:	d37d      	bcc.n	28ade <mbedtls_sha_update_internal+0x122>
   289e2:	f64f 78ff 	movw	r8, #65535	; 0xffff
   289e6:	f106 0964 	add.w	r9, r6, #100	; 0x64
   289ea:	e014      	b.n	28a16 <mbedtls_sha_update_internal+0x5a>
   289ec:	4283      	cmp	r3, r0
   289ee:	46ba      	mov	sl, r7
   289f0:	f64f 74ff 	movw	r4, #65535	; 0xffff
   289f4:	d029      	beq.n	28a4a <mbedtls_sha_update_internal+0x8e>
   289f6:	fbb4 fbf3 	udiv	fp, r4, r3
   289fa:	fb03 fb0b 	mul.w	fp, r3, fp
   289fe:	f1bb 0f00 	cmp.w	fp, #0
   28a02:	d144      	bne.n	28a8e <mbedtls_sha_update_internal+0xd2>
   28a04:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   28a08:	4447      	add	r7, r8
   28a0a:	3dff      	subs	r5, #255	; 0xff
   28a0c:	2c00      	cmp	r4, #0
   28a0e:	d159      	bne.n	28ac4 <mbedtls_sha_update_internal+0x108>
   28a10:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   28a14:	d363      	bcc.n	28ade <mbedtls_sha_update_internal+0x122>
   28a16:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   28a18:	1a1c      	subs	r4, r3, r0
   28a1a:	fbb4 f2f3 	udiv	r2, r4, r3
   28a1e:	fb03 4412 	mls	r4, r3, r2, r4
   28a22:	2c00      	cmp	r4, #0
   28a24:	d0e2      	beq.n	289ec <mbedtls_sha_update_internal+0x30>
   28a26:	4544      	cmp	r4, r8
   28a28:	bf28      	it	cs
   28a2a:	4644      	movcs	r4, r8
   28a2c:	4622      	mov	r2, r4
   28a2e:	4448      	add	r0, r9
   28a30:	4639      	mov	r1, r7
   28a32:	f7ff faff 	bl	28034 <CC_PalMemCopyPlat>
   28a36:	6e30      	ldr	r0, [r6, #96]	; 0x60
   28a38:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   28a3a:	4420      	add	r0, r4
   28a3c:	4283      	cmp	r3, r0
   28a3e:	eb07 0a04 	add.w	sl, r7, r4
   28a42:	6630      	str	r0, [r6, #96]	; 0x60
   28a44:	eba8 0404 	sub.w	r4, r8, r4
   28a48:	d1d5      	bne.n	289f6 <mbedtls_sha_update_internal+0x3a>
   28a4a:	2b80      	cmp	r3, #128	; 0x80
   28a4c:	bf28      	it	cs
   28a4e:	2380      	movcs	r3, #128	; 0x80
   28a50:	461a      	mov	r2, r3
   28a52:	4649      	mov	r1, r9
   28a54:	a804      	add	r0, sp, #16
   28a56:	f7ff faed 	bl	28034 <CC_PalMemCopyPlat>
   28a5a:	2300      	movs	r3, #0
   28a5c:	e9cd 3300 	strd	r3, r3, [sp]
   28a60:	aa02      	add	r2, sp, #8
   28a62:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   28a64:	a804      	add	r0, sp, #16
   28a66:	f000 f9a3 	bl	28db0 <SetDataBuffersInfo>
   28a6a:	2800      	cmp	r0, #0
   28a6c:	d160      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28a6e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   28a70:	a902      	add	r1, sp, #8
   28a72:	4630      	mov	r0, r6
   28a74:	f000 f9fa 	bl	28e6c <ProcessHashDrv>
   28a78:	2800      	cmp	r0, #0
   28a7a:	d159      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28a7c:	6df3      	ldr	r3, [r6, #92]	; 0x5c
   28a7e:	fbb4 fbf3 	udiv	fp, r4, r3
   28a82:	fb03 fb0b 	mul.w	fp, r3, fp
   28a86:	6630      	str	r0, [r6, #96]	; 0x60
   28a88:	f1bb 0f00 	cmp.w	fp, #0
   28a8c:	d0ba      	beq.n	28a04 <mbedtls_sha_update_internal+0x48>
   28a8e:	2300      	movs	r3, #0
   28a90:	e9cd 3300 	strd	r3, r3, [sp]
   28a94:	aa02      	add	r2, sp, #8
   28a96:	4659      	mov	r1, fp
   28a98:	4650      	mov	r0, sl
   28a9a:	f000 f989 	bl	28db0 <SetDataBuffersInfo>
   28a9e:	2800      	cmp	r0, #0
   28aa0:	d146      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28aa2:	a902      	add	r1, sp, #8
   28aa4:	465a      	mov	r2, fp
   28aa6:	4630      	mov	r0, r6
   28aa8:	f000 f9e0 	bl	28e6c <ProcessHashDrv>
   28aac:	2800      	cmp	r0, #0
   28aae:	d13f      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28ab0:	f5a5 457f 	sub.w	r5, r5, #65280	; 0xff00
   28ab4:	eba4 040b 	sub.w	r4, r4, fp
   28ab8:	6e30      	ldr	r0, [r6, #96]	; 0x60
   28aba:	44da      	add	sl, fp
   28abc:	4447      	add	r7, r8
   28abe:	3dff      	subs	r5, #255	; 0xff
   28ac0:	2c00      	cmp	r4, #0
   28ac2:	d0a5      	beq.n	28a10 <mbedtls_sha_update_internal+0x54>
   28ac4:	3019      	adds	r0, #25
   28ac6:	4651      	mov	r1, sl
   28ac8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   28acc:	4622      	mov	r2, r4
   28ace:	f7ff fab1 	bl	28034 <CC_PalMemCopyPlat>
   28ad2:	6e30      	ldr	r0, [r6, #96]	; 0x60
   28ad4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   28ad8:	4420      	add	r0, r4
   28ada:	6630      	str	r0, [r6, #96]	; 0x60
   28adc:	d29b      	bcs.n	28a16 <mbedtls_sha_update_internal+0x5a>
   28ade:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   28ae0:	1a14      	subs	r4, r2, r0
   28ae2:	fbb4 f3f2 	udiv	r3, r4, r2
   28ae6:	fb02 4413 	mls	r4, r2, r3, r4
   28aea:	42ac      	cmp	r4, r5
   28aec:	bf28      	it	cs
   28aee:	462c      	movcs	r4, r5
   28af0:	bb34      	cbnz	r4, 28b40 <mbedtls_sha_update_internal+0x184>
   28af2:	4290      	cmp	r0, r2
   28af4:	d034      	beq.n	28b60 <mbedtls_sha_update_internal+0x1a4>
   28af6:	fbb5 f4f2 	udiv	r4, r5, r2
   28afa:	fb02 f404 	mul.w	r4, r2, r4
   28afe:	b96c      	cbnz	r4, 28b1c <mbedtls_sha_update_internal+0x160>
   28b00:	b1d5      	cbz	r5, 28b38 <mbedtls_sha_update_internal+0x17c>
   28b02:	6e33      	ldr	r3, [r6, #96]	; 0x60
   28b04:	3319      	adds	r3, #25
   28b06:	eb06 0083 	add.w	r0, r6, r3, lsl #2
   28b0a:	462a      	mov	r2, r5
   28b0c:	4639      	mov	r1, r7
   28b0e:	f7ff fa91 	bl	28034 <CC_PalMemCopyPlat>
   28b12:	6e33      	ldr	r3, [r6, #96]	; 0x60
   28b14:	442b      	add	r3, r5
   28b16:	2000      	movs	r0, #0
   28b18:	6633      	str	r3, [r6, #96]	; 0x60
   28b1a:	e00a      	b.n	28b32 <mbedtls_sha_update_internal+0x176>
   28b1c:	2300      	movs	r3, #0
   28b1e:	e9cd 3300 	strd	r3, r3, [sp]
   28b22:	aa02      	add	r2, sp, #8
   28b24:	4621      	mov	r1, r4
   28b26:	4638      	mov	r0, r7
   28b28:	f000 f942 	bl	28db0 <SetDataBuffersInfo>
   28b2c:	2800      	cmp	r0, #0
   28b2e:	d033      	beq.n	28b98 <mbedtls_sha_update_internal+0x1dc>
   28b30:	2001      	movs	r0, #1
   28b32:	b025      	add	sp, #148	; 0x94
   28b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b38:	4628      	mov	r0, r5
   28b3a:	b025      	add	sp, #148	; 0x94
   28b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b40:	f106 0364 	add.w	r3, r6, #100	; 0x64
   28b44:	4639      	mov	r1, r7
   28b46:	4622      	mov	r2, r4
   28b48:	4418      	add	r0, r3
   28b4a:	f7ff fa73 	bl	28034 <CC_PalMemCopyPlat>
   28b4e:	6e30      	ldr	r0, [r6, #96]	; 0x60
   28b50:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   28b52:	4420      	add	r0, r4
   28b54:	1b2d      	subs	r5, r5, r4
   28b56:	4427      	add	r7, r4
   28b58:	6630      	str	r0, [r6, #96]	; 0x60
   28b5a:	e7ca      	b.n	28af2 <mbedtls_sha_update_internal+0x136>
   28b5c:	2001      	movs	r0, #1
   28b5e:	4770      	bx	lr
   28b60:	2a80      	cmp	r2, #128	; 0x80
   28b62:	bf28      	it	cs
   28b64:	2280      	movcs	r2, #128	; 0x80
   28b66:	f106 0164 	add.w	r1, r6, #100	; 0x64
   28b6a:	a804      	add	r0, sp, #16
   28b6c:	f7ff fa62 	bl	28034 <CC_PalMemCopyPlat>
   28b70:	2300      	movs	r3, #0
   28b72:	e9cd 3300 	strd	r3, r3, [sp]
   28b76:	a804      	add	r0, sp, #16
   28b78:	6df1      	ldr	r1, [r6, #92]	; 0x5c
   28b7a:	aa02      	add	r2, sp, #8
   28b7c:	f000 f918 	bl	28db0 <SetDataBuffersInfo>
   28b80:	2800      	cmp	r0, #0
   28b82:	d1d5      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28b84:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   28b86:	a902      	add	r1, sp, #8
   28b88:	4630      	mov	r0, r6
   28b8a:	f000 f96f 	bl	28e6c <ProcessHashDrv>
   28b8e:	2800      	cmp	r0, #0
   28b90:	d1ce      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28b92:	6df2      	ldr	r2, [r6, #92]	; 0x5c
   28b94:	6630      	str	r0, [r6, #96]	; 0x60
   28b96:	e7ae      	b.n	28af6 <mbedtls_sha_update_internal+0x13a>
   28b98:	a902      	add	r1, sp, #8
   28b9a:	4622      	mov	r2, r4
   28b9c:	4630      	mov	r0, r6
   28b9e:	f000 f965 	bl	28e6c <ProcessHashDrv>
   28ba2:	2800      	cmp	r0, #0
   28ba4:	d1c4      	bne.n	28b30 <mbedtls_sha_update_internal+0x174>
   28ba6:	4427      	add	r7, r4
   28ba8:	1b2d      	subs	r5, r5, r4
   28baa:	e7a9      	b.n	28b00 <mbedtls_sha_update_internal+0x144>

00028bac <cc_mbedtls_sha256>:
   28bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28bae:	461c      	mov	r4, r3
   28bb0:	4605      	mov	r5, r0
   28bb2:	4811      	ldr	r0, [pc, #68]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28bb4:	460e      	mov	r6, r1
   28bb6:	4617      	mov	r7, r2
   28bb8:	f7ff fe42 	bl	28840 <cc_mbedtls_sha256_init>
   28bbc:	4621      	mov	r1, r4
   28bbe:	480e      	ldr	r0, [pc, #56]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28bc0:	f7ff fe58 	bl	28874 <cc_mbedtls_sha256_starts>
   28bc4:	4604      	mov	r4, r0
   28bc6:	b120      	cbz	r0, 28bd2 <cc_mbedtls_sha256+0x26>
   28bc8:	480b      	ldr	r0, [pc, #44]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28bca:	f7ff fe4d 	bl	28868 <cc_mbedtls_sha256_free>
   28bce:	4620      	mov	r0, r4
   28bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28bd2:	4809      	ldr	r0, [pc, #36]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28bd4:	4632      	mov	r2, r6
   28bd6:	4629      	mov	r1, r5
   28bd8:	f7ff fe60 	bl	2889c <cc_mbedtls_sha256_update>
   28bdc:	4604      	mov	r4, r0
   28bde:	2800      	cmp	r0, #0
   28be0:	d1f2      	bne.n	28bc8 <cc_mbedtls_sha256+0x1c>
   28be2:	4639      	mov	r1, r7
   28be4:	4804      	ldr	r0, [pc, #16]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28be6:	f7ff fe83 	bl	288f0 <cc_mbedtls_sha256_finish>
   28bea:	4604      	mov	r4, r0
   28bec:	4802      	ldr	r0, [pc, #8]	; (28bf8 <cc_mbedtls_sha256+0x4c>)
   28bee:	f7ff fe3b 	bl	28868 <cc_mbedtls_sha256_free>
   28bf2:	4620      	mov	r0, r4
   28bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28bf6:	bf00      	nop
   28bf8:	20004048 	.word	0x20004048

00028bfc <RNG_PLAT_SetUserRngParameters>:
   28bfc:	b530      	push	{r4, r5, lr}
   28bfe:	b083      	sub	sp, #12
   28c00:	231c      	movs	r3, #28
   28c02:	a901      	add	r1, sp, #4
   28c04:	4604      	mov	r4, r0
   28c06:	9301      	str	r3, [sp, #4]
   28c08:	f000 f834 	bl	28c74 <CC_PalTrngParamGet>
   28c0c:	4605      	mov	r5, r0
   28c0e:	b938      	cbnz	r0, 28c20 <RNG_PLAT_SetUserRngParameters+0x24>
   28c10:	9b01      	ldr	r3, [sp, #4]
   28c12:	2b1c      	cmp	r3, #28
   28c14:	d007      	beq.n	28c26 <RNG_PLAT_SetUserRngParameters+0x2a>
   28c16:	4d15      	ldr	r5, [pc, #84]	; (28c6c <RNG_PLAT_SetUserRngParameters+0x70>)
   28c18:	211c      	movs	r1, #28
   28c1a:	4620      	mov	r0, r4
   28c1c:	f7ff fa0e 	bl	2803c <CC_PalMemSetZeroPlat>
   28c20:	4628      	mov	r0, r5
   28c22:	b003      	add	sp, #12
   28c24:	bd30      	pop	{r4, r5, pc}
   28c26:	e9d4 3200 	ldrd	r3, r2, [r4]
   28c2a:	2101      	movs	r1, #1
   28c2c:	3b00      	subs	r3, #0
   28c2e:	61e1      	str	r1, [r4, #28]
   28c30:	bf18      	it	ne
   28c32:	2301      	movne	r3, #1
   28c34:	b10a      	cbz	r2, 28c3a <RNG_PLAT_SetUserRngParameters+0x3e>
   28c36:	f043 0302 	orr.w	r3, r3, #2
   28c3a:	68a2      	ldr	r2, [r4, #8]
   28c3c:	b932      	cbnz	r2, 28c4c <RNG_PLAT_SetUserRngParameters+0x50>
   28c3e:	68e2      	ldr	r2, [r4, #12]
   28c40:	b942      	cbnz	r2, 28c54 <RNG_PLAT_SetUserRngParameters+0x58>
   28c42:	e9c4 3208 	strd	r3, r2, [r4, #32]
   28c46:	b97b      	cbnz	r3, 28c68 <RNG_PLAT_SetUserRngParameters+0x6c>
   28c48:	4d09      	ldr	r5, [pc, #36]	; (28c70 <RNG_PLAT_SetUserRngParameters+0x74>)
   28c4a:	e7e5      	b.n	28c18 <RNG_PLAT_SetUserRngParameters+0x1c>
   28c4c:	68e2      	ldr	r2, [r4, #12]
   28c4e:	f043 0304 	orr.w	r3, r3, #4
   28c52:	b13a      	cbz	r2, 28c64 <RNG_PLAT_SetUserRngParameters+0x68>
   28c54:	f043 0308 	orr.w	r3, r3, #8
   28c58:	2200      	movs	r2, #0
   28c5a:	4628      	mov	r0, r5
   28c5c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   28c60:	b003      	add	sp, #12
   28c62:	bd30      	pop	{r4, r5, pc}
   28c64:	e9c4 3208 	strd	r3, r2, [r4, #32]
   28c68:	4615      	mov	r5, r2
   28c6a:	e7d9      	b.n	28c20 <RNG_PLAT_SetUserRngParameters+0x24>
   28c6c:	00f00c37 	.word	0x00f00c37
   28c70:	00f00c0e 	.word	0x00f00c0e

00028c74 <CC_PalTrngParamGet>:
   28c74:	b118      	cbz	r0, 28c7e <CC_PalTrngParamGet+0xa>
   28c76:	b111      	cbz	r1, 28c7e <CC_PalTrngParamGet+0xa>
   28c78:	680b      	ldr	r3, [r1, #0]
   28c7a:	2b1c      	cmp	r3, #28
   28c7c:	d001      	beq.n	28c82 <CC_PalTrngParamGet+0xe>
   28c7e:	2001      	movs	r0, #1
   28c80:	4770      	bx	lr
   28c82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28c86:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   28c8a:	3201      	adds	r2, #1
   28c8c:	bf14      	ite	ne
   28c8e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   28c92:	f241 225c 	movweq	r2, #4700	; 0x125c
   28c96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28c9a:	6002      	str	r2, [r0, #0]
   28c9c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   28ca0:	3201      	adds	r2, #1
   28ca2:	bf14      	ite	ne
   28ca4:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   28ca8:	f641 1264 	movweq	r2, #6500	; 0x1964
   28cac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28cb0:	6042      	str	r2, [r0, #4]
   28cb2:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   28cb6:	3201      	adds	r2, #1
   28cb8:	bf14      	ite	ne
   28cba:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   28cbe:	f640 62d8 	movweq	r2, #3800	; 0xed8
   28cc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28cc6:	6082      	str	r2, [r0, #8]
   28cc8:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   28ccc:	3201      	adds	r2, #1
   28cce:	bf14      	ite	ne
   28cd0:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   28cd4:	f241 3288 	movweq	r2, #5000	; 0x1388
   28cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28cdc:	60c2      	str	r2, [r0, #12]
   28cde:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   28ce2:	3201      	adds	r2, #1
   28ce4:	bf14      	ite	ne
   28ce6:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   28cea:	2290      	moveq	r2, #144	; 0x90
   28cec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28cf0:	6102      	str	r2, [r0, #16]
   28cf2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   28cf6:	3201      	adds	r2, #1
   28cf8:	bf14      	ite	ne
   28cfa:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   28cfe:	2251      	moveq	r2, #81	; 0x51
   28d00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   28d04:	6142      	str	r2, [r0, #20]
   28d06:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   28d0a:	3201      	adds	r2, #1
   28d0c:	bf14      	ite	ne
   28d0e:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   28d12:	f240 3337 	movweq	r3, #823	; 0x337
   28d16:	6183      	str	r3, [r0, #24]
   28d18:	2000      	movs	r0, #0
   28d1a:	4770      	bx	lr

00028d1c <LLF_RND_WaitRngInterrupt>:
   28d1c:	b508      	push	{r3, lr}
   28d1e:	4601      	mov	r1, r0
   28d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28d24:	f7ff f912 	bl	27f4c <CC_HalWaitInterruptRND>
   28d28:	4b03      	ldr	r3, [pc, #12]	; (28d38 <LLF_RND_WaitRngInterrupt+0x1c>)
   28d2a:	2200      	movs	r2, #0
   28d2c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   28d30:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   28d34:	bd08      	pop	{r3, pc}
   28d36:	bf00      	nop
   28d38:	5002b000 	.word	0x5002b000

00028d3c <LLF_RND_GetRoscSampleCnt>:
   28d3c:	3801      	subs	r0, #1
   28d3e:	2807      	cmp	r0, #7
   28d40:	d805      	bhi.n	28d4e <LLF_RND_GetRoscSampleCnt+0x12>
   28d42:	e8df f000 	tbb	[pc, r0]
   28d46:	0e12      	.short	0x0e12
   28d48:	04040a04 	.word	0x04040a04
   28d4c:	0604      	.short	0x0604
   28d4e:	4809      	ldr	r0, [pc, #36]	; (28d74 <LLF_RND_GetRoscSampleCnt+0x38>)
   28d50:	4770      	bx	lr
   28d52:	68cb      	ldr	r3, [r1, #12]
   28d54:	624b      	str	r3, [r1, #36]	; 0x24
   28d56:	2000      	movs	r0, #0
   28d58:	4770      	bx	lr
   28d5a:	688b      	ldr	r3, [r1, #8]
   28d5c:	624b      	str	r3, [r1, #36]	; 0x24
   28d5e:	2000      	movs	r0, #0
   28d60:	4770      	bx	lr
   28d62:	684b      	ldr	r3, [r1, #4]
   28d64:	624b      	str	r3, [r1, #36]	; 0x24
   28d66:	2000      	movs	r0, #0
   28d68:	4770      	bx	lr
   28d6a:	680b      	ldr	r3, [r1, #0]
   28d6c:	624b      	str	r3, [r1, #36]	; 0x24
   28d6e:	2000      	movs	r0, #0
   28d70:	4770      	bx	lr
   28d72:	bf00      	nop
   28d74:	00f10c31 	.word	0x00f10c31

00028d78 <LLF_RND_GetFastestRosc>:
   28d78:	680b      	ldr	r3, [r1, #0]
   28d7a:	e002      	b.n	28d82 <LLF_RND_GetFastestRosc+0xa>
   28d7c:	2b08      	cmp	r3, #8
   28d7e:	600b      	str	r3, [r1, #0]
   28d80:	d806      	bhi.n	28d90 <LLF_RND_GetFastestRosc+0x18>
   28d82:	6a02      	ldr	r2, [r0, #32]
   28d84:	4213      	tst	r3, r2
   28d86:	ea4f 0343 	mov.w	r3, r3, lsl #1
   28d8a:	d0f7      	beq.n	28d7c <LLF_RND_GetFastestRosc+0x4>
   28d8c:	2000      	movs	r0, #0
   28d8e:	4770      	bx	lr
   28d90:	4800      	ldr	r0, [pc, #0]	; (28d94 <LLF_RND_GetFastestRosc+0x1c>)
   28d92:	4770      	bx	lr
   28d94:	00f10c31 	.word	0x00f10c31

00028d98 <LLF_RND_TurnOffTrng>:
   28d98:	4b04      	ldr	r3, [pc, #16]	; (28dac <LLF_RND_TurnOffTrng+0x14>)
   28d9a:	2200      	movs	r2, #0
   28d9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   28da0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   28da4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   28da8:	f7ff b8b6 	b.w	27f18 <CC_HalClearInterruptBit>
   28dac:	5002b000 	.word	0x5002b000

00028db0 <SetDataBuffersInfo>:
   28db0:	b5f0      	push	{r4, r5, r6, r7, lr}
   28db2:	b083      	sub	sp, #12
   28db4:	461d      	mov	r5, r3
   28db6:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   28dba:	f04f 0300 	mov.w	r3, #0
   28dbe:	f88d 3007 	strb.w	r3, [sp, #7]
   28dc2:	d324      	bcc.n	28e0e <SetDataBuffersInfo+0x5e>
   28dc4:	468c      	mov	ip, r1
   28dc6:	4484      	add	ip, r0
   28dc8:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   28dcc:	4604      	mov	r4, r0
   28dce:	d81e      	bhi.n	28e0e <SetDataBuffersInfo+0x5e>
   28dd0:	4617      	mov	r7, r2
   28dd2:	f10d 0307 	add.w	r3, sp, #7
   28dd6:	2201      	movs	r2, #1
   28dd8:	f000 fe68 	bl	29aac <CC_PalDataBufferAttrGet>
   28ddc:	4606      	mov	r6, r0
   28dde:	b9b0      	cbnz	r0, 28e0e <SetDataBuffersInfo+0x5e>
   28de0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28de6:	603c      	str	r4, [r7, #0]
   28de8:	713b      	strb	r3, [r7, #4]
   28dea:	b192      	cbz	r2, 28e12 <SetDataBuffersInfo+0x62>
   28dec:	b14d      	cbz	r5, 28e02 <SetDataBuffersInfo+0x52>
   28dee:	4602      	mov	r2, r0
   28df0:	9908      	ldr	r1, [sp, #32]
   28df2:	f10d 0307 	add.w	r3, sp, #7
   28df6:	4628      	mov	r0, r5
   28df8:	f000 fe58 	bl	29aac <CC_PalDataBufferAttrGet>
   28dfc:	b938      	cbnz	r0, 28e0e <SetDataBuffersInfo+0x5e>
   28dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28e02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28e04:	4630      	mov	r0, r6
   28e06:	6015      	str	r5, [r2, #0]
   28e08:	7113      	strb	r3, [r2, #4]
   28e0a:	b003      	add	sp, #12
   28e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28e0e:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   28e12:	4630      	mov	r0, r6
   28e14:	b003      	add	sp, #12
   28e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028e18 <InitHashDrv>:
   28e18:	b1e8      	cbz	r0, 28e56 <InitHashDrv+0x3e>
   28e1a:	b510      	push	{r4, lr}
   28e1c:	6804      	ldr	r4, [r0, #0]
   28e1e:	2c01      	cmp	r4, #1
   28e20:	d004      	beq.n	28e2c <InitHashDrv+0x14>
   28e22:	2c02      	cmp	r4, #2
   28e24:	d010      	beq.n	28e48 <InitHashDrv+0x30>
   28e26:	b144      	cbz	r4, 28e3a <InitHashDrv+0x22>
   28e28:	480c      	ldr	r0, [pc, #48]	; (28e5c <InitHashDrv+0x44>)
   28e2a:	bd10      	pop	{r4, pc}
   28e2c:	490c      	ldr	r1, [pc, #48]	; (28e60 <InitHashDrv+0x48>)
   28e2e:	2220      	movs	r2, #32
   28e30:	3008      	adds	r0, #8
   28e32:	f7ff f8ff 	bl	28034 <CC_PalMemCopyPlat>
   28e36:	2000      	movs	r0, #0
   28e38:	bd10      	pop	{r4, pc}
   28e3a:	490a      	ldr	r1, [pc, #40]	; (28e64 <InitHashDrv+0x4c>)
   28e3c:	2214      	movs	r2, #20
   28e3e:	3008      	adds	r0, #8
   28e40:	f7ff f8f8 	bl	28034 <CC_PalMemCopyPlat>
   28e44:	4620      	mov	r0, r4
   28e46:	bd10      	pop	{r4, pc}
   28e48:	4907      	ldr	r1, [pc, #28]	; (28e68 <InitHashDrv+0x50>)
   28e4a:	2220      	movs	r2, #32
   28e4c:	3008      	adds	r0, #8
   28e4e:	f7ff f8f1 	bl	28034 <CC_PalMemCopyPlat>
   28e52:	2000      	movs	r0, #0
   28e54:	bd10      	pop	{r4, pc}
   28e56:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   28e5a:	4770      	bx	lr
   28e5c:	00f30001 	.word	0x00f30001
   28e60:	0002f120 	.word	0x0002f120
   28e64:	0002f0ec 	.word	0x0002f0ec
   28e68:	0002f100 	.word	0x0002f100

00028e6c <ProcessHashDrv>:
   28e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28e70:	2900      	cmp	r1, #0
   28e72:	f000 80f9 	beq.w	29068 <ProcessHashDrv+0x1fc>
   28e76:	4604      	mov	r4, r0
   28e78:	2800      	cmp	r0, #0
   28e7a:	f000 80f9 	beq.w	29070 <ProcessHashDrv+0x204>
   28e7e:	6803      	ldr	r3, [r0, #0]
   28e80:	4690      	mov	r8, r2
   28e82:	460f      	mov	r7, r1
   28e84:	2b00      	cmp	r3, #0
   28e86:	f000 80c3 	beq.w	29010 <ProcessHashDrv+0x1a4>
   28e8a:	3b01      	subs	r3, #1
   28e8c:	2b01      	cmp	r3, #1
   28e8e:	f200 80d7 	bhi.w	29040 <ProcessHashDrv+0x1d4>
   28e92:	4879      	ldr	r0, [pc, #484]	; (29078 <ProcessHashDrv+0x20c>)
   28e94:	f04f 31ff 	mov.w	r1, #4294967295
   28e98:	f04f 0902 	mov.w	r9, #2
   28e9c:	f7ff f8e6 	bl	2806c <CC_PalMutexLock>
   28ea0:	2800      	cmp	r0, #0
   28ea2:	f040 80bf 	bne.w	29024 <ProcessHashDrv+0x1b8>
   28ea6:	2000      	movs	r0, #0
   28ea8:	f7ff f910 	bl	280cc <CC_PalPowerSaveModeSelect>
   28eac:	4606      	mov	r6, r0
   28eae:	2800      	cmp	r0, #0
   28eb0:	f040 80c2 	bne.w	29038 <ProcessHashDrv+0x1cc>
   28eb4:	4a71      	ldr	r2, [pc, #452]	; (2907c <ProcessHashDrv+0x210>)
   28eb6:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   28eba:	2b00      	cmp	r3, #0
   28ebc:	d1fb      	bne.n	28eb6 <ProcessHashDrv+0x4a>
   28ebe:	4d6f      	ldr	r5, [pc, #444]	; (2907c <ProcessHashDrv+0x210>)
   28ec0:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   28ec4:	2b00      	cmp	r3, #0
   28ec6:	d1fb      	bne.n	28ec0 <ProcessHashDrv+0x54>
   28ec8:	f04f 30ff 	mov.w	r0, #4294967295
   28ecc:	f7ff f824 	bl	27f18 <CC_HalClearInterruptBit>
   28ed0:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   28ed4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   28ed8:	f7ff f82c 	bl	27f34 <CC_HalMaskInterrupt>
   28edc:	2301      	movs	r3, #1
   28ede:	2207      	movs	r2, #7
   28ee0:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   28ee4:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   28ee8:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   28eec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   28eee:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   28ef2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   28ef4:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   28ef8:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   28efc:	6823      	ldr	r3, [r4, #0]
   28efe:	b15b      	cbz	r3, 28f18 <ProcessHashDrv+0xac>
   28f00:	3b01      	subs	r3, #1
   28f02:	2b01      	cmp	r3, #1
   28f04:	d818      	bhi.n	28f38 <ProcessHashDrv+0xcc>
   28f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
   28f08:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   28f0c:	6a23      	ldr	r3, [r4, #32]
   28f0e:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   28f12:	69e3      	ldr	r3, [r4, #28]
   28f14:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   28f18:	4b58      	ldr	r3, [pc, #352]	; (2907c <ProcessHashDrv+0x210>)
   28f1a:	69a2      	ldr	r2, [r4, #24]
   28f1c:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   28f20:	6962      	ldr	r2, [r4, #20]
   28f22:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   28f26:	6922      	ldr	r2, [r4, #16]
   28f28:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   28f2c:	68e2      	ldr	r2, [r4, #12]
   28f2e:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   28f32:	68a2      	ldr	r2, [r4, #8]
   28f34:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   28f38:	4a50      	ldr	r2, [pc, #320]	; (2907c <ProcessHashDrv+0x210>)
   28f3a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28f3e:	2b00      	cmp	r3, #0
   28f40:	d1fb      	bne.n	28f3a <ProcessHashDrv+0xce>
   28f42:	f1b8 0f00 	cmp.w	r8, #0
   28f46:	d05f      	beq.n	29008 <ProcessHashDrv+0x19c>
   28f48:	6863      	ldr	r3, [r4, #4]
   28f4a:	2b01      	cmp	r3, #1
   28f4c:	bf08      	it	eq
   28f4e:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   28f52:	4b4a      	ldr	r3, [pc, #296]	; (2907c <ProcessHashDrv+0x210>)
   28f54:	683a      	ldr	r2, [r7, #0]
   28f56:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   28f5a:	2040      	movs	r0, #64	; 0x40
   28f5c:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   28f60:	f7fe ffee 	bl	27f40 <CC_HalWaitInterrupt>
   28f64:	4606      	mov	r6, r0
   28f66:	4a45      	ldr	r2, [pc, #276]	; (2907c <ProcessHashDrv+0x210>)
   28f68:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28f6c:	2b00      	cmp	r3, #0
   28f6e:	d1fb      	bne.n	28f68 <ProcessHashDrv+0xfc>
   28f70:	4a42      	ldr	r2, [pc, #264]	; (2907c <ProcessHashDrv+0x210>)
   28f72:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   28f76:	2b00      	cmp	r3, #0
   28f78:	d1fb      	bne.n	28f72 <ProcessHashDrv+0x106>
   28f7a:	6823      	ldr	r3, [r4, #0]
   28f7c:	b15b      	cbz	r3, 28f96 <ProcessHashDrv+0x12a>
   28f7e:	3b01      	subs	r3, #1
   28f80:	2b01      	cmp	r3, #1
   28f82:	d818      	bhi.n	28fb6 <ProcessHashDrv+0x14a>
   28f84:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   28f88:	6263      	str	r3, [r4, #36]	; 0x24
   28f8a:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   28f8e:	6223      	str	r3, [r4, #32]
   28f90:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   28f94:	61e3      	str	r3, [r4, #28]
   28f96:	4b39      	ldr	r3, [pc, #228]	; (2907c <ProcessHashDrv+0x210>)
   28f98:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   28f9c:	61a2      	str	r2, [r4, #24]
   28f9e:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   28fa2:	6162      	str	r2, [r4, #20]
   28fa4:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   28fa8:	6122      	str	r2, [r4, #16]
   28faa:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   28fae:	60e2      	str	r2, [r4, #12]
   28fb0:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   28fb4:	60a3      	str	r3, [r4, #8]
   28fb6:	4a31      	ldr	r2, [pc, #196]	; (2907c <ProcessHashDrv+0x210>)
   28fb8:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   28fbc:	64a1      	str	r1, [r4, #72]	; 0x48
   28fbe:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   28fc2:	64e1      	str	r1, [r4, #76]	; 0x4c
   28fc4:	2300      	movs	r3, #0
   28fc6:	2101      	movs	r1, #1
   28fc8:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   28fcc:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   28fd0:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   28fd4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   28fd8:	2b00      	cmp	r3, #0
   28fda:	d1fb      	bne.n	28fd4 <ProcessHashDrv+0x168>
   28fdc:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   28fe0:	2e00      	cmp	r6, #0
   28fe2:	d13b      	bne.n	2905c <ProcessHashDrv+0x1f0>
   28fe4:	4b25      	ldr	r3, [pc, #148]	; (2907c <ProcessHashDrv+0x210>)
   28fe6:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   28fea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   28fee:	f7fe ffa1 	bl	27f34 <CC_HalMaskInterrupt>
   28ff2:	2001      	movs	r0, #1
   28ff4:	f7ff f86a 	bl	280cc <CC_PalPowerSaveModeSelect>
   28ff8:	bb60      	cbnz	r0, 29054 <ProcessHashDrv+0x1e8>
   28ffa:	481f      	ldr	r0, [pc, #124]	; (29078 <ProcessHashDrv+0x20c>)
   28ffc:	f7ff f83e 	bl	2807c <CC_PalMutexUnlock>
   29000:	bb10      	cbnz	r0, 29048 <ProcessHashDrv+0x1dc>
   29002:	4630      	mov	r0, r6
   29004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29008:	2304      	movs	r3, #4
   2900a:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   2900e:	e7aa      	b.n	28f66 <ProcessHashDrv+0xfa>
   29010:	4819      	ldr	r0, [pc, #100]	; (29078 <ProcessHashDrv+0x20c>)
   29012:	f04f 31ff 	mov.w	r1, #4294967295
   29016:	f04f 0901 	mov.w	r9, #1
   2901a:	f7ff f827 	bl	2806c <CC_PalMutexLock>
   2901e:	2800      	cmp	r0, #0
   29020:	f43f af41 	beq.w	28ea6 <ProcessHashDrv+0x3a>
   29024:	4816      	ldr	r0, [pc, #88]	; (29080 <ProcessHashDrv+0x214>)
   29026:	f7fe f8a5 	bl	27174 <CC_PalAbort>
   2902a:	2000      	movs	r0, #0
   2902c:	f7ff f84e 	bl	280cc <CC_PalPowerSaveModeSelect>
   29030:	4606      	mov	r6, r0
   29032:	2800      	cmp	r0, #0
   29034:	f43f af3e 	beq.w	28eb4 <ProcessHashDrv+0x48>
   29038:	4812      	ldr	r0, [pc, #72]	; (29084 <ProcessHashDrv+0x218>)
   2903a:	f7fe f89b 	bl	27174 <CC_PalAbort>
   2903e:	e739      	b.n	28eb4 <ProcessHashDrv+0x48>
   29040:	4e11      	ldr	r6, [pc, #68]	; (29088 <ProcessHashDrv+0x21c>)
   29042:	4630      	mov	r0, r6
   29044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29048:	4810      	ldr	r0, [pc, #64]	; (2908c <ProcessHashDrv+0x220>)
   2904a:	f7fe f893 	bl	27174 <CC_PalAbort>
   2904e:	4630      	mov	r0, r6
   29050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29054:	480e      	ldr	r0, [pc, #56]	; (29090 <ProcessHashDrv+0x224>)
   29056:	f7fe f88d 	bl	27174 <CC_PalAbort>
   2905a:	e7ce      	b.n	28ffa <ProcessHashDrv+0x18e>
   2905c:	2110      	movs	r1, #16
   2905e:	f104 0008 	add.w	r0, r4, #8
   29062:	f7fe ffeb 	bl	2803c <CC_PalMemSetZeroPlat>
   29066:	e7bd      	b.n	28fe4 <ProcessHashDrv+0x178>
   29068:	4e0a      	ldr	r6, [pc, #40]	; (29094 <ProcessHashDrv+0x228>)
   2906a:	4630      	mov	r0, r6
   2906c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29070:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   29074:	e7c5      	b.n	29002 <ProcessHashDrv+0x196>
   29076:	bf00      	nop
   29078:	20000818 	.word	0x20000818
   2907c:	5002b000 	.word	0x5002b000
   29080:	0002f020 	.word	0x0002f020
   29084:	0002f038 	.word	0x0002f038
   29088:	00f30001 	.word	0x00f30001
   2908c:	0002f078 	.word	0x0002f078
   29090:	0002f058 	.word	0x0002f058
   29094:	00f30003 	.word	0x00f30003

00029098 <FinishHashDrv>:
   29098:	b398      	cbz	r0, 29102 <FinishHashDrv+0x6a>
   2909a:	b470      	push	{r4, r5, r6}
   2909c:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   290a0:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   290a4:	ba26      	rev	r6, r4
   290a6:	ba0d      	rev	r5, r1
   290a8:	ba14      	rev	r4, r2
   290aa:	ba19      	rev	r1, r3
   290ac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   290b0:	ba12      	rev	r2, r2
   290b2:	e9c0 4104 	strd	r4, r1, [r0, #16]
   290b6:	6182      	str	r2, [r0, #24]
   290b8:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   290bc:	e9c0 6502 	strd	r6, r5, [r0, #8]
   290c0:	ba1b      	rev	r3, r3
   290c2:	ba25      	rev	r5, r4
   290c4:	e9c0 3507 	strd	r3, r5, [r0, #28]
   290c8:	ba14      	rev	r4, r2
   290ca:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   290ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
   290d0:	ba12      	rev	r2, r2
   290d2:	ba09      	rev	r1, r1
   290d4:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   290d8:	62c2      	str	r2, [r0, #44]	; 0x2c
   290da:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   290de:	ba1b      	rev	r3, r3
   290e0:	ba25      	rev	r5, r4
   290e2:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   290e6:	ba14      	rev	r4, r2
   290e8:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   290ec:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   290ee:	ba12      	rev	r2, r2
   290f0:	ba09      	rev	r1, r1
   290f2:	ba1b      	rev	r3, r3
   290f4:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   290f8:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   290fc:	2000      	movs	r0, #0
   290fe:	bc70      	pop	{r4, r5, r6}
   29100:	4770      	bx	lr
   29102:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   29106:	4770      	bx	lr

00029108 <LoadAesKey>:
   29108:	2800      	cmp	r0, #0
   2910a:	d046      	beq.n	2919a <LoadAesKey+0x92>
   2910c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   29110:	2b00      	cmp	r3, #0
   29112:	d033      	beq.n	2917c <LoadAesKey+0x74>
   29114:	2b03      	cmp	r3, #3
   29116:	b510      	push	{r4, lr}
   29118:	d013      	beq.n	29142 <LoadAesKey+0x3a>
   2911a:	4821      	ldr	r0, [pc, #132]	; (291a0 <LoadAesKey+0x98>)
   2911c:	4c21      	ldr	r4, [pc, #132]	; (291a4 <LoadAesKey+0x9c>)
   2911e:	6822      	ldr	r2, [r4, #0]
   29120:	4b21      	ldr	r3, [pc, #132]	; (291a8 <LoadAesKey+0xa0>)
   29122:	6812      	ldr	r2, [r2, #0]
   29124:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   29128:	6822      	ldr	r2, [r4, #0]
   2912a:	6852      	ldr	r2, [r2, #4]
   2912c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29130:	6822      	ldr	r2, [r4, #0]
   29132:	6892      	ldr	r2, [r2, #8]
   29134:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   29138:	6822      	ldr	r2, [r4, #0]
   2913a:	68d2      	ldr	r2, [r2, #12]
   2913c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29140:	bd10      	pop	{r4, pc}
   29142:	6b01      	ldr	r1, [r0, #48]	; 0x30
   29144:	6c00      	ldr	r0, [r0, #64]	; 0x40
   29146:	4c17      	ldr	r4, [pc, #92]	; (291a4 <LoadAesKey+0x9c>)
   29148:	f000 fbac 	bl	298a4 <kmu_validate_kdr_slot_and_size>
   2914c:	2800      	cmp	r0, #0
   2914e:	d1e6      	bne.n	2911e <LoadAesKey+0x16>
   29150:	6822      	ldr	r2, [r4, #0]
   29152:	4b15      	ldr	r3, [pc, #84]	; (291a8 <LoadAesKey+0xa0>)
   29154:	6812      	ldr	r2, [r2, #0]
   29156:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2915a:	6822      	ldr	r2, [r4, #0]
   2915c:	6852      	ldr	r2, [r2, #4]
   2915e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   29162:	6822      	ldr	r2, [r4, #0]
   29164:	6892      	ldr	r2, [r2, #8]
   29166:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2916a:	6822      	ldr	r2, [r4, #0]
   2916c:	68d2      	ldr	r2, [r2, #12]
   2916e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   29172:	f000 fba3 	bl	298bc <kmu_use_kdr_key>
   29176:	2800      	cmp	r0, #0
   29178:	d1d1      	bne.n	2911e <LoadAesKey+0x16>
   2917a:	bd10      	pop	{r4, pc}
   2917c:	4a0a      	ldr	r2, [pc, #40]	; (291a8 <LoadAesKey+0xa0>)
   2917e:	6901      	ldr	r1, [r0, #16]
   29180:	f8c2 1400 	str.w	r1, [r2, #1024]	; 0x400
   29184:	6941      	ldr	r1, [r0, #20]
   29186:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
   2918a:	6981      	ldr	r1, [r0, #24]
   2918c:	f8c2 1408 	str.w	r1, [r2, #1032]	; 0x408
   29190:	69c1      	ldr	r1, [r0, #28]
   29192:	f8c2 140c 	str.w	r1, [r2, #1036]	; 0x40c
   29196:	4618      	mov	r0, r3
   29198:	4770      	bx	lr
   2919a:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2919e:	4770      	bx	lr
   291a0:	00f10009 	.word	0x00f10009
   291a4:	20000808 	.word	0x20000808
   291a8:	5002b000 	.word	0x5002b000

000291ac <InitAes.part.0>:
   291ac:	4a37      	ldr	r2, [pc, #220]	; (2928c <InitAes.part.0+0xe0>)
   291ae:	b538      	push	{r3, r4, r5, lr}
   291b0:	4604      	mov	r4, r0
   291b2:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   291b6:	2b00      	cmp	r3, #0
   291b8:	d1fb      	bne.n	291b2 <InitAes.part.0+0x6>
   291ba:	4a34      	ldr	r2, [pc, #208]	; (2928c <InitAes.part.0+0xe0>)
   291bc:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   291c0:	2b00      	cmp	r3, #0
   291c2:	d1fb      	bne.n	291bc <InitAes.part.0+0x10>
   291c4:	4a31      	ldr	r2, [pc, #196]	; (2928c <InitAes.part.0+0xe0>)
   291c6:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   291ca:	2b00      	cmp	r3, #0
   291cc:	d1fb      	bne.n	291c6 <InitAes.part.0+0x1a>
   291ce:	4a2f      	ldr	r2, [pc, #188]	; (2928c <InitAes.part.0+0xe0>)
   291d0:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   291d4:	2b00      	cmp	r3, #0
   291d6:	d1fb      	bne.n	291d0 <InitAes.part.0+0x24>
   291d8:	4a2c      	ldr	r2, [pc, #176]	; (2928c <InitAes.part.0+0xe0>)
   291da:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   291de:	2b00      	cmp	r3, #0
   291e0:	d1fb      	bne.n	291da <InitAes.part.0+0x2e>
   291e2:	4d2a      	ldr	r5, [pc, #168]	; (2928c <InitAes.part.0+0xe0>)
   291e4:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   291e8:	2b00      	cmp	r3, #0
   291ea:	d1fb      	bne.n	291e4 <InitAes.part.0+0x38>
   291ec:	f04f 30ff 	mov.w	r0, #4294967295
   291f0:	f7fe fe92 	bl	27f18 <CC_HalClearInterruptBit>
   291f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   291f6:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   291fa:	f023 0304 	bic.w	r3, r3, #4
   291fe:	2b03      	cmp	r3, #3
   29200:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   29202:	d039      	beq.n	29278 <InitAes.part.0+0xcc>
   29204:	2b01      	cmp	r3, #1
   29206:	bf0c      	ite	eq
   29208:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   2920c:	f020 0020 	bicne.w	r0, r0, #32
   29210:	f7fe fe90 	bl	27f34 <CC_HalMaskInterrupt>
   29214:	4a1d      	ldr	r2, [pc, #116]	; (2928c <InitAes.part.0+0xe0>)
   29216:	2301      	movs	r3, #1
   29218:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   2921c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29220:	2b00      	cmp	r3, #0
   29222:	d1fb      	bne.n	2921c <InitAes.part.0+0x70>
   29224:	4a19      	ldr	r2, [pc, #100]	; (2928c <InitAes.part.0+0xe0>)
   29226:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   2922a:	2b00      	cmp	r3, #0
   2922c:	d1fb      	bne.n	29226 <InitAes.part.0+0x7a>
   2922e:	4917      	ldr	r1, [pc, #92]	; (2928c <InitAes.part.0+0xe0>)
   29230:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   29234:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   29238:	2b00      	cmp	r3, #0
   2923a:	d1fb      	bne.n	29234 <InitAes.part.0+0x88>
   2923c:	4a13      	ldr	r2, [pc, #76]	; (2928c <InitAes.part.0+0xe0>)
   2923e:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   29242:	2b00      	cmp	r3, #0
   29244:	d1fb      	bne.n	2923e <InitAes.part.0+0x92>
   29246:	6b62      	ldr	r2, [r4, #52]	; 0x34
   29248:	f022 0104 	bic.w	r1, r2, #4
   2924c:	2903      	cmp	r1, #3
   2924e:	bf18      	it	ne
   29250:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   29252:	490e      	ldr	r1, [pc, #56]	; (2928c <InitAes.part.0+0xe0>)
   29254:	ea4f 0282 	mov.w	r2, r2, lsl #2
   29258:	bf18      	it	ne
   2925a:	f003 0301 	andne.w	r3, r3, #1
   2925e:	f002 021c 	and.w	r2, r2, #28
   29262:	4313      	orrs	r3, r2
   29264:	f8c1 34c0 	str.w	r3, [r1, #1216]	; 0x4c0
   29268:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2926a:	2b07      	cmp	r3, #7
   2926c:	bf04      	itt	eq
   2926e:	2301      	moveq	r3, #1
   29270:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   29274:	2000      	movs	r0, #0
   29276:	bd38      	pop	{r3, r4, r5, pc}
   29278:	2b01      	cmp	r3, #1
   2927a:	bf0c      	ite	eq
   2927c:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   29280:	f020 0010 	bicne.w	r0, r0, #16
   29284:	f7fe fe56 	bl	27f34 <CC_HalMaskInterrupt>
   29288:	e7c4      	b.n	29214 <InitAes.part.0+0x68>
   2928a:	bf00      	nop
   2928c:	5002b000 	.word	0x5002b000

00029290 <write_invalid_key>:
   29290:	4a09      	ldr	r2, [pc, #36]	; (292b8 <write_invalid_key+0x28>)
   29292:	4b0a      	ldr	r3, [pc, #40]	; (292bc <write_invalid_key+0x2c>)
   29294:	6811      	ldr	r1, [r2, #0]
   29296:	6809      	ldr	r1, [r1, #0]
   29298:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   2929c:	6811      	ldr	r1, [r2, #0]
   2929e:	6849      	ldr	r1, [r1, #4]
   292a0:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   292a4:	6811      	ldr	r1, [r2, #0]
   292a6:	6889      	ldr	r1, [r1, #8]
   292a8:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   292ac:	6812      	ldr	r2, [r2, #0]
   292ae:	68d2      	ldr	r2, [r2, #12]
   292b0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   292b4:	4770      	bx	lr
   292b6:	bf00      	nop
   292b8:	20000808 	.word	0x20000808
   292bc:	5002b000 	.word	0x5002b000

000292c0 <ProcessAesDrv>:
   292c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292c4:	b085      	sub	sp, #20
   292c6:	2900      	cmp	r1, #0
   292c8:	f000 80a3 	beq.w	29412 <ProcessAesDrv+0x152>
   292cc:	4690      	mov	r8, r2
   292ce:	2a00      	cmp	r2, #0
   292d0:	f000 809f 	beq.w	29412 <ProcessAesDrv+0x152>
   292d4:	4605      	mov	r5, r0
   292d6:	2800      	cmp	r0, #0
   292d8:	f000 813c 	beq.w	29554 <ProcessAesDrv+0x294>
   292dc:	4699      	mov	r9, r3
   292de:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   292e0:	460e      	mov	r6, r1
   292e2:	2b00      	cmp	r3, #0
   292e4:	d151      	bne.n	2938a <ProcessAesDrv+0xca>
   292e6:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   292ea:	d253      	bcs.n	29394 <ProcessAesDrv+0xd4>
   292ec:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   292f0:	2b04      	cmp	r3, #4
   292f2:	f000 8112 	beq.w	2951a <ProcessAesDrv+0x25a>
   292f6:	2700      	movs	r7, #0
   292f8:	48a6      	ldr	r0, [pc, #664]	; (29594 <ProcessAesDrv+0x2d4>)
   292fa:	f04f 31ff 	mov.w	r1, #4294967295
   292fe:	f7fe feb5 	bl	2806c <CC_PalMutexLock>
   29302:	2800      	cmp	r0, #0
   29304:	f040 80e8 	bne.w	294d8 <ProcessAesDrv+0x218>
   29308:	2000      	movs	r0, #0
   2930a:	f7fe fedf 	bl	280cc <CC_PalPowerSaveModeSelect>
   2930e:	2800      	cmp	r0, #0
   29310:	f040 80eb 	bne.w	294ea <ProcessAesDrv+0x22a>
   29314:	48a0      	ldr	r0, [pc, #640]	; (29598 <ProcessAesDrv+0x2d8>)
   29316:	2301      	movs	r3, #1
   29318:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   2931c:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   29320:	2c00      	cmp	r4, #0
   29322:	d1fb      	bne.n	2931c <ProcessAesDrv+0x5c>
   29324:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29326:	2b03      	cmp	r3, #3
   29328:	dc39      	bgt.n	2939e <ProcessAesDrv+0xde>
   2932a:	2b00      	cmp	r3, #0
   2932c:	da3a      	bge.n	293a4 <ProcessAesDrv+0xe4>
   2932e:	4c9b      	ldr	r4, [pc, #620]	; (2959c <ProcessAesDrv+0x2dc>)
   29330:	4a99      	ldr	r2, [pc, #612]	; (29598 <ProcessAesDrv+0x2d8>)
   29332:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29336:	2b00      	cmp	r3, #0
   29338:	d1fb      	bne.n	29332 <ProcessAesDrv+0x72>
   2933a:	2f00      	cmp	r7, #0
   2933c:	f040 80e4 	bne.w	29508 <ProcessAesDrv+0x248>
   29340:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   29342:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   29344:	f023 0304 	bic.w	r3, r3, #4
   29348:	2b03      	cmp	r3, #3
   2934a:	4b93      	ldr	r3, [pc, #588]	; (29598 <ProcessAesDrv+0x2d8>)
   2934c:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   29350:	d056      	beq.n	29400 <ProcessAesDrv+0x140>
   29352:	2a01      	cmp	r2, #1
   29354:	bf0c      	ite	eq
   29356:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2935a:	f040 0020 	orrne.w	r0, r0, #32
   2935e:	f7fe fde9 	bl	27f34 <CC_HalMaskInterrupt>
   29362:	4b8d      	ldr	r3, [pc, #564]	; (29598 <ProcessAesDrv+0x2d8>)
   29364:	2200      	movs	r2, #0
   29366:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   2936a:	2001      	movs	r0, #1
   2936c:	f7fe feae 	bl	280cc <CC_PalPowerSaveModeSelect>
   29370:	2800      	cmp	r0, #0
   29372:	f040 80c5 	bne.w	29500 <ProcessAesDrv+0x240>
   29376:	4887      	ldr	r0, [pc, #540]	; (29594 <ProcessAesDrv+0x2d4>)
   29378:	f7fe fe80 	bl	2807c <CC_PalMutexUnlock>
   2937c:	2800      	cmp	r0, #0
   2937e:	f040 80b8 	bne.w	294f2 <ProcessAesDrv+0x232>
   29382:	4620      	mov	r0, r4
   29384:	b005      	add	sp, #20
   29386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2938a:	2b01      	cmp	r3, #1
   2938c:	d1ae      	bne.n	292ec <ProcessAesDrv+0x2c>
   2938e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   29392:	d3ab      	bcc.n	292ec <ProcessAesDrv+0x2c>
   29394:	4c82      	ldr	r4, [pc, #520]	; (295a0 <ProcessAesDrv+0x2e0>)
   29396:	4620      	mov	r0, r4
   29398:	b005      	add	sp, #20
   2939a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2939e:	3b06      	subs	r3, #6
   293a0:	2b01      	cmp	r3, #1
   293a2:	d8c4      	bhi.n	2932e <ProcessAesDrv+0x6e>
   293a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   293a6:	2b01      	cmp	r3, #1
   293a8:	f200 80d2 	bhi.w	29550 <ProcessAesDrv+0x290>
   293ac:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   293ae:	2b01      	cmp	r3, #1
   293b0:	d834      	bhi.n	2941c <ProcessAesDrv+0x15c>
   293b2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   293b4:	2b01      	cmp	r3, #1
   293b6:	f200 8122 	bhi.w	295fe <ProcessAesDrv+0x33e>
   293ba:	4628      	mov	r0, r5
   293bc:	f7ff fef6 	bl	291ac <InitAes.part.0>
   293c0:	4604      	mov	r4, r0
   293c2:	2800      	cmp	r0, #0
   293c4:	d1b4      	bne.n	29330 <ProcessAesDrv+0x70>
   293c6:	4628      	mov	r0, r5
   293c8:	f7ff fe9e 	bl	29108 <LoadAesKey>
   293cc:	4604      	mov	r4, r0
   293ce:	2800      	cmp	r0, #0
   293d0:	d1ae      	bne.n	29330 <ProcessAesDrv+0x70>
   293d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   293d4:	2b07      	cmp	r3, #7
   293d6:	d8aa      	bhi.n	2932e <ProcessAesDrv+0x6e>
   293d8:	a201      	add	r2, pc, #4	; (adr r2, 293e0 <ProcessAesDrv+0x120>)
   293da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   293de:	bf00      	nop
   293e0:	0002943d 	.word	0x0002943d
   293e4:	00029421 	.word	0x00029421
   293e8:	000295c5 	.word	0x000295c5
   293ec:	00029421 	.word	0x00029421
   293f0:	0002932f 	.word	0x0002932f
   293f4:	0002932f 	.word	0x0002932f
   293f8:	000295c5 	.word	0x000295c5
   293fc:	00029421 	.word	0x00029421
   29400:	2a01      	cmp	r2, #1
   29402:	bf0c      	ite	eq
   29404:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   29408:	f040 0010 	orrne.w	r0, r0, #16
   2940c:	f7fe fd92 	bl	27f34 <CC_HalMaskInterrupt>
   29410:	e7a7      	b.n	29362 <ProcessAesDrv+0xa2>
   29412:	4c64      	ldr	r4, [pc, #400]	; (295a4 <ProcessAesDrv+0x2e4>)
   29414:	4620      	mov	r0, r4
   29416:	b005      	add	sp, #20
   29418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2941c:	4c62      	ldr	r4, [pc, #392]	; (295a8 <ProcessAesDrv+0x2e8>)
   2941e:	e787      	b.n	29330 <ProcessAesDrv+0x70>
   29420:	4b5d      	ldr	r3, [pc, #372]	; (29598 <ProcessAesDrv+0x2d8>)
   29422:	682a      	ldr	r2, [r5, #0]
   29424:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   29428:	686a      	ldr	r2, [r5, #4]
   2942a:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   2942e:	68aa      	ldr	r2, [r5, #8]
   29430:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   29434:	68ea      	ldr	r2, [r5, #12]
   29436:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2943a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2943c:	6832      	ldr	r2, [r6, #0]
   2943e:	f023 0304 	bic.w	r3, r3, #4
   29442:	2b03      	cmp	r3, #3
   29444:	d00d      	beq.n	29462 <ProcessAesDrv+0x1a2>
   29446:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29448:	f8d8 1000 	ldr.w	r1, [r8]
   2944c:	2b01      	cmp	r3, #1
   2944e:	4b52      	ldr	r3, [pc, #328]	; (29598 <ProcessAesDrv+0x2d8>)
   29450:	bf0b      	itete	eq
   29452:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   29456:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   2945a:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   2945e:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   29462:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   29464:	2b01      	cmp	r3, #1
   29466:	4b4c      	ldr	r3, [pc, #304]	; (29598 <ProcessAesDrv+0x2d8>)
   29468:	bf0b      	itete	eq
   2946a:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   2946e:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   29472:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   29476:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   2947a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2947c:	f023 0304 	bic.w	r3, r3, #4
   29480:	2b03      	cmp	r3, #3
   29482:	d06a      	beq.n	2955a <ProcessAesDrv+0x29a>
   29484:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   29486:	2b01      	cmp	r3, #1
   29488:	bf0c      	ite	eq
   2948a:	2080      	moveq	r0, #128	; 0x80
   2948c:	2020      	movne	r0, #32
   2948e:	f7fe fd57 	bl	27f40 <CC_HalWaitInterrupt>
   29492:	4604      	mov	r4, r0
   29494:	2800      	cmp	r0, #0
   29496:	f47f af4b 	bne.w	29330 <ProcessAesDrv+0x70>
   2949a:	4b3f      	ldr	r3, [pc, #252]	; (29598 <ProcessAesDrv+0x2d8>)
   2949c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   294a0:	2c00      	cmp	r4, #0
   294a2:	d1fb      	bne.n	2949c <ProcessAesDrv+0x1dc>
   294a4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   294a6:	3b01      	subs	r3, #1
   294a8:	2b06      	cmp	r3, #6
   294aa:	d812      	bhi.n	294d2 <ProcessAesDrv+0x212>
   294ac:	e8df f003 	tbb	[pc, r3]
   294b0:	11049904 	.word	0x11049904
   294b4:	9911      	.short	0x9911
   294b6:	04          	.byte	0x04
   294b7:	00          	.byte	0x00
   294b8:	4b37      	ldr	r3, [pc, #220]	; (29598 <ProcessAesDrv+0x2d8>)
   294ba:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   294be:	602a      	str	r2, [r5, #0]
   294c0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   294c4:	606a      	str	r2, [r5, #4]
   294c6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   294ca:	60aa      	str	r2, [r5, #8]
   294cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   294d0:	60eb      	str	r3, [r5, #12]
   294d2:	2301      	movs	r3, #1
   294d4:	65ab      	str	r3, [r5, #88]	; 0x58
   294d6:	e72b      	b.n	29330 <ProcessAesDrv+0x70>
   294d8:	4834      	ldr	r0, [pc, #208]	; (295ac <ProcessAesDrv+0x2ec>)
   294da:	f7fd fe4b 	bl	27174 <CC_PalAbort>
   294de:	2000      	movs	r0, #0
   294e0:	f7fe fdf4 	bl	280cc <CC_PalPowerSaveModeSelect>
   294e4:	2800      	cmp	r0, #0
   294e6:	f43f af15 	beq.w	29314 <ProcessAesDrv+0x54>
   294ea:	4831      	ldr	r0, [pc, #196]	; (295b0 <ProcessAesDrv+0x2f0>)
   294ec:	f7fd fe42 	bl	27174 <CC_PalAbort>
   294f0:	e710      	b.n	29314 <ProcessAesDrv+0x54>
   294f2:	4830      	ldr	r0, [pc, #192]	; (295b4 <ProcessAesDrv+0x2f4>)
   294f4:	f7fd fe3e 	bl	27174 <CC_PalAbort>
   294f8:	4620      	mov	r0, r4
   294fa:	b005      	add	sp, #20
   294fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29500:	482d      	ldr	r0, [pc, #180]	; (295b8 <ProcessAesDrv+0x2f8>)
   29502:	f7fd fe37 	bl	27174 <CC_PalAbort>
   29506:	e736      	b.n	29376 <ProcessAesDrv+0xb6>
   29508:	2304      	movs	r3, #4
   2950a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   2950e:	2120      	movs	r1, #32
   29510:	f105 0010 	add.w	r0, r5, #16
   29514:	f7fe fd92 	bl	2803c <CC_PalMemSetZeroPlat>
   29518:	e712      	b.n	29340 <ProcessAesDrv+0x80>
   2951a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2951c:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2951e:	f000 f9b5 	bl	2988c <kmu_validate_slot_and_size>
   29522:	b998      	cbnz	r0, 2954c <ProcessAesDrv+0x28c>
   29524:	4f25      	ldr	r7, [pc, #148]	; (295bc <ProcessAesDrv+0x2fc>)
   29526:	4c1c      	ldr	r4, [pc, #112]	; (29598 <ProcessAesDrv+0x2d8>)
   29528:	683b      	ldr	r3, [r7, #0]
   2952a:	681b      	ldr	r3, [r3, #0]
   2952c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   29530:	683b      	ldr	r3, [r7, #0]
   29532:	685b      	ldr	r3, [r3, #4]
   29534:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29538:	683b      	ldr	r3, [r7, #0]
   2953a:	689b      	ldr	r3, [r3, #8]
   2953c:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   29540:	683b      	ldr	r3, [r7, #0]
   29542:	68db      	ldr	r3, [r3, #12]
   29544:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29548:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2954a:	b161      	cbz	r1, 29566 <ProcessAesDrv+0x2a6>
   2954c:	2701      	movs	r7, #1
   2954e:	e6d3      	b.n	292f8 <ProcessAesDrv+0x38>
   29550:	4c1b      	ldr	r4, [pc, #108]	; (295c0 <ProcessAesDrv+0x300>)
   29552:	e6ed      	b.n	29330 <ProcessAesDrv+0x70>
   29554:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   29558:	e713      	b.n	29382 <ProcessAesDrv+0xc2>
   2955a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2955c:	2b01      	cmp	r3, #1
   2955e:	bf0c      	ite	eq
   29560:	2040      	moveq	r0, #64	; 0x40
   29562:	2010      	movne	r0, #16
   29564:	e793      	b.n	2948e <ProcessAesDrv+0x1ce>
   29566:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   29568:	9301      	str	r3, [sp, #4]
   2956a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   2956c:	9300      	str	r3, [sp, #0]
   2956e:	f105 0a10 	add.w	sl, r5, #16
   29572:	f04f 0b10 	mov.w	fp, #16
   29576:	f8cd a008 	str.w	sl, [sp, #8]
   2957a:	f8cd b00c 	str.w	fp, [sp, #12]
   2957e:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   29582:	6c28      	ldr	r0, [r5, #64]	; 0x40
   29584:	f000 f9a4 	bl	298d0 <kmu_derive_cmac>
   29588:	2800      	cmp	r0, #0
   2958a:	d13a      	bne.n	29602 <ProcessAesDrv+0x342>
   2958c:	2300      	movs	r3, #0
   2958e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   29592:	e7db      	b.n	2954c <ProcessAesDrv+0x28c>
   29594:	20000818 	.word	0x20000818
   29598:	5002b000 	.word	0x5002b000
   2959c:	00f10001 	.word	0x00f10001
   295a0:	00f10005 	.word	0x00f10005
   295a4:	00f1000b 	.word	0x00f1000b
   295a8:	00f10003 	.word	0x00f10003
   295ac:	0002f020 	.word	0x0002f020
   295b0:	0002f038 	.word	0x0002f038
   295b4:	0002f078 	.word	0x0002f078
   295b8:	0002f058 	.word	0x0002f058
   295bc:	20000808 	.word	0x20000808
   295c0:	00f10002 	.word	0x00f10002
   295c4:	4b19      	ldr	r3, [pc, #100]	; (2962c <ProcessAesDrv+0x36c>)
   295c6:	682a      	ldr	r2, [r5, #0]
   295c8:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   295cc:	686a      	ldr	r2, [r5, #4]
   295ce:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   295d2:	68aa      	ldr	r2, [r5, #8]
   295d4:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   295d8:	68ea      	ldr	r2, [r5, #12]
   295da:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   295de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   295e0:	e72c      	b.n	2943c <ProcessAesDrv+0x17c>
   295e2:	4b12      	ldr	r3, [pc, #72]	; (2962c <ProcessAesDrv+0x36c>)
   295e4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   295e8:	602a      	str	r2, [r5, #0]
   295ea:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   295ee:	606a      	str	r2, [r5, #4]
   295f0:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   295f4:	60aa      	str	r2, [r5, #8]
   295f6:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   295fa:	60eb      	str	r3, [r5, #12]
   295fc:	e769      	b.n	294d2 <ProcessAesDrv+0x212>
   295fe:	4c0c      	ldr	r4, [pc, #48]	; (29630 <ProcessAesDrv+0x370>)
   29600:	e696      	b.n	29330 <ProcessAesDrv+0x70>
   29602:	683b      	ldr	r3, [r7, #0]
   29604:	681b      	ldr	r3, [r3, #0]
   29606:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   2960a:	683b      	ldr	r3, [r7, #0]
   2960c:	685b      	ldr	r3, [r3, #4]
   2960e:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   29612:	683b      	ldr	r3, [r7, #0]
   29614:	689b      	ldr	r3, [r3, #8]
   29616:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   2961a:	683b      	ldr	r3, [r7, #0]
   2961c:	68db      	ldr	r3, [r3, #12]
   2961e:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   29622:	4659      	mov	r1, fp
   29624:	4650      	mov	r0, sl
   29626:	f7fe fd09 	bl	2803c <CC_PalMemSetZeroPlat>
   2962a:	e7af      	b.n	2958c <ProcessAesDrv+0x2cc>
   2962c:	5002b000 	.word	0x5002b000
   29630:	00f10004 	.word	0x00f10004

00029634 <FinishAesDrv>:
   29634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29638:	b301      	cbz	r1, 2967c <FinishAesDrv+0x48>
   2963a:	b1fa      	cbz	r2, 2967c <FinishAesDrv+0x48>
   2963c:	4604      	mov	r4, r0
   2963e:	2800      	cmp	r0, #0
   29640:	d07c      	beq.n	2973c <FinishAesDrv+0x108>
   29642:	461d      	mov	r5, r3
   29644:	6b43      	ldr	r3, [r0, #52]	; 0x34
   29646:	2b07      	cmp	r3, #7
   29648:	460e      	mov	r6, r1
   2964a:	d01b      	beq.n	29684 <FinishAesDrv+0x50>
   2964c:	b95d      	cbnz	r5, 29666 <FinishAesDrv+0x32>
   2964e:	2b03      	cmp	r3, #3
   29650:	d110      	bne.n	29674 <FinishAesDrv+0x40>
   29652:	6d83      	ldr	r3, [r0, #88]	; 0x58
   29654:	b973      	cbnz	r3, 29674 <FinishAesDrv+0x40>
   29656:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2965a:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2965e:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   29662:	600b      	str	r3, [r1, #0]
   29664:	2510      	movs	r5, #16
   29666:	462b      	mov	r3, r5
   29668:	4631      	mov	r1, r6
   2966a:	4620      	mov	r0, r4
   2966c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   29670:	f7ff be26 	b.w	292c0 <ProcessAesDrv>
   29674:	462f      	mov	r7, r5
   29676:	4638      	mov	r0, r7
   29678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2967c:	4f77      	ldr	r7, [pc, #476]	; (2985c <FinishAesDrv+0x228>)
   2967e:	4638      	mov	r0, r7
   29680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29684:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   29686:	2b00      	cmp	r3, #0
   29688:	d15b      	bne.n	29742 <FinishAesDrv+0x10e>
   2968a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2968e:	d25d      	bcs.n	2974c <FinishAesDrv+0x118>
   29690:	b915      	cbnz	r5, 29698 <FinishAesDrv+0x64>
   29692:	6da3      	ldr	r3, [r4, #88]	; 0x58
   29694:	2b00      	cmp	r3, #0
   29696:	d159      	bne.n	2974c <FinishAesDrv+0x118>
   29698:	4871      	ldr	r0, [pc, #452]	; (29860 <FinishAesDrv+0x22c>)
   2969a:	f04f 31ff 	mov.w	r1, #4294967295
   2969e:	f7fe fce5 	bl	2806c <CC_PalMutexLock>
   296a2:	2800      	cmp	r0, #0
   296a4:	f040 80b8 	bne.w	29818 <FinishAesDrv+0x1e4>
   296a8:	2000      	movs	r0, #0
   296aa:	f7fe fd0f 	bl	280cc <CC_PalPowerSaveModeSelect>
   296ae:	2800      	cmp	r0, #0
   296b0:	f040 80ae 	bne.w	29810 <FinishAesDrv+0x1dc>
   296b4:	4a6b      	ldr	r2, [pc, #428]	; (29864 <FinishAesDrv+0x230>)
   296b6:	2301      	movs	r3, #1
   296b8:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   296bc:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   296c0:	2b00      	cmp	r3, #0
   296c2:	d1fb      	bne.n	296bc <FinishAesDrv+0x88>
   296c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   296c6:	2b03      	cmp	r3, #3
   296c8:	dd20      	ble.n	2970c <FinishAesDrv+0xd8>
   296ca:	3b06      	subs	r3, #6
   296cc:	2b01      	cmp	r3, #1
   296ce:	d81f      	bhi.n	29710 <FinishAesDrv+0xdc>
   296d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   296d2:	2b01      	cmp	r3, #1
   296d4:	d83c      	bhi.n	29750 <FinishAesDrv+0x11c>
   296d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   296d8:	2b01      	cmp	r3, #1
   296da:	f200 80a5 	bhi.w	29828 <FinishAesDrv+0x1f4>
   296de:	6e23      	ldr	r3, [r4, #96]	; 0x60
   296e0:	2b01      	cmp	r3, #1
   296e2:	f200 80a3 	bhi.w	2982c <FinishAesDrv+0x1f8>
   296e6:	4620      	mov	r0, r4
   296e8:	f7ff fd60 	bl	291ac <InitAes.part.0>
   296ec:	4607      	mov	r7, r0
   296ee:	b980      	cbnz	r0, 29712 <FinishAesDrv+0xde>
   296f0:	4620      	mov	r0, r4
   296f2:	f7ff fd09 	bl	29108 <LoadAesKey>
   296f6:	4607      	mov	r7, r0
   296f8:	b958      	cbnz	r0, 29712 <FinishAesDrv+0xde>
   296fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   296fc:	2b07      	cmp	r3, #7
   296fe:	d807      	bhi.n	29710 <FinishAesDrv+0xdc>
   29700:	e8df f003 	tbb	[pc, r3]
   29704:	285c2835 	.word	0x285c2835
   29708:	285c0606 	.word	0x285c0606
   2970c:	2b00      	cmp	r3, #0
   2970e:	dadf      	bge.n	296d0 <FinishAesDrv+0x9c>
   29710:	4f55      	ldr	r7, [pc, #340]	; (29868 <FinishAesDrv+0x234>)
   29712:	4a54      	ldr	r2, [pc, #336]	; (29864 <FinishAesDrv+0x230>)
   29714:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   29718:	2b00      	cmp	r3, #0
   2971a:	d1fb      	bne.n	29714 <FinishAesDrv+0xe0>
   2971c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   29720:	2001      	movs	r0, #1
   29722:	f7fe fcd3 	bl	280cc <CC_PalPowerSaveModeSelect>
   29726:	2800      	cmp	r0, #0
   29728:	d17a      	bne.n	29820 <FinishAesDrv+0x1ec>
   2972a:	484d      	ldr	r0, [pc, #308]	; (29860 <FinishAesDrv+0x22c>)
   2972c:	f7fe fca6 	bl	2807c <CC_PalMutexUnlock>
   29730:	2800      	cmp	r0, #0
   29732:	d0a0      	beq.n	29676 <FinishAesDrv+0x42>
   29734:	484d      	ldr	r0, [pc, #308]	; (2986c <FinishAesDrv+0x238>)
   29736:	f7fd fd1d 	bl	27174 <CC_PalAbort>
   2973a:	e79c      	b.n	29676 <FinishAesDrv+0x42>
   2973c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   29740:	e799      	b.n	29676 <FinishAesDrv+0x42>
   29742:	2b01      	cmp	r3, #1
   29744:	d1a4      	bne.n	29690 <FinishAesDrv+0x5c>
   29746:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2974a:	d3a1      	bcc.n	29690 <FinishAesDrv+0x5c>
   2974c:	4f48      	ldr	r7, [pc, #288]	; (29870 <FinishAesDrv+0x23c>)
   2974e:	e792      	b.n	29676 <FinishAesDrv+0x42>
   29750:	4f48      	ldr	r7, [pc, #288]	; (29874 <FinishAesDrv+0x240>)
   29752:	e7de      	b.n	29712 <FinishAesDrv+0xde>
   29754:	4b43      	ldr	r3, [pc, #268]	; (29864 <FinishAesDrv+0x230>)
   29756:	6822      	ldr	r2, [r4, #0]
   29758:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   2975c:	6862      	ldr	r2, [r4, #4]
   2975e:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   29762:	68a2      	ldr	r2, [r4, #8]
   29764:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   29768:	68e2      	ldr	r2, [r4, #12]
   2976a:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   2976e:	4b3d      	ldr	r3, [pc, #244]	; (29864 <FinishAesDrv+0x230>)
   29770:	2201      	movs	r2, #1
   29772:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   29776:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   2977a:	2d00      	cmp	r5, #0
   2977c:	d158      	bne.n	29830 <FinishAesDrv+0x1fc>
   2977e:	6da1      	ldr	r1, [r4, #88]	; 0x58
   29780:	b909      	cbnz	r1, 29786 <FinishAesDrv+0x152>
   29782:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   29786:	4b37      	ldr	r3, [pc, #220]	; (29864 <FinishAesDrv+0x230>)
   29788:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   2978c:	2f00      	cmp	r7, #0
   2978e:	d1fb      	bne.n	29788 <FinishAesDrv+0x154>
   29790:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29792:	3b01      	subs	r3, #1
   29794:	2b06      	cmp	r3, #6
   29796:	d8bc      	bhi.n	29712 <FinishAesDrv+0xde>
   29798:	a201      	add	r2, pc, #4	; (adr r2, 297a0 <FinishAesDrv+0x16c>)
   2979a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2979e:	bf00      	nop
   297a0:	000297d9 	.word	0x000297d9
   297a4:	000297f5 	.word	0x000297f5
   297a8:	000297d9 	.word	0x000297d9
   297ac:	00029713 	.word	0x00029713
   297b0:	00029713 	.word	0x00029713
   297b4:	000297f5 	.word	0x000297f5
   297b8:	000297d9 	.word	0x000297d9
   297bc:	4b29      	ldr	r3, [pc, #164]	; (29864 <FinishAesDrv+0x230>)
   297be:	6822      	ldr	r2, [r4, #0]
   297c0:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   297c4:	6862      	ldr	r2, [r4, #4]
   297c6:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   297ca:	68a2      	ldr	r2, [r4, #8]
   297cc:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   297d0:	68e2      	ldr	r2, [r4, #12]
   297d2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   297d6:	e7ca      	b.n	2976e <FinishAesDrv+0x13a>
   297d8:	4b22      	ldr	r3, [pc, #136]	; (29864 <FinishAesDrv+0x230>)
   297da:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   297de:	6022      	str	r2, [r4, #0]
   297e0:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   297e4:	6062      	str	r2, [r4, #4]
   297e6:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   297ea:	60a2      	str	r2, [r4, #8]
   297ec:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   297f0:	60e3      	str	r3, [r4, #12]
   297f2:	e78e      	b.n	29712 <FinishAesDrv+0xde>
   297f4:	4b1b      	ldr	r3, [pc, #108]	; (29864 <FinishAesDrv+0x230>)
   297f6:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   297fa:	6022      	str	r2, [r4, #0]
   297fc:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   29800:	6062      	str	r2, [r4, #4]
   29802:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   29806:	60a2      	str	r2, [r4, #8]
   29808:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2980c:	60e3      	str	r3, [r4, #12]
   2980e:	e780      	b.n	29712 <FinishAesDrv+0xde>
   29810:	4819      	ldr	r0, [pc, #100]	; (29878 <FinishAesDrv+0x244>)
   29812:	f7fd fcaf 	bl	27174 <CC_PalAbort>
   29816:	e74d      	b.n	296b4 <FinishAesDrv+0x80>
   29818:	4818      	ldr	r0, [pc, #96]	; (2987c <FinishAesDrv+0x248>)
   2981a:	f7fd fcab 	bl	27174 <CC_PalAbort>
   2981e:	e743      	b.n	296a8 <FinishAesDrv+0x74>
   29820:	4817      	ldr	r0, [pc, #92]	; (29880 <FinishAesDrv+0x24c>)
   29822:	f7fd fca7 	bl	27174 <CC_PalAbort>
   29826:	e780      	b.n	2972a <FinishAesDrv+0xf6>
   29828:	4f16      	ldr	r7, [pc, #88]	; (29884 <FinishAesDrv+0x250>)
   2982a:	e772      	b.n	29712 <FinishAesDrv+0xde>
   2982c:	4f16      	ldr	r7, [pc, #88]	; (29888 <FinishAesDrv+0x254>)
   2982e:	e770      	b.n	29712 <FinishAesDrv+0xde>
   29830:	6de1      	ldr	r1, [r4, #92]	; 0x5c
   29832:	6832      	ldr	r2, [r6, #0]
   29834:	2901      	cmp	r1, #1
   29836:	d00a      	beq.n	2984e <FinishAesDrv+0x21a>
   29838:	f8c3 2c30 	str.w	r2, [r3, #3120]	; 0xc30
   2983c:	2010      	movs	r0, #16
   2983e:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   29842:	f7fe fb7d 	bl	27f40 <CC_HalWaitInterrupt>
   29846:	4607      	mov	r7, r0
   29848:	2800      	cmp	r0, #0
   2984a:	d09c      	beq.n	29786 <FinishAesDrv+0x152>
   2984c:	e761      	b.n	29712 <FinishAesDrv+0xde>
   2984e:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   29852:	2040      	movs	r0, #64	; 0x40
   29854:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   29858:	e7f3      	b.n	29842 <FinishAesDrv+0x20e>
   2985a:	bf00      	nop
   2985c:	00f1000b 	.word	0x00f1000b
   29860:	20000818 	.word	0x20000818
   29864:	5002b000 	.word	0x5002b000
   29868:	00f10001 	.word	0x00f10001
   2986c:	0002f078 	.word	0x0002f078
   29870:	00f10005 	.word	0x00f10005
   29874:	00f10002 	.word	0x00f10002
   29878:	0002f038 	.word	0x0002f038
   2987c:	0002f020 	.word	0x0002f020
   29880:	0002f058 	.word	0x0002f058
   29884:	00f10003 	.word	0x00f10003
   29888:	00f10004 	.word	0x00f10004

0002988c <kmu_validate_slot_and_size>:
   2988c:	b921      	cbnz	r1, 29898 <kmu_validate_slot_and_size+0xc>
   2988e:	4b03      	ldr	r3, [pc, #12]	; (2989c <kmu_validate_slot_and_size+0x10>)
   29890:	2800      	cmp	r0, #0
   29892:	bf18      	it	ne
   29894:	4618      	movne	r0, r3
   29896:	4770      	bx	lr
   29898:	4801      	ldr	r0, [pc, #4]	; (298a0 <kmu_validate_slot_and_size+0x14>)
   2989a:	4770      	bx	lr
   2989c:	00f70001 	.word	0x00f70001
   298a0:	00f70003 	.word	0x00f70003

000298a4 <kmu_validate_kdr_slot_and_size>:
   298a4:	b921      	cbnz	r1, 298b0 <kmu_validate_kdr_slot_and_size+0xc>
   298a6:	4b03      	ldr	r3, [pc, #12]	; (298b4 <kmu_validate_kdr_slot_and_size+0x10>)
   298a8:	2800      	cmp	r0, #0
   298aa:	bf18      	it	ne
   298ac:	4618      	movne	r0, r3
   298ae:	4770      	bx	lr
   298b0:	4801      	ldr	r0, [pc, #4]	; (298b8 <kmu_validate_kdr_slot_and_size+0x14>)
   298b2:	4770      	bx	lr
   298b4:	00f70001 	.word	0x00f70001
   298b8:	00f70003 	.word	0x00f70003

000298bc <kmu_use_kdr_key>:
   298bc:	4b03      	ldr	r3, [pc, #12]	; (298cc <kmu_use_kdr_key+0x10>)
   298be:	2000      	movs	r0, #0
   298c0:	2201      	movs	r2, #1
   298c2:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   298c6:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   298ca:	4770      	bx	lr
   298cc:	5002b000 	.word	0x5002b000

000298d0 <kmu_derive_cmac>:
   298d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   298d4:	b0cc      	sub	sp, #304	; 0x130
   298d6:	2400      	movs	r4, #0
   298d8:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   298da:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   298de:	4682      	mov	sl, r0
   298e0:	4689      	mov	r9, r1
   298e2:	4616      	mov	r6, r2
   298e4:	4621      	mov	r1, r4
   298e6:	2274      	movs	r2, #116	; 0x74
   298e8:	a80e      	add	r0, sp, #56	; 0x38
   298ea:	461f      	mov	r7, r3
   298ec:	f001 fb8e 	bl	2b00c <memset>
   298f0:	2280      	movs	r2, #128	; 0x80
   298f2:	4621      	mov	r1, r4
   298f4:	a82c      	add	r0, sp, #176	; 0xb0
   298f6:	942b      	str	r4, [sp, #172]	; 0xac
   298f8:	f001 fb88 	bl	2b00c <memset>
   298fc:	2384      	movs	r3, #132	; 0x84
   298fe:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   29902:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   29906:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2990a:	9305      	str	r3, [sp, #20]
   2990c:	d863      	bhi.n	299d6 <kmu_derive_cmac+0x106>
   2990e:	f7ff fcbf 	bl	29290 <write_invalid_key>
   29912:	ab05      	add	r3, sp, #20
   29914:	4630      	mov	r0, r6
   29916:	ae2b      	add	r6, sp, #172	; 0xac
   29918:	9301      	str	r3, [sp, #4]
   2991a:	9502      	str	r5, [sp, #8]
   2991c:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   29920:	4639      	mov	r1, r7
   29922:	9600      	str	r6, [sp, #0]
   29924:	f000 f862 	bl	299ec <UtilCmacBuildDataForDerivation>
   29928:	2800      	cmp	r0, #0
   2992a:	d14f      	bne.n	299cc <kmu_derive_cmac+0xfc>
   2992c:	2303      	movs	r3, #3
   2992e:	f88d 3013 	strb.w	r3, [sp, #19]
   29932:	f89d 3013 	ldrb.w	r3, [sp, #19]
   29936:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2993a:	2307      	movs	r3, #7
   2993c:	2200      	movs	r2, #0
   2993e:	901c      	str	r0, [sp, #112]	; 0x70
   29940:	2110      	movs	r1, #16
   29942:	a80e      	add	r0, sp, #56	; 0x38
   29944:	931b      	str	r3, [sp, #108]	; 0x6c
   29946:	2401      	movs	r4, #1
   29948:	2301      	movs	r3, #1
   2994a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2994e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   29952:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   29956:	9426      	str	r4, [sp, #152]	; 0x98
   29958:	f10d 0920 	add.w	r9, sp, #32
   2995c:	f7fe fb6e 	bl	2803c <CC_PalMemSetZeroPlat>
   29960:	2210      	movs	r2, #16
   29962:	9200      	str	r2, [sp, #0]
   29964:	9905      	ldr	r1, [sp, #20]
   29966:	f8cd 9004 	str.w	r9, [sp, #4]
   2996a:	ab0a      	add	r3, sp, #40	; 0x28
   2996c:	4630      	mov	r0, r6
   2996e:	aa06      	add	r2, sp, #24
   29970:	f7ff fa1e 	bl	28db0 <SetDataBuffersInfo>
   29974:	4607      	mov	r7, r0
   29976:	b170      	cbz	r0, 29996 <kmu_derive_cmac+0xc6>
   29978:	e01d      	b.n	299b6 <kmu_derive_cmac+0xe6>
   2997a:	a90e      	add	r1, sp, #56	; 0x38
   2997c:	eb08 0007 	add.w	r0, r8, r7
   29980:	f7fe fb58 	bl	28034 <CC_PalMemCopyPlat>
   29984:	2110      	movs	r1, #16
   29986:	a80e      	add	r0, sp, #56	; 0x38
   29988:	f7fe fb58 	bl	2803c <CC_PalMemSetZeroPlat>
   2998c:	3401      	adds	r4, #1
   2998e:	1bad      	subs	r5, r5, r6
   29990:	4437      	add	r7, r6
   29992:	b2e4      	uxtb	r4, r4
   29994:	d024      	beq.n	299e0 <kmu_derive_cmac+0x110>
   29996:	2d10      	cmp	r5, #16
   29998:	464a      	mov	r2, r9
   2999a:	9b05      	ldr	r3, [sp, #20]
   2999c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   299a0:	a906      	add	r1, sp, #24
   299a2:	a80e      	add	r0, sp, #56	; 0x38
   299a4:	462e      	mov	r6, r5
   299a6:	bf28      	it	cs
   299a8:	2610      	movcs	r6, #16
   299aa:	f7ff fe43 	bl	29634 <FinishAesDrv>
   299ae:	4632      	mov	r2, r6
   299b0:	2800      	cmp	r0, #0
   299b2:	d0e2      	beq.n	2997a <kmu_derive_cmac+0xaa>
   299b4:	4607      	mov	r7, r0
   299b6:	a80e      	add	r0, sp, #56	; 0x38
   299b8:	2274      	movs	r2, #116	; 0x74
   299ba:	2100      	movs	r1, #0
   299bc:	f7fe fb3c 	bl	28038 <CC_PalMemSetPlat>
   299c0:	f7ff fc66 	bl	29290 <write_invalid_key>
   299c4:	4638      	mov	r0, r7
   299c6:	b04c      	add	sp, #304	; 0x130
   299c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   299cc:	4f05      	ldr	r7, [pc, #20]	; (299e4 <kmu_derive_cmac+0x114>)
   299ce:	4638      	mov	r0, r7
   299d0:	b04c      	add	sp, #304	; 0x130
   299d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   299d6:	4f04      	ldr	r7, [pc, #16]	; (299e8 <kmu_derive_cmac+0x118>)
   299d8:	4638      	mov	r0, r7
   299da:	b04c      	add	sp, #304	; 0x130
   299dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   299e0:	462f      	mov	r7, r5
   299e2:	e7e8      	b.n	299b6 <kmu_derive_cmac+0xe6>
   299e4:	00f1000e 	.word	0x00f1000e
   299e8:	00f1000f 	.word	0x00f1000f

000299ec <UtilCmacBuildDataForDerivation>:
   299ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   299f0:	b082      	sub	sp, #8
   299f2:	461e      	mov	r6, r3
   299f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   299f6:	2300      	movs	r3, #0
   299f8:	f5b4 6f7f 	cmp.w	r4, #4080	; 0xff0
   299fc:	9301      	str	r3, [sp, #4]
   299fe:	d83e      	bhi.n	29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a00:	00e4      	lsls	r4, r4, #3
   29a02:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   29a06:	4617      	mov	r7, r2
   29a08:	f101 32ff 	add.w	r2, r1, #4294967295
   29a0c:	bf34      	ite	cc
   29a0e:	2303      	movcc	r3, #3
   29a10:	2304      	movcs	r3, #4
   29a12:	2a3f      	cmp	r2, #63	; 0x3f
   29a14:	460d      	mov	r5, r1
   29a16:	9300      	str	r3, [sp, #0]
   29a18:	d831      	bhi.n	29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a1a:	b380      	cbz	r0, 29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a1c:	b116      	cbz	r6, 29a24 <UtilCmacBuildDataForDerivation+0x38>
   29a1e:	b377      	cbz	r7, 29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a20:	2e40      	cmp	r6, #64	; 0x40
   29a22:	d82c      	bhi.n	29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a24:	9a08      	ldr	r2, [sp, #32]
   29a26:	b352      	cbz	r2, 29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29a2a:	6811      	ldr	r1, [r2, #0]
   29a2c:	b339      	cbz	r1, 29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a2e:	19aa      	adds	r2, r5, r6
   29a30:	4413      	add	r3, r2
   29a32:	4299      	cmp	r1, r3
   29a34:	d323      	bcc.n	29a7e <UtilCmacBuildDataForDerivation+0x92>
   29a36:	9b08      	ldr	r3, [sp, #32]
   29a38:	4601      	mov	r1, r0
   29a3a:	462a      	mov	r2, r5
   29a3c:	1c58      	adds	r0, r3, #1
   29a3e:	f7fe faf9 	bl	28034 <CC_PalMemCopyPlat>
   29a42:	9b08      	ldr	r3, [sp, #32]
   29a44:	f105 0802 	add.w	r8, r5, #2
   29a48:	441d      	add	r5, r3
   29a4a:	2300      	movs	r3, #0
   29a4c:	706b      	strb	r3, [r5, #1]
   29a4e:	bb0e      	cbnz	r6, 29a94 <UtilCmacBuildDataForDerivation+0xa8>
   29a50:	9b08      	ldr	r3, [sp, #32]
   29a52:	9400      	str	r4, [sp, #0]
   29a54:	2cff      	cmp	r4, #255	; 0xff
   29a56:	eb03 0008 	add.w	r0, r3, r8
   29a5a:	d914      	bls.n	29a86 <UtilCmacBuildDataForDerivation+0x9a>
   29a5c:	0223      	lsls	r3, r4, #8
   29a5e:	b29b      	uxth	r3, r3
   29a60:	ea43 2414 	orr.w	r4, r3, r4, lsr #8
   29a64:	2202      	movs	r2, #2
   29a66:	a901      	add	r1, sp, #4
   29a68:	9401      	str	r4, [sp, #4]
   29a6a:	f7fe fae3 	bl	28034 <CC_PalMemCopyPlat>
   29a6e:	f108 0302 	add.w	r3, r8, #2
   29a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29a74:	2000      	movs	r0, #0
   29a76:	6013      	str	r3, [r2, #0]
   29a78:	b002      	add	sp, #8
   29a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29a7e:	480a      	ldr	r0, [pc, #40]	; (29aa8 <UtilCmacBuildDataForDerivation+0xbc>)
   29a80:	b002      	add	sp, #8
   29a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29a86:	2201      	movs	r2, #1
   29a88:	4669      	mov	r1, sp
   29a8a:	f7fe fad3 	bl	28034 <CC_PalMemCopyPlat>
   29a8e:	f108 0301 	add.w	r3, r8, #1
   29a92:	e7ee      	b.n	29a72 <UtilCmacBuildDataForDerivation+0x86>
   29a94:	9b08      	ldr	r3, [sp, #32]
   29a96:	4632      	mov	r2, r6
   29a98:	eb03 0008 	add.w	r0, r3, r8
   29a9c:	4639      	mov	r1, r7
   29a9e:	f7fe fac9 	bl	28034 <CC_PalMemCopyPlat>
   29aa2:	44b0      	add	r8, r6
   29aa4:	e7d4      	b.n	29a50 <UtilCmacBuildDataForDerivation+0x64>
   29aa6:	bf00      	nop
   29aa8:	80000006 	.word	0x80000006

00029aac <CC_PalDataBufferAttrGet>:
   29aac:	2000      	movs	r0, #0
   29aae:	7018      	strb	r0, [r3, #0]
   29ab0:	4770      	bx	lr
   29ab2:	bf00      	nop

00029ab4 <led_write_cb>:
}
   29ab4:	4770      	bx	lr

00029ab6 <bt_joybus_conn>:
}
   29ab6:	6800      	ldr	r0, [r0, #0]
   29ab8:	4770      	bx	lr

00029aba <input_rsp_start_periodic_read>:
{
   29aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!joy || !func || !interval) {
   29abc:	4606      	mov	r6, r0
   29abe:	b338      	cbz	r0, 29b10 <input_rsp_start_periodic_read+0x56>
   29ac0:	b332      	cbz	r2, 29b10 <input_rsp_start_periodic_read+0x56>
   29ac2:	b329      	cbz	r1, 29b10 <input_rsp_start_periodic_read+0x56>
	if (bt_joy_input_rsp_notify_supported(joy)) {
   29ac4:	f890 4088 	ldrb.w	r4, [r0, #136]	; 0x88
   29ac8:	bb2c      	cbnz	r4, 29b16 <input_rsp_start_periodic_read+0x5c>
	joy->input_rsp_read_cb = func;
   29aca:	67c2      	str	r2, [r0, #124]	; 0x7c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29acc:	f100 0370 	add.w	r3, r0, #112	; 0x70
   29ad0:	f3bf 8f5b 	dmb	ish
   29ad4:	e853 2f00 	ldrex	r2, [r3]
   29ad8:	e843 1000 	strex	r0, r1, [r3]
   29adc:	2800      	cmp	r0, #0
   29ade:	d1f9      	bne.n	29ad4 <input_rsp_start_periodic_read+0x1a>
   29ae0:	f3bf 8f5b 	dmb	ish
	k_work_schedule(&joy->input_rsp_periodic_read.read_work, K_MSEC(interval));
   29ae4:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
   29ae8:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   29aec:	f240 30e7 	movw	r0, #999	; 0x3e7
   29af0:	4621      	mov	r1, r4
   29af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   29af6:	2300      	movs	r3, #0
   29af8:	fbc5 0107 	smlal	r0, r1, r5, r7
   29afc:	f7d6 fb00 	bl	100 <__aeabi_uldivmod>
   29b00:	4602      	mov	r2, r0
   29b02:	460b      	mov	r3, r1
   29b04:	f106 0030 	add.w	r0, r6, #48	; 0x30
   29b08:	f7fb f8fc 	bl	24d04 <k_work_schedule>
	return 0;
   29b0c:	4620      	mov	r0, r4
}
   29b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   29b10:	f06f 0015 	mvn.w	r0, #21
   29b14:	e7fb      	b.n	29b0e <input_rsp_start_periodic_read+0x54>
		return -ENOTSUP;
   29b16:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29b1a:	e7f8      	b.n	29b0e <input_rsp_start_periodic_read+0x54>

00029b1c <on_le_param_req>:
}
   29b1c:	4770      	bx	lr

00029b1e <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   29b1e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   29b20:	2364      	movs	r3, #100	; 0x64
{
   29b22:	4605      	mov	r5, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   29b24:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   29b26:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   29b28:	270a      	movs	r7, #10
	while (buflen > 0 && divisor > 0) {
   29b2a:	b969      	cbnz	r1, 29b48 <u8_to_dec+0x2a>
	if (buflen) {
		*buf = '\0';
	}

	return num_digits;
}
   29b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   29b2e:	429a      	cmp	r2, r3
   29b30:	fbb2 f4f3 	udiv	r4, r2, r3
   29b34:	d20c      	bcs.n	29b50 <u8_to_dec+0x32>
   29b36:	2b01      	cmp	r3, #1
   29b38:	d00a      	beq.n	29b50 <u8_to_dec+0x32>
   29b3a:	b948      	cbnz	r0, 29b50 <u8_to_dec+0x32>
		value -= digit * divisor;
   29b3c:	fb03 2214 	mls	r2, r3, r4, r2
   29b40:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   29b42:	240a      	movs	r4, #10
   29b44:	fbb3 f3f4 	udiv	r3, r3, r4
	while (buflen > 0 && divisor > 0) {
   29b48:	3e01      	subs	r6, #1
   29b4a:	d1f0      	bne.n	29b2e <u8_to_dec+0x10>
		*buf = '\0';
   29b4c:	702e      	strb	r6, [r5, #0]
	return num_digits;
   29b4e:	e7ed      	b.n	29b2c <u8_to_dec+0xe>
			*buf = (char)digit + '0';
   29b50:	3430      	adds	r4, #48	; 0x30
   29b52:	f805 4b01 	strb.w	r4, [r5], #1
			buflen--;
   29b56:	fbb2 f4f3 	udiv	r4, r2, r3
   29b5a:	3901      	subs	r1, #1
   29b5c:	fb03 2214 	mls	r2, r3, r4, r2
			num_digits++;
   29b60:	3001      	adds	r0, #1
		divisor /= 10;
   29b62:	fbb3 f3f7 	udiv	r3, r3, r7
			buflen--;
   29b66:	b2c9      	uxtb	r1, r1
			num_digits++;
   29b68:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   29b6a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   29b6c:	b2db      	uxtb	r3, r3
   29b6e:	e7dc      	b.n	29b2a <u8_to_dec+0xc>

00029b70 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   29b70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   29b74:	b2db      	uxtb	r3, r3
   29b76:	2b09      	cmp	r3, #9
   29b78:	d802      	bhi.n	29b80 <char2hex+0x10>
		*x = c - '0';
   29b7a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   29b7c:	2000      	movs	r0, #0
   29b7e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   29b80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   29b84:	2b05      	cmp	r3, #5
   29b86:	d802      	bhi.n	29b8e <char2hex+0x1e>
		*x = c - 'a' + 10;
   29b88:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   29b8a:	b2c3      	uxtb	r3, r0
   29b8c:	e7f5      	b.n	29b7a <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   29b8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   29b92:	2b05      	cmp	r3, #5
   29b94:	d801      	bhi.n	29b9a <char2hex+0x2a>
		*x = c - 'A' + 10;
   29b96:	3837      	subs	r0, #55	; 0x37
   29b98:	e7f7      	b.n	29b8a <char2hex+0x1a>
		return -EINVAL;
   29b9a:	f06f 0015 	mvn.w	r0, #21
}
   29b9e:	4770      	bx	lr

00029ba0 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   29ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29ba2:	4605      	mov	r5, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   29ba4:	f001 0001 	and.w	r0, r1, #1
   29ba8:	eb00 0651 	add.w	r6, r0, r1, lsr #1
   29bac:	429e      	cmp	r6, r3
   29bae:	ea4f 0751 	mov.w	r7, r1, lsr #1
   29bb2:	d903      	bls.n	29bbc <hex2bin+0x1c>
		return 0;
   29bb4:	2600      	movs	r6, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   29bb6:	4630      	mov	r0, r6
   29bb8:	b003      	add	sp, #12
   29bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   29bbc:	b158      	cbz	r0, 29bd6 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   29bbe:	7828      	ldrb	r0, [r5, #0]
   29bc0:	f10d 0107 	add.w	r1, sp, #7
   29bc4:	f7ff ffd4 	bl	29b70 <char2hex>
   29bc8:	2800      	cmp	r0, #0
   29bca:	dbf3      	blt.n	29bb4 <hex2bin+0x14>
		buf[0] = dec;
   29bcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29bd0:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   29bd4:	3501      	adds	r5, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   29bd6:	3501      	adds	r5, #1
   29bd8:	4417      	add	r7, r2
   29bda:	42ba      	cmp	r2, r7
   29bdc:	d0eb      	beq.n	29bb6 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   29bde:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   29be2:	f10d 0107 	add.w	r1, sp, #7
   29be6:	f7ff ffc3 	bl	29b70 <char2hex>
   29bea:	2800      	cmp	r0, #0
   29bec:	dbe2      	blt.n	29bb4 <hex2bin+0x14>
		buf[i] = dec << 4;
   29bee:	f89d 4007 	ldrb.w	r4, [sp, #7]
   29bf2:	0124      	lsls	r4, r4, #4
   29bf4:	b2e4      	uxtb	r4, r4
   29bf6:	7014      	strb	r4, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   29bf8:	f815 0b02 	ldrb.w	r0, [r5], #2
   29bfc:	f7ff ffb8 	bl	29b70 <char2hex>
   29c00:	2800      	cmp	r0, #0
   29c02:	dbd7      	blt.n	29bb4 <hex2bin+0x14>
		buf[i] += dec;
   29c04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29c08:	441c      	add	r4, r3
   29c0a:	f802 4b01 	strb.w	r4, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   29c0e:	e7e4      	b.n	29bda <hex2bin+0x3a>

00029c10 <arch_printk_char_out>:
}
   29c10:	2000      	movs	r0, #0
   29c12:	4770      	bx	lr

00029c14 <str_out>:
{
   29c14:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   29c16:	688a      	ldr	r2, [r1, #8]
   29c18:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   29c1a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   29c1c:	b114      	cbz	r4, 29c24 <str_out+0x10>
   29c1e:	684b      	ldr	r3, [r1, #4]
   29c20:	4293      	cmp	r3, r2
   29c22:	dc01      	bgt.n	29c28 <str_out+0x14>
		ctx->count++;
   29c24:	608d      	str	r5, [r1, #8]
}
   29c26:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   29c28:	3b01      	subs	r3, #1
   29c2a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   29c2c:	bf08      	it	eq
   29c2e:	2200      	moveq	r2, #0
   29c30:	608d      	str	r5, [r1, #8]
   29c32:	bf0c      	ite	eq
   29c34:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   29c36:	54a0      	strbne	r0, [r4, r2]
   29c38:	e7f5      	b.n	29c26 <str_out+0x12>

00029c3a <printk>:
{
   29c3a:	b40f      	push	{r0, r1, r2, r3}
   29c3c:	b507      	push	{r0, r1, r2, lr}
   29c3e:	a904      	add	r1, sp, #16
   29c40:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   29c44:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   29c46:	f7e8 fad1 	bl	121ec <vprintk>
}
   29c4a:	b003      	add	sp, #12
   29c4c:	f85d eb04 	ldr.w	lr, [sp], #4
   29c50:	b004      	add	sp, #16
   29c52:	4770      	bx	lr

00029c54 <snprintk>:
{
   29c54:	b40c      	push	{r2, r3}
   29c56:	b507      	push	{r0, r1, r2, lr}
   29c58:	ab04      	add	r3, sp, #16
   29c5a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   29c5e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   29c60:	f7e8 fad2 	bl	12208 <vsnprintk>
}
   29c64:	b003      	add	sp, #12
   29c66:	f85d eb04 	ldr.w	lr, [sp], #4
   29c6a:	b002      	add	sp, #8
   29c6c:	4770      	bx	lr

00029c6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   29c6e:	4604      	mov	r4, r0
   29c70:	b508      	push	{r3, lr}
   29c72:	4608      	mov	r0, r1
   29c74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   29c76:	461a      	mov	r2, r3
   29c78:	47a0      	blx	r4
	return z_impl_z_current_get();
   29c7a:	f7fc f805 	bl	25c88 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   29c7e:	f7eb fbb1 	bl	153e4 <z_impl_k_thread_abort>

00029c82 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   29c82:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   29c86:	8840      	ldrh	r0, [r0, #2]
}
   29c88:	0840      	lsrs	r0, r0, #1
   29c8a:	4770      	bx	lr

00029c8c <free_list_add>:
{
   29c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29c8e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   29c90:	f7ff fff7 	bl	29c82 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   29c94:	fab0 f080 	clz	r0, r0
   29c98:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   29c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   29ca0:	00ca      	lsls	r2, r1, #3
   29ca2:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   29ca6:	1d17      	adds	r7, r2, #4
{
   29ca8:	460c      	mov	r4, r1
   29caa:	3206      	adds	r2, #6
   29cac:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   29cae:	b956      	cbnz	r6, 29cc6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   29cb0:	2101      	movs	r1, #1
   29cb2:	fa01 f000 	lsl.w	r0, r1, r0
   29cb6:	68d9      	ldr	r1, [r3, #12]
   29cb8:	4301      	orrs	r1, r0
   29cba:	60d9      	str	r1, [r3, #12]
		b->next = c;
   29cbc:	f8cc 4010 	str.w	r4, [ip, #16]
   29cc0:	53dd      	strh	r5, [r3, r7]
   29cc2:	529d      	strh	r5, [r3, r2]
}
   29cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   29cc6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   29cc8:	3104      	adds	r1, #4
   29cca:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   29ccc:	53d8      	strh	r0, [r3, r7]
   29cce:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   29cd2:	529e      	strh	r6, [r3, r2]
   29cd4:	80c5      	strh	r5, [r0, #6]
   29cd6:	525d      	strh	r5, [r3, r1]
   29cd8:	e7f4      	b.n	29cc4 <free_list_add+0x38>

00029cda <free_list_remove_bidx>:
{
   29cda:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   29cdc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   29ce0:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   29ce2:	4299      	cmp	r1, r3
   29ce4:	f102 0104 	add.w	r1, r2, #4
   29ce8:	d10a      	bne.n	29d00 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   29cea:	2301      	movs	r3, #1
   29cec:	fa03 f202 	lsl.w	r2, r3, r2
   29cf0:	68c3      	ldr	r3, [r0, #12]
   29cf2:	ea23 0302 	bic.w	r3, r3, r2
   29cf6:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   29cf8:	2300      	movs	r3, #0
   29cfa:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   29cfe:	bd10      	pop	{r4, pc}
   29d00:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   29d02:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   29d06:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   29d0a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   29d0e:	80cb      	strh	r3, [r1, #6]
   29d10:	8082      	strh	r2, [r0, #4]
}
   29d12:	e7f4      	b.n	29cfe <free_list_remove_bidx+0x24>

00029d14 <free_list_remove>:
{
   29d14:	b508      	push	{r3, lr}
   29d16:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   29d18:	f7ff ffb3 	bl	29c82 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   29d1c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   29d20:	f1c2 021f 	rsb	r2, r2, #31
   29d24:	4618      	mov	r0, r3
}
   29d26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   29d2a:	f7ff bfd6 	b.w	29cda <free_list_remove_bidx>

00029d2e <alloc_chunk>:
{
   29d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29d32:	fab1 f581 	clz	r5, r1
   29d36:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   29d3a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   29d3e:	4603      	mov	r3, r0
	if (b->next) {
   29d40:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   29d44:	460e      	mov	r6, r1
	if (b->next) {
   29d46:	b1c2      	cbz	r2, 29d7a <alloc_chunk+0x4c>
   29d48:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   29d4a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   29d4e:	4618      	mov	r0, r3
   29d50:	4621      	mov	r1, r4
   29d52:	f7ff ff96 	bl	29c82 <chunk_size>
   29d56:	42b0      	cmp	r0, r6
   29d58:	d306      	bcc.n	29d68 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   29d5a:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   29d5c:	4618      	mov	r0, r3
   29d5e:	f7ff ffbc 	bl	29cda <free_list_remove_bidx>
}
   29d62:	4620      	mov	r0, r4
   29d64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   29d68:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   29d6c:	3f01      	subs	r7, #1
   29d6e:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   29d70:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   29d74:	d001      	beq.n	29d7a <alloc_chunk+0x4c>
   29d76:	4282      	cmp	r2, r0
   29d78:	d1e7      	bne.n	29d4a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   29d7a:	f1c5 0220 	rsb	r2, r5, #32
   29d7e:	f04f 34ff 	mov.w	r4, #4294967295
   29d82:	4094      	lsls	r4, r2
   29d84:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   29d86:	4014      	ands	r4, r2
   29d88:	d0eb      	beq.n	29d62 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   29d8a:	fa94 f2a4 	rbit	r2, r4
   29d8e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   29d92:	1d11      	adds	r1, r2, #4
   29d94:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   29d98:	4621      	mov	r1, r4
   29d9a:	e7df      	b.n	29d5c <alloc_chunk+0x2e>

00029d9c <merge_chunks>:
{
   29d9c:	b538      	push	{r3, r4, r5, lr}
   29d9e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   29da0:	f7ff ff6f 	bl	29c82 <chunk_size>
{
   29da4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   29da6:	4604      	mov	r4, r0
   29da8:	4611      	mov	r1, r2
   29daa:	4618      	mov	r0, r3
   29dac:	f7ff ff69 	bl	29c82 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   29db0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   29db4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   29db6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   29db8:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   29dba:	4618      	mov	r0, r3
   29dbc:	f7ff ff61 	bl	29c82 <chunk_size>
	void *cmem = &buf[c];
   29dc0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   29dc2:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   29dc6:	bd38      	pop	{r3, r4, r5, pc}

00029dc8 <split_chunks>:
{
   29dc8:	b538      	push	{r3, r4, r5, lr}
   29dca:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   29dcc:	f7ff ff59 	bl	29c82 <chunk_size>
{
   29dd0:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   29dd2:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   29dd4:	1a51      	subs	r1, r2, r1
   29dd6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   29dda:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   29ddc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   29dde:	8060      	strh	r0, [r4, #2]
   29de0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   29de4:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   29de6:	8044      	strh	r4, [r0, #2]
   29de8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   29dec:	4618      	mov	r0, r3
   29dee:	4611      	mov	r1, r2
   29df0:	f7ff ff47 	bl	29c82 <chunk_size>
	void *cmem = &buf[c];
   29df4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   29df6:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   29dfa:	bd38      	pop	{r3, r4, r5, pc}

00029dfc <free_chunk>:
{
   29dfc:	b538      	push	{r3, r4, r5, lr}
   29dfe:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   29e00:	f7ff ff3f 	bl	29c82 <chunk_size>
   29e04:	460c      	mov	r4, r1
   29e06:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   29e08:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   29e0c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   29e0e:	07da      	lsls	r2, r3, #31
   29e10:	d40a      	bmi.n	29e28 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   29e12:	4628      	mov	r0, r5
   29e14:	f7ff ff7e 	bl	29d14 <free_list_remove>
	return c + chunk_size(h, c);
   29e18:	4621      	mov	r1, r4
   29e1a:	4628      	mov	r0, r5
   29e1c:	f7ff ff31 	bl	29c82 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   29e20:	1822      	adds	r2, r4, r0
   29e22:	4628      	mov	r0, r5
   29e24:	f7ff ffba 	bl	29d9c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   29e28:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   29e2c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   29e2e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   29e32:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   29e34:	07db      	lsls	r3, r3, #31
   29e36:	d40c      	bmi.n	29e52 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   29e38:	4628      	mov	r0, r5
   29e3a:	f7ff ff6b 	bl	29d14 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   29e3e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   29e42:	4622      	mov	r2, r4
   29e44:	1a61      	subs	r1, r4, r1
   29e46:	4628      	mov	r0, r5
   29e48:	f7ff ffa8 	bl	29d9c <merge_chunks>
   29e4c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   29e50:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   29e52:	4621      	mov	r1, r4
   29e54:	4628      	mov	r0, r5
}
   29e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   29e5a:	f7ff bf17 	b.w	29c8c <free_list_add>

00029e5e <sys_heap_alloc>:
{
   29e5e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   29e60:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   29e62:	b909      	cbnz	r1, 29e68 <sys_heap_alloc+0xa>
		return NULL;
   29e64:	2000      	movs	r0, #0
}
   29e66:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   29e68:	68ab      	ldr	r3, [r5, #8]
   29e6a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   29e6e:	d9f9      	bls.n	29e64 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   29e70:	310b      	adds	r1, #11
   29e72:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   29e74:	4621      	mov	r1, r4
   29e76:	4628      	mov	r0, r5
   29e78:	f7ff ff59 	bl	29d2e <alloc_chunk>
	if (c == 0U) {
   29e7c:	4606      	mov	r6, r0
   29e7e:	2800      	cmp	r0, #0
   29e80:	d0f0      	beq.n	29e64 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   29e82:	4601      	mov	r1, r0
   29e84:	4628      	mov	r0, r5
   29e86:	f7ff fefc 	bl	29c82 <chunk_size>
   29e8a:	42a0      	cmp	r0, r4
   29e8c:	d907      	bls.n	29e9e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   29e8e:	1932      	adds	r2, r6, r4
   29e90:	4628      	mov	r0, r5
   29e92:	f7ff ff99 	bl	29dc8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   29e96:	4611      	mov	r1, r2
   29e98:	4628      	mov	r0, r5
   29e9a:	f7ff fef7 	bl	29c8c <free_list_add>
	void *cmem = &buf[c];
   29e9e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   29ea2:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   29ea4:	8853      	ldrh	r3, [r2, #2]
   29ea6:	f043 0301 	orr.w	r3, r3, #1
   29eaa:	8053      	strh	r3, [r2, #2]
   29eac:	3004      	adds	r0, #4
	return mem;
   29eae:	e7da      	b.n	29e66 <sys_heap_alloc+0x8>

00029eb0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   29eb0:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   29eb2:	f013 0307 	ands.w	r3, r3, #7
   29eb6:	d105      	bne.n	29ec4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   29eb8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   29eba:	2b00      	cmp	r3, #0
   29ebc:	bf0c      	ite	eq
   29ebe:	2000      	moveq	r0, #0
   29ec0:	2003      	movne	r0, #3
   29ec2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   29ec4:	2b02      	cmp	r3, #2
   29ec6:	d105      	bne.n	29ed4 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   29ec8:	8bc0      	ldrh	r0, [r0, #30]
   29eca:	fab0 f080 	clz	r0, r0
   29ece:	0940      	lsrs	r0, r0, #5
   29ed0:	0080      	lsls	r0, r0, #2
   29ed2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   29ed4:	2b01      	cmp	r3, #1
   29ed6:	d105      	bne.n	29ee4 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   29ed8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   29eda:	2b00      	cmp	r3, #0
   29edc:	bf0c      	ite	eq
   29ede:	2000      	moveq	r0, #0
   29ee0:	2005      	movne	r0, #5
   29ee2:	4770      	bx	lr
	int evt = EVT_NOP;
   29ee4:	2000      	movs	r0, #0
}
   29ee6:	4770      	bx	lr

00029ee8 <validate_args>:
{
   29ee8:	b510      	push	{r4, lr}
   29eea:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   29eec:	b100      	cbz	r0, 29ef0 <validate_args+0x8>
   29eee:	b911      	cbnz	r1, 29ef6 <validate_args+0xe>
		return -EINVAL;
   29ef0:	f06f 0015 	mvn.w	r0, #21
}
   29ef4:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   29ef6:	1d08      	adds	r0, r1, #4
   29ef8:	f000 f82f 	bl	29f5a <sys_notify_validate>
	if ((rv == 0)
   29efc:	2800      	cmp	r0, #0
   29efe:	d1f9      	bne.n	29ef4 <validate_args+0xc>
	    && ((cli->notify.flags
   29f00:	68a3      	ldr	r3, [r4, #8]
   29f02:	2b03      	cmp	r3, #3
   29f04:	d9f6      	bls.n	29ef4 <validate_args+0xc>
   29f06:	e7f3      	b.n	29ef0 <validate_args+0x8>

00029f08 <notify_one>:
{
   29f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f0c:	460d      	mov	r5, r1
   29f0e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   29f10:	4619      	mov	r1, r3
   29f12:	1d28      	adds	r0, r5, #4
{
   29f14:	4690      	mov	r8, r2
   29f16:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   29f18:	f7e8 fcee 	bl	128f8 <sys_notify_finalize>
	if (cb) {
   29f1c:	4604      	mov	r4, r0
   29f1e:	b138      	cbz	r0, 29f30 <notify_one+0x28>
		cb(mgr, cli, state, res);
   29f20:	4633      	mov	r3, r6
   29f22:	4642      	mov	r2, r8
   29f24:	4629      	mov	r1, r5
   29f26:	4638      	mov	r0, r7
   29f28:	46a4      	mov	ip, r4
}
   29f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   29f2e:	4760      	bx	ip
}
   29f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029f34 <onoff_manager_init>:
{
   29f34:	b538      	push	{r3, r4, r5, lr}
   29f36:	460c      	mov	r4, r1
	if ((mgr == NULL)
   29f38:	4605      	mov	r5, r0
   29f3a:	b158      	cbz	r0, 29f54 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   29f3c:	b151      	cbz	r1, 29f54 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   29f3e:	680b      	ldr	r3, [r1, #0]
   29f40:	b143      	cbz	r3, 29f54 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   29f42:	684b      	ldr	r3, [r1, #4]
   29f44:	b133      	cbz	r3, 29f54 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   29f46:	2220      	movs	r2, #32
   29f48:	2100      	movs	r1, #0
   29f4a:	f001 f85f 	bl	2b00c <memset>
   29f4e:	612c      	str	r4, [r5, #16]
	return 0;
   29f50:	2000      	movs	r0, #0
}
   29f52:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   29f54:	f06f 0015 	mvn.w	r0, #21
   29f58:	e7fb      	b.n	29f52 <onoff_manager_init+0x1e>

00029f5a <sys_notify_validate>:
	if (notify == NULL) {
   29f5a:	4603      	mov	r3, r0
   29f5c:	b140      	cbz	r0, 29f70 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   29f5e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   29f60:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   29f64:	2a02      	cmp	r2, #2
   29f66:	d006      	beq.n	29f76 <sys_notify_validate+0x1c>
   29f68:	2a03      	cmp	r2, #3
   29f6a:	d004      	beq.n	29f76 <sys_notify_validate+0x1c>
   29f6c:	2a01      	cmp	r2, #1
   29f6e:	d005      	beq.n	29f7c <sys_notify_validate+0x22>
   29f70:	f06f 0015 	mvn.w	r0, #21
}
   29f74:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   29f76:	681a      	ldr	r2, [r3, #0]
   29f78:	2a00      	cmp	r2, #0
   29f7a:	d0f9      	beq.n	29f70 <sys_notify_validate+0x16>
		notify->result = 0;
   29f7c:	2000      	movs	r0, #0
   29f7e:	6098      	str	r0, [r3, #8]
   29f80:	4770      	bx	lr

00029f82 <encode_uint>:
{
   29f82:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f86:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   29f88:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   29f8a:	2b6f      	cmp	r3, #111	; 0x6f
{
   29f8c:	4680      	mov	r8, r0
   29f8e:	460f      	mov	r7, r1
   29f90:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   29f92:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   29f96:	d029      	beq.n	29fec <encode_uint+0x6a>
   29f98:	d824      	bhi.n	29fe4 <encode_uint+0x62>
		return 10;
   29f9a:	2b58      	cmp	r3, #88	; 0x58
   29f9c:	bf0c      	ite	eq
   29f9e:	2610      	moveq	r6, #16
   29fa0:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   29fa2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   29fa6:	4632      	mov	r2, r6
   29fa8:	2300      	movs	r3, #0
   29faa:	4640      	mov	r0, r8
   29fac:	4639      	mov	r1, r7
   29fae:	f7d6 f8a7 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29fb2:	2a09      	cmp	r2, #9
   29fb4:	b2d4      	uxtb	r4, r2
   29fb6:	d81e      	bhi.n	29ff6 <encode_uint+0x74>
   29fb8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   29fba:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29fbc:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   29fbe:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29fc2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   29fc6:	d301      	bcc.n	29fcc <encode_uint+0x4a>
   29fc8:	45d1      	cmp	r9, sl
   29fca:	d811      	bhi.n	29ff0 <encode_uint+0x6e>
	if (conv->flag_hash) {
   29fcc:	782b      	ldrb	r3, [r5, #0]
   29fce:	069b      	lsls	r3, r3, #26
   29fd0:	d505      	bpl.n	29fde <encode_uint+0x5c>
		if (radix == 8) {
   29fd2:	2e08      	cmp	r6, #8
   29fd4:	d115      	bne.n	2a002 <encode_uint+0x80>
			conv->altform_0 = true;
   29fd6:	78ab      	ldrb	r3, [r5, #2]
   29fd8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   29fdc:	70ab      	strb	r3, [r5, #2]
}
   29fde:	4648      	mov	r0, r9
   29fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   29fe4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   29fe8:	2b70      	cmp	r3, #112	; 0x70
   29fea:	e7d7      	b.n	29f9c <encode_uint+0x1a>
	switch (specifier) {
   29fec:	2608      	movs	r6, #8
   29fee:	e7d8      	b.n	29fa2 <encode_uint+0x20>
		value /= radix;
   29ff0:	4680      	mov	r8, r0
   29ff2:	460f      	mov	r7, r1
   29ff4:	e7d7      	b.n	29fa6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   29ff6:	f1bb 0f19 	cmp.w	fp, #25
   29ffa:	bf94      	ite	ls
   29ffc:	3437      	addls	r4, #55	; 0x37
   29ffe:	3457      	addhi	r4, #87	; 0x57
   2a000:	e7db      	b.n	29fba <encode_uint+0x38>
		} else if (radix == 16) {
   2a002:	2e10      	cmp	r6, #16
   2a004:	d1eb      	bne.n	29fde <encode_uint+0x5c>
			conv->altform_0c = true;
   2a006:	78ab      	ldrb	r3, [r5, #2]
   2a008:	f043 0310 	orr.w	r3, r3, #16
   2a00c:	e7e6      	b.n	29fdc <encode_uint+0x5a>

0002a00e <outs>:
{
   2a00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a012:	4607      	mov	r7, r0
   2a014:	4688      	mov	r8, r1
   2a016:	4615      	mov	r5, r2
   2a018:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a01a:	4614      	mov	r4, r2
   2a01c:	42b4      	cmp	r4, r6
   2a01e:	d305      	bcc.n	2a02c <outs+0x1e>
   2a020:	b10e      	cbz	r6, 2a026 <outs+0x18>
	return (int)count;
   2a022:	1b60      	subs	r0, r4, r5
   2a024:	e008      	b.n	2a038 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2a026:	7823      	ldrb	r3, [r4, #0]
   2a028:	2b00      	cmp	r3, #0
   2a02a:	d0fa      	beq.n	2a022 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   2a02c:	f814 0b01 	ldrb.w	r0, [r4], #1
   2a030:	4641      	mov	r1, r8
   2a032:	47b8      	blx	r7
		if (rc < 0) {
   2a034:	2800      	cmp	r0, #0
   2a036:	daf1      	bge.n	2a01c <outs+0xe>
}
   2a038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a03c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2a03c:	4040      	eors	r0, r0
   2a03e:	f380 8811 	msr	BASEPRI, r0
   2a042:	f04f 0004 	mov.w	r0, #4
   2a046:	df02      	svc	2
}
   2a048:	4770      	bx	lr

0002a04a <assert_print>:

void assert_print(const char *fmt, ...)
{
   2a04a:	b40f      	push	{r0, r1, r2, r3}
   2a04c:	b507      	push	{r0, r1, r2, lr}
   2a04e:	a904      	add	r1, sp, #16
   2a050:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2a054:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   2a056:	f7e8 f8c9 	bl	121ec <vprintk>

	va_end(ap);
}
   2a05a:	b003      	add	sp, #12
   2a05c:	f85d eb04 	ldr.w	lr, [sp], #4
   2a060:	b004      	add	sp, #16
   2a062:	4770      	bx	lr

0002a064 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2a064:	4770      	bx	lr

0002a066 <z_log_minimal_printk>:
{
   2a066:	b40f      	push	{r0, r1, r2, r3}
   2a068:	b507      	push	{r0, r1, r2, lr}
   2a06a:	a904      	add	r1, sp, #16
   2a06c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2a070:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2a072:	f7e8 f8bb 	bl	121ec <vprintk>
}
   2a076:	b003      	add	sp, #12
   2a078:	f85d eb04 	ldr.w	lr, [sp], #4
   2a07c:	b004      	add	sp, #16
   2a07e:	4770      	bx	lr

0002a080 <nvs_flash_rd>:
{
   2a080:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   2a082:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a084:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   2a086:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a088:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a08a:	fa16 f181 	uxtah	r1, r6, r1
   2a08e:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   2a092:	6884      	ldr	r4, [r0, #8]
   2a094:	6824      	ldr	r4, [r4, #0]
   2a096:	46a4      	mov	ip, r4
}
   2a098:	bc70      	pop	{r4, r5, r6}
   2a09a:	4760      	bx	ip

0002a09c <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   2a09c:	680b      	ldr	r3, [r1, #0]
   2a09e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   2a0a2:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   2a0a4:	89c0      	ldrh	r0, [r0, #14]
   2a0a6:	0c1a      	lsrs	r2, r3, #16
   2a0a8:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   2a0ac:	bf04      	itt	eq
   2a0ae:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   2a0b2:	600b      	streq	r3, [r1, #0]
}
   2a0b4:	4770      	bx	lr

0002a0b6 <nvs_flash_block_cmp>:
{
   2a0b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a0ba:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a0bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a0be:	681d      	ldr	r5, [r3, #0]
   2a0c0:	426d      	negs	r5, r5
{
   2a0c2:	b089      	sub	sp, #36	; 0x24
   2a0c4:	4681      	mov	r9, r0
   2a0c6:	460e      	mov	r6, r1
   2a0c8:	4617      	mov	r7, r2
	block_size =
   2a0ca:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   2a0ce:	b91c      	cbnz	r4, 2a0d8 <nvs_flash_block_cmp+0x22>
	return 0;
   2a0d0:	4620      	mov	r0, r4
}
   2a0d2:	b009      	add	sp, #36	; 0x24
   2a0d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a0d8:	42ac      	cmp	r4, r5
   2a0da:	46a0      	mov	r8, r4
   2a0dc:	bf28      	it	cs
   2a0de:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   2a0e0:	4643      	mov	r3, r8
   2a0e2:	466a      	mov	r2, sp
   2a0e4:	4631      	mov	r1, r6
   2a0e6:	4648      	mov	r0, r9
   2a0e8:	f7ff ffca 	bl	2a080 <nvs_flash_rd>
		if (rc) {
   2a0ec:	2800      	cmp	r0, #0
   2a0ee:	d1f0      	bne.n	2a0d2 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   2a0f0:	4642      	mov	r2, r8
   2a0f2:	4669      	mov	r1, sp
   2a0f4:	4638      	mov	r0, r7
   2a0f6:	f000 ff57 	bl	2afa8 <memcmp>
		if (rc) {
   2a0fa:	b920      	cbnz	r0, 2a106 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   2a0fc:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a100:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2a102:	4447      	add	r7, r8
   2a104:	e7e3      	b.n	2a0ce <nvs_flash_block_cmp+0x18>
			return 1;
   2a106:	2001      	movs	r0, #1
   2a108:	e7e3      	b.n	2a0d2 <nvs_flash_block_cmp+0x1c>

0002a10a <nvs_flash_cmp_const>:
{
   2a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a10e:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a110:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2a112:	681d      	ldr	r5, [r3, #0]
   2a114:	426d      	negs	r5, r5
{
   2a116:	b088      	sub	sp, #32
	block_size =
   2a118:	f005 0520 	and.w	r5, r5, #32
{
   2a11c:	4607      	mov	r7, r0
   2a11e:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   2a120:	4668      	mov	r0, sp
{
   2a122:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2a124:	462a      	mov	r2, r5
   2a126:	f000 ff71 	bl	2b00c <memset>
	while (len) {
   2a12a:	b91c      	cbnz	r4, 2a134 <nvs_flash_cmp_const+0x2a>
	return 0;
   2a12c:	4620      	mov	r0, r4
}
   2a12e:	b008      	add	sp, #32
   2a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2a134:	42ac      	cmp	r4, r5
   2a136:	46a0      	mov	r8, r4
   2a138:	bf28      	it	cs
   2a13a:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   2a13c:	4643      	mov	r3, r8
   2a13e:	466a      	mov	r2, sp
   2a140:	4631      	mov	r1, r6
   2a142:	4638      	mov	r0, r7
   2a144:	f7ff ffb7 	bl	2a0b6 <nvs_flash_block_cmp>
		if (rc) {
   2a148:	2800      	cmp	r0, #0
   2a14a:	d1f0      	bne.n	2a12e <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   2a14c:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   2a150:	4446      	add	r6, r8
   2a152:	e7ea      	b.n	2a12a <nvs_flash_cmp_const+0x20>

0002a154 <nvs_flash_erase_sector>:
{
   2a154:	b538      	push	{r3, r4, r5, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a156:	8982      	ldrh	r2, [r0, #12]
   2a158:	6803      	ldr	r3, [r0, #0]
	addr &= ADDR_SECT_MASK;
   2a15a:	0c0d      	lsrs	r5, r1, #16
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a15c:	0c09      	lsrs	r1, r1, #16
{
   2a15e:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   2a160:	042d      	lsls	r5, r5, #16
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   2a162:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a164:	fb02 3101 	mla	r1, r2, r1, r3
	rc = api->erase(dev, offset, size);
   2a168:	6883      	ldr	r3, [r0, #8]
   2a16a:	689b      	ldr	r3, [r3, #8]
   2a16c:	4798      	blx	r3
	if (rc) {
   2a16e:	b950      	cbnz	r0, 2a186 <nvs_flash_erase_sector+0x32>
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2a170:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   2a172:	89a3      	ldrh	r3, [r4, #12]
   2a174:	7912      	ldrb	r2, [r2, #4]
   2a176:	4629      	mov	r1, r5
   2a178:	4620      	mov	r0, r4
   2a17a:	f7ff ffc6 	bl	2a10a <nvs_flash_cmp_const>
		rc = -ENXIO;
   2a17e:	2800      	cmp	r0, #0
   2a180:	bf18      	it	ne
   2a182:	f06f 0005 	mvnne.w	r0, #5
}
   2a186:	bd38      	pop	{r3, r4, r5, pc}

0002a188 <nvs_ate_crc8_update>:
{
   2a188:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a18a:	4601      	mov	r1, r0
{
   2a18c:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a18e:	2207      	movs	r2, #7
   2a190:	20ff      	movs	r0, #255	; 0xff
   2a192:	f7e8 fbdb 	bl	1294c <crc8_ccitt>
	entry->crc8 = crc8;
   2a196:	71e0      	strb	r0, [r4, #7]
}
   2a198:	bd10      	pop	{r4, pc}

0002a19a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   2a19a:	7803      	ldrb	r3, [r0, #0]
   2a19c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   2a19e:	bf81      	itttt	hi
   2a1a0:	f101 31ff 	addhi.w	r1, r1, #4294967295
   2a1a4:	18c9      	addhi	r1, r1, r3
   2a1a6:	425b      	neghi	r3, r3
   2a1a8:	4019      	andhi	r1, r3
}
   2a1aa:	4608      	mov	r0, r1
   2a1ac:	4770      	bx	lr

0002a1ae <nvs_ate_valid>:
{
   2a1ae:	b570      	push	{r4, r5, r6, lr}
   2a1b0:	460c      	mov	r4, r1
   2a1b2:	4605      	mov	r5, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1b4:	2108      	movs	r1, #8
   2a1b6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a1b8:	f7ff ffef 	bl	2a19a <nvs_al_size.isra.0>
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a1bc:	2207      	movs	r2, #7
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1be:	4606      	mov	r6, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   2a1c0:	4621      	mov	r1, r4
   2a1c2:	20ff      	movs	r0, #255	; 0xff
   2a1c4:	f7e8 fbc2 	bl	1294c <crc8_ccitt>
	if (crc8 == entry->crc8) {
   2a1c8:	79e3      	ldrb	r3, [r4, #7]
   2a1ca:	4283      	cmp	r3, r0
   2a1cc:	d107      	bne.n	2a1de <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   2a1ce:	89aa      	ldrh	r2, [r5, #12]
   2a1d0:	8863      	ldrh	r3, [r4, #2]
   2a1d2:	1b90      	subs	r0, r2, r6
	if ((nvs_ate_crc8_check(entry)) ||
   2a1d4:	4283      	cmp	r3, r0
   2a1d6:	bf2c      	ite	cs
   2a1d8:	2000      	movcs	r0, #0
   2a1da:	2001      	movcc	r0, #1
}
   2a1dc:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   2a1de:	2000      	movs	r0, #0
   2a1e0:	e7fc      	b.n	2a1dc <nvs_ate_valid+0x2e>

0002a1e2 <nvs_close_ate_valid>:
{
   2a1e2:	b538      	push	{r3, r4, r5, lr}
   2a1e4:	4605      	mov	r5, r0
   2a1e6:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   2a1e8:	f7ff ffe1 	bl	2a1ae <nvs_ate_valid>
   2a1ec:	b1a0      	cbz	r0, 2a218 <nvs_close_ate_valid+0x36>
   2a1ee:	88a0      	ldrh	r0, [r4, #4]
   2a1f0:	b998      	cbnz	r0, 2a21a <nvs_close_ate_valid+0x38>
   2a1f2:	8822      	ldrh	r2, [r4, #0]
   2a1f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a1f8:	429a      	cmp	r2, r3
   2a1fa:	d10d      	bne.n	2a218 <nvs_close_ate_valid+0x36>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a1fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   2a1fe:	2108      	movs	r1, #8
   2a200:	f7ff ffcb 	bl	2a19a <nvs_al_size.isra.0>
	if ((fs->sector_size - entry->offset) % ate_size) {
   2a204:	8862      	ldrh	r2, [r4, #2]
   2a206:	89ab      	ldrh	r3, [r5, #12]
   2a208:	1a9b      	subs	r3, r3, r2
   2a20a:	fbb3 f2f0 	udiv	r2, r3, r0
   2a20e:	fb02 3010 	mls	r0, r2, r0, r3
   2a212:	fab0 f080 	clz	r0, r0
   2a216:	0940      	lsrs	r0, r0, #5
}
   2a218:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   2a21a:	2000      	movs	r0, #0
   2a21c:	e7fc      	b.n	2a218 <nvs_close_ate_valid+0x36>

0002a21e <nvs_prev_ate>:
{
   2a21e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2a220:	4604      	mov	r4, r0
   2a222:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a224:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a226:	2108      	movs	r1, #8
   2a228:	f7ff ffb7 	bl	2a19a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a22c:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a22e:	4607      	mov	r7, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a230:	2308      	movs	r3, #8
   2a232:	4620      	mov	r0, r4
   2a234:	f7ff ff24 	bl	2a080 <nvs_flash_rd>
	if (rc) {
   2a238:	4606      	mov	r6, r0
   2a23a:	2800      	cmp	r0, #0
   2a23c:	d136      	bne.n	2a2ac <nvs_prev_ate+0x8e>
	*addr += ate_size;
   2a23e:	682b      	ldr	r3, [r5, #0]
   2a240:	443b      	add	r3, r7
   2a242:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   2a244:	89a2      	ldrh	r2, [r4, #12]
   2a246:	b299      	uxth	r1, r3
   2a248:	1bd2      	subs	r2, r2, r7
   2a24a:	4291      	cmp	r1, r2
   2a24c:	d12e      	bne.n	2a2ac <nvs_prev_ate+0x8e>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   2a24e:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   2a250:	bf03      	ittte	eq
   2a252:	89e2      	ldrheq	r2, [r4, #14]
   2a254:	f102 32ff 	addeq.w	r2, r2, #4294967295
   2a258:	eb03 4102 	addeq.w	r1, r3, r2, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   2a25c:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   2a260:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a262:	2308      	movs	r3, #8
   2a264:	466a      	mov	r2, sp
   2a266:	4620      	mov	r0, r4
   2a268:	f7ff ff0a 	bl	2a080 <nvs_flash_rd>
	if (rc) {
   2a26c:	b9e8      	cbnz	r0, 2a2aa <nvs_prev_ate+0x8c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2a26e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a270:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a272:	466b      	mov	r3, sp
		if (data8[i] != value) {
   2a274:	f813 1b01 	ldrb.w	r1, [r3], #1
   2a278:	428a      	cmp	r2, r1
   2a27a:	d10c      	bne.n	2a296 <nvs_prev_ate+0x78>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a27c:	3001      	adds	r0, #1
   2a27e:	2808      	cmp	r0, #8
   2a280:	d1f8      	bne.n	2a274 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   2a282:	6863      	ldr	r3, [r4, #4]
   2a284:	e005      	b.n	2a292 <nvs_prev_ate+0x74>
		(*addr) &= ADDR_SECT_MASK;
   2a286:	682b      	ldr	r3, [r5, #0]
		(*addr) += close_ate.offset;
   2a288:	f8bd 2002 	ldrh.w	r2, [sp, #2]
		(*addr) &= ADDR_SECT_MASK;
   2a28c:	0c1b      	lsrs	r3, r3, #16
   2a28e:	041b      	lsls	r3, r3, #16
		(*addr) += close_ate.offset;
   2a290:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   2a292:	602b      	str	r3, [r5, #0]
		return 0;
   2a294:	e00a      	b.n	2a2ac <nvs_prev_ate+0x8e>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a296:	4669      	mov	r1, sp
   2a298:	4620      	mov	r0, r4
   2a29a:	f7ff ffa2 	bl	2a1e2 <nvs_close_ate_valid>
   2a29e:	2800      	cmp	r0, #0
   2a2a0:	d1f1      	bne.n	2a286 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   2a2a2:	4629      	mov	r1, r5
   2a2a4:	4620      	mov	r0, r4
   2a2a6:	f7e8 ff8f 	bl	131c8 <nvs_recover_last_ate>
   2a2aa:	4606      	mov	r6, r0
}
   2a2ac:	4630      	mov	r0, r6
   2a2ae:	b003      	add	sp, #12
   2a2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a2b2 <nvs_flash_al_wrt>:
{
   2a2b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a2b6:	4607      	mov	r7, r0
   2a2b8:	b089      	sub	sp, #36	; 0x24
   2a2ba:	4690      	mov	r8, r2
	if (!len) {
   2a2bc:	461e      	mov	r6, r3
   2a2be:	b91b      	cbnz	r3, 2a2c8 <nvs_flash_al_wrt+0x16>
		return 0;
   2a2c0:	2000      	movs	r0, #0
}
   2a2c2:	b009      	add	sp, #36	; 0x24
   2a2c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	offset += addr & ADDR_OFFS_MASK;
   2a2c8:	683c      	ldr	r4, [r7, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   2a2ca:	8983      	ldrh	r3, [r0, #12]
   2a2cc:	0c08      	lsrs	r0, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   2a2ce:	fa14 f181 	uxtah	r1, r4, r1
   2a2d2:	fb00 1403 	mla	r4, r0, r3, r1
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   2a2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a2d8:	681d      	ldr	r5, [r3, #0]
   2a2da:	426d      	negs	r5, r5
	if (blen > 0) {
   2a2dc:	4035      	ands	r5, r6
   2a2de:	d00c      	beq.n	2a2fa <nvs_flash_al_wrt+0x48>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   2a2e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	rc = api->write(dev, offset, data, len);
   2a2e2:	6883      	ldr	r3, [r0, #8]
   2a2e4:	4621      	mov	r1, r4
   2a2e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   2a2ea:	462b      	mov	r3, r5
   2a2ec:	47c8      	blx	r9
		if (rc) {
   2a2ee:	2800      	cmp	r0, #0
   2a2f0:	d1e7      	bne.n	2a2c2 <nvs_flash_al_wrt+0x10>
	if (len) {
   2a2f2:	1b76      	subs	r6, r6, r5
   2a2f4:	d0e4      	beq.n	2a2c0 <nvs_flash_al_wrt+0xe>
		offset += blen;
   2a2f6:	442c      	add	r4, r5
		data8 += blen;
   2a2f8:	44a8      	add	r8, r5
		memcpy(buf, data8, len);
   2a2fa:	4632      	mov	r2, r6
   2a2fc:	4641      	mov	r1, r8
   2a2fe:	4668      	mov	r0, sp
   2a300:	f000 fe79 	bl	2aff6 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   2a304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2a306:	681a      	ldr	r2, [r3, #0]
   2a308:	7919      	ldrb	r1, [r3, #4]
   2a30a:	1b92      	subs	r2, r2, r6
   2a30c:	eb0d 0006 	add.w	r0, sp, r6
   2a310:	f000 fe7c 	bl	2b00c <memset>
				 fs->flash_parameters->write_block_size);
   2a314:	e9d7 030a 	ldrd	r0, r3, [r7, #40]	; 0x28
   2a318:	681b      	ldr	r3, [r3, #0]
   2a31a:	6882      	ldr	r2, [r0, #8]
   2a31c:	4621      	mov	r1, r4
   2a31e:	6855      	ldr	r5, [r2, #4]
   2a320:	466a      	mov	r2, sp
   2a322:	47a8      	blx	r5
	return rc;
   2a324:	e7cd      	b.n	2a2c2 <nvs_flash_al_wrt+0x10>

0002a326 <nvs_flash_ate_wrt>:
{
   2a326:	b510      	push	{r4, lr}
   2a328:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a32a:	2308      	movs	r3, #8
   2a32c:	6841      	ldr	r1, [r0, #4]
{
   2a32e:	4604      	mov	r4, r0
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a330:	f7ff ffbf 	bl	2a2b2 <nvs_flash_al_wrt>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2a334:	2108      	movs	r1, #8
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   2a336:	4602      	mov	r2, r0
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   2a338:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a33a:	f7ff ff2e 	bl	2a19a <nvs_al_size.isra.0>
   2a33e:	6863      	ldr	r3, [r4, #4]
   2a340:	1a1b      	subs	r3, r3, r0
   2a342:	6063      	str	r3, [r4, #4]
}
   2a344:	4610      	mov	r0, r2
   2a346:	bd10      	pop	{r4, pc}

0002a348 <nvs_add_gc_done_ate>:
{
   2a348:	b513      	push	{r0, r1, r4, lr}
	gc_done_ate.id = 0xffff;
   2a34a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2a34e:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   2a352:	2300      	movs	r3, #0
{
   2a354:	4604      	mov	r4, r0
	gc_done_ate.len = 0U;
   2a356:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2a35a:	6883      	ldr	r3, [r0, #8]
   2a35c:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   2a360:	4668      	mov	r0, sp
   2a362:	f7ff ff11 	bl	2a188 <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   2a366:	4669      	mov	r1, sp
   2a368:	4620      	mov	r0, r4
   2a36a:	f7ff ffdc 	bl	2a326 <nvs_flash_ate_wrt>
}
   2a36e:	b002      	add	sp, #8
   2a370:	bd10      	pop	{r4, pc}

0002a372 <nvs_gc>:
{
   2a372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a376:	4604      	mov	r4, r0
   2a378:	b095      	sub	sp, #84	; 0x54
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a37a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   2a37c:	2108      	movs	r1, #8
   2a37e:	f7ff ff0c 	bl	2a19a <nvs_al_size.isra.0>
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2a382:	6863      	ldr	r3, [r4, #4]
   2a384:	0c1b      	lsrs	r3, r3, #16
   2a386:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   2a388:	4605      	mov	r5, r0
	nvs_sector_advance(fs, &sec_addr);
   2a38a:	a903      	add	r1, sp, #12
   2a38c:	4620      	mov	r0, r4
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   2a38e:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   2a390:	f7ff fe84 	bl	2a09c <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2a394:	f8dd b00c 	ldr.w	fp, [sp, #12]
   2a398:	89a6      	ldrh	r6, [r4, #12]
   2a39a:	445e      	add	r6, fp
   2a39c:	1b76      	subs	r6, r6, r5
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a39e:	aa06      	add	r2, sp, #24
   2a3a0:	2308      	movs	r3, #8
   2a3a2:	4631      	mov	r1, r6
   2a3a4:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
   2a3a6:	9604      	str	r6, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   2a3a8:	f7ff fe6a 	bl	2a080 <nvs_flash_rd>
	if (rc < 0) {
   2a3ac:	1e02      	subs	r2, r0, #0
   2a3ae:	f2c0 80a9 	blt.w	2a504 <nvs_gc+0x192>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   2a3b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2a3b4:	aa06      	add	r2, sp, #24
   2a3b6:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a3b8:	2300      	movs	r3, #0
		if (data8[i] != value) {
   2a3ba:	f812 0b01 	ldrb.w	r0, [r2], #1
   2a3be:	4281      	cmp	r1, r0
   2a3c0:	f040 808f 	bne.w	2a4e2 <nvs_gc+0x170>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   2a3c4:	3301      	adds	r3, #1
   2a3c6:	2b08      	cmp	r3, #8
   2a3c8:	d1f7      	bne.n	2a3ba <nvs_gc+0x48>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   2a3ca:	68a3      	ldr	r3, [r4, #8]
   2a3cc:	6862      	ldr	r2, [r4, #4]
   2a3ce:	442b      	add	r3, r5
   2a3d0:	429a      	cmp	r2, r3
   2a3d2:	d27e      	bcs.n	2a4d2 <nvs_gc+0x160>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   2a3d4:	4659      	mov	r1, fp
   2a3d6:	4620      	mov	r0, r4
   2a3d8:	f7ff febc 	bl	2a154 <nvs_flash_erase_sector>
   2a3dc:	4602      	mov	r2, r0
	if (rc) {
   2a3de:	e091      	b.n	2a504 <nvs_gc+0x192>
		gc_addr += close_ate.offset;
   2a3e0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
   2a3e4:	0c36      	lsrs	r6, r6, #16
   2a3e6:	0436      	lsls	r6, r6, #16
		gc_addr += close_ate.offset;
   2a3e8:	441e      	add	r6, r3
   2a3ea:	9604      	str	r6, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2a3ec:	aa08      	add	r2, sp, #32
   2a3ee:	a904      	add	r1, sp, #16
   2a3f0:	4620      	mov	r0, r4
		gc_prev_addr = gc_addr;
   2a3f2:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   2a3f6:	f7ff ff12 	bl	2a21e <nvs_prev_ate>
		if (rc) {
   2a3fa:	4602      	mov	r2, r0
   2a3fc:	2800      	cmp	r0, #0
   2a3fe:	f040 8081 	bne.w	2a504 <nvs_gc+0x192>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   2a402:	a908      	add	r1, sp, #32
   2a404:	4620      	mov	r0, r4
   2a406:	f7ff fed2 	bl	2a1ae <nvs_ate_valid>
   2a40a:	b918      	cbnz	r0, 2a414 <nvs_gc+0xa2>
	} while (gc_prev_addr != stop_addr);
   2a40c:	9b01      	ldr	r3, [sp, #4]
   2a40e:	459a      	cmp	sl, r3
   2a410:	d1ec      	bne.n	2a3ec <nvs_gc+0x7a>
   2a412:	e7da      	b.n	2a3ca <nvs_gc+0x58>
		wlk_addr = fs->ate_wra;
   2a414:	6863      	ldr	r3, [r4, #4]
   2a416:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2a418:	aa0a      	add	r2, sp, #40	; 0x28
   2a41a:	a905      	add	r1, sp, #20
   2a41c:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
   2a41e:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   2a420:	f7ff fefd 	bl	2a21e <nvs_prev_ate>
			if (rc) {
   2a424:	4602      	mov	r2, r0
   2a426:	2800      	cmp	r0, #0
   2a428:	d16c      	bne.n	2a504 <nvs_gc+0x192>
			if ((wlk_ate.id == gc_ate.id) &&
   2a42a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   2a42e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2a432:	429a      	cmp	r2, r3
   2a434:	d027      	beq.n	2a486 <nvs_gc+0x114>
		} while (wlk_addr != fs->ate_wra);
   2a436:	6862      	ldr	r2, [r4, #4]
   2a438:	9b05      	ldr	r3, [sp, #20]
   2a43a:	429a      	cmp	r2, r3
   2a43c:	d1ec      	bne.n	2a418 <nvs_gc+0xa6>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   2a43e:	4556      	cmp	r6, sl
   2a440:	d1e4      	bne.n	2a40c <nvs_gc+0x9a>
   2a442:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   2a446:	2b00      	cmp	r3, #0
   2a448:	d0e0      	beq.n	2a40c <nvs_gc+0x9a>
			data_addr += gc_ate.offset;
   2a44a:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   2a44e:	ea4f 431a 	mov.w	r3, sl, lsr #16
   2a452:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   2a454:	441f      	add	r7, r3
			nvs_ate_crc8_update(&gc_ate);
   2a456:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   2a458:	68a3      	ldr	r3, [r4, #8]
   2a45a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
   2a45e:	f7ff fe93 	bl	2a188 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   2a464:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   2a468:	681e      	ldr	r6, [r3, #0]
   2a46a:	4276      	negs	r6, r6
	block_size =
   2a46c:	f006 0620 	and.w	r6, r6, #32
	while (len) {
   2a470:	f1b9 0f00 	cmp.w	r9, #0
   2a474:	d10e      	bne.n	2a494 <nvs_gc+0x122>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   2a476:	a908      	add	r1, sp, #32
   2a478:	4620      	mov	r0, r4
   2a47a:	f7ff ff54 	bl	2a326 <nvs_flash_ate_wrt>
			if (rc) {
   2a47e:	4602      	mov	r2, r0
   2a480:	2800      	cmp	r0, #0
   2a482:	d0c3      	beq.n	2a40c <nvs_gc+0x9a>
   2a484:	e03e      	b.n	2a504 <nvs_gc+0x192>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   2a486:	a90a      	add	r1, sp, #40	; 0x28
   2a488:	4620      	mov	r0, r4
   2a48a:	f7ff fe90 	bl	2a1ae <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   2a48e:	2800      	cmp	r0, #0
   2a490:	d0d1      	beq.n	2a436 <nvs_gc+0xc4>
   2a492:	e7d4      	b.n	2a43e <nvs_gc+0xcc>
		bytes_to_copy = MIN(block_size, len);
   2a494:	454e      	cmp	r6, r9
   2a496:	46b0      	mov	r8, r6
   2a498:	bf28      	it	cs
   2a49a:	46c8      	movcs	r8, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   2a49c:	aa0c      	add	r2, sp, #48	; 0x30
   2a49e:	4643      	mov	r3, r8
   2a4a0:	4639      	mov	r1, r7
   2a4a2:	4620      	mov	r0, r4
   2a4a4:	f7ff fdec 	bl	2a080 <nvs_flash_rd>
		if (rc) {
   2a4a8:	4602      	mov	r2, r0
   2a4aa:	bb58      	cbnz	r0, 2a504 <nvs_gc+0x192>
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2a4ac:	4643      	mov	r3, r8
   2a4ae:	68a1      	ldr	r1, [r4, #8]
   2a4b0:	aa0c      	add	r2, sp, #48	; 0x30
   2a4b2:	4620      	mov	r0, r4
   2a4b4:	f7ff fefd 	bl	2a2b2 <nvs_flash_al_wrt>
	fs->data_wra += nvs_al_size(fs, len);
   2a4b8:	4641      	mov	r1, r8
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   2a4ba:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   2a4bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2a4be:	f7ff fe6c 	bl	2a19a <nvs_al_size.isra.0>
   2a4c2:	68a3      	ldr	r3, [r4, #8]
   2a4c4:	4403      	add	r3, r0
   2a4c6:	60a3      	str	r3, [r4, #8]
		if (rc) {
   2a4c8:	b9e2      	cbnz	r2, 2a504 <nvs_gc+0x192>
		len -= bytes_to_copy;
   2a4ca:	eba9 0908 	sub.w	r9, r9, r8
		addr += bytes_to_copy;
   2a4ce:	4447      	add	r7, r8
   2a4d0:	e7ce      	b.n	2a470 <nvs_gc+0xfe>
		rc = nvs_add_gc_done_ate(fs);
   2a4d2:	4620      	mov	r0, r4
   2a4d4:	f7ff ff38 	bl	2a348 <nvs_add_gc_done_ate>
		if (rc) {
   2a4d8:	4602      	mov	r2, r0
   2a4da:	2800      	cmp	r0, #0
   2a4dc:	f43f af7a 	beq.w	2a3d4 <nvs_gc+0x62>
   2a4e0:	e010      	b.n	2a504 <nvs_gc+0x192>
	stop_addr = gc_addr - ate_size;
   2a4e2:	1b73      	subs	r3, r6, r5
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a4e4:	a906      	add	r1, sp, #24
   2a4e6:	4620      	mov	r0, r4
	stop_addr = gc_addr - ate_size;
   2a4e8:	9301      	str	r3, [sp, #4]
	if (nvs_close_ate_valid(fs, &close_ate)) {
   2a4ea:	f7ff fe7a 	bl	2a1e2 <nvs_close_ate_valid>
   2a4ee:	2800      	cmp	r0, #0
   2a4f0:	f47f af76 	bne.w	2a3e0 <nvs_gc+0x6e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   2a4f4:	a904      	add	r1, sp, #16
   2a4f6:	4620      	mov	r0, r4
   2a4f8:	f7e8 fe66 	bl	131c8 <nvs_recover_last_ate>
		if (rc) {
   2a4fc:	4602      	mov	r2, r0
   2a4fe:	2800      	cmp	r0, #0
   2a500:	f43f af74 	beq.w	2a3ec <nvs_gc+0x7a>
}
   2a504:	4610      	mov	r0, r2
   2a506:	b015      	add	sp, #84	; 0x54
   2a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a50c <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   2a50c:	2300      	movs	r3, #0
   2a50e:	461a      	mov	r2, r3
   2a510:	f7e9 b826 	b.w	13560 <nvs_write>

0002a514 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   2a514:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   2a516:	2400      	movs	r4, #0
   2a518:	9400      	str	r4, [sp, #0]
   2a51a:	f7e9 f8f5 	bl	13708 <nvs_read_hist>
	return rc;
}
   2a51e:	b002      	add	sp, #8
   2a520:	bd10      	pop	{r4, pc}

0002a522 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   2a522:	4770      	bx	lr

0002a524 <get_sectors_cb>:
{
   2a524:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   2a526:	684c      	ldr	r4, [r1, #4]
   2a528:	6803      	ldr	r3, [r0, #0]
   2a52a:	42a3      	cmp	r3, r4
   2a52c:	d201      	bcs.n	2a532 <get_sectors_cb+0xe>
		*bail_value = true;
   2a52e:	2001      	movs	r0, #1
}
   2a530:	bd70      	pop	{r4, r5, r6, pc}
	} else if (info->start_offset >= data->area_off + data->area_len) {
   2a532:	688a      	ldr	r2, [r1, #8]
   2a534:	4422      	add	r2, r4
   2a536:	4293      	cmp	r3, r2
   2a538:	d301      	bcc.n	2a53e <get_sectors_cb+0x1a>
		*bail_value = false;
   2a53a:	2000      	movs	r0, #0
   2a53c:	e7f8      	b.n	2a530 <get_sectors_cb+0xc>
	} else if (data->ret_idx >= data->ret_len) {
   2a53e:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
   2a542:	694e      	ldr	r6, [r1, #20]
   2a544:	42b5      	cmp	r5, r6
   2a546:	d303      	bcc.n	2a550 <get_sectors_cb+0x2c>
		data->status = -ENOMEM;
   2a548:	f06f 030b 	mvn.w	r3, #11
   2a54c:	618b      	str	r3, [r1, #24]
		return true;
   2a54e:	e7f4      	b.n	2a53a <get_sectors_cb+0x16>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   2a550:	1b1b      	subs	r3, r3, r4
   2a552:	f842 3035 	str.w	r3, [r2, r5, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   2a556:	6843      	ldr	r3, [r0, #4]
   2a558:	6908      	ldr	r0, [r1, #16]
   2a55a:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   2a55e:	6053      	str	r3, [r2, #4]
	data->ret_idx++;
   2a560:	690b      	ldr	r3, [r1, #16]
   2a562:	3301      	adds	r3, #1
   2a564:	610b      	str	r3, [r1, #16]
	return true;
   2a566:	e7e2      	b.n	2a52e <get_sectors_cb+0xa>

0002a568 <settings_load>:
	return settings_load_subtree(NULL);
   2a568:	2000      	movs	r0, #0
   2a56a:	f7e9 b9c5 	b.w	138f8 <settings_load_subtree>

0002a56e <settings_delete>:
	return settings_save_one(name, NULL, 0);
   2a56e:	2200      	movs	r2, #0
   2a570:	4611      	mov	r1, r2
   2a572:	f7e9 b987 	b.w	13884 <settings_save_one>

0002a576 <settings_name_steq>:
{
   2a576:	4603      	mov	r3, r0
   2a578:	b510      	push	{r4, lr}
   2a57a:	4608      	mov	r0, r1
	if (next) {
   2a57c:	b10a      	cbz	r2, 2a582 <settings_name_steq+0xc>
		*next = NULL;
   2a57e:	2100      	movs	r1, #0
   2a580:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   2a582:	b153      	cbz	r3, 2a59a <settings_name_steq+0x24>
   2a584:	b1d0      	cbz	r0, 2a5bc <settings_name_steq+0x46>
   2a586:	1e41      	subs	r1, r0, #1
	while ((*key != '\0') && (*key == *name) &&
   2a588:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2a58c:	b180      	cbz	r0, 2a5b0 <settings_name_steq+0x3a>
	while ((*key != '\0') && (*key == *name) &&
   2a58e:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a592:	42a0      	cmp	r0, r4
   2a594:	d101      	bne.n	2a59a <settings_name_steq+0x24>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   2a596:	283d      	cmp	r0, #61	; 0x3d
   2a598:	d1f6      	bne.n	2a588 <settings_name_steq+0x12>
		return 0;
   2a59a:	2000      	movs	r0, #0
   2a59c:	e00e      	b.n	2a5bc <settings_name_steq+0x46>
			*next = name + 1;
   2a59e:	3301      	adds	r3, #1
   2a5a0:	6013      	str	r3, [r2, #0]
   2a5a2:	e00a      	b.n	2a5ba <settings_name_steq+0x44>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   2a5a4:	283d      	cmp	r0, #61	; 0x3d
   2a5a6:	d008      	beq.n	2a5ba <settings_name_steq+0x44>
   2a5a8:	fab0 f080 	clz	r0, r0
   2a5ac:	0940      	lsrs	r0, r0, #5
   2a5ae:	e005      	b.n	2a5bc <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   2a5b0:	7818      	ldrb	r0, [r3, #0]
   2a5b2:	282f      	cmp	r0, #47	; 0x2f
   2a5b4:	d1f6      	bne.n	2a5a4 <settings_name_steq+0x2e>
		if (next) {
   2a5b6:	2a00      	cmp	r2, #0
   2a5b8:	d1f1      	bne.n	2a59e <settings_name_steq+0x28>
		return 1;
   2a5ba:	2001      	movs	r0, #1
}
   2a5bc:	bd10      	pop	{r4, pc}

0002a5be <settings_name_next>:
{
   2a5be:	b510      	push	{r4, lr}
	if (next) {
   2a5c0:	b109      	cbz	r1, 2a5c6 <settings_name_next+0x8>
		*next = NULL;
   2a5c2:	2300      	movs	r3, #0
   2a5c4:	600b      	str	r3, [r1, #0]
	if (!name) {
   2a5c6:	b158      	cbz	r0, 2a5e0 <settings_name_next+0x22>
   2a5c8:	4603      	mov	r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   2a5ca:	781a      	ldrb	r2, [r3, #0]
   2a5cc:	461c      	mov	r4, r3
   2a5ce:	3301      	adds	r3, #1
   2a5d0:	b12a      	cbz	r2, 2a5de <settings_name_next+0x20>
   2a5d2:	2a3d      	cmp	r2, #61	; 0x3d
   2a5d4:	d003      	beq.n	2a5de <settings_name_next+0x20>
   2a5d6:	2a2f      	cmp	r2, #47	; 0x2f
   2a5d8:	d1f7      	bne.n	2a5ca <settings_name_next+0xc>
		if (next) {
   2a5da:	b101      	cbz	r1, 2a5de <settings_name_next+0x20>
			*next = name + 1;
   2a5dc:	600b      	str	r3, [r1, #0]
   2a5de:	1a20      	subs	r0, r4, r0
}
   2a5e0:	bd10      	pop	{r4, pc}

0002a5e2 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   2a5e2:	3008      	adds	r0, #8
   2a5e4:	4770      	bx	lr

0002a5e6 <settings_nvs_read_fn>:
{
   2a5e6:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2a5e8:	4613      	mov	r3, r2
{
   2a5ea:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   2a5ec:	460a      	mov	r2, r1
   2a5ee:	8881      	ldrh	r1, [r0, #4]
   2a5f0:	6800      	ldr	r0, [r0, #0]
   2a5f2:	f7ff ff8f 	bl	2a514 <nvs_read>
}
   2a5f6:	42a0      	cmp	r0, r4
   2a5f8:	bfa8      	it	ge
   2a5fa:	4620      	movge	r0, r4
   2a5fc:	bd10      	pop	{r4, pc}

0002a5fe <settings_nvs_save>:
{
   2a5fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a602:	b097      	sub	sp, #92	; 0x5c
   2a604:	4604      	mov	r4, r0
   2a606:	9201      	str	r2, [sp, #4]
   2a608:	469a      	mov	sl, r3
	if (!name) {
   2a60a:	4689      	mov	r9, r1
   2a60c:	2900      	cmp	r1, #0
   2a60e:	d07e      	beq.n	2a70e <settings_nvs_save+0x110>
	delete = ((value == NULL) || (val_len == 0));
   2a610:	b1da      	cbz	r2, 2a64a <settings_nvs_save+0x4c>
   2a612:	faba f78a 	clz	r7, sl
   2a616:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   2a618:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   2a61a:	3501      	adds	r5, #1
   2a61c:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   2a61e:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2a620:	f104 0b08 	add.w	fp, r4, #8
		name_id--;
   2a624:	1e6e      	subs	r6, r5, #1
   2a626:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   2a628:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2a62c:	d029      	beq.n	2a682 <settings_nvs_save+0x84>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   2a62e:	234a      	movs	r3, #74	; 0x4a
   2a630:	aa03      	add	r2, sp, #12
   2a632:	4631      	mov	r1, r6
   2a634:	4658      	mov	r0, fp
   2a636:	f7ff ff6d 	bl	2a514 <nvs_read>
		if (rc < 0) {
   2a63a:	2800      	cmp	r0, #0
   2a63c:	da07      	bge.n	2a64e <settings_nvs_save+0x50>
		name_id--;
   2a63e:	f110 0f02 	cmn.w	r0, #2
   2a642:	bf08      	it	eq
   2a644:	46b0      	moveq	r8, r6
   2a646:	4635      	mov	r5, r6
   2a648:	e7ec      	b.n	2a624 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   2a64a:	2701      	movs	r7, #1
   2a64c:	e7e4      	b.n	2a618 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   2a64e:	f100 0358 	add.w	r3, r0, #88	; 0x58
   2a652:	eb0d 0003 	add.w	r0, sp, r3
   2a656:	2300      	movs	r3, #0
   2a658:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   2a65c:	a903      	add	r1, sp, #12
   2a65e:	4648      	mov	r0, r9
   2a660:	f000 fc82 	bl	2af68 <strcmp>
   2a664:	2800      	cmp	r0, #0
   2a666:	d1ee      	bne.n	2a646 <settings_nvs_save+0x48>
		if (!delete) {
   2a668:	b32f      	cbz	r7, 2a6b6 <settings_nvs_save+0xb8>
		if (name_id == cf->last_name_id) {
   2a66a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2a66c:	42b3      	cmp	r3, r6
   2a66e:	d00b      	beq.n	2a688 <settings_nvs_save+0x8a>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   2a670:	4631      	mov	r1, r6
   2a672:	4658      	mov	r0, fp
   2a674:	f7ff ff4a 	bl	2a50c <nvs_delete>
		if (rc >= 0) {
   2a678:	2800      	cmp	r0, #0
   2a67a:	da12      	bge.n	2a6a2 <settings_nvs_save+0xa4>
}
   2a67c:	b017      	add	sp, #92	; 0x5c
   2a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   2a682:	b3b7      	cbz	r7, 2a6f2 <settings_nvs_save+0xf4>
			return 0;
   2a684:	2000      	movs	r0, #0
   2a686:	e7f9      	b.n	2a67c <settings_nvs_save+0x7e>
			cf->last_name_id--;
   2a688:	4622      	mov	r2, r4
   2a68a:	1e73      	subs	r3, r6, #1
   2a68c:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   2a690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a694:	2302      	movs	r3, #2
   2a696:	4658      	mov	r0, fp
   2a698:	f7e8 ff62 	bl	13560 <nvs_write>
			if (rc < 0) {
   2a69c:	2800      	cmp	r0, #0
   2a69e:	dae7      	bge.n	2a670 <settings_nvs_save+0x72>
   2a6a0:	e7ec      	b.n	2a67c <settings_nvs_save+0x7e>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   2a6a2:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   2a6a6:	313f      	adds	r1, #63	; 0x3f
   2a6a8:	b289      	uxth	r1, r1
   2a6aa:	4658      	mov	r0, fp
   2a6ac:	f7ff ff2e 	bl	2a50c <nvs_delete>
	if (rc < 0) {
   2a6b0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   2a6b4:	e7e2      	b.n	2a67c <settings_nvs_save+0x7e>
		name_id--;
   2a6b6:	46b0      	mov	r8, r6
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   2a6b8:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   2a6bc:	d02a      	beq.n	2a714 <settings_nvs_save+0x116>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   2a6be:	f104 0508 	add.w	r5, r4, #8
   2a6c2:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   2a6c6:	9a01      	ldr	r2, [sp, #4]
   2a6c8:	4653      	mov	r3, sl
   2a6ca:	b289      	uxth	r1, r1
   2a6cc:	4628      	mov	r0, r5
   2a6ce:	f7e8 ff47 	bl	13560 <nvs_write>
	if (rc < 0) {
   2a6d2:	2800      	cmp	r0, #0
   2a6d4:	dbd2      	blt.n	2a67c <settings_nvs_save+0x7e>
	if (write_name) {
   2a6d6:	b977      	cbnz	r7, 2a6f6 <settings_nvs_save+0xf8>
	if (write_name_id > cf->last_name_id) {
   2a6d8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   2a6da:	4543      	cmp	r3, r8
   2a6dc:	d2d2      	bcs.n	2a684 <settings_nvs_save+0x86>
		cf->last_name_id = write_name_id;
   2a6de:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2a6e0:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   2a6e2:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   2a6e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a6ea:	4628      	mov	r0, r5
   2a6ec:	f7e8 ff38 	bl	13560 <nvs_write>
   2a6f0:	e7de      	b.n	2a6b0 <settings_nvs_save+0xb2>
	write_name = true;
   2a6f2:	2701      	movs	r7, #1
   2a6f4:	e7e0      	b.n	2a6b8 <settings_nvs_save+0xba>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   2a6f6:	4648      	mov	r0, r9
   2a6f8:	f000 fc26 	bl	2af48 <strlen>
   2a6fc:	464a      	mov	r2, r9
   2a6fe:	4603      	mov	r3, r0
   2a700:	4641      	mov	r1, r8
   2a702:	4628      	mov	r0, r5
   2a704:	f7e8 ff2c 	bl	13560 <nvs_write>
		if (rc < 0) {
   2a708:	2800      	cmp	r0, #0
   2a70a:	dae5      	bge.n	2a6d8 <settings_nvs_save+0xda>
   2a70c:	e7b6      	b.n	2a67c <settings_nvs_save+0x7e>
		return -EINVAL;
   2a70e:	f06f 0015 	mvn.w	r0, #21
   2a712:	e7b3      	b.n	2a67c <settings_nvs_save+0x7e>
		return -ENOMEM;
   2a714:	f06f 000b 	mvn.w	r0, #11
   2a718:	e7b0      	b.n	2a67c <settings_nvs_save+0x7e>

0002a71a <settings_nvs_backend_init>:
{
   2a71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	cf->cf_nvs.flash_device = cf->flash_dev;
   2a71c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2a71e:	6303      	str	r3, [r0, #48]	; 0x30
{
   2a720:	4604      	mov	r4, r0
	if (cf->cf_nvs.flash_device == NULL) {
   2a722:	b1c3      	cbz	r3, 2a756 <settings_nvs_backend_init+0x3c>
	rc = nvs_mount(&cf->cf_nvs);
   2a724:	f100 0608 	add.w	r6, r0, #8
   2a728:	4630      	mov	r0, r6
   2a72a:	f7e8 fd7f 	bl	1322c <nvs_mount>
	if (rc) {
   2a72e:	4605      	mov	r5, r0
   2a730:	b970      	cbnz	r0, 2a750 <settings_nvs_backend_init+0x36>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   2a732:	2302      	movs	r3, #2
   2a734:	f10d 0206 	add.w	r2, sp, #6
   2a738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2a73c:	4630      	mov	r0, r6
   2a73e:	f7ff fee9 	bl	2a514 <nvs_read>
	if (rc < 0) {
   2a742:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   2a744:	bfac      	ite	ge
   2a746:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
   2a74a:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
   2a74e:	8723      	strh	r3, [r4, #56]	; 0x38
}
   2a750:	4628      	mov	r0, r5
   2a752:	b002      	add	sp, #8
   2a754:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2a756:	f06f 0512 	mvn.w	r5, #18
   2a75a:	e7f9      	b.n	2a750 <settings_nvs_backend_init+0x36>

0002a75c <attr_find_by_handle>:
{
   2a75c:	b570      	push	{r4, r5, r6, lr}
   2a75e:	4604      	mov	r4, r0
	if (!dm->cur_attr_id) {
   2a760:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   2a764:	b1a8      	cbz	r0, 2a792 <attr_find_by_handle+0x36>
	ssize_t upper = dm->cur_attr_id - 1;
   2a766:	1e45      	subs	r5, r0, #1
	ssize_t lower = 0;
   2a768:	2600      	movs	r6, #0
	while (upper >= lower) {
   2a76a:	42ae      	cmp	r6, r5
   2a76c:	dd01      	ble.n	2a772 <attr_find_by_handle+0x16>
		return NULL;
   2a76e:	2000      	movs	r0, #0
   2a770:	e00f      	b.n	2a792 <attr_find_by_handle+0x36>
		size_t m = (lower + upper) / 2;
   2a772:	1972      	adds	r2, r6, r5
   2a774:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   2a778:	1052      	asrs	r2, r2, #1
		if (cur_attr->handle < handle) {
   2a77a:	1cd0      	adds	r0, r2, #3
   2a77c:	00c3      	lsls	r3, r0, #3
   2a77e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   2a782:	8900      	ldrh	r0, [r0, #8]
   2a784:	4288      	cmp	r0, r1
   2a786:	d201      	bcs.n	2a78c <attr_find_by_handle+0x30>
			lower = m + 1;
   2a788:	1c56      	adds	r6, r2, #1
   2a78a:	e7ee      	b.n	2a76a <attr_find_by_handle+0xe>
		} else if (cur_attr->handle > handle) {
   2a78c:	d802      	bhi.n	2a794 <attr_find_by_handle+0x38>
		struct bt_gatt_dm_attr *cur_attr = &dm->attrs[m];
   2a78e:	3304      	adds	r3, #4
   2a790:	18e0      	adds	r0, r4, r3
}
   2a792:	bd70      	pop	{r4, r5, r6, pc}
			upper = m - 1;
   2a794:	1e55      	subs	r5, r2, #1
   2a796:	e7e8      	b.n	2a76a <attr_find_by_handle+0xe>

0002a798 <svc_attr_memory_release>:
	dm->cur_attr_id = 0;
   2a798:	2300      	movs	r3, #0
{
   2a79a:	b510      	push	{r4, lr}
   2a79c:	4604      	mov	r4, r0
	dm->cur_attr_id = 0;
   2a79e:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
	return list->head;
   2a7a2:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
	while (!sys_slist_is_empty(&dm->chunk_list)) {
   2a7a6:	b910      	cbnz	r0, 2a7ae <svc_attr_memory_release+0x16>
	dm->cur_chunk_len = 0;
   2a7a8:	f8c4 0158 	str.w	r0, [r4, #344]	; 0x158
}
   2a7ac:	bd10      	pop	{r4, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7ae:	f8d4 2154 	ldr.w	r2, [r4, #340]	; 0x154
	return node->next;
   2a7b2:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   2a7b4:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7b8:	4290      	cmp	r0, r2
	list->tail = node;
   2a7ba:	bf08      	it	eq
   2a7bc:	f8c4 3154 	streq.w	r3, [r4, #340]	; 0x154
		k_free(item);
   2a7c0:	f003 fc67 	bl	2e092 <k_free>
   2a7c4:	e7ed      	b.n	2a7a2 <svc_attr_memory_release+0xa>

0002a7c6 <atomic_and>:
{
   2a7c6:	b510      	push	{r4, lr}
   2a7c8:	4603      	mov	r3, r0
}
   2a7ca:	f3bf 8f5b 	dmb	ish
   2a7ce:	e853 0f00 	ldrex	r0, [r3]
   2a7d2:	ea00 0201 	and.w	r2, r0, r1
   2a7d6:	e843 2400 	strex	r4, r2, [r3]
   2a7da:	2c00      	cmp	r4, #0
   2a7dc:	d1f7      	bne.n	2a7ce <atomic_and+0x8>
   2a7de:	f3bf 8f5b 	dmb	ish
   2a7e2:	bd10      	pop	{r4, pc}

0002a7e4 <discovery_complete_error>:
{
   2a7e4:	b570      	push	{r4, r5, r6, lr}
   2a7e6:	4604      	mov	r4, r0
   2a7e8:	460d      	mov	r5, r1
	svc_attr_memory_release(dm);
   2a7ea:	f7ff ffd5 	bl	2a798 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a7ee:	f06f 0101 	mvn.w	r1, #1
   2a7f2:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2a7f6:	f7ff ffe6 	bl	2a7c6 <atomic_and>
	if (dm->callback->error_found) {
   2a7fa:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2a7fe:	689b      	ldr	r3, [r3, #8]
   2a800:	b12b      	cbz	r3, 2a80e <discovery_complete_error+0x2a>
		dm->callback->error_found(dm->conn, err, dm->context);
   2a802:	6862      	ldr	r2, [r4, #4]
   2a804:	6820      	ldr	r0, [r4, #0]
   2a806:	4629      	mov	r1, r5
}
   2a808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		dm->callback->error_found(dm->conn, err, dm->context);
   2a80c:	4718      	bx	r3
}
   2a80e:	bd70      	pop	{r4, r5, r6, pc}

0002a810 <discovery_complete_not_found>:
{
   2a810:	b510      	push	{r4, lr}
   2a812:	4604      	mov	r4, r0
	svc_attr_memory_release(dm);
   2a814:	f7ff ffc0 	bl	2a798 <svc_attr_memory_release>
   2a818:	f06f 0101 	mvn.w	r1, #1
   2a81c:	f504 709c 	add.w	r0, r4, #312	; 0x138
   2a820:	f7ff ffd1 	bl	2a7c6 <atomic_and>
	if (dm->callback->service_not_found) {
   2a824:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
   2a828:	685b      	ldr	r3, [r3, #4]
   2a82a:	b123      	cbz	r3, 2a836 <discovery_complete_not_found+0x26>
		dm->callback->service_not_found(dm->conn, dm->context);
   2a82c:	e9d4 0100 	ldrd	r0, r1, [r4]
}
   2a830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		dm->callback->service_not_found(dm->conn, dm->context);
   2a834:	4718      	bx	r3
}
   2a836:	bd10      	pop	{r4, pc}

0002a838 <bt_gatt_dm_attr_service_val>:
{
   2a838:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2a83a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2a83e:	6801      	ldr	r1, [r0, #0]
   2a840:	f8ad 3002 	strh.w	r3, [sp, #2]
{
   2a844:	4605      	mov	r5, r0
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2a846:	2400      	movs	r4, #0
   2a848:	4668      	mov	r0, sp
   2a84a:	f88d 4000 	strb.w	r4, [sp]
   2a84e:	f000 fc66 	bl	2b11e <bt_uuid_cmp>
   2a852:	b918      	cbnz	r0, 2a85c <bt_gatt_dm_attr_service_val+0x24>
		return &((struct bt_gatt_service_val *)attr->uuid)[-1];
   2a854:	6828      	ldr	r0, [r5, #0]
   2a856:	3808      	subs	r0, #8
}
   2a858:	b003      	add	sp, #12
   2a85a:	bd30      	pop	{r4, r5, pc}
	    (!bt_uuid_cmp(BT_UUID_GATT_SECONDARY, attr->uuid))) {
   2a85c:	f642 0301 	movw	r3, #10241	; 0x2801
   2a860:	6829      	ldr	r1, [r5, #0]
   2a862:	f88d 4004 	strb.w	r4, [sp, #4]
   2a866:	a801      	add	r0, sp, #4
   2a868:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a86c:	f000 fc57 	bl	2b11e <bt_uuid_cmp>
	if ((!bt_uuid_cmp(BT_UUID_GATT_PRIMARY, attr->uuid)) ||
   2a870:	2800      	cmp	r0, #0
   2a872:	d0ef      	beq.n	2a854 <bt_gatt_dm_attr_service_val+0x1c>
	return NULL;
   2a874:	4620      	mov	r0, r4
   2a876:	e7ef      	b.n	2a858 <bt_gatt_dm_attr_service_val+0x20>

0002a878 <bt_gatt_dm_attr_chrc_val>:
{
   2a878:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2a87a:	f642 0303 	movw	r3, #10243	; 0x2803
   2a87e:	6801      	ldr	r1, [r0, #0]
   2a880:	f8ad 3006 	strh.w	r3, [sp, #6]
{
   2a884:	4605      	mov	r5, r0
	if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, attr->uuid)) {
   2a886:	2400      	movs	r4, #0
   2a888:	a801      	add	r0, sp, #4
   2a88a:	f88d 4004 	strb.w	r4, [sp, #4]
   2a88e:	f000 fc46 	bl	2b11e <bt_uuid_cmp>
   2a892:	b918      	cbnz	r0, 2a89c <bt_gatt_dm_attr_chrc_val+0x24>
		return &((struct bt_gatt_chrc *)attr->uuid)[-1];
   2a894:	6828      	ldr	r0, [r5, #0]
   2a896:	3808      	subs	r0, #8
}
   2a898:	b003      	add	sp, #12
   2a89a:	bd30      	pop	{r4, r5, pc}
	return NULL;
   2a89c:	4620      	mov	r0, r4
   2a89e:	e7fb      	b.n	2a898 <bt_gatt_dm_attr_chrc_val+0x20>

0002a8a0 <bt_gatt_dm_conn_get>:
}
   2a8a0:	6800      	ldr	r0, [r0, #0]
   2a8a2:	4770      	bx	lr

0002a8a4 <bt_gatt_dm_service_get>:
}
   2a8a4:	301c      	adds	r0, #28
   2a8a6:	4770      	bx	lr

0002a8a8 <bt_gatt_dm_char_next>:
{
   2a8a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		prev = dm->attrs;
   2a8aa:	f100 051c 	add.w	r5, r0, #28
	if (!prev) {
   2a8ae:	b131      	cbz	r1, 2a8be <bt_gatt_dm_char_next+0x16>
	if (dm->attrs <= prev) {
   2a8b0:	42a9      	cmp	r1, r5
   2a8b2:	d203      	bcs.n	2a8bc <bt_gatt_dm_char_next+0x14>
	return NULL;
   2a8b4:	2500      	movs	r5, #0
}
   2a8b6:	4628      	mov	r0, r5
   2a8b8:	b003      	add	sp, #12
   2a8ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a8bc:	460d      	mov	r5, r1
		const struct bt_gatt_dm_attr *const end =
   2a8be:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   2a8c2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2a8c6:	f100 041c 	add.w	r4, r0, #28
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2a8ca:	2600      	movs	r6, #0
   2a8cc:	f642 0703 	movw	r7, #10243	; 0x2803
		while (++prev < end) {
   2a8d0:	3508      	adds	r5, #8
   2a8d2:	42ac      	cmp	r4, r5
   2a8d4:	d9ee      	bls.n	2a8b4 <bt_gatt_dm_char_next+0xc>
			if (!bt_uuid_cmp(BT_UUID_GATT_CHRC, prev->uuid)) {
   2a8d6:	6829      	ldr	r1, [r5, #0]
   2a8d8:	f88d 6004 	strb.w	r6, [sp, #4]
   2a8dc:	a801      	add	r0, sp, #4
   2a8de:	f8ad 7006 	strh.w	r7, [sp, #6]
   2a8e2:	f000 fc1c 	bl	2b11e <bt_uuid_cmp>
   2a8e6:	2800      	cmp	r0, #0
   2a8e8:	d1f2      	bne.n	2a8d0 <bt_gatt_dm_char_next+0x28>
   2a8ea:	e7e4      	b.n	2a8b6 <bt_gatt_dm_char_next+0xe>

0002a8ec <bt_gatt_dm_attr_next>:
{
   2a8ec:	4603      	mov	r3, r0
		prev = dm->attrs;
   2a8ee:	f100 021c 	add.w	r2, r0, #28
	if (!prev) {
   2a8f2:	b119      	cbz	r1, 2a8fc <bt_gatt_dm_attr_next+0x10>
	if (dm->attrs <= prev) {
   2a8f4:	4291      	cmp	r1, r2
   2a8f6:	d202      	bcs.n	2a8fe <bt_gatt_dm_attr_next+0x12>
	return NULL;
   2a8f8:	2000      	movs	r0, #0
}
   2a8fa:	4770      	bx	lr
		prev = dm->attrs;
   2a8fc:	4611      	mov	r1, r2
		const struct bt_gatt_dm_attr *const end =
   2a8fe:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
   2a902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
		if (++prev < end) {
   2a906:	f101 0008 	add.w	r0, r1, #8
		const struct bt_gatt_dm_attr *const end =
   2a90a:	331c      	adds	r3, #28
	return NULL;
   2a90c:	4298      	cmp	r0, r3
   2a90e:	bf28      	it	cs
   2a910:	2000      	movcs	r0, #0
   2a912:	4770      	bx	lr

0002a914 <bt_gatt_dm_desc_next>:
{
   2a914:	b513      	push	{r0, r1, r4, lr}
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2a916:	f7ff ffe9 	bl	2a8ec <bt_gatt_dm_attr_next>
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2a91a:	4604      	mov	r4, r0
   2a91c:	b918      	cbnz	r0, 2a926 <bt_gatt_dm_desc_next+0x12>
	const struct bt_gatt_dm_attr *curr = bt_gatt_dm_attr_next(dm, prev);
   2a91e:	2400      	movs	r4, #0
}
   2a920:	4620      	mov	r0, r4
   2a922:	b002      	add	sp, #8
   2a924:	bd10      	pop	{r4, pc}
	if (curr && !bt_uuid_cmp(BT_UUID_GATT_CHRC, curr->uuid)) {
   2a926:	2300      	movs	r3, #0
   2a928:	6801      	ldr	r1, [r0, #0]
   2a92a:	f88d 3004 	strb.w	r3, [sp, #4]
   2a92e:	a801      	add	r0, sp, #4
   2a930:	f642 0303 	movw	r3, #10243	; 0x2803
   2a934:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a938:	f000 fbf1 	bl	2b11e <bt_uuid_cmp>
   2a93c:	2800      	cmp	r0, #0
   2a93e:	d1ef      	bne.n	2a920 <bt_gatt_dm_desc_next+0xc>
   2a940:	e7ed      	b.n	2a91e <bt_gatt_dm_desc_next+0xa>

0002a942 <bt_gatt_dm_desc_by_uuid>:
{
   2a942:	b570      	push	{r4, r5, r6, lr}
   2a944:	4605      	mov	r5, r0
   2a946:	4616      	mov	r6, r2
	const struct bt_gatt_dm_attr *curr = attr_chrc;
   2a948:	460c      	mov	r4, r1
	while ((curr = bt_gatt_dm_desc_next(dm, curr)) != NULL) {
   2a94a:	4621      	mov	r1, r4
   2a94c:	4628      	mov	r0, r5
   2a94e:	f7ff ffe1 	bl	2a914 <bt_gatt_dm_desc_next>
   2a952:	4604      	mov	r4, r0
   2a954:	b128      	cbz	r0, 2a962 <bt_gatt_dm_desc_by_uuid+0x20>
		if (!bt_uuid_cmp(uuid, curr->uuid)) {
   2a956:	6821      	ldr	r1, [r4, #0]
   2a958:	4630      	mov	r0, r6
   2a95a:	f000 fbe0 	bl	2b11e <bt_uuid_cmp>
   2a95e:	2800      	cmp	r0, #0
   2a960:	d1f3      	bne.n	2a94a <bt_gatt_dm_desc_by_uuid+0x8>
}
   2a962:	4620      	mov	r0, r4
   2a964:	bd70      	pop	{r4, r5, r6, pc}

0002a966 <bt_gatt_dm_data_release>:

	return err;
}

int bt_gatt_dm_data_release(struct bt_gatt_dm *dm)
{
   2a966:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2a968:	f500 759c 	add.w	r5, r0, #312	; 0x138
{
   2a96c:	4604      	mov	r4, r0
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a96e:	f06f 0102 	mvn.w	r1, #2
   2a972:	4628      	mov	r0, r5
   2a974:	f7ff ff27 	bl	2a7c6 <atomic_and>
	if (!atomic_test_and_clear_bit(dm->state_flags,
   2a978:	0783      	lsls	r3, r0, #30
   2a97a:	d509      	bpl.n	2a990 <bt_gatt_dm_data_release+0x2a>
				       STATE_ATTRS_RELEASE_PENDING)) {
		return -EALREADY;
	}

	svc_attr_memory_release(dm);
   2a97c:	4620      	mov	r0, r4
   2a97e:	f7ff ff0b 	bl	2a798 <svc_attr_memory_release>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a982:	f06f 0101 	mvn.w	r1, #1
   2a986:	4628      	mov	r0, r5
   2a988:	f7ff ff1d 	bl	2a7c6 <atomic_and>
	atomic_clear_bit(dm->state_flags, STATE_ATTRS_LOCKED);

	return 0;
   2a98c:	2000      	movs	r0, #0
}
   2a98e:	bd38      	pop	{r3, r4, r5, pc}
		return -EALREADY;
   2a990:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2a994:	e7fb      	b.n	2a98e <bt_gatt_dm_data_release+0x28>

0002a996 <adv_data_found>:
{
   2a996:	b510      	push	{r4, lr}
   2a998:	4604      	mov	r4, r0
   2a99a:	4608      	mov	r0, r1
	switch (data->type) {
   2a99c:	7823      	ldrb	r3, [r4, #0]
   2a99e:	2b05      	cmp	r3, #5
   2a9a0:	d806      	bhi.n	2a9b0 <adv_data_found+0x1a>
   2a9a2:	2b03      	cmp	r3, #3
   2a9a4:	d80e      	bhi.n	2a9c4 <adv_data_found+0x2e>
   2a9a6:	3b02      	subs	r3, #2
   2a9a8:	2b01      	cmp	r3, #1
   2a9aa:	d906      	bls.n	2a9ba <adv_data_found+0x24>
}
   2a9ac:	2001      	movs	r0, #1
   2a9ae:	bd10      	pop	{r4, pc}
	switch (data->type) {
   2a9b0:	3b06      	subs	r3, #6
   2a9b2:	2b01      	cmp	r3, #1
   2a9b4:	d8fa      	bhi.n	2a9ac <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2a9b6:	2202      	movs	r2, #2
   2a9b8:	e000      	b.n	2a9bc <adv_data_found+0x26>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2a9ba:	2200      	movs	r2, #0
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2a9bc:	4621      	mov	r1, r4
   2a9be:	f7e9 fd8f 	bl	144e0 <uuid_check>
		break;
   2a9c2:	e7f3      	b.n	2a9ac <adv_data_found+0x16>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   2a9c4:	2201      	movs	r2, #1
   2a9c6:	e7f9      	b.n	2a9bc <adv_data_found+0x26>

0002a9c8 <bt_scan_stop>:
	return bt_le_scan_stop();
   2a9c8:	f7ed ba50 	b.w	17e6c <bt_le_scan_stop>

0002a9cc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2a9cc:	b538      	push	{r3, r4, r5, lr}
   2a9ce:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2a9d0:	42ab      	cmp	r3, r5
{
   2a9d2:	4611      	mov	r1, r2
   2a9d4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2a9d6:	d804      	bhi.n	2a9e2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2a9d8:	461a      	mov	r2, r3
   2a9da:	f000 fb0c 	bl	2aff6 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2a9de:	4620      	mov	r0, r4
   2a9e0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2a9e2:	2400      	movs	r4, #0
   2a9e4:	e7fb      	b.n	2a9de <_copy+0x12>

0002a9e6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2a9e6:	f000 bb11 	b.w	2b00c <memset>

0002a9ea <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2a9ea:	09c3      	lsrs	r3, r0, #7
   2a9ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a9f0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2a9f4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2a9f8:	b2c0      	uxtb	r0, r0
   2a9fa:	4770      	bx	lr

0002a9fc <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a9fc:	78cb      	ldrb	r3, [r1, #3]
   2a9fe:	7802      	ldrb	r2, [r0, #0]
   2aa00:	4053      	eors	r3, r2
   2aa02:	7003      	strb	r3, [r0, #0]
   2aa04:	884b      	ldrh	r3, [r1, #2]
   2aa06:	7842      	ldrb	r2, [r0, #1]
   2aa08:	4053      	eors	r3, r2
   2aa0a:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2aa0c:	680a      	ldr	r2, [r1, #0]
   2aa0e:	7883      	ldrb	r3, [r0, #2]
   2aa10:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2aa14:	7083      	strb	r3, [r0, #2]
   2aa16:	680a      	ldr	r2, [r1, #0]
   2aa18:	78c3      	ldrb	r3, [r0, #3]
   2aa1a:	4053      	eors	r3, r2
   2aa1c:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2aa1e:	79cb      	ldrb	r3, [r1, #7]
   2aa20:	7902      	ldrb	r2, [r0, #4]
   2aa22:	4053      	eors	r3, r2
   2aa24:	7103      	strb	r3, [r0, #4]
   2aa26:	88cb      	ldrh	r3, [r1, #6]
   2aa28:	7942      	ldrb	r2, [r0, #5]
   2aa2a:	4053      	eors	r3, r2
   2aa2c:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2aa2e:	684a      	ldr	r2, [r1, #4]
   2aa30:	7983      	ldrb	r3, [r0, #6]
   2aa32:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2aa36:	7183      	strb	r3, [r0, #6]
   2aa38:	684a      	ldr	r2, [r1, #4]
   2aa3a:	79c3      	ldrb	r3, [r0, #7]
   2aa3c:	4053      	eors	r3, r2
   2aa3e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2aa40:	7acb      	ldrb	r3, [r1, #11]
   2aa42:	7a02      	ldrb	r2, [r0, #8]
   2aa44:	4053      	eors	r3, r2
   2aa46:	7203      	strb	r3, [r0, #8]
   2aa48:	7a42      	ldrb	r2, [r0, #9]
   2aa4a:	894b      	ldrh	r3, [r1, #10]
   2aa4c:	4053      	eors	r3, r2
   2aa4e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2aa50:	688a      	ldr	r2, [r1, #8]
   2aa52:	7a83      	ldrb	r3, [r0, #10]
   2aa54:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2aa58:	7283      	strb	r3, [r0, #10]
   2aa5a:	688a      	ldr	r2, [r1, #8]
   2aa5c:	7ac3      	ldrb	r3, [r0, #11]
   2aa5e:	4053      	eors	r3, r2
   2aa60:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2aa62:	7bcb      	ldrb	r3, [r1, #15]
   2aa64:	7b02      	ldrb	r2, [r0, #12]
   2aa66:	4053      	eors	r3, r2
   2aa68:	7303      	strb	r3, [r0, #12]
   2aa6a:	89cb      	ldrh	r3, [r1, #14]
   2aa6c:	7b42      	ldrb	r2, [r0, #13]
   2aa6e:	4053      	eors	r3, r2
   2aa70:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2aa72:	68ca      	ldr	r2, [r1, #12]
   2aa74:	7b83      	ldrb	r3, [r0, #14]
   2aa76:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2aa7a:	7383      	strb	r3, [r0, #14]
   2aa7c:	68ca      	ldr	r2, [r1, #12]
   2aa7e:	7bc3      	ldrb	r3, [r0, #15]
   2aa80:	4053      	eors	r3, r2
   2aa82:	73c3      	strb	r3, [r0, #15]
}
   2aa84:	4770      	bx	lr

0002aa86 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2aa86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2aa88:	7802      	ldrb	r2, [r0, #0]
   2aa8a:	f88d 2000 	strb.w	r2, [sp]
   2aa8e:	7942      	ldrb	r2, [r0, #5]
   2aa90:	f88d 2001 	strb.w	r2, [sp, #1]
   2aa94:	7a82      	ldrb	r2, [r0, #10]
   2aa96:	f88d 2002 	strb.w	r2, [sp, #2]
   2aa9a:	7bc2      	ldrb	r2, [r0, #15]
   2aa9c:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2aaa0:	7902      	ldrb	r2, [r0, #4]
   2aaa2:	f88d 2004 	strb.w	r2, [sp, #4]
   2aaa6:	7a42      	ldrb	r2, [r0, #9]
   2aaa8:	f88d 2005 	strb.w	r2, [sp, #5]
   2aaac:	7b82      	ldrb	r2, [r0, #14]
   2aaae:	f88d 2006 	strb.w	r2, [sp, #6]
   2aab2:	78c2      	ldrb	r2, [r0, #3]
   2aab4:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2aab8:	7a02      	ldrb	r2, [r0, #8]
   2aaba:	f88d 2008 	strb.w	r2, [sp, #8]
   2aabe:	7b42      	ldrb	r2, [r0, #13]
   2aac0:	f88d 2009 	strb.w	r2, [sp, #9]
   2aac4:	7882      	ldrb	r2, [r0, #2]
   2aac6:	f88d 200a 	strb.w	r2, [sp, #10]
   2aaca:	79c2      	ldrb	r2, [r0, #7]
   2aacc:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2aad0:	7b02      	ldrb	r2, [r0, #12]
   2aad2:	f88d 200c 	strb.w	r2, [sp, #12]
   2aad6:	7842      	ldrb	r2, [r0, #1]
   2aad8:	7ac3      	ldrb	r3, [r0, #11]
   2aada:	f88d 200d 	strb.w	r2, [sp, #13]
   2aade:	7982      	ldrb	r2, [r0, #6]
   2aae0:	f88d 200e 	strb.w	r2, [sp, #14]
   2aae4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2aae8:	2310      	movs	r3, #16
   2aaea:	466a      	mov	r2, sp
   2aaec:	4619      	mov	r1, r3
   2aaee:	f7ff ff6d 	bl	2a9cc <_copy>
}
   2aaf2:	b005      	add	sp, #20
   2aaf4:	f85d fb04 	ldr.w	pc, [sp], #4

0002aaf8 <mult_row_column>:
{
   2aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aafa:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2aafc:	7808      	ldrb	r0, [r1, #0]
{
   2aafe:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2ab00:	f7ff ff73 	bl	2a9ea <_double_byte>
   2ab04:	4605      	mov	r5, r0
   2ab06:	7860      	ldrb	r0, [r4, #1]
   2ab08:	f7ff ff6f 	bl	2a9ea <_double_byte>
   2ab0c:	78a2      	ldrb	r2, [r4, #2]
   2ab0e:	7863      	ldrb	r3, [r4, #1]
   2ab10:	4053      	eors	r3, r2
   2ab12:	78e2      	ldrb	r2, [r4, #3]
   2ab14:	4053      	eors	r3, r2
   2ab16:	405d      	eors	r5, r3
   2ab18:	4068      	eors	r0, r5
   2ab1a:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2ab1c:	7860      	ldrb	r0, [r4, #1]
   2ab1e:	7827      	ldrb	r7, [r4, #0]
   2ab20:	f7ff ff63 	bl	2a9ea <_double_byte>
   2ab24:	4605      	mov	r5, r0
   2ab26:	78a0      	ldrb	r0, [r4, #2]
   2ab28:	f7ff ff5f 	bl	2a9ea <_double_byte>
   2ab2c:	78a3      	ldrb	r3, [r4, #2]
   2ab2e:	405f      	eors	r7, r3
   2ab30:	78e3      	ldrb	r3, [r4, #3]
   2ab32:	405f      	eors	r7, r3
   2ab34:	407d      	eors	r5, r7
   2ab36:	4068      	eors	r0, r5
   2ab38:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2ab3a:	7863      	ldrb	r3, [r4, #1]
   2ab3c:	7827      	ldrb	r7, [r4, #0]
   2ab3e:	78a0      	ldrb	r0, [r4, #2]
   2ab40:	405f      	eors	r7, r3
   2ab42:	f7ff ff52 	bl	2a9ea <_double_byte>
   2ab46:	4605      	mov	r5, r0
   2ab48:	78e0      	ldrb	r0, [r4, #3]
   2ab4a:	f7ff ff4e 	bl	2a9ea <_double_byte>
   2ab4e:	78e3      	ldrb	r3, [r4, #3]
   2ab50:	405f      	eors	r7, r3
   2ab52:	407d      	eors	r5, r7
   2ab54:	4068      	eors	r0, r5
   2ab56:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2ab58:	7820      	ldrb	r0, [r4, #0]
   2ab5a:	f7ff ff46 	bl	2a9ea <_double_byte>
   2ab5e:	7862      	ldrb	r2, [r4, #1]
   2ab60:	7823      	ldrb	r3, [r4, #0]
   2ab62:	4053      	eors	r3, r2
   2ab64:	78a2      	ldrb	r2, [r4, #2]
   2ab66:	4053      	eors	r3, r2
   2ab68:	ea80 0503 	eor.w	r5, r0, r3
   2ab6c:	78e0      	ldrb	r0, [r4, #3]
   2ab6e:	f7ff ff3c 	bl	2a9ea <_double_byte>
   2ab72:	b2ed      	uxtb	r5, r5
   2ab74:	4045      	eors	r5, r0
   2ab76:	70f5      	strb	r5, [r6, #3]
}
   2ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ab7a <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2ab7a:	b570      	push	{r4, r5, r6, lr}
   2ab7c:	4614      	mov	r4, r2
   2ab7e:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2ab80:	4605      	mov	r5, r0
   2ab82:	2800      	cmp	r0, #0
   2ab84:	d049      	beq.n	2ac1a <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2ab86:	2900      	cmp	r1, #0
   2ab88:	d049      	beq.n	2ac1e <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2ab8a:	2a00      	cmp	r2, #0
   2ab8c:	d049      	beq.n	2ac22 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2ab8e:	2310      	movs	r3, #16
   2ab90:	460a      	mov	r2, r1
   2ab92:	4668      	mov	r0, sp
   2ab94:	4619      	mov	r1, r3
   2ab96:	f7ff ff19 	bl	2a9cc <_copy>
	add_round_key(state, s->words);
   2ab9a:	4621      	mov	r1, r4
   2ab9c:	4668      	mov	r0, sp
   2ab9e:	f7ff ff2d 	bl	2a9fc <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2aba2:	3410      	adds	r4, #16
   2aba4:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2aba8:	4668      	mov	r0, sp
   2abaa:	f7e9 fe87 	bl	148bc <sub_bytes>
		shift_rows(state);
   2abae:	4668      	mov	r0, sp
   2abb0:	f7ff ff69 	bl	2aa86 <shift_rows>
	mult_row_column(t, s);
   2abb4:	4669      	mov	r1, sp
   2abb6:	a804      	add	r0, sp, #16
   2abb8:	f7ff ff9e 	bl	2aaf8 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2abbc:	a901      	add	r1, sp, #4
   2abbe:	a805      	add	r0, sp, #20
   2abc0:	f7ff ff9a 	bl	2aaf8 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2abc4:	a902      	add	r1, sp, #8
   2abc6:	a806      	add	r0, sp, #24
   2abc8:	f7ff ff96 	bl	2aaf8 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2abcc:	a903      	add	r1, sp, #12
   2abce:	a807      	add	r0, sp, #28
   2abd0:	f7ff ff92 	bl	2aaf8 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2abd4:	2310      	movs	r3, #16
   2abd6:	4619      	mov	r1, r3
   2abd8:	eb0d 0203 	add.w	r2, sp, r3
   2abdc:	4668      	mov	r0, sp
   2abde:	f7ff fef5 	bl	2a9cc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2abe2:	4621      	mov	r1, r4
   2abe4:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2abe6:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2abe8:	f7ff ff08 	bl	2a9fc <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2abec:	42b4      	cmp	r4, r6
   2abee:	d1db      	bne.n	2aba8 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2abf0:	f7e9 fe64 	bl	148bc <sub_bytes>
	shift_rows(state);
   2abf4:	4668      	mov	r0, sp
   2abf6:	f7ff ff46 	bl	2aa86 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2abfa:	4621      	mov	r1, r4
   2abfc:	4668      	mov	r0, sp
   2abfe:	f7ff fefd 	bl	2a9fc <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2ac02:	2310      	movs	r3, #16
   2ac04:	4619      	mov	r1, r3
   2ac06:	466a      	mov	r2, sp
   2ac08:	4628      	mov	r0, r5
   2ac0a:	f7ff fedf 	bl	2a9cc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2ac0e:	4668      	mov	r0, sp
   2ac10:	2210      	movs	r2, #16
   2ac12:	2100      	movs	r1, #0
   2ac14:	f7ff fee7 	bl	2a9e6 <_set>

	return TC_CRYPTO_SUCCESS;
   2ac18:	2001      	movs	r0, #1
}
   2ac1a:	b008      	add	sp, #32
   2ac1c:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2ac1e:	4608      	mov	r0, r1
   2ac20:	e7fb      	b.n	2ac1a <tc_aes_encrypt+0xa0>
   2ac22:	4610      	mov	r0, r2
   2ac24:	e7f9      	b.n	2ac1a <tc_aes_encrypt+0xa0>

0002ac26 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2ac26:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2ac28:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2ac2a:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2ac2c:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2ac30:	2b00      	cmp	r3, #0
   2ac32:	bfac      	ite	ge
   2ac34:	2300      	movge	r3, #0
   2ac36:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2ac38:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2ac3c:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2ac40:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   2ac42:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2ac46:	d002      	beq.n	2ac4e <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2ac48:	7813      	ldrb	r3, [r2, #0]
   2ac4a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2ac4c:	e7f4      	b.n	2ac38 <gf_double+0x12>
	}
}
   2ac4e:	bd10      	pop	{r4, pc}

0002ac50 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2ac50:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2ac52:	b120      	cbz	r0, 2ac5e <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2ac54:	2258      	movs	r2, #88	; 0x58
   2ac56:	2100      	movs	r1, #0
   2ac58:	f7ff fec5 	bl	2a9e6 <_set>
   2ac5c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2ac5e:	bd08      	pop	{r3, pc}

0002ac60 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2ac60:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2ac62:	4604      	mov	r4, r0
   2ac64:	b188      	cbz	r0, 2ac8a <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2ac66:	2210      	movs	r2, #16
   2ac68:	2100      	movs	r1, #0
   2ac6a:	f7ff febc 	bl	2a9e6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2ac6e:	2210      	movs	r2, #16
   2ac70:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ac74:	2100      	movs	r1, #0
   2ac76:	f7ff feb6 	bl	2a9e6 <_set>
	s->leftover_offset = 0;
   2ac7a:	2300      	movs	r3, #0
   2ac7c:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2ac7e:	2200      	movs	r2, #0
   2ac80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2ac84:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2ac88:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2ac8a:	bd10      	pop	{r4, pc}

0002ac8c <tc_cmac_setup>:
{
   2ac8c:	b570      	push	{r4, r5, r6, lr}
   2ac8e:	4604      	mov	r4, r0
   2ac90:	460d      	mov	r5, r1
   2ac92:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2ac94:	b310      	cbz	r0, 2acdc <tc_cmac_setup+0x50>
   2ac96:	b311      	cbz	r1, 2acde <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2ac98:	2258      	movs	r2, #88	; 0x58
   2ac9a:	2100      	movs	r1, #0
   2ac9c:	f7ff fea3 	bl	2a9e6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2aca0:	4629      	mov	r1, r5
	s->sched = sched;
   2aca2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2aca4:	4630      	mov	r0, r6
   2aca6:	f7e9 fe15 	bl	148d4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2acaa:	2210      	movs	r2, #16
   2acac:	2100      	movs	r1, #0
   2acae:	4620      	mov	r0, r4
   2acb0:	f7ff fe99 	bl	2a9e6 <_set>
	gf_double (s->K1, s->iv);
   2acb4:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2acb8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2acba:	4621      	mov	r1, r4
   2acbc:	4620      	mov	r0, r4
   2acbe:	f7ff ff5c 	bl	2ab7a <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2acc2:	4621      	mov	r1, r4
   2acc4:	4628      	mov	r0, r5
   2acc6:	f7ff ffae 	bl	2ac26 <gf_double>
	gf_double (s->K2, s->K1);
   2acca:	4629      	mov	r1, r5
   2accc:	f104 0020 	add.w	r0, r4, #32
   2acd0:	f7ff ffa9 	bl	2ac26 <gf_double>
	tc_cmac_init(s);
   2acd4:	4620      	mov	r0, r4
   2acd6:	f7ff ffc3 	bl	2ac60 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2acda:	2001      	movs	r0, #1
}
   2acdc:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2acde:	4608      	mov	r0, r1
   2ace0:	e7fc      	b.n	2acdc <tc_cmac_setup+0x50>

0002ace2 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2ace2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ace6:	460e      	mov	r6, r1
   2ace8:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2acea:	4604      	mov	r4, r0
   2acec:	2800      	cmp	r0, #0
   2acee:	d060      	beq.n	2adb2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2acf0:	b1fa      	cbz	r2, 2ad32 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2acf2:	2900      	cmp	r1, #0
   2acf4:	d05d      	beq.n	2adb2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2acf6:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2acfa:	ea53 0102 	orrs.w	r1, r3, r2
   2acfe:	d058      	beq.n	2adb2 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2ad00:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   2ad02:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2ad06:	f142 32ff 	adc.w	r2, r2, #4294967295
   2ad0a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2ad0e:	f1b8 0f00 	cmp.w	r8, #0
   2ad12:	d02c      	beq.n	2ad6e <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2ad14:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2ad18:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2ad1c:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2ad1e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2ad20:	d20a      	bcs.n	2ad38 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2ad22:	462b      	mov	r3, r5
   2ad24:	4632      	mov	r2, r6
   2ad26:	4629      	mov	r1, r5
   2ad28:	f7ff fe50 	bl	2a9cc <_copy>
			s->leftover_offset += data_length;
   2ad2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ad2e:	442b      	add	r3, r5
   2ad30:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   2ad32:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   2ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2ad38:	463b      	mov	r3, r7
   2ad3a:	4632      	mov	r2, r6
   2ad3c:	4639      	mov	r1, r7
   2ad3e:	f7ff fe45 	bl	2a9cc <_copy>
		data_length -= remaining_space;
   2ad42:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2ad44:	2300      	movs	r3, #0
   2ad46:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2ad48:	4445      	add	r5, r8
		data += remaining_space;
   2ad4a:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ad4c:	1e63      	subs	r3, r4, #1
   2ad4e:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2ad52:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ad56:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ad5a:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2ad5c:	ea82 0200 	eor.w	r2, r2, r0
   2ad60:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ad62:	d1f6      	bne.n	2ad52 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2ad64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ad66:	4621      	mov	r1, r4
   2ad68:	4620      	mov	r0, r4
   2ad6a:	f7ff ff06 	bl	2ab7a <tc_aes_encrypt>
   2ad6e:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2ad72:	2d10      	cmp	r5, #16
   2ad74:	d80a      	bhi.n	2ad8c <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2ad76:	2d00      	cmp	r5, #0
   2ad78:	d0db      	beq.n	2ad32 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   2ad7a:	462b      	mov	r3, r5
   2ad7c:	4632      	mov	r2, r6
   2ad7e:	4629      	mov	r1, r5
   2ad80:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2ad84:	f7ff fe22 	bl	2a9cc <_copy>
		s->leftover_offset = data_length;
   2ad88:	6465      	str	r5, [r4, #68]	; 0x44
   2ad8a:	e7d2      	b.n	2ad32 <tc_cmac_update+0x50>
   2ad8c:	1e63      	subs	r3, r4, #1
   2ad8e:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   2ad90:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2ad94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ad98:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2ad9a:	ea82 0200 	eor.w	r2, r2, r0
   2ad9e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ada0:	d1f6      	bne.n	2ad90 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2ada2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2ada4:	4621      	mov	r1, r4
   2ada6:	4620      	mov	r0, r4
   2ada8:	f7ff fee7 	bl	2ab7a <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2adac:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2adae:	3d10      	subs	r5, #16
   2adb0:	e7df      	b.n	2ad72 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   2adb2:	2000      	movs	r0, #0
   2adb4:	e7be      	b.n	2ad34 <tc_cmac_update+0x52>

0002adb6 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2adb6:	b570      	push	{r4, r5, r6, lr}
   2adb8:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2adba:	4605      	mov	r5, r0
   2adbc:	b1e8      	cbz	r0, 2adfa <tc_cmac_final+0x44>
   2adbe:	b369      	cbz	r1, 2ae1c <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2adc0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2adc2:	2a10      	cmp	r2, #16
   2adc4:	d11a      	bne.n	2adfc <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2adc6:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2adc8:	1e63      	subs	r3, r4, #1
   2adca:	3901      	subs	r1, #1
   2adcc:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2add0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2add4:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2add8:	4072      	eors	r2, r6
   2adda:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2adde:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2ade0:	ea82 0206 	eor.w	r2, r2, r6
   2ade4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2ade6:	d1f3      	bne.n	2add0 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2ade8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2adea:	4621      	mov	r1, r4
   2adec:	4628      	mov	r0, r5
   2adee:	f7ff fec4 	bl	2ab7a <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2adf2:	4620      	mov	r0, r4
   2adf4:	f7ff ff2c 	bl	2ac50 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2adf8:	2001      	movs	r0, #1
}
   2adfa:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2adfc:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2ae00:	2100      	movs	r1, #0
   2ae02:	f1c2 0210 	rsb	r2, r2, #16
   2ae06:	4420      	add	r0, r4
   2ae08:	f7ff fded 	bl	2a9e6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2ae0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2ae0e:	4423      	add	r3, r4
   2ae10:	2280      	movs	r2, #128	; 0x80
   2ae12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2ae16:	f104 0120 	add.w	r1, r4, #32
   2ae1a:	e7d5      	b.n	2adc8 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2ae1c:	4608      	mov	r0, r1
   2ae1e:	e7ec      	b.n	2adfa <tc_cmac_final+0x44>

0002ae20 <abort_function>:
{
   2ae20:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2ae22:	2000      	movs	r0, #0
   2ae24:	f7e8 f95a 	bl	130dc <sys_reboot>

0002ae28 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   2ae28:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2ae2a:	6800      	ldr	r0, [r0, #0]
   2ae2c:	f7e9 beb0 	b.w	14b90 <z_arm_fatal_error>

0002ae30 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2ae30:	2100      	movs	r1, #0
   2ae32:	2001      	movs	r0, #1
   2ae34:	f7e9 beac 	b.w	14b90 <z_arm_fatal_error>

0002ae38 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   2ae38:	b508      	push	{r3, lr}
	handler();
   2ae3a:	f7e9 ff3f 	bl	14cbc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2ae3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2ae42:	f7ea b817 	b.w	14e74 <z_arm_exc_exit>

0002ae46 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   2ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae4a:	4684      	mov	ip, r0
   2ae4c:	460f      	mov	r7, r1
	register const char *s = nptr;
   2ae4e:	4604      	mov	r4, r0

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   2ae50:	4621      	mov	r1, r4
   2ae52:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   2ae56:	2b20      	cmp	r3, #32
   2ae58:	d0fa      	beq.n	2ae50 <strtoul+0xa>
   2ae5a:	f1a3 0009 	sub.w	r0, r3, #9
   2ae5e:	2804      	cmp	r0, #4
   2ae60:	d9f6      	bls.n	2ae50 <strtoul+0xa>
	} while (isspace((unsigned char)c));
	if (c == '-') {
   2ae62:	2b2d      	cmp	r3, #45	; 0x2d
   2ae64:	d125      	bne.n	2aeb2 <strtoul+0x6c>
		neg = 1;
		c = *s++;
   2ae66:	784b      	ldrb	r3, [r1, #1]
   2ae68:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2ae6a:	f04f 0e01 	mov.w	lr, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2ae6e:	bb3a      	cbnz	r2, 2aec0 <strtoul+0x7a>
   2ae70:	2b30      	cmp	r3, #48	; 0x30
   2ae72:	d032      	beq.n	2aeda <strtoul+0x94>
		s += 2;
		base = 16;
	}

	if (base == 0) {
		base = c == '0' ? 8 : 10;
   2ae74:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2ae76:	f04f 31ff 	mov.w	r1, #4294967295
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2ae7a:	2500      	movs	r5, #0
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   2ae7c:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   2ae80:	fb02 f801 	mul.w	r8, r2, r1
   2ae84:	ea6f 0808 	mvn.w	r8, r8
	for (acc = 0, any = 0;; c = *s++) {
   2ae88:	4628      	mov	r0, r5
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   2ae8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
		if (isdigit((unsigned char)c)) {
   2ae8e:	2e09      	cmp	r6, #9
   2ae90:	d82a      	bhi.n	2aee8 <strtoul+0xa2>
			c -= '0';
   2ae92:	4633      	mov	r3, r6
		} else if (isalpha((unsigned char)c)) {
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2ae94:	429a      	cmp	r2, r3
   2ae96:	dd37      	ble.n	2af08 <strtoul+0xc2>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2ae98:	1c6e      	adds	r6, r5, #1
   2ae9a:	d007      	beq.n	2aeac <strtoul+0x66>
   2ae9c:	4288      	cmp	r0, r1
   2ae9e:	d830      	bhi.n	2af02 <strtoul+0xbc>
   2aea0:	d101      	bne.n	2aea6 <strtoul+0x60>
   2aea2:	4543      	cmp	r3, r8
   2aea4:	dc2d      	bgt.n	2af02 <strtoul+0xbc>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2aea6:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   2aeaa:	2501      	movs	r5, #1
	for (acc = 0, any = 0;; c = *s++) {
   2aeac:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   2aeb0:	e7eb      	b.n	2ae8a <strtoul+0x44>
	} else if (c == '+') {
   2aeb2:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2aeb4:	bf04      	itt	eq
   2aeb6:	784b      	ldrbeq	r3, [r1, #1]
   2aeb8:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   2aeba:	f04f 0e00 	mov.w	lr, #0
   2aebe:	e7d6      	b.n	2ae6e <strtoul+0x28>
	if ((base == 0 || base == 16) &&
   2aec0:	2a10      	cmp	r2, #16
   2aec2:	d1d8      	bne.n	2ae76 <strtoul+0x30>
   2aec4:	2b30      	cmp	r3, #48	; 0x30
   2aec6:	d1d6      	bne.n	2ae76 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2aec8:	7821      	ldrb	r1, [r4, #0]
   2aeca:	f001 01df 	and.w	r1, r1, #223	; 0xdf
   2aece:	2958      	cmp	r1, #88	; 0x58
   2aed0:	d1d1      	bne.n	2ae76 <strtoul+0x30>
		c = s[1];
   2aed2:	7863      	ldrb	r3, [r4, #1]
		base = 16;
   2aed4:	2210      	movs	r2, #16
		s += 2;
   2aed6:	3402      	adds	r4, #2
	if (base == 0) {
   2aed8:	e7cd      	b.n	2ae76 <strtoul+0x30>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2aeda:	7822      	ldrb	r2, [r4, #0]
   2aedc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   2aee0:	2a58      	cmp	r2, #88	; 0x58
   2aee2:	d0f6      	beq.n	2aed2 <strtoul+0x8c>
		base = c == '0' ? 8 : 10;
   2aee4:	2208      	movs	r2, #8
   2aee6:	e7c6      	b.n	2ae76 <strtoul+0x30>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   2aee8:	f043 0620 	orr.w	r6, r3, #32
   2aeec:	3e61      	subs	r6, #97	; 0x61
		} else if (isalpha((unsigned char)c)) {
   2aeee:	2e19      	cmp	r6, #25
   2aef0:	d80a      	bhi.n	2af08 <strtoul+0xc2>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2aef2:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   2aef6:	2e1a      	cmp	r6, #26
   2aef8:	bf34      	ite	cc
   2aefa:	2637      	movcc	r6, #55	; 0x37
   2aefc:	2657      	movcs	r6, #87	; 0x57
   2aefe:	1b9b      	subs	r3, r3, r6
   2af00:	e7c8      	b.n	2ae94 <strtoul+0x4e>
			any = -1;
   2af02:	f04f 35ff 	mov.w	r5, #4294967295
   2af06:	e7d1      	b.n	2aeac <strtoul+0x66>
		}
	}
	if (any < 0) {
   2af08:	1c6b      	adds	r3, r5, #1
   2af0a:	d107      	bne.n	2af1c <strtoul+0xd6>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2af0c:	f7f8 fc72 	bl	237f4 <z_impl_z_errno>
		acc = ULONG_MAX;
		errno = ERANGE;
   2af10:	2322      	movs	r3, #34	; 0x22
   2af12:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   2af14:	4628      	mov	r0, r5
	} else if (neg) {
		acc = -acc;
	}
	if (endptr != NULL) {
   2af16:	b947      	cbnz	r7, 2af2a <strtoul+0xe4>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   2af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (neg) {
   2af1c:	f1be 0f00 	cmp.w	lr, #0
   2af20:	d000      	beq.n	2af24 <strtoul+0xde>
		acc = -acc;
   2af22:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2af24:	2f00      	cmp	r7, #0
   2af26:	d0f7      	beq.n	2af18 <strtoul+0xd2>
		*endptr = (char *)(any ? s - 1 : nptr);
   2af28:	b10d      	cbz	r5, 2af2e <strtoul+0xe8>
   2af2a:	f104 3cff 	add.w	ip, r4, #4294967295
   2af2e:	f8c7 c000 	str.w	ip, [r7]
	return acc;
   2af32:	e7f1      	b.n	2af18 <strtoul+0xd2>

0002af34 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   2af34:	3901      	subs	r1, #1
   2af36:	4603      	mov	r3, r0
   2af38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2af3c:	b90a      	cbnz	r2, 2af42 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2af3e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2af40:	4770      	bx	lr
		*d = *s;
   2af42:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   2af46:	e7f7      	b.n	2af38 <strcpy+0x4>

0002af48 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   2af48:	4603      	mov	r3, r0
	size_t n = 0;
   2af4a:	2000      	movs	r0, #0

	while (*s != '\0') {
   2af4c:	5c1a      	ldrb	r2, [r3, r0]
   2af4e:	b902      	cbnz	r2, 2af52 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   2af50:	4770      	bx	lr
		n++;
   2af52:	3001      	adds	r0, #1
   2af54:	e7fa      	b.n	2af4c <strlen+0x4>

0002af56 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2af56:	4603      	mov	r3, r0
	size_t n = 0;
   2af58:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2af5a:	5c1a      	ldrb	r2, [r3, r0]
   2af5c:	b10a      	cbz	r2, 2af62 <strnlen+0xc>
   2af5e:	4288      	cmp	r0, r1
   2af60:	d100      	bne.n	2af64 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   2af62:	4770      	bx	lr
		n++;
   2af64:	3001      	adds	r0, #1
   2af66:	e7f8      	b.n	2af5a <strnlen+0x4>

0002af68 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2af68:	1e43      	subs	r3, r0, #1
   2af6a:	3901      	subs	r1, #1
   2af6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2af70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   2af74:	4282      	cmp	r2, r0
   2af76:	d101      	bne.n	2af7c <strcmp+0x14>
   2af78:	2a00      	cmp	r2, #0
   2af7a:	d1f7      	bne.n	2af6c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   2af7c:	1a10      	subs	r0, r2, r0
   2af7e:	4770      	bx	lr

0002af80 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   2af80:	b570      	push	{r4, r5, r6, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2af82:	460b      	mov	r3, r1
   2af84:	4605      	mov	r5, r0
   2af86:	b16a      	cbz	r2, 2afa4 <strncmp+0x24>
   2af88:	f810 6b01 	ldrb.w	r6, [r0], #1
   2af8c:	781c      	ldrb	r4, [r3, #0]
   2af8e:	42b4      	cmp	r4, r6
   2af90:	f101 0101 	add.w	r1, r1, #1
   2af94:	d100      	bne.n	2af98 <strncmp+0x18>
   2af96:	b91c      	cbnz	r4, 2afa0 <strncmp+0x20>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2af98:	782a      	ldrb	r2, [r5, #0]
   2af9a:	781b      	ldrb	r3, [r3, #0]
   2af9c:	1ad0      	subs	r0, r2, r3
   2af9e:	e002      	b.n	2afa6 <strncmp+0x26>
		n--;
   2afa0:	3a01      	subs	r2, #1
   2afa2:	e7ee      	b.n	2af82 <strncmp+0x2>
	return (n == 0) ? 0 : (*s1 - *s2);
   2afa4:	4610      	mov	r0, r2
}
   2afa6:	bd70      	pop	{r4, r5, r6, pc}

0002afa8 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   2afa8:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2afaa:	b15a      	cbz	r2, 2afc4 <memcmp+0x1c>
   2afac:	3901      	subs	r1, #1
   2afae:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   2afb0:	f810 2b01 	ldrb.w	r2, [r0], #1
   2afb4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2afb8:	42a0      	cmp	r0, r4
   2afba:	d001      	beq.n	2afc0 <memcmp+0x18>
   2afbc:	429a      	cmp	r2, r3
   2afbe:	d0f7      	beq.n	2afb0 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   2afc0:	1ad0      	subs	r0, r2, r3
}
   2afc2:	bd10      	pop	{r4, pc}
		return 0;
   2afc4:	4610      	mov	r0, r2
   2afc6:	e7fc      	b.n	2afc2 <memcmp+0x1a>

0002afc8 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   2afc8:	1a43      	subs	r3, r0, r1
   2afca:	4293      	cmp	r3, r2
{
   2afcc:	b510      	push	{r4, lr}
   2afce:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   2afd2:	d308      	bcc.n	2afe6 <memmove+0x1e>
   2afd4:	3901      	subs	r1, #1
	char *dest = d;
   2afd6:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   2afd8:	429a      	cmp	r2, r3
   2afda:	d00b      	beq.n	2aff4 <memmove+0x2c>
			*dest = *src;
   2afdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2afe0:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   2afe4:	e7f8      	b.n	2afd8 <memmove+0x10>
   2afe6:	440a      	add	r2, r1
			dest[n] = src[n];
   2afe8:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2afec:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   2aff0:	428a      	cmp	r2, r1
   2aff2:	d1f9      	bne.n	2afe8 <memmove+0x20>
		}
	}

	return d;
}
   2aff4:	bd10      	pop	{r4, pc}

0002aff6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   2aff6:	b510      	push	{r4, lr}
   2aff8:	1e43      	subs	r3, r0, #1
   2affa:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2affc:	4291      	cmp	r1, r2
   2affe:	d100      	bne.n	2b002 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2b000:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   2b002:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b006:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   2b00a:	e7f7      	b.n	2affc <memcpy+0x6>

0002b00c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2b00c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   2b00e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   2b010:	4603      	mov	r3, r0
	while (n > 0) {
   2b012:	4293      	cmp	r3, r2
   2b014:	d100      	bne.n	2b018 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   2b016:	4770      	bx	lr
		*(d_byte++) = c_byte;
   2b018:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2b01c:	e7f9      	b.n	2b012 <memset+0x6>

0002b01e <_stdout_hook_default>:
}
   2b01e:	f04f 30ff 	mov.w	r0, #4294967295
   2b022:	4770      	bx	lr

0002b024 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2b024:	2806      	cmp	r0, #6
   2b026:	d108      	bne.n	2b03a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2b028:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b02c:	2201      	movs	r2, #1
   2b02e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2b032:	f3bf 8f4f 	dsb	sy
        __WFE();
   2b036:	bf20      	wfe
    while (true)
   2b038:	e7fd      	b.n	2b036 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2b03a:	4770      	bx	lr

0002b03c <pm_state_exit_post_ops>:
   2b03c:	2300      	movs	r3, #0
   2b03e:	f383 8811 	msr	BASEPRI, r3
   2b042:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2b046:	4770      	bx	lr

0002b048 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   2b048:	b530      	push	{r4, r5, lr}
   2b04a:	b085      	sub	sp, #20
   2b04c:	4604      	mov	r4, r0
   2b04e:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2b050:	4668      	mov	r0, sp
   2b052:	2203      	movs	r2, #3
   2b054:	f7ff ffcf 	bl	2aff6 <memcpy>
	(void)memset(res + 3, 0, 13);
   2b058:	220d      	movs	r2, #13
   2b05a:	2100      	movs	r1, #0
   2b05c:	f10d 0003 	add.w	r0, sp, #3
   2b060:	f7ff ffd4 	bl	2b00c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   2b064:	4620      	mov	r0, r4
   2b066:	466a      	mov	r2, sp
   2b068:	4669      	mov	r1, sp
   2b06a:	f002 fce8 	bl	2da3e <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2b06e:	4604      	mov	r4, r0
   2b070:	b920      	cbnz	r0, 2b07c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2b072:	2203      	movs	r2, #3
   2b074:	4669      	mov	r1, sp
   2b076:	4628      	mov	r0, r5
   2b078:	f7ff ffbd 	bl	2aff6 <memcpy>

	return 0;
}
   2b07c:	4620      	mov	r0, r4
   2b07e:	b005      	add	sp, #20
   2b080:	bd30      	pop	{r4, r5, pc}

0002b082 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2b082:	b513      	push	{r0, r1, r4, lr}
   2b084:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   2b086:	aa01      	add	r2, sp, #4
   2b088:	3103      	adds	r1, #3
   2b08a:	f7ff ffdd 	bl	2b048 <ah>
	if (err) {
   2b08e:	b948      	cbnz	r0, 2b0a4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2b090:	2203      	movs	r2, #3
   2b092:	a901      	add	r1, sp, #4
   2b094:	4620      	mov	r0, r4
   2b096:	f7ff ff87 	bl	2afa8 <memcmp>
   2b09a:	fab0 f080 	clz	r0, r0
   2b09e:	0940      	lsrs	r0, r0, #5
}
   2b0a0:	b002      	add	sp, #8
   2b0a2:	bd10      	pop	{r4, pc}
		return false;
   2b0a4:	2000      	movs	r0, #0
   2b0a6:	e7fb      	b.n	2b0a0 <bt_rpa_irk_matches+0x1e>

0002b0a8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2b0a8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   2b0aa:	1cce      	adds	r6, r1, #3
{
   2b0ac:	4605      	mov	r5, r0
   2b0ae:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2b0b0:	4630      	mov	r0, r6
   2b0b2:	2103      	movs	r1, #3
   2b0b4:	f7f6 fea2 	bl	21dfc <bt_rand>
	if (err) {
   2b0b8:	b960      	cbnz	r0, 2b0d4 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   2b0ba:	7963      	ldrb	r3, [r4, #5]
   2b0bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2b0c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b0c4:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   2b0c6:	4622      	mov	r2, r4
   2b0c8:	4631      	mov	r1, r6
   2b0ca:	4628      	mov	r0, r5
	}

	LOG_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2b0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2b0d0:	f7ff bfba 	b.w	2b048 <ah>
}
   2b0d4:	bd70      	pop	{r4, r5, r6, pc}

0002b0d6 <bt_settings_decode_key>:
{
   2b0d6:	b570      	push	{r4, r5, r6, lr}
   2b0d8:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   2b0da:	2100      	movs	r1, #0
{
   2b0dc:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2b0de:	f7ff fa6e 	bl	2a5be <settings_name_next>
   2b0e2:	280d      	cmp	r0, #13
   2b0e4:	d118      	bne.n	2b118 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2b0e6:	7b23      	ldrb	r3, [r4, #12]
   2b0e8:	2b30      	cmp	r3, #48	; 0x30
   2b0ea:	d013      	beq.n	2b114 <bt_settings_decode_key+0x3e>
	} else if (key[12] == '1') {
   2b0ec:	2b31      	cmp	r3, #49	; 0x31
   2b0ee:	d113      	bne.n	2b118 <bt_settings_decode_key+0x42>
   2b0f0:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_PUBLIC;
   2b0f2:	f805 3b06 	strb.w	r3, [r5], #6
   2b0f6:	f104 060c 	add.w	r6, r4, #12
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2b0fa:	462a      	mov	r2, r5
   2b0fc:	4620      	mov	r0, r4
   2b0fe:	2301      	movs	r3, #1
   2b100:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   2b102:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2b104:	f7fe fd4c 	bl	29ba0 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2b108:	42b4      	cmp	r4, r6
   2b10a:	f105 35ff 	add.w	r5, r5, #4294967295
   2b10e:	d1f4      	bne.n	2b0fa <bt_settings_decode_key+0x24>
	return 0;
   2b110:	2000      	movs	r0, #0
}
   2b112:	bd70      	pop	{r4, r5, r6, pc}
   2b114:	2300      	movs	r3, #0
   2b116:	e7ec      	b.n	2b0f2 <bt_settings_decode_key+0x1c>
		return -EINVAL;
   2b118:	f06f 0015 	mvn.w	r0, #21
   2b11c:	e7f9      	b.n	2b112 <bt_settings_decode_key+0x3c>

0002b11e <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2b11e:	b510      	push	{r4, lr}
   2b120:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   2b122:	7801      	ldrb	r1, [r0, #0]
   2b124:	7822      	ldrb	r2, [r4, #0]
   2b126:	428a      	cmp	r2, r1
{
   2b128:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2b12a:	d00f      	beq.n	2b14c <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   2b12c:	4669      	mov	r1, sp
   2b12e:	f7ea fc83 	bl	15a38 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2b132:	a905      	add	r1, sp, #20
   2b134:	4620      	mov	r0, r4
   2b136:	f7ea fc7f 	bl	15a38 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2b13a:	2210      	movs	r2, #16
   2b13c:	f10d 0115 	add.w	r1, sp, #21
   2b140:	f10d 0001 	add.w	r0, sp, #1
   2b144:	f7ff ff30 	bl	2afa8 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2b148:	b00a      	add	sp, #40	; 0x28
   2b14a:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   2b14c:	2a01      	cmp	r2, #1
   2b14e:	d006      	beq.n	2b15e <bt_uuid_cmp+0x40>
   2b150:	2a02      	cmp	r2, #2
   2b152:	d007      	beq.n	2b164 <bt_uuid_cmp+0x46>
   2b154:	b972      	cbnz	r2, 2b174 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2b156:	8840      	ldrh	r0, [r0, #2]
   2b158:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2b15a:	1ac0      	subs	r0, r0, r3
   2b15c:	e7f4      	b.n	2b148 <bt_uuid_cmp+0x2a>
   2b15e:	6840      	ldr	r0, [r0, #4]
   2b160:	6863      	ldr	r3, [r4, #4]
   2b162:	e7fa      	b.n	2b15a <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2b164:	2210      	movs	r2, #16
   2b166:	1c61      	adds	r1, r4, #1
   2b168:	3001      	adds	r0, #1
}
   2b16a:	b00a      	add	sp, #40	; 0x28
   2b16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2b170:	f7ff bf1a 	b.w	2afa8 <memcmp>
	switch (u1->type) {
   2b174:	f06f 0015 	mvn.w	r0, #21
   2b178:	e7e6      	b.n	2b148 <bt_uuid_cmp+0x2a>

0002b17a <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2b17a:	2a04      	cmp	r2, #4
{
   2b17c:	b510      	push	{r4, lr}
	switch (data_len) {
   2b17e:	d00a      	beq.n	2b196 <bt_uuid_create+0x1c>
   2b180:	2a10      	cmp	r2, #16
   2b182:	d00d      	beq.n	2b1a0 <bt_uuid_create+0x26>
   2b184:	2a02      	cmp	r2, #2
   2b186:	f04f 0300 	mov.w	r3, #0
   2b18a:	d10f      	bne.n	2b1ac <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   2b18c:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2b18e:	880b      	ldrh	r3, [r1, #0]
   2b190:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2b192:	2001      	movs	r0, #1
}
   2b194:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   2b196:	2301      	movs	r3, #1
   2b198:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2b19a:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2b19c:	6043      	str	r3, [r0, #4]
		break;
   2b19e:	e7f8      	b.n	2b192 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2b1a0:	2302      	movs	r3, #2
   2b1a2:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   2b1a6:	f7ff ff26 	bl	2aff6 <memcpy>
		break;
   2b1aa:	e7f2      	b.n	2b192 <bt_uuid_create+0x18>
	switch (data_len) {
   2b1ac:	4618      	mov	r0, r3
   2b1ae:	e7f1      	b.n	2b194 <bt_uuid_create+0x1a>

0002b1b0 <bt_addr_le_create_static>:
#include <zephyr/bluetooth/addr.h>
#include <zephyr/bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2b1b0:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2b1b2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2b1b4:	2106      	movs	r1, #6
{
   2b1b6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2b1b8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2b1bc:	f7f6 fe1e 	bl	21dfc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2b1c0:	b918      	cbnz	r0, 2b1ca <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2b1c2:	79a3      	ldrb	r3, [r4, #6]
   2b1c4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2b1c8:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2b1ca:	bd10      	pop	{r4, pc}

0002b1cc <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2b1cc:	280f      	cmp	r0, #15
   2b1ce:	d807      	bhi.n	2b1e0 <bt_hci_evt_get_flags+0x14>
   2b1d0:	280d      	cmp	r0, #13
   2b1d2:	d80b      	bhi.n	2b1ec <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2b1d4:	2805      	cmp	r0, #5
   2b1d6:	bf08      	it	eq
   2b1d8:	2003      	moveq	r0, #3
   2b1da:	bf18      	it	ne
   2b1dc:	2002      	movne	r0, #2
   2b1de:	4770      	bx	lr
	switch (evt) {
   2b1e0:	2813      	cmp	r0, #19
   2b1e2:	d003      	beq.n	2b1ec <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2b1e4:	281a      	cmp	r0, #26
   2b1e6:	bf08      	it	eq
   2b1e8:	2001      	moveq	r0, #1
   2b1ea:	e7f6      	b.n	2b1da <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   2b1ec:	2001      	movs	r0, #1
	}
}
   2b1ee:	4770      	bx	lr

0002b1f0 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2b1f0:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2b1f4:	b183      	cbz	r3, 2b218 <update_sec_level+0x28>
   2b1f6:	7b5a      	ldrb	r2, [r3, #13]
   2b1f8:	07d1      	lsls	r1, r2, #31
   2b1fa:	d50d      	bpl.n	2b218 <update_sec_level+0x28>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2b1fc:	06d2      	lsls	r2, r2, #27
   2b1fe:	d50d      	bpl.n	2b21c <update_sec_level+0x2c>
   2b200:	7b1b      	ldrb	r3, [r3, #12]
   2b202:	2b10      	cmp	r3, #16
   2b204:	bf14      	ite	ne
   2b206:	2303      	movne	r3, #3
   2b208:	2304      	moveq	r3, #4
			conn->sec_level = BT_SECURITY_L3;
   2b20a:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2b20c:	7a80      	ldrb	r0, [r0, #10]
}
   2b20e:	4298      	cmp	r0, r3
   2b210:	bf8c      	ite	hi
   2b212:	2000      	movhi	r0, #0
   2b214:	2001      	movls	r0, #1
   2b216:	4770      	bx	lr
   2b218:	2302      	movs	r3, #2
   2b21a:	e7f6      	b.n	2b20a <update_sec_level+0x1a>
   2b21c:	2303      	movs	r3, #3
   2b21e:	e7f4      	b.n	2b20a <update_sec_level+0x1a>

0002b220 <hci_vendor_event>:
}
   2b220:	4770      	bx	lr

0002b222 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2b222:	2207      	movs	r2, #7
   2b224:	f7ff bee7 	b.w	2aff6 <memcpy>

0002b228 <atomic_or>:
{
   2b228:	b510      	push	{r4, lr}
   2b22a:	4603      	mov	r3, r0
}
   2b22c:	f3bf 8f5b 	dmb	ish
   2b230:	e853 0f00 	ldrex	r0, [r3]
   2b234:	ea40 0201 	orr.w	r2, r0, r1
   2b238:	e843 2400 	strex	r4, r2, [r3]
   2b23c:	2c00      	cmp	r4, #0
   2b23e:	d1f7      	bne.n	2b230 <atomic_or+0x8>
   2b240:	f3bf 8f5b 	dmb	ish
   2b244:	bd10      	pop	{r4, pc}

0002b246 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b246:	f3bf 8f5b 	dmb	ish
   2b24a:	e850 3f00 	ldrex	r3, [r0]
   2b24e:	400b      	ands	r3, r1
   2b250:	e840 3200 	strex	r2, r3, [r0]
   2b254:	2a00      	cmp	r2, #0
   2b256:	d1f8      	bne.n	2b24a <atomic_and.isra.0+0x4>
   2b258:	f3bf 8f5b 	dmb	ish
}
   2b25c:	4770      	bx	lr

0002b25e <sys_put_le64>:
	dst[1] = val >> 8;
   2b25e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2b262:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2b264:	0e00      	lsrs	r0, r0, #24
   2b266:	7053      	strb	r3, [r2, #1]
   2b268:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2b26a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2b26c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2b270:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2b272:	7093      	strb	r3, [r2, #2]
   2b274:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2b276:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2b278:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2b27a:	71d1      	strb	r1, [r2, #7]
}
   2b27c:	4770      	bx	lr

0002b27e <bt_hci_disconnect>:
{
   2b27e:	b570      	push	{r4, r5, r6, lr}
   2b280:	4606      	mov	r6, r0
   2b282:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2b284:	f240 4006 	movw	r0, #1030	; 0x406
   2b288:	2103      	movs	r1, #3
   2b28a:	f7ea ffb7 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b28e:	4604      	mov	r4, r0
   2b290:	b168      	cbz	r0, 2b2ae <bt_hci_disconnect+0x30>
   2b292:	2103      	movs	r1, #3
   2b294:	300c      	adds	r0, #12
   2b296:	f7f3 fee9 	bl	1f06c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   2b29a:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2b29c:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2b29e:	4621      	mov	r1, r4
   2b2a0:	2200      	movs	r2, #0
}
   2b2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2b2a6:	f240 4006 	movw	r0, #1030	; 0x406
   2b2aa:	f7ea bff1 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b2ae:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b2b2:	bd70      	pop	{r4, r5, r6, pc}

0002b2b4 <bt_le_set_data_len>:
{
   2b2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b2b6:	4607      	mov	r7, r0
   2b2b8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2b2ba:	f242 0022 	movw	r0, #8226	; 0x2022
   2b2be:	2106      	movs	r1, #6
{
   2b2c0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2b2c2:	f7ea ff9b 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b2c6:	4604      	mov	r4, r0
   2b2c8:	b178      	cbz	r0, 2b2ea <bt_le_set_data_len+0x36>
   2b2ca:	2106      	movs	r1, #6
   2b2cc:	300c      	adds	r0, #12
   2b2ce:	f7f3 fecd 	bl	1f06c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b2d2:	883b      	ldrh	r3, [r7, #0]
   2b2d4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2b2d6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2b2d8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2b2da:	4621      	mov	r1, r4
   2b2dc:	2200      	movs	r2, #0
}
   2b2de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   2b2e2:	f242 0022 	movw	r0, #8226	; 0x2022
   2b2e6:	f7ea bfd3 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b2ea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b2f0 <bt_le_set_phy>:
{
   2b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b2f4:	4681      	mov	r9, r0
   2b2f6:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2b2f8:	f242 0032 	movw	r0, #8242	; 0x2032
   2b2fc:	2107      	movs	r1, #7
{
   2b2fe:	f89d a020 	ldrb.w	sl, [sp, #32]
   2b302:	4617      	mov	r7, r2
   2b304:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2b306:	f7ea ff79 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b30a:	4605      	mov	r5, r0
   2b30c:	b1a0      	cbz	r0, 2b338 <bt_le_set_phy+0x48>
   2b30e:	2107      	movs	r1, #7
   2b310:	300c      	adds	r0, #12
   2b312:	f7f3 feab 	bl	1f06c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b316:	f8b9 3000 	ldrh.w	r3, [r9]
   2b31a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2b31c:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2b320:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2b322:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   2b324:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2b328:	4629      	mov	r1, r5
   2b32a:	2200      	movs	r2, #0
}
   2b32c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2b330:	f242 0032 	movw	r0, #8242	; 0x2032
   2b334:	f7ea bfac 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b338:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b340 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2b340:	68c0      	ldr	r0, [r0, #12]
   2b342:	f7eb b8c9 	b.w	164d8 <bt_hci_le_enh_conn_complete>

0002b346 <bt_le_conn_params_valid>:
{
   2b346:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2b348:	8803      	ldrh	r3, [r0, #0]
   2b34a:	8842      	ldrh	r2, [r0, #2]
   2b34c:	4293      	cmp	r3, r2
   2b34e:	d819      	bhi.n	2b384 <bt_le_conn_params_valid+0x3e>
   2b350:	2b05      	cmp	r3, #5
   2b352:	d917      	bls.n	2b384 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2b354:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2b358:	d814      	bhi.n	2b384 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2b35a:	8883      	ldrh	r3, [r0, #4]
   2b35c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2b360:	d210      	bcs.n	2b384 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2b362:	88c0      	ldrh	r0, [r0, #6]
   2b364:	f1a0 010a 	sub.w	r1, r0, #10
   2b368:	b289      	uxth	r1, r1
   2b36a:	f640 4476 	movw	r4, #3190	; 0xc76
   2b36e:	42a1      	cmp	r1, r4
   2b370:	d808      	bhi.n	2b384 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2b372:	3301      	adds	r3, #1
   2b374:	b29b      	uxth	r3, r3
   2b376:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2b378:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2b37c:	bf34      	ite	cc
   2b37e:	2001      	movcc	r0, #1
   2b380:	2000      	movcs	r0, #0
}
   2b382:	bd10      	pop	{r4, pc}
		return false;
   2b384:	2000      	movs	r0, #0
   2b386:	e7fc      	b.n	2b382 <bt_le_conn_params_valid+0x3c>

0002b388 <bt_get_appearance>:
}
   2b388:	2000      	movs	r0, #0
   2b38a:	4770      	bx	lr

0002b38c <bt_addr_le_is_bonded>:
{
   2b38c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2b38e:	f7f3 f981 	bl	1e694 <bt_keys_find_addr>
		return keys && keys->keys;
   2b392:	b118      	cbz	r0, 2b39c <bt_addr_le_is_bonded+0x10>
   2b394:	89c0      	ldrh	r0, [r0, #14]
   2b396:	3800      	subs	r0, #0
   2b398:	bf18      	it	ne
   2b39a:	2001      	movne	r0, #1
}
   2b39c:	bd08      	pop	{r3, pc}

0002b39e <bt_addr_le_eq>:
{
   2b39e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2b3a0:	2207      	movs	r2, #7
   2b3a2:	f7ff fe01 	bl	2afa8 <memcmp>
}
   2b3a6:	fab0 f080 	clz	r0, r0
   2b3aa:	0940      	lsrs	r0, r0, #5
   2b3ac:	bd08      	pop	{r3, pc}

0002b3ae <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2b3ae:	2207      	movs	r2, #7
   2b3b0:	f7ff be21 	b.w	2aff6 <memcpy>

0002b3b4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2b3b4:	7a03      	ldrb	r3, [r0, #8]
   2b3b6:	075b      	lsls	r3, r3, #29
{
   2b3b8:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2b3ba:	d505      	bpl.n	2b3c8 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2b3bc:	4601      	mov	r1, r0
   2b3be:	322a      	adds	r2, #42	; 0x2a
   2b3c0:	f811 0b01 	ldrb.w	r0, [r1], #1
   2b3c4:	f7eb be1c 	b.w	17000 <hci_id_add>
}
   2b3c8:	4770      	bx	lr

0002b3ca <addr_res_enable>:
{
   2b3ca:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2b3cc:	2101      	movs	r1, #1
{
   2b3ce:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2b3d0:	f242 002d 	movw	r0, #8237	; 0x202d
   2b3d4:	f7ea ff12 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b3d8:	4604      	mov	r4, r0
   2b3da:	b158      	cbz	r0, 2b3f4 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2b3dc:	4629      	mov	r1, r5
   2b3de:	300c      	adds	r0, #12
   2b3e0:	f002 f82d 	bl	2d43e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2b3e4:	4621      	mov	r1, r4
   2b3e6:	2200      	movs	r2, #0
}
   2b3e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2b3ec:	f242 002d 	movw	r0, #8237	; 0x202d
   2b3f0:	f7ea bf4e 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b3f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b3f8:	bd38      	pop	{r3, r4, r5, pc}

0002b3fa <bt_lookup_id_addr>:
{
   2b3fa:	b510      	push	{r4, lr}
   2b3fc:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   2b3fe:	b930      	cbnz	r0, 2b40e <bt_lookup_id_addr+0x14>
   2b400:	b119      	cbz	r1, 2b40a <bt_lookup_id_addr+0x10>
		keys = bt_keys_find_irk(id, addr);
   2b402:	f7f3 f8f5 	bl	1e5f0 <bt_keys_find_irk>
		if (keys) {
   2b406:	b100      	cbz	r0, 2b40a <bt_lookup_id_addr+0x10>
			return &keys->addr;
   2b408:	1c44      	adds	r4, r0, #1
}
   2b40a:	4620      	mov	r0, r4
   2b40c:	bd10      	pop	{r4, pc}
		return NULL;
   2b40e:	2400      	movs	r4, #0
   2b410:	e7fb      	b.n	2b40a <bt_lookup_id_addr+0x10>

0002b412 <bt_id_scan_random_addr_check>:
}
   2b412:	2001      	movs	r0, #1
   2b414:	4770      	bx	lr

0002b416 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2b416:	7a03      	ldrb	r3, [r0, #8]
   2b418:	07d9      	lsls	r1, r3, #31
   2b41a:	d504      	bpl.n	2b426 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2b41c:	f023 0301 	bic.w	r3, r3, #1
   2b420:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2b422:	f7eb bfd9 	b.w	173d8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2b426:	0799      	lsls	r1, r3, #30
   2b428:	d504      	bpl.n	2b434 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2b42a:	f023 0302 	bic.w	r3, r3, #2
   2b42e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2b430:	f7ec b884 	b.w	1753c <bt_id_del>
}
   2b434:	4770      	bx	lr

0002b436 <atomic_and>:
{
   2b436:	b510      	push	{r4, lr}
   2b438:	4603      	mov	r3, r0
}
   2b43a:	f3bf 8f5b 	dmb	ish
   2b43e:	e853 0f00 	ldrex	r0, [r3]
   2b442:	ea00 0201 	and.w	r2, r0, r1
   2b446:	e843 2400 	strex	r4, r2, [r3]
   2b44a:	2c00      	cmp	r4, #0
   2b44c:	d1f7      	bne.n	2b43e <atomic_and+0x8>
   2b44e:	f3bf 8f5b 	dmb	ish
   2b452:	bd10      	pop	{r4, pc}

0002b454 <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2b454:	f7ec babc 	b.w	179d0 <bt_le_scan_set_enable_legacy>

0002b458 <sys_slist_find_and_remove>:
	return list->head;
   2b458:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b45a:	2200      	movs	r2, #0
   2b45c:	b90b      	cbnz	r3, 2b462 <sys_slist_find_and_remove+0xa>
   2b45e:	4618      	mov	r0, r3
   2b460:	4770      	bx	lr
   2b462:	428b      	cmp	r3, r1
   2b464:	d110      	bne.n	2b488 <sys_slist_find_and_remove+0x30>
	return node->next;
   2b466:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b468:	b942      	cbnz	r2, 2b47c <sys_slist_find_and_remove+0x24>
   2b46a:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2b46c:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b46e:	4291      	cmp	r1, r2
   2b470:	d100      	bne.n	2b474 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2b472:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2b474:	2300      	movs	r3, #0
   2b476:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b478:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2b47a:	4770      	bx	lr
	parent->next = child;
   2b47c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b47e:	6843      	ldr	r3, [r0, #4]
   2b480:	4299      	cmp	r1, r3
	list->tail = node;
   2b482:	bf08      	it	eq
   2b484:	6042      	streq	r2, [r0, #4]
}
   2b486:	e7f5      	b.n	2b474 <sys_slist_find_and_remove+0x1c>
	return node->next;
   2b488:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b48a:	681b      	ldr	r3, [r3, #0]
   2b48c:	e7e6      	b.n	2b45c <sys_slist_find_and_remove+0x4>

0002b48e <atomic_and>:
{
   2b48e:	b510      	push	{r4, lr}
   2b490:	4603      	mov	r3, r0
}
   2b492:	f3bf 8f5b 	dmb	ish
   2b496:	e853 0f00 	ldrex	r0, [r3]
   2b49a:	ea00 0201 	and.w	r2, r0, r1
   2b49e:	e843 2400 	strex	r4, r2, [r3]
   2b4a2:	2c00      	cmp	r4, #0
   2b4a4:	d1f7      	bne.n	2b496 <atomic_and+0x8>
   2b4a6:	f3bf 8f5b 	dmb	ish
   2b4aa:	bd10      	pop	{r4, pc}

0002b4ac <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b4ac:	f3bf 8f5b 	dmb	ish
   2b4b0:	6800      	ldr	r0, [r0, #0]
   2b4b2:	f3bf 8f5b 	dmb	ish
}
   2b4b6:	4770      	bx	lr

0002b4b8 <tx_complete_work>:
	tx_notify(conn);
   2b4b8:	3828      	subs	r0, #40	; 0x28
   2b4ba:	f7ec be5b 	b.w	18174 <tx_notify>

0002b4be <bt_conn_reset_rx_state>:
{
   2b4be:	b510      	push	{r4, lr}
   2b4c0:	4604      	mov	r4, r0
	if (!conn->rx) {
   2b4c2:	6900      	ldr	r0, [r0, #16]
   2b4c4:	b118      	cbz	r0, 2b4ce <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2b4c6:	f7f3 fccb 	bl	1ee60 <net_buf_unref>
	conn->rx = NULL;
   2b4ca:	2300      	movs	r3, #0
   2b4cc:	6123      	str	r3, [r4, #16]
}
   2b4ce:	bd10      	pop	{r4, pc}

0002b4d0 <conn_lookup_handle>:
{
   2b4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b4d4:	4607      	mov	r7, r0
   2b4d6:	460e      	mov	r6, r1
   2b4d8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2b4da:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2b4dc:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2b4e0:	42b4      	cmp	r4, r6
   2b4e2:	d103      	bne.n	2b4ec <conn_lookup_handle+0x1c>
	return NULL;
   2b4e4:	2300      	movs	r3, #0
}
   2b4e6:	4618      	mov	r0, r3
   2b4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2b4ec:	fb09 7004 	mla	r0, r9, r4, r7
   2b4f0:	f7ed f8a2 	bl	18638 <bt_conn_ref>
   2b4f4:	4603      	mov	r3, r0
		if (!conn) {
   2b4f6:	b158      	cbz	r0, 2b510 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2b4f8:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2b4fa:	2d01      	cmp	r5, #1
   2b4fc:	d002      	beq.n	2b504 <conn_lookup_handle+0x34>
   2b4fe:	3d07      	subs	r5, #7
   2b500:	2d01      	cmp	r5, #1
   2b502:	d803      	bhi.n	2b50c <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2b504:	881a      	ldrh	r2, [r3, #0]
   2b506:	4542      	cmp	r2, r8
   2b508:	d0ed      	beq.n	2b4e6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2b50a:	4618      	mov	r0, r3
   2b50c:	f7ed f8c0 	bl	18690 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2b510:	3401      	adds	r4, #1
   2b512:	e7e5      	b.n	2b4e0 <conn_lookup_handle+0x10>

0002b514 <bt_conn_connected>:
{
   2b514:	b510      	push	{r4, lr}
   2b516:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2b518:	f7ed fe96 	bl	19248 <bt_l2cap_connected>
	notify_connected(conn);
   2b51c:	4620      	mov	r0, r4
}
   2b51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2b522:	f7ec bdf9 	b.w	18118 <notify_connected>

0002b526 <bt_conn_le_start_encryption>:
{
   2b526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b52a:	4682      	mov	sl, r0
   2b52c:	4689      	mov	r9, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2b52e:	f242 0019 	movw	r0, #8217	; 0x2019
   2b532:	211c      	movs	r1, #28
{
   2b534:	9e08      	ldr	r6, [sp, #32]
   2b536:	4690      	mov	r8, r2
   2b538:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2b53a:	f7ea fe5f 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b53e:	4605      	mov	r5, r0
   2b540:	b340      	cbz	r0, 2b594 <bt_conn_le_start_encryption+0x6e>
	return net_buf_simple_add(&buf->b, len);
   2b542:	211c      	movs	r1, #28
   2b544:	300c      	adds	r0, #12
   2b546:	f7f3 fd91 	bl	1f06c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b54a:	f8ba 3000 	ldrh.w	r3, [sl]
   2b54e:	4604      	mov	r4, r0
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2b550:	2208      	movs	r2, #8
	cp->handle = sys_cpu_to_le16(conn->handle);
   2b552:	f820 3b02 	strh.w	r3, [r0], #2
	memcpy(&cp->rand, rand, sizeof(cp->rand));
   2b556:	4649      	mov	r1, r9
   2b558:	f7ff fd4d 	bl	2aff6 <memcpy>
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2b55c:	2202      	movs	r2, #2
   2b55e:	4641      	mov	r1, r8
   2b560:	f104 000a 	add.w	r0, r4, #10
	memcpy(cp->ltk, ltk, len);
   2b564:	340c      	adds	r4, #12
	memcpy(&cp->ediv, ediv, sizeof(cp->ediv));
   2b566:	f7ff fd46 	bl	2aff6 <memcpy>
	memcpy(cp->ltk, ltk, len);
   2b56a:	4632      	mov	r2, r6
   2b56c:	4639      	mov	r1, r7
   2b56e:	4620      	mov	r0, r4
   2b570:	f7ff fd41 	bl	2aff6 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2b574:	2e0f      	cmp	r6, #15
   2b576:	d805      	bhi.n	2b584 <bt_conn_le_start_encryption+0x5e>
		(void)memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
   2b578:	f1c6 0210 	rsb	r2, r6, #16
   2b57c:	2100      	movs	r1, #0
   2b57e:	19a0      	adds	r0, r4, r6
   2b580:	f7ff fd44 	bl	2b00c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2b584:	4629      	mov	r1, r5
   2b586:	2200      	movs	r2, #0
}
   2b588:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2b58c:	f242 0019 	movw	r0, #8217	; 0x2019
   2b590:	f7ea be7e 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b594:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002b59c <bt_conn_set_security>:
{
   2b59c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2b59e:	7b43      	ldrb	r3, [r0, #13]
   2b5a0:	2b07      	cmp	r3, #7
{
   2b5a2:	4604      	mov	r4, r0
   2b5a4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2b5a6:	d126      	bne.n	2b5f6 <bt_conn_set_security+0x5a>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2b5a8:	7a43      	ldrb	r3, [r0, #9]
   2b5aa:	428b      	cmp	r3, r1
   2b5ac:	d219      	bcs.n	2b5e2 <bt_conn_set_security+0x46>
   2b5ae:	7a83      	ldrb	r3, [r0, #10]
   2b5b0:	428b      	cmp	r3, r1
   2b5b2:	d216      	bcs.n	2b5e2 <bt_conn_set_security+0x46>
	if (val) {
   2b5b4:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2b5b6:	f100 0004 	add.w	r0, r0, #4
   2b5ba:	d514      	bpl.n	2b5e6 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b5bc:	f3bf 8f5b 	dmb	ish
   2b5c0:	e850 3f00 	ldrex	r3, [r0]
   2b5c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   2b5c8:	e840 3200 	strex	r2, r3, [r0]
   2b5cc:	2a00      	cmp	r2, #0
   2b5ce:	d1f7      	bne.n	2b5c0 <bt_conn_set_security+0x24>
   2b5d0:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2b5d4:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2b5d8:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2b5da:	4620      	mov	r0, r4
   2b5dc:	f001 fd6f 	bl	2d0be <bt_smp_start_security>
	if (err) {
   2b5e0:	b930      	cbnz	r0, 2b5f0 <bt_conn_set_security+0x54>
		return -ENOTCONN;
   2b5e2:	2000      	movs	r0, #0
}
   2b5e4:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2b5e6:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2b5ea:	f7ff ff50 	bl	2b48e <atomic_and>
   2b5ee:	e7f1      	b.n	2b5d4 <bt_conn_set_security+0x38>
		conn->required_sec_level = conn->sec_level;
   2b5f0:	7a63      	ldrb	r3, [r4, #9]
   2b5f2:	72a3      	strb	r3, [r4, #10]
   2b5f4:	e7f6      	b.n	2b5e4 <bt_conn_set_security+0x48>
		return -ENOTCONN;
   2b5f6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b5fa:	e7f3      	b.n	2b5e4 <bt_conn_set_security+0x48>

0002b5fc <bt_conn_get_security>:
}
   2b5fc:	7a40      	ldrb	r0, [r0, #9]
   2b5fe:	4770      	bx	lr

0002b600 <bt_conn_is_peer_addr_le>:
{
   2b600:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2b602:	7a03      	ldrb	r3, [r0, #8]
   2b604:	428b      	cmp	r3, r1
{
   2b606:	4604      	mov	r4, r0
   2b608:	4615      	mov	r5, r2
	if (id != conn->id) {
   2b60a:	d115      	bne.n	2b638 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2b60c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2b610:	2207      	movs	r2, #7
   2b612:	4628      	mov	r0, r5
   2b614:	f7ff fcc8 	bl	2afa8 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   2b618:	b180      	cbz	r0, 2b63c <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2b61a:	78e3      	ldrb	r3, [r4, #3]
   2b61c:	2207      	movs	r2, #7
   2b61e:	b943      	cbnz	r3, 2b632 <bt_conn_is_peer_addr_le+0x32>
   2b620:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2b624:	4628      	mov	r0, r5
   2b626:	f7ff fcbf 	bl	2afa8 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   2b62a:	fab0 f080 	clz	r0, r0
   2b62e:	0940      	lsrs	r0, r0, #5
}
   2b630:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   2b632:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2b636:	e7f5      	b.n	2b624 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2b638:	2000      	movs	r0, #0
   2b63a:	e7f9      	b.n	2b630 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2b63c:	2001      	movs	r0, #1
   2b63e:	e7f7      	b.n	2b630 <bt_conn_is_peer_addr_le+0x30>

0002b640 <bt_conn_get_dst>:
}
   2b640:	3090      	adds	r0, #144	; 0x90
   2b642:	4770      	bx	lr

0002b644 <bt_conn_disconnect>:
{
   2b644:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b646:	7883      	ldrb	r3, [r0, #2]
   2b648:	2b01      	cmp	r3, #1
{
   2b64a:	4604      	mov	r4, r0
   2b64c:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2b64e:	d103      	bne.n	2b658 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2b650:	2100      	movs	r1, #0
   2b652:	3090      	adds	r0, #144	; 0x90
   2b654:	f7ed fbd2 	bl	18dfc <bt_le_set_auto_conn>
	switch (conn->state) {
   2b658:	7b63      	ldrb	r3, [r4, #13]
   2b65a:	3b02      	subs	r3, #2
   2b65c:	2b06      	cmp	r3, #6
   2b65e:	d825      	bhi.n	2b6ac <bt_conn_disconnect+0x68>
   2b660:	e8df f003 	tbb	[pc, r3]
   2b664:	24242404 	.word	0x24242404
   2b668:	160e      	.short	0x160e
   2b66a:	0c          	.byte	0x0c
   2b66b:	00          	.byte	0x00
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b66c:	4620      	mov	r0, r4
		conn->err = reason;
   2b66e:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2b670:	2100      	movs	r1, #0
   2b672:	f7ed f835 	bl	186e0 <bt_conn_set_state>
			bt_le_scan_update(false);
   2b676:	2000      	movs	r0, #0
   2b678:	f7ec fa36 	bl	17ae8 <bt_le_scan_update>
{
   2b67c:	2000      	movs	r0, #0
}
   2b67e:	bd38      	pop	{r3, r4, r5, pc}
			k_work_cancel_delayable(&conn->deferred_work);
   2b680:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2b684:	f7f9 fba8 	bl	24dd8 <k_work_cancel_delayable>
}
   2b688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2b68c:	f7ea bf0a 	b.w	164a4 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2b690:	8820      	ldrh	r0, [r4, #0]
   2b692:	4629      	mov	r1, r5
   2b694:	f7ff fdf3 	bl	2b27e <bt_hci_disconnect>
	if (err) {
   2b698:	2800      	cmp	r0, #0
   2b69a:	d1f0      	bne.n	2b67e <bt_conn_disconnect+0x3a>
	if (conn->state == BT_CONN_CONNECTED) {
   2b69c:	7b63      	ldrb	r3, [r4, #13]
   2b69e:	2b07      	cmp	r3, #7
   2b6a0:	d1ec      	bne.n	2b67c <bt_conn_disconnect+0x38>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   2b6a2:	2108      	movs	r1, #8
   2b6a4:	4620      	mov	r0, r4
   2b6a6:	f7ed f81b 	bl	186e0 <bt_conn_set_state>
   2b6aa:	e7e7      	b.n	2b67c <bt_conn_disconnect+0x38>
		return -ENOTCONN;
   2b6ac:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b6b0:	e7e5      	b.n	2b67e <bt_conn_disconnect+0x3a>

0002b6b2 <bt_conn_le_conn_update>:
{
   2b6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b6b4:	4607      	mov	r7, r0
   2b6b6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2b6b8:	f242 0013 	movw	r0, #8211	; 0x2013
   2b6bc:	210e      	movs	r1, #14
   2b6be:	f7ea fd9d 	bl	161fc <bt_hci_cmd_create>
	if (!buf) {
   2b6c2:	4606      	mov	r6, r0
   2b6c4:	b1d0      	cbz	r0, 2b6fc <bt_conn_le_conn_update+0x4a>
   2b6c6:	210e      	movs	r1, #14
   2b6c8:	300c      	adds	r0, #12
   2b6ca:	f7f3 fccf 	bl	1f06c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   2b6ce:	220e      	movs	r2, #14
   2b6d0:	4604      	mov	r4, r0
   2b6d2:	2100      	movs	r1, #0
   2b6d4:	f7ff fc9a 	bl	2b00c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2b6d8:	883b      	ldrh	r3, [r7, #0]
   2b6da:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2b6dc:	882b      	ldrh	r3, [r5, #0]
   2b6de:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2b6e0:	886b      	ldrh	r3, [r5, #2]
   2b6e2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2b6e4:	88ab      	ldrh	r3, [r5, #4]
   2b6e6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2b6e8:	88eb      	ldrh	r3, [r5, #6]
   2b6ea:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b6ec:	4631      	mov	r1, r6
   2b6ee:	2200      	movs	r2, #0
}
   2b6f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2b6f4:	f242 0013 	movw	r0, #8211	; 0x2013
   2b6f8:	f7ea bdca 	b.w	16290 <bt_hci_cmd_send_sync>
}
   2b6fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2b700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b702 <l2cap_connected>:
}
   2b702:	4770      	bx	lr

0002b704 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   2b704:	4770      	bx	lr

0002b706 <bt_l2cap_chan_del>:
{
   2b706:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2b708:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2b70c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2b70e:	b123      	cbz	r3, 2b71a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2b710:	686b      	ldr	r3, [r5, #4]
   2b712:	b103      	cbz	r3, 2b716 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2b714:	4798      	blx	r3
	chan->conn = NULL;
   2b716:	2300      	movs	r3, #0
   2b718:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2b71a:	68e3      	ldr	r3, [r4, #12]
   2b71c:	b10b      	cbz	r3, 2b722 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2b71e:	4620      	mov	r0, r4
   2b720:	4798      	blx	r3
	if (ops->released) {
   2b722:	6a2b      	ldr	r3, [r5, #32]
   2b724:	b11b      	cbz	r3, 2b72e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2b726:	4620      	mov	r0, r4
}
   2b728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2b72c:	4718      	bx	r3
}
   2b72e:	bd70      	pop	{r4, r5, r6, pc}

0002b730 <bt_l2cap_disconnected>:
{
   2b730:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2b732:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b734:	b130      	cbz	r0, 2b744 <bt_l2cap_disconnected+0x14>
	return node->next;
   2b736:	f850 4908 	ldr.w	r4, [r0], #-8
   2b73a:	b104      	cbz	r4, 2b73e <bt_l2cap_disconnected+0xe>
   2b73c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2b73e:	f7ff ffe2 	bl	2b706 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b742:	b904      	cbnz	r4, 2b746 <bt_l2cap_disconnected+0x16>
}
   2b744:	bd38      	pop	{r3, r4, r5, pc}
   2b746:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b748:	b12d      	cbz	r5, 2b756 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   2b74a:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b74c:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   2b74e:	f7ff ffda 	bl	2b706 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b752:	462c      	mov	r4, r5
   2b754:	e7f7      	b.n	2b746 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   2b756:	4620      	mov	r0, r4
}
   2b758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   2b75c:	f7ff bfd3 	b.w	2b706 <bt_l2cap_chan_del>

0002b760 <bt_l2cap_security_changed>:
{
   2b760:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   2b762:	6d43      	ldr	r3, [r0, #84]	; 0x54
   2b764:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b766:	b1bb      	cbz	r3, 2b798 <bt_l2cap_security_changed+0x38>
   2b768:	4618      	mov	r0, r3
	return node->next;
   2b76a:	f850 4908 	ldr.w	r4, [r0], #-8
   2b76e:	b104      	cbz	r4, 2b772 <bt_l2cap_security_changed+0x12>
   2b770:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2b772:	f853 3c04 	ldr.w	r3, [r3, #-4]
   2b776:	689b      	ldr	r3, [r3, #8]
   2b778:	b10b      	cbz	r3, 2b77e <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   2b77a:	4629      	mov	r1, r5
   2b77c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b77e:	b15c      	cbz	r4, 2b798 <bt_l2cap_security_changed+0x38>
   2b780:	4620      	mov	r0, r4
   2b782:	68a4      	ldr	r4, [r4, #8]
   2b784:	6843      	ldr	r3, [r0, #4]
   2b786:	b124      	cbz	r4, 2b792 <bt_l2cap_security_changed+0x32>
		if (chan->ops->encrypt_change) {
   2b788:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2b78a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2b78c:	2b00      	cmp	r3, #0
   2b78e:	d1f4      	bne.n	2b77a <bt_l2cap_security_changed+0x1a>
   2b790:	e7f6      	b.n	2b780 <bt_l2cap_security_changed+0x20>
   2b792:	689b      	ldr	r3, [r3, #8]
   2b794:	2b00      	cmp	r3, #0
   2b796:	d1f0      	bne.n	2b77a <bt_l2cap_security_changed+0x1a>
}
   2b798:	bd38      	pop	{r3, r4, r5, pc}

0002b79a <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2b79a:	3104      	adds	r1, #4
   2b79c:	f7ed b8bc 	b.w	18918 <bt_conn_create_pdu_timeout>

0002b7a0 <bt_l2cap_send_cb>:
{
   2b7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7a4:	4614      	mov	r4, r2
   2b7a6:	4605      	mov	r5, r0
   2b7a8:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2b7aa:	f102 000c 	add.w	r0, r2, #12
   2b7ae:	2104      	movs	r1, #4
   2b7b0:	461e      	mov	r6, r3
   2b7b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2b7b6:	f7f3 fc09 	bl	1efcc <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b7ba:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   2b7bc:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2b7be:	3a04      	subs	r2, #4
   2b7c0:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b7c2:	4643      	mov	r3, r8
   2b7c4:	4632      	mov	r2, r6
   2b7c6:	4621      	mov	r1, r4
   2b7c8:	4628      	mov	r0, r5
}
   2b7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2b7ce:	f7ec bea7 	b.w	18520 <bt_conn_send_cb>

0002b7d2 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2b7d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b7d4:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2b7d6:	2202      	movs	r2, #2
   2b7d8:	2001      	movs	r0, #1
   2b7da:	f7ed fd17 	bl	1920c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2b7de:	4604      	mov	r4, r0
   2b7e0:	b198      	cbz	r0, 2b80a <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2b7e2:	2102      	movs	r1, #2
   2b7e4:	300c      	adds	r0, #12
   2b7e6:	f7f3 fc41 	bl	1f06c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2b7ea:	2300      	movs	r3, #0
   2b7ec:	7003      	strb	r3, [r0, #0]
   2b7ee:	7043      	strb	r3, [r0, #1]
   2b7f0:	4622      	mov	r2, r4
   2b7f2:	9300      	str	r3, [sp, #0]
   2b7f4:	2105      	movs	r1, #5
   2b7f6:	4628      	mov	r0, r5
   2b7f8:	f7ff ffd2 	bl	2b7a0 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2b7fc:	b128      	cbz	r0, 2b80a <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2b7fe:	4620      	mov	r0, r4
}
   2b800:	b003      	add	sp, #12
   2b802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2b806:	f7f3 bb2b 	b.w	1ee60 <net_buf_unref>
}
   2b80a:	b003      	add	sp, #12
   2b80c:	bd30      	pop	{r4, r5, pc}

0002b80e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2b80e:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b810:	b130      	cbz	r0, 2b820 <bt_l2cap_le_lookup_tx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2b812:	8b83      	ldrh	r3, [r0, #28]
   2b814:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b816:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2b81a:	d001      	beq.n	2b820 <bt_l2cap_le_lookup_tx_cid+0x12>
	return node->next;
   2b81c:	6880      	ldr	r0, [r0, #8]
   2b81e:	e7f7      	b.n	2b810 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2b820:	4770      	bx	lr

0002b822 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2b822:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b824:	b130      	cbz	r0, 2b834 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b826:	8983      	ldrh	r3, [r0, #12]
   2b828:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2b82a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2b82e:	d001      	beq.n	2b834 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   2b830:	6880      	ldr	r0, [r0, #8]
   2b832:	e7f7      	b.n	2b824 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2b834:	4770      	bx	lr

0002b836 <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2b836:	4770      	bx	lr

0002b838 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2b838:	4603      	mov	r3, r0
	return list->head;
   2b83a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2b83c:	b128      	cbz	r0, 2b84a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b83e:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2b840:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2b842:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2b844:	4288      	cmp	r0, r1
	list->tail = node;
   2b846:	bf08      	it	eq
   2b848:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2b84a:	4770      	bx	lr

0002b84c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2b84c:	4603      	mov	r3, r0
	size_t bytes = 0;
   2b84e:	2000      	movs	r0, #0

	while (buf) {
   2b850:	b903      	cbnz	r3, 2b854 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2b852:	4770      	bx	lr
		bytes += buf->len;
   2b854:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2b856:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2b858:	4410      	add	r0, r2
		buf = buf->frags;
   2b85a:	e7f9      	b.n	2b850 <net_buf_frags_len+0x4>

0002b85c <attr_read_type_cb>:
{
   2b85c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2b85e:	68d4      	ldr	r4, [r2, #12]
   2b860:	7823      	ldrb	r3, [r4, #0]
   2b862:	3102      	adds	r1, #2
   2b864:	b913      	cbnz	r3, 2b86c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2b866:	7021      	strb	r1, [r4, #0]
	return true;
   2b868:	2001      	movs	r0, #1
}
   2b86a:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2b86c:	428b      	cmp	r3, r1
   2b86e:	d0fb      	beq.n	2b868 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2b870:	8a03      	ldrh	r3, [r0, #16]
   2b872:	3b02      	subs	r3, #2
   2b874:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2b876:	2000      	movs	r0, #0
   2b878:	6110      	str	r0, [r2, #16]
		return false;
   2b87a:	e7f6      	b.n	2b86a <attr_read_type_cb+0xe>

0002b87c <att_prepare_write_req>:
}
   2b87c:	2006      	movs	r0, #6
   2b87e:	4770      	bx	lr

0002b880 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b880:	f3bf 8f5b 	dmb	ish
   2b884:	6800      	ldr	r0, [r0, #0]
   2b886:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2b88a:	4108      	asrs	r0, r1
}
   2b88c:	f000 0001 	and.w	r0, r0, #1
   2b890:	4770      	bx	lr

0002b892 <att_notify_mult>:
{
   2b892:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2b894:	6803      	ldr	r3, [r0, #0]
   2b896:	8a0a      	ldrh	r2, [r1, #16]
   2b898:	6818      	ldr	r0, [r3, #0]
   2b89a:	68c9      	ldr	r1, [r1, #12]
   2b89c:	f7f1 f812 	bl	1c8c4 <bt_gatt_mult_notification>
}
   2b8a0:	2000      	movs	r0, #0
   2b8a2:	bd08      	pop	{r3, pc}

0002b8a4 <att_notify>:
{
   2b8a4:	b538      	push	{r3, r4, r5, lr}
   2b8a6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b8a8:	f101 000c 	add.w	r0, r1, #12
   2b8ac:	460c      	mov	r4, r1
   2b8ae:	f001 fda6 	bl	2d3fe <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2b8b2:	682d      	ldr	r5, [r5, #0]
   2b8b4:	8a23      	ldrh	r3, [r4, #16]
   2b8b6:	68e2      	ldr	r2, [r4, #12]
   2b8b8:	4601      	mov	r1, r0
   2b8ba:	6828      	ldr	r0, [r5, #0]
   2b8bc:	f001 f94a 	bl	2cb54 <bt_gatt_notification>
}
   2b8c0:	2000      	movs	r0, #0
   2b8c2:	bd38      	pop	{r3, r4, r5, pc}

0002b8c4 <att_chan_mtu_updated>:
{
   2b8c4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2b8c6:	6805      	ldr	r5, [r0, #0]
	return list->head;
   2b8c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b8ca:	b352      	cbz	r2, 2b922 <att_chan_mtu_updated+0x5e>
	return node->next;
   2b8cc:	6813      	ldr	r3, [r2, #0]
   2b8ce:	b103      	cbz	r3, 2b8d2 <att_chan_mtu_updated+0xe>
   2b8d0:	3bf0      	subs	r3, #240	; 0xf0
   2b8d2:	f1a2 04f0 	sub.w	r4, r2, #240	; 0xf0
   2b8d6:	2200      	movs	r2, #0
   2b8d8:	4611      	mov	r1, r2
   2b8da:	e000      	b.n	2b8de <att_chan_mtu_updated+0x1a>
   2b8dc:	3bf0      	subs	r3, #240	; 0xf0
		if (chan == updated_chan) {
   2b8de:	4284      	cmp	r4, r0
   2b8e0:	d007      	beq.n	2b8f2 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b8e2:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b8e4:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b8e6:	42b1      	cmp	r1, r6
   2b8e8:	bf38      	it	cc
   2b8ea:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b8ec:	42a2      	cmp	r2, r4
   2b8ee:	bf38      	it	cc
   2b8f0:	4622      	movcc	r2, r4
   2b8f2:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b8f4:	b12b      	cbz	r3, 2b902 <att_chan_mtu_updated+0x3e>
   2b8f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2b8fa:	2b00      	cmp	r3, #0
   2b8fc:	d1ee      	bne.n	2b8dc <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2b8fe:	4284      	cmp	r4, r0
   2b900:	d1ef      	bne.n	2b8e2 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b902:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2b904:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b906:	428b      	cmp	r3, r1
   2b908:	d801      	bhi.n	2b90e <att_chan_mtu_updated+0x4a>
   2b90a:	4290      	cmp	r0, r2
   2b90c:	d90b      	bls.n	2b926 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b90e:	4282      	cmp	r2, r0
   2b910:	bf38      	it	cc
   2b912:	4602      	movcc	r2, r0
   2b914:	4299      	cmp	r1, r3
   2b916:	6828      	ldr	r0, [r5, #0]
   2b918:	bf38      	it	cc
   2b91a:	4619      	movcc	r1, r3
}
   2b91c:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b91e:	f7f1 b88b 	b.w	1ca38 <bt_gatt_att_max_mtu_changed>
   2b922:	4611      	mov	r1, r2
   2b924:	e7ed      	b.n	2b902 <att_chan_mtu_updated+0x3e>
}
   2b926:	bc70      	pop	{r4, r5, r6}
   2b928:	4770      	bx	lr

0002b92a <write_cb>:
{
   2b92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b92c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b92e:	4601      	mov	r1, r0
{
   2b930:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b932:	f44f 7295 	mov.w	r2, #298	; 0x12a
   2b936:	6820      	ldr	r0, [r4, #0]
   2b938:	f001 f84e 	bl	2c9d8 <bt_gatt_check_perm>
   2b93c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2b93e:	bb00      	cbnz	r0, 2b982 <write_cb+0x58>
	if (!data->req) {
   2b940:	7a23      	ldrb	r3, [r4, #8]
   2b942:	b1b3      	cbz	r3, 2b972 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2b944:	f1a3 0218 	sub.w	r2, r3, #24
   2b948:	4253      	negs	r3, r2
   2b94a:	4153      	adcs	r3, r2
   2b94c:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2b94e:	9301      	str	r3, [sp, #4]
   2b950:	8a63      	ldrh	r3, [r4, #18]
   2b952:	9300      	str	r3, [sp, #0]
   2b954:	68ae      	ldr	r6, [r5, #8]
   2b956:	8a23      	ldrh	r3, [r4, #16]
   2b958:	68e2      	ldr	r2, [r4, #12]
   2b95a:	6820      	ldr	r0, [r4, #0]
   2b95c:	4629      	mov	r1, r5
   2b95e:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   2b960:	2800      	cmp	r0, #0
   2b962:	db08      	blt.n	2b976 <write_cb+0x4c>
   2b964:	8a23      	ldrh	r3, [r4, #16]
   2b966:	4298      	cmp	r0, r3
   2b968:	d10e      	bne.n	2b988 <write_cb+0x5e>
	data->err = 0U;
   2b96a:	2300      	movs	r3, #0
   2b96c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b96e:	2001      	movs	r0, #1
   2b970:	e008      	b.n	2b984 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b972:	2302      	movs	r3, #2
   2b974:	e7eb      	b.n	2b94e <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   2b976:	f110 0fff 	cmn.w	r0, #255	; 0xff
   2b97a:	d305      	bcc.n	2b988 <write_cb+0x5e>
		return -err;
   2b97c:	4240      	negs	r0, r0
   2b97e:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   2b980:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   2b982:	2000      	movs	r0, #0
}
   2b984:	b002      	add	sp, #8
   2b986:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   2b988:	200e      	movs	r0, #14
   2b98a:	e7f9      	b.n	2b980 <write_cb+0x56>

0002b98c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2b98c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b98e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b992:	2300      	movs	r3, #0
   2b994:	9300      	str	r3, [sp, #0]
   2b996:	461a      	mov	r2, r3
   2b998:	f7ef fc36 	bl	1b208 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2b99c:	b005      	add	sp, #20
   2b99e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9a2 <find_info_cb>:
{
   2b9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2b9a4:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2b9a6:	6817      	ldr	r7, [r2, #0]
{
   2b9a8:	4605      	mov	r5, r0
   2b9aa:	460e      	mov	r6, r1
   2b9ac:	4614      	mov	r4, r2
	if (!data->rsp) {
   2b9ae:	b963      	cbnz	r3, 2b9ca <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2b9b0:	6850      	ldr	r0, [r2, #4]
   2b9b2:	2101      	movs	r1, #1
   2b9b4:	300c      	adds	r0, #12
   2b9b6:	f7f3 fb59 	bl	1f06c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b9ba:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b9bc:	682b      	ldr	r3, [r5, #0]
   2b9be:	781b      	ldrb	r3, [r3, #0]
   2b9c0:	2b00      	cmp	r3, #0
   2b9c2:	bf14      	ite	ne
   2b9c4:	2302      	movne	r3, #2
   2b9c6:	2301      	moveq	r3, #1
   2b9c8:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2b9ca:	68a3      	ldr	r3, [r4, #8]
   2b9cc:	781b      	ldrb	r3, [r3, #0]
   2b9ce:	2b01      	cmp	r3, #1
   2b9d0:	d003      	beq.n	2b9da <find_info_cb+0x38>
   2b9d2:	2b02      	cmp	r3, #2
   2b9d4:	d019      	beq.n	2ba0a <find_info_cb+0x68>
   2b9d6:	2000      	movs	r0, #0
   2b9d8:	e016      	b.n	2ba08 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b9da:	682b      	ldr	r3, [r5, #0]
   2b9dc:	781b      	ldrb	r3, [r3, #0]
   2b9de:	2b00      	cmp	r3, #0
   2b9e0:	d1f9      	bne.n	2b9d6 <find_info_cb+0x34>
   2b9e2:	6860      	ldr	r0, [r4, #4]
   2b9e4:	2104      	movs	r1, #4
   2b9e6:	300c      	adds	r0, #12
   2b9e8:	f7f3 fb40 	bl	1f06c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b9ec:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b9ee:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b9f0:	682a      	ldr	r2, [r5, #0]
   2b9f2:	68e3      	ldr	r3, [r4, #12]
   2b9f4:	8852      	ldrh	r2, [r2, #2]
   2b9f6:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b9f8:	6863      	ldr	r3, [r4, #4]
   2b9fa:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2b9fc:	8a1b      	ldrh	r3, [r3, #16]
   2b9fe:	1ac0      	subs	r0, r0, r3
   2ba00:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2ba02:	bf94      	ite	ls
   2ba04:	2000      	movls	r0, #0
   2ba06:	2001      	movhi	r0, #1
}
   2ba08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ba0a:	682b      	ldr	r3, [r5, #0]
   2ba0c:	781b      	ldrb	r3, [r3, #0]
   2ba0e:	2b02      	cmp	r3, #2
   2ba10:	d1e1      	bne.n	2b9d6 <find_info_cb+0x34>
   2ba12:	6860      	ldr	r0, [r4, #4]
   2ba14:	2112      	movs	r1, #18
   2ba16:	300c      	adds	r0, #12
   2ba18:	f7f3 fb28 	bl	1f06c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ba1c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2ba1e:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2ba20:	6829      	ldr	r1, [r5, #0]
   2ba22:	68e0      	ldr	r0, [r4, #12]
   2ba24:	2210      	movs	r2, #16
   2ba26:	3101      	adds	r1, #1
   2ba28:	3002      	adds	r0, #2
   2ba2a:	f7ff fae4 	bl	2aff6 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2ba2e:	6863      	ldr	r3, [r4, #4]
   2ba30:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2ba32:	8a1b      	ldrh	r3, [r3, #16]
   2ba34:	1ac0      	subs	r0, r0, r3
   2ba36:	2812      	cmp	r0, #18
   2ba38:	e7e3      	b.n	2ba02 <find_info_cb+0x60>

0002ba3a <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ba3a:	68d0      	ldr	r0, [r2, #12]
   2ba3c:	7803      	ldrb	r3, [r0, #0]
   2ba3e:	3104      	adds	r1, #4
   2ba40:	b913      	cbnz	r3, 2ba48 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ba42:	7001      	strb	r1, [r0, #0]
	return true;
   2ba44:	2001      	movs	r0, #1
   2ba46:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2ba48:	428b      	cmp	r3, r1
   2ba4a:	d0fb      	beq.n	2ba44 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2ba4c:	6891      	ldr	r1, [r2, #8]
   2ba4e:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2ba50:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2ba52:	3b04      	subs	r3, #4
   2ba54:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   2ba56:	6110      	str	r0, [r2, #16]
}
   2ba58:	4770      	bx	lr

0002ba5a <chan_req_send>:
{
   2ba5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ba5c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ba5e:	6888      	ldr	r0, [r1, #8]
   2ba60:	f7ff fef4 	bl	2b84c <net_buf_frags_len>
   2ba64:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2ba66:	4283      	cmp	r3, r0
{
   2ba68:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ba6a:	d30d      	bcc.n	2ba88 <chan_req_send+0x2e>
	chan->req = req;
   2ba6c:	f8c5 109c 	str.w	r1, [r5, #156]	; 0x9c
	buf = req->buf;
   2ba70:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   2ba72:	2600      	movs	r6, #0
   2ba74:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2ba76:	4628      	mov	r0, r5
   2ba78:	4639      	mov	r1, r7
   2ba7a:	f7ed fe59 	bl	19730 <chan_send>
	if (err) {
   2ba7e:	b110      	cbz	r0, 2ba86 <chan_req_send+0x2c>
		req->buf = buf;
   2ba80:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   2ba82:	f8c5 609c 	str.w	r6, [r5, #156]	; 0x9c
}
   2ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ba88:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ba8c:	e7fb      	b.n	2ba86 <chan_req_send+0x2c>

0002ba8e <bt_att_chan_send_rsp>:
{
   2ba8e:	b538      	push	{r3, r4, r5, lr}
   2ba90:	4604      	mov	r4, r0
   2ba92:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2ba94:	f7ed fe4c 	bl	19730 <chan_send>
	if (err) {
   2ba98:	b130      	cbz	r0, 2baa8 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2ba9a:	4629      	mov	r1, r5
   2ba9c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
}
   2baa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2baa4:	f7f3 b9bc 	b.w	1ee20 <net_buf_put>
}
   2baa8:	bd38      	pop	{r3, r4, r5, pc}

0002baaa <process_queue>:
{
   2baaa:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   2baac:	2200      	movs	r2, #0
{
   2baae:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   2bab0:	2300      	movs	r3, #0
   2bab2:	4608      	mov	r0, r1
{
   2bab4:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2bab6:	f001 fc92 	bl	2d3de <net_buf_get>
	if (buf) {
   2baba:	4605      	mov	r5, r0
   2babc:	b158      	cbz	r0, 2bad6 <process_queue+0x2c>
	return chan_send(chan, buf);
   2babe:	4601      	mov	r1, r0
   2bac0:	4620      	mov	r0, r4
   2bac2:	f7ed fe35 	bl	19730 <chan_send>
		if (err) {
   2bac6:	4604      	mov	r4, r0
   2bac8:	b118      	cbz	r0, 2bad2 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   2baca:	4629      	mov	r1, r5
   2bacc:	4630      	mov	r0, r6
   2bace:	f002 f966 	bl	2dd9e <k_queue_prepend>
}
   2bad2:	4620      	mov	r0, r4
   2bad4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2bad6:	f06f 0401 	mvn.w	r4, #1
   2bada:	e7fa      	b.n	2bad2 <process_queue+0x28>

0002badc <att_chan_read>:
{
   2badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bae0:	4680      	mov	r8, r0
   2bae2:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2bae4:	4610      	mov	r0, r2
{
   2bae6:	4699      	mov	r9, r3
   2bae8:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2baea:	f7ff feaf 	bl	2b84c <net_buf_frags_len>
   2baee:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2baf2:	4283      	cmp	r3, r0
{
   2baf4:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2baf6:	d97a      	bls.n	2bbee <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2baf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2bafc:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2bafe:	4630      	mov	r0, r6
   2bb00:	f7f3 fa06 	bl	1ef10 <net_buf_frag_last>
	size_t len, total = 0;
   2bb04:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2bb08:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bb0a:	4630      	mov	r0, r6
   2bb0c:	f7ff fe9e 	bl	2b84c <net_buf_frags_len>
   2bb10:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   2bb14:	f105 070c 	add.w	r7, r5, #12
   2bb18:	1a24      	subs	r4, r4, r0
   2bb1a:	4638      	mov	r0, r7
   2bb1c:	f001 fc7b 	bl	2d416 <net_buf_simple_tailroom>
   2bb20:	4284      	cmp	r4, r0
   2bb22:	d211      	bcs.n	2bb48 <att_chan_read+0x6c>
   2bb24:	4630      	mov	r0, r6
   2bb26:	f7ff fe91 	bl	2b84c <net_buf_frags_len>
   2bb2a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2bb2e:	1a24      	subs	r4, r4, r0
		if (!len) {
   2bb30:	bb34      	cbnz	r4, 2bb80 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2bb32:	7ab0      	ldrb	r0, [r6, #10]
   2bb34:	f7f2 ffb2 	bl	1ea9c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2bb38:	2200      	movs	r2, #0
   2bb3a:	2300      	movs	r3, #0
   2bb3c:	f001 fc4a 	bl	2d3d4 <net_buf_alloc_fixed>
			if (!frag) {
   2bb40:	4605      	mov	r5, r0
   2bb42:	b930      	cbnz	r0, 2bb52 <att_chan_read+0x76>
	return total;
   2bb44:	4657      	mov	r7, sl
   2bb46:	e02c      	b.n	2bba2 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2bb48:	4638      	mov	r0, r7
   2bb4a:	f001 fc64 	bl	2d416 <net_buf_simple_tailroom>
   2bb4e:	4604      	mov	r4, r0
   2bb50:	e7ee      	b.n	2bb30 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2bb52:	4601      	mov	r1, r0
   2bb54:	4630      	mov	r0, r6
   2bb56:	f7f3 fa19 	bl	1ef8c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2bb5a:	4630      	mov	r0, r6
   2bb5c:	f7ff fe76 	bl	2b84c <net_buf_frags_len>
   2bb60:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2bb64:	f105 070c 	add.w	r7, r5, #12
   2bb68:	1a24      	subs	r4, r4, r0
   2bb6a:	4638      	mov	r0, r7
   2bb6c:	f001 fc53 	bl	2d416 <net_buf_simple_tailroom>
   2bb70:	4284      	cmp	r4, r0
   2bb72:	d21a      	bcs.n	2bbaa <att_chan_read+0xce>
   2bb74:	4630      	mov	r0, r6
   2bb76:	f7ff fe69 	bl	2b84c <net_buf_frags_len>
   2bb7a:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   2bb7e:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2bb80:	68e9      	ldr	r1, [r5, #12]
   2bb82:	8a2a      	ldrh	r2, [r5, #16]
   2bb84:	f8cd 9000 	str.w	r9, [sp]
   2bb88:	f8db 7004 	ldr.w	r7, [fp, #4]
   2bb8c:	9803      	ldr	r0, [sp, #12]
   2bb8e:	440a      	add	r2, r1
   2bb90:	b2a3      	uxth	r3, r4
   2bb92:	4659      	mov	r1, fp
   2bb94:	47b8      	blx	r7
		if (read < 0) {
   2bb96:	1e07      	subs	r7, r0, #0
   2bb98:	da0c      	bge.n	2bbb4 <att_chan_read+0xd8>
				return total;
   2bb9a:	f1ba 0f00 	cmp.w	sl, #0
   2bb9e:	bf18      	it	ne
   2bba0:	4657      	movne	r7, sl
}
   2bba2:	4638      	mov	r0, r7
   2bba4:	b005      	add	sp, #20
   2bba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bbaa:	4638      	mov	r0, r7
   2bbac:	f001 fc33 	bl	2d416 <net_buf_simple_tailroom>
   2bbb0:	4604      	mov	r4, r0
   2bbb2:	e7e5      	b.n	2bb80 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2bbb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bbb6:	b993      	cbnz	r3, 2bbde <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2bbb8:	4639      	mov	r1, r7
   2bbba:	f105 000c 	add.w	r0, r5, #12
   2bbbe:	f7f3 fa55 	bl	1f06c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2bbc2:	4630      	mov	r0, r6
   2bbc4:	f7ff fe42 	bl	2b84c <net_buf_frags_len>
   2bbc8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   2bbcc:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2bbce:	4283      	cmp	r3, r0
		total += read;
   2bbd0:	44ba      	add	sl, r7
		offset += read;
   2bbd2:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2bbd6:	d9b5      	bls.n	2bb44 <att_chan_read+0x68>
   2bbd8:	42a7      	cmp	r7, r4
   2bbda:	d096      	beq.n	2bb0a <att_chan_read+0x2e>
   2bbdc:	e7b2      	b.n	2bb44 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2bbde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2bbe2:	4639      	mov	r1, r7
   2bbe4:	4628      	mov	r0, r5
   2bbe6:	4798      	blx	r3
   2bbe8:	2800      	cmp	r0, #0
   2bbea:	d1e5      	bne.n	2bbb8 <att_chan_read+0xdc>
   2bbec:	e7aa      	b.n	2bb44 <att_chan_read+0x68>
		return 0;
   2bbee:	2700      	movs	r7, #0
   2bbf0:	e7d7      	b.n	2bba2 <att_chan_read+0xc6>

0002bbf2 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   2bbf2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bbf4:	2200      	movs	r2, #0
   2bbf6:	b903      	cbnz	r3, 2bbfa <sys_slist_find_and_remove.isra.0+0x8>
   2bbf8:	4770      	bx	lr
   2bbfa:	428b      	cmp	r3, r1
   2bbfc:	d10f      	bne.n	2bc1e <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   2bbfe:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bc00:	b93a      	cbnz	r2, 2bc12 <sys_slist_find_and_remove.isra.0+0x20>
   2bc02:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   2bc04:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bc06:	4291      	cmp	r1, r2
   2bc08:	d100      	bne.n	2bc0c <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2bc0a:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2bc0c:	2300      	movs	r3, #0
   2bc0e:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bc10:	4770      	bx	lr
	parent->next = child;
   2bc12:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bc14:	6843      	ldr	r3, [r0, #4]
   2bc16:	4299      	cmp	r1, r3
	list->tail = node;
   2bc18:	bf08      	it	eq
   2bc1a:	6042      	streq	r2, [r0, #4]
}
   2bc1c:	e7f6      	b.n	2bc0c <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2bc1e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2bc20:	681b      	ldr	r3, [r3, #0]
   2bc22:	e7e8      	b.n	2bbf6 <sys_slist_find_and_remove.isra.0+0x4>

0002bc24 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   2bc24:	2006      	movs	r0, #6
   2bc26:	4770      	bx	lr

0002bc28 <read_cb>:
{
   2bc28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   2bc2a:	6816      	ldr	r6, [r2, #0]
{
   2bc2c:	4605      	mov	r5, r0
	data->err = 0x00;
   2bc2e:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2bc30:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   2bc32:	7313      	strb	r3, [r2, #12]
{
   2bc34:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2bc36:	4629      	mov	r1, r5
   2bc38:	2295      	movs	r2, #149	; 0x95
   2bc3a:	f000 fecd 	bl	2c9d8 <bt_gatt_check_perm>
   2bc3e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2bc40:	b980      	cbnz	r0, 2bc64 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2bc42:	e9cd 0000 	strd	r0, r0, [sp]
   2bc46:	4629      	mov	r1, r5
   2bc48:	88a3      	ldrh	r3, [r4, #4]
   2bc4a:	68a2      	ldr	r2, [r4, #8]
   2bc4c:	4630      	mov	r0, r6
   2bc4e:	f7ff ff45 	bl	2badc <att_chan_read>
	if (ret < 0) {
   2bc52:	2800      	cmp	r0, #0
   2bc54:	da09      	bge.n	2bc6a <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   2bc56:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   2bc5a:	bf26      	itte	cs
   2bc5c:	4240      	negcs	r0, r0
   2bc5e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2bc60:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2bc62:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2bc64:	2000      	movs	r0, #0
}
   2bc66:	b002      	add	sp, #8
   2bc68:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   2bc6a:	2001      	movs	r0, #1
   2bc6c:	e7fb      	b.n	2bc66 <read_cb+0x3e>

0002bc6e <read_vl_cb>:
{
   2bc6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2bc72:	f8d2 8000 	ldr.w	r8, [r2]
{
   2bc76:	4606      	mov	r6, r0
	data->err = 0x00;
   2bc78:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2bc7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2bc7e:	7313      	strb	r3, [r2, #12]
{
   2bc80:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2bc82:	4631      	mov	r1, r6
   2bc84:	2295      	movs	r2, #149	; 0x95
   2bc86:	f000 fea7 	bl	2c9d8 <bt_gatt_check_perm>
   2bc8a:	4605      	mov	r5, r0
   2bc8c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2bc8e:	b9e0      	cbnz	r0, 2bcca <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2bc90:	68a0      	ldr	r0, [r4, #8]
   2bc92:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   2bc96:	8a02      	ldrh	r2, [r0, #16]
   2bc98:	1a9b      	subs	r3, r3, r2
   2bc9a:	2b01      	cmp	r3, #1
   2bc9c:	dd15      	ble.n	2bcca <read_vl_cb+0x5c>
   2bc9e:	2102      	movs	r1, #2
   2bca0:	300c      	adds	r0, #12
   2bca2:	f7f3 f9e3 	bl	1f06c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2bca6:	e9cd 5500 	strd	r5, r5, [sp]
   2bcaa:	4607      	mov	r7, r0
   2bcac:	88a3      	ldrh	r3, [r4, #4]
   2bcae:	68a2      	ldr	r2, [r4, #8]
   2bcb0:	4631      	mov	r1, r6
   2bcb2:	4640      	mov	r0, r8
   2bcb4:	f7ff ff12 	bl	2badc <att_chan_read>
	if (read < 0) {
   2bcb8:	1e03      	subs	r3, r0, #0
   2bcba:	da0a      	bge.n	2bcd2 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   2bcbc:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2bcc0:	bf26      	itte	cs
   2bcc2:	425b      	negcs	r3, r3
   2bcc4:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2bcc6:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   2bcc8:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   2bcca:	2000      	movs	r0, #0
}
   2bccc:	b002      	add	sp, #8
   2bcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   2bcd2:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   2bcd4:	2001      	movs	r0, #1
   2bcd6:	e7f9      	b.n	2bccc <read_vl_cb+0x5e>

0002bcd8 <bt_att_sent>:
{
   2bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bcda:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2bcdc:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bcde:	f100 0394 	add.w	r3, r0, #148	; 0x94
	struct bt_att *att = chan->att;
   2bce2:	f850 4c04 	ldr.w	r4, [r0, #-4]
   2bce6:	f3bf 8f5b 	dmb	ish
   2bcea:	e853 1f00 	ldrex	r1, [r3]
   2bcee:	f021 0110 	bic.w	r1, r1, #16
   2bcf2:	e843 1200 	strex	r2, r1, [r3]
   2bcf6:	2a00      	cmp	r2, #0
   2bcf8:	d1f7      	bne.n	2bcea <bt_att_sent+0x12>
   2bcfa:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2bcfe:	b30c      	cbz	r4, 2bd44 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2bd00:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2bd04:	b98b      	cbnz	r3, 2bd2a <bt_att_sent+0x52>
   2bd06:	6863      	ldr	r3, [r4, #4]
   2bd08:	b17b      	cbz	r3, 2bd2a <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2bd0a:	1d20      	adds	r0, r4, #4
   2bd0c:	f7ff fd94 	bl	2b838 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bd10:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2bd12:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bd14:	4638      	mov	r0, r7
   2bd16:	f7ff fea0 	bl	2ba5a <chan_req_send>
   2bd1a:	2800      	cmp	r0, #0
   2bd1c:	da12      	bge.n	2bd44 <bt_att_sent+0x6c>
	return list->head;
   2bd1e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2bd20:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2bd22:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2bd24:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2bd26:	b903      	cbnz	r3, 2bd2a <bt_att_sent+0x52>
	list->tail = node;
   2bd28:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2bd2a:	f105 019c 	add.w	r1, r5, #156	; 0x9c
   2bd2e:	4638      	mov	r0, r7
   2bd30:	f7ff febb 	bl	2baaa <process_queue>
	if (!err) {
   2bd34:	b130      	cbz	r0, 2bd44 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   2bd36:	f104 010c 	add.w	r1, r4, #12
   2bd3a:	4638      	mov	r0, r7
}
   2bd3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2bd40:	f7ff beb3 	b.w	2baaa <process_queue>
}
   2bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002bd46 <att_req_send_process>:
{
   2bd46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2bd4a:	6a84      	ldr	r4, [r0, #40]	; 0x28
   2bd4c:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2bd4e:	2c00      	cmp	r4, #0
   2bd50:	d03b      	beq.n	2bdca <att_req_send_process+0x84>
	return node->next;
   2bd52:	f854 69f0 	ldr.w	r6, [r4], #-240
   2bd56:	b106      	cbz	r6, 2bd5a <att_req_send_process+0x14>
   2bd58:	3ef0      	subs	r6, #240	; 0xf0
{
   2bd5a:	2300      	movs	r3, #0
   2bd5c:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2bd5e:	f108 0704 	add.w	r7, r8, #4
   2bd62:	e013      	b.n	2bd8c <att_req_send_process+0x46>
		if (!req && prev &&
   2bd64:	b1c3      	cbz	r3, 2bd98 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2bd66:	2103      	movs	r1, #3
   2bd68:	f104 0098 	add.w	r0, r4, #152	; 0x98
   2bd6c:	f7ff fd88 	bl	2b880 <atomic_test_bit>
   2bd70:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2bd72:	f103 0098 	add.w	r0, r3, #152	; 0x98
   2bd76:	f7ff fd83 	bl	2b880 <atomic_test_bit>
		if (!req && prev &&
   2bd7a:	4282      	cmp	r2, r0
   2bd7c:	d10c      	bne.n	2bd98 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2bd7e:	b326      	cbz	r6, 2bdca <att_req_send_process+0x84>
   2bd80:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
   2bd84:	b102      	cbz	r2, 2bd88 <att_req_send_process+0x42>
   2bd86:	3af0      	subs	r2, #240	; 0xf0
{
   2bd88:	4634      	mov	r4, r6
   2bd8a:	4616      	mov	r6, r2
		if (chan->req) {
   2bd8c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   2bd90:	2a00      	cmp	r2, #0
   2bd92:	d1f4      	bne.n	2bd7e <att_req_send_process+0x38>
		if (!req && prev &&
   2bd94:	2d00      	cmp	r5, #0
   2bd96:	d0e5      	beq.n	2bd64 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2bd98:	4638      	mov	r0, r7
   2bd9a:	f7ff fd4d 	bl	2b838 <sys_slist_get>
	if (node) {
   2bd9e:	4605      	mov	r5, r0
   2bda0:	b908      	cbnz	r0, 2bda6 <att_req_send_process+0x60>
   2bda2:	4623      	mov	r3, r4
   2bda4:	e7eb      	b.n	2bd7e <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2bda6:	4601      	mov	r1, r0
   2bda8:	4620      	mov	r0, r4
   2bdaa:	f7ed fd21 	bl	197f0 <bt_att_chan_req_send>
   2bdae:	2800      	cmp	r0, #0
   2bdb0:	da0b      	bge.n	2bdca <att_req_send_process+0x84>
	return list->head;
   2bdb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   2bdb6:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2bdb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   2bdbc:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   2bdc0:	2b00      	cmp	r3, #0
   2bdc2:	d1ee      	bne.n	2bda2 <att_req_send_process+0x5c>
	list->tail = node;
   2bdc4:	f8c8 5008 	str.w	r5, [r8, #8]
}
   2bdc8:	e7eb      	b.n	2bda2 <att_req_send_process+0x5c>
}
   2bdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bdce <bt_att_status>:
{
   2bdce:	b538      	push	{r3, r4, r5, lr}
   2bdd0:	4605      	mov	r5, r0
   2bdd2:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2bdd4:	2100      	movs	r1, #0
   2bdd6:	f7ff fd53 	bl	2b880 <atomic_test_bit>
   2bdda:	b1c0      	cbz	r0, 2be0e <bt_att_status+0x40>
	if (!chan->att) {
   2bddc:	f855 0c04 	ldr.w	r0, [r5, #-4]
   2bde0:	b1a8      	cbz	r0, 2be0e <bt_att_status+0x40>
	if (chan->req) {
   2bde2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   2bde6:	b993      	cbnz	r3, 2be0e <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   2bde8:	3004      	adds	r0, #4
   2bdea:	f7ff fd25 	bl	2b838 <sys_slist_get>
	if (!node) {
   2bdee:	4604      	mov	r4, r0
   2bdf0:	b168      	cbz	r0, 2be0e <bt_att_status+0x40>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2bdf2:	4601      	mov	r1, r0
   2bdf4:	1f28      	subs	r0, r5, #4
   2bdf6:	f7ed fcfb 	bl	197f0 <bt_att_chan_req_send>
   2bdfa:	2800      	cmp	r0, #0
   2bdfc:	da07      	bge.n	2be0e <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2bdfe:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2be02:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2be04:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2be06:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2be08:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2be0a:	b902      	cbnz	r2, 2be0e <bt_att_status+0x40>
	list->tail = node;
   2be0c:	609c      	str	r4, [r3, #8]
}
   2be0e:	bd38      	pop	{r3, r4, r5, pc}

0002be10 <atomic_test_and_set_bit>:
{
   2be10:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2be12:	2301      	movs	r3, #1
   2be14:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2be18:	f3bf 8f5b 	dmb	ish
   2be1c:	e850 3f00 	ldrex	r3, [r0]
   2be20:	ea43 0201 	orr.w	r2, r3, r1
   2be24:	e840 2400 	strex	r4, r2, [r0]
   2be28:	2c00      	cmp	r4, #0
   2be2a:	d1f7      	bne.n	2be1c <atomic_test_and_set_bit+0xc>
   2be2c:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2be30:	4219      	tst	r1, r3
}
   2be32:	bf14      	ite	ne
   2be34:	2001      	movne	r0, #1
   2be36:	2000      	moveq	r0, #0
   2be38:	bd10      	pop	{r4, pc}

0002be3a <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2be3a:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   2be3c:	6883      	ldr	r3, [r0, #8]
   2be3e:	699b      	ldr	r3, [r3, #24]
   2be40:	b10b      	cbz	r3, 2be46 <att_sent+0xc>
		chan->ops->sent(chan);
   2be42:	3004      	adds	r0, #4
   2be44:	4718      	bx	r3
}
   2be46:	4770      	bx	lr

0002be48 <att_tx_complete>:
{
   2be48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2be4c:	4606      	mov	r6, r0
   2be4e:	460d      	mov	r5, r1
	if (!err) {
   2be50:	4614      	mov	r4, r2
   2be52:	b122      	cbz	r2, 2be5e <att_tx_complete+0x16>
}
   2be54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2be58:	4608      	mov	r0, r1
   2be5a:	f7ed bc4d 	b.w	196f8 <tx_meta_data_free>
		att_sent(conn, user_data);
   2be5e:	f7ff ffec 	bl	2be3a <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2be62:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2be64:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2be68:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   2be6c:	4628      	mov	r0, r5
   2be6e:	f7ed fc43 	bl	196f8 <tx_meta_data_free>
	if (!err && func) {
   2be72:	b92f      	cbnz	r7, 2be80 <att_tx_complete+0x38>
}
   2be74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2be78:	4649      	mov	r1, r9
   2be7a:	4630      	mov	r0, r6
   2be7c:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   2be7e:	3401      	adds	r4, #1
   2be80:	b2a3      	uxth	r3, r4
   2be82:	4543      	cmp	r3, r8
   2be84:	d3f8      	bcc.n	2be78 <att_tx_complete+0x30>
   2be86:	e7f5      	b.n	2be74 <att_tx_complete+0x2c>

0002be88 <att_req_sent>:
{
   2be88:	b510      	push	{r4, lr}
   2be8a:	460c      	mov	r4, r1
	if (!err) {
   2be8c:	b90a      	cbnz	r2, 2be92 <att_req_sent+0xa>
		att_sent(conn, user_data);
   2be8e:	f7ff ffd4 	bl	2be3a <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2be92:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2be94:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   2be98:	b12b      	cbz	r3, 2bea6 <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2be9a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2be9e:	2300      	movs	r3, #0
   2bea0:	30c0      	adds	r0, #192	; 0xc0
   2bea2:	f7f8 ff93 	bl	24dcc <k_work_reschedule>
	tx_meta_data_free(user_data);
   2bea6:	4620      	mov	r0, r4
}
   2bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2beac:	f7ed bc24 	b.w	196f8 <tx_meta_data_free>

0002beb0 <att_cfm_sent>:
{
   2beb0:	b510      	push	{r4, lr}
   2beb2:	460c      	mov	r4, r1
	if (!err) {
   2beb4:	b90a      	cbnz	r2, 2beba <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2beb6:	f7ff ffc0 	bl	2be3a <att_sent>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2beba:	6823      	ldr	r3, [r4, #0]
   2bebc:	f3bf 8f5b 	dmb	ish
   2bec0:	3398      	adds	r3, #152	; 0x98
   2bec2:	e853 1f00 	ldrex	r1, [r3]
   2bec6:	f021 0102 	bic.w	r1, r1, #2
   2beca:	e843 1200 	strex	r2, r1, [r3]
   2bece:	2a00      	cmp	r2, #0
   2bed0:	d1f7      	bne.n	2bec2 <att_cfm_sent+0x12>
   2bed2:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2bed6:	4620      	mov	r0, r4
}
   2bed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2bedc:	f7ed bc0c 	b.w	196f8 <tx_meta_data_free>

0002bee0 <att_rsp_sent>:
{
   2bee0:	b510      	push	{r4, lr}
   2bee2:	460c      	mov	r4, r1
	if (!err) {
   2bee4:	b90a      	cbnz	r2, 2beea <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   2bee6:	f7ff ffa8 	bl	2be3a <att_sent>
   2beea:	6823      	ldr	r3, [r4, #0]
   2beec:	f3bf 8f5b 	dmb	ish
   2bef0:	3398      	adds	r3, #152	; 0x98
   2bef2:	e853 1f00 	ldrex	r1, [r3]
   2bef6:	f021 0101 	bic.w	r1, r1, #1
   2befa:	e843 1200 	strex	r2, r1, [r3]
   2befe:	2a00      	cmp	r2, #0
   2bf00:	d1f7      	bne.n	2bef2 <att_rsp_sent+0x12>
   2bf02:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   2bf06:	4620      	mov	r0, r4
}
   2bf08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   2bf0c:	f7ed bbf4 	b.w	196f8 <tx_meta_data_free>

0002bf10 <att_indicate>:
{
   2bf10:	b570      	push	{r4, r5, r6, lr}
   2bf12:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   2bf14:	f101 000c 	add.w	r0, r1, #12
   2bf18:	460d      	mov	r5, r1
   2bf1a:	f001 fa70 	bl	2d3fe <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2bf1e:	6826      	ldr	r6, [r4, #0]
   2bf20:	8a2b      	ldrh	r3, [r5, #16]
   2bf22:	68ea      	ldr	r2, [r5, #12]
   2bf24:	4601      	mov	r1, r0
   2bf26:	6830      	ldr	r0, [r6, #0]
   2bf28:	f000 fe14 	bl	2cb54 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   2bf2c:	211e      	movs	r1, #30
   2bf2e:	2200      	movs	r2, #0
   2bf30:	4620      	mov	r0, r4
   2bf32:	f7ed fdc9 	bl	19ac8 <bt_att_chan_create_pdu>
	if (!buf) {
   2bf36:	4601      	mov	r1, r0
   2bf38:	b110      	cbz	r0, 2bf40 <att_indicate+0x30>
	bt_att_chan_send_rsp(chan, buf);
   2bf3a:	4620      	mov	r0, r4
   2bf3c:	f7ff fda7 	bl	2ba8e <bt_att_chan_send_rsp>
}
   2bf40:	2000      	movs	r0, #0
   2bf42:	bd70      	pop	{r4, r5, r6, pc}

0002bf44 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2bf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bf48:	4688      	mov	r8, r1
   2bf4a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2bf4c:	2101      	movs	r1, #1
   2bf4e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2bf50:	4605      	mov	r5, r0
   2bf52:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2bf54:	f7ed fdb8 	bl	19ac8 <bt_att_chan_create_pdu>
	if (!buf) {
   2bf58:	4604      	mov	r4, r0
   2bf5a:	b170      	cbz	r0, 2bf7a <send_err_rsp.part.0+0x36>
	return net_buf_simple_add(&buf->b, len);
   2bf5c:	2104      	movs	r1, #4
   2bf5e:	300c      	adds	r0, #12
   2bf60:	f7f3 f884 	bl	1f06c <net_buf_simple_add>
	rsp->request = req;
   2bf64:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2bf68:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   2bf6c:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   2bf6e:	4621      	mov	r1, r4
   2bf70:	4628      	mov	r0, r5
}
   2bf72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2bf76:	f7ff bd8a 	b.w	2ba8e <bt_att_chan_send_rsp>
}
   2bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bf7e <att_write_req>:
{
   2bf7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bf80:	460c      	mov	r4, r1
   2bf82:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2bf84:	f101 000c 	add.w	r0, r1, #12
   2bf88:	f001 fa39 	bl	2d3fe <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2bf8c:	8a22      	ldrh	r2, [r4, #16]
   2bf8e:	9201      	str	r2, [sp, #4]
   2bf90:	68e2      	ldr	r2, [r4, #12]
   2bf92:	9200      	str	r2, [sp, #0]
   2bf94:	4603      	mov	r3, r0
   2bf96:	2213      	movs	r2, #19
   2bf98:	2112      	movs	r1, #18
   2bf9a:	4628      	mov	r0, r5
   2bf9c:	f7ed fe5a 	bl	19c54 <att_write_rsp.constprop.0>
}
   2bfa0:	b003      	add	sp, #12
   2bfa2:	bd30      	pop	{r4, r5, pc}

0002bfa4 <att_write_cmd>:
{
   2bfa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bfa6:	460c      	mov	r4, r1
   2bfa8:	4605      	mov	r5, r0
   2bfaa:	f101 000c 	add.w	r0, r1, #12
   2bfae:	f001 fa26 	bl	2d3fe <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2bfb2:	8a22      	ldrh	r2, [r4, #16]
   2bfb4:	9201      	str	r2, [sp, #4]
   2bfb6:	68e2      	ldr	r2, [r4, #12]
   2bfb8:	9200      	str	r2, [sp, #0]
   2bfba:	2200      	movs	r2, #0
   2bfbc:	4603      	mov	r3, r0
   2bfbe:	4611      	mov	r1, r2
   2bfc0:	4628      	mov	r0, r5
   2bfc2:	f7ed fe47 	bl	19c54 <att_write_rsp.constprop.0>
}
   2bfc6:	b003      	add	sp, #12
   2bfc8:	bd30      	pop	{r4, r5, pc}

0002bfca <att_read_blob_req>:
{
   2bfca:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2bfcc:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2bfce:	8813      	ldrh	r3, [r2, #0]
   2bfd0:	8852      	ldrh	r2, [r2, #2]
   2bfd2:	9200      	str	r2, [sp, #0]
   2bfd4:	210c      	movs	r1, #12
   2bfd6:	220d      	movs	r2, #13
   2bfd8:	f7ed fff4 	bl	19fc4 <att_read_rsp>
}
   2bfdc:	b003      	add	sp, #12
   2bfde:	f85d fb04 	ldr.w	pc, [sp], #4

0002bfe2 <att_read_req>:
{
   2bfe2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2bfe4:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2bfe6:	2200      	movs	r2, #0
   2bfe8:	881b      	ldrh	r3, [r3, #0]
   2bfea:	9200      	str	r2, [sp, #0]
   2bfec:	210a      	movs	r1, #10
   2bfee:	220b      	movs	r2, #11
   2bff0:	f7ed ffe8 	bl	19fc4 <att_read_rsp>
}
   2bff4:	b003      	add	sp, #12
   2bff6:	f85d fb04 	ldr.w	pc, [sp], #4

0002bffa <att_mtu_req>:
{
   2bffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bffe:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2c000:	f850 2b98 	ldr.w	r2, [r0], #152
{
   2c004:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2c006:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   2c008:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2c00a:	f7ff fc39 	bl	2b880 <atomic_test_bit>
   2c00e:	4604      	mov	r4, r0
   2c010:	bb60      	cbnz	r0, 2c06c <att_mtu_req+0x72>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2c012:	68db      	ldr	r3, [r3, #12]
   2c014:	881f      	ldrh	r7, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   2c016:	2f16      	cmp	r7, #22
   2c018:	d92a      	bls.n	2c070 <att_mtu_req+0x76>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2c01a:	2202      	movs	r2, #2
   2c01c:	4630      	mov	r0, r6
   2c01e:	f7ed fe7d 	bl	19d1c <bt_att_create_pdu>
	if (!pdu) {
   2c022:	4680      	mov	r8, r0
   2c024:	b330      	cbz	r0, 2c074 <att_mtu_req+0x7a>
	return net_buf_simple_add(&buf->b, len);
   2c026:	2102      	movs	r1, #2
   2c028:	300c      	adds	r0, #12
   2c02a:	f7f3 f81f 	bl	1f06c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2c02e:	2341      	movs	r3, #65	; 0x41
   2c030:	7003      	strb	r3, [r0, #0]
   2c032:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   2c034:	4641      	mov	r1, r8
   2c036:	4628      	mov	r0, r5
   2c038:	f7ff fd29 	bl	2ba8e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2c03c:	2f41      	cmp	r7, #65	; 0x41
   2c03e:	bf28      	it	cs
   2c040:	2741      	movcs	r7, #65	; 0x41
   2c042:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2c044:	856f      	strh	r7, [r5, #42]	; 0x2a
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c046:	3604      	adds	r6, #4
   2c048:	f3bf 8f5b 	dmb	ish
   2c04c:	e856 3f00 	ldrex	r3, [r6]
   2c050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   2c054:	e846 3200 	strex	r2, r3, [r6]
   2c058:	2a00      	cmp	r2, #0
   2c05a:	d1f7      	bne.n	2c04c <att_mtu_req+0x52>
   2c05c:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(chan);
   2c060:	4628      	mov	r0, r5
   2c062:	f7ff fc2f 	bl	2b8c4 <att_chan_mtu_updated>
	return 0;
   2c066:	4620      	mov	r0, r4
}
   2c068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2c06c:	2006      	movs	r0, #6
   2c06e:	e7fb      	b.n	2c068 <att_mtu_req+0x6e>
		return BT_ATT_ERR_INVALID_PDU;
   2c070:	2004      	movs	r0, #4
   2c072:	e7f9      	b.n	2c068 <att_mtu_req+0x6e>
		return BT_ATT_ERR_UNLIKELY;
   2c074:	200e      	movs	r0, #14
   2c076:	e7f7      	b.n	2c068 <att_mtu_req+0x6e>

0002c078 <bt_att_get_mtu>:
{
   2c078:	b508      	push	{r3, lr}
	att = att_get(conn);
   2c07a:	f7ed fa61 	bl	19540 <att_get>
	if (!att) {
   2c07e:	b138      	cbz	r0, 2c090 <bt_att_get_mtu+0x18>
	return list->head;
   2c080:	6a80      	ldr	r0, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c082:	b128      	cbz	r0, 2c090 <bt_att_get_mtu+0x18>
	return node->next;
   2c084:	6803      	ldr	r3, [r0, #0]
   2c086:	b103      	cbz	r3, 2c08a <bt_att_get_mtu+0x12>
   2c088:	3bf0      	subs	r3, #240	; 0xf0
		if (chan->chan.tx.mtu > mtu) {
   2c08a:	f830 0cc6 	ldrh.w	r0, [r0, #-198]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c08e:	b903      	cbnz	r3, 2c092 <bt_att_get_mtu+0x1a>
}
   2c090:	bd08      	pop	{r3, pc}
   2c092:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   2c096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   2c098:	4298      	cmp	r0, r3
   2c09a:	bf38      	it	cc
   2c09c:	4618      	movcc	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2c09e:	2a00      	cmp	r2, #0
   2c0a0:	d0f6      	beq.n	2c090 <bt_att_get_mtu+0x18>
   2c0a2:	f1a2 03f0 	sub.w	r3, r2, #240	; 0xf0
   2c0a6:	e7f4      	b.n	2c092 <bt_att_get_mtu+0x1a>

0002c0a8 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2c0a8:	8a0a      	ldrh	r2, [r1, #16]
   2c0aa:	68c9      	ldr	r1, [r1, #12]
   2c0ac:	2300      	movs	r3, #0
   2c0ae:	f7ee b935 	b.w	1a31c <att_handle_rsp>

0002c0b2 <att_handle_find_type_rsp>:
static uint8_t att_handle_find_type_rsp(struct bt_att_chan *chan,
   2c0b2:	f7ff bff9 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0b6 <att_handle_read_type_rsp>:
static uint8_t att_handle_read_type_rsp(struct bt_att_chan *chan,
   2c0b6:	f7ff bff7 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0ba <att_handle_read_rsp>:
static uint8_t att_handle_read_rsp(struct bt_att_chan *chan,
   2c0ba:	f7ff bff5 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0be <att_handle_read_blob_rsp>:
static uint8_t att_handle_read_blob_rsp(struct bt_att_chan *chan,
   2c0be:	f7ff bff3 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0c2 <att_handle_read_mult_rsp>:
static uint8_t att_handle_read_mult_rsp(struct bt_att_chan *chan,
   2c0c2:	f7ff bff1 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0c6 <att_handle_read_mult_vl_rsp>:
static uint8_t att_handle_read_mult_vl_rsp(struct bt_att_chan *chan,
   2c0c6:	f7ff bfef 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0ca <att_handle_read_group_rsp>:
static uint8_t att_handle_read_group_rsp(struct bt_att_chan *chan,
   2c0ca:	f7ff bfed 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0ce <att_handle_write_rsp>:
static uint8_t att_handle_write_rsp(struct bt_att_chan *chan,
   2c0ce:	f7ff bfeb 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0d2 <att_handle_prepare_write_rsp>:
static uint8_t att_handle_prepare_write_rsp(struct bt_att_chan *chan,
   2c0d2:	f7ff bfe9 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0d6 <att_handle_exec_write_rsp>:
static uint8_t att_handle_exec_write_rsp(struct bt_att_chan *chan,
   2c0d6:	f7ff bfe7 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0da <att_confirm>:
static uint8_t att_confirm(struct bt_att_chan *chan, struct net_buf *buf)
   2c0da:	f7ff bfe5 	b.w	2c0a8 <att_handle_find_info_rsp>

0002c0de <att_mtu_rsp>:
{
   2c0de:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2c0e0:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2c0e2:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2c0e4:	2b16      	cmp	r3, #22
{
   2c0e6:	4604      	mov	r4, r0
   2c0e8:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2c0ea:	d806      	bhi.n	2c0fa <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2c0ec:	2200      	movs	r2, #0
   2c0ee:	2304      	movs	r3, #4
   2c0f0:	4611      	mov	r1, r2
}
   2c0f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2c0f6:	f7ee b911 	b.w	1a31c <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2c0fa:	2b41      	cmp	r3, #65	; 0x41
   2c0fc:	bf28      	it	cs
   2c0fe:	2341      	movcs	r3, #65	; 0x41
   2c100:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2c102:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2c104:	f7ff fbde 	bl	2b8c4 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2c108:	8a2a      	ldrh	r2, [r5, #16]
   2c10a:	2300      	movs	r3, #0
   2c10c:	4631      	mov	r1, r6
   2c10e:	4620      	mov	r0, r4
   2c110:	e7ef      	b.n	2c0f2 <att_mtu_rsp+0x14>

0002c112 <bt_att_encrypt_change>:
{
   2c112:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2c114:	4606      	mov	r6, r0
	if (!att_chan->att) {
   2c116:	f850 3c04 	ldr.w	r3, [r0, #-4]
	struct bt_conn *conn = le_chan->chan.conn;
   2c11a:	f856 5904 	ldr.w	r5, [r6], #-4
{
   2c11e:	4604      	mov	r4, r0
	if (!att_chan->att) {
   2c120:	2b00      	cmp	r3, #0
   2c122:	d038      	beq.n	2c196 <bt_att_encrypt_change+0x84>
	if (hci_status) {
   2c124:	b141      	cbz	r1, 2c138 <bt_att_encrypt_change+0x26>
		if (att_chan->req && att_chan->req->retrying) {
   2c126:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   2c12a:	2b00      	cmp	r3, #0
   2c12c:	d033      	beq.n	2c196 <bt_att_encrypt_change+0x84>
   2c12e:	7c1b      	ldrb	r3, [r3, #16]
   2c130:	07da      	lsls	r2, r3, #31
   2c132:	d530      	bpl.n	2c196 <bt_att_encrypt_change+0x84>
		return BT_ATT_ERR_AUTHENTICATION;
   2c134:	2305      	movs	r3, #5
   2c136:	e021      	b.n	2c17c <bt_att_encrypt_change+0x6a>
	bt_gatt_encrypt_change(conn);
   2c138:	4628      	mov	r0, r5
   2c13a:	f7f0 fc91 	bl	1ca60 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2c13e:	7a6b      	ldrb	r3, [r5, #9]
   2c140:	2b01      	cmp	r3, #1
   2c142:	d028      	beq.n	2c196 <bt_att_encrypt_change+0x84>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2c144:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2c148:	b32d      	cbz	r5, 2c196 <bt_att_encrypt_change+0x84>
   2c14a:	7c2b      	ldrb	r3, [r5, #16]
   2c14c:	07db      	lsls	r3, r3, #31
   2c14e:	d522      	bpl.n	2c196 <bt_att_encrypt_change+0x84>
	if (!req->encode) {
   2c150:	68eb      	ldr	r3, [r5, #12]
   2c152:	2b00      	cmp	r3, #0
   2c154:	d0ee      	beq.n	2c134 <bt_att_encrypt_change+0x22>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2c156:	696a      	ldr	r2, [r5, #20]
   2c158:	7c69      	ldrb	r1, [r5, #17]
   2c15a:	4630      	mov	r0, r6
   2c15c:	f7ed fcb4 	bl	19ac8 <bt_att_chan_create_pdu>
	if (!buf) {
   2c160:	4604      	mov	r4, r0
   2c162:	b150      	cbz	r0, 2c17a <bt_att_encrypt_change+0x68>
	if (req->encode(buf, req->len, req->user_data)) {
   2c164:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
   2c168:	68eb      	ldr	r3, [r5, #12]
   2c16a:	4798      	blx	r3
   2c16c:	b168      	cbz	r0, 2c18a <bt_att_encrypt_change+0x78>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   2c16e:	69a0      	ldr	r0, [r4, #24]
   2c170:	f7ed fac2 	bl	196f8 <tx_meta_data_free>
		net_buf_unref(buf);
   2c174:	4620      	mov	r0, r4
   2c176:	f7f2 fe73 	bl	1ee60 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2c17a:	230e      	movs	r3, #14
		att_handle_rsp(att_chan, NULL, 0, err);
   2c17c:	2200      	movs	r2, #0
   2c17e:	4630      	mov	r0, r6
   2c180:	4611      	mov	r1, r2
}
   2c182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2c186:	f7ee b8c9 	b.w	1a31c <att_handle_rsp>
	if (chan_send(att_chan, buf)) {
   2c18a:	4621      	mov	r1, r4
   2c18c:	4630      	mov	r0, r6
   2c18e:	f7ed facf 	bl	19730 <chan_send>
   2c192:	2800      	cmp	r0, #0
   2c194:	d1eb      	bne.n	2c16e <bt_att_encrypt_change+0x5c>
}
   2c196:	bd70      	pop	{r4, r5, r6, pc}

0002c198 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2c198:	b510      	push	{r4, lr}
   2c19a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2c19c:	f7ed f9d0 	bl	19540 <att_get>
	if (!att) {
   2c1a0:	b198      	cbz	r0, 2c1ca <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2c1a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2c1a4:	b14b      	cbz	r3, 2c1ba <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2c1a6:	f853 2c54 	ldr.w	r2, [r3, #-84]
   2c1aa:	6991      	ldr	r1, [r2, #24]
   2c1ac:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2c1ae:	f1a3 03f0 	sub.w	r3, r3, #240	; 0xf0
		if (chan->req->user_data == user_data) {
   2c1b2:	d009      	beq.n	2c1c8 <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2c1b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c1b8:	e7f4      	b.n	2c1a4 <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2c1ba:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2c1bc:	b128      	cbz	r0, 2c1ca <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2c1be:	6983      	ldr	r3, [r0, #24]
   2c1c0:	42a3      	cmp	r3, r4
   2c1c2:	d002      	beq.n	2c1ca <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2c1c4:	6800      	ldr	r0, [r0, #0]
   2c1c6:	e7f9      	b.n	2c1bc <bt_att_find_req_by_user_data+0x24>
		if (chan->req->user_data == user_data) {
   2c1c8:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2c1ca:	bd10      	pop	{r4, pc}

0002c1cc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   2c1cc:	2001      	movs	r0, #1
   2c1ce:	4770      	bx	lr

0002c1d0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   2c1d0:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   2c1d2:	f7ed f9b5 	bl	19540 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2c1d6:	b198      	cbz	r0, 2c200 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   2c1d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2c1da:	b18b      	cbz	r3, 2c200 <bt_att_clear_out_of_sync_sent+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c1dc:	f3bf 8f5b 	dmb	ish
   2c1e0:	3bf0      	subs	r3, #240	; 0xf0
   2c1e2:	f103 0298 	add.w	r2, r3, #152	; 0x98
   2c1e6:	e852 0f00 	ldrex	r0, [r2]
   2c1ea:	f020 0020 	bic.w	r0, r0, #32
   2c1ee:	e842 0100 	strex	r1, r0, [r2]
   2c1f2:	2900      	cmp	r1, #0
   2c1f4:	d1f7      	bne.n	2c1e6 <bt_att_clear_out_of_sync_sent+0x16>
   2c1f6:	f3bf 8f5b 	dmb	ish
	return node->next;
   2c1fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   2c1fe:	e7ec      	b.n	2c1da <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   2c200:	bd08      	pop	{r3, pc}

0002c202 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   2c202:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2c204:	2104      	movs	r1, #4
   2c206:	f7ff fb0c 	bl	2b822 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2c20a:	b128      	cbz	r0, 2c218 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2c20c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2c210:	2105      	movs	r1, #5
   2c212:	3094      	adds	r0, #148	; 0x94
   2c214:	f7ff bb34 	b.w	2b880 <atomic_test_bit>
}
   2c218:	bd08      	pop	{r3, pc}

0002c21a <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2c21a:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2c21c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2c220:	2201      	movs	r2, #1
   2c222:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2c224:	7403      	strb	r3, [r0, #16]
}
   2c226:	4770      	bx	lr

0002c228 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2c228:	6010      	str	r0, [r2, #0]
}
   2c22a:	2000      	movs	r0, #0
   2c22c:	4770      	bx	lr

0002c22e <gatt_ccc_changed>:
{
   2c22e:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2c230:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2c232:	895a      	ldrh	r2, [r3, #10]
   2c234:	428a      	cmp	r2, r1
   2c236:	d003      	beq.n	2c240 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2c238:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2c23a:	68db      	ldr	r3, [r3, #12]
   2c23c:	b103      	cbz	r3, 2c240 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2c23e:	4718      	bx	r3
}
   2c240:	4770      	bx	lr

0002c242 <gatt_indicate_rsp>:
{
   2c242:	b510      	push	{r4, lr}
   2c244:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2c246:	68a3      	ldr	r3, [r4, #8]
{
   2c248:	460a      	mov	r2, r1
	if (params->func) {
   2c24a:	b10b      	cbz	r3, 2c250 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2c24c:	4621      	mov	r1, r4
   2c24e:	4798      	blx	r3
	params->_ref--;
   2c250:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2c252:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2c254:	3b01      	subs	r3, #1
   2c256:	b2db      	uxtb	r3, r3
   2c258:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2c25a:	b122      	cbz	r2, 2c266 <gatt_indicate_rsp+0x24>
   2c25c:	b91b      	cbnz	r3, 2c266 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2c25e:	4620      	mov	r0, r4
}
   2c260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2c264:	4710      	bx	r2
}
   2c266:	bd10      	pop	{r4, pc}

0002c268 <match_uuid>:
	data->attr = attr;
   2c268:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2c26a:	8091      	strh	r1, [r2, #4]
}
   2c26c:	2000      	movs	r0, #0
   2c26e:	4770      	bx	lr

0002c270 <gatt_write_rsp>:
{
   2c270:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2c272:	6813      	ldr	r3, [r2, #0]
   2c274:	4718      	bx	r3

0002c276 <ccc_set_cb>:
}
   2c276:	2000      	movs	r0, #0
   2c278:	4770      	bx	lr

0002c27a <gen_hash_m>:
{
   2c27a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2c27c:	6807      	ldr	r7, [r0, #0]
   2c27e:	783d      	ldrb	r5, [r7, #0]
{
   2c280:	b089      	sub	sp, #36	; 0x24
   2c282:	4606      	mov	r6, r0
   2c284:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2c286:	b9dd      	cbnz	r5, 2c2c0 <gen_hash_m+0x46>
	switch (u16->val) {
   2c288:	887b      	ldrh	r3, [r7, #2]
   2c28a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2c28e:	d004      	beq.n	2c29a <gen_hash_m+0x20>
   2c290:	d810      	bhi.n	2c2b4 <gen_hash_m+0x3a>
   2c292:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2c296:	2b03      	cmp	r3, #3
   2c298:	d812      	bhi.n	2c2c0 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   2c29a:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c29e:	2202      	movs	r2, #2
   2c2a0:	f10d 010a 	add.w	r1, sp, #10
   2c2a4:	4620      	mov	r0, r4
   2c2a6:	f7fe fd1c 	bl	2ace2 <tc_cmac_update>
   2c2aa:	b968      	cbnz	r0, 2c2c8 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   2c2ac:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   2c2b0:	65a2      	str	r2, [r4, #88]	; 0x58
   2c2b2:	e006      	b.n	2c2c2 <gen_hash_m+0x48>
	switch (u16->val) {
   2c2b4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2c2b8:	33ff      	adds	r3, #255	; 0xff
   2c2ba:	b29b      	uxth	r3, r3
   2c2bc:	2b04      	cmp	r3, #4
   2c2be:	d91e      	bls.n	2c2fe <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   2c2c0:	2501      	movs	r5, #1
}
   2c2c2:	4628      	mov	r0, r5
   2c2c4:	b009      	add	sp, #36	; 0x24
   2c2c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   2c2c8:	887b      	ldrh	r3, [r7, #2]
   2c2ca:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c2ce:	2202      	movs	r2, #2
   2c2d0:	f10d 010a 	add.w	r1, sp, #10
   2c2d4:	4620      	mov	r0, r4
   2c2d6:	f7fe fd04 	bl	2ace2 <tc_cmac_update>
   2c2da:	2800      	cmp	r0, #0
   2c2dc:	d0e6      	beq.n	2c2ac <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2c2de:	2000      	movs	r0, #0
   2c2e0:	9000      	str	r0, [sp, #0]
   2c2e2:	aa03      	add	r2, sp, #12
   2c2e4:	6877      	ldr	r7, [r6, #4]
   2c2e6:	2313      	movs	r3, #19
   2c2e8:	4631      	mov	r1, r6
   2c2ea:	47b8      	blx	r7
		if (len < 0) {
   2c2ec:	1e02      	subs	r2, r0, #0
   2c2ee:	dbdf      	blt.n	2c2b0 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   2c2f0:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c2f2:	4620      	mov	r0, r4
   2c2f4:	f7fe fcf5 	bl	2ace2 <tc_cmac_update>
   2c2f8:	2800      	cmp	r0, #0
   2c2fa:	d1e1      	bne.n	2c2c0 <gen_hash_m+0x46>
   2c2fc:	e7d6      	b.n	2c2ac <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   2c2fe:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c302:	2202      	movs	r2, #2
   2c304:	f10d 010a 	add.w	r1, sp, #10
   2c308:	4620      	mov	r0, r4
   2c30a:	f7fe fcea 	bl	2ace2 <tc_cmac_update>
   2c30e:	2800      	cmp	r0, #0
   2c310:	d0cc      	beq.n	2c2ac <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2c312:	887b      	ldrh	r3, [r7, #2]
   2c314:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2c318:	2202      	movs	r2, #2
   2c31a:	f10d 010a 	add.w	r1, sp, #10
   2c31e:	e7e8      	b.n	2c2f2 <gen_hash_m+0x78>

0002c320 <bt_addr_le_eq>:
{
   2c320:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2c322:	2207      	movs	r2, #7
   2c324:	f7fe fe40 	bl	2afa8 <memcmp>
}
   2c328:	fab0 f080 	clz	r0, r0
   2c32c:	0940      	lsrs	r0, r0, #5
   2c32e:	bd08      	pop	{r3, pc}

0002c330 <ccc_find_cfg>:
{
   2c330:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   2c332:	7803      	ldrb	r3, [r0, #0]
   2c334:	4293      	cmp	r3, r2
{
   2c336:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2c338:	d105      	bne.n	2c346 <ccc_find_cfg+0x16>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   2c33a:	3001      	adds	r0, #1
   2c33c:	f7ff fff0 	bl	2c320 <bt_addr_le_eq>
		if (id == ccc->cfg[i].id &&
   2c340:	b108      	cbz	r0, 2c346 <ccc_find_cfg+0x16>
			return &ccc->cfg[i];
   2c342:	4620      	mov	r0, r4
}
   2c344:	bd10      	pop	{r4, pc}
	return NULL;
   2c346:	2000      	movs	r0, #0
   2c348:	e7fc      	b.n	2c344 <ccc_find_cfg+0x14>

0002c34a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c34a:	f3bf 8f5b 	dmb	ish
   2c34e:	6800      	ldr	r0, [r0, #0]
   2c350:	f3bf 8f5b 	dmb	ish
}
   2c354:	4770      	bx	lr

0002c356 <atomic_or>:
{
   2c356:	b510      	push	{r4, lr}
   2c358:	4603      	mov	r3, r0
}
   2c35a:	f3bf 8f5b 	dmb	ish
   2c35e:	e853 0f00 	ldrex	r0, [r3]
   2c362:	ea40 0201 	orr.w	r2, r0, r1
   2c366:	e843 2400 	strex	r4, r2, [r3]
   2c36a:	2c00      	cmp	r4, #0
   2c36c:	d1f7      	bne.n	2c35e <atomic_or+0x8>
   2c36e:	f3bf 8f5b 	dmb	ish
   2c372:	bd10      	pop	{r4, pc}

0002c374 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2c374:	2207      	movs	r2, #7
   2c376:	f7fe be3e 	b.w	2aff6 <memcpy>

0002c37a <atomic_and>:
{
   2c37a:	b510      	push	{r4, lr}
   2c37c:	4603      	mov	r3, r0
}
   2c37e:	f3bf 8f5b 	dmb	ish
   2c382:	e853 0f00 	ldrex	r0, [r3]
   2c386:	ea00 0201 	and.w	r2, r0, r1
   2c38a:	e843 2400 	strex	r4, r2, [r3]
   2c38e:	2c00      	cmp	r4, #0
   2c390:	d1f7      	bne.n	2c382 <atomic_and+0x8>
   2c392:	f3bf 8f5b 	dmb	ish
   2c396:	bd10      	pop	{r4, pc}

0002c398 <read_included_uuid_encode>:
{
   2c398:	b510      	push	{r4, lr}
   2c39a:	2102      	movs	r1, #2
   2c39c:	300c      	adds	r0, #12
   2c39e:	4614      	mov	r4, r2
   2c3a0:	f7f2 fe64 	bl	1f06c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2c3a4:	8963      	ldrh	r3, [r4, #10]
   2c3a6:	8003      	strh	r3, [r0, #0]
}
   2c3a8:	2000      	movs	r0, #0
   2c3aa:	bd10      	pop	{r4, pc}

0002c3ac <gatt_find_info_encode>:
{
   2c3ac:	b510      	push	{r4, lr}
   2c3ae:	2104      	movs	r1, #4
   2c3b0:	300c      	adds	r0, #12
   2c3b2:	4614      	mov	r4, r2
   2c3b4:	f7f2 fe5a 	bl	1f06c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2c3b8:	8923      	ldrh	r3, [r4, #8]
   2c3ba:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2c3bc:	89e3      	ldrh	r3, [r4, #14]
   2c3be:	8043      	strh	r3, [r0, #2]
}
   2c3c0:	2000      	movs	r0, #0
   2c3c2:	bd10      	pop	{r4, pc}

0002c3c4 <gatt_read_encode>:
{
   2c3c4:	b510      	push	{r4, lr}
   2c3c6:	2102      	movs	r1, #2
   2c3c8:	300c      	adds	r0, #12
   2c3ca:	4614      	mov	r4, r2
   2c3cc:	f7f2 fe4e 	bl	1f06c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2c3d0:	8923      	ldrh	r3, [r4, #8]
   2c3d2:	8003      	strh	r3, [r0, #0]
}
   2c3d4:	2000      	movs	r0, #0
   2c3d6:	bd10      	pop	{r4, pc}

0002c3d8 <gatt_read_blob_encode>:
{
   2c3d8:	b510      	push	{r4, lr}
   2c3da:	2104      	movs	r1, #4
   2c3dc:	300c      	adds	r0, #12
   2c3de:	4614      	mov	r4, r2
   2c3e0:	f7f2 fe44 	bl	1f06c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2c3e4:	8923      	ldrh	r3, [r4, #8]
   2c3e6:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   2c3e8:	8963      	ldrh	r3, [r4, #10]
   2c3ea:	8043      	strh	r3, [r0, #2]
}
   2c3ec:	2000      	movs	r0, #0
   2c3ee:	bd10      	pop	{r4, pc}

0002c3f0 <gatt_cancel_encode>:
{
   2c3f0:	b508      	push	{r3, lr}
   2c3f2:	2101      	movs	r1, #1
   2c3f4:	300c      	adds	r0, #12
   2c3f6:	f7f2 fe39 	bl	1f06c <net_buf_simple_add>
   2c3fa:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2c3fc:	2000      	movs	r0, #0
   2c3fe:	7018      	strb	r0, [r3, #0]
}
   2c400:	bd08      	pop	{r3, pc}

0002c402 <gatt_exec_encode>:
{
   2c402:	b508      	push	{r3, lr}
   2c404:	2101      	movs	r1, #1
   2c406:	300c      	adds	r0, #12
   2c408:	f7f2 fe30 	bl	1f06c <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2c40c:	2301      	movs	r3, #1
   2c40e:	7003      	strb	r3, [r0, #0]
}
   2c410:	2000      	movs	r0, #0
   2c412:	bd08      	pop	{r3, pc}

0002c414 <gatt_read_group_encode>:
{
   2c414:	b538      	push	{r3, r4, r5, lr}
   2c416:	f100 040c 	add.w	r4, r0, #12
   2c41a:	2104      	movs	r1, #4
   2c41c:	4620      	mov	r0, r4
   2c41e:	4615      	mov	r5, r2
   2c420:	f7f2 fe24 	bl	1f06c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2c424:	892b      	ldrh	r3, [r5, #8]
   2c426:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2c428:	89eb      	ldrh	r3, [r5, #14]
   2c42a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2c42c:	7c2b      	ldrb	r3, [r5, #16]
   2c42e:	b933      	cbnz	r3, 2c43e <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2c430:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2c434:	4620      	mov	r0, r4
   2c436:	f001 f809 	bl	2d44c <net_buf_simple_add_le16>
}
   2c43a:	2000      	movs	r0, #0
   2c43c:	bd38      	pop	{r3, r4, r5, pc}
   2c43e:	f642 0101 	movw	r1, #10241	; 0x2801
   2c442:	e7f7      	b.n	2c434 <gatt_read_group_encode+0x20>

0002c444 <gatt_read_type_encode>:
{
   2c444:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2c446:	f100 040c 	add.w	r4, r0, #12
   2c44a:	2104      	movs	r1, #4
   2c44c:	4620      	mov	r0, r4
   2c44e:	4615      	mov	r5, r2
   2c450:	f7f2 fe0c 	bl	1f06c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2c454:	892b      	ldrh	r3, [r5, #8]
   2c456:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2c458:	89eb      	ldrh	r3, [r5, #14]
   2c45a:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2c45c:	7c2b      	ldrb	r3, [r5, #16]
   2c45e:	2b02      	cmp	r3, #2
   2c460:	d004      	beq.n	2c46c <gatt_read_type_encode+0x28>
   2c462:	2b03      	cmp	r3, #3
   2c464:	d009      	beq.n	2c47a <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2c466:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2c468:	8859      	ldrh	r1, [r3, #2]
   2c46a:	e001      	b.n	2c470 <gatt_read_type_encode+0x2c>
   2c46c:	f642 0102 	movw	r1, #10242	; 0x2802
   2c470:	4620      	mov	r0, r4
   2c472:	f000 ffeb 	bl	2d44c <net_buf_simple_add_le16>
}
   2c476:	2000      	movs	r0, #0
   2c478:	bd38      	pop	{r3, r4, r5, pc}
   2c47a:	f642 0103 	movw	r1, #10243	; 0x2803
   2c47e:	e7f7      	b.n	2c470 <gatt_read_type_encode+0x2c>

0002c480 <gatt_read_mult_encode>:
{
   2c480:	b570      	push	{r4, r5, r6, lr}
   2c482:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   2c484:	2500      	movs	r5, #0
   2c486:	f100 060c 	add.w	r6, r0, #12
   2c48a:	6862      	ldr	r2, [r4, #4]
   2c48c:	b2eb      	uxtb	r3, r5
   2c48e:	429a      	cmp	r2, r3
   2c490:	f105 0501 	add.w	r5, r5, #1
   2c494:	d801      	bhi.n	2c49a <gatt_read_mult_encode+0x1a>
}
   2c496:	2000      	movs	r0, #0
   2c498:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   2c49a:	68a2      	ldr	r2, [r4, #8]
   2c49c:	4630      	mov	r0, r6
   2c49e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   2c4a2:	f000 ffd3 	bl	2d44c <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   2c4a6:	e7f0      	b.n	2c48a <gatt_read_mult_encode+0xa>

0002c4a8 <gatt_read_mult_vl_encode>:
static int gatt_read_mult_vl_encode(struct net_buf *buf, size_t len,
   2c4a8:	f7ff bfea 	b.w	2c480 <gatt_read_mult_encode>

0002c4ac <gatt_write_encode>:
{
   2c4ac:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2c4ae:	2102      	movs	r1, #2
   2c4b0:	b085      	sub	sp, #20
   2c4b2:	4605      	mov	r5, r0
   2c4b4:	300c      	adds	r0, #12
   2c4b6:	4614      	mov	r4, r2
   2c4b8:	f7f2 fdd8 	bl	1f06c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2c4bc:	88a3      	ldrh	r3, [r4, #4]
   2c4be:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2c4c0:	2300      	movs	r3, #0
   2c4c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c4c6:	2200      	movs	r2, #0
   2c4c8:	2300      	movs	r3, #0
   2c4ca:	e9cd 2300 	strd	r2, r3, [sp]
   2c4ce:	4628      	mov	r0, r5
   2c4d0:	68a2      	ldr	r2, [r4, #8]
   2c4d2:	89a1      	ldrh	r1, [r4, #12]
   2c4d4:	f7f2 fde8 	bl	1f0a8 <net_buf_append_bytes>
	if (write != params->length) {
   2c4d8:	89a3      	ldrh	r3, [r4, #12]
	return 0;
   2c4da:	4283      	cmp	r3, r0
}
   2c4dc:	bf14      	ite	ne
   2c4de:	f06f 000b 	mvnne.w	r0, #11
   2c4e2:	2000      	moveq	r0, #0
   2c4e4:	b005      	add	sp, #20
   2c4e6:	bd30      	pop	{r4, r5, pc}

0002c4e8 <gatt_prepare_write_encode>:
{
   2c4e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2c4ea:	4606      	mov	r6, r0
   2c4ec:	460c      	mov	r4, r1
   2c4ee:	300c      	adds	r0, #12
   2c4f0:	2104      	movs	r1, #4
   2c4f2:	4615      	mov	r5, r2
   2c4f4:	f7f2 fdba 	bl	1f06c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2c4f8:	88ab      	ldrh	r3, [r5, #4]
   2c4fa:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2c4fc:	88eb      	ldrh	r3, [r5, #6]
   2c4fe:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2c500:	2300      	movs	r3, #0
   2c502:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2c506:	2200      	movs	r2, #0
   2c508:	2300      	movs	r3, #0
   2c50a:	e9cd 2300 	strd	r2, r3, [sp]
   2c50e:	3c04      	subs	r4, #4
   2c510:	68aa      	ldr	r2, [r5, #8]
   2c512:	4621      	mov	r1, r4
   2c514:	4630      	mov	r0, r6
   2c516:	f7f2 fdc7 	bl	1f0a8 <net_buf_append_bytes>
	return 0;
   2c51a:	4284      	cmp	r4, r0
}
   2c51c:	bf14      	ite	ne
   2c51e:	f06f 000b 	mvnne.w	r0, #11
   2c522:	2000      	moveq	r0, #0
   2c524:	b004      	add	sp, #16
   2c526:	bd70      	pop	{r4, r5, r6, pc}

0002c528 <gatt_read_mult_rsp>:
{
   2c528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c52a:	9d08      	ldr	r5, [sp, #32]
   2c52c:	4606      	mov	r6, r0
	params->func(conn, 0, params, pdu, length);
   2c52e:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   2c530:	460c      	mov	r4, r1
   2c532:	b901      	cbnz	r1, 2c536 <gatt_read_mult_rsp+0xe>
   2c534:	b94b      	cbnz	r3, 2c54a <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   2c536:	2300      	movs	r3, #0
   2c538:	9308      	str	r3, [sp, #32]
   2c53a:	462a      	mov	r2, r5
   2c53c:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   2c53e:	4630      	mov	r0, r6
   2c540:	46bc      	mov	ip, r7
}
   2c542:	b003      	add	sp, #12
   2c544:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2c548:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2c54a:	9300      	str	r3, [sp, #0]
   2c54c:	4613      	mov	r3, r2
   2c54e:	462a      	mov	r2, r5
   2c550:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   2c552:	9408      	str	r4, [sp, #32]
   2c554:	682f      	ldr	r7, [r5, #0]
   2c556:	4623      	mov	r3, r4
   2c558:	462a      	mov	r2, r5
   2c55a:	4621      	mov	r1, r4
   2c55c:	e7ef      	b.n	2c53e <gatt_read_mult_rsp+0x16>

0002c55e <gatt_sub_remove>:
{
   2c55e:	b538      	push	{r3, r4, r5, lr}
   2c560:	460c      	mov	r4, r1
	if (params) {
   2c562:	4619      	mov	r1, r3
   2c564:	b16b      	cbz	r3, 2c582 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2c566:	f103 0518 	add.w	r5, r3, #24
   2c56a:	699b      	ldr	r3, [r3, #24]
Z_GENLIST_REMOVE(slist, snode)
   2c56c:	b982      	cbnz	r2, 2c590 <gatt_sub_remove+0x32>
   2c56e:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2c570:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2c572:	4295      	cmp	r5, r2
   2c574:	d100      	bne.n	2c578 <gatt_sub_remove+0x1a>
	list->tail = node;
   2c576:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2c578:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2c57a:	680d      	ldr	r5, [r1, #0]
   2c57c:	618b      	str	r3, [r1, #24]
   2c57e:	461a      	mov	r2, r3
   2c580:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2c582:	68a3      	ldr	r3, [r4, #8]
   2c584:	b953      	cbnz	r3, 2c59c <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   2c586:	4620      	mov	r0, r4
}
   2c588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2c58c:	f7ee bab4 	b.w	1aaf8 <gatt_sub_free>
   2c590:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c592:	68e3      	ldr	r3, [r4, #12]
   2c594:	429d      	cmp	r5, r3
	list->tail = node;
   2c596:	bf08      	it	eq
   2c598:	60e2      	streq	r2, [r4, #12]
}
   2c59a:	e7ed      	b.n	2c578 <gatt_sub_remove+0x1a>
}
   2c59c:	bd38      	pop	{r3, r4, r5, pc}

0002c59e <gatt_read_mult_vl_rsp>:
{
   2c59e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c5a0:	b087      	sub	sp, #28
   2c5a2:	4605      	mov	r5, r0
   2c5a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c5a6:	4610      	mov	r0, r2
   2c5a8:	461a      	mov	r2, r3
	if (err || !length) {
   2c5aa:	b901      	cbnz	r1, 2c5ae <gatt_read_mult_vl_rsp+0x10>
   2c5ac:	b94b      	cbnz	r3, 2c5c2 <gatt_read_mult_vl_rsp+0x24>
		params->func(conn, err, params, NULL, 0);
   2c5ae:	2300      	movs	r3, #0
   2c5b0:	930c      	str	r3, [sp, #48]	; 0x30
   2c5b2:	6826      	ldr	r6, [r4, #0]
   2c5b4:	4622      	mov	r2, r4
   2c5b6:	4628      	mov	r0, r5
   2c5b8:	46b4      	mov	ip, r6
}
   2c5ba:	b007      	add	sp, #28
   2c5bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		params->func(conn, err, params, NULL, 0);
   2c5c0:	4760      	bx	ip
	net_buf_simple_init_with_data(&buf, (void *)pdu, length);
   2c5c2:	4601      	mov	r1, r0
   2c5c4:	a803      	add	r0, sp, #12
   2c5c6:	f000 ff0c 	bl	2d3e2 <net_buf_simple_init_with_data>
	while (buf.len >= sizeof(*rsp)) {
   2c5ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2c5ce:	2b01      	cmp	r3, #1
   2c5d0:	d808      	bhi.n	2c5e4 <gatt_read_mult_vl_rsp+0x46>
	params->func(conn, 0, params, NULL, 0);
   2c5d2:	2300      	movs	r3, #0
   2c5d4:	9300      	str	r3, [sp, #0]
   2c5d6:	6826      	ldr	r6, [r4, #0]
   2c5d8:	4622      	mov	r2, r4
   2c5da:	4619      	mov	r1, r3
   2c5dc:	4628      	mov	r0, r5
   2c5de:	47b0      	blx	r6
}
   2c5e0:	b007      	add	sp, #28
   2c5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rsp = net_buf_simple_pull_mem(&buf, sizeof(*rsp));
   2c5e4:	2102      	movs	r1, #2
   2c5e6:	a803      	add	r0, sp, #12
   2c5e8:	f7f2 fd26 	bl	1f038 <net_buf_simple_pull_mem>
		len = sys_le16_to_cpu(rsp->len);
   2c5ec:	4603      	mov	r3, r0
   2c5ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2c5f2:	f833 7b02 	ldrh.w	r7, [r3], #2
   2c5f6:	4297      	cmp	r7, r2
   2c5f8:	bf28      	it	cs
   2c5fa:	4617      	movcs	r7, r2
		params->func(conn, 0, params, rsp->value, len);
   2c5fc:	9700      	str	r7, [sp, #0]
   2c5fe:	6826      	ldr	r6, [r4, #0]
   2c600:	4622      	mov	r2, r4
   2c602:	2100      	movs	r1, #0
   2c604:	4628      	mov	r0, r5
   2c606:	47b0      	blx	r6
		net_buf_simple_pull_mem(&buf, len);
   2c608:	4639      	mov	r1, r7
   2c60a:	a803      	add	r0, sp, #12
   2c60c:	f7f2 fd14 	bl	1f038 <net_buf_simple_pull_mem>
   2c610:	e7db      	b.n	2c5ca <gatt_read_mult_vl_rsp+0x2c>

0002c612 <gatt_find_type_encode>:
{
   2c612:	b538      	push	{r3, r4, r5, lr}
   2c614:	f100 050c 	add.w	r5, r0, #12
   2c618:	2106      	movs	r1, #6
   2c61a:	4628      	mov	r0, r5
   2c61c:	4614      	mov	r4, r2
   2c61e:	f7f2 fd25 	bl	1f06c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2c622:	8923      	ldrh	r3, [r4, #8]
   2c624:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2c626:	89e3      	ldrh	r3, [r4, #14]
   2c628:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2c62a:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_PRIMARY_VAL;
   2c62c:	2b00      	cmp	r3, #0
   2c62e:	f642 0301 	movw	r3, #10241	; 0x2801
   2c632:	bf08      	it	eq
   2c634:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2c638:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2c63a:	6821      	ldr	r1, [r4, #0]
   2c63c:	780b      	ldrb	r3, [r1, #0]
   2c63e:	b11b      	cbz	r3, 2c648 <gatt_find_type_encode+0x36>
   2c640:	2b02      	cmp	r3, #2
   2c642:	d006      	beq.n	2c652 <gatt_find_type_encode+0x40>
}
   2c644:	2000      	movs	r0, #0
   2c646:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2c648:	8849      	ldrh	r1, [r1, #2]
   2c64a:	4628      	mov	r0, r5
   2c64c:	f000 fefe 	bl	2d44c <net_buf_simple_add_le16>
}
   2c650:	e7f8      	b.n	2c644 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c652:	2210      	movs	r2, #16
   2c654:	3101      	adds	r1, #1
   2c656:	4628      	mov	r0, r5
   2c658:	f000 fee5 	bl	2d426 <net_buf_simple_add_mem>
   2c65c:	e7f2      	b.n	2c644 <gatt_find_type_encode+0x32>

0002c65e <gatt_read_uuid_encode>:
{
   2c65e:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2c660:	f100 040c 	add.w	r4, r0, #12
   2c664:	2104      	movs	r1, #4
   2c666:	4620      	mov	r0, r4
   2c668:	4615      	mov	r5, r2
   2c66a:	f7f2 fcff 	bl	1f06c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   2c66e:	892b      	ldrh	r3, [r5, #8]
   2c670:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   2c672:	896b      	ldrh	r3, [r5, #10]
   2c674:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2c676:	68e9      	ldr	r1, [r5, #12]
   2c678:	780b      	ldrb	r3, [r1, #0]
   2c67a:	b92b      	cbnz	r3, 2c688 <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2c67c:	8849      	ldrh	r1, [r1, #2]
   2c67e:	4620      	mov	r0, r4
   2c680:	f000 fee4 	bl	2d44c <net_buf_simple_add_le16>
}
   2c684:	2000      	movs	r0, #0
   2c686:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c688:	2210      	movs	r2, #16
   2c68a:	3101      	adds	r1, #1
   2c68c:	4620      	mov	r0, r4
   2c68e:	f000 feca 	bl	2d426 <net_buf_simple_add_mem>
   2c692:	e7f7      	b.n	2c684 <gatt_read_uuid_encode+0x26>

0002c694 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2c694:	2a02      	cmp	r2, #2
{
   2c696:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2c698:	d108      	bne.n	2c6ac <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2c69a:	2300      	movs	r3, #0
   2c69c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2c6a0:	461a      	mov	r2, r3
   2c6a2:	7a00      	ldrb	r0, [r0, #8]
   2c6a4:	f7ee f96c 	bl	1a980 <sc_save>
}
   2c6a8:	2002      	movs	r0, #2
   2c6aa:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2c6ac:	f7ee fbae 	bl	1ae0c <sc_clear>
   2c6b0:	e7fa      	b.n	2c6a8 <sc_ccc_cfg_write+0x14>

0002c6b2 <read_central_addr_res>:
{
   2c6b2:	b513      	push	{r0, r1, r4, lr}
   2c6b4:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2c6b8:	4610      	mov	r0, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2c6ba:	2201      	movs	r2, #1
	if (offset > value_len) {
   2c6bc:	4291      	cmp	r1, r2
	uint8_t central_addr_res = BT_GATT_CENTRAL_ADDR_RES_SUPP;
   2c6be:	f88d 2007 	strb.w	r2, [sp, #7]
	if (offset > value_len) {
   2c6c2:	d80c      	bhi.n	2c6de <read_central_addr_res+0x2c>
	len = MIN(buf_len, value_len - offset);
   2c6c4:	1a54      	subs	r4, r2, r1
   2c6c6:	429c      	cmp	r4, r3
   2c6c8:	bfa8      	it	ge
   2c6ca:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2c6cc:	f10d 0307 	add.w	r3, sp, #7
   2c6d0:	4622      	mov	r2, r4
   2c6d2:	4419      	add	r1, r3
   2c6d4:	f7fe fc8f 	bl	2aff6 <memcpy>
}
   2c6d8:	4620      	mov	r0, r4
   2c6da:	b002      	add	sp, #8
   2c6dc:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c6de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2c6e2:	e7f9      	b.n	2c6d8 <read_central_addr_res+0x26>

0002c6e4 <read_appearance>:
{
   2c6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c6e6:	4615      	mov	r5, r2
   2c6e8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2c6ec:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2c6ee:	f7fe fe4b 	bl	2b388 <bt_get_appearance>
	if (offset > value_len) {
   2c6f2:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   2c6f4:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2c6f8:	d80e      	bhi.n	2c718 <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   2c6fa:	f1c6 0402 	rsb	r4, r6, #2
   2c6fe:	42bc      	cmp	r4, r7
   2c700:	bfa8      	it	ge
   2c702:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2c704:	f10d 0306 	add.w	r3, sp, #6
   2c708:	4622      	mov	r2, r4
   2c70a:	1999      	adds	r1, r3, r6
   2c70c:	4628      	mov	r0, r5
   2c70e:	f7fe fc72 	bl	2aff6 <memcpy>
}
   2c712:	4620      	mov	r0, r4
   2c714:	b003      	add	sp, #12
   2c716:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c718:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2c71c:	e7f9      	b.n	2c712 <read_appearance+0x2e>

0002c71e <read_name>:
{
   2c71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c722:	4698      	mov	r8, r3
   2c724:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2c728:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2c72a:	f7ea fbff 	bl	16f2c <bt_get_name>
   2c72e:	4607      	mov	r7, r0
				 strlen(name));
   2c730:	f7fe fc0a 	bl	2af48 <strlen>
	if (offset > value_len) {
   2c734:	b283      	uxth	r3, r0
   2c736:	42b3      	cmp	r3, r6
   2c738:	d30c      	bcc.n	2c754 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2c73a:	1b9c      	subs	r4, r3, r6
   2c73c:	4544      	cmp	r4, r8
   2c73e:	bfa8      	it	ge
   2c740:	4644      	movge	r4, r8
   2c742:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2c744:	4622      	mov	r2, r4
   2c746:	19b9      	adds	r1, r7, r6
   2c748:	4628      	mov	r0, r5
   2c74a:	f7fe fc54 	bl	2aff6 <memcpy>
}
   2c74e:	4620      	mov	r0, r4
   2c750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c754:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2c758:	e7f9      	b.n	2c74e <read_name+0x30>

0002c75a <cf_read>:
{
   2c75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c75c:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2c75e:	2300      	movs	r3, #0
{
   2c760:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   2c764:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2c768:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2c76a:	f7ed ff9d 	bl	1a6a8 <find_cf_cfg>
	if (cfg) {
   2c76e:	b128      	cbz	r0, 2c77c <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2c770:	f100 0108 	add.w	r1, r0, #8
   2c774:	2201      	movs	r2, #1
   2c776:	a801      	add	r0, sp, #4
   2c778:	f7fe fc3d 	bl	2aff6 <memcpy>
	if (offset > value_len) {
   2c77c:	2e01      	cmp	r6, #1
   2c77e:	d80d      	bhi.n	2c79c <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2c780:	f1c6 0401 	rsb	r4, r6, #1
   2c784:	42bc      	cmp	r4, r7
   2c786:	bfa8      	it	ge
   2c788:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2c78a:	ab01      	add	r3, sp, #4
   2c78c:	4622      	mov	r2, r4
   2c78e:	1999      	adds	r1, r3, r6
   2c790:	4628      	mov	r0, r5
   2c792:	f7fe fc30 	bl	2aff6 <memcpy>
}
   2c796:	4620      	mov	r0, r4
   2c798:	b003      	add	sp, #12
   2c79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c79c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2c7a0:	e7f9      	b.n	2c796 <cf_read+0x3c>

0002c7a2 <bt_gatt_attr_read_service>:
{
   2c7a2:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   2c7a4:	68c9      	ldr	r1, [r1, #12]
{
   2c7a6:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2c7a8:	780a      	ldrb	r2, [r1, #0]
{
   2c7aa:	461c      	mov	r4, r3
   2c7ac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   2c7b0:	b992      	cbnz	r2, 2c7d8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2c7b2:	884a      	ldrh	r2, [r1, #2]
   2c7b4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2c7b8:	2b02      	cmp	r3, #2
   2c7ba:	d818      	bhi.n	2c7ee <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2c7bc:	f1c3 0202 	rsb	r2, r3, #2
   2c7c0:	4294      	cmp	r4, r2
   2c7c2:	bfa8      	it	ge
   2c7c4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2c7c6:	4622      	mov	r2, r4
   2c7c8:	f10d 0106 	add.w	r1, sp, #6
   2c7cc:	4419      	add	r1, r3
   2c7ce:	f7fe fc12 	bl	2aff6 <memcpy>
}
   2c7d2:	4620      	mov	r0, r4
   2c7d4:	b002      	add	sp, #8
   2c7d6:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   2c7d8:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   2c7da:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   2c7de:	d806      	bhi.n	2c7ee <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   2c7e0:	f1c3 0210 	rsb	r2, r3, #16
   2c7e4:	4294      	cmp	r4, r2
   2c7e6:	bfa8      	it	ge
   2c7e8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   2c7ea:	4622      	mov	r2, r4
   2c7ec:	e7ee      	b.n	2c7cc <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c7ee:	f06f 0406 	mvn.w	r4, #6
   2c7f2:	e7ee      	b.n	2c7d2 <bt_gatt_attr_read_service+0x30>

0002c7f4 <bt_gatt_attr_read_ccc>:
{
   2c7f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2c7f6:	68c9      	ldr	r1, [r1, #12]
{
   2c7f8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2c7fc:	4615      	mov	r5, r2
   2c7fe:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2c800:	f7ed ffa2 	bl	1a748 <find_ccc_cfg>
	if (cfg) {
   2c804:	b100      	cbz	r0, 2c808 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   2c806:	8900      	ldrh	r0, [r0, #8]
   2c808:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2c80c:	2e02      	cmp	r6, #2
   2c80e:	d80e      	bhi.n	2c82e <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   2c810:	f1c6 0402 	rsb	r4, r6, #2
   2c814:	42bc      	cmp	r4, r7
   2c816:	bfa8      	it	ge
   2c818:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2c81a:	f10d 0306 	add.w	r3, sp, #6
   2c81e:	4622      	mov	r2, r4
   2c820:	1999      	adds	r1, r3, r6
   2c822:	4628      	mov	r0, r5
   2c824:	f7fe fbe7 	bl	2aff6 <memcpy>
}
   2c828:	4620      	mov	r0, r4
   2c82a:	b003      	add	sp, #12
   2c82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c82e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2c832:	e7f9      	b.n	2c828 <bt_gatt_attr_read_ccc+0x34>

0002c834 <gatt_req_send.constprop.0>:
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2c834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2c838:	4606      	mov	r6, r0
   2c83a:	460d      	mov	r5, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2c83c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2c840:	2100      	movs	r1, #0
static int gatt_req_send(struct bt_conn *conn, bt_att_func_t func, void *params,
   2c842:	f89d a020 	ldrb.w	sl, [sp, #32]
   2c846:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2c84a:	4690      	mov	r8, r2
   2c84c:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2c84e:	f7ed fd2b 	bl	1a2a8 <bt_att_req_alloc>
	if (!req) {
   2c852:	4604      	mov	r4, r0
   2c854:	b188      	cbz	r0, 2c87a <gatt_req_send.constprop.0+0x46>
	req->func = func;
   2c856:	6045      	str	r5, [r0, #4]
	req->att_op = op;
   2c858:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   2c85c:	f8c0 9014 	str.w	r9, [r0, #20]
	req->encode = encode;
   2c860:	60c7      	str	r7, [r0, #12]
	req->user_data = params;
   2c862:	f8c0 8018 	str.w	r8, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2c866:	464a      	mov	r2, r9
   2c868:	4651      	mov	r1, sl
   2c86a:	4630      	mov	r0, r6
   2c86c:	f7ed fa56 	bl	19d1c <bt_att_create_pdu>
   2c870:	4605      	mov	r5, r0
	if (!buf) {
   2c872:	b938      	cbnz	r0, 2c884 <gatt_req_send.constprop.0+0x50>
		bt_att_req_free(req);
   2c874:	4620      	mov	r0, r4
   2c876:	f7ed fd39 	bl	1a2ec <bt_att_req_free>
		return -ENOMEM;
   2c87a:	f06f 050b 	mvn.w	r5, #11
}
   2c87e:	4628      	mov	r0, r5
   2c880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   2c884:	2200      	movs	r2, #0
   2c886:	4611      	mov	r1, r2
   2c888:	2301      	movs	r3, #1
   2c88a:	f7ff fcc6 	bl	2c21a <bt_att_set_tx_meta_data>
	req->buf = buf;
   2c88e:	60a5      	str	r5, [r4, #8]
	err = encode(buf, len, params);
   2c890:	4628      	mov	r0, r5
   2c892:	4642      	mov	r2, r8
   2c894:	4649      	mov	r1, r9
   2c896:	47b8      	blx	r7
	if (err) {
   2c898:	4605      	mov	r5, r0
   2c89a:	b118      	cbz	r0, 2c8a4 <gatt_req_send.constprop.0+0x70>
		bt_att_req_free(req);
   2c89c:	4620      	mov	r0, r4
   2c89e:	f7ed fd25 	bl	1a2ec <bt_att_req_free>
   2c8a2:	e7ec      	b.n	2c87e <gatt_req_send.constprop.0+0x4a>
	err = bt_att_req_send(conn, req);
   2c8a4:	4621      	mov	r1, r4
   2c8a6:	4630      	mov	r0, r6
   2c8a8:	f7ed fe74 	bl	1a594 <bt_att_req_send>
	if (err) {
   2c8ac:	4605      	mov	r5, r0
   2c8ae:	2800      	cmp	r0, #0
   2c8b0:	d0e5      	beq.n	2c87e <gatt_req_send.constprop.0+0x4a>
   2c8b2:	e7f3      	b.n	2c89c <gatt_req_send.constprop.0+0x68>

0002c8b4 <gatt_write_ccc_buf>:
{
   2c8b4:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2c8b6:	f100 050c 	add.w	r5, r0, #12
   2c8ba:	2102      	movs	r1, #2
   2c8bc:	4628      	mov	r0, r5
   2c8be:	4614      	mov	r4, r2
   2c8c0:	f7f2 fbd4 	bl	1f06c <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2c8c4:	89e3      	ldrh	r3, [r4, #14]
   2c8c6:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2c8c8:	8a21      	ldrh	r1, [r4, #16]
   2c8ca:	4628      	mov	r0, r5
   2c8cc:	f000 fdbe 	bl	2d44c <net_buf_simple_add_le16>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2c8d0:	2104      	movs	r1, #4
   2c8d2:	f104 0014 	add.w	r0, r4, #20
   2c8d6:	f7ff fd3e 	bl	2c356 <atomic_or>
}
   2c8da:	2000      	movs	r0, #0
   2c8dc:	bd38      	pop	{r3, r4, r5, pc}

0002c8de <sc_restore_rsp>:
{
   2c8de:	b538      	push	{r3, r4, r5, lr}
   2c8e0:	4604      	mov	r4, r0
   2c8e2:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   2c8e4:	f7ff fc72 	bl	2c1cc <bt_att_fixed_chan_only>
   2c8e8:	b150      	cbz	r0, 2c900 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   2c8ea:	4620      	mov	r0, r4
   2c8ec:	f7ed fedc 	bl	1a6a8 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   2c8f0:	b130      	cbz	r0, 2c900 <sc_restore_rsp+0x22>
   2c8f2:	7a03      	ldrb	r3, [r0, #8]
   2c8f4:	07db      	lsls	r3, r3, #31
   2c8f6:	d503      	bpl.n	2c900 <sc_restore_rsp+0x22>
   2c8f8:	2101      	movs	r1, #1
   2c8fa:	300c      	adds	r0, #12
   2c8fc:	f7ff fd2b 	bl	2c356 <atomic_or>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2c900:	b985      	cbnz	r5, 2c924 <sc_restore_rsp+0x46>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2c902:	7a20      	ldrb	r0, [r4, #8]
   2c904:	f104 0190 	add.w	r1, r4, #144	; 0x90
   2c908:	f7ed fefc 	bl	1a704 <find_sc_cfg>
		if (sc_cfg) {
   2c90c:	4604      	mov	r4, r0
   2c90e:	b148      	cbz	r0, 2c924 <sc_restore_rsp+0x46>
	memset(&cfg->data, 0, sizeof(cfg->data));
   2c910:	4629      	mov	r1, r5
   2c912:	2204      	movs	r2, #4
   2c914:	3008      	adds	r0, #8
   2c916:	f7fe fb79 	bl	2b00c <memset>
		sc_store(cfg);
   2c91a:	4620      	mov	r0, r4
}
   2c91c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		sc_store(cfg);
   2c920:	f7ee b806 	b.w	1a930 <sc_store>
}
   2c924:	bd38      	pop	{r3, r4, r5, pc}

0002c926 <bt_gatt_attr_value_handle>:
{
   2c926:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c928:	4604      	mov	r4, r0
   2c92a:	b910      	cbnz	r0, 2c932 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2c92c:	2000      	movs	r0, #0
}
   2c92e:	b002      	add	sp, #8
   2c930:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2c932:	2300      	movs	r3, #0
   2c934:	f88d 3004 	strb.w	r3, [sp, #4]
   2c938:	6800      	ldr	r0, [r0, #0]
   2c93a:	f642 0303 	movw	r3, #10243	; 0x2803
   2c93e:	a901      	add	r1, sp, #4
   2c940:	f8ad 3006 	strh.w	r3, [sp, #6]
   2c944:	f7fe fbeb 	bl	2b11e <bt_uuid_cmp>
   2c948:	2800      	cmp	r0, #0
   2c94a:	d1ef      	bne.n	2c92c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2c94c:	68e3      	ldr	r3, [r4, #12]
   2c94e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2c950:	2800      	cmp	r0, #0
   2c952:	d1ec      	bne.n	2c92e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2c954:	4620      	mov	r0, r4
   2c956:	f7ee fc17 	bl	1b188 <bt_gatt_attr_get_handle>
   2c95a:	3001      	adds	r0, #1
   2c95c:	b280      	uxth	r0, r0
	return handle;
   2c95e:	e7e6      	b.n	2c92e <bt_gatt_attr_value_handle+0x8>

0002c960 <bt_gatt_attr_read_chrc>:
{
   2c960:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2c962:	68cc      	ldr	r4, [r1, #12]
{
   2c964:	b087      	sub	sp, #28
   2c966:	4608      	mov	r0, r1
   2c968:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   2c96a:	79a3      	ldrb	r3, [r4, #6]
   2c96c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2c970:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2c974:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2c976:	f7ff ffd6 	bl	2c926 <bt_gatt_attr_value_handle>
   2c97a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2c97e:	6821      	ldr	r1, [r4, #0]
   2c980:	780b      	ldrb	r3, [r1, #0]
   2c982:	b99b      	cbnz	r3, 2c9ac <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2c984:	884b      	ldrh	r3, [r1, #2]
   2c986:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2c98a:	2405      	movs	r4, #5
	if (offset > value_len) {
   2c98c:	42b4      	cmp	r4, r6
   2c98e:	d315      	bcc.n	2c9bc <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2c990:	1ba4      	subs	r4, r4, r6
   2c992:	42bc      	cmp	r4, r7
   2c994:	bfa8      	it	ge
   2c996:	463c      	movge	r4, r7
   2c998:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   2c99a:	ab01      	add	r3, sp, #4
   2c99c:	4622      	mov	r2, r4
   2c99e:	1999      	adds	r1, r3, r6
   2c9a0:	4628      	mov	r0, r5
   2c9a2:	f7fe fb28 	bl	2aff6 <memcpy>
}
   2c9a6:	4620      	mov	r0, r4
   2c9a8:	b007      	add	sp, #28
   2c9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2c9ac:	2210      	movs	r2, #16
   2c9ae:	3101      	adds	r1, #1
   2c9b0:	f10d 0007 	add.w	r0, sp, #7
   2c9b4:	f7fe fb1f 	bl	2aff6 <memcpy>
		value_len += 16U;
   2c9b8:	2413      	movs	r4, #19
   2c9ba:	e7e7      	b.n	2c98c <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2c9bc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2c9c0:	e7f1      	b.n	2c9a6 <bt_gatt_attr_read_chrc+0x46>

0002c9c2 <bt_gatt_foreach_attr>:
{
   2c9c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c9c4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c9c8:	2300      	movs	r3, #0
   2c9ca:	9300      	str	r3, [sp, #0]
   2c9cc:	461a      	mov	r2, r3
   2c9ce:	f7ee fc1b 	bl	1b208 <bt_gatt_foreach_attr_type>
}
   2c9d2:	b005      	add	sp, #20
   2c9d4:	f85d fb04 	ldr.w	pc, [sp], #4

0002c9d8 <bt_gatt_check_perm>:
{
   2c9d8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2c9da:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2c9dc:	8a4b      	ldrh	r3, [r1, #18]
{
   2c9de:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   2c9e0:	d504      	bpl.n	2c9ec <bt_gatt_check_perm+0x14>
   2c9e2:	f013 0f95 	tst.w	r3, #149	; 0x95
   2c9e6:	d027      	beq.n	2ca38 <bt_gatt_check_perm+0x60>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2c9e8:	6848      	ldr	r0, [r1, #4]
   2c9ea:	b328      	cbz	r0, 2ca38 <bt_gatt_check_perm+0x60>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2c9ec:	0790      	lsls	r0, r2, #30
   2c9ee:	d504      	bpl.n	2c9fa <bt_gatt_check_perm+0x22>
   2c9f0:	f413 7f95 	tst.w	r3, #298	; 0x12a
   2c9f4:	d022      	beq.n	2ca3c <bt_gatt_check_perm+0x64>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2c9f6:	6889      	ldr	r1, [r1, #8]
   2c9f8:	b301      	cbz	r1, 2ca3c <bt_gatt_check_perm+0x64>
	mask &= attr->perm;
   2c9fa:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   2c9fe:	f414 7fc0 	tst.w	r4, #384	; 0x180
   2ca02:	d007      	beq.n	2ca14 <bt_gatt_check_perm+0x3c>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ca04:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2ca08:	b90b      	cbnz	r3, 2ca0e <bt_gatt_check_perm+0x36>
			return BT_ATT_ERR_AUTHENTICATION;
   2ca0a:	2005      	movs	r0, #5
}
   2ca0c:	bd38      	pop	{r3, r4, r5, pc}
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   2ca0e:	7b5b      	ldrb	r3, [r3, #13]
   2ca10:	06db      	lsls	r3, r3, #27
   2ca12:	d5fa      	bpl.n	2ca0a <bt_gatt_check_perm+0x32>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2ca14:	f014 0f30 	tst.w	r4, #48	; 0x30
   2ca18:	d108      	bne.n	2ca2c <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2ca1a:	f014 000c 	ands.w	r0, r4, #12
   2ca1e:	d0f5      	beq.n	2ca0c <bt_gatt_check_perm+0x34>
		if (!conn->encrypt) {
   2ca20:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2ca22:	2b00      	cmp	r3, #0
   2ca24:	bf14      	ite	ne
   2ca26:	2000      	movne	r0, #0
   2ca28:	200f      	moveq	r0, #15
   2ca2a:	e7ef      	b.n	2ca0c <bt_gatt_check_perm+0x34>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2ca2c:	4628      	mov	r0, r5
   2ca2e:	f7fe fde5 	bl	2b5fc <bt_conn_get_security>
   2ca32:	2802      	cmp	r0, #2
   2ca34:	d8f1      	bhi.n	2ca1a <bt_gatt_check_perm+0x42>
   2ca36:	e7e8      	b.n	2ca0a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2ca38:	2002      	movs	r0, #2
   2ca3a:	e7e7      	b.n	2ca0c <bt_gatt_check_perm+0x34>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2ca3c:	2003      	movs	r0, #3
   2ca3e:	e7e5      	b.n	2ca0c <bt_gatt_check_perm+0x34>

0002ca40 <gatt_discover_next>:
{
   2ca40:	b570      	push	{r4, r5, r6, lr}
	if (!last_handle)
   2ca42:	460b      	mov	r3, r1
{
   2ca44:	4605      	mov	r5, r0
   2ca46:	4614      	mov	r4, r2
	if (!last_handle)
   2ca48:	b929      	cbnz	r1, 2ca56 <gatt_discover_next+0x16>
	if (!bt_gatt_discover(conn, params)) {
   2ca4a:	4621      	mov	r1, r4
   2ca4c:	4628      	mov	r0, r5
   2ca4e:	f7ef f8e9 	bl	1bc24 <bt_gatt_discover>
   2ca52:	b928      	cbnz	r0, 2ca60 <gatt_discover_next+0x20>
}
   2ca54:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2ca56:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2ca5a:	4291      	cmp	r1, r2
   2ca5c:	d107      	bne.n	2ca6e <gatt_discover_next+0x2e>
	params->start_handle = last_handle;
   2ca5e:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2ca60:	6863      	ldr	r3, [r4, #4]
   2ca62:	4622      	mov	r2, r4
   2ca64:	4628      	mov	r0, r5
   2ca66:	2100      	movs	r1, #0
}
   2ca68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2ca6c:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2ca6e:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2ca70:	3301      	adds	r3, #1
   2ca72:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2ca74:	429a      	cmp	r2, r3
		params->start_handle++;
   2ca76:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2ca78:	d2e7      	bcs.n	2ca4a <gatt_discover_next+0xa>
   2ca7a:	e7f1      	b.n	2ca60 <gatt_discover_next+0x20>

0002ca7c <gatt_find_type_rsp>:
{
   2ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca80:	b089      	sub	sp, #36	; 0x24
   2ca82:	4606      	mov	r6, r0
   2ca84:	9f12      	ldr	r7, [sp, #72]	; 0x48
   2ca86:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2ca88:	b911      	cbnz	r1, 2ca90 <gatt_find_type_rsp+0x14>
   2ca8a:	f013 0803 	ands.w	r8, r3, #3
   2ca8e:	d007      	beq.n	2caa0 <gatt_find_type_rsp+0x24>
	params->func(conn, NULL, params);
   2ca90:	687b      	ldr	r3, [r7, #4]
   2ca92:	463a      	mov	r2, r7
   2ca94:	2100      	movs	r1, #0
   2ca96:	4630      	mov	r0, r6
}
   2ca98:	b009      	add	sp, #36	; 0x24
   2ca9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
   2ca9e:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2caa0:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2caa4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2caa8:	46c1      	mov	r9, r8
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2caaa:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2caae:	42ac      	cmp	r4, r5
   2cab0:	d107      	bne.n	2cac2 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2cab2:	463a      	mov	r2, r7
   2cab4:	4641      	mov	r1, r8
   2cab6:	4630      	mov	r0, r6
}
   2cab8:	b009      	add	sp, #36	; 0x24
   2caba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, end_handle, params);
   2cabe:	f7ff bfbf 	b.w	2ca40 <gatt_discover_next>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2cac2:	7c3a      	ldrb	r2, [r7, #16]
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2cac4:	8863      	ldrh	r3, [r4, #2]
		value.end_handle = end_handle;
   2cac6:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_PRIMARY_VAL;
   2caca:	2a00      	cmp	r2, #0
   2cacc:	bf14      	ite	ne
   2cace:	4652      	movne	r2, sl
   2cad0:	f44f 5220 	moveq.w	r2, #10240	; 0x2800
   2cad4:	f8ad 2002 	strh.w	r2, [sp, #2]
		attr = (struct bt_gatt_attr) {
   2cad8:	2210      	movs	r2, #16
   2cada:	2100      	movs	r1, #0
   2cadc:	eb0d 0002 	add.w	r0, sp, r2
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2cae0:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2cae4:	683b      	ldr	r3, [r7, #0]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2cae6:	f8b4 b000 	ldrh.w	fp, [r4]
		value.uuid = params->uuid;
   2caea:	9301      	str	r3, [sp, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2caec:	f88d 9000 	strb.w	r9, [sp]
		attr = (struct bt_gatt_attr) {
   2caf0:	f7fe fa8c 	bl	2b00c <memset>
   2caf4:	ab01      	add	r3, sp, #4
   2caf6:	9306      	str	r3, [sp, #24]
   2caf8:	f8cd d00c 	str.w	sp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2cafc:	687b      	ldr	r3, [r7, #4]
		attr = (struct bt_gatt_attr) {
   2cafe:	f8ad b01c 	strh.w	fp, [sp, #28]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2cb02:	463a      	mov	r2, r7
   2cb04:	a903      	add	r1, sp, #12
   2cb06:	4630      	mov	r0, r6
   2cb08:	4798      	blx	r3
   2cb0a:	3404      	adds	r4, #4
   2cb0c:	2800      	cmp	r0, #0
   2cb0e:	d1ce      	bne.n	2caae <gatt_find_type_rsp+0x32>
}
   2cb10:	b009      	add	sp, #36	; 0x24
   2cb12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cb16 <bt_gatt_cancel>:
{
   2cb16:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cb18:	4604      	mov	r4, r0
   2cb1a:	460d      	mov	r5, r1
	k_sched_lock();
   2cb1c:	f7f8 fb98 	bl	25250 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2cb20:	4629      	mov	r1, r5
   2cb22:	4620      	mov	r0, r4
   2cb24:	f7ff fb38 	bl	2c198 <bt_att_find_req_by_user_data>
	if (req) {
   2cb28:	4601      	mov	r1, r0
   2cb2a:	b920      	cbnz	r0, 2cb36 <bt_gatt_cancel+0x20>
}
   2cb2c:	b002      	add	sp, #8
   2cb2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2cb32:	f7f8 bbd9 	b.w	252e8 <k_sched_unlock>
		func = req->func;
   2cb36:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2cb38:	4620      	mov	r0, r4
   2cb3a:	f7ed fd5b 	bl	1a5f4 <bt_att_req_cancel>
	k_sched_unlock();
   2cb3e:	f7f8 fbd3 	bl	252e8 <k_sched_unlock>
	if (func) {
   2cb42:	b12e      	cbz	r6, 2cb50 <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2cb44:	2300      	movs	r3, #0
   2cb46:	9500      	str	r5, [sp, #0]
   2cb48:	461a      	mov	r2, r3
   2cb4a:	210e      	movs	r1, #14
   2cb4c:	4620      	mov	r0, r4
   2cb4e:	47b0      	blx	r6
}
   2cb50:	b002      	add	sp, #8
   2cb52:	bd70      	pop	{r4, r5, r6, pc}

0002cb54 <bt_gatt_notification>:
{
   2cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cb58:	4606      	mov	r6, r0
   2cb5a:	4688      	mov	r8, r1
   2cb5c:	4691      	mov	r9, r2
   2cb5e:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2cb60:	f7ed fe06 	bl	1a770 <gatt_sub_find>
	if (!sub) {
   2cb64:	b320      	cbz	r0, 2cbb0 <bt_gatt_notification+0x5c>
	return list->head;
   2cb66:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2cb68:	b314      	cbz	r4, 2cbb0 <bt_gatt_notification+0x5c>
	return node->next;
   2cb6a:	6825      	ldr	r5, [r4, #0]
   2cb6c:	b105      	cbz	r5, 2cb70 <bt_gatt_notification+0x1c>
   2cb6e:	3d18      	subs	r5, #24
		if (handle != params->value_handle) {
   2cb70:	f834 3c0c 	ldrh.w	r3, [r4, #-12]
   2cb74:	4543      	cmp	r3, r8
   2cb76:	d118      	bne.n	2cbaa <bt_gatt_notification+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2cb78:	3c18      	subs	r4, #24
   2cb7a:	e007      	b.n	2cb8c <bt_gatt_notification+0x38>
   2cb7c:	462c      	mov	r4, r5
   2cb7e:	69ad      	ldr	r5, [r5, #24]
   2cb80:	89a3      	ldrh	r3, [r4, #12]
   2cb82:	b1bd      	cbz	r5, 2cbb4 <bt_gatt_notification+0x60>
		if (handle != params->value_handle) {
   2cb84:	4543      	cmp	r3, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2cb86:	f1a5 0518 	sub.w	r5, r5, #24
		if (handle != params->value_handle) {
   2cb8a:	d1f7      	bne.n	2cb7c <bt_gatt_notification+0x28>
		if (check_subscribe_security_level(conn, params)) {
   2cb8c:	7a72      	ldrb	r2, [r6, #9]
   2cb8e:	7ca3      	ldrb	r3, [r4, #18]
   2cb90:	429a      	cmp	r2, r3
   2cb92:	d30a      	bcc.n	2cbaa <bt_gatt_notification+0x56>
			if (params->notify(conn, params, data, length) ==
   2cb94:	6827      	ldr	r7, [r4, #0]
   2cb96:	4653      	mov	r3, sl
   2cb98:	464a      	mov	r2, r9
   2cb9a:	4621      	mov	r1, r4
   2cb9c:	4630      	mov	r0, r6
   2cb9e:	47b8      	blx	r7
   2cba0:	b918      	cbnz	r0, 2cbaa <bt_gatt_notification+0x56>
				bt_gatt_unsubscribe(conn, params);
   2cba2:	4621      	mov	r1, r4
   2cba4:	4630      	mov	r0, r6
   2cba6:	f7ef fe0b 	bl	1c7c0 <bt_gatt_unsubscribe>
   2cbaa:	462c      	mov	r4, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2cbac:	2d00      	cmp	r5, #0
   2cbae:	d1e6      	bne.n	2cb7e <bt_gatt_notification+0x2a>
}
   2cbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (handle != params->value_handle) {
   2cbb4:	4543      	cmp	r3, r8
   2cbb6:	d0e9      	beq.n	2cb8c <bt_gatt_notification+0x38>
   2cbb8:	e7fa      	b.n	2cbb0 <bt_gatt_notification+0x5c>

0002cbba <bt_gatt_change_aware>:
{
   2cbba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cbbc:	4605      	mov	r5, r0
   2cbbe:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   2cbc0:	f7ed fd72 	bl	1a6a8 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2cbc4:	b1d0      	cbz	r0, 2cbfc <bt_gatt_change_aware+0x42>
   2cbc6:	7a03      	ldrb	r3, [r0, #8]
   2cbc8:	07db      	lsls	r3, r3, #31
   2cbca:	d517      	bpl.n	2cbfc <bt_gatt_change_aware+0x42>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2cbcc:	f100 040c 	add.w	r4, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2cbd0:	4620      	mov	r0, r4
   2cbd2:	f7ff fbba 	bl	2c34a <atomic_get>
   2cbd6:	f010 0601 	ands.w	r6, r0, #1
   2cbda:	d10f      	bne.n	2cbfc <bt_gatt_change_aware+0x42>
	if (!req) {
   2cbdc:	b17f      	cbz	r7, 2cbfe <bt_gatt_change_aware+0x44>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cbde:	f06f 0102 	mvn.w	r1, #2
   2cbe2:	4620      	mov	r0, r4
   2cbe4:	f7ff fbc9 	bl	2c37a <atomic_and>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2cbe8:	f010 0f02 	tst.w	r0, #2
		bt_att_clear_out_of_sync_sent(conn);
   2cbec:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   2cbee:	d008      	beq.n	2cc02 <bt_gatt_change_aware+0x48>
		bt_att_clear_out_of_sync_sent(conn);
   2cbf0:	f7ff faee 	bl	2c1d0 <bt_att_clear_out_of_sync_sent>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2cbf4:	2101      	movs	r1, #1
   2cbf6:	4620      	mov	r0, r4
   2cbf8:	f7ff fbad 	bl	2c356 <atomic_or>
		return true;
   2cbfc:	2601      	movs	r6, #1
}
   2cbfe:	4630      	mov	r0, r6
   2cc00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   2cc02:	f7ff fae3 	bl	2c1cc <bt_att_fixed_chan_only>
   2cc06:	2800      	cmp	r0, #0
   2cc08:	d0f9      	beq.n	2cbfe <bt_gatt_change_aware+0x44>
   2cc0a:	4628      	mov	r0, r5
   2cc0c:	f7ff faf9 	bl	2c202 <bt_att_out_of_sync_sent_on_fixed>
   2cc10:	2800      	cmp	r0, #0
   2cc12:	d0f4      	beq.n	2cbfe <bt_gatt_change_aware+0x44>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cc14:	f06f 0102 	mvn.w	r1, #2
   2cc18:	4620      	mov	r0, r4
   2cc1a:	f7ff fbae 	bl	2c37a <atomic_and>
		bt_att_clear_out_of_sync_sent(conn);
   2cc1e:	4628      	mov	r0, r5
   2cc20:	e7e6      	b.n	2cbf0 <bt_gatt_change_aware+0x36>

0002cc22 <ccc_delayed_store>:
{
   2cc22:	b570      	push	{r4, r5, r6, lr}
		struct bt_conn *conn = ccc_store->conn_list[i];
   2cc24:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2cc28:	4605      	mov	r5, r0
		if (!conn) {
   2cc2a:	b184      	cbz	r4, 2cc4e <ccc_delayed_store+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2cc2c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   2cc30:	7a20      	ldrb	r0, [r4, #8]
   2cc32:	4631      	mov	r1, r6
   2cc34:	f7fe fbaa 	bl	2b38c <bt_addr_le_is_bonded>
   2cc38:	b148      	cbz	r0, 2cc4e <ccc_delayed_store+0x2c>
			ccc_store->conn_list[i] = NULL;
   2cc3a:	2300      	movs	r3, #0
   2cc3c:	f845 3c08 	str.w	r3, [r5, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   2cc40:	7a20      	ldrb	r0, [r4, #8]
   2cc42:	4631      	mov	r1, r6
   2cc44:	f7ef ff1c 	bl	1ca80 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   2cc48:	4620      	mov	r0, r4
   2cc4a:	f7eb fd21 	bl	18690 <bt_conn_unref>
}
   2cc4e:	bd70      	pop	{r4, r5, r6, pc}

0002cc50 <smp_pairing_req>:
}
   2cc50:	2007      	movs	r0, #7
   2cc52:	4770      	bx	lr

0002cc54 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2cc54:	f3bf 8f5b 	dmb	ish
   2cc58:	6800      	ldr	r0, [r0, #0]
   2cc5a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2cc5e:	4108      	asrs	r0, r1
}
   2cc60:	f000 0001 	and.w	r0, r0, #1
   2cc64:	4770      	bx	lr

0002cc66 <update_keys_check>:
{
   2cc66:	b510      	push	{r4, lr}
   2cc68:	4603      	mov	r3, r0
	if (!keys ||
   2cc6a:	b1d9      	cbz	r1, 2cca4 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2cc6c:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2cc6e:	f010 0f24 	tst.w	r0, #36	; 0x24
   2cc72:	d017      	beq.n	2cca4 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2cc74:	7d1a      	ldrb	r2, [r3, #20]
   2cc76:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2cc78:	7b09      	ldrb	r1, [r1, #12]
   2cc7a:	42a2      	cmp	r2, r4
   2cc7c:	bf28      	it	cs
   2cc7e:	4622      	movcs	r2, r4
   2cc80:	4291      	cmp	r1, r2
   2cc82:	d901      	bls.n	2cc88 <update_keys_check+0x22>
			return false;
   2cc84:	2000      	movs	r0, #0
}
   2cc86:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2cc88:	0682      	lsls	r2, r0, #26
   2cc8a:	d404      	bmi.n	2cc96 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2cc8c:	7a18      	ldrb	r0, [r3, #8]
   2cc8e:	3800      	subs	r0, #0
   2cc90:	bf18      	it	ne
   2cc92:	2001      	movne	r0, #1
   2cc94:	e7f7      	b.n	2cc86 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2cc96:	2105      	movs	r1, #5
   2cc98:	1d18      	adds	r0, r3, #4
   2cc9a:	f7ff ffdb 	bl	2cc54 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2cc9e:	2800      	cmp	r0, #0
   2cca0:	d1f4      	bne.n	2cc8c <update_keys_check+0x26>
   2cca2:	e7ef      	b.n	2cc84 <update_keys_check+0x1e>
	return true;
   2cca4:	2001      	movs	r0, #1
   2cca6:	e7ee      	b.n	2cc86 <update_keys_check+0x20>

0002cca8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cca8:	2301      	movs	r3, #1
   2ccaa:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2ccac:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ccae:	f3bf 8f5b 	dmb	ish
   2ccb2:	e850 2f00 	ldrex	r2, [r0]
   2ccb6:	401a      	ands	r2, r3
   2ccb8:	e840 2100 	strex	r1, r2, [r0]
   2ccbc:	2900      	cmp	r1, #0
   2ccbe:	d1f8      	bne.n	2ccb2 <atomic_clear_bit+0xa>
   2ccc0:	f3bf 8f5b 	dmb	ish
}
   2ccc4:	4770      	bx	lr

0002ccc6 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ccc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ccc8:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ccca:	2200      	movs	r2, #0
   2cccc:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2ccce:	4604      	mov	r4, r0
   2ccd0:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2ccd2:	460a      	mov	r2, r1
   2ccd4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2ccd8:	2106      	movs	r1, #6
   2ccda:	f7fe fd61 	bl	2b7a0 <bt_l2cap_send_cb>
   2ccde:	b128      	cbz	r0, 2ccec <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2cce0:	4628      	mov	r0, r5
}
   2cce2:	b003      	add	sp, #12
   2cce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2cce8:	f7f2 b8ba 	b.w	1ee60 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2ccec:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ccf0:	2300      	movs	r3, #0
   2ccf2:	f504 70c0 	add.w	r0, r4, #384	; 0x180
}
   2ccf6:	b003      	add	sp, #12
   2ccf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2ccfc:	f7f8 b866 	b.w	24dcc <k_work_reschedule>

0002cd00 <smp_signing_info>:
static uint8_t smp_signing_info(struct bt_smp *smp, struct net_buf *buf)
   2cd00:	2007      	movs	r0, #7
   2cd02:	4770      	bx	lr

0002cd04 <atomic_test_and_clear_bit>:
{
   2cd04:	b530      	push	{r4, r5, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cd06:	2301      	movs	r3, #1
   2cd08:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2cd0c:	43ca      	mvns	r2, r1
   2cd0e:	f3bf 8f5b 	dmb	ish
   2cd12:	e850 3f00 	ldrex	r3, [r0]
   2cd16:	ea03 0402 	and.w	r4, r3, r2
   2cd1a:	e840 4500 	strex	r5, r4, [r0]
   2cd1e:	2d00      	cmp	r5, #0
   2cd20:	d1f7      	bne.n	2cd12 <atomic_test_and_clear_bit+0xe>
   2cd22:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2cd26:	4219      	tst	r1, r3
}
   2cd28:	bf14      	ite	ne
   2cd2a:	2001      	movne	r0, #1
   2cd2c:	2000      	moveq	r0, #0
   2cd2e:	bd30      	pop	{r4, r5, pc}

0002cd30 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2cd30:	2301      	movs	r3, #1
   2cd32:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cd34:	f3bf 8f5b 	dmb	ish
   2cd38:	e850 2f00 	ldrex	r2, [r0]
   2cd3c:	431a      	orrs	r2, r3
   2cd3e:	e840 2100 	strex	r1, r2, [r0]
   2cd42:	2900      	cmp	r1, #0
   2cd44:	d1f8      	bne.n	2cd38 <atomic_set_bit+0x8>
   2cd46:	f3bf 8f5b 	dmb	ish
}
   2cd4a:	4770      	bx	lr

0002cd4c <smp_keypress_notif>:
{
   2cd4c:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2cd4e:	210e      	movs	r1, #14
   2cd50:	f7ff ffee 	bl	2cd30 <atomic_set_bit>
}
   2cd54:	2000      	movs	r0, #0
   2cd56:	bd08      	pop	{r3, pc}

0002cd58 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2cd58:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2cd5a:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2cd5c:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2cd5e:	4628      	mov	r0, r5
   2cd60:	2104      	movs	r1, #4
   2cd62:	f7ff ff77 	bl	2cc54 <atomic_test_bit>
   2cd66:	b168      	cbz	r0, 2cd84 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   2cd68:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2cd6a:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   2cd6c:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2cd6e:	4608      	mov	r0, r1
   2cd70:	f7fe fd13 	bl	2b79a <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2cd74:	4604      	mov	r4, r0
   2cd76:	b940      	cbnz	r0, 2cd8a <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2cd78:	2104      	movs	r1, #4
   2cd7a:	4628      	mov	r0, r5
   2cd7c:	f7ff ffd8 	bl	2cd30 <atomic_set_bit>
}
   2cd80:	4620      	mov	r0, r4
   2cd82:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   2cd84:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2cd88:	e7ef      	b.n	2cd6a <smp_create_pdu.constprop.0+0x12>
	return net_buf_simple_add(&buf->b, len);
   2cd8a:	2101      	movs	r1, #1
   2cd8c:	300c      	adds	r0, #12
   2cd8e:	f7f2 f96d 	bl	1f06c <net_buf_simple_add>
	hdr->code = op;
   2cd92:	7006      	strb	r6, [r0, #0]
	return buf;
   2cd94:	e7f4      	b.n	2cd80 <smp_create_pdu.constprop.0+0x28>

0002cd96 <smp_send_pairing_random>:
{
   2cd96:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2cd98:	2104      	movs	r1, #4
{
   2cd9a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2cd9c:	f7ff ffdc 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2cda0:	4604      	mov	r4, r0
   2cda2:	b178      	cbz	r0, 2cdc4 <smp_send_pairing_random+0x2e>
   2cda4:	2110      	movs	r1, #16
   2cda6:	300c      	adds	r0, #12
   2cda8:	f7f2 f960 	bl	1f06c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   2cdac:	2210      	movs	r2, #16
   2cdae:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2cdb2:	f7fe f920 	bl	2aff6 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   2cdb6:	4628      	mov	r0, r5
   2cdb8:	2200      	movs	r2, #0
   2cdba:	4621      	mov	r1, r4
   2cdbc:	f7ff ff83 	bl	2ccc6 <smp_send.constprop.0>
	return 0;
   2cdc0:	2000      	movs	r0, #0
}
   2cdc2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2cdc4:	2008      	movs	r0, #8
   2cdc6:	e7fc      	b.n	2cdc2 <smp_send_pairing_random+0x2c>

0002cdc8 <smp_pairing_confirm>:
{
   2cdc8:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2cdca:	68cd      	ldr	r5, [r1, #12]
{
   2cdcc:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2cdce:	210b      	movs	r1, #11
   2cdd0:	3004      	adds	r0, #4
   2cdd2:	f7ff ff69 	bl	2cca8 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2cdd6:	2210      	movs	r2, #16
   2cdd8:	4629      	mov	r1, r5
   2cdda:	f104 0017 	add.w	r0, r4, #23
   2cdde:	f7fe f90a 	bl	2aff6 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2cde2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2cde6:	78db      	ldrb	r3, [r3, #3]
   2cde8:	b93b      	cbnz	r3, 2cdfa <smp_pairing_confirm+0x32>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   2cdea:	4620      	mov	r0, r4
   2cdec:	2104      	movs	r1, #4
   2cdee:	f7ff ff9f 	bl	2cd30 <atomic_set_bit>
}
   2cdf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return smp_send_pairing_random(smp);
   2cdf6:	f7ff bfce 	b.w	2cd96 <smp_send_pairing_random>
}
   2cdfa:	2000      	movs	r0, #0
   2cdfc:	bd38      	pop	{r3, r4, r5, pc}

0002cdfe <smp_reset>:
{
   2cdfe:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ce00:	1d03      	adds	r3, r0, #4
   2ce02:	4604      	mov	r4, r0
   2ce04:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2ce06:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
   2ce0a:	f3bf 8f5b 	dmb	ish
   2ce0e:	e853 2f00 	ldrex	r2, [r3]
   2ce12:	e843 5100 	strex	r1, r5, [r3]
   2ce16:	2900      	cmp	r1, #0
   2ce18:	d1f9      	bne.n	2ce0e <smp_reset+0x10>
   2ce1a:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2ce1e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   2ce22:	f7f7 ffd9 	bl	24dd8 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2ce26:	7225      	strb	r5, [r4, #8]
   2ce28:	f3bf 8f5b 	dmb	ish
   2ce2c:	e854 3f00 	ldrex	r3, [r4]
   2ce30:	e844 5200 	strex	r2, r5, [r4]
   2ce34:	2a00      	cmp	r2, #0
   2ce36:	d1f9      	bne.n	2ce2c <smp_reset+0x2e>
   2ce38:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2ce3c:	78f3      	ldrb	r3, [r6, #3]
   2ce3e:	b92b      	cbnz	r3, 2ce4c <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2ce40:	4620      	mov	r0, r4
   2ce42:	210b      	movs	r1, #11
}
   2ce44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2ce48:	f7ff bf72 	b.w	2cd30 <atomic_set_bit>
}
   2ce4c:	bd70      	pop	{r4, r5, r6, pc}

0002ce4e <smp_c1>:
{
   2ce4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ce52:	b089      	sub	sp, #36	; 0x24
   2ce54:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2ce58:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2ce5a:	783b      	ldrb	r3, [r7, #0]
{
   2ce5c:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   2ce5e:	f88d 3000 	strb.w	r3, [sp]
{
   2ce62:	460c      	mov	r4, r1
	p1[1] = ra->type;
   2ce64:	f898 3000 	ldrb.w	r3, [r8]
   2ce68:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2ce6c:	4611      	mov	r1, r2
   2ce6e:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2ce70:	2207      	movs	r2, #7
   2ce72:	f10d 0002 	add.w	r0, sp, #2
   2ce76:	f7fe f8be 	bl	2aff6 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2ce7a:	2207      	movs	r2, #7
   2ce7c:	4649      	mov	r1, r9
   2ce7e:	f10d 0009 	add.w	r0, sp, #9
   2ce82:	f7fe f8b8 	bl	2aff6 <memcpy>
	while (len--) {
   2ce86:	f104 0010 	add.w	r0, r4, #16
	memcpy(p1 + 9, pres, 7);
   2ce8a:	462a      	mov	r2, r5
   2ce8c:	4669      	mov	r1, sp
		*r++ = *p++ ^ *q++;
   2ce8e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2ce92:	f811 cb01 	ldrb.w	ip, [r1], #1
	while (len--) {
   2ce96:	4284      	cmp	r4, r0
		*r++ = *p++ ^ *q++;
   2ce98:	ea83 030c 	eor.w	r3, r3, ip
   2ce9c:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   2cea0:	d1f5      	bne.n	2ce8e <smp_c1+0x40>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2cea2:	462a      	mov	r2, r5
   2cea4:	4629      	mov	r1, r5
   2cea6:	4630      	mov	r0, r6
   2cea8:	f000 fdc9 	bl	2da3e <bt_encrypt_le>
	if (err) {
   2ceac:	4604      	mov	r4, r0
   2ceae:	bb20      	cbnz	r0, 2cefa <smp_c1+0xac>
	memcpy(p2, ra->a.val, 6);
   2ceb0:	2206      	movs	r2, #6
   2ceb2:	f108 0101 	add.w	r1, r8, #1
   2ceb6:	a804      	add	r0, sp, #16
   2ceb8:	f7fe f89d 	bl	2aff6 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   2cebc:	2206      	movs	r2, #6
   2cebe:	1c79      	adds	r1, r7, #1
   2cec0:	f10d 0016 	add.w	r0, sp, #22
   2cec4:	f7fe f897 	bl	2aff6 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   2cec8:	2204      	movs	r2, #4
   2ceca:	4621      	mov	r1, r4
   2cecc:	a807      	add	r0, sp, #28
   2cece:	f7fe f89d 	bl	2b00c <memset>
	while (len--) {
   2ced2:	f105 0010 	add.w	r0, r5, #16
	(void)memset(p2 + 12, 0, 4);
   2ced6:	462a      	mov	r2, r5
   2ced8:	ab04      	add	r3, sp, #16
		*r++ = *p++ ^ *q++;
   2ceda:	f812 1b01 	ldrb.w	r1, [r2], #1
   2cede:	f813 4b01 	ldrb.w	r4, [r3], #1
	while (len--) {
   2cee2:	4282      	cmp	r2, r0
		*r++ = *p++ ^ *q++;
   2cee4:	ea81 0104 	eor.w	r1, r1, r4
   2cee8:	f802 1c01 	strb.w	r1, [r2, #-1]
	while (len--) {
   2ceec:	d1f5      	bne.n	2ceda <smp_c1+0x8c>
	return bt_encrypt_le(k, enc_data, enc_data);
   2ceee:	462a      	mov	r2, r5
   2cef0:	4629      	mov	r1, r5
   2cef2:	4630      	mov	r0, r6
   2cef4:	f000 fda3 	bl	2da3e <bt_encrypt_le>
   2cef8:	4604      	mov	r4, r0
}
   2cefa:	4620      	mov	r0, r4
   2cefc:	b009      	add	sp, #36	; 0x24
   2cefe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002cf02 <legacy_send_pairing_confirm>:
{
   2cf02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2cf04:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2cf06:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
{
   2cf0a:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2cf0c:	f7ff ff24 	bl	2cd58 <smp_create_pdu.constprop.0>
	if (!buf) {
   2cf10:	4606      	mov	r6, r0
   2cf12:	b1c0      	cbz	r0, 2cf46 <legacy_send_pairing_confirm+0x44>
   2cf14:	2110      	movs	r1, #16
   2cf16:	300c      	adds	r0, #12
   2cf18:	f7f2 f8a8 	bl	1f06c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2cf1c:	f104 039e 	add.w	r3, r4, #158	; 0x9e
   2cf20:	3497      	adds	r4, #151	; 0x97
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2cf22:	9002      	str	r0, [sp, #8]
   2cf24:	9301      	str	r3, [sp, #4]
   2cf26:	9400      	str	r4, [sp, #0]
   2cf28:	f105 0310 	add.w	r3, r5, #16
   2cf2c:	f105 0209 	add.w	r2, r5, #9
   2cf30:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2cf34:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2cf38:	f7ff ff89 	bl	2ce4e <smp_c1>
   2cf3c:	4604      	mov	r4, r0
   2cf3e:	b128      	cbz	r0, 2cf4c <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
   2cf40:	4630      	mov	r0, r6
   2cf42:	f7f1 ff8d 	bl	1ee60 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2cf46:	2008      	movs	r0, #8
}
   2cf48:	b004      	add	sp, #16
   2cf4a:	bd70      	pop	{r4, r5, r6, pc}
	smp_send(smp, buf, NULL, NULL);
   2cf4c:	4602      	mov	r2, r0
   2cf4e:	4631      	mov	r1, r6
   2cf50:	4628      	mov	r0, r5
   2cf52:	f7ff feb8 	bl	2ccc6 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2cf56:	1d28      	adds	r0, r5, #4
   2cf58:	4621      	mov	r1, r4
   2cf5a:	f7ff fea5 	bl	2cca8 <atomic_clear_bit>
	return 0;
   2cf5e:	4620      	mov	r0, r4
   2cf60:	e7f2      	b.n	2cf48 <legacy_send_pairing_confirm+0x46>

0002cf62 <bt_smp_request_ltk>:
{
   2cf62:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2cf66:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2cf68:	e9cd 2300 	strd	r2, r3, [sp]
   2cf6c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2cf6e:	f7ef febd 	bl	1ccec <smp_chan_get>
	if (!smp) {
   2cf72:	4605      	mov	r5, r0
   2cf74:	2800      	cmp	r0, #0
   2cf76:	d07c      	beq.n	2d072 <bt_smp_request_ltk+0x110>
	if (ediv == 0U && rand == 0U &&
   2cf78:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2cf7c:	1d06      	adds	r6, r0, #4
	if (ediv == 0U && rand == 0U &&
   2cf7e:	f1b8 0f00 	cmp.w	r8, #0
   2cf82:	d128      	bne.n	2cfd6 <bt_smp_request_ltk+0x74>
   2cf84:	e9dd 3200 	ldrd	r3, r2, [sp]
   2cf88:	4313      	orrs	r3, r2
   2cf8a:	d124      	bne.n	2cfd6 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2cf8c:	2103      	movs	r1, #3
   2cf8e:	4630      	mov	r0, r6
   2cf90:	f7ff fe60 	bl	2cc54 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2cf94:	b1f8      	cbz	r0, 2cfd6 <bt_smp_request_ltk+0x74>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2cf96:	2101      	movs	r1, #1
   2cf98:	4630      	mov	r0, r6
   2cf9a:	f7ff fe5b 	bl	2cc54 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2cf9e:	b1d0      	cbz	r0, 2cfd6 <bt_smp_request_ltk+0x74>
	return MIN(req->max_key_size, rsp->max_key_size);
   2cfa0:	7d2c      	ldrb	r4, [r5, #20]
   2cfa2:	7b6b      	ldrb	r3, [r5, #13]
   2cfa4:	429c      	cmp	r4, r3
   2cfa6:	bf28      	it	cs
   2cfa8:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   2cfaa:	4622      	mov	r2, r4
   2cfac:	f105 0147 	add.w	r1, r5, #71	; 0x47
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2cfb0:	4638      	mov	r0, r7
   2cfb2:	f7fe f820 	bl	2aff6 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2cfb6:	2c0f      	cmp	r4, #15
   2cfb8:	d805      	bhi.n	2cfc6 <bt_smp_request_ltk+0x64>
			(void)memset(ltk + enc_size, 0,
   2cfba:	f1c4 0210 	rsb	r2, r4, #16
   2cfbe:	4641      	mov	r1, r8
   2cfc0:	1938      	adds	r0, r7, r4
   2cfc2:	f7fe f823 	bl	2b00c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2cfc6:	4630      	mov	r0, r6
   2cfc8:	2101      	movs	r1, #1
   2cfca:	f7ff feb1 	bl	2cd30 <atomic_set_bit>
		return true;
   2cfce:	2001      	movs	r0, #1
}
   2cfd0:	b002      	add	sp, #8
   2cfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!conn->le.keys) {
   2cfd6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2cfda:	b983      	cbnz	r3, 2cffe <bt_smp_request_ltk+0x9c>
					     &conn->le.dst);
   2cfdc:	f104 0890 	add.w	r8, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2cfe0:	7a21      	ldrb	r1, [r4, #8]
   2cfe2:	4642      	mov	r2, r8
   2cfe4:	2020      	movs	r0, #32
   2cfe6:	f7f1 fad7 	bl	1e598 <bt_keys_find>
   2cfea:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2cfee:	b930      	cbnz	r0, 2cffe <bt_smp_request_ltk+0x9c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2cff0:	7a21      	ldrb	r1, [r4, #8]
   2cff2:	4642      	mov	r2, r8
   2cff4:	2001      	movs	r0, #1
   2cff6:	f7f1 facf 	bl	1e598 <bt_keys_find>
   2cffa:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2cffe:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d002:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
	if (ediv == 0U && rand == 0U &&
   2d006:	f1b8 0f00 	cmp.w	r8, #0
   2d00a:	d10c      	bne.n	2d026 <bt_smp_request_ltk+0xc4>
   2d00c:	e9dd 3200 	ldrd	r3, r2, [sp]
   2d010:	4313      	orrs	r3, r2
   2d012:	d108      	bne.n	2d026 <bt_smp_request_ltk+0xc4>
   2d014:	b300      	cbz	r0, 2d058 <bt_smp_request_ltk+0xf6>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2d016:	89c3      	ldrh	r3, [r0, #14]
   2d018:	069a      	lsls	r2, r3, #26
   2d01a:	d505      	bpl.n	2d028 <bt_smp_request_ltk+0xc6>
		enc_size = conn->le.keys->enc_size;
   2d01c:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   2d01e:	f100 011a 	add.w	r1, r0, #26
   2d022:	4622      	mov	r2, r4
   2d024:	e7c4      	b.n	2cfb0 <bt_smp_request_ltk+0x4e>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d026:	b1b8      	cbz	r0, 2d058 <bt_smp_request_ltk+0xf6>
   2d028:	89c3      	ldrh	r3, [r0, #14]
   2d02a:	07db      	lsls	r3, r3, #31
   2d02c:	d514      	bpl.n	2d058 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d02e:	2208      	movs	r2, #8
   2d030:	4669      	mov	r1, sp
   2d032:	3040      	adds	r0, #64	; 0x40
   2d034:	f7fd ffb8 	bl	2afa8 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2d038:	b970      	cbnz	r0, 2d058 <bt_smp_request_ltk+0xf6>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2d03a:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2d03e:	2202      	movs	r2, #2
   2d040:	a908      	add	r1, sp, #32
   2d042:	3048      	adds	r0, #72	; 0x48
   2d044:	f7fd ffb0 	bl	2afa8 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2d048:	4680      	mov	r8, r0
   2d04a:	b928      	cbnz	r0, 2d058 <bt_smp_request_ltk+0xf6>
		enc_size = conn->le.keys->enc_size;
   2d04c:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2d050:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   2d052:	314a      	adds	r1, #74	; 0x4a
   2d054:	4622      	mov	r2, r4
   2d056:	e7ab      	b.n	2cfb0 <bt_smp_request_ltk+0x4e>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d058:	210f      	movs	r1, #15
   2d05a:	4630      	mov	r0, r6
   2d05c:	f7ff fdfa 	bl	2cc54 <atomic_test_bit>
   2d060:	b120      	cbz	r0, 2d06c <bt_smp_request_ltk+0x10a>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2d062:	2202      	movs	r2, #2
   2d064:	2106      	movs	r1, #6
   2d066:	4620      	mov	r0, r4
   2d068:	f7eb fd62 	bl	18b30 <bt_conn_security_changed>
	smp_reset(smp);
   2d06c:	4628      	mov	r0, r5
   2d06e:	f7ff fec6 	bl	2cdfe <smp_reset>
		return false;
   2d072:	2000      	movs	r0, #0
   2d074:	e7ac      	b.n	2cfd0 <bt_smp_request_ltk+0x6e>

0002d076 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   2d076:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d07a:	4770      	bx	lr

0002d07c <bt_smp_irk_get>:
{
   2d07c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   2d07e:	2500      	movs	r5, #0
{
   2d080:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2d082:	2210      	movs	r2, #16
   2d084:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2d086:	e9cd 5500 	strd	r5, r5, [sp]
   2d08a:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   2d08e:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2d090:	f7fd ff8a 	bl	2afa8 <memcmp>
   2d094:	b180      	cbz	r0, 2d0b8 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2d096:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2d098:	220c      	movs	r2, #12
   2d09a:	4629      	mov	r1, r5
   2d09c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   2d09e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2d0a0:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2d0a2:	70e5      	strb	r5, [r4, #3]
   2d0a4:	1d20      	adds	r0, r4, #4
   2d0a6:	f7fd ffb1 	bl	2b00c <memset>
	err = bt_encrypt_le(key, res, res);
   2d0aa:	4622      	mov	r2, r4
   2d0ac:	4621      	mov	r1, r4
   2d0ae:	4630      	mov	r0, r6
   2d0b0:	f000 fcc5 	bl	2da3e <bt_encrypt_le>
}
   2d0b4:	b004      	add	sp, #16
   2d0b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2d0b8:	f06f 0015 	mvn.w	r0, #21
   2d0bc:	e7fa      	b.n	2d0b4 <bt_smp_irk_get+0x38>

0002d0be <bt_smp_start_security>:
{
   2d0be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (conn->role) {
   2d0c0:	78c3      	ldrb	r3, [r0, #3]
{
   2d0c2:	4604      	mov	r4, r0
	switch (conn->role) {
   2d0c4:	2b00      	cmp	r3, #0
   2d0c6:	d15f      	bne.n	2d188 <bt_smp_start_security+0xca>
		smp = smp_chan_get(conn);
   2d0c8:	f7ef fe10 	bl	1ccec <smp_chan_get>
		if (!smp) {
   2d0cc:	4605      	mov	r5, r0
   2d0ce:	2800      	cmp	r0, #0
   2d0d0:	d05d      	beq.n	2d18e <bt_smp_start_security+0xd0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2d0d2:	1d06      	adds	r6, r0, #4
   2d0d4:	2103      	movs	r1, #3
   2d0d6:	4630      	mov	r0, r6
   2d0d8:	f7ff fdbc 	bl	2cc54 <atomic_test_bit>
   2d0dc:	b120      	cbz	r0, 2d0e8 <bt_smp_start_security+0x2a>
			return -EBUSY;
   2d0de:	f06f 040f 	mvn.w	r4, #15
}
   2d0e2:	4620      	mov	r0, r4
   2d0e4:	b003      	add	sp, #12
   2d0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2d0e8:	2101      	movs	r1, #1
   2d0ea:	4630      	mov	r0, r6
   2d0ec:	f7ff fdb2 	bl	2cc54 <atomic_test_bit>
   2d0f0:	2800      	cmp	r0, #0
   2d0f2:	d1f4      	bne.n	2d0de <bt_smp_start_security+0x20>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2d0f4:	210b      	movs	r1, #11
   2d0f6:	1d20      	adds	r0, r4, #4
   2d0f8:	f7ff fdac 	bl	2cc54 <atomic_test_bit>
   2d0fc:	b128      	cbz	r0, 2d10a <bt_smp_start_security+0x4c>
			return smp_send_pairing_req(conn);
   2d0fe:	4620      	mov	r0, r4
}
   2d100:	b003      	add	sp, #12
   2d102:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			return smp_send_pairing_req(conn);
   2d106:	f7f0 b80b 	b.w	1d120 <smp_send_pairing_req>
	if (!conn->le.keys) {
   2d10a:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2d10e:	b983      	cbnz	r3, 2d132 <bt_smp_start_security+0x74>
						     conn->id, &conn->le.dst);
   2d110:	f104 0790 	add.w	r7, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2d114:	7a21      	ldrb	r1, [r4, #8]
   2d116:	463a      	mov	r2, r7
   2d118:	2020      	movs	r0, #32
   2d11a:	f7f1 fa3d 	bl	1e598 <bt_keys_find>
   2d11e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
		if (!conn->le.keys) {
   2d122:	b930      	cbnz	r0, 2d132 <bt_smp_start_security+0x74>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2d124:	7a21      	ldrb	r1, [r4, #8]
   2d126:	463a      	mov	r2, r7
   2d128:	2004      	movs	r0, #4
   2d12a:	f7f1 fa35 	bl	1e598 <bt_keys_find>
   2d12e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
	if (!conn->le.keys ||
   2d132:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
   2d136:	2900      	cmp	r1, #0
   2d138:	d0e1      	beq.n	2d0fe <bt_smp_start_security+0x40>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   2d13a:	89cb      	ldrh	r3, [r1, #14]
	if (!conn->le.keys ||
   2d13c:	f013 0f24 	tst.w	r3, #36	; 0x24
   2d140:	d0dd      	beq.n	2d0fe <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   2d142:	7aa2      	ldrb	r2, [r4, #10]
   2d144:	2a02      	cmp	r2, #2
   2d146:	d909      	bls.n	2d15c <bt_smp_start_security+0x9e>
   2d148:	7b48      	ldrb	r0, [r1, #13]
   2d14a:	07c0      	lsls	r0, r0, #31
   2d14c:	d5d7      	bpl.n	2d0fe <bt_smp_start_security+0x40>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   2d14e:	2a03      	cmp	r2, #3
   2d150:	d004      	beq.n	2d15c <bt_smp_start_security+0x9e>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   2d152:	069b      	lsls	r3, r3, #26
   2d154:	d5d3      	bpl.n	2d0fe <bt_smp_start_security+0x40>
   2d156:	7b0b      	ldrb	r3, [r1, #12]
   2d158:	2b10      	cmp	r3, #16
   2d15a:	d1d0      	bne.n	2d0fe <bt_smp_start_security+0x40>
		err = bt_conn_le_start_encryption(conn,
   2d15c:	7b0b      	ldrb	r3, [r1, #12]
   2d15e:	9300      	str	r3, [sp, #0]
   2d160:	f101 0218 	add.w	r2, r1, #24
   2d164:	f101 031a 	add.w	r3, r1, #26
   2d168:	4620      	mov	r0, r4
   2d16a:	3110      	adds	r1, #16
   2d16c:	f7fe f9db 	bl	2b526 <bt_conn_le_start_encryption>
		if (err) {
   2d170:	4604      	mov	r4, r0
   2d172:	2800      	cmp	r0, #0
   2d174:	d1b5      	bne.n	2d0e2 <bt_smp_start_security+0x24>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2d176:	4628      	mov	r0, r5
   2d178:	210b      	movs	r1, #11
   2d17a:	f7ff fdd9 	bl	2cd30 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2d17e:	2101      	movs	r1, #1
   2d180:	4630      	mov	r0, r6
   2d182:	f7ff fdd5 	bl	2cd30 <atomic_set_bit>
		return 0;
   2d186:	e7ac      	b.n	2d0e2 <bt_smp_start_security+0x24>
		return -EINVAL;
   2d188:	f06f 0415 	mvn.w	r4, #21
   2d18c:	e7a9      	b.n	2d0e2 <bt_smp_start_security+0x24>
			return -ENOTCONN;
   2d18e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   2d192:	e7a6      	b.n	2d0e2 <bt_smp_start_security+0x24>

0002d194 <bt_smp_dhkey_ready>:
{
   2d194:	b570      	push	{r4, r5, r6, lr}
   2d196:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2d198:	2008      	movs	r0, #8
   2d19a:	f7ef fd55 	bl	1cc48 <smp_find>
	if (smp) {
   2d19e:	4604      	mov	r4, r0
   2d1a0:	b1b8      	cbz	r0, 2d1d2 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2d1a2:	1d05      	adds	r5, r0, #4
   2d1a4:	2108      	movs	r1, #8
   2d1a6:	4628      	mov	r0, r5
   2d1a8:	f7ff fd7e 	bl	2cca8 <atomic_clear_bit>
	if (!dhkey) {
   2d1ac:	b3b6      	cbz	r6, 2d21c <bt_smp_dhkey_ready+0x88>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2d1ae:	2107      	movs	r1, #7
   2d1b0:	f7ff fd7a 	bl	2cca8 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   2d1b4:	4631      	mov	r1, r6
   2d1b6:	2220      	movs	r2, #32
   2d1b8:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2d1bc:	f7fd ff1b 	bl	2aff6 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2d1c0:	210a      	movs	r1, #10
   2d1c2:	4628      	mov	r0, r5
   2d1c4:	f7ff fd46 	bl	2cc54 <atomic_test_bit>
   2d1c8:	b168      	cbz	r0, 2d1e6 <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d1ca:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d1cc:	4628      	mov	r0, r5
   2d1ce:	f7ff fdaf 	bl	2cd30 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2d1d2:	2007      	movs	r0, #7
   2d1d4:	f7ef fd38 	bl	1cc48 <smp_find>
		if (smp) {
   2d1d8:	4604      	mov	r4, r0
   2d1da:	b118      	cbz	r0, 2d1e4 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   2d1dc:	f7ef fe58 	bl	1ce90 <smp_dhkey_generate>
			if (err) {
   2d1e0:	4601      	mov	r1, r0
   2d1e2:	b9b8      	cbnz	r0, 2d214 <bt_smp_dhkey_ready+0x80>
}
   2d1e4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2d1e6:	2110      	movs	r1, #16
   2d1e8:	4628      	mov	r0, r5
   2d1ea:	f7ff fd33 	bl	2cc54 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2d1ee:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2d1f0:	2800      	cmp	r0, #0
   2d1f2:	d1eb      	bne.n	2d1cc <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2d1f4:	4628      	mov	r0, r5
   2d1f6:	f7ff fd2d 	bl	2cc54 <atomic_test_bit>
   2d1fa:	2800      	cmp	r0, #0
   2d1fc:	d0e9      	beq.n	2d1d2 <bt_smp_dhkey_ready+0x3e>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2d1fe:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2d202:	78db      	ldrb	r3, [r3, #3]
   2d204:	2b00      	cmp	r3, #0
   2d206:	d1e4      	bne.n	2d1d2 <bt_smp_dhkey_ready+0x3e>
			return compute_and_send_central_dhcheck(smp);
   2d208:	4620      	mov	r0, r4
   2d20a:	f7f0 fa2f 	bl	1d66c <compute_and_send_central_dhcheck>
		if (err) {
   2d20e:	4601      	mov	r1, r0
   2d210:	2800      	cmp	r0, #0
   2d212:	d0de      	beq.n	2d1d2 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   2d214:	4620      	mov	r0, r4
   2d216:	f7f0 fdcb 	bl	1ddb0 <smp_error>
   2d21a:	e7da      	b.n	2d1d2 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2d21c:	210b      	movs	r1, #11
   2d21e:	e7f9      	b.n	2d214 <bt_smp_dhkey_ready+0x80>

0002d220 <smp_id_sent>:
	if (!err) {
   2d220:	b912      	cbnz	r2, 2d228 <smp_id_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   2d222:	2102      	movs	r1, #2
   2d224:	f7f0 bf5a 	b.w	1e0dc <smp_check_complete>
}
   2d228:	4770      	bx	lr

0002d22a <smp_ident_sent>:
	if (!err) {
   2d22a:	b912      	cbnz	r2, 2d232 <smp_ident_sent+0x8>
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   2d22c:	2101      	movs	r1, #1
   2d22e:	f7f0 bf55 	b.w	1e0dc <smp_check_complete>
}
   2d232:	4770      	bx	lr

0002d234 <bt_smp_disconnected>:
{
   2d234:	b570      	push	{r4, r5, r6, lr}
   2d236:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2d238:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2d23c:	f850 3b94 	ldr.w	r3, [r0], #148
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d240:	3ce8      	subs	r4, #232	; 0xe8
	struct bt_keys *keys = chan->conn->le.keys;
   2d242:	f8d3 50bc 	ldr.w	r5, [r3, #188]	; 0xbc
	(void)k_work_cancel_delayable(&smp->work);
   2d246:	f7f7 fdc7 	bl	24dd8 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d24a:	2103      	movs	r1, #3
   2d24c:	4620      	mov	r0, r4
   2d24e:	f7ff fd01 	bl	2cc54 <atomic_test_bit>
   2d252:	b1a0      	cbz	r0, 2d27e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2d254:	2108      	movs	r1, #8
   2d256:	4630      	mov	r0, r6
   2d258:	f7f0 fd26 	bl	1dca8 <smp_pairing_complete>
	if (keys) {
   2d25c:	b13d      	cbz	r5, 2d26e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2d25e:	89eb      	ldrh	r3, [r5, #14]
   2d260:	b113      	cbz	r3, 2d268 <bt_smp_disconnected+0x34>
   2d262:	7b6b      	ldrb	r3, [r5, #13]
   2d264:	079b      	lsls	r3, r3, #30
   2d266:	d502      	bpl.n	2d26e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2d268:	4628      	mov	r0, r5
   2d26a:	f7f1 fa6b 	bl	1e744 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2d26e:	4630      	mov	r0, r6
   2d270:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
}
   2d274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2d278:	2100      	movs	r1, #0
   2d27a:	f7fd bec7 	b.w	2b00c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d27e:	2101      	movs	r1, #1
   2d280:	4620      	mov	r0, r4
   2d282:	f7ff fce7 	bl	2cc54 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2d286:	2800      	cmp	r0, #0
   2d288:	d1e4      	bne.n	2d254 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2d28a:	210f      	movs	r1, #15
   2d28c:	4620      	mov	r0, r4
   2d28e:	f7ff fce1 	bl	2cc54 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2d292:	2800      	cmp	r0, #0
   2d294:	d1de      	bne.n	2d254 <bt_smp_disconnected+0x20>
   2d296:	e7e1      	b.n	2d25c <bt_smp_disconnected+0x28>

0002d298 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2d298:	b510      	push	{r4, lr}
   2d29a:	1e43      	subs	r3, r0, #1
   2d29c:	f100 0210 	add.w	r2, r0, #16
   2d2a0:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2d2a2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2d2a6:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2d2aa:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2d2ac:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2d2ae:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2d2b0:	d1f7      	bne.n	2d2a2 <sys_mem_swap.constprop.0+0xa>
	}
}
   2d2b2:	bd10      	pop	{r4, pc}

0002d2b4 <bt_crypto_aes_cmac>:
{
   2d2b4:	b570      	push	{r4, r5, r6, lr}
   2d2b6:	b0c2      	sub	sp, #264	; 0x108
   2d2b8:	460d      	mov	r5, r1
   2d2ba:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2d2bc:	4601      	mov	r1, r0
   2d2be:	aa16      	add	r2, sp, #88	; 0x58
   2d2c0:	4668      	mov	r0, sp
{
   2d2c2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2d2c4:	f7fd fce2 	bl	2ac8c <tc_cmac_setup>
   2d2c8:	b918      	cbnz	r0, 2d2d2 <bt_crypto_aes_cmac+0x1e>
		return -EIO;
   2d2ca:	f06f 0004 	mvn.w	r0, #4
}
   2d2ce:	b042      	add	sp, #264	; 0x108
   2d2d0:	bd70      	pop	{r4, r5, r6, pc}
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2d2d2:	4632      	mov	r2, r6
   2d2d4:	4629      	mov	r1, r5
   2d2d6:	4668      	mov	r0, sp
   2d2d8:	f7fd fd03 	bl	2ace2 <tc_cmac_update>
   2d2dc:	2800      	cmp	r0, #0
   2d2de:	d0f4      	beq.n	2d2ca <bt_crypto_aes_cmac+0x16>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2d2e0:	4669      	mov	r1, sp
   2d2e2:	4620      	mov	r0, r4
   2d2e4:	f7fd fd67 	bl	2adb6 <tc_cmac_final>
   2d2e8:	2800      	cmp	r0, #0
   2d2ea:	d0ee      	beq.n	2d2ca <bt_crypto_aes_cmac+0x16>
	return 0;
   2d2ec:	2000      	movs	r0, #0
   2d2ee:	e7ee      	b.n	2d2ce <bt_crypto_aes_cmac+0x1a>

0002d2f0 <bt_crypto_f4>:
{
   2d2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d2f2:	b097      	sub	sp, #92	; 0x5c
   2d2f4:	4614      	mov	r4, r2
   2d2f6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2d2f8:	2220      	movs	r2, #32
   2d2fa:	4601      	mov	r1, r0
   2d2fc:	a805      	add	r0, sp, #20
{
   2d2fe:	461d      	mov	r5, r3
   2d300:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2d302:	f7f1 fb0b 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2d306:	2220      	movs	r2, #32
   2d308:	4631      	mov	r1, r6
   2d30a:	a80d      	add	r0, sp, #52	; 0x34
   2d30c:	f7f1 fb06 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2d310:	4621      	mov	r1, r4
   2d312:	2210      	movs	r2, #16
   2d314:	a801      	add	r0, sp, #4
	m[64] = z;
   2d316:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2d31a:	f7f1 faff 	bl	1e91c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   2d31e:	463b      	mov	r3, r7
   2d320:	2241      	movs	r2, #65	; 0x41
   2d322:	a905      	add	r1, sp, #20
   2d324:	a801      	add	r0, sp, #4
   2d326:	f7ff ffc5 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   2d32a:	4604      	mov	r4, r0
   2d32c:	b910      	cbnz	r0, 2d334 <bt_crypto_f4+0x44>
	sys_mem_swap(res, 16);
   2d32e:	4638      	mov	r0, r7
   2d330:	f7ff ffb2 	bl	2d298 <sys_mem_swap.constprop.0>
}
   2d334:	4620      	mov	r0, r4
   2d336:	b017      	add	sp, #92	; 0x5c
   2d338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d33a <bt_crypto_f6>:
{
   2d33a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d33c:	b097      	sub	sp, #92	; 0x5c
   2d33e:	4605      	mov	r5, r0
   2d340:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2d342:	a805      	add	r0, sp, #20
   2d344:	2210      	movs	r2, #16
{
   2d346:	461c      	mov	r4, r3
   2d348:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   2d34a:	f7f1 fae7 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2d34e:	2210      	movs	r2, #16
   2d350:	4631      	mov	r1, r6
   2d352:	a809      	add	r0, sp, #36	; 0x24
   2d354:	f7f1 fae2 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2d358:	4621      	mov	r1, r4
   2d35a:	2210      	movs	r2, #16
   2d35c:	a80d      	add	r0, sp, #52	; 0x34
   2d35e:	f7f1 fadd 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2d362:	991c      	ldr	r1, [sp, #112]	; 0x70
   2d364:	2203      	movs	r2, #3
   2d366:	a811      	add	r0, sp, #68	; 0x44
   2d368:	f7f1 fad8 	bl	1e91c <sys_memcpy_swap>
	m[51] = a1->type;
   2d36c:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2d36e:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d372:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2d376:	4621      	mov	r1, r4
   2d378:	2206      	movs	r2, #6
   2d37a:	a812      	add	r0, sp, #72	; 0x48
   2d37c:	f7fd fe3b 	bl	2aff6 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2d380:	4621      	mov	r1, r4
   2d382:	2206      	movs	r2, #6
   2d384:	a812      	add	r0, sp, #72	; 0x48
   2d386:	f7f1 fac9 	bl	1e91c <sys_memcpy_swap>
	m[58] = a2->type;
   2d38a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2d38c:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d390:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2d394:	4621      	mov	r1, r4
   2d396:	2206      	movs	r2, #6
   2d398:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2d39c:	f7fd fe2b 	bl	2aff6 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2d3a0:	4621      	mov	r1, r4
   2d3a2:	2206      	movs	r2, #6
   2d3a4:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   2d3a8:	f7f1 fab8 	bl	1e91c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2d3ac:	2210      	movs	r2, #16
   2d3ae:	4629      	mov	r1, r5
   2d3b0:	a801      	add	r0, sp, #4
   2d3b2:	f7f1 fab3 	bl	1e91c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   2d3b6:	463b      	mov	r3, r7
   2d3b8:	2241      	movs	r2, #65	; 0x41
   2d3ba:	a905      	add	r1, sp, #20
   2d3bc:	a801      	add	r0, sp, #4
   2d3be:	f7ff ff79 	bl	2d2b4 <bt_crypto_aes_cmac>
	if (err) {
   2d3c2:	4604      	mov	r4, r0
   2d3c4:	b910      	cbnz	r0, 2d3cc <bt_crypto_f6+0x92>
	sys_mem_swap(check, 16);
   2d3c6:	4638      	mov	r0, r7
   2d3c8:	f7ff ff66 	bl	2d298 <sys_mem_swap.constprop.0>
}
   2d3cc:	4620      	mov	r0, r4
   2d3ce:	b017      	add	sp, #92	; 0x5c
   2d3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002d3d2 <fixed_data_unref>:
}
   2d3d2:	4770      	bx	lr

0002d3d4 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2d3d4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2d3d6:	6849      	ldr	r1, [r1, #4]
   2d3d8:	6809      	ldr	r1, [r1, #0]
   2d3da:	f7f1 bb91 	b.w	1eb00 <net_buf_alloc_len>

0002d3de <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   2d3de:	f7f7 b80d 	b.w	243fc <z_impl_k_queue_get>

0002d3e2 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2d3e2:	b292      	uxth	r2, r2
	buf->__buf = data;
   2d3e4:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2d3e6:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2d3e8:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2d3ea:	8082      	strh	r2, [r0, #4]
}
   2d3ec:	4770      	bx	lr

0002d3ee <net_buf_simple_pull_u8>:
{
   2d3ee:	b510      	push	{r4, lr}
	val = buf->data[0];
   2d3f0:	6803      	ldr	r3, [r0, #0]
   2d3f2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2d3f4:	2101      	movs	r1, #1
   2d3f6:	f7f1 fe05 	bl	1f004 <net_buf_simple_pull>
}
   2d3fa:	4620      	mov	r0, r4
   2d3fc:	bd10      	pop	{r4, pc}

0002d3fe <net_buf_simple_pull_le16>:
{
   2d3fe:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2d400:	6803      	ldr	r3, [r0, #0]
   2d402:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2d404:	2102      	movs	r1, #2
   2d406:	f7f1 fdfd 	bl	1f004 <net_buf_simple_pull>
}
   2d40a:	4620      	mov	r0, r4
   2d40c:	bd10      	pop	{r4, pc}

0002d40e <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2d40e:	6802      	ldr	r2, [r0, #0]
   2d410:	6880      	ldr	r0, [r0, #8]
}
   2d412:	1a10      	subs	r0, r2, r0
   2d414:	4770      	bx	lr

0002d416 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d416:	8883      	ldrh	r3, [r0, #4]
   2d418:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   2d41a:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2d41c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2d41e:	6803      	ldr	r3, [r0, #0]
   2d420:	1a5b      	subs	r3, r3, r1
}
   2d422:	1ad0      	subs	r0, r2, r3
   2d424:	4770      	bx	lr

0002d426 <net_buf_simple_add_mem>:
{
   2d426:	b538      	push	{r3, r4, r5, lr}
   2d428:	460d      	mov	r5, r1
   2d42a:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d42c:	4611      	mov	r1, r2
   2d42e:	f7f1 fe1d 	bl	1f06c <net_buf_simple_add>
   2d432:	4622      	mov	r2, r4
   2d434:	4629      	mov	r1, r5
}
   2d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2d43a:	f7fd bddc 	b.w	2aff6 <memcpy>

0002d43e <net_buf_simple_add_u8>:
{
   2d43e:	b510      	push	{r4, lr}
   2d440:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   2d442:	2101      	movs	r1, #1
   2d444:	f7f1 fe12 	bl	1f06c <net_buf_simple_add>
	*u8 = val;
   2d448:	7004      	strb	r4, [r0, #0]
}
   2d44a:	bd10      	pop	{r4, pc}

0002d44c <net_buf_simple_add_le16>:
{
   2d44c:	b510      	push	{r4, lr}
   2d44e:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2d450:	2102      	movs	r1, #2
   2d452:	f7f1 fe0b 	bl	1f06c <net_buf_simple_add>
	dst[0] = val;
   2d456:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2d458:	0a24      	lsrs	r4, r4, #8
   2d45a:	7044      	strb	r4, [r0, #1]
}
   2d45c:	bd10      	pop	{r4, pc}

0002d45e <set_on_state>:
	__asm__ volatile(
   2d45e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2d462:	f3ef 8211 	mrs	r2, BASEPRI
   2d466:	f383 8812 	msr	BASEPRI_MAX, r3
   2d46a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2d46e:	6803      	ldr	r3, [r0, #0]
   2d470:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2d474:	f043 0302 	orr.w	r3, r3, #2
   2d478:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2d47a:	f382 8811 	msr	BASEPRI, r2
   2d47e:	f3bf 8f6f 	isb	sy
}
   2d482:	4770      	bx	lr

0002d484 <async_start>:
{
   2d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d486:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2d488:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   2d48a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2d48c:	f04f 0540 	mov.w	r5, #64	; 0x40
   2d490:	f3ef 8611 	mrs	r6, BASEPRI
   2d494:	f385 8812 	msr	BASEPRI_MAX, r5
   2d498:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2d49c:	250c      	movs	r5, #12
   2d49e:	4369      	muls	r1, r5
   2d4a0:	440c      	add	r4, r1
   2d4a2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2d4a4:	f005 0c07 	and.w	ip, r5, #7
   2d4a8:	f1bc 0f01 	cmp.w	ip, #1
   2d4ac:	d10b      	bne.n	2d4c6 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2d4ae:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   2d4b0:	f386 8811 	msr	BASEPRI, r6
   2d4b4:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   2d4b8:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2d4bc:	6843      	ldr	r3, [r0, #4]
   2d4be:	585b      	ldr	r3, [r3, r1]
   2d4c0:	4798      	blx	r3
	return 0;
   2d4c2:	2000      	movs	r0, #0
}
   2d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2d4c6:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2d4ca:	42af      	cmp	r7, r5
   2d4cc:	f386 8811 	msr	BASEPRI, r6
   2d4d0:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   2d4d4:	bf0c      	ite	eq
   2d4d6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   2d4da:	f04f 30ff 	movne.w	r0, #4294967295
   2d4de:	e7f1      	b.n	2d4c4 <async_start+0x40>

0002d4e0 <api_start>:
{
   2d4e0:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2d4e2:	2480      	movs	r4, #128	; 0x80
   2d4e4:	9400      	str	r4, [sp, #0]
   2d4e6:	f7ff ffcd 	bl	2d484 <async_start>
}
   2d4ea:	b002      	add	sp, #8
   2d4ec:	bd10      	pop	{r4, pc}

0002d4ee <onoff_started_callback>:
	return &data->mgr[type];
   2d4ee:	6900      	ldr	r0, [r0, #16]
   2d4f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2d4f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2d4f6:	2100      	movs	r1, #0
   2d4f8:	4710      	bx	r2

0002d4fa <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2d4fa:	2000      	movs	r0, #0
   2d4fc:	f7f4 bebe 	b.w	2227c <nrfx_clock_start>

0002d500 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2d500:	2000      	movs	r0, #0
   2d502:	f7f4 bedb 	b.w	222bc <nrfx_clock_stop>

0002d506 <blocking_start_callback>:
{
   2d506:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2d508:	f7f6 bfd0 	b.w	244ac <z_impl_k_sem_give>

0002d50c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2d50c:	2280      	movs	r2, #128	; 0x80
   2d50e:	f7f1 be4d 	b.w	1f1ac <stop>

0002d512 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d512:	6843      	ldr	r3, [r0, #4]
   2d514:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2d516:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2d51a:	600b      	str	r3, [r1, #0]
}
   2d51c:	2000      	movs	r0, #0
   2d51e:	4770      	bx	lr

0002d520 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d520:	6843      	ldr	r3, [r0, #4]
   2d522:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   2d524:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   2d528:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   2d52c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d530:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2d534:	2000      	movs	r0, #0
   2d536:	4770      	bx	lr

0002d538 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d538:	6843      	ldr	r3, [r0, #4]
   2d53a:	685b      	ldr	r3, [r3, #4]
}
   2d53c:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2d53e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2d542:	4770      	bx	lr

0002d544 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d544:	6843      	ldr	r3, [r0, #4]
   2d546:	685b      	ldr	r3, [r3, #4]
}
   2d548:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2d54a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2d54e:	4770      	bx	lr

0002d550 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2d550:	6843      	ldr	r3, [r0, #4]
   2d552:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2d554:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   2d558:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   2d55c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   2d55e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   2d562:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   2d566:	2000      	movs	r0, #0
   2d568:	4770      	bx	lr

0002d56a <k_sem_give>:
   2d56a:	f7f6 bf9f 	b.w	244ac <z_impl_k_sem_give>

0002d56e <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   2d56e:	b918      	cbnz	r0, 2d578 <qspi_handler+0xa>
	k_sem_give(&dev_data->sync);
   2d570:	f101 0030 	add.w	r0, r1, #48	; 0x30
   2d574:	f7ff bff9 	b.w	2d56a <k_sem_give>
}
   2d578:	4770      	bx	lr

0002d57a <qspi_lock.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2d57a:	f04f 32ff 	mov.w	r2, #4294967295
   2d57e:	f04f 33ff 	mov.w	r3, #4294967295
   2d582:	3018      	adds	r0, #24
   2d584:	f7f6 bfcc 	b.w	24520 <z_impl_k_sem_take>

0002d588 <qspi_trans_lock.isra.0>:
   2d588:	f04f 32ff 	mov.w	r2, #4294967295
   2d58c:	f04f 33ff 	mov.w	r3, #4294967295
   2d590:	f7f6 bfc6 	b.w	24520 <z_impl_k_sem_take>

0002d594 <qspi_nor_write_protection_set>:
{
   2d594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct qspi_cmd cmd = {
   2d596:	2200      	movs	r2, #0
   2d598:	4291      	cmp	r1, r2
   2d59a:	bf0c      	ite	eq
   2d59c:	2306      	moveq	r3, #6
   2d59e:	2304      	movne	r3, #4
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2d5a0:	a901      	add	r1, sp, #4
	struct qspi_cmd cmd = {
   2d5a2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2d5a6:	9203      	str	r2, [sp, #12]
   2d5a8:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   2d5ac:	f7f2 f9fc 	bl	1f9a8 <qspi_send_cmd>
		ret = -EIO;
   2d5b0:	2800      	cmp	r0, #0
}
   2d5b2:	bf18      	it	ne
   2d5b4:	f06f 0004 	mvnne.w	r0, #4
   2d5b8:	b005      	add	sp, #20
   2d5ba:	f85d fb04 	ldr.w	pc, [sp], #4

0002d5be <qspi_rdsr.constprop.0>:
static int qspi_rdsr(const struct device *dev, uint8_t sr_num)
   2d5be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t sr = 0xFF;
   2d5c0:	23ff      	movs	r3, #255	; 0xff
   2d5c2:	f88d 3003 	strb.w	r3, [sp, #3]
	const struct qspi_buf sr_buf = {
   2d5c6:	f10d 0303 	add.w	r3, sp, #3
	struct qspi_cmd cmd = {
   2d5ca:	2200      	movs	r2, #0
	const struct qspi_buf sr_buf = {
   2d5cc:	9301      	str	r3, [sp, #4]
	struct qspi_cmd cmd = {
   2d5ce:	2301      	movs	r3, #1
   2d5d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2d5d4:	2305      	movs	r3, #5
   2d5d6:	f88d 300c 	strb.w	r3, [sp, #12]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2d5da:	a903      	add	r1, sp, #12
	struct qspi_cmd cmd = {
   2d5dc:	ab01      	add	r3, sp, #4
   2d5de:	9204      	str	r2, [sp, #16]
   2d5e0:	9305      	str	r3, [sp, #20]
	int ret = qspi_send_cmd(dev, &cmd, false);
   2d5e2:	f7f2 f9e1 	bl	1f9a8 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   2d5e6:	2800      	cmp	r0, #0
   2d5e8:	bfa8      	it	ge
   2d5ea:	f89d 0003 	ldrbge.w	r0, [sp, #3]
}
   2d5ee:	b007      	add	sp, #28
   2d5f0:	f85d fb04 	ldr.w	pc, [sp], #4

0002d5f4 <is_regular_addr_valid>:
{
   2d5f4:	b538      	push	{r3, r4, r5, lr}
   2d5f6:	4605      	mov	r5, r0
   2d5f8:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   2d5fa:	f000 fb1f 	bl	2dc3c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   2d5fe:	2d00      	cmp	r5, #0
   2d600:	db07      	blt.n	2d612 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   2d602:	42a8      	cmp	r0, r5
   2d604:	d905      	bls.n	2d612 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   2d606:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   2d608:	4284      	cmp	r4, r0
   2d60a:	bf8c      	ite	hi
   2d60c:	2000      	movhi	r0, #0
   2d60e:	2001      	movls	r0, #1
}
   2d610:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   2d612:	2000      	movs	r0, #0
   2d614:	e7fc      	b.n	2d610 <is_regular_addr_valid+0x1c>

0002d616 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   2d616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d618:	461c      	mov	r4, r3
   2d61a:	4616      	mov	r6, r2
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   2d61c:	2300      	movs	r3, #0
	const struct flash_driver_api *api = dev->api;
   2d61e:	6882      	ldr	r2, [r0, #8]
	info->start_offset = 0;
   2d620:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   2d622:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   2d624:	6913      	ldr	r3, [r2, #16]
{
   2d626:	460d      	mov	r5, r1
	api->page_layout(dev, &layout, &layout_size);
   2d628:	aa01      	add	r2, sp, #4
   2d62a:	4669      	mov	r1, sp
   2d62c:	4798      	blx	r3

	while (layout_size--) {
   2d62e:	9b01      	ldr	r3, [sp, #4]
   2d630:	1e5a      	subs	r2, r3, #1
   2d632:	9201      	str	r2, [sp, #4]
   2d634:	b91b      	cbnz	r3, 2d63e <flash_get_page_info+0x28>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   2d636:	f06f 0015 	mvn.w	r0, #21
}
   2d63a:	b003      	add	sp, #12
   2d63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info->size = layout->pages_size;
   2d63e:	9800      	ldr	r0, [sp, #0]
			index_jmp = index - info->index;
   2d640:	68a2      	ldr	r2, [r4, #8]
		info->size = layout->pages_size;
   2d642:	6847      	ldr	r7, [r0, #4]
			index_jmp = (offs - info->start_offset) / info->size;
   2d644:	6821      	ldr	r1, [r4, #0]
		info->size = layout->pages_size;
   2d646:	6067      	str	r7, [r4, #4]
		if (offs == 0) {
   2d648:	b985      	cbnz	r5, 2d66c <flash_get_page_info+0x56>
			index_jmp = index - info->index;
   2d64a:	1ab3      	subs	r3, r6, r2
		index_jmp = MIN(index_jmp, layout->pages_count);
   2d64c:	f8d0 c000 	ldr.w	ip, [r0]
   2d650:	4563      	cmp	r3, ip
   2d652:	bf28      	it	cs
   2d654:	4663      	movcs	r3, ip
		info->index += index_jmp;
   2d656:	441a      	add	r2, r3
		info->start_offset += (index_jmp * info->size);
   2d658:	fb03 1107 	mla	r1, r3, r7, r1
   2d65c:	6021      	str	r1, [r4, #0]
		info->index += index_jmp;
   2d65e:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   2d660:	6802      	ldr	r2, [r0, #0]
   2d662:	429a      	cmp	r2, r3
   2d664:	d806      	bhi.n	2d674 <flash_get_page_info+0x5e>
		layout++;
   2d666:	3008      	adds	r0, #8
   2d668:	9000      	str	r0, [sp, #0]
   2d66a:	e7e0      	b.n	2d62e <flash_get_page_info+0x18>
			index_jmp = (offs - info->start_offset) / info->size;
   2d66c:	1a6b      	subs	r3, r5, r1
   2d66e:	fbb3 f3f7 	udiv	r3, r3, r7
   2d672:	e7eb      	b.n	2d64c <flash_get_page_info+0x36>
			return 0;
   2d674:	2000      	movs	r0, #0
   2d676:	e7e0      	b.n	2d63a <flash_get_page_info+0x24>

0002d678 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2d678:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   2d67a:	2200      	movs	r2, #0
   2d67c:	f7ff bfcb 	b.w	2d616 <flash_get_page_info>

0002d680 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   2d680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   2d684:	6883      	ldr	r3, [r0, #8]
{
   2d686:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2d688:	691b      	ldr	r3, [r3, #16]
{
   2d68a:	4688      	mov	r8, r1
   2d68c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   2d68e:	a901      	add	r1, sp, #4
   2d690:	aa02      	add	r2, sp, #8
   2d692:	4798      	blx	r3
	off_t off = 0;
   2d694:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   2d696:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2d698:	4625      	mov	r5, r4
   2d69a:	9b02      	ldr	r3, [sp, #8]
   2d69c:	42ab      	cmp	r3, r5
   2d69e:	d802      	bhi.n	2d6a6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   2d6a0:	b006      	add	sp, #24
   2d6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   2d6a6:	9f01      	ldr	r7, [sp, #4]
   2d6a8:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2d6ac:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   2d6ae:	687b      	ldr	r3, [r7, #4]
   2d6b0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d6b2:	683a      	ldr	r2, [r7, #0]
   2d6b4:	42b2      	cmp	r2, r6
   2d6b6:	eb0a 0306 	add.w	r3, sl, r6
   2d6ba:	d802      	bhi.n	2d6c2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2d6bc:	3501      	adds	r5, #1
   2d6be:	469a      	mov	sl, r3
   2d6c0:	e7eb      	b.n	2d69a <flash_page_foreach+0x1a>
			page_info.start_offset = off;
   2d6c2:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2d6c4:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2d6c6:	4649      	mov	r1, r9
   2d6c8:	a803      	add	r0, sp, #12
   2d6ca:	47c0      	blx	r8
   2d6cc:	2800      	cmp	r0, #0
   2d6ce:	d0e7      	beq.n	2d6a0 <flash_page_foreach+0x20>
			off += page_info.size;
   2d6d0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   2d6d2:	3601      	adds	r6, #1
			off += page_info.size;
   2d6d4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   2d6d6:	e7ec      	b.n	2d6b2 <flash_page_foreach+0x32>

0002d6d8 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2d6d8:	6902      	ldr	r2, [r0, #16]
{
   2d6da:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2d6dc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2d6e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2d6e4:	2000      	movs	r0, #0
   2d6e6:	4770      	bx	lr

0002d6e8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d6e8:	6843      	ldr	r3, [r0, #4]
   2d6ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d6ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d6f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d6f4:	4770      	bx	lr

0002d6f6 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d6f6:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2d6f8:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2d6fa:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d6fc:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d700:	b150      	cbz	r0, 2d718 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
   2d702:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d704:	2000      	movs	r0, #0
   2d706:	7812      	ldrb	r2, [r2, #0]
   2d708:	700a      	strb	r2, [r1, #0]
   2d70a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d70e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d712:	2201      	movs	r2, #1
   2d714:	601a      	str	r2, [r3, #0]
	return 0;
   2d716:	4770      	bx	lr
		return -1;
   2d718:	f04f 30ff 	mov.w	r0, #4294967295
}
   2d71c:	4770      	bx	lr

0002d71e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2d71e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2d720:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d722:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d726:	b940      	cbnz	r0, 2d73a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2d728:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d72a:	079b      	lsls	r3, r3, #30
   2d72c:	d406      	bmi.n	2d73c <is_tx_ready.isra.0+0x1e>
   2d72e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2d732:	3800      	subs	r0, #0
   2d734:	bf18      	it	ne
   2d736:	2001      	movne	r0, #1
   2d738:	4770      	bx	lr
   2d73a:	2001      	movs	r0, #1
}
   2d73c:	4770      	bx	lr

0002d73e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2d73e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2d740:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2d742:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d746:	05c9      	lsls	r1, r1, #23
   2d748:	d518      	bpl.n	2d77c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d74a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d74e:	b1a9      	cbz	r1, 2d77c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2d750:	f04f 0040 	mov.w	r0, #64	; 0x40
   2d754:	f3ef 8111 	mrs	r1, BASEPRI
   2d758:	f380 8812 	msr	BASEPRI_MAX, r0
   2d75c:	f3bf 8f6f 	isb	sy
   2d760:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d764:	b130      	cbz	r0, 2d774 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d766:	2000      	movs	r0, #0
   2d768:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2d76c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d770:	2001      	movs	r0, #1
   2d772:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2d774:	f381 8811 	msr	BASEPRI, r1
   2d778:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d77c:	6852      	ldr	r2, [r2, #4]
   2d77e:	06d2      	lsls	r2, r2, #27
   2d780:	d515      	bpl.n	2d7ae <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2d782:	f04f 0140 	mov.w	r1, #64	; 0x40
   2d786:	f3ef 8211 	mrs	r2, BASEPRI
   2d78a:	f381 8812 	msr	BASEPRI_MAX, r1
   2d78e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d792:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d796:	b111      	cbz	r1, 2d79e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d798:	2100      	movs	r1, #0
   2d79a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2d79e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2d7a2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2d7a6:	f382 8811 	msr	BASEPRI, r2
   2d7aa:	f3bf 8f6f 	isb	sy
}
   2d7ae:	4770      	bx	lr

0002d7b0 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2d7b0:	b510      	push	{r4, lr}
   2d7b2:	2200      	movs	r2, #0
   2d7b4:	4604      	mov	r4, r0
   2d7b6:	2101      	movs	r1, #1
   2d7b8:	2028      	movs	r0, #40	; 0x28
   2d7ba:	f7e7 fa47 	bl	14c4c <z_arm_irq_priority_set>
   2d7be:	2028      	movs	r0, #40	; 0x28
   2d7c0:	f7e7 fa14 	bl	14bec <arch_irq_enable>
   2d7c4:	4620      	mov	r0, r4
   2d7c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d7ca:	f7f2 be43 	b.w	20454 <uarte_instance_init.constprop.0>

0002d7ce <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2d7ce:	b510      	push	{r4, lr}
   2d7d0:	2200      	movs	r2, #0
   2d7d2:	4604      	mov	r4, r0
   2d7d4:	2101      	movs	r1, #1
   2d7d6:	2002      	movs	r0, #2
   2d7d8:	f7e7 fa38 	bl	14c4c <z_arm_irq_priority_set>
   2d7dc:	2002      	movs	r0, #2
   2d7de:	f7e7 fa05 	bl	14bec <arch_irq_enable>
   2d7e2:	4620      	mov	r0, r4
   2d7e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d7e8:	f7f2 be34 	b.w	20454 <uarte_instance_init.constprop.0>

0002d7ec <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2d7ec:	2000      	movs	r0, #0
   2d7ee:	4770      	bx	lr

0002d7f0 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   2d7f0:	b538      	push	{r3, r4, r5, lr}
   2d7f2:	460c      	mov	r4, r1
   2d7f4:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2d7f6:	f7e9 fb8d 	bl	16f14 <bt_is_ready>
   2d7fa:	b128      	cbz	r0, 2d808 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2d7fc:	4629      	mov	r1, r5
   2d7fe:	4620      	mov	r0, r4
}
   2d800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   2d804:	f7e8 bdc4 	b.w	16390 <bt_hci_le_rand>
}
   2d808:	f06f 000a 	mvn.w	r0, #10
   2d80c:	bd38      	pop	{r3, r4, r5, pc}

0002d80e <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2d80e:	2200      	movs	r2, #0
{
   2d810:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2d812:	4611      	mov	r1, r2
   2d814:	4610      	mov	r0, r2
   2d816:	f7f9 fccf 	bl	271b8 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   2d81a:	2800      	cmp	r0, #0
	}

	return 0;
}
   2d81c:	bf18      	it	ne
   2d81e:	f06f 0015 	mvnne.w	r0, #21
   2d822:	bd08      	pop	{r3, pc}

0002d824 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2d824:	4770      	bx	lr

0002d826 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   2d826:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   2d828:	6843      	ldr	r3, [r0, #4]
   2d82a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2d82c:	7a05      	ldrb	r5, [r0, #8]
   2d82e:	6844      	ldr	r4, [r0, #4]
   2d830:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2d834:	42a3      	cmp	r3, r4
   2d836:	d302      	bcc.n	2d83e <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   2d838:	f06f 0001 	mvn.w	r0, #1
}
   2d83c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2d83e:	795c      	ldrb	r4, [r3, #5]
   2d840:	428c      	cmp	r4, r1
   2d842:	d001      	beq.n	2d848 <pinctrl_lookup_state+0x22>
		(*state)++;
   2d844:	3308      	adds	r3, #8
   2d846:	e7f0      	b.n	2d82a <pinctrl_lookup_state+0x4>
			return 0;
   2d848:	2000      	movs	r0, #0
   2d84a:	e7f7      	b.n	2d83c <pinctrl_lookup_state+0x16>

0002d84c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2d84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d850:	4615      	mov	r5, r2
   2d852:	b085      	sub	sp, #20
   2d854:	4682      	mov	sl, r0
   2d856:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d85a:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d85e:	45d0      	cmp	r8, sl
   2d860:	d103      	bne.n	2d86a <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2d862:	2000      	movs	r0, #0
}
   2d864:	b005      	add	sp, #20
   2d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2d86a:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2d86e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2d872:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   2d876:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2d878:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   2d87c:	bf08      	it	eq
   2d87e:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   2d882:	2b22      	cmp	r3, #34	; 0x22
   2d884:	f200 808e 	bhi.w	2d9a4 <pinctrl_configure_pins+0x158>
   2d888:	e8df f003 	tbb	[pc, r3]
   2d88c:	3a241f12 	.word	0x3a241f12
   2d890:	8c3a3627 	.word	0x8c3a3627
   2d894:	3d8c8c8c 	.word	0x3d8c8c8c
   2d898:	8c8c8c62 	.word	0x8c8c8c62
   2d89c:	8c8c8c8c 	.word	0x8c8c8c8c
   2d8a0:	6e658c8c 	.word	0x6e658c8c
   2d8a4:	8c8c7471 	.word	0x8c8c7471
   2d8a8:	807d778c 	.word	0x807d778c
   2d8ac:	8683      	.short	0x8683
   2d8ae:	89          	.byte	0x89
   2d8af:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   2d8b0:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d8b4:	a803      	add	r0, sp, #12
   2d8b6:	9403      	str	r4, [sp, #12]
   2d8b8:	f7f3 fa30 	bl	20d1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2d8bc:	9b03      	ldr	r3, [sp, #12]
   2d8be:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   2d8c2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   2d8c6:	2601      	movs	r6, #1
   2d8c8:	e002      	b.n	2d8d0 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   2d8ca:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d8ce:	2600      	movs	r6, #0
   2d8d0:	46b3      	mov	fp, r6
   2d8d2:	e01f      	b.n	2d914 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   2d8d4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2d8d8:	e7ec      	b.n	2d8b4 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2d8da:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d8de:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d8e0:	a803      	add	r0, sp, #12
   2d8e2:	9403      	str	r4, [sp, #12]
   2d8e4:	f7f3 fa1a 	bl	20d1c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2d8e8:	9b03      	ldr	r3, [sp, #12]
   2d8ea:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   2d8ee:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   2d8f2:	f04f 0b01 	mov.w	fp, #1
   2d8f6:	e00d      	b.n	2d914 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2d8f8:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2d8fc:	2601      	movs	r6, #1
   2d8fe:	e7ef      	b.n	2d8e0 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2d900:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   2d904:	e7e3      	b.n	2d8ce <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2d906:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2d90a:	2f00      	cmp	r7, #0
   2d90c:	d1df      	bne.n	2d8ce <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d90e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d910:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   2d912:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2d914:	f85a 3b04 	ldr.w	r3, [sl], #4
   2d918:	9301      	str	r3, [sp, #4]
   2d91a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d91e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2d920:	a803      	add	r0, sp, #12
   2d922:	bf1c      	itt	ne
   2d924:	2601      	movne	r6, #1
   2d926:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2d92a:	9403      	str	r4, [sp, #12]
   2d92c:	f7f3 f9f6 	bl	20d1c <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d930:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2d932:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d934:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   2d938:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2d93c:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d93e:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
   2d942:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2d946:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2d94a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d94e:	e786      	b.n	2d85e <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2d950:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2d954:	e7d9      	b.n	2d90a <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2d956:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2d95a:	f8da 3000 	ldr.w	r3, [sl]
   2d95e:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2d962:	2b00      	cmp	r3, #0
   2d964:	d0ca      	beq.n	2d8fc <pinctrl_configure_pins+0xb0>
   2d966:	e7a5      	b.n	2d8b4 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2d968:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2d96c:	e7f5      	b.n	2d95a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2d96e:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2d972:	e7f2      	b.n	2d95a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2d974:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   2d978:	e7ef      	b.n	2d95a <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2d97a:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d97e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d980:	f04f 0b00 	mov.w	fp, #0
   2d984:	e7c6      	b.n	2d914 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2d986:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2d98a:	e793      	b.n	2d8b4 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2d98c:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   2d990:	e7f5      	b.n	2d97e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2d992:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   2d996:	e7f2      	b.n	2d97e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2d998:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2d99c:	e7ef      	b.n	2d97e <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2d99e:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   2d9a2:	e7ec      	b.n	2d97e <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
   2d9a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2d9a8:	e75c      	b.n	2d864 <pinctrl_configure_pins+0x18>

0002d9aa <hci_driver_close>:
{
   2d9aa:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2d9ac:	f7f4 fb86 	bl	220bc <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2d9b0:	f04f 30ff 	mov.w	r0, #4294967295
   2d9b4:	f04f 31ff 	mov.w	r1, #4294967295
   2d9b8:	f7f3 fc90 	bl	212dc <multithreading_lock_acquire>
	if (err) {
   2d9bc:	4604      	mov	r4, r0
   2d9be:	b920      	cbnz	r0, 2d9ca <hci_driver_close+0x20>
	err = sdc_disable();
   2d9c0:	f7d2 ffcc 	bl	95c <sdc_disable>
	if (err) {
   2d9c4:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   2d9c6:	f7f3 fc91 	bl	212ec <multithreading_lock_release>
}
   2d9ca:	4620      	mov	r0, r4
   2d9cc:	bd10      	pop	{r4, pc}

0002d9ce <hci_driver_send>:
{
   2d9ce:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2d9d0:	8a03      	ldrh	r3, [r0, #16]
{
   2d9d2:	4605      	mov	r5, r0
	if (!buf->len) {
   2d9d4:	b373      	cbz	r3, 2da34 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2d9d6:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   2d9d8:	b1a3      	cbz	r3, 2da04 <hci_driver_send+0x36>
   2d9da:	2b02      	cmp	r3, #2
   2d9dc:	d12a      	bne.n	2da34 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2d9de:	f04f 30ff 	mov.w	r0, #4294967295
   2d9e2:	f04f 31ff 	mov.w	r1, #4294967295
   2d9e6:	f7f3 fc79 	bl	212dc <multithreading_lock_acquire>
	if (!errcode) {
   2d9ea:	4604      	mov	r4, r0
   2d9ec:	b940      	cbnz	r0, 2da00 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2d9ee:	68e8      	ldr	r0, [r5, #12]
   2d9f0:	f7df fd6e 	bl	d4d0 <sdc_hci_data_put>
   2d9f4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2d9f6:	f7f3 fc79 	bl	212ec <multithreading_lock_release>
		if (errcode) {
   2d9fa:	b1b4      	cbz	r4, 2da2a <hci_driver_send+0x5c>
			receive_signal_raise();
   2d9fc:	f7f3 fd90 	bl	21520 <receive_signal_raise>
}
   2da00:	4620      	mov	r0, r4
   2da02:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2da04:	f04f 30ff 	mov.w	r0, #4294967295
   2da08:	f04f 31ff 	mov.w	r1, #4294967295
   2da0c:	f7f3 fc66 	bl	212dc <multithreading_lock_acquire>
	if (!errcode) {
   2da10:	4604      	mov	r4, r0
   2da12:	2800      	cmp	r0, #0
   2da14:	d1f4      	bne.n	2da00 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   2da16:	68e8      	ldr	r0, [r5, #12]
   2da18:	f7f3 fe14 	bl	21644 <hci_internal_cmd_put>
   2da1c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2da1e:	f7f3 fc65 	bl	212ec <multithreading_lock_release>
	if (errcode) {
   2da22:	2c00      	cmp	r4, #0
   2da24:	d1ec      	bne.n	2da00 <hci_driver_send+0x32>
	receive_signal_raise();
   2da26:	f7f3 fd7b 	bl	21520 <receive_signal_raise>
		net_buf_unref(buf);
   2da2a:	4628      	mov	r0, r5
   2da2c:	f7f1 fa18 	bl	1ee60 <net_buf_unref>
   2da30:	2400      	movs	r4, #0
   2da32:	e7e5      	b.n	2da00 <hci_driver_send+0x32>
	switch (type) {
   2da34:	f06f 0415 	mvn.w	r4, #21
   2da38:	e7e2      	b.n	2da00 <hci_driver_send+0x32>

0002da3a <receive_work_handler>:
	hci_driver_receive_process();
   2da3a:	f7f3 bd99 	b.w	21570 <hci_driver_receive_process>

0002da3e <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[BT_ECB_BLOCK_SIZE],
		  const uint8_t plaintext[BT_ECB_BLOCK_SIZE],
		  uint8_t enc_data[BT_ECB_BLOCK_SIZE])
{
   2da3e:	b530      	push	{r4, r5, lr}
   2da40:	b08d      	sub	sp, #52	; 0x34
   2da42:	460c      	mov	r4, r1
	uint8_t enc_data_le[BT_ECB_BLOCK_SIZE];

	LOG_HEXDUMP_DBG(key, BT_ECB_BLOCK_SIZE, "key");
	LOG_HEXDUMP_DBG(plaintext, BT_ECB_BLOCK_SIZE, "plaintext");

	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2da44:	4601      	mov	r1, r0
   2da46:	4668      	mov	r0, sp
{
   2da48:	4615      	mov	r5, r2
	sys_memcpy_swap(key_le, key, BT_ECB_BLOCK_SIZE);
   2da4a:	f7f4 f9b3 	bl	21db4 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(plaintext_le, plaintext, BT_ECB_BLOCK_SIZE);
   2da4e:	4621      	mov	r1, r4
   2da50:	a804      	add	r0, sp, #16
   2da52:	f7f4 f9af 	bl	21db4 <sys_memcpy_swap.constprop.0>

	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2da56:	f04f 30ff 	mov.w	r0, #4294967295
   2da5a:	f04f 31ff 	mov.w	r1, #4294967295
   2da5e:	f7f3 fc3d 	bl	212dc <multithreading_lock_acquire>

	if (!errcode) {
   2da62:	4604      	mov	r4, r0
   2da64:	b960      	cbnz	r0, 2da80 <bt_encrypt_le+0x42>
		errcode = sdc_soc_ecb_block_encrypt(key_le, plaintext_le, enc_data_le);
   2da66:	aa08      	add	r2, sp, #32
   2da68:	a904      	add	r1, sp, #16
   2da6a:	4668      	mov	r0, sp
   2da6c:	f7df fa0c 	bl	ce88 <sdc_soc_ecb_block_encrypt>
   2da70:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2da72:	f7f3 fc3b 	bl	212ec <multithreading_lock_release>
	}

	if (!errcode) {
   2da76:	b91c      	cbnz	r4, 2da80 <bt_encrypt_le+0x42>
		sys_memcpy_swap(enc_data, enc_data_le, BT_ECB_BLOCK_SIZE);
   2da78:	a908      	add	r1, sp, #32
   2da7a:	4628      	mov	r0, r5
   2da7c:	f7f4 f99a 	bl	21db4 <sys_memcpy_swap.constprop.0>

		LOG_HEXDUMP_DBG(enc_data, BT_ECB_BLOCK_SIZE, "enc_data");
	}

	return errcode;
}
   2da80:	4620      	mov	r0, r4
   2da82:	b00d      	add	sp, #52	; 0x34
   2da84:	bd30      	pop	{r4, r5, pc}

0002da86 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2da86:	2100      	movs	r1, #0
   2da88:	f7f4 bb3a 	b.w	22100 <cmd_le_generate_dhkey>

0002da8c <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   2da8c:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2da90:	2901      	cmp	r1, #1
   2da92:	d801      	bhi.n	2da98 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   2da94:	f7f4 bb34 	b.w	22100 <cmd_le_generate_dhkey>
}
   2da98:	2012      	movs	r0, #18
   2da9a:	4770      	bx	lr

0002da9c <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2da9c:	4668      	mov	r0, sp
   2da9e:	f020 0107 	bic.w	r1, r0, #7
   2daa2:	468d      	mov	sp, r1
   2daa4:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2daa6:	f7dd fed1 	bl	b84c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2daaa:	f7e7 f8f9 	bl	14ca0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2daae:	f7e7 f9e1 	bl	14e74 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2dab2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dab6:	4685      	mov	sp, r0
   2dab8:	4770      	bx	lr

0002daba <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2daba:	4668      	mov	r0, sp
   2dabc:	f020 0107 	bic.w	r1, r0, #7
   2dac0:	468d      	mov	sp, r1
   2dac2:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2dac4:	f7dd fe38 	bl	b738 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2dac8:	f7e7 f8ea 	bl	14ca0 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2dacc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2dad0:	4685      	mov	sp, r0
   2dad2:	4770      	bx	lr

0002dad4 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2dad4:	4668      	mov	r0, sp
   2dad6:	f020 0107 	bic.w	r1, r0, #7
   2dada:	468d      	mov	sp, r1
   2dadc:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2dade:	f7db fb6d 	bl	91bc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2dae2:	f7e7 f8dd 	bl	14ca0 <_arch_isr_direct_pm>
   2dae6:	f7e7 f9c5 	bl	14e74 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2daea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2daee:	4685      	mov	sp, r0
   2daf0:	4770      	bx	lr

0002daf2 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   2daf2:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   2daf4:	f7e3 fb2c 	bl	11150 <mpsl_fem_init>

	return 0;
}
   2daf8:	2000      	movs	r0, #0
   2dafa:	bd08      	pop	{r3, pc}

0002dafc <nrfx_clock_enable>:
}
   2dafc:	4770      	bx	lr

0002dafe <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2dafe:	f7de bb43 	b.w	c188 <MPSL_IRQ_CLOCK_Handler>

0002db02 <nrf_flash_sync_is_required>:
	return mpsl_is_initialized();
   2db02:	f7de befd 	b.w	c900 <mpsl_is_initialized>

0002db06 <nrf_flash_sync_get_timestamp_begin>:
}
   2db06:	4770      	bx	lr

0002db08 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2db08:	f7f9 bb00 	b.w	2710c <nrf_cc3xx_platform_init>

0002db0c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   2db0c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2db0e:	f7e6 ff33 	bl	14978 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2db12:	f7e7 f807 	bl	14b24 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   2db16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2db1a:	f7f9 baf7 	b.w	2710c <nrf_cc3xx_platform_init>

0002db1e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2db1e:	4700      	bx	r0

0002db20 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2db20:	f000 b9f0 	b.w	2df04 <z_impl_k_busy_wait>

0002db24 <nrf_gpio_pin_present_check>:
    switch (port)
   2db24:	0943      	lsrs	r3, r0, #5
   2db26:	d00b      	beq.n	2db40 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   2db28:	2b01      	cmp	r3, #1
   2db2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2db2e:	bf18      	it	ne
   2db30:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2db32:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2db36:	fa23 f000 	lsr.w	r0, r3, r0
}
   2db3a:	f000 0001 	and.w	r0, r0, #1
   2db3e:	4770      	bx	lr
    switch (port)
   2db40:	f04f 33ff 	mov.w	r3, #4294967295
   2db44:	e7f5      	b.n	2db32 <nrf_gpio_pin_present_check+0xe>

0002db46 <pin_is_task_output>:
{
   2db46:	b508      	push	{r3, lr}
   2db48:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2db4a:	f7f4 fe53 	bl	227f4 <pin_is_output>
   2db4e:	b110      	cbz	r0, 2db56 <pin_is_task_output+0x10>
   2db50:	4610      	mov	r0, r2
   2db52:	f7f4 fe39 	bl	227c8 <pin_in_use_by_te>
}
   2db56:	f000 0001 	and.w	r0, r0, #1
   2db5a:	bd08      	pop	{r3, pc}

0002db5c <nrf_gpio_reconfigure>:
{
   2db5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2db60:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2db62:	a801      	add	r0, sp, #4
{
   2db64:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   2db68:	460c      	mov	r4, r1
   2db6a:	4617      	mov	r7, r2
   2db6c:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2db6e:	f7f4 fec1 	bl	228f4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2db72:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2db74:	1e39      	subs	r1, r7, #0
   2db76:	bf18      	it	ne
   2db78:	2101      	movne	r1, #1
   2db7a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2db7e:	1e23      	subs	r3, r4, #0
   2db80:	bf18      	it	ne
   2db82:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2db84:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2db86:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2db8a:	bf14      	ite	ne
   2db8c:	210c      	movne	r1, #12
   2db8e:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2db90:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2db92:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2db96:	bf14      	ite	ne
   2db98:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2db9c:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2db9e:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2dba2:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2dba6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2dbaa:	bf14      	ite	ne
   2dbac:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2dbb0:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2dbb2:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2dbb4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2dbb8:	b104      	cbz	r4, 2dbbc <nrf_gpio_reconfigure+0x60>
   2dbba:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2dbbc:	b10f      	cbz	r7, 2dbc2 <nrf_gpio_reconfigure+0x66>
   2dbbe:	783f      	ldrb	r7, [r7, #0]
   2dbc0:	007f      	lsls	r7, r7, #1
   2dbc2:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2dbc4:	b10e      	cbz	r6, 2dbca <nrf_gpio_reconfigure+0x6e>
   2dbc6:	7836      	ldrb	r6, [r6, #0]
   2dbc8:	00b6      	lsls	r6, r6, #2
   2dbca:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2dbcc:	b18d      	cbz	r5, 2dbf2 <nrf_gpio_reconfigure+0x96>
   2dbce:	7829      	ldrb	r1, [r5, #0]
   2dbd0:	0209      	lsls	r1, r1, #8
   2dbd2:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2dbd4:	f1b8 0f00 	cmp.w	r8, #0
   2dbd8:	d003      	beq.n	2dbe2 <nrf_gpio_reconfigure+0x86>
   2dbda:	f898 8000 	ldrb.w	r8, [r8]
   2dbde:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2dbe2:	4321      	orrs	r1, r4
   2dbe4:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   2dbe8:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   2dbec:	b002      	add	sp, #8
   2dbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2dbf2:	4629      	mov	r1, r5
   2dbf4:	e7ed      	b.n	2dbd2 <nrf_gpio_reconfigure+0x76>

0002dbf6 <nrf_gpio_cfg_sense_set>:
{
   2dbf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2dbf8:	f10d 030f 	add.w	r3, sp, #15
   2dbfc:	9301      	str	r3, [sp, #4]
   2dbfe:	2300      	movs	r3, #0
{
   2dc00:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2dc04:	9300      	str	r3, [sp, #0]
   2dc06:	461a      	mov	r2, r3
   2dc08:	4619      	mov	r1, r3
   2dc0a:	f7ff ffa7 	bl	2db5c <nrf_gpio_reconfigure>
}
   2dc0e:	b005      	add	sp, #20
   2dc10:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc14 <is_valid_address>:
{
   2dc14:	4603      	mov	r3, r0
   2dc16:	4608      	mov	r0, r1
   2dc18:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2dc1c:	690a      	ldr	r2, [r1, #16]
    return p_reg->CODESIZE;
   2dc1e:	6949      	ldr	r1, [r1, #20]
    return flash_page_size_get() * flash_page_count_get();
   2dc20:	434a      	muls	r2, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2dc22:	4293      	cmp	r3, r2
   2dc24:	d308      	bcc.n	2dc38 <is_valid_address+0x24>
    if (uicr_allowed &&
   2dc26:	b140      	cbz	r0, 2dc3a <is_valid_address+0x26>
        (addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
   2dc28:	f1a3 2310 	sub.w	r3, r3, #268439552	; 0x10001000
    if (uicr_allowed &&
   2dc2c:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
   2dc30:	bf2c      	ite	cs
   2dc32:	2000      	movcs	r0, #0
   2dc34:	2001      	movcc	r0, #1
   2dc36:	4770      	bx	lr
        return true;
   2dc38:	2001      	movs	r0, #1
}
   2dc3a:	4770      	bx	lr

0002dc3c <nrfx_nvmc_flash_size_get>:
    return p_reg->CODEPAGESIZE;
   2dc3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2dc40:	691a      	ldr	r2, [r3, #16]
    return p_reg->CODESIZE;
   2dc42:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   2dc44:	4350      	muls	r0, r2
   2dc46:	4770      	bx	lr

0002dc48 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   2dc48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2dc4c:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   2dc4e:	4770      	bx	lr

0002dc50 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   2dc50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2dc54:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   2dc56:	4770      	bx	lr

0002dc58 <nrf_gpio_cfg_default>:
{
   2dc58:	b507      	push	{r0, r1, r2, lr}
   2dc5a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2dc5c:	a801      	add	r0, sp, #4
   2dc5e:	f7f5 fa09 	bl	23074 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2dc62:	9b01      	ldr	r3, [sp, #4]
   2dc64:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2dc68:	2202      	movs	r2, #2
   2dc6a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   2dc6e:	b003      	add	sp, #12
   2dc70:	f85d fb04 	ldr.w	pc, [sp], #4

0002dc74 <nrfx_qspi_write>:
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   2dc74:	2302      	movs	r3, #2
   2dc76:	f7f5 ba27 	b.w	230c8 <qspi_xfer>

0002dc7a <nrfx_qspi_read>:
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   2dc7a:	2303      	movs	r3, #3
   2dc7c:	f7f5 ba24 	b.w	230c8 <qspi_xfer>

0002dc80 <nrfx_qspi_chip_erase>:
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   2dc80:	2100      	movs	r1, #0
   2dc82:	2002      	movs	r0, #2
   2dc84:	f7f5 bd08 	b.w	23698 <nrfx_qspi_erase>

0002dc88 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2dc88:	f7f5 bd7e 	b.w	23788 <_DoInit>

0002dc8c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2dc8c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2dc8e:	f7ff fffb 	bl	2dc88 <SEGGER_RTT_Init>

	return 0;
}
   2dc92:	2000      	movs	r0, #0
   2dc94:	bd08      	pop	{r3, pc}

0002dc96 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   2dc96:	4770      	bx	lr

0002dc98 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2dc98:	b140      	cbz	r0, 2dcac <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2dc9a:	68c3      	ldr	r3, [r0, #12]
   2dc9c:	7858      	ldrb	r0, [r3, #1]
   2dc9e:	f010 0001 	ands.w	r0, r0, #1
   2dca2:	bf1e      	ittt	ne
   2dca4:	7818      	ldrbne	r0, [r3, #0]
   2dca6:	fab0 f080 	clzne	r0, r0
   2dcaa:	0940      	lsrne	r0, r0, #5
}
   2dcac:	4770      	bx	lr

0002dcae <z_early_memset>:
	(void) memset(dst, c, n);
   2dcae:	f7fd b9ad 	b.w	2b00c <memset>

0002dcb2 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2dcb2:	f7fd b9a0 	b.w	2aff6 <memcpy>

0002dcb6 <k_heap_init>:
{
   2dcb6:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2dcb8:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2dcbc:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2dcc0:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2dcc2:	f7e4 bb63 	b.w	1238c <sys_heap_init>

0002dcc6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2dcc6:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   2dcca:	4313      	orrs	r3, r2
   2dccc:	f013 0303 	ands.w	r3, r3, #3
   2dcd0:	d10c      	bne.n	2dcec <create_free_list+0x26>
	slab->free_list = NULL;
   2dcd2:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2dcd4:	68c1      	ldr	r1, [r0, #12]
   2dcd6:	4299      	cmp	r1, r3
   2dcd8:	d801      	bhi.n	2dcde <create_free_list+0x18>
	return 0;
   2dcda:	2000      	movs	r0, #0
   2dcdc:	4770      	bx	lr
		*(char **)p = slab->free_list;
   2dcde:	6981      	ldr	r1, [r0, #24]
   2dce0:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2dce2:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2dce4:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2dce6:	3301      	adds	r3, #1
		p += slab->block_size;
   2dce8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2dcea:	e7f3      	b.n	2dcd4 <create_free_list+0xe>
		return -EINVAL;
   2dcec:	f06f 0015 	mvn.w	r0, #21
}
   2dcf0:	4770      	bx	lr

0002dcf2 <k_mem_slab_init>:
{
   2dcf2:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   2dcf4:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   2dcf8:	2300      	movs	r3, #0
	slab->buffer = buffer;
   2dcfa:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   2dcfc:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2dcfe:	6083      	str	r3, [r0, #8]
{
   2dd00:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   2dd02:	f7ff ffe0 	bl	2dcc6 <create_free_list>
	if (rc < 0) {
   2dd06:	2800      	cmp	r0, #0
   2dd08:	bfa8      	it	ge
   2dd0a:	e9c4 4400 	strdge	r4, r4, [r4]
}
   2dd0e:	bd10      	pop	{r4, pc}

0002dd10 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2dd10:	f3ef 8005 	mrs	r0, IPSR
}
   2dd14:	3800      	subs	r0, #0
   2dd16:	bf18      	it	ne
   2dd18:	2001      	movne	r0, #1
   2dd1a:	4770      	bx	lr

0002dd1c <z_impl_k_thread_name_set>:
}
   2dd1c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2dd20:	4770      	bx	lr

0002dd22 <k_thread_name_get>:
}
   2dd22:	2000      	movs	r0, #0
   2dd24:	4770      	bx	lr

0002dd26 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2dd26:	f7f7 ba53 	b.w	251d0 <z_sched_start>

0002dd2a <z_pm_save_idle_exit>:
{
   2dd2a:	b508      	push	{r3, lr}
	pm_system_resume();
   2dd2c:	f7e6 f830 	bl	13d90 <pm_system_resume>
}
   2dd30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2dd34:	f7ff bd76 	b.w	2d824 <sys_clock_idle_exit>

0002dd38 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2dd38:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2dd3c:	428b      	cmp	r3, r1
   2dd3e:	d001      	beq.n	2dd44 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2dd40:	f7f7 bcc0 	b.w	256c4 <z_set_prio>
}
   2dd44:	2000      	movs	r0, #0
   2dd46:	4770      	bx	lr

0002dd48 <z_impl_k_mutex_init>:
{
   2dd48:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2dd4a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2dd4c:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2dd50:	e9c3 3300 	strd	r3, r3, [r3]
}
   2dd54:	4770      	bx	lr

0002dd56 <z_queue_node_peek>:
{
   2dd56:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2dd58:	4604      	mov	r4, r0
   2dd5a:	b130      	cbz	r0, 2dd6a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dd5c:	6802      	ldr	r2, [r0, #0]
   2dd5e:	0793      	lsls	r3, r2, #30
   2dd60:	d003      	beq.n	2dd6a <z_queue_node_peek+0x14>
		ret = anode->data;
   2dd62:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2dd64:	b109      	cbz	r1, 2dd6a <z_queue_node_peek+0x14>
			k_free(anode);
   2dd66:	f000 f994 	bl	2e092 <k_free>
}
   2dd6a:	4620      	mov	r0, r4
   2dd6c:	bd10      	pop	{r4, pc}

0002dd6e <z_impl_k_queue_init>:
	list->head = NULL;
   2dd6e:	2300      	movs	r3, #0
	list->tail = NULL;
   2dd70:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2dd74:	6083      	str	r3, [r0, #8]
   2dd76:	f100 030c 	add.w	r3, r0, #12
   2dd7a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2dd7e:	f100 0314 	add.w	r3, r0, #20
   2dd82:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2dd86:	4770      	bx	lr

0002dd88 <k_queue_append>:
{
   2dd88:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2dd8a:	2301      	movs	r3, #1
   2dd8c:	9300      	str	r3, [sp, #0]
   2dd8e:	2300      	movs	r3, #0
{
   2dd90:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2dd92:	4619      	mov	r1, r3
   2dd94:	f7f6 faaa 	bl	242ec <queue_insert>
}
   2dd98:	b003      	add	sp, #12
   2dd9a:	f85d fb04 	ldr.w	pc, [sp], #4

0002dd9e <k_queue_prepend>:
{
   2dd9e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2dda0:	2300      	movs	r3, #0
{
   2dda2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2dda4:	9300      	str	r3, [sp, #0]
   2dda6:	4619      	mov	r1, r3
   2dda8:	f7f6 faa0 	bl	242ec <queue_insert>
}
   2ddac:	b003      	add	sp, #12
   2ddae:	f85d fb04 	ldr.w	pc, [sp], #4

0002ddb2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2ddb2:	b15a      	cbz	r2, 2ddcc <z_impl_k_sem_init+0x1a>
   2ddb4:	428a      	cmp	r2, r1
   2ddb6:	d309      	bcc.n	2ddcc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2ddb8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2ddbc:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2ddc0:	e9c0 0000 	strd	r0, r0, [r0]
   2ddc4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2ddc8:	2000      	movs	r0, #0
   2ddca:	4770      	bx	lr
		return -EINVAL;
   2ddcc:	f06f 0015 	mvn.w	r0, #21
}
   2ddd0:	4770      	bx	lr

0002ddd2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2ddd2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2ddd4:	2301      	movs	r3, #1
   2ddd6:	408b      	lsls	r3, r1
   2ddd8:	ea22 0303 	bic.w	r3, r2, r3
   2dddc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2ddde:	fa22 f001 	lsr.w	r0, r2, r1
}
   2dde2:	f000 0001 	and.w	r0, r0, #1
   2dde6:	4770      	bx	lr

0002dde8 <unschedule_locked>:
{
   2dde8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ddea:	2103      	movs	r1, #3
{
   2ddec:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2ddee:	300c      	adds	r0, #12
   2ddf0:	f7ff ffef 	bl	2ddd2 <flag_test_and_clear>
   2ddf4:	4604      	mov	r4, r0
   2ddf6:	b118      	cbz	r0, 2de00 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2ddf8:	f105 0010 	add.w	r0, r5, #16
   2ddfc:	f7f8 f982 	bl	26104 <z_abort_timeout>
}
   2de00:	4620      	mov	r0, r4
   2de02:	bd38      	pop	{r3, r4, r5, pc}

0002de04 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2de04:	b120      	cbz	r0, 2de10 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2de06:	2200      	movs	r2, #0
   2de08:	4611      	mov	r1, r2
   2de0a:	3088      	adds	r0, #136	; 0x88
   2de0c:	f7f7 bfe4 	b.w	25dd8 <z_sched_wake>
}
   2de10:	4770      	bx	lr

0002de12 <cancel_async_locked>:
{
   2de12:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2de14:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2de16:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2de1a:	079b      	lsls	r3, r3, #30
{
   2de1c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2de1e:	d416      	bmi.n	2de4e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2de20:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2de22:	2102      	movs	r1, #2
   2de24:	300c      	adds	r0, #12
   2de26:	f7ff ffd4 	bl	2ddd2 <flag_test_and_clear>
   2de2a:	b180      	cbz	r0, 2de4e <cancel_async_locked+0x3c>
	return list->head;
   2de2c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2de30:	b16a      	cbz	r2, 2de4e <cancel_async_locked+0x3c>
   2de32:	4294      	cmp	r4, r2
   2de34:	d11d      	bne.n	2de72 <cancel_async_locked+0x60>
	return node->next;
   2de36:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2de38:	b99e      	cbnz	r6, 2de62 <cancel_async_locked+0x50>
   2de3a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   2de3e:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2de42:	429c      	cmp	r4, r3
   2de44:	d101      	bne.n	2de4a <cancel_async_locked+0x38>
	list->tail = node;
   2de46:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   2de4a:	2300      	movs	r3, #0
   2de4c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2de4e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2de50:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2de54:	bf1e      	ittt	ne
   2de56:	f043 0302 	orrne.w	r3, r3, #2
   2de5a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2de5c:	f040 0002 	orrne.w	r0, r0, #2
}
   2de60:	bd70      	pop	{r4, r5, r6, pc}
   2de62:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2de64:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   2de68:	4294      	cmp	r4, r2
	list->tail = node;
   2de6a:	bf08      	it	eq
   2de6c:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   2de70:	e7eb      	b.n	2de4a <cancel_async_locked+0x38>
	return node->next;
   2de72:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2de74:	6812      	ldr	r2, [r2, #0]
   2de76:	e7db      	b.n	2de30 <cancel_async_locked+0x1e>

0002de78 <k_work_submit_to_queue>:
{
   2de78:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   2de7a:	f7f6 fdfb 	bl	24a74 <z_work_submit_to_queue>
	if (ret > 0) {
   2de7e:	1e04      	subs	r4, r0, #0
   2de80:	dd09      	ble.n	2de96 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2de82:	f04f 0340 	mov.w	r3, #64	; 0x40
   2de86:	f3ef 8011 	mrs	r0, BASEPRI
   2de8a:	f383 8812 	msr	BASEPRI_MAX, r3
   2de8e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2de92:	f000 f80d 	bl	2deb0 <z_reschedule_irqlock>
}
   2de96:	4620      	mov	r0, r4
   2de98:	bd10      	pop	{r4, pc}

0002de9a <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   2de9a:	f7f6 bdb7 	b.w	24a0c <k_work_busy_get>

0002de9e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2de9e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2dea2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2dea6:	4283      	cmp	r3, r0
		return b2 - b1;
   2dea8:	bf14      	ite	ne
   2deaa:	1ac0      	subne	r0, r0, r3
	return 0;
   2deac:	2000      	moveq	r0, #0
}
   2deae:	4770      	bx	lr

0002deb0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2deb0:	4603      	mov	r3, r0
   2deb2:	b920      	cbnz	r0, 2debe <z_reschedule_irqlock+0xe>
   2deb4:	f3ef 8205 	mrs	r2, IPSR
   2deb8:	b90a      	cbnz	r2, 2debe <z_reschedule_irqlock+0xe>
   2deba:	f7e6 bf1f 	b.w	14cfc <arch_swap>
	__asm__ volatile(
   2debe:	f383 8811 	msr	BASEPRI, r3
   2dec2:	f3bf 8f6f 	isb	sy
}
   2dec6:	4770      	bx	lr

0002dec8 <z_reschedule_unlocked>:
	__asm__ volatile(
   2dec8:	f04f 0340 	mov.w	r3, #64	; 0x40
   2decc:	f3ef 8011 	mrs	r0, BASEPRI
   2ded0:	f383 8812 	msr	BASEPRI_MAX, r3
   2ded4:	f3bf 8f6f 	isb	sy
   2ded8:	f7ff bfea 	b.w	2deb0 <z_reschedule_irqlock>

0002dedc <z_unpend_all>:
{
   2dedc:	b538      	push	{r3, r4, r5, lr}
   2dede:	4605      	mov	r5, r0
	int need_sched = 0;
   2dee0:	2000      	movs	r0, #0
	return list->head == list;
   2dee2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2dee4:	42a5      	cmp	r5, r4
   2dee6:	d000      	beq.n	2deea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2dee8:	b904      	cbnz	r4, 2deec <z_unpend_all+0x10>
}
   2deea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2deec:	4620      	mov	r0, r4
   2deee:	f7f7 fcd9 	bl	258a4 <z_unpend_thread>
		z_ready_thread(thread);
   2def2:	4620      	mov	r0, r4
   2def4:	f7f7 f904 	bl	25100 <z_ready_thread>
		need_sched = 1;
   2def8:	2001      	movs	r0, #1
   2defa:	e7f2      	b.n	2dee2 <z_unpend_all+0x6>

0002defc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2defc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2defe:	f7f8 fa73 	bl	263e8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2df02:	bd08      	pop	{r3, pc}

0002df04 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2df04:	b108      	cbz	r0, 2df0a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2df06:	f7e7 bbe1 	b.w	156cc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2df0a:	4770      	bx	lr

0002df0c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2df0c:	f1b1 3fff 	cmp.w	r1, #4294967295
   2df10:	bf08      	it	eq
   2df12:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2df16:	b538      	push	{r3, r4, r5, lr}
   2df18:	460c      	mov	r4, r1
   2df1a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2df1c:	d014      	beq.n	2df48 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2df1e:	4308      	orrs	r0, r1
   2df20:	d103      	bne.n	2df2a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2df22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2df26:	f7f8 ba5f 	b.w	263e8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2df2a:	f06f 0001 	mvn.w	r0, #1
   2df2e:	1b40      	subs	r0, r0, r5
   2df30:	f04f 33ff 	mov.w	r3, #4294967295
   2df34:	eb63 0101 	sbc.w	r1, r3, r1
   2df38:	2900      	cmp	r1, #0
   2df3a:	da04      	bge.n	2df46 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   2df3c:	f7f8 fa54 	bl	263e8 <sys_clock_tick_get>
   2df40:	1940      	adds	r0, r0, r5
   2df42:	eb41 0104 	adc.w	r1, r1, r4
}
   2df46:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2df48:	f04f 30ff 	mov.w	r0, #4294967295
   2df4c:	4601      	mov	r1, r0
   2df4e:	e7fa      	b.n	2df46 <sys_clock_timeout_end_calc+0x3a>

0002df50 <add_event>:
{
   2df50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df52:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2df54:	e9d0 1300 	ldrd	r1, r3, [r0]
   2df58:	4288      	cmp	r0, r1
   2df5a:	4604      	mov	r4, r0
   2df5c:	d105      	bne.n	2df6a <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   2df5e:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2df60:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2df64:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2df66:	6065      	str	r5, [r4, #4]
   2df68:	e01d      	b.n	2dfa6 <add_event+0x56>
	if ((pending == NULL) ||
   2df6a:	2b00      	cmp	r3, #0
   2df6c:	d0f7      	beq.n	2df5e <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2df6e:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2df70:	b100      	cbz	r0, 2df74 <add_event+0x24>
   2df72:	3860      	subs	r0, #96	; 0x60
   2df74:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2df78:	4639      	mov	r1, r7
   2df7a:	f7ff ff90 	bl	2de9e <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2df7e:	2800      	cmp	r0, #0
   2df80:	dced      	bgt.n	2df5e <add_event+0xe>
	return list->head == list;
   2df82:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2df84:	42b4      	cmp	r4, r6
   2df86:	d0ea      	beq.n	2df5e <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2df88:	2e00      	cmp	r6, #0
   2df8a:	d0e8      	beq.n	2df5e <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   2df8c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2df8e:	b101      	cbz	r1, 2df92 <add_event+0x42>
   2df90:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2df92:	4638      	mov	r0, r7
   2df94:	f7ff ff83 	bl	2de9e <z_sched_prio_cmp>
   2df98:	2800      	cmp	r0, #0
   2df9a:	dd05      	ble.n	2dfa8 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   2df9c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2df9e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2dfa2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2dfa4:	6075      	str	r5, [r6, #4]
}
   2dfa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2dfa8:	6863      	ldr	r3, [r4, #4]
   2dfaa:	429e      	cmp	r6, r3
   2dfac:	d0d7      	beq.n	2df5e <add_event+0xe>
   2dfae:	6836      	ldr	r6, [r6, #0]
   2dfb0:	e7ea      	b.n	2df88 <add_event+0x38>

0002dfb2 <signal_poll_event>:
{
   2dfb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2dfb6:	6884      	ldr	r4, [r0, #8]
{
   2dfb8:	4605      	mov	r5, r0
   2dfba:	460e      	mov	r6, r1
	if (poller != NULL) {
   2dfbc:	b144      	cbz	r4, 2dfd0 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2dfbe:	7863      	ldrb	r3, [r4, #1]
   2dfc0:	2b01      	cmp	r3, #1
   2dfc2:	d12e      	bne.n	2e022 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2dfc4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2dfc8:	f013 0302 	ands.w	r3, r3, #2
   2dfcc:	d10a      	bne.n	2dfe4 <signal_poll_event+0x32>
		poller->is_polling = false;
   2dfce:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2dfd0:	68eb      	ldr	r3, [r5, #12]
   2dfd2:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2dfd6:	4316      	orrs	r6, r2
	event->poller = NULL;
   2dfd8:	2000      	movs	r0, #0
	event->state |= state;
   2dfda:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   2dfde:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2dfe0:	60eb      	str	r3, [r5, #12]
	return retcode;
   2dfe2:	e03e      	b.n	2e062 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2dfe4:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2dfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
   2dfec:	bf08      	it	eq
   2dfee:	f112 0f02 	cmneq.w	r2, #2
   2dff2:	d032      	beq.n	2e05a <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2dff4:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2dff8:	4640      	mov	r0, r8
   2dffa:	f7f7 fc53 	bl	258a4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2dffe:	2e08      	cmp	r6, #8
   2e000:	bf0c      	ite	eq
   2e002:	f06f 0303 	mvneq.w	r3, #3
   2e006:	2300      	movne	r3, #0
   2e008:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2e00a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2e00e:	06db      	lsls	r3, r3, #27
   2e010:	d109      	bne.n	2e026 <signal_poll_event+0x74>
   2e012:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2e016:	b937      	cbnz	r7, 2e026 <signal_poll_event+0x74>
	z_ready_thread(thread);
   2e018:	4640      	mov	r0, r8
   2e01a:	f7f7 f871 	bl	25100 <z_ready_thread>
		poller->is_polling = false;
   2e01e:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2e020:	e7d6      	b.n	2dfd0 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2e022:	2b02      	cmp	r3, #2
   2e024:	d001      	beq.n	2e02a <signal_poll_event+0x78>
		poller->is_polling = false;
   2e026:	2300      	movs	r3, #0
   2e028:	e7d1      	b.n	2dfce <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2e02a:	7823      	ldrb	r3, [r4, #0]
   2e02c:	2b00      	cmp	r3, #0
   2e02e:	d0cf      	beq.n	2dfd0 <signal_poll_event+0x1e>
   2e030:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2e034:	2f00      	cmp	r7, #0
   2e036:	d0f2      	beq.n	2e01e <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2e038:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2e03c:	f1a4 0914 	sub.w	r9, r4, #20
   2e040:	f104 0014 	add.w	r0, r4, #20
   2e044:	f7f8 f85e 	bl	26104 <z_abort_timeout>
		twork->poll_result = 0;
   2e048:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   2e04c:	4649      	mov	r1, r9
   2e04e:	4638      	mov	r0, r7
   2e050:	f7f6 fd10 	bl	24a74 <z_work_submit_to_queue>
		poller->is_polling = false;
   2e054:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2e058:	e7ba      	b.n	2dfd0 <signal_poll_event+0x1e>
		poller->is_polling = false;
   2e05a:	2300      	movs	r3, #0
   2e05c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2e05e:	f06f 000a 	mvn.w	r0, #10
}
   2e062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e066 <z_handle_obj_poll_events>:
{
   2e066:	4603      	mov	r3, r0
	return list->head == list;
   2e068:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e06a:	4283      	cmp	r3, r0
   2e06c:	d008      	beq.n	2e080 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2e06e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2e072:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e074:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e076:	2300      	movs	r3, #0
	node->prev = NULL;
   2e078:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2e07c:	f7ff bf99 	b.w	2dfb2 <signal_poll_event>
}
   2e080:	4770      	bx	lr

0002e082 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2e082:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2e084:	e9c0 0000 	strd	r0, r0, [r0]
   2e088:	6083      	str	r3, [r0, #8]
}
   2e08a:	4770      	bx	lr

0002e08c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2e08c:	2300      	movs	r3, #0
   2e08e:	6083      	str	r3, [r0, #8]
}
   2e090:	4770      	bx	lr

0002e092 <k_free>:
	if (ptr != NULL) {
   2e092:	b120      	cbz	r0, 2e09e <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2e094:	1f01      	subs	r1, r0, #4
   2e096:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2e09a:	f7f5 bda3 	b.w	23be4 <k_heap_free>
}
   2e09e:	4770      	bx	lr

0002e0a0 <k_malloc>:
{
   2e0a0:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   2e0a2:	2004      	movs	r0, #4
   2e0a4:	f7f8 bc82 	b.w	269ac <k_aligned_alloc>

0002e0a8 <k_calloc>:
{
   2e0a8:	b570      	push	{r4, r5, r6, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   2e0aa:	fba0 5401 	umull	r5, r4, r0, r1
   2e0ae:	b924      	cbnz	r4, 2e0ba <k_calloc+0x12>
	ret = k_malloc(bounds);
   2e0b0:	4628      	mov	r0, r5
   2e0b2:	f7ff fff5 	bl	2e0a0 <k_malloc>
	if (ret != NULL) {
   2e0b6:	4606      	mov	r6, r0
   2e0b8:	b910      	cbnz	r0, 2e0c0 <k_calloc+0x18>
		return NULL;
   2e0ba:	2600      	movs	r6, #0
}
   2e0bc:	4630      	mov	r0, r6
   2e0be:	bd70      	pop	{r4, r5, r6, pc}
		(void)memset(ret, 0, bounds);
   2e0c0:	462a      	mov	r2, r5
   2e0c2:	4621      	mov	r1, r4
   2e0c4:	f7fc ffa2 	bl	2b00c <memset>
   2e0c8:	e7f8      	b.n	2e0bc <k_calloc+0x14>

0002e0ca <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2e0ca:	4770      	bx	lr
